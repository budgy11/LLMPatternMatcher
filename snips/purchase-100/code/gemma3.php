
<?php
session_start();

// Initialize cart data if not already set
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}


// ---  Shopping Cart Operations ---

// 1. Add to Cart (Handle POST request)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1; // Default quantity is 1
    add_to_cart($product_id, $product_name, $price, $quantity);
  } elseif (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $new_quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 0;
    update_cart_quantity($product_id, $new_quantity);
  } elseif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
  }
}



// --- Display the Cart ---

// Get cart contents
$cart_contents = get_cart_contents();

// Calculate total price
$total_price = 0;
if (count($cart_contents) > 0) {
  foreach ($cart_contents as $item_id => $item_data) {
    $total_price += $item_data['price'] * $item_data['quantity'];
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
      border: 1px solid #ddd;
      padding: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>

    <table id="cart-table">
      <thead>
        <tr>
          <th>Product</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Subtotal</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_contents as $item_id => $item_data): ?>
          <tr class="cart-item">
            <td><?php echo $item_data['name']; ?></td>
            <td><?php echo number_format($item_data['price'], 2); ?></td>
            <td><?php echo $item_data['quantity']; ?></td>
            <td><?php echo number_format($item_data['price'] * $item_data['quantity'], 2); ?></td>
            <td>
              <a href="?action=remove_from_cart&product_id=<?php echo $item_id; ?>">Remove</a>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <p><strong>Total:</strong> <?php echo number_format($total_price, 2); ?></p>
  <?php endif; ?>

  <hr>

  <h2>Add to Cart</h2>
  <?php if (empty($cart_contents)): ?>
    <p>No products to add.</p>
  <?php else: ?>

    <?php
    // Example product data (replace with your actual product data)
    $products = [
      1 => ['name' => 'Laptop', 'price' => 1200],
      2 => ['name' => 'Mouse', 'price' => 25],
      3 => ['name' => 'Keyboard', 'price' => 75]
    ];

    foreach ($products as $product_id => $product_data):
      echo '<form method="post" action="">
              <label for="product_id_'.$product_id.'">Product: <input type="hidden" name="product_id" value="'.$product_id.'">';
      echo '<input type="text" name="product_name" value="' . $product_data['name'] . '" readonly>';
      echo '<input type="number" name="price" value="' . $product_data['price'] . '" readonly>
              <label for="quantity">Quantity:</label>
              <input type="number" name="quantity" value="1" min="1" max="10" id="quantity">
              <input type="submit" name="action" value="add_to_cart">
            </form><br>';
    endforeach; ?>

  <?php endif; ?>
</body>
</html>


<?php

// Database configuration (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cartItems, $customerName, $customerEmail, $customerAddress) {
    $conn = connectToDatabase();

    // Insert order into the database
    $sql = "INSERT INTO orders (customer_name, customer_email, customer_address, order_date)
            VALUES ('" . $conn->real_escape_string($customerName) . "',
                    '" . $conn->real_escape_string($customerEmail) . "',
                    '" . $conn->real_escape_string($customerAddress) . "',
                    NOW())";

    if (!$conn->query($sql)) {
        echo "Error inserting order: " . $conn->error;
        return false;
    }

    $orderId = $conn->insert_id; // Get the last inserted order ID

    // Insert order items into the order_items table
    foreach ($cartItems as $item) {
        $sql = "INSERT INTO order_items (order_id, product_id, quantity)
                VALUES (" . $conn->real_escape_string($orderId) . ",
                        " . $conn->real_escape_string($item['product_id']) . ",
                        " . $conn->real_escape_string($item['quantity']) . ")";

        if (!$conn->query($sql)) {
            echo "Error inserting order item: " . $conn->error;
            // Handle the error appropriately (e.g., logging, redirecting)
            return false; // Consider returning false on error
        }
    }

    // Update the product quantity in the products table (Decrement Quantity)
    foreach ($cartItems as $item) {
        $sql = "UPDATE products
                SET quantity = quantity - " . $item['quantity'] . "
                WHERE id = " . $item['product_id'];

        if (!$conn->query($sql)) {
            echo "Error updating product quantity: " . $conn->error;
            // Handle the error appropriately
            return false;
        }
    }


    echo "Purchase successful! Order ID: " . $orderId;
    return true;
}


// Example usage (This part would be in your form handling code)
// Assuming you have a form that collects customer data and cart items
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $customerName = $_POST["customer_name"];
    $customerEmail = $_POST["customer_email"];
    $customerAddress = $_POST["customer_address"];

    $cartItems = array();
    if (isset($_POST['cart_items'])) {
        $cartItems = $_POST['cart_items'];
    }

    // Handle the purchase
    if (handlePurchase($cartItems, $customerName, $customerEmail, $customerAddress)) {
        // Redirect to a success page or display a success message
        echo "<p>Your order has been placed successfully!</p>";
    } else {
        // Handle purchase failure (e.g., display an error message)
        echo "<p>An error occurred during the purchase.</p>";
    }
}


// Example HTML Form (for demonstration - place this in your HTML)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Add to Cart Example</h1>

<form method="post" action="">

    <label for="product1">Product 1:</label>
    <input type="number" id="product1" name="cart_items[0]" value="1" min="1"> <br><br>

    <label for="product2">Product 2:</label>
    <input type="number" id="product2" name="cart_items[1]" value="1" min="1"> <br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Sanitize input data to prevent SQL injection
    $product_name = $_POST["product_name"];
    $quantity = (int)$_POST["quantity"]; // Cast to integer
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];

    // Validate input (add more robust validation as needed)
    if (empty($product_name) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
        $error = "All fields are required.";
    } elseif (!is_numeric($quantity) || $quantity <= 0) {
        $error = "Quantity must be a positive number.";
    } else {
        // Prepare SQL query to insert data
        $sql = "INSERT INTO orders (product_name, quantity, customer_name, customer_email)
                VALUES ('$product_name', $quantity, '$customer_name', '$customer_email')";

        if ($conn->query($sql)) {
            $success = "Order placed successfully!";
        } else {
            $error = "Error: " . $conn->error;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Order</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>


<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerceshop";
$db_user = "root";
$db_password = "";

// Create database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize inputs
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];

  // Input validation - Add more robust validation here for production
  if (!is_numeric($product_id) || !is_numeric($quantity) || $quantity <= 0) {
    $error = "Invalid product ID or quantity.";
  } else {
    // Add the order to the database
    $sql = "INSERT INTO orders (product_id, quantity) VALUES ('$product_id', '$quantity')";

    if ($conn->query($sql)) {
      $success = "Order placed successfully!";
    } else {
      $error = "Error: " . $conn->error;
    }
  }
}

// Retrieve product details - This is for displaying on the purchase page
$product_id = $_POST["product_id"];
$sql = "SELECT * FROM products WHERE id = '$product_id'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
  $product = $result->fetch_assoc();
  $product_name = $product["name"];
  $product_price = $product["price"];
} else {
  $product_name = "Product Not Found";
  $product_price = 0;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <h2><?php echo $product_name; ?></h2>
  <p>Price: $<?php echo number_format($product_price, 2); ?></p>

  <form method="post">
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required>
    <button type="submit">Purchase</button>
  </form>

  <p><a href="index.php">Back to Home</a></p>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// Replace these placeholders with your actual connection details

// Database credentials
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Form handling (for POST data)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (essential for security!)
    $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0;
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;
    $customer_name = isset($_POST["customer_name"]) ? htmlspecialchars($_POST["customer_name"]) : "";
    $customer_email = isset($_POST["customer_email"]) ? htmlspecialchars($_POST["customer_email"]) : "";

    // Check if product ID is valid
    if ($product_id <= 0) {
        $error = "Invalid product ID.";
    } elseif ($quantity <= 0) {
        $error = "Invalid quantity.";
    } else {

        // Connect to the database
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL query
        $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email)
                VALUES (?, ?, ?, ?)";

        // Prepare statement
        $stmt = $conn->prepare($sql);

        // Bind parameters (important for security - prevents SQL injection)
        $stmt->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);

        // Execute the query
        if ($stmt->execute()) {
            $success = "Order placed successfully!";
        } else {
            $error = "Order placement failed: " . $stmt->error;
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
        <p style="color: green;"><?php echo $success; ?></p>
    <?php } ?>


    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1" required>
        <br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required>
        <br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required>
        <br><br>

        <button type="submit">Place Order</button>
    </form>

    <br>

    <h2>Order History (Example - Replace with your actual database query)</h2>
    <?php
    //This is just an example, replace with your query.
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT * FROM orders";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h3>Order History:</h3>";
        while($row = $result->fetch_assoc()) {
            echo "<div>Product ID: " . $row["product_id"] . ", Quantity: " . $row["quantity"] . ", Customer Name: " . $row["customer_name"] . ", Customer Email: " . $row["customer_email"] . "</div>";
        }
    } else {
        echo "No orders found.";
    }
    $conn->close();
    ?>

</body>
</html>


<?php

// Sample product data (replace with a database connection)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Session handling (for cart persistence)
session_start();

// Initialize cart if not already present
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart) {
    if (!is_numeric($productId) || $productId <= 0) {
        return false; // Invalid product ID
    }

    if (!isset($cart[$productId])) {
        return false; // Product not found
    }

    if (!is_numeric($quantity) || $quantity <= 0) {
        return false; // Invalid quantity
    }

    $cart[$productId] = $cart[$productId] + $quantity;
    return true;
}

// Function to remove an item from the cart
function removeFromCart($productId, $cart) {
    if (!is_numeric($productId) || $productId <= 0) {
        return false; // Invalid product ID
    }

    if (!isset($cart[$productId]) || $cart[$productId] <= 0) {
        return false; // Product not found or already empty
    }

    $cart[$productId] -= $quantity = $cart[$productId];
    if ($cart[$productId] == 0) {
        unset($cart[$productId]);
    }
    return true;
}


// Function to calculate the cart total
function calculateCartTotal($cart) {
    $total = 0;
    foreach ($cart as $productId => $quantity) {
        if (isset($products[$productId])) {
            $total += $products[$productId]['price'] * $quantity;
        }
    }
    return $total;
}


// Handle Add to Cart request (POST)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id'];  // Cast to integer for safety
    $quantity = (int)$_POST['quantity']; // Cast to integer for safety

    if (addToCart($productId, $quantity, $_SESSION['cart'])) {
        echo "<p style='color: green;'>Item added to cart.</p>";
    } else {
        echo "<p style='color: red;'>Failed to add item to cart.</p>";
    }
}


// Handle Remove from Cart request (POST)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id'];

    if (removeFromCart($productId, $_SESSION['cart'])) {
        echo "<p style='color: green;'>Item removed from cart.</p>";
    } else {
        echo "<p style='color: red;'>Failed to remove item from cart.</p>";
    }
}

// Display the Cart
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        echo "<li>";
        echo "Product: " . $products[$productId]['name'] . " - Quantity: " . $quantity . " - Price: $" . $products[$productId]['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . calculateCartTotal($_SESSION['cart']) . "</strong></p>";
}

?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}

// Function to add a new order to the database
function addOrder($userId, $items) {
    $conn = connectToDatabase();

    // Prepare the SQL query
    $sql = "INSERT INTO orders (user_id, order_date, items) VALUES (?, NOW(), ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind the parameters
    $stmt->bind_param("is", $userId, json_encode($items));

    // Execute the statement
    if ($stmt->execute()) {
        return $stmt->insert_id; // Return the ID of the newly created order
    } else {
        return false;
    }

    // Close the statement and connection
    $stmt->close();
    $conn->close();
}

// Function to display products (for demonstration purposes)
function displayProducts() {
    // Replace this with your database query to fetch products
    $products = [
        ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
        ['id' => 2, 'name' => 'Mouse', 'price' => 25],
        ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
    ];

    echo "<h2>Available Products:</h2>";
    echo "<ul>";
    foreach ($products as $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}


// Handle the purchase request
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the user ID (replace with your actual user authentication)
    $userId = $_POST["user_id"];

    // Get the items to purchase (assuming a JSON format)
    $itemsString = $_POST["items"];
    $items = json_decode($itemsString, true);  // Decode JSON into an associative array

    // Validate user ID (add more robust validation as needed)
    if (!is_numeric($userId)) {
        echo "<p style='color:red;'>Invalid User ID.</p>";
    } else {
        // Add the order to the database
        $orderId = addOrder($userId, $items);

        if ($orderId) {
            echo "<p style='color:green;'>Order placed successfully! Order ID: " . $orderId . "</p>";
        } else {
            echo "<p style='color:red;'>Failed to place order.</p>";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Items</h1>

    <h2>Available Products:</h2>
    <?php displayProducts(); ?>

    <form method="post">
        <label for="user_id">User ID:</label>
        <input type="text" id="user_id" name="user_id" required><br><br>

        <label for="items">Items to Purchase (JSON format - e.g., [{"id": 1, "quantity": 2}, {"id": 2, "quantity": 1}])</label><br>
        <textarea id="items" name="items" rows="5" cols="50" required></textarea><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Ensure you have a database named 'ecommerce' created.
//  It should have at least two tables:
//  - products (id, name, price, description)
//  - orders (id, customer_name, order_date, total_amount)
//  - order_items (order_id, product_id, quantity)


// 1. Purchase Functionality (add_to_cart.php - Example)

// Assuming this is called from a form
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate input (VERY IMPORTANT - Add more robust validation here)
    if (!is_numeric($product_id) || !is_numeric($quantity) || $quantity <= 0) {
        echo "Invalid input. Please check the product ID and quantity.";
        exit;
    }


    // --------------------
    //  Example:  Add to Cart Logic (Simplified -  Needs more robust implementation)
    //  This is just a placeholder.  You'll need to store the cart information
    //  somewhere (e.g., in a session, a cookie, or a database table).
    // --------------------
    //  Here, we'll just echo the info for demonstration purposes.
    echo "Product ID: " . $product_id . "<br>";
    echo "Quantity: " . $quantity . "<br>";

    // In a real application, you would:
    // 1.  Retrieve the existing cart data (if any).
    // 2.  Add the new item to the cart.
    // 3.  Store the updated cart data.

    // For demonstration, let's just add a placeholder record to the order_items table.
    // WARNING: This is NOT a production-ready solution.  It's just for illustration.

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, " . $product_id . ", " . $quantity . ")";

    if ($conn->query($sql) === TRUE) {
        echo "<p>Product added to cart.</p>";
    } else {
        echo "<p>Error adding product to cart: " . $conn->error . "</p>";
    }

    $conn->close();
}

// 2.  Checkout Functionality (checkout.php - Example)

// (This is a simplified example -  A real checkout needs secure payment processing)

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get data from the form (product_ids, quantities, customer_name)
    $product_ids = $_POST["product_ids"];
    $quantities = $_POST["quantities"];
    $customer_name = $_POST["customer_name"];

    // Validate input
    if (!is_array($product_ids) || !is_array($quantities) || !is_numeric($customer_name)) {
        echo "Invalid input.  Please check the form data.";
        exit;
    }


    // Calculate the total amount
    $total_amount = 0;
    foreach ($product_ids as $index => $product_id) {
        // Get product price from the products table
        $sql = "SELECT price FROM products WHERE id = " . $product_id;
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $price = $row["price"];
            $total_amount += $price * $quantities[$index];
        } else {
            echo "Product ID " . $product_id . " not found.";
            exit; // Or handle the error appropriately
        }
    }

    // Insert into the orders table
    // Generate a unique order ID (e.g., using a timestamp or auto-increment)
    $order_id = date("YmdHis"); // Simple timestamp

    $sql = "INSERT INTO orders (customer_name, order_date, total_amount) VALUES ('" . $customer_name . "', '" . date("YmdHis") . "', " . $total_amount . ")";

    if ($conn->query($sql) === TRUE) {
        echo "Order placed successfully! Order ID: " . $order_id . "<br>";
    } else {
        echo "Error placing order: " . $conn->error . "<br>";
    }

    // (Important)  Clear the cart after placing the order.
    //  You can do this in a session, cookie, or database.
    //  For this example, we'll just print a message.
    echo "Your cart is now cleared.";

    $conn->close();
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>E-commerce Purchase</title>
</head>
<body>

<h1>E-commerce Purchase</h1>

<h2>Add to Cart (add_to_cart.php)</h2>
<form method="post" action="add_to_cart.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Add to Cart</button>
</form>

<h2>Checkout (checkout.php)</h2>
<form method="post" action="checkout.php">
    <label for="product_ids">Product IDs (comma-separated):</label>
    <input type="text" id="product_ids" name="product_ids" required><br><br>

    <label for="quantities">Quantities (comma-separated):</label>
    <input type="text" id="quantities" name="quantities" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <button type="submit">Checkout</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'ecommerce_db';
$dbUser = 'your_username';
$dbPassword = 'your_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (important for security!)
  $firstName = isset($_POST['firstName']) ? trim($_POST['firstName']) : '';
  $lastName = isset($_POST['lastName']) ? trim($_POST['lastName']) : '';
  $email = isset($_POST['email']) ? trim($_POST['email']) : '';
  $address = isset($_POST['address']) ? trim($_POST['address']) : '';
  $city = isset($_POST['city']) ? trim($_POST['city']) : '';
  $state = isset($_POST['state']) ? trim($_POST['state']) : '';
  $zip = isset($_POST['zip']) ? trim($_POST['zip']) : '';
  $productName = isset($_POST['productName']) ? trim($_POST['productName']) : '';
  $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Ensure quantity is an integer
  // Add more validation here (e.g., email format, quantity > 0, etc.)


  // Check if the product exists in the database (example)
  $productQuery = "SELECT id, productName, price FROM products WHERE productName = '$productName'";
  $productResult = mysqli_query($db, $productQuery);

  if ($productResult && mysqli_num_rows($productResult) > 0) {
    $product = mysqli_fetch_assoc($productResult);
    $productId = $product['id'];
    $productPrice = $product['price'];

    // Calculate the total amount
    $totalAmount = $productPrice * $quantity;

    // Insert the order into the database
    $orderQuery = "INSERT INTO orders (customerFirstName, customerLastName, customerEmail, customerAddress, customerCity, customerState, customerZip, productId, quantity, totalAmount)
                   VALUES ('$firstName', '$lastName', '$email', '$address', '$city', '$state', '$zip', '$productId', '$quantity', '$totalAmount')";

    if (mysqli_query($db, $orderQuery)) {
      // Order created successfully
      echo "<p>Order placed successfully! Thank you for your purchase.</p>";
      echo "<p>Order ID: " . mysqli_insert_id($db) . "</p>";
    } else {
      echo "<p>Error placing order.</p>";
      echo "<p>Error: " . mysqli_error($db) . "</p>";
    }
  } else {
    echo "<p>Product '$productName' not found.</p>";
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Purchase Form</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="firstName">First Name:</label>
    <input type="text" id="firstName" name="firstName" placeholder="Enter your first name" value="<?php echo isset($firstName) ? htmlspecialchars($firstName) : ''; ?>">
    <br><br>

    <label for="lastName">Last Name:</label>
    <input type="text" id="lastName" name="lastName" placeholder="Enter your last name" value="<?php echo isset($lastName) ? htmlspecialchars($lastName) : ''; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Enter your email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <br><br>

    <label for="address">Address:</label>
    <input type="text" id="address" name="address" placeholder="Enter your address" value="<?php echo isset($address) ? htmlspecialchars($address) : ''; ?>">
    <br><br>

    <label for="city">City:</label>
    <input type="text" id="city" name="city" placeholder="Enter your city" value="<?php echo isset($city) ? htmlspecialchars($city) : ''; ?>">
    <br><br>

    <label for="state">State:</label>
    <input type="text" id="state" name="state" placeholder="Enter your state" value="<?php echo isset($state) ? htmlspecialchars($state) : ''; ?>">
    <br><br>

    <label for="zip">Zip Code:</label>
    <input type="text" id="zip" name="zip" placeholder="Enter your zip code" value="<?php echo isset($zip) ? htmlspecialchars($zip) : ''; ?>">
    <br><br>

    <label for="productName">Product Name:</label>
    <input type="text" id="productName" name="productName" placeholder="Enter product name" value="<?php echo isset($productName) ? htmlspecialchars($productName) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" value="<?php echo isset($quantity) ? htmlspecialchars($quantity) : '1'; ?>">
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";

// Database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Function to handle adding a cart item
function addCartItem($conn, $userId, $productId, $quantity) {
    // Sanitize input - ALWAYS do this!
    $productId = mysqli_real_escape_string($conn, $productId);
    $quantity = mysqli_real_escape_string($conn, intval($quantity)); // Ensure quantity is an integer

    // Check if the product already exists in the cart for this user
    $query = "SELECT * FROM cart WHERE user_id = '$userId' AND product_id = '$productId'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Product already in cart - Update the quantity
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE user_id = '$userId' AND product_id = '$productId'";
        if (!$conn->query($query)) {
            echo "Error updating cart: " . $conn->error;
        }
    } else {
        // Product not in cart - Add a new entry
        $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$userId', '$productId', $quantity)";
        if (!$conn->query($query)) {
            echo "Error adding to cart: " . $conn->error;
        }
    }
}


// Function to handle removing a cart item
function removeCartItem($conn, $userId, $productId) {
    // Sanitize input
    $productId = mysqli_real_escape_string($conn, $productId);

    // Delete the cart entry
    $query = "DELETE FROM cart WHERE user_id = '$userId' AND product_id = '$productId'";

    if (!$conn->query($query)) {
        echo "Error deleting from cart: " . $conn->error;
    }
}


// Function to update cart quantity
function updateCartQuantity($conn, $userId, $productId, $newQuantity) {
    //Sanitize input
    $productId = mysqli_real_escape_string($conn, $productId);
    $newQuantity = mysqli_real_escape_string($conn, intval($newQuantity));

    //Update quantity
    $query = "UPDATE cart SET quantity = $newQuantity WHERE user_id = '$userId' AND product_id = '$productId'";

    if (!$conn->query($query)) {
        echo "Error updating quantity: " . $conn->error;
    }
}

// --- Purchase Handling (Simple Example) ---

// Assume a 'purchases' table exists:  `purchases (purchase_id, user_id, purchase_date)`
// And a 'purchase_items' table: `purchase_items (purchase_id, product_id, quantity)`

function completePurchase($conn, $userId, $productIds, $quantities) {
    // Generate a purchase ID (simplified for demonstration)
    $purchaseId = time();  //Using the timestamp as a unique ID.  In a real application, use a sequence.

    // Generate the purchase items
    $productItemStrings = [];
    foreach($productIds as $productId => $quantity){
        $productItemStrings[] = "($purchaseId, $productId, $quantity)";
    }

    $productItemStrings = implode(',', $productItemStrings);

    // Insert purchase record
    $queryPurchase = "INSERT INTO purchases (user_id, purchase_date) VALUES ('$userId', NOW())";
    if (!$conn->query($queryPurchase)) {
        echo "Error inserting purchase: " . $conn->error;
        return false;
    }

    // Insert purchase items
    $queryItems = "INSERT INTO purchase_items (purchase_id, product_id, quantity) VALUES $productItemStrings";
    if (!$conn->query($queryItems)) {
        echo "Error inserting purchase items: " . $conn->error;
        return false;
    }

    return true; // Purchase completed successfully
}

?>


// Example data (replace with actual user/product IDs)
$userId = 123;
$productIds = [
    1 => 2, // Product ID 1, quantity 2
    2 => 5, // Product ID 2, quantity 5
];
$quantities = $productIds; //Same keys as productIds

// Add items to the cart
addCartItem($conn, $userId, 1, 3);
addCartItem($conn, $userId, 2, 1);

// Complete the purchase
if (completePurchase($conn, $userId, $productIds, $quantities)) {
    echo "Purchase completed successfully!";
} else {
    echo "Purchase failed.";
}

// Close the database connection (important!)
$conn->close();


<?php
session_start();

// Database connection (replace with your actual database credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] = ['name' => $item_name, 'price' => $price, 'quantity' => $quantity];
    } else {
        $_SESSION['cart'][$item_id]['quantity'] += $quantity;
    }
}

// Function to update cart item quantity
function update_cart_quantity($item_id, $quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $quantity;
    }
}


// Function to remove item from cart
function remove_from_cart($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}


// Function to get cart items
function get_cart_items() {
    return $_SESSION['cart'];
}

// Function to calculate cart total
function calculate_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Handle add to cart action
if (isset($_POST['add_to_cart'])) {
    $item_id = $_POST['item_id'];
    $item_name = $_POST['item_name'];
    $price = $_POST['price'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
    add_to_cart($item_id, $item_name, $price, $quantity);
}

// Handle update quantity action
if (isset($_POST['update_quantity'])) {
  $item_id = $_POST['item_id'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 0;
  update_cart_quantity($item_id, $quantity);
}

// Handle remove from cart action
if (isset($_POST['remove_from_cart'])) {
    $item_id = $_POST['item_id'];
    remove_from_cart($item_id);
}

// Get cart items to display
$cart_items = get_cart_items();

// Calculate cart total
$total = calculate_cart_total();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body {
            font-family: sans-serif;
        }
        .cart-item {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        .cart-total {
            text-align: right;
            font-weight: bold;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <table id="cart_table">
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr class="cart-item">
                    <td><?php echo $item['name']; ?></td>
                    <td><?php echo number_format($item['price'], 2); ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td><?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
                    <td>
                        <a href="?action=remove&item_id=<?php echo $item['item_id']; ?>">Remove</a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

    <div class="cart-total">
        Total: <?php echo number_format($total, 2); ?>
    </div>
<?php endif; ?>

</body>
</html>


<?php

// Database connection details (Replace with your actual values)
$db_host = "localhost";
$db_user = "your_db_user";
$db_password = "your_db_password";
$db_name = "your_db_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (Important for security)
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $product_name = filter_input(INPUT_POST, "product_name", FILTER_SANITIZE_STRING); //Example for getting product name

  // Basic validation
  if (empty($name) || empty($email) || empty($quantity) || empty($product_name)) {
    $error_message = "Please fill in all fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error_message = "Please enter a valid email address.";
  } elseif ($quantity <= 0) {
    $error_message = "Quantity must be a positive number.";
  } else {
    // Process the purchase
    // 1.  Insert into a Purchases table (Example)
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    $sql = "INSERT INTO purchases (name, email, quantity, product_name) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if (!$stmt->prepare($sql)) {
      die("Prepare failed: " . $stmt->error);
    }


    $stmt->bind_param("ssii", $name, $email, $quantity, $product_name);

    if (!$stmt->execute()) {
      die("Execute failed: " . $stmt->error);
    }

    $purchase_id = $conn->insert_id;

    $stmt->close();
    $conn->close();

    // Display success message
    echo "<div class='success'>Purchase successful! Purchase ID: " . $purchase_id . "</div>";

  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
  <style>
    .success {
      color: green;
      margin-top: 10px;
    }
    .error {
      color: red;
      margin-top: 10px;
    }
  </style>
</head>
<body>

  <h2>Purchase Product</h2>

  <?php if (isset($error_message)) { ?>
    <div class="error"><?php echo $error_message; ?></div>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the form data
    $name = $_POST["name"];
    $email = $_POST["email"];
    $quantity = $_POST["quantity"];
    $product = $_POST["product"];

    // Validate the data (basic example - you should enhance this)
    if (empty($name) || empty($email) || empty($quantity) || empty($product)) {
        $error = "All fields are required.";
    } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // Process the purchase (e.g., save to a database)
        $purchase_data = array(
            "name" => $name,
            "email" => $email,
            "quantity" => $quantity,
            "product" => $product,
            "timestamp" => date("Y-m-d H:i:s")  // Add a timestamp
        );

        // Save to a file (for demonstration)
        $file = "purchases.txt";
        $data_string = json_encode($purchase_data);
        file_put_contents($file, $data_string . PHP_EOL, FILE_APPEND);  // Append to the file

        // Display a success message
        echo "<p>Your order has been placed successfully!</p>";
        echo "<p>Order Details: " . $data_string . "</p>";
    }
} else {
    // If the form wasn't submitted via POST, redirect to the form
    header("Location: purchase_form.html");
    exit();
}
?>


<?php

// Database Configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_username";
$db_password = "your_password";

// Connect to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Function to add a purchase to the database
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
    global $conn;

    // Sanitize input (Important for security - prevent SQL injection)
    $product_id = $conn->real_escape_string($product_id);
    $quantity = $conn->real_escape_string($quantity);
    $customer_name = $conn->real_escape_string($customer_name);
    $customer_email = $conn->real_escape_string($customer_email);


    $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) 
            VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Function to update product quantity
function updateProductQuantity($product_id, $quantity) {
    global $conn;

    // Sanitize input
    $product_id = $conn->real_escape_string($product_id);
    $quantity = $conn->real_escape_string($quantity);

    // Check if the product exists
    $check_query = "SELECT id FROM products WHERE id = '$product_id'";
    $result = $conn->query($check_query);

    if ($result->num_rows > 0) {
        $sql = "UPDATE products SET stock_quantity = stock_quantity - '$quantity' WHERE id = '$product_id'";

        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    } else {
        return false; // Product doesn't exist
    }
}

// --------------------  Example Usage (for demonstration) --------------------

// 1. Handle Purchase Request (e.g., from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];

    // 2. Add Purchase to Database
    if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {
        echo "<p>Purchase successful!  Product ID: " . $product_id . ", Quantity: " . $quantity . "</p>";

        // 3. Update Product Quantity
        if (updateProductQuantity($product_id, $quantity)) {
            echo "<p>Product quantity updated successfully.</p>";
        } else {
            echo "<p>Error updating product quantity.</p>";
        }
    } else {
        echo "<p>Error adding purchase to database.</p>";
    }
}

// --------------------  Database Setup (Example - create tables) --------------------
// You'll need to run this SQL script separately (e.g., using a database management tool)
/*
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0
);

CREATE TABLE purchases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Example data
INSERT INTO products (product_name, description, price, stock_quantity) VALUES
('Laptop', 'High-performance laptop', 1200.00, 10),
('Mouse', 'Wireless mouse', 25.00, 50);
*/


?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Make a Purchase</h1>

    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>
        <br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required>
        <br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required>
        <br><br>

        <button type="submit">Place Order</button>
    </form>

</body>
</html>


<?php

// Database configuration (replace with your actual values)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'root';
$db_password = '';

// Start the session
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // User not logged in
    }

    // Build the query
    $sql = "INSERT INTO cart (user_id, product_id, quantity) 
            VALUES ('" . $_SESSION['user_id'] . "', '" . $product_id . "', '" . $quantity . "')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
    $conn->close();
}

// Function to get the cart contents
function getCartContents() {
    $conn = connectToDatabase();
    $sql = "SELECT p.product_name, p.price, c.quantity 
            FROM cart c 
            JOIN products p ON c.product_id = p.product_id 
            WHERE c.user_id = '" . $_SESSION['user_id'] . "'";
    $result = $conn->query($sql);

    $cart_items = array();
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
    }
    $conn->close();
    return $cart_items;
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    $conn = connectToDatabase();

    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // User not logged in
    }

    // Build the query
    $sql = "DELETE FROM cart WHERE user_id = '" . $_SESSION['user_id'] . "' AND product_id = '" . $product_id . "'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
    $conn->close();
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    $conn = connectToDatabase();

    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // User not logged in
    }

    // Build the query
    $sql = "UPDATE cart SET quantity = '" . $quantity . "' WHERE user_id = '" . $_SESSION['user_id'] . "' AND product_id = '" . $product_id . "'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
    $conn->close();
}


// Handle adding to cart (example - can be triggered from a button click)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
}


// Handle removing from cart (example - can be triggered from a button click)
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
}

// Handle updating quantity (example - can be triggered from a button click)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateQuantity($product_id, $quantity);
}



// Display the cart contents
$cart_items = getCartContents();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <table class="cart-items">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php
            $total = 0;
            foreach ($cart_items as $item) {
                $total += $item['price'] * $item['quantity'];
                echo '<tr class="cart-item">';
                echo '<td>' . $item['product_name'] . '</td>';
                echo '<td>' . $item['price'] . '</td>';
                echo '<td>' . $item['quantity'] . '</td>';
                echo '<td>' . $item['price'] * $item['quantity'] . '</td>';
                echo '<td><button onclick="removeFromCart(' . $item['product_id'] . ')">Remove</button></td>';
                echo '</tr>';
            }
            ?>
        </tbody>
    </table>
    <p>Total: <?php echo $total; ?></p>
<?php endif; ?>

</body>
</html>


<?php

// Database connection (SQLite)
$db_file = 'purchase.db';

// Ensure the database file exists.  Create it if not.
if (!file_exists($db_file)) {
    $sql = "CREATE TABLE purchases (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_name TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        price REAL NOT NULL,
        purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP
    )";
    $conn = new SQLite3($db_file);
    $conn->exec($sql);
    $conn->close();
}

// Connect to the database
$conn = new SQLite3($db_file);


// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the product name
    $product_name = $_POST["product_name"];
    if (empty($product_name)) {
        $error_message = "Product name cannot be empty.";
    }

    // Validate the quantity
    $quantity = $_POST["quantity"];
    if (!is_numeric($quantity) || $quantity <= 0) {
        $error_message = "Quantity must be a positive number.";
    }

    //If no errors, insert the data
    if (empty($error_message)) {
        //Simulate a price (in a real app, you'd fetch it from a product table)
        $price = 10.00; // Example price

        $stmt = $conn->prepare("INSERT INTO purchases (product_name, quantity, price) VALUES (:product_name, :quantity, :price)");
        $stmt->bindValue(':product_name', $product_name);
        $stmt->bindValue(':quantity', $quantity);
        $stmt->bindValue(':price', $price);
        $stmt->execute();

        $last_insert_id = $conn->lastInsertRowID();

        $error_message = "Purchase created successfully! (ID: $last_insert_id)";

    }

} else {
    $error_message = ""; // Reset error message if the form wasn't submitted
}

// Close the database connection
$conn->close();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Make a Purchase</h1>

<?php if (isset($error_message)): ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Purchase</button>
</form>

<a href="index.php">Back to Home</a> <!-- Or wherever your home page is -->

</body>
</html>


<?php
  echo "<h1>Welcome to the Store</h1>";
  echo "<p>Click <a href='purchase.php'>here</a> to make a purchase.</p>";
?>


<?php

// Database connection (Replace with your actual database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Handles a purchase request.
 *
 * @param array $cart_items An array of product IDs and quantities from the shopping cart.
 * @return string  A message indicating the success or failure of the purchase.
 */
function processPurchase(array $cart_items) {
  // 1. Validate Cart Items
  foreach ($cart_items as $item) {
    if (!is_array($item) || !isset($item['product_id']) || !isset($item['quantity']) || $item['quantity'] <= 0) {
      return "Invalid cart item format.  Please ensure each item is an array with 'product_id' and 'quantity' fields, and the quantity is greater than 0.";
    }
  }

  // 2.  Create Order Data
  $order_id = bin2hex(random_bytes(16)); // Generate a unique order ID (using random_bytes for security)
  $customer_id = "guest"; // You can implement customer registration and ID generation here.
  $order_date = date("Y-m-d H:i:s");

  // 3.  Fetch Product Details
  $products = [];
  foreach ($cart_items as $item) {
    $product_id = $item['product_id'];
    $quantity = $item['quantity'];

    // Retrieve product details from your product table
    $product_query = "SELECT id, name, price FROM products WHERE id = '$product_id'";
    $product_result = $conn->query($product_query);

    if ($product_result->num_rows > 0) {
      $product = $product_result->fetch_assoc();
      $products[] = $product;
    } else {
      return "Product ID '$product_id' not found in the product catalog.";
    }
  }

  // 4. Calculate Total Amount
  $total_amount = 0;
  foreach ($products as $product) {
    $total_amount += $product['price'] * $item['quantity'];
  }

  // 5.  Insert Order into Order Table
  $order_insert_query = "INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES ('$order_id', '$customer_id', '$order_date', '$total_amount')";
  if (!$conn->query($order_insert_query)) {
    return "Error inserting order: " . $conn->error;
  }

  // 6. Insert Order Items into Order Items Table
  $order_items_insert_query = "INSERT INTO order_items (order_id, product_id, quantity) ";
  $order_items_insert_query .= "VALUES ";
  for ($i = 0; $i < count($cart_items); $i++) {
    $product_id = $cart_items[$i]['product_id'];
    $quantity = $cart_items[$i]['quantity'];
    $order_items_insert_query .= "('$order_id', '$product_id', '$quantity')";
    if ($i < count($cart_items) - 1) {
      $order_items_insert_query .= ", ";
    }
  }

  if (!$conn->query($order_items_insert_query)) {
    return "Error inserting order items: " . $conn->error;
  }

  // 7. Clear Cart (Simulate Clearing -  This is just a simple example)
  //   In a real application, you'd clear the cart from the user's session or database.
  session_start();
  $_SESSION['cart'] = [];

  // 8. Return Success Message
  return "Purchase successful! Order ID: " . $order_id;
}


// --- Example Usage (Simulate Cart Data) ---
$cart = [
  ['product_id' => '1', 'quantity' => 2],
  ['product_id' => '2', 'quantity' => 1],
];

$purchase_result = processPurchase($cart);
echo $purchase_result . "<br>";


// --- Database Setup (Simplified for Example) ---

// Create database (if it doesn't exist)
$sql_create_db = "CREATE DATABASE your_database";
if (!$conn->query($sql_create_db)) {
    die("Database creation failed: " . $conn->error);
}

// Create tables (if they don't exist)
$sql_create_orders = "CREATE TABLE IF NOT EXISTS orders (
    order_id BINARY(16) PRIMARY KEY,
    customer_id VARCHAR(255) NOT NULL,
    order_date DATETIME NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL
)";

$sql_create_order_items = "CREATE TABLE IF NOT EXISTS order_items (
    order_id BINARY(16) NOT NULL,
    product_id VARCHAR(255) NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
)";

if (!$conn->query($sql_create_orders)) {
    die("Error creating orders table: " . $conn->error);
}

if (!$conn->query($sql_create_order_items)) {
    die("Error creating order_items table: " . $conn->error);
}

// Create sample product table
$sql_create_products = "CREATE TABLE IF NOT EXISTS products (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
)";
if (!$conn->query($sql_create_products)) {
    die("Error creating products table: " . $conn->error);
}

// Insert sample products
$sql_insert_product_1 = "INSERT INTO products (id, name, price) VALUES ('1', 'Product A', 10.00)";
$sql_insert_product_2 = "INSERT INTO products (id, name, price) VALUES ('2', 'Product B', 20.00)";

if (!$conn->query($sql_insert_product_1)) {
    die("Error inserting product 1: " . $conn->error);
}

if (!$conn->query($sql_insert_product_2)) {
    die("Error inserting product 2: " . $conn->error);
}

?>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize input
  $product_name = trim($_POST["product_name"]);
  $product_price = floatval($_POST["product_price"]);
  $quantity = intval($_POST["quantity"]);

  //  Basic validation - Add more robust validation as needed
  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {
    $error_message = "Please fill in all fields and ensure prices and quantities are positive.";
  } else {
    // Prepare the SQL query
    $sql = "INSERT INTO products (name, price, quantity) VALUES ('$product_name', $product_price, $quantity)";

    // Execute the query
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    if ($conn->query($sql) === TRUE) {
      $success_message = "Product added successfully!";
    } else {
      $error_message = "Error adding product: " . $conn->error;
    }

    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label><br>
    <input type="text" id="product_name" name="product_name" value="<?php echo isset($product_name) ? htmlspecialchars($product_name) : ''; ?>"><br><br>

    <label for="product_price">Product Price:</label><br>
    <input type="number" id="product_price" name="product_price" step="0.01" value="<?php echo isset($product_price) ? htmlspecialchars($product_price) : ''; ?>"><br><br>

    <label for="quantity">Quantity:</label><br>
    <input type="number" id="quantity" name="quantity" step="1" value="<?php echo isset($quantity) ? htmlspecialchars($quantity) : ''; ?>"><br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <a href="cart.php">View Cart</a> <!-- Link to cart page -  you need to create this page -->

</body>
</html>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    // Assuming you have a 'cart' table with 'user_id', 'product_id', 'quantity' columns
    $user_id = $_SESSION['user_id']; // Assuming you have user authentication
    $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to retrieve the cart items
function getCartItems($conn, $user_id) {
    $sql = "SELECT c.product_id, p.name, p.price, c.quantity
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = '$user_id'";

    $result = $conn->query($sql);
    $items = [];

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $items[] = $row;
        }
    }

    return $items;
}


// Function to remove an item from the cart
function removeFromCart($conn, $product_id, $user_id) {
    $sql = "DELETE FROM cart WHERE product_id = '$product_id' AND user_id = '$user_id'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity, $user_id) {
    // Check if the item exists in the cart
    $sql = "SELECT quantity FROM cart WHERE product_id = '$product_id' AND user_id = '$user_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $current_quantity = $row['quantity'];

        // Update the quantity
        $new_quantity = $current_quantity + $quantity;

        $sql = "UPDATE cart SET quantity = '$new_quantity' WHERE product_id = '$product_id' AND user_id = '$user_id'";

        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }

    } else {
        return false; // Item not found in cart
    }
}


// ---  Example Usage (This section is just for demonstration) ---

// 1.  Connect to the database
$conn = connectDB();

// 2.  Get the product ID from the request (e.g., from a form submission)
$product_id = $_GET['product_id'];

// 3.  Add the product to the cart
$quantity = $_POST['quantity']; // Get quantity from a form
if (addToCart($conn, $product_id, $quantity)) {
    echo "Product added to cart successfully!";
} else {
    echo "Failed to add product to cart.";
}


// 4.  Retrieve the cart items
$cart_items = getCartItems($conn, $_SESSION['user_id']);

// 5. Display the cart items (this is just an example, you'll need to adapt this to your template)
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// 6.  (Example: Remove item from cart)
// if (isset($_GET['remove_product'])) {
//     $product_id_to_remove = $_GET['remove_product'];
//     if (removeFromCart($conn, $product_id_to_remove, $_SESSION['user_id'])) {
//         echo "Product removed from cart successfully!";
//     } else {
//         echo "Failed to remove product from cart.";
//     }
// }


// 7. (Example: Update quantity)
// if (isset($_GET['update_quantity'])) {
//     $new_quantity = $_POST['quantity'];
//     if (updateQuantity($conn, $product_id, $new_quantity, $_SESSION['user_id'])) {
//         echo "Quantity updated successfully!";
//     } else {
//         echo "Failed to update quantity.";
//     }
// }



// Close the database connection (important!)
$conn->close();

?>


// Example of using prepared statements to prevent SQL injection
$stmt = $conn->prepare("SELECT * FROM cart WHERE user_id = ? AND product_id = ?");
$stmt->bind_param("is", $user_id, $product_id); // 'i' for integer, 's' for string
$stmt->execute();
$result = $stmt->get_result();
// ... process the result ...
$stmt->close();


<?php

// Database Connection (Replace with your database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $conn = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Helper Function to sanitize input (Important for security)
function sanitizeInput($data) {
  $data = trim($data);
  $data = stripslashes($data);
  $data = htmlspecialchars($data);
  return $data;
}


// 1. Handle Form Submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate Input (Crucial - Prevents security vulnerabilities)
    $product_id = sanitizeInput($_POST["product_id"]);
    $quantity = (int)sanitizeInput($_POST["quantity"]); // Cast to integer
    $customer_name = sanitizeInput($_POST["customer_name"]);
    $customer_email = sanitizeInput($_POST["customer_email"]);
    $shipping_address = sanitizeInput($_POST["shipping_address"]);

    // Check if product exists (Important)
    $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $product_stmt = $stmt->execute([$product_id]);
    $product = $product_stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        $error = "Product not found.";
    } elseif ($quantity <= 0) {
        $error = "Quantity must be greater than 0.";
    } else {
        // Process Order
        $total_price = $product["price"] * $quantity;

        // Prepare Order Data
        $order_data = [
            "product_id" => $product_id,
            "quantity" => $quantity,
            "customer_name" => $customer_name,
            "customer_email" => $customer_email,
            "shipping_address" => $shipping_address,
            "total_price" => $total_price,
            "order_date" => date("Y-m-d H:i:s") // Add timestamp for order date
        ];

        // Insert Order into Database
        $order_query = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, shipping_address, total_price, order_date) VALUES (?, ?, ?, ?, ?, ?, ?)";
        $order_stmt = $conn->prepare($order_query);
        $order_stmt->execute([$product_id, $quantity, $customer_name, $customer_email, $shipping_address, $total_price, date("Y-m-d H:i:s")]); // Using date() for consistent timestamp

        $success = "Order placed successfully! Order ID: " . $conn->lastInsertId();  // Show the order ID

    }
}

// 2. Display the Purchase Form
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Purchase</title>
</head>
<body>

<h1>Online Purchase</h1>

<?php if (isset($error)) {
    echo "<p style='color: red;'>Error: " . $error . "</p>";
} elseif (isset($success)) {
    echo "<p style='color: green;'>" . $success . "</p>";
}
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <input type="text" id="shipping_address" name="shipping_address" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php
session_start();

// Sample product data (replace with your actual product details)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15]
];

// Check if the user is logged in (simplistic check - replace with a proper authentication system)
if (!isset($_SESSION['user_id'])) {
    echo "<p>You must be logged in to place an order.</p>";
} else {
    echo "<h2>Available Products</h2>";
    echo "<ul>";
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    echo "</ul>";

    // Display the order form
    echo "<h2>Place an Order</h2>";
    echo "<form action='order.php' method='post'>";
    echo "Product ID: ";
    echo "<select name='product_id'>";
    foreach ($products as $id => $product) {
        echo "<option value='" . $id . "'>" . $product['name'] . "</option>";
    }
    echo "</select><br>";

    echo "Quantity: ";
    echo "<input type='number' name='quantity' value='1' min='1'><br>";

    echo "<input type='submit' value='Place Order'>";
    echo "</form>";
}
?>


<?php
session_start();

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    echo "<p>You must be logged in to place an order.</p>";
    exit; // Stop execution
}

// Validate form data
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if (!isset($products[$product_id])) {
        echo "<p>Invalid product ID.</p>";
        exit;
    }
    if (!is_numeric($quantity) || $quantity <= 0) {
        echo "<p>Invalid quantity.</p>";
        exit;
    }

    // Process the order
    $order_total = $products[$product_id]['price'] * $quantity;

    // Store the order (in this example, just to the session)
    $order_data = [
        'user_id' => $_SESSION['user_id'],
        'product_id' => $product_id,
        'quantity' => $quantity,
        'total' => $order_total,
        'timestamp' => time()
    ];
    $_SESSION['orders'][] = $order_data;

    echo "<p>Order placed successfully! Order ID: " . end($_SESSION['orders'])['order_id'] . "</p>";
    //  In a real app, you'd redirect the user or display an order confirmation page.
}
?>


<?php
session_start();

// Configuration
$items = []; // Array to store items in the cart
$cart_file = 'cart.json'; // File to store cart data

// Function to load cart from JSON file
function loadCart() {
    if (file_exists($cart_file)) {
        $data = file_get_contents($cart_file);
        if ($data) {
            $cart = json_decode($data, true);
            return $cart;
        } else {
            return []; // Return empty array if file is corrupt
        }
    }
    return [];
}

// Function to save cart to JSON file
function saveCart($cart) {
    file_put_contents($cart_file, json_encode($cart, JSON_PRETTY_PRINT));
}


// --------------------- Cart Functions ---------------------

// Add item to cart
function add_to_cart($product_id, $quantity = 1) {
    $cart = loadCart();

    // Check if product already in cart
    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            saveCart($cart);
            return;
        }
    }

    // If not in cart, add new item
    $cart[] = ['product_id' => $product_id, 'quantity' => $quantity];
    saveCart($cart);
}


// Update quantity of item in cart
function update_quantity($product_id, $quantity) {
    $cart = loadCart();

    // Find the product in the cart and update the quantity
    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $quantity;
            saveCart($cart);
            return;
        }
    }

    // Product not found - could be handled differently (e.g., throw an error)
    echo "<p>Product ID '$product_id' not found in cart.</p>";
}


// Remove item from cart
function remove_from_cart($product_id) {
    $cart = loadCart();

    // Filter out the item to be removed
    $cart = array_filter($cart, function ($item) use ($product_id) {
        return $item['product_id'] !== $product_id;
    });

    saveCart($cart);
}


// Get cart contents
function get_cart_contents() {
    return loadCart();
}


// Calculate total price
function calculate_total_price() {
    $cart = get_cart_contents();
    $total = 0;
    foreach ($cart as $item) {
        // Assuming you have a product database or data source
        //  and you can retrieve the price.  Replace this with your actual logic.
        $product_price = get_product_price($item['product_id']); // Implement this function
        $total_item_price = $product_price * $item['quantity'];
        $total += $total_item_price;
    }
    return $total;
}

// --------------------- Product Data (Dummy for Example) ---------------------
// Replace this with your actual product data source
function get_product_price($product_id) {
    // This is a dummy function. Replace it with your database query or data retrieval.
    switch ($product_id) {
        case 1: return 10.00;
        case 2: return 25.50;
        case 3: return 5.75;
        default: return 0; // Price not found
    }
}

// --------------------- Example Usage (In a View/Page) ---------------------

// Add to cart (example)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;  // Default to 1
    add_to_cart($product_id, $quantity);
    echo "<p>Item added to cart.</p>";
}

// Update quantity (example)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Default to 1
    update_quantity($product_id, $quantity);
}

// Remove item from cart
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// Get cart contents to display
$cart_contents = get_cart_contents();

// Calculate total price
$total_price = calculate_total_price();

// Display cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $item) {
        echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . ", Price: $" . get_product_price($item['product_id']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}
?>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_user";
$db_password = "your_password";

// Start the session to maintain user state
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to check if a product exists
function productExists($product_id) {
    $conn = connectToDatabase();
    $stmt = $conn->prepare("SELECT 1 FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $exists = $result->num_rows > 0;
    $stmt->close();
    $conn->close();
    return $exists;
}


// Function to handle the purchase process
function handlePurchase($product_id, $quantity, $shipping_address) {
    // Validate input (basic - improve this for production)
    if (!is_numeric($product_id) || !is_numeric($quantity)) {
        return "Invalid product ID or quantity.";
    }

    if ($quantity <= 0) {
        return "Quantity must be greater than zero.";
    }

    // Check if the product exists
    if (!productExists($product_id)) {
        return "Product not found.";
    }


    // Database connection
    $conn = connectToDatabase();

    // Prepare the INSERT statement
    $stmt = $conn->prepare("INSERT INTO orders (product_id, quantity, shipping_address) VALUES (?, ?, ?)");

    // Bind parameters (use prepared statements to prevent SQL injection)
    $stmt->bind_param("iii", $product_id, $quantity, $shipping_address);

    // Execute the statement
    if ($stmt->execute()) {
        // Update the product quantity (assuming you have a quantity column in the products table)
        $update_stmt = $conn->prepare("UPDATE products SET quantity = quantity - ? WHERE id = ?");
        $update_stmt->bind_param("ii", $quantity, $product_id);
        $update_stmt->execute();

        return "Purchase successful!  Order ID: " . $conn->insert_id;
    } else {
        return "Purchase failed: " . $stmt->error;
    }

    $stmt->close();
    $conn->close();
}

//  Example Usage (Handle the purchase request)

// Check if a product ID is submitted in the POST request
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $shipping_address = $_POST["shipping_address"];

    $purchase_result = handlePurchase($product_id, $quantity, $shipping_address);
    echo $purchase_result;
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Shop</title>
</head>
<body>

<h1>Online Shop</h1>

<h2>Product: [Product Name - You'll need to add this to your database)</h2>
<img src="product_image.jpg" alt="Product Image" width="200">  <!-- Replace with actual image URL -->

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <label for="shipping_address">Shipping Address:</label>
    <input type="text" id="shipping_address" name="shipping_address" required>
    <br><br>

    <button type="submit">Purchase Now!</button>
</form>

</body>
</html>


<?php

// Sample Product Data (Replace with your database)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the quantity from the form
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;

    // Validate quantity
    if ($quantity <= 0) {
        $error_message = "Please enter a valid quantity (greater than zero).";
    } else {
        // Check if the product exists
        $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : null;

        if ($product_id === null || !isset($products[$product_id])) {
            $error_message = "Invalid product ID.";
        } else {
            // Calculate the total price
            $total_price = $products[$product_id]["price"] * $quantity;

            // Display the order information
            echo "<h2>Order Summary:</h2>";
            echo "<p>Product: " . $products[$product_id]["name"] . "</p>";
            echo "<p>Quantity: " . $quantity . "</p>";
            echo "<p>Total Price: $" . number_format($total_price, 2) . "</p>"; // Format to 2 decimal places
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Products</h1>

<?php if (isset($error_message)): ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Select Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product):
            echo "<option value='" . $id . "'>" . $product["name"] . "</option>";
        endforeach;
        ?>
    </select>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1">
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// For this example, let's assume we're using mysqli

// Database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle the purchase process
function processPurchase($order_data) {
  global $conn;

  // Validate the order data (basic validation, add more robust validation as needed)
  if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['customer_name']) || empty($order_data['email'])) {
    return "Error: Please fill in all required fields.";
  }

  // Sanitize and prepare the data for the database
  $product_id = $conn->real_escape_string($order_data['product_id']);
  $quantity = $conn->real_escape_string($order_data['quantity']);
  $customer_name = $conn->real_escape_string($order_data['customer_name']);
  $email = $conn->real_escape_string($order_data['email']);

  //  Fetch product details from the database
  $sql = "SELECT product_id, product_name, price FROM products WHERE product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $product_name = $row['product_name'];
    $price = $row['price'];
  } else {
    return "Error: Product not found.";
  }


  // Calculate the total price
  $total_price = $price * $quantity;

  // Prepare the SQL statement for inserting the order data
  $sql = "INSERT INTO orders (product_id, product_name, quantity, customer_name, email, total_price, order_date)
          VALUES ('$product_id', '$product_name', '$quantity', '$customer_name', '$email', '$total_price', NOW())";

  if ($conn->query($sql) === TRUE) {
    return "Order placed successfully! Order ID: " . $conn->insert_id;
  } else {
    return "Error: " . $conn->error;
  }
}


// -----  Example Usage (simulating a form submission) -----

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the order data from the form
  $order_data = array(
    "product_id" => $_POST["product_id"],
    "quantity" => $_POST["quantity"],
    "customer_name" => $_POST["customer_name"],
    "email" => $_POST["email"]
  );

  // Process the purchase
  $result = processPurchase($order_data);

  // Display the result
  echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place an Order</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// --- Function to connect to the database ---
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}

// --- Function to add an item to the cart ---
function add_to_cart($conn, $product_id, $quantity) {
    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $product_name = $row["name"];
        $product_price = $row["price"];

        // Update the cart quantity or add a new item
        $sql = "UPDATE carts SET quantity = quantity + ? WHERE product_id = ?";
        if ($conn->query($sql, $quantity, $product_id) === TRUE) {
            // Optionally, you can add a success message to the user
            // echo "Item '$product_name' added to cart.";
        } else {
            // Handle error
            echo "Error updating cart: " . $conn->error;
        }
    } else {
        echo "Product with ID '$product_id' not found.";
    }

    $stmt->close();
}


// --- Function to display the cart ---
function display_cart($conn) {
    $sql = "SELECT c.product_id, p.name, p.price, c.quantity FROM carts c JOIN products p ON c.product_id = p.id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>Shopping Cart</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Remove</th></tr>";

        while ($row = $result->fetch_assoc()) {
            $product_name = $row["name"];
            $product_price = $row["price"];
            $quantity = $row["quantity"];
            $total = $product_price * $quantity;

            echo "<tr>";
            echo "<td>" . $product_name . "</td>";
            echo "<td>$" . $product_price . "</td>";
            echo "<td>" . $quantity . "</td>";
            echo "<td>$" . $total . "</td>";
            echo "<td><a href='remove_from_cart.php?product_id=" . $row["product_id"] . "'>Remove</a></td>";
            echo "</tr>";
        }

        echo "</table>";
    } else {
        echo "<p>Your cart is empty.</p>";
    }
}


// --- Function to remove an item from the cart ---
function remove_from_cart($conn, $product_id) {
    $sql = "DELETE FROM carts WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();

    if ($stmt->affected_rows > 0) {
        echo "<p>Item removed from cart.</p>";
    } else {
        echo "<p>Item not found in cart.</p>";
    }
    $stmt->close();
}

// --- Example Usage (This is the main part of the script - it's called when the user accesses the cart page)---

// 1. Establish database connection
$conn = connectToDatabase();

// 2. Display the cart contents
display_cart($conn);

// Close the database connection
$conn->close();

?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase process
function handlePurchase($orderData) {
    // Sanitize and validate input data
    $product_id = mysqli_real_escape_string($conn, $orderData['product_id']);
    $quantity = mysqli_real_escape_string($conn, $orderData['quantity']);
    $customer_name = mysqli_real_escape_string($conn, $orderData['customer_name']);
    $customer_email = mysqli_real_escape_string($conn, $orderData['customer_email']);
    $payment_method = mysqli_real_escape_string($conn, $orderData['payment_method']);  // e.g., "credit_card", "paypal"

    // Check if product exists
    $product_query = "SELECT id, name, price FROM products WHERE id = '$product_id'";
    $product_result = $conn->query($product_query);

    if (!$product_result->num_rows > 0) {
        return "Error: Product not found.";
    }

    $product = $product_result->fetch_assoc();
    $product_name = $product['name'];
    $product_price = $product['price'];

    // Calculate total price
    $total_price = $product_price * $quantity;

    // Insert order into the database
    $sql = "INSERT INTO orders (product_id, customer_name, customer_email, product_name, quantity, price, payment_method)
            VALUES ('$product_id', '$customer_name', '$customer_email', '$product_name', '$quantity', '$total_price', '$payment_method')";

    if ($conn->query($sql) === TRUE) {
        // Update product inventory (Assuming you have an inventory table)
        $inventory_sql = "UPDATE inventory SET quantity = quantity - '$quantity' WHERE product_id = '$product_id'";
        if ($conn->query($inventory_sql) === TRUE) {
            return "Purchase successful! Order ID: " . $conn->insert_id;
        } else {
            return "Error updating inventory.";
        }
    } else {
        return "Error creating order.";
    }
}

// ---  Example Usage (Simulating a form submission) ---

// Assuming you have a form with fields: product_id, quantity, customer_name, customer_email, payment_method

// Get form data (Simulating input)
$orderData = [
    'product_id' => 1, // Example product ID
    'quantity' => 2,
    'customer_name' => "John Doe",
    'customer_email' => "john.doe@example.com",
    'payment_method' => "credit_card"
];

// Process the purchase
$result = handlePurchase($orderData);

// Display the result
echo "<p>" . $result . "</p>";
?>


<?php

// Database configuration (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";

// Create database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function add_to_cart($conn, $item_id, $quantity) {
    // Check if the item already exists in the cart
    $query = "SELECT * FROM cart WHERE item_id = '$item_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Item exists, update quantity
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE item_id = '$item_id'";
        if ($conn->query($query) === TRUE) {
            echo "Item quantity updated successfully.";
        } else {
            echo "Error updating item quantity: " . $conn->error;
        }
    } else {
        // Item doesn't exist, add it to the cart
        $query = "INSERT INTO cart (item_id, quantity) VALUES ('$item_id', $quantity)";
        if ($conn->query($query) === TRUE) {
            echo "Item added to cart successfully.";
        } else {
            echo "Error adding item to cart: " . $conn->error;
        }
    }
}

// Function to display the cart contents
function display_cart($conn) {
    $query = "SELECT * FROM cart";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<h2>Your Shopping Cart</h2>";
        while ($row = $result->fetch_assoc()) {
            $item_id = $row['item_id'];
            $quantity = $row['quantity'];
            $item_name = get_item_name($conn, $item_id); // Call a function to retrieve item name

            echo "<tr>";
            echo "<td>" . $item_name . "</td>";
            echo "<td>" . $quantity . "</td>";
            echo "<td><a href='update_cart.php?item_id=$item_id&quantity=$quantity'>Update</a></td>";
            echo "</tr>";
        }
    } else {
        echo "<h2>Your Shopping Cart is Empty</h2>";
    }
}

// Function to get item name by ID
function get_item_name($conn, $item_id) {
    $query = "SELECT item_name FROM items WHERE item_id = '$item_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['item_name'];
    } else {
        return "Unknown Item"; // Handle case where item doesn't exist
    }
}


// ------------------  Purchase Functionality ------------------

// Function to process the purchase
function process_purchase($conn) {
  //  You'd typically handle payment integration here.
  //  This is a placeholder.

  //  In a real application, you'd:
  //  1. Validate the purchase details (quantity, user info).
  //  2.  Integrate with a payment gateway (e.g., PayPal, Stripe).
  //  3.  Update the order status in your database.
  //  4.  Clear the cart after a successful purchase.

  // For this example, we'll just display a confirmation message.
  echo "<h2>Purchase Confirmed!</h2>";
  echo "<p>Your order has been placed.  (Payment processed in background)</p>";

  // Clear the cart after purchase
  clear_cart($conn);
}


// Function to clear the cart
function clear_cart($conn) {
    $query = "TRUNCATE TABLE cart";
    if ($conn->query($query) === TRUE) {
        echo "Cart cleared successfully.";
    } else {
        echo "Error clearing cart: " . $conn->error;
    }
}


// ------------------  Handling Purchase Requests ------------------

// Check if the purchase button was clicked
if (isset($_POST['purchase_button'])) {
    process_purchase($conn);
}

// ------------------  Updating Cart (Update Quantity) ------------------

//  Handle update quantity requests
if (isset($_POST['update_item'])) {
    $item_id = $_POST['item_id'];
    $quantity = $_POST['quantity'];
    add_to_cart($conn, $item_id, $quantity);
}



// ------------------  Initial Cart Display ------------------

// Display the cart contents
display_cart($conn);

?>


<?php
session_start(); // Start the session

// Check if item_id is set in the session.  This is critical.
if (isset($_GET['item_id'])) {
    $item_id = $_GET['item_id'];
    $quantity = $_GET['quantity'];

    // Check if the item already exists in the cart
    $query = "SELECT * FROM cart WHERE item_id = '$item_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Item exists, update quantity
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE item_id = '$item_id'";
        if ($conn->query($query) === TRUE) {
            echo "Item quantity updated successfully.";
        } else {
            echo "Error updating item quantity: " . $conn->error;
        }
    } else {
        // Item doesn't exist, add it to the cart
        $query = "INSERT INTO cart (item_id, quantity) VALUES ('$item_id', $quantity)";
        if ($conn->query($query) === TRUE) {
            echo "Item added to cart successfully.";
        } else {
            echo "Error adding item to cart: " . $conn->error;
        }
    }
}
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_password = "your_db_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (This is crucial to prevent security vulnerabilities)
  $name = htmlspecialchars($_POST["name"]);
  $email = htmlspecialchars($_POST["email"]);
  $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer
  $product_id = intval($_POST["product_id"]); // Ensure product_id is an integer
  // Add more validation as needed for other fields

  // Perform input validation - Basic example, expand as needed
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "All fields are required.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } elseif ($quantity <= 0) {
    $error = "Quantity must be a positive integer.";
  } else {
    // Process the purchase
    // 1. Create a database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // 2. Prepare the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES (?, ?, ?, ?)";

    // 3. Prepare the statement
    $stmt = $conn->prepare($sql);

    // 4. Bind parameters (Important for security!)
    $stmt->bind_param("sii", $name, $quantity, $product_id);

    // 5. Execute the query
    if ($stmt->execute()) {
      $success = "Purchase successful! Order ID: " . $conn->insert_id;
    } else {
      $error = "Purchase failed: " . $stmt->error;
    }

    // 6. Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h2>Purchase Form</h2>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
    //  Check if the product already exists in the cart
    $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Product already in cart, update quantity
        $row = $result->fetch_assoc();
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
        if ($conn->query($query) === TRUE) {
            echo "Product quantity updated successfully!";
        } else {
            echo "Error updating product quantity: " . $conn->error;
        }
    } else {
        // Product not in cart, add it
        $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
        if ($conn->query($query) === TRUE) {
            echo "Product added to cart successfully!";
        } else {
            echo "Error adding product to cart: " . $conn->error;
        }
    }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
    $query = "DELETE FROM cart WHERE product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
        echo "Product removed from cart successfully!";
    } else {
        echo "Error removing product from cart: " . $conn->error;
    }
}

// Function to update the quantity of a product in the cart
function updateQuantity($conn, $product_id, $new_quantity) {
  // Validate that quantity is a number
  if (!is_numeric($new_quantity) || $new_quantity <= 0) {
    echo "Invalid quantity. Please enter a positive integer.";
    return;
  }

  $query = "UPDATE cart SET quantity = '$new_quantity' WHERE product_id = '$product_id'";
  if ($conn->query($query) === TRUE) {
      echo "Product quantity updated successfully!";
  } else {
      echo "Error updating product quantity: " . $conn->error;
  }
}


// Function to display the cart contents
function displayCart($conn) {
    $query = "SELECT * FROM cart";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<h2>Your Shopping Cart</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row['product_id'] . "</td>";
            echo "<td>" . $row['product_name'] . "</td>"; // Assuming you have a product_name column
            echo "<td>" . $row['quantity'] . "</td>";
            echo "<td><a href='update_quantity.php?product_id=" . $row['product_id'] . "&new_quantity=" . $row['quantity'] . "'>Update</a> | <a href='remove_from_cart.php?product_id=" . $row['product_id'] . "'>Remove</a></td>";
            echo "</tr>";
        }
    } else {
        echo "<p>Your cart is empty.</p>";
    }
}

// ------------------  Example Usage & Handling  ------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST["action"]) && $_POST["action"] == "add_to_cart") {
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        addToCart($conn, $product_id, $quantity);
    }
}

// ------------------  Example to display the cart  ------------------
displayCart($conn);

// Close the database connection
$conn->close();

?>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    // Handle the case where the product is not in the cart
    // You might want to log this or display an error message
    // For this example, we'll just do nothing.
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents as an associative array.
 */
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart isn't initialized. Use null coalescing operator.
}


/**
 * Calculates the total cost of the cart.
 *
 * @return float The total cost.
 */
function calculateTotal() {
  $total = 0;
  $cart = getCartContents();
  foreach ($cart as $product_id => $quantity) {
    // Assume you have a function to get the product price (e.g., getProductPrice($product_id))
    $price = getProductPrice($product_id); // Replace with your actual function call
    $totalForProduct = $price * $quantity;
    $total += $totalForProduct;
  }
  return $total;
}


/**
 *  Placeholder function to get product price.  Replace with your database query or logic.
 * @param int $product_id
 * @return float
 */
function getProductPrice($product_id) {
    //  Replace this with your database query or other logic to get the price
    //  This is just a placeholder
    switch($product_id) {
        case 1: return 10.00;
        case 2: return 25.50;
        default: return 0;
    }
}



// ---  Shopping Cart Implementation (Example) ---

// 1. Add to Cart (Example)
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'];

  addToCart($product_id, $quantity);
  echo "<p>Item added to cart.  Total: " . calculateTotal() . "</p>";
}

// 2. Update Cart Quantity
if (isset($_POST['update_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    updateCartQuantity($product_id, $quantity);
    echo "<p>Cart updated.  Total: " . calculateTotal() . "</p>";
}


// 3. Remove from Cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = (int)$_POST['product_id'];
  removeFromCart($product_id);
  echo "<p>Item removed from cart.  Total: " . calculateTotal() . "</p>";
}

// 4. Display Cart Contents
$cartContents = getCartContents();
echo "<h2>Your Shopping Cart</h2>";

if (empty($cartContents)) {
    echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
  echo "<p>Total Cost: $" . calculateTotal() . "</p>";
}
?>


function getProductPrice($product_id) {
  // Assuming you have a database connection established as $db

  $stmt = $db->prepare("SELECT price FROM products WHERE id = ?");
  $stmt->bind_param("i", $product_id); // 'i' for integer
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    return $row['price'];
  } else {
    return 0; // Or handle the error appropriately (e.g., log the error)
  }

  $stmt->close();
}


<?php

// Data storage (replace with a database in a real application)
$cart = [];
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    if (isset($products[$product_id])) {
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['name' => $products[$product_id]['name'], 'price' => $products[$product_id]['price'], 'quantity' => $quantity];
        }
    } else {
        echo "Product ID $product_id not found.";
    }
}

// Function to display the cart
function display_cart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item_id => $item_data) {
        $product_name = $item_data['name'];
        $item_price = $item_data['price'];
        $quantity = $item_data['quantity'];
        $total_price = $item_price * $quantity;

        echo "<li>" . $product_name . " - $" . $item_price . " x " . $quantity . " = $" . $total_price . "</li>";
    }
    echo "</ul>";

    // Calculate total cart value
    $total_value = 0;
    foreach ($cart as $item_id => $item_data) {
        $total_value += $item_data['price'] * $item_data['quantity'];
    }
    echo "<p><strong>Total Cart Value: $" . $total_value . "</strong></p>";
}

// Function to handle purchase
function handle_purchase() {
    if (empty($cart)) {
        echo "<p>Your cart is empty. Nothing to purchase.</p>";
        return;
    }

    echo "<h2>Purchase Confirmation</h2>";
    echo "<p>Thank you for your purchase!</p>";
    display_cart(); // Display the cart one last time to show the completed order

    // Clear the cart after purchase (optional - depends on requirements)
    $cart = [];
}


// -----  Example Usage and Handling User Input  -----
// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check for "add_to_cart" button
    if (isset($_POST["add_to_cart"])) {
        $product_id = $_POST["product_id"];
        $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;  // Handle quantity
        add_to_cart($product_id, $quantity);
    }

    // Check for "purchase" button
    if (isset($_POST["purchase"])) {
        handle_purchase();
    }
}

// ----- Display the shopping page -----
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
        <h2>Select Products</h2>
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product_data): ?>
                <option value="<?php echo $id; ?>"><?php echo $id; ?></option>
            <?php endforeach; ?>
        </select>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" value="1" min="1">

        <input type="hidden" name="action" value="add_to_cart">
        <button type="submit">Add to Cart</button>
    </form>


    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
        <input type="hidden" name="action" value="purchase">
        <button type="submit">Purchase</button>
    </form>

    <?php
    display_cart();
    ?>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate inputs (add more validation as needed)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]);  // Ensure quantity is an integer
    $item_name = trim($_POST["item_name"]); // Name of the item purchased

    // Sanitize inputs (important to prevent security vulnerabilities)
    $name = filter_var($name, FILTER_SANITIZE_STRING);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    $item_name = filter_input(INPUT_POST, 'item_name', FILTER_SANITIZE_STRING);


    // Check if required fields are empty
    if (empty($name) || empty($email) || empty($quantity) || empty($item_name)) {
        $error = "Please fill in all the fields.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    }
    else {
        // Database connection
        $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO purchases (name, email, quantity, item_name) VALUES (?, ?, ?, ?)";

        // Use prepared statement to prevent SQL injection
        $stmt = $conn->prepare($sql);

        if ($stmt) {
            // Bind parameters
            $stmt->bind_param("ssii", $name, $email, $quantity, $item_name);

            // Execute the statement
            if ($stmt->execute()) {
                $success = "Purchase successful! Thank you, " . $name . "!";
            } else {
                $error = "Query failed: " . $stmt->error;
            }
        } else {
            $error = "Error preparing statement.";
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Purchase Form</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>


<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required>

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1">

    <br><br>

    <label for="item_name">Item Name:</label>
    <input type="text" id="item_name" name="item_name" placeholder="Item Name">

    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database configuration (Replace with your actual values)
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_username";
$db_password = "your_password";

//  Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate input (Crucial for security!)
  $name = htmlspecialchars($_POST["name"]); // Sanitize input to prevent XSS attacks
  $email = htmlspecialchars($_POST["email"]);
  $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer
  $price = floatval($_POST["price"]); // Ensure price is a float

  //  Basic input validation (Add more robust validation as needed)
  if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure quantities and prices are positive.";
  } else {
    //  Simulate adding to cart
    $cart_item = array(
      "name" => $name,
      "email" => $email,
      "quantity" => $quantity,
      "price" => $price
    );

    //  Store cart item (e.g., in a session, database, or file)
    //  For simplicity, we'll use a session here.
    if (!isset($_SESSION["cart"])) {
      $_SESSION["cart"] = array();
    }
    $_SESSION["cart"][] = $cart_item;

    //  Display success message
    $success = "Item added to cart!";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
  } ?>

  <?php if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
  } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <h2>Your Cart</h2>
  <?php
  // Display cart contents
  if (isset($_SESSION["cart"])) {
    echo "<ul>";
    foreach ($_SESSION["cart"] as $item) {
      echo "<li>" . $item["name"] . " - Quantity: " . $item["quantity"] . " - Price: $" . $item["price"] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Example: $conn = mysqli_connect("localhost", "username", "password", "database_name");

// Configuration
$items = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
    4 => ['name' => 'Monitor', 'price' => 300],
];

$cart = [];

// Function to add an item to the cart
function addToCart($item_id, $quantity = 1)
{
    global $cart;

    if (isset($items[$item_id])) {
        $item = $items[$item_id];
        $cart[] = ['item_id' => $item_id, 'name' => $item['name'], 'price' => $item['price'], 'quantity' => $quantity];
    } else {
        echo "Error: Item with ID " . $item_id . " not found.";
    }
}

// Function to display the cart
function displayCart()
{
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $cart)) . "</p>";
}

// Function to calculate the total price
function calculateTotalPrice()
{
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Example Usage and Processing (Simulated Purchase)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['item_id']) && isset($_POST['quantity'])) {
        $item_id = (int)$_POST['item_id']; // Validate and convert to integer
        $quantity = (int)$_POST['quantity'];

        if ($quantity > 0) {
            addToCart($item_id, $quantity);
            displayCart();
        } else {
            echo "<p>Invalid quantity. Please enter a positive number.</p>";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="item_id">Item ID:</label>
    <select name="item_id" id="item_id">
        <?php
        foreach ($items as $id => $item) {
            echo "<option value=\"$id\">$id</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

    <input type="submit" value="Add to Cart">
</form>

</body>
</html>


<?php

// --- Database Configuration (Replace with your actual credentials) ---
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// --- Helper Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli Connection object or null on failure.
 */
function connect_to_db() {
    global $db_host, $db_name, $db_user, $db_password;

    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}


/**
 * Adds a product to the cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id Product ID.
 * @param int $quantity Quantity to add.
 * @return bool True if successful, false otherwise.
 */
function add_to_cart(mysqli $conn, $product_id, $quantity) {
    $product_id = mysqli_real_escape_string($conn, $product_id); // Sanitize input
    $quantity = mysqli_real_escape_string($conn, $quantity); // Sanitize input

    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);

    if (!$result || mysqli_num_rows($result) == 0) {
        return false; // Product not found
    }

    $product = mysqli_fetch_assoc($result);

    // Check if the product is already in the cart
    $cart_query = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $cart_result = mysqli_query($conn, $cart_query);

    if (mysqli_num_rows($cart_result) > 0) {
        // Product already in cart, update the quantity
        $update_query = "UPDATE cart SET quantity = quantity + '$quantity' WHERE product_id = '$product_id'";
        if (mysqli_query($conn, $update_query)) {
            return true;
        } else {
            return false;
        }
    } else {
        // Product not in cart, add it
        $insert_query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";

        if (mysqli_query($conn, $insert_query)) {
            return true;
        } else {
            return false;
        }
    }
}

/**
 * Retrieves the cart contents.
 *
 * @param mysqli $conn Database connection.
 * @return array Array of cart items, or an empty array if the cart is empty.
 */
function get_cart_contents(mysqli $conn) {
    $query = "SELECT * FROM cart";
    $result = mysqli_query($conn, $query);

    $cart_items = array();
    if ($result) {
        while ($row = mysqli_fetch_assoc($result)) {
            $cart_items[] = $row;
        }
    }

    return $cart_items;
}


/**
 * Removes a product from the cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id Product ID.
 * @return bool True if successful, false otherwise.
 */
function remove_from_cart(mysqli $conn, $product_id) {
    $product_id = mysqli_real_escape_string($conn, $product_id); // Sanitize input

    $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $result = mysqli_query($conn, $query);

    if ($result && mysqli_num_rows($result) > 0) {
        $delete_query = "DELETE FROM cart WHERE product_id = '$product_id'";
        if (mysqli_query($conn, $delete_query)) {
            return true;
        } else {
            return false;
        }
    } else {
        return false; // Product not found in cart
    }
}


// --- Example Usage (Replace this with your actual request handling) ---

// Assuming this code runs on a form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Example: Add to cart
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        if (add_to_cart(connect_to_db(), $product_id, $quantity)) {
            echo "Product added to cart.";
        } else {
            echo "Failed to add product to cart.";
        }
    }

    // Example: Remove from cart
    if (isset($_POST['remove_from_cart'])) {
        $product_id = $_POST['product_id'];
        if (remove_from_cart(connect_to_db(), $product_id)) {
            echo "Product removed from cart.";
        } else {
            echo "Failed to remove product from cart.";
        }
    }

    // Get the cart contents for display
    $cart_items = get_cart_contents(connect_to_db());
    echo "<br>";
    echo "<h2>Cart Contents:</h2>";
    if (empty($cart_items)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart_items as $item) {
            echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
        }
        echo "</ul>";
    }
}
?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a new order to the database
function addOrder($customerName, $customerEmail, $items) {
    $conn = connectToDatabase();

    // Sanitize inputs (important for security)
    $customerName = $conn->real_escape_string($customerName);
    $customerEmail = $conn->real_escape_string($customerEmail);

    // Prepare the SQL statement
    $sql = "INSERT INTO orders (customer_name, customer_email, items) VALUES (?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    if ($stmt) {
        // Bind the parameters
        $stmt->bind_param("ss", $customerName, $customerEmail);

        // Execute the statement
        if ($stmt->execute()) {
            return true;
        } else {
            error_log("Query execution failed: " . $stmt->error); //Log errors for debugging
            return false;
        }
    } else {
        error_log("Query preparation failed: " . $stmt->error); // Log errors for debugging
        return false;
    }

    // Close the statement
    $stmt->close();
}


// Example usage (handling the form submission)

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate and sanitize the input (IMPORTANT: Implement more robust validation)
    $customerName = $_POST["customer_name"];
    $customerEmail = $_POST["customer_email"];
    $items = $_POST["items"];  // Assuming items are comma-separated

    // Validate email format (very basic check)
    if (!filter_var($customerEmail, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // Add the order to the database
        if (addOrder($customerName, $customerEmail, $items)) {
            $success = "Order placed successfully!";
        } else {
            $error = "Failed to place order.  Please try again.";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="items">Items (comma-separated):</label>
    <input type="text" id="items" name="items" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate form data (Basic example - enhance this for production)
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $total_amount = floatval($_POST["total_amount"]);

    // Basic input validation
    if (empty($product_name) || $quantity <= 0 || $total_amount <= 0) {
        $error_message = "Please fill in all fields correctly.";
    } else {
        // Process the order (e.g., save to database)
        // In a real application, you would likely use prepared statements to prevent SQL injection.
        // This is a simplified example for demonstration.
        
        //  Simulate saving to database (replace with your database logic)
        $order_id = generate_order_id(); // Example function to generate a unique order ID
        $order_data = [
            'order_id' => $order_id,
            'product_name' => $product_name,
            'quantity' => $quantity,
            'total_amount' => $total_amount,
            'order_date' => date("Y-m-d H:i:s")
        ];
        
        // Save the order data (e.g., insert into a database table)
        // save_order_to_database($order_data); // Placeholder function

        // Display success message
        $success_message = "Order placed successfully! Order ID: " . $order_id;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<?php if (isset($error_message)): ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php endif; ?>

<?php if (isset($success_message)): ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" value="<?php echo isset($product_name) ? htmlspecialchars($product_name) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" min="1" value="<?php echo isset($quantity) ? intval($quantity) : ''; ?>">
    <br><br>

    <label for="total_amount">Total Amount:</label>
    <input type="number" id="total_amount" name="total_amount" placeholder="Enter total amount" min="0" step="0.01" value="<?php echo isset($total_amount) ? floatval($total_amount) : ''; ?>">
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// --- Database Configuration ---
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_username";
$db_pass = "your_password";
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// --- Data Validation and Sanitization ---
function validateData($data, $type) {
    switch ($type) {
        case "string":
            return htmlspecialchars(trim($data)); //Escape HTML and remove whitespace
        case "int":
            return filter_var($data, FILTER_VALIDATE_INT);
        case "email":
            return filter_var($data, FILTER_VALIDATE_EMAIL);
        default:
            return $data; // Return original value if type is unknown
    }
}

// --- Purchase Functionality ---

// 1. Add to Cart (Simple implementation -  stores cart data in a session)
function addToCart($product_id, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    $product_exists = false;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] += $quantity;
            $product_exists = true;
            break;
        }
    }

    // If not in cart, add it
    if (!$product_exists) {
        $_SESSION['cart'][] = [
            'id' => $product_id,
            'quantity' => $quantity
        ];
    }

    // You could also update the product count directly in a database for persistence.
}

// 2.  Checkout Functionality (Simplified - just prints a summary)
function checkout() {
    $cart = $_SESSION['cart'];

    if (empty($cart)) {
        echo "<p>Your cart is empty.  Add some products!</p>";
        return;
    }

    echo "<h2>Checkout Summary</h2>";
    echo "<ul>";
    $total = 0;
    foreach ($cart as $item) {
        $product_id = $item['id'];
        $quantity = $item['quantity'];

        //  (In a real application, you would fetch product details from a database here)
        //  For simplicity, we'll just display the product ID and quantity
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
        $total += $product_id * $quantity; //  Simple calculation - replace with real price
    }
    echo "</ul>";
    echo "<p>Total: $" . $total . "</p>";

    // Clear the cart after checkout
    $_SESSION['cart'] = [];
    echo "<p>Your cart has been cleared.</p>";
}


// --- Example Product Data (Simulated - Replace with Database Queries in a real app) ---
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];


// --- Handle Requests ---
// Example:  If you have a form submission:
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $product_id = validateData($_POST['product_id'], "int");
    $quantity = validateData($_POST['quantity'], "int");

    if ($product_id && $quantity) {
        addToCart($product_id, $quantity);
        echo "<p>Product added to cart!</p>";
    } else {
        echo "<p>Invalid product ID or quantity.</p>";
    }
}


// If you want to trigger the checkout:
if (isset($_POST['action']) && $_POST['action'] == 'checkout') {
    checkout();
}


// --- Display Products (for the main page) ---
echo "<h2>Available Products</h2>";
echo "<ul>";
foreach ($products as $id => $product) {
    echo "<li>" . $product['name'] . " - $" . $product['price'] . " <button onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
}
echo "</ul>";
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_db";
$db_user = "your_username";
$db_password = "your_password";

// Initialize session for user information
session_start();

//  --- Function to connect to the database ---
function connect_to_db() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}


// --- Function to handle adding to cart ---
function add_to_cart($product_id, $quantity) {
  $conn = connect_to_db();

  // Check if the user is logged in
  if (!isset($_SESSION['user_id'])) {
    // User not logged in, you could redirect or handle this differently
    echo "<p>Please log in to add items to your cart.</p>";
    return false;
  }

  // Prepare the SQL query
  $sql = "INSERT INTO cart (user_id, product_id, quantity)
          VALUES (" . $_SESSION['user_id'] . ", " . $product_id . ", " . $quantity . ")";

  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    echo "Error: " . $conn->error;
    return false;
  }
}


// --- Function to get the cart items ---
function get_cart_items() {
  $conn = connect_to_db();

  $sql = "SELECT p.product_name, p.product_price, c.quantity
          FROM cart c
          JOIN products p ON c.product_id = p.product_id
          WHERE c.user_id = " . $_SESSION['user_id'];

  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $cart_items = [];
    while($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
    return $cart_items;
  } else {
    return []; // Return an empty array if no items in the cart
  }
}

// --- Function to calculate the total price of the cart ---
function calculate_total_price() {
  $cart_items = get_cart_items();
  $total = 0;

  foreach ($cart_items as $item) {
    $total += $item['product_price'] * $item['quantity'];
  }

  return $total;
}

// --- Function to remove an item from the cart ---
function remove_from_cart($product_id) {
    $conn = connect_to_db();

    $sql = "DELETE FROM cart WHERE user_id = " . $_SESSION['user_id'] . " AND product_id = " . $product_id;

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $conn->error;
        return false;
    }
}


// ---  Handling Purchase Request ---
if (isset($_POST['submit_purchase'])) {
  // 1. Validate the input (example - check if product_id exists)
  $product_id = $_POST['product_id'];
  // You should implement more robust validation here (e.g., check if product exists, quantity is valid, etc.)
  // For now, just assume the product exists
  $quantity = $_POST['quantity']; // Get the quantity to purchase

  // 2. Add the item to the cart (using the add_to_cart function)
  if (add_to_cart($product_id, $quantity)) {
    echo "<p>Item added to cart.  You can proceed to checkout.</p>";
    // You might want to redirect the user to the checkout page here.
  } else {
    echo "<p>Error adding item to cart.</p>";
  }
}

// --- Display Cart Items ---
$cart_items = get_cart_items();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
    .cart-total {
      text-align: right;
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>

    <table border="1">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_items as $item): ?>
          <tr class="cart-item">
            <td><?php echo $item['product_name']; ?></td>
            <td><?php echo $item['product_price']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td><?php echo $item['quantity'] * $item['product_price']; ?></td>
            <td>
                <form method="post">
                    <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                    <input type="submit" name="remove_item" value="Remove" style="background-color: red; color: white;">
                </form>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <div class="cart-total">
      Total: <?php echo calculate_total_price(); ?>
    </div>
  <?php endif; ?>

  <hr>

  <h2>Add to Cart</h2>
  <form method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1">
    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

</body>
</html>


<?php

// Data Storage (Replace with a database in a real application)
$shopping_cart = [];
$item_prices = [
    'apple' => 1.00,
    'banana' => 0.50,
    'orange' => 0.75,
    'grapefruit' => 2.00
];

// Function to add an item to the cart
function addToCart($item, $quantity = 1) {
    if (isset($item_prices[$item])) {
        $item_price = $item_prices[$item];
        $shopping_cart[$item]['quantity'] = $shopping_cart[$item]['quantity'] + $quantity;
        $subtotal = $item_price * $shopping_cart[$item]['quantity'] + $item_price * $quantity;
        // You'd typically update a total price here as well
    } else {
        echo "Error: Item '$item' not found.";
    }
}

// Function to display the shopping cart
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($shopping_cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($shopping_cart as $item => $details) {
        $quantity = $details['quantity'];
        $item_price = $item_prices[$item];
        $total = $item_price * $quantity;
        echo "<li>$item (Quantity: $quantity) - Price: $item_price - Total: $total</li>";
    }
    echo "</ul>";

    // Calculate total cart cost
    $totalCartCost = 0;
    foreach ($shopping_cart as $item => $details) {
        $totalCartCost += $item_prices[$item] * $details['quantity'];
    }

    echo "<p><strong>Total Cart Cost: $" . number_format($totalCartCost, 2) . "</strong></p>";
}

// Function to handle the purchase (simplified example)
function handlePurchase() {
    if (empty($shopping_cart)) {
        echo "<p>Your cart is empty.  Nothing to purchase!</p>";
        return;
    }

    //  In a real application, you'd process payment, update inventory, etc.
    echo "<p>Order placed successfully!  (Simulated Payment)</p>";

    // Clear the cart after purchase (optional)
    $shopping_cart = [];

    // Redirect to a confirmation page, or display a message.
    displayCart();  // Display the cart one last time after the purchase.
}


// --- Example Usage (Interactive Part) ---

// Add items to the cart
$action = $_GET['action'] ?? $_POST['action'] ?? '';  // Get action from GET or POST

if ($action === 'add') {
    $item = $_POST['item'];
    $quantity = (int)$_POST['quantity'] ?? 1; // Ensure quantity is an integer
    if($item && $quantity > 0){
        addToCart($item, $quantity);
    }
}

// Handle the purchase
if ($action === 'purchase') {
    handlePurchase();
}

// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<h2>Add Items</h2>
<form method="post" action="">
    <label for="item">Item:</label>
    <select name="item" id="item">
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="orange">Orange</option>
        <option value="grapefruit">Grapefruit</option>
    </select>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">

    <input type="submit" name="action" value="add">
</form>

<br>

<h2>Purchase</h2>
<form method="post" action="">
    <input type="hidden" name="action" value="purchase">
    <input type="submit" name="submit" value="Purchase">
</form>

</body>
</html>


<?php
session_start();

// Database connection details
$servername = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$dbname = "your_db_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Product Data (For demonstration - Replace with database query) ---
$products = [
  ["id" => 1, "name" => "T-Shirt", "price" => 20],
  ["id" => 2, "name" => "Jeans", "price" => 50],
  ["id" => 3, "name" => "Hat", "price" => 15],
];

// --- Cart Logic ---

// Initialize cart if not already set
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Add to Cart Function
function addToCart($product_id, $_SESSION) {
  $product_id = (int)$product_id;  // Ensure product_id is an integer

  // Find the product in the product array
  $product = null;
  foreach ($products as $p) {
    if ($p['id'] == $product_id) {
      $product = $p;
      break;
    }
  }

  if ($product) {
    if (!isset($_SESSION['cart'][$product['id']])) {
      $_SESSION['cart'][$product['id']] = 1; // Add to cart
    } else {
      $_SESSION['cart'][$product['id']]++; // Increment quantity
    }
  }
}

// Remove from Cart Function
function removeFromCart($product_id, $_SESSION) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Get Cart Contents
function getCartContents($_SESSION) {
  $cart_contents = [];
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product = null;
    foreach ($products as $p) {
      if ($p['id'] == $product_id) {
        $product = $p;
        break;
      }
    }
    if ($product) {
      $cart_contents[] = [
        'id' => $product['id'],
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity,
        'total' => $product['price'] * $quantity
      ];
    }
  }
  return $cart_contents;
}

// ---  Handle Actions (e.g., Add to Cart) ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  addToCart($product_id, $_SESSION);
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id, $_SESSION);
}



// --- Display the Cart ---

$cart = getCartContents($_SESSION);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Purchase Cart</title>
  <style>
    .cart-item {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
    .cart-total {
      font-weight: bold;
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <h1>Purchase Cart</h1>

  <form method="post">
    <?php if (count($cart) > 0): ?>
      <h2>Cart Items</h2>
      <?php foreach ($cart as $item): ?>
        <div class="cart-item">
          <strong><?php echo $item['name']; ?></strong> - $<?php echo $item['price']; ?>
          <p>Quantity: <?php echo $item['quantity']; ?></p>
          <p>Total: $<?php echo $item['total']; ?></p>
          <form method="post">
            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
            <button type="submit" name="action" value="remove_from_cart">Remove</button>
          </form>
        </div>
      <?php
    endif;
    ?>

    <br>
    <a href="checkout.php">Proceed to Checkout</a> <!-- Replace with your checkout logic -->

  </form>

  <br>
  <p>Total Items in Cart: <?php echo count($cart); ?></p>
  <p>Total Cart Value: $<?php echo round(array_sum(array_column($cart, 'total')), 2); ?></p>

</body>
</html>


<?php

// Database connection (Replace with your database details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

//  Example Product Data (For demonstration - use a database instead)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];


// Function to handle the purchase process
function processPurchase($productId, $quantity) {
  // Validate inputs
  if (!is_numeric($productId) || $productId <= 0 || !is_numeric($quantity) || $quantity <= 0) {
    return "Invalid product ID or quantity.";
  }

  // Find the product
  $product = null;
  foreach ($products as $id => $item) {
    if ($id == $productId) {
      $product = $item;
      break;
    }
  }

  if ($product === null) {
    return "Product not found.";
  }

  // Calculate total price
  $totalPrice = $product['price'] * $quantity;

  // You would typically:
  // 1. Update inventory
  // 2. Record the order in a database
  // 3. Send a confirmation email
  // For this example, we'll just log the purchase to the console.

  echo "<h2>Purchase Details</h2>";
  echo "<p>Product: " . $product['name'] . "</p>";
  echo "<p>Quantity: " . $quantity . "</p>";
  echo "<p>Total Price: $" . number_format($totalPrice, 2) . "</p>";

  // Log the purchase (Replace with database insertion)
  $logMessage = date("Y-m-d H:i:s") . " - User purchased " . $quantity . " " . $product['name'] . " for $" . number_format($totalPrice, 2) . "
";
  error_log($logMessage, 3, 'purchase_log.txt'); // Logs to purchase_log.txt
  //You'd typically store the order details in a database table.


  return "Purchase successful!  Check your email for confirmation.";
}


// Handle form submission (if you have a form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $productId = $_POST["product_id"];
  $quantity = $_POST["quantity"];

  $purchaseResult = processPurchase($productId, $quantity);
  echo $purchaseResult;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <?php
      foreach ($products as $id => $item) {
        echo "<option value='" . $id . "'>" . $item['name'] . "</option>";
      }
      ?>
    </select>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" min="1">

    <br><br>

    <button type="submit">Purchase</button>
  </form>

</body>
</html>


<?php

// Sample Product Data (Replace with a database or other data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Session management for cart
session_start();

// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1)
{
    global $products;

    // Check if the product exists
    if (isset($products[$product_id])) {
        $product = $products[$product_id];

        // Check if the item is already in the cart
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            // Add the item to the cart
            $_SESSION['cart'][$product_id] = [
                'id' => $product_id,
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $quantity,
            ];
        }
    } else {
        // Product not found -  Handle this appropriately (e.g., display an error)
        echo "<p>Product ID: " . $product_id . " not found.</p>";
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    } else {
        // Handle the case where the item is not in the cart
        echo "<p>Product ID: " . $product_id . " not found in cart.</p>";
    }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity)
{
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    } else {
        // Handle the case where the item is not in the cart
        echo "<p>Product ID: " . $product_id . " not found in cart.</p>";
    }
}

// Function to display the cart
function display_cart()
{
    echo "<h2>Your Shopping Cart</h2>";

    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")";
        echo "<br>";
        echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
        echo "<label for='quantity_" . $item_id . "'>Quantity:</label>";
        echo "<input type='number' id='quantity_" . $item_id . "' name='quantity_" . $item_id . "' value='" . $item['quantity'] . "' min='1'>";
        echo "<input type='hidden' name='product_id' value='" . $item_id . "'>";
        echo "<button type='submit'>Update</button>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";
}

// Handle adding items to the cart (POST request)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Check if the 'product_id' parameter is present
    if (isset($_POST['product_id'])) {
        $product_id = $_POST['product_id'];
        // Check if the quantity parameter is present
        if (isset($_POST['quantity_' . $product_id])) {
            $new_quantity = intval($_POST['quantity_' . $product_id]);
            add_to_cart($product_id, $new_quantity);
        }
    }
}

// Handle removing items from the cart
if (isset($_GET['remove']) && isset($_GET['remove']) == 1) {
    $product_id = $_GET['product_id'];
    remove_from_cart($product_id);
}

// Display the cart
display_cart();

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Important for security!)
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $total_price = floatval($_POST["total_price"]); // Consider using a database query for accurate pricing.

    // Sanitize input (Very important to prevent security vulnerabilities like XSS)
    $product_name = htmlspecialchars($product_name);
    $quantity = intval($quantity);

    // Basic validation (Add more thorough validation as needed)
    if (empty($product_name) || $quantity <= 0 || $total_price <= 0) {
        $error_message = "Please fill in all fields correctly and ensure quantities and prices are positive.";
    } else {
        // Store the order data (This is a simplified example - for production,
        // store in a database)
        $order_data = [
            "product_name" => $product_name,
            "quantity" => $quantity,
            "total_price" => $total_price,
            "order_date" => date("Y-m-d H:i:s")
        ];

        // Display order confirmation
        echo "<div class='order-confirmation'>";
        echo "<h2>Order Confirmation</h2>";
        echo "<p><strong>Product:</strong> " . $product_name . "</p>";
        echo "<p><strong>Quantity:</strong> " . $quantity . "</p>";
        echo "<p><strong>Total Price:</strong> $" . number_format($total_price, 2) . "</p>";  // Format as currency
        echo "<p><strong>Order Date:</strong> " . $order_data["order_date"] . "</p>";
        echo "</div>";

        // (Optional) Log the order to a file or database
        // file_put_contents("order_log.txt", $order_data . PHP_EOL, FILE_APPEND);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
    <style>
        .order-confirmation {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 20px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

    <h1>Purchase Product</h1>

    <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name" placeholder="Enter product name" required>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" min="1" required>

        <label for="total_price">Total Price:</label>
        <input type="number" id="total_price" name="total_price" step="0.01" required>

        <button type="submit">Purchase</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// For demonstration purposes, let's assume you have a $db object
// and a function to connect to the database.

// Function to connect to the database
function connectToDatabase() {
    // Replace with your database credentials
    $host = "localhost";
    $username = "your_username";
    $password = "your_password";
    $dbname = "your_database_name";

    $conn = new mysqli($host, $username, $password, $dbname);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_amount) {
    $conn = connectToDatabase();

    // --- Validate Input (Important!) ---
    if (empty($cart_id) || empty($customer_name) || empty($customer_email) || $payment_amount <= 0) {
        return "Invalid input. Please check your order details.";
    }


    // --- Insert into the Orders Table ---
    $sql_insert_order = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, payment_amount)
                          VALUES ('$cart_id', '$customer_name', '$customer_email', NOW(), '$payment_amount')";

    if ($conn->query($sql_insert_order) === TRUE) {
        $order_id = $conn->insert_id; // Get the ID of the newly inserted order

        // --- Insert Order Items into the OrderItems Table ---
        $sql_insert_order_items = "INSERT INTO order_items (order_id, product_id, quantity)
                                   SELECT $order_id, product_id, quantity
                                   FROM cart_items
                                   WHERE product_id IN (SELECT product_id FROM cart_items WHERE cart_id = '$cart_id')";

        if ($conn->query($sql_insert_order_items) === TRUE) {
            // --- Clear the Cart ---
            $sql_delete_cart_items = "DELETE FROM cart_items WHERE cart_id = '$cart_id'";
            if ($conn->query($sql_delete_cart_items) === TRUE) {
                return "Purchase successful! Order ID: " . $order_id;
            } else {
                return "Error deleting cart items.  Order may be incomplete.";
            }
        } else {
            return "Error inserting order items. Order may be incomplete.";
        }
    } else {
        return "Error inserting order. Please try again.";
    }
}


// --- Example Usage (Simulated Form Handling) ---

// Assuming you have a form that collects the necessary data
// (e.g., cart_id, customer_name, customer_email, payment_amount)
// Let's assume these are passed from a form.

// Example form data (replace with actual form input)
$cart_id = $_POST['cart_id'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];
$payment_amount = $_POST['payment_amount'];

// Handle the purchase
$result = handlePurchase($cart_id, $customer_name, $customer_email, $payment_amount);

// Display the result
echo "<p>" . $result . "</p>";


// --- Database Table Structure (Example) ---

/*
CREATE TABLE carts (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE carts_items (
    cart_id INT PRIMARY KEY,
    product_id INT,
    quantity INT,
    FOREIGN KEY (cart_id) REFERENCES carts(cart_id)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(255),
    price DECIMAL(10, 2)
);


CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    cart_id INT,
    customer_name VARCHAR(255),
    customer_email VARCHAR(255),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_amount DECIMAL(10, 2),
    FOREIGN KEY (cart_id) REFERENCES carts(cart_id)
);

CREATE TABLE order_items (
    order_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
*/


?>


<?php

// ... (Database connection function - connectToDatabase()) ...

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_amount) {
    $conn = connectToDatabase();

    // Input validation (same as before)

    $sql_insert_order = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, payment_amount)
                          VALUES (?, ?, ?, NOW(), ?)";

    $stmt = $conn->prepare($sql_insert_order);

    if ($stmt === false) {
        die("Error preparing statement: " . $conn->error);
    }

    $stmt->bind_param("isss", $cart_id, $customer_name, $customer_email);

    if ($stmt->execute() === false) {
        die("Error executing statement: " . $stmt->error);
    }

    // ... (Rest of the code remains largely the same, but with prepared statements for other queries as needed)
    $stmt->close(); // Important to close the statement after use
}


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }

// Configuration
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];

// 1. Validate Input (Important for security)
if (!isset($product_id) || empty($product_id)) {
    echo "Error: Product ID is required.";
    exit;
}

if (!is_numeric($product_id)) {
    echo "Error: Product ID must be a number.";
    exit;
}

if (!isset($quantity) || empty($quantity)) {
    echo "Error: Quantity is required.";
    exit;
}

if (!is_numeric($quantity)) {
    echo "Error: Quantity must be a number.";
    exit;
}

if (!isset($customer_name) || empty($customer_name)) {
    echo "Error: Customer Name is required.";
    exit;
}

if (!isset($customer_email) || empty($customer_email)) {
    echo "Error: Customer Email is required.";
    exit;
}

if (!filter_var($customer_email, FILTER_VALIDATE_EMAIL)) {
    echo "Error: Invalid Email Address.";
    exit;
}

// 2. Retrieve Product Information
// Replace this with your database query
$product = getProductFromDatabase($product_id);  // Implement this function to fetch product details

if (!$product) {
    echo "Product not found.";
    exit;
}

// 3. Calculate Total Price
$total_price = $product['price'] * $quantity;

// 4.  Create Order Data
$order_id = rand(1000, 9999); // Generate a unique order ID (for demonstration)
$order_date = date('Y-m-d H:i:s');

// 5. Save Order to Database
// Replace this with your actual database insertion query
saveOrderToDatabase($order_id, $product_id, $quantity, $customer_name, $customer_email, $total_price, $order_date);

// 6. Display Confirmation Message
echo "<h2>Order Confirmation</h2>";
echo "<p>Order ID: " . $order_id . "</p>";
echo "<p>Product: " . $product['name'] . "</p>";
echo "<p>Quantity: " . $quantity . "</p>";
echo "<p>Total Price: $" . $total_price . "</p>";
echo "<p>Customer Name: " . $customer_name . "</p>";
echo "<p>Customer Email: " . $customer_email . "</p>";
echo "<p>Order Date: " . $order_date . "</p>";

// 7.  Log the Order (optional)
//  This is important for tracking and debugging
//  Implement logging to a file or database.
//  Example:  logOrderToDatabase($order_id, $customer_name, $total_price);


function getProductFromDatabase($product_id) {
    // Dummy database function (replace with your actual query)
    // This is just for demonstration.  In a real application,
    // you would fetch data from a database.
    $products = [
        1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
        2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
        3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00]
    ];

    if (isset($products[$product_id])) {
        return $products[$product_id];
    } else {
        return null;
    }
}

function saveOrderToDatabase($order_id, $product_id, $quantity, $customer_name, $customer_email, $total_price, $order_date) {
    // Replace with your database insertion query
    // This is just a placeholder.
    //  Example:
    //  $query = "INSERT INTO orders (order_id, product_id, quantity, customer_name, customer_email, total_price, order_date)
    //            VALUES ('$order_id', '$product_id', '$quantity', '$customer_name', '$customer_email', '$total_price', '$order_date')";
    //  $conn->query($query);
    echo "Order saved to database (placeholder)";
}

?>


<?php

// Database connection details (replace with your actual details)
$dbHost = "localhost";
$dbName = "shopping_cart";
$dbUser = "root";
$dbPass = "";

// Initialize the database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $cart_items The items to purchase (e.g., ['product_id' => 1, 'quantity' => 2]).
 * @param string $shipping_address The shipping address.
 * @return string A message indicating the success or failure of the purchase.
 */
function processPurchase(array $cart_items, string $shipping_address) {
    // 1. Validate Input (Basic - add more robust validation as needed)
    if (empty($cart_items) || empty($shipping_address)) {
        return "Error: Please fill in all required fields.";
    }

    // 2.  Update Stock (Simulated - Replace with actual database update)
    // In a real system, you'd update the inventory in your database.
    foreach ($cart_items as $item) {
        $product_id = $item['product_id'];
        $quantity = $item['quantity'];

        // Simulate stock decrease (replace with database query)
        // Example: $conn->query("UPDATE products SET stock = stock - $quantity WHERE id = $product_id");
        echo "Simulating Stock Update: Reduced stock for product ID: " . $product_id . " by " . $quantity . "<br>";
    }


    // 3.  Create Order (Simulated - Replace with actual database insertion)
    $order_id = bin2hex(uniqid()); // Generate a unique order ID
    $order_date = date("Y-m-d H:i:s");

    // Example Order Data (replace with actual data from your database)
    $order_data = [
        'order_id' => $order_id,
        'user_id' => 1, // Replace with the user's ID
        'order_date' => $order_date,
        'shipping_address' => $shipping_address,
        'total_amount' => 0 // Calculate this based on cart items
    ];

    // Save order to database (replace with actual insert query)
    // Example: $conn->query("INSERT INTO orders (order_id, user_id, order_date, shipping_address, total_amount) VALUES ('$order_id', $user_id, '$order_date', '$shipping_address', $total_amount)");
    echo "Simulating Order Creation: Order ID: " . $order_id . "<br>";


    // 4.  Confirmation Message
    return "Purchase successful! Order ID: " . $order_id;
}


// --- Example Usage (Simulated Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart items from the form (assuming they are in a JSON array)
    $cart_items_json = $_POST['cart_items'];
    $cart_items = json_decode($cart_items_json, true); // Convert JSON to associative array

    // Get shipping address from the form
    $shipping_address = $_POST['shipping_address'];

    // Process the purchase
    $purchase_result = processPurchase($cart_items, $shipping_address);

    // Display the result
    echo $purchase_result;
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart Purchase</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form method="post" action="">
    <label for="cart_items">Cart Items (JSON Array):</label><br>
    <textarea id="cart_items" name="cart_items" rows="10" cols="50">
    [
        { "product_id": 1, "quantity": 2 },
        { "product_id": 2, "quantity": 1 }
    ]
</textarea><br><br>

    <label for="shipping_address">Shipping Address:</label><br>
    <input type="text" id="shipping_address" name="shipping_address" value="<?php if (isset($_POST['shipping_address'])) echo htmlspecialchars($_POST['shipping_address']); ?>"><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is a simplified example; you'll need to adapt it to your specific database setup.

// ---  Database Configuration (Replace with your actual values) ---
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_pass = "your_db_password";
// ---  End Database Configuration ---


// Function to handle the purchase process
function handlePurchase($orderData) {
    // 1. Validate Input (VERY IMPORTANT - Prevent SQL Injection!)
    $product_id = isset($orderData['product_id']) ? (int)$orderData['product_id'] : 0; // Type casting for safety
    $quantity = isset($orderData['quantity']) ? (int)$orderData['quantity'] : 1; // Default quantity
    $customer_email = isset($orderData['customer_email']) ? trim($orderData['customer_email']) : '';


    if ($product_id <= 0 || $quantity <= 0 || empty($customer_email)) {
        return "Invalid order data. Please check your input.";
    }

    // 2. Check Product Availability (Example - Adapt to your product table)
    $product_query = "SELECT stock FROM products WHERE id = $product_id";
    $product_result = $db->query($product_query);

    if ($product_result->num_rows > 0) {
        $product_stock = $product_result->fetch_assoc()['stock'];
        if ($product_stock < $quantity) {
            return "Product is out of stock.";
        }
    } else {
        return "Product not found.";
    }



    // 3.  Create Order Record in Database
    $sql = "INSERT INTO orders (customer_email, product_id, quantity, order_date) VALUES ('$customer_email', $product_id, $quantity, NOW())";

    if ($db->query($sql)) {
        // 4. Update Product Stock
        $update_stock_sql = "UPDATE products SET stock = stock - $quantity WHERE id = $product_id";
        if ($db->query($update_stock_sql)) {
            return "Order placed successfully! Order ID: " . $db->insert_id; // Get the last inserted order ID
        } else {
            // Rollback:  If updating the stock fails, delete the order
            $delete_order_sql = "DELETE FROM orders WHERE id = $db->insert_id";
            if ($db->query($delete_order_sql)) {
                return "Order placed, but stock update failed. Please try again.";
            } else {
                return "Order placed, but stock update failed. Database error.";
            }
        }
    } else {
        return "Error placing order. Database error.";
    }
}



// ---  Example Usage (From a form submission) ---

// Assume you received data from a form
$orderData = [
    'product_id' => 1,
    'quantity' => 2,
    'customer_email' => 'test@example.com'
];



$result = handlePurchase($orderData);
echo "<p>" . $result . "</p>";


?>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUsername = "your_username";
$dbPassword = "your_password";
$dbName = "your_database";

// Database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Session handling for cart items
session_start();

// Function to add an item to the cart
function addToCart($productId, $quantity) {
  global $conn;

  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$productId] = ['quantity' => $quantity];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($productId, $quantity) {
  global $conn;

  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  } else {
    // Product not in cart, add it with quantity 1
    addToCart($productId, 1);
  }
}

// Function to remove an item from the cart
function removeCartItem($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  $cartItems = getCartItems();
  foreach ($cartItems as $itemId => $item) {
    // Get the product price (Assume you have a products table)
    $productPrice = getProductPrice($itemId); // Implement this function
    $totalForItem = $productPrice * $item['quantity'];
    $total = $total + $totalForItem;
  }
  return $total;
}

// Function to get the price of a product (Replace with your database query)
function getProductPrice($productId) {
    // **IMPORTANT:** This is a placeholder.  Replace with your actual database query.
    //  You'll need to fetch the price from your products table.
    // Example:
    $sql = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $productId); // 'i' for integer
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        return $row['price'];
    } else {
        return 0; // Product not found, return 0 or handle appropriately
    }
    $stmt->close();
}

// ---  Purchase Processing  ---

// If the purchase form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 1. Validate Input (Crucially Important - Add more robust validation)
  $shippingAddress = $_POST["shipping_address"];
  $paymentMethod = $_POST["payment_method"];

  // 2. Process Payment (Replace with your actual payment gateway integration)
  //   - This is a placeholder - integrate with a payment gateway like Stripe or PayPal
  $orderTotal = calculateCartTotal();
  echo "Order Total: $" . $orderTotal . "<br>";
  echo "Shipping Address: " . $shippingAddress . "<br>";
  echo "Payment Method: " . $paymentMethod . "<br>";

  // 3.  Order Confirmation (You'll need to store this order in a database)
  //   -  Create an order record in your database with the items, quantities,
  //      shipping address, payment details, and order total.

  // 4.  Clear the Cart
  session_start();
  session_destroy();
  echo "Thank you for your order!  Your cart has been emptied.";

}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  // Display cart items
  $cartItems = getCartItems();
  if (count($cartItems) > 0) {
    echo "<h3>Cart Items:</h3>";
    foreach ($cartItems as $itemId => $item) {
      echo "<strong>Product ID:</strong> " . $itemId . "<br>";
      echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";

      // Get product name (replace with your database query)
      $productName = getProductName($itemId);
      echo "<strong>Product Name:</strong> " . $productName . "<br>";

      // You can add a button to update the quantity or remove the item
      echo "<form method='post' action=''>";
      echo "<label for='quantity_" . $itemId . "'>Quantity:</label>";
      echo "<input type='number' id='quantity_" . $itemId . "' value='" . $item['quantity'] . "' min='1' name='quantity_" . $itemId . "'>";
      echo "<input type='submit' value='Update'> ";
      echo "<input type='submit' value='Remove' name='remove_" . $itemId . "'>";
      echo "</form>";
    }
  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

  <h2>Checkout</h2>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="shipping_address">Shipping Address:</label><br>
    <textarea id="shipping_address" name="shipping_address" rows="4" cols="50"></textarea><br><br>

    <label for="payment_method">Payment Method:</label><br>
    <select id="payment_method" name="payment_method">
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" name="submit" value="Place Order">
  </form>

  <script>
    // Example JavaScript to update quantity (you can enhance this)
    // This is just a basic illustration
    document.querySelectorAll('input[type="number"]').forEach(input => {
      input.addEventListener('change', function() {
        // Get the product ID and new quantity from the input
        const productId = this.id.split('_')[1]; // Extract the product ID
        const newQuantity = parseInt(this.value);

        // Update the cart (replace with your database interaction)
        updateCartQuantity(productId, newQuantity);

        // Refresh the cart display (you might use AJAX to avoid a page reload)
        location.reload();
      });
    });
  </script>

</body>
</html>


<?php

// Database connection (Replace with your actual database details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle adding a purchase
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
  global $conn;  // Access the database connection

  // Sanitize inputs to prevent SQL injection
  $product_id = mysqli_real_escape_string($conn, $product_id);
  $quantity = mysqli_real_escape_string($conn, $quantity);
  $customer_name = mysqli_real_escape_string($conn, $customer_name);
  $customer_email = mysqli_real_escape_string($conn, $customer_email);

  // SQL query to insert the purchase
  $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email)
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email')";

  if ($conn->query($sql) === TRUE) {
    return true; // Purchase added successfully
  } else {
    return false; // Error adding purchase
  }
}

// Example usage (handling form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {
    echo "Purchase added successfully! Product ID: " . $product_id;
  } else {
    echo "Error adding purchase.";
  }
}

//  --- HTML Form for Purchase ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Add a Purchase</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Add Purchase">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// --- Helper Functions ---
/**
 * Connects to the database.
 *
 * @return mysqli|null Connection object or null if connection fails.
 */
function connectToDatabase() {
  global $db_host, $db_name, $db_user, $db_password;

  try {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
      throw new Exception('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
  } catch (Exception $e) {
    echo "Error connecting to database: " . $e->getMessage() . "<br>";
    return null;
  }
}

/**
 * Adds a new order to the database.
 *
 * @param mysqli $conn Database connection object.
 * @param string $product_id
 * @param int $quantity
 * @param string $customer_name
 * @param string $customer_email
 * @return int|false Order ID on success, or false on failure.
 */
function addOrder(mysqli $conn, $product_id, $quantity, $customer_name, $customer_email) {
  $order_date = date('Y-m-d H:i:s'); // Get current date and time

  $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date)
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', '$order_date')";

  if ($conn->query($sql) === TRUE) {
    return $conn->insert_id;  // Return the ID of the newly inserted row
  } else {
    echo "Error inserting order: " . $conn->error . "<br>";
    return false;
  }
}


// --- Purchase Functionality ---

// 1.  Handle form submission (if applicable)
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  $customer_name = $_POST['customer_name'];
  $customer_email = $_POST['customer_email'];

  // --- Validation (IMPORTANT!) ---
  if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
    echo "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    echo "Invalid quantity. Quantity must be a positive number.";
  } else {
    // 2. Connect to the database
    $conn = connectToDatabase();

    if ($conn) {
      // 3. Add the order
      $order_id = addOrder($conn, $product_id, $quantity, $customer_name, $customer_email);

      if ($order_id) {
        echo "Order placed successfully! Order ID: " . $order_id . "<br>";
      } else {
        echo "Order placement failed.";
      }

      // Close the database connection
      $conn->close();
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php
session_start();

// Configuration (Adjust these as needed)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 1],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 1],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 1],
];

// Cart initialization
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Helper Functions
function add_to_cart($product_id, $quantity) {
    global $products;

    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$product_id] = [
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $quantity
            ];
        }
    }
}

function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

function get_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return round($total, 2);
}

function display_cart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . get_cart_total() . "</strong></p>";
}

// Handle Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    add_to_cart($product_id, $quantity);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}

// Handle Remove from Cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = (int)$_GET['remove_from_cart'];
    remove_from_cart($product_id);
    header("Location: cart.php");
    exit();
}

// Handle Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    update_cart_quantity($product_id, $quantity);
    header("Location: cart.php");
    exit();
}

// Display the cart
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .product {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px;
            width: 200px;
        }
    </style>
</head>
<body>

    <h1>Online Store</h1>

    <div class="product">
        <h2>T-Shirt</h2>
        <p>Price: $20.00</p>
        <form method="post">
            <label for="quantity">Quantity:</label>
            <input type="number" id="quantity" name="quantity" value="1" min="1">
            <button type="submit" name="update_quantity" value="<?php echo $product_id = 1; ?>">Add to Cart</button>
        </form>
    </div>

    <div class="product">
        <h2>Jeans</h2>
        <p>Price: $50.00</p>
        <form method="post">
            <label for="quantity">Quantity:</label>
            <input type="number" id="quantity" name="quantity" value="1" min="1">
            <button type="submit" name="update_quantity" value="<?php echo $product_id = 2; ?>">Add to Cart</button>
        </form>
    </div>

    <div class="product">
        <h2>Hat</h2>
        <p>Price: $15.00</p>
        <form method="post">
            <label for="quantity">Quantity:</label>
            <input type="number" id="quantity" name="quantity" value="1" min="1">
            <button type="submit" name="update_quantity" value="<?php echo $product_id = 3; ?>">Add to Cart</button>
        </form>
    </div>


    <hr>

    <?php display_cart(); ?>


</body>
</html>


<?php

// Database Connection (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Helper function to sanitize input
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}


// Function to handle the purchase process
function processPurchase($orderData) {
    // Validate data (Add more validation as needed)
    $errors = [];

    if (empty($orderData['name']) || empty($orderData['email']) || empty($orderData['quantity']) || empty($orderData['product_id'])) {
        $errors[] = "Please fill in all required fields.";
    }

    if (!filter_var($orderData['email'], FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Invalid email format.";
    }

    if (!is_numeric($orderData['quantity']) || $orderData['quantity'] <= 0) {
        $errors[] = "Quantity must be a positive number.";
    }

    if (!is_numeric($orderData['product_id']) || !is_numeric($orderData['quantity'])) {
        $errors[] = "Invalid product_id or quantity.";
    }


    if (empty($errors)) {
        // Prepare data for insertion
        $name = sanitizeInput($orderData['name']);
        $email = sanitizeInput($orderData['email']);
        $quantity = (int)$orderData['quantity'];  // Convert to integer
        $product_id = (int)$orderData['product_id'];

        // Prepare SQL statement
        $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES (:name, :email, :quantity, :product_id)";

        // Prepare statement
        $stmt = $pdo->prepare($sql);

        // Execute statement
        $stmt->execute([
            ':name' => $name,
            ':email' => $email,
            ':quantity' => $quantity,
            ':product_id' => $product_id
        ]);

        return true; // Purchase successful
    } else {
        return false; // Purchase failed due to validation errors
    }
}


// ---  Example Usage (Form Submission Handling) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Collect form data (Sanitize and validate as needed)
    $orderData = [
        'name' => sanitizeInput($_POST["name"]),
        'email' => sanitizeInput($_POST["email"]),
        'quantity' => (int)sanitizeInput($_POST["quantity"]),
        'product_id' => (int)sanitizeInput($_POST["product_id"])
    ];


    // Process the purchase
    if (processPurchase($orderData)) {
        echo "<h2>Purchase successful! Thank you, " . $orderData['name'] . "</h2>";
        echo "<p>Your order has been placed.  You will receive a confirmation email shortly.</p>";
    } else {
        echo "<h2>Error:</h2>";
        echo "<p>Please check your form for errors.</p>";
        print_r($errors); // Display validation errors (for debugging)
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Form</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_db";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  return $conn;
}

// Function to handle purchase processing
function processPurchase($cart, $user_id) {
  $conn = connectToDatabase();

  // Create a temporary table to store the order details
  $sql = "CREATE TEMPORARY TABLE IF NOT EXISTS temp_order (
            order_id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            total_amount DECIMAL(10, 2)
  )";
  if (!$conn->query($sql)) {
    echo "Error creating temporary table: " . $conn->error;
    return false;
  }

  // Insert order details into the temporary table
  $sql = "INSERT INTO temp_order (user_id, total_amount) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ii", $user_id, calculateTotal($cart));
  if (!$stmt->execute()) {
    echo "Error inserting order details: " . $stmt->error;
    $stmt->close();
    return false;
  }
  $stmt->close();

  // Insert order items into the temporary table
  foreach ($cart as $item_id => $quantity) {
    $sql = "INSERT INTO temp_order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $conn->insert_id, $item_id, $quantity);
    if (!$stmt->execute()) {
      echo "Error inserting order item: " . $stmt->error;
      $stmt->close();
      $conn->rollback(); // Rollback the transaction on error
      return false;
    }
    $stmt->close();
  }

  // Commit the transaction
  $conn->commit();

  //  (Optional)  Send email confirmation, etc.

  //  (Optional)  Clean up the temporary table
  //  $conn->drop_temporary_table('temp_order'); // Use this if you're using MySQL 8.0+

  return true; // Purchase processed successfully
}


// Function to calculate the total order amount
function calculateTotal($cart) {
  $total = 0;
  foreach ($cart as $item_id => $quantity) {
    // Retrieve product price from the products table (replace with your query)
    $product = getProductDetails($item_id);
    if ($product) {
      $total += $product['price'] * $quantity;
    }
  }
  return $total;
}

//  Placeholder function to fetch product details.  Replace with your actual query.
function getProductDetails($product_id) {
  //  Replace this with your database query to fetch product details
  //  Example:
  //  $sql = "SELECT price FROM products WHERE id = ?";
  //  $stmt = $conn->prepare($sql);
  //  $stmt->bind_param("i", $product_id);
  //  $stmt->execute();
  //  $result = $stmt->get_result();
  //  if ($row = $result->fetch_assoc()) {
  //    return $row;
  //  }
  //  return null;

  // Dummy product
  if ($product_id == 1) {
    return ['price' => 10.00];
  }
  if ($product_id == 2) {
    return ['price' => 25.50];
  }
  return null;
}

// Example usage (simulated cart and user ID)
$cart = [
  1 => 2, // Product ID 1, quantity 2
  2 => 1  // Product ID 2, quantity 1
];
$user_id = 1;

if (processPurchase($cart, $user_id)) {
  echo "Purchase successful! Order ID: " . $conn->insert_id;
} else {
  echo "Purchase failed.";
}

// Close the database connection
$conn->close();

?>


<?php

// Database Connection (Replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Product Data (Example) - Replace with your product data source
$products = [
    ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];


// Function to handle the purchase process
function handlePurchase($cart, $conn) {
    $total = 0;
    $items = [];

    foreach ($cart as $product_id => $quantity) {
        // Find the product by ID
        $product = findProductById($product_id, $conn);

        if ($product) {
            $price = $product['price'];
            $total += $price * $quantity;
            $items[] = [
                'product_id' => $product_id,
                'name' => $product['name'],
                'quantity' => $quantity,
                'price' => $price,
            ];
        } else {
            // Handle product not found (e.g., display an error)
            return ['error' => "Product with ID '$product_id' not found."];
        }
    }

    // Insert order into database (Replace with your database insertion query)
    $sql = "INSERT INTO orders (items, total_amount) VALUES (:items, :total_amount)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $items, $total); // 's' indicates a string
    if ($stmt->execute()) {
        $order_id = $conn->insert_id; // Get the ID of the newly inserted order
        return ['success' => true, 'order_id' => $order_id];
    } else {
        return ['error' => "Failed to insert order into database: " . $conn->error];
    }

    $stmt->close(); // Close the statement
}


// Purchase Request Handler
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart data from POST request (Assuming a JSON array is sent)
    $cart = json_decode($_POST["cart"], true);

    if (json_decode($_POST["cart"]) === null) {
        $cart = []; // Handle invalid JSON
    }

    // Process the purchase
    $result = handlePurchase($cart, $conn);

    if ($result['success']) {
        echo "<p style='color:green;'>Purchase successful! Order ID: " . $result['order_id'] . "</p>";
    } else {
        echo "<p style='color:red;'>Error: " . $result['error'] . "</p>";
    }
} else {
    // Display the cart form
    echo "<h2>Shopping Cart</h2>";
    echo "<form method='post' action=''>";
    echo "<ul>";
    foreach ($products as $product) {
        echo "<li>";
        echo "<label for='product_" . $product['id'] . "'>" . $product['name'] . " ($" . $product['price'] . ")</label><br>";
        echo "<input type='number' id='product_" . $product['id'] . "' name='cart[' . $product['id'] . ']' value='0' min='0'>";
        echo "<button type='submit' name='add_to_cart' value='" . $product['id'] . "'>Add to Cart</button>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<input type='hidden' name='action' value='purchase'>"; // Indicate purchase action
    echo "<button type='submit' name='purchase'>Complete Purchase</button>";
    echo "</form>";
}

// Close connection
$conn->close();
?>


<?php

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get form data
    $product = $_POST["product"];
    $quantity = $_POST["quantity"];
    $price = $_POST["price"];

    // Validate the input
    if (empty($product) || empty($quantity) || empty($price)) {
        echo "<p>Please fill in all fields.</p>";
    } elseif (!is_numeric($quantity) || !is_numeric($price)) {
        echo "<p>Quantity and Price must be numeric values.</p>";
    } else {
        // Calculate the total amount
        $totalAmount = $quantity * $price;

        // Store the purchase data (in an array - for demonstration only)
        $purchaseData = [
            "product" => $product,
            "quantity" => $quantity,
            "price" => $price,
            "totalAmount" => $totalAmount,
            "timestamp" => date("Y-m-d H:i:s")
        ];

        // Display a confirmation message
        echo "<p><strong>Purchase Confirmation:</strong></p>";
        echo "<p>Product: " . $product . "</p>";
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Price per Item: $" . $price . "</p>";
        echo "<p>Total Amount: $" . $totalAmount . "</p>";
        echo "<p>Timestamp: " . $timestamp . "</p>";

        // You would typically save this $purchaseData to a database here.
        // For example:
        // $db = new DatabaseConnection(); // Assuming you have a database class
        // $db->insertPurchase($purchaseData);
    }
} else {
    echo "<p>Invalid request.</p>";
}
?>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// For this example, we'll use a simplified database connection:

$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a purchase
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
  global $conn; // Access the database connection

  $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) VALUES (
          '" . $product_id . "',
          " . $quantity . ",
          '".$customer_name."',
          '".$customer_email."',
          NOW()
        )";

  if ($conn->query($sql) === TRUE) {
    return true; // Purchase added successfully
  } else {
    return false; // Error adding purchase
  }
}

// Function to display a product (example - for a shopping cart)
function displayProduct($product_id, $product_name, $price) {
  echo "<form method='post' action=''>";
  echo "<label for='quantity'>" . $product_name . " - $" . $price . "</label><br>";
  echo "<input type='number' id='quantity' name='quantity' value='1' min='1' required><br>";
  echo "<input type='submit' value='Add to Cart'>";
  echo "</form>";
}



// --- Example Usage (Simulating a shopping cart interaction) ---

//  Simulate a database query to get product information (replace with your actual database query)
//  This is just for demonstration; in a real application, you'd fetch from your database.
$products = [
    1 => ["product_id" => 1, "product_name" => "Laptop", "price" => 1200],
    2 => ["product_id" => 2, "product_name" => "Mouse", "price" => 25],
    3 => ["product_id" => 3, "product_name" => "Keyboard", "price" => 75]
];

echo "<h2>Shopping Cart</h2>";

foreach ($products as $product_id => $product_data) {
    displayProduct($product_id, $product_data["product_name"], $product_data["price"]);
}


// Simulate a form submission to add items to the cart
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    //  Validate the quantity (add more robust validation in a real application)
    if (is_numeric($quantity) && $quantity >= 1) {
        if (addPurchase($product_id, $quantity, "John Doe", "john.doe@example.com")) {
            echo "<p>Item added to cart successfully!</p>";
        } else {
            echo "<p>Error adding item to cart.</p>";
        }
    } else {
        echo "<p>Invalid quantity.</p>";
    }
}

// Example of displaying the cart contents (simplified)
echo "<br><br><h2>Cart Contents (Simplified)</h2>";
// In a real application, you'd query the database for the cart items.
// For this example, we just show a few items:
echo "<p>Product 1: Quantity 1</p>";
echo "<p>Product 2: Quantity 2</p>";


// --- End of Example Usage ---

// Important notes:
// 1.  Database Connection:  Replace the placeholder values in the $db_host, $db_user, $db_password, and $db_name variables with your actual database credentials.
// 2.  Database Schema: This code assumes you have a database table named "purchases" with the following columns:
//     - product_id (INT)
//     - quantity (INT)
//     - customer_name (VARCHAR)
//     - customer_email (VARCHAR)
//     - purchase_date (DATETIME)
// 3.  Security:  This is a simplified example for demonstration purposes. In a production environment, you *must* implement proper security measures, including:
//     - Input validation and sanitization (to prevent SQL injection)
//     - Proper error handling and logging
//     - Password hashing and authentication for user accounts
//     - Protection against Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF) attacks.
// 4.  Database Querying:  Replace the example product data with actual database queries to retrieve product information.
// 5.  Error Handling:  Expand the error handling to provide more informative messages to the user.
// 6.  User Interface:  This code generates a basic HTML form.  You'll need to style it and integrate it into your website's design.

?>


<?php
session_start(); // Start the session

// Database connection (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

// --- Purchase Functionality ---

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
        $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);

        if ($product_id && $quantity > 0) {
            // Check if the product exists
            $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
            $stmt->execute([$product_id]);
            $product = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($product) {
                // Update the cart
                if (isset($_SESSION['cart']) === false) {
                    $_SESSION['cart'] = array();
                }

                if (isset($_SESSION['cart'][$product_id])) {
                    $_SESSION['cart'][$product_id] += $quantity;
                } else {
                    $_SESSION['cart'][$product_id] = $quantity;
                }

                echo json_encode(['success' => true, 'message' => 'Product added to cart']);
            } else {
                echo json_encode(['success' => false, 'message' => 'Product not found']);
            }
        } else {
            echo json_encode(['success' => false, 'message' => 'Invalid product ID or quantity']);
        }
    }
}


// 2. View Cart
if (isset($_GET['view_cart'])) {
    $cart_items = $_SESSION['cart'];
    $total_amount = 0;

    if (empty($cart_items)) {
        echo "<h2>Your cart is empty.</h2>";
    } else {
        echo "<h2>Shopping Cart</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

        foreach ($cart_items as $product_id => $quantity) {
            // Retrieve product details
            $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
            $stmt->execute([$product_id]);
            $product = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($product) {
                $total = $product['price'] * $quantity;
                $total_amount += $total;

                echo "<tr><td>" . $product['name'] . "</td><td>$" . $product['price'] . "</td><td>" . $quantity . "</td><td>$" . $total . "</td></tr>";
            }
        }

        echo "</table>";
        echo "<p><strong>Total Amount: $" . $total_amount . "</strong></p>";
    }
}


// 3. Remove Item from Cart
if (isset($_GET['remove_item'])) {
    $product_id = filter_input(INPUT_GET, 'remove_item', FILTER_VALIDATE_INT);

    if ($product_id && isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
        echo json_encode(['success' => true, 'message' => 'Product removed from cart']);
    } else {
        echo json_encode(['success' => false, 'message' => 'Product not found in cart']);
    }
}


// 4. Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $new_quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);

    if ($product_id && $new_quantity > 0) {
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id] = $new_quantity;
            echo json_encode(['success' => true, 'message' => 'Quantity updated']);
        } else {
            echo json_encode(['success' => false, 'message' => 'Product not found in cart']);
        }
    } else {
        echo json_encode(['success' => false, 'message' => 'Invalid product ID or quantity']);
    }
}


?>


<?php

// Database Connection (Replace with your database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Functions ---

/**
 * Adds a new order to the database.
 *
 * @param array $orderData  An associative array containing order details.
 *                          Example: ['product_id' => 123, 'quantity' => 2, 'customer_id' => 456]
 * @return int|false  The ID of the new order if successful, or false on failure.
 */
function addOrder(array $orderData) {
  global $conn;

  $product_id = $orderData['product_id'];
  $quantity = $orderData['quantity'];
  $customer_id = $orderData['customer_id'];

  // Sanitize inputs (important for security!) -  This is a basic example.  Expand as needed.
  $product_id = (int)$product_id;
  $quantity = (int)$quantity;
  $customer_id = (int)$customer_id;

  // SQL Query
  $sql = "INSERT INTO orders (product_id, quantity, customer_id) VALUES (?, ?, ?)";

  // Prepare statement
  $stmt = $conn->prepare($sql);

  if ($stmt) {
    // Bind parameters
    $stmt->bind_param("iii", $product_id, $quantity, $customer_id);

    // Execute statement
    if ($stmt->execute()) {
      // Get the last inserted ID
      $order_id = $conn->insert_id;
      return $order_id; // Return the actual ID inserted
    } else {
      error_log("Query failed: " . $conn->error);
      return false;
    }
  } else {
    error_log("Prepare failed: " . $conn->error);
    return false;
  }

  // Close statement
  $stmt->close();
}

/**
 * Retrieves product details by product_id.
 *
 * @param int $product_id The ID of the product to retrieve.
 * @return array|null An associative array containing product details, or null if not found.
 */
function getProductDetails(int $product_id) {
  $sql = "SELECT * FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);

  if ($stmt) {
    $stmt->bind_param("i", $product_id);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
      $row = $result->fetch_assoc();
      return $row;
    } else {
      return null;
    }

    $stmt->close();
  } else {
    error_log("Prepare failed: " . $conn->error);
    return null;
  }
}

// --- Example Usage (Handle form submission or other triggering event) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get form data
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customer_id = $_POST["customer_id"];

  // Validate input (Important!  Don't just trust user input.)
  if (!is_numeric($product_id) || $product_id <= 0) {
    $error = "Invalid product ID.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Invalid quantity.";
  } elseif (!is_numeric($customer_id) || $customer_id <= 0) {
    $error = "Invalid customer ID.";
  } else {

    // Add the order to the database
    $order_id = addOrder(["product_id" => $product_id, "quantity" => $quantity, "customer_id" => $customer_id]);

    if ($order_id) {
      $message = "Order placed successfully! Order ID: " . $order_id;
    } else {
      $error = "Failed to place order. Please try again.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Order</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
  <?php } ?>


  <form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <label for="customer_id">Customer ID:</label>
    <input type="number" id="customer_id" name="customer_id" required>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Initialize the purchase data
$purchase = array();

// Get purchase details from form input
$productName = $_POST['productName'] ?? ''; // Use null coalescing operator for safety
$quantity = (int)$_POST['quantity'] ?? 0; // Cast to integer
$price = (float)$_POST['price'] ?? 0.00; //Cast to float

// Calculate the total
$total = $quantity * $price;

// Add purchase data to the array
$purchase['productName'] = $productName;
$purchase['quantity'] = $quantity;
$purchase['price'] = $price;
$purchase['total'] = $total;

// Display the purchase details
echo "<h2>Purchase Confirmation</h2>";
echo "<p><strong>Product Name:</strong> " . htmlspecialchars($productName) . "</p>";
echo "<p><strong>Quantity:</strong> " . $quantity . "</p>";
echo "<p><strong>Price per Unit:</strong> $" . number_format($price, 2) . "</p>";
echo "<p><strong>Total:</strong> $" . number_format($total, 2) . "</p>";

// Confirmation message
echo "<p>Thank you for your purchase! Your order has been received.</p>";

// You could also store this purchase data in a database here.
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="purchase.php">
    <label for="productName">Product Name:</label>
    <input type="text" id="productName" name="productName" value="<?php echo htmlspecialchars($productName); ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo $quantity; ?>">
    <br><br>

    <label for="price">Price per Unit:</label>
    <input type="number" id="price" name="price" step="0.01" value="<?php echo $price; ?>">
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php
session_start();

// Database Connection (Replace with your actual database details)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to check if an item is in the cart
function isInCart($userId, $itemId) {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM cart WHERE user_id = '$userId' AND item_id = '$itemId'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return true;
    } else {
        return false;
    }
}

// Function to update the cart
function updateCart($userId, $itemId, $quantity) {
    $conn = connectToDatabase();
    $sql = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$userId' AND item_id = '$itemId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to add an item to the cart
function addToCart($userId, $itemId, $quantity) {
    if (isInCart($userId, $itemId)) {
        // Item already in cart, update quantity
        return updateCart($userId, $itemId, $quantity);
    } else {
        // Item not in cart, add it
        $sql = "INSERT INTO cart (user_id, item_id, quantity) VALUES ('$userId', '$itemId', '$quantity')";

        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }
}

// Function to remove an item from the cart
function removeFromCart($userId, $itemId) {
    $conn = connectToDatabase();
    $sql = "DELETE FROM cart WHERE user_id = '$userId' AND item_id = '$itemId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to get the cart items for a user
function getCartItems($userId) {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM cart WHERE user_id = '$userId'";
    $result = $conn->query($sql);

    $items = array();
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $items[] = $row;
        }
    }
    return $items;
}

// --- Purchase Functionality ---

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user ID from session
    $userId = $_SESSION['userId'];

    // Check for purchase details (e.g., address, payment information)
    // ... Add your validation and processing logic here ...

    //  Simulate processing (replace with actual payment gateway integration)
    $cartItems = getCartItems($userId);

    if (empty($cartItems)) {
        echo "<p>Your cart is empty.  Please add items before purchasing.</p>";
    } else {
        echo "<p>Successfully placed your order!</p>";
        //  Clear the cart after purchase (optional)
        //  removeFromCart($userId,  $itemId) for all items in cart.
        //  Consider a session variable for the user to be logged in.
    }
}

// --- Display Cart Contents ---

// Get cart items for the current user
$cartItems = getCartItems($_SESSION['userId']);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (!empty($cartItems)) { ?>
        <table>
            <thead>
                <tr>
                    <th>Item ID</th>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($cartItems as $item): ?>
                    <tr>
                        <td><?php echo $item['item_id']; ?></td>
                        <td><?php echo $item['item_name']; ?></td>
                        <td><?php echo $item['quantity']; ?></td>
                        <td><?php echo $item['price']; ?></td>
                        <td><?php echo $item['quantity'] * $item['price']; ?></td>
                        <td>
                            <form method="post" action="">
                                <input type="hidden" name="item_id" value="<?php echo $item['item_id']; ?>">
                                <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>">
                                <input type="submit" value="Update">
                            </form>
                            <a href="remove_from_cart.php?item_id=<?php echo $item['item_id']; ?>">Remove</a>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>

        <p>Total Items: <?php echo count($cartItems); ?></p>
        <p>Total:  <?php echo $total = array_sum(array_map(function($item) {return $item['quantity'] * $item['price'];})) ; ?></p>

        <form method="post" action="">
            <input type="submit" name="purchase" value="Purchase">
        </form>
    <?php } else {
        echo "<p>Your cart is empty.</p>";
    } ?>
</body>
</html>


<?php
session_start();

// Database Connection (Replace with your actual database details)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Get item ID from URL
$itemId = $_GET['item_id'];

// Remove item from cart
$conn = connectToDatabase();
$sql = "DELETE FROM cart WHERE item_id = '$itemId'";

if ($conn->query($sql) === TRUE) {
    // Optionally, redirect the user to the cart page
    header("Location: cart.php"); // Assuming cart.php is the page displaying the cart
    exit();
} else {
    echo "Error: " . $conn->error;
}

?>


<?php

// Database Configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "my_shop";
$db_user = "root";
$db_pass = "password";

// Function to connect to the database
function connectDB() {
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to create a purchase
function createPurchase($product_id, $quantity, $customer_name, $customer_email) {
  $conn = connectDB();

  // Sanitize input (VERY IMPORTANT - DO THIS PROPERLY IN PRODUCTION)
  $product_id = (int)$product_id;  // Convert to integer
  $quantity = (int)$quantity;
  $customer_name = $conn->real_escape_string($customer_name);
  $customer_email = $conn->real_escape_string($customer_email);

  // Construct the SQL query (Use prepared statements in production!)
  $query = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) VALUES ($product_id, $quantity, '$customer_name', '$customer_email', NOW())";

  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  if (createPurchase($product_id, $quantity, $customer_name, $customer_email)) {
    echo "Purchase created successfully!";
  } else {
    echo "Error creating purchase.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <form method="post" action="purchase.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
session_start();

// Configuration
$items = []; // Array to store shopping cart items
$cart_file = 'cart.json'; // File to store cart data

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int $quantity The quantity of the product to add.
 * @param float $price The price of the product.
 */
function addToCart($product_id, $name, $quantity, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  $product_exists = false;
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['id'] == $product_id) {
      $item['quantity'] += $quantity;
      $product_exists = true;
      break;
    }
  }

  // If the product is not in the cart, add it
  if (!$product_exists) {
    $_SESSION['cart'][] = [
      'id' => $product_id,
      'name' => $name,
      'quantity' => $quantity,
      'price' => $price
    ];
  }

  // Save the cart data to the file
  saveCartToFile($_SESSION['cart']);
}


/**
 * Removes an item from the cart by its ID.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Optionally: Re-index the array to avoid gaps
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        break;
      }
    }
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) {
      if ($item['id'] == $product_id) {
        $item['quantity'] = $new_quantity;
        break;
      }
    }
  }
}


/**
 * Gets the cart total.
 *
 * @return float The total cost of the cart.
 */
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


/**
 * Saves the cart data to a JSON file.
 *
 * @param array $cart_data The cart data to save.
 */
function saveCartToFile($cart_data) {
  file_put_contents($cart_file, json_encode($cart_data, JSON_PRETTY_PRINT));
}

/**
 * Loads the cart data from the JSON file.
 */
function loadCartFromFile() {
  global $items; // Access the global array

  if (file_exists($cart_file)) {
    $cart_data = file_get_contents($cart_file);
    if ($cart_data = json_decode($cart_data, true)) {
      $items = $cart_data;
    }
  }
}



// --- Main Script ---

// Load cart data from file
loadCartFromFile();


// --- Cart Actions (Based on Form Submission) ---

if ($_SERVER->is_uploaded_file) { // Check if the form was submitted
  if (isset($_POST['action']) && isset($_POST['product_id'])) {
    $action = $_POST['action'];
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    switch ($action) {
      case 'add':
        addToCart($product_id, $_POST['name'], $quantity, $_POST['price']);
        break;
      case 'remove':
        removeFromCart($product_id);
        break;
      case 'update':
        updateQuantity($product_id, $quantity);
        break;
    }
  }
}

// --- Cart Display ---

$cart_total = getCartTotal();

echo '<h2>Shopping Cart</h2>';

if (empty($_SESSION['cart'])) {
  echo '<p>Your cart is empty.</p>';
} else {
  echo '<ul>';
  foreach ($_SESSION['cart'] as $item) {
    echo '<li>';
    echo '<span class="product-name">' . $item['name'] . '</span>';
    echo ' - Quantity: ' . $item['quantity'] . ' - Price: $' . $item['price'] . ' - Total: $' . $item['price'] * $item['quantity'] . '</li>';
  }
  echo '</ul>';
  echo '<p><strong>Total: $' . $cart_total . '</strong></p>';
}

?>

<!-- Add some CSS for styling (example) -->
<style>
  .product-name {
    font-weight: bold;
  }
</style>


<?php

// Database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Function to handle purchase processing
function processPurchase($cart, $customer_name, $customer_email, $payment_method) {
    // 1. Validate Cart Items
    foreach ($cart as $item_id => $quantity) {
        // Check if the product exists (basic validation)
        $stmt = $pdo->prepare("SELECT id, name, price FROM products WHERE id = ?");
        $stmt->execute([$item_id]);
        $product = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            return "Error: Product ID '$item_id' not found.";
        }

        // Check if quantity is valid
        if ($quantity <= 0) {
            return "Error: Invalid quantity.";
        }
    }

    // 2. Calculate Total Amount
    $totalAmount = 0;
    foreach ($cart as $item_id => $quantity) {
        $stmt = $pdo->prepare("SELECT price FROM products WHERE id = ?");
        $stmt->execute([$item_id]);
        $product = $stmt->fetch(PDO::FETCH_ASSOC);
        $totalAmount += $product['price'] * $quantity;
    }

    // 3.  Database Insertion (Order Details)
    $order_date = date("Y-m-d H:i:s");

    $stmt = $pdo->prepare("INSERT INTO orders (customer_name, customer_email, order_date, total_amount, payment_method)
                           VALUES (?, ?, ?, ?, ?)");
    $stmt->execute([$customer_name, $customer_email, $order_date, $totalAmount, $payment_method]);

    $order_id = $pdo->lastInsertId(); // Get the ID of the newly created order

    // 4.  Database Insertion (Order Items)
    foreach ($cart as $item_id => $quantity) {
        $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity)
                               VALUES (?, ?, ?)");
        $stmt->execute([$order_id, $item_id, $quantity]);
    }

    return "Purchase successful! Order ID: " . $order_id;
}



// --- Example Usage (GET request handling - this is a basic example) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get form data
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    // Get cart data (assuming this is passed as JSON - important!)
    $cart_json = $_POST["cart"];
    $cart = json_decode($cart_json, true); // Decode JSON into an associative array

    // Process the purchase
    $result = processPurchase($cart, $customer_name, $customer_email, $payment_method);

    // Display the result
    echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase an Item</h1>

    <form method="post" action="">
        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <label for="payment_method">Payment Method:</label>
        <select id="payment_method" name="payment_method">
            <option value="credit_card">Credit Card</option>
            <option value="paypal">PayPal</option>
            <option value="cash">Cash</option>
        </select><br><br>

        <label for="cart">Cart (JSON):</label>
        <textarea id="cart" name="cart" rows="10" cols="50" required>
        {
            "1": 2,
            "2": 1,
            "3": 3
        }
        </textarea><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php
session_start();

// Database connection details
$db_host = "localhost";
$db_name = "shop";
$db_user = "root";
$db_password = "";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


// ------------------ Product Functions ------------------

// Function to fetch products from the database
function getProducts($conn) {
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        $products = array();
        while($row = $result->fetch_assoc()) {
            $products[] = $row;
        }
        return $products;
    } else {
        return array();
    }
}

// ------------------ Purchase Functionality ------------------

// Function to add to cart
function addToCart($conn, $product_id, $quantity) {
    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        echo "<p>You must be logged in to add to cart.</p>";
        return;
    }

    // Check if the product exists
    $sql = "SELECT * FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($result->num_rows == 0) {
        echo "<p>Product not found.</p>";
        return;
    }
    $product = $result->fetch_assoc();

    // Check if the product is already in the cart
    $cart_query = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $cart_stmt = $conn->prepare($cart_query);
    $cart_stmt->bind_param("is", $_SESSION['user_id'], $product_id);
    $cart_stmt->execute();
    $cart_result = $cart_stmt->get_result();

    if ($cart_result->num_rows > 0) {
        // Update the quantity in the cart
        $cart_row = $cart_result->fetch_assoc();
        $new_quantity = $cart_row['quantity'] + $quantity;
        $update_query = "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?";
        $update_stmt = $conn->prepare($update_query);
        $update_stmt->bind_param("iis", $_SESSION['user_id'], $product_id, $new_quantity);
        $update_stmt->execute();
    } else {
        // Add the product to the cart
        $insert_query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
        $insert_stmt = $conn->prepare($insert_query);
        $insert_stmt->bind_param("iis", $_SESSION['user_id'], $product_id, $quantity);
        $insert_stmt->execute();
    }
}

// Function to view cart
function viewCart($conn) {
    if (!isset($_SESSION['user_id'])) {
        echo "<p>You must be logged in to view your cart.</p>";
        return;
    }

    $cart_query = "SELECT p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = ? ";
    $cart_stmt = $conn->prepare($cart_query);
    $cart_stmt->bind_param("i", $_SESSION['user_id']);
    $cart_stmt->execute();
    $result = $cart_stmt->get_result();

    if ($result->num_rows > 0) {
        echo "<h2>Your Cart</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";
        while ($row = $result->fetch_assoc()) {
            $total = $row['price'] * $row['quantity'];
            echo "<tr>";
            echo "<td>" . $row['name'] . "</td>";
            echo "<td>" . $row['price'] . "</td>";
            echo "<td>" . $row['quantity'] . "</td>";
            echo "<td>" . $total . "</td>";
            echo "<td><a href='cart.php?action=remove&id=" . $row['product_id'] . "'>Remove</a></td>";
            echo "</tr>";
        }
        echo "</table>";

        // Calculate total cart value
        $total_cart_value = 0;
        $cart_stmt = $conn->prepare($cart_query);
        $cart_stmt->bind_param("i", $_SESSION['user_id']);
        $cart_stmt->execute();
        $result = $cart_stmt->get_result();
        while ($row = $result->fetch_assoc()) {
            $total = $row['price'] * $row['quantity'];
            $total_cart_value += $total;
        }
        echo "<p><strong>Total Cart Value: $" . $total_cart_value . "</strong></p>";
    } else {
        echo "<p>Your cart is empty.</p>";
    }
}

// Function to remove item from cart
function removeCartItem($conn, $product_id) {
    if (!isset($_SESSION['user_id'])) {
        echo "<p>You must be logged in to remove items from your cart.</p>";
        return;
    }

    $delete_query = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
    $delete_stmt = $conn->prepare($delete_query);
    $delete_stmt->bind_param("is", $_SESSION['user_id'], $product_id);
    $delete_stmt->execute();
}


// ------------------  Example Usage (in a web page) ------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        addToCart($conn, $product_id, $quantity);
    }
}

// Cart View
viewCart($conn);

// Remove Cart Item
if (isset($_GET['action']) && $_GET['action'] == 'remove') {
    $product_id = $_GET['id'];
    removeCartItem($conn, $product_id);
}

?>


<?php

// Configuration (adjust as needed)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

$cart = []; // Array to store items and quantities

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    global $cart;

    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $product_name = $product['name'];

        if (isset($cart[$product_name])) {
            $cart[$product_name]['quantity'] += $quantity;
        } else {
            $cart[$product_name] = ['name' => $product_name, 'quantity' => $quantity, 'price' => $product['price']];
        }

        echo "<p>Added '$product_name' to cart. Quantity: " . $cart[$product_name]['quantity'] . "</p>";
    } else {
        echo "<p>Product ID '$product_id' not found.</p>";
    }
}

// Function to view the cart
function viewCart()
{
    global $cart;

    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Your Cart</h2>";
        echo "<ul>";
        foreach ($cart as $item) {
            $name = $item['name'];
            $quantity = $item['quantity'];
            $price = $item['price'];
            $total = $price * $quantity;
            echo "<li>$name - Quantity: $quantity - Price: $price - Total: $total</li>";
        }
        echo "</ul>";
        echo "<p><strong>Total Cart Value:</strong> " . calculateTotal($cart) . "</p>";
    }
}

// Function to calculate the total cart value
function calculateTotal($cart)
{
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to handle form submission (adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $product_id = (int)$_POST['product_id']; // Cast to integer for safety
        $quantity = (int)$_POST['quantity'];

        addToCart($product_id, $quantity);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Online Store</h1>

<h2>Available Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - Price: $" . $product['price'] . " <button type='button' onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
    }
    ?>
</ul>

<hr>

<?php viewCart(); ?>

</body>
</html>


<?php
session_start();

// Database connection details
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Product Data (Simulated for demonstration) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75],
];


// --- Function to handle the purchase process ---
function handlePurchase($cart) {
    global $conn, $products;

    // Calculate total price
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            $total += $product['price'] * $quantity;
        } else {
            // Handle invalid product ID
            return "Invalid product ID: " . $product_id;
        }
    }

    // Insert order into the database
    $order_date = date("Y-m-d H:i:s");
    $customer_name = isset($_SESSION['customer_name']) ? $_SESSION['customer_name'] : "Guest";
    $order_query = "INSERT INTO orders (customer_name, order_date, total_amount) VALUES ('" . mysqli_real_escape_string($conn, $customer_name) . "', '" . $order_date . "', '" . $total . "')";

    if ($conn->query($order_query) === TRUE) {
        $order_id = $conn->insert_id;

        // Insert order items into the database
        foreach ($cart as $product_id => $quantity) {
            $item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (" . $order_id . ", " . $product_id . ", " . $quantity . ")";
            if ($conn->query($item_query) === TRUE) {
                //echo "Inserted item: " . $product_id . " - " . $quantity . " into order " . $order_id . "<br>";
            } else {
                echo "Error inserting order item: " . $conn->error . "<br>";
            }
        }

        return "Order placed successfully! Order ID: " . $order_id;

    } else {
        echo "Error placing order: " . $conn->error . "<br>";
        return "Order placement failed.";
    }
}


// --- Handle Form Submission (for the shopping cart) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['submit_cart'])) {
        $cart = [];
        foreach ($_POST['product_ids'] as $product_id => $quantity) {
            if (isset($products[$product_id])) {
                $cart[$product_id] = $quantity;
            }
        }

        $result = handlePurchase($cart);
        echo $result;
    }
}



// --- Display Shopping Cart Form ---
echo "<!DOCTYPE html>";
echo "<html>";
echo "<head>";
echo "<title>Shopping Cart</title>";
echo "</head>";
echo "<body>";

echo "<h1>Shopping Cart</h1>";

echo "<form method='post' action=''>";
echo "<h2>Select Products</h2>";

foreach ($products as $product_id => $product) {
    echo "<label for='" . $product['id'] . "'>" . $product['name'] . " - $" . $product['price'] . "</label><br>";
    echo "<input type='number' id='" . $product['id'] . "' name='product_ids[" . $product['id'] . "]' value='1' min='1'><br>";
}

echo "<br>";
echo "<input type='submit' name='submit_cart' value='Place Order'>";
echo "</form>";

echo "</body>";
echo "</html>";


?>


<?php

// Configuration
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Hat', 'price' => 15.00],
];

$cart = [];

// Function to add a product to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($products[$productId])) {
        $product = $products[$productId];
        $cart[] = ['product_id' => $productId, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        echo "<p>Added " . $quantity . " x " . $product['name'] . " to your cart.</p>";
    } else {
        echo "<p>Product with ID " . $productId . " not found.</p>";
    }
}

// Function to display the cart
function displayCart()
{
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        $product = $products[$item['product_id']];
        $total_price = $product['price'] * $item['quantity'];
        echo "<li>" . $item['name'] . " - $" . number_format($item['quantity'] * $product['price'], 2) . "</li>";
    }
    echo "</ul>";

    // Calculate total cart price
    $totalPrice = 0;
    foreach ($cart as $item) {
        $totalPrice += $item['quantity'] * $products[$item['product_id']]['price'];
    }

    echo "<p><strong>Total: $" . number_format($totalPrice, 2) . "</strong></p>";
}


// Handle form submission (Adding to Cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if a product ID is submitted
    if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
        $productId = (int)$_POST["product_id"]; // Cast to integer
        $quantity = (int)$_POST["quantity"]; // Cast to integer

        addToCart($productId, $quantity);
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

    <h1>Shop</h1>

    <h2>Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . " <button type='submit' name='product_id' value='" . $id . "' name='add'>Add to Cart</button></li>";
        }
        ?>
    </ul>

    <?php displayCart(); ?>

</body>
</html>


<?php

// Sample product data (replace with your database or data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Session management for cart
session_start();

// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    // Validate product ID
    if (!array_key_exists($product_id, $products)) {
        return false; // Product not found
    }

    // Check if product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity, 'price' => $products[$product_id]['price']];
    }
    return true;
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
    return true;
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        return false; // Product not found in cart
    }

    if ($quantity <= 0) {
        remove_from_cart($product_id);
        return true; // Successfully removed
    }

    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    return true;
}



// Handle adding to cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;  // Default quantity is 1
    add_to_cart($product_id, $quantity);
}

// Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
}

// Update cart quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;
    update_cart_quantity($product_id, $quantity);
}



// Display the cart
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "<strong>" . $products[$product_id]['name'] . "</strong> - $" . $products[$product_id]['price'] . " x " . $item['quantity'] . " = $" . ($item['quantity'] * $products[$product_id]['price']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $total_price = 0;
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $total_price += ($item['quantity'] * $products[$product_id]['price']);
    }
    echo "<p><strong>Total: $" . number_format($total_price, 2) . "</strong></p>";
}


?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// For demonstration purposes, let's assume we're using a simple array for product data.
$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
  3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];


// Function to handle the purchase process
function handlePurchase($cart, $dbConnection) {
  $total = 0;
  $order_id = 0;

  // Validate cart and products
  if (empty($cart)) {
    return ['success' => false, 'message' => 'Cart is empty.'];
  }

  // Check if all products in cart exist
  foreach ($cart as $product_id => $quantity) {
    if (!isset($products[$product_id])) {
      return ['success' => false, 'message' => "Product ID $product_id not found."];
    }
  }


  // Prepare the order data
  $order_data = [
    'user_id' => 123, // Assuming a user ID of 123 for demonstration
    'order_date' => date('Y-m-d H:i:s'),
    'total_amount' => 0
  ];

  // Create the order in the database
  $sql = "INSERT INTO orders (user_id, order_date) VALUES (?, ?)";
  $stmt = $dbConnection->prepare($sql);
  $stmt->bind_param("is", $order_data['user_id'], $order_data['order_date']);
  $stmt->execute();
  $order_id = $dbConnection->insert_id; // Get the ID of the newly inserted order
  $stmt->close();

  // Loop through the cart and add items to the order
  foreach ($cart as $product_id => $quantity) {
    $product = $products[$product_id];
    $product_price = $product['price'];
    $total_amount = $total_amount + ($product_price * $quantity);
    $product_data = [
      'order_id' => $order_id,
      'product_id' => $product_id,
      'quantity' => $quantity,
      'price' => $product_price
    ];
    
    // Insert order items into the database
    $sql = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)";
    $stmt = $dbConnection->prepare($sql);
    $stmt->bind_param("isii", $stmt->stmt_param, $stmt->stmt_param, $stmt->stmt_param, $stmt->stmt_param);
    $stmt->execute();
    $stmt->close();
  }

  $order_data['total_amount'] = $total_amount;
  return ['success' => true, 'order_id' => $order_id, 'total_amount' => $total_amount];
}

// -----------------------  Example Usage  -----------------------

// Assuming a database connection is already established
// Replace with your actual database connection details
$dbConnection = new mysqli("localhost", "username", "password", "database_name");

if ($dbConnection->connect_error) {
  die("Connection failed: " . $dbConnection->connect_error);
}

// 1. Get Cart Data (e.g., from a form)
// In a real application, you'd retrieve this from a shopping cart.
// For this example, we'll create a sample cart.
$cart = [
  1 => 2, // 2 T-Shirts
  2 => 1  // 1 Jeans
];

// 2. Process the Purchase
$purchaseResult = handlePurchase($cart, $dbConnection);

// 3. Display Results
if ($purchaseResult['success']) {
  echo "<h2>Purchase Successful!</h2>";
  echo "<p>Order ID: " . $purchaseResult['order_id'] . "</p>";
  echo "<p>Total Amount: $" . $purchaseResult['total_amount'] . "</p>";
  echo "<p>Thank you for your order!</p>";
} else {
  echo "<h2>Purchase Failed!</h2>";
  echo "<p>Error: " . $purchaseResult['message'] . "</p>";
}

$dbConnection->close();
?>


<?php

// Database connection details
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Assuming you have a 'products' table with columns: id, name, price
// And a 'carts' table with columns: id, user_id, product_id, quantity

// Function to add a product to the cart
function add_to_cart($user_id, $product_id, $quantity) {
    global $conn;

    // Check if product exists
    $sql_check = "SELECT id FROM products WHERE id = ?";
    $stmt_check = $conn->prepare($sql_check);
    $stmt_check->bind_param("i", $product_id);
    $stmt_check->execute();
    $result = $stmt_check->get_result();

    if ($result->num_rows > 0) {
        // Product exists, proceed to add to cart
        $sql_insert = "INSERT INTO carts (user_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt_insert = $conn->prepare($sql_insert);
        $stmt_insert->bind_param("iii", $user_id, $product_id, $quantity);
        if ($stmt_insert->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return false; // Product not found
    }
}

// Function to get the cart items for a user
function get_cart_items($user_id) {
    $sql = "SELECT p.id AS product_id, p.name, p.price, c.quantity FROM carts c JOIN products p ON c.product_id = p.id WHERE c.user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $user_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_items = [];
    while ($row = $result->fetch_assoc()) {
        $cart_items[] = $row;
    }

    return $cart_items;
}


// Function to update the quantity of a product in the cart
function update_cart_quantity($user_id, $product_id, $quantity) {
    $sql = "UPDATE carts SET quantity = ? WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_params("iii")->execute();

    if ($stmt->affected_rows > 0) {
        return true;
    } else {
        return false;
    }
}

// Function to remove a product from the cart
function remove_from_cart($user_id, $product_id) {
    $sql = "DELETE FROM carts WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $user_id, $product_id);
    return $stmt->execute();
}


// --- Example Usage (Simulated Purchase) ---

// 1. User adds a product to the cart
$user_id = 1; // Example user ID
$product_id = 1; // Example product ID
$quantity = 2;

if (add_to_cart($user_id, $product_id, $quantity)) {
    echo "Product added to cart successfully!
";
} else {
    echo "Failed to add product to cart.
";
}

// 2. Get the cart items
$cart_items = get_cart_items($user_id);

echo "Cart Items:
";
foreach ($cart_items as $item) {
    echo "Product ID: " . $item['product_id'] . ", Name: " . $item['name'] . ", Price: " . $item['price'] . ", Quantity: " . $item['quantity'] . "
";
}

// 3. User updates the quantity of a product
$updated_quantity = 3;
if (update_cart_quantity($user_id, $product_id, $updated_quantity)) {
    echo "Quantity updated successfully!
";
} else {
    echo "Failed to update quantity.
";
}


// 4. Get the updated cart items
$updated_cart_items = get_cart_items($user_id);

echo "
Updated Cart Items:
";
foreach ($updated_cart_items as $item) {
    echo "Product ID: " . $item['product_id'] . ", Name: " . $item['name'] . ", Price: " . $item['price'] . ", Quantity: " . $item['quantity'] . "
";
}

// 5. User removes a product from the cart
if (remove_from_cart($user_id, $product_id)) {
    echo "Product removed from cart.
";
} else {
    echo "Failed to remove product from cart.
";
}


// 6. Get the updated cart items (after removal)
$final_cart_items = get_cart_items($user_id);

echo "
Final Cart Items:
";
foreach ($final_cart_items as $item) {
    echo "Product ID: " . $item['product_id'] . ", Name: " . $item['name'] . ", Price: " . $item['price'] . ", Quantity: " . $item['quantity'] . "
";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle the purchase process
function handlePurchase($cart, $customerData) {
  // 1. Validate Customer Data (Basic - Expand for full validation)
  if (empty($customerData['name']) || empty($customerData['email']) || empty($customerData['address'])) {
    return ['status' => 'error', 'message' => 'Invalid customer data. Please fill all fields.'];
  }

  // 2. Process Payment (Placeholder - Replace with actual payment gateway integration)
  // For demonstration, let's just simulate a payment.
  $paymentSuccess = true; // Simulate successful payment
  
  if ($paymentSuccess) {

    // 3.  Create Order in Database
    $orderId = generateOrderId(); // Function to generate a unique order ID

    // Prepare Order Data
    $orderData = [
      'order_id' => $orderId,
      'customer_id' => $customerData['id'] ?? null, //  Ideally, you'd have a customer ID
      'order_date' => date('Y-m-d H:i:s'),
      'total_amount' => calculateTotal($cart), // Calculate the total amount
      'status' => 'pending' // Initial order status
    ];

    // Insert Order into Database
    if (insertOrder($orderData)); //  Call function to insert into database
    else {
        return ['status' => 'error', 'message' => 'Failed to create order in database.'];
    }
    
    // 4. Add Order Items to Database
    foreach ($cart as $product_id => $quantity) {
      $orderItemData = [
        'order_id' => $orderId,
        'product_id' => $product_id,
        'quantity' => $quantity,
        'item_price' => getProductPrice($product_id) // Get product price (assuming you have a function for this)
      ];
      insertOrderItem($orderItemData); // Call function to insert into database
    }

    // 5. Update Cart (Remove purchased items)
    emptyCart($cart); //  Call function to empty the cart
    
    // 6. Return Success Message
    return ['status' => 'success', 'message' => 'Purchase successful. Order ID: ' . $orderId];
  } else {
    return ['status' => 'error', 'message' => 'Payment processing failed.'];
  }
}

// --- Utility Functions (Replace with your actual implementation) ---

// Generate a unique order ID (e.g., using UUID)
function generateOrderId() {
  return 'ORDER-' . uniqid();
}

// Insert Order into Database
function insertOrder($orderData) {
  //  Replace with your actual database insertion code
  //  Example (using PDO):
  global $db;
  try {
    $sql = "INSERT INTO orders (order_id, customer_id, order_date, total_amount, status)
            VALUES (:order_id, :customer_id, :order_date, :total_amount, :status)";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':order_id', $orderData['order_id']);
    $stmt->bindParam(':customer_id', $orderData['customer_id']);
    $stmt->bindParam(':order_date', $orderData['order_date']);
    $stmt->bindParam(':total_amount', $orderData['total_amount']);
    $stmt->bindParam(':status', $orderData['status']);
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}


// Insert Order Items into Database
function insertOrderItem($orderItemData) {
  //  Replace with your actual database insertion code
  global $db;

  try {
    $sql = "INSERT INTO order_items (order_id, product_id, quantity, item_price)
            VALUES (:order_id, :product_id, :quantity, :item_price)";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':order_id', $orderItemData['order_id']);
    $stmt->bindParam(':product_id', $orderItemData['product_id']);
    $stmt->bindParam(':quantity', $orderItemData['quantity']);
    $stmt->bindParam(':item_price', $orderItemData['item_price']);
    $stmt->execute();
  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
  }
}

// Empty the Cart (Remove items from the cart - this is a placeholder)
function emptyCart($cart) {
  //  Replace with your actual cart clearing logic (e.g., delete from cart table, clear session)
  //  This is just a placeholder, it doesn't actually modify the cart.
  //  In a real implementation, you would clear the cart data.
  // Example:
  // $cart = [];
}



// Get Product Price (Placeholder - Implement based on your product database)
function getProductPrice($product_id) {
  //  Replace with your actual logic to retrieve the product price from the database.
  //  Example:
  // $product = getProductFromDB($product_id);
  // return $product['price'];

  // Example Dummy Value:
  return 10.00;
}

// Calculate Total Amount
function calculateTotal($cart) {
  $total = 0;
  foreach ($cart as $product_id => $quantity) {
    $total = $total + (getProductPrice($product_id) * $quantity);
  }
  return $total;
}

// Example Usage (This is just for demonstration)
// $cart = [
//   '1' => 2, // Product ID 1, quantity 2
//   '2' => 1  // Product ID 2, quantity 1
// ];

// $customerData = [
//   'name' => 'John Doe',
//   'email' => 'john.doe@example.com',
//   'address' => '123 Main St'
// ];

// $purchaseResult = handlePurchase($cart, $customerData);

// print_r($purchaseResult);

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Error reporting (optional, for development)
error_reporting(E_ALL);
ini_set('display_errors', 1);

//  ----- Function to connect to the database -----
function connectToDatabase() {
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// ----- Purchase Function -----
function processPurchase($orderData) {
    $conn = connectToDatabase();

    // Sanitize and validate the input data
    $product_id = mysqli_real_escape_string($conn, $orderData['product_id']);
    $quantity = mysqli_real_escape_string($conn, $orderData['quantity']);
    $customer_name = mysqli_real_escape_string($conn, $orderData['customer_name']);
    $customer_email = mysqli_real_escape_string($conn, $orderData['customer_email']);

    // Validate quantity (ensure it's a positive integer)
    if (!is_numeric($quantity) || $quantity <= 0) {
        return "Invalid quantity. Please enter a positive integer.";
    }

    // Check if the product exists
    $product_query = "SELECT id, name, price FROM products WHERE id = '$product_id'";
    $product_result = $conn->query($product_query);

    if ($product_result->num_rows > 0) {
        $product = $product_result->fetch_assoc();
        $product_name = $product['name'];
        $product_price = $product['price'];
    } else {
        return "Product ID not found.";
    }

    // Calculate the total price
    $total_price = $product_price * $quantity;

    // Construct the SQL query
    $sql = "INSERT INTO orders (product_id, customer_name, customer_email, quantity, total_price)
            VALUES ('$product_id', '$customer_name', '$customer_email', '$quantity', '$total_price')";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return "Purchase successful! Order ID: " . $conn->insert_id;
    } else {
        return "Error processing purchase: " . $conn->error;
    }
}

// ----- Example Usage (Simulating a form submission) -----
// Simulate form data
$orderData = [
    'product_id' => '1',
    'customer_name' => 'John Doe',
    'customer_email' => 'john.doe@example.com',
    'quantity' => 2,
];

// Process the purchase
$result = processPurchase($orderData);
echo $result;

?>


   // Example using prepared statements (simplified)
   $stmt = $conn->prepare("INSERT INTO orders (product_id, customer_name, customer_email, quantity, total_price) VALUES (?, ?, ?, ?, ?)");
   $stmt->bind_param("ssisd", $product_id, $customer_name, $customer_email, $quantity);
   $stmt->execute();
   // Don't forget to close the statement when you're done!
   $stmt->close();
   

* **Error Logging:**  In a production environment, instead of just displaying errors in the browser, log them to a file or a database for monitoring.

* **Form Handling:**  You'll need an HTML form to collect the purchase data.  Handle form submissions using `$_POST`.

* **Session Management:**  Use PHP sessions to store user information (if required) to maintain the purchase context.

* **Payment Integration:** Integrate with a payment gateway (e.g., PayPal, Stripe) to securely process payments. *Never* store credit card information directly on your server.

* **Database Transactions:**  For critical operations (like processing a payment), use database transactions to ensure that either all operations succeed or none do, maintaining data integrity.

* **HTML Form:** Add the appropriate HTML form to take user input.


<?php
session_start();

// Configuration
$cart_file = 'cart.json'; // File to store the cart data
$item_name_key = 'item_name';
$item_price_key = 'item_price';
$quantity_key = 'quantity';

// Function to load cart from JSON file
function loadCart() {
  if (file_exists($cart_file)) {
    $cart = json_decode(file_get_contents($cart_file), true);
    if (json_last_error() !== JSON_ERROR_NONE) {
      return array(); // Return an empty array in case of JSON error
    }
    return $cart;
  } else {
    return array(); // Return an empty array if the file doesn't exist
  }
}

// Function to save cart to JSON file
function saveCart($cart) {
  $json_data = json_encode($cart, JSON_PRETTY_PRINT); // Use JSON_PRETTY_PRINT for readability
  if ($json_data = file_put_contents($cart_file, $json_data)) {
    return $json_data;
  } else {
    return false;
  }
}


// ----------------------- Cart Management Functions -----------------------

// Add an item to the cart
function addToCart($item_name, $item_price, $quantity = 1) {
  $cart = loadCart();

  $item_name = trim($item_name); // Clean the item name
  $item_price = (float) $item_price; // Ensure price is a float
  $quantity = (int) $quantity; // Ensure quantity is an integer

  if ($quantity <= 0) {
    return false; // Invalid quantity
  }

  $item_name = $item_name;
  if (isset($cart[$item_name])) {
    $cart[$item_name]['quantity'] += $quantity;
  } else {
    $cart[$item_name] = [
      $item_name_key => $item_name,
      $item_price_key => $item_price,
      $quantity_key => $quantity
    ];
  }
  return saveCart($cart);
}

// Remove an item from the cart
function removeFromCart($item_name) {
  $cart = loadCart();
  $item_name = trim($item_name);

  if (isset($cart[$item_name])) {
    unset($cart[$item_name]);
    return saveCart($cart);
  } else {
    return false; // Item not found in cart
  }
}

// Update quantity of an item in the cart
function updateQuantity($item_name, $new_quantity) {
  $cart = loadCart();
  $item_name = trim($item_name);
  $new_quantity = (int) $new_quantity;

  if (isset($cart[$item_name])) {
    $cart[$item_name][$quantity_key] = $new_quantity;
    return saveCart($cart);
  } else {
    return false; // Item not found in cart
  }
}


// Get the cart contents
function getCartContents() {
  $cart = loadCart();
  return $cart;
}

// -----------------------  Cart Display Functions -----------------------

// Display the cart contents
function displayCart() {
  $cart = getCartContents();

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

  foreach ($cart as $item_name => $details) {
    $price = $details[$item_price_key];
    $quantity = $details[$quantity_key];
    $total = $price * $quantity;

    echo "<tr>";
    echo "<td>" . $details[$item_name_key] . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total, 2) . "</td>";
    echo "<td><a href='cart.php?action=remove&item=$item_name'>Remove</a></td>";
    echo "</tr>";
  }

  echo "</table>";
  echo "<p><a href='checkout.php'>Checkout</a></p>";
}


// -----------------------  Example Usage (for demonstration only - use within a PHP page) -----------------------

// Example usage for adding items.  This is just to show how you'd call the functions
/*
if (isset($_POST['add_to_cart'])) {
  $item_name = $_POST['item_name'];
  $item_price = (float)$_POST['item_price'];
  $quantity = (int)$_POST['quantity'];

  addToCart($item_name, $item_price, $quantity);
  echo "<p>Item added to cart!</p>";
}
*/

?>


<?php
session_start();

// Your checkout logic here
echo "<p>Thank you for your order!</p>";
// Example:  Store order details in a database, send confirmation email, etc.
?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Session handling (for maintaining cart and user info)
session_start();

// Cart data (stored in session)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($conn, $product_id, $quantity) {
    $product_id = intval($product_id); // Sanitize input
    $quantity = intval($quantity);      // Sanitize input

    if ($quantity <= 0) {
        return false; // Invalid quantity
    }

    // Check if product exists (simplified for demonstration)
    $result = $conn->query("SELECT id, name, price FROM products WHERE id = $product_id");
    if ($result->num_rows == 0) {
        return false; // Product not found
    }
    $product = $result->fetch_assoc();

    // Add to cart
    $_SESSION['cart'][] = [
        'id' => $product['id'],
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity
    ];
    return true;
}

// Function to remove an item from the cart
function remove_from_cart($conn, $product_id) {
    $product_id = intval($product_id);

    // Iterate through the cart and remove the item
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            // Re-index the array (important after deleting)
            $_SESSION['cart'] = array_values($_SESSION['cart']);
            return true;
        }
    }
    return false;
}


// Function to update the quantity of an item in the cart
function update_quantity($conn, $product_id, $quantity) {
    $product_id = intval($product_id);
    $quantity = intval($quantity);

    if ($quantity <= 0) {
        return false; // Invalid quantity
    }

    // Find the product in the cart
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['id'] == $product_id) {
            $_SESSION['cart'][$key]['quantity'] = $quantity;
            return true;
        }
    }

    return false;
}


// Function to calculate the total cart value
function calculate_cart_total($conn) {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $result = $conn->query("SELECT price FROM products WHERE id = $item['id']");
        $product = $result->fetch_assoc();
        $total += $product['price'] * $item['quantity'];
    }
    return $total;
}

// Handle form submission (adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        add_to_cart($conn, $product_id, $quantity);
    } elseif (isset($_POST['remove_from_cart'])) {
        $product_id = $_POST['product_id'];
        remove_from_cart($conn, $product_id);
    } elseif (isset($_POST['update_quantity'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        update_quantity($conn, $product_id, $quantity);
    }
}


// Display Cart
$cart_total = calculate_cart_total($conn);

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $cart_total . "</p>";
}

?>


<?php

// 1. Form Handling
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productName = $_POST["product_name"];
    $quantity = (int)$_POST["quantity"]; // Cast to integer
    $price = (float)$_POST["price"]; // Cast to float

    // Basic validation (improve this!)
    if (empty($productName) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields and enter valid quantities and prices.";
    } else {
        $total = $quantity * $price;
        $message = "Your order for $quantity of $productName at $price each has been placed. Total: $total";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
</form>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
<?php } ?>

</body>
</html>


<?php

// Database connection (replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate form data (important for security!)
  $product_name = trim($_POST["product_name"]);
  $product_price = floatval($_POST["product_price"]);
  $quantity = intval($_POST["quantity"]);

  // Check if required fields are filled
  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {
    $error_message = "Please fill in all fields correctly.";
  } else {
    // Create a database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute the SQL query
    $sql = "INSERT INTO products (product_name, product_price, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      $stmt->bind_param("sii", $product_name, $product_price, $quantity);
      if ($stmt->execute()) {
        $success_message = "Product added successfully!";
      } else {
        $error_message = "Error adding product: " . $stmt->error;
      }
      $stmt->close();
    } else {
      $error_message = "Error preparing statement.";
    }

    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" value="<?php echo htmlspecialchars($_POST["product_name"]); ?>">
    <br><br>

    <label for="product_price">Product Price:</label>
    <input type="number" id="product_price" name="product_price" placeholder="Enter product price" step="0.01" value="<?php echo htmlspecialchars($_POST["product_price"]); ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" step="1" value="<?php echo htmlspecialchars($_POST["quantity"]); ?>">
    <br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <br>
  <h3>Cart (Currently Empty)</h3>

</body>
</html>


<?php

// Configuration (Adjust these as needed)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

$cart = []; // Array to store items in the cart
$order_id = 0;

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart = &$cart) {
    if (isset($products[$productId])) {
        $product = $products[$productId];
        $newItem = ['product_id' => $productId, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];

        // Check if item already in cart - add to quantity
        if (in_array($productId, array_column($cart, 'product_id'))) {
            foreach ($cart as &$item) { // Use reference to modify the array in place
                if ($item['product_id'] == $productId) {
                    $item['quantity'] += $quantity;
                    break;
                }
            }
        } else {
            $cart[] = $newItem;
        }
    } else {
        echo "Product ID $productId not found.";
    }
}

// Function to calculate the total cart value
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to display the cart
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . number_format(calculateTotal($cart), 2) . "</p>";
}

// Function to process the order (simulated - in a real system, this would involve payment processing, etc.)
function processOrder() {
    global $cart;
    $order_id++;
    echo "<h2>Order Confirmation</h2>";
    echo "<p>Order ID: " . $order_id . "</p>";
    echo "<p>Thank you for your order! Your items have been placed.</p>";

    // Clear the cart after order placement (optional)
    $cart = [];
}

// Handle form submission (if you have a form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id']; // Convert to integer
        $quantity = (int)$_POST['quantity'];

        addToCart($productId, $quantity);
        displayCart(); // Update the cart display
    } elseif (isset($_POST['checkout'])) {
        processOrder();
    }
}

// Display the initial cart
displayCart();

?>

<!-- Example HTML Form (Include this in your HTML file) -->
<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - " . $product['name'] . "</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1"><br><br>

    <input type="submit" name="addToCart" value="Add to Cart">
</form>

<form method="post" action="">
  <input type="hidden" name="action" value="checkout">
  <input type="submit" name="checkout" value="Checkout">
</form>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the form data (Essential for security!)
    $name = $_POST["name"];
    $email = $_POST["email"];
    $quantity = $_POST["quantity"];
    $product_id = $_POST["product_id"]; // Assuming you have a product ID field

    // Input Validation (Basic - improve this for production)
    if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
        $error = "Please fill in all fields.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } elseif (is_numeric($quantity) && $quantity > 0) {
        // Add more validation here (e.g., quantity limits)
    } else {
        // Product Data (Fetch from database -  Example, adjust to your schema)
        // Assume you have a table called 'products' with columns like 'id', 'name', 'price'
        $sql = "SELECT * FROM products WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id); // "i" for integer
        $stmt->execute();
        $product = $stmt->fetch_assoc();

        if (!$product) {
            $error = "Product not found.";
        } else {
            // Calculate the total price
            $total_price = $product["price"] * $quantity;

            //  Store the order information (You'll need to implement order storage)
            //  This is a simplified example; in reality, you'd save this to a database
            $order_details = [
                "name" => $name,
                "email" => $email,
                "product_id" => $product_id,
                "quantity" => $quantity,
                "total_price" => $total_price,
                "order_date" => date("Y-m-d H:i:s") // Add order timestamp
            ];

            // Save the order details (Replace with your actual storage method)
            // Example:  Store in a session, file, or database
            session_start();
            $_SESSION["order_details"] = $order_details;  // Store in session

            // Display a success message
            $success = "Your order has been placed successfully!";

        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Make a Purchase</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database configuration (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate input
  $product_name = $_POST["product_name"];
  $product_price = floatval($_POST["product_price"]);
  $quantity = intval($_POST["quantity"]);

  // Basic validation
  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {
    $error = "Please fill in all fields and ensure prices and quantities are positive.";
  } else {
    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute the SQL query
    $sql = "INSERT INTO purchases (product_name, product_price, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sdd", $product_name, $product_price, $quantity);
    $stmt->execute();

    // Close the statement
    $stmt->close();

    // Close the connection
    $conn->close();

    // Display success message
    echo "<p style='color: green;'>Purchase added successfully!</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Add Purchase</h1>

  <?php if (isset($error)) {
    echo "<p style='color: red;'>Error: " . $error . "</p>";
  } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="product_price">Product Price:</label>
    <input type="number" id="product_price" name="product_price" step="0.01" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <button type="submit">Add to Purchase</button>
  </form>

  <a href="index.php">View Purchases</a> <!-- Link to a page displaying the purchases -->

</body>
</html>


<?php
// Assuming you have a "purchases" table
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

$sql = "SELECT * FROM purchases";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
  echo "<h2>Purchases:</h2>";
  while($row = $result->fetch_assoc()) {
    echo "<p><strong>Product:</strong> " . $row["product_name"] . "<br>";
    echo "<strong>Price:</strong> $" . $row["product_price"] . "<br>";
    echo "<strong>Quantity:</strong> " . $row["quantity"] . "</p>";
  }
} else {
  echo "<p>No purchases found.</p>";
}

$conn->close();
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate form data
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = $_POST["quantity"];
  $product_id = $_POST["product_id"]; // Assuming product_id is passed from a product selection

  // Sanitize and validate input (Crucial for security!)
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_int(filter_input(INPUT_POST, "quantity", FILTER_SANITIZE_NUMBER_INT)); // Convert to integer, sanitize

  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "Please fill in all fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } elseif ($quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } else {
    // If validation passes, proceed with order processing

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute SQL query
    $sql = "INSERT INTO orders (name, email, product_id, quantity) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sii", $name, $product_id, $quantity);
    $stmt->execute();

    // Success message
    $message = "Order placed successfully! Thank you.";

    // Close statement and connection
    $stmt->close();
    $conn->close();

  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Initialize an empty shopping cart
session_start();

if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
  global $servername, $username, $password, $dbname;

  // Connect to the database
  $conn = new mysqli($servername, $username, $password, $dbname);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Add the item to the cart
  $_SESSION['cart'][] = [
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // You might want to update the product quantity in the database here
  // For example:
  // $sql = "UPDATE products SET quantity = quantity - $quantity WHERE id = $product_id";
  // if ($conn->query($sql) === TRUE) {
  //   echo "Product quantity updated successfully";
  // } else {
  //   echo "Error updating product quantity: " . $conn->error;
  // }
}

// Function to display the shopping cart
function display_cart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your shopping cart is empty.</p>";
    return;
  }

  echo "<h2>Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['product_name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<form action='update_cart.php' method='post'>";
    echo "<input type='number' name='quantity' value='" . $item['quantity'] . "'><br>";
    echo "<input type='hidden' name='product_id' value='" . $item['product_id'] . "'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}


// Function to update the cart (this will be handled by a separate page)
function update_cart($product_id, $new_quantity) {
    global $servername, $username, $password, $dbname;

    // Connect to the database
    $conn = new mysqli($servername, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Update the quantity in the database
    $sql = "UPDATE products SET quantity = '$new_quantity' WHERE id = $product_id";

    if ($conn->query($sql) === TRUE) {
        // Update the quantity in the session
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['product_id'] == $product_id) {
                $_SESSION['cart'][$key]['quantity'] = $new_quantity;
                break;
            }
        }
        echo "<p>Cart updated successfully!</p>";
    } else {
        echo "<p>Error updating cart: " . $conn->error . "</p>";
    }
}


// Example Usage - Handling the purchase

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['submit'])) {
    // Process the order (e.g., update inventory, send confirmation email)
    echo "<h2>Order Summary</h2>";
    echo "<p>Total items in cart: " . count($_SESSION['cart']) . "</p>";
    echo "<p><strong>Total Price:</strong> $" . number_format(calculate_total(), 2) . "</p>";
    // Clear the cart after the order is placed
    $_SESSION['cart'] = [];
    echo "<p>Cart cleared successfully!</p>";
  }
}

// Function to calculate the total price of the cart
function calculate_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

?>
<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>My Online Store</h1>

  <h2>Products</h2>
  <!-- Replace this with your product listing logic -->
  <p>Product 1 - $10</p>
  <p>Product 2 - $20</p>
  <p>Product 3 - $30</p>

  <h2>Add to Cart</h2>
  <form action="add_to_cart.php" method="POST">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <button type="submit">Add to Cart</button>
  </form>

  <?php display_cart(); ?>

  <a href="checkout.php">Checkout</a>
</body>
</html>


<?php

// Database connection (Replace with your actual database details)
$db_host = 'localhost';
$db_name = 'shop_db';
$db_user = 'your_username';
$db_pass = 'your_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize and validate input
  $name = htmlspecialchars($_POST["name"]);
  $email = htmlspecialchars($_POST["email"]);
  $quantity = intval($_POST["quantity"]);  //Ensure quantity is an integer
  $item_id = intval($_POST["item_id"]);   //Ensure item_id is an integer

  // Input validation - add more checks as needed
  if (empty($name) || empty($email) || $quantity <= 0 || $item_id <= 0) {
    $error = "Please fill in all fields and ensure quantity and item_id are positive numbers.";
  } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    // Prepare the data for insertion
    $sql = "INSERT INTO orders (name, email, quantity, item_id) VALUES ('$name', '$email', '$quantity', '$item_id')";

    // Execute the query
    if (mysqli_query($GLOBALS['conn'], $sql)) {
      $success = "Order placed successfully! Order ID: " . mysqli_insert_id($GLOBALS['conn']);
    } else {
      $error = "Error placing order: " . mysqli_error($GLOBALS['conn']);
    }
  }
}
// Connect to the database
$GLOBALS['conn'] = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($GLOBALS['conn']->connect_error) {
  die("Connection failed: " . $GLOBALS['conn']->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="item_id">Item ID:</label>
    <input type="number" id="item_id" name="item_id" min="1" required><br><br>

    <button type="submit">Place Order</button>
  </form>

  <a href="index.php">Back to Home</a> <!-- Link back to the home page (or wherever you want to redirect) -->

</body>
</html>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

//  Product Data (Simulated for demonstration)
$products = [
    1 => ["id" => 1, "name" => "T-Shirt", "price" => 20],
    2 => ["id" => 2, "name" => "Jeans", "price" => 50],
    3 => ["id" => 3, "name" => "Hat", "price" => 15],
];


// Function to handle adding to cart
function addToCart($product_id, $cart) {
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $cart[] = $product;
        return $cart;
    } else {
        return $cart;  // Product not found, return cart unchanged
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
        }
        echo "</ul>";
        $total = 0;
        foreach ($cart as $item) {
            $total += $item['price'];
        }
        echo "<p><strong>Total: $" . $total . "</strong></p>";
    }
}

// Handle form submission (add to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
        $product_id = (int)$_POST["product_id"]; // Cast to integer
        $quantity = (int)$_POST["quantity"];  // Cast to integer

        // Validate the quantity (optional but recommended)
        if ($quantity <= 0) {
            echo "<p style='color:red;'>Invalid quantity. Please enter a positive number.</p>";
        } else {
            // Add to cart
            $cart = $_SESSION['cart'] ?? [];  // Use session for persistence
            $cart = addToCart($product_id, $cart);
            $_SESSION['cart'] = $cart; // Store in session

            echo "<p style='color:green;'>Product added to cart!</p>";
        }

    }
}


// Display Cart (if cart exists in session)
if (isset($_SESSION['cart'])) {
    displayCart($_SESSION['cart']);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>
    <h1>Shopping Cart</h1>

    <!-- Product Listing -->
    <h2>Available Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . $product['price'] . " <button type='button' onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
        }
        ?>
    </ul>

    <!-- Add to Cart Form -->
    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product) {
                echo "<option value='" . $id . "'>" . $id . "</option>";
            }
            ?>
        </select><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" value="1" min="1"><br><br>

        <button type="submit">Add to Cart</button>
    </form>

</body>
</html>


<?php
session_start();

// Database connection (Replace with your actual database details)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_username';
$db_pass = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
}

// Function to add to cart
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    if (isset($_SESSION['cart'])) {
        $cart = json_decode($_SESSION['cart'], true);
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = array('quantity' => $quantity);
        }
    } else {
        $cart = array($product_id => array('quantity' => $quantity));
        $_SESSION['cart'] = json_encode($cart);
    }

    // Update the session
    $_SESSION['cart'] = json_encode($cart);

    $conn->close();
}

// Function to display the cart
function displayCart() {
    $conn = connectToDatabase();

    $cart = json_decode($_SESSION['cart'], true);
    $total_price = 0;

    echo "<div class='cart-container'>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Shopping Cart</h2>";
        echo "<table id='cartTable'>";
        echo "<thead><tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr></thead>";
        echo "<tbody>";

        foreach ($cart as $product_id => $product_data) {
            $product_name = "Product " . $product_id; // Replace with your product name retrieval
            $product_price = getProductPrice($product_id); // Call function to get product price
            $item_total = $product_price * $product_data['quantity'];

            echo "<tr>";
            echo "<td>" . $product_name . "</td>";
            echo "<td>$" . number_format($product_price, 2) . "</td>";
            echo "<td>" . $product_data['quantity'] . "</td>";
            echo "<td>$" . number_format($item_total, 2) . "</td>";
            echo "<td><button type='button' onclick='removeFromCart(" . $product_id . ")'>Remove</button></td>";
            echo "</tr>";

            $total_price += $item_total;
        }

        echo "</tbody>";
        echo "<tfoot><tr><td colspan='4'><strong>Total: $" . number_format($total_price, 2) . "</strong></td></tr></tfoot>";
        echo "</table>";
    }
    echo "</div>";
}

// Function to remove from cart
function removeFromCart($product_id) {
    $conn = connectToDatabase();
    $cart = json_decode($_SESSION['cart'], true);

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }

    $_SESSION['cart'] = json_encode($cart);
    // Optionally clear the session entirely if you want a completely empty cart
    // unset($_SESSION['cart']);
    // $_SESSION['cart'] = json_encode(array());
}

// Function to get product price (Replace with your actual product retrieval logic)
function getProductPrice($product_id) {
  // Replace this with your actual database query to fetch product price.
  // This is just an example.
  if ($product_id == 1) {
    return 10.00;
  } elseif ($product_id == 2) {
    return 25.00;
  } else {
    return 0.00; // Default price for unknown products.
  }
}



// Handle Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
}

// Handle Remove from Cart
if (isset($_GET['remove'])) {
    $product_id = $_GET['remove'];
    removeFromCart($product_id);
}


// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-container {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 20px;
            width: 500px;
        }

        #cartTable {
            width: 100%;
            border-collapse: collapse;
        }

        #cartTable th, #cartTable td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <!-- Product Listing (Replace with your actual product listing) -->
    <h2>Products</h2>
    <div class="products">
      <form method="post">
        <label for="product_1">Product 1 (ID: 1)</label><br>
        <input type="number" id="quantity_1" name="quantity_1" value="1"><br><br>
        <input type="hidden" name="product_id" value="1"><br><br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
      </form><br>

      <form method="post">
        <label for="product_2">Product 2 (ID: 2)</label><br>
        <input type="number" id="quantity_2" name="quantity_2" value="1"><br><br>
        <input type="hidden" name="product_id" value="2"><br><br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
      </form>
    </div>


</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// --- Database Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli Connection object or null on failure.
 */
function connect_to_db() {
  global $db_host, $db_name, $db_user, $db_password;

  try {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
      throw new Exception("Connection failed: " . $conn->connect_error);
    }
    return $conn;
  } catch (Exception $e) {
    error_log("Database connection error: " . $e->getMessage());
    return null;
  }
}

/**
 * Adds a product to the cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id Product ID.
 * @param int $quantity Quantity to add.
 * @return bool True if successful, false otherwise.
 */
function add_to_cart(mysqli $conn, $product_id, $quantity) {
    $product_id = mysqli_real_escape_string($conn, $product_id); // Sanitize input
    $quantity = mysqli_real_escape_string($conn, $quantity);
    $user_id = $_SESSION['user_id']; // Get user ID from session (assuming you have user authentication)

    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";

    if ($conn->query($query) === TRUE) {
      return true;
    } else {
      error_log("Failed to add to cart: " . $conn->error);
      return false;
    }
}

/**
 * Retrieves cart items for a specific user.
 *
 * @param mysqli $conn Database connection.
 * @param int $user_id User ID.
 * @return array An array of cart items, each with 'id' and 'quantity'
 */
function get_cart_items(mysqli $conn, $user_id) {
  $user_id = mysqli_real_escape_string($conn, $user_id);

  $query = "SELECT product_id, quantity FROM cart WHERE user_id = '$user_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $items = [];
    while ($row = $result->fetch_assoc()) {
      $items[] = [
        'id' => $row['product_id'],
        'quantity' => $row['quantity']
      ];
    }
    return $items;
  } else {
    return [];
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id Product ID.
 * @param int $new_quantity New quantity.
 * @return bool True if successful, false otherwise.
 */
function update_cart_quantity(mysqli $conn, $product_id, $new_quantity) {
    $product_id = mysqli_real_escape_string($conn, $product_id);
    $new_quantity = mysqli_real_escape_string($conn, $new_quantity);
    $user_id = $_SESSION['user_id']; // Get user ID from session

    $query = "UPDATE cart SET quantity = '$new_quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";

    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        error_log("Failed to update cart quantity: " . $conn->error);
        return false;
    }
}

/**
 * Deletes a product from the cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id Product ID.
 * @param int $user_id User ID.
 * @return bool True if successful, false otherwise.
 */
function remove_from_cart(mysqli $conn, $product_id, $user_id) {
    $product_id = mysqli_real_escape_string($conn, $product_id);
    $user_id = mysqli_real_escape_string($conn, $user_id);

    $query = "DELETE FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";

    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        error_log("Failed to remove from cart: " . $conn->error);
        return false;
    }
}

// --- Purchase Functionality ---

/**
 * Handles the purchase process.
 */
function handle_purchase() {
  global $db_conn; // Access the database connection

  // Get cart items
  $cart_items = get_cart_items($db_conn, $_SESSION['user_id']);

  // Check if the cart is empty
  if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  // Calculate the total price (assuming you have a products table with price)
  $total_price = 0;
  foreach ($cart_items as $item) {
    //  Replace this with your actual product price retrieval
    $product_price = get_product_price($item['id']);
    $total_price += $product_price * $item['quantity'];
  }


  // Display confirmation message
  echo "<p><b>Order Confirmation:</b></p>";
  echo "<p>Total Price: $" . number_format($total_price, 2) . "</p>";

  //  Clear the cart (after successful purchase)
  clear_cart($_SESSION['user_id']);

  //  You'd typically process payment here using a payment gateway.
  //  This is just a placeholder.
  echo "<p>Payment is pending.  Thank you for your order!</p>";
}

/**
 *  Placeholder function to get product price - replace with your actual product lookup.
 * @param int $product_id
 * @return float
 */
function get_product_price(int $product_id){
    //This is a placeholder, replace with your product retrieval logic
    if($product_id == 1){
        return 10.00;
    } else if ($product_id == 2){
        return 25.00;
    } else {
        return 0.00;
    }
}

/**
 * Clears the cart for a user.
 * @param int $user_id
 */
function clear_cart(int $user_id){
    handle_purchase(); // This effectively clears the cart
}
?>


<?php

// Database Connection (Replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $orderData Array of product IDs and quantities.  Example: ['product_id' => 1, 'quantity' => 2]
 * @return string  Success or error message.
 */
function processPurchase(array $orderData) {
    // 1. Validate Order Data
    if (empty($orderData)) {
        return "Error: No products were selected for purchase.";
    }

    // 2.  Fetch Product Information
    $products = [];
    foreach ($orderData as $product_id => $quantity) {
        $stmt = $pdo->prepare("SELECT id, name, price FROM products WHERE id = ?");
        $stmt->execute([$product_id]);
        $product = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            return "Error: Product with ID $product_id not found.";
        }

        $products[] = [
            'id' => $product['id'],
            'name' => $product['name'],
            'price' => $product['price'],
            'quantity' => $quantity
        ];
    }

    // 3. Calculate Total Price
    $totalPrice = 0;
    foreach ($products as $product) {
        $totalPrice += $product['price'] * $product['quantity'];
    }

    // 4.  Create Order Record
    $order_id = date("YmdHis"); // Generate a unique order ID (YearMonthDayHourMinuteSecond)
    $stmt = $pdo->prepare("INSERT INTO orders (order_id, customer_name, total_price) VALUES (?, ?, ?)");
    $stmt->execute([$order_id, "Guest", $totalPrice]);  //  Replace "Guest" with user's name if logged in
    $order_id = $pdo->lastInsertId(); //Get the newly created ID

    // 5.  Create Order Items
    foreach ($products as $product) {
        $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
        $stmt->execute([$order_id, $product['id'], $product['quantity']]);
    }

    return "Purchase completed successfully! Order ID: " . $order_id;
}


// --- Example Usage (Simulate a form submission) ---

// Example order data (replace with data from a form)
$order_data = [
    1 => 2, // Product ID 1, quantity 2
    2 => 1, // Product ID 2, quantity 1
];

// Process the purchase
$result = processPurchase($order_data);

echo "<p>" . $result . "</p>";


// ---  Dummy Data (Products Table -  create this in your database) ---
/*
CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);

INSERT INTO products (name, price) VALUES
('Laptop', 1200.00),
('Mouse', 25.00),
('Keyboard', 75.00);
*/
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_pass = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (Basic validation - extend this for production)
  $name = htmlspecialchars($_POST["name"]);
  $email = htmlspecialchars($_POST["email"]);
  $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer
  $product_name = htmlspecialchars($_POST["product_name"]);

  // Check if required fields are filled
  if (empty($name) || empty($email) || empty($quantity) || empty($product_name)) {
    $error = "Please fill in all fields.";
  } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    // Prepare the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, product_name) VALUES ('$name', '$email', '$quantity', '$product_name')";

    // Execute the query
    if (mysqli_query($db_connect, $sql)) {
      $success = "Order placed successfully!";
    } else {
      $error = "Error placing order: " . mysqli_error($db_connect);
    }
  }
}

// Connect to the database
$db_connect = mysqli_connect($db_host, $db_user, $db_pass, $db_name);

// Check the connection
if (!$db_connect) {
  die("Connection failed: " . mysqli_connect_error());
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <button type="submit">Place Order</button>
  </form>

  <p>
    <a href="index.php">Back to Home</a>
  </p>

</body>
</html>


<?php

// Database connection details
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase functionality
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
  // Validate inputs (add more robust validation here)
  if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
    return "Error: All fields are required.";
  }

  //  Check if the cart exists
  $sql = "SELECT * FROM carts WHERE id = '$cart_id'";
  $result = $conn->query($sql);

  if (!$result->num_rows) {
    return "Error: Cart not found.";
  }

  $cart = $result->fetch_assoc();

  // Insert order information into the orders table
  $order_id = $conn->insert_id; // Get the last inserted ID
  $sql = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, payment_method, order_id)
          VALUES ('$cart_id', '$customer_name', '$customer_email', NOW(), '$payment_method', '$order_id')";

  if ($conn->query($sql) === TRUE) {
    // Update the cart to mark it as purchased
    $sql = "UPDATE carts SET purchased = 1, order_id = '$order_id' WHERE id = '$cart_id'";
    if ($conn->query($sql) === TRUE) {
      return "Purchase successful! Order ID: " . $order_id;
    } else {
      return "Error updating cart.";
    }
  } else {
    return "Error inserting order.";
  }
}

// -----  Example Usage (This would typically be handled by a form) -----

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get form data (replace with actual form input names)
  $cart_id = $_POST["cart_id"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];
  $payment_method = $_POST["payment_method"];

  // Process the purchase
  $purchaseResult = handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);

  // Display the result
  echo "<p>" . $purchaseResult . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
      <option value="other">Other</option>
    </select><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// ... (Database connection code as before) ...

// Function to handle purchase functionality using prepared statements
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
  // Validate inputs
  if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
    return "Error: All fields are required.";
  }

  // Prepare the SQL query using prepared statements
  $sql = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, payment_method, order_id)
          VALUES (?, ?, NOW(), ?, ?, ?)";

  $stmt = $conn->prepare($sql);

  if ($stmt === false) {
    die("Error preparing statement: " . $conn->error); // Handle statement preparation errors
  }

  // Bind parameters to the statement
  $stmt->bind_param("siss", $cart_id, $customer_name, $payment_method);  // 's' for string

  // Execute the statement
  if ($stmt->execute() === false) {
    echo "Error executing statement: " . $stmt->error;  // Better error logging
    $stmt->close();
    return "Error: " . $stmt->error;
  }

  // Get the last inserted ID
  $order_id = $conn->insert_id;

  // Update the cart
  $sql = "UPDATE carts SET purchased = 1, order_id = '$order_id' WHERE id = '$cart_id'";
  if ($conn->query($sql) === TRUE) {
    return "Purchase successful! Order ID: " . $order_id;
  } else {
    return "Error updating cart.";
  }

  $stmt->close(); // Close the statement
}

// ... (Rest of the code remains the same) ...
?>


<?php

// Sample product data (replace with database connection)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

// Session for storing the cart
session_start();

// Initialize the cart in session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $_SESSION['cart']) {
    // Check if the product exists
    if (array_key_exists($product_id, $products)) {
        $product = $products[$product_id];
        if (!in_array($product['id'], $_SESSION['cart'])) { // Prevent duplicate adds
            $_SESSION['cart'][] = $product['id'];
        }
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id, $_SESSION['cart']) {
    if (in_array($product_id, $_SESSION['cart'])) {
        $_SESSION['cart'] = array_diff($_SESSION['cart'], $product_id);
    }
}

// Function to view the cart
function view_cart() {
    $cart_items = [];
    foreach ($_SESSION['cart'] as $item_id) {
        $cart_items[] = $products[$item_id] ;
    }

    if (empty($cart_items)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Shopping Cart</h2>";
        echo "<ul>";
        foreach ($cart_items as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
        }
        echo "</ul>";

        // Calculate total price
        $total_price = 0;
        foreach ($cart_items as $item) {
            $total_price += $item['price'];
        }
        echo "<p><strong>Total: $" . $total_price . "</strong></p>";
    }
}

// Handle add to cart request
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    add_to_cart($product_id, $_SESSION['cart']);
}

// Handle remove from cart request
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id, $_SESSION['cart']);
}

// Start the page
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase System</title>
</head>
<body>

    <h1>Our Products</h1>
    <form method="post">
        <?php
        foreach ($products as $id => $product) {
            echo "<label for=\"product_" . $id . "\">" . $product['name'] . " - $" . $product['price'] . "<br>";
            echo "<input type=\"radio\" id=\"product_" . $id . "\" name=\"product_id\" value=\"" . $id . "\"> </label>";
        }
        ?>
        <button type="submit" name="add_to_cart">Add to Cart</button>
    </form>

    <br>

    <h2>View Cart</h2>
    <?php view_cart(); ?>

</body>
</html>


<?php

// This is a simplified purchase functionality for demonstration purposes.
// In a real-world application, you would need more robust security,
// database integration, error handling, and more comprehensive features.

class Purchase {
    private $product_id;
    private $quantity;
    private $total_price;

    public function __construct($product_id, $quantity) {
        $this->product_id = $product_id;
        $this->quantity = $quantity;

        //  **Important:** In a real application, you'd fetch product details
        //  from a database based on $product_id.  For this example,
        //  we'll use hardcoded values.
        $product = $this->getProduct($product_id);

        if ($product) {
            $this->total_price = $product['price'] * $this->quantity;
        } else {
            $this->total_price = 0;
            $this->setError("Product not found");
        }
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getQuantity() {
        return $this->quantity;
    }

    public function getTotalPrice() {
        return $this->total_price;
    }

    private function getProduct($product_id) {
        // **Replace this with a real database query**
        // This is just a simulated database lookup.
        $products = [
            1 => ['name' => 'T-Shirt', 'price' => 20],
            2 => ['name' => 'Jeans', 'price' => 50],
            3 => ['name' => 'Hat', 'price' => 15],
        ];
        return $products[$product_id] ?? null; // Null-coalescing operator for null safety
    }

    private $errors = [];

    public function addError($message) {
        $this->errors[] = $message;
    }

    public function getErrors() {
        return $this->errors;
    }
}

// Example Usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {
        $purchase = new Purchase($product_id, $quantity);

        $errors = $purchase->getErrors();
        if (empty($errors)) {
            echo "<p>Purchase successful!</p>";
            echo "<p>Product ID: " . $purchase->getProductId() . "</p>";
            echo "<p>Quantity: " . $purchase->getQuantity() . "</p>";
            echo "<p>Total Price: $" . number_format($purchase->getTotalPrice(), 2) . "</p>";
        } else {
            echo "<p>Error: " . implode(", ", $errors) . "</p>";
        }
    } else {
        echo "<p>Invalid input. Please enter valid numeric values for product ID and quantity, and ensure quantity is greater than 0.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

    <h1>Purchase Form</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <button type="submit">Purchase</button>
    </form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize inputs
  $product_id = filter_input(INPUT_POST, "product_id", FILTER_VALIDATE_INT);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $customer_name = filter_input(INPUT_POST, "customer_name", FILTER_SANITIZE_STRING);
  $customer_email = filter_input(INPUT_POST, "customer_email", FILTER_SANITIZE_EMAIL);

  // Error checking
  if (!$product_id || !$quantity || !$customer_name || !$customer_email) {
    $errors = ["product_id" => "Product ID is required.",
              "quantity" => "Quantity is required.",
              "customer_name" => "Customer Name is required.",
              "customer_email" => "Customer Email is required."];
  } elseif (!$product_id || !$quantity) {
    $errors = []; // Clear any previous errors
  } elseif (!$customer_name || !$customer_email) {
    $errors = []; // Clear any previous errors
  }

  // If no errors, proceed with the purchase
  if (!empty($errors)) {
    $_SESSION["errors"] = $errors; // Store errors in session for display
    // Redirect back to the product page with errors
    header("Location: product.php?product_id=$product_id");
    exit();
  }

  // Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email)
          VALUES ($product_id, $quantity, '$customer_name', '$customer_email')";

  // Execute the query
  if ($conn->query($sql) === TRUE) {
    // Purchase successful
    echo "<h2>Purchase Successful!</h2>";
    echo "<p>Thank you for your order, " . $customer_name . "!</p>";

    // You can also:
    // - Redirect to a confirmation page
    // - Send an email confirmation
  } else {
    // Purchase failed
    echo "<h2>Purchase Failed!</h2>";
    echo "<p>" . $conn->error . "</p>";
  }

  $conn->close();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php
  // Display any error messages from the session
  if (isset($_SESSION["errors"])) {
    echo "<h3>Errors:</h3>";
    echo "<ul>";
    foreach ($_SESSION["errors"] as $field => $error) {
      echo "<li>" . $field . ": " . $error . "</li>";
    }
    echo "</ul>";
    unset($_SESSION["errors"]); // Remove errors from session
  }
  ?>

  <form method="POST" action="purchase.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required>
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required>
    <br><br>

    <input type="submit" value="Purchase">
  </form>

  <br>
  <a href="index.php">Back to Product Listing</a> <!-- Example link back to your product list -->

</body>
</html>


<?php

// Configuration (Replace with your actual values)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
    4 => ['name' => 'Monitor', 'price' => 300],
];

$cart = []; // Array to store items in the cart

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (array_key_exists($product_id, $products)) {
        $product = $products[$product_id];

        // Check if the item is already in the cart
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        }
    } else {
        echo "Product ID $product_id not found.";
    }
}

// Function to display the cart
function displayCart()
{
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total cost
    $total = 0;
    foreach ($cart as $item_id => $item) {
        $total += $item['price'] * $item['quantity'];
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// Example Usage (Simulating a purchase)
// Add items to the cart
addToCart(1, 2); // Add 2 Laptops
addToCart(2, 3); // Add 3 Mice
addToCart(3); // Add 1 Keyboard (default quantity of 1)

// Display the cart
displayCart();

//  ---  Simulating a Purchase / Checkout (Illustrative) ---
//  In a real application, you'd process this securely.
//  This is a simplified example.

//  To make a purchase, you'd typically:
//  1. Collect payment information (using a secure payment gateway).
//  2. Verify the payment.
//  3. Update inventory (decrease stock levels).
//  4. Generate an order confirmation.
//  5. Store the order details.

echo "<p>Thank you for your purchase!</p>";



?>


<?php

// Database configuration (Replace with your actual database details)
$dbHost = 'localhost';
$dbName = 'e_commerce_db';
$dbUser = 'your_user';
$dbPass = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a purchase to the database
function addPurchase($userId, $productId, $quantity) {
    $conn = connectToDatabase();

    // Prepare the SQL statement
    $sql = "INSERT INTO purchases (user_id, product_id, quantity, purchase_date) 
            VALUES (
                '$userId', 
                '$productId', 
                '$quantity',
                NOW()  // Get the current date and time
            )";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to get all purchases for a user
function getPurchasesByUser($userId) {
    $conn = connectToDatabase();

    $sql = "SELECT * FROM purchases WHERE user_id = '$userId'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        return false;
    }
}


// --- Example Usage (Handle Form Submission) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user ID from the form
    $userId = $_POST["user_id"];

    // Get product ID and quantity from the form
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate inputs (Important for security)
    if (empty($userId) || empty($productId) || empty($quantity)) {
        echo "<p>Error: All fields are required.</p>";
    } elseif (!is_numeric($quantity)) {
        echo "<p>Error: Quantity must be a number.</p>";
    } else {
        // Add the purchase to the database
        if (addPurchase($userId, $productId, $quantity)) {
            echo "<p>Purchase added successfully!</p>";
        } else {
            echo "<p>Error adding purchase.</p>";
        }
    }
}

// --- Display Form ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Add to Cart</button>
</form>

<?php
// Display user's purchases (if any)
$userId = 1; // Replace with the actual user ID for display
$purchases = getPurchasesByUser($userId);

if ($purchases) {
    echo "<h2>Your Purchases:</h2>";
    echo "<table>
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Quantity</th>
                    <th>Purchase Date</th>
                </tr>
            </thead>
            <tbody>";
    while ($row = $purchases->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row["product_id"] . "</td>";
        echo "<td>" . $row["quantity"] . "</td>";
        echo "<td>" . $row["purchase_date"] . "</td>";
        echo "</tr>";
    }
    echo "</tbody>
        </table>";
} else {
    echo "<p>No purchases found for this user.</p>";
}
?>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerceshop";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the form data
    $name = $_POST["name"];
    $email = $_POST["email"];
    $quantity = $_POST["quantity"];
    $product_id = $_POST["product_id"]; // Assuming you have a product ID

    // Sanitize the input (VERY IMPORTANT)
    $name = htmlspecialchars($name);
    $email = htmlspecialchars($email);
    $quantity = intval($quantity); // Convert quantity to integer
    $product_id = intval($product_id); // Convert product ID to integer


    // Check if quantity is valid
    if ($quantity <= 0) {
        $error_message = "Quantity must be greater than 0.";
    } else {
        //  Database query to add the purchase to the database
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "INSERT INTO purchases (name, email, quantity, product_id) VALUES ('$name', '$email', '$quantity', '$product_id')";

        if ($conn->query($sql) === TRUE) {
            $success_message = "Purchase added successfully!";
        } else {
            $error_message = "Error adding purchase: " . $conn->error;
        }

        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <?php if (isset($error_message)) { ?>
        <p style="color: red;"><?php echo $error_message; ?></p>
    <?php } ?>

    <?php if (isset($success_message)) { ?>
        <p style="color: green;"><?php echo $success_message; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" min="1" max="100" value="1"><br><br>

        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" min="1" max="100"><br><br>


        <button type="submit">Add to Cart</button>
    </form>

    <a href="index.php">Back to Home</a>

</body>
</html>


<?php
session_start();

// Database connection (Replace with your database details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Define product data (for demonstration - replace with your database)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Cart function
function get_cart() {
    if (empty($_SESSION['cart'])) {
        return [];
    }
    return $_SESSION['cart'];
}

function add_to_cart($product_id, $quantity = 1) {
    $cart = get_cart();

    // Check if product exists
    if (!isset($products[$product_id])) {
        return false;
    }

    // Check if product is already in cart
    foreach ($cart as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] += $quantity;
            return true;
        }
    }

    // If not in cart, add it
    $cart[] = $products[$product_id];
    return true;
}

function remove_from_cart($product_id) {
    $cart = get_cart();
    foreach ($cart as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($cart[$key]);
            return true;
        }
    }
    return false;
}


function calculate_total() {
    $cart = get_cart();
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// Handle adding to cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    add_to_cart($product_id, (int)$_POST['quantity']); // Ensure quantity is an integer
    // Optionally, you could redirect to a success page or refresh the cart view
}

// Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    remove_from_cart($product_id);
}

// Display Cart
$cart = get_cart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            margin-bottom: 10px;
            padding: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post">
        <?php if (empty($cart)) {
            echo "<p>Your cart is empty.</p>";
        } else { ?>
            <table id="cart-table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                    $total = 0;
                    foreach ($cart as $item) {
                        $product_name = $item['name'];
                        $product_price = $item['price'];
                        $quantity = $item['quantity'];
                        $item_total = $product_price * $quantity;
                        $total += $item_total;

                        echo "<tr class='cart-item'>
                                <td>" . $product_name . "</td>
                                <td>$" . $product_price . "</td>
                                <td>" . $quantity . "</td>
                                <td>$" . $item_total . "</td>
                                <td>
                                    <form method='post'>
                                        <input type='hidden' name='product_id' value='" . $item['id'] . "'>
                                        <button type='submit'>Remove</button>
                                    </form>
                                </td>
                            </tr>";
                    } ?>
                </tbody>
            </table>

            <p><strong>Total:</strong> $" . $total . "</p>
        <?php } ?>
    </form>

</body>
</html>


<?php
session_start(); // Start the session for user management

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function processPurchase($cart, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1.  Validate Cart Data (Important Security Step) - Example
    //  (In a real application, you'd likely have more robust validation)
    foreach ($cart as $product_id => $quantity) {
        // Check if the product ID exists in your database
        $sql = "SELECT id, product_name, price FROM products WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id); // "i" for integer
        $stmt->execute();
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            // Product exists, continue
        } else {
            // Product does not exist - Handle this error appropriately
            die("Invalid product ID in cart.");
        }
    }

    // 2.  Create Order Record
    $order_date = date('Y-m-d H:i:s');
    $total_amount = 0;

    $sql = "INSERT INTO orders (customer_name, customer_email, order_date, total_amount) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ssid", $customer_name, $customer_email, $order_date, $total_amount);
    $stmt->execute();
    $order_id = $conn->insert_id;  // Get the ID of the newly inserted order

    // 3.  Create Order Items (One record per product in the order)
    foreach ($cart as $product_id => $quantity) {
        $product_name = "";
        $product_price = "";

        // Retrieve product details
        $sql = "SELECT product_name, price FROM products WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            $product_name = $row['product_name'];
            $product_price = $row['price'];
        }

        $sql = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("isd", $order_id, $product_id, $quantity, $product_price);
        $stmt->execute();
    }

    // 4.  Update Order Total (Optional, but good practice)
    $sql = "UPDATE orders SET total_amount = (SELECT SUM(price * quantity) FROM order_items WHERE order_id = ?) WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("id", $order_id, $order_id);
    $stmt->execute();

    // 5.  Clear Cart (Reset the shopping cart)
    $_SESSION['cart'] = [];

    // 6.  Success Message
    echo "<p style='color: green;'>Purchase successful! Order ID: " . $order_id . "</p>";
}


// --- Example Usage (Handles form submission) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart data from the session
    $cart = $_SESSION['cart'];

    // Get customer information from the form
    $customer_name = $_POST['customer_name'];
    $customer_email = $_POST['customer_email'];
    $payment_method = $_POST['payment_method'];

    // Process the purchase
    processPurchase($cart, $customer_name, $customer_email, $payment_method);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart - Purchase</title>
</head>
<body>

<h1>Shopping Cart</h1>

<!-- Display Cart Items (Simplified - Replace with a dynamic list) -->
<h2>Cart:</h2>
<?php
if (!empty($cart)) {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>

<br>

<h2>Purchase Now</h2>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
  // Assuming you have a 'cart' table with columns:
  // - user_id (foreign key to a 'users' table - not implemented here)
  // - product_id
  // - quantity

  //  Example:
  $sql = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";

  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Function to retrieve the cart items
function getCartItems($conn) {
    $sql = "SELECT product_id, quantity FROM cart";
    $result = $conn->query($sql);

    $cart_items = array();
    if ($result->num_rows > 0) {
      while($row = $result->fetch_assoc()) {
        $product_id = $row["product_id"];
        $quantity = $row["quantity"];

        // You'll need to fetch product details from a 'products' table
        // based on the product_id.  This is a placeholder.
        $product = getProductDetails($conn, $product_id);

        if ($product) {
          $cart_items[] = array(
            'product_id' => $product_id,
            'product_name' => $product['product_name'],
            'quantity' => $quantity,
            'price' => $product['price'] // Assuming you have a 'products' table with a price
          );
        }
      }
    }
    return $cart_items;
}


// Placeholder function to get product details (replace with your actual database query)
function getProductDetails($conn, $product_id) {
  // This is a placeholder.  You'll need to adapt this to your database schema.
  // You would typically query the 'products' table based on the $product_id.
  // Example:
  // $sql = "SELECT product_name, price FROM products WHERE product_id = '$product_id'";
  // $result = $conn->query($sql);

  // For this example, let's just return some dummy data
  if ($product_id == 1) {
    return array('product_name' => 'Laptop', 'price' => 1200);
  } elseif ($product_id == 2) {
    return array('product_name' => 'Mouse', 'price' => 25);
  } else {
    return null; // Product not found
  }
}


// --- Example Usage (Handle Form Submission) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Check if 'add_to_cart' button was clicked
  if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Connect to the database
    $conn = connectToDatabase();

    // Add to cart
    if (addToCart($conn, $product_id, $quantity)) {
      echo "Product added to cart!  Check your cart.";
    } else {
      echo "Failed to add product to cart.";
    }

    // Close the connection
    $conn->close();
  }
}

// --- Display the Cart (for demonstration) ---

$cart_items = getCartItems($conn);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <h2>Add to Cart</h2>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <option value="1">Laptop</option>
      <option value="2">Mouse</option>
      <option value="3">Keyboard</option>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1"><br><br>

    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <h2>Your Cart</h2>
  <?php if (!empty($cart_items)): ?>
    <ul>
      <?php foreach ($cart_items as $item): ?>
        <li><?php echo $item['product_name'] . ' - ' . $item['quantity'] . ' - ' . $item['price']; ?></li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>Your cart is empty.</p>
  <?php endif; ?>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Initialize an empty cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
  $product_id = intval($product_id); // Ensure product ID is an integer
  $quantity = intval($quantity);   // Ensure quantity is an integer

  if ($quantity <= 0) {
    return false; // Invalid quantity
  }

  // Retrieve product information from the database
  $productQuery = "SELECT id, name, price FROM products WHERE id = $product_id";
  $productResult = $conn->query($productQuery);

  if (!$productResult->num_rows > 0) {
    return false; // Product not found
  }

  $product = $productResult->fetch_assoc();
  $product_name = $product['name'];
  $product_price = $product['price'];

  // Add the item to the cart
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity, 'name' => $product_name, 'price' => $product_price];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }

  return true;
}

// Function to remove an item from the cart
function removeFromCart($conn, $product_id) {
    $product_id = intval($product_id); // Ensure product ID is an integer

    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
    $product_id = intval($product_id); // Ensure product ID is an integer
    $quantity = intval($quantity);   // Ensure quantity is an integer

    if (!isset($_SESSION['cart'][$product_id])) {
        return false; // Product not in cart
    }

    if ($quantity <= 0) {
        return false; // Invalid quantity
    }

    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    return true;
}

// Function to calculate the total cart value
function calculateTotal($conn) {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// ---  Handle Cart Actions  ---

// Add to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (addToCart($conn, $product_id, $quantity)) {
    echo "<p>Item added to cart.</p>";
  } else {
    echo "<p>Error adding item to cart.</p>";
  }
}

// Remove from Cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($conn, $product_id);
  echo "<p>Item removed from cart.</p>";
}

// Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    if (updateQuantity($conn, $product_id, $quantity)) {
        echo "<p>Quantity updated successfully.</p>";
    } else {
        echo "<p>Failed to update quantity.</p>";
    }
}


// --- Display Cart Contents ---
$total = calculateTotal($conn);

echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

?>


<?php
// Configuration settings
define('DB_HOST', 'localhost');
define('DB_USER', 'your_db_user');
define('DB_PASSWORD', 'your_db_password');
define('DB_NAME', 'your_db_name');

// Set error reporting to display errors (for development only)
error_reporting(E_ALL);
ini_set('display_errors', 1);


<?php

// Database connection function
function connect_to_db() {
    $db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

    if ($db->connect_error) {
        die('Connection failed: ' . $db->connect_error);
    }

    return $db;
}

// Function to execute a query
function execute_query($db, $query) {
    $result = $db->query($query);
    if (!$result) {
        die('Query failed: ' . $db->error);
    }
    return $result;
}
?>


<?php
require_once 'database.php';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate input (Crucial for security)
    if (!is_numeric($product_id) || !is_numeric($quantity)) {
        $error_message = "Invalid product ID or quantity.";
    } elseif ($quantity <= 0) {
        $error_message = "Quantity must be greater than zero.";
    } else {
        // Proceed with the order
        $db = connect_to_db();
        $query = "INSERT INTO orders (product_id, quantity) VALUES ('" . $product_id . "', '" . $quantity . "')";
        execute_query($db, $query);
        $db->close(); // Close the connection

        $order_message = "Order placed successfully!";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Product</title>
</head>
<body>

<h1>Purchase Product</h1>

<?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php } ?>

<?php if (isset($order_message)) { ?>
    <p style="color: green;"><?php echo $order_message; ?></p>
<?php } ?>

<form method="post" action="index.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php
//This is just an example.  You'd connect to your database
//and display the product information here.

$product_id = $_GET["product_id"];  //Get product id from URL

//Simulate fetching product details (replace with actual database query)
$product_name = "Awesome Product";
$product_price = 25.00;

echo "<p>Product Name: " . $product_name . "</p>";
echo "<p>Price: $" . $product_price . "</p>";

//This would link to your product table
//echo "<p>Product ID: " . $product_id . "</p>";

?>


<?php

// Sample Product Data (Replace with your database integration)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to handle the purchase process
function handlePurchase($productId, $quantity) {
    // Validate input
    if (!is_numeric($productId) || $productId <= 0) {
        return "Invalid product ID.  Please enter a positive integer.";
    }
    if (!is_numeric($quantity) || $quantity <= 0) {
        return "Invalid quantity. Please enter a positive integer.";
    }

    // Find the product
    $product = $products[$productId];

    if (!$product) {
        return "Product with ID " . $productId . " not found.";
    }

    // Calculate the total price
    $totalPrice = $product['price'] * $quantity;

    // Display the purchase details
    return "Purchase confirmed:
" .
           "Product: " . $product['name'] . "
" .
           "Quantity: " . $quantity . "
" .
           "Price per item: $" . $product['price'] . "
" .
           "Total Price: $" . $totalPrice;
}

// Example Usage (Handle user input from a form - see the form example below)
//  You'll need to implement this based on how you're getting the data.

//  For demonstration purposes, let's simulate input.
$productId = 1;
$quantity = 2;

$result = handlePurchase($productId, $quantity);
echo $result . "
";

?>


<?php
// (Previous code from the answer goes here - the handlePurchase function)

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the product ID and quantity from the form
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Call the handlePurchase function
    $result = handlePurchase($productId, $quantity);

    // Display the result
    echo $result . "
";
}
?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (Basic validation - improve this for production)
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"];

  // Sanitize the data to prevent XSS vulnerabilities
  $name = htmlspecialchars($name);
  $email = htmlspecialchars($email);
  $quantity = intval($quantity); // Ensure quantity is an integer
  $price = floatval($price);    // Ensure price is a float

  // Input validation (more robust validation is crucial in real applications)
  if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
    $error_message = "Please fill in all fields correctly.";
  } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error_message = "Invalid email address.";
  } else {
    // Process the order
    // 1.  Create a database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // 2. Prepare the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, price) VALUES (?, ?, ?, ?)";

    // 3. Prepare the statement
    $stmt = $conn->prepare($sql);

    // 4. Bind the parameters
    $stmt->bind_param("ssdi", $name, $email, $quantity, $price);

    // 5. Execute the query
    if ($stmt->execute()) {
      $success_message = "Order placed successfully! Thank you for your purchase.";
    } else {
      $error_message = "Order placement failed: " . $stmt->error;
    }

    // 6. Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place Your Order</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" value="10.00"><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_user';
$db_pass = 'your_password';
$db_name = 'your_database';

// Initialize session for user tracking
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}


// Function to handle the purchase process
function handlePurchase($cart_id, $user_id) {
    $conn = connectToDatabase();

    // Check if the cart exists
    $sql_cart = "SELECT * FROM carts WHERE id = ?";
    $stmt_cart = $conn->prepare($sql_cart);
    $stmt_cart->bind_param("i", $cart_id);
    $stmt_cart->execute();
    $result_cart = $stmt_cart->get_result();

    if ($result_cart->num_rows == 0) {
        return false; // Cart not found
    }

    $cart_data = $result_cart->fetch_assoc();

    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // User not logged in
    }

    // Get user ID from session
    $user_id_session = $_SESSION['user_id'];

    // Check if the user owns the cart
    $sql_user_cart = "SELECT * FROM carts WHERE id = ? AND user_id = ?";
    $stmt_user_cart = $conn->prepare($sql_user_cart);
    $stmt_user_cart->bind_param("is", $cart_id, $user_id_session);
    $stmt_user_cart->execute();
    $result_user_cart = $stmt_user_cart->get_result();

    if ($result_user_cart->num_rows == 0) {
        return false; // User doesn't own this cart
    }

    // Update cart status to 'completed'
    $sql_update_cart = "UPDATE carts SET status = 'completed', completed_at = NOW() WHERE id = ?";
    $stmt_update_cart = $conn->prepare($sql_update_cart);
    $stmt_update_cart->bind_param("i", $cart_id);
    $stmt_update_cart->execute();

    // Get products from the cart
    $sql_get_products = "SELECT * FROM cart_items WHERE cart_id = ?";
    $stmt_get_products = $conn->prepare($sql_get_products);
    $stmt_get_products->bind_param("i", $cart_id);
    $stmt_get_products->execute();
    $result_products = $stmt_get_products->get_result();

    if ($result_products->num_rows > 0) {
        while ($product_data = $result_products->fetch_assoc()) {
            // Perform order processing here.  This is where you'd
            // integrate with payment gateways, update inventory, etc.

            // Example: Log the order details
            echo "Order details: Product ID = " . $product_data['product_id'] . ", Quantity = " . $product_data['quantity'] . "<br>";

            // You would likely want to add this to a log table.
        }
    }

    return true; // Purchase successful
}

// --------------------  Handle the Purchase Request  --------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the cart ID from the form
    $cart_id = $_POST["cart_id"];

    // Validate cart_id (Important for security - prevent SQL injection)
    if (!is_numeric($cart_id)) {
        $error = "Invalid cart ID.";
    } else {
        // Call the handlePurchase function
        if (handlePurchase($cart_id, $_SESSION['user_id'])) {
            $message = "Purchase successful! Your cart has been completed.";
        } else {
            $message = "Purchase failed.";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>

<h1>Purchase</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;">Error: <?php echo $error; ?></p>
<?php } ?>

<?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
<?php } ?>

<h2>Cart ID: <?php echo $cart_id; ?></h2>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="hidden" name="cart_id" value="<?php echo $cart_id; ?>">
    <input type="submit" value="Complete Purchase">
</form>

</body>
</html>


<?php
session_start(); // Start the session (required for storing the cart)

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $_SESSION['cart'];

  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart - increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart - add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
  global $_SESSION['cart'];

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to calculate the total cost of the cart
function calculate_total() {
  global $_SESSION['cart'];
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total = $total + ($item['price'] * $item['quantity']);
  }
  return $total;
}

// --- Handle Purchase Request ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['submit_order'])) {
    // 1. Validate the data (In a real application, do thorough validation!)
    //    Example: Check if product IDs are valid, quantity is greater than 0, etc.

    // 2. Process the order
    $cart = $_SESSION['cart'];

    // Output Order Details (for demonstration)
    echo "<h2>Order Summary:</h2>";
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
      echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";

    $total = calculate_total();
    echo "<p>Total: $" . $total . "</p>";

    // In a real application, you would:
    // - Send an email confirmation to the customer
    // - Update inventory
    // - Record the order in a database
    echo "<p>Order placed successfully! (Simulated)</p>";

    // Clear the cart after successful order
    $_SESSION['cart'] = array();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Purchase Functionality</title>
</head>
<body>

  <h1>Online Store</h1>

  <div id="product-list">
    <h2>Available Products:</h2>
    <ul>
      <li>
        Product 1 <button onclick="addToCart('product1', 'Product 1', 10.00, 1)">Add to Cart</button>
      </li>
      <li>
        Product 2 <button onclick="addToCart('product2', 'Product 2', 20.00, 1)">Add to Cart</button>
      </li>
      <li>
        Product 3 <button onclick="addToCart('product3', 'Product 3', 15.00, 1)">Add to Cart</button>
      </li>
    </ul>
  </div>

  <form method="post" action="purchase.php">
    <input type="hidden" name="product_id" value="product1"> <!-- Example: Default product -->
    <input type="submit" name="submit_order" value="Place Order">
  </form>

</body>
</html>


<?php

// --- Database Configuration ---
$dbHost = "localhost";
$dbName = "ecommerce";
$dbUser = "your_db_user";
$dbPass = "your_db_password";

// --- Check if the form has been submitted ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate Form Input (Basic Validation - Enhance for Production)
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = $_POST["quantity"];
  $product_id = $_POST["product_id"]; // Assuming you have a product ID

  // Check if inputs are valid (adjust validation as needed)
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "All fields are required.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } elseif (is_numeric($quantity) == false || $quantity <= 0) {
    $error = "Quantity must be a number greater than 0.";
  } else {
    // --- Process the Purchase ---
    // 1. Add Order to the Database
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES ('" . $conn->real_escape_string($name) . "', '" . $conn->real_escape_string($email) . "', '" . $conn->real_escape_string($quantity) . "', '" . $conn->real_escape_string($product_id) . "')";

    if ($conn->query($sql) === TRUE) {
      $success = "Order placed successfully! Order ID: " . $conn->insert_id;
    } else {
      $error = "Error placing order: " . $conn->error;
    }

    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" value="1"><br><br>


    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Configuration (Adjust these to your needs)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

$cart = []; // Initialize an empty cart

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    global $cart;

    if (array_key_exists($product_id, $products)) {
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['quantity' => $quantity, 'price' => $products[$product_id]['price']];
        }
    } else {
        echo "Product ID $product_id not found.";
    }
}

// Function to display the cart
function displayCart()
{
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        $product_name = $products[$product_id]['name'];
        $product_price = $products[$product_id]['price'];
        $quantity = $item['quantity'];
        $total_price = $product_price * $quantity;

        echo "<li>" . $product_name . " - $" . $product_price . " x " . $quantity . " = $" . $total_price . "</li>";
    }
    echo "</ul>";

    // Calculate total cart value
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }

    echo "<p><strong>Total: $" . $total . "</strong></p>";
}

// Function to calculate the total
function calculateTotal() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $items[$item['id']]['price'] * $item['quantity'];
    }
    return $total;
}

// Handle form submission (e.g., from a web form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Example:  Assume a form with a product ID and quantity
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    if (is_numeric($product_id) && is_numeric($quantity)) {
        addToCart($product_id, $quantity);
    } else {
        echo "<p>Invalid input. Please enter a number for product ID and quantity.</p>";
    }
}


// Example Usage (Display the cart)
displayCart();

?>

<!--  Example HTML Form (Place this in your HTML file) -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>

    <button type="submit">Add to Cart</button>
</form>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "root";
$db_pass = "";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add item to cart
function addToCart($product_id, $quantity) {
  $conn = connectToDatabase();

  // Check if the product exists
  $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    $product_name = $row["name"];
    $product_price = $row["price"];

    // Check if the product is already in the cart
    $cart_key = "cart_" . session_id();

    if (isset($_SESSION[$cart_key][$product_id])) {
      $_SESSION[$cart_key][$product_id]["quantity"] += $quantity;
    } else {
      $_SESSION[$cart_key][$product_id] = [
        "name" => $product_name,
        "price" => $product_price,
        "quantity" => $quantity,
      ];
    }
  } else {
    // Product not found
    echo "Product with ID " . $product_id . " not found.";
  }

  $stmt->close();
}

// Function to get cart contents
function getCartContents() {
  $cart_key = "cart_" . session_id();

  if (isset($_SESSION[$cart_key])) {
    return $_SESSION[$cart_key];
  } else {
    return []; // Return an empty array if the cart is empty
  }
}

// Function to remove item from cart
function removeItemFromCart($product_id) {
    $cart_key = "cart_" . session_id();

    if (isset($_SESSION[$cart_key][$product_id])) {
        unset($_SESSION[$cart_key][$product_id]);
    }
}


// ---  Handlers for adding to cart and handling the cart  ---

// Check for POST requests to add to cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["add_to_cart"])) {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  addToCart($product_id, $quantity);
}

// Check for POST requests to remove item from cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["remove_item"])) {
    $product_id = $_POST["product_id"];
    removeItemFromCart($product_id);
}

// Display the cart contents
$cart_contents = getCartContents();

$total_price = 0;
if (!empty($cart_contents)) {
  foreach ($cart_contents as $item) {
    $total_price += $item["price"] * $item["quantity"];
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    body { font-family: sans-serif; }
    .cart-item { margin-bottom: 10px; }
    .cart-total { font-weight: bold; }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (!empty($cart_contents)) { ?>
    <table id="cartTable">
      <thead>
        <tr>
          <th>Product</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Subtotal</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_contents as $item) { ?>
          <tr class="cart-item">
            <td><?php echo $item["name"]; ?></td>
            <td>$<?php echo number_format($item["price"], 2); ?></td>
            <td><?php echo $item["quantity"]; ?></td>
            <td>$<?php echo number_format($item["price"] * $item["quantity"], 2); ?></td>
            <td>
              <a href="?action=remove&product_id=<?php echo $item["id"]; ?>">Remove</a>
            </td>
          </tr>
        <?php } ?>
      </tbody>
    </table>
    <div class="cart-total">Total: $<?php echo number_format($total_price, 2); ?></div>
  <?php } else { ?>
    <p>Your cart is empty.</p>
  <?php } ?>

  <h2>Add to Cart</h2>
  <?php if (!empty($cart_contents)) { ?>
    <form method="post" action="">
      <?php
      $products = [];
      foreach($cart_contents as $item) {
        $products[$item['id']] = $item;
      }

      foreach ($products as $product_id => $product_data) {
          echo "<label for=\"product_" . $product_id . "\">" . $product_data["name"] . ":</label>";
          echo "<input type=\"number\" id=\"product_" . $product_id . "\" name=\"quantity\" min=\"1\" value=\"" . $product_data["quantity"] . "\"><br>";
          }

        ?>

      <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
      <input type="submit" value="Update Cart">
    </form>
  <?php } ?>
</body>
</html>


<?php

// Define the cart file
$cartFile = 'cart.txt';

// Initialize the cart as an empty array if the file doesn't exist
$cart = file_exists($cartFile) ?  file($cartFile, FILE_IGNORE_NEW_LINES) : [];

// Function to add an item to the cart
function addToCart($cart, $item, $quantity = 1) {
    if (isset($cart[$item]) ) {
        $cart[$item] += $quantity;
    } else {
        $cart[$item] = $quantity;
    }
    file_put_contents($cartFile, json_encode($cart)); // Save the updated cart
}


// Function to remove an item from the cart
function removeFromCart($cart, $item) {
    unset($cart[$item]);
    file_put_contents($cartFile, json_encode($cart));
}

// Function to update the quantity of an item in the cart
function updateQuantity($cart, $item, $quantity) {
    $cart[$item] = $quantity;
    file_put_contents($cartFile, json_encode($cart));
}


// Get the requested action (add, remove, update, view)
$action = $_GET['action'];

// Handle actions
switch ($action) {
    case 'add':
        $item = $_POST['item'];
        $quantity = $_POST['quantity'] ?? 1; // Default quantity is 1
        addToCart($cart, $item, $quantity);
        break;

    case 'remove':
        $item = $_POST['item'];
        removeFromCart($cart, $item);
        break;

    case 'update':
        $item = $_POST['item'];
        $quantity = $_POST['quantity'];
        updateQuantity($cart, $item, $quantity);
        break;

    case 'view':
        // Display the cart contents
        echo "<h2>Your Shopping Cart</h2>";
        if (empty($cart)) {
            echo "<p>Your cart is empty.</p>";
        } else {
            echo "<ul>";
            foreach ($cart as $item => $quantity) {
                echo "<li>$item - Quantity: $quantity<br>";
                echo "<form method='post' action=''>";
                echo "<input type='hidden' name='item' value='$item'>";
                echo "<input type='number' name='quantity' value='$quantity' min='1' style='width:50px;'>";
                echo "<button type='submit' name='action' value='update'>Update</button> | <a href='?action=remove&item=$item'>Remove</a>";
                echo "</form>";
                echo "</li>";
            }
            echo "</ul>";
        }
        break;

    default:
        // Handle unknown actions (e.g., display an error)
        echo "<p>Invalid action.</p>";
}
?>


<?php

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the form data
    $item = $_POST["item"];
    $quantity = $_POST["quantity"];

    // Validate the input (very basic example)
    if (empty($item) || empty($quantity) || !is_numeric($quantity) || $quantity <= 0) {
        $error = "Invalid input. Please enter a valid item name and quantity.";
    } else {
        // Calculate the total price (example: $10 per item)
        $total = $quantity * 10;

        // Display the order details
        echo "<h2>Order Confirmation</h2>";
        echo "<p>Item: " . htmlspecialchars($item) . "</p>";  //Use htmlspecialchars to prevent XSS
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Total Price: $" . $total . "</p>";

        // You would typically save this order information to a database here
    }
} else {
    // If the form wasn't submitted, redirect to the form
    header("Location: purchase_form.php");
    exit();
}
?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// --- Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli|false Connection object or false on failure.
 */
function connect_to_db() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

/**
 * Adds a product to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return bool True on success, false on failure.
 */
function add_to_cart(int $product_id, int $quantity) {
    $conn = connect_to_db();

    if (!$conn) {
        return false;
    }

    // Check if the product exists (basic check)
    $result = $conn->query("SELECT id, name, price FROM products WHERE id = $product_id");
    if (!$result || $result->num_rows == 0) {
        $conn->close();
        return false; // Product doesn't exist
    }

    $product = $result->fetch_assoc();

    // Construct the query
    $sql = "INSERT INTO cart (product_id, quantity, total_price) VALUES ($product_id, $quantity, " . $product['price'] * $quantity . ")";

    if ($conn->query($sql) === TRUE) {
        $conn->close();
        return true;
    } else {
        $conn->close();
        return false;
    }
}


/**
 * Retrieves the contents of the shopping cart.
 *
 * @return array An associative array representing the cart contents (product_id => quantity).
 */
function get_cart_contents() {
    $conn = connect_to_db();

    if (!$conn) {
        return []; // Return empty array if connection fails.
    }

    $cart_contents = [];
    $result = $conn->query("SELECT product_id, quantity FROM cart");

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $cart_contents[$row['product_id']] = $row['quantity'];
        }
    }

    $conn->close();
    return $cart_contents;
}


/**
 * Calculates the total cart value
 *
 * @return float The total cart value
 */
function calculate_cart_total() {
    $conn = connect_to_db();

    if (!$conn) {
        return 0;
    }

    $total = 0;
    $result = $conn->query("SELECT product_id, quantity, price FROM cart");

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $total = $total + ($row['price'] * $row['quantity']);
        }
    }

    $conn->close();
    return $total;
}


/**
 * Removes a product from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True on success, false on failure.
 */
function remove_from_cart(int $product_id) {
    $conn = connect_to_db();

    if (!$conn) {
        return false;
    }

    // First, delete all existing quantities of the product
    $conn->query("DELETE FROM cart WHERE product_id = $product_id");

    if (!$conn->affected_rows > 0) {
        $conn->close();
        return false;
    }

    $conn->close();
    return true;
}



/**
 * Example usage (demonstrates the purchase functionality)
 */

// --- Database Setup (Simplified for demonstration) ---
// You would typically create these tables using SQL.
// Example SQL (not executed here, just for reference):
// CREATE TABLE products (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   name VARCHAR(255) NOT NULL,
//   price DECIMAL(10, 2) NOT NULL
// );
//
// CREATE TABLE cart (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   product_id INT NOT NULL,
//   quantity INT NOT NULL,
//   total_price DECIMAL(10, 2) NOT NULL
// );


// Example Products (replace with your actual product data)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Hat', 'price' => 15.00]
];

// --- Purchase Flow ---
if (isset($_POST['add_to_cart']) && $_POST['product_id'] > 0) {
    $product_id = intval($_POST['product_id']);
    $quantity = intval($_POST['quantity']); // Get quantity from the form

    if (add_to_cart($product_id, $quantity)) {
        echo "<p>Product added to cart!</p>";
    } else {
        echo "<p>Error adding product to cart.</p>";
    }
}

if (isset($_POST['remove_from_cart']) && $_POST['product_id'] > 0) {
    $product_id = intval($_POST['product_id']);
    if (remove_from_cart($product_id)) {
        echo "<p>Product removed from cart!</p>";
    } else {
        echo "<p>Error removing product from cart.</p>";
    }
}


// Display cart contents:
$cart_contents = get_cart_contents();

echo "<h2>Shopping Cart</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $quantity) {
        $product_name = $products[$product_id]['name'];
        echo "<li>Product: " . $product_name . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Cart Value: $" . calculate_cart_total() . "</p>";
}
?>


<?php

// Database connection details (Replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize and validate input
  $product_name = trim($_POST["product_name"]);
  $quantity = intval($_POST["quantity"]);
  $price = floatval($_POST["price"]);

  // Basic validation
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error_message = "Please fill in all fields and ensure quantities and prices are positive.";
  } else {
    // Add the item to the cart (This is a simplified example - you'll likely want a database)
    $cart_item = array(
      "product_name" => $product_name,
      "quantity" => $quantity,
      "price" => $price
    );

    // *** IMPORTANT: In a real application, you would store this data in a database ***
    // For demonstration, we'll store it in an array
    if (!isset($_SESSION['cart'])) {
      $_SESSION['cart'] = array();
    }
    $_SESSION['cart'][] = $cart_item;

    // Display a success message
    $success_message = "Item added to cart!";
  }
}

// Start the session
session_start();

// Display the cart contents (Simplified)
if (isset($_SESSION['cart'])) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p><a href='checkout.php'>Checkout</a></p>"; // Link to checkout page
} else {
  echo "<p>Your cart is empty.</p>";
}

?>

<!-- Example HTML Form (Place this in your HTML file) -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name" required><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" required><br><br>

  <label for="price">Price:</label>
  <input type="number" step="0.01" id="price" name="price" required><br><br>

  <button type="submit">Add to Cart</button>
</form>


<?php

// Database Configuration (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPassword = "your_password";
$dbName = "your_database_name";

//  Ensure the database connection is established
$conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Crucial for security)
    $productName = $_POST["product_name"];
    $quantity = $_POST["quantity"];
    $price = $_POST["price"];  // Get the price
    $customerName = $_POST["customer_name"];

    // Input Validation -  Add more validation as needed
    if (empty($productName) || empty($quantity) || !is_numeric($quantity) || empty($price) || !is_numeric($price) || empty($customerName)) {
        $error = "Please fill in all fields correctly.";
    } elseif (intval($quantity) <= 0 || intval($price) <= 0) {
        $error = "Quantity and Price must be greater than zero.";
    }
    else {
        // Prepare the SQL query (Use prepared statements for security)
        $sql = "INSERT INTO orders (product_name, quantity, price, customer_name) VALUES (?, ?, ?, ?)";

        // Use prepared statement
        $stmt = $conn->prepare($sql);

        if ($stmt) {
            // Bind parameters
            $stmt->bind_param("ssid", $productName, $quantity, $price);

            // Execute the query
            if ($stmt->execute()) {
                $success = "Order placed successfully!";
            } else {
                $error = "Query execution failed: " . $stmt->error;
            }
        } else {
            $error = "Error preparing statement.";
        }
    }
}

// Display the form
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Order</title>
</head>
<body>

<h1>Purchase Order</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per Unit:</label>
    <input type="number" id="price" name="price" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database configuration (replace with your actual database details)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle purchase
function handlePurchase($orderData) {
    $conn = connectToDatabase();

    // Prepare SQL query
    $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) 
            VALUES ('" . $conn->real_escape_string($orderData['product_id']) . "', 
                    '" . $conn->real_escape_string($orderData['quantity']) . "', 
                    '" . $conn->real_escape_string($orderData['customer_name']) . "', 
                    '" . $conn->real_escape_string($orderData['customer_email']) . "', 
                    NOW())";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        // Success
        return true;
    } else {
        // Error
        echo "Error: " . $conn->error;
        return false;
    }
}

//  Example Data (simulated) -  Replace with actual data from a form
$orderData = [
    'product_id' => '123',  // Example product ID
    'quantity' => '2',
    'customer_name' => 'John Doe',
    'customer_email' => 'john.doe@example.com'
];



// Handle the purchase request (e.g., from a form submission)
if (isset($_POST['submit'])) {
    // Validate the input (crucial for security - see below)
    if (empty($orderData['product_id']) || empty($orderData['quantity']) || empty($orderData['customer_name']) || empty($orderData['customer_email'])) {
        echo "<p style='color:red;'>Please fill in all fields.</p>";
    } else {
        // Process the order (call the handlePurchase function)
        if (handlePurchase($orderData)) {
            echo "<p style='color:green;'>Order placed successfully!</p>";
        }
    }
}

// Example of accessing product details (replace with your product data)
// This demonstrates how to fetch product information based on product_id
$product = [
    'product_id' => '123',
    'name' => 'Awesome Widget',
    'price' => 19.99
];
echo "<p>Product: " . $product['name'] . " - Price: $" . $product['price'] . "</p>";
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase an Item</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id" value="<?php echo isset($orderData['product_id']) ? htmlspecialchars($orderData['product_id']) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo isset($orderData['quantity']) ? htmlspecialchars($orderData['quantity']) : ''; ?>">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" value="<?php echo isset($orderData['customer_name']) ? htmlspecialchars($orderData['customer_name']) : ''; ?>">
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" value="<?php echo isset($orderData['customer_email']) ? htmlspecialchars($orderData['customer_email']) : ''; ?>">
    <br><br>

    <button type="submit" name="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// $conn = new mysqli("localhost", "username", "password", "database_name");

// Check connection
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }

//  Example using a dummy product array for simplicity (replace with database query)
$products = [
    ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    ['id' => 3, 'name' => 'Hat', 'price' => 15]
];


// Function to handle the purchase process
function handlePurchase($cart, $conn) {
  $total = 0;
  $order_details = [];

  foreach ($cart as $item_id => $quantity) {
    // Find the product details based on the item_id
    $product = null;
    foreach ($products as $p) {
      if ($p['id'] == $item_id) {
        $product = $p;
        break;
      }
    }

    if ($product) {
      $price = $product['price'] * $quantity;
      $total += $price;
      $order_details[] = [
        'product_id' => $item_id,
        'product_name' => $product['name'],
        'quantity' => $quantity,
        'price' => $price
      ];
    } else {
      // Handle the case where the product ID is not found (e.g., display an error)
      echo "Product with ID " . $item_id . " not found.";
      return false;
    }
  }

  // Insert order details into a database table (replace with your database insertion)
  if ($conn) {
    $sql = "INSERT INTO orders (total_amount, order_details) VALUES (?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sd", $total, json_encode($order_details));  // json_encode for compatibility
    $stmt->execute();
    echo "Order placed successfully! Order ID: " . $conn->insert_id;
  } else {
      echo "Database connection failed.  Could not place order.";
  }
  return true;
}


// Example usage:
$cart = [
    1 => 2, // 2 T-Shirts
    2 => 1 // 1 Jeans
];


if (handlePurchase($cart, $conn)) {
  // Display success message
} else {
  // Display error message
}

//  ---  Database Table Setup (for demonstration) ---
//  Create the following table (adjust data types as needed)
/*
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    total_amount DECIMAL(10,2) NOT NULL,
    order_details TEXT NOT NULL
);
*/

?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function processPurchase($orderData) {
    $conn = connectToDatabase();

    // Prepare the SQL query
    $sql = "INSERT INTO orders (product_id, quantity, user_id, order_date) 
            VALUES ('" . $conn->real_escape_string($orderData['product_id']) . "', 
                   '" . $conn->real_escape_string($orderData['quantity']) . "', 
                   '" . $conn->real_escape_string($orderData['user_id']) . "', 
                   NOW())";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true; // Purchase successful
    } else {
        return false; // Purchase failed
    }
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Basic - add more robust validation as needed)
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    $user_id = $_POST['user_id'];

    // Check if product_id and quantity are numeric
    if (is_numeric($product_id) && is_numeric($quantity)) {
        // Process the purchase
        $purchaseSuccessful = processPurchase(['product_id' => $product_id, 'quantity' => $quantity, 'user_id' => $user_id]);

        if ($purchaseSuccessful) {
            echo "<p>Order placed successfully! Order ID: " . $_POST['product_id'] . "</p>";
        } else {
            echo "<p>Order failed to place. Please try again.</p>";
        }
    } else {
        echo "<p>Invalid product ID or quantity. Please enter numbers only.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="user_id">User ID:</label>
    <input type="number" id="user_id" name="user_id" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual database details)
$dbHost = "localhost";
$dbName = "ecommerce";
$dbUser = "root";
$dbPass = "";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a new order to the database
function addOrder($userId, $productId, $quantity, $orderDate) {
    $conn = connectToDatabase();

    $sql = "INSERT INTO orders (userId, productId, quantity, orderDate) 
            VALUES ('$userId', '$productId', '$quantity', '$orderDate')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to update the product quantity in the database
function updateProductQuantity($productId, $quantity) {
    $conn = connectToDatabase();

    $sql = "UPDATE products 
            SET quantity = quantity - '$quantity' 
            WHERE id = '$productId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Handle Purchase Request (Example -  Simplified)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $userId = $_POST["userId"];
    $productId = $_POST["productId"];
    $quantity = $_POST["quantity"];

    // Validate Input (Important for security)
    if (empty($userId) || empty($productId) || empty($quantity)) {
        echo "Error: All fields are required.";
    } elseif (!is_numeric($quantity) || $quantity <= 0) {
        echo "Error: Quantity must be a positive number.";
    } else {
        // Add the order to the database
        if (addOrder($userId, $productId, $quantity, date("Y-m-d H:i:s"))) {
            // Update product quantity in the database
            if (updateProductQuantity($productId, $quantity)) {
                echo "Order placed successfully! Order ID: " . $productId; // Replace with actual order ID retrieval
            } else {
                echo "Error: Failed to update product quantity.";
            }
        } else {
            echo "Error: Failed to add order to database.";
        }
    }
}

// Example HTML Form (for demonstration purposes)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="userId">User ID:</label>
    <input type="text" id="userId" name="userId" required><br><br>

    <label for="productId">Product ID:</label>
    <input type="text" id="productId" name="productId" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

//... (Database connection code as before)

function addOrder($userId, $productId, $quantity, $orderDate) {
    $conn = connectToDatabase();

    // Use prepared statement
    $stmt = $conn->prepare("INSERT INTO orders (userId, productId, quantity, orderDate) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("sii", $userId, $productId, $orderDate);  // 's' indicates string type

    if ($stmt->query() === TRUE) {
        $orderId = $conn->insert_id;  // Get the ID of the newly inserted row
        return $orderId;
    } else {
        return false;
    }

    $stmt->close(); // Close the statement
}

// ... (rest of the code)


<?php

// Database configuration (Replace with your actual database details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Important for security - add more validation as needed)
    $product_name = $_POST["product_name"];
    $quantity = $_POST["quantity"];
    $price = $_POST["price"];

    // Validate input (Basic example - improve for production)
    if (empty($product_name) || empty($quantity) || empty($price)) {
        $error = "Please fill in all fields.";
    } elseif (!is_numeric($quantity) || $quantity <= 0) {
        $error = "Quantity must be a positive number.";
    } elseif (!is_numeric($price) || $price <= 0) {
        $error = "Price must be a positive number.";
    }

    // If no errors, proceed with the purchase
    if (empty($error)) {
        // Connect to the database
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        // Check the connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO purchases (product_name, quantity, price, purchase_date)
                VALUES ('$product_name', '$quantity', '$price', NOW())";

        // Execute the SQL statement
        if ($conn->query($sql) === TRUE) {
            echo "Purchase successful!  Order ID: " . $conn->insert_id; // Display the new order ID
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }

        // Close the connection
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" required><br><br>

    <input type="submit" value="Place Order">
</form>

<?php
if (isset($error)) {
    echo "<p style='color: red;'>Error: " . $error . "</p>";
}
?>

</body>
</html>


<?php

// Database configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
  $conn = connectToDatabase();

  // Check if the cart exists
  $check_cart_query = "SELECT * FROM carts WHERE id = '$cart_id'";
  $cart_result = $conn->query($check_cart_query);

  if (!$cart_result->num_rows) {
    echo "Error: Cart not found.";
    return false;
  }

  // Get cart details
  $cart_data = $cart_result->fetch_assoc();

  // Update the order table
  $order_total = $cart_data['total_price'];
  $order_date = date("Y-m-d H:i:s");

  $insert_order_query = "INSERT INTO orders (cart_id, customer_name, customer_email, order_total, order_date, payment_method)
                         VALUES ('$cart_id', '$customer_name', '$customer_email', '$order_total', '$order_date', '$payment_method')";

  if (!$conn->query($insert_order_query)) {
    echo "Error creating order: " . $conn->error;
    return false;
  }

  // Clear the cart after successful order
  $clear_cart_query = "DELETE FROM carts WHERE id = '$cart_id'";
  if (!$conn->query($clear_cart_query)) {
    echo "Error clearing cart: " . $conn->error;
    return false;
  }

  echo "Order placed successfully! Order ID: " . $conn->insert_id;
  return true;
}


// --- Example Usage (Simulated HTML form and handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate inputs (VERY IMPORTANT!)
  $cart_id = $_POST["cart_id"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];
  $payment_method = $_POST["payment_method"];

  // Call the handlePurchase function
  if (handlePurchase($cart_id, $customer_name, $customer_email, $payment_method)) {
    // Order placed successfully, redirect or display a success message
    // echo "<p>Order placed successfully!</p>";
    // header("Location: confirmation.php"); // Redirect to a confirmation page
  } else {
    // Handle errors from handlePurchase
    echo "<p style='color:red;'>Error placing order. Please try again later.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" value="<?php echo isset($_GET['cart_id']) ? htmlspecialchars($_GET['cart_id']) : ''; ?>">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required>
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required>
    <br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

//  Helper function to sanitize input (prevent SQL injection)
function sanitizeInput($data) {
    global $conn; // Access the database connection
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}



// Start the shopping cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}


// Function to add an item to the cart
function addToCart($product_id, $name, $price, $quantity) {
    global $conn, $_SESSION['cart'];

    $name = sanitizeInput($name);
    $price = sanitizeInput($price);
    $quantity = sanitizeInput($quantity);

    if (!is_numeric($quantity) || $quantity <= 0) {
        return false; // Invalid quantity
    }

    $item = array(
        'id' => $product_id,
        'name' => $name,
        'price' => $price,
        'quantity' => $quantity
    );

    $_SESSION['cart'][] = $item;
    return true;
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    global $conn, $_SESSION['cart'];

    $new_quantity = sanitizeInput($new_quantity);

    if (!is_numeric($new_quantity) || $new_quantity <= 0) {
        return false; // Invalid quantity
    }


    for ($i = 0; $i < count($_SESSION['cart']); $i++) {
        if ($_SESSION['cart'][$i]['id'] == $product_id) {
            $_SESSION['cart'][$i]['quantity'] = $new_quantity;
            return true;
        }
    }
    return false;
}



// Function to remove an item from the cart
function removeFromCart($product_id) {
    global $conn, $_SESSION['cart'];

    $product_id = sanitizeInput($product_id);

    $keys_to_remove = array();

    foreach($_SESSION['cart'] as $key => $item) {
        if ($item['id'] == $product_id) {
            $keys_to_remove[] = $key;
        }
    }

    foreach ($keys_to_remove as $key) {
        unset($_SESSION['cart'][$key]);
    }

    return true;
}



// Function to calculate the total cart value
function calculateTotal() {
    global $conn, $_SESSION['cart'];
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// Handling different actions

// Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $name = $_POST['name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    if (addToCart($product_id, $name, $price, $quantity)) {
        echo "<p>Item added to cart.</p>";
    } else {
        echo "<p>Failed to add item to cart.</p>";
    }
}


// Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    if (updateQuantity($product_id, $new_quantity)) {
        echo "<p>Quantity updated in cart.</p>";
    } else {
        echo "<p>Failed to update quantity.</p>";
    }
}

// Remove Item
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
    echo "<p>Item removed from cart.</p>";
}



// Display Cart
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . number_format($item['price'], 2) . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";

        // Optional: Add a button to update quantity or remove item
        echo "<form method='post'>";
        echo "<label for='quantity_" . $item['id'] . "'>Quantity:</label>";
        echo "<input type='number' id='quantity_" . $item['id'] . "' value='" . $item['quantity'] . "' min='1' max='99' name='quantity_" . $item['id'] . "'>";
        echo "<input type='hidden' name='product_id' value='" . $item['id'] . "'>";
        echo "<input type='submit' value='Update'>";
        echo "</form>";


        echo "<br>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . number_format(calculateTotal(), 2) . "</strong></p>";
}


?>


<?php

// Database connection (Replace with your actual database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
    $user_id = $_SESSION['user_id']; // Assuming you have user session

    // Check if the product is already in the cart
    $sql = "SELECT * FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // Product exists in cart, update quantity
        $sql = "UPDATE cart SET quantity = quantity + '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
    } else {
        // Product not in cart, add it
        $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
    }

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to get the cart contents
function getCartContents($conn) {
    $user_id = $_SESSION['user_id'];

    $sql = "SELECT p.product_name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = '$user_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $cart_data = array();
        while($row = $result->fetch_assoc()) {
            $cart_data[] = $row;
        }
        return $cart_data;
    } else {
        return [];
    }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
    $user_id = $_SESSION['user_id'];
    $sql = "DELETE FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Function to update the quantity of a product in the cart
function updateQuantity($conn, $product_id, $quantity) {
    $user_id = $_SESSION['user_id'];
    $sql = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Example Usage (Illustrative - needs to be integrated into your website)

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (addToCart($conn, $product_id, $quantity)) {
        echo "Product added to cart!";
    } else {
        echo "Error adding product to cart.";
    }
}

// 2. Get Cart Contents (e.g., for displaying the cart)
$cart_contents = getCartContents($conn);
// Now $cart_contents contains an array of product data from the cart

// 3. Remove Product from Cart (Example)
if (isset($_GET['remove_product'])) {
    $product_id = $_GET['remove_product'];
    if (removeFromCart($conn, $product_id)) {
        echo "Product removed from cart!";
    } else {
        echo "Error removing product from cart.";
    }
}

// 4. Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (updateQuantity($conn, $product_id, $quantity)) {
        echo "Quantity updated in cart!";
    } else {
        echo "Error updating quantity in cart.";
    }
}



// End of Example Usage

// Important Notes and Considerations:

// 1.  Database Design:
//     - `products` table: `product_id` (primary key), `product_name`, `price`, ...
//     - `cart` table: `cart_id` (primary key), `user_id` (foreign key referencing `users` table), `product_id` (foreign key referencing `products` table), `quantity`.
//     -  `users` table: `user_id` (primary key).

// 2. Error Handling: This example has basic error messages.  Robust error handling is *crucial* for production environments (e.g., logging errors, displaying user-friendly messages).

// 3. Security:
//    - **Input Validation and Sanitization:** *Absolutely essential*.  Never directly use user input in SQL queries. Use prepared statements or appropriate escaping functions to prevent SQL injection attacks.  Validate the `quantity` input to ensure it's a valid number.
//    - **CSRF Protection:** Implement CSRF (Cross-Site Request Forgery) protection to prevent malicious websites from triggering actions on your site.

// 4. User Session:  The code assumes you have a user session (`$_SESSION['user_id']`) to identify the user's cart.  You'll need to implement user authentication (login) and store the user ID in the session after a successful login.

// 5. Prepared Statements (Highly Recommended):  While this example uses simple string concatenation for SQL queries, *always* use prepared statements with placeholders to prevent SQL injection.

// 6.  Testing: Thoroughly test the purchase functionality under various scenarios (e.g., adding multiple items, updating quantities, removing items).

// 7.  Scalability: For larger applications, consider using a database connection pooling mechanism to improve performance.

// Example of using Prepared Statements (to illustrate the concept -  replace your database credentials and table names):

//  $stmt = $conn->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)");
//  $stmt->bind_param("sii", $user_id, $product_id, $quantity);
//  $stmt->execute();
//  $stmt->close();


<?php

// Database connection details (replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// --- Database Functions ---

// Connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Add a product to the cart
function addToCart($product_id, $quantity, $user_id = NULL) {
    $conn = connectDB();
    $sql = "INSERT INTO cart (product_id, quantity, user_id) VALUES ('$product_id', '$quantity', '$user_id')";

    if ($conn->query($sql) === TRUE) {
        return TRUE;
    } else {
        return FALSE;
    }
}


// Get all items in the cart
function getCartItems($user_id = NULL) {
    $conn = connectDB();
    $sql = "SELECT * FROM cart WHERE user_id = '$user_id'"; //Use user_id if user is logged in

    if($user_id) {
      $sql = "SELECT * FROM cart WHERE user_id = '$user_id'";
    }

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $items = array();
        while ($row = $result->fetch_assoc()) {
            $items[] = $row;
        }
        return $items;
    } else {
        return array(); // Return an empty array if the cart is empty
    }
}

// Remove a product from the cart
function removeFromCart($product_id, $user_id = NULL) {
    $conn = connectDB();
    $sql = "DELETE FROM cart WHERE product_id = '$product_id'"; // Use user_id if user is logged in
    if ($user_id) {
      $sql = "DELETE FROM cart WHERE product_id = '$product_id'";
    }

    if ($conn->query($sql) === TRUE) {
        return TRUE;
    } else {
        return FALSE;
    }
}

// Update the quantity of a product in the cart
function updateQuantity($product_id, $new_quantity, $user_id = NULL) {
    $conn = connectDB();
    $sql = "UPDATE cart SET quantity = '$new_quantity' WHERE product_id = '$product_id'"; // Use user_id if user is logged in
    if ($user_id) {
      $sql = "UPDATE cart SET quantity = '$new_quantity' WHERE product_id = '$product_id'";
    }

    if ($conn->query($sql) === TRUE) {
        return TRUE;
    } else {
        return FALSE;
    }
}



// --- Purchase Functionality (Simplified) ---

function purchase() {
    // This is a simplified purchase function.  In a real application,
    // you'd handle payment processing, order confirmation emails, etc.

    $cart_items = getCartItems();

    if (empty($cart_items)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Order Summary:</h2>";
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";

    // In a real application, you would:
    // 1. Process payment (integrate with a payment gateway)
    // 2. Create an order record in the 'orders' table.
    // 3. Clear the cart (either by deleting all items or setting quantity to 0)
    // 4. Send confirmation emails to the customer.

    // Example of clearing the cart (you might want to use a more sophisticated approach)
    //  removeFromCart($product_id, $user_id);  //This clears all products in cart.
}



// --- Example Usage (for testing) ---

// You can call these functions from a web form to handle adding to cart,
// retrieving items, removing items, or processing the purchase.
//
// To test:
// 1. Create a database named 'shopping_cart'
// 2. Create tables:
//     - products (product_id, product_name, price)
//     - cart (product_id, quantity, user_id)
// 3. Insert some sample data into the tables.
// 4.  Call purchase() when the user clicks the purchase button.



//  Simulate adding a product to the cart (replace with your actual product_id)
//  addToCart(1, 2);
// purchase();

?>


<?php
// Example of adding to cart

$product_id = 1;
$quantity = 2;

if(addToCart($product_id, $quantity)){
    echo "Product added to cart successfully!";
} else {
    echo "Failed to add product to cart.";
}

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_username = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the form data (basic validation - improve this for production)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]);
    $product_id = intval($_POST["product_id"]);

    // Check if required fields are filled
    if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
        $error = "Please fill in all the fields.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } elseif ($quantity <= 0) {
        $error = "Quantity must be a positive number.";
    } else {
        // Prepare the SQL query
        $sql = "INSERT INTO orders (name, email, quantity, product_id) 
                VALUES ('$name', '$email', $quantity, $product_id)";

        // Execute the query
        $conn = new mysqli($db_host, $db_username, $db_password, $db_name);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        if ($conn->query($sql) === TRUE) {
            $success = "Order placed successfully! Order ID: " . $conn->insert_id;
        } else {
            $error = "Error: " . $sql . "<br>" . $conn->error;
        }

        // Close the connection
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h2>Purchase Functionality</h2>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
        <p style="color: green;"><?php echo $success; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" min="1" value="1"><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Database connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Establish database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate input (Add more validation as needed)
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);

    if (empty($product_name) || $quantity <= 0 || $price <= 0) {
        echo "<p style='color: red;'>Invalid input. Please fill in all fields correctly.</p>";
    } else {
        // Sanitize input (Important for security - prevent SQL injection)
        $product_name = $conn->real_escape_string($product_name);
        $quantity = $conn->real_escape_string($quantity);
        $price = $conn->real_escape_string($price);


        // Add item to the cart (This part needs to be adapted based on how you're storing cart data)
        // Example: Store in a session variable
        if(!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = [];
        }

        //Add new item to the cart
        $_SESSION['cart'][] = array(
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price
        );
        echo "<p style='color: green;'>Item added to cart!</p>";
        // Display the cart details.  This is for demonstration purposes.
        displayCart();

    }
}

// Function to display the cart contents (for demonstration)
function displayCart() {
    global $conn;
    if(isset($_SESSION['cart'])) {
        echo "<h2>Your Shopping Cart</h2>";
        echo "<ul>";
        foreach($_SESSION['cart'] as $item) {
            echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
        }
        echo "</ul>";
    }
}

//  Start the session
session_start();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Shopping Cart</title>
</head>
<body>

<h1>Add to Cart</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Add to Cart">
</form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "e_commerce_db";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate input
  $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0;
  $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;

  // Check if product_id and quantity are valid
  if ($product_id > 0 && $quantity > 0) {

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Get product details
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 1) {
      $product = $result->fetch_assoc();
      $product_name = $product["name"];
      $product_price = $product["price"];
      $total_amount = $product_price * $quantity;

      // Create the order
      $sql_insert = "INSERT INTO orders (product_id, quantity, total_amount, order_date) VALUES (?, ?, ?, NOW())";
      $stmt_insert = $conn->prepare($sql_insert);
      $stmt_insert->bind_param("iis", $product_id, $quantity, $total_amount);
      $stmt_insert->execute();

      // Display confirmation message
      echo "<div class='success'>
              <h2>Order Placed Successfully!</h2>
              <p>You ordered " . $quantity . " " . $product_name . " for $" . $total_amount . "</p>
              <p>Your order ID is: " . $conn->insert_id . "</p>
              <a href='index.php'>Continue Shopping</a>
            </div>";
      
      // Optionally, you can update inventory here:
      //  $sql_update_inventory = "UPDATE products SET stock -= ? WHERE id = ?";
      //  $stmt_update = $conn->prepare($sql_update_inventory);
      //  $stmt_update->bind_param("is", -$quantity, $product_id);
      //  $stmt_update->execute();

    } else {
      echo "<div class='error'>
                <h2>Product Not Found!</h2>
                <p>The product with ID " . $product_id . " does not exist.</p>
              </div>";
    }
    $stmt->close();
    $conn->close();
  } else {
    // Invalid input
    echo "<div class='error'>
              <h2>Invalid Input!</h2>
              <p>Please enter valid product ID and quantity.</p>
            </div>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
  <style>
    .success {
      background-color: #4CAF50;
      color: white;
      padding: 20px;
      border-radius: 5px;
      text-align: center;
      margin-top: 20px;
    }
    .error {
      background-color: #f44336;
      color: white;
      padding: 20px;
      border-radius: 5px;
      text-align: center;
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection (replace with your actual database details)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// Create connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Session handling (for adding to cart, etc.)
session_start();

// --- Product Information (Example -  Replace with your product data) ---
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'stock' => 5],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80.00, 'stock' => 3],
];

// --- Purchase Functionality ---

// 1. Add to Cart
function addToCart($productId, $quantity) {
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// 2.  Checkout (Simplified - no order processing, just calculates total)
function checkout() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $productId => $quantity) {
            $product = $products[$productId];
            $total += $product['price'] * $quantity;
        }
    }

    // Clear the cart after purchase (or handle it differently)
    $_SESSION['cart'] = [];

    return $total;
}

// --- Handling Requests (Example using GET and POST) ---

// 1. Add to Cart (GET request)
if (isset($_GET['add_to_cart']) && isset($_GET['product_id'])) {
    $productId = (int)$_GET['product_id'];  // Ensure it's an integer
    $quantity = 1; // Default quantity is 1
    if (isset($_GET['quantity'])) {
        $quantity = (int)$_GET['quantity'];
    }

    if (isset($products[$productId])) {
        if ($products[$productId]['stock'] >= $quantity) {
            addToCart($productId, $quantity);
        } else {
            echo "<p style='color:red;'>Not enough stock for this product.</p>";
        }
    } else {
        echo "<p style='color:red;'>Product not found.</p>";
    }
}


// 2. Checkout (POST request - for demonstration)
if (isset($_POST['checkout'])) {
    $total = checkout();
    echo "<p>Total: $" . number_format($total, 2) . "</p>";
}


// --- Displaying Products (Example) ---

echo "<h2>Available Products</h2>";
foreach ($products as $id => $product) {
    echo "<p><strong>" . $product['name'] . "</strong> - $" . number_format($product['price'], 2) . " (Stock: " . $product['stock'] . ")</p>";
    echo "<form method='get' action=''>"; // The 'action' attribute is crucial
    echo "<input type='hidden' name='product_id' value='" . $id . "'>";
    if (isset($_SESSION['cart'][$id])) {
        echo "<input type='number' name='quantity' value='" . $_SESSION['cart'][$id] . "' min='1' style='width:50px;'>";
    } else {
        echo "<input type='number' name='quantity' value='1' min='1' style='width:50px;'>";
    }
    echo "<input type='submit' value='Add to Cart'>";
    echo "</form>";
}

?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_username";
$db_password = "your_password";

// Session management (for user login) - Simplified for this example
session_start();

// Check if the user is logged in (optional, for security)
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php"); // Redirect to login page if not logged in
    exit;
}


// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // Or handle the error differently
    }

    //  Implement authentication/authorization here if needed, for example, check user cart
    //  If the user is not logged in, redirect them to login.php

    //Get user's ID from session
    $user_id = $_SESSION['user_id'];

    // Build the SQL query
    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";

    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Function to get the cart items for a user
function getCartItems($conn, $user_id) {
    $query = "SELECT p.product_name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = '$user_id'";
    $result = $conn->query($query);

    $cart_items = array();
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
    }
    return $cart_items;
}


// --- Handling the Purchase Request ---

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the cart data (IMPORTANT for security) - VERY BASIC EXAMPLE
    if (empty($_POST['cart_items'])) {
        echo "Error: Cart is empty.  Please add items to your cart.";
        exit;
    }

    // Get the cart items
    $cart_items = json_decode($_POST['cart_items'], true); // Decode JSON data

    if ($cart_items) {
        // Process the purchase
        $conn = connectToDatabase();

        foreach ($cart_items as $item) {
            // Add the item to the cart (this assumes the item is already in the cart)
            //  This is where you would handle adding it if it's not.

            addToCart($conn, $item['product_id'], $item['quantity']);
        }

        $conn->close();

        // Display success message
        echo "<p>Order placed successfully! Thank you for your purchase.</p>";
        //You would also update order statuses in your order table here.
    } else {
        echo "Error: Invalid cart data.";
    }
}


// --- Displaying the Cart (for demonstration) ---
$conn = connectToDatabase();
$cart_items = getCartItems($conn, $_SESSION['user_id']); // Get cart items for the logged-in user

$conn->close();

?>

<!DOCTYPE html>
<html>
<head>
    <title>E-Commerce Purchase</title>
</head>
<body>

<h1>E-Commerce Purchase</h1>

<h2>Your Cart</h2>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr>
                    <td><?php echo $item['product_name']; ?></td>
                    <td><?php echo $item['price']; ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td><?php echo $item['price'] * $item['quantity']; ?></td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

    <form method="post" action="purchase.php">
        <!--  Submit button -  Consider using a better method like AJAX -->
        <input type="submit" value="Place Order">
    </form>
<?php else: ?>
    <p>Something went wrong loading the cart.</p>
<?php endif; ?>

</body>
</html>


<?php

// Database connection details
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_user';
$db_password = 'your_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate and sanitize input
    $name = filter_input(INPUT_POST, 'name', FILTER_SANITIZE_STRING);
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
    $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);

    // Check if all fields are valid
    if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
        $error_message = "Please fill in all fields.";
    } elseif (empty($quantity)) {
        $error_message = "Quantity must be a valid number.";
    } elseif (!is_numeric($quantity)) {
        $error_message = "Quantity must be a number.";
    } elseif (!is_int($product_id)) {
        $error_message = "Invalid Product ID.";
    }

    // If no errors, proceed with the purchase
    if (empty($error_message)) {

        // Database connection
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare SQL statement
        $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES (?, ?, ?, ?)";

        // Prepare statement
        $stmt = $conn->prepare($sql);

        // Bind parameters
        $stmt->bind_param("ssii", $name, $email, $quantity, $product_id);

        // Execute statement
        if ($stmt->execute()) {
            echo "Order placed successfully! Thank you for your purchase.";
        } else {
            echo "Order placement failed: " . $stmt->error;
        }

        // Close statement and connection
        $stmt->close();
        $conn->close();
    } else {
        // Display error message
        echo "<p style='color: red;'>Error: " . $error_message . "</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart Purchase</title>
</head>
<body>

    <h1>Place Your Order</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Database Connection (Replace with your database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Product Data (Simulated for this example) ---
$products = [
    [
        'id' => 1,
        'name' => 'T-Shirt',
        'price' => 20.00,
        'stock' => 10
    ],
    [
        'id' => 2,
        'name' => 'Jeans',
        'price' => 50.00,
        'stock' => 5
    ],
    [
        'id' => 3,
        'name' => 'Sneakers',
        'price' => 80.00,
        'stock' => 3
    ]
];

// --- Shopping Cart Data (In-memory for demonstration) ---
$cart = [];

// --- Form Handling (Simulated - Replace with your form handling logic) ---

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    $product = null;
    foreach ($products as $p) {
        if ($p['id'] == $product_id) {
            $product = $p;
            break;
        }
    }

    if ($product) {
        if ($quantity > 0) {
            // Add to cart
            $cart[] = [
                'id' => $product['id'],
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $quantity
            ];

            echo "<p style='color:green;'>Added " . $quantity . " " . $product['name'] . " to your cart.</p>";
        } else {
            echo "<p style='color:red;'>Please enter a valid quantity.</p>";
        }
    } else {
        echo "<p style='color:red;'>Product not found.</p>";
    }
}


// 2. Display Cart (If the cart is not empty)
if (!empty($cart)) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $total_price = array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $cart));
    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}
else {
    echo "<p>Your cart is empty.</p>";
}



// --- Form for Adding to Cart (Simulated) ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <!-- Add to Cart Form -->
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $product) {
                echo "<option value='" . $product['id'] . "'>" . $product['id'] . " - " . $product['name'] . "</option>";
            }
            ?>
        </select>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" value="1" min="1">

        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database details)
$db_host = 'localhost';
$db_name = 'ecommerce_db';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle purchase
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1.  Get Cart Items
    $query = "SELECT product_id, quantity FROM cart WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_items = [];
    while ($row = $result->fetch_assoc()) {
        $cart_items[] = $row;
    }

    // 2.  Update Order Table
    $order_id = generateOrderID(); // Create a unique order ID
    $order_date = date('Y-m-d H:i:s');

    $query = "INSERT INTO orders (order_id, cart_id, order_date, payment_method) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ssis", $order_id, $cart_id, $order_date, $payment_method);
    if ($stmt->execute()) {
        echo "Purchase successful! Order ID: " . $order_id . "<br>";
    } else {
        echo "Purchase failed: " . $stmt->error . "<br>";
    }

    // 3.  Update Inventory (Decrement Quantity)
    foreach ($cart_items as $item) {
        $query = "UPDATE products SET quantity = quantity - ? WHERE product_id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("is", $item['quantity'], $item['product_id']);
        if ($stmt->execute()) {
            // echo "Product " . $item['product_id'] . " quantity updated successfully.<br>";
        } else {
            echo "Error updating product " . $item['product_id'] . ": " . $stmt->error . "<br>";
        }
    }

    // 4.  Clear Cart (Optional - you could also just set cart_status to 'completed')
    $query = "DELETE FROM cart WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();

    $stmt->close();
    $conn->close();
}


// Function to generate a unique order ID (Simple example - improve for production)
function generateOrderID() {
    return bin2hex(random_bytes(16)); // Random hexadecimal string
}


// ----  Example Usage (Form Handling) ----
//  This part shows how you'd typically handle a form submission
//  This is a simplified illustration. In a real application,
//  you'd likely use a framework and a proper form handling system.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart_id = $_POST["cart_id"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" value="<?php echo isset($_POST['cart_id']) ? htmlspecialchars($_POST['cart_id']) : ''; ?>">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" value="<?php echo isset($_POST['customer_name']) ? htmlspecialchars($_POST['customer_name']) : ''; ?>">
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" value="<?php echo isset($_POST['customer_email']) ? htmlspecialchars($_POST['customer_email']) : ''; ?>">
    <br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
        <option value="other">Other</option>
    </select>
    <br><br>

    <button type="submit">Purchase Now</button>
</form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connect_db() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function add_to_cart($product_id, $quantity) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    $product_id = intval($product_id); // Ensure product ID is an integer
    $quantity = intval($quantity);      // Ensure quantity is an integer

    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // Product doesn't exist
    }

    $product = $result->fetch_assoc();

    // Check if the item is already in the cart
    $cart_item_id = isset($_SESSION['cart']) ? array_keys($_SESSION['cart']) : [];
    if (in_array($product['id'], $cart_item_id)) {
        // Item already in cart, update quantity
        $cart_item_id = array_keys($_SESSION['cart']);
        $index = array_search($product['id'], $cart_item_id);
        $_SESSION['cart'][$index]['quantity'] += $quantity;
    } else {
        // Add new item to cart
        $_SESSION['cart'][] = [
            'id' => $product['id'],
            'name' => $product['name'],
            'price' => $product['price'],
            'quantity' => $quantity
        ];
    }
    $stmt->close();
    return true;
}


// Function to get the cart items
function get_cart_items() {
    if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
        return [];
    }
    return $_SESSION['cart'];
}

// Function to update quantity in cart
function update_cart_quantity($product_id, $quantity) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    $product_id = intval($product_id); // Ensure product ID is an integer
    $quantity = intval($quantity);      // Ensure quantity is an integer

    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // Product doesn't exist
    }

    $product = $result->fetch_assoc();

    // Check if the product exists in the cart
    if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
        return false;
    }
    
    $cart_items = get_cart_items();

    foreach ($cart_items as $key => $item) {
        if ($item['id'] == $product['id']) {
            $_SESSION['cart'][$key]['quantity'] = $quantity;
            break;
        }
    }

    $stmt->close();
    return true;
}


// Function to remove item from cart
function remove_from_cart($product_id) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    $product_id = intval($product_id); // Ensure product ID is an integer

    // Check if the product exists in the cart
    if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
        return false;
    }

    $cart_items = get_cart_items();

    foreach ($cart_items as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            $cart_items = get_cart_items();
            break;
        }
    }
    return true;
}

// Function to get the total cart value
function calculate_cart_total() {
    $cart_items = get_cart_items();
    $total = 0;
    foreach ($cart_items as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


//--------------------  Example usage and handling the request (e.g., from a form)  --------------------

// If the request is to add an item to the cart:
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    add_to_cart($product_id, $quantity);
}

// If the request is to update quantity in cart:
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    update_cart_quantity($product_id, $quantity);
}

//If the request is to remove an item from cart:
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
}

// Display the cart contents:
$cart_items = get_cart_items();
$total = calculate_cart_total();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (!empty($cart_items)) { ?>
        <table class="cart-table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($cart_items as $item) { ?>
                    <tr class="cart-item">
                        <td><?php echo $item['name']; ?></td>
                        <td>$<?php echo number_format($item['price'], 2); ?></td>
                        <td><?php echo $item['quantity']; ?></td>
                        <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
                        <td>
                            <a href="?remove_from_cart=<?php echo $item['id']; ?>">Remove</a>
                        </td>
                    </tr>
                <?php } ?>
            </tbody>
        </table>

        <p><strong>Total:</strong> $<?php echo number_format($total, 2); ?></p>
    <?php } else { ?>
        <p>Your cart is empty.</p>
    <?php } ?>

    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>
        <button type="submit" name="add_to_cart">Add to Cart</button>
    </form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Add this to prevent SQL injection - VERY IMPORTANT
$db_connection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($db_connection->connect_error) {
  die("Connection failed: " . $db_connection->connect_error);
}


// Function to add a product to the cart
function addToCart($product_id, $quantity, $db_connection) {
  $product_id = mysqli_real_escape_string($db_connection, $product_id); // Prevent SQL injection
  $quantity = mysqli_real_escape_string($db_connection, $quantity);

  // Check if the product already exists in the cart
  $sql = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $db_connection->query($sql);

  if ($result->num_rows > 0) {
    // Product already exists, update the quantity
    $sql = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
    if ($db_connection->query($sql) === TRUE) {
      return true;
    } else {
      return false;
    }
  } else {
    // Product doesn't exist, add a new row
    $sql = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
    if ($db_connection->query($sql) === TRUE) {
      return true;
    } else {
      return false;
    }
  }
}

// Function to get the cart contents
function getCartContents($db_connection) {
  $sql = "SELECT * FROM cart";
  $result = $db_connection->query($sql);

  if ($result->num_rows > 0) {
    $cart_contents = array();
    while ($row = $result->fetch_assoc()) {
      $cart_contents[] = $row;
    }
    return $cart_contents;
  } else {
    return array(); // Return an empty array if the cart is empty
  }
}


// Handle the purchase request (example)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Check if 'submit_purchase' form is submitted
  if (isset($_POST["submit_purchase"])) {
    // Get cart items
    $cart_items = getCartContents($db_connection);

    // Process the purchase (example: print the cart items)
    echo "<h2>Purchase Order</h2>";
    echo "<ul>";
    foreach ($cart_items as $item) {
      echo "<li>Product ID: " . $item["product_id"] . ", Quantity: " . $item["quantity"] . "</li>";
    }
    echo "</ul>";

    // Clear the cart after purchase (optional)
    clearCart($db_connection); // Implement clearCart function below

  }
}


// Optional:  Function to clear the cart (empty the table)
function clearCart($db_connection) {
  $sql = "DELETE FROM cart";
  if ($db_connection->query($sql) === TRUE) {
    echo "<p>Cart cleared successfully!</p>";
  } else {
    echo "<p>Error clearing cart: " . $db_connection->error . "</p>";
  }
}


//  --- Example of a Product Table (create this in your database) ---
/*
CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
*/

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <h2>Add to Cart</h2>
  <form method="post">
    <select name="product_id" id="product_id">
      <?php
      // Example:  Fetch products from the 'products' table
      $product_sql = "SELECT product_id, product_name FROM products";
      $product_result = $db_connection->query($product_sql);

      if ($product_result->num_rows > 0) {
        while ($product = $product_result->fetch_assoc()) {
          echo "<option value='" . $product["product_id"] . "'>" . $product["product_name"] . "</option>";
        }
      }
      ?>
    </select>
    <input type="number" name="quantity" value="1" min="1">
    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

  <?php
  // Display the cart contents (for testing)
  $cart_items = getCartContents($db_connection);
  if (!empty($cart_items)) {
    echo "<h2>Cart</h2>";
    echo "<ul>";
    foreach ($cart_items as $item) {
      echo "<li>Product ID: " . $item["product_id"] . ", Quantity: " . $item["quantity"] . "</li>";
    }
    echo "</ul>";
  }
  ?>
</body>
</html>


<?php

// Database connection details
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate input data
  $product_id = filter_input(INPUT_POST, "product_id", FILTER_VALIDATE_INT);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);

  if ($product_id && $quantity) {
    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL query
    $sql = "INSERT INTO orders (product_id, quantity) VALUES (?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      // Bind parameters
      $stmt->bind_param("ii", $product_id, $quantity);

      // Execute the query
      if ($stmt->execute()) {
        echo "Order placed successfully!";
      } else {
        echo "Error placing order: " . $stmt->error;
      }

      // Close the statement and connection
      $stmt->close();
      $conn->close();
    } else {
      echo "Error preparing statement.";
    }
  } else {
    echo "Invalid product ID or quantity.";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Adds a new purchase to the database.
 *
 * @param int $product_id The ID of the product being purchased.
 * @param int $quantity The quantity of the product being purchased.
 * @param string $customer_name The customer's name.
 * @param string $customer_email The customer's email address.
 *
 * @return int|false The ID of the newly created purchase, or false on failure.
 */
function addPurchase(int $product_id, int $quantity, string $customer_name, string $customer_email) {
    global $conn; // Access the database connection

    // Check if the product exists (Basic validation - improve with product details)
    $product_query = "SELECT id FROM products WHERE id = ?";
    $stmt = $conn->prepare($product_query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        // Product exists, proceed with adding the purchase
    } else {
        // Product does not exist, handle the error appropriately
        error_log("Invalid product ID: " . $product_id);  // Log the error
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date)
           VALUES (?, ?, ?, ?, NOW())";

    // Prepare and execute the query
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);

    if ($stmt->execute()) {
        // Get the ID of the newly created purchase
        $purchase_id = $conn->insert_id;
        return $purchase_id;
    } else {
        // Handle errors
        error_log("Error adding purchase: " . $stmt->error);
        return false;
    }

    // Close the statement
    $stmt->close();
}

// --- Example Usage ---
// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get product ID and quantity from the form
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];

    // Add the purchase
    $purchase_id = addPurchase($product_id, $quantity, $customer_name, $customer_email);

    if ($purchase_id) {
        echo "Purchase successful!  Purchase ID: " . $purchase_id;
    } else {
        echo "Purchase failed.  Please try again.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h2>Add a Purchase</h2>

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Add Purchase</button>
</form>

</body>
</html>


<?php

// Data Storage (Replace with a database connection in a real application)
$cart = []; // Array to store items in the cart
$products = [
    1 => ["name" => "T-Shirt", "price" => 20.00],
    2 => ["name" => "Jeans", "price" => 50.00],
    3 => ["name" => "Hat", "price" => 15.00],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1) {
    if (isset($products[$productId])) {
        if (isset($cart[$productId])) {
            $cart[$productId]['quantity'] += $quantity;
        } else {
            $cart[$productId] = [
                'name' => $products[$productId]['name'],
                'price' => $products[$productId]['price'],
                'quantity' => $quantity
            ];
        }
    } else {
        echo "Product ID {$productId} not found.";
    }
}

// Function to display the cart
function displayCart() {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $itemId => $item) {
        echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";

    // Calculate total cost
    $totalCost = 0;
    foreach ($cart as $itemId => $item) {
        $totalCost += $item['price'] * $item['quantity'];
    }
    echo "<p><b>Total Cost: $" . number_format($totalCost, 2) . "</b></p>";
}

// Function to handle the purchase (simplified - no payment processing)
function processPurchase() {
    if (empty($cart)) {
        echo "<p>Your cart is empty.  Nothing to purchase.</p>";
        return;
    }

    echo "<h2>Order Confirmation</h2>";
    echo "<p>Thank you for your order!</p>";
    echo "<p>Order Summary:</p>";
    displayCart(); // Re-display the cart as confirmation
    // In a real application, you would:
    // 1. Process payment (integrate with a payment gateway)
    // 2. Update inventory (reduce product stock)
    // 3. Send confirmation email
    echo "<p>Your order has been placed.  (Simulated - no actual payment/shipping)</p>";
}

// --- Example Usage (Handle form submissions and calls to functions) ---

// Check for form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id']; // Convert to integer
        $quantity = (int)$_POST['quantity'];

        addToCart($productId, $quantity);
    }

    if (isset($_POST['purchase'])) {
        processPurchase();
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Shopping Cart</h1>

<h2>Available Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</li>";
    }
    ?>
</ul>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1"><br><br>

    <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="submit" name="purchase" value="Purchase">
</form>

<?php
    displayCart();
?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data
  $name = trim($_POST["name"]);
  $email = trim($_POST["email"]);
  $quantity = (int) $_POST["quantity"]; // Convert to integer
  $price = (float) $_POST["price"]; // Convert to float

  // Validation - Add more robust validation as needed (e.g., email format validation)
  if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure quantity and price are positive values.";
  } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    // Process the order (Simulate Order Processing)
    $order_total = $quantity * $price;

    //  You would typically insert this into a database here
    //  For this example, we'll just display the order details

    echo "<p>Order Summary:</p>";
    echo "<p>Name: " . htmlspecialchars($name) . "</p>"; // Escape for security
    echo "<p>Email: " . htmlspecialchars($email) . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Price per item: $" . htmlspecialchars($price) . "</p>";
    echo "<p>Total: $" . $order_total . "</p>";
    echo "<p>Thank you for your order!</p>";

    // You would typically log this order, send an email confirmation, etc.
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Purchase Form</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// This is a simplified purchase functionality example. 
// For a production environment, you would need:
// - Proper database interaction
// - Input validation and sanitization
// - Error handling
// - Security measures (CSRF protection, authentication, etc.)
// - Session management
// - A real database (MySQL, PostgreSQL, etc.)

// Data (Simulated Database)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15]
];

// Session for storing cart data (simple)
session_start();

// Check if the cart exists, initialize if not
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ------------------------------------------------------------------
// Function to add an item to the cart
function addToCart($product_id, $quantity = 1) {
    global $products;

    // Validate product_id
    if (!isset($products[$product_id])) {
        return false; // Product not found
    }

    // Validate quantity
    $quantity = max(1, (int)$quantity); // Ensure quantity is at least 1

    // Check if the item is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add new item to the cart
        $_SESSION['cart'][$product_id] = [
            'id' => $product_id,
            'name' => $products[$product_id]['name'],
            'price' => $products[$product_id]['price'],
            'quantity' => $quantity
        ];
    }
    return true;
}


// ------------------------------------------------------------------
// Function to view the cart
function viewCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $item_id => $item_data) {
            echo "<li>";
            echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . "  (Quantity: " . $item_data['quantity'] . ") ";
            echo "<form action='' method='post'>"; // Dummy action to prevent form submission
            echo "<input type='hidden' name='item_id' value='" . $item_id . "'>";
            echo "<input type='submit' value='Remove'>";
            echo "</form>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// ------------------------------------------------------------------
// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// ------------------------------------------------------------------
// Handle form submission (Add to Cart)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['item_id']) && isset($_POST['quantity'])) {
        $product_id = (int)$_POST['item_id'];
        $quantity = (int)$_POST['quantity'];
        addToCart($product_id, $quantity);
    }
}

// ------------------------------------------------------------------
// Handle form submission (Remove from Cart - example)
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove_item'])) {
    $product_id_to_remove = (int)$_POST['remove_item'];
    removeItemFromCart($product_id_to_remove);
}


// ------------------------------------------------------------------
// Display the page
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Products</h1>

<?php
foreach ($products as $id => $product) {
    echo "<div>";
    echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . "<br>";
    echo "<form action='' method='post'>"; // Dummy action
    echo "<input type='hidden' name='item_id' value='" . $id . "'>";
    echo "<input type='number' name='quantity' value='1' min='1'>";
    echo "<input type='submit' value='Add to Cart'>";
    echo "</form>";
    echo "</div>";
}
?>

<hr>

<?php
viewCart();
?>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecom_db";
$db_user = "your_username";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1. Get Cart Details
    $query = "SELECT product_id, quantity FROM cart WHERE cart_id = '$cart_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $cart_items = array();
        while ($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }

        // 2. Calculate Total Amount
        $total_amount = 0;
        foreach ($cart_items as $item) {
            // Assuming you have a products table with 'product_id' and 'price'
            $query_product = "SELECT price FROM products WHERE product_id = '$item['product_id']'";
            $result_product = $conn->query($query_product);

            if ($result_product->num_rows > 0) {
                $price = $result_product->fetch_assoc()['price'];
                $total_amount += $price * $item['quantity'];
            } else {
                // Handle the case where the product is not found
                echo "Error: Product with ID '$item['product_id']' not found.";
                return false; // Or handle this differently (e.g., skip the item)
            }
        }


        // 3. Update Order Table
        $order_id = $conn->insert("orders", [
            'customer_name' => $customer_name,
            'customer_email' => $customer_email,
            'total_amount' => $total_amount,
            'order_date' => date('Y-m-d H:i:s') // Get current timestamp
        ]);

        // 4. Update Cart (Mark items as sold)
        foreach ($cart_items as $item) {
            $conn->query("UPDATE cart SET quantity = 0 WHERE product_id = '$item['product_id']' AND cart_id = '$cart_id'");
        }

        // 5. Return Success Message
        return $conn->insert_id; // Return the newly created order ID
    } else {
        // Cart is empty or doesn't exist
        return false;
    }
}

// --- Example Usage (Simulated Form Handling) ---

// 1. Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get form data (replace with your actual form processing)
    $cart_id = $_POST["cart_id"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    // Validate the data (important for security)
    if (empty($cart_id) || empty($customer_name) || empty($customer_email)) {
        echo "Error: Please fill in all required fields.";
    } else {
        // Handle the purchase
        $new_order_id = handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);

        if ($new_order_id) {
            echo "Order placed successfully! Order ID: " . $new_order_id;
        } else {
            echo "Error placing order.";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>E-Commerce Purchase</title>
</head>
<body>

<h1>E-Commerce Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Initialize order data
$order = array();
$total_amount = 0;

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Handle item selection
    $items = isset($_POST["items"]) ? $_POST["items"] : array();
    if (is_array($items)) {
        foreach ($items as $item_id => $quantity) {
            $quantity = intval($quantity); // Ensure quantity is an integer
            if ($quantity > 0) {
                // Simulate item details (replace with actual product data)
                $item_name = "Product " . $item_id;
                $item_price = rand(10, 50); // Random price for demonstration
                $total_item_price = $item_price * $quantity;

                $order[$item_id] = array(
                    "name" => $item_name,
                    "quantity" => $quantity,
                    "price" => $item_price,
                    "total" => $total_item_price
                );
                $total_amount += $total_item_price;
            }
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Order</title>
</head>
<body>

<h1>Purchase Order</h1>

<form method="post" action="purchase.php">
    <h2>Select Items:</h2>
    <label for="item1">Item 1 (Quantity):</label>
    <input type="number" id="item1" name="items[]" value="0" > <br><br>

    <label for="item2">Item 2 (Quantity):</label>
    <input type="number" id="item2" name="items[]" value="0" > <br><br>

    <label for="item3">Item 3 (Quantity):</label>
    <input type="number" id="item3" name="items[]" value="0" > <br><br>

    <input type="submit" value="Place Order">
</form>

<br>

<h2>Order Summary:</h2>
<?php if (empty($order)): ?>
    <p>No items selected.</p>
<?php else: ?>
    <ul>
        <?php
        foreach ($order as $item_id => $item_data) {
            echo "<li>" . $item_data['name'] . " - Quantity: " . $item_data['quantity'] . ", Price: $" . $item_data['price'] . ", Total: $" . $item_data['total'] . "</li>";
        }
        ?>
    </ul>
    <p><b>Total Amount:</b> $<?php echo round($total_amount, 2); ?></p>
<?php endif; ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate and sanitize inputs (important for security)
    $product_name = htmlspecialchars($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $total_price = floatval($_POST["total_price"]); // Handle decimals correctly

    if (empty($product_name) || $quantity <= 0 || $total_price <= 0) {
        $error_message = "Please fill in all fields and ensure quantity and total price are positive values.";
    } else {
        // Connect to the database
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO products (product_name, quantity, total_price) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);

        if ($stmt) {
            // Bind parameters
            $stmt->bind_param("sii", $product_name, $quantity, $total_price);

            // Execute the statement
            if ($stmt->execute()) {
                $success_message = "Product added successfully!";
            } else {
                $error_message = "Error adding product: " . $stmt->error;
            }
        } else {
            $error_message = "Error preparing statement.";
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Functionality</h1>

    <?php if (isset($error_message)) { ?>
        <p style="color: red;"><?php echo $error_message; ?></p>
    <?php } ?>

    <?php if (isset($success_message)) { ?>
        <p style="color: green;"><?php echo $success_message; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name" required> <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required> <br><br>

        <label for="total_price">Total Price:</label>
        <input type="number" id="total_price" name="total_price" step="0.01" required> <br><br>

        <input type="submit" value="Add to Cart">
    </form>

</body>
</html>


<?php

// --- Database Configuration (Replace with your actual values) ---
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_username";
$db_password = "your_password";

// --- Product Data (For demonstration purposes - replace with database query) ---
$products = [
    1 => ["id" => 1, "name" => "T-Shirt", "price" => 20.00],
    2 => ["id" => 2, "name" => "Jeans", "price" => 50.00],
    3 => ["id" => 3, "name" => "Hat", "price" => 15.00],
];


// --- Function to handle the purchase process ---
function handlePurchase($cart, $products) {
    $total = 0;
    $order_details = [];

    foreach ($cart as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            $total += $product["price"] * $quantity;
            $order_details[] = [
                "product_id" => $product_id,
                "name" => $product["name"],
                "price" => $product["price"],
                "quantity" => $quantity
            ];
        } else {
            // Handle invalid product ID
            echo "<p>Error: Product ID '$product_id' not found.</p>";
            return false;
        }
    }

    //  Simulate saving the order to a database (replace with your actual database logic)
    echo "<p>Order Summary:</p>";
    echo "<ul>";
    foreach ($order_details as $detail) {
        echo "<li>" . $detail["name"] . " - " . $detail["quantity"] . " x $" . $detail["price"] . " = $" . ($detail["price"] * $detail["quantity"]) . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $total . "</p>";

    //  You would normally store this order information in your database here.
    return true;
}



// ---  Handling the purchase request (GET method) ---

if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Check if the "submit" button was clicked
    if (isset($_GET["submit"])) {
        // Get the cart data from the session (or other storage)
        $cart = $_SESSION["cart"] ?? [];  // Default to an empty array if not set

        // Validate cart data (e.g., check for valid product IDs)
        // Example: Check if product IDs exist in the $products array
        $valid_cart = $cart;  // In a real application, you'd perform more rigorous validation

        // Handle the purchase
        if (handlePurchase($valid_cart, $products)) {
            //  Clear the cart after successful purchase (optional)
            session_destroy();
            session_unset();
            session_start(); // Restart the session
            echo "<p>Order placed successfully!</p>";
        } else {
            echo "<p>Order failed.</p>";
        }
    } else {
        // Display the purchase form
        echo "<h1>Purchase</h1>";
        echo "<form method='GET'>";
        echo "<label for='product_id'>Product ID:</label>";
        echo "<select id='product_id' name='product_id'>";
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $product["name"] . "</option>";
        }
        echo "</select><br><br>";

        echo "<label for='quantity'>Quantity:</label>";
        echo "<input type='number' id='quantity' name='quantity' value='1'>";
        echo "<br><br>";

        echo "<input type='submit' name='submit' value='Purchase'>";
        echo "</form>";
    }
} else {
    // Handle the case where the request method is not GET (e.g., POST) -  This is usually handled by the form correctly.
    echo "Invalid request method.";
}
?>


<?php
session_start();

// Database connection details (Replace with your actual details)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database_name';

// Initialize the cart
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    $product_id = intval($product_id); // Ensure product_id is an integer
    $quantity = intval($quantity); // Ensure quantity is an integer

    if ($product_id <= 0 || $quantity <= 0) {
        return false; // Invalid input
    }

    // Check if the product exists in the database (Simple example - enhance for real use)
    $query = "SELECT id, name, price FROM products WHERE id = $product_id";
    $result = mysqli_query($conn, $query);
    if (!$result) {
        return false; // Product not found
    }

    $product_data = mysqli_fetch_assoc($result);
    if ($product_data['id'] == 0) { // Check if any data was retrieved
        return false;
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = [
            'quantity' => $quantity,
            'name' => $product_data['name'],
            'price' => $product_data['price']
        ];
    }

    return true;
}


// Function to get the cart total
function calculateCartTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to clear the cart
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Product Listing (Example - Replace with your product database query) ---
$product_list = [
    ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// --- Cart Handling Functions ---

// Function to display the cart contents
function displayCart() {
    $cart = $_SESSION['cart'];
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    foreach ($cart as $product_id => $item) {
        $name = $item['name'];
        $price = $item['price'];
        $quantity = $item['quantity'];
        $total = $price * $quantity;

        echo "<tr>";
        echo "<td>" . $name . "</td>";
        echo "<td>$" . number_format($price, 2) . "</td>";
        echo "<td>" . $quantity . "</td>";
        echo "<td>$" . number_format($total, 2) . "</td>";
        echo "<td><a href='cart.php?action=remove&product_id=$product_id'>Remove</a></td>";
        echo "</tr>";
    }

    echo "</table>";
    echo "<p><strong>Total: $" . number_format(calculateCartTotal($cart), 2) . "</p>";
}

// --- Actions Based on User Input ---

if (isset($_GET['action']) && $_GET['action'] == 'remove') {
    $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : 0; // Ensure product_id is an integer
    if (addToCart($conn, $product_id, 0) === true) { // Add quantity 0 to effectively remove
        unset($_SESSION['cart'][$product_id]);
    }
}


// --- Display the Cart and the Product List ---

// Establish database connection
$conn = mysqli_connect($db_host, $db_user, $db_password, $db_name);
if (!$conn) {
    die('Connection failed: ' . mysqli_connect_error());
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Online Store</h1>

    <h2>Product List</h2>
    <ul>
        <?php
        foreach ($product_list as $product) {
            echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . " <a href='cart.php?action=add&product_id=" . $product['id'] . "'>Add to Cart</a></li>";
        }
        ?>
    </ul>

    <hr>

    <?php
    displayCart();
    ?>

</body>
</html>


<?php

// Configuration (Replace with your actual data)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

$cart = []; // Initialize an empty cart

// Function to add items to the cart
function addToCart($productId, $cart) {
    if (isset($products[$productId])) {
        $product = $products[$productId];
        $cart[] = $product; // Add the product details to the cart
        return true;
    } else {
        return false; // Product not found
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . " - Quantity: <input type='number' value='" . $item['quantity'] . "' min='1' max='" . $item['quantity'] . "' onchange='updateCart()' ></li>";
        }
        echo "</ul>";
    }
}

// Function to update cart quantity
function updateCart() {
    // Get the input value (updated quantity)
    $input_value = $_POST['quantity_input'];

    // Loop through the cart and update the quantity
    foreach ($cart as $key => $item) {
        if ($key == (int)$input_value) {
            $cart[$key]['quantity'] = $input_value;
            break; // Stop iterating once the item is updated
        }
    }
}


// Handle adding to cart (e.g., from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = $_POST['product_id'];
        if (addToCart($productId, $cart)) {
            echo "<p>Item added to cart.</p>";
        } else {
            echo "<p>Product not found.</p>";
        }
    }
}

// Display the cart
displayCart($cart);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="">
        <label for="product_id">Select Product:</label>
        <select name="product_id" id="product_id" onchange="updateCart()">
            <?php
            foreach ($products as $id => $product) {
                echo "<option value='" . $id . "'>" . $product['name'] . "</option>";
            }
            ?>
        </select>

        <button type="submit" name="add_to_cart">Add to Cart</button>
    </form>

    <script>
      function updateCart() {
        // Get the current value of the input element
        const quantityInput = document.getElementById("product_id"); // Changed 'product_id' to 'product_id'
        const productId = parseInt(productId);

        // Update the cart (this function will be called from the HTML)
        updateCartData(productId);
      }
    </script>

</body>
</html>


<?php

// Sample Product Data (Replace with your database connection)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200.00],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25.00],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75.00],
];

// Session Handling (for storing cart data)
session_start();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if "add_to_cart" form was submitted
    if (isset($_POST["action"]) && $_POST["action"] == "add_to_cart") {
        $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : null;

        if ($product_id && isset($products[$product_id])) {
            $product = $products[$product_id];

            if (!isset($_SESSION["cart"])) {
                $_SESSION["cart"] = [];
            }

            $_SESSION["cart"][] = $product;
            echo "<p>Product '" . $product['name'] . "' added to cart.</p>";
        } else {
            echo "<p>Invalid product ID.</p>";
        }
    }

    // Handle checkout (example - you'll need to integrate payment processing)
    if (isset($_POST["action"]) && $_POST["action"] == "checkout") {
        // Validate cart, process payment, etc.
        // This is a simplified example; replace with actual payment integration.
        echo "<p>Checkout initiated! (Payment processing would happen here)</p>";

        // Clear the cart after checkout (optional)
        $_SESSION["cart"] = [];
        echo "<p>Cart emptied.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart {
            border: 1px solid #ccc;
            padding: 10px;
            margin-top: 20px;
        }
        .cart table {
            width: 100%;
            border-collapse: collapse;
        }
        .cart th, .cart td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="">
        <h2>Add Products to Cart</h2>
        <?php
        foreach ($products as $id => $product) {
            echo "<div class='product'>";
            echo "<label for='product_" . $id . "'>" . $product['name'] . " - $" . $product['price'] . "</label><br>";
            echo "<input type='number' id='product_" . $id . "' name='product_id' value='' min='1' max='10' style='width:50px;'>"; // Limit quantity (optional)
            echo "<input type='submit' value='Add to Cart' name='action' value='add_to_cart'>";
            echo "</div>";
        }
        ?>
    </form>

    <hr>

    <h2>Cart</h2>

    <?php
    if (isset($_SESSION["cart"])) {
        echo "<div class='cart'>";
        echo "<table>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th></tr>"; // Added header row

        foreach ($_SESSION["cart"] as $item) {
            echo "<tr>";
            echo "<td>" . $item['name'] . "</td>";
            echo "<td>$" . $item['price'] . "</td>";
            // Optionally add quantity input here if needed
            echo "<td>" . "1" . "</td>"; // Default quantity of 1
            echo "</tr>";
        }
        echo "</table>";
        echo "</div>";
    } else {
        echo "<p>Your cart is empty.</p>";
    }
    ?>

    <hr>

    <form method="post" action="">
        <button type="submit" name="action" value="checkout">Checkout</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and the connection is stored in $db

// Function to handle the purchase process
function handlePurchase($cart, $db) {
    // 1. Validate Input (Crucial for security!)
    if (empty($cart)) {
        return "Cart is empty.  Cannot complete purchase.";
    }

    // Example: Simple validation (expand for more robust validation)
    foreach ($cart as $item_id => $quantity) {
        // Add more validation here, e.g., check if item_id exists in your database
        if (!isset($db->query("SELECT id FROM products WHERE id = $item_id"))) {
            return "Invalid item ID: $item_id";
        }
    }


    // 2. Get User Information (Example - Adapt to your system)
    $userId = $_SESSION['user_id'];  // Assuming user is logged in and ID is in session
    if (!$userId) {
        return "User not logged in. Please log in.";
    }


    // 3. Create Order in the Database
    $order_id = $db->query("INSERT INTO orders (user_id, order_date) VALUES ($userId, NOW())");

    if (!$order_id) {
        return "Failed to create order in database.";
    }

    // Loop through the cart and add items to the order
    foreach ($cart as $item_id => $quantity) {
        // Get product information
        $product = $db->query("SELECT product_id, price FROM products WHERE id = $item_id");
        if (!$product) {
            $db->query("DELETE FROM orders WHERE id = $order_id"); // Rollback if product not found
            return "Product not found.";
        }

        // Calculate total for this item
        $item_total = $product->price * $quantity;

        // Add order item
        $db->query("INSERT INTO order_items (order_id, product_id, quantity, item_total) VALUES ($order_id, $item_id, $quantity, $item_total)");
    }

    // 4. Update Cart (Remove purchased items)
    // In a real application, you'd likely use a session to manage the cart
    // This example assumes the cart is stored in a session.
    session_start();
    $_SESSION['cart'] = [];  // Clear the cart

    // 5. Confirmation Message
    return "Purchase complete! Order ID: " . $db->query("SELECT id FROM orders WHERE id = $order_id");
}

// Example Usage (Illustrative - Call this from your purchase form)
// $cart = array(1 => 2, 2 => 1); // Example cart (item_id => quantity)
// $result = handlePurchase($cart);
// echo $result;


//  ---  Example Form (purchase_form.php)  ---

// <!DOCTYPE html>
// <html>
// <head>
//     <title>Purchase</title>
// </head>
// <body>
//
// <h1>Purchase</h1>
//
// <?php
// session_start();
// if (isset($_POST['submit'])) {
//     $cart = $_SESSION['cart'];
//     $result = handlePurchase($cart);
//     echo $result;
// }
// ?>
//
// <form method="post">
//     <?php
//     if (isset($_SESSION['cart'])) {
//         echo "<h2>Cart Items:</h2>";
//         echo "<ol>";
//         foreach ($_SESSION['cart'] as $item_id => $quantity) {
//             echo "<li>Item ID: " . $item_id . ", Quantity: " . $quantity . "</li>";
//         }
//         echo "</ol>";
//     } else {
//         echo "<p>Cart is empty.</p>";
//     }
// ?>
//     <button type="submit" name="submit">Complete Purchase</button>
// </form>

?>


<?php

// --- Database Connection (Replace with your actual credentials) ---
$dbHost = 'localhost';
$dbName = 'ecommerce';
$dbUser = 'root';
$dbPassword = '';

// Create a database connection
$conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Product Data (For demonstration - replace with a database query) ---
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'stock' => 50],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'stock' => 25],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00, 'stock' => 30],
];

// --- Session Handling (To track the cart) ---
session_start();

// Initialize the cart in the session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @return bool True if successful, false otherwise.
 */
function addToCart(int $product_id) {
    global $products;

    // Find the product in the database (or product data)
    if (isset($products[$product_id])) {
        $product = $products[$product_id];

        // Check if the product is already in the cart
        if (isset($_SESSION['cart'][$product_id])) {
            // Increment quantity
            $_SESSION['cart'][$product_id]['quantity'] += 1;
        } else {
            // Add the product to the cart
            $_SESSION['cart'][$product_id] = [
                'id' => $product_id,
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => 1,
            ];
        }
        return true;
    } else {
        return false; // Product not found
    }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True if successful, false otherwise.
 */
function removeFromCart(int $product_id) {
    global $products;

    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
        return true;
    } else {
        return false;
    }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return bool True if successful, false otherwise.
 */
function updateQuantity(int $product_id, int $quantity) {
    global $products;

    if (isset($_SESSION['cart'][$product_id])) {
        // Validate quantity (ensure it's positive)
        if ($quantity > 0) {
            $_SESSION['cart'][$product_id]['quantity'] = $quantity;
            return true;
        } else {
            // Optionally, you could clear the item from the cart if the quantity is 0
            removeFromCart($product_id); // Remove if quantity is 0
            return false;
        }
    } else {
        return false;
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Purchase Functionality (Simulated) ---

/**
 * Handles the purchase process (simulated).
 *
 * In a real application, this would:
 *   1. Validate the order (address, payment details, etc.)
 *   2. Process the payment.
 *   3. Update inventory (reduce stock).
 *   4. Send order confirmation email.
 *
 * This is a simplified simulation.
 */
function processPurchase() {
    if (empty($_SESSION['cart'])) {
        // Cart is empty
        return false;
    }

    // Simulate payment processing
    // In a real application, you'd integrate with a payment gateway
    // For now, we just confirm the purchase
    echo "<p>Purchase confirmed!</p>";

    // Simulate inventory update (reduce stock - NOT implemented fully)
    // In a real application, you would update your database
    foreach ($_SESSION['cart'] as $item) {
        // In a real application, you would update your database
        // This is just for demonstration
        echo "<p>Reduced stock for " . $products[$item['id']]['name'] . "</p>";
    }

    // Clear the cart
    $_SESSION['cart'] = [];

    return true;
}


// --- Displaying the Cart and Purchase Button ---

echo "<h1>Shopping Cart</h1>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $products[$item['id']]['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";

    echo "<p><button onclick=\"processPurchase()\">Process Purchase</button></p>"; // Using a button for simplicity
}


// ---  Simple JavaScript Function (for button click) ---
// This is just for demo purposes.  A real application would likely use AJAX.
echo "<script>
function processPurchase() {
  // In a real application, AJAX would be used to send the purchase data to the server.
  // For this demo, we're just simulating the process.

  // You would typically do something like:
  //   fetch('/purchase.php', { method: 'POST', body: JSON.stringify({ cart: JSON.stringify($_SESSION['cart']) }) });
  //   (Replace '/purchase.php' with the actual URL)

  alert('Purchase initiated (simulated)!');
}
</script>";


?>


<?php

// Database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle adding a product to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the product already exists in the cart
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Product exists, update the quantity
    $row = $result->fetch_assoc();
    $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
      return "Product added to cart.";
    } else {
      return "Error updating cart: " . $conn->error;
    }
  } else {
    // Product doesn't exist, add it to the cart
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
    if ($conn->query($query) === TRUE) {
      return "Product added to cart.";
    } else {
      return "Error adding product to cart: " . $conn->error;
    }
  }
}

// Function to display the cart contents
function displayCart($conn) {
  $query = "SELECT * FROM cart";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo "<h2>Your Shopping Cart</h2>";
    while ($row = $result->fetch_assoc()) {
      $product_id = $row['product_id'];
      $product_name = mysqli_fetch_assoc(mysqli_query($conn, "SELECT * FROM products WHERE id = '$product_id'"));
      $quantity = $row['quantity'];
      $price = $product_name['price'];

      echo "<tr>";
      echo "<td><img src='$product_name[image]' alt='$product_name[name]' width='100'></td>";
      echo "<td>$product_name[name]</td>";
      echo "<td>$price</td>";
      echo "<td><input type='number' name='quantity[$product_id]' value='$quantity' min='1' max='100'></td>"; // Adjust max limit
      echo "<td><button onclick='removeFromCart('$product_id')'>Remove</button></td>";
      echo "</tr>";
    }
  } else {
    echo "<h2>Your Shopping Cart is Empty</h2>";
  }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
  $query = "DELETE FROM cart WHERE product_id = '$product_id'";
  if ($conn->query($query) === TRUE) {
    return "Product removed from cart.";
  } else {
    return "Error removing product from cart: " . $conn->error;
  }
}

// --- Example Usage (Simulating a purchase) ---

// 1. Handle adding to cart (e.g., from a form submission)
// $product_id = $_POST['product_id'];
// $quantity = $_POST['quantity'];
// $message = addToCart($conn, $product_id, $quantity);
// echo $message;

// 2. Display the cart contents
displayCart($conn);

// 3.  Simulate a "Checkout" process (This is a simplified example)
//  You would typically integrate this with a payment gateway.
// echo "<br><br><h2>Thank You for Your Order!</h2>";
// echo "<p>Your order has been placed.  (This is a placeholder.)</p>";

// Close the database connection
$conn->close();

?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Function to Add a Product to the Cart ---
function addToCart($conn, $product_id, $quantity) {
    // Prepare the SQL query
    $sql = "INSERT INTO cart (user_id, product_id, quantity) 
            VALUES (1, {$product_id}, {$quantity}) 
            ON DUPLICATE KEY UPDATE quantity = quantity + {$quantity}"; // Handles duplicate product_id (user)

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// --- Function to Get Cart Items ---
function getCartItems($conn, $user_id) {
    $sql = "SELECT p.product_name, p.price, c.quantity
            FROM cart c
            JOIN products p ON c.product_id = p.product_id
            WHERE c.user_id = {$user_id}";

    $result = $conn->query($sql);

    $cart_items = array();

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
    }

    return $cart_items;
}


// --- Function to Remove a Product from the Cart ---
function removeFromCart($conn, $product_id, $user_id) {
    $sql = "DELETE FROM cart WHERE product_id = {$product_id} AND user_id = {$user_id}";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// --- Function to Update Cart Quantity ---
function updateCartQuantity($conn, $product_id, $user_id, $quantity) {
  // Check if the product exists in the cart for this user
  $sql = "SELECT quantity FROM cart WHERE product_id = {$product_id} AND user_id = {$user_id}";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $new_quantity = $row['quantity'] + $quantity;

    $sql = "UPDATE cart SET quantity = {$new_quantity} WHERE product_id = {$product_id} AND user_id = {$user_id}";
    if ($conn->query($sql) === TRUE) {
      return true;
    } else {
      return false;
    }
  } else {
    return false; // Product not found in cart for this user
  }
}


// --- Example Usage (Simulating a Purchase -  Illustrative) ---

// 1. Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (addToCart($conn, $product_id, $quantity)) {
        echo "Product added to cart!";
    } else {
        echo "Failed to add product to cart.";
    }
}

// 2. Get Cart Items (e.g., display in a cart page)
$cart_items = getCartItems($conn, 1); // Assuming user_id 1
// Display the cart items here (e.g., using a table)

// 3. Remove a product from the cart (e.g., from a remove button)
if (isset($_POST['remove_product'])) {
    $product_id = $_POST['product_id'];
    $user_id = 1; // Assuming user_id 1
    if (removeFromCart($conn, $product_id, $user_id)) {
        echo "Product removed from cart!";
    } else {
        echo "Failed to remove product from cart.";
    }
}

// 4. Update Quantity (e.g., when the user changes the quantity)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $user_id = 1;
    $new_quantity = $_POST['quantity'];

    if (updateCartQuantity($conn, $product_id, $user_id, $new_quantity)) {
        echo "Quantity updated!";
    } else {
        echo "Failed to update quantity.";
    }
}


// --- Close the database connection ---
$conn->close();

?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_username";
$db_password = "your_password";

// **1. Check if the form has been submitted**
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // **2. Validate the form data (Important for security!)**
  $name = isset($_POST["name"]) ? trim($_POST["name"]) : "";
  $email = isset($_POST["email"]) ? filter_var($_POST["email"], FILTER_SANITIZE_EMAIL) : "";
  $address = isset($_POST["address"]) ? trim($_POST["address"]) : "";
  $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0; // Ensure product_id is an integer

  // Basic validation - Add more robust validation as needed
  if (empty($name) || empty($email) || empty($address) || $product_id <= 0) {
    $errors = "Please fill in all fields correctly.";
  } else {
    // **3. Prepare the data for insertion into the database**

    // Escape data to prevent SQL injection
    $name = mysqli_real_escape_string($db_connection, $name);
    $email = mysqli_real_escape_string($db_connection, $email);
    $address = mysqli_real_escape_string($db_connection, $address);
    $product_id = intval($product_id);  //Make sure it's an integer

    // **4. Insert the data into the database**

    // Establish database connection
    $db_connection = mysqli_connect($db_host, $db_user, $db_password, $db_name);

    if (mysqli_connect_errno()) {
      die("Failed to connect to MySQL: " . mysqli_connect_error());
    }

    $sql = "INSERT INTO orders (name, email, address, product_id) VALUES ('$name', '$email', '$address', $product_id)";

    if (mysqli_query($db_connection, $sql)) {
      $success_message = "Order placed successfully! Order ID: " . mysqli_insert_id($db_connection);
    } else {
      $error_message = "Error placing order: " . mysqli_error($db_connection);
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($errors)) { ?>
    <p style="color: red;"><?php echo $errors; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">

    <br><br>

    <label for="address">Address:</label>
    <input type="text" id="address" name="address" value="<?php echo isset($address) ? htmlspecialchars($address) : ''; ?>">

    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" value="<?php echo isset($product_id) ? intval($product_id) : 0; ?>">

    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_name = 'e_commerce';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a product to the cart
function addProductToCart($productId, $quantity) {
    $conn = connectToDatabase();

    // Check if the product exists
    $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $stmt->bind_param('i', $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $productName = $row['name'];
        $productPrice = $row['price'];

        // Check if the product is already in the cart
        $cart_key = 'cart_' . session_id();
        if (isset($_SESSION[$cart_key])) {
            $cart = $_SESSION[$cart_key];
            $found = false;
            foreach ($cart as $index => $item) {
                if ($item['id'] == $productId) {
                    $cart[$index]['quantity'] += $quantity;
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $cart[] = [
                    'id' => $productId,
                    'name' => $productName,
                    'price' => $productPrice,
                    'quantity' => $quantity
                ];
            }
        } else {
            $cart = [[
                'id' => $productId,
                'name' => $productName,
                'price' => $productPrice,
                'quantity' => $quantity
            ]];
            $_SESSION[$cart_key] = $cart;
        }

        $conn->close();
        return true;
    } else {
        $conn->close();
        return false;
    }
}

// Function to get the cart contents
function getCartContents() {
    $cart_key = 'cart_' . session_id();
    if (isset($_SESSION[$cart_key])) {
        return $_SESSION[$cart_key];
    } else {
        return [];
    }
}

// Function to remove a product from the cart
function removeProductFromCart($productId) {
    $cart_key = 'cart_' . session_id();
    if (isset($_SESSION[$cart_key])) {
        $cart = $_SESSION[$cart_key];
        foreach ($cart as $index => $item) {
            if ($item['id'] == $productId) {
                unset($cart[$index]);
                // Re-index the array to avoid gaps
                $cart = array_values($cart);
                break;
            }
        }
        $_SESSION[$cart_key] = $cart;
        return true;
    } else {
        return false;
    }
}

// Function to update the quantity of a product in the cart
function updateQuantityInCart($productId, $quantity) {
  $cart_key = 'cart_' . session_id();

  if (isset($_SESSION[$cart_key])) {
    $cart = $_SESSION[$cart_key];
    foreach ($cart as $index => $item) {
      if ($item['id'] == $productId) {
        $item['quantity'] = $quantity;
        $cart[$index] = $item;
        break;
      }
    }
    $_SESSION[$cart_key] = $cart;
    return true;
  } else {
    return false;
  }
}

// *** Example Usage (for testing, replace with your actual form handling) ***

// Example: Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addProductToCart($productId, $quantity);
    echo "<p>Product added to cart.</p>";
}

// Example: Display the cart contents
$cartContents = getCartContents();
echo "<h2>Cart</h2>";
if (empty($cartContents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartContents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['quantity'] * $item['price'] . "</li>";
    }
    echo "</ul>";
}


// Example: Remove a product
if (isset($_POST['remove_product'])) {
  $productId = $_POST['product_id_to_remove'];
  removeProductFromCart($productId);
  echo "<p>Product removed from cart.</p>";
}

// Example: Update quantity
if (isset($_POST['update_quantity'])) {
  $productId = $_POST['product_id_to_update'];
  $newQuantity = $_POST['new_quantity'];
  updateQuantityInCart($productId, $newQuantity);
  echo "<p>Quantity updated in cart.</p>";
}

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate form data (Basic validation - expand for production)
  $name = isset($_POST['name']) ? htmlspecialchars($_POST['name']) : '';
  $email = isset($_POST['email']) ? htmlspecialchars($_POST['email']) : '';
  $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 0;
  $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0;

  // Database query (Replace 'products' with your table name and adjust columns)
  $sql = "INSERT INTO orders (name, email, product_id, quantity) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ssii", $name, $product_id, $quantity);

  if ($stmt->execute()) {
    $success = true;
    $message = "Order placed successfully! Order ID: " . $conn->insert_id; //Get the auto-increment id.
  } else {
    $success = false;
    $message = "Error placing order. " . $stmt->error;
  }

  // Close the statement
  $stmt->close();

} else {
  // If the form wasn't submitted, initialize variables
  $success = false;
  $message = "";
}


// --- Example Product Information (For demonstration - replace with your product data) ---
$products = [
  ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  ['id' => 2, 'name' => 'Mug', 'price' => 10],
  ['id' => 3, 'name' => 'Hat', 'price' => 15]
];


// ---  Display Form (HTML) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if ($success) { ?>
    <p style="color: green;">
      <?php echo $message; ?>
    </p>
  <?php } else { ?>
    <p style="color: red;">
      <?php echo $message; ?>
    </p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo $name; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo $email; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo $quantity; ?>">
    <br><br>

    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
      <?php
      foreach ($products as $product) {
        echo "<option value=\"$product[id]\"";
        if ($product_id == $product['id']) {
          echo " selected";
        }
        echo ">$product[name]</option>";
      }
      ?>
    </select>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <p>Available Products:</p>
  <ul>
    <?php
    foreach ($products as $product) {
      echo "<li>$product[name] - $product[price]</li>";
    }
    ?>
  </ul>

</body>
</html>


<?php

// Database connection (Replace with your actual database details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ---  Purchase Functionality  ---

// Function to create a new purchase
function createPurchase($userId, $productId, $quantity) {
    global $conn;

    // Validate inputs - IMPORTANT!
    if (!$userId || !$productId || !$quantity) {
        return false; // Or throw an exception, depending on your error handling
    }

    $userId = (int)$userId; // Ensure it's an integer
    $productId = (int)$productId; // Ensure it's an integer
    $quantity = (int)$quantity;

    if ($quantity <= 0) {
        return false; // Invalid quantity
    }


    // Check if the product exists
    $productQuery = "SELECT id, name, price FROM products WHERE id = $productId";
    $productResult = $conn->query($productQuery);

    if ($productResult->num_rows == 0) {
        return false; // Product doesn't exist
    }

    $product = $productResult->fetch_assoc();
    $productName = $product['name'];
    $productPrice = $product['price'];

    // Calculate total cost
    $totalCost = $productPrice * $quantity;

    // Insert into the purchases table
    $sql = "INSERT INTO purchases (userId, productId, quantity, totalCost, purchaseDate)
           VALUES ($userId, $productId, $quantity, $totalCost, NOW())";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        error_log("Error creating purchase: " . $conn->error); // Log the error
        return false;
    }
}


// --- Example Usage (Simulated Form Handling) ---

// Simulating form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $userId = $_POST["userId"];
    $productId = $_POST["productId"];
    $quantity = $_POST["quantity"];

    //  Make the purchase
    $purchaseSuccessful = createPurchase($userId, $productId, $quantity);

    if ($purchaseSuccessful) {
        echo "<p>Purchase successful!  User ID: " . $userId . ", Product ID: " . $productId . ", Quantity: " . $quantity . "</p>";
    } else {
        echo "<p>Purchase failed.  Please try again.</p>";
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase a Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="userId">User ID:</label>
    <input type="number" id="userId" name="userId" required><br><br>

    <label for="productId">Product ID:</label>
    <input type="number" id="productId" name="productId" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Make Purchase</button>
</form>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// --- Shopping Cart Functions ---

/**
 * Add an item to the shopping cart
 *
 * @param int $productId The ID of the product to add
 * @param int $quantity  The quantity to add
 */
function addToCart($productId, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$productId] = array(
      'quantity' => $quantity,
      'price'    => getProductPrice($productId) // Ensure price is accurate
    );
  }
}

/**
 * Get the price of a product
 *
 * @param int $productId The ID of the product
 * @return float|null The price of the product, or null if not found
 */
function getProductPrice($productId) {
  //  Simulate fetching price from database
  // Replace this with your actual database query
  $products = array(
    1 => array('name' => 'Laptop', 'price' => 1200.00),
    2 => array('name' => 'Mouse', 'price' => 25.00),
    3 => array('name' => 'Keyboard', 'price' => 75.00)
  );

  if (isset($products[$productId])) {
    return $products[$productId]['price'];
  } else {
    return null; // Product not found
  }
}

/**
 * Update the quantity of an item in the cart
 *
 * @param int $productId The ID of the product to update
 * @param int $quantity  The new quantity
 */
function updateCartQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  }
}

/**
 * Remove an item from the cart
 *
 * @param int $productId The ID of the product to remove
 */
function removeCartItem($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

/**
 * Get the cart contents
 *
 * @return array The shopping cart contents
 */
function getCartContents() {
  return $_SESSION['cart'];
}


/**
 * Calculate the total cart value
 *
 * @return float The total value of the cart
 */
function calculateTotal() {
  $total = 0;
  $cart = getCartContents();

  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}


// --- Handle Add to Cart Request ---
if (isset($_POST['add_to_cart'])) {
  $productId = (int)$_POST['product_id']; // Ensure product_id is an integer
  $quantity = (int)$_POST['quantity'];

  addToCart($productId, $quantity);
  //  You might want to redirect the user after adding to the cart
  header("Location: cart.php");  // Redirect to the cart page
  exit();
}

// --- Handle Update Cart Request ---
if (isset($_POST['update_cart'])) {
  $productId = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'];

  updateCartQuantity($productId, $quantity);
  header("Location: cart.php");
  exit();
}

// --- Handle Remove Cart Item Request ---
if (isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id'];
    removeCartItem($productId);
    header("Location: cart.php");
    exit();
}

// --- Display Cart Contents ---
$cart = getCartContents();
$total = calculateTotal();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>
    <?php
    foreach ($cart as $item):
      ?>
      <div class="cart-item">
        <span><?php echo $item['name']; ?></span> (Quantity: <?php echo $item['quantity']; ?>) - $<?php echo number_format($item['price'], 2); ?>
        <form action="cart.php" method="post">
          <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
          <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1">
          <button type="submit" name="update_cart">Update</button>
        </form>
        <form action="cart.php" method="post">
          <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
          <button type="submit" name="remove_from_cart">Remove</button>
        </form>
      </div>
    <?php
  endforeach;
  ?>

  <p>Total: $<?php echo number_format($total, 2); ?></p>
<?php
}
?>

</body>
</html>


<?php

// Database connection (Replace with your database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "root";
$db_pass = "";

// Establish database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    // Check if the product exists in the database
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Check if the item is already in the cart (using a simple key, could be improved with a hash)
        $cart_item_key = "product_" . $product_id;

        // Prepare the update query
        $update_sql = "UPDATE cart SET quantity = quantity + ? WHERE product_id = ?";
        $update_stmt = $conn->prepare($update_sql);
        $update_stmt->bind_param("is", $quantity, $product_id);

        if ($update_stmt->execute()) {
            // Optionally, you could log the action here
            // echo "Product '$product_name' added to cart (quantity: " . $quantity . ").  Cart ID: " . $product_id . "<br>";
        } else {
            echo "Error updating cart: " . $conn->error . "<br>";
        }
    } else {
        echo "Product with ID " . $product_id . " not found in the database.<br>";
    }

    $stmt->close();
}

// Function to view the cart
function viewCart($conn) {
    $sql = "SELECT p.id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>Your Shopping Cart</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Product ID</th><th>Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

        while ($row = $result->fetch_assoc()) {
            $product_id = $row['id'];
            $product_name = $row['name'];
            $product_price = $row['price'];
            $quantity = $row['quantity'];
            $total = $product_price * $quantity;

            echo "<tr>";
            echo "<td>" . $product_id . "</td>";
            echo "<td>" . $product_name . "</td>";
            echo "<td>$" . number_format($product_price, 2) . "</td>";
            echo "<td>" . $quantity . "</td>";
            echo "<td>$" . number_format($total, 2) . "</td>";
            echo "<td><a href='update_cart.php?product_id=" . $product_id . "&action=update'>Update</a> | <a href='update_cart.php?product_id=" . $product_id . "&action=remove'>Remove</a></td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "Your cart is empty.";
    }
}


// Handle form submissions (update_cart.php will use these)
if (isset($_GET['product_id']) && isset($_GET['action'])) {
    $product_id = $_GET['product_id'];
    $action = $_GET['action'];

    if ($action == "update") {
        $quantity = $_POST['quantity']; // Assumes quantity is sent via a POST form

        if (is_numeric($quantity) && $quantity > 0) {
            addToCart($conn, $product_id, $quantity);
        } else {
            echo "Invalid quantity.  Please enter a number greater than 0.";
        }

    } elseif ($action == "remove") {
        //  Implement remove logic here.  A simple example:
        removeFromCart($conn, $product_id);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <p><a href="view_products.php">View Products</a></p>

    <?php viewCart($conn); ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addCartItem($conn, $user_id, $product_id, $quantity) {
    // Check if the user has a cart yet
    $query = "SELECT id FROM carts WHERE user_id = '$user_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // User has a cart, so update the cart
        $query = "SELECT id FROM carts WHERE user_id = '$user_id'";
        $result = $conn->query($query);
        $cart_id = $result->fetch_assoc()['id'];

        $query = "SELECT id FROM cart_items WHERE cart_id = '$cart_id' AND product_id = '$product_id'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            // Item already in cart, update the quantity
            $query = "UPDATE cart_items SET quantity = quantity + '$quantity' WHERE cart_id = '$cart_id' AND product_id = '$product_id'";
        } else {
            // Item not in cart, add it
            $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES ('$cart_id', '$product_id', '$quantity')";
        }
    } else {
        // User doesn't have a cart, create one
        $query = "INSERT INTO carts (user_id) VALUES ('$user_id')";
        $conn->query($query);
        $query = "SELECT id FROM carts WHERE user_id = '$user_id'";
        $result = $conn->query($query);
        $cart_id = $result->fetch_assoc()['id'];
        $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES ('$cart_id', '$product_id', '$quantity')";
        $conn->query($query);
    }

    // Output for debugging
    echo "<p>Item '$product_id' added to cart.  Cart total: " . calculateCartTotal($conn, $user_id) . "</p>";
}

// Function to calculate the total cart value
function calculateCartTotal($conn, $user_id) {
    $query = "SELECT ci.product_id, p.price FROM cart_items ci JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = (SELECT id FROM carts WHERE user_id = '$user_id')" ;
    $result = $conn->query($query);

    $total = 0;
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $total += $row['price'];
        }
    }
    return $total;
}

// Function to remove an item from the cart
function removeCartItem($conn, $user_id, $product_id) {
    $query = "SELECT id FROM carts WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    $cart_id = $result->fetch_assoc()['id'];

    $query = "DELETE FROM cart_items WHERE cart_id = '$cart_id' AND product_id = '$product_id'";
    $conn->query($query);

    echo "<p>Item '$product_id' removed from cart.  Cart total: " . calculateCartTotal($conn, $user_id) . "</p>";
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($conn, $user_id, $product_id, $quantity) {
    $query = "SELECT id FROM carts WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    $cart_id = $result->fetch_assoc()['id'];

    $query = "UPDATE cart_items SET quantity = '$quantity' WHERE cart_id = '$cart_id' AND product_id = '$product_id'";
    $conn->query($query);

    echo "<p>Quantity of item '$product_id' updated.  Cart total: " . calculateCartTotal($conn, $user_id) . "</p>";
}

// --- Example Usage (Simulated User Interaction) ---

// Connect to the database
$conn = connectToDatabase();

// Simulate adding a product to the cart
// Assume $user_id is determined (e.g., from user login)
$user_id = 1;
$product_id = 'product123';
$quantity = 2;
addCartItem($conn, $user_id, $product_id, $quantity);

// Remove an item
removeCartItem($conn, $user_id, $product_id);

// Update the quantity
updateCartItemQuantity($conn, $user_id, $product_id, 5);

// Close the database connection
$conn->close();
?>


<?php

// Database connection details (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Initialize an empty array to store cart items
$cart = [];

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $price, $quantity) {
  global $cart; // Access the global $cart array

  $item = [
    'id' => $item_id,
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  $cart[] = $item; // Add the item to the cart array
  echo "<p>Item '$item_name' added to cart.</p>";
}

// Function to display the cart contents
function display_cart() {
  global $cart; // Access the global $cart array

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  foreach ($cart as $item) {
    $total = $item['price'] * $item['quantity'];
    echo "<tr>";
    echo "<td>" . $item['name'] . "</td>";
    echo "<td>$" . $item['price'] . "</td>";
    echo "<td>" . $item['quantity'] . "</td>";
    echo "<td>$" . $total . "</td>";
    echo "</tr>";
  }

  echo "</table>";
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;

  // Iterate through the cart and remove the item based on its ID
  for ($i = 0; $i < count($cart); $i++) {
    if ($cart[$i]['id'] == $item_id) {
      unset($cart[$i]); // Remove the item
      // Optionally, you can re-index the array to avoid gaps
      // array_splice($cart, $i, 1);
      echo "<p>Item with ID '$item_id' removed from cart.</p>";
      return;
    }
  }
  echo "<p>Item with ID '$item_id' not found in cart.</p>";
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $new_quantity) {
  global $cart;

  // Iterate through the cart and update the quantity if the item ID matches
  foreach ($cart as $item) {
    if ($item['id'] == $item_id) {
      $item['quantity'] = $new_quantity;
      echo "<p>Quantity of item with ID '$item_id' updated to '$new_quantity'.</p>";
      return;
    }
  }
  echo "<p>Item with ID '$item_id' not found in cart.</p>";
}


// Handle Add to Cart Request (Simulated for demonstration)
if (isset($_POST['add_to_cart'])) {
  $item_id = $_POST['item_id'];
  $item_name = $_POST['item_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  add_to_cart($item_id, $item_name, $price, $quantity);
}


// Handle Remove from Cart Request
if (isset($_POST['remove_item'])) {
  $item_id = $_POST['item_id'];
  remove_from_cart($item_id);
}

// Handle Update Quantity Request
if (isset($_POST['update_quantity'])) {
    $item_id = $_POST['item_id'];
    $new_quantity = $_POST['quantity'];
    update_quantity($item_id, $new_quantity);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Add to Cart Form -->
  <h2>Add to Cart</h2>
  <form method="post">
    <label for="item_id">Item ID:</label>
    <input type="number" id="item_id" name="item_id" required><br><br>

    <label for="item_name">Item Name:</label>
    <input type="text" id="item_name" name="item_name" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <hr>

  <!-- Display Cart Contents -->
  <h2>Shopping Cart</h2>
  <?php display_cart(); ?>

  <hr>

  <!-- Remove Item Form -->
  <h2>Remove Item</h2>
  <form method="post">
    <label for="item_id_remove">Item ID to Remove:</label>
    <input type="number" id="item_id_remove" name="item_id" required><br><br>
    <button type="submit" name="remove_item">Remove Item</button>
  </form>

  <hr>
  <!-- Update Quantity Form -->
    <h2>Update Quantity</h2>
    <form method="post">
        <label for="item_id_update">Item ID to Update:</label>
        <input type="number" id="item_id_update" name="item_id" required><br><br>

        <label for="new_quantity">New Quantity:</label>
        <input type="number" id="new_quantity" name="quantity" min="1" required><br><br>
        <button type="submit" name="update_quantity">Update Quantity</button>
    </form>

</body>
</html>


<?php

// Configuration (Database connection details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (basic example - expand as needed)
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $product = filter_input(INPUT_POST, "product", FILTER_SANITIZE_STRING);

  // Check if the required fields are filled
  if (empty($name) || empty($email) || empty($quantity) || empty($product)) {
    $error = "Please fill in all the required fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Please enter a valid email address.";
  } elseif ($quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } else {
    //  Database interaction (Example - adjust to your database structure)
    try {
      // Connect to the database
      $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
      $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling

      // Prepare the SQL statement
      $stmt = $pdo->prepare("INSERT INTO orders (name, email, quantity, product) VALUES (:name, :email, :quantity, :product)");

      // Bind the parameters
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->bindParam(':product', $product);

      // Execute the statement
      $stmt->execute();

      // Display a success message
      echo "<p style='color:green;'>Order placed successfully! Thank you, " . htmlspecialchars($name) . ".</p>";
    } catch (PDOException $e) {
      // Handle database errors
      echo "<p style='color:red;'>Error placing order: " . $e->getMessage() . "</p>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place an Order</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product">Product:</label>
    <input type="text" id="product" name="product" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Connect to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a new order
function addOrder($productId, $quantity, $customerName, $customerEmail) {
    global $conn;

    // Sanitize and validate inputs (IMPORTANT!)
    $productId = mysqli_real_escape_string($conn, $productId);
    $quantity = mysqli_real_escape_string($conn, intval($quantity)); // Ensure quantity is an integer
    $customerName = mysqli_real_escape_string($conn, $customerName);
    $customerEmail = mysqli_real_escape_string($conn, $customerEmail);


    // Check if the product exists
    $product_query = "SELECT id, name, price FROM products WHERE id = '$productId'";
    $product_result = $conn->query($product_query);

    if (!$product_result->num_rows) {
        return false; // Product not found
    }

    $product = $product_result->fetch_assoc();
    $product_price = $product['price'];
    $total_price = $product_price * $quantity;

    // Insert the order into the orders table
    $order_query = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, total_price)
                    VALUES ('$productId', '$quantity', '$customerName', '$customerEmail', '$total_price')";

    if ($conn->query($order_query) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// --- Example Usage (Handle form submission) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customerName = $_POST["customer_name"];
    $customerEmail = $_POST["customer_email"];

    // Add the order
    if (addOrder($productId, $quantity, $customerName, $customerEmail)) {
        echo "Order placed successfully!  Order ID: " . $conn->insert_id; // Display the newly created order ID.
    } else {
        echo "Failed to place order.  Please try again.";
    }
}

// --- Database Table Setup (CREATE TABLE statements) ---

//  This code is included to demonstrate how the database tables would be structured.
//  You need to execute these queries to set up the database.

/*
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products(id)
);
*/


?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase an Item</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// 1. Display the Products
echo "<h1>Available Products</h1>";

// Simulate a product catalog - replace with your actual database query
$products = [
    ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

foreach ($products as $product) {
    echo "<p><strong>$product[name]</strong> - $product[price] </p>";
}

// 2.  Handle the Purchase Form (POST Request)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (basic example - enhance for real applications)
    $productId = isset($_POST['product_id']) ? intval($_POST['product_id']) : null;
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Default quantity is 1

    if ($productId && $quantity > 0) {
        // 3. Find the product by ID
        $product = null;
        foreach ($products as $p) {
            if ($p['id'] == $productId) {
                $product = $p;
                break;
            }
        }

        if ($product) {
            // 4. Calculate the total price
            $totalPrice = $product['price'] * $quantity;

            // 5.  Store the order information (Simplified - Use a database for persistence)
            // In a real application, you'd store this in a database.
            echo "<h2>Order Confirmation</h2>";
            echo "<p>Product: " . $product['name'] . "</p>";
            echo "<p>Quantity: " . $quantity . "</p>";
            echo "<p>Total Price: $" . $totalPrice . "</p>";
            echo "<p>Thank you for your order!</p>";

            // Optional:  Session to track order
            session_start();
            $_SESSION['order_id'] = uniqid();  // Generate a unique order ID
            $_SESSION['product_id'] = $productId;
            $_SESSION['quantity'] = $quantity;
            $_SESSION['total_price'] = $totalPrice;
        } else {
            echo "<p>Product not found.</p>";
        }
    } else {
        echo "<p>Invalid input. Please select a product and enter a valid quantity.</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h2>Make a Purchase</h2>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Select Product:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $product) {
            echo "<option value=\"$product[id]\" >$product[name]</option>";
        }
        ?>
    </select>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1">

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --------------------  Products Data (Simulated) --------------------
$products = array(
    array("id" => 1, "name" => "T-Shirt", "price" => 20.00),
    array("id" => 2, "name" => "Jeans", "price" => 50.00),
    array("id" => 3, "name" => "Hat", "price" => 15.00),
);

// --------------------  Purchase Functionality --------------------

function createPurchase($cart, $conn) {
    // Validate cart data
    if (empty($cart)) {
        return false; // Empty cart
    }

    // Calculate total price
    $total = 0;
    foreach ($cart as $item_id => $quantity) {
        $product = getProductById($item_id, $conn);
        if ($product) {
            $total += $product['price'] * $quantity;
        } else {
            return false; // Product not found
        }
    }

    // Generate order ID (Simple example - improve for production)
    $order_id = md5(time());

    // Insert order details into the database (Replace 'orders' with your table name)
    $sql = "INSERT INTO orders (order_id, customer_id, total_amount) VALUES ('$order_id', 1, $total)"; // Assuming customer_id 1 for now
    if ($conn->query($sql) === TRUE) {
        // Insert order items into the order_items table
        foreach ($cart as $item_id => $quantity) {
            $sql_item = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', $item_id, $quantity)";
            if ($conn->query($sql_item) === TRUE) {
                echo "Order created successfully! Order ID: " . $order_id . "<br>";
            } else {
                echo "Error inserting order item: " . $conn->error . "<br>";
                return false;
            }
        }

        return true;
    } else {
        echo "Error creating order: " . $conn->error . "<br>";
        return false;
    }
}

// --------------------  Helper Functions --------------------

// Get product by ID
function getProductById($id, $conn) {
    global $products; // Access the global $products array

    foreach ($products as $product) {
        if ($product['id'] == $id) {
            return $product;
        }
    }
    return null;
}


// --------------------  Example Usage (Simulated Form Handling) --------------------

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart = array();
    // Process cart data (This is where you'd get data from a form or AJAX request)
    if (isset($_POST['product1_qty']) && isset($_POST['product2_qty']) && isset($_POST['product3_qty'])) {
        $cart['1'] = $_POST['product1_qty']; // Product ID 1
        $cart['2'] = $_POST['product2_qty']; // Product ID 2
        $cart['3'] = $_POST['product3_qty']; // Product ID 3
    }

    if (createPurchase($cart, $conn)) {
        echo "Purchase completed successfully!";
    } else {
        echo "Purchase failed.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Items</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product1_qty">T-Shirt (Quantity):</label>
    <input type="number" id="product1_qty" name="product1_qty" value="1">
    <br><br>

    <label for="product2_qty">Jeans (Quantity):</label>
    <input type="number" id="product2_qty" name="product2_qty" value="1">
    <br><br>

    <label for="product3_qty">Hat (Quantity):</label>
    <input type="number" id="product3_qty" name="product3_qty" value="1">
    <br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_username';
$dbPassword = 'your_password';

//  --  Product Data (Simulated for demonstration) --
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

//  --  Cart data (Simulated) --
$cart = [];
$cart_id = session_id();  // Use session ID as cart ID for demo
session_start();
$_SESSION['cart'] = $cart;


// Function to add to cart
function addToCart($productId, $quantity = 1)
{
    global $cart, $cart_id, $_SESSION;

    if (!isset($products[$productId])) {
        return "Product not found.";
    }

    if (!isset($cart[$productId])) {
        $cart[$productId] = ['quantity' => $quantity];
    } else {
        $cart[$productId]['quantity'] += $quantity;
    }
    session_start();
    $_SESSION['cart'] = $cart;
    return "Product added to cart.";
}


// Function to display the cart
function displayCart()
{
    session_start();
    $cart = $_SESSION['cart'];

    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $productId => $item) {
        $product = $products[$productId];
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $item['quantity'] . " = $" . ($product['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $total = 0;
    foreach ($cart as $productId => $item) {
        $product = $products[$productId];
        $total += $product['price'] * $item['quantity'];
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}


//  --  Purchase Functionality (Simulated) --
function processPurchase($productId, $quantity = 1)
{
    global $products, $cart;

    if (!isset($products[$productId])) {
        return "Product not found.";
    }

    if ($quantity <= 0) {
        return "Invalid quantity. Please enter a positive number.";
    }

    if ($quantity > $products[$productId]['quantity'] ) {
        return "Insufficient stock for this product.";
    }
    
    $order_id = uniqid(); // Unique order ID
    
    //  Simulate order processing
    echo "<h2>Order Summary</h2>";
    echo "<p>Order ID: " . $order_id . "</p>";
    echo "<p>Product: " . $products[$productId]['name'] . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Total Price: $" . ($products[$productId]['price'] * $quantity) . "</p>";
    
    //  Remove from cart
    $cart_id = session_id();
    session_start();
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }

    return "Order placed successfully!  Order ID: " . $order_id;
}


//  --  Example Usage (for demonstration and testing) --
// Add some products to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Validate input
    $quantity = (int)$_POST['quantity']; // Validate input
    $result = addToCart($productId, $quantity);
    echo "<p>" . $result . "</p>";
}

// Display the cart
displayCart();

// Simulate a purchase
if (isset($_POST['place_order'])) {
  $productId = (int)$_POST['product_id'];  // Validate input
  $quantity = (int)$_POST['quantity']; // Validate input
  $result = processPurchase($productId, $quantity);
  echo "<p>" . $result . "</p>";
}


?>


<?php

// This is a very basic example.  A production-ready implementation 
// would require a database, user authentication, error handling,
// validation, and more.

// --- Configuration (Replace with your actual values) ---
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Mug', 'price' => 10.00],
    3 => ['name' => 'Notebook', 'price' => 5.00],
];

$cart = []; // Initialize an empty cart
// --------------------------------------------------


// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart = null) {
    if ($cart === null) {
        $cart = [];  // Initialize the cart if it's null
    }

    if (isset($products[$productId])) {
        $product = $products[$productId];
        $cart[$productId] = $product['price'] * $quantity;
        return $cart;
    } else {
        return $cart; // Product not found
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $productId => $totalPrice) {
            echo "<li>" . $products[$productId]['name'] . ": $" . number_format($totalPrice, 2) . "</li>";
        }
        echo "</ul>";
        echo "<p><strong>Total: $" . number_format(array_sum($cart), 2) . "</p>";
    }
}

// ---  Example Usage (Simplified - simulates a purchase process) ---

// 1.  Simulate user adding items to the cart
addToCart(1, 2); // Add 2 T-Shirts
addToCart(2, 3); // Add 3 Mugs
addToCart(3, 1); // Add 1 Notebook


// 2. Display the cart
displayCart($cart);


// 3. Simulate a purchase confirmation (replace with actual payment processing)
echo "<p><strong>Order Confirmation:</strong></p>";
echo "<p>You have purchased: " . count($cart) . " items.</p>";
echo "<p>Thank you for your order!</p>";
?>


<?php

// Database connection details (Replace with your actual details)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";

//  Helper function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    // Handle database connection error.  Log or display error.
    error_log("Database Connection Error: " . $e->getMessage());
    die("Database connection failed.");
  }
}

// Function to create a new purchase
function createPurchase($product_id, $quantity, $customer_name, $customer_email) {
    $pdo = connectToDatabase();

    try {
        $stmt = $pdo->prepare("INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) VALUES ( :product_id, :quantity, :customer_name, :customer_email, NOW())");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':customer_name', $customer_name);
        $stmt->bindParam(':customer_email', $customer_email);

        $stmt->execute();
        return $pdo->lastInsertId(); // Returns the ID of the newly created purchase
    } catch (PDOException $e) {
        // Handle any database errors
        error_log("Purchase Creation Error: " . $e->getMessage());
        return false; // Indicate failure
    }
}

// Function to get purchase details by ID
function getPurchaseDetails($purchase_id) {
    $pdo = connectToDatabase();

    try {
        $stmt = $pdo->prepare("SELECT * FROM purchases WHERE id = :purchase_id");
        $stmt->bindParam(':purchase_id', $purchase_id);
        $stmt->execute();
        $purchase = $stmt->fetch(PDO::FETCH_ASSOC);  // Fetch as an associative array
        return $purchase;
    } catch (PDOException $e) {
        // Handle database errors
        error_log("Purchase Retrieval Error: " . $e->getMessage());
        return false;
    }
}


//  Example Usage (You'd typically handle this through a form submission, but this shows how it's used)

// --- Sample Data (For Testing) ---
$product_id = 1;
$quantity = 2;
$customer_name = "John Doe";
$customer_email = "john.doe@example.com";

// --- Create the Purchase ---
$newPurchaseId = createPurchase($product_id, $quantity, $customer_name, $customer_email);

if ($newPurchaseId) {
  echo "Purchase created successfully!  New Purchase ID: " . $newPurchaseId . "<br>";

  //  Example: Retrieve details of the purchase
  $purchaseDetails = getPurchaseDetails($newPurchaseId);
  if ($purchaseDetails) {
    echo "Purchase Details:<br>";
    echo "Product ID: " . $purchaseDetails['product_id'] . "<br>";
    echo "Quantity: " . $purchaseDetails['quantity'] . "<br>";
    echo "Customer Name: " . $purchaseDetails['customer_name'] . "<br>";
    echo "Customer Email: " . $purchaseDetails['customer_email'] . "<br>";
    echo "Purchase Date: " . $purchaseDetails['purchase_date'] . "<br>";
  } else {
    echo "Error retrieving purchase details.<br>";
  }
} else {
  echo "Purchase creation failed.<br>";
}


// --- Database Table Creation (Run this once to set up the database) ---
// This is just a sample, adjust data types and constraints as needed
/*
CREATE TABLE purchases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/
?>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// Ensure the database connection works
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to check if a product is in the cart
function isInCart($product_id) {
  global $conn;
  if (isset($_SESSION['cart'][$product_id]['quantity'])) {
    return true;
  } else {
    return false;
  }
}

// Function to update cart quantity
function updateCartQuantity($product_id, $quantity) {
  global $conn;

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    $_SESSION['cart'][$product_id]['quantity'] = max(0, $_SESSION['cart'][$product_id]['quantity']); // Ensure quantity doesn't go below 0
  } else {
    // If product not in cart, add it with the specified quantity
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

// Function to remove a product from the cart
function removeProductFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get cart total
function getCartTotal($cart) {
    $total = 0;
    foreach ($cart as $product_id => $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Handle adding to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Validate quantity (optional, but recommended)
  if (empty($quantity) || $quantity <= 0) {
    echo "<p style='color:red;'>Invalid quantity.</p>";
    exit;
  }

  updateCartQuantity($product_id, $quantity);
  echo "<p>Product added to cart.</p>";
}

// Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeProductFromCart($product_id);
  echo "<p>Product removed from cart.</p>";
}

// Handle updating quantity
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Validate quantity
  if (empty($quantity) || $quantity <= 0) {
    echo "<p style='color:red;'>Invalid quantity.</p>";
    exit;
  }
  updateCartQuantity($product_id, $quantity);
}


// Display the cart contents
$cart_items = [];
if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $item) {
        // Fetch product details from your database
        $product_query = "SELECT * FROM products WHERE id = ?";
        $stmt = $conn->prepare($product_query);
        $stmt->bind_param("i", $product_id);
        $stmt->execute();
        $result = $stmt->get_result();
        $product = $result->fetch_assoc();

        if ($product) {
            $cart_items[] = [
                'id' => $product['id'],
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $item['quantity']
            ];
        }
    }
}

$cart_total = getCartTotal($cart_items);


?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)) {
      echo "<p>Your cart is empty.</p>";
    } else {
        echo "<table class='cart-items'>";
        echo "<tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

        foreach ($cart_items as $item) {
          echo '<tr class="cart-item">';
          echo "<td>" . $item['name'] . "</td>";
          echo "<td>$" . $item['price'] . "</td>";
          echo "<td>" . $item['quantity'] . "</td>";
          echo "<td>$" . $item['quantity'] * $item['price'] . "</td>";
          echo "<td><form method='post'><input type='hidden' name='product_id' value='" . $item['id'] . "'> <button type='submit'>Remove</button></form></td>";
          echo "</tr>";
        }

        echo "</table>";
        echo "<p><strong>Total: $" . $cart_total . "</strong></p>";
    }

    ?>

  <hr>

  <h2>Add to Cart</h2>
  <?php if (empty($cart_items)) {
        echo "<form method='post'>
                  <label for='product_id'>Product ID:</label>
                  <input type='number' id='product_id' name='product_id' required>
                  <label for='quantity'>Quantity:</label>
                  <input type='number' id='quantity' name='quantity' value='1' min='1'>
                  <button type='submit' name='add_to_cart'>Add to Cart</button>
                </form>";
    }
    ?>

</body>
</html>


<?php

// Configuration (Database connection details - ADJUST THESE!)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate input (Important for security!)
    $firstName = trim($_POST["firstName"]);
    $lastName = trim($_POST["lastName"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]); // Convert to integer
    $price = floatval($_POST["price"]); // Convert to float

    // Validate required fields
    if (empty($firstName) || empty($lastName) || empty($email) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields correctly.";
    } else {
        // Sanitize inputs (basic - improve as needed for production)
        $firstName = filter_var($firstName, FILTER_SANITIZE_STRING);
        $lastName = filter_var($lastName, FILTER_SANITIZE_STRING);
        $email = filter_var($email, FILTER_SANITIZE_EMAIL);

        // Database connection
        $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO purchases (firstName, lastName, email, quantity, price) VALUES ('$firstName', '$lastName', '$email', $quantity, $price)";

        if ($conn->query($sql)) {
            $success = "Purchase added successfully!";
        } else {
            $error = "Error adding purchase: " . $conn->error;
        }

        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Make a Purchase</h1>

<?php
if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
} elseif (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
}
?>

<form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="firstName">First Name:</label>
    <input type="text" id="firstName" name="firstName" value="<?php echo htmlspecialchars($firstName); ?>">
    <br><br>

    <label for="lastName">Last Name:</label>
    <input type="text" id="lastName" name="lastName" value="<?php echo htmlspecialchars($lastName); ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo htmlspecialchars($email); ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="<?php echo htmlspecialchars($quantity); ?>">
    <br><br>

    <label for="price">Price per Item:</label>
    <input type="number" id="price" name="price" step="0.01" min="0" value="<?php echo htmlspecialchars($price); ?>">
    <br><br>

    <button type="submit">Place Order</button>
</form>

<br>
<a href="view_purchases.php">View Purchases</a>  <!-- Link to a page to display purchases -->

</body>
</html>


<?php

// Database connection (same as above - adjust if needed)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_database_name";

$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// SQL query to select all purchases
$sql = "SELECT * FROM purchases";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<h2>Purchase History</h2>";
    while ($row = $result->fetch_assoc()) {
        echo "<h3>Purchase Details</h3>";
        echo "<p>First Name: " . htmlspecialchars($row["firstName"]) . "</p>";
        echo "<p>Last Name: " . htmlspecialchars($row["lastName"]) . "</p>";
        echo "<p>Email: " . htmlspecialchars($row["email"]) . "</p>";
        echo "<p>Quantity: " . htmlspecialchars($row["quantity"]) . "</p>";
        echo "<p>Price per Item: " . htmlspecialchars($row["price"]) . "</p>";
        echo "<hr>";
    }
} else {
    echo "<p>No purchases found.</p>";
}

$conn->close();
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize input (VERY IMPORTANT)
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $product_id = filter_input(INPUT_POST, "product_id", FILTER_VALIDATE_INT);

  // Check if required fields are filled
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "Please fill in all the required fields.";
  } else {
    // Validate email format (more robust validation can be added)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      $error = "Invalid email format.";
    }
    // Validate quantity (e.g., ensure it's a positive integer)
    if ($quantity <= 0) {
      $error = "Please enter a valid positive quantity.";
    }
    // Validate product ID
    if (!is_numeric($product_id)) {
        $error = "Invalid product ID. Must be a number.";
    }

    // If no errors, proceed with the purchase
    else {
      // Database query (using prepared statements - crucial for security!)
      $conn = new mysqli($host, $username, $password, $database);

      if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
      }

      $sql = "INSERT INTO orders (name, email, product_id, quantity) VALUES (?, ?, ?, ?)";
      $stmt = $conn->prepare($sql);
      $stmt->bind_param("ssii", $name, $product_id, $quantity);
      $stmt->execute();

      if ($stmt) {
        $success = "Purchase successful! Thank you, " . $name . "!";
        $stmt->close();
      } else {
        $error = "Error processing your purchase.";
        $stmt->close();
      }
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
  } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <button type="submit">Place Order</button>
  </form>

  <?php if (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
  } ?>

</body>
</html>


<?php
session_start();

// Database connection (Replace with your actual credentials)
$dbHost = 'localhost';
$dbUser = 'your_db_user';
$dbPass = 'your_db_password';
$dbName = 'your_database_name';

// Connect to the database
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to sanitize input (Important for security!)
function sanitizeInput($data) {
  global $conn;
  $data = trim($data);
  $data = stripslashes($data);
  $data = htmlspecialchars($data);
  return $data;
}


// Handle the purchase request
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = sanitizeInput($_POST["product_id"]);
  $quantity = sanitizeInput($_POST["quantity"]);
  $customer_name = sanitizeInput($_POST["customer_name"]);
  $customer_email = sanitizeInput($_POST["customer_email"]);

  // Validate input (Add more validation as needed)
  if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
    $error = "All fields are required.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Invalid quantity. Please enter a positive number.";
  } else {
    // Prepare SQL query (Using prepared statements - VERY IMPORTANT!)
    $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email)
            VALUES (?, ?, ?, ?)";

    // Prepare statement
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      // Bind parameters
      $stmt->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);

      // Execute the statement
      if ($stmt->execute()) {
        $success = "Order placed successfully!";
      } else {
        $error = "Error placing order: " . $stmt->error;
      }

      // Close the statement
      $stmt->close();
    } else {
      $error = "Error preparing statement.";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
  <style>
    body { font-family: sans-serif; }
    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
    .error { color: red; }
    .success { color: green; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Purchase Product</h1>

    <?php if (isset($error)) { echo "<p class='error'>" . $error . "</p>"; } ?>
    <?php if (isset($success)) { echo "<p class='success'>" . $success . "</p>"; } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <label for="product_id">Product ID:</label>
      <input type="number" id="product_id" name="product_id" required><br><br>

      <label for="quantity">Quantity:</label>
      <input type="number" id="quantity" name="quantity" required><br><br>

      <label for="customer_name">Customer Name:</label>
      <input type="text" id="customer_name" name="customer_name" required><br><br>

      <label for="customer_email">Customer Email:</label>
      <input type="email" id="customer_email" name="customer_email" required><br><br>

      <input type="submit" value="Place Order">
    </form>
  </div>
</body>
</html>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Connection to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a new purchase
function addPurchase($productId, $quantity, $userId) {
  global $conn;

  // Validate input (important for security)
  if (!$productId || !$quantity || !$userId) {
    return false; // Or throw an exception
  }

  // Sanitize inputs to prevent SQL injection
  $productId = mysqli_real_escape_string($conn, $productId);
  $quantity = (int)$quantity; // Convert quantity to integer
  $userId = mysqli_real_escape_string($conn, $userId);


  // Check if the product exists
  $check_query = "SELECT id FROM products WHERE id = '$productId'";
  $result = $conn->query($check_query);

  if ($result->num_rows > 0) {
    // Product exists, proceed with adding the purchase
    $sql = "INSERT INTO purchases (product_id, quantity, user_id) VALUES ('$productId', '$quantity', '$userId')";

    if ($conn->query($sql) === TRUE) {
      return true;
    } else {
      return false;
    }
  } else {
    return false; // Product does not exist
  }
}

// Function to handle the purchase request (example)
function handlePurchaseRequest() {
  // Get form data (e.g., from a POST request)
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  $userId = $_POST['user_id']; // Get user ID from the session or wherever you store it

  // Validate input (more robust validation is recommended)
  if (!is_numeric($quantity) || $quantity <= 0) {
      echo "Invalid quantity.";
      return;
  }

  // Add the purchase
  if (addPurchase($productId, $quantity, $userId)) {
      echo "Purchase successful! Order ID: " . $conn->insert_id;  // Get the inserted ID
  } else {
      echo "Purchase failed.";
  }
}

// Example usage (if this is a web page)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  handlePurchaseRequest();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Add to Cart</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <input type="hidden" name="user_id" value="123"  /> <!-- Replace 123 with the actual user ID -->
    <input type="submit" value="Add to Cart">
  </form>

</body>
</html>


<?php

// --- Data Storage (Replace with a database for real-world scenarios) ---
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20, 'quantity' => 50],
  2 => ['name' => 'Jeans', 'price' => 50, 'quantity' => 30],
  3 => ['name' => 'Hat', 'price' => 15, 'quantity' => 100]
];

$cart = []; // Initialize an empty cart

// --- Functions ---

/**
 * Displays the product catalog.
 */
function displayProductCatalog() {
  echo "<h2>Available Products</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Name</th><th>Price</th><th>Quantity</th></tr>";

  foreach ($products as $id => $product) {
    echo "<tr>";
    echo "<td>" . $product['name'] . "</td>";
    echo "<td>$" . $product['price'] . "</td>";
    echo "<td>" . $product['quantity'] . "</td>";
    echo "</tr>";
  }
  echo "</table>";
}

/**
 * Adds a product to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity to add.
 */
function addToCart(int $productId, int $quantity) {
  if (array_key_exists($productId, $products)) {
    if ($quantity > 0) {
      $product = $products[$productId];

      // Check if the product is already in the cart
      foreach ($cart as &$item) {
        if ($item['productId'] == $productId) {
          $item['quantity'] += $quantity;
          echo "<p>Added " . $quantity . " " . $product['name'] . " to cart.</p>";
          break;
        }
      }

      // If the product is not in the cart, add it
      if (!in_array($productId, array_column($cart, 'productId'))) {
        $cart[] = ['productId' => $productId, 'quantity' => $quantity, 'productName' => $product['name']]; //Store product name for display
        echo "<p>Added " . $quantity . " " . $product['name'] . " to cart.</p>";
      }
    } else {
      echo "<p>Invalid quantity. Please enter a positive number.</p>";
    }
  } else {
    echo "<p>Product not found.</p>";
  }
}


/**
 * Displays the contents of the shopping cart.
 */
function displayCart() {
  echo "<h2>Shopping Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    $total = 0;

    foreach ($cart as $item) {
      $product = $products[$item['productId']];
      $itemTotal = $product['price'] * $item['quantity'];
      $total += $itemTotal;
      echo "<tr>";
      echo "<td>" . $product['name'] . "</td>";
      echo "<td>$" . $product['price'] . "</td>";
      echo "<td>" . $item['quantity'] . "</td>";
      echo "<td>$" . $itemTotal . "</td>";
      echo "<td><button onclick='removeFromCart(" . $item['productId'] . ")'>Remove</button></td>"; //Use onclick to call the javascript function
      echo "</tr>";
    }
    echo "</table>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
  }
}



// --- Handle User Input (Simulated) ---

if (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {
  $productId = (int)$_GET['productId'];
  $quantity = (int)$_GET['quantity'];
  addToCart($productId, $quantity);
}

// --- Display the Page ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple E-Commerce</title>
</head>
<body>

  <h1>Welcome to Our Store</h1>

  <?php displayProductCatalog(); ?>

  <form method="GET" action="">
    <label for="productId">Product ID:</label>
    <select name="productId" id="productId">
      <?php
      foreach ($products as $id => $product) {
        echo "<option value='" . $id . "'>" . $id . "</option>";
      }
      ?>
    </select>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <button type="submit" name="action" value="add_to_cart">Add to Cart</button>
  </form>

  <?php displayCart(); ?>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle product purchase
function purchaseProduct($productId, $quantity, $user_id) {
  // 1. Validate Inputs
  if (!is_numeric($productId) || !is_numeric($quantity) || !is_numeric($user_id)) {
    return "Invalid input. Please ensure product ID, quantity, and user ID are numbers.";
  }

  if ($quantity <= 0) {
    return "Invalid quantity. Quantity must be greater than zero.";
  }

  // 2. Retrieve Product Details
  $sql = "SELECT id, name, price FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $productId); // 'i' indicates integer
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    return "Product not found.";
  }
  $product = $result->fetch_assoc();

  // 3. Calculate Total Price
  $totalPrice = $product['price'] * $quantity;

  // 4. Update Inventory (Decrease Product Quantity)
  $update_sql = "UPDATE products SET quantity = quantity - ? WHERE id = ?";
  $update_stmt = $conn->prepare($update_sql);
  $update_stmt->bind_param("is", $quantity, $productId);
  if ($update_stmt->execute() === false) {
    return "Error updating inventory. " . $conn->error;
  }


  // 5.  Create Purchase Record (Add to Order Table - You need to define this table)
  //  (Example table structure:  order_id (INT, AUTO_INCREMENT), user_id (INT), product_id (INT), quantity (INT), order_date (DATETIME), total_price (DECIMAL))
  $order_sql = "INSERT INTO orders (user_id, product_id, quantity, order_date, total_price)
                VALUES (?, ?, ?, NOW(), ?)"; // NOW() gets the current timestamp
  $insert_stmt = $conn->prepare($order_sql);
  $insert_stmt->bind_param("isd", $user_id, $productId, $quantity, $totalPrice);
  if ($insert_stmt->execute() === false) {
    return "Error creating order record. " . $conn->error;
  }

  // 6. Return Success Message
  return "Purchase successful! Order ID: " . $conn->insert_id; // insert_id gets the auto-incremented order ID
}


// ----- Example Usage (Form Handling) -----

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $productId = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $user_id = $_POST["user_id"];  // Assuming you have a user ID (e.g., from login)

  $result = purchaseProduct($productId, $quantity, $user_id);

  echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <label for="user_id">User ID:</label>
    <input type="number" id="user_id" name="user_id" required>
    <br><br>

    <button type="submit">Purchase</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPassword = "your_password";
$dbName = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate inputs (This is a basic example - enhance with more robust validation)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);

    // Perform input validation
    if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields and ensure quantities and prices are positive values.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Process the purchase
        $order_total = $quantity * $price;

        // Generate an order ID (simple example - improve with a more sophisticated system)
        $order_id = uniqid();

        //  Simulate saving to a database (Replace with your database interaction logic)
        $sql = "INSERT INTO orders (order_id, name, email, quantity, price, order_total)
                VALUES ('$order_id', '$name', '$email', $quantity, $price, $order_total)";

        // Execute the SQL query
        $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        if ($conn->query($sql) === TRUE) {
            $message = "Order placed successfully! Your order ID is: $order_id";
        } else {
            $message = "Error placing order.  Query: " . $sql . "<br>Error: " . $conn->error;
        }

        // Close the database connection
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Form</h1>

<?php if (isset($message)) {
    echo "<p style='color: green;'>$message</p>";
} ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required>

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1">

    <br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" min="0.01" step="0.01" value="10.00">  <!-- Adjust default value -->

    <br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

// Function to add a new purchase
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
  // Validate inputs (Crucial for security!)
  if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
    return false; // Indicate failure
  }

  // Sanitize inputs to prevent SQL injection
  $product_id = $conn->real_escape_string($product_id);
  $quantity = $conn->real_escape_string($quantity);
  $customer_name = $conn->real_escape_string($customer_name);
  $customer_email = $conn->real_escape_string($customer_email);

  // --- Query to Add Purchase ---
  $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date)
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())";

  if ($conn->query($sql) === TRUE) {
    return true; // Indicate success
  } else {
    error_log("Query failed: " . $sql . " " . $conn->error); // Log the error for debugging
    return false;
  }
}


// --- Example Usage (This is just for demonstration) ---

// 1. Add a Purchase
$product_id = "123"; // Replace with a valid product ID
$quantity = "2";
$customer_name = "John Doe";
$customer_email = "john.doe@example.com";

if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {
  echo "Purchase added successfully!";
} else {
  echo "Failed to add purchase.";
}


// --- Sample Database Table Structure ---
// You need to create this table in your database:

/*
CREATE TABLE purchases (
    purchase_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/

?>


<?php

// Database Connection (Replace with your database details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Initialize session variables
session_start();

// --- Functions ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @return void
 */
function addToCart($product_id) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity']++;
  } else {
    // If it doesn't exist, add it to the cart with quantity 1
    $_SESSION['cart'][$product_id] = ['quantity' => 1];
  }
}

/**
 * Retrieves the cart contents.
 *
 * @return array  An array representing the cart contents.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for safety
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Calculates the total cart value.
 *
 * @return float The total value.
 */
function calculateCartTotal() {
  $total = 0;
  $cart = getCart();
  foreach ($cart as $product_id => $item) {
    $product_id = (int)$product_id;  // Ensure product_id is an integer

    // Fetch product price from a database (replace with your actual query)
    $product_price = $this->getProductPrice($product_id); // Assuming a getProductPrice() function
    $total += $product_price * $item['quantity'];
  }
  return round($total, 2); // Round to 2 decimal places for currency
}


/**
 * A helper function to fetch product price from the database.
 * This is a placeholder.  Replace with your actual database query.
 *
 * @param int $product_id
 * @return float
 */
function getProductPrice($product_id) {
    // Replace this with your actual database query to fetch the price
    // Example:
    // $query = "SELECT price FROM products WHERE id = ?";
    // $stmt = $conn->prepare($query);
    // $stmt->bind_param("i", $product_id);
    // $stmt->execute();
    // $result = $stmt->get_result();
    // $row = $result->fetch_assoc();
    // return $row['price'];

    // Placeholder - returns a hardcoded price for demonstration purposes
    return 50.00; //  Example product price
}



// --- Purchase Functionality ---

// Example: Handle adding to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
  addToCart($product_id);
  $message = "Product added to cart.";
}

// Example: Handle updating cart quantity
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    updateCartQuantity($product_id, $quantity);
    $message = "Cart updated.";
}

// Example: Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = (int)$_POST['product_id'];
  removeCartItem($product_id);
  $message = "Product removed from cart.";
}



// --- Display Cart (Example - can be improved with HTML/CSS) ---

$cart = getCart();
$total = calculateCartTotal();

echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p>Total: $" . $total . "</p>";
}

?>


<?php

// Database Connection (Replace with your database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Function to add a product to the cart
function addToCart($product_id, $quantity, $user_id = null) {
    global $pdo;

    // Check if the user is logged in (optional - for user-specific carts)
    if ($user_id) {
        //  Implement user authentication logic here.
        //  For this example, we'll assume the user is logged in (replace this check)
        //  You'd typically check for a session or cookie with a valid user ID.
        $stmt = $pdo->prepare("SELECT * FROM carts WHERE user_id = :user_id");
        $stmt->execute(['user_id' => $user_id]);
        $cart = $stmt->fetch(PDO::FETCH_ASSOC);
    } else {
        $cart = null; // Guest cart
    }

    if ($cart) {
        // Product already in the cart, update the quantity
        $product_id_exists = false;
        foreach ($cart['items'] as $key => $item) {
            if ($item['product_id'] == $product_id) {
                $item['quantity'] += $quantity;
                $item['total_price'] = $item['product_price'] * $item['quantity'];
                $cart['items'][$key] = $item;
                $product_id_exists = true;
                break;
            }
        }

        if (!$product_id_exists) {
            $cart['items'][] = [
                'product_id' => $product_id,
                'quantity' => $quantity,
                'product_price' => getProductPrice($product_id), // Fetch product price
                'total_price' => getProductPrice($product_id) * $quantity
            ];
        }
    } else {
        // Create a new cart for the user
        $cart = [
            'user_id' => $user_id,
            'items' => [[
                'product_id' => $product_id,
                'quantity' => $quantity,
                'product_price' => getProductPrice($product_id),
                'total_price' => getProductPrice($product_id) * $quantity
            ]]
        ];
    }

    // Update the cart in the database
    if ($user_id) {
        $stmt = $pdo->prepare("UPDATE carts SET items = :items WHERE user_id = :user_id");
        $stmt->execute(['items' => json_encode($cart['items']), 'user_id' => $user_id]);
    } else {
        // For guest carts, we don't store them in the database, just in session
        // This is simplified and requires session handling in your front-end.
        // You'd typically store the cart as a session variable.
        // The database store of a guest cart is only for persistent storage across multiple sessions
        //  For this example, we're creating the cart in memory (which isn't a production-ready solution)
        $cart['user_id'] = null;
    }

    return $cart;
}


// Function to get a product's price (you'll need to fetch this from your database)
function getProductPrice($product_id) {
    // Replace with your database query to retrieve the product price
    // This is just a placeholder example
    // In a real application, you'd fetch the product price from your database.

    //Example:
    $product_prices = [
        1 => 10.00,
        2 => 20.00,
        3 => 5.00
    ];
    return $product_prices[$product_id] ?? 0; // Return 0 if not found.
}



// Function to display the shopping cart
function displayCart($cart) {
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart['items'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart['items'] as $item) {
        echo "<li>";
        echo "Product ID: " . $item['product_id'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Price: $" . $item['product_price'] . "<br>";
        echo "Total: $" . $item['total_price'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example Usage (Simulated Purchase)
$product_id = 1;
$quantity = 2;

//Add to cart
$cart = addToCart($product_id, $quantity);
displayCart($cart);


?>


<?php
session_start();

// Database Connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "root";
$db_password = "";

// Database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Initialize cart if not already
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------- Functions ---------------------

// Function to add item to cart
function add_to_cart($conn, $product_id, $quantity) {
  global $db_host, $db_name;

  // Check if product exists (basic validation - can be improved)
  $product_query = "SELECT id, name, price FROM products WHERE id = ?";
  $stmt = $conn->prepare($product_query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    return false; // Product not found
  }
  $product = $result->fetch_assoc();

  // Add to cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'name' => $product['name'],
      'price' => $product['price']
    );
  }
  return true;
}

// Function to remove item from cart
function remove_from_cart($conn, $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
  return true;
}

// Function to update quantity of item in cart
function update_cart_quantity($conn, $product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
  return true;
}


// Function to get cart total
function calculate_cart_total($conn) {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// ---------------------  Handler Functions  ---------------------

// Handle adding to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  add_to_cart($conn, $product_id, $quantity);
}

// Handle removing item from cart
if (isset($_GET['remove_from_cart'])) {
  remove_from_cart($conn, $_GET['remove_from_cart']);
}

// Handle updating quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_cart_quantity($conn, $product_id, $new_quantity);
}


// ---------------------  Display Cart  ---------------------

// Display cart items
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . number_format($item['price'], 2) . " ";
    echo "Quantity: " . $item['quantity'];
    echo "<form method='post' action=''>";
    echo "<input type='hidden' name='product_id' value='" . $item['id'] . "'>";
    echo "<input type='hidden' name='quantity' value='" . $item['quantity'] . "'>";
    echo "<input type='submit' value='Remove'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . number_format(calculate_cart_total($conn), 2) . "</strong></p>";
}


// ---------------------  End of Script  ---------------------

// Close database connection
$conn->close();
?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the product already exists in the cart
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Product exists, update the quantity
    $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
  } else {
    // Product doesn't exist, add a new entry
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
  }

  if ($conn->query($query) === TRUE) {
    return true;
  } else {
    return false;
  }
}


// Function to get the cart contents
function getCartContents($conn) {
    $query = "SELECT * FROM cart";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $cart_contents = array();
        while($row = $result->fetch_assoc()) {
            $cart_contents[] = $row;
        }
        return $cart_contents;
    } else {
        return array();
    }
}


// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
  $query = "DELETE FROM cart WHERE product_id = '$product_id'";

  if ($conn->query($query) === TRUE) {
    return true;
  } else {
    return false;
  }
}



// ======================  Purchase Logic (Simplified)  =========================

//  This is a simplified example. A real-world purchase process would involve:
//  - User Authentication
//  - Payment Processing (e.g., PayPal, Stripe)
//  - Order Confirmation Emails
//  - Inventory Management

// Example:  Simulating a Purchase (Empty cart is assumed)
if (isset($_POST['purchase_button'])) {
    // Check if the cart is empty
    $cart_contents = getCartContents($conn);
    if (empty($cart_contents)) {
        echo "<p>Your cart is empty.  Nothing to purchase.</p>";
    } else {
        // Simulate purchase processing
        echo "<p><b>Purchase Initiated!</b></p>";
        echo "<p>Items in your cart:</p>";

        foreach ($cart_contents as $item) {
            echo "Product ID: " . $item['product_id'] . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            echo "--------------------<br>";
        }

        // Clear the cart after purchase (optional)
        // This would typically be handled on the server-side after successful processing
        // For demonstration purposes, we'll do it here.  This is not ideal for production.
        $conn->query("DELETE FROM cart");
        echo "<p>Cart cleared.</p>";
    }
}

// ======================  Display Cart and Purchase Button ====================
$cart_contents = getCartContents($conn);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart-item { margin-bottom: 10px; }
        .cart-item img { width: 50px; height: 50px; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (!empty($cart_contents)) { ?>
    <div class="cart-table">
        <table>
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($cart_contents as $item) {
                    $product_id = $item['product_id'];
                    $quantity = $item['quantity'];
                    $product_name = $item['product_name']; // Assuming you have a product_name field
                    $product_price = $item['product_price'];

                    echo '<tr class="cart-item">
                                <td class="cart-item"><img src="images/' . $product_id . '.jpg" alt="' . $product_name . '"></td>
                                <td class="cart-item">' . $product_name . '</td>
                                <td class="cart-item">' . $quantity . '</td>
                                <td class="cart-item">' . $product_price . '</td>
                            </tr>';
                } ?>
            </tbody>
        </table>
    </div>

    <form method="post">
        <button type="submit" name="purchase_button">Purchase Now</button>
    </form>
<?php } else {
    echo "<p>Your cart is empty.  Nothing to purchase.</p>";
} ?>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

// Start the session
session_start();

// Function to connect to the database
function connectToDatabase() {
  try {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    $conn->set_charset("utf8"); // Set character set for proper handling of special characters
    return $conn;
  } catch (Exception $e) {
    echo "Database connection failed: " . $e->getMessage();
    exit;
  }
}


// Function to handle the purchase process
function processPurchase($order_data) {
  $conn = connectToDatabase();

  if (!$conn) {
    return false;
  }

  // Sanitize input - VERY IMPORTANT to prevent SQL injection
  $product_id = mysqli_real_escape_string($conn, $order_data['product_id']);
  $quantity = mysqli_real_escape_string($conn, $order_data['quantity']);
  $customer_name = mysqli_real_escape_string($conn, $order_data['customer_name']);
  $customer_email = mysqli_real_escape_string($conn, $order_data['customer_email']);

  // Prepare the SQL query
  $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) 
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())";

  // Execute the query
  $result = $conn->query($sql);

  if ($result) {
    // Optionally update product stock (requires product_id and quantity in your product table)
    // Example:
    // $update_sql = "UPDATE products SET stock = stock - $quantity WHERE id = $product_id";
    // $update_result = $conn->query($update_sql);
    // if (!$update_result) {
    //    error_log("Failed to update product stock: " . $conn->error);
    // }

    // Display success message
    echo "<p>Order placed successfully! Order ID: " . $conn->insert_id . "</p>";
    
    // You could also redirect the user to a confirmation page
    // header("Location: confirmation.php");
    // exit;
    
  } else {
    echo "<p>Error placing order: " . $conn->error . "</p>";
  }
  $conn->close();
}

// ---  Handling the form submission (e.g., from a purchase form)  ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Check if the form has been submitted
  if (isset($POST['submit'])) {
    // Validate and sanitize input (important!)
    $product_id = mysqli_real_escape_string($conn, $_POST['product_id']);
    $quantity = mysqli_real_escape_string($conn, $_POST['quantity']);
    $customer_name = mysqli_real_escape_string($conn, $_POST['customer_name']);
    $customer_email = mysqli_real_escape_string($conn, $_POST['customer_email']);

    // Check if product_id is set - add more validation as needed
    if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
      echo "<p>Please fill in all the fields.</p>";
    } else {
      // Process the order
      processPurchase($_POST);
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase an Item</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" name="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Configuration
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
    4 => ['name' => 'Monitor', 'price' => 300],
];

$cart = []; // Initialize an empty cart

// Function to display the product catalog
function displayProductCatalog() {
    echo "<h1>Product Catalog</h1>";
    foreach ($products as $id => $product) {
        echo "<p><strong>" . $product['name'] . "</strong> - $" . $product['price'] . "</p>";
        echo "<form method='post' action=''>";
        echo "<input type='hidden' name='product_id' value='" . $id . "'>";
        echo "<input type='submit' value='Add to Cart'>";
        echo "</form>";
    }
}

// Function to add a product to the cart
function addToCart($product_id) {
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $cart[] = $product;
        echo "<p>Added '" . $product['name'] . "' to cart.</p>";
    } else {
        echo "<p>Product ID not found.</p>";
    }
}

// Function to display the cart
function displayCart() {
    echo "<h1>Shopping Cart</h1>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
        }
        echo "</ul>";

        // Calculate total price
        $total = 0;
        foreach ($cart as $item) {
            $total += $item['price'];
        }
        echo "<p><strong>Total: $" . $total . "</strong></p>";
    }
}

// Handle form submission to add to cart
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id'])) {
        addToCart($_POST['product_id']);
    }
}

// Display the page content
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase</title>
</head>
<body>

    <h1>Welcome to Our Store</h1>

    <?php displayProductCatalog(); ?>

    <?php displayCart(); ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Important for security)
    $name = trim($_POST["name"]);
    $quantity = (int)($_POST["quantity"]);
    $price = (float)($_POST["price"]);

    // Sanitize input (Important for security)
    $name = htmlspecialchars($name);
    $quantity = (int)$quantity;
    $price = (float)$price;

    // Check if validation passes (Example - you can add more validation)
    if (empty($name) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields and ensure quantity and price are positive values.";
    } else {
        // Add the item to the cart
        $cart_id = session_id(); // Use session ID as cart ID
        $sql = "INSERT INTO cart (cart_id, product_name, quantity, price) VALUES ('$cart_id', '$name', '$quantity', '$price')";

        // Execute the query
        $result = mysqli_query($db_connection, $sql);

        if ($result) {
            $success = "Item added to cart successfully!";
        } else {
            $error = "Error adding item to cart. " . mysqli_error($db_connection);
        }
    }
} else {
    $success = "";
    $error = "";
}

// Connect to the database
$db_connection = mysqli_connect($db_host, $db_user, $db_password, $db_name);

// Check connection
if (!$db_connection) {
    die("Connection failed: " . mysqli_connect_error());
}

// Function to display the cart contents (Simplified)
function displayCartContents($db_connection) {
    //  In a real application, you'd retrieve cart items based on the session ID.
    //  This is a simplified example to demonstrate a basic cart display.
    $cart_items = array(
        array("id" => 1, "name" => "T-Shirt", "quantity" => 2, "price" => 20.00),
        array("id" => 2, "name" => "Jeans", "quantity" => 1, "price" => 50.00),
    );

    echo "<h2>Cart Contents:</h2>";
    if (empty($cart_items)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart_items as $item) {
            echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
        }
        echo "</ul>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Product Name:</label>
        <input type="text" id="name" name="name" placeholder="Enter product name" value="<?php echo htmlspecialchars($name); ?>">
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" value="<?php echo htmlspecialchars($quantity); ?>">
        <br><br>

        <label for="price">Price:</label>
        <input type="number" id="price" name="price" placeholder="Enter price" value="<?php echo htmlspecialchars($price); ?>">
        <br><br>

        <input type="submit" value="Add to Cart">
    </form>

    <br><br>

    <?php displayCartContents($db_connection); ?>

    <p><?php echo $success; ?> <?php echo $error; ?></p>

</body>
</html>


<?php

// This is a simplified example.  A real-world e-commerce application would be much more complex.
// This example demonstrates the basic structure and concepts.

// Data (simulated database)
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20, 'stock' => 10],
  2 => ['name' => 'Jeans', 'price' => 50, 'stock' => 5],
  3 => ['name' => 'Hat', 'price' => 15, 'stock' => 20]
];

$cart = []; // Array to hold the items in the customer's cart

// Function to display the products
function displayProducts($products) {
  echo "<h2>Available Products</h2>";
  echo "<ul>";
  foreach ($products as $id => $product) {
    echo "<li>";
    echo "<h3>" . $product['name'] . "</h3>";
    echo "Price: $" . $product['price'] . "<br>";
    echo "Stock: " . $product['stock'] . "<br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $id . "'>";
    echo "<button type='submit'>Add to Cart</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}

// Function to add a product to the cart
function addToCart($product_id, $cart) {
  if (isset($products[$product_id])) {
    if ($products[$product_id]['stock'] > 0) {
      $product = $products[$product_id];
      $cart[] = $product;
      $product['stock']--; // Update stock
      echo "<p>Added '" . $product['name'] . "' to cart.</p>";
    } else {
      echo "<p>Sorry, this product is out of stock.</p>";
    }
  } else {
    echo "<p>Product ID not found.</p>";
  }
}

// Function to display the cart
function displayCart($cart) {
  echo "<h2>Your Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart as $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    // Calculate total price
    $totalPrice = 0;
    foreach ($cart as $item) {
      $totalPrice += $item['price'];
    }
    echo "<p><strong>Total Price: $" . $totalPrice . "</strong></p>";
  }
}

// Handle form submission (add to cart)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  if (isset($_POST['product_id'])) {
    addToCart($_POST['product_id'], $cart);
  }
}

// Display the page
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple E-Commerce</title>
</head>
<body>

  <h1>Welcome to Our Store</h1>

  <?php displayProducts($products); ?>

  <?php displayCart($cart); ?>

</body>
</html>


<?php
// db_connect.php

// Database credentials (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "ecommerce";

$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
// index.php

// Include database connection
require_once 'db_connect.php';

// Products (for demonstration - replace with a real database query)
$products = array(
    array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
    array('id' => 2, 'name' => 'Mouse', 'price' => 25),
    array('id' => 3, 'name' => 'Keyboard', 'price' => 75)
);

?>
<!DOCTYPE html>
<html>
<head>
    <title>E-commerce Purchase</title>
</head>
<body>

<h1>Available Products</h1>

<ul>
    <?php
    foreach ($products as $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    ?>
</ul>

<h2>Place Your Order</h2>

<form action="purchase.php" method="POST">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $product) {
            echo "<option value=\"" . $product['id'] . "\">" . $product['name'] . "</option>";
        }
        ?>
    </select>
    <input type="submit" value="Purchase">
</form>

</body>
</html>


<?php
// purchase.php

// Include database connection
require_once 'db_connect.php';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get product ID from the form
    $product_id = $_POST["product_id"];

    // Retrieve product information (replace with a database query if needed)
    $product = null;
    foreach ($products as $p) {
        if ($p['id'] == $product_id) {
            $product = $p;
            break;
        }
    }

    if ($product) {
        // Display order details (e.g., save to a database)
        echo "<h2>Order Confirmation</h2>";
        echo "<p>You purchased: " . $product['name'] . " for $" . $product['price'] . "</p>";
        //  In a real application, you would save this order to your database.
    } else {
        echo "<p>Invalid Product ID.</p>";
    }
} else {
    // Handle other cases or redirect if needed
    header("Location: index.php"); // Redirect to the main page.
}
?>


<?php

// Database connection details
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ---  Purchase Functionality ---

/**
 * Processes a purchase order.
 *
 * @param array $orderData An associative array containing the order details.
 *                         Expected keys:  product_id, quantity, customer_name, customer_email
 * @return string  A success or error message.
 */
function processPurchase(array $orderData) {
  // Validate input data - crucial for security
  if (empty($orderData['product_id']) || empty($orderData['quantity']) || empty($orderData['customer_name']) || empty($orderData['customer_email'])) {
    return "Error: Missing required fields.";
  }
  $product_id = trim($orderData['product_id']);
  $quantity = (int)$orderData['quantity']; // Convert to integer
  $customer_name = trim($orderData['customer_name']);
  $customer_email = trim($orderData['customer_email']);

  if (!filter_var($customer_email, FILTER_VALIDATE_EMAIL)) {
    return "Error: Invalid email format.";
  }

  //  ---  Database Interaction  ---
  $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) VALUES (" .
         $conn->real_escape_string($product_id) . ", " .
         $conn->real_escape_string($quantity) . ", '" .
         $conn->real_escape_string($customer_name) . "', '" .
         $conn->real_escape_string($customer_email) . "', NOW())";

  if ($conn->query($sql) === TRUE) {
    // Optionally, update the product quantity in the products table
    // Example:
    // $update_sql = "UPDATE products SET stock_quantity = stock_quantity - " . $quantity . " WHERE product_id = " . $conn->real_escape_string($product_id);
    // if ($conn->query($update_sql) === TRUE) {
    //   return "Order placed successfully! Order ID: " . $conn->insert_id;
    // } else {
    //   return "Error updating product quantity.";
    // }

    return "Order placed successfully! Order ID: " . $conn->insert_id;
  } else {
    return "Error: " . $conn->error;
  }
}


// ---  Example Usage (Simulated Form Submission) ---

// Let's assume this is a form submission
$order_data = [
  'product_id' => '101',
  'quantity' => 2,
  'customer_name' => 'John Doe',
  'customer_email' => 'john.doe@example.com'
];

$result = processPurchase($order_data);
echo $result;

// ---  Database Setup (Example - create tables if they don't exist) ---
// You should run this *once* to create the tables.  Don't re-run it on every request.
// You can also use a database migration tool for more robust changes.

// This code creates a very basic database setup for demonstration.
// DO NOT USE THIS IN A PRODUCTION ENVIRONMENT WITHOUT CAREFUL REVIEW AND ADJUSTMENT!
//  It's here just to allow the example code to run without a pre-existing database.
//  Consider using a migration tool or a database schema management system.


$sql_create_products = "CREATE TABLE IF NOT EXISTS products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  stock_quantity INT DEFAULT 0
)";

if (!$conn->query($sql_create_products)) {
  die("Error creating products table: " . $conn->error);
}

$sql_create_orders = "CREATE TABLE IF NOT EXISTS orders (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT,
  quantity INT,
  customer_name VARCHAR(255),
  customer_email VARCHAR(255),
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)";

if (!$conn->query($sql_create_orders)) {
    die("Error creating orders table: " . $conn->error);
}



?>


<?php

// Simulated Product Data (Replace with a database query in a real application)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Mug', 'price' => 10.00],
    3 => ['id' => 3, 'name' => 'Book', 'price' => 15.00],
];

// Initialize the cart
$cart = [];

// Function to add an item to the cart
function addToCart($productId, $cart) {
    if (array_key_exists($productId, $products)) {
        $product = $products[$productId];
        $cart[] = $product;
        return true;
    }
    return false;
}

// Function to calculate the cart total
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'];
    }
    return $total;
}

// Handle form submission (adding items to the cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = $_POST['product_id'];
        addToCart($productId, $cart);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<h2>Cart Contents:</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
    }
    echo "</ul>";

    $total = calculateTotal($cart);
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <?php
    if (!empty($cart)) {
        echo "<br>Add more items?";
        echo "<br><br>";
    }
    ?>
    <select name="product_id">
        <?php
        if (!empty($cart)) {
            foreach ($cart as $item) {
                echo "<option value='" . $item['id'] . "'>" . $item['id'] . " - " . $item['name'] . "</option>";
            }
        } else {
            echo "<option value='1'>T-Shirt</option>";
            echo "<option value='2'>Mug</option>";
            echo "<option value='3'>Book</option>";
        }
        ?>
    </select>
    <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

</body>
</html>


<?php

// Assuming you have a database connection established.
// For demonstration purposes, we'll use a simple in-memory array for storage.

// In a real application, you'd connect to a database (e.g., MySQL, PostgreSQL)
// and use queries to manage products and orders.

// Sample products
$products = [
  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Session to store the cart items
session_start();

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];

  if (isset($products[$product_id])) {
    $product = $products[$product_id];

    // If the product is already in the cart, increase the quantity
    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
      if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += 1;
      } else {
        $_SESSION['cart'][$product_id] = ['quantity' => 1];
      }
    } else {
      // If the cart is empty, start with an empty array
      $_SESSION['cart'] = [$product_id => ['quantity' => 1]];
    }

    // You could also send a session flash message here to confirm the addition
    // (e.g., using a session variable)
  }
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];

    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
        if (isset($_SESSION['cart'][$product_id])) {
            unset($_SESSION['cart'][$product_id]);
            if (empty($_SESSION['cart'])) {
                // Empty the entire cart to avoid empty cart warnings
                $_SESSION['cart'] = [];
            }
        }
    }
}


if (isset($_POST['action']) && $_POST['action'] == 'clear_cart') {
    // Clear the entire cart
    $_SESSION['cart'] = [];
}



// Display the cart contents
echo '<h2>Shopping Cart</h2>';

if (empty($_SESSION['cart'])) {
  echo '<p>Your cart is empty.</p>';
} else {
  echo '<ul>';
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product = $products[$product_id];
    echo '<li>';
    echo "Product: " . $product['name'] . "<br>";
    echo "Price: $" . $product['price'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "<form method="post" action=\"#\">"; // Use '#' for same-page form submission
    echo "<input type=\"hidden\" name=\"product_id\" value=\"" . $product_id . "\">";
    echo "<button type=\"submit\" name=\"action\" value=\"remove_from_cart\">Remove</button>";
    echo "</li>";
  }
  echo '</ul>';
}

echo '<br>';
echo '<a href="checkout.php">Checkout</a>';
?>


<?php
// products.php

// Same products array as in cart.php
$products = [
  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

echo '<h2>Available Products</h2>';
echo '<ul>';
foreach ($products as $id => $product) {
  echo '<li>';
  echo "Product: " . $product['name'] . "<br>";
  echo "Price: $" . $product['price'] . "<br>";
  echo "<form method=\"post\" action=\"cart.php\">"; // Link to cart.php
  echo "<input type=\"hidden\" name=\"product_id\" value=\"" . $id . "\">";
  echo "<button type=\"submit\" name=\"action\" value=\"add_to_cart\">Add to Cart</button>";
  echo "</li>";
}
echo '</ul>';
?>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_username';
$db_password = 'your_password';

// --- Database Connection ---
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Helper Functions ---
function sanitize_input($data) {
    global $conn;
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data); // Important for security!
    return $data;
}

// --- Product Data (for demonstration - replace with your database query) ---
$products = array(
    1 => array('id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10),
    2 => array('id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'stock' => 5),
    3 => array('id' => 3, 'name' => 'Sneakers', 'price' => 80.00, 'stock' => 3)
);

// --- Cart Functions ---

// Initialize Cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Add to Cart
function addToCart($product_id, $quantity) {
    global $_SESSION['cart'];

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
    }
}

// Remove from Cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update Quantity in Cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Get Cart Contents
function getCartContents() {
    return $_SESSION['cart'];
}

// --- Cart Actions based on HTTP request ---

// 1. Add to Cart (GET request)
if (isset($_GET['action']) && $_GET['action'] == 'add') {
    $product_id = sanitize_input($_GET['product_id']);
    $quantity = sanitize_input($_GET['quantity']);

    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {
        addToCart($product_id, $quantity);
        echo "<p>Item added to cart.</p>";
    } else {
        echo "<p>Invalid product ID or quantity.</p>";
    }
}

// 2. Remove from Cart (GET request)
if (isset($_GET['action']) && $_GET['action'] == 'remove') {
    $product_id = sanitize_input($_GET['product_id']);
    removeFromCart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// 3. Update Quantity in Cart (GET request)
if (isset($_GET['action']) && $_GET['action'] == 'update') {
    $product_id = sanitize_input($_GET['product_id']);
    $quantity = sanitize_input($_GET['quantity']);

    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {
        updateQuantity($product_id, $quantity);
        echo "<p>Quantity updated in cart.</p>";
    } else {
        echo "<p>Invalid product ID or quantity.</p>";
    }
}


// --- Display Cart Contents ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
    $cart_contents = getCartContents();

    if (!empty($cart_contents)) {
        echo "<h2>Cart Contents:</h2>";
        foreach ($cart_contents as $product_id => $item) {
            echo "<div class='cart-item'>";
            echo "Product ID: " . $product_id . "<br>";
            echo "Name: " . $products[$product_id]['name'] . "<br>";
            echo "Price: $" . $products[$product_id]['price'] . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            echo "Subtotal: $" . ($products[$product_id]['price'] * $item['quantity']) . "<br>";
            echo "</div>";
        }

        echo "<p><strong>Total:</strong> $" . round(getTotalCartValue(), 2) . "</p>"; // Calculate and display total
    } else {
        echo "<p>Your cart is empty.</p>";
    }
?>

<hr>

<h2>Add to Cart</h2>
<form method="GET">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $id . "</option>";
        }
        ?>
    </select>
    <br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <br>
    <button type="submit" name="action" value="add">Add to Cart</button>
</form>

<hr>

<h2>Remove from Cart</h2>
<form method="GET">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $id . "</option>";
        }
        ?>
    </select>
    <br>
    <button type="submit" name="action" value="remove">Remove from Cart</button>
</form>

<hr>

<h2>Update Quantity in Cart</h2>
<form method="GET">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $id . "</option>";
        }
        ?>
    </select>
    <br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <br>
    <button type="submit" name="action" value="update">Update Quantity</button>
</form>


</body>
</html>

<?php

// Helper Function to calculate total cart value.
function getTotalCartValue() {
    $total = 0;
    $cart_contents = getCartContents();
    foreach ($cart_contents as $product_id => $item) {
        $total += ($products[$product_id]['price'] * $item['quantity']);
    }
    return $total;
}

?>


<?php

// --- Database Configuration (Replace with your actual details) ---
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

// --- Helper Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli|false Connection object or false on failure.
 */
function connect_to_db() {
  global $db_host, $db_name, $db_user, $db_password;
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

/**
 * Executes a SQL query and returns the result.
 *
 * @param mysqli $conn Connection object.
 * @param string $sql SQL query.
 * @return array|false Result set or false on failure.
 */
function execute_query(mysqli $conn, $sql) {
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    $data = [];
    while ($row = $result->fetch_assoc()) {
      $data[] = $row;
    }
    return $data;
  }
  return false;
}

/**
 * Sanitizes input to prevent SQL injection.
 *
 * @param string $input Input string.
 * @return string Sanitized string.
 */
function sanitize_input($input) {
    $input = trim($input);
    return $input; // Simple escaping -  Consider using mysqli_real_escape_string for robust escaping
}

// --- Purchase Processing Logic ---

// 1. Handle Form Submission (if applicable)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // --- Validate Inputs ---
  $product_id = sanitize_input($_POST["product_id"]);
  $quantity = sanitize_input($_POST["quantity"]);
  $customer_name = sanitize_input($_POST["customer_name"]);
  $customer_email = sanitize_input($_POST["customer_email"]);


  // --- Basic Validation (Expand this for more robust validation) ---
  if (!is_numeric($product_id)) {
    $error_message = "Invalid Product ID";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error_message = "Invalid Quantity";
  } elseif (empty($customer_name) || empty($customer_email)) {
    $error_message = "Customer Information Required";
  }


  // --- If no errors, process the purchase ---
  if (empty($error_message)) {
    // --- Get Product Details (Replace with your actual database query) ---
    $product_query = "SELECT product_id, product_name, price FROM products WHERE product_id = ?";
    $stmt = $conn->prepare($product_query);
    $stmt->bind_param("i", $product_id); // "i" for integer
    $stmt->execute();
    $product_result = $stmt->get_result();
    $product = $product_result->fetch_assoc();

    if ($product) {
      $total_amount = $product["price"] * $quantity;

      // --- Store Purchase Information (Replace with your database logic) ---
      $purchase_data = [
        "product_id" => $product_id,
        "customer_name" => $customer_name,
        "customer_email" => $customer_email,
        "quantity" => $quantity,
        "total_amount" => $total_amount,
        "purchase_date" => date("Y-m-d H:i:s")
      ];

      // --- Save the purchase to the database ---
      //  (Example -  You'll need to adapt this to your database schema)
      //  $sql = "INSERT INTO purchases (product_id, customer_name, customer_email, quantity, total_amount, purchase_date)
      //          VALUES (?, ?, ?, ?, ?, ?)";
      //  $stmt = $conn->prepare($sql);
      //  $stmt->bind_param("isisi", $product_id, $customer_name, $customer_email, $quantity, $total_amount);
      //  $stmt->execute();

      //  Instead of saving directly, let's just print for demo:
      echo "<h3>Purchase Successful!</h3>";
      echo "<p>Product: " . $product["product_name"] . "</p>";
      echo "<p>Quantity: " . $quantity . "</p>";
      echo "<p>Total Amount: $" . number_format($total_amount, 2) . "</p>";  // Format as currency
      echo "<p>Customer: " . $customer_name . "</p>";

    } else {
      echo "<p style='color:red;'>Product not found.</p>";
    }
  } else {
    // Display error messages
    echo "<div style='color:red;'>";
    if (!empty($error_message)) {
      echo $error_message . "<br>";
    }
    // Add more error handling here as needed.
    echo "</div>";
  }
}

// --- Database Connection ---
$conn = connect_to_db();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (very basic example - enhance this!)
  $name = filter_input(INPUT_POST, 'name', FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);
  $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);

  // Sanitize and escape the data for security
  $name = htmlspecialchars($name);
  $email = htmlspecialchars($email);
  $quantity = (int)$quantity; // Convert to integer
  $product_id = (int)$product_id;

  // Check if the product ID is valid
  if (!$product_id || $product_id <= 0) {
    $error_message = "Invalid product ID.";
  } else {
    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check the connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES ('$name', '$email', '$quantity', '$product_id')";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
      $success_message = "Order placed successfully! Thank you, " . $name . "!";
    } else {
      $error_message = "Error placing order: " . $conn->error;
    }

    // Close the connection
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place an Order</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" required><br><br>

    <button type="submit">Place Order</button>
  </form>

  <p>Available Products: <a href="products.php">View Products</a></p>

</body>
</html>


<?php

// Database configuration (replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get form data
  $product_name = $_POST["product_name"];
  $quantity = $_POST["quantity"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  // Validate input (Important!  Prevent security vulnerabilities)
  if (empty($product_name) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
    $error_message = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error_message = "Quantity must be a positive number.";
  } else {
    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL statement (important for security - use prepared statements!)
    $sql = "INSERT INTO orders (product_name, quantity, customer_name, customer_email) VALUES (?, ?, ?, ?)";

    // Use prepared statement to prevent SQL injection
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      // Bind parameters
      $stmt->bind_param("sss", $product_name, $quantity, $customer_name, $customer_email);

      // Execute the statement
      if ($stmt->execute()) {
        $success_message = "Order placed successfully! Thank you, " . $customer_name . "!";
      } else {
        $error_message = "Order placement failed: " . $stmt->error;
      }
    } else {
      $error_message = "Error preparing statement.";
    }

    // Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Order</title>
</head>
<body>

  <h1>Purchase Order</h1>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// **1. Display the Product List**

function displayProducts($conn) {
  $sql = "SELECT id, product_name, price, description, image FROM products";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    echo "<h2>Available Products</h2>";
    echo "<table border='1'><tr><th>Image</th><th>Product Name</th><th>Price</th><th>Description</th><th>Action</th></tr>";

    while($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td><img src='images/" . $row['image'] . "' alt='". $row['product_name'] . "' width='100'></td>"; // Adjust image path if needed
      echo "<td>" . $row["product_name"] . "</td>";
      echo "<td>" . $row["price"] . "</td>";
      echo "<td>" . $row["description"] . "</td>";
      echo "<td><button onclick='addToCart(" . $row['id'] . ", '" . $row['product_name'] . "', " . $row['price'] . ")'>Add to Cart</button></td>";
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No products found.</p>";
  }
}


// **2. Add to Cart Functionality**

function addToCart($productId, $productName, $price) {
  //  Implement your cart storage here.  For demonstration purposes,
  //  we'll use a simple session variable.  This is *not* suitable
  //  for a production environment.

  if (isset($_SESSION['cart'])) {
    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$productId])) {
      // If it exists, increment the quantity
      $_SESSION['cart'][$productId]['quantity'] += 1;
    } else {
      // If it doesn't exist, add it to the cart
      $_SESSION['cart'][$productId] = array(
        'product_id' => $productId,
        'product_name' => $productName,
        'price' => $price,
        'quantity' => 1
      );
    }
  } else {
    // If the cart is empty, start with a new array
    $_SESSION['cart'] = array($productId => array(
      'product_id' => $productId,
      'product_name' => $productName,
      'price' => $price,
      'quantity' => 1
    ));
  }

  // Optional:  Display a message indicating the item was added
  echo "<p>Added '" . $productName . "' to cart.</p>";
}



// **3. Display Cart Contents**

function displayCart() {
  if (!isset($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<table border='1'><tr><th>Image</th><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

  $total = 0;

  foreach ($_SESSION['cart'] as $productId => $item) {
    $productName = $item['product_name'];
    $price = $item['price'];
    $quantity = $item['quantity'];
    $total += $price * $quantity;

    echo "<tr>";
    echo "<td><img src='images/" . $productName . "' alt='" . $productName . "' width='100'></td>";
    echo "<td>" . $productName . "</td>";
    echo "<td>" . $price . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>" . $price * $quantity . "</td>";
    echo "<td><button onclick='removeFromCart(" . $productId . ")'>Remove</button></td>";
    echo "</tr>";
  }

  echo "<tr><td colspan='6'><strong>Total: $" . $total . "</strong></td></tr>";
  echo "</table>";
}



// **4. Remove from Cart**

function removeFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
  // Optionally, clear the cart if it's empty after removal
  if (empty($_SESSION['cart'])) {
    unset($_SESSION['cart']);
  }
  echo "<p>Removed '" . $_SESSION['cart']['product_name'] . "' from cart.</p>";
}

// **5. Initialize the session**
session_start();

// --- Main Script Execution ---

//Display products
displayProducts($conn);

// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Online Store</title>
</head>
<body>
  <h1>Welcome to Our Store</h1>

  <!--  Include the cart functionality in the HTML. -->
  <script>
    // Example JavaScript for Cart interaction
    // You would typically add these functions to your main HTML file
    // and link them to buttons.

    // This is a basic example.  For a real-world application,
    // you would need to implement more robust error handling and
    // user interface interactions.

    function addToCart(productId, productName, price) {
        // Call the PHP function (you'll need to make this AJAX call)
        //  In a real app, use AJAX to submit this data to the server.
        //  This example is simplified for demonstration.
        //  You would use a JavaScript library (e.g., Axios, Fetch)
        //  to make the AJAX request.
        console.log("addToCart called with:", productId, productName, price);
    }

    function removeFromCart(productId) {
        // Similar to addToCart, implement AJAX to call the PHP function
        console.log("removeFromCart called with:", productId);
    }

  </script>
</body>
</html>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_user";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $shipping_address) {
    $conn = connectToDatabase();

    // 1. Update the cart's status to "purchased"
    $sql_update_cart = "UPDATE carts SET status = 'purchased', order_date = NOW() WHERE id = $cart_id";
    if ($conn->query($sql_update_cart) === FALSE) {
        echo "Error updating cart: " . $conn->error;
        return false;
    }

    // 2.  Create an order record
    $sql_create_order = "INSERT INTO orders (cart_id, customer_name, customer_email, shipping_address, order_date)
                        VALUES ($cart_id, '$customer_name', '$customer_email', '$shipping_address', NOW())";

    if ($conn->query($sql_create_order) === FALSE) {
        echo "Error creating order: " . $conn->error;
        return false;
    }

    // 3.  Update the items in the cart to reflect they are sold (e.g., decrease quantity or set to 0)
    //    This part is dependent on how you manage your inventory.
    //    This example sets the quantity of each item in the cart to 0.  You should adjust
    //    this based on your specific needs.
    $sql_update_cart_items = "UPDATE cart_items SET quantity = 0 WHERE cart_id = $cart_id";
    if ($conn->query($sql_update_cart_items) === FALSE) {
        echo "Error updating cart items: " . $conn->error;
        return false;
    }

    echo "Purchase successful! Order ID: " . $conn->insert_id; // Get the auto-incremented order ID
    return true;
}

// --------------------  Example Usage (Simulated form handling) --------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart_id = $_POST["cart_id"]; // Assuming cart ID is passed from a form
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $shipping_address = $_POST["shipping_address"];

    // Call the handlePurchase function
    if (handlePurchase($cart_id, $customer_name, $customer_email, $shipping_address)) {
        // Redirect to a success page or display a confirmation message
        echo "<p>Your order has been placed successfully!</p>";
    } else {
        echo "<p>An error occurred during the purchase process.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase</h1>

    <form method="post" action="">
        <label for="cart_id">Cart ID:</label>
        <input type="number" id="cart_id" name="cart_id" required>
        <br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required>
        <br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required>
        <br><br>

        <label for="shipping_address">Shipping Address:</label>
        <textarea id="shipping_address" name="shipping_address" rows="4" cols="50" required></textarea>
        <br><br>

        <button type="submit">Place Order</button>
    </form>

</body>
</html>


<?php

// Sample product data (replace with your database connection)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

$cart = []; // Initialize an empty cart

// Function to add an item to the cart
function addToCart($productId, $cart) {
    if (isset($products[$productId])) {
        $product = $products[$productId];
        $cart[] = $product;
        return true;
    } else {
        return false; // Product not found
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . "</li>";
    }
    echo "</ul>";

    // Calculate total
    $total = array_sum(array_column($cart, 'price'));
    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}

// Function to handle the purchase (simplified)
function purchase($cart) {
    if (empty($cart)) {
        echo "<p>Please add items to your cart before proceeding to purchase.</p>";
        return;
    }

    // In a real application, you'd process payment, update inventory, etc.
    echo "<p>Your order has been placed!</p>";
    echo "<p>Thank you for your purchase.</p>";
}

// ---  Example Usage/Routing  ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Example: Add item to cart
    if (isset($_POST['add_to_cart'])) {
        $productId = $_POST['product_id'];
        addToCart($productId, $cart);
        echo "<p>Item added to cart.</p>";
    }

    // Display the cart
    displayCart($cart);

    // Example: Handle purchase
    if (isset($_POST['purchase_order'])) {
        purchase($cart);
    }

} else {
    // Initial display of the cart
    displayCart($cart);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Shopping Cart</title>
</head>
<body>

<h1>Our Store</h1>

<h2>Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . " <button type='submit' name='product_id' value='" . $id . "'>Add to Cart</button></li>";
    }
    ?>
</ul>

<form method="post">
    <label for="product_id">Select Product:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $product['name'] . "</option>";
        }
        ?>
    </select>
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_user";
$db_password = "your_password";

// Start the session
session_start();

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle purchase
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectDB();

    // Update the cart status to 'completed'
    $update_cart_query = "UPDATE carts SET status = 'completed', completed_at = NOW() WHERE id = $cart_id";
    if ($conn->query($update_cart_query) === FALSE) {
        echo "Error updating cart: " . $conn->error;
        return false;
    }

    // Insert order details into the orders table
    $order_id = $conn->insert_id; // Get the auto-incremented ID of the new order
    $order_query = "INSERT INTO orders (cart_id, customer_name, customer_email, payment_method, order_date, order_id)
                    VALUES ($cart_id, '$customer_name', '$customer_email', '$payment_method', NOW(), $order_id)";

    if ($conn->query($order_query) === FALSE) {
        echo "Error inserting order: " . $conn->error;
        return false;
    }

    // Loop through the cart items and create corresponding order items
    $select_cart_items_query = "SELECT product_id, quantity FROM cart_items WHERE cart_id = $cart_id";
    $result = $conn->query($select_cart_items_query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $product_id = $row["product_id"];
            $quantity = $row["quantity"];

            $insert_order_item_query = "INSERT INTO order_items (order_id, product_id, quantity)
                                       VALUES ($order_id, $product_id, $quantity)";

            if ($conn->query($insert_order_item_query) === FALSE) {
                echo "Error inserting order item: " . $conn->error;
                return false;
            }
        }
    }


    // Clear the cart items
    $delete_cart_items_query = "DELETE FROM cart_items WHERE cart_id = $cart_id";
    if ($conn->query($delete_cart_items_query) === FALSE) {
        echo "Error deleting cart items: " . $conn->error;
        return false;
    }

    echo "Purchase successful! Order ID: " . $order_id;
    return true;
}

// Handle the purchase request (e.g., from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if cart_id is provided in the form.  Crucial for security!
    if (isset($_POST['cart_id']) && is_numeric($_POST['cart_id'])) {
        $cart_id = $_POST['cart_id'];
        $customer_name = $_POST['customer_name'];
        $customer_email = $_POST['customer_email'];
        $payment_method = $_POST['payment_method'];

        // Call the handlePurchase function
        if (handlePurchase($cart_id, $customer_name, $customer_email, $payment_method)) {
            // Optionally, redirect the user to a confirmation page
            // header("Location: confirmation.php?order_id=$order_id");
            // exit();
        } else {
            echo "Purchase failed. Please try again.";
        }
    } else {
        echo "Invalid cart ID.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Shop - Purchase</title>
</head>
<body>

    <h1>Purchase Your Items</h1>

    <form method="post" action="purchase.php">
        <label for="cart_id">Cart ID:</label>
        <input type="number" id="cart_id" name="cart_id" required>
        <br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required>
        <br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required>
        <br><br>

        <label for="payment_method">Payment Method:</label>
        <select id="payment_method" name="payment_method">
            <option value="credit_card">Credit Card</option>
            <option value="paypal">PayPal</option>
        </select>
        <br><br>

        <button type="submit">Place Order</button>
    </form>

</body>
</html>


<?php

// In-Memory Product Data (Replace with Database Connection)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

$cart = []; // Array to store items in the cart

// Function to add an item to the cart
function addToCart($productId, $cart) {
    if (isset($products[$productId])) {
        $item = $products[$productId];
        $cart[] = $item;
        return true;
    }
    return false;
}

// Function to calculate the total
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'];
    }
    return $total;
}

// Handle form submission (adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = (int)$_POST['product_id']; // Ensure it's an integer
        addToCart($productId, $cart);
    }
}

$total = calculateTotal($cart);
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store - Purchase</title>
</head>
<body>

<h1>Online Store</h1>

<h2>Product Catalog</h2>

<ul>
    <?php foreach ($products as $id => $product): ?>
        <li>
            <?php echo $product['name'] . ' - $' . $product['price']; ?>
            <form method="post" action="purchase.php">
                <input type="hidden" name="product_id" value="<?php echo $id; ?>">
                <button type="submit" name="add_to_cart">Add to Cart</button>
            </form>
        </li>
    <?php endforeach; ?>
</ul>

<h2>Shopping Cart</h2>

<?php if (empty($cart)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <ul>
        <?php foreach ($cart as $item): ?>
            <li><?php echo $item['name'] . ' - $' . $item['price']; ?></li>
        <?php endforeach; ?>
    </ul>

    <p><strong>Total: $<?php echo $total; ?></strong></p>
<?php endif; ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$dbHost = "localhost";
$dbName = "shop_db";
$dbUser = "your_username";
$dbPassword = "your_password";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the product already exists in the cart
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Product already in cart, update quantity
    $row = $result->fetch_assoc();
    $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
      echo "Product quantity updated successfully!";
    } else {
      echo "Error updating product quantity: " . $conn->error;
    }
  } else {
    // Product not in cart, add it
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";
    if ($conn->query($query) === TRUE) {
      echo "Product added to cart successfully!";
    } else {
      echo "Error adding product to cart: " . $conn->error;
    }
  }
}

// Function to view the cart
function viewCart($conn) {
  $query = "SELECT * FROM cart";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo "<h2>Your Shopping Cart</h2>";
    while ($row = $result->fetch_assoc()) {
      $product_id = $row["product_id"];
      $quantity = $row["quantity"];
      $product_name = getProductName($conn, $product_id); // Call a helper function to get product name

      echo "<tr>";
      echo "<td>" . $product_name . "</td>";
      echo "<td>" . $quantity . "</td>";
      echo "<td><button onclick='removeFromCart(" . $product_id . ")'>Remove</button></td>"; // Button to remove
      echo "</tr>";
    }
  } else {
    echo "<p>Your cart is empty.</p>";
  }
}

// Helper function to get the product name based on product_id
function getProductName($conn, $product_id) {
    $query = "SELECT * FROM products WHERE product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        return $row["product_name"];
    } else {
        return "Unknown Product";
    }
}


// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Check if 'add_to_cart' is set
  if (isset($_POST["add_to_cart"])) {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    addToCart($conn, $product_id, $quantity);
  }
}

// Database connection
$conn = connectToDatabase();

// View the cart (call this function to display the cart content)
viewCart($conn);

//  Example HTML for the form and display
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Our Products</h1>

  <h2>Product 1</h2>
  <form method="post">
    <input type="hidden" name="product_id" value="1">
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <h2>Product 2</h2>
  <form method="post">
    <input type="hidden" name="product_id" value="2">
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>


</body>
</html>


<?php
session_start(); // Start the session to maintain user data

// Database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the product already exists in the cart
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Product already in cart, update quantity
    $row = $result->fetch_assoc();
    $quantity_new = $row['quantity'] + $quantity;
    $query = "UPDATE cart SET quantity = '$quantity_new' WHERE product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
      // Optionally, you can also update the total price here
    } else {
      echo "Error updating cart: " . $conn->error;
    }
  } else {
    // Product not in cart, add it
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";
    if ($conn->query($query) === TRUE) {
      // Optionally, you can also update the total price here
    } else {
      echo "Error adding to cart: " . $conn->error;
    }
  }
}

// Function to display the cart contents
function displayCart($conn) {
  $query = "SELECT * FROM cart";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo "<h2>Cart Contents</h2>";
    while ($row = $result->fetch_assoc()) {
      $product_id = $row['product_id'];
      $quantity = $row['quantity'];
      $product_name = mysqli_query($conn, "SELECT product_name FROM products WHERE product_id = '$product_id'").$row['product_name']; //get product name
      echo "<tr>";
      echo "<td>" . $product_name . "</td>";
      echo "<td>" . $quantity . "</td>";
      // Calculate total price for the item (replace with your actual price logic)
      $price = mysqli_query($conn, "SELECT price FROM products WHERE product_id = '$product_id'").$row['price'];  // get price
      echo "<td>$" . $price . "</td>";
      echo "</tr>";
    }
  } else {
    echo "<p>Your cart is empty.</p>";
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
  // Check if the product exists in the cart
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Product already in cart, update quantity
    $row = $result->fetch_assoc();
    $quantity_new = $quantity; // Use the provided quantity
    $query = "UPDATE cart SET quantity = '$quantity_new' WHERE product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
      // Optionally, you can also update the total price here
    } else {
      echo "Error updating cart: " . $conn->error;
    }
  } else {
    echo "<p>Product not found in cart.</p>";
  }
}

// Function to remove an item from the cart
function removeItemFromCart($conn, $product_id) {
  $query = "DELETE FROM cart WHERE product_id = '$product_id'";
  if ($conn->query($query) === TRUE) {
    echo "<p>Product removed from cart.</p>";
  } else {
    echo "Error removing from cart: " . $conn->error;
  }
}

// --- Example Usage (Handle the purchase process) ---

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Check if the 'remove_product' parameter is present (for removing items)
  if (isset($_POST["remove_product"])) {
    $product_id_to_remove = $_POST["remove_product"];
    removeItemFromCart($conn, $product_id_to_remove);
  } else {
    // Process the purchase (e.g., update quantity, clear the cart)
    // This is a simplified example.  In a real application, you'd
    // integrate with a payment gateway, handle order confirmation, etc.

    //  Example: Update quantity of all items in the cart
    //   This would require looping through all products in the cart
    //   and updating their quantities.
  }
}

// --- Display the cart contents ---
displayCart($conn);

?>

<!-- HTML form to add products to the cart -->
<h2>Add Products to Cart</h2>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
  <?php
  // Assume you have a way to get product IDs and names
  // This is a placeholder - adapt this part to your product listing
  // and your product data source.
  $products = [
    ['product_id' => 1, 'product_name' => 'Laptop'],
    ['product_id' => 2, 'product_name' => 'Mouse'],
    ['product_id' => 3, 'product_name' => 'Keyboard']
  ];

  foreach ($products as $product) {
    echo "<label for='product_" . $product['product_id'] . "'>Add " . $product['product_name'] . ":</label>";
    echo "<input type='number' id='product_" . $product['product_id'] . "' name='product_" . $product['product_id'] . "' value='1' min='1'>";
    echo "<br>";
  }
  ?>

  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<!-- Form to remove items from the cart -->
<h2>Remove Items from Cart</h2>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
  <?php
  // Assuming you have a way to display product IDs from the cart
  $cart_product_ids = array_keys($_SESSION['cart']);  // Get product IDs from cart
  if ($cart_product_ids) {
    foreach ($cart_product_ids as $product_id) {
      echo "<label for='remove_product_" . $product_id . "'>Remove " . $product_id . ":</label>";
      echo "<input type='submit' name='remove_product' value='Remove' class='remove_product' id='remove_product_" . $product_id . "'>";
    }
  }
  ?>
</form>


<?php
session_start();

// Configuration
$cart_file = 'cart.php';
$item_name_key = 'item_name';
$item_price_key = 'item_price';
$quantity_key = 'quantity';

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $item_name
 * @param float $item_price
 * @param int $quantity
 */
function addToCart($item_name, $item_price, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    $_SESSION['cart'][] = [
        $item_name_key => $item_name,
        $quantity_key => $quantity,
        $item_price_key => $item_price
    ];
}


/**
 * Removes an item from the cart by item name.
 *
 * @param string $item_name
 */
function removeFromCart($item_name) {
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item[$item_name_key] === $item_name) {
                unset($_SESSION['cart'][$key]);
                // Re-index the array to avoid gaps
                $_SESSION['cart'] = array_values($_SESSION['cart']);
                return;
            }
        }
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $item_name
 * @param int $new_quantity
 */
function updateQuantity($item_name, $new_quantity) {
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item[$item_name_key] === $item_name) {
                $_SESSION['cart'][$key][$quantity_key] = $new_quantity;
                // Re-index the array to avoid gaps
                $_SESSION['cart'] = array_values($_SESSION['cart']);
                return;
            }
        }
    }
}


/**
 * Calculates the total cart value.
 *
 * @return float
 */
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item[$item_price_key] * $item[$quantity_key];
        }
    }
    return $total;
}


/**
 * Clears the entire cart.
 */
function clearCart() {
    unset($_SESSION['cart']);
}


// --- Cart Handling Functions (Called based on user actions) ---

// 1. Add to Cart (handled by the product page)
if (isset($_POST['add_to_cart'])) {
    $item_name = $_POST['item_name'];
    $item_price = floatval($_POST['item_price']); // Ensure price is a float
    $quantity = intval($_POST['quantity']); // Ensure quantity is an integer
    addToCart($item_name, $item_price, $quantity);
}

// 2. Remove from Cart (handled by the product page)
if (isset($_POST['remove_from_cart'])) {
    $item_name = $_POST['item_name'];
    removeFromCart($item_name);
}


// 3. Update Quantity (handled by the product page)
if (isset($_POST['update_quantity'])) {
    $item_name = $_POST['item_name'];
    $new_quantity = intval($_POST['quantity']);  // Ensure quantity is an integer
    updateQuantity($item_name, $new_quantity);
}


// --- Cart Display Function ---

function displayCart() {
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Item Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $item_name = $item[$item_name_key];
        $item_price = $item[$item_price_key];
        $quantity = $item[$quantity_key];
        $item_total = $item_total = $item_price * $quantity;
        $total += $item_total;

        echo "<tr>";
        echo "<td>" . $item_name . "</td>";
        echo "<td>$" . number_format($item_price, 2) . "</td>";
        echo "<td>" . $quantity . "</td>";
        echo "<td>$" . number_format($item_total, 2) . "</td>";
        echo "</tr>";
    }
    echo "</table>";
    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
    echo "<a href='checkout.php'>Proceed to Checkout</a>";  // Link to checkout page
}


// --- Example: Display the Cart ---
displayCart();
?>


<?php

// Database Connection (Replace with your database details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Product Data (Replace with your actual product data source - e.g., database)
$products = [
  ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Session to store the cart
session_start();

// Initialize cart in session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  global $products, $conn, $_SESSION;

  // Find the product
  $product = null;
  foreach ($products as $p) {
    if ($p['id'] == $product_id) {
      $product = $p;
      break;
    }
  }

  if ($product) {
    // Check if the item is already in the cart
    $item_exists = false;
    foreach ($_SESSION['cart'] as &$item) {
      if ($item['id'] == $product_id) {
        $item['quantity'] += $quantity;
        $item['total_price'] = $item['quantity'] * $product['price'];
        $item['total_price'] = $item['total_price']; // Recalculate
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price']; // Redundant but clarifies
        $item['total_price'] = $item['total_price'];  //Again redundant
        $item['total_price'] = $item['total_price'];  //And again
        $item['total_price'] = $item['total_price'];  //Even more redundant
        $item['total_price'] = $item['total_price']; // Last time
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];
        $item['total_price'] = $item['total_price'];

        break;
      }
    }

    // If item already in cart, update the quantity
    if(!$item_exists){
      $item_exists = true;
    }



    // If not in cart, add the item
    if (!$item_exists) {
      $cart_item = [
        'id' => $product['id'],
        'quantity' => $quantity,
        'total_price' => $product['price'] * $quantity,
      ];
      $_SESSION['cart'][] = $cart_item;

    }
    // Recalculate total cart value
    $total_cart_value = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total_cart_value += $item['total_price'];
    }
    $_SESSION['total_cart_value'] = $total_cart_value;
  } else {
    echo "Product with ID " . $product_id . " not found.";
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  global $conn, $_SESSION;

  // Loop through the cart and find the item to remove
  foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);

      // Recalculate total cart value
      $total_cart_value = 0;
      foreach ($_SESSION['cart'] as $item) {
          $total_cart_value += $item['total_price'];
      }
      $_SESSION['total_cart_value'] = $total_cart_value;
      break;
    }
  }
}

// Function to clear the entire cart
function clearCart() {
  unset($_SESSION['cart']);
  unset($_SESSION['total_cart_value']); //Also remove total
}

// Handle adding to cart (e.g., from a button click)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
}

// Handle removing from cart (e.g., from a button click)
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// Handle clearing the cart
if (isset($_POST['clear_cart'])) {
  clearCart();
}


// Display the cart
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  $total_cart_value = 0;
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>";
    echo "Product: " . $products[$item['id'] - 1]['name'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Price: $" . $item['total_price'] . "<br>";
    echo "Subtotal: $" . $item['total_price'] . "<br>";
    echo "</li>";
    $total_cart_value += $item['total_price'];
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value: $" . $total_cart_value . "</strong></p>";
}

//  Button to clear the cart
echo "<br>";
echo "<a href='#' onclick='clearCart()'>Clear Cart</a>";
?>


<?php

// Sample Product Data (replace with database integration in a real application)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

// Function to handle the purchase process
function handlePurchase($cart, $total) {
    // In a real application, you'd process payment here (e.g., PayPal, Stripe)
    // For this example, we'll just print a confirmation message.

    echo "<p><strong>Order Confirmation:</strong></p>";
    echo "<p>Items Purchased: </p>";
    echo "<ul>";
    foreach ($cart as $itemId => $quantity) {
        $product = $products[$itemId];
        echo "<li>$product['name'] x $quantity - Total: $" . number_format($product['price'] * $quantity, 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Amount:</strong> $" . number_format($total, 2) . "</p>";
    echo "<p>Thank you for your purchase!</p>";
}

// --------------------  Example Usage  --------------------

// Initialize the cart (empty initially)
$cart = [];

// Check if there's a request to add an item to the cart
if (isset($_GET['add_to_cart'])) {
    $itemId = (int)$_GET['add_to_cart']; // Convert to integer for safety

    if (isset($products[$itemId])) {
        $product = $products[$itemId];
        $quantity = isset($_GET['quantity']) ? (int)$_GET['quantity'] : 1; // Default to 1 if quantity isn't provided

        if ($quantity > 0) {
            // Add to cart
            if (isset($cart[$itemId])) {
                $cart[$itemId] += $quantity;
            } else {
                $cart[$itemId] = $quantity;
            }

            // Update the URL to show the cart contents
            $_SESSION['cart'] = $cart;  // Store cart in session
            echo "<p>Item added to cart. <a href='cart.php'>View Cart</a></p>"; // Link to cart page
        } else {
            echo "<p>Please enter a valid quantity.</p>";
        }
    } else {
        echo "<p>Product not found.</p>";
    }
}

// Display the cart contents (if the cart is not empty)
if (!empty($cart)) {
    $total = 0;
    echo "<h2>Your Shopping Cart:</h2>";
    echo "<ul>";
    foreach ($cart as $itemId => $quantity) {
        $product = $products[$itemId];
        $itemTotal = $product['price'] * $quantity;
        $total += $itemTotal;
        echo "<li>$product['name'] x $quantity - Total: $" . number_format($itemTotal, 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Amount:</strong> $" . number_format($total, 2) . "</p>";
    handlePurchase($cart, $total);  // Call the purchase confirmation function
} else {
    echo "<p>Your shopping cart is empty.</p>";
}

?>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "root";
$db_password = "";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addItemToCart($conn, $userId, $product_id, $quantity) {
    // Check if the user already has an entry for this product
    $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $userId, $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Item already exists, update the quantity
        $sql = "UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?";
        if ($conn->query($sql) === TRUE) {
            // Success
            return true;
        } else {
            // Error
            return false;
        }
    } else {
        // Item doesn't exist, create a new entry
        $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
        if ($conn->query($sql) === TRUE) {
            // Success
            return true;
        } else {
            // Error
            return false;
        }
    }
    $stmt->close();
}

// Function to get the cart contents
function getCartContents($conn, $userId) {
    $sql = "SELECT p.product_name, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $cart_items = [];
        while ($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
        $stmt->close();
        return $cart_items;
    } else {
        $stmt->close();
        return [];
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($conn, $userId, $product_id, $quantity) {
    $sql = "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?";
    if ($conn->query($sql, $quantity, $userId, $product_id) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($conn, $userId, $product_id) {
    $sql = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
    if ($conn->query($sql, $userId, $product_id) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Example usage (This is just an example, you'll need to integrate this with your website's form handling)

// 1. Get user ID (Replace with how you get the user ID, e.g., from a session)
$userId = 1; // Example user ID

// 2. Add an item to the cart
$product_id = 1;  // Example product ID
$quantity = 2;
if (addItemToCart($conn, $userId, $product_id, $quantity)) {
    echo "Item added to cart successfully!";
} else {
    echo "Error adding item to cart.";
}

// 3. Get the cart contents
$cart = getCartContents($conn, $userId);
echo "<br><h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}


// 4. Example:  Updating quantity (replace with your form handling)
// if (updateCartQuantity($conn, $userId, $product_id, $new_quantity)) {
//     echo "<br>Quantity updated successfully!";
// }

// 5. Example: Removing an item
// if (removeItemFromCart($conn, $userId, $product_id)) {
//     echo "<br>Item removed from cart.";
// }

// Close the database connection (Important!)
$conn->close();

?>


<?php

// Database connection details (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a new order to the database
function addOrder($orderData) {
  global $conn;

  // Sanitize and validate input data (IMPORTANT!)
  $product_id = $conn->real_escape_string($orderData['product_id']);
  $quantity = $conn->real_escape_string($orderData['quantity']);
  $customer_name = $conn->real_escape_string($orderData['customer_name']);
  $customer_email = $conn->real_escape_string($orderData['customer_email']);

  // Check if product exists - basic validation
  $product_query = "SELECT id FROM products WHERE id = '$product_id'";
  $product_result = $conn->query($product_query);
  if (!$product_result->num_rows) {
    return "Error: Product ID does not exist.";
  }


  $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email)
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email')";

  if ($conn->query($sql) === TRUE) {
    return "Order added successfully!";
  } else {
    return "Error: " . $conn->error;
  }
}


// Function to get product details (for display, etc.)
function getProductDetails($product_id) {
    global $conn;

    $product_query = "SELECT id, name, price FROM products WHERE id = '$product_id'";
    $product_result = $conn->query($product_query);

    if ($product_result->num_rows > 0) {
        $product = $product_result->fetch_assoc();
        return $product;
    } else {
        return null; // Or handle the case where the product doesn't exist.
    }
}


// --- Example Usage - Handling the Purchase Form Submission ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  // Perform validation - VERY IMPORTANT!  Don't trust user input.
  if (!isset($product_id) || empty($product_id) || !is_numeric($product_id)) {
    $result = "Error: Invalid Product ID.";
  } elseif (!isset($quantity) || empty($quantity) || !is_numeric($quantity)) {
    $result = "Error: Invalid Quantity.";
  } else {
    // Add the order to the database
    $result = addOrder(["product_id" => $product_id, "quantity" => $quantity, "customer_name" => $customer_name, "customer_email" => $customer_email]);
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Order</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Place Order</button>
  </form>

  <?php
    if (isset($result)) {
      echo "<p style='color: red;'>$result</p>";
    }
  ?>

  <h2>Product Details (Example):</h2>
  <?php
  // Example of getting product details (for demonstration)
  $example_product_id = "1"; // Replace with a valid product ID
  $product = getProductDetails($example_product_id);

  if ($product) {
    echo "<p>Product ID: " . $product['id'] . "</p>";
    echo "<p>Product Name: " . $product['name'] . "</p>";
    echo "<p>Price: $" . $product['price'] . "</p>";
  } else {
    echo "<p>Product not found.</p>";
  }
  ?>

</body>
</html>


<?php

// This is a very basic purchase functionality example.
// For a production environment, you'd need to:
// - Secure input and data
// - Implement robust error handling
// - Use a database for persistent storage
// - Integrate with payment gateways (e.g., Stripe, PayPal)
// - Add more features like order tracking, admin panel, etc.


// Simulating a product catalog (replace with a real database or API)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Mug', 'price' => 10],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Initialize order details
$order_id = 0;
$cart = [];
$total_amount = 0;


// Function to add a product to the cart
function add_to_cart($product_id, $quantity = 1) {
  global $cart, $total_amount;

  if (isset($products[$product_id])) {
    $product = $products[$product_id];

    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] += $quantity;
    } else {
      $cart[$product_id] = ['quantity' => $quantity, 'price' => $product['price']];
    }

    $total_amount += $product['price'] * $quantity;
  } else {
    echo "<p>Product ID: " . $product_id . " not found.</p>";
  }
}

// Function to display the cart
function display_cart() {
  global $cart;

  echo "<h2>Your Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>" . $products[$item_id]['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";

  echo "<p><strong>Total: $" . number_format($total_amount, 2) . "</strong></p>";
}


// Handle form submission to add to cart
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the product_id
  $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0; //Sanitize and convert to integer

  if ($product_id > 0) {
    add_to_cart($product_id);
  } else {
    echo "<p>Invalid product ID.</p>";
  }
}


// Display the cart
display_cart();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Purchase Functionality</title>
</head>
<body>

  <h1>Shop</h1>

  <h2>Products</h2>
  <ul>
    <?php
    foreach ($products as $id => $product) {
      echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<br>";
      echo "<form method='post'>";
      echo "<input type='hidden' name='product_id' value='" . $id . "'>";
      echo "<button type='submit'>Add to Cart</button>";
      echo "</form></li>";
    }
    ?>
  </ul>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Session Handling (to track the shopping cart)
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // If the product doesn't exist in the cart, it means it's a new addition.
        // You might want to handle this case differently (e.g., add it to the cart with the specified quantity).
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'] ?? []; // Return an empty array if cart is not set.
}


// -----  Example Product Data (for demonstration) -----
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

// -----  Handle Form Submission (Add to Cart) -----
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];

        // Validate input (Important for security)
        if ($product_id <= 0 || $quantity <= 0) {
            echo "Invalid product ID or quantity.";
        } else {
            addToCart($product_id, $quantity);
            echo "<p>Item added to cart!</p>";
        }
    }
}


// ----- Display the Cart -----
$cart = getCartContents();

echo "<h2>Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        $product_name = $products[$product_id]['name'];
        $product_price = $products[$product_id]['price'];
        echo "<li>" . $product_name . " - $" . $product_price . " (Quantity: " . $quantity . ")</li>";
    }
    echo "</ul>";

    // Calculate total
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        $total += $products[$product_id]['price'] * $quantity;
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";

    //Remove Item
    if (isset($_GET['remove'])) {
        $product_id_to_remove = (int)$_GET['remove'];
        removeFromCart($product_id_to_remove);
        echo "<p>Item removed from cart!</p>";
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Online Store</h1>

    <h2>Products</h2>
    <ul>
        <?php
        foreach ($products as $product_id => $product_data) {
            echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . "<br>";
            echo "<form method='post'>";
            echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
            echo "<input type='number' name='quantity' value='1' min='1'>";
            echo "<button type='submit' name='add_to_cart'>Add to Cart</button>";
            echo "</form></li>";
        }
        ?>
    </ul>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (important for security - see notes below)
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]); // Using floatval to allow decimal values

    // Sanitize input (basic example - consider more robust sanitization)
    $product_name = htmlspecialchars($product_name);  // Prevent XSS
    $quantity = intval($quantity);  // Ensure quantity is an integer
    $price = floatval($price);

    // Error checking
    if (empty($product_name) || $quantity <= 0 || $price <= 0) {
        $error_message = "Please fill in all fields and ensure quantity and price are positive numbers.";
    } else {
        // Data is valid - proceed with purchase
        $total_amount = $quantity * $price;

        //  You would typically process the payment here.
        //  This is a placeholder - integrate with a payment gateway (Stripe, PayPal, etc.)
        //  In a real application, you'd handle the payment securely.
        echo "<h2>Purchase Confirmation</h2>";
        echo "<p>Product: " . $product_name . "</p>";
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Price per item: $" . $price . "</p>";
        echo "<p>Total Amount: $" . $total_amount . "</p>";
        echo "<p>Thank you for your purchase!</p>";

        //  Optionally store the order information in a database:
        //  (This part needs more detailed implementation based on your database structure)
        //  You'd likely use a query like:
        //  INSERT INTO orders (product_name, quantity, price, total_amount, order_date)
        //  VALUES ('$product_name', $quantity, $price, $total_amount, NOW());
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Configuration
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Hat', 'price' => 15.00],
];

$cart = []; // Initialize empty cart

// Function to add item to cart
function addToCart($productId, $quantity = 1, $cart) {
    if (array_key_exists($productId, $products)) {
        if (isset($cart[$productId])) {
            $cart[$productId]['quantity'] += $quantity;
        } else {
            $cart[$productId] = ['name' => $products[$productId]['name'], 'price' => $products[$productId]['price'], 'quantity' => $quantity];
        }
    } else {
        echo "Product ID $productId not found.";
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $productId => $item) {
        echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " (Quantity: " . $item['quantity'] . ") </li>";
    }
    echo "</ul>";

    // Calculate total price
    $total = 0;
    foreach ($cart as $productId => $item) {
        $total += $item['price'] * $item['quantity'];
    }

    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}


// Handle form submission (add to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id']; // Cast to integer
        $quantity = (int)$_POST['quantity'];  // Cast to integer

        addToCart($productId, $quantity, $cart); // Pass cart to addToCart
        displayCart($cart); // Display updated cart
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Purchase Items</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>

    <button type="submit">Add to Cart</button>
</form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "root";
$db_password = "";

// --- Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli Connection object or null if connection fails.
 */
function connect_to_db() {
    global $db_host, $db_name, $db_user, $db_password;
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

/**
 * Adds a product to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return bool True if added successfully, false otherwise.
 */
function add_to_cart(int $product_id, int $quantity) {
    global $conn;

    // Check if the product already exists in the cart
    $query = "SELECT * FROM cart WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Product exists, update the quantity
        $query = "UPDATE cart SET quantity = quantity + ? WHERE product_id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("is", $quantity, $product_id);
        $result = $stmt->execute();

        if ($result) {
            return true;
        } else {
            // Handle errors
            error_log("Error updating cart: " . $conn->error);
            return false;
        }
    } else {
        // Product doesn't exist, add a new entry
        $query = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("is", $product_id, $quantity);
        $result = $stmt->execute();

        if ($result) {
            return true;
        } else {
            // Handle errors
            error_log("Error inserting into cart: " . $conn->error);
            return false;
        }
    }

    $stmt->close(); // Close the statement
    return false;
}

/**
 * Retrieves the shopping cart contents.
 *
 * @return array An array of product details from the cart, or an empty array if the cart is empty.
 */
function get_cart_contents() {
    global $conn;

    $query = "SELECT p.product_name, c.quantity, p.price FROM cart c JOIN products p ON c.product_id = p.product_id";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $cart_contents = array();
        while ($row = $result->fetch_assoc()) {
            $cart_contents[] = $row;
        }
        return $cart_contents;
    } else {
        return array(); // Empty cart
    }
}

/**
 * Clears the entire shopping cart.
 *
 * @return bool True if successful, false otherwise.
 */
function clear_cart() {
    global $conn;
    $query = "DELETE FROM cart";
    $result = $conn->query($query);

    if ($result) {
        return true;
    } else {
        // Handle errors
        error_log("Error clearing cart: " . $conn->error);
        return false;
    }
}


// --- Main Purchase Logic (Example) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // 1. Add items to the cart
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        if (add_to_cart($product_id, $quantity)) {
            echo "<p>Item added to cart.</p>";
        } else {
            echo "<p>Error adding item to cart.</p>";
        }
    }

    // 2.  Clear the cart (e.g., after a successful purchase)
    if (isset($_POST['clear_cart'])) {
        if (clear_cart()) {
            echo "<p>Cart cleared successfully.</p>";
        } else {
            echo "<p>Error clearing cart.</p>";
        }
    }

}


// --- Example Product Table (For demonstration) ---
// You should create this in your database.

// CREATE TABLE products (
//     product_id INT PRIMARY KEY AUTO_INCREMENT,
//     product_name VARCHAR(255) NOT NULL,
//     price DECIMAL(10, 2) NOT NULL
// );

// INSERT INTO products (product_name, price) VALUES
// ('Laptop', 1200.00),
// ('Mouse', 25.00),
// ('Keyboard', 75.00);


// --- Example HTML Form (To be integrated into your webpage) ---

// <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
//     <label for="product_id">Product ID:</label>
//     <select name="product_id" id="product_id">
//         <option value="1">1</option>  <!-- Laptop -->
//         <option value="2">2</option>  <!-- Mouse -->
//         <option value="3">3</option>  <!-- Keyboard -->
//     </select><br><br>

//     <label for="quantity">Quantity:</label>
//     <input type="number" name="quantity" id="quantity" value="1" min="1"><br><br>

//     <input type="hidden" name="action" value="add_to_cart">
//     <input type="submit" value="Add to Cart">
//     <br><br>

//     <input type="hidden" name="action" value="clear_cart">
//     <input type="submit" value="Clear Cart">
// </form>
?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the form data (Important for security)
    $name = $_POST["name"];
    $email = $_POST["email"];
    $quantity = (int)$_POST["quantity"];  // Convert to integer
    $price = (float)$_POST["price"];      // Convert to float
    $address = $_POST["address"];

    // Sanitize input (Example - more robust sanitization might be needed)
    $name = htmlspecialchars($name);
    $email = htmlspecialchars($email);
    $address = htmlspecialchars($address);

    // Check if required fields are filled
    if (empty($name) || empty($email) || empty($quantity) || empty($price) || empty($address)) {
        $error = "Please fill in all required fields.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } elseif ($quantity <= 0 || $price <= 0) {
        $error = "Quantity and Price must be greater than zero.";
    } else {
        //  Simulate a purchase confirmation
        $total = $quantity * $price;
        $confirmation_message = "Your purchase is confirmed! Total: $" . $total;

        // Store the order data (This is a basic example. In a real application,
        //  you would store the order in a database)
        $order_data = array(
            "name" => $name,
            "email" => $email,
            "quantity" => $quantity,
            "price" => $price,
            "address" => $address,
            "total" => $total,
            "timestamp" => date("Y-m-d H:i:s")
        );

        //  For demonstration, display the order data.  In a real app, store this in DB
        echo "<p>Order Details:</p>";
        echo "<pre>";
        print_r($order_data);
        echo "</pre>";

        echo "<p>" . $confirmation_message . "</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Make a Purchase</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="price">Price:</label>
        <input type="number" id="price" name="price" step="0.01" required><br><br>

        <label for="address">Address:</label>
        <input type="text" id="address" name="address" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php
session_start();

// Configuration
$items = []; // Array to store shopping cart items
$database_file = "cart_data.txt"; // File to store cart data (for simplicity - use a database in a real application)

// --- Helper Functions ---

// Add an item to the cart
function addToCart($product_id, $quantity) {
  global $items;

  // Check if the item is already in the cart
  foreach ($items as $key => $item) {
    if ($item['product_id'] == $product_id) {
      $items[$key]['quantity'] += $quantity;
      return;
    }
  }

  // If item not in cart, add it
  $items[] = ['product_id' => $product_id, 'quantity' => $quantity];
}

// Calculate the total price
function calculateTotal() {
  $total = 0;
  foreach ($items as $item) {
    // Assume you have a function to get product price by ID
    $price = getProductPrice($item['product_id']);
    $total_for_item = $price * $item['quantity'];
    $total += $total_for_item;
  }
  return $total;
}

// Save the cart to a file (for persistence)
function saveCartToFile() {
  file_put_contents($database_file, serialize($items));
}

// Load the cart from a file
function loadCartFromFile() {
  global $items;
  if (file_exists($database_file)) {
    $cartData = file_get_contents($database_file);
    if ($cartData = @unserialize($cartData)) { //Use @ to suppress errors
        $items = $cartData;
    }
  }
}

// --- Mock Product Price Function (Replace with your actual database query) ---
function getProductPrice($product_id) {
  // This is a mock function. In a real application, you'd query your database.
  // For demonstration purposes, it returns a hardcoded price.
  $product_prices = [
    1 => 10.00,
    2 => 20.00,
    3 => 15.00
  ];
  return $product_prices[$product_id] ?? 0; // Return 0 if product_id not found
}


// --- Cart Handling Functions ---

// Add to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  addToCart($product_id, $quantity);
  saveCartToFile();
  header("Location: cart.php"); // Redirect to cart.php
  exit();
}

// Remove item from cart
if (isset($_GET['remove_from_cart'])) {
  $product_id = $_GET['remove_from_cart'];
  removeItemFromCart($product_id);
  saveCartToFile();
  header("Location: cart.php"); // Redirect to cart.php
  exit();
}

// Remove Item function (helper function for remove from cart)
function removeItemFromCart($product_id) {
  global $items;
  foreach ($items as $key => $item) {
    if ($item['product_id'] == $product_id) {
      unset($items[$key]);
      return;
    }
  }
}

// --- Display Cart (cart.php) ---

// Load cart data on page load
loadCartFromFile();

// Calculate total
$total = calculateTotal();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h2>Shopping Cart</h2>

  <?php if (empty($items)) {
    echo "<p>Your cart is empty.</p>";
  } else { ?>
    <table border="1">
      <thead>
        <tr>
          <th>Product ID</th>
          <th>Product Name</th>
          <th>Quantity</th>
          <th>Price</th>
          <th>Subtotal</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($items as $key => $item) { ?>
          <tr class="cart-item">
            <td><?php echo $item['product_id']; ?></td>
            <td><?php echo $item['product_id']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td><?php echo getProductPrice($item['product_id']); ?></td>
            <td><?php echo getProductPrice($item['product_id']) * $item['quantity']; ?></td>
            <td>
              <a href="cart.php?remove_from_cart=<?php echo $item['product_id']; ?>">Remove</a>
            </td>
          </tr>
        <?php } ?>
      </tbody>
    </table>

    <p>Total: $<?php echo $total; ?></p>
  <?php } ?>

  <form method="post" action="cart.php">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <?php
      // Populate the dropdown with product IDs (replace with your actual product data)
      foreach ($product_ids as $id) {
        echo "<option value=\"$id\">$id</option>";
      }
      ?>
    </select>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Session handling (for user authentication and cart data)
session_start();

// -------------------- Purchase Functionality --------------------

// Function to add an item to the cart (already exists, but included for completeness)
function addToCart($productId, $quantity) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
  } else {
    $cart = [];
  }

  if (isset($cart[$productId])) {
    $cart[$productId] = $cart[$productId] + $quantity;
  } else {
    $cart[$productId] = $quantity;
  }

  $_SESSION['cart'] = $cart;
}

// Function to process the purchase
function processPurchase() {
  // 1. Validate Cart
  if (empty($_SESSION['cart'])) {
    return false; // Cart is empty, nothing to purchase
  }

  // 2. Get Cart Data
  $cartItems = $_SESSION['cart'];
  $totalAmount = 0;

  // 3.  Simulate Database Interaction (Replace with actual database queries)
  //     This section simulates saving the purchase details to the database.
  //     Replace this with your database interaction code.

  // Example: Simulate adding order information
  $orderDate = date('Y-m-d H:i:s');
  $userId = isset($_SESSION['userId']) ? $_SESSION['userId'] : null; // Get user ID

  foreach ($cartItems as $productId => $quantity) {
    // Simulate fetching product details from database (replace with your query)
    $product = getProductDetails($productId);  // Assume this function exists and returns product info

    // Calculate price for this item
    $price = $product['price'];
    $itemTotal = $price * $quantity;

    // Add to order details (simulated - replace with database insert)
    //  In a real application, you would insert this into an 'orders' table.

    // For demonstration, let's print the order details
    echo "<p>Product ID: " . $productId . ", Quantity: " . $quantity . ", Price per item: " . $price . ", Total: " . $itemTotal . "</p>";

    $totalAmount += $itemTotal;
  }

  // 4. Clear the Cart
  $_SESSION['cart'] = [];

  // 5.  Success Message
  echo "<p><b>Purchase Successful!</b> Total amount: $" . $totalAmount . "</p>";

  // 6.  Session management (optional - log out after purchase)
  //  You might want to log out the user after a successful purchase.
  //  session_destroy();
  //  session_unset();
}


// -------------------- Helper Functions (Example) --------------------

// Simulate fetching product details from the database
function getProductDetails($productId) {
  // Replace this with your actual database query to get product details
  // This is just a dummy product for demonstration purposes.
  $products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75]
  ];

  if (isset($products[$productId])) {
    return $products[$productId];
  } else {
    return null; // Product not found
  }
}

// --------------------  Page Display (Example) --------------------

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  processPurchase();
}

// Display the cart (for demonstration)
echo "<h2>Cart Items</h2>";
if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $quantity) {
    $product = getProductDetails($productId);
    if ($product) {
      echo "<li>Product: " . $product['name'] . ", Quantity: " . $quantity . "</li>";
    }
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Database connection (replace with your actual database credentials)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the form data
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = (int)($_POST["quantity"]);
    $product_id = (int)($_POST["product_id"]);

    // Basic validation (more robust validation is recommended)
    if (empty($name) || empty($email) || $quantity <= 0 || $product_id <= 0) {
        $error = "Please fill in all fields and ensure quantity and product ID are positive.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Process the purchase
        // 1.  Insert the order into the database
        $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "INSERT INTO orders (name, email, product_id, quantity) VALUES ('$name', '$email', $product_id, $quantity)";

        if ($conn->query($sql) === TRUE) {
            $success = "Order placed successfully! Order ID: " . $conn->insert_id;
        } else {
            $error = "Error placing order: " . $conn->error;
        }

        $conn->close();
    }
}
?>


<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
        <p style="color: green;"><?php echo $success; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php
session_start();

// Database connection (replace with your actual database credentials)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the form data
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = (int)($_POST["quantity"]);
    $product_id = (int)($_POST["product_id"]);

    // Basic validation (still recommended for input sanity)
    if (empty($name) || empty($email) || $quantity <= 0 || $product_id <= 0) {
        $error = "Please fill in all fields and ensure quantity and product ID are positive.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Process the purchase using prepared statements
        // 1.  Create a prepared statement
        $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $stmt = $conn->prepare("INSERT INTO orders (name, email, product_id, quantity) VALUES (?, ?, ?, ?)");
        $stmt->bind_param("sss", $name, $email, $product_id); // "sss" means three string parameters
        $stmt->execute();

        $conn->close();
        $success = "Order placed successfully! Order ID: " . $conn->insert_id;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
        <p style="color: green;"><?php echo $success; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Configuration (Modify these for your application)
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200.00],
  2 => ['name' => 'Mouse', 'price' => 25.00],
  3 => ['name' => 'Keyboard', 'price' => 75.00],
  4 => ['name' => 'Monitor', 'price' => 300.00]
];

$cart = []; // Initialize an empty cart
$cart_items = []; // Initialize an empty cart items array

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
  if (isset($products[$product_id])) {
    $product = $products[$product_id];
    $item = [
      'product_id' => $product_id,
      'name' => $product['name'],
      'price' => $product['price'],
      'quantity' => $quantity
    ];

    // Check if the item already exists in the cart
    foreach ($cart_items as $key => $cartItem) {
      if ($cartItem['product_id'] == $cartItem['product_id']) {
        // Update quantity if item exists
        $cart_items[$key]['quantity'] += $quantity;
        return;
      }
    }

    // Add new item to the cart
    $cart_items[] = $item;
    return;
  } else {
    echo "Product ID $product_id not found.";
  }
}

// Function to view the cart
function viewCart()
{
  echo "<h2>Shopping Cart</h2>";
  if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart_items as $key => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $total_price = 0;
    foreach ($cart_items as $item) {
      $total_price += $item['price'] * $item['quantity'];
    }
    echo "<p><strong>Total: $" . number_format($total_price, 2) . "</strong></p>";
  }
}

// Function to remove an item from the cart
function removeItem($product_id)
{
    if (isset($cart_items[$product_id])) {
        unset($cart_items[$product_id]);
    } else {
        echo "Product ID $product_id not found in the cart.";
    }
}

// ---  Example Usage / Handling Request (Simulating a form submission) ---

// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Add to cart
  if (isset($_POST["action"]) && $_POST["action"] == "add_to_cart") {
    $product_id = $_POST["product_id"];
    $quantity = isset($_POST["quantity"]) ? (int)$_POST["quantity"] : 1;
    addToCart($product_id, $quantity);
  }

  // Remove from cart
  if (isset($_POST["action"]) && $_POST["action"] == "remove_item") {
    $product_id = $_POST["product_id"];
    removeItem($product_id);
  }

  // Redirect to view cart
  header("Location: cart.php"); //  Assuming you have a 'cart.php' file to display the cart
  exit(); // Important to stop further execution after redirection
}

?>

<!--  This would be your 'cart.php' file (or a similar page for display) -->
<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <form method="post" action="">

    <h2>Available Products</h2>
    <ul>
      <?php foreach ($products as $id => $product): ?>
        <li>
          <?php echo $product['name'] . " - $" . number_format($product['price'], 2) ?>
          <input type="number" name="quantity" value="1" min="1">
          <input type="hidden" name="product_id" value="<?php echo $id; ?>">
          <input type="submit" name="action" value="add_to_cart" style="margin-left: 10px;">
        </li>
      <?php endforeach; ?>
    </ul>

    <?php if (!empty($cart_items)): ?>
      <br>
      <input type="submit" name="action" value="remove_item" style="margin-left: 10px;">
    <?php endif; ?>

  </form>

  <?php viewCart(); ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Add this to prevent SQL injection. Use prepared statements!
// This is a VERY basic example and should be expanded for production code.
// It's crucial to use prepared statements with real-world applications.
// This example assumes you're using MySQLi.  Adjust accordingly if using PDO.

// Function to connect to the database
function connectToDatabase() {
    $mysqli = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($mysqli->connect_error) {
        die("Connection failed: " . $mysqli->connect_error);
    }
    return $mysqli;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $address) {
    $mysqli = connectToDatabase();

    // Validate inputs (basic example - expand for more robust validation)
    if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($address)) {
        return "Error: All fields are required.";
    }

    // ---  Data Sanitization and Validation (Crucial!) ---
    //  Never trust user input. Sanitize and validate *everything*.
    //  Example:  Validate email format, numeric input, etc.

    // Create the SQL query
    $query = "INSERT INTO orders (cart_id, customer_name, customer_email, address, order_date)
              VALUES ('$cart_id', '$customer_name', '$customer_email', '$address', NOW())";

    if ($mysqli->query($query) === TRUE) {
        // Optionally, update the cart_items table to mark items as purchased
        // Example:  $mysqli->query("UPDATE cart_items SET purchased = 1 WHERE cart_id = '$cart_id'")

        return "Purchase successful! Order ID: " . $mysqli->insert_id;
    } else {
        return "Error: " . $mysqli->error;
    }
}

// ------------------- Example Usage (Simulated) -------------------

// Simulated Cart Data (Replace with your actual cart retrieval)
$cart_id = 123;
$customer_name = "John Doe";
$customer_email = "john.doe@example.com";
$address = "123 Main St, Anytown, USA";

// Process the purchase
$result = handlePurchase($cart_id, $customer_name, $customer_email, $address);

echo $result; // Output the result of the purchase

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_username = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $product_name = filter_input(INPUT_POST, "product_name", FILTER_SANITIZE_STRING);


  // Check if validation passed
  if (empty($name) || empty($email) || empty($quantity) || empty($product_name)) {
    $error_message = "Please fill in all fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error_message = "Invalid email format.";
  } elseif ($quantity <= 0) {
    $error_message = "Quantity must be a positive integer.";
  } else {
    // Prepare the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, product_name) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db->prepare($sql);

    // Bind the parameters
    $stmt->bind_param("ssii", $name, $email, $quantity, $product_name);

    // Execute the statement
    if ($stmt->execute()) {
      $success_message = "Order placed successfully!";
    } else {
      $error_message = "Error placing order. " . $stmt->error;
    }

    // Close the statement
    $stmt->close();
  }
}

// Database connection
$db = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check the connection
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Place an Order</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase request.
 *
 * @param array $cartData An associative array containing the items in the cart 
 *                       (e.g., ['product_id' => 123, 'quantity' => 2]).
 * @return string The purchase status message.
 */
function processPurchase(array $cartData) {
  // 1. Validate Cart Data
  if (empty($cartData)) {
    return "Error: Cart is empty.";
  }

  // 2. Simulate Order Creation (Replace with your actual order logic)
  $order_id = bin2hex(random_bytes(16)); // Generate a unique order ID
  $total_amount = calculateTotal($cartData);

  // 3. Create Order in Database (Simulated)
  $sql = "INSERT INTO orders (order_id, order_date, total_amount) VALUES (?, NOW(), ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ss", $order_id, $total_amount);
  if (!$stmt->execute()) {
    return "Error creating order: " . $conn->error;
  }
  $stmt->close();

  // 4. Create Order Items (Simulated)
  $sql_items = "INSERT INTO order_items (order_id, product_id, quantity) ";
  $sql_items .= "VALUES (?, ?, ?)";
  $stmt_items = $conn->prepare($sql_items);
  foreach ($cartData as $product_id => $quantity) {
    $stmt_items->bind_param("sis", $order_id, $product_id, $quantity);
    if (!$stmt_items->execute()) {
      return "Error creating order item: " . $conn->error;
    }
  }
  $stmt_items->close();



  // 5. Update Cart (Simulate - Remove items from the cart)
  // In a real application, you'd update the cart table.
  // This example just returns a success message.

  return "Purchase successful! Order ID: " . $order_id;
}


/**
 * Calculates the total amount of the order.
 *
 * @param array $cartData The cart data.
 * @return float The total amount.
 */
function calculateTotal(array $cartData) {
  $total = 0;
  foreach ($cartData as $product_id => $quantity) {
    // Replace this with your actual product price lookup
    $product_price = getProductPrice($product_id); 
    $total += $product_price * $quantity;
  }
  return round($total, 2);
}

/**
 * Retrieves the price of a product.  (Replace with your actual database lookup)
 *
 * @param int $product_id The product ID.
 * @return float The product price.
 */
function getProductPrice(int $product_id) {
  //  Replace with your actual database query to get product price
  // This is just an example.
  if ($product_id == 123) {
    return 25.00;
  } elseif ($product_id == 456) {
    return 10.50;
  } else {
    return 0.00;  //Default price if not found.
  }
}



// --- Example Usage ---

// Sample cart data
$cart = [
  123 => 2,  // Product ID 123, quantity 2
  456 => 1   // Product ID 456, quantity 1
];

// Process the purchase
$purchase_result = processPurchase($cart);
echo $purchase_result;  // Output the purchase status
?>


<?php

// Database Connection (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    die();
}

// Function to handle the purchase process
function handlePurchase($cart, $customer_name, $customer_email, $payment_method) {
    global $conn;

    // 1. Create Order Record
    $stmt = $conn->prepare("INSERT INTO orders (customer_name, customer_email, order_date, payment_method) VALUES (:customer_name, :customer_email, NOW(), :payment_method)");
    $order_id = $stmt->execute([
        ':customer_name' => $customer_name,
        ':customer_email' => $customer_email,
        ':payment_method' => $payment_method
    ]);

    $order_id = $conn->lastInsertId(); // Get the last inserted ID
    echo "Order created with ID: " . $order_id . "<br>";


    // 2. Add Order Items to Order Items Table
    foreach ($cart['items'] as $item_id => $quantity) {
        $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
        $stmt->execute([
            ':order_id' => $order_id,
            ':product_id' => $item_id,
            ':quantity' => $quantity
        ]);
    }

    // 3. Update Inventory (Simple example - adjust for complex scenarios)
    foreach ($cart['items'] as $item_id => $quantity) {
        $stmt = $conn->prepare("UPDATE products SET stock = stock - :quantity WHERE id = :product_id");
        $stmt->execute([
            ':product_id' => $item_id,
            ':quantity' => $quantity
        ]);
    }

    // 4. Clear Cart (For demonstration - in a real application, you'd handle this more robustly)
    $cart['items'] = [];
    echo "Cart cleared.";
}

// --- Example Usage (Simulated Form Handling) ---

// Assuming you have a form that collects this data.  This is just an example.

// 1. Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // 2. Validate Form Data (IMPORTANT - Add robust validation here!)
    $customer_name = htmlspecialchars($_POST["customer_name"]);
    $customer_email = htmlspecialchars($_POST["customer_email"]);
    $payment_method = htmlspecialchars($_POST["payment_method"]);
    $cart = $_POST['cart'];

    if (empty($customer_name) || empty($customer_email) || empty($payment_method)) {
        echo "Error: Please fill in all fields.";
    } else {
        // 3. Handle the Purchase
        handlePurchase($cart, $customer_name, $customer_email, $payment_method);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store - Purchase</title>
</head>
<body>

    <h1>Online Store - Purchase</h1>

    <form method="post">
        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" value="<?php echo isset($customer_name) ? htmlspecialchars($customer_name) : ''; ?>">
        <br><br>

        <label for="customer_email">Email:</label>
        <input type="email" id="customer_email" name="customer_email" value="<?php echo isset($customer_email) ? htmlspecialchars($customer_email) : ''; ?>">
        <br><br>

        <label for="payment_method">Payment Method:</label>
        <select id="payment_method" name="payment_method">
            <option value="credit_card">Credit Card</option>
            <option value="paypal">PayPal</option>
            <option value="other">Other</option>
        </select>
        <br><br>


        <h2>Items in Cart:</h2>
        <?php
        //Display cart items
        if (!empty($cart['items'])) {
            echo "<ul>";
            foreach ($cart['items'] as $product_id => $quantity) {
                //Get product name (replace with your database lookup)
                $product_name = "Product " . $product_id; // Replace this with actual product name retrieval
                echo "<li>$product_name x $quantity</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>Your cart is empty.</p>";
        }
        ?>


        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_pass = "your_password";

// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $cart  The cart data (product ID, quantity).
 * @param string $customer_name  Customer's name.
 * @param string $customer_email Customer's email.
 * @return int|string  Order ID on success, or error message on failure.
 */
function processPurchase(array $cart, string $customer_name, string $customer_email) {
    // Validate cart data
    if (empty($cart)) {
        return "Error: Cart is empty.";
    }

    // Prepare SQL query for inserting order information
    $sql = "INSERT INTO orders (customer_name, customer_email, order_date) 
            VALUES ('" . $customer_name . "', '" . $customer_email . "', NOW())";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        $order_id = $conn->insert_id; // Get the newly created order ID

        // Prepare SQL query for inserting order items
        $sql_items = "INSERT INTO order_items (order_id, product_id, quantity) 
                       SELECT " . $order_id . ", product_id, quantity 
                       FROM " . $conn->dbname . ".cart 
                       WHERE product_id IN (" . implode(',', array_keys($cart)) . ")";

        if ($conn->query($sql_items) === TRUE) {
            // Clear the cart after successful purchase
            clearCart($conn, array_keys($cart));
            return $order_id;
        } else {
            // Rollback the order if item insertion fails
            $conn->rollback();
            return "Error: Failed to insert order items.  Rollback performed.";
        }
    } else {
        return "Error: Failed to insert order.  Rollback performed.";
    }
}

/**
 * Clears the cart after a purchase.
 *
 * @param mysqli $conn Database connection.
 * @param array $product_ids Array of product IDs to remove from the cart.
 */
function clearCart(mysqli $conn, array $product_ids) {
    $sql = "DELETE FROM cart WHERE product_id IN (" . implode(',', $product_ids) . ")";
    if ($conn->query($sql) === TRUE) {
        echo "Cart cleared successfully!";
    } else {
        echo "Error clearing cart.";
    }
}



// --- Example Usage (Simulated) ---

// Simulate a product database (replace with your real product data)
$products = [
    1 => ["name" => "Laptop", "price" => 1200],
    2 => ["name" => "Mouse", "price" => 25],
    3 => ["name" => "Keyboard", "price" => 75]
];

// Simulate user input
$customer_name = $_POST["customer_name"];
$customer_email = $_POST["customer_email"];
$cart = $_POST["cart"]; // Array of product IDs and quantities

// Process the purchase
$order_id = processPurchase($cart, $customer_name, $customer_email);

// Display the result
echo "<br>Order ID: " . $order_id . "<br>";
echo "<br>Order Details:<br>";

// Display order details (replace with actual database retrieval)
if ($order_id) {
    $sql_order = "SELECT * FROM orders WHERE id = " . $order_id;
    $result = $conn->query($sql_order);

    if ($result->num_rows > 0) {
        $order = $result->fetch_assoc();
        echo "Customer Name: " . $order["customer_name"] . "<br>";
        echo "Customer Email: " . $order["customer_email"] . "<br>";
        echo "Order Date: " . $order["order_date"] . "<br>";
        
        $sql_items = "SELECT product_id, quantity FROM order_items WHERE order_id = " . $order_id;
        $item_result = $conn->query($item_result);
        
        if ($item_result->num_rows > 0) {
          while ($item = $item_result->fetch_assoc()) {
            $product_name = "Product " . $item["product_id"]; //Replace this with real product name retrieval
            $product_price = $products[$item["product_id"]]["price"];
            echo "  - " . $product_name . " (Quantity: " . $item["quantity"] . ") - Price: $" . $product_price . "<br>";
          }
        }
    } else {
        echo "Order not found.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Form</h1>

<form method="post" action="">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="cart">Cart (Product ID:Quantity):</label>
    <input type="text" id="cart" name="cart" value="1:2,2:1" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual values)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate and sanitize input
    $product_id = isset($_POST["product_id"]) ? $_POST["product_id"] : null;
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 0; // Ensure quantity is an integer
    $customer_name = isset($_POST["customer_name"]) ? htmlspecialchars($_POST["customer_name"]) : "";
    $customer_email = isset($_POST["customer_email"]) ? htmlspecialchars($_POST["customer_email"]) : "";

    // Input validation (Add more robust validation as needed)
    if (!is_numeric($product_id) || $product_id <= 0) {
        $error_message = "Invalid product ID.";
    } elseif ($quantity <= 0) {
        $error_message = "Invalid quantity.";
    } else {
        //  Database query (Replace with your actual product table structure)
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email)
                VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email')";

        if ($conn->query($sql) === TRUE) {
            $success_message = "Order placed successfully!";
        } else {
            $error_message = "Error placing order: " . $conn->error;
        }

        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store - Purchase</title>
</head>
<body>

    <h1>Online Store - Purchase</h1>

    <?php if (isset($error_message)) { ?>
        <p style="color: red;"><?php echo $error_message; ?></p>
    <?php } ?>

    <?php if (isset($success_message)) { ?>
        <p style="color: green;"><?php echo $success_message; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php
// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart, $user_id) {
  $conn = connectToDatabase();

  // 1. Update the Cart (Reduce quantities)
  foreach ($cart as $product_id => $quantity) {
    // Check if the product exists
    $product_query = "SELECT id, quantity FROM products WHERE id = $product_id";
    $product_result = $conn->query($product_query);

    if ($product_result->num_rows > 0) {
      $product_data = $product_result->fetch_assoc();
      $new_quantity = $product_data['quantity'] - $quantity;

      // Check if enough stock
      if ($new_quantity >= 0) {
        // Update product quantity in the database
        $update_query = "UPDATE products SET quantity = $new_quantity WHERE id = $product_id";
        if ($conn->query($update_query) === TRUE) {
          echo "Product quantity updated successfully.";
        } else {
          echo "Error updating product quantity: " . $conn->error;
        }
      } else {
        echo "Not enough stock for product ID: " . $product_id;
      }
    } else {
      echo "Product ID: " . $product_id . " not found.";
    }
  }

  // 2. Create an Order Record
  $order_id = $conn->insert_id; // Get the last inserted ID (for simplicity)
  $order_date = date("Y-m-d H:i:s");
  $total_amount = calculateTotal($cart); // Call a function to calculate total

  $insert_order_query = "INSERT INTO orders (user_id, order_date, total_amount, order_id) VALUES ($user_id, '$order_date', $total_amount, $order_id)";
  if ($conn->query($insert_order_query) === TRUE) {
    echo "Order created successfully!";
  } else {
    echo "Error creating order: " . $conn->error;
  }

  // 3. Create Order Items (Link Products to Orders)
  foreach ($cart as $product_id => $quantity) {
    $insert_order_item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ($order_id, $product_id, $quantity)";
    if ($conn->query($insert_order_item_query) === TRUE) {
      echo "Order item added successfully.";
    } else {
      echo "Error adding order item: " . $conn->error;
    }
  }

  // Close the connection
  $conn->close();
}

// Function to calculate the total order amount
function calculateTotal($cart) {
  $total = 0;
  foreach ($cart as $product_id => $quantity) {
    $product_query = "SELECT price FROM products WHERE id = $product_id";
    $product_result = $conn->query($product_result);
    if ($product_result->num_rows > 0) {
      $product_data = $product_result->fetch_assoc();
      $total += $product_data['price'] * $quantity;
    }
  }
  return $total;
}


// --- Example Usage (Simulated Cart) ---
$cart = [
  1 => 2,  // Product ID 1, quantity 2
  2 => 1,  // Product ID 2, quantity 1
  3 => 3   // Product ID 3, quantity 3
];

$user_id = 1; // Replace with the actual user ID

handlePurchase($cart, $user_id);

?>


<?php
session_start();

// Configuration
$cart_file = 'cart.php'; // File to store the cart data
$item_name_key = 'item_name';
$item_price_key = 'item_price';
$quantity_key = 'quantity';

// Helper Functions

/**
 * Adds an item to the cart.
 *
 * @param string $itemName The name of the item.
 * @param float $itemPrice The price of the item.
 * @param int $quantity The quantity to add.
 */
function addToCart($itemName, $itemPrice, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    $_SESSION['cart'][] = [
        $item_name_key => $itemName,
        $quantity_key => $quantity
    ];
    
    // Update existing item
    foreach ($_SESSION['cart'] as &$item) {
        if ($item[$item_name_key] === $itemName) {
            $item[$quantity_key] += $quantity;
            break;
        }
    }
}

/**
 * Removes an item from the cart by name.
 *
 * @param string $itemName The name of the item to remove.
 */
function removeFromCart($itemName) {
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item[$item_name_key] === $itemName) {
                unset($_SESSION['cart'][$key]);
                // Re-index the cart array after removal
                $_SESSION['cart'] = array_values($_SESSION['cart']);
                return;
            }
        }
    }
}

/**
 * Gets the cart contents.
 *
 * @return array An array containing the cart items.
 */
function getCart() {
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    }
    return [];
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
    $total = 0;
    $cart = getCart();
    foreach ($cart as $item) {
        $total += $item[$item_price_key] * $item[$quantity_key];
    }
    return $total;
}

// ---  Shopping Cart Logic  ---

// Example Usage (Illustrative - Replace with your actual product data)

// Add some items to the cart
addToCart('Laptop', 1200.00, 1);
addToCart('Mouse', 25.00, 2);
addToCart('Keyboard', 75.00, 1);



// Display the cart contents
$cart = getCart();

if (empty($cart)) {
    echo "<h1>Your Cart is Empty</h1>";
} else {
    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item[$item_name_key] . " - $" . $item[$item_price_key] . " x " . $item[$quantity_key] . " = $" . ($item[$item_price_key] * $item[$quantity_key]) . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";

    // Example: Remove an item
    // removeFromCart('Mouse');

}


// ---  Save Cart to File (Optional - for persistence) ---
// This example saves the cart data to a file named 'cart.php'
// This file will be loaded on subsequent page loads.
//  Important:  Make sure this file is not directly accessible via web browser
//  to prevent security vulnerabilities.  Proper file permissions should be set.
//
// if (empty($_SESSION['cart'])) {
//     // Clear the cart if it's empty to avoid saving an empty cart
//     unset($_SESSION['cart']);
// }
// else {
//     file_put_contents($cart_file, json_encode($_SESSION['cart']));
// }
?>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'shopping_cart';
$dbUser = 'root';
$dbPass = '';

// Connect to the database
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --------------------- Product Data ---------------------
//  This is a simplified way to store product data.  In a real application,
//  you would likely pull this from a database.
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200.00, 'image' => 'laptop.jpg'],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25.00, 'image' => 'mouse.jpg'],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75.00, 'image' => 'keyboard.jpg'],
];


// --------------------- Cart Functions ---------------------

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @return void
 */
function addToCart($product_id) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$product_id])) {
        // Product already in cart, increment quantity
        $_SESSION['cart'][$product_id]['quantity']++;
    } else {
        // Product not in cart, add it
        $_SESSION['cart'][$product_id] = [
            'quantity' => 1,
            'price' => $products[$product_id]['price']
        ];
    }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float
 */
function calculateCartTotal() {
    $total = 0.00;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['quantity'] * $item['price'];
        }
    }
    return $total;
}

// --------------------- Cart Operations (Handle Actions) ---------------------

// Add to cart (e.g., from a button click)
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure it's an integer
    addToCart($product_id);
}

// Update quantity (e.g., from a quantity input)
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    updateCartQuantity($product_id, $quantity);
}

// Remove from cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    removeFromCart($product_id);
}

// --------------------- Display the Cart ---------------------

echo "<!DOCTYPE html>";
echo "<html lang='en'>";
echo "<head>";
echo "<meta charset='UTF-8'>";
echo "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
echo "<title>Shopping Cart</title>";
echo "</head>";
echo "<body>";

echo "<h1>Shopping Cart</h1>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>";
        echo "<img src='$products[$item['id']]['image']' alt='$products[$item['id']]['name']' style='width:100px;'>";
        echo "<p>$products[$item['id']]['name']</p>";
        echo "<p>Quantity: $item['quantity']</p>";
        echo "<p>Price: $items[$item['id']]['price']</p>";
        echo "<form method='post'>";
        echo "<label for='quantity_$item['id']'>Update Quantity:</label>";
        echo "<input type='number' id='quantity_$item['id']' name='quantity_$item['id']' value='$item['quantity']'>";
        echo "<input type='submit' name='update_quantity' value='Update'>";
        echo "<input type='hidden' name='product_id' value='$item['id']'>";
        echo "</form>";
        echo "<input type='submit' name='remove_from_cart' value='Remove from Cart'>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . calculateCartTotal() . "</p>";
}

// Display checkout button
echo "<form method='post'>";
echo "<input type='submit' name='checkout' value='Checkout'>";
echo "</form>";

echo "</body>";
echo "</html>";

?>


<?php

// This script handles the purchase process.
// It simulates adding items to a cart, processing the order,
// and providing a confirmation message.

// Assume we have a database connection setup (replace with your actual connection)
// For demonstration, we'll use a simple array for the cart.
$cart = [];
$order_total = 0.0;

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $item_name
 * @param float $price
 * @return void
 */
function addItemToCart(string $item_name, float $price) {
    global $cart;
    $cart[] = ['name' => $item_name, 'price' => $price];
    $order_total += $price;
}

/**
 * Calculates the total order amount.
 *
 * @return float
 */
function calculateOrderTotal() {
    global $order_total;
    return $order_total;
}

/**
 * Displays the cart contents.
 *
 * @return void
 */
function displayCart() {
    echo "<h2>Cart Items</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>$item['name'] - $" . number_format($item['price'], 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . number_format($order_total, 2) . "</strong></p>";
}

// ---  Processing the Purchase (Simulated) ---

// 1. Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 2. Validate the data (basic example - improve for production)
    if (empty($_POST['item_name']) || empty($_POST['item_price'])) {
        $error_message = "Please fill in all fields.";
    } elseif (!is_numeric($_POST['item_price']) || $_POST['item_price'] <= 0) {
        $error_message = "Invalid item price. Please enter a positive number.";
    } else {
        // 3. Add the item to the cart
        addItemToCart($_POST['item_name'], (float)$_POST['item_price']);

        // 4. Display the cart
        displayCart();

        // 5.  Confirmation message
        echo "<p><strong>Thank you for your order!</strong></p>";
        echo "<p>Your order has been placed.</p>";

        // Reset the cart (for subsequent purchases)
        $cart = [];
        $order_total = 0.0;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Add Items to Cart</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="item_name">Item Name:</label>
    <input type="text" id="item_name" name="item_name" required><br><br>

    <label for="item_price">Item Price:</label>
    <input type="number" id="item_price" name="item_price" step="0.01" required><br><br>

    <input type="submit" value="Add to Cart">
</form>

</body>
</html>


<?php

// Assuming we have a database connection established
// (You'll need to adapt this to your database setup)
// Example using mysqli:
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

try {
    $conn = new mysqli($servername, $username, $password, $dbname);
    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
} catch (Exception $e) {
    echo "Database connection error: " . $e->getMessage();
    exit();
}


// Function to handle the purchase process
function handlePurchase($product_id, $quantity, $customer_name, $customer_email) {
    global $conn; // Access the database connection

    // Validate inputs -  Crucial for security!
    if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
        return "Error: All fields are required.";
    }

    if (!is_numeric($quantity) || $quantity <= 0) {
        return "Error: Quantity must be a positive number.";
    }

    // Sanitize inputs to prevent SQL injection
    $product_id = $conn->real_escape_string($product_id);
    $customer_name = $conn->real_escape_string($customer_name);
    $customer_email = $conn->real_escape_string($customer_email);

    // Get product price
    $sql = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $product_price = $row['price'];
    } else {
        return "Error: Product not found.";
    }

    // Calculate total price
    $total_price = $product_price * $quantity;

    // Insert into the order table
    $sql = "INSERT INTO orders (product_id, customer_name, customer_email, quantity, total_price, order_date)
            VALUES ('$product_id', '$customer_name', '$customer_email', '$quantity', '$total_price', NOW())";

    if ($conn->query($sql) === TRUE) {
        return "Purchase successful! Order ID: " . $conn->insert_id;
    } else {
        return "Error: " . $conn->error;
    }
}

// Example usage (handling form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];

    $purchaseResult = handlePurchase($product_id, $quantity, $customer_name, $customer_email);
    echo $purchaseResult;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <button type="submit">Purchase</button>
    </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ---------------------  Purchase Functionality ---------------------

// 1. Add Purchase Form Handling
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if required fields are filled
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    if (empty($product_id) || empty($quantity)) {
        $error = "Please fill in all fields.";
    } else {
        // Validate quantity (ensure it's a number)
        if (!is_numeric($quantity) || $quantity <= 0) {
            $error = "Invalid quantity. Please enter a positive number.";
        } else {
            // Sanitize input (Important for security - prevent SQL injection)
            $product_id = mysqli_real_escape_string($conn, $product_id);
            $quantity = mysqli_real_escape_string($conn, $quantity);

            // Perform the purchase (insert into a "purchases" table)
            $sql = "INSERT INTO purchases (product_id, quantity) VALUES ('$product_id', '$quantity')";

            if ($conn->query($sql) === TRUE) {
                $success = "Purchase added successfully!";
            } else {
                $error = "Error adding purchase: " . $conn->error;
            }
        }
    }
}


// 2. Display Purchase Form (For initial page load)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<?php
// Display any error or success messages
if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
}

if (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
}
?>


<h2>Add a Purchase</h2>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Add to Cart</button>
</form>


</body>
</html>


<?php

// --- Database Configuration (Replace with your actual credentials) ---
$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// ---  Database Connection ---
try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// --- Product Data (Simulated for demonstration) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200.00],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25.00],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75.00],
];


// --- Purchase Functionality ---

// 1. Add to Cart (Simulated -  In a real application, you'd add to a session or database)
function addToCart($product_id, $quantity) {
    // In a real application, you'd update a shopping cart session or database
    // This is a simple demonstration
    echo "Added " . $quantity . " " . $product['name'] . " to the cart.<br>";
}

// 2. Process Purchase
function processPurchase($product_id, $quantity) {
    // Validate Input (Crucial for security!)
    if (!is_numeric($product_id) || !is_numeric($quantity) || $quantity <= 0) {
        return "Invalid input. Please enter valid product ID and quantity.";
    }

    $product = $products[$product_id];

    if (!isset($product)) {
        return "Product not found.";
    }

    $total_price = $product['price'] * $quantity;

    // Add purchase record to database (Replace with your database logic)
    try {
        $stmt = $pdo->prepare("INSERT INTO purchases (product_id, quantity, total_price) VALUES (:product_id, :quantity, :total_price)");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':total_price', $total_price);
        $stmt->execute();

        return "Purchase successful! Total: $" . number_format($total_price, 2);

    } catch (PDOException $e) {
        return "Error processing purchase: " . $e->getMessage();
    }
}

// ---  Example Usage (HTML Form for Purchase) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    $purchase_result = processPurchase($product_id, $quantity);

    echo $purchase_result . "<br>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Products</h1>

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"" . $id . "\">" . $product['name'] . "</option>";
        }
        ?>
    </select>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" min="1" value="1">

    <button type="submit">Purchase</button>
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  die("Connection failed: " . $e->getMessage());
}

// --- Product Data (Simulated for demonstration) ---
$products = [
  1 => ["id" => 1, "name" => "Laptop", "price" => 1200.00],
  2 => ["id" => 2, "name" => "Mouse", "price" => 25.00],
  3 => ["id" => 3, "name" => "Keyboard", "price" => 75.00],
];

// --- Purchase Functionality ---

function createPurchase($productId, $quantity, $customerName, $customerEmail) {
  global $conn, $products;

  // Validate inputs
  if (!$productId || !$quantity || !$customerName || !$customerEmail) {
    return "Error: All fields are required.";
  }

  if (!is_numeric($quantity) || $quantity <= 0) {
    return "Error: Invalid quantity. Quantity must be a positive number.";
  }

  // Validate Product ID
  if (!isset($products[$productId])) {
    return "Error: Product ID not found.";
  }

  $product = $products[$productId];

  // Calculate total price
  $totalPrice = $product["price"] * $quantity;

  // Prepare the SQL query
  $sql = "INSERT INTO purchases (product_id, customer_name, customer_email, quantity, total_price) 
          VALUES (:product_id, :customer_name, :customer_email, :quantity, :total_price)";

  // Prepare the statement
  $stmt = $conn->prepare($sql);

  // Bind parameters
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':customer_name', $customerName);
  $stmt->bindParam(':customer_email', $customerEmail);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->bindParam(':total_price', $totalPrice);

  // Execute the query
  if ($stmt->execute()) {
    return "Purchase created successfully!  Order ID: " . $conn->lastInsertId();
  } else {
    return "Error creating purchase.  " . print_r($stmt->errorInfo(), true);
  }
}

// --- Example Usage (Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get form data
  $productId = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customerName = $_POST["customer_name"];
  $customerEmail = $_POST["customer_email"];

  // Create the purchase
  $result = createPurchase($productId, $quantity, $customerName, $customerEmail);

  // Display the result
  echo $result;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <option value="1">Laptop</option>
      <option value="2">Mouse</option>
      <option value="3">Keyboard</option>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" min="1"><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" name="customer_name" id="customer_name"><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" name="customer_email" id="customer_email"><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database configuration (Replace with your actual details)
$db_host = 'localhost';
$db_name = 'ecommerce_db';
$db_user = 'your_user';
$db_pass = 'your_password';

// Function to connect to the database
function connect_db() {
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add a new order
function add_order($user_id, $cart_id) {
  $conn = connect_db();

  // Check if the cart exists
  $check_cart_query = "SELECT id FROM carts WHERE id = $cart_id";
  $result = $conn->query($check_cart_query);

  if ($result->num_rows > 0) {
    // Insert the order into the orders table
    $order_query = "INSERT INTO orders (user_id, cart_id) VALUES ($user_id, $cart_id)";
    if ($conn->query($order_query) === TRUE) {
      return true; // Order added successfully
    } else {
      return false; // Error adding order
    }
  } else {
    return false; // Cart doesn't exist
  }
}

// Function to get cart details
function get_cart_details($cart_id) {
  $conn = connect_db();

  // Get the products from the cart
  $product_query = "SELECT p.id, p.name, p.price, p.image FROM carts c JOIN cart_items ci ON c.id = ci.cart_id JOIN products p ON ci.product_id = p.id WHERE c.id = $cart_id";
  $result = $conn->query($product_query);

  if ($result->num_rows > 0) {
    $cart_products = array();
    while ($row = $result->fetch_assoc()) {
      $cart_products[] = $row;
    }
    return $cart_products;
  } else {
    return []; // Empty cart
  }
}

// --- Example Usage (Handle form submission) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get user ID (example: from a logged-in session)
  $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : 0;  //Replace with your method of getting user id

  // Get cart ID from the form
  $cart_id = $_POST['cart_id'];

  // Add the order
  if (add_order($user_id, $cart_id)) {
    echo "Order placed successfully! Cart ID: " . $cart_id;
    // Optionally, clear the cart after order placement
    // clear_cart($cart_id);
  } else {
    echo "Error placing order.";
  }
}

// -------------------  Database Tables (Illustrative) --------------------

// Example database schema -  Adapt to your needs
/*
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    image VARCHAR(255)
);

CREATE TABLE carts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE cart_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT,
    product_id INT,
    quantity INT DEFAULT 1,
    FOREIGN KEY (cart_id) REFERENCES carts(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    cart_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (cart_id) REFERENCES carts(id)
);
*/

?>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate inputs (IMPORTANT for security)
  $name = trim($_POST["name"]);
  $email = trim($_POST["email"]);
  $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer
  $price = floatval($_POST["price"]);  // Ensure price is a float

  // Basic validation
  if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure values are positive.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } else {
    // Process the order
    // 1.  Create a database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // 2. Prepare and execute the SQL query
    $sql = "INSERT INTO orders (name, email, quantity, price) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      $stmt->bind_param("ssdd", $name, $email, $quantity, $price); // Correctly bind parameters

      if ($stmt->execute()) {
        $success = "Order placed successfully! Order ID: " . $conn->insert_id;
      } else {
        $error = "Order placement failed: " . $stmt->error;
      }

      $stmt->close();
    } else {
      $error = "Error preparing statement.";
    }

    $conn->close();
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place Your Order</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" max="100" value="1"><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" value="10.00"><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection (replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $shipping_address, $payment_method) {
  $conn = connectToDatabase();

  // 1. Validate Input (Important for security)
  if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($shipping_address) || empty($payment_method)) {
    return "Error: All fields are required.";
  }
  
  // Sanitize inputs to prevent SQL injection
  $cart_id = $conn->real_escape_string($cart_id); 

  // 2. Get Cart Details
  $query = "SELECT product_id, quantity, price FROM cart WHERE cart_id = '$cart_id'";
  $result = $conn->query($query);

  if (!$result) {
    return "Error retrieving cart details.";
  }

  $cart_items = [];
  while ($row = $result->fetch_assoc()) {
    $cart_items[] = $row;
  }

  if (empty($cart_items)) {
    return "Error: Cart is empty.";
  }

  // 3. Calculate Total Amount
  $total_amount = 0;
  foreach ($cart_items as $item) {
    $total_amount += $item['quantity'] * $item['price'];
  }

  // 4. Insert Order into Database
  $query = "INSERT INTO orders (cart_id, customer_name, customer_email, shipping_address, total_amount, order_date) 
            VALUES ('$cart_id', '$customer_name', '$customer_email', '$shipping_address', '$total_amount', NOW())";
  if (!$conn->query($query)) {
    return "Error inserting order: " . $conn->error;
  }

  // 5. Update Cart (Mark items as purchased -  This is crucial!)
  for ($i = 0; $i < count($cart_items); $i++) {
    $product_id = $cart_items[$i]['product_id'];
    $quantity = $cart_items[$i]['quantity'];

    $update_query = "UPDATE cart SET quantity = 0 WHERE product_id = '$product_id'";
    if (!$conn->query($update_query)) {
      return "Error updating cart: " . $conn->error;
    }
  }

  return "Order placed successfully! Order ID: " . $conn->insert_id;
}


// --- Example Usage (Handle Purchase Request) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $cart_id = $_POST["cart_id"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];
  $shipping_address = $_POST["shipping_address"];
  $payment_method = $_POST["payment_method"];

  $purchase_result = handlePurchase($cart_id, $customer_name, $customer_email, $shipping_address, $payment_method);
  echo $purchase_result;
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase</h1>

  <form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <textarea id="shipping_address" name="shipping_address" rows="4" cols="50" required></textarea><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method" required>
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Configuration (Replace with your actual values)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'stock' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'stock' => 20],
];

$cart = []; // This will hold the items the user wants to purchase

// --- Function to display the product catalog ---
function displayProducts() {
    echo "<h2>Available Products</h2>";
    echo "<ul>";
    foreach ($products as $id => $product) {
        echo "<li>";
        echo "<h3>" . $product['name'] . "</h3>";
        echo "Price: $" . number_format($product['price'], 2) . "<br>";
        echo "Stock: " . $product['stock'] . "<br>";
        echo "<a href='add_to_cart.php?product_id=" . $id . "'>Add to Cart</a>";
        echo "</li>";
    }
    echo "</ul>";
}


// --- Function to add a product to the cart ---
function addToCart($product_id) {
    if (isset($products[$product_id])) {
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += 1;
        } else {
            $cart[$product_id] = ['quantity' => 1, 'price' => $products[$product_id]['price']];
        }
    } else {
        echo "<p>Product ID " . $product_id . " not found.</p>";
    }
}


// --- Function to display the cart ---
function displayCart() {
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $id => $item) {
            echo "<li>";
            echo "<h3>" . $products[$id]['name'] . "</h3>";
            echo "Price: $" . number_format($item['price'], 2) . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            echo "<a href='remove_from_cart.php?product_id=" . $id . "'>Remove</a>";
            echo "</li>";
        }
        echo "</ul>";
    }
}

// ---  Handle requests ---
if (isset($_GET['add_to_cart'])) {
    $product_id = $_GET['product_id'];
    addToCart($product_id);
}

if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['product_id'];
    remove_from_cart($product_id);
}

// --- Display the catalog and cart ---
displayProducts();
displayCart();
?>


<?php

// Assuming you have the $cart array defined in the same file or a shared one

if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]); // Remove the item from the cart
    } else {
        echo "<p>Product ID " . $product_id . " not found in cart.</p>";
    }

    // Optionally, redirect back to the main page or the cart page
    header("Location: index.php"); // Redirect to the main page
    exit();
}
?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Define the database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $order_data Array containing order details (item_id, quantity, customer_name, etc.)
 * @return bool True on success, false on failure.
 */
function processPurchase(array $order_data) {
    // Validate input (Important for security - add more validation as needed)
    if (empty($order_data['item_id']) || empty($order_data['quantity']) || empty($order_data['customer_name'])) {
        error_log("Invalid purchase data received."); // Log the error
        return false;
    }

    // Sanitize input (Crucial to prevent SQL injection)
    $item_id = $conn->real_escape_string($order_data['item_id']);
    $quantity = $conn->real_escape_string($order_data['quantity']);
    $customer_name = $conn->real_escape_string($order_data['customer_name']);
    // Add more sanitation for other fields (e.g., address, payment details)

    // 1. Get Item Details from Database
    $sql = "SELECT id, name, price FROM items WHERE id = '$item_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $item = $result->fetch_assoc();
        $item_name = $item['name'];
        $item_price = $item['price'];
    } else {
        error_log("Item with ID '$item_id' not found.");
        return false; // Item not found
    }

    // 2. Calculate Total Price
    $total_price = $item_price * $quantity;

    // 3. Insert Order into Database
    $sql = "INSERT INTO orders (customer_name, item_id, quantity, total_price, order_date)
            VALUES ('$customer_name', '$item_id', '$quantity', '$total_price', NOW())";

    if ($conn->query($sql) === TRUE) {
        // 4. Update Inventory (Example)
        $sql_inventory = "UPDATE items SET stock = stock - '$quantity' WHERE id = '$item_id'";
        if ($conn->query($sql_inventory) === TRUE) {
            error_log("Purchase successful for item: $item_name");
            return true;
        } else {
            error_log("Failed to update inventory after purchase.");
            $conn->rollback(); // Rollback the order if inventory update fails
            return false;
        }
    } else {
        error_log("Failed to insert order into database: " . $conn->error);
        $conn->rollback(); // Rollback the order if insertion fails
        return false;
    }
}


// --- Example Usage (Simulated Form Submission) ---

// Assuming the form data is submitted in $_POST

// Simulate form data (Replace with actual form data)
$order_data = [
    'item_id' => '1',  // Example item ID
    'quantity' => '2',
    'customer_name' => 'John Doe'
];

// Process the purchase
if (processPurchase($order_data)) {
    echo "Purchase successful! Order ID: [Order ID generated here]";  // Replace with actual order ID retrieval
} else {
    echo "Purchase failed. Please try again.";
}

// ---  Important Notes and Further Development ---

// 1.  Error Handling:
//     - Comprehensive logging: Use error_log() or a proper logging system for debugging.
//     - Detailed error messages:  Provide informative error messages to the user or to the logging system.
//     -  Rollbacks: Crucial in case of database errors.

// 2.  Security:
//     - Prepared Statements:  **Crucially important** for preventing SQL injection.  The example provided uses `real_escape_string()`, but this is generally considered less secure than prepared statements.  Research and use prepared statements.
//     - Input Validation: Thoroughly validate all input data (type, format, range) before processing.
//     - Authentication/Authorization:  Implement user authentication and authorization to restrict access to the purchase functionality.
//     - CSRF Protection: Protect against Cross-Site Request Forgery attacks.

// 3.  Database Design:
//     - Normalize your database tables for efficiency and data integrity.  Consider tables for items, orders, order_items (linking orders and items), and potentially customers.

// 4.  Payment Integration:
//     - Integrate with a payment gateway (Stripe, PayPal, etc.) to handle payments securely.

// 5.  Inventory Management:
//     -  More sophisticated inventory management. Consider using triggers, scheduled jobs, or external inventory management systems.

// 6.  User Interface:
//     -  Develop a user-friendly interface for customers to place orders.

// 7.  Testing:
//     -  Thoroughly test your purchase functionality with different scenarios (valid data, invalid data, edge cases).


<?php
session_start();

// Database connection details (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_user";
$dbPass = "your_password";
$dbName = "your_database";

//  Database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Function to check if a product is in the cart
function isInCart($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        return true;
    }
    return false;
}

// Function to update the cart quantity
function updateCartQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}

// Function to add a product to the cart
function addProductToCart($productId, $quantity = 1) {
    if (isInCart($productId)) {
        updateCartQuantity($productId, $quantity);
    } else {
        // Product not in cart, add it
        if (!isset($_SESSION['cart'][$productId])) {
            $_SESSION['cart'][$productId] = array('quantity' => $quantity, 'price' => 0); //Initialize price
        } else {
            // Product already in cart, update the quantity
            updateCartQuantity($productId, $quantity);
        }
    }
}



// Cart Functions - These are the core functions

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Default quantity is 1
    addProductToCart($productId, $quantity);
    echo "<p>Product added to cart.</p>";
}


// 2. Update Quantity
if (isset($_POST['update_quantity'])) {
    $productId = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Default quantity is 1
    updateCartQuantity($productId, $quantity);
    echo "<p>Quantity updated in cart.</p>";
}



// 3. Remove Product from Cart
if (isset($_GET['remove_from_cart'])) {
    $productId = $_GET['remove_from_cart'];

    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
    echo "<p>Product removed from cart.</p>";
}


// 4. View Cart
if (isset($_GET['view_cart'])) {
    // Display Cart Contents
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $productId => $item) {
            $productName = getProductName($productId); // Implement this function (see example below)
            echo "<li>";
            echo "<strong>$productName</strong> - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'];
            echo "<form method='post' action=''>";
            echo "<input type='hidden' name='product_id' value='$productId'>";
            echo "<input type='hidden' name='product_id' value='$productId'>";  // Double quotes are needed here for correct string concatenation
            echo "<input type='text' name='quantity' value='$item['quantity']' size='3'>";
            echo "<input type='submit' value='Update'>";
            echo "</form>";
            echo "</li>";
        }
        echo "</ul>";

        // Calculate total price
        $totalPrice = 0;
        foreach ($_SESSION['cart'] as $productId => $item) {
            $totalPrice += $item['price'] * $item['quantity'];
        }

        echo "<p><strong>Total: $" . $totalPrice . "</strong></p>";

    }
}



// Helper function to get product name from database (replace with your database query)
function getProductName($productId) {
    // Example:  Assuming you have a products table with a 'id' and 'name' column
    $query = "SELECT name FROM products WHERE id = $productId";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['name'];
    } else {
        return "Unknown Product";
    }
}

// Example product data (for demonstration purposes - replace with your actual data)
$products = array(
    1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
    2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
    3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75)
);

// Start the session
session_start();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        /* Basic styling - improve as needed */
        body { font-family: sans-serif; }
        ul { list-style: none; padding: 0; }
        li { margin-bottom: 10px; }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="cart.php">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product) {
                echo "<option value='$id'>$id</option>";
            }
            ?>
        </select>
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>


    <hr>

    <a href="cart.php?view_cart=1">View Cart</a>

</body>
</html>


<?php

// This is a simplified example.  A real-world purchase functionality would be significantly more complex.

// Configuration (replace with your actual values)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Hat', 'price' => 15.00],
];

$cart = []; // Array to store items and quantities

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $cart[] = ['product_id' => $product_id, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
    } else {
        echo "Product ID $product_id not found.";
    }
}

// Function to view the cart
function viewCart()
{
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    echo "<p><b>Total: $" . $total . "</b></p>";
}

// Function to remove an item from the cart
function removeFromCart($product_id)
{
    global $cart; // Access the global $cart array

    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($cart[$key]);
            echo "Item removed: " . $item['name'] . "
";
            return;
        }
    }
    echo "Product ID $product_id not found in cart.
";
}


// Handle user input (example - using GET method)
if (isset($_GET['action']) && $_GET['action'] == 'add') {
    $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : null;
    if ($product_id) {
        addToCart($product_id);
    }
} elseif (isset($_GET['action']) && $_GET['action'] == 'remove') {
    $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : null;
    if ($product_id) {
        removeFromCart($product_id);
    }
} elseif (isset($_GET['action']) && $_GET['action'] == 'view') {
    viewCart();
}
// Example HTML for displaying the cart
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

    <h1>Shop</h1>

    <h2>Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . $product['price'] . " <a href='?action=add&product_id=" . $id . "'>Add to Cart</a></li>";
        }
        ?>
    </ul>

    <hr>

    <a href='?action=view'>View Cart</a>

</body>
</html>


<?php
session_start(); // Start the session to track user data and shopping cart

// --- Database Configuration (Replace with your actual details) ---
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database_name';
// --- End Database Configuration ---


// --- Helper Functions ---

/**
 * Connect to the database.
 *
 * @return mysqli|false Database connection object or false on error.
 */
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

/**
 * Add a product to the shopping cart.
 *
 * @param int $product_id
 * @param int $quantity
 * @return bool True on success, false on failure.
 */
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    if (!$conn) {
        return false;
    }

    $product_id = (int)$product_id; // Ensure product_id is an integer
    $quantity = (int)$quantity;      // Ensure quantity is an integer

    // Check if the product exists
    $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $product_name = $row['name'];
        $product_price = $row['price'];

        // Check if the product is already in the cart
        $cart_key = 'cart_' . session_id();
        $cart = unserialize($_SESSION[$cart_key]);

        if ($cart) {
            // Product already in cart - update the quantity
            foreach ($cart as &$item) { //Use &$item to modify the existing cart item
                if ($item['product_id'] == $product_id) {
                    $item['quantity'] += $quantity;
                    $item['total_price'] = $item['quantity'] * $product_price; // Recalculate the total price
                    break;
                }
            }
        } else {
            // Product not in cart - create a new entry
            $cart[] = [
                'product_id' => $product_id,
                'name' => $product_name,
                'quantity' => $quantity,
                'price' => $product_price,
                'total_price' => $quantity * $product_price
            ];
        }

        // Serialize the cart
        $_SESSION[$cart_key] = serialize($cart);
        return true;
    } else {
        return false; // Product not found
    }
    $stmt->close();
}


/**
 * Get the current shopping cart.
 *
 * @return array|false The shopping cart array, or false on error.
 */
function getCart() {
    $cart_key = 'cart_' . session_id();
    $cart = unserialize($_SESSION[$cart_key]);

    if ($cart) {
        return $cart;
    } else {
        return []; // Return an empty array if the cart is empty
    }
}

/**
 * Calculate the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotalCartValue() {
    $cart = getCart();
    $total = 0.00;

    foreach ($cart as $item) {
        $total += $item['total_price'];
    }

    return $total;
}

/**
 * Clear the shopping cart.
 */
function clearCart() {
    $cart_key = 'cart_' . session_id();
    unset($_SESSION[$cart_key]);
}
// --- End Helper Functions ---



// --- Purchase Processing ---

if (isset($_POST['purchase_submit'])) {
    // Validate input (very basic - enhance as needed)
    if (empty($_POST['name']) || empty($_POST['email']) || empty($_POST['address'])) {
        echo "<p style='color:red;'>Please fill in all the required fields.</p>";
        exit;
    }

    $name = $_POST['name'];
    $email = $_POST['email'];
    $address = $_POST['address'];
    $total = calculateTotalCartValue();

    // Sanitize input (important for security - especially if displaying in emails/databases)
    $name = htmlspecialchars($name);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Safe email sanitization
    $address = htmlspecialchars($address);


    //  Example:  Log the purchase details (replace with your actual logging mechanism)
    echo "<p>Purchase Details:</p>";
    echo "<p>Name: " . $name . "</p>";
    echo "<p>Email: " . $email . "</p>";
    echo "<p>Address: " . $address . "</p>";
    echo "<p>Total: $" . $total . "</p>";



    // 1.  Empty the cart
    clearCart();

    // 2.  Simulate order processing (e.g., send confirmation email, update database)
    echo "<p>Order placed successfully!  Thank you for your purchase.</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart-item { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
        .cart-total { font-weight: bold; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
    $cart = getCart();

    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Items in Cart:</h2>";
        foreach ($cart as $item) {
            echo "<div class='cart-item'>";
            echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            echo "Total: $" . $item['total_price'] . "<br>";
            echo "<form method='post'>";
            echo "<input type='hidden' name='product_id' value='" . $item['product_id'] . "'>";
            echo "<input type='number' name='quantity' value='" . $item['quantity'] . "' min='1' max='10'>";  //Limit quantities
            echo "<input type='submit' value='Update'>";
            echo "</form>";
            echo "</div>";
        }

        echo "<div class='cart-total'>Total Cart Value: $" . calculateTotalCartValue() . "</div>";
    }
?>

<hr>

<h2>Purchase Form</h2>
<form method="post">
    <label for="name">Name:</label><br>
    <input type="text" id="name" name="name" value="<?php echo isset($_POST['name']) ? htmlspecialchars($_POST['name']) : ''; ?>"><br><br>

    <label for="email">Email:</label><br>
    <input type="email" id="email" name="email" value="<?php echo isset($_POST['email']) ? htmlspecialchars($_POST['email']) : ''; ?>"><br><br>

    <label for="address">Address:</label><br>
    <textarea id="address" name="address" rows="4" cols="50"><?php echo isset($_POST['address']) ? htmlspecialchars($_POST['address']) : ''; ?></textarea><br><br>

    <input type="hidden" name="purchase_submit" value="submit">
    <input type="submit" name="purchase_submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "e_commerce_db";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the form data (important!)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer
    $price = floatval($_POST["price"]); // Ensure price is a float

    // Basic validation - more validation is recommended
    if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields and ensure quantity and price are positive numbers.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // Process the order
        // 1.  Create a database connection
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // 2. Prepare and execute the SQL query
        $sql = "INSERT INTO orders (name, email, quantity, price) VALUES (?, ?, ?, ?)";

        $stmt = $conn->prepare($sql);

        if ($stmt) {
            $stmt->bind_param("ssfd", $name, $email, $quantity, $price);  // "s" for string, "d" for double (float)

            if ($stmt->execute()) {
                $success_message = "Order placed successfully! Thank you for your purchase.";
            } else {
                $error = "Query execution failed: " . $stmt->error;
            }
        } else {
            $error = "Query preparation failed.";
        }

        // Close the connection
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" value="10.00"><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $item_id, $quantity) {
    // Assuming you have a "cart" table with columns: user_id, item_id, quantity
    $user_id = $_SESSION['user_id'];  // Assuming user ID is stored in session
    $sql = "INSERT INTO cart (user_id, item_id, quantity) VALUES ('$user_id', '$item_id', '$quantity')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to update quantity in cart
function updateCartQuantity($conn, $item_id, $quantity) {
    // Assuming you have a "cart" table with columns: user_id, item_id, quantity
    $user_id = $_SESSION['user_id'];

    // Check if item already exists in cart
    $sql_check = "SELECT quantity FROM cart WHERE user_id = '$user_id' AND item_id = '$item_id'";
    $result = $conn->query($sql_check);

    if ($result->num_rows > 0) {
        // Update the quantity
        $sql_update = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$user_id' AND item_id = '$item_id'";
        if ($conn->query($sql_update) === TRUE) {
            return true;
        } else {
            return false;
        }
    } else {
        // Item doesn't exist, so insert a new row
        $sql_insert = "INSERT INTO cart (user_id, item_id, quantity) VALUES ('$user_id', '$item_id', '$quantity')";
        if ($conn->query($sql_insert) === TRUE) {
            return true;
        } else {
            return false;
        }
    }
}

// Function to remove an item from the cart
function removeFromCart($conn, $item_id) {
    // Assuming you have a "cart" table with columns: user_id, item_id, quantity
    $user_id = $_SESSION['user_id'];

    $sql = "DELETE FROM cart WHERE user_id = '$user_id' AND item_id = '$item_id'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to handle the purchase (e.g., place the order)
function placeOrder($conn) {
    // In a real application, you'd likely save the cart data to an 'orders' table
    // This is a simplified example.
    // You'd also need to clear the cart after placing the order.

    // Example: Save cart data to orders table
    // $sql_save_order = "INSERT INTO orders (user_id, order_date) VALUES ('$user_id', NOW())";
    // if ($conn->query($sql_save_order) === TRUE) {
    //     // Clear the cart
    //     // $sql_clear_cart = "DELETE FROM cart WHERE user_id = '$user_id'";
    //     // $conn->query($sql_clear_cart);
    //     return true;
    // } else {
    //     return false;
    // }

    // Simplified example: just returning true to indicate order placement
    return true;
}


// Main execution (Example -  replace with your actual logic)

// 1. Connect to the database
$conn = connectToDatabase();

// 2.  Simulate user login (replace with your actual authentication)
// Assume user is logged in and their ID is stored in session
$_SESSION['user_id'] = 'user123'; // Example user ID

// 3.  Handle Purchase Request
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $item_id = $_POST['item_id'];
    $quantity = $_POST['quantity'];

    if (addToCart($conn, $item_id, $quantity)) {
        echo "Item added to cart!";
    } else {
        echo "Failed to add item to cart.";
    }
} elseif (isset($_POST['action']) && $_POST['action'] == 'update_cart') {
    $item_id = $_POST['item_id'];
    $quantity = $_POST['quantity'];
    if (updateCartQuantity($conn, $item_id, $quantity)) {
        echo "Cart quantity updated successfully!";
    } else {
        echo "Failed to update cart quantity.";
    }
} elseif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $item_id = $_POST['item_id'];
    if (removeFromCart($conn, $item_id)) {
        echo "Item removed from cart!";
    } else {
        echo "Failed to remove item from cart.";
    }
} elseif (isset($_POST['action']) && $_POST['action'] == 'place_order') {
    placeOrder($conn);
    echo "Order placed successfully!";
}


// Close the database connection (important!)
$conn->close();

?>


<?php

// Data storage (for demonstration - use a database in a real application)
$cart = [];

// Function to add an item to the cart
function add_to_cart(string $item_name, float $price, int $quantity = 1) {
  global $cart; // Access the global $cart variable

  $item = [
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  $cart[] = $item;

  echo "<p>Added '$item_name' to cart. Price: $" . $price . ", Quantity: " . $quantity . "</p>";
}

// Function to view the cart
function view_cart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $item) {
    $total_item_price = $item['price'] * $item['quantity'];
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $total_item_price . "</li>";
  }
  echo "</ul>";
}

// Function to remove an item from the cart
function remove_from_cart(string $item_name) {
    global $cart;

    // Find the index of the item to remove
    $index = -1;
    for ($i = 0; $i < count($cart); $i++) {
        if ($cart[$i]['name'] === $item_name) {
            $index = $i;
            break;
        }
    }

    if ($index !== -1) {
        unset($cart[$index]);
        echo "<p>Removed '$item_name' from cart.</p>";
    } else {
        echo "<p>Item '$item_name' not found in cart.</p>";
    }
}

// Function to handle purchase (simulated - updates cart and clears it)
function purchase() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty. Nothing to purchase.</p>";
    return;
  }

  echo "<h2>Processing Your Purchase...</h2>";
  echo "<p>Thank you for your order!</p>";

  // Clear the cart after purchase (replace with database update in real application)
  $cart = [];

  echo "<p>Your cart has been cleared.</p>";
}

// ---------------------  Example Usage (HTML form with buttons) ---------------------
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
    <style>
        body { font-family: sans-serif; }
        ul { list-style-type: none; padding: 0; }
        li { margin-bottom: 5px; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <!-- Add items to cart -->
    <label for="item_name">Item Name:</label>
    <input type="text" id="item_name" name="item_name"><br><br>

    <label for="item_price">Price:</label>
    <input type="number" id="item_price" name="item_price" step="0.01"><br><br>

    <label for="item_quantity">Quantity:</label>
    <input type="number" id="item_quantity" name="item_quantity" value="1" min="1"><br><br>

    <button type="submit" name="add_to_cart">Add to Cart</button>
    <button type="reset">Reset</button>
</form>

<hr>

<!-- Cart view -->
<?php view_cart(); ?>

<hr>

<!-- Purchase button -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <button type="submit" name="purchase">Purchase</button>
</form>

<hr>

<!-- Remove Item -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="remove_item">Remove Item:</label>
    <input type="text" id="remove_item" name="remove_item"><br><br>
    <button type="submit" name="remove_item">Remove Item</button>
</form>


<?php
// Handle form submissions
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST["add_to_cart"])) {
    add_to_cart($_POST["item_name"], $_POST["item_price"], $_POST["item_quantity"]);
  } elseif (isset($_POST["purchase"])) {
    purchase();
  } elseif (isset($_POST["remove_item"])) {
    remove_from_cart($_POST["remove_item"]);
  }
}
?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
    // Check if the product already exists in the cart for this user
    $query = "SELECT * FROM cart WHERE product_id = '$product_id' AND user_id = 1;"; // Assuming user_id = 1
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Product exists, update the quantity
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id' AND user_id = 1;";
    } else {
        // Product doesn't exist, add a new entry
        $query = "INSERT INTO cart (product_id, user_id, quantity) VALUES ('$product_id', 1, $quantity)";
    }

    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to retrieve the cart contents
function getCartContents($conn) {
    $query = "SELECT p.product_name, c.quantity, c.price FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = 1";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $cart_items = array();
        while ($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
        return $cart_items;
    } else {
        return array();
    }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
    $query = "DELETE FROM cart WHERE product_id = '$product_id' AND user_id = 1";
    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to update the quantity of a product in the cart
function updateQuantity($conn, $product_id, $quantity) {
    $query = "UPDATE cart SET quantity = '$quantity' WHERE product_id = '$product_id' AND user_id = 1";
    if ($conn->query($query) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// ----- Example Usage (Handle form submissions) -----

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Add to Cart
    if (isset($_POST["add_to_cart"])) {
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        if (addToCart($conn, $product_id, $quantity)) {
            echo "Product added to cart!";
        } else {
            echo "Error adding product to cart.";
        }
    }

    // Remove from Cart
    if (isset($_POST["remove_from_cart"])) {
        $product_id = $_POST["product_id"];
        if (removeFromCart($conn, $product_id)) {
            echo "Product removed from cart!";
        } else {
            echo "Error removing product from cart.";
        }
    }

    // Update Quantity
    if (isset($_POST["update_quantity"])) {
        $product_id = $_POST["product_id"];
        $new_quantity = $_POST["quantity"];
        if (updateQuantity($conn, $product_id, $new_quantity)) {
            echo "Quantity updated!";
        } else {
            echo "Error updating quantity.";
        }
    }
}

// Retrieve cart contents for display
$cart_items = getCartContents($conn);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<!-- Display Cart Items -->
<?php if (!empty($cart_items)): ?>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr>
                    <td><?php echo $item['product_name']; ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td><?php echo $item['price']; ?></td>
                    <td>
                        <form method="post">
                            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                            <button type="submit">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
<?php else: ?>
    <p>Your cart is empty.</p>
<?php endif; ?>

<br>
<a href="products.php">View Products</a>  <!-- Link to your products page -->

</body>
</html>


<?php

// This script handles the purchase functionality

// --- Database Configuration (Replace with your actual database details) ---
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";
// --- End Database Configuration ---

//  --- Helper Functions ---
function connectToDatabase() {
  global $db_host, $db_name, $db_user, $db_pass;
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
  }
}

function addItemToCart($productId, $userId, $pdo) {
  // Simple example:  Adds quantity of 1 to cart.  Adjust based on your cart implementation
  $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, 1)";
  $stmt = $pdo->prepare($sql);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  return $stmt->execute();
}

function getCartItems($userId, $pdo) {
  $sql = "SELECT p.product_name, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = :user_id";
  $stmt = $pdo->prepare($sql);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function updateCartItemQuantity($productId, $userId, $quantity, $pdo) {
    // More robust approach for updating quantity
    $sql = "UPDATE cart SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    return $stmt->execute();
}


// --- Purchase Handling ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['submit_purchase'])) {
    //  Get user ID (assuming you have a user authentication system)
    $userId = $_SESSION["user_id"]; // Replace with your user ID retrieval mechanism

    //  Cart Items:  Get cart items
    $cartItems = getCartItems($userId, $pdo);

    //  Check if the cart is empty
    if (empty($cartItems)) {
      echo "<p>Your cart is empty. Please add items before proceeding to checkout.</p>";
      return;
    }


    //  Process the purchase (This is a simplified example)
    echo "<h2>Purchase Summary</h2>";
    echo "<ul>";
    foreach ($cartItems as $item) {
      echo "<li>Product: " . $item["product_name"] . ", Quantity: " . $item["quantity"] . "</li>";
    }
    echo "</ul>";

    //  Simulate order processing -  In a real application, this would create a new order record
    echo "<p>Order placed successfully! (Simulated)</p>";

    // Clear the cart after the purchase
    clearCart($userId, $pdo);
  }
}

// --- Helper Functions for Cart Management ---

function clearCart($userId, $pdo) {
  $sql = "DELETE FROM cart WHERE user_id = :user_id";
  $stmt = $pdo->prepare($sql);
  $stmt->bindParam(':user_id', $userId);
  return $stmt->execute();
}


?>


<?php
// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the items from the hidden input field
  $items = json_decode(htmlspecialchars($_POST["items"]), true);

  // Process the purchase (basic example)
  echo "<h2>Checkout</h2>";
  echo "<p>You selected the following items:</p>";
  echo "<ul>";
  foreach ($items as $item) {
    echo "<li>" . $item . "</li>";
  }
  echo "</ul>";

  //  In a real application, you'd handle payment, order processing, etc.
  echo "<p>Order submitted successfully (simulated).</p>";
} else {
  // Handle errors or invalid requests (optional)
  echo "<p>Invalid request.</p>";
}
?>


<?php

// Define product data (replace with your database or data source)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

// Function to add a product to the cart
function addToCart($productId, $cart) {
    if (isset($products[$productId])) {
        $product = $products[$productId];
        $cart[] = $product;
    } else {
        echo "Product ID $productId not found.";
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $product) {
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</li>";
    }
    echo "</ul>";

    // Calculate the total
    $total = array_sum(array_column($cart, 'price'));
    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}

// Handle purchase request (simulated)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];

        //  Add the product to the cart (simulated)
        addToCart($productId, $cart); 

        //  Update the cart (simulated - in a real app, you'd likely update a database)
        displayCart($cart);  // Display the cart after the "purchase"
    }
}

// Initialize the cart (empty array)
$cart = [];

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product) {
                echo "<option value=\"" . $id . "\">" . $id . " - " . $product['name'] . "</option>";
            }
            ?>
        </select><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>

        <button type="submit">Add to Cart</button>
    </form>

    <?php
    displayCart($cart);
    ?>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'e_commerce';
$db_user = 'root';
$db_pass = 'password';

// Function to connect to the database
function connectDB() {
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    die('Connection failed: ' . $conn->connect_error);
  }
  return $conn;
}


// Function to handle purchase creation
function createPurchase($userId, $cartItems) {
  $conn = connectDB();

  // Build the SQL query
  $sql = "INSERT INTO purchases (user_id, created_at) VALUES (
            " . $conn->real_escape_string($userId) . ",
            NOW()
        )";

  if ($conn->query($sql) === TRUE) {
    $purchaseId = $conn->insert_id; // Get the last inserted ID
    // Insert cart items into the purchases_items table
    foreach ($cartItems as $item) {
      $sql_item = "INSERT INTO purchases_items (purchase_id, product_id, quantity) VALUES (
          " . $conn->real_escape_string($purchaseId) . ",
          " . $conn->real_escape_string($item['product_id']) . ",
          " . $conn->real_escape_string($item['quantity']) . "
      )";
      if (!$conn->query($sql_item)) {
        error_log("Error inserting cart item: " . $conn->error);  // Log the error
        return false; // Indicate failure
      }
    }

    $conn->commit(); // Commit the transaction
    return true;
  } else {
    error_log("Error creating purchase: " . $conn->error); // Log the error
    return false;
  }
}


// Example Usage (Simulating a purchase request)
// Assuming $userId and $cartItems are passed to this function
// from a form submission or other request
// $userId = 123;
// $cartItems = [
//   ['product_id' => 1, 'quantity' => 2],
//   ['product_id' => 2, 'quantity' => 1]
// ];


//  Simulate form submission (for testing)
if (isset($_POST['user_id']) && isset($_POST['cart_items'])) {
    $userId = $_POST['user_id'];
    $cartItems = json_decode($_POST['cart_items'], true); // Decode JSON string
} else {
    // Handle the case where the form hasn't been submitted
    $userId = null;
    $cartItems = [];
}


if ($userId !== null && !empty($cartItems)) {
  if (createPurchase($userId, $cartItems)) {
    echo "Purchase created successfully! Purchase ID: " . $conn->insert_id;
  } else {
    echo "Purchase creation failed.  Check the server error log for details.";
  }
} else {
  echo "Invalid user ID or cart items.";
}


// Database Table Structure (example)

/*
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    password VARCHAR(255)
);

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    price DECIMAL(10, 2)
);

CREATE TABLE purchases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE purchases_items (
    purchase_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (purchase_id, product_id),
    FOREIGN KEY (purchase_id) REFERENCES purchases(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
*/
?>

<!-- Example HTML Form (For testing) -->
<form method="POST" action="">
  <label for="user_id">User ID:</label>
  <input type="number" id="user_id" name="user_id" value="123"> <br><br>

  <label for="cart_items">Cart Items (JSON):</label>
  <input type="text" id="cart_items" name="cart_items" value='[{"product_id":1,"quantity":2},{"product_id":2,"quantity":1}]'> <br><br>

  <button type="submit">Create Purchase</button>
</form>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Initialize variables
$cart = [];  // Array to store items in the cart
$total_amount = 0.00; // Total amount of the cart

// Function to add an item to the cart
function addItemToCart($conn, $product_id, $quantity) {
    global $cart, $total_amount;

    // Check if the item is already in the cart
    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            $item['price'] = $conn->query("SELECT price FROM products WHERE id = $product_id")->fetch_assoc()['price']; // Get current price
            $total_amount = 0.00;
            foreach ($cart as $item) {
                $total_amount += $item['price'] * $item['quantity'];
            }
            return;
        }
    }

    // Item not in cart, add it
    $result = $conn->query("SELECT id, name, price FROM products WHERE id = $product_id");
    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        $cart[] = [
            'product_id' => $product_id,
            'name' => $product['name'],
            'price' => $product['price'],
            'quantity' => $quantity
        ];
        $total_amount = 0.00;
        foreach ($cart as $item) {
            $total_amount += $item['price'] * $item['quantity'];
        }
    } else {
        echo "Product not found.";
    }
}

// Function to remove an item from the cart
function removeItemFromCart($conn, $product_id) {
    global $cart;

    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($cart[$key]);
            $total_amount = 0.00;
            foreach ($cart as $item) {
                $total_amount += $item['price'] * $item['quantity'];
            }
            return;
        }
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
    global $cart;

    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $quantity;
            $item['price'] = $conn->query("SELECT price FROM products WHERE id = $product_id")->fetch_assoc()['price']; // Get current price
            $total_amount = 0.00;
            foreach ($cart as $item) {
                $total_amount += $item['price'] * $item['quantity'];
            }
            return;
        }
    }
}


// Handle add to cart request
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (isset($conn)) { // Ensure the database connection is established
        addItemToCart($conn, $product_id, $quantity);
    } else {
        echo "Database connection failed.";
    }
}


// Handle remove from cart request
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    if (isset($conn)) {
        removeItemFromCart($conn, $product_id);
    }
}

// Handle update quantity request
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    if (isset($conn)) {
        updateQuantity($conn, $product_id, $new_quantity);
    }
}

// Display the cart
echo "<h2>Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Amount: $" . number_format($total_amount, 2) . "</strong></p>";
}

// Example of a button to clear the cart
echo "<br>";
echo "<a href='cart_clear.php'>Clear Cart</a>";
?>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Products Data (Example - Replace with your product information) ---
$products = [
    0 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    1 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    2 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

// --- Cart (Simple implementation - could be stored in a session) ---
$cart = [];

// --- Functions ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity to add.  Defaults to 1.
 */
function addToCart(int $product_id, int $quantity = 1) {
  global $cart;

  // Check if the product exists
  if (!isset($products[$product_id])) {
    echo "<p>Product ID $product_id not found.</p>";
    return;
  }

  // Check if product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = ['quantity' => $quantity, 'price' => $products[$product_id]['price']];
  }

  // You might want to log this action for tracking
  // logCartUpdate($product_id, $quantity);
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
  global $cart;
  $total = 0;
  foreach ($cart as $item_id => $item) {
    $total = $total + ($item['price'] * $item['quantity']);
  }
  return round($total, 2); // Round to 2 decimal places for currency
}

/**
 *  Clears the cart.
 */
function clearCart() {
    global $cart;
    $cart = [];
}


// --- Handle Form Submission (Example) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = (int)$_POST['product_id']; // Cast to integer
        addToCart($product_id);
    }
    if (isset($_POST['clear_cart'])) {
        clearCart();
    }
}


// --- Display Cart (Example) ---

echo "<h1>Shopping Cart</h1>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>" . $products[$item_id]['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";
  echo "<form method='post'>
            <button type='submit' name='clear_cart'>Clear Cart</button>
          </form>";
}

?>


<?php

// Database connection (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// ------------------- Functions -------------------

// Function to add a product to the cart
function addToCart($product_id, $quantity, $user_id = null) {
    global $pdo;

    // Check if user is logged in
    if ($user_id) {
        // If user is logged in, store the cart in the database
        $stmt = $pdo->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)");
        $stmt->execute([$user_id, $product_id, $quantity]);

    } else {
        // If not logged in, store the cart in the session
        session_start();
        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = [];
        }
        $_SESSION['cart'][] = ['product_id' => $product_id, 'quantity' => $quantity];
    }
}

// Function to remove a product from the cart
function removeFromCart($product_id) {
    global $pdo;

    // Remove from database
    $stmt = $pdo->prepare("DELETE FROM cart WHERE product_id = ?");
    $stmt->execute([$product_id]);

    // Remove from session
    session_start();
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            break; // Important: stop after removing
        }
    }
}


// Function to update the quantity of a product in the cart
function updateCartQuantity($product_id, $quantity) {
    global $pdo;
    session_start();

    // First, find the cart entry to update.  This is more efficient than looping.
    $stmt = $pdo->prepare("SELECT * FROM cart WHERE product_id = ?");
    $stmt->execute([$product_id]);
    $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($cart_item) {
        // Update the quantity in the database
        $stmt = $pdo->prepare("UPDATE cart SET quantity = ? WHERE product_id = ?");
        $stmt->execute([$quantity, $product_id]);
    } else {
        // If not found, add to cart
        addToCart($product_id, $quantity);
    }
}

// Function to get the cart contents
function getCartContents() {
    global $pdo;

    // Get cart contents from database
    $stmt = $pdo->prepare("SELECT * FROM cart");
    $stmt->execute();
    $cart_items = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // Combine with session cart items (if any)
    $cart_contents = [];
    if (isset($_SESSION['cart'])) {
        $cart_contents += $_SESSION['cart'];
    }

    // Return the combined cart items
    return $cart_contents;
}


// -------------------  Example Usage  -------------------

// Assuming you have a product ID of 123

// 1. Add to Cart
addToCart(123, 2);

// 2. Remove from Cart
//removeFromCart(123);

// 3. Update Quantity
// updateCartQuantity(123, 5);

// 4. Get Cart Contents
$cart = getCartContents();
echo "<pre>";
print_r($cart);
echo "</pre>";


?>


<?php

// Sample Product Data (Replace with your database connection)
$products = [
  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Session Management (For maintaining cart items)
session_start();

// Initialize the cart in the session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart) {
  if (!is_numeric($productId) || $productId <= 0) {
    return false; // Invalid product ID
  }

  if (!is_numeric($quantity) || $quantity <= 0) {
    return false; // Invalid quantity
  }

  if (!array_key_exists($productId, $products)) {
    return false; // Product not found
  }

  if (isset($cart[$productId])) {
    $cart[$productId] = $cart[$productId] + $quantity;
  } else {
    $cart[$productId] = $quantity;
  }
  return true;
}

// Function to remove an item from the cart
function removeFromCart($productId, $cart) {
  if (!is_numeric($productId) || $productId <= 0) {
    return false; // Invalid product ID
  }

  if (isset($cart[$productId])) {
    unset($cart[$productId]);
  }
  return true;
}

// Function to get the cart total
function calculateCartTotal($cart) {
  $total = 0;
  foreach ($cart as $productId => $quantity) {
    if (array_key_exists($productId, $products)) {
      $total += $products[$productId]['price'] * $quantity;
    }
  }
  return $total;
}

// Handle Form Submission (Adding to Cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $productId = (int)$_POST['product_id']; // Convert to integer
    $quantity = (int)$_POST['quantity'];

    if (addToCart($productId, $quantity, $_SESSION['cart'])) {
      echo "<p>Item added to cart!</p>";
    } else {
      echo "<p style='color:red;'>Error adding item to cart.</p>";
    }
  }
}

// Handle Form Submission (Removing from Cart)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['remove_product_id'])) {
  $removeProductId = (int)$_POST['remove_product_id'];
  removeFromCart($removeProductId, $_SESSION['cart']);
  echo "<p>Item removed from cart!</p>";
}


// Display Cart Contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $quantity) {
    echo "<li>" . $products[$productId]['name'] . " - Quantity: " . $quantity . " - Price: $" . $products[$productId]['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal($_SESSION['cart']) . "</strong></p>";
}

?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// -------------------------------------------------------------------
//  Purchase Functionality - Main Logic
// -------------------------------------------------------------------

/**
 * Processes a purchase order.
 *
 * @param array $orderData The data for the order (product_id, quantity, user_id, etc.)
 * @return bool|string Returns true on success, or an error message string on failure.
 */
function processPurchase(array $orderData) {
  // 1. Validate Input - Important security step!
  if (empty($orderData['product_id']) || empty($orderData['quantity']) || empty($orderData['user_id'])) {
    return "Error: Missing required order details.";
  }

  // Validate product_id and quantity (ensure they are integers and positive)
  if (!is_numeric($orderData['product_id']) || $orderData['product_id'] <= 0) {
    return "Error: Invalid product_id.";
  }

  if (!is_numeric($orderData['quantity']) || $orderData['quantity'] <= 0) {
    return "Error: Invalid quantity.";
  }

  // 2. Database Interaction - Use prepared statements for security
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION); // Important for error handling
  } catch (PDOException $e) {
    return "Error: Database connection failed: " . $e->getMessage();
  }

  // Prepare SQL statement
  $sql = "INSERT INTO orders (product_id, quantity, user_id, order_date) VALUES (:product_id, :quantity, :user_id, NOW())";
  $stmt = $pdo->prepare($sql);

  // Bind parameters
  $stmt->bindParam(':product_id', $orderData['product_id']);
  $stmt->bindParam(':quantity', $orderData['quantity']);
  $stmt->bindParam(':user_id', $orderData['user_id']);

  // Execute the statement
  if ($stmt->execute()) {
    //  Optionally: Update inventory (if you have an inventory table)
    // Example:
    // $inventoryUpdateSql = "UPDATE products SET stock_quantity = stock_quantity - :quantity WHERE id = :product_id";
    // $inventoryStmt = $pdo->prepare($inventoryUpdateSql);
    // $inventoryStmt->bindParam(':quantity', $orderData['quantity']);
    // $inventoryStmt->bindParam(':product_id', $orderData['product_id']);
    // $inventoryStmt->execute();


    return true; // Success
  } else {
    return "Error: Failed to insert order.  " . print_r($stmt->errorInfo(), true);  // Debugging
  }
}


// -------------------------------------------------------------------
//  Example Usage - Simulate a Purchase Request
// -------------------------------------------------------------------

// Example Order Data (in a real application, this would come from a form)
$orderData = [
    'product_id' => 123,
    'quantity' => 2,
    'user_id' => 456
];

// Process the purchase
$result = processPurchase($orderData);

if ($result === true) {
  echo "Purchase successful!  Order ID: " . md5("Order Generated - " . json_encode($orderData)); // Use md5 for a simple unique identifier.  Never store passwords unencrypted.
} else {
  echo "Purchase failed: " . $result; // Display the error message
}

?>


<?php

// Data storage (replace with a database for production)
$cart = []; // Array to hold items in the cart
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        }
    } else {
        echo "Product ID " . $product_id . " not found.";
    }
}

// Function to display the cart
function display_cart() {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item_id => $item_details) {
        $product = $products[$item_id];
        $total_price = $product['price'] * $item_details['quantity'];
        echo "<li>" . $item_details['name'] . " - $" . $product['price'] . " x " . $item_details['quantity'] . " = $" . $total_price . "</li>";
    }
    echo "</ul>";
}

// Function to calculate the total cart value
function calculate_total() {
    $total = 0;
    foreach ($cart as $item_id => $item_details) {
        $product = $products[$item_id];
        $total_price = $product['price'] * $item_details['quantity'];
        $total += $total_price;
    }
    return $total;
}


// --- Handling Purchase Logic (simplified) ---
// In a real application, you'd integrate with payment gateways,
// manage shipping addresses, order confirmations, etc.

function confirm_purchase() {
    if (empty($cart)) {
        echo "<p>Your cart is empty.  Nothing to purchase.</p>";
        return;
    }

    $total = calculate_total();
    echo "<h2>Order Confirmation</h2>";
    echo "<p>Thank you for your purchase!</p>";
    echo "<p>Total Amount: $" . $total . "</p>";

    // Simulate order processing (replace with actual processing)
    // e.g., save order to database, send email confirmation, etc.
    echo "<p>Your order has been placed and is being processed.</p>";

    // Clear the cart after purchase
    $cart = [];
}


// --- Example Usage (handling user input) ---

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // If 'purchase' button was clicked
    if (isset($_POST['purchase'])) {
        confirm_purchase();
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <h2>Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . $product['price'] . " <button onclick=\"addToCart(" . $id . ",1)\">Add to Cart</button></li>";
        }
        ?>
    </ul>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="hidden" name="product_id" value="">
        <input type="hidden" name="quantity" value="1">
        <input type="submit" name="purchase" value="Purchase Now">
    </form>


    <?php
    display_cart();
    ?>

</body>
</html>


<?php

// Define product data (for example)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

// Function to handle the purchase process
function handlePurchase($cart) {
    $total = 0.00;
    $orderConfirmation = [];

    foreach ($cart as $productId => $quantity) {
        if (isset($products[$productId])) {
            $product = $products[$productId];
            $price = $product['price'];
            $productName = $product['name'];

            $total += $price * $quantity;
            $orderConfirmation[] = [
                'product' => $productName,
                'quantity' => $quantity,
                'price' => $price,
                'totalPrice' => $price * $quantity
            ];
        } else {
            echo "Product ID " . $productId . " not found.
";
        }
    }

    return ['total' => $total, 'order' => $orderConfirmation];
}

// Initialize the cart (you could read this from a session, database, etc.)
$cart = [
    1 => 2, // 2 T-shirts
    3 => 1 // 1 Hat
];

// Process the purchase
$purchaseResult = handlePurchase($cart);

// Display the results
echo "<h2>Purchase Summary</h2>
";
echo "Total: $" . number_format($purchaseResult['total'], 2) . "
";

echo "<h2>Order Details</h2>
";
if (count($purchaseResult['order']) > 0) {
    echo "<ul>
";
    foreach ($purchaseResult['order'] as $item) {
        echo "<li>" . $item['product'] . " - Quantity: " . $item['quantity'] . " - Price: $" . number_format($item['price'], 2) . " - Total: $" . number_format($item['totalPrice'], 2) . "</li>
";
    }
    echo "</ul>
";
} else {
    echo "<p>No items in the order.</p>
";
}


//  Example of adding a product to the cart (optional)
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; //Ensure it's an integer

    if (isset($products[$productId])) {
        $quantity = (int)$_POST['quantity']; //Ensure it's an integer
        if (isset($cart[$productId])) {
            $cart[$productId] += $quantity;
        } else {
            $cart[$productId] = $quantity;
        }

        echo "<p>Product added to cart!</p>";
    } else {
        echo "<p>Product ID " . $productId . " not found.</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h2>Available Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</li>";
        }
        ?>
    </ul>

    <h2>Add to Cart</h2>
    <form method="post">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product) {
                echo "<option value='" . $id . "'>" . $id . "</option>";
            }
            ?>
        </select>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" value="1" min="1">
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $db = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Implement more robust validation here)
    $name = $_POST["name"];
    $email = $_POST["email"];
    $quantity = $_POST["quantity"];
    $item_id = $_POST["item_id"]; // Assuming you have an item_id field

    // Check if the item exists (Example - Adapt to your table structure)
    $stmt = $db->prepare("SELECT id, name, price FROM items WHERE id = ?");
    $item_result = $stmt->execute([$item_id]);
    $item = $item_result->fetch(PDO::FETCH_ASSOC);

    if (!$item) {
        $error = "Invalid item ID.";
    } elseif (empty($name) || empty($email) || empty($quantity)) {
        $error = "All fields are required.";
    } else {
        // Prepare the data for insertion
        $stmt = $db->prepare("INSERT INTO purchases (name, email, quantity, item_id) VALUES (?, ?, ?, ?)");
        $stmt->execute([$name, $email, $quantity, $item_id]);
        $last_insert_id = $db->lastInsertId();

        // Display success message
        $success = "Purchase successful! Order ID: " . $last_insert_id;

    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase</h1>

<?php if (isset($error)) {
    echo "<p style='color: red;'>Error: " . $error . "</p>";
} ?>

<?php if (isset($success)) {
    echo "<p style='color: green;'>" . $success . "</p>";
} ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="item_id">Item ID:</label>
    <input type="number" id="item_id" name="item_id" min="1" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize and validate the data
  $product_name = $_POST["product_name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"]; // Assuming price is already in a numeric format

  if (empty($product_name) || empty($quantity) || empty($price)) {
    $error = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } elseif (!is_numeric($price) || $price <= 0) {
    $error = "Price must be a positive number.";
  } else {
    // Prepare the SQL statement
    $sql = "INSERT INTO orders (product_name, quantity, price) VALUES (?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind the parameters
    $stmt->bind_param("sdd", $product_name, $quantity, $price);

    // Execute the statement
    if ($stmt->execute()) {
      $success = "Order placed successfully!";
    } else {
      $error = "Order placement failed: " . $stmt->error;
    }
  }
}

// Close the statement and connection
$stmt->close();
$conn->close();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Initialize session (for user tracking)
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


// Function to process purchase request
function processPurchase($cart, $payment_method, $customer_id) {
    // 1. Validate cart items (check for existence, etc.)
    foreach ($cart as $item_id => $quantity) {
        //  You'll likely want to fetch the product details from the database here
        // based on $item_id.  For this example, we'll just assume they exist.

        // Example: Fetch product details (Replace with actual DB query)
        // $product = getProductDetails($item_id); // Implement this function to fetch product details

        //  You'll also need to ensure the quantity is valid (positive, etc.)
    }

    // 2. Calculate Total Amount
    $total_amount = 0;
    foreach ($cart as $item_id => $quantity) {
        // Example: Fetch product price (Replace with actual DB query)
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details
        // $product = getProductDetails($item_id); // Implement this function to fetch product details

        // Example: $product['price'] * $quantity
        // $total_amount += $product['price'] * $quantity;
    }

    // 3. Process Payment (This is a placeholder - integrate with payment gateway!)
    // In a real application, you would integrate with a payment gateway like Stripe, PayPal, etc.
    // This is where you'd handle the actual payment processing.
    $payment_status = "pending"; // Placeholder - Replace with actual payment result
    // Simulate a payment (for demonstration purposes)
    // Simulate a payment. This is just for demo - replace with payment gateway integration.
    // $payment_status = "success";


    // 4. Update Database (Record Order)
    //  - Insert order details into the 'orders' table.
    //  - Update inventory (reduce quantity in 'products' table).

    //  Example:
    $order_id = generateOrderID();  // Implement this function to generate a unique order ID

    // Insert order details into the 'orders' table.
    // $conn = connectToDatabase();
    // $sql = "INSERT INTO orders (customer_id, order_date, total_amount, payment_status)
    //         VALUES ('$customer_id', NOW(), '$total_amount', '$payment_status')";
    // $conn->query($sql);
    // $conn->close();


    // 5. Return Success Message
    return $order_id;  // Return the order ID for confirmation
}



//  Function to generate a unique order ID
function generateOrderID() {
    // Implement logic to generate a unique order ID (e.g., using UUID, timestamp, etc.)
    return bin2hex(random_bytes(16)); // Example: generate a random hexadecimal string
}

// Simulate a shopping cart (for demonstration)
$cart = [
    1 => 2, // Item ID 1, quantity 2
    2 => 1, // Item ID 2, quantity 1
];

// Get the customer ID (e.g., from session)
$customer_id = $_SESSION['customer_id'] ?? null; // Get from session, or null if not set.

if ($customer_id) {
    // Process the purchase
    $order_id = processPurchase($cart, "stripe", $customer_id); // Replace "stripe" with your payment method
    if ($order_id) {
        echo "<h2>Order placed successfully!</h2>";
        echo "<p>Order ID: " . htmlspecialchars($order_id) . "</p>";
    } else {
        echo "<p>Error placing order.</p>";
    }
} else {
    echo "<p>Please log in or create an account to place an order.</p>";
}
?>


<?php

// Define product information (for simplicity, this is in the code)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

// Session handling (for cart data)
session_start();

// Initialize the cart in session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    global $products;

    if (isset($products[$product_id])) {
        if ($quantity <= 0) {
            echo "<p>Invalid quantity.  Please enter a positive number.</p>";
            return;
        }

        $product = $products[$product_id];

        if ($quantity > $product['quantity']) {
            echo "<p>Not enough stock! Only $product['quantity'] available.</p>";
            return;
        }

        // Check if the product is already in the cart
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            // Add the product to the cart
            $_SESSION['cart'][$product_id] = ['quantity' => $quantity, 'price' => $product['price']];
        }

        echo "<p>Item added to cart!</p>";
    } else {
        echo "<p>Product not found.</p>";
    }
}

// Function to view the cart
function viewCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $product = $products[$product_id];
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $item['quantity'] . " = $" . ($item['quantity'] * $product['price']) . "</li>";
    }
    echo "</ul>";

    echo "<p><a href='checkout.php' class='btn'>Proceed to Checkout</a></p>";
}

// Function to handle checkout (simplified - just displays the cart total)
function checkout() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $product = $products[$product_id];
        $total += ($item['quantity'] * $product['price']);
    }

    echo "<h2>Checkout</h2>";
    echo "<p>Total: $" . $total . "</p>";
    echo "<p>Thank you for your order!</p>";

    // Clear the cart after checkout
    $_SESSION['cart'] = [];
}

// ---  Handle incoming requests  ---

// 1. Add to Cart Request (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Convert to integer
    $quantity = (int)$_POST['quantity'];       // Convert to integer

    addToCart($product_id, $quantity);
}

// 2. View Cart Request
if (isset($_GET['view_cart'])) {
    viewCart();
}

// 3. Checkout Request
if (isset($_GET['checkout'])) {
    checkout();
}

// ---  Example HTML (for display) ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store</title>
    <style>
        .btn {
            background-color: #4CAF50; /* Green */
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
</head>
<body>

<h1>Online Store</h1>

<h2>Products</h2>
<ul>
    <?php
    foreach ($products as $product_id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "  <form method='post'><input type='hidden' name='product_id' value='" . $product_id . "'><input type='number' name='quantity' value='1' min='1'> <button type='submit' class='btn'>Add to Cart</button></form></li>";
    }
    ?>
</ul>

<?php
    viewCart(); // Display the cart on every page
?>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";

// Function to connect to the database
function connect_db() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function add_to_cart($item_id, $quantity) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    // Check if the item already exists in the cart
    $sql = "SELECT * FROM cart WHERE item_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $item_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Item already in cart, update quantity
        $sql = "UPDATE cart SET quantity = quantity + ? WHERE item_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("is", $quantity, $item_id);
        $stmt->execute();
    } else {
        // Item not in cart, add it
        $sql = "INSERT INTO cart (item_id, quantity) VALUES (?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("is", $item_id, $quantity);
        $stmt->execute();
    }

    $stmt->close();
    $conn->close();
    return true;
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    $sql = "DELETE FROM cart WHERE item_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $item_id);
    $stmt->execute();
    $stmt->close();
    $conn->close();
    return true;
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $quantity) {
    $conn = connect_db();

    if (!$conn) {
        return false;
    }

    if ($quantity <= 0) {
        remove_from_cart($item_id); // If quantity is 0 or negative, remove the item
        return true;
    }

    $sql = "UPDATE cart SET quantity = ? WHERE item_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("is", $quantity, $item_id);
    $stmt->execute();
    $stmt->close();
    $conn->close();
    return true;
}

// Function to get the cart contents
function get_cart_contents() {
    $conn = connect_db();

    if (!$conn) {
        return [];
    }

    $sql = "SELECT * FROM cart";
    $result = $conn->query($sql);

    $cart_items = [];
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
    }

    $conn->close();
    return $cart_items;
}

// Function to calculate the total cart value
function calculate_total() {
    $cart_items = get_cart_contents();
    $total = 0;

    foreach ($cart_items as $item) {
        // Assuming you have a 'products' table with 'price' column
        // Adjust this query to fetch the product's price from your product table.
        $sql = "SELECT price FROM products WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $item['item_id']);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        $total += $row['price'] * $item['quantity'];
        $stmt->close();
    }

    return $total;
}

//  --------------------  Example Usage (HTML & PHP)  --------------------

// Initialize the cart session if it doesn't exist.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Handle adding to cart (example)
if (isset($_POST['add_to_cart'])) {
    $item_id = $_POST['item_id'];
    $quantity = $_POST['quantity'];
    add_to_cart($item_id, $quantity);
    // Redirect to the same page to refresh the cart display
    header("Location: cart.php"); // Assuming you have a cart.php page
    exit();
}

// Handle removing from cart (example)
if (isset($_GET['remove_from_cart'])) {
    $item_id = $_GET['remove_from_cart'];
    remove_from_cart($item_id);
    header("Location: cart.php");
    exit();
}

// Handle updating quantity (example)
if (isset($_GET['update_quantity'])) {
    $item_id = $_GET['update_quantity'];
    $quantity = $_GET['quantity'];
    update_quantity($item_id, $quantity);
    header("Location: cart.php");
    exit();
}


// Display the cart contents (cart.php -  Simplified example)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php
    $cart_items = get_cart_contents();

    if (empty($cart_items)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart_items as $item) {
            echo "<li>";
            echo "Item ID: " . $item['item_id'] . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            // Add code here to display the product name or other details from a 'products' table
            echo "Price: $5.00 per item (Example)<br>";
            echo "Total Price: $5.00 * " . $item['quantity'] . " = $";
            echo $item['quantity'] * 5.00;
            echo "<form method='get' action=''>";
            echo "<input type='hidden' name='update_quantity' value='" . $item['item_id'] . "'>";
            echo "<input type='number' name='quantity' value='" . $item['quantity'] . "' min='1'>";
            echo "<input type='submit' value='Update'>";
            echo "<input type='hidden' name='remove_from_cart' value='" . $item['item_id'] . "'>";
            echo "</form>";
            echo "</li>";
        }
        echo "</ul>";
        $total = calculate_total();
        echo "<p>Total: $" . $total . "</p>";
    }
    ?>

</body>
</html>


<?php

// 1. Database Connection (Replace with your database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// 2. Product Information (Example Data - Replace with your product data)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// 3. Handle Form Submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate Input (Crucial for security)
    if (!isset($products[$productId])) {
        $errorMessage = "Product ID not found.";
    } elseif (empty($quantity) || !is_numeric($quantity)) {
        $errorMessage = "Quantity must be a number.";
    } elseif ($quantity <= 0) {
        $errorMessage = "Quantity must be greater than zero.";
    } else {
        // Process the purchase
        $totalAmount = $products[$productId]['price'] * $quantity;

        // Display Confirmation Message
        $successMessage = "Order placed successfully! Total: $" . $totalAmount;
    }
}

// 4. Display the Purchase Form
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Purchase</title>
</head>
<body>

    <h1>Online Purchase</h1>

    <?php if (isset($errorMessage)) { ?>
        <p style="color: red;"><?php echo $errorMessage; ?></p>
    <?php } ?>

    <?php if (isset($successMessage)) { ?>
        <p style="color: green;"><?php echo $successMessage; ?></p>
    <?php } ?>

    <h2>Select Product and Quantity</h2>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php foreach ($products as $id => $product): ?>
                <option value="<?php echo $id; ?>" <?php if ($id == 1) echo "selected"; ?>><?php echo $product['name']; ?></option>
            <?php endforeach; ?>
        </select><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" min="1"><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle purchase logic
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1. Get Cart Details
    $result = $conn->query("SELECT product_id, quantity FROM cart WHERE cart_id = '$cart_id'");
    $cart_items = $result->fetch_assoc();

    if (!$cart_items) {
        echo "<p>No items in the cart.</p>";
        return false;
    }

    // 2. Calculate Total Amount
    $total_amount = 0;
    foreach ($cart_items as $product_id => $quantity) {
        // Fetch product details from the products table
        $product_query = $conn->query("SELECT price FROM products WHERE product_id = '$product_id'");
        $product = $product_query->fetch_assoc();
        $total_amount += $product['price'] * $quantity;
    }

    // 3. Record the Order
    // Assuming you have a 'orders' table with columns: order_id, cart_id, customer_name, customer_email, order_date, total_amount, payment_method
    $conn->query("INSERT INTO orders (cart_id, customer_name, customer_email, order_date, total_amount, payment_method) 
                VALUES ('$cart_id', '$customer_name', '$customer_email', NOW(), '$total_amount', '$payment_method')");

    // 4. Update Cart (Reduce Quantities)
    foreach ($cart_items as $product_id => $quantity) {
        $conn->query("UPDATE cart SET quantity = quantity - '$quantity' WHERE product_id = '$product_id' AND cart_id = '$cart_id'");
    }

    // 5.  Clean up Cart (If Cart is Empty) - Optional
    // Check if the cart is empty after the purchase
    $empty_cart_query = $conn->query("SELECT SUM(quantity) FROM cart WHERE cart_id = '$cart_id'");
    $empty_cart_result = $empty_cart_result->fetch_assoc();

    if ($empty_cart_result['SUM(quantity)'] == 0) {
        $conn->query("DELETE FROM cart WHERE cart_id = '$cart_id'");
    }

    echo "<p>Order placed successfully! Order ID: " . $conn->insert_id . "</p>"; // Show order ID
    return true;
}



// --- Example Usage (Simulated form handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // 1. Get Form Data
    $cart_id = $_POST["cart_id"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    // 2.  Call the purchase function
    if (handlePurchase($cart_id, $customer_name, $customer_email, $payment_method)) {
        // Handle success - Redirect to order confirmation page, etc.
    } else {
        // Handle failure
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
  }
}

// Function to add an item to the cart
function addToCart($product_id, $quantity, $pdo) {
  try {
    $stmt = $pdo->prepare("INSERT INTO cart (product_id, quantity) VALUES (?, ?)");
    $stmt->execute([$product_id, $quantity]);
    return true;
  } catch (PDOException $e) {
    // Handle potential errors (e.g., product already in cart)
    return false;
  }
}


// Function to get the cart items
function getCartItems($pdo) {
  try {
    $stmt = $pdo->prepare("SELECT p.name AS product_name, c.quantity FROM cart c JOIN products p ON c.product_id = p.id");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    die("Error retrieving cart items: " . $e->getMessage());
  }
}

// Function to clear the cart
function clearCart($pdo) {
    try {
        $stmt = $pdo->prepare("DELETE FROM cart");
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        die("Error clearing cart: " . $e->getMessage());
    }
}


// Example Usage (handling a purchase - simplified)

// 1. Connect to the database
$pdo = connectToDatabase();

// 2.  Simulate a purchase -  In a real application, this would involve
//     handling payment, order confirmation, etc.  Here, we just "process"
//     the cart.

// Get the cart items
$cart_items = getCartItems($pdo);

// Clear the cart (after "processing")
// clearCart($pdo); // Comment out this line to keep cart items after purchase

// Display the cart items
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}


// 3. Close the database connection (important for security)
$pdo = null;

?>


<?php

// Configuration
$items = [
    "T-Shirt" => 19.99,
    "Jeans" => 49.99,
    "Hat" => 12.50,
    "Shoes" => 79.99,
];

$cart = []; // Array to store items and their quantities

// Function to display the shopping cart
function displayCart() {
    echo "<table border='1'>";
    echo "<tr><th>Item</th><th>Quantity</th><th>Price</th></tr>";
    foreach ($cart as $item => $quantity) {
        $price = $items[$item];
        echo "<tr><td>$item</td><td>$quantity</td><td>$price</td></tr>";
    }
    echo "</table>";
}

// Function to add an item to the cart
function addItemToCart($item, $quantity) {
    if (isset($cart[$item])) {
        $cart[$item] += $quantity;
    } else {
        $cart[$item] = $quantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($item, $quantity) {
    if (isset($cart[$item])) {
        if ($cart[$item] > $quantity) {
            $cart[$item] -= $quantity;
            if ($cart[$item] == 0) {
                unset($cart[$item]); // Remove if quantity becomes 0
            }
        } else {
            $cart[$item] = 0;
            unset($cart[$item]);
        }
    } else {
        echo "<p>Item not in cart.</p>";
    }
}


// Handle form submission (for adding items)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST["item"]) && isset($_POST["quantity"])) {
        $item = htmlspecialchars($_POST["item"]);  //Sanitize input
        $quantity = intval($_POST["quantity"]); //Convert to integer

        addItemToCart($item, $quantity);
        displayCart();
    }
}

// Handle form submission (for removing items - optional)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["remove_item"])) {
    $item = htmlspecialchars($_POST["remove_item"]);
    $quantity = intval($_POST["remove_quantity"]);
    removeItemFromCart($item, $quantity);
    displayCart();
}



// Display the shopping cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <h2>Add Items</h2>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="item">Item:</label>
        <select name="item" id="item">
            <option value="T-Shirt">T-Shirt</option>
            <option value="Jeans">Jeans</option>
            <option value="Hat">Hat</option>
            <option value="Shoes">Shoes</option>
        </select><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" min="1"><br><br>

        <button type="submit">Add to Cart</button>
    </form>

    <!--  Optional:  Remove Item Form  -->
    <h2>Remove Item</h2>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="remove_item">Item to Remove:</label>
        <select name="remove_item" id="remove_item">
            <option value="T-Shirt">T-Shirt</option>
            <option value="Jeans">Jeans</option>
            <option value="Hat">Hat</option>
            <option value="Shoes">Shoes</option>
        </select><br><br>

        <label for="remove_quantity">Quantity to Remove:</label>
        <input type="number" name="remove_quantity" id="remove_quantity" min="1"><br><br>

        <button type="submit">Remove from Cart</button>
    </form>


</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Define the purchase functionality
function createPurchase($productId, $quantity, $customerName, $customerEmail) {
    // Sanitize inputs to prevent SQL injection
    $productId = $conn->real_escape_string($productId);
    $quantity = $conn->real_escape_string($quantity);
    $customerName = $conn->real_escape_string($customerName);
    $customerEmail = $conn->real_escape_string($customerEmail);

    // SQL query to insert the purchase data
    $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email)
            VALUES ('$productId', '$quantity', '$customerName', '$customerEmail')";

    if ($conn->query($sql) === TRUE) {
        return true; // Purchase created successfully
    } else {
        return false; // Error creating purchase
    }
}

// Example Usage:  (This part is for demonstration - adjust to your application)

// 1.  Handle form submission (if a form is used to collect data)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customerName = $_POST["customer_name"];
    $customerEmail = $_POST["customer_email"];

    if (createPurchase($productId, $quantity, $customerName, $customerEmail)) {
        echo "<p>Purchase created successfully! Order ID: " . $conn->insert_id . "</p>"; // Display success message
    } else {
        echo "<p>Error creating purchase. Please try again.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Create a Purchase</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <input type="submit" value="Create Purchase">
    </form>

</body>
</html>


<?php

// Database configuration (replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Handle the purchase process
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 1. Validate Form Data
  $order_id = $_POST["order_id"];
  $total_amount = $_POST["total_amount"];
  $shipping_address = $_POST["shipping_address"];
  $payment_method = $_POST["payment_method"]; // e.g., "credit_card", "paypal"

  // Basic validation -  add more robust validation as needed
  if (empty($order_id) || empty($total_amount) || empty($shipping_address) || empty($payment_method)) {
    $error_message = "All fields are required.";
  } else {
    // 2. Process the Order -  This is the core logic
    // Example:  Add order details to the database

    try {
      // Connect to the database
      $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);

      // Set PDO error mode to exception
      $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

      // Example: Insert order details into the database
      $sql = "INSERT INTO orders (order_id, total_amount, shipping_address, payment_method, order_date) VALUES (:order_id, :total_amount, :shipping_address, :payment_method, NOW())";
      $stmt = $pdo->prepare($sql);
      $stmt->bindParam(':order_id', $order_id);
      $stmt->bindParam(':total_amount', $total_amount);
      $stmt->bindParam(':shipping_address', $shipping_address);
      $stmt->bindParam(':payment_method', $payment_method);
      $stmt->execute();

      // Optionally, you could:
      // - Send an email confirmation
      // - Update inventory
      // - Generate a receipt

      $success_message = "Order placed successfully! Order ID: " . $order_id;

    } catch (PDOException $e) {
      $error_message = "Database error: " . $e->getMessage();
    }
  }
}

// Retrieve cart data (assuming you have a cart system - this is a placeholder)
// You'll need to implement your actual cart retrieval logic here.
$cart_items = [
  ['product_id' => 1, 'name' => 'T-Shirt', 'quantity' => 2, 'price' => 20],
  ['product_id' => 2, 'name' => 'Jeans', 'quantity' => 1, 'price' => 50],
];

$total_cart_amount = 0;
foreach ($cart_items as $item) {
  $total_cart_amount += $item['quantity'] * $item['price'];
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
  <style>
    .error-message {
      color: red;
      margin-top: 10px;
    }
    .success-message {
      color: green;
      margin-top: 10px;
    }
  </style>
</head>
<body>

  <h1>Purchase Order</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="order_id">Order ID:</label>
    <input type="text" id="order_id" name="order_id" value="<?php if (isset($order_id)) echo $order_id; ?>"><br><br>

    <label for="total_amount">Total Amount:</label>
    <input type="text" id="total_amount" name="total_amount" value="<?php if (isset($total_amount)) echo $total_amount; ?>"><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <input type="text" id="shipping_address" name="shipping_address" value="<?php if (isset($shipping_address)) echo $shipping_address; ?>"><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select><br><br>

    <input type="submit" value="Place Order">
  </form>

  <?php if (isset($error_message)) {
    echo "<p class='error-message'>" . $error_message . "</p>";
  } else if (isset($success_message)) {
    echo "<p class='success-message'>" . $success_message . "</p>";
  }
?>

</body>
</html>


<?php

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get form data
    $product_name = $_POST["product_name"];
    $quantity = $_POST["quantity"];
    $price = $_POST["price"];

    // Validate the data (VERY IMPORTANT!)
    if (empty($product_name) || empty($quantity) || empty($price)) {
        echo "Error: Please fill in all fields.";
    } elseif (!is_numeric($quantity) || !is_numeric($price)) {
        echo "Error: Quantity and Price must be numbers.";
    } else {
        // Calculate the total amount
        $total_amount = $quantity * $price;

        // Store the purchase data (in this example, an array)
        $purchases = array(
            "product_name" => $product_name,
            "quantity" => $quantity,
            "price" => $price,
            "total_amount" => $total_amount,
            "timestamp" => date("Y-m-d H:i:s")
        );

        // You would normally save this data to a database here.
        // For this example, we'll just print it.

        echo "<h2>Purchase Confirmation</h2>";
        echo "<p>Product: " . $product_name . "</p>";
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Price per Unit: " . $price . "</p>";
        echo "<p>Total Amount: $" . $total_amount . "</p>";
        echo "<p>Order Placed at: " . $timestamp . "</p>";

        // Add more logging or confirmation actions here.
        // Example:  Send an email confirmation to the customer.
    }
} else {
    echo "Error: Form not submitted correctly.";
}
?>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

//  Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Sanitize and validate input
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate input (Example - you should add more robust validation)
    if (!is_numeric($product_id) || !is_numeric($quantity) || $quantity <= 0) {
        $error = "Invalid product ID or quantity.";
    } else {
        // Add item to cart
        if (!isset($_SESSION['cart']) || !is_array($_SESSION['cart'])) {
            $_SESSION['cart'] = [];
        }

        // Check if the product already exists in the cart
        $product_exists = false;
        foreach($_SESSION['cart'] as $key => $item) {
            if ($item['product_id'] == $product_id) {
                $item['quantity'] += $quantity;
                $product_exists = true;
                break;
            }
        }

        if (!$product_exists) {
            // Add new product to cart
            $_SESSION['cart'][] = [
                'product_id' => $product_id,
                'quantity' => $quantity,
                'name' => "Product " . $product_id, // Add product name (improve this)
                'price' => 10.00 // Placeholder price - get this from your database
            ];
        }

        // Redirect to cart page
        header("Location: cart.php");
        exit();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Item</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>
        <br><br>

        <button type="submit">Add to Cart</button>
    </form>

    <br>
    <a href="cart.php">View Cart</a>

</body>
</html>


<?php
session_start();

// Check if the cart is empty
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . ", Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

// Button to remove item (implement this)
echo "<br><br>";
echo "<a href='remove_from_cart.php'>Remove from Cart</a>";
?>


<?php
session_start();

// Implement logic to remove a specific item from the cart.
// (This is a simplified example - error handling, etc. is needed)

// Get the product ID to remove from the URL
$product_id_to_remove = $_GET['product_id'];

// Remove the item from the cart array
unset($_SESSION['cart'][$product_id_to_remove]);

// Redirect back to the cart page
header("Location: cart.php");
exit();
?>


<?php

// Simulate a product database (replace with your actual database connection)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

// Initialize shopping cart
$cart = [];

// Function to add an item to the cart
function addToCart($productId, $quantity, $products) {
    if (isset($products[$productId]) && $products[$productId]['quantity'] > 0) {
        $product = $products[$productId];
        $cart[] = ['product_id' => $productId, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        echo "<p>Added " . $quantity . " " . $product['name'] . " to your cart.</p>";
    } else {
        echo "<p>Sorry, " . $product['name'] . " is out of stock or invalid product ID.</p>";
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        $product = next(array_filter($products, function ($key, $value) use ($item) {
            return $item['product_id'] === $key;
        }));

        echo "<li>" . $product['name'] . " - $" . $product['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . calculateTotal($cart) . "</p>";
}

// Function to calculate the total price of the cart
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return round($total, 2);
}

// ---  Handling User Input (Simulated) ---

// Example: Add to cart on form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];
        addToCart($productId, $quantity, $products);

        //  Refresh the cart display
        displayCart($cart);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple E-commerce</title>
</head>
<body>

<h1>Our Products</h1>

<?php
foreach ($products as $id => $product) {
    echo "<p><strong>" . $product['name'] . " - $" . $product['price'] . "</strong><br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $id . "'>";
    echo "<input type='number' name='quantity' value='1' min='1' style='width:50px;'>";
    echo "<button type='submit'>Add to Cart</button>";
    echo "</form></p>";
}
?>

</body>
</html>


<?php
session_start();

// Product Data (Simulated Database)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Cart (Session-Based)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Helper functions
function addItemToCart($productId, $quantity = 1) {
    $_SESSION['cart'][] = $productId;
}

function getCartItems() {
    return $_SESSION['cart'];
}

function removeItemFromCart($productId) {
    $cart = getCartItems();
    foreach ($cart as $key => $item) {
        if ($item == $productId) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }
    return false;
}

function calculateTotal() {
    $total = 0;
    $cart = getCartItems();
    foreach ($cart as $item) {
        $total += $products[$item]['price'];
    }
    return $total;
}

// Handle Adding Items to Cart
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Validate product ID
    if (isset($products[$productId])) {
        addItemToCart($productId);
    }
}

// Handle Removing Items from Cart
if (isset($_POST['remove_item'])) {
    $productId = (int)$_POST['product_id'];
    removeItemFromCart($productId);
}

// Display the Cart
echo "<!DOCTYPE html>";
echo "<html>";
echo "<head>";
echo "<title>Online Store - Cart</title>";
echo "</head>";
echo "<body>";
echo "<h1>Shopping Cart</h1>";

$cartItems = getCartItems();

if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $item) {
        echo "<li>" . $products[$item]['name'] . " - $" . $products[$item]['price'] . "</li>";
    }
    echo "</ul>";
}

echo "<br>";
echo "<a href='checkout.php'>Proceed to Checkout</a>"; // Link to checkout page

echo "<br>";
echo "<a href='index.php'>Back to Products</a>"; // Link back to product listing

echo "</body>";
echo "</html>";
?>


<!DOCTYPE html>
<html>
<head>
    <title>Online Store</title>
</head>
<body>
    <h1>Available Products</h1>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . $product['price'] . "<br>";
            echo "<form method='post'>";
            echo "<input type='hidden' name='product_id' value='" . $id . "'>";
            echo "<input type='submit' name='add_to_cart' value='Add to Cart'>";
            echo "</form>";
        }
        ?>
    </ul>
    <br>
    <a href='cart.php'>View Cart</a>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
    <title>Checkout</title>
</head>
<body>
    <h1>Checkout</h1>

    <?php
    $cartItems = getCartItems();

    if (empty($cartItems)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Items in Cart:</h2>";
        foreach ($cartItems as $item) {
            echo $products[$item]['name'] . " - $" . $products[$item]['price'] . "<br>";
        }

        $total = calculateTotal();
        echo "<p>Total: $" . $total . "</p>";
        echo "<form method='post'>
                    <input type='hidden' name='submit_order' value='true'>
                    <input type='submit' name='submit_order' value='Place Order'>";
    }
    ?>
</body>
</html>


<?php
session_start();

// Database Connection (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Helper Functions ---

/**
 * Adds an item to the cart
 *
 * @param int $product_id
 * @param int $quantity
 */
function addToCart($product_id, $quantity) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
  } else {
    $cart = [];
  }

  // Check if the product already exists in the cart
  foreach ($cart as $key => $item) {
    if ($item['product_id'] == $product_id) {
      $cart[$key]['quantity'] += $quantity;
      return;
    }
  }

  // If product not found, add it to the cart
  $cart[$product_id] = [
    'product_id' => $product_id,
    'quantity' => $quantity,
  ];
}

/**
 * Updates the quantity of an item in the cart
 *
 * @param int $product_id
 * @param int $quantity
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];

    // Remove the product if the quantity is 0
    foreach ($cart as $key => $item) {
      if ($item['product_id'] == $product_id && $item['quantity'] <= 0) {
        unset($cart[$key]);
        break; // Exit the loop after removing the item
      }
    }

    // Update the quantity if the product exists
    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] = $quantity;
    }
  }
}


/**
 * Removes an item from the cart
 *
 * @param int $product_id
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
    unset($cart[$product_id]);
  }
}

/**
 * Gets all items in the cart
 *
 * @return array
 */
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return [];
}

/**
 * Calculates the total cart value
 *
 * @return float
 */
function calculateCartTotal() {
    $cartItems = getCartItems();
    $total = 0;
    foreach ($cartItems as $item) {
        // Assuming you have a product table with 'price' column
        // Adjust this to your actual product data source
        $product = getProductById($item['product_id']); // Call a function to get product details
        if ($product) {
            $total += $product['price'] * $item['quantity'];
        }
    }
    return $total;
}


/**
 * Retrieves product details by ID
 * @param int $product_id
 * @return array|null
 */
function getProductById($product_id) {
    //  Replace this with your actual database query
    //  This is just an example - adjust to your product table structure
    $query = "SELECT id, name, price FROM products WHERE id = $product_id";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    }
    return null;
}


// --- Cart Operations (Based on User Actions) ---

// 1. Add to Cart (e.g., from a product page)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
}

// 2. Update Cart Quantity (e.g., from a cart page)
if (isset($_POST['update_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $quantity);
}

// 3. Remove Item from Cart (e.g., from a cart page)
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// 4. Get Cart Contents (e.g., display in a cart page)
$cartItems = getCartItems();

// 5. Calculate Total
$total = calculateCartTotal();

// --- Display Cart (Example - Cart Page) ---

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cartItems)) { ?>
    <p>Your cart is empty.</p>
  <?php } else { ?>
    <table border="1">
      <thead>
        <tr>
          <th>Product</th>
          <th>Quantity</th>
          <th>Price</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        foreach ($cartItems as $key => $item) {
          $product = getProductById($item['product_id']);
          if ($product) {
            echo "<tr>";
            echo "<td>" . $product['name'] . "</td>";
            echo "<td>" . $item['quantity'] . "</td>";
            echo "<td>$" . $product['price'] . "</td>";
            echo "<td>$" . $product['price'] * $item['quantity'] . "</td>";
            echo "<td><a href='?action=remove&product_id=" . $item['product_id'] . "'>Remove</a></td>";
            echo "</tr>";
          }
        }
        ?>
      </tbody>
    </table>

    <p><strong>Total:</strong> $" . $total . "</p>
  <?php } ?>

  <a href="checkout.php">Proceed to Checkout</a>

</body>
</html>


<?php

// Shopping Cart (Array)
$cart = array();

// Order Data (Simulated)
$order_id = 1;
$order_date = date("Y-m-d H:i:s");

// Product Data (Simulated)
$products = array(
    1 => array("id" => 1, "name" => "T-Shirt", "price" => 20),
    2 => array("id" => 2, "name" => "Jeans", "price" => 50),
    3 => array("id" => 3, "name" => "Hat", "price" => 15)
);

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1)
{
    global $cart;

    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $cart[] = array(
            "product_id" => $product_id,
            "name" => $product["name"],
            "price" => $product["price"],
            "quantity" => $quantity
        );
    } else {
        echo "Product ID " . $product_id . " not found.";
    }
}

// Function to update quantity in cart
function update_cart_quantity($product_id, $new_quantity) {
    global $cart;

    foreach ($cart as &$item) { // Use &$item to modify the original item
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            break;
        }
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id)
{
    global $cart;

    $i = 0;
    while ($i < count($cart)) {
        if ($cart[$i]["product_id"] == $product_id) {
            unset($cart[$i]);
            return;
        }
        $i++;
    }
}

// Function to display the cart
function display_cart()
{
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
        }
        echo "</ul>";
        $total_amount = 0;
        foreach ($cart as $item) {
            $total_amount += ($item['price'] * $item['quantity']);
        }
        echo "<p><strong>Total: $" . $total_amount . "</strong></p>";
    }
}

// Function to create an order
function create_order()
{
    global $cart, $order_id, $order_date;

    //Save cart to order
    $order = array(
        "order_id" => $order_id,
        "order_date" => $order_date,
        "items" => $cart
    );

    // Clear the cart after order placement
    $cart = array();

    // You would typically save the order to a file or database here
    // For this example, we'll just display it.
    echo "<h2>Order Confirmation</h2>";
    echo "<p>Order ID: " . $order_id . "</p>";
    echo "<p>Order Date: " . $order_date . "</p>";
    echo "<p>Order Items:</p>";
    echo "<pre>";
    print_r($order);
    echo "</pre>";
}

// Example Usage (HTML)
?>
<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase</title>
</head>
<body>

<h1>Online Store</h1>

<form method="post">
    <label for="product_id">Select Product:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $product['name'] . "</option>";
        }
        ?>
    </select>
    <br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" value="1" min="1">
    <br><br>
    <button type="submit" name="action">Add to Cart</button>
</form>

<?php
if (isset($_POST['action'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;  // Ensure quantity is an integer
    
    if ($product_id && $quantity > 0) {
        add_to_cart($product_id, $quantity);
    }
}
?>

<br>
<a href="cart.php">View Cart</a> | <a href="checkout.php">Checkout</a>


</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize input
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = $_POST["quantity"];
  $product_id = $_POST["product_id"]; // Assuming you have a product_id for each item

  // Basic input validation (customize as needed)
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "All fields are required.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } elseif (intval($quantity) <= 0) {
    $error = "Quantity must be a positive integer.";
  }

  // If no errors, proceed with the purchase
  if (empty($error)) {
    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute the SQL query
    $sql = "INSERT INTO purchases (name, email, product_id, quantity) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      $stmt->bind_param("sii", $name, $product_id, $quantity);
      $stmt->execute();
      $stmt->close();
    } else {
      echo "Error preparing statement.";
      $stmt->close();
      exit;
    }

    // Success message
    $success_message = "Purchase successful! Thank you for your order.";

    // Close the database connection
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    die();
}

// Function to handle the purchase process
function processPurchase($cart_id, $user_id) {
    // Validate inputs (add more robust validation as needed)
    if (!is_numeric($cart_id) || !is_numeric($user_id)) {
        return "Invalid input.  Cart ID and User ID must be numbers.";
    }

    // 1.  Retrieve Cart Details
    $stmt = $pdo->prepare("SELECT product_id, quantity, price FROM cart WHERE cart_id = :cart_id");
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->execute();
    $cart_details = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (empty($cart_details)) {
        return "Cart not found.";
    }

    // 2. Calculate Total Amount
    $total_amount = 0;
    foreach ($cart_details as $row) {
        $total_amount += $row['price'] * $row['quantity'];
    }

    // 3.  Update Order Details (Create a new order record)
    $order_id =  (int)($pdo->lastInsertId()); // Get the auto-incremented order ID
    $order_date = date("Y-m-d H:i:s"); // Current timestamp
    $order_status = "pending";

    $stmt = $pdo->prepare("INSERT INTO orders (user_id, order_date, order_status, total_amount, cart_id) 
                             VALUES (:user_id, :order_date, :order_status, :total_amount, :cart_id)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':order_date', $order_date);
    $stmt->bindParam(':order_status', $order_status);
    $stmt->bindParam(':total_amount', $total_amount);
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->execute();


    // 4.  Update Cart (Mark items as purchased -  e.g., change quantity to 0 or remove entirely)
    //  Option 1:  Reduce quantity
    //$stmt = $pdo->prepare("UPDATE cart SET quantity = quantity - 1 WHERE cart_id = :cart_id");
    // $stmt->bindParam(':cart_id', $cart_id);
    // $stmt->execute();

    // Option 2:  Delete cart items
    $stmt = $pdo->prepare("DELETE FROM cart WHERE cart_id = :cart_id");
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->execute();



    return "Purchase successful! Order ID: $order_id";
}


// ---  Example Usage (This part would be in a form submission) ---
// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart_id and user_id from the form
    $cart_id = $_POST['cart_id'];
    $user_id = $_POST['user_id'];

    // Process the purchase
    $result = processPurchase($cart_id, $user_id);

    // Display the result
    echo "<br>" . $result;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" required><br><br>

    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id" required><br><br>

    <input type="submit" value="Complete Purchase">
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Product Data (Simulated for demonstration)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20, 'stock' => 10],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50, 'stock' => 5],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15, 'stock' => 20],
];

// Session for user data (Simple - for demonstration)
session_start();

// Function to handle the purchase process
function processPurchase($product_id, $quantity) {
    // Validate inputs (Very basic for this example)
    if (!is_numeric($product_id) || $product_id <= 0 || !is_numeric($quantity) || $quantity <= 0) {
        return "Invalid product ID or quantity.";
    }

    $product_id = (int)$product_id; // Convert to integer for safety

    $product = $products[$product_id];

    if ($product === false) {
        return "Product not found.";
    }

    if ($product['stock'] < $quantity) {
        return "Not enough stock.";
    }

    // Add to cart (In a real application, you'd store this in a session or database)
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
    $_SESSION['cart'][] = [
        'id' => $product['id'],
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity,
    ];

    // Update stock (Simulated - in reality, you'd update the database)
    $product['stock'] -= $quantity;

    // Return success message
    return "Purchase added to cart!";
}

// Handle form submission (if applicable)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    $result = processPurchase($product_id, $quantity);
    echo "<br>" . $result;

    // Display cart summary (Example)
    if (isset($_SESSION['cart'])) {
        echo "<br><h2>Cart Summary:</h2>";
        echo "<ul>";
        foreach ($_SESSION['cart'] as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
        }
        echo "</ul>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Ecommerce Purchase</title>
</head>
<body>

<h1>Ecommerce Purchase</h1>

<h2>Select Product and Quantity:</h2>

<form method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"" . $id . "\">" . $id . " - " . $product['name'] . "</option>";
        }
        ?>
    </select>

    <br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" min="1">

    <br>

    <button type="submit">Add to Cart</button>
</form>

<br>
<a href="cart.php">View Cart</a> (To be implemented in a real application)

</body>
</html>


<?php

// Database configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connect_to_db() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}

// Function to add a product to the cart
function add_to_cart($conn, $product_id, $quantity) {
    // Check if the product already exists in the cart
    $query = "SELECT * FROM products WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $product_id);  // "i" for integer
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();

        // Check if the product is already in the cart
        $cart_query = "SELECT * FROM cart WHERE product_id = ? AND quantity > 0";
        $cart_stmt = $conn->prepare($cart_query);
        $cart_stmt->bind_param("i", $product_id);
        $cart_stmt->execute();
        $cart_result = $cart_stmt->get_result();

        if ($cart_result->num_rows > 0) {
            // Product is in the cart, update the quantity
            $query = "UPDATE cart SET quantity = quantity + ? WHERE product_id = ?";
            $stmt = $conn->prepare($query);
            $stmt->bind_param("is", $quantity, $product_id);
            $stmt->execute();
        } else {
            // Product not in cart, add it
            $query = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";
            $stmt = $conn->prepare($query);
            $stmt->bind_param("is", $product_id, $quantity);
            $stmt->execute();
            echo "Product added to cart.";
        }
    } else {
        echo "Product not found.";
    }
}

// Function to view the cart
function view_cart($conn) {
    $cart_query = "SELECT p.name AS product_name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
    $stmt = $conn->prepare($cart_query);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        echo "<h2>Shopping Cart</h2>";
        echo "<table>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";
        while ($row = $result->fetch_assoc()) {
            $total = $row['price'] * $row['quantity'];
            echo "<tr>";
            echo "<td>" . $row['product_name'] . "</td>";
            echo "<td>$" . $row['price'] . "</td>";
            echo "<td>" . $row['quantity'] . "</td>";
            echo "<td>$" . $total . "</td>";
            echo "</tr>";
        }
        echo "</table>";
        echo "<p><strong>Total: $" . calculate_total($conn) . "</strong></p>";
    } else {
        echo "Your cart is empty.";
    }
}


// Function to calculate the total price of the cart
function calculate_total($conn) {
    $query = "SELECT SUM(price * quantity) AS total";
    $stmt = $conn->prepare($query);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        return $row['total'];
    } else {
        return 0;
    }
}

// Function to remove a product from the cart
function remove_from_cart($conn, $product_id) {
    $query = "DELETE FROM cart WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    if ($stmt->affected_rows > 0) {
        echo "Product removed from cart.";
    } else {
        echo "Product not found in cart.";
    }
}

// Example Usage (Illustrative - This is the front-end code)
// You would typically process this through a form on your webpage.

// If you want to add a product to the cart, call this:
// add_to_cart($conn, $product_id, $quantity);

// To view the cart:
// view_cart($conn);

// To remove a product:
// remove_from_cart($conn, $product_id);

// The $conn object would be passed from your PHP script to the HTML page to handle the form submission and display the cart.

// --- Database setup (simplified - you'll likely want to use a database migration tool) ---
// CREATE TABLE products (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     name VARCHAR(255) NOT NULL,
//     price DECIMAL(10, 2) NOT NULL
// );
//
// CREATE TABLE cart (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     product_id INT NOT NULL,
//     quantity INT NOT NULL,
//     FOREIGN KEY (product_id) REFERENCES products(id)
// );
?>


<?php

// Initialize order data (replace with database interaction in a real application)
$order = array(
    'customer_name' => '',
    'items' => array(),
    'total_amount' => 0.00
);

// Handle form submission (if you have a form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get form data (assuming form fields are named accordingly)
    $order['customer_name'] = $_POST['customer_name'];

    // Process items (example - you'd likely read from a database)
    $items = array(
        array('name' => 'Product A', 'quantity' => $_POST['quantity_a'], 'price' => 25.00),
        array('name' => 'Product B', 'quantity' => $_POST['quantity_b'], 'price' => 15.00)
    );

    // Update the order items
    $order['items'] = $items;

    // Calculate the total amount
    $order['total_amount'] = 0.00;
    foreach ($order['items'] as $item) {
        $order['total_amount'] += $item['quantity'] * $item['price'];
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Order</title>
</head>
<body>

<h1>Purchase Order</h1>

<?php if (empty($order['customer_name'])) { ?>
    <p>Please enter your name to create a purchase order.</p>
    <form method="post" action="purchase.php">
        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" value="<?php echo isset($_POST['customer_name']) ? htmlspecialchars($_POST['customer_name']) : ''; ?>">
        <button type="submit">Create Order</button>
    </form>
<?php } else { ?>

    <h2>Order Details</h2>
    <p>Customer Name: <?php echo htmlspecialchars($order['customer_name']); ?></p>

    <h3>Items:</h3>
    <?php
    foreach ($order['items'] as $item) {
        echo "<ul><li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li></ul>";
    }
    ?>

    <p>Total Amount: $<?php echo number_format($order['total_amount'], 2); ?></p>
<?php } ?>

</body>
</html>


<?php

// --- Configuration ---
$cart = array(); // Array to store items in the cart
$product_data = array(
  "product1" => array("name" => "Laptop", "price" => 1200),
  "product2" => array("name" => "Mouse", "price" => 25),
  "product3" => array("name" => "Keyboard", "price" => 75),
  "product4" => array("name" => "Monitor", "price" => 300)
);

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param int $quantity The quantity to add (default is 1).
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($product_data[$product_id])) {
    $product = $product_data[$product_id];
    $cart[] = array(
      "product_id" => $product_id,
      "name" => $product["name"],
      "price" => $product["price"],
      "quantity" => $quantity
    );
    echo "<p>Added " . $quantity . " " . $product["name"] . " to your cart.</p>";
  } else {
    echo "<p>Product with ID '$product_id' not found.</p>";
  }
}

/**
 * Displays the cart contents.
 */
function displayCart() {
  echo "<h2>Your Shopping Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart as $item) {
      echo "<li>" . $item["name"] . " - $" . $item["price"] . " x " . $item["quantity"] . " = $" . ($item["price"] * $item["quantity"]) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $cart)) . "</p>";
  }
}


/**
 * Handles the purchase process.
 * (Simplified for demonstration purposes)
 */
function processPurchase() {
  if (empty($cart)) {
    echo "<p>Your cart is empty.  You cannot purchase anything.</p>";
  } else {
    echo "<h2>Processing Your Order</h2>";
    echo "<p>Thank you for your order!</p>";
    // In a real application, you would:
    // 1.  Validate the order details (e.g., payment information).
    // 2.  Send an email confirmation to the customer.
    // 3.  Update inventory.
    // 4.  Remove items from the cart.

    // Clear the cart after purchase
    $cart = array();
    echo "<p>Your cart has been emptied.</p>";
  }
}


// --- Main execution ---

// Example usage:
if (isset($_GET['add_to_cart'])) {
  $product_id = $_GET['add_to_cart'];
  addToCart($product_id);
}

if (isset($_GET['purchase'])) {
  processPurchase();
}

// Display the cart
displayCart();

?>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_username = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Sanitize and validate input
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);
    $customer_name = trim($_POST["customer_name"]);
    $customer_email = trim($_POST["customer_email"]);


    // Basic validation
    if (empty($product_name) || empty($quantity) || empty($price) || empty($customer_name) || empty($customer_email)) {
        $error_message = "Please fill in all fields.";
    } elseif ($quantity <= 0 || $price <= 0) {
        $error_message = "Quantity and Price must be greater than zero.";
    } else {
        // Construct the SQL query
        $sql = "INSERT INTO purchases (product_name, quantity, price, customer_name, customer_email)
                VALUES ('$product_name', $quantity, $price, '$customer_name', '$customer_email')";

        // Execute the query
        if (mysqli_query($db_connection, $sql)) {
            $success_message = "Purchase successful! Thank you, $customer_name, for your order.";
        } else {
            $error_message = "Error: " . mysqli_error($db_connection);
        }
    }
} else {
    // If the form hasn't been submitted, initialize the form data
    $product_name = "";
    $quantity = 0;
    $price = 0.0;
    $customer_name = "";
    $customer_email = "";
    $error_message = "";
    $success_message = "";
}


// Connect to the database
$db_connection = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}

// ---  HTML Form for the Purchase ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

    <h1>Place an Order</h1>

    <?php if (isset($error_message)): ?>
        <p style="color: red;"><?php echo $error_message; ?></p>
    <?php endif; ?>

    <?php if (isset($success_message)): ?>
        <p style="color: green;"><?php echo $success_message; ?></p>
    <?php endif; ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name" value="<?php echo htmlspecialchars($product_name); ?>">
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="<?php echo htmlspecialchars($quantity); ?>">
        <br><br>

        <label for="price">Price:</label>
        <input type="number" step="0.01" id="price" name="price" value="<?php echo htmlspecialchars($price); ?>">
        <br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" value="<?php echo htmlspecialchars($customer_name); ?>">
        <br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" value="<?php echo htmlspecialchars($customer_email); ?>">
        <br><br>

        <button type="submit">Place Order</button>
    </form>

    <br><br>
    <a href="index.php">Return to Home</a>

</body>
</html>


<?php

// Database connection details (Replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (Important for security)
  $name = $_POST["name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"]; // Assuming price is already in a numeric format

  if (empty($name) || empty($quantity) || empty($price)) {
    $error = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } elseif (!is_numeric($price) || $price <= 0) {
    $error = "Price must be a positive number.";
  } else {
    // Process the purchase
    // 1. Insert data into the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    $sql = "INSERT INTO purchases (name, quantity, price) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql); // Use prepared statement for security
    $stmt->bind_param("sii", $name, $quantity, $price); // s = string, i = integer
    if ($stmt->execute()) {
      $success = "Purchase successful! Order ID: " . $conn->insert_id;
    } else {
      $error = "Purchase failed: " . $stmt->error;
    }

    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Item</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Item Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per Item:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Purchase">
  </form>

</body>
</html>


<?php

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate the input (Important!)
    $product_name = trim($_POST["product_name"]); // Remove whitespace
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);
    $customer_name = trim($_POST["customer_name"]);

    // Basic validation
    if (empty($product_name) || empty($quantity) || empty($price) || empty($customer_name)) {
        echo "Error: All fields are required.";
    } elseif ($quantity <= 0 || $price <= 0) {
        echo "Error: Quantity and Price must be greater than zero.";
    } else {
        // Calculate the total amount
        $total_amount = $quantity * $price;

        // Display the purchase information
        echo "<h2>Purchase Order Details</h2>";
        echo "<p>Product Name: " . htmlspecialchars($product_name) . "</p>";
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Price per Item: " . $price . "</p>";
        echo "<p>Total Amount: $" . $total_amount . "</p>";
        echo "<p>Customer Name: " . htmlspecialchars($customer_name) . "</p>";

        // In a real application, you would save this data to a database here.
        // For example:
        // $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        // $stmt = $db->prepare("INSERT INTO purchases (product_name, quantity, price, customer_name, total_amount) VALUES (:product_name, :quantity, :price, :customer_name, :total_amount)");
        // $stmt->bindParam(':product_name', $product_name);
        // $stmt->bindParam(':quantity', $quantity);
        // $stmt->bindParam(':price', $price);
        // $stmt->bindParam(':customer_name', $customer_name);
        // $stmt->bindParam(':total_amount', $total_amount);
        // $stmt->execute();
    }
} else {
    // If the form wasn't submitted, show the form again
    echo "<h2>Purchase Order</h2>";
    echo "<form action='process_purchase.php' method='post'>";
    echo "<label for='product_name'>Product Name:</label>";
    echo "<input type='text' id='product_name' name='product_name' required><br><br>";

    echo "<label for='quantity'>Quantity:</label>";
    echo "<input type='number' id='quantity' name='quantity' required><br><br>";

    echo "<label for='price'>Price per Item:</label>";
    echo "<input type='number' id='price' name='price' required><br><br>";

    echo "<label for='customer_name'>Customer Name:</label>";
    echo "<input type='text' id='customer_name' name='customer_name' required><br><br>";

    echo "<input type='submit' value='Place Order'>";
    echo "</form>";
}
?>


<?php
session_start();

// Initialize cart if not already set
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity,
            'item_count' => 1
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        $_SESSION['cart'][$product_id]['item_count'] = count($_SESSION['cart'][$product_id]);
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update quantity
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
        $_SESSION['cart'][$product_id]['item_count'] = count($_SESSION['cart'][$product_id]);
    }
}


// Handle adding to cart (GET request)
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['add_to_cart'])) {
    $product_id = $_GET['add_to_cart'];
    $name = "Product " . $product_id; // You'd likely get this from a product ID
    $price = 10.00; // Example price
    add_to_cart($product_id, $name, $price);
}

// Handle removing an item
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    remove_from_cart($product_id);
}

// Handle updating quantity
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['update_quantity'])) {
    $product_id = $_GET['update_quantity'];
    $new_quantity = intval($_GET['quantity']); // Ensure it's an integer
    update_quantity($product_id, $new_quantity);
}


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";

$total = 0;

foreach ($_SESSION['cart'] as $item_id => $product_info) {
    echo "<li>";
    echo "<strong>" . $product_info['name'] . "</strong> - $" . $product_info['price'] . " ";
    echo "Quantity: " . $product_info['quantity'];
    echo "<form method='get' action='cart.php'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='number' name='quantity' value='" . $product_info['quantity'] . "' min='1'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
    $total += $product_info['price'] * $product_info['quantity'];
}

echo "</ul>";
echo "<p><strong>Total: $" . $total . "</strong></p>";

// Empty cart
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php
// This file would typically fetch product information from a database, API, etc.
// For this example, we'll just simulate some product data.

$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Hat', 'price' => 15.00],
];

// Example:  Display a product by ID
if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];
    if (isset($products[$product_id])) {
        echo "<h2>Product Details</h2>";
        echo "<strong>" . $products[$product_id]['name'] . "</strong> - $" . $products[$product_id]['price'];
    } else {
        echo "<p>Product not found.</p>";
    }
}
?>


<?php
// In a real application, this would handle payment processing, order confirmation, etc.
// This is a simplified example.
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.  Nothing to checkout.</p>";
} else {
    echo "<h2>Checkout</h2>";
    echo "<p>Please proceed to payment.</p>";
    // Add your payment integration logic here.
}
?>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize input
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $price = filter_input(INPUT_POST, "price", FILTER_VALIDATE_FLOAT);

  // Check for required fields
  if (empty($name) || empty($quantity) || empty($price)) {
    $error = "Please fill in all fields.";
  } else if ($quantity <= 0 || $price <= 0) {
    $error = "Quantity and Price must be greater than zero.";
  } else {
    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL query
    $sql = "INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sii", $name, $quantity, $price);

    // Execute the query
    if ($stmt->execute()) {
      $success = "Product added successfully!";
    } else {
      $error = "Error adding product: " . $stmt->error;
    }

    // Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Add Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" required>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required>

    <button type="submit">Add to Cart</button>
  </form>

  <a href="cart.php">View Cart</a> <!-- Link to your cart page -->


</body>
</html>


<?php

// --- Database Configuration (Replace with your actual database details) ---
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_user";
$db_password = "your_password";
// --- End Database Configuration ---


// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and Validate Input
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $total_price = filter_input(INPUT_POST, "total_price", FILTER_VALIDATE_FLOAT);


  // Validate inputs -  Crucial for security
  if (empty($name) || empty($email) || empty($quantity) || empty($total_price)) {
    $error_message = "Please fill in all fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error_message = "Invalid email format.";
  } elseif ($quantity <= 0) {
    $error_message = "Quantity must be greater than zero.";
  } elseif ($total_price <= 0) {
    $error_message = "Total price must be greater than zero.";
  } else {
    // Simulate a product price (replace with your actual product price logic)
    $product_price = 25.00; // Example price

    // Calculate the total price
    $order_total = $quantity * $product_price;

    // ---  Data Handling ---
    $name = htmlspecialchars($name);  //Escape HTML characters for security
    $email = filter_var($email, FILTER_SANITIZE_EMAIL); //Sanitize again for extra safety

    // ---  Database Interaction ---
    try {
      // Connect to the database
      $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
      $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

      // Prepare the SQL statement
      $stmt = $pdo->prepare("INSERT INTO orders (name, email, quantity, total_price) VALUES (:name, :email, :quantity, :total_price)");

      // Bind parameters
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->bindParam(':total_price', $total_price);

      // Execute the statement
      $stmt->execute();

      // Display success message
      echo "<p style='color:green;'>Order placed successfully! Thank you, " . htmlspecialchars($name) . ".</p>";

    } catch (PDOException $e) {
      // Handle database errors
      echo "<p style='color:red;'>Database error: " . $e->getMessage() . "</p>";
    }
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error_message)) {
    echo "<p style='color:red;'>$error_message</p>";
  } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" max="10"><br><br>

    <label for="total_price">Total Price:</label>
    <input type="number" id="total_price" name="total_price" step="0.01" min="1" max="100"><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'shopping_cart';
$dbUser = 'your_user';
$dbPass = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($userId, $productId, $quantity) {
    $conn = connectToDatabase();

    // Check if the user already has an item in the cart for this product
    $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("is", $userId, $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Item already exists, update the quantity
        $sql = "UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?";
        if ($conn->query($sql) === TRUE) {
            echo "Cart updated successfully!";
        } else {
            echo "Error updating cart: " . $conn->error;
        }
    } else {
        // Item not in cart, add it
        $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
        if ($conn->query($sql) === TRUE) {
            echo "Item added to cart successfully!";
        } else {
            echo "Error adding item to cart: " . $conn->error;
        }
    }

    $stmt->close();
    $conn->close();
}

// Function to view the cart
function viewCart($userId) {
    $conn = connectToDatabase();

    $sql = "SELECT p.product_name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = ? ";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        echo "<h2>Your Shopping Cart</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

        while ($row = $result->fetch_assoc()) {
            $total = $row['price'] * $row['quantity'];
            echo "<tr>";
            echo "<td>" . $row['product_name'] . "</td>";
            echo "<td>" . $row['price'] . "</td>";
            echo "<td>" . $row['quantity'] . "</td>";
            echo "<td>" . $total . "</td>";
            echo "</tr>";
        }

        echo "</table>";
    } else {
        echo "<p>Your cart is empty.</p>";
    }

    $stmt->close();
    $conn->close();
}

// Function to remove an item from the cart
function removeFromCart($productId, $userId) {
    $conn = connectToDatabase();

    $sql = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
    if ($conn->query($sql) === TRUE) {
        echo "Item removed from cart successfully!";
    } else {
        echo "Error removing item from cart: " . $conn->error;
    }

    $conn->close();
}

// Example Usage (This would typically be called from a form or other input)

// Simulate a user ID
$userId = 1; // Replace with the actual user ID

// Add an item to the cart
//addToCart($userId, 1, 2); // Add product 1 in quantity 2

// View the cart
viewCart($userId);

// Remove an item from the cart
//removeFromCart(1, $userId); // Remove product 1 from user 1's cart
?>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate Input (Crucial for security - more details below)
  $product_name = $_POST["product_name"];
  $quantity = (int)$_POST["quantity"]; // Cast to integer to ensure valid quantity
  $price = (float)$_POST["price"]; // Cast to float to handle decimal values

  //  Basic Validation - Enhance this significantly in a real application
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error_message = "Please fill in all fields and enter valid values.";
  } else {
    // Process the Order (Simulated)
    $order_id = 1; // Simple order ID, use a real database for actual IDs
    $total_amount = $quantity * $price;

    //  Simulate adding the order to a database (Replace with your database interaction)
    $sql = "INSERT INTO orders (product_name, quantity, price, order_id) VALUES ('$product_name', $quantity, $price, $order_id)";

    //  In a real application, you'd use a database connection (mysqli, PDO, etc.)
    //  For example:
    //  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    //  if ($conn->connect_error) {
    //    die("Connection failed: " . $conn->connect_error);
    //  }
    //  $conn->query($sql);
    //  $conn->close();


    $order_confirmation = "Order placed successfully! Product: $product_name, Quantity: $quantity, Total: $total_amount";

  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error_message)): ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php endif; ?>

  <?php if (isset($order_confirmation)): ?>
    <p style="color: green;"><?php echo $order_confirmation; ?></p>
  <?php endif; ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
  </form>

  <p>Existing Orders:</p>
  <?php
  //  Example: Display existing orders (replace with your database query)
  //  This is just a placeholder, connect to your database and query.
  $sql = "SELECT * FROM orders";
  $result = mysqli_query($conn, $sql); // Replace $conn with your database connection

  if (mysqli_num_rows($result) > 0) {
    while($row = mysqli_fetch_assoc($result)) {
        echo "<p>Order ID: " . $row["order_id"] . ", Product: " . $row["product_name"] . ", Quantity: " . $row["quantity"] . ", Price: " . $row["price"] . "</p>";
    }
  } else {
    echo "<p>No orders found.</p>";
  }
  ?>

</body>
</html>


<?php

// Database Connection (Replace with your database credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $order_data  Array containing order details (e.g., product_id, quantity, user_id).
 * @return int|string  The order ID on success, or an error message on failure.
 */
function processPurchase(array $order_data) {
  // Validate Input - Crucial for security!
  if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['user_id'])) {
    return "Error: Missing order details.";
  }

  // Validate product_id and quantity
  $product_id = (int)$order_data['product_id'];
  $quantity = (int)$order_data['quantity'];

  if ($quantity <= 0) {
    return "Error: Invalid quantity.";
  }

  // Check if the product exists
  $product_query = "SELECT id, name, price FROM products WHERE id = $product_id";
  $product_result = $conn->query($product_query);

  if (!$product_result->num_rows) {
    return "Error: Product not found.";
  }

  $product = $product_result->fetch_assoc();

  // Calculate the total price
  $total_price = $product['price'] * $quantity;

  // Prepare the SQL statement
  $sql = "INSERT INTO orders (product_id, quantity, user_id, total_price, order_date)
          VALUES ($product_id, $quantity, $order_data['user_id'], $total_price, NOW())";

  // Execute the SQL statement
  if ($conn->query($sql) === TRUE) {
    // Optionally, you can update inventory here
    // Example:
    // $update_inventory_query = "UPDATE products SET stock = stock - $quantity WHERE id = $product_id";
    // $conn->query($update_inventory_query);
    return $conn->insert_id; // Return the newly created order ID
  } else {
    return "Error: " . $conn->error;
  }
}



// --- Example Usage ---

// Simulate receiving order data (e.g., from a form submission)
$order = [
  'product_id' => 1,
  'quantity' => 2,
  'user_id' => 123  // Replace with the actual user ID
];

// Process the purchase
$order_id = processPurchase($order);

// Display the result
if ($order_id) {
  echo "Purchase successful! Order ID: " . $order_id;
} else {
  echo "Purchase failed: " . $order_id;
}

// Close the database connection (important!)
$conn->close();

?>


<?php

// Data Storage (Replace with a real database in a production environment)
$cart = [];
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
    4 => ['name' => 'Monitor', 'price' => 300],
];

// Function to add to cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($products[$product_id])) {
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['name' => $products[$product_id]['name'], 'price' => $products[$product_id]['price'], 'quantity' => $quantity];
        }
    } else {
        echo "Product ID $product_id not found.";
    }
}

// Function to display the cart
function displayCart()
{
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        $product_name = $item['name'];
        $product_price = $item['price'];
        $quantity = $item['quantity'];
        $total_price = $product_price * $quantity;

        echo "<li>" . $product_name . " - $" . $product_price . " x " . $quantity . " = $" . $total_price . "</li>";
    }
    echo "</ul>";

    // Calculate total amount
    $totalAmount = 0;
    foreach ($cart as $item) {
        $totalAmount += $item['price'] * $item['quantity'];
    }
    echo "<p><b>Total Amount: $" . number_format($totalAmount, 2) . "</p>";
}

// Function to handle the purchase (Simulated)
function processPurchase()
{
    if (empty($cart)) {
        echo "<p>Your cart is empty.  Nothing to purchase.</p>";
        return;
    }

    echo "<h2>Order Confirmation</h2>";
    echo "<p>Thank you for your purchase!</p>";

    // Simulate order processing
    echo "<p>Your order details:</p>";
    foreach ($cart as $product_id => $item) {
        $product_name = $item['name'];
        $product_price = $item['price'];
        $quantity = $item['quantity'];
        $total_price = $product_price * $quantity;

        echo "<p>" . $product_name . " x " . $quantity . " = $" . $total_price . "</p>";
    }

    // Clear the cart after purchase
    $cart = [];
    echo "<p>Your cart has been emptied.</p>";
}

// ---------------------  Handling User Input ---------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check for "add_to_cart" button
    if (isset($_POST["add_to_cart"])) {
        $product_id = $_POST["product_id"];
        $quantity = isset($_POST["quantity"]) ? (int)$_POST["quantity"] : 1;
        addToCart($product_id, $quantity);
    }

    // Check for "purchase" button
    if (isset($_POST["purchase"])) {
        processPurchase();
    }
}

// ---------------------  Display the Form ---------------------

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Our Products</h1>

<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " <form method='post'><input type='hidden' name='product_id' value='" . $id . "'>";
        echo "<label for='quantity_" . $id . "'>Quantity:</label> <input type='number' id='quantity_" . $id . "' value='1' min='1' name='quantity'><input type='submit' value='Add to Cart'>";
        echo "</form></li>";
    }
    ?>
</ul>

<?php
displayCart(); // Display the current cart contents
?>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase form submission
function handlePurchaseForm($product_id, $quantity, $customer_name, $customer_email) {
    $conn = connectToDatabase();

    // Prepare the SQL query
    $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) 
            VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        echo "New record created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }

    $conn->close();
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate input (Important for security - add more validation as needed)
    $product_id = isset($_POST['product_id']) ? $_POST['product_id'] : '';
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 0; // Convert to integer
    $customer_name = isset($_POST['customer_name']) ? $_POST['customer_name'] : '';
    $customer_email = isset($_POST['customer_email']) ? $_POST['customer_email'] : '';

    // Perform validation (example - check if product_id is valid)
    if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
        echo "<p style='color: red;'>Please fill in all fields.</p>";
    } else {
        // Call the function to handle the purchase
        handlePurchaseForm($product_id, $quantity, $customer_name, $customer_email);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// Sample product data (replace with your database connection and product data)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80],
];

// Function to handle the purchase process
function handlePurchase($cart) {
    $total = 0;

    // Calculate the total price
    foreach ($cart as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            $total += $product['price'] * $quantity;
        } else {
            // Handle invalid product ID (e.g., display an error)
            echo "<p>Error: Product ID " . $product_id . " not found.</p>";
            return false; // Stop the purchase
        }
    }

    // Display the purchase details
    echo "<h2>Purchase Summary</h2>";
    echo "<h3>Items:</h3>";
    foreach ($cart as $product_id => $quantity) {
        echo "<li>" . $products[$product_id]['name'] . " - Quantity: " . $quantity . " - Price: $" . $products[$product_id]['price'] * $quantity . "</li>";
    }
    echo "<p><b>Total: $" . $total . "</b></p>";

    //  In a real application, you would:
    //  1. Process the payment (e.g., using PayPal, Stripe)
    //  2. Send a confirmation email to the customer
    //  3. Update the inventory

    return true; // Purchase complete
}


// Example Usage (Simulating the purchase form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart = [];

    // Validate and process the cart items
    if (isset($_POST['product1_quantity']) && is_numeric($_POST['product1_quantity']) && $_POST['product1_quantity'] > 0) {
        $cart[] = 1 => $_POST['product1_quantity'];
    }
    if (isset($_POST['product2_quantity']) && is_numeric($_POST['product2_quantity']) && $_POST['product2_quantity'] > 0) {
        $cart[] = 2 => $_POST['product2_quantity'];
    }
    if (isset($_POST['product3_quantity']) && is_numeric($_POST['product3_quantity']) && $_POST['product3_quantity'] > 0) {
        $cart[] = 3 => $_POST['product3_quantity'];
    }


    if (empty($cart)) {
        echo "<p>No items selected.</p>";
    } else {
        handlePurchase($cart);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Shop</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <h2>Select Products</h2>

    <h3>T-Shirt (ID: 1) - Price: $20</h3>
    <label for="product1_quantity">Quantity:</label>
    <input type="number" id="product1_quantity" name="product1_quantity" value="0" min="0">

    <h3>Jeans (ID: 2) - Price: $50</h3>
    <label for="product2_quantity">Quantity:</label>
    <input type="number" id="product2_quantity" name="product2_quantity" value="0" min="0">

    <h3>Sneakers (ID: 3) - Price: $80</h3>
    <label for="product3_quantity">Quantity:</label>
    <input type="number" id="product3_quantity" name="product3_quantity" value="0" min="0">

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection (Replace with your actual database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle the purchase process
function processPurchase($cart, $customerName, $customerEmail, $payment_method) {
  // 1. Validate Cart
  if (empty($cart)) {
    return "Error: Cart is empty. Please add items before purchasing.";
  }

  // 2. Calculate Total Amount
  $totalAmount = 0;
  foreach ($cart as $item => $quantity) {
    // Assume you have a product table with price
    // Replace 'products' and 'price' with your actual table and column names
    $product = getProduct($item); // Function to retrieve product details from your database
    if ($product) {
      $totalAmount += $product['price'] * $quantity;
    } else {
      return "Error: Product '$item' not found.";
    }
  }

  // 3. Database Interaction (Create Order)
  $order_id = generateOrderID(); // Function to generate a unique order ID
  $sql = "INSERT INTO orders (customer_name, customer_email, order_date, total_amount, order_id)
          VALUES ('$customerName', '$customerEmail', NOW(), $totalAmount, '$order_id')";

  if ($conn->query($sql) === TRUE) {
    $order_id = $conn->insert_id; // Get the newly inserted order ID
    echo "Order placed successfully! Order ID: $order_id";

    // 4. Update Cart (Mark items as purchased)
    foreach ($cart as $item => $quantity) {
      $update_sql = "UPDATE products SET quantity_in_stock = quantity_in_stock - $quantity WHERE product_id = '$item'";
      if ($conn->query($update_sql) === TRUE) {
        // Optionally, you can log this update
      } else {
        echo "Error updating product quantity for item '$item'.";
      }
    }
  } else {
    echo "Error: " . $conn->error;
  }
}


// --- Helper Functions ---

// Function to get product details from the database
function getProduct($product_id) {
  // Replace 'products' and 'product_id' with your actual table and column names
  $sql = "SELECT * FROM products WHERE product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $product = $result->fetch_assoc();
    return $product;
  } else {
    return null;
  }
}

// Function to generate a unique order ID
function generateOrderID() {
  //  You can use UUID, a sequential number, or any other unique ID generation method
  return uniqid(); // Using uniqid for simplicity
}

// --- Example Usage (Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get cart data from the form
  $cart = $_POST['cart'];
  $customerName = $_POST['customer_name'];
  $customerEmail = $_POST['customer_email'];
  $payment_method = $_POST['payment_method']; // You can add payment gateway integration here

  // Process the purchase
  processPurchase($cart, $customerName, $customerEmail, $payment_method);
}


// --- HTML Form (For User Input) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Online Store - Purchase</title>
</head>
<body>

  <h1>Online Store - Purchase</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="cart">Select Items to Purchase (Product IDs):</label>
    <input type="text" id="cart" name="cart" value="<?php echo htmlspecialchars($_POST['cart'] ?? ''); ?>" placeholder="Product IDs (comma-separated)">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required>
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required>
    <br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
      <option value="paypal">PayPal</option>
      <option value="stripe">Stripe</option>
    </select>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase
function processPurchase($cart, $customer_name, $customer_email, $payment_method) {
    global $conn;

    // Sanitize input (VERY IMPORTANT - prevent SQL injection)
    $customer_name = $conn->real_escape_string($customer_name);
    $customer_email = $conn->real_escape_string($customer_email);
    $payment_method = $conn->real_escape_string($payment_method);


    // Insert order into the database
    $sql_order = "INSERT INTO orders (customer_name, customer_email, payment_method) VALUES ('" . $customer_name . "', '" . $customer_email . "', '" . $payment_method . "')";

    if ($conn->query($sql_order) === TRUE) {
        $order_id = $conn->insert_id; // Get the ID of the newly inserted order

        // Insert order items into the database
        foreach ($cart as $item_id => $quantity) {
            $sql_item = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('" . $order_id . "', '" . $item_id . "', '" . $quantity . "')";

            if ($conn->query($sql_item) === TRUE) {
                echo "Order item added successfully.";
            } else {
                echo "Error adding order item: " . $conn->error;
            }
        }

        echo "<br>Order placed successfully! Order ID: " . $order_id;
    } else {
        echo "Error inserting order: " . $conn->error;
    }
}

// --------------------  Example Usage  --------------------
// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart data (this would typically come from a session or a form)
    $cart = array(
        "product1" => 2, // Product ID 1, Quantity 2
        "product2" => 1  // Product ID 2, Quantity 1
    );

    // Get customer details from the form
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];


    // Call the processPurchase function
    processPurchase($cart, $customer_name, $customer_email, $payment_method);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method" required>
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
        <option value="stripe">Stripe</option>
    </select><br><br>


    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php
session_start();

// Configuration
$items = [
    ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Cart functions
function addItemToCart($productId, $cart) {
    if (array_key_exists($productId, $cart)) {
        $cart[$productId]['quantity'] = $cart[$productId]['quantity'] + 1;
    } else {
        $cart[$productId] = ['quantity' => 1];
    }
    
    // Save the cart to session
    $_SESSION['cart'] = $cart;
}

function removeItemFromCart($productId, &$cart) {
    if (array_key_exists($productId, $cart)) {
        unset($cart[$productId]);
    }
}

function updateQuantity($productId, $quantity, &$cart) {
    if (array_key_exists($productId, $cart)) {
        $cart[$productId]['quantity'] = $quantity;
    }
}

function getCart() {
    return $_SESSION['cart'] ?? []; // Return empty array if cart is not initialized
}

function calculateCartTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Handle Add to Cart Request
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Cast to integer for safety
    addItemToCart($productId, getCart());
}

// Handle Remove from Cart Request
if (isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id'];
    removeItemFromCart($productId, getCart());
}

// Handle Update Quantity Request
if (isset($_POST['update_quantity'])) {
    $productId = (int)$_POST['product_id'];
    $newQuantity = (int)$_POST['quantity'];
    updateQuantity($productId, $newQuantity, getCart());
}


// Display the Cart
$cart = getCart();
$total = calculateCartTotal($cart);
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body {
            font-family: sans-serif;
        }
        .cart-item {
            margin-bottom: 10px;
            border: 1px solid #ccc;
            padding: 10px;
        }
        .cart-item img {
            max-width: 100px;
            height: auto;
            float: left;
            margin-right: 10px;
        }
        .cart-item p {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else { ?>
        <table class="cart-items">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($cart as $item) { ?>
                    <tr class="cart-item">
                        <td><img src="placeholder.jpg" alt="<?php echo $item['name']; ?>" width="50"> <?php echo $item['name']; ?></td>  <!-- Replace placeholder.jpg with actual image URL -->
                        <td>$<?php echo number_format($item['price'], 2); ?></td>
                        <td><?php echo $item['quantity']; ?></td>
                        <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
                        <td>
                            <form method="post">
                                <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                                <button type="submit" name="update_quantity">Update</button>
                            </form>
                            <form method="post">
                                <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                                <button type="submit" name="remove_from_cart">Remove</button>
                            </form>
                        </td>
                    </tr>
                <?php } ?>
            </tbody>
        </table>

        <p><strong>Total:</strong> $<?php echo number_format($total, 2); ?></p>
    <?php } ?>

    <hr>

    <h2>Add to Cart</h2>
    <?php foreach ($items as $item) { ?>
        <form method="post">
            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
            <button type="submit" name="add_to_cart">Add to Cart</button>
        </form>
    <?php } ?>

</body>
</html>


<?php

// Database Connection (Replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --------------------- Function Definitions ---------------------

// Function to add a product to the cart
function add_to_cart($conn, $product_id, $quantity) {
  // Check if product exists (basic check - improve for production)
  $sql = "SELECT id, name, price FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $product = $result->fetch_assoc();
    $name = $product['name'];
    $price = $product['price'];

    // Construct the cart item string
    $cart_item = "('" . $product_id . "', " . $quantity . ", '" . $name . "', " . $price . ")";

    //  SQL injection prevention - Prepare statement
    $sql = "INSERT INTO cart (product_id, quantity, name, price) VALUES " . $cart_item;

    if ($conn->query($sql) === TRUE) {
      return true;
    } else {
      error_log("Error adding to cart: " . $conn->error);
      return false;
    }
  } else {
    error_log("Product ID " . $product_id . " not found.");
    return false;
  }

  $stmt->close();
}


// Function to update the quantity of a product in the cart
function update_cart_quantity($conn, $product_id, $new_quantity) {
  // Check if product exists in the cart (basic check - improve for production)
  $sql = "SELECT id FROM cart WHERE product_id = ? AND id > 0";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    // Update the quantity
    $sql = "UPDATE cart SET quantity = ? WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("is", $new_quantity, $product_id);
    $stmt->execute();

    if ($stmt->affected_rows > 0) {
      return true;
    } else {
      error_log("Error updating cart quantity.");
      return false;
    }
  } else {
    error_log("Product ID " . $product_id . " not found in cart.");
    return false;
  }

  $stmt->close();
}



// Function to remove a product from the cart
function remove_from_cart($conn, $product_id) {
    $sql = "DELETE FROM cart WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->affected_rows > 0;
}



// Function to get the cart contents
function get_cart_contents($conn) {
  $sql = "SELECT id, product_id, quantity, name, price FROM cart";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $cart_items = array();
    while($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
    return $cart_items;
  } else {
    return array(); // Return an empty array if the cart is empty
  }
}


// --------------------- Example Usage ---------------------

// ---  Simulate a purchase (This is just an example) ---
$product_id = 1;  // Example product ID
$quantity = 2;

if (add_to_cart($conn, $product_id, $quantity)) {
  echo "Product added to cart successfully!";
} else {
  echo "Error adding product to cart.";
}

// Get and display the cart contents
$cart = get_cart_contents($conn);

if (count($cart) > 0) {
  echo "<br><b>Your Cart:</b><br>";
  foreach ($cart as $item) {
    echo "ID: " . $item['id'] . "<br>";
    echo "Product ID: " . $item['product_id'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Name: " . $item['name'] . "<br>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "---<br>";
  }
} else {
  echo "<br>Your cart is empty.";
}



// --- Update quantity example ---
// $update_id = 1;
// if (update_cart_quantity($conn, $product_id, 3)) {
//     echo "<br>Quantity updated successfully";
// } else {
//     echo "<br>Error updating quantity";
// }


// --- Remove from cart example ---
// if(remove_from_cart($conn, $product_id)) {
//   echo "<br>Product removed from cart";
// }



// ---------------------  Database Setup (Create Tables) ---------------------
//  This code is to create the database and tables.  Run this *once*
//  to set up your database.  It's not part of the purchase functionality.

// $sql = "CREATE TABLE products (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     name VARCHAR(255) NOT NULL,
//     price DECIMAL(10,2) NOT NULL
// )";

// if (!$conn->query($sql)) {
//   die("Error creating products table: " . $conn->error);
// }

// $sql = "CREATE TABLE cart (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     product_id INT NOT NULL,
//     quantity INT NOT NULL,
//     name VARCHAR(255) NOT NULL,
//     price DECIMAL(10,2) NOT NULL
// )";

// if (!$conn->query($sql)) {
//   die("Error creating cart table: " . $conn->error);
// }


?>


<?php

// Database connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_password = "your_password";

// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase
function handlePurchase($cart, $user_id) {
    // 1. Validate Cart and User

    // Check if the cart is empty
    if (empty($cart)) {
        return "Cart is empty.  Cannot complete purchase.";
    }

    // In a real application, you'd authenticate the user and verify they have an active account.
    // This is a placeholder for demonstration purposes.  Replace with your authentication logic.
    // In this example, we assume the user exists.
    
    // 2. Create Order Record in Database
    $order_id = $conn->insert("orders",
        array(
            "user_id" => $user_id,
            "order_date" => date("Y-m-d H:i:s")
        )
    );

    if ($order_id === false) {
        return "Error creating order in database.";
    }

    $order_id = $conn->insert_id;

    // 3. Process Order Items
    foreach ($cart as $item_id => $quantity) {
        // Get product details
        $product = $conn->select_one("products", "product_id = " . $item_id);

        if (!$product) {
            return "Product with ID " . $item_id . " not found.";
        }

        // Update inventory (Subtract quantity)
        $conn->query("UPDATE products SET stock = stock - " . $quantity . " WHERE product_id = " . $item_id);

        // Add order item record
        $conn->insert("order_items",
            array(
                "order_id" => $order_id,
                "product_id" => $item_id,
                "quantity" => $quantity,
                "item_price" => $product["price"] // Assuming you have a 'price' column in your products table
            )
        );
    }

    return "Purchase completed successfully! Order ID: " . $order_id;
}

// --- Example Usage ---

// 1. Assume a user ID (Replace with actual user ID)
$userId = 1;

// 2. Assume a cart (This is a placeholder - retrieve from session or database)
$cart = array(
    1 => 2, // Product ID 1, quantity 2
    2 => 1  // Product ID 2, quantity 1
);


// 3. Handle the purchase
$result = handlePurchase($cart, $userId);

// 4. Display the result
echo "<pre>" . print_r($result, true) . "</pre>";

// ---  Database Setup (Example - CREATE TABLE statements) ---

// This is for setting up the database.  Execute these statements in your MySQL database.

// CREATE TABLE users (
//     user_id INT AUTO_INCREMENT PRIMARY KEY,
//     username VARCHAR(255) NOT NULL,
//     password VARCHAR(255) NOT NULL,
//     email VARCHAR(255) NOT NULL
// );

// CREATE TABLE products (
//     product_id INT AUTO_INCREMENT PRIMARY KEY,
//     product_name VARCHAR(255) NOT NULL,
//     description TEXT,
//     price DECIMAL(10, 2) NOT NULL,
//     stock INT NOT NULL DEFAULT 0
// );

// CREATE TABLE orders (
//     order_id INT AUTO_INCREMENT PRIMARY KEY,
//     user_id INT NOT NULL,
//     order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
//     FOREIGN KEY (user_id) REFERENCES users(user_id)
// );

// CREATE TABLE order_items (
//     item_id INT AUTO_INCREMENT PRIMARY KEY,
//     order_id INT NOT NULL,
//     product_id INT NOT NULL,
//     quantity INT NOT NULL,
//     item_price DECIMAL(10, 2) NOT NULL,
//     FOREIGN KEY (order_id) REFERENCES orders(order_id),
//     FOREIGN KEY (product_id) REFERENCES products(product_id)
// );

// Example Insertion (Insert some sample data)
// INSERT INTO users (username, password, email) VALUES ('user1', 'password123', 'user1@example.com');
// INSERT INTO products (product_name, description, price, stock) VALUES ('T-Shirt', 'Cotton T-Shirt', 19.99, 100);
// INSERT INTO products (product_name, description, price, stock) VALUES ('Jeans', 'Denim Jeans', 49.99, 50);


?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    // Handle the database connection error
    echo "Database connection failed: " . $e->getMessage();
    exit;
  }
}

// Function to handle the purchase process
function handlePurchase($cart_id, $payment_method, $shipping_address) {
  // Connect to the database
  $pdo = connectToDatabase();

  // Check if the cart exists
  $stmt = $pdo->prepare("SELECT * FROM carts WHERE id = ?");
  $stmt->execute([$cart_id]);
  $cart = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$cart) {
    echo "Cart not found.";
    return false;
  }

  // Validate cart contents (e.g., check if products in the cart exist)
  // You would ideally perform more thorough validation here.

  // Prepare the order data
  $order_date = date("Y-m-d H:i:s");
  $total_amount = calculateTotalAmount($cart);

  // Insert the order into the orders table
  $stmt = $pdo->prepare(
    "INSERT INTO orders (cart_id, order_date, total_amount, payment_method, shipping_address)
    VALUES (?, ?, ?, ?, ?)"
  );
  $stmt->execute([$cart_id, $order_date, $total_amount, $payment_method, $shipping_address]);

  // Update the cart to mark it as purchased
  $stmt = $pdo->prepare("UPDATE carts SET purchased = 1, order_id = ? WHERE id = ?");
  $stmt->execute([$pdo->lastInsertId(), $cart_id]); // Get the last inserted order ID

  // (Optional) Clear the cart after a successful purchase
  // $stmt = $pdo->prepare("DELETE FROM carts WHERE id = ?");
  // $stmt->execute([$cart_id]);

  echo "Purchase successful! Order ID: " . $pdo->lastInsertId();
  return true;
}


// Function to calculate the total amount of the cart
function calculateTotalAmount($cart) {
  $total = 0;
  foreach ($cart['items'] as $item) {
    $stmt = $pdo->prepare("SELECT price FROM products WHERE id = ?");
    $stmt->execute([$item['product_id']]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);
    $total = $total + ($product['price'] * $item['quantity']);
  }
  return $total;
}


// --- Example Usage (within a form or as part of a larger application) ---

// Get cart ID from URL or form input
$cart_id = isset($_GET['cart_id']) ? $_GET['cart_id'] : null;

if ($cart_id) {
  // Get payment method and shipping address from form inputs
  $payment_method = isset($_POST['payment_method']) ? $_POST['payment_method'] : 'Credit Card';
  $shipping_address = isset($_POST['shipping_address']) ? $_POST['shipping_address'] : 'Default Address';

  // Handle the purchase
  handlePurchase($cart_id, $payment_method, $shipping_address);
} else {
  echo "Invalid cart ID. Please provide a valid cart ID.";
}


// --- Database Setup (Example - Create Tables) ---
// This part is for setting up the database.  Run this *once* to create the tables.
/*
$pdo = connectToDatabase();

$stmt = $pdo->prepare("CREATE TABLE IF NOT EXISTS carts (
  id INT AUTO_INCREMENT PRIMARY KEY,
  purchased BOOLEAN DEFAULT 0,
  order_id INT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)");
$stmt->execute();

$stmt = $pdo->prepare("CREATE TABLE IF NOT EXISTS orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  cart_id INT NOT NULL,
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total_amount DECIMAL(10,2) NOT NULL,
  payment_method VARCHAR(255) NOT NULL,
  shipping_address TEXT NULL,
  FOREIGN KEY (cart_id) REFERENCES carts(id)
)");
$stmt->execute();
*/

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h2>Purchase Functionality</h2>

  <form method="post" action="">
    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
      <option value="Credit Card">Credit Card</option>
      <option value="PayPal">PayPal</option>
      <!-- Add more payment options as needed -->
    </select><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <textarea id="shipping_address" name="shipping_address" rows="4" cols="50"></textarea><br><br>

    <input type="submit" value="Purchase">
  </form>

  <!-- Display cart details (for demonstration - you would fetch this from the database) -->
  <?php
  // Example of displaying cart details (replace with your actual cart retrieval logic)
  // In a real application, you would fetch the cart details from the database.
  $cart = array(
    'items' => array(
      array('product_id' => 1, 'quantity' => 2),
      array('product_id' => 3, 'quantity' => 1)
    )
  );
  echo "<h3>Cart Items:</h3>";
  echo "<ul>";
  foreach ($cart['items'] as $item) {
    echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
  ?>

</body>
</html>


<?php

// Configuration (Database credentials and settings)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_user";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (basic validation - improve this!)
  $name = isset($_POST["name"]) && !empty($_POST["name"]) ? trim($_POST["name"]) : "";
  $email = isset($_POST["email"]) && !empty($_POST["email"]) ? trim($_POST["email"]) : "";
  $quantity = isset($_POST["quantity"]) && is_numeric($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;  // Default to 1 if not provided.
  $product_id = isset($_POST["product_id"]) && is_numeric($_POST["product_id"]) ? intval($_POST["product_id"]) : 0; // Product ID
  $notes = isset($_POST["notes"]) && !empty($_POST["notes"]) ? trim($_POST["notes"]) : "";


  // Database connection
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Prepare the INSERT statement
  $sql = "INSERT INTO orders (name, email, quantity, product_id, notes) VALUES (?, ?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $conn->prepare($sql);

  // Bind the parameters
  $stmt->bind_param("ssii", $name, $email, $quantity, $product_id);

  // Execute the statement
  if ($stmt->execute()) {
    echo "Order placed successfully! Order ID: " . $conn->insert_id;
  } else {
    echo "Error: " . $stmt->error;
  }

  // Close the statement and connection
  $stmt->close();
  $conn->close();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo isset($_POST['name']) ? htmlspecialchars($_POST['name']) : ''; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo isset($_POST['email']) ? htmlspecialchars($_POST["email"]) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; ?>">
    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="<?php echo isset($_POST['product_id']) ? intval($_POST['product_id']) : 0; ?>">
    <br><br>

    <label for="notes">Notes (Optional):</label>
    <textarea id="notes" name="notes"><?php echo isset($_POST['notes']) ? htmlspecialchars($_POST['notes']) : ''; ?></textarea>
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate form input (Important for security!)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]);
    $product_id = intval($_POST["product_id"]); // Assuming product ID is passed

    // Sanitize inputs to prevent XSS and SQL injection
    $name = filter_var($name, FILTER_SANITIZE_STRING);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    $quantity = intval($quantity);
    $product_id = intval($product_id);

    // Check if required fields are filled
    if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
        $error_message = "Please fill in all required fields.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error_message = "Invalid email address.";
    } elseif ($quantity <= 0) {
        $error_message = "Quantity must be greater than zero.";
    }  else {

        // Create a database connection
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare and execute a SQL query (Important for security!)
        $sql = "INSERT INTO purchases (name, email, quantity, product_id) VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ssii", $name, $email, $quantity, $product_id);
        $stmt->execute();

        // Check if the query was successful
        if ($stmt->affected_rows > 0) {
            $success_message = "Purchase successful! Thank you for your order.";
        } else {
            $error_message = "Purchase failed.";
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Make a Purchase</h1>

<?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php } ?>

<?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo isset($quantity) ? intval($quantity) : ''; ?>">
    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="<?php echo isset($product_id) ? intval($product_id) : ''; ?>">
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle adding a purchase to the database
function addPurchase($userId, $productId, $quantity, $totalAmount) {
    $conn = connectToDatabase();

    // Prepare the SQL statement
    $sql = "INSERT INTO purchases (userId, productId, quantity, totalAmount, purchaseDate)
            VALUES (
                '$userId',
                '$productId',
                '$quantity',
                '$totalAmount',
                NOW()
            )";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to retrieve a user's purchases
function getPurchasesByUserId($userId) {
    $conn = connectToDatabase();

    $sql = "SELECT * FROM purchases WHERE userId = '$userId'";
    $result = $conn->query($sql);

    $purchases = array();

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $purchases[] = $row;
        }
    }

    return $purchases;
}



// --- Example Usage (Simulated form submission) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    $userId = $_POST["userId"];
    $productId = $_POST["productId"];
    $quantity = $_POST["quantity"];
    $totalAmount = $_POST["totalAmount"];

    // Validate input (Basic example - enhance this!)
    if (!is_numeric($quantity) || $quantity <= 0) {
        echo "<p>Invalid quantity. Please enter a positive number.</p>";
        exit;
    }

    // Add the purchase to the database
    if (addPurchase($userId, $productId, $quantity, $totalAmount)) {
        echo "<p>Purchase added successfully!</p>";
    } else {
        echo "<p>Error adding purchase.</p>";
    }
}



// --- Displaying Purchases (Example) ---

// Get the user's purchases (replace with your user ID)
$userPurchases = getPurchasesByUserId("123"); // Replace "123" with the actual user ID

// Display the purchases
echo "<h2>Your Purchases:</h2>";
if (count($userPurchases) > 0) {
    echo "<ul>";
    foreach ($userPurchases as $purchase) {
        echo "<li>Product ID: " . $purchase['productId'] . ", Quantity: " . $purchase['quantity'] . ", Total Amount: " . $purchase['totalAmount'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>You have no purchases yet.</p>";
}

?>


function addPurchase($userId, $productId, $quantity, $totalAmount) {
    $conn = connectToDatabase();

    // Prepare the SQL statement
    $sql = "INSERT INTO purchases (userId, productId, quantity, totalAmount, purchaseDate)
            VALUES (?, ?, ?, ?, NOW())";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        die("Error preparing statement: " . $conn->error);
    }

    // Bind the parameters
    $stmt->bind_param("sii", $userId, $productId, $quantity); // 's' for string, 'i' for integer

    // Execute the statement
    if ($stmt->execute() === false) {
        die("Error executing statement: " . $stmt->error);
    }

    $stmt->close();
    return true;
}


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize input
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];

  if (!is_numeric($product_id) || !is_numeric($quantity) || $quantity <= 0) {
    $error = "Invalid input.  Please enter valid product ID and quantity.";
  } else {
    // Prepare the SQL query
    $sql = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind the parameters
    $stmt->bind_param("ii", $product_id, $quantity);

    // Execute the query
    if ($stmt->execute()) {
      $success = "Product added to cart!";
    } else {
      $error = "Error adding product to cart. " . $stmt->error;
    }

    // Close the statement
    $stmt->close();
  }
}

// Function to display the cart (simplified for demonstration)
function displayCart() {
  // Replace this with your actual cart retrieval logic
  $cart_items = getCartItems();

  if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($cart_items as $item) {
      echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
  }
}


//  Example product data (replace with your product database)
$products = [
    1 => ["name" => "Laptop", "price" => 1200],
    2 => ["name" => "Mouse", "price" => 25],
    3 => ["name" => "Keyboard", "price" => 75],
];

//  Database connection  (using PDO for better security)
try {
    $conn = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    die(); // Stop execution if the database connection fails
}

//  Add this to the end of your page to show the purchase form and/or cart.
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Purchase Form -->
  <h2>Add Product to Cart</h2>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <?php
    if (isset($error)) {
      echo "<p style='color: red;'>Error: " . $error . "</p>";
    }
    if (isset($success)) {
      echo "<p style='color: green;'>Success: " . $success . "</p>";
    }

    displayCart(); // Display the cart contents
  ?>

</body>
</html>


<?php

// Configuration (Replace with your actual values)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

$cart = []; // Initialize an empty shopping cart

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart) {
    if (isset($products[$productId])) {
        if ($quantity > 0) {
            $product = $products[$productId];
            $cart[] = ['product_id' => $productId, 'product' => $product, 'quantity' => $quantity];
            echo "Added " . $quantity . " " . $product['name'] . " to your cart. ";
        } else {
            echo "Invalid quantity. Please enter a positive number.";
        }
    } else {
        echo "Product ID " . $productId . " not found.";
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        $product = $products[$item['product_id']];
        $total_price = $product['price'] * $item['quantity'];
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($total_price, 2) . "</li>";
    }
    echo "</ul>";

    // Calculate total cart value
    $totalCartValue = 0;
    foreach ($cart as $item) {
        $product = $products[$item['product_id']];
        $total_price = $product['price'] * $item['quantity'];
        $totalCartValue += $total_price;
    }

    echo "<p><b>Total Cart Value: $" . number_format($totalCartValue, 2) . "</p>";

    // Display checkout link
    echo "<a href='checkout.php'>Proceed to Checkout</a>"; // Replace with your checkout page.
}

// Function to handle checkout (placeholder)
function checkout() {
    echo "<h2>Checkout</h2>";
    echo "<p>Processing your order...</p>";
    // In a real application, you would:
    // 1. Collect payment information
    // 2. Verify payment
    // 3. Update inventory
    // 4. Send order confirmation email

    // For this example, we'll just display a confirmation.
    echo "<p>Order placed successfully!  Your order details will be emailed to you.</p>";
}



// --- Example Usage (Handling User Input) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Add to Cart functionality
    if (isset($_POST['add_to_cart'])) {
        $productId = (int)$_POST['product_id']; // Cast to integer for safety.  Important!
        $quantity = (int)$_POST['quantity']; // Cast to integer
        addToCart($productId, $quantity);
    }

    // Display the cart
    displayCart($cart);
}

?>


<?php

// Database Connection (Replace with your actual database details)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPassword = "your_db_password";
$dbName = "your_db_name";

// Establish Database Connection
$conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase.
 *
 * @param array $orderData An associative array containing order information:
 *                       - product_id (int): ID of the product purchased.
 *                       - quantity (int): Quantity of the product purchased.
 * @return bool True on success, false on failure.
 */
function processPurchase($orderData) {
  // Validate Input (Very important!)
  if (!is_array($orderData) || empty($orderData)) {
    return false; // Invalid input
  }

  if (!isset($orderData['product_id']) || !is_numeric($orderData['product_id']) || $orderData['product_id'] <= 0) {
    return false; // Invalid product_id
  }

  if (!isset($orderData['quantity']) || !is_numeric($orderData['quantity']) || $orderData['quantity'] <= 0) {
    return false; // Invalid quantity
  }

  // Sanitize Input (Important for security)
  $product_id = (int)$orderData['product_id'];
  $quantity = (int)$orderData['quantity'];

  // --- Database Query ---
  $sql = "INSERT INTO orders (product_id, quantity, order_date) VALUES (?, ?, NOW())";
  $stmt = $conn->prepare($sql);

  if (!$stmt) {
    error_log("Prepare statement failed: " . $conn->error);
    return false;
  }

  $stmt->bind_param("ii", $product_id, $quantity);

  if (!$stmt->execute()) {
    error_log("Query failed: " . $stmt->error);
    $stmt->close();
    return false;
  }

  $stmt->close();

  // --- Handle Product Update (Optional - Depending on your needs) ---
  // You might want to update the product's stock level here
  // Example:
  // $sql_update = "UPDATE products SET stock = stock - ? WHERE id = ?";
  // $stmt_update = $conn->prepare($sql_update);
  // $stmt_update->bind_param("ii", $quantity, $product_id);
  // if (!$stmt_update->execute()) {
  //   error_log("Update product stock failed: " . $stmt_update->error);
  // }
  // $stmt_update->close();


  return true;
}



// --- Example Usage (Illustrative - You'll need to integrate this into your form) ---

// Example Order Data (From a form submission)
$orderData = [
  'product_id' => 1,  // Example Product ID
  'quantity' => 2
];

if (processPurchase($orderData)) {
  echo "Order placed successfully!";
} else {
  echo "Order placement failed. Please check your input and try again.";
}

// --- Close Database Connection ---
$conn->close();

?>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPassword = "your_password";
$dbName = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  return $conn;
}

// Function to handle the purchase request
function handlePurchase($cart, $customerName, $customerEmail, $paymentMethod) {
  $conn = connectToDatabase();

  // Prepare the SQL query
  $sql = "INSERT INTO orders (customer_name, customer_email, order_date, payment_method) 
          VALUES ('" . $customerName . "', '" . $customerEmail . "', NOW(), '" . $paymentMethod . "')";

  if ($conn->query($sql) === TRUE) {
    $orderId = $conn->insert_id; // Get the ID of the newly inserted order
    echo "New order created successfully! Order ID: " . $orderId . "<br>";

    // Add order items to the order table
    foreach ($cart as $item) {
      $product_id = $item['product_id'];
      $quantity = $item['quantity'];

      $product_sql = "INSERT INTO order_items (order_id, product_id, quantity)
                       VALUES ('" . $orderId . "', '" . $product_id . "', '" . $quantity . "')";

      if ($conn->query($product_sql) === TRUE) {
        echo "  - Product ID " . $product_id . " added to order.<br>";
      } else {
        echo "  Error adding product ID " . $product_id . " to order.  Error: " . $conn->error . "<br>";
      }
    }

  } else {
    echo "Error creating order: " . $conn->error . "<br>";
  }

  $conn->close();
}

// --- Example Usage (Simulated Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get form data
  $cart = array(); // Initialize the cart as an empty array

  // Simulate getting cart data from a form
  // In a real application, this data would come from your form
  $cart_items = $_POST['cart_items'];
  if ($cart_items) {
    foreach ($cart_items as $item) {
      $product_id = $item['product_id'];
      $quantity = $item['quantity'];
      $cart[] = array('product_id' => $product_id, 'quantity' => $quantity);
    }
  }


  $customerName = $_POST["customer_name"];
  $customerEmail = $_POST["customer_email"];
  $paymentMethod = $_POST["payment_method"];

  // Handle the purchase
  handlePurchase($cart, $customerName, $customerEmail, $paymentMethod);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Items</h1>

  <form method="post" action="">
    <label for="product1">Product 1 (ID: 1):</label>
    <input type="number" id="product1" name="cart_items[0][product_id]" value="1">
    <label for="quantity1">Quantity:</label>
    <input type="number" id="quantity1" name="cart_items[0][quantity]" value="1">
    <br>

    <label for="product2">Product 2 (ID: 2):</label>
    <input type="number" id="product2" name="cart_items[1][product_id]" value="2">
    <label for="quantity2">Quantity:</label>
    <input type="number" id="quantity2" name="cart_items[1][quantity]" value="2">
    <br>

    <button type="submit">Place Order</button>
  </form>

  <br>
  <p>You can add more products by adding more input fields (product_id and quantity) to the form.</p>

</body>
</html>


<?php
session_start();

// Configuration
$cart_file = 'cart.php';
$item_id_key = 'item_id';
$item_name_key = 'item_name';
$quantity_key = 'quantity';
$price_key = 'price';

// Function to initialize the cart
function initializeCart() {
    if (!file_exists($cart_file)) {
        file_put_contents($cart_file, '{}'); // Create an empty cart file
    }
}

// Function to add an item to the cart
function addItemToCart($item_id, $item_name, $quantity, $price) {
    $cart = getCartData();

    $item_id = $item_id;
    $item_name = $item_name;
    $quantity = $quantity;
    $price = $price;

    if (empty($cart)) {
        $cart = array($item_id_key => $item_id, $item_name_key => $item_name, $quantity_key => $quantity, $price_key => $price);
    } else {
        // Check if item already in cart
        if (isset($cart[$item_id])) {
            $cart[$item_id][$quantity_key] += $quantity;
        } else {
            $cart[$item_id] = array($item_name_key => $item_name, $quantity_key => $quantity, $price_key => $price);
        }
    }

    // Save the cart to the file
    file_put_contents($cart_file, json_encode($cart));
}

// Function to update an item's quantity in the cart
function updateCartItemQuantity($item_id, $quantity) {
    $cart = getCartData();

    if (isset($cart[$item_id])) {
        $cart[$item_id][$quantity_key] = $quantity;
    }

    file_put_contents($cart_file, json_encode($cart));
}

// Function to remove an item from the cart
function removeItemFromCart($item_id) {
    $cart = getCartData();

    if (isset($cart[$item_id])) {
        unset($cart[$item_id]);
    }

    file_put_contents($cart_file, json_encode($cart));
}

// Function to get the cart data from the file
function getCartData() {
    if (file_exists($cart_file)) {
        $cart = json_decode(file_get_contents($cart_file), true);
        return $cart;
    } else {
        return array(); // Return an empty array if the cart file doesn't exist
    }
}

// Function to get the total cart value
function calculateCartTotal() {
    $cart = getCartData();
    $total = 0;
    foreach ($cart as $item_id => $item) {
        $quantity = $item[$quantity_key];
        $price = $item[$price_key];
        $total_item_price = $quantity * $price;
        $total += $total_item_price;
    }
    return $total;
}

//  Example Usage (Illustrative - Replace with your actual logic)
// This is just to demonstrate how the functions would be used.
// You'd integrate this into your website's purchase flow.

// 1. Add to Cart (Example)
if (isset($_POST['add_to_cart'])) {
    $item_id = $_POST['item_id'];
    $item_name = $_POST['item_name'];
    $quantity = $_POST['quantity'];
    $price = $_POST['price'];
    addItemToCart($item_id, $item_name, $quantity, $price);
    // Redirect or display a success message
    echo "<p>Item added to cart!</p>";
}

// 2. Update Quantity (Example)
if (isset($_POST['update_quantity'])) {
    $item_id = $_POST['item_id'];
    $new_quantity = $_POST['quantity'];
    updateCartItemQuantity($item_id, $new_quantity);
    echo "<p>Quantity updated in cart!</p>";
}

// 3. Remove Item (Example)
if (isset($_POST['remove_item'])) {
    $item_id = $_POST['item_id'];
    removeItemFromCart($item_id);
    echo "<p>Item removed from cart!</p>";
}

// 4. Get Cart Data for Display (Example - Display Cart Contents)
$cart = getCartData();

$total = calculateCartTotal();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (!empty($cart)) { ?>
    <table>
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php
            foreach ($cart as $item_id => $item) {
                $quantity = $item[$quantity_key];
                $item_name = $item[$item_name_key];
                $price = $item[$price_key];
                $total_item_price = $quantity * $price;
                echo "<tr>";
                echo "<td>" . $item_name . "</td>";
                echo "<td>" . $quantity . "</td>";
                echo "<td>$" . number_format($price, 2) . "</td>";
                echo "<td>$" . number_format($total_item_price, 2) . "</td>";
                echo "<td><button onclick=\"removeItemFromCart('{$item_id}')\">Remove</button></td>";
                echo "</tr>";
            }
            ?>
        </tbody>
    </table>
    <p>Total: $" . number_format($total, 2) . "</p>
<?php } else { ?>
    <p>Your cart is empty.</p>
<?php } ?>

<h2>Add to Cart</h2>
<form method="POST" action="">
    <label for="item_id">Item ID:</label>
    <input type="number" id="item_id" name="item_id" required><br><br>
    <label for="item_name">Item Name:</label>
    <input type="text" id="item_name" name="item_name" required><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>
    <label for="price">Price:</label>
    <input type="number" id="price" name="price" required><br><br>
    <input type="submit" value="Add to Cart" name="add_to_cart">
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (Basic example - Enhance for production)
  $product_name = trim($_POST["product_name"]);
  $quantity = intval($_POST["quantity"]);
  $price = floatval($_POST["price"]);

  // Check if required fields are filled and valid
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure quantity and price are positive numbers.";
  } else {
    // Process the purchase
    $total_amount = $quantity * $price;

    //  In a real application, you would:
    // 1.  Save the order details to a database.
    // 2.  Update the product stock.
    // 3.  Potentially send an email confirmation.
    // This is a simplified example.

    echo "<p>Order Placed Successfully!</p>";
    echo "<p>Product: " . $product_name . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Price per item: $" . $price . "</p>";
    echo "<p>Total Amount: $" . $total_amount . "</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
  $conn = new PDO("mysql:host=$host;dbname=$database", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}

// Function to check if an item is already in the cart
function itemExistsInCart($cart_id, $item_id) {
  $stmt = $conn->prepare("SELECT id FROM cart_items WHERE cart_id = ? AND item_id = ?");
  $stmt->execute([$cart_id, $item_id]);
  return $stmt->fetchColumn() !== false; // Returns true if the item exists, false otherwise
}

// Function to add an item to the cart
function addItemToCart($cart_id, $item_id, $quantity) {
  if (itemExistsInCart($cart_id, $item_id)) {
    // Item already in cart, update the quantity
    $stmt = $conn->prepare("UPDATE cart_items SET quantity = quantity + ? WHERE cart_id = ? AND item_id = ?");
    $stmt->execute([$quantity, $cart_id, $item_id]);
  } else {
    // Item not in cart, add a new row
    $stmt = $conn->prepare("INSERT INTO cart_items (cart_id, item_id, quantity) VALUES (?, ?, ?)");
    $stmt->execute([$cart_id, $item_id, $quantity]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantityInCart($cart_id, $item_id, $quantity) {
  $stmt = $conn->prepare("UPDATE cart_items SET quantity = ? WHERE cart_id = ? AND item_id = ?");
  $stmt->execute([$quantity, $cart_id, $item_id]);
}

// Function to remove an item from the cart
function removeItemFromCart($cart_id, $item_id) {
  $stmt = $conn->prepare("DELETE FROM cart_items WHERE cart_id = ? AND item_id = ?");
  $stmt->execute([$cart_id, $item_id]);
}

// ---  Purchase Functionality (Simplified Example) ---

// Simulate a purchase
function completePurchase($cart_id) {
    // 1. Get Cart Details
    $cartQuery = $conn->prepare("SELECT * FROM cart_items WHERE cart_id = ?");
    $cartQuery->execute([$cart_id]);
    $cartItems = $cartQuery->fetchAll(PDO::FETCH_ASSOC);

    // 2.  Process Order (Placeholder - Replace with actual order processing logic)
    //    - Send email notification
    //    - Update inventory
    //    - Create a new order record in your orders table

    // Example: Print the cart items for demonstration
    echo "<h2>Items in your Cart:</h2>";
    echo "<ul>";
    foreach ($cartItems as $item) {
      echo "<li>" . $item['item_id'] . " - " . $item['quantity'] . "</li>";
    }
    echo "</ul>";

    // 3. Clear the Cart (You might want to offer the customer to save the cart)
    removeItemFromCart($cart_id, $cart_id); // Assuming cart_id is the item_id
}


// ---  Example Usage (Simulating Interactions) ---

//  1.  Simulate adding items to the cart
addItemToCart(123, 1, 2); // Cart ID 123, Item ID 1, Quantity 2
addItemToCart(123, 2, 1); // Cart ID 123, Item ID 2, Quantity 1
addItemToCart(456, 1, 3); // Cart ID 456, Item ID 1, Quantity 3

//  2.  Simulate updating the quantity
updateQuantityInCart(123, 1, 5); // Increase quantity of item 1 in cart 123 to 5

//  3. Simulate completing the purchase
completePurchase(123); //  Complete the purchase of items in cart 123

//  4.  Cleanup (Remove all items from the cart -  Consider user feedback)
// removeItemFromCart(123, 1);  //  Remove all items from cart 123

?>


<?php

// Database Configuration (Replace with your actual details)
$dbHost = "localhost";
$dbUsername = "your_username";
$dbPassword = "your_password";
$dbName = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Validate and sanitize input (IMPORTANT!)
    $name = trim($_POST["name"]);
    $email = trim($_POST["email"]);
    $quantity = intval($_POST["quantity"]);
    $product_id = intval($_POST["product_id"]);  // Assuming you have a product_id

    // Validation (Basic - improve as needed)
    if (empty($name) || empty($email) || $quantity <= 0 || $product_id <= 0) {
        $error = "Please fill in all fields correctly.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Prepare SQL query (Important for security - use prepared statements)
        $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES (?, ?, ?, ?)";

        // Prepare statement
        $stmt = $conn->prepare($sql); // Assuming $conn is your database connection

        // Bind parameters (Prevent SQL injection)
        $stmt->bind_param("sii", $name, $email, $quantity);

        // Execute query
        if ($stmt->execute()) {
            $success = "Order placed successfully! Order ID: " . $conn->insert_id;
        } else {
            $error = "Error placing order: " . $stmt->error;
        }

        // Close statement
        $stmt->close();
    }
}

// Database connection (Establish connection)
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php } ?>

<?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
<?php } ?>

<h2>Place an Order</h2>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// --- Database Connection (Replace with your actual database details) ---
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";
$connection = new mysqli($host, $username, $password, $database);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

// --- Helper Functions ---
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}

// --- Purchase Functionality ---

function purchaseProduct($product_id, $quantity, $customer_name, $customer_email) {
  // 1. Input Validation & Sanitization
  $product_id = (int)$product_id; // Cast to integer
  $quantity = (int)$quantity;    // Cast to integer
  $customer_name = sanitizeInput($customer_name);
  $customer_email = sanitizeInput($customer_email);

  if ($quantity <= 0) {
    return "Invalid quantity. Please enter a positive number.";
  }

  // 2. Retrieve Product Information
  $sql = "SELECT id, name, price FROM products WHERE id = ?";
  $stmt = $connection->prepare($sql);
  $stmt->bind_param("i", $product_id);  // 'i' for integer
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    return "Product not found.";
  }
  $product = $result->fetch_assoc();

  // 3. Calculate Total Price
  $total_price = $product['price'] * $quantity;

  // 4. Update Inventory (Assuming you have an 'inventory' table)
  $sql = "UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?";
  $stmt = $connection->prepare($sql);
  $stmt->bind_param("is", $quantity, $product_id);
  $stmt->execute();

  // 5. Insert Order (Assuming you have an 'orders' table)
  $sql = "INSERT INTO orders (customer_name, customer_email, product_id, quantity, total_price, order_date)
          VALUES (?, ?, ?, ?, ?, CURDATE())";
  $stmt = $connection->prepare($sql);
  $stmt->bind_param("sisd", $customer_name, $product_id, $quantity, $total_price);
  $stmt->execute();
  $order_id = $connection->insert_id;

  // 6.  Return Confirmation Message
  return "Order placed successfully! Order ID: " . $order_id;
}


// --- Example Usage (Demonstration) ---
// Simulate a form submission (e.g., from a HTML form)
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];


// Call the purchase function
$confirmation_message = purchaseProduct($product_id, $quantity, $customer_name, $customer_email);
echo $confirmation_message;

// --- Database Table Structures (Example) ---

// products table:
// id (INT, PRIMARY KEY)
// name (VARCHAR)
// price (DECIMAL)

// inventory table:
// id (INT, PRIMARY KEY)
// product_id (INT, FOREIGN KEY referencing products.id)
// quantity (INT)

// orders table:
// id (INT, PRIMARY KEY, AUTO_INCREMENT)
// customer_name (VARCHAR)
// customer_email (VARCHAR)
// product_id (INT, FOREIGN KEY referencing products.id)
// quantity (INT)
// total_price (DECIMAL)
// order_date (DATE)


?>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Initialize session for user information
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @return bool True on success, false on failure.
 */
function addToCart(int $product_id) {
    global $db; // Access the database connection

    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        return false; // User not logged in, cannot add to cart.
    }

    $query = "SELECT * FROM products WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();

        // Check if the product is already in the cart
        $queryCart = "SELECT * FROM cart WHERE product_id = ? AND user_id = ?";
        $stmtCart = $db->prepare($queryCart);
        $stmtCart->bind_param("is", $product_id, $_SESSION['user_id']);
        $stmtCart->execute();
        $resultCart = $stmtCart->get_result();

        if ($resultCart->num_rows > 0) {
            // Product already in cart, update quantity
            $queryUpdate = "UPDATE cart SET quantity = quantity + 1 WHERE product_id = ? AND user_id = ?";
            $stmtUpdate = $db->prepare($queryUpdate);
            $stmtUpdate->bind_param("is", $product_id, $_SESSION['user_id']);
            $stmtUpdate->execute();
        } else {
            // Product not in cart, add it
            $queryInsert = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, 1)";
            $stmtInsert = $db->prepare($queryInsert);
            $stmtInsert->bind_param("is", $_SESSION['user_id'], $product_id);
            $stmtInsert->execute();
        }
        return true;
    } else {
        return false; // Product not found
    }
}

/**
 * Retrieves the shopping cart contents for a specific user.
 *
 * @param int $user_id The ID of the user.
 * @return array An array of product details from the cart, or an empty array if none.
 */
function getCartContents(int $user_id) {
    global $db;

    $query = "SELECT p.id AS product_id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = ? ";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $user_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_items = array();
    while ($row = $result->fetch_assoc()) {
        $cart_items[] = $row;
    }

    return $cart_items;
}

/**
 * Removes a product from the shopping cart.
 * @param int $product_id
 * @return bool
 */
function removeFromCart(int $product_id) {
    global $db;

    $query = "SELECT * FROM cart WHERE product_id = ? AND user_id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("is", $product_id, $_SESSION['user_id']);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $queryDelete = "DELETE FROM cart WHERE product_id = ? AND user_id = ?";
        $stmtDelete = $db->prepare($queryDelete);
        $stmtDelete->bind_param("is", $product_id, $_SESSION['user_id']);
        $stmtDelete->execute();
        return true;
    } else {
        return false;
    }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return bool True on success, false on failure.
 */
function updateCartQuantity(int $product_id, int $quantity) {
    global $db;

    if ($quantity <= 0) {
        return false; // Invalid quantity
    }

    $query = "SELECT * FROM cart WHERE product_id = ? AND user_id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("is", $product_id, $_SESSION['user_id']);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $queryUpdate = "UPDATE cart SET quantity = ? WHERE product_id = ? AND user_id = ?";
        $stmtUpdate = $db->prepare($queryUpdate);
        $stmtUpdate->bind_param("is", $quantity, $product_id, $_SESSION['user_id']);
        $stmtUpdate->execute();
        return true;
    } else {
        return false; // Product not in cart
    }
}

// Example usage (for testing)
// Initialize the database connection
$db = connectToDatabase();

// Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];
    if (addToCart($product_id)) {
        echo "Product added to cart.<br>";
    } else {
        echo "Failed to add product to cart.<br>";
    }
}

// Retrieve the cart contents
$cart_contents = getCartContents($_SESSION['user_id']);

// Output the cart contents (for demonstration purposes)
echo "<h2>Shopping Cart Contents:</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
}

//  Example of updating the quantity
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $new_quantity = (int)$_POST['quantity'];

    if (updateCartQuantity($product_id, $new_quantity)) {
        echo "Quantity updated successfully.<br>";
    } else {
        echo "Failed to update quantity.<br>";
    }
}

// Example of removing a product
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    if (removeFromCart($product_id)) {
        echo "Product removed from cart.<br>";
    } else {
        echo "Failed to remove product from cart.<br>";
    }
}

?>


<?php

// Database connection details (replace with your actual details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create a connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase processing
function processPurchase($cart, $customer_name, $customer_email, $shipping_address) {
    global $conn;

    // 1. Create a new order in the orders table
    $sql_order = "INSERT INTO orders (customer_name, customer_email, order_date, shipping_address)
                  VALUES ('" . mysqli_real_escape_string($conn, $customer_name) . "',
                         '" . mysqli_real_escape_string($conn, $customer_email) . "',
                         NOW(),
                         '" . mysqli_real_escape_string($conn, $shipping_address) . "')";

    if ($conn->query($sql_order) === false) {
        echo "Error creating order: " . $conn->error;
        return false;
    }

    $order_id = $conn->insert_id; // Get the ID of the newly created order

    // 2. Create order items (one row per product in the cart)
    foreach ($cart as $item) {
        $product_id = $item['product_id'];
        $quantity = $item['quantity'];

        $sql_item = "INSERT INTO order_items (order_id, product_id, quantity)
                      VALUES (" . $conn->insert_id . ",
                             " . $conn->insert_id . ",
                             " . $conn->insert_id . ")";  // Corrected SQL query

        if ($conn->query($sql_item) === false) {
            echo "Error creating order item: " . $conn->error;
            // Optionally, rollback the order creation if an item insertion fails
            $conn->rollback();
            return false;
        }
    }

    // 3.  Commit the changes
    $conn->commit();

    return true; // Purchase successful
}


// --- Example Usage (Illustrative - replace with your form data handling) ---

// **IMPORTANT:**  This is a simplified example.  You will need to:
// 1.  Handle form submission with POST data.
// 2.  Validate and sanitize the input data *before* using it.
// 3.  Implement proper error handling and user feedback.


// Simulate form data (replace with actual form data)
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];
$shipping_address = $_POST['shipping_address'];

// Cart - Example Cart Data (replace with your cart logic)
$cart = [
    ['product_id' => 1, 'quantity' => 2],
    ['product_id' => 2, 'quantity' => 1],
];


// Process the purchase
if (processPurchase($cart, $customer_name, $customer_email, $shipping_address)) {
    echo "Purchase successful! Order ID: " . $conn->insert_id;
} else {
    echo "Purchase failed.";
}

// Close the database connection (always do this)
$conn->close();

?>


<?php

// Configuration (Database details, etc.)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// ------------------ Database Connection ------------------
try {
  $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}

// ------------------ Helper Functions ------------------

/**
 * Adds a product to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return bool True on success, false on failure.
 */
function addToCart(int $product_id, int $quantity) {
  global $pdo;

  try {
    $stmt = $pdo->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
      return false;
    }

    // Check if the product already exists in the cart
    $stmt = $pdo->prepare("SELECT id FROM cart WHERE product_id = ?");
    $stmt->execute([$product_id]);
    $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($cart_item) {
      // Update the quantity of the existing cart item
      $quantity_to_update = $quantity + $cart_item['quantity'];
      $stmt = $pdo->prepare("UPDATE cart SET quantity = ? WHERE product_id = ?");
      $stmt->execute([$quantity_to_update, $product_id]);
    } else {
      // Add a new item to the cart
      $stmt = $pdo->prepare("INSERT INTO cart (product_id, quantity) VALUES (?, ?)");
      $stmt->execute([$product_id, $quantity]);
    }

    return true;
  } catch(PDOException $e) {
    error_log("Error adding to cart: " . $e->getMessage()); // Log the error for debugging
    return false;
  }
}

/**
 * Retrieves the contents of the shopping cart.
 *
 * @return array An array of cart items, each with 'id', 'name', 'price', and 'quantity'.
 */
function getCartContents() {
    global $pdo;

    $stmt = $pdo->prepare("SELECT p.id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateCartTotal() {
  global $pdo;
  $cart_items = getCartContents();
  $total = 0;
  foreach ($cart_items as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

/**
 * Clears the entire shopping cart.
 *
 * @return bool True on success, false on failure.
 */
function clearCart() {
  global $pdo;
  try {
    $stmt = $pdo->prepare("DELETE FROM cart");
    $stmt->execute();
    return true;
  } catch(PDOException $e) {
    error_log("Error clearing cart: " . $e->getMessage());
    return false;
  }
}

// ------------------ Example Usage (Controller - This would be in a separate file) ------------------
// This is just an example - you'd typically use a framework like Laravel or Symfony
// or handle this logic in a separate controller class.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
    $product_id = (int)$_POST["product_id"];
    $quantity = (int)$_POST["quantity"];

    if (addToCart($product_id, $quantity)) {
      echo "<p>Product added to cart successfully!</p>";
    } else {
      echo "<p>Error adding product to cart.</p>";
    }
  }

  if (isset($_POST["clear_cart"])) {
    if (clearCart()) {
      echo "<p>Cart cleared successfully!</p>";
    } else {
      echo "<p>Error clearing cart.</p>";
    }
  }
}

// ------------------ Display Cart Contents (Example - would be in a separate view file) ------------------

$cart_contents = getCartContents();
$cart_total = calculateCartTotal();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (!empty($cart_contents)): ?>
    <table>
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_contents as $item): ?>
          <tr>
            <td><?php echo htmlspecialchars($item['name']); ?></td>
            <td><?php echo htmlspecialchars($item['price']); ?></td>
            <td><?php echo htmlspecialchars($item['quantity']); ?></td>
            <td><?php echo htmlspecialchars($item['price'] * $item['quantity']); ?></td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
    <p><strong>Total:</strong> <?php echo $cart_total; ?></p>

    <form method="post">
      <button type="submit" name="clear_cart">Clear Cart</button>
    </form>

  <?php else: ?>
    <p>Your cart is empty.</p>
  <?php endif; ?>

  <form method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <button type="submit">Add to Cart</button>
  </form>

</body>
</html>


<?php

// Configuration - Change these to suit your needs
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

$cart = []; // Array to store the items in the user's cart
$total = 0.00;


// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart = $cart) {
    if (isset($products[$productId]) && $products[$productId]['quantity'] > 0) {
        $cart[] = ['product_id' => $productId, 'quantity' => $quantity];
        $total += $products[$productId]['price'] * $quantity;
        // Update product quantity (optional - for more complex inventory management)
        $products[$productId]['quantity']--;
        echo "<p>Added {$quantity} x {$products[$productId]['name']} to your cart.  Total: {$total}</p>";
    } else {
        echo "<p>Sorry, {$products[$productId]['name']} is out of stock or not found.</p>";
    }
}

// Function to display the cart
function displayCart() {
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            $product = $products[$item['product_id']];
            echo "<li>" . $product['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $product['price'] . " - Total: $" . ($product['price'] * $item['quantity']) . "</li>";
        }
        echo "</ul>";
        echo "<p><b>Total: $" . $total . "</p>";
    }
}

// Handling form submission (adding items to the cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];
        addToCart($productId, $quantity);
    }
}

// ---  Example of a simple checkout process (VERY BASIC) ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['checkout'])) {
    echo "<h2>Checkout</h2>";
    echo "<p>Thank you for your order!  Processing...</p>";
    //  In a real application, you'd integrate with a payment gateway here.
    //  For this example, we just show a message.
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store</title>
</head>
<body>

<h1>Online Store</h1>

<h2>Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - Price: $" . $product['price'] . "</li>";
    }
    ?>
</ul>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Select Product:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">" . $product['name'] . "</option>";
        }
        ?>
    </select>
    <br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <br><br>
    <button type="submit">Add to Cart</button>
</form>

<br><br>
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <button type="submit" name="checkout">Checkout</button>
</form>

<br><br>
<?php
displayCart();
?>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_db";
$db_user = "your_username";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    exit; // Stop execution if database connection fails
  }
}

// Function to handle the purchase process
function handlePurchase($cart, $customer_name, $customer_email) {
  $pdo = connectToDatabase();

  // Insert order information into the 'orders' table
  try {
    $stmt = $pdo->prepare("INSERT INTO orders (customer_name, customer_email, order_date) VALUES (:customer_name, :customer_email, NOW())");
    $stmt->bindParam(':customer_name', $customer_name);
    $stmt->bindParam(':customer_email', $customer_email);
    $stmt->execute();
    $order_id = $pdo->lastInsertId(); // Get the ID of the newly created order

    // Insert order items into the 'order_items' table
    foreach ($cart as $item_id => $quantity) {
      $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
      $stmt->bindParam(':order_id', $order_id);
      $stmt->bindParam(':product_id', $item_id);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->execute();
    }

    return $order_id; // Return the order ID
  } catch (PDOException $e) {
    echo "Error processing purchase: " . $e->getMessage();
    return -1; // Return -1 to indicate an error
  }
}

// Example usage (Simulated form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get cart data from the form (Simulate form data)
  $cart = $_POST["cart"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  // Handle the purchase
  $order_id = handlePurchase($cart, $customer_name, $customer_email);

  if ($order_id > 0) {
    echo "<h3>Purchase successful!</h3>";
    echo "<p>Order ID: " . $order_id . "</p>";
    echo "<p>Thank you for your order!</p>";
  } else {
    echo "<h3>Purchase failed. Please try again.</h3>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart Purchase</title>
</head>
<body>

  <h1>Shopping Cart Purchase</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <!-- Cart items -  Simulated example.  Replace with your actual product data. -->
    <label for="product1">Product 1 (ID: 1):</label>
    <input type="number" id="product1" name="cart[1]" value="2"> <br>

    <label for="product2">Product 2 (ID: 2):</label>
    <input type="number" id="product2" name="cart[2]" value="1"> <br>

    <input type="hidden" name="cart" value='["1", "2"]'> <!-- Simulate cart data -->
    <input type="submit" value="Purchase">
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

//  --- Product Data (For demonstration purposes - replace with a database table) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200, "quantity" => 10],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25, "quantity" => 50],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75, "quantity" => 30],
];


// Function to handle adding to cart
function addToCart($productId, $conn, $cart) {
    // Check if the product exists
    if (!isset($products[$productId])) {
        return false;
    }

    // Check if the product is already in the cart
    if (isset($cart[$productId])) {
        $cart[$productId]['quantity'] += 1;
    } else {
        $cart[$productId] = ["quantity" => 1, "product_id" => $productId];
    }
    return true;
}



// Function to display the shopping cart
function displayCart($conn, $cart) {
    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    $total = 0;

    foreach ($cart as $productId => $item) {
        $product = $products[$productId];
        echo "<li>";
        echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . " (Quantity: " . $item['quantity'] . ")";
        $itemTotal = $product['price'] * $item['quantity'];
        $total += $itemTotal;
        echo "</li>";
    }

    echo "</ul>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// --- Handling Form Submission (Adding to Cart) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = (int)$_POST['product_id'];  //Ensure product_id is an integer.
        addToCart($productId, $conn, $cart);
    }
}

// --- Initialize Cart (Session-based - recommended for persistence) ---
session_start();

if (!isset($_SESSION["cart"])) {
    $_SESSION["cart"] = [];
}

// --- Display the cart ---
displayCart($conn, $_SESSION["cart"]);

// --- Display Product List (For Reference) ---
echo "<h2>Available Products</h2>";
echo "<ul>";
foreach ($products as $id => $product) {
    echo "<li>";
    echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . " (Quantity: " . $product['quantity'] . ")";
    echo "<form method='post' action='" . $_SERVER["PHP_SELF"] . "'><input type='hidden' name='product_id' value='" . $id . "'>";
    echo "<button type='submit' name='add_to_cart'>Add to Cart</button>";
    echo "</form>";
    echo "</li>";
}
echo "</ul>";

?>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Initialize the cart (empty array if none exists)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $product_price) {
  global $_SESSION['cart'];

  if (empty($quantity)) {
    $quantity = 1; // Default to 1 if quantity is not provided
  }

  $item = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $product_price,
    'quantity' => $quantity
  );

  // Check if the item is already in the cart
  foreach ($_SESSION['cart'] as $key => $cart_item) {
    if ($cart_item['id'] == $product_id) {
      // Update the quantity
      $_SESSION['cart'][$key]['quantity'] += $quantity;
      return;
    }
  }

  // Add the item to the cart
  $_SESSION['cart'][] = $item;
  return;
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    global $_SESSION['cart'];

    foreach ($_SESSION['cart'] as $key => $cart_item) {
        if ($cart_item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            // Re-index the array to avoid gaps
            $_SESSION['cart'] = array_values($_SESSION['cart']);
            return;
        }
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    global $_SESSION['cart'];

    foreach ($_SESSION['cart'] as $key => $cart_item) {
        if ($cart_item['id'] == $product_id) {
            if ($quantity > 0) {
                $_SESSION['cart'][$key]['quantity'] = $quantity;
            } else {
                // Remove the item if the quantity is set to 0
                removeItemFromCart($product_id);
                return;
            }
            return;
        }
    }
}

// Function to display the cart
function displayCart() {
  echo "<h2>Shopping Cart</h2>";

  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . "</li>";
    $total += $item['price'] * $item['quantity'];
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// ---  Product Data (Simulated - Replace with your database retrieval) ---
$products = [
  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
  4 => ['id' => 4, 'name' => 'Monitor', 'price' => 300]
];


// ---  Handling Add to Cart Request ---
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  $product_name = $products[$product_id]['name'];
  $product_price = $products[$product_id]['price'];

  addToCart($product_id, $quantity, $product_name, $product_price);
  // Redirect to the cart page (for better user experience)
  header("Location: cart.php");
  exit();
}

// --- Handling Remove from Cart Request ---
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeItemFromCart($product_id);
  header("Location: cart.php");
  exit();
}

// --- Handling Update Quantity Request ---
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateQuantity($product_id, $quantity);
  header("Location: cart.php");
  exit();
}

// --- Display the Cart Page (cart.php) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Products</h1>
  <form method="post">
    <?php
    foreach ($products as $id => $product) {
      echo "<div>";
      echo "<strong>" . $product['name'] . " - $" . $product['price'] . "</strong><br>";
      echo "<input type='number' name='product_id[]' value='" . $id . "' min='1' style='width:50px;'>";
      echo "<button type='submit' name='add_to_cart'>Add to Cart</button> | ";
      echo "<button type='submit' name='update_quantity' style='background-color:red;'>Update Quantity</button>  | ";
      echo "<button type='submit' name='remove_from_cart' style='background-color:red;'>Remove from Cart</button>";
      echo "</div>";
    }
    ?>
  </form>

  <hr>

  <?php displayCart(); ?>

  <a href="index.php">Back to Products</a>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// You'll need to adapt this to your specific database connection.
// This example uses mysqli but you can easily adapt to PDO or other libraries.

//  Example database connection (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

$db = new mysqli($host, $username, $password, $database);

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// --- Product Data (Simulated for demonstration) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75],
];


// --- Purchase Functionality ---

function placeOrder($productId, $quantity) {
    global $db, $products; // Access the global database connection and products array

    // Validate inputs (very important!)
    if (!is_numeric($productId)) {
        return "Invalid product ID.";
    }
    if (!is_numeric($quantity) || $quantity <= 0) {
        return "Invalid quantity.";
    }

    // Get product details
    $product = $products[$productId];

    if (!$product) {
        return "Product not found.";
    }

    // Calculate the total price
    $totalPrice = $product['price'] * $quantity;

    // ---  Simulate Order Processing (Replace with actual database logic) ---
    // In a real application, you would:
    // 1. Insert the order into a database table.
    // 2. Update the product quantity in the database.
    // 3.  Handle payment processing (e.g., integrate with a payment gateway).

    // For this example, we'll just return a confirmation message.
    return "Order placed successfully! Product: " . $product['name'] . ", Quantity: " . $quantity . ", Total: $" . $totalPrice;
}

// --- Handling Form Submission ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    $orderConfirmation = placeOrder($productId, $quantity);
    echo "<br>" . $orderConfirmation;
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"" . $id . "\">" . $product['name'] . "</option>";
        }
        ?>
    </select>
    <br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required>
    <br>
    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Configuration (You'll likely want to move this to a config file)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200.00],
    2 => ['name' => 'Mouse', 'price' => 25.00],
    3 => ['name' => 'Keyboard', 'price' => 75.00],
];

$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Check if the item is already in the cart
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = [
                'name' => $product_name,
                'quantity' => $quantity,
                'price' => $product_price,
            ];
        }
        
        // Optionally, you could log this action.
        // log_action("Item added to cart: " . $product_name . " x " . $quantity);
    } else {
        // Handle invalid product ID
        echo "<p style='color:red;'>Invalid product ID: " . $product_id . "</p>";
    }
}

// Function to view the cart
function viewCart()
{
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $id => $item) {
            echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
        }
        echo "</ul>";
    }
}


// Function to calculate the total price
function calculateTotalPrice()
{
    $total = 0;
    foreach ($cart as $id => $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

// ---  Example usage (This would typically be part of a form/interface)  ---

// Handle adding to cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];  // Important: Cast to integer to avoid vulnerabilities
    $quantity = (int)$_POST['quantity'];       //  Important: Cast to integer

    addToCart($product_id, $quantity);
}

// Display the cart
viewCart();

// Display the total price
echo "<p><strong>Total: $" . calculateTotalPrice() . "</strong></p>";
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Available Products</h1>

<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " <button onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
    }
    ?>
</ul>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$dbHost = "localhost";
$dbUsername = "your_username";
$dbPassword = "your_password";
$dbName = "your_database";

// Session Management
session_start();

// Database Connection
try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Helper function to sanitize input (basic example)
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}


// 1. Add to Cart Function
function addToCart($productId, $quantity) {
    global $pdo;

    $productId = sanitizeInput($productId);
    $quantity = (int)$quantity; // Ensure quantity is an integer

    // Check if the product exists
    $stmt = $pdo->prepare("SELECT id, product_name, price FROM products WHERE id = ?");
    $stmt->execute([$productId]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        return false; // Product not found
    }

    // Check if the product is already in the cart
    $cartItemId = isset($_SESSION['cart']) ? array_keys($_SESSION['cart']) : [];

    if (in_array($productId, $cartItemId)) {
        // Update quantity
        $stmt = $pdo->prepare("UPDATE cart_items SET quantity = quantity + :quantity WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
        return true;
    } else {
        // Add to cart
        $stmt = $pdo->prepare("INSERT INTO cart_items (product_id, quantity) VALUES (?, ?)");
        $stmt->execute([$productId, $quantity]);
        return true;
    }
}


// 2. View Cart Function
function viewCart() {
    $cartItems = [];

    // Fetch cart items from the cart_items table
    $stmt = $pdo->prepare("SELECT p.product_name, p.price, ci.quantity FROM cart_items ci JOIN products p ON ci.product_id = p.id");
    $stmt->execute();

    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $cartItems[] = $row;
    }

    return $cartItems;
}

// 3. Remove Item from Cart Function
function removeItemFromCart($productId) {
    global $pdo;
    $productId = sanitizeInput($productId);

    // Delete the item from the cart_items table
    $stmt = $pdo->prepare("DELETE FROM cart_items WHERE product_id = ?");
    $stmt->execute([$productId]);

    // Update the cart session (remove the item from the array)
    if (isset($_SESSION['cart'])) {
        $cartItemId = array_keys($_SESSION['cart']);
        foreach ($cartItemId as $key => $item) {
            if ($item['product_id'] == $productId) {
                unset($_SESSION['cart'][$key]);
                break;
            }
        }
    }

    return true;
}



// 4. Update Quantity Function
function updateQuantity($productId, $quantity) {
    global $pdo;
    $productId = sanitizeInput($productId);
    $quantity = (int)$quantity; // Ensure quantity is an integer

    // Check if the product exists
    $stmt = $pdo->prepare("SELECT id, price FROM products WHERE id = ?");
    $stmt->execute([$productId]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        return false; // Product not found
    }

    // Update the quantity in the cart_items table
    $stmt = $pdo->prepare("UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();

    return true;
}


// Example usage (Illustrative - this would typically be in your product page or cart page)

// Add to cart example
// if (isset($_POST['add_to_cart'])) {
//     $productId = sanitizeInput($_POST['product_id']);
//     $quantity = (int)$_POST['quantity']; // or $_POST['qty']
//     addToCart($productId, $quantity);
// }

// View cart (example - this is just to demonstrate)
// $cartItems = viewCart();
// if ($cartItems) {
//     echo "<h2>Your Cart</h2>";
//     echo "<ul>";
//     foreach ($cartItems as $item) {
//         echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
//     }
//     echo "</ul>";
// } else {
//     echo "<p>Your cart is empty.</p>";
// }

// Remove Item Example
// if(isset($_GET['remove_item'])) {
//     $productId = sanitizeInput($_GET['remove_item']);
//     removeItemFromCart($productId);
// }

//Update Quantity example
//if(isset($_POST['update_quantity'])) {
//    $productId = sanitizeInput($_POST['product_id']);
//    $newQuantity = (int)$_POST['quantity'];
//    updateQuantity($productId, $newQuantity);
//}
?>


<?php
session_start();

// --- Database Connection (Replace with your database details) ---
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "root";
$db_password = "";

// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Product Data (Example) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75],
];


// --- Purchase Functionality ---

function handlePurchase($cart, $conn) {
    $total = 0;
    $order_items = [];

    foreach ($cart as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            $item_price = $product['price'] * $quantity;
            $total += $item_price;
            $order_items[] = [
                "product_id" => $product_id,
                "name" => $product['name'],
                "quantity" => $quantity,
                "price" => $product['price'],
                "total" => $item_price,
            ];
        } else {
            // Product not found - Handle this case (e.g., display an error message)
            return false; // Or throw an exception
        }
    }

    // Check if the cart is empty
    if (empty($cart)) {
        return false;
    }

    // Save the order to the database
    $order_id = $conn->insert("orders", [
        "total_amount" => $total,
        "created_at" => date("Y-m-d H:i:s"),
    ]);


    $conn->insert("order_items", [
        "order_id" => $order_id,
        "product_id" => json_encode($order_items), // Store as JSON to preserve the items
        "quantity" => json_encode($order_items), // Can use for future retrieval
        "total" => json_encode($order_items),
    ]);


    // Clear the cart (you can also persist this in a session)
    $_SESSION['cart'] = [];

    return true;
}

// ---  Purchase Handling (Example) ---

// Check if the "purchase" form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Sanitize and Validate input (IMPORTANT!)
    $cart = $_SESSION['cart'];
    if (handlePurchase($cart, $conn) === true) {
        echo "<p>Order placed successfully!  Order ID: " . $conn->insert_id . "</p>"; // Show order ID
        // You might want to redirect to a confirmation page.
    } else {
        echo "<p>An error occurred during the purchase.</p>";
    }
}

// --- Display the Cart (for the shopping page) ---

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $quantity . " = $" . ($product['price'] * $quantity) . "</li>";
        }
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start();

// Database connection details
$db_host = "localhost";
$db_user = "your_db_user";
$db_password = "your_db_password";
$db_name = "your_db_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a product to the cart
function addToCart($product_id, $quantity, $conn) {
    $user_id = $_SESSION['user_id']; // Get user ID from session
    $sql = "INSERT INTO cart (user_id, product_id, quantity) 
            VALUES ($user_id, $product_id, $quantity)";

    if ($conn->query($sql) === TRUE) {
        return TRUE;
    } else {
        return FALSE;
    }
}

// Function to get the cart items
function getCartItems($user_id, $conn) {
    $sql = "SELECT p.product_name, p.price, c.quantity
            FROM cart c
            JOIN products p ON c.product_id = p.product_id
            WHERE c.user_id = $user_id";

    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        $cart_items = array();
        while($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
        return $cart_items;
    } else {
        return array();
    }
}

// Function to update the cart item quantity
function updateCartItemQuantity($product_id, $quantity, $conn) {
    $user_id = $_SESSION['user_id'];

    // Check if the item exists in the cart
    $sql = "SELECT * FROM cart WHERE user_id = $user_id AND product_id = $product_id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // Update the quantity
        $sql = "UPDATE cart SET quantity = $quantity WHERE user_id = $user_id AND product_id = $product_id";
        if ($conn->query($sql) === TRUE) {
            return TRUE;
        } else {
            return FALSE;
        }
    } else {
        return FALSE; // Item not found in cart
    }
}

// Function to remove a cart item
function removeCartItem($product_id, $conn) {
    $user_id = $_SESSION['user_id'];
    $sql = "DELETE FROM cart WHERE user_id = $user_id AND product_id = $product_id";
    if ($conn->query($sql) === TRUE) {
        return TRUE;
    } else {
        return FALSE;
    }
}

// --- Purchase Functionality (Simplified for demonstration) ---

// Example Purchase Request (triggered by a form submission)
if (isset($_POST['purchase'])) {
    // 1. Get Cart Items
    $conn = connectToDatabase();
    $cart_items = getCartItems($_SESSION['user_id'], $conn);

    // 2.  Calculate Total Price (Simplified)
    $total_price = 0;
    foreach ($cart_items as $item) {
        $total_price += $item['price'];
    }

    // 3.  Update Cart (Empty it after purchase) - Can be removed if desired
    foreach ($cart_items as $item) {
        // Remove the item from the cart
        removeCartItem($item['product_id'], $conn);
    }


    // 4.  Display Purchase Confirmation (Replace with actual payment processing)
    echo "<p>Purchase completed successfully!  Total: $" . $total_price . "</p>";
    // In a real application, you would integrate with a payment gateway here.
}

// --- Example HTML Form (for adding items to cart) ---

echo "<form method='post' action=''>";
echo "<label for='product_id'>Product ID:</label><br>";
echo "<input type='number' id='product_id' name='product_id' required><br><br>";

echo "<label for='quantity'>Quantity:</label><br>";
echo "<input type='number' id='quantity' name='quantity' value='1' min='1'><br><br>";

echo "<input type='submit' value='Add to Cart'>";
echo "</form>";

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace with your actual database connection details
$db = new mysqli("localhost", "username", "password", "your_database");

// Check connection
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}

// Function to handle the purchase process
function processPurchase($cart, $user_id) {
  global $db;

  // 1. Verify Inventory
  if (!verifyInventory($cart, $db)) {
    return false; // Inventory issues, purchase failed
  }

  // 2. Deduct Inventory (Update database)
  if (!deductInventory($cart, $db)) {
    return false; // Inventory deduction failed
  }

  // 3. Record Order (Create new order record in the database)
  $order_id = createOrder($cart, $user_id, $db);

  if (!$order_id) {
    return false; // Order creation failed
  }

  return $order_id; // Return the order ID for confirmation
}


// ----- Inventory Verification Function -----
function verifyInventory($cart, $db) {
  // Example:  Check if the quantity of each product in the cart is available.
  // Replace this with your actual database query to check inventory.
  // This is a simplified example - you'll need to adapt it to your schema.

  $sql = "SELECT product_id, quantity FROM cart WHERE cart_id = ?";  // Replace cart_id with the actual cart ID
  $stmt = $db->prepare($sql);
  $stmt->bind_param("i", 1); // Assuming cart_id = 1 (example)
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      $product_id = $row['product_id'];
      $quantity_in_cart = $row['quantity'];

      //Get the available quantity from the product table
      $sql2 = "SELECT quantity FROM products WHERE product_id = ?";
      $stmt2 = $db->prepare($sql2);
      $stmt2->bind_param("i", $product_id);
      $stmt2->execute();

      $result2 = $stmt2->get_result();

      if ($result2->num_rows > 0) {
        $available_quantity = $result2->fetch_assoc()['quantity'];
        if ($available_quantity < $quantity_in_cart) {
          return false; // Not enough stock!
        }
      } else {
        // Product doesn't exist - handle this case, perhaps return an error
        return false;
      }
    }
  }
  return true; // All items have sufficient stock
}



// ----- Inventory Deduction Function -----
function deductInventory($cart, $db) {
  // Example:  Update the product quantities in the `products` table.
  // Replace this with your actual database queries.

  // This simplified version assumes a simple 'quantity' field in the products table.
  // In a real application, you'll likely need a more complex approach
  // to handle multiple items and potentially variations (e.g., sizes, colors).

  //  Example query (This is simplified and might need adjustments)
  $sql = "UPDATE products SET quantity = quantity - ? WHERE product_id = ?";
  $stmt = $db->prepare($sql);
  $stmt->bind_param("is", $cart['quantity'], $cart['product_id']);
  $result = $stmt->execute();

  if (!$result) {
    // Handle error (e.g., logging, user notification)
    error_log("Error deducting inventory: " . $db->error);
    return false;
  }

  return true;
}


// ----- Order Creation Function -----
function createOrder($cart, $user_id, $db) {
  // Create a new order record in the database.
  // This is a simplified example; adapt to your database schema.
  $sql = "INSERT INTO orders (user_id, order_date, total_amount) VALUES (?, NOW(), ?)";
  $stmt = $db->prepare($sql);
  $stmt->bind_param("is", $user_id, calculateTotal($cart, $db)); //Calculate Total Amount

  if (!$stmt->execute()) {
    // Handle error (e.g., logging, user notification)
    error_log("Error creating order: " . $db->error);
    return false;
  }

  // Get the last inserted ID (order ID)
  $order_id = $db->insert_id;
  return $order_id;
}

//----- Helper function to calculate total amount
function calculateTotal($cart, $db) {
  $total = 0;
  foreach ($cart as $item) {
    //Assume each item is an array: ['product_id', 'quantity']
    $product_id = $item['product_id'];
    $quantity = $item['quantity'];

    //Fetch product price from the database
    $sql = "SELECT price FROM products WHERE product_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
      $price = $result->fetch_assoc()['price'];
      $total_item_price = $price * $quantity;
      $total_item_price += $total_item_price;
    }
  }
  return $total_item_price;
}

// ----- Example Usage (Simulated Cart and User ID) -----
$cart = [
  ['product_id' => 1, 'quantity' => 2],
  ['product_id' => 2, 'quantity' => 1],
];
$user_id = 123;

// Process the purchase
$order_id = processPurchase($cart, $user_id);

if ($order_id) {
  echo "Purchase successful! Order ID: " . $order_id;
} else {
  echo "Purchase failed.";
}

// -----  Remember to close the database connection when done -----
$db->close();

?>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_username = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $address) {
    $conn = connectToDatabase();

    // Sanitize inputs (Important for security)
    $customer_name = $conn->real_escape_string($customer_name);
    $customer_email = $conn->real_escape_string($customer_email);
    $address = $conn->real_escape_string($address);

    // Insert order information into the database
    $order_query = "INSERT INTO orders (customer_name, customer_email, address, order_date) VALUES ('$customer_name', '$customer_email', '$address', NOW())";
    if ($conn->query($order_query) === TRUE) {
        $order_id = $conn->insert_id; // Get the ID of the newly created order
        echo "Order placed successfully! Order ID: " . $order_id . "<br>";

        // Update the cart (mark items as purchased)
        $update_cart_query = "UPDATE carts SET purchased = 1 WHERE id = '$cart_id'";
        if ($conn->query($update_cart_query) === TRUE) {
            echo "Cart updated successfully.<br>";
        } else {
            echo "Error updating cart: " . $conn->error . "<br>";
        }

    } else {
        echo "Error placing order: " . $conn->error . "<br>";
    }
}


// ---  Example Usage / Handling the Purchase Request ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if the form has been submitted
    if (isset($_POST['submit_order'])) {
        // Get cart ID from the form
        $cart_id = $_POST['cart_id'];

        // Get customer information from the form
        $customer_name = $_POST['customer_name'];
        $customer_email = $_POST['customer_email'];
        $address = $_POST['address'];


        // Call the handlePurchase function to process the order
        handlePurchase($cart_id, $customer_name, $customer_email, $address);
    }
}


// --------------------------------------------------
//  HTML Form for the Purchase Request
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>

<h1>Purchase Items</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" >
    <label for="cart_id">Cart ID:</label>
    <input type="hidden" id="cart_id" name="cart_id" value="<?php
        if (isset($_SESSION['cart_id'])) {
            echo $_SESSION['cart_id'];
        } else {
            echo "Invalid Cart ID";
        }
    ?>">

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="address">Shipping Address:</label>
    <textarea id="address" name="address" rows="4" cols="50" required></textarea><br><br>

    <button type="submit" name="submit_order">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize inputs
  $product_name = htmlspecialchars($_POST["product_name"]);
  $product_price = floatval($_POST["product_price"]);
  $quantity = intval($_POST["quantity"]);

  // Error handling
  $errors = [];

  if (empty($product_name)) {
    $errors[] = "Product name cannot be empty.";
  }
  if ($product_price <= 0) {
    $errors[] = "Product price must be greater than zero.";
  }
  if ($quantity <= 0) {
    $errors[] = "Quantity must be greater than zero.";
  }

  // If there are no errors, proceed with the purchase
  if (empty($errors)) {

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute the SQL query
    $sql = "INSERT INTO purchases (product_name, product_price, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ssi", $product_name, $product_price, $quantity);
    $stmt->execute();

    // Close the statement
    $stmt->close();

    // Close the database connection
    $conn->close();

    // Display success message
    echo "<p style='color: green;'>Purchase successful! Product: " . $product_name . ", Quantity: " . $quantity . ", Price: " . $product_price . "</p>";

  } else {
    // Display error messages
    echo "<div style='color: red;'>";
    foreach ($errors as $error) {
      echo $error . "<br>";
    }
    echo "</div>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="product_price">Product Price:</label>
    <input type="number" id="product_price" name="product_price" step="0.01" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required><br><br>

    <button type="submit">Purchase</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Functions ---

/**
 * Add a new order to the database.
 *
 * @param array $orderData An associative array containing order details.
 * @return int|false The ID of the new order if successful, or false on failure.
 */
function addOrder(array $orderData) {
    global $conn;

    $order_id = $conn->insert_id; // Get the auto-incremented ID

    $sql = "INSERT INTO orders (customer_name, product_name, quantity, price, order_date)
           VALUES ('" . $conn->real_escape_string($orderData['customer_name']) . "',
                  '" . $conn->real_escape_string($orderData['product_name']) . "',
                  " . $conn->real_escape_string($orderData['quantity']) . ",
                  " . $conn->real_escape_string($orderData['price']) . ",
                  CURDATE())";

    if ($conn->query($sql) === TRUE) {
        return $conn->insert_id;
    } else {
        error_log("Error adding order: " . $conn->error);
        return false;
    }
}


/**
 * Display a simple purchase form.
 */
function displayPurchaseForm() {
    echo '<form action="process_purchase.php" method="POST">';
    echo 'Customer Name: <input type="text" name="customer_name" required>';
    echo '<br>';
    echo 'Product Name: <input type="text" name="product_name" required>';
    echo '<br>';
    echo 'Quantity: <input type="number" name="quantity" required>';
    echo '<br>';
    echo 'Price: <input type="number" name="price" required>';
    echo '<br>';
    echo '<input type="submit" value="Place Order">';
    echo '</form>';
}


/**
 * Display the order details (for confirmation).
 *
 * @param int $orderId The ID of the order to display.
 */
function displayOrderDetails(int $orderId) {
    echo '<br><h2>Order Details:</h2>';
    echo '<p>Order ID: ' . $orderId . '</p>';

    //This is a placeholder - replace with your database query to retrieve order details.
    // In a real application, you would fetch the details from the database.
    // Example:
    // $sql = "SELECT * FROM orders WHERE id = " . $orderId;
    // $result = $conn->query($sql);

    // if ($result->num_rows > 0) {
    //    $order = $result->fetch_assoc();
    //    echo '<p>Customer Name: ' . $order['customer_name'] . '</p>';
    //    echo '<p>Product Name: ' . $order['product_name'] . '</p>';
    //    echo '<p>Quantity: ' . $order['quantity'] . '</p>';
    //    echo '<p>Price: ' . $order['price'] . '</p>';
    // } else {
    //    echo '<p>Order not found.</p>';
    // }
}

// --- Main Execution ---

//Display the purchase form
displayPurchaseForm();

// If a form submission occurred (check the $_POST array)
if (isset($_POST['submit_order'])) { // Check if the submit_order is set, meaning the form was submitted
    $orderData = [
        'customer_name' => $_POST['customer_name'],
        'product_name' => $_POST['product_name'],
        'quantity' => $_POST['quantity'],
        'price' => $_POST['price']
    ];

    // Add the order to the database
    $orderId = addOrder($orderData);

    if ($orderId) {
        echo '<br><h2>Order Placed Successfully!</h2>';
        displayOrderDetails($orderId);
    } else {
        echo '<br><h2>Error Placing Order. Please try again.</h2>';
    }
}

?>


<?php

// This is a simplified example.  In a real application, you'd use a database
// to store products, user information, and order details.

class Product {
    public $id;
    public $name;
    public $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}

class ShoppingCart {
    public $items = [];

    public function addItem($product, $quantity = 1) {
        if (isset($this->items[$product->id]) ) {
            $this->items[$product->id]['quantity'] += $quantity;
        } else {
            $this->items[$product->id] = ['quantity' => $quantity];
        }
    }

    public function removeItem($product) {
        unset($this->items[$product->id]);
    }

    public function getTotal() {
        $total = 0;
        foreach ($this->items as $item) {
            $totalPrice = $item->price * $item->quantity;
            $totalPrice += $totalPrice;
        }
        return $totalPrice;
    }
}


// Sample Products
$product1 = new Product(1, "Laptop", 1200);
$product2 = new Product(2, "Mouse", 25);
$product3 = new Product(3, "Keyboard", 75);

// Create a Shopping Cart
$cart = new ShoppingCart();

// Add items to the cart
$cart->addItem($product1, 1);
$cart->addItem($product2, 2);
$cart->addItem($product3, 1);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
echo "<ul>";
foreach ($cart->items as $product) {
    echo "<li>" . $product->name . " - $" . $product->price . " x " . $product->quantity . " = $" . ($product->price * $product->quantity) . "</li>";
}
echo "</ul>";

echo "<p><b>Total: $" . $cart->getTotal() . "</b></p>";

// Example of removing an item
// $cart->removeItem($product2);
// echo "<p>Total after removing Mouse: $" . $cart->getTotal() . "</p>";


?>


<?php
session_start();

// Array to store cart items
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to display the cart contents
function displayCart() {
  echo "<div class='cart-container'>";
  echo "<h2>Shopping Cart</h2>";

  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
      $product_name = $item['name'];
      $price = $item['price'];
      $quantity = $item['quantity'];
      $total_price = $price * $quantity;

      echo "<li>";
      echo "<strong>$product_name</strong> - $price x $quantity = $total_price";
      echo "<form method='post' action='"
          . $_SERVER['PHP_SELF'] . "'>";
      echo "<label for='quantity_$product_id'>Quantity:</label>";
      echo "<input type='number' id='quantity_$product_id' value='$quantity' name='quantity_$product_id' min='1'>";
      echo "<input type='submit' value='Update'>";
      echo "</form>";
      echo "</li>";
    }
    echo "</ul>";

    echo "<form method='post' action='"
        . $_SERVER['PHP_SELF'] . "'>";
    echo "<input type='submit' value='Remove All Items'>";
    echo "</form>";
  }

  echo "</div>";
}

// Handle form submission to update quantity
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  foreach ($_POST as $key => $value) {
    if (substr($key, 1) == '$') { // Crude check to filter out the '$'
       $key = str_replace('$','', $key);
       if (isset($_SESSION['cart'][$key])) {
          updateCartQuantity($key, $value);
       }
    }
  }
}

// Handle remove all items
if ($_POST['action'] == 'Remove All Items') {
    unset($_SESSION['cart']);
}


// Display the cart
displayCart();
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-container {
      border: 1px solid #ccc;
      padding: 10px;
      margin-top: 20px;
    }
  </style>
</head>
<body>

</body>
</html>


<?php
$products = array(
    "1" => array(
        "id" => "1",
        "name" => "Laptop",
        "price" => 1200.00
    ),
    "2" => array(
        "id" => "2",
        "name" => "Mouse",
        "price" => 25.00
    ),
    "3" => array(
        "id" => "3",
        "name" => "Keyboard",
        "price" => 75.00
    )
);
?>


<?php
session_start();

// Array to store cart items
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to display the cart contents
function displayCart() {
  echo "<div class='cart-container'>";
  echo "<h2>Shopping Cart</h2>";

  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
      $product_name = $item['name'];
      $price = $item['price'];
      $quantity = $item['quantity'];
      $total_price = $price * $quantity;

      echo "<li>";
      echo "<strong>$product_name</strong> - $price x $quantity = $total_price";
      echo "<form method='post' action='"
          . $_SERVER['PHP_SELF'] . "'>";
      echo "<label for='quantity_$product_id'>Quantity:</label>";
      echo "<input type='number' id='quantity_$product_id' value='$quantity' name='quantity_$product_id' min='1'>";
      echo "<input type='submit' value='Update'>";
      echo "</form>";
      echo "</li>";
    }
    echo "</ul>";

    echo "<form method='post' action='"
        . $_SERVER['PHP_SELF'] . "'>";
    echo "<input type='submit' value='Remove All Items'>";
    echo "</form>";
  }

  echo "</div>";
}

// Handle form submission to update quantity
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  foreach ($_POST as $key => $value) {
    if (substr($key, 1) == '$') { // Crude check to filter out the '$'
       $key = str_replace('$','', $key);
       if (isset($_SESSION['cart'][$key])) {
          updateCartQuantity($key, $value);
       }
    }
  }
}

// Handle remove all items
if ($_POST['action'] == 'Remove All Items') {
    unset($_SESSION['cart']);
}

// Include the products data
include 'products.php';

// Display the cart
displayCart();
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you have a 'products' table with columns like 'id', 'name', 'price'.

// Example database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new mysqli($servername, $username, $password, $dbname);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
} catch (Exception $e) {
    die("Connection failed: " . $e->getMessage());
}


// Function to add a purchase to the database
function addPurchase($productId, $quantity, $userId) {
  global $conn; // Access the database connection

  // Validate inputs (important for security - prevent SQL injection)
  if (!$productId || !$quantity || !$userId) {
    return false; // Invalid input
  }

  $productId = (int)$productId; // Convert to integer for safety
  $quantity = (int)$quantity;
  $userId = (int)$userId;

  // Construct the SQL query
  $sql = "INSERT INTO purchases (product_id, quantity, user_id) VALUES ($productId, $quantity, $userId)";

  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}


// Function to display products (for the shopping cart interface)
function displayProducts($conn) {
    $sql = "SELECT id, name, price FROM products";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>Available Products:</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<div>";
            echo "<h3>" . htmlspecialchars($row["name"]) . "</h3>";
            echo "<p>Price: $" . htmlspecialchars($row["price"]) . "</p>";
            // Add a button to add to cart (or a quantity selection)
            echo "<form method='post'>";
            echo "<input type='hidden' name='product_id' value='" . htmlspecialchars($row["id"]) . "'>";
            echo "<input type='number' name='quantity' value='1' min='1' style='width:50px;'>";
            echo "<input type='submit' value='Add to Cart'>";
            echo "</form>";
            echo "</div>";
        }
    } else {
        echo "<p>No products found.</p>";
    }
}

// Example Usage (for demonstration - this would typically be in your shopping cart page)

// 1. Display the products:
displayProducts($conn);

// 2. Handle the form submission (if adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate quantity (important for security - prevent injection)
    if (is_numeric($quantity) && $quantity > 0) {
        if (addPurchase($product_id, $quantity, 1)) { // Assuming user ID 1 for now
            echo "<p>Product added to cart!</p>";
        } else {
            echo "<p>Error adding product to cart.</p>";
        }
    } else {
        echo "<p>Invalid quantity.</p>";
    }
}
?>


<?php

// Database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase order.
 *
 * @param array $order_data Array of order details:
 *    - product_id: ID of the product being purchased.
 *    - quantity: Quantity of the product being purchased.
 *    - customer_name: Customer's name.
 *    - customer_email: Customer's email.
 *
 * @return string Response message (success or error).
 */
function process_purchase(array $order_data) {

    // Validate input (important for security)
    $product_id = isset($order_data['product_id']) ? $order_data['product_id'] : null;
    $quantity = isset($order_data['quantity']) ? intval($order_data['quantity']) : 0;
    $customer_name = isset($order_data['customer_name']) ? htmlspecialchars($order_data['customer_name']) : '';
    $customer_email = isset($order_data['customer_email']) ? htmlspecialchars($order_data['customer_email']) : '';


    // Check if required fields are present
    if ($product_id === null || $quantity <= 0 || $customer_name === '' || $customer_email === '') {
        return "Error: Missing required fields. Please fill in all the details.";
    }

    // Fetch product details
    $product_query = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($product_query);
    $stmt->bind_param("i", $product_id);  // i = integer
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return "Error: Product with ID '$product_id' not found.";
    }

    $product = $result->fetch_assoc();
    $stmt->close();

    // Calculate total price
    $total_price = $product['price'] * $quantity;

    // Insert order into database
    $order_query = "INSERT INTO orders (customer_name, customer_email, product_id, quantity, total_price, order_date) 
                     VALUES (?, ?, ?, ?, ?, NOW())";
    $stmt = $conn->prepare($order_query);
    $stmt->bind_param("isd", $customer_name, $product_id, $quantity, $total_price);
    $stmt->execute();
    $stmt->close();


    // Update product stock (optional - depends on your stock management)
    $update_stock_query = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt = $conn->prepare($update_stock_query);
    $stmt->bind_param("id", $quantity, $product_id);
    $stmt->execute();
    $stmt->close();

    return "Order placed successfully! Order ID: " . $conn->insert_id;
}


// --- Example Usage (Form Submission Handling) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $order_data = [
        'product_id' => isset($_POST['product_id']) ? intval($_POST['product_id']) : null,
        'quantity' => isset($_POST['quantity']) ? intval($_POST['quantity']) : 0,
        'customer_name' => isset($_POST['customer_name']) ? htmlspecialchars($_POST['customer_name']) : '',
        'customer_email' => isset($_POST['customer_email']) ? htmlspecialchars($_POST['customer_email']) : ''
    ];

    $response = process_purchase($order_data);
    echo $response;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <form method="post">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <button type="submit">Place Order</button>
    </form>

</body>
</html>


<?php

// Database connection details
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate form data (Example - enhance this!)
  $name = isset($_POST["name"]) ? trim($_POST["name"]) : "";
  $email = isset($_POST["email"]) ? trim($_POST["email"]) : "";
  $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 0;  // Validate as integer
  $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0; // Validate as integer


  // Basic validation (Customize this)
  if (empty($name) || empty($email) || $quantity <= 0 || $product_id <= 0) {
    $error = "Please fill in all fields correctly.";
  } else {
    // Sanitize input (Very important for security)
    $name = htmlspecialchars($name);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    $product_id = intval($product_id);

    //  Here you would typically:
    //  1.  Check if the product exists (using a database query)
    //  2.  Update the order in your database.
    //  3.  Handle success/failure responses.
    //
    //  This is a placeholder for the database interaction.

    $success = true; // Assume success until something goes wrong
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Form</h1>

  <?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php endif; ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo isset($quantity) ? intval($quantity) : 0; ?>">
    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="<?php echo isset($product_id) ? intval($product_id) : 0; ?>">
    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <a href="index.php">Back to Home</a> <!-- Link back to the main page -->

</body>
</html>


<?php

// Sample product data (replace with a database connection in a real application)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00]
];

// Function to handle the purchase process
function handlePurchase($cart, $products) {
    $total = 0;
    $orderSummary = "";

    foreach ($cart as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $product = $products[$product_id];
            $total += $product['price'] * $quantity;
            $orderSummary .= $quantity . " x " . $product['name'] . " ($ " . $product['price'] . ")
";
        } else {
            echo "Error: Product ID " . $product_id . " not found.
";
            return false; // Indicate an error
        }
    }

    // Display order summary
    echo "<h2>Order Summary</h2>
";
    echo $orderSummary;
    echo "<p>Total: $" . number_format($total, 2) . "</p>";

    //  (In a real application, you'd store this order in a database)
    return true;
}


// ---  Example Usage - This part handles the user input and calls the function ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Initialize the shopping cart
    $cart = [];

    // Populate the cart based on user input
    if (isset($_POST['product_id']) && is_numeric($_POST['product_id'])) {
        $product_id = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];

        if (isset($products[$product_id])) {
            if (isset($cart[$product_id])) {
                $cart[$product_id] += $quantity;
            } else {
                $cart[$product_id] = $quantity;
            }
        } else {
            echo "<p>Invalid product ID.</p>";
        }
    }

    // Handle the purchase
    if (empty($cart)) {
        echo "<p>Your cart is empty.  Add some items to purchase.</p>";
    } else {
        handlePurchase($cart, $products);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

    <h1>Online Store</h1>

    <h2>Shopping Cart</h2>
    <?php if (!empty($cart)): ?>
        <ul>
            <?php
            foreach ($cart as $product_id => $quantity) {
                echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
            }
            ?>
        </ul>
    <?php endif; ?>

    <h2>Add to Cart</h2>
    <form method="post">
        <?php
        foreach ($products as $product_id => $product) {
            echo "<label for=\"product_id\">Product ID: " . $product['id'] . "</label><br>";
            echo "<input type=\"number\" id=\"product_id\" name=\"product_id\" value=\"" . $product['id'] . "\"><br>";
            echo "<label for=\"quantity\">Quantity:</label><br>";
            echo "<input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\"><br><br>";
        }
        ?>

        <button type="submit">Add to Cart</button>
    </form>
</body>
</html>


<?php

// Data storage (replace with a database in a real application)
$cart = [];

// Function to add an item to the cart
function addToCart($productId, $quantity, $productName, $productPrice) {
  global $cart;
  
  // Check if the product already exists in the cart
  if (isset($cart[$productId])) {
    $cart[$productId]['quantity'] += $quantity;
  } else {
    $cart[$productId] = [
      'quantity' => $quantity,
      'name' => $productName,
      'price' => $productPrice
    ];
  }
}

// Function to view the cart
function viewCart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>";
    echo "<strong>Product Name:</strong> " . $item['name'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Price:</strong> $" . $item['price'] . " per item<br>";
    echo "<strong>Total for item:</strong> $" . $item['quantity'] * $item['price'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate total cost
  $totalCost = 0;
  foreach ($cart as $id => $item) {
      $totalCost += $item['quantity'] * $item['price'];
  }
  echo "<p><strong>Total Cost:</strong> $" . $totalCost . "</p>";
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  global $cart;

  if (isset($cart[$productId])) {
    unset($cart[$productId]);
  } else {
    echo "<p>Product with ID " . $productId . " not found in the cart.</p>";
  }
}

// Function to update the quantity of an item
function updateQuantity($productId, $newQuantity) {
  global $cart;

  if (isset($cart[$productId])) {
    if ($newQuantity > 0) {
      $cart[$productId]['quantity'] = $newQuantity;
    } else {
      // Handle invalid quantity (e.g., set quantity to 0 or remove item)
      removeItemFromCart($productId); // Or $cart[$productId]['quantity'] = 0;
    }
  } else {
    echo "<p>Product with ID " . $productId . " not found in the cart.</p>";
  }
}


// --- Example Usage (Simulated product data) ---
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 80],
];

// --- Simulated Purchase Request ---
//  Let's simulate a user adding items to the cart
addToCart(1, 2, $products[1]['name'], $products[1]['price']); // Add 2 T-Shirts
addToCart(2, 1, $products[2]['name'], $products[2]['price']); // Add 1 Jeans
addToCart(3, 1, $products[3]['name'], $products[3]['price']); // Add 1 Shoes

// View the cart
viewCart();

// Simulate removing an item
removeItemFromCart(1);

// View the cart again
viewCart();

// Simulate updating quantity
updateQuantity(2, 3); //Change quantity of Jeans to 3
viewCart();

//--------------------------------------------------------------------
//  THIS IS A VERY BASIC EXAMPLE.  IN A REAL APPLICATION, YOU WOULD:
// 1. Use a database to store product information and cart data.
// 2. Implement input validation to handle user input.
// 3.  Add error handling.
// 4.  Secure the application to prevent vulnerabilities.
// 5.  Consider using a session or cookie to maintain cart state.
//--------------------------------------------------------------------
?>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_user";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate input (Basic example, enhance for production)
  $product_id = isset($_POST['product_id']) ? $_POST['product_id'] : null;
  $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Convert to integer and default to 1
  $customer_name = isset($_POST['customer_name']) ? trim($_POST['customer_name']) : '';
  $customer_email = isset($_POST['customer_email']) ? trim($_POST['customer_email']) : '';


  // Sanitize input (Important to prevent security vulnerabilities)
  $product_id = (int)$product_id; // Ensure product_id is an integer
  $quantity = max(1, (int)$quantity); // Ensure quantity is at least 1


  // Check if product exists (Basic example, enhance for production)
  $product_query = "SELECT * FROM products WHERE id = ?";
  $stmt = $conn->prepare($product_query);
  $stmt->bind_param("i", $product_id); // "i" for integer
  $stmt->execute();
  $product = $stmt->fetch_assoc();

  if (!$product) {
    $error = "Product not found.";
  } elseif ($quantity <= 0) {
     $error = "Invalid quantity.";
  } else {

    //  Add to Cart Logic (Placeholder - Implement your cart system)
    //  This is just a demonstration - replace with your actual cart logic
    $cart_items = json_decode($_SESSION['cart_items'], true);

    // Check if the product is already in the cart
    $product_exists = false;
    foreach ($cart_items as &$item) {
      if ($item['product_id'] == $product_id) {
        $item['quantity'] += $quantity;
        $product_exists = true;
        break;
      }
    }

    if (!$product_exists) {
      $cart_items[] = [
        'product_id' => $product_id,
        'quantity' => $quantity,
        'product_name' => $product->product_name, // Or other relevant product details
        'price' => $product->price
      ];
    }

    // Store the cart items in the session
    $_SESSION['cart_items'] = $cart_items;


    //  Confirmation message
    $success = "Item added to cart!";

  }

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" value="<?php echo isset($customer_name) ? htmlspecialchars($customer_name) : ''; ?>" ><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" value="<?php echo isset($customer_email) ? htmlspecialchars($customer_email) : ''; ?>"  ><br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <h2>Your Cart</h2>
  <?php
    // Display Cart Items
    if (isset($_SESSION['cart_items'])) {
      echo "<ul>";
      foreach ($_SESSION['cart_items'] as $item) {
        echo "<li>Product: " . $item['product_name'] . ", Quantity: " . $item['quantity'] . ", Price: $" . $item['price'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>Your cart is empty.</p>";
    }
  ?>

</body>
</html>


<?php

// This script demonstrates a basic purchase functionality.
// In a real application, you'd likely use a database for storing products,
// user information, and orders.  This is a simplified example.

// --- Product Data (Simulated Database) ---
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Mug', 'price' => 10.00],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00],
];

// --- Session Management (For cart persistence) ---
session_start();

// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Functions ---

/**
 * Add a product to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity to add (default: 1).
 */
function addToCart(int $productId, int $quantity = 1) {
    if (!isset($products[$productId])) {
        echo "<p>Product with ID $productId not found.</p>";
        return;
    }

    if (!isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = 0; //Initialize if not present
    }

    $_SESSION['cart'][$productId] += $quantity;
}


/**
 * Calculate the total cost of the cart.
 *
 * @return float The total cost.
 */
function calculateTotal() {
    $total = 0.00;
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        if (isset($products[$productId])) {
            $totalPrice = $products[$productId]['price'] * $quantity;
            $totalPrice = $total + $totalPrice;
            $total = $totalPrice; //Update total
        }
    }
    return $total;
}

/**
 * Display the cart contents.
 */
function displayCart() {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        if (isset($products[$productId])) {
            $productName = $products[$productId]['name'];
            $productPrice = $products[$productId]['price'];
            echo "<li>$productName - Quantity: $quantity - Price: $productPrice</li>";
        }
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . number_format(calculateTotal(), 2) . "</strong></p>";
}



// --- Handle Purchase (Simplified - No actual payment processing) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['submit_order'])) {
        // In a real application, you'd integrate with a payment gateway here.
        // This is just a placeholder for order processing logic.

        // Clear the cart after successful order placement (or redirect)
        session_destroy();
        session_start();  //Restart session to reset
        $_SESSION['cart'] = [];

        echo "<p>Order placed successfully!  Your cart has been cleared.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Online Store</h1>

<div id="product-list">
    <h2>Available Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<br>";
            echo "<form method='post' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>
";
            echo "   <label for='quantity-" . $id . "'>Quantity:</label>
";
            echo "   <input type='number' id='quantity-" . $id . "' value='1' min='1' name='quantity-" . $id . "' style='width:50px;'>
";
            echo "   <input type='submit' value='Add to Cart'>
";
            echo "</form></li>";
        }
        ?>
    </ul>
</div>

<hr>

<div id="cart-area">
    <?php displayCart(); ?>
</div>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase creation
function createPurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    global $conn; // Access the global connection

    // Validate input (add more validation as needed)
    if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
        return "Error: Missing required fields.";
    }

    // Sanitize input (important to prevent SQL injection)
    $cart_id = $conn->real_escape_string($cart_id);
    $customer_name = $conn->real_escape_string($customer_name);
    $customer_email = $conn->real_escape_string($customer_email);
    $payment_method = $conn->real_escape_string($payment_method);

    // SQL query to create the purchase record
    $sql = "INSERT INTO purchases (cart_id, customer_name, customer_email, payment_method, purchase_date)
            VALUES ('$cart_id', '$customer_name', '$customer_email', '$payment_method', NOW())";

    if ($conn->query($sql) === TRUE) {
        return "Purchase created successfully!  Purchase ID: " . $conn->insert_id;
    } else {
        return "Error creating purchase: " . $conn->error;
    }
}


// Example usage (handling form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart_id = $_POST["cart_id"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    $result = createPurchase($cart_id, $customer_name, $customer_email, $payment_method);

    echo "<p>" . $result . "</p>"; // Display the result
}

// ---- HTML Form for Submission ----
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

    <h2>Purchase Form</h2>

    <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
        <label for="cart_id">Cart ID:</label>
        <input type="text" id="cart_id" name="cart_id" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <label for="payment_method">Payment Method:</label>
        <select id="payment_method" name="payment_method" required>
            <option value="credit_card">Credit Card</option>
            <option value="paypal">PayPal</option>
            <option value="stripe">Stripe</option>
        </select><br><br>

        <input type="submit" value="Place Order">
    </form>

</body>
</html>


<?php

// 1. Product Data (Simulated Database)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// 2. Cart
$cart = [];

// 3. Add to Cart Function
function addToCart($product_id, $cart) {
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $cart[] = $product;
        return $cart;
    } else {
        return $cart; // Product not found, return unchanged cart
    }
}

// 4. View Cart Function
function viewCart($cart) {
    echo "<h2>Your Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
        }
        echo "</ul>";
    }
}

// 5. Checkout Function (Simulated)
function checkout($cart) {
    echo "<h2>Checkout</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.  Nothing to checkout.</p>";
    } else {
        echo "<p>Total: $" . calculateTotal($cart) . "</p>";
        echo "<p>Thank you for your purchase!</p>";
    }
}

// Helper function to calculate total
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'];
    }
    return $total;
}

// 6.  Example Usage (Simulated User Interaction)

// Add a product to the cart
addToCart(1, $cart);
addToCart(2, $cart);

// View the cart
viewCart($cart);

// Checkout
checkout($cart);
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate and sanitize inputs (VERY IMPORTANT!)
    $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0;
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;

    // Input validation - Ensure product_id and quantity are positive integers
    if ($product_id <= 0 || $quantity <= 0) {
        $error_message = "Invalid product ID or quantity. Please enter positive values.";
    } else {
        // Get product details from the database
        $sql = "SELECT id, name, price FROM products WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            $product = $result->fetch_assoc();
            $product_name = $product["name"];
            $product_price = $product["price"];

            // Calculate the total price
            $total_price = $product_price * $quantity;

            // Display the purchase details
            echo "<p>You purchased: " . $quantity . " " . $product_name . " for $" . $total_price . "</p>";

            // (Optional) Add purchase to a database table
            // You would typically insert data into a 'purchases' table here.
            // For demonstration purposes, we'll just print a success message.

            echo "<p>Thank you for your purchase!</p>";


        } else {
            $error_message = "Product not found.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase a Product</h1>

<?php if (isset($error_message)) {
    echo "<p style='color: red;'>Error: " . $error_message . "</p>";
}
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required>
    <br><br>

    <button type="submit">Purchase</button>
</form>

</body>
</html>


<?php
// Sample product data
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'description' => 'A comfortable t-shirt.', 'image' => 'tshirt.jpg'],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'description' => 'Classic denim jeans.', 'image' => 'jeans.jpg'],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15.00, 'description' => 'Stylish hat.', 'image' => 'hat.jpg'],
];

// Function to get product details by ID
function getProductDetails($productId) {
    global $products;  // Access the global $products array

    if (isset($products[$productId])) {
        return $products[$productId];
    } else {
        return null;
    }
}
?>


<?php
session_start(); // Start the session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($productId, $quantity = 1) {
    global $_SESSION['cart'];

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = [
            'quantity' => $quantity,
            'product_id' => $productId // Store product ID for updates
        ];
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($productId, $quantity) {
    global $_SESSION['cart'];

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    } else {
        // Handle the case where the product isn't in the cart
        // You might want to log an error or display a message
        echo "Product ID " . $productId . " not found in cart.";
    }
}


// Function to remove an item from the cart
function removeCartItem($productId) {
    global $_SESSION['cart'];

    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    } else {
        echo "Product ID " . $productId . " not found in cart.";
    }
}

// Function to get the cart total
function getCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $product = getProductDetails($item['product_id']); // Get product details
        if ($product) {
            $totalItemPrice = $product['price'] * $item['quantity'];
            $total += $totalItemPrice;
        }
    }
    return $total;
}

// Function to display the cart contents
function displayCart() {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    foreach ($_SESSION['cart'] as $item) {
        $product = getProductDetails($item['product_id']);
        if ($product) {
            $totalItemPrice = $product['price'] * $item['quantity'];
            $totalItemPrice = $totalItemPrice;
            echo "<tr>";
            echo "<td>" . $product['name'] . "</td>";
            echo "<td>$" . number_format($product['price'], 2) . "</td>";
            echo "<td>" . $item['quantity'] . "</td>";
            echo "<td>$" . number_format($totalItemPrice, 2) . "</td>";
            echo "<td><a href='cart.php?action=update&productId=" . $item['product_id'] . "&quantity=1'>Update</a> | <a href='cart.php?action=remove&productId=" . $item['product_id'] . "'>Remove</a></td>";
            echo "</tr>";
        }
    }
    echo "</table>";
    echo "<br>";
    echo "<strong>Total: $" . number_format(getCartTotal(), 2) . "</strong>";
}
?>


<?php
require_once 'cart.php';
require_once 'product.php'; // Include the product data file
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Our Products</h1>

<?php
displayCart(); // Display the cart content
?>

<br>
<a href="cart.php">View Cart</a>

</body>
</html>


<?php
session_start();

// Database Connection (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'shopping_cart';
$dbUser = 'root';
$dbPass = '';

// Establish database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add item to cart
function addToCart($conn, $product_id, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to update quantity in cart
function updateCartQuantity($conn, $product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // Item not in cart, handle it gracefully (e.g., log an error, display a message)
    // Example:
    error_log("Product ID $product_id not in cart.");
  }
}

// Function to remove item from cart
function removeFromCart($conn, $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get cart items
function getCartItems($conn) {
  $cart_items = array();
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($product_query);
    if ($result->num_rows > 0) {
      $product = $result->fetch_assoc();
      $cart_items[] = array(
        'id' => $product['id'],
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $item['quantity']
      );
    }
  }
  return $cart_items;
}


// --- Handle Cart Actions ---

// Add to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($conn, $product_id, $quantity);
  header("Location: cart.php"); // Redirect to cart page
  exit;
}

// Update Quantity
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateCartQuantity($conn, $product_id, $quantity);
  header("Location: cart.php");
  exit;
}

// Remove from Cart
if (isset($_GET['remove_from_cart'])) {
  $product_id = $_GET['remove_from_cart'];
  removeFromCart($conn, $product_id);
  header("Location: cart.php");
  exit;
}


// --- Display Cart ---

// Get cart items
$cart_items = getCartItems($conn);

// --- Product Data (Example - Replace with your actual product data)---
$products = array(
  1 => array('id' => 1, 'name' => 'T-Shirt', 'price' => 20.00),
  2 => array('id' => 2, 'name' => 'Jeans', 'price' => 50.00),
  3 => array('id' => 3, 'name' => 'Shoes', 'price' => 80.00)
);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    body { font-family: sans-serif; }
    .cart-item { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
    .cart-total { font-weight: bold; }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)) { ?>
    <p>Your cart is empty.</p>
  <?php } else { ?>

    <?php
    $total = 0;
    foreach ($cart_items as $item) {
      echo '<div class="cart-item">';
      echo '<strong>' . $item['name'] . '</strong> - $' . $item['price'] . ' <input type="number" value="' . $item['quantity'] . '" min="1" style="width: 50px;">';
      echo '<br>';
      $total += $item['price'] * $item['quantity'];
      echo '</strong>';
      echo '<br>';
      echo '<a href="cart.php?remove_from_cart=' . $item['id'] . '">Remove</a><br><br>';
    }
    ?>

    <div class="cart-total">Total: $<?php echo round($total, 2); ?></div>
  <?php } ?>

  <hr>

  <a href="index.php">Continue Shopping</a>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate input (basic example - expand for production)
  $name = htmlspecialchars($_POST["name"]);
  $email = htmlspecialchars($_POST["email"]);
  $quantity = intval($_POST["quantity"]); // Ensure quantity is an integer

  // Sanitize and escape data for database insertion
  $name = mysqli_real_escape_string($db_host, $name); // Important for security
  $email = mysqli_real_escape_string($db_host, $email);
  $quantity = mysqli_real_escape_string($db_host, $quantity);

  // SQL query to insert data into the database
  $sql = "INSERT INTO orders (name, email, quantity) VALUES ('$name', '$email', '$quantity')";

  // Execute the query
  $result = mysqli_query($db_host, $sql);

  // Check if the query was successful
  if ($result) {
    $message = "Order placed successfully! Thank you, $name.";
  } else {
    $message = "Error placing order. Please try again.";
    // Log the error for debugging (optional)
    error_log(mysqli_error($db_host));
  }
} else {
  $message = ""; // Reset message for the initial page load
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase an Item</h1>

  <?php if ($message != "") { ?>
    <p style="color: <?php if ($message == "Order placed successfully!") { echo "green"; } else { echo "red"; } ?>;"> <?php echo $message; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required>

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" placeholder="Quantity" required>

    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a new purchase
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
  global $conn; // Access the database connection

  // Sanitize inputs to prevent SQL injection
  $product_id = $conn->real_escape_string($product_id);
  $quantity = $conn->real_escape_string($quantity);
  $customer_name = $conn->real_escape_string($customer_name);
  $customer_email = $conn->real_escape_string($customer_email);

  // SQL query to insert the purchase data
  $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email)
          VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email')";

  if ($conn->query($sql) === TRUE) {
    return true; // Success
  } else {
    return false; // Failure
  }
}

// Function to retrieve purchase details (e.g., for display)
function getPurchaseDetails($purchase_id) {
    global $conn;
    $sql = "SELECT * FROM purchases WHERE id = $purchase_id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $purchase = $result->fetch_assoc();
        return $purchase;
    } else {
        return null;
    }
}


// --- Example Usage (Simplified - You'll need a form for user input) ---

// 1.  Handle Form Submission (This part is just a placeholder)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];

    // 2.  Add the Purchase (Call the function)
    if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {
        echo "Purchase added successfully!";
    } else {
        echo "Error adding purchase.";
    }
}


// --- Database Table Structure (MySQL) ---
/*
CREATE TABLE purchases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL
);
*/

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Form</h1>

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Add Purchase</button>
</form>

</body>
</html>


<?php

// ... (Database connection code - same as before) ...

// Function to add a new purchase using prepared statements
function addPurchase($product_id, $quantity, $customer_name, $customer_email) {
  global $conn;

  // Sanitize inputs (important even with prepared statements, but less critical)
  $product_id = $conn->real_escape_string($product_id);
  $quantity = $conn->real_escape_string($quantity);
  $customer_name = $conn->real_escape_string($customer_name);
  $customer_email = $conn->real_escape_string($customer_email);


  // SQL query with a placeholder
  $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email)
          VALUES (?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $conn->prepare($sql);

  // Bind the parameters
  $stmt->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);

  // Execute the statement
  if ($stmt->execute() === TRUE) {
    return true;
  } else {
    error_log("Error adding purchase: " . $conn->error); // Log the error
    return false;
  }

  // Close the statement
  $stmt->close();
}
?>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function processPurchase($cart_id, $customer_name, $customer_email, $address, $payment_method) {
    // 1. Establish Database Connection
    $conn = connectToDatabase();

    // 2. Get Cart Details
    $query = "SELECT product_id, quantity, product_price FROM cart WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_data = [];
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $cart_data[] = $row;
        }
    }
    $stmt->close();


    // 3. Calculate Total Amount
    $total_amount = 0;
    foreach ($cart_data as $item) {
        $total_amount += $item['quantity'] * $item['product_price'];
    }

    // 4. Insert Order into the database
    $query = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, total_amount, payment_method) VALUES (?, ?, ?, NOW(), ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isss", $cart_id, $customer_name, $customer_email, $total_amount, $payment_method);
    if ($stmt->execute()) {
        $order_id = $conn->insert_id; // Get the newly created order ID
        echo "Order placed successfully! Order ID: " . $order_id;
    } else {
        echo "Error placing order: " . $stmt->error;
    }
    $stmt->close();

    // 5. Update Cart (Important: Mark items as sold out)
    foreach ($cart_data as $item) {
        // Assuming you have a 'products' table with product_id and stock
        $query = "UPDATE products SET stock = stock - ? WHERE product_id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("is", $item['quantity'], $item['product_id']);
        if ($stmt->execute()) {
            //echo "Product " . $item['product_id'] . " updated successfully.
";
        } else {
            // Handle update error (e.g., log it, display a message)
            echo "Error updating product " . $item['product_id'] . ": " . $stmt->error;
        }
        $stmt->close();
    }

    // 6. Clear the Cart (This is crucial to avoid duplicate orders)
    $query = "DELETE FROM cart WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $stmt->close();


    // 7. Close the database connection
    $conn->close();
}


// --- Example Usage (Simulated Form Data) ---
// In a real application, this would come from a form submission.
$cart_id = 1; // Example Cart ID
$customer_name = "John Doe";
$customer_email = "john.doe@example.com";
$address = "123 Main Street, Anytown";
$payment_method = "Credit Card";


// Call the function to process the purchase
processPurchase($cart_id, $customer_name, $customer_email, $address, $payment_method);

?>


<?php

// Sample Product Data (Replace with your actual database or data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to handle the purchase process
function handlePurchase($productId, $quantity) {
    // Validate input
    if (!is_numeric($productId) || $productId <= 0) {
        return 'Invalid product ID.';
    }
    if (!is_numeric($quantity) || $quantity <= 0) {
        return 'Invalid quantity.';
    }

    // Find the product
    $product = $products[$productId];

    if (!$product) {
        return 'Product not found.';
    }

    // Calculate the total price
    $totalPrice = $product['price'] * $quantity;

    //  Store the order (This is a simplified example.  You'd normally use a database)
    $order = [
        'product_id' => $productId,
        'quantity' => $quantity,
        'total_price' => $totalPrice,
        'timestamp' => date('Y-m-d H:i:s')
    ];

    // Log the order (Optional - useful for debugging and tracking)
    // You'd typically write this to a log file or database
    error_log("Order placed: " . json_encode($order));


    return 'Order placed successfully! Total: $' . number_format($totalPrice, 2);
}

// Handle the purchase based on user input (example)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    $result = handlePurchase($productId, $quantity);
    echo "<p>" . $result . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Purchase</title>
</head>
<body>

<h1>Online Purchase</h1>

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <option value="1">Laptop (ID: 1)</option>
        <option value="2">Mouse (ID: 2)</option>
        <option value="3">Keyboard (ID: 3)</option>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1"><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details
$dbHost = 'localhost';
$dbName = 'shop_db';
$dbUser = 'your_username';
$dbPass = 'your_password';

// Configuration
$product_id = $_POST['product_id']; // Get product ID from form
$quantity = $_POST['quantity'];     // Get quantity from form
$customer_email = $_POST['customer_email']; // Get customer email
$order_date = date('Y-m-d H:i:s'); // Get current date and time

// Database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ---  Retrieve Product Information ---
$sql = "SELECT product_id, product_name, price, stock FROM products WHERE product_id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $product_id); // "i" indicates integer
$stmt->execute();
$result = $stmt->get_result();

$product = $result->fetch_assoc();

if (!$product) {
  echo "Product not found.";
  $stmt->close();
  $conn->close();
  exit;
}

if ($product['stock'] < $quantity) {
    echo "Not enough stock available.";
    $stmt->close();
    $conn->close();
    exit;
}

// ---  Create Order in Database ---
$sql = "INSERT INTO orders (customer_email, product_id, quantity, order_date)
        VALUES (?, ?, ?, ?)";
$stmt = $conn->prepare($sql);
$stmt->bind_param("ssis", $customer_email, $product_id, $quantity, $order_date);

if ($stmt->execute()) {
  $order_id = $conn->insert_id; // Get the last inserted ID (order ID)

  // Update product stock
  $sql = "UPDATE products SET stock = stock - ? WHERE product_id = ?";
  $stmt->bind_param("is", $quantity, $product_id);
  $stmt->execute();

  echo "Order placed successfully! Order ID: " . $order_id;
} else {
  echo "Error placing order: " . $conn->error;
}

$stmt->close();
$conn->close();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>

<h1>Purchase</h1>

<form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database Connection (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase
function handlePurchase($cart, $conn) {
    // Calculate total price
    $totalPrice = 0;
    foreach ($cart as $item_id => $quantity) {
        //  Assuming you have a product table with 'id' and 'price' columns
        $product_query = "SELECT price FROM products WHERE id = ?";
        $stmt = $conn->prepare($product_query);
        $stmt->bind_param("i", $item_id); // "i" for integer
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();

        if ($row) {
            $totalPrice += $row['price'] * $quantity;
        } else {
            // Handle product not found -  log an error, display an error message, etc.
            echo "Error: Product with ID " . $item_id . " not found.";
            return false; // Or handle differently, perhaps continue without this item
        }
        $stmt->close();
    }

    //  Simulate payment processing (Replace with your actual payment gateway integration)
    echo "<br>Total Price: $" . $totalPrice;
    echo "<br>Payment Successful!";
    // TODO: Integrate with your payment gateway here.

    // Insert order into the database
    $order_id = $conn->insert_id; // Get the last inserted ID (useful for unique order IDs)
    $order_date = date("Y-m-d H:i:s");

    $order_query = "INSERT INTO orders (user_id, order_date) VALUES (?, ?)";
    $stmt = $conn->prepare($order_query);
    $stmt->bind_param("is", null, $order_date); // Null for user_id - assuming you have a user table and associate based on that
    $stmt->execute();
    $stmt->close();



    // Insert order items into the orders_items table
    foreach ($cart as $item_id => $quantity) {
        $order_item_query = "INSERT INTO orders_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($order_item_query);
        $stmt->bind_param("iii", $order_id, $item_id, $quantity);
        $stmt->execute();
        $stmt->close();
    }

    return true; // Indicate purchase was successful
}


// --- Example Usage ---

//  1. Get the cart data (This is just an example - fetch from session, database, etc.)
$cart = [
    1 => 2, // Product ID 1, quantity 2
    3 => 1, // Product ID 3, quantity 1
];

// 2. Handle the purchase
if (handlePurchase($cart, $conn)) {
    echo "<br>Your order has been placed successfully!";
    // Clear the cart (e.g., update session, delete from database)
    unset($cart);
} else {
    echo "<br>Purchase failed.";
}


// --- Database Setup (Create these tables if they don't exist) ---

// products table
/*
CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);
*/

// users table (if you have user accounts)
/*
CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);
*/

// orders table
/*
CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    order_date DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
*/

// orders_items table
/*
CREATE TABLE orders_items (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
*/
?>


<?php

// Database configuration (replace with your actual database details)
$db_host = 'localhost';
$db_name = 'shop';
$db_user = 'root';
$db_password = '';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (basic example, add more validation)
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = intval($_POST["quantity"]);
  $price = floatval($_POST["price"]);

  // Basic validation - more robust validation is crucial in real-world scenarios
  if (empty($name) || empty($email) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure quantity and price are positive numbers.";
  } else {
    // Sanitize input (important for security)
    $name = htmlspecialchars($name);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    $quantity = intval($quantity);
    $price = floatval($price);


    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL query
    $sql = "INSERT INTO purchases (name, email, quantity, price) VALUES (?, ?, ?, ?)";

    // Use prepared statements to prevent SQL injection
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      // Bind parameters
      $stmt->bind_param("ssid", $name, $email, $quantity, $price);

      // Execute the query
      if ($stmt->execute()) {
        $success = "Purchase successful! Thank you, " . $name . "!";
      } else {
        $error = "Query execution failed: " . $stmt->error;
      }

      // Close the statement
      $stmt->close();
    } else {
      $error = "Statement preparation failed.";
    }

    // Close the connection
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" max="100" value="1"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" value="10.00"><br><br>

    <button type="submit">Place Order</button>
  </form>

  <p>Note: This is a simplified example.  In a real application, you would handle errors, security, and potentially integrate with a payment gateway.</p>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Handles the purchase process.
 *
 * @param array $order_data  An associative array containing the order details.
 *                          Example:
 *                          [
 *                              'product_id' => 123,
 *                              'quantity' => 2,
 *                              'customer_name' => 'John Doe',
 *                              'customer_email' => 'john.doe@example.com'
 *                          ]
 */
function processPurchase(array $order_data) {
    // Validate Input (Crucial for security!)
    if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['customer_name']) || empty($order_data['customer_email'])) {
        return "Error: Missing required fields.";
    }
    
    $product_id = $order_data['product_id'];
    $quantity = $order_data['quantity'];
    $customer_name = $order_data['customer_name'];
    $customer_email = $order_data['customer_email'];

    // Validate Quantity (e.g., ensure it's a positive integer)
    if (!is_numeric($quantity) || $quantity <= 0) {
        return "Error: Invalid quantity.";
    }

    // *** In a real application, you'd implement proper input validation and sanitization here ***
    // This is a simplified example; a production system would have more robust validation.

    // --- Database Interaction ---

    // 1. Check if the product exists.
    $sql_check_product = "SELECT id FROM products WHERE id = ?";
    $stmt_check_product = $conn->prepare($sql_check_product);
    $stmt_check_product->bind_param("i", $product_id);
    $stmt_check_product->execute();
    $result = $stmt_check_product->get_result();

    if ($result->num_rows == 0) {
        $stmt_check_product->close();
        return "Error: Product not found.";
    }


    // 2.  Insert the order into the orders table
    $sql_insert_order = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) VALUES (?, ?, ?, ?, NOW())";
    $stmt_insert_order = $conn->prepare($sql_insert_order);
    $stmt_insert_order->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);
    $stmt_insert_order->execute();

    if ($stmt_insert_order->get_affected_rows() === 0) {
        $stmt_insert_order->close();
        return "Error: Failed to insert order into the database.";
    }

    $stmt_insert_order->close();

    // 3.  Update the product's stock (example)
    $sql_update_stock = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt_update_stock = $conn->prepare($sql_update_stock);
    $stmt_update_stock->bind_param("is", $quantity, $product_id);
    $stmt_update_stock->execute();

    if ($stmt_update_stock->get_affected_rows() === 0) {
        // Handle product stock update failure (e.g., log the error)
        // Consider what to do if stock isn't updated, like rollback the order.
        return "Error: Failed to update product stock.";
    }

    $stmt_update_stock->close();

    return "Order placed successfully! Order ID: " . $conn->insert_id; //Returns the auto-generated Order ID
}


// --- Example Usage (Simulated Form Handling) ---

//  Simulate receiving the order data from a form
$order_data = [
    'product_id' => 123,
    'quantity' => 2,
    'customer_name' => 'Jane Smith',
    'customer_email' => 'jane.smith@example.com'
];

// Process the purchase
$result = processPurchase($order_data);

// Display the result
echo "<pre>";
echo $result;
echo "</pre>";



// --- Database Setup (Example Tables) ---

//  Important:  Create these tables in your database!
/*
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    stock INT NOT NULL DEFAULT 0
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/

?>


<?php

// Database connection (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_user";
$db_password = "your_password";

// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle the purchase process
function processPurchase($cart, $payment_details) {
  // 1. Validate Cart Data
  if (empty($cart)) {
    return false; // Cart is empty
  }

  // 2. Update Inventory (Example - modify to fit your database)
  foreach ($cart as $product_id => $quantity) {
    // In a real system, you'd query your database to check stock
    // and update the inventory.  This is a simplified example:
    // Simulate stock deduction
    $stock = $stock - $quantity; 
    // Update the database here
    // Example:  $conn->query("UPDATE products SET stock = $stock WHERE id = $product_id");
  }

  // 3. Process Payment (Example - using a placeholder)
  if (processPayment($payment_details)) {
    // 4.  Create Order in Database (Example)
    $order_id = generateOrderId(); // Generate a unique order ID

    $order_data = [
      'order_id' => $order_id,
      'user_id' => $user_id, // Assuming you have a user ID
      'total_amount' => calculateTotal($cart),
      'order_date' => date('Y-m-d H:i:s'),
      'order_status' => 'pending'
    ];

    // Insert the order into the database
    // Example: $conn->query("INSERT INTO orders (order_id, user_id, total_amount, order_date, order_status) VALUES ($order_id, $user_id, $total_amount, '$order_date', '$order_status')");

    // 5.  Clear Cart (Important!)
    $cart = [];

    return true; // Purchase successful
  } else {
    return false; // Payment failed
  }
}

// Example Payment Processing (Placeholder - Replace with your payment gateway)
function processPayment($payment_details) {
  // In a real system, you'd integrate with a payment gateway (Stripe, PayPal, etc.)
  // This is a placeholder to demonstrate the process.
  // For testing, you could simply return true or false.

  // Simulate payment processing
  $payment_success = rand(0, 1); // 50% chance of success for testing.  DO NOT USE THIS IN PRODUCTION!

  // You would typically interact with your payment gateway API here
  // to process the payment.

  return $payment_success;
}

// Function to generate a unique order ID
function generateOrderId() {
  return bin2hex(random_bytes(16)); // Generate a random hexadecimal string.  Use a more robust method in production.
}

// Function to calculate the total amount of the cart
function calculateTotal($cart) {
  $total = 0;
  foreach ($cart as $product_id => $quantity) {
    // Assume you have a product table with price
    // $product_price = $conn->query("SELECT price FROM products WHERE id = $product_id")->fetch_assoc()['price'];
    $product_price = 10; // Replace with actual product price from your database
    $total += $product_price * $quantity;
  }
  return $total;
}



// ---  Example Usage (Simulated Data ) ---
// This section simulates a user adding items to their cart.
// In a real application, this data would come from a user interaction.

$cart = [
  1 => 2, // Product ID 1, quantity 2
  2 => 1, // Product ID 2, quantity 1
];

$payment_details = [
  'card_number' => '1234567890123456',
  'expiry_date' => '12/24',
  'cvv' => '123'
];

if (processPurchase($cart, $payment_details)) {
  echo "Purchase successful! Order ID: " . generateOrderId();
} else {
  echo "Purchase failed.  Please try again.";
}

?>


<?php
session_start();

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "shop";
$db_user = "root";
$db_pass = "";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a product to the cart
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    $product_exists = false;
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            $item['price'] = $item['price']; // No changes to price
            $product_exists = true;
            break;
        }
    }

    // If the product is not in the cart, add it
    if (!$product_exists) {
        $_SESSION['cart'][$product_id] = array(
            'product_id' => $product_id,
            'quantity' => $quantity,
            'price' => $product_id // Assuming product price is stored in product table.  Adjust if needed.
        );
    }

    $conn->close();
}

// Function to get the cart contents
function getCartContents() {
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return array();
    }
}

// Function to update the cart (e.g., change quantity)
function updateCartItem($product_id, $new_quantity) {
    $conn = connectToDatabase();

    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
        // Validate quantity
        if ($new_quantity > 0) {
          $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
        } else {
          // You might want to remove the item entirely if quantity is invalid
          unset($_SESSION['cart'][$product_id]);
        }
    }

    $conn->close();
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    $conn = connectToDatabase();

    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }

    $conn->close();
}

// Function to calculate the total cart value
function calculateTotal() {
    $total = 0;
    $cart = getCartContents();
    foreach ($cart as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

// Handle Add to Cart functionality
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
}

// Handle Update Cart Item functionality
if (isset($_POST['update_cart'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateCartItem($product_id, $new_quantity);
}

// Handle Remove Item functionality
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeItemFromCart($product_id);
}

// Display the Cart
$cart_items = getCartContents();
$total = calculateTotal();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>

    <table>
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr>
                    <td><?php echo $item['product_id']; //  Display product ID here - replace with a product name lookup if needed.
                    //  In a real application, fetch product details here.  For example:
                    //  $product = $db->getProductById($item['product_id']);
                    //  echo $product['name'];
                    ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td><?php echo $item['price']; ?></td>
                    <td><?php echo $item['quantity'] * $item['price']; ?></td>
                    <td>
                        <form method="post">
                            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                            <input type="hidden" name="quantity" value="<?php echo $item['quantity']; ?>">
                            <button type="submit" name="update_cart">Update</button>
                        </form>
                        <form method="post">
                            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                            <button type="submit" name="remove_from_cart">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

    <p>Total: $<?php echo $total; ?></p>

<?php endif; ?>

<a href="checkout.php">Checkout</a>  <!-- Replace checkout.php with your actual checkout page -->

</body>
</html>


<?php
session_start();

// Database connection (replace with your actual database credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

// Create database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, create a new cart array
    $_SESSION['cart'] = array();
  }

  // Check if product already exists in cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'product_id' => $product_id  // For easy updates later
    );
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($conn, $product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Function to remove an item from the cart
function removeFromCart($conn, $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Function to get the cart contents
function getCartContents($conn) {
  $cart_contents = array();
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $query = "SELECT product_name, price FROM products WHERE product_id = " . $product_id;
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      $row = $result->fetch_assoc();
      $cart_contents[] = array(
        'product_id' => $product_id,
        'product_name' => $row['product_name'],
        'price' => $row['price'],
        'quantity' => $item['quantity']
      );
    }
  }
  return $cart_contents;
}

// --- Cart Actions ---

// Add to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  addToCart($conn, $product_id, $quantity);
  // Redirect to cart page
  header("Location: cart.php");
  exit();
}

// Update Quantity
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($conn, $product_id, $new_quantity);
  header("Location: cart.php");
  exit();
}

// Remove from Cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($conn, $product_id);
  header("Location: cart.php");
  exit();
}

// Get Cart Contents
$cart_contents = getCartContents($conn);

// --- Display Cart Page (cart.php) ---

?>
<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    table {
      border-collapse: collapse;
      width: 80%;
      margin: 20px auto;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
  </style>
</head>
<body>

  <h2>Shopping Cart</h2>

  <?php if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
  } else { ?>
    <table>
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        $total = 0;
        foreach ($cart_contents as $item) {
          $product_name = $item['product_name'];
          $price = $item['price'];
          $quantity = $item['quantity'];
          $total_item = $price * $quantity;
          $total += $total_item;

          echo "<tr>";
          echo "<td>" . $product_name . "</td>";
          echo "<td>$" . number_format($price, 2) . "</td>";
          echo "<td>" . $quantity . "</td>";
          echo "<td>$" . number_format($total_item, 2) . "</td>";
          echo "<td><a href='cart.php?action=remove&product_id=" . $item['product_id'] . "'>Remove</a></td>";
          echo "</tr>";
        } ?>
      </tbody>
    </table>
    <p><strong>Total:</strong> $" . number_format($total, 2) . "</p>
  <?php } ?>

  <form method="post" action="cart.php">
    <input type="hidden" name="product_id" value="">
    <input type="hidden" name="action" value="add">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate inputs (Basic example - expand for real-world scenarios)
  $product_name = $_POST["product_name"];
  $quantity = (int)$_POST["quantity"];
  $price = (float)$_POST["price"];

  // Error handling (Check if required fields are present and valid)
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all the fields and enter valid numbers.";
  } else {
    // Perform the purchase (Simulating a purchase - in real application, you'd handle payment gateway integration etc.)
    $total_amount = $quantity * $price;

    // Store the order data (Simulating a database insertion - replace with your actual database logic)
    $order_id = generate_order_id(); // Function to generate a unique order ID
    $order_data = [
      "order_id" => $order_id,
      "product_name" => $product_name,
      "quantity" => $quantity,
      "price" => $price,
      "total_amount" => $total_amount,
      "order_date" => date("Y-m-d H:i:s")
    ];

    //  Simulate saving to the database (Replace with your database insertion query)
    save_order($order_data);

    // Display success message
    $success_message = "Order placed successfully! Your order ID is: " . $order_id;
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php endif; ?>

  <?php if (isset($success_message)): ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php endif; ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per Unit:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
  </form>

</body>
</html>


<?php

// Configuration (replace with your actual values)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1)
{
    if (isset($products[$product_id])) {
        if ($quantity <= 0) {
            echo "<p>Invalid quantity. Please enter a positive number.</p>";
            return;
        }

        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['name' => $products[$product_id]['name'], 'price' => $products[$product_id]['price'], 'quantity' => $quantity];
        }

        echo "<p>Added " . $quantity . " " . $products[$product_id]['name'] . " to your cart.</p>";
    } else {
        echo "<p>Product ID " . $product_id . " not found.</p>";
    }
}


// Function to view the cart
function view_cart()
{
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $id => $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
        }
        echo "</ul>";
        echo "<p><strong>Total:</strong> $" .  total_cart_value($cart) . "</p>"; // Total calculation
    }
}


// Function to calculate total cart value
function total_cart_value($cart)
{
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return round($total, 2); // Round to 2 decimal places
}

// Function to remove an item from the cart
function remove_from_cart($product_id)
{
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
        echo "<p>" . $products[$product_id]['name'] . " removed from your cart.</p>";
    } else {
        echo "<p>Product ID " . $product_id . " not found in your cart.</p>";
    }
}

// Function to clear the cart
function clear_cart()
{
    $cart = [];
    echo "<p>Your cart has been cleared.</p>";
}


// --- Example Usage (This section demonstrates how to use the functions) ---

// Add some items to the cart
add_to_cart(1, 2); // Add 2 T-Shirts
add_to_cart(2, 1); // Add 1 Jeans
add_to_cart(3, 3); // Add 3 Hats

// View the cart
view_cart();

// Remove an item from the cart
remove_from_cart(1);

// View the cart again
view_cart();

// Clear the cart
clear_cart();

// View the cart again
view_cart();

?>


<?php

// Function to handle the purchase process
function handlePurchase() {
  // Get user input
  $productName = $_POST['productName'];
  $quantity = (int)$_POST['quantity']; // Cast to integer
  $price = (float)$_POST['price'];  // Cast to float (for decimals)

  // Validate input (very important!)
  if (empty($productName) || $quantity <= 0 || $price <= 0) {
    echo "<p>Invalid input. Please enter a product name, a positive quantity, and a positive price.</p>";
    return;
  }


  // Calculate the total cost
  $totalCost = $quantity * $price;

  // Display the purchase details
  echo "<p><strong>Product:</strong> " . htmlspecialchars($productName) . "</p>";
  echo "<p><strong>Quantity:</strong> " . $quantity . "</p>";
  echo "<p><strong>Price per item:</strong> $" . $price . "</p>";
  echo "<p><strong>Total Cost:</strong> $" . number_format($totalCost, 2) . "</p>"; // Format with 2 decimal places
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  handlePurchase();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Calculator</title>
</head>
<body>

  <h1>Purchase Calculator</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="productName">Product Name:</label>
    <input type="text" id="productName" name="productName" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Calculate Purchase">
  </form>

</body>
</html>


<?php

// Data storage (replace with database in a real application)
$cart = [];
$product_inventory = [
    "product1" => 10, // Quantity in stock
    "product2" => 5,
    "product3" => 20
];

// Function to add a product to the cart
function add_to_cart($product_id, $quantity = 1) {
    if (isset($product_inventory[$product_id])) {
        if ($product_inventory[$product_id] >= $quantity) {
            if (!isset($cart[$product_id])) {
                $cart[$product_id] = $quantity;
            } else {
                $cart[$product_id] += $quantity;
            }
            echo "<p>Added " . $quantity . " units of " . $product_id . " to your cart.</p>";
        } else {
            echo "<p>Sorry, we only have " . $product_inventory[$product_id] . " units of " . $product_id . " in stock.</p>";
        }
    } else {
        echo "<p>Product " . $product_id . " not found.</p>";
    }
}


// Function to view the cart
function view_cart() {
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Your Cart</h2>";
        echo "<ul>";
        foreach ($cart as $product_id => $quantity) {
            $product_name = get_product_name($product_id); // Get the product name (see function below)
            echo "<li>" . $product_name . " - Quantity: " . $quantity . "</li>";
        }
        echo "</ul>";
        echo "<p><a href='checkout.php'>Proceed to Checkout</a></p>";
    }
}

// Function to get product name (for better display)
function get_product_name($product_id) {
    switch ($product_id) {
        case "product1":
            return "Awesome T-Shirt";
        case "product2":
            return "Cool Mug";
        case "product3":
            return "Fancy Hat";
        default:
            return "Unknown Product";
    }
}


// Function to simulate checkout (in a real app, this would process payment)
function checkout() {
    echo "<h2>Checkout</h2>";
    echo "<p>Thank you for your purchase!</p>";
    // In a real application, you'd process payment here.
    // Clear the cart after a successful order (optional)
    $cart = [];
    echo "<p>Your cart has been emptied.</p>";
}



// --- Handling Requests (Simulating a Form Submission) ---

// Example:  Adding a product to the cart
if (isset($_GET['add_to_cart']) && $_GET['add_to_cart'] == 'true') {
    $product_id = $_POST['product_id']; // Assuming the form uses POST

    if (isset($product_id)) {
        add_to_cart($product_id);
    }
}


// Example: Viewing the cart
if (isset($_GET['view_cart']) && $_GET['view_cart'] == 'true') {
    view_cart();
}

// Example: Checkout
if (isset($_GET['checkout']) && $_GET['checkout'] == 'true') {
    checkout();
}


// --- HTML Form for adding to cart ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store</title>
</head>
<body>

<h1>Welcome to Our Store</h1>

<h2>Products</h2>

<ul>
    <li>
        <label for="product1">Awesome T-Shirt (product1) - Price: $20</label><br>
        <input type="checkbox" id="product1" name="product_id" value="product1">
        <br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </li>
    <li>
        <label for="product2">Cool Mug (product2) - Price: $10</label><br>
        <input type="checkbox" id="product2" name="product_id" value="product2">
        <br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </li>
    <li>
        <label for="product3">Fancy Hat (product3) - Price: $30</label><br>
        <input type="checkbox" id="product3" name="product_id" value="product3">
        <br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </li>
</ul>

<br>
<a href="?view_cart=true" >View Cart</a> | <a href="?checkout=true">Checkout</a>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual details)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}


// --------------------------------------------------
// Purchase Functionality
// --------------------------------------------------

/**
 * Processes a purchase request.
 *
 * @param array $cartData The contents of the shopping cart.
 * @return string  A message indicating the success or failure of the purchase.
 */
function processPurchase($cartData) {
  $conn = connectToDatabase();

  // Validate data - IMPORTANT!  Add more validation here
  if (empty($cartData)) {
    return "Cart is empty. Please add items to your cart.";
  }

  // Assuming you have a 'products' table with 'id', 'name', 'price'
  // Adjust table and column names as needed.

  $sql = "INSERT INTO orders (user_id, order_date) VALUES (NULL, NOW())";  // user_id can be NULL if you don't have user authentication.
  $result = $conn->query($sql);

  if (!$result) {
    return "Error inserting order data.  Error: " . $conn->error;
  }

  // Loop through the cart and insert items into the 'order_items' table
  foreach ($cartData as $item) {
    $product_id = $item['product_id'];
    $quantity = $item['quantity'];

    $sql_item = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, $product_id, $quantity)";
    if (!$conn->query($sql_item)) {
      return "Error inserting order item.  Error: " . $conn->error;
    }
  }

  // Clear the cart after successful purchase (Implement your cart clearing logic here)
  // This is a placeholder - you need to update your cart storage.
  $_SESSION['cart'] = [];

  return "Purchase successful! Your order ID is: " . $conn->insert_id;
}



// --------------------------------------------------
// Handle Form Submission (Example)
// --------------------------------------------------

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Assuming you have a 'cart' session variable

  if (isset($_SESSION['cart'])) {
    $cartData = $_SESSION['cart'];
    $purchaseResult = processPurchase($cartData);
    echo "<p>" . $purchaseResult . "</p>";
  } else {
    echo "<p>Error: Cart is not set.</p>";
  }
}

// --------------------------------------------------
// Example Cart Data (for demonstration)
// --------------------------------------------------

// Example Cart
$_SESSION['cart'] = [
  ['product_id' => 1, 'quantity' => 2],
  ['product_id' => 2, 'quantity' => 1],
];

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  // Display cart items (for demonstration)
  if (isset($_SESSION['cart'])) {
    echo "<h2>Items in Cart:</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
      echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
  }
  ?>

  <form method="post" action="">
    <input type="submit" value="Complete Purchase">
  </form>

</body>
</html>


<?php

// Database connection (Replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}


// Function to handle the purchase process
function handlePurchase($orderData) {
    global $conn;

    // Validate data (Essential for security)
    if (empty($orderData['product_id']) || empty($orderData['quantity']) || empty($orderData['customer_name']) || empty($orderData['customer_email'])) {
        return "Error: Missing required fields.";
    }
    
    // Sanitize data (Important to prevent SQL Injection)
    $product_id = $conn->real_escape_string($orderData['product_id']);
    $quantity = $conn->real_escape_string($orderData['quantity']);
    $customer_name = $conn->real_escape_string($orderData['customer_name']);
    $customer_email = $conn->real_escape_string($orderData['customer_email']);


    // Check if the product exists
    $stmt = $conn->prepare("SELECT id, price FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        return "Error: Product ID not found.";
    }

    // Calculate the total price
    $total_price = $product['price'] * $quantity;

    // Insert the order into the database
    $stmt = $conn->prepare("INSERT INTO orders (product_id, quantity, customer_name, customer_email, total_price, order_date) VALUES (?, ?, ?, ?, ?, NOW())");
    $stmt->execute([$product_id, $quantity, $customer_name, $customer_email, $total_price]);

    return "Order placed successfully! Order ID: " . $conn->lastInsertId();
}

// --- Example Usage (For demonstration purposes - this will be in a form submission) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $orderData = [];
    if (isset($_POST['product_id'])) {
        $orderData['product_id'] = $_POST['product_id'];
    }
    if (isset($_POST['quantity'])) {
        $orderData['quantity'] = $_POST['quantity'];
    }
    if (isset($_POST['customer_name'])) {
        $orderData['customer_name'] = $_POST['customer_name'];
    }
    if (isset($_POST['customer_email'])) {
        $orderData['customer_email'] = $_POST['customer_email'];
    }

    $result = handlePurchase($orderData);
    echo $result;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Order</h1>

    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name" required><br><br>

        <label for="customer_email">Customer Email:</label>
        <input type="email" id="customer_email" name="customer_email" required><br><br>

        <button type="submit">Place Order</button>
    </form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate input (Important for security)
  $name = trim($_POST["name"]);
  $quantity = intval($_POST["quantity"]);
  $price = floatval($_POST["price"]);

  if (empty($name) || $quantity <= 0 || $price <= 0) {
    $error = "Please fill in all fields and ensure quantity and price are positive numbers.";
  } else {
    // Process the purchase
    $total = $quantity * $price;

    // Add the purchase to the database (Simplified Example)
    try {
      $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
      $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

      $stmt = $pdo->prepare("INSERT INTO purchases (name, quantity, price, total) VALUES (:name, :quantity, :price, :total)");
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->bindParam(':price', $price);
      $stmt->bindParam(':total', $total);
      $stmt->execute();

      $message = "Purchase successful!  Your order has been recorded.";

    } catch (PDOException $e) {
      $message = "Error: " . $e->getMessage();
    } finally {
      $pdo = null;  // Close the database connection
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Make a Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" placeholder="Enter product name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" value="<?php echo isset($quantity) ? intval($quantity) : ''; ?>">
    <br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" placeholder="Enter price" step="0.01" value="<?php echo isset($price) ? floatval($price) : ''; ?>">
    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
  <?php } ?>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase creation
function createPurchase($cart_id, $customer_name, $customer_email, $payment_method) {
  global $conn; // Access the database connection

  // Sanitize input to prevent SQL injection
  $customer_name = $conn->real_escape_string($customer_name);
  $customer_email = $conn->real_escape_string($customer_email);
  $payment_method = $conn->real_escape_string($payment_method);

  // SQL Query to create the purchase
  $sql = "INSERT INTO purchases (cart_id, customer_name, customer_email, payment_method, purchase_date)
          VALUES (".$cart_id.", '".$customer_name."', '".$customer_email."', '".$payment_method."', NOW())";

  if ($conn->query($sql) === TRUE) {
    return TRUE; // Success
  } else {
    return FALSE; // Failure
  }
}

// --- Example Usage (Demonstration) ---

// 1. Assume we have a cart ID of 5 (This would typically come from a form submission)
$cart_id = 5;

// 2. Get customer information (This would typically be taken from a form)
$customer_name = $_POST['customer_name']; // Get from form input
$customer_email = $_POST['customer_email']; // Get from form input
$payment_method = $_POST['payment_method']; // Get from form input


// 3.  Create the purchase
$purchase_created = createPurchase($cart_id, $customer_name, $customer_email, $payment_method);

// 4. Display the result
if ($purchase_created) {
  echo "Purchase created successfully!  Cart ID: " . $cart_id;
} else {
  echo "Error creating purchase. Please try again.";
}


// ---  Database Table Structure (Example) ---
/*
CREATE TABLE purchases (
    purchase_id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    purchase_date DATETIME DEFAULT NOW()
);
*/


?>


<?php

// Database connection details
$dbHost = "localhost";
$dbUsername = "your_username";
$dbPassword = "your_password";
$dbName = "your_database";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate form data (basic example - improve for production)
  $name = isset($_POST["name"]) ? trim($_POST["name"]) : "";
  $email = isset($_POST["email"]) ? trim($_POST["email"]) : "";
  $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 0;

  // Check if all required fields are filled
  if (empty($name) || empty($email) || $quantity <= 0) {
    $error = "Please fill in all required fields.";
  } else {
    // Sanitize input (IMPORTANT for security - use more robust validation/escaping)
    $name = htmlspecialchars($name);
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Prepare SQL query - IMPORTANT for security (prevent SQL injection)
    $sql = "INSERT INTO orders (name, email, quantity) VALUES (?, ?, ?)";

    // Use prepared statement
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ssi", $name, $email, $quantity);

    if ($stmt->execute()) {
      $success = "Order placed successfully! Order ID: " . $conn->insert_id;
    } else {
      $error = "An error occurred while placing the order: " . $stmt->error;
    }

    $stmt->close();
  }
}

// Database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Order</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">
    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Quantity" min="1" value="<?php echo isset($quantity) ? intval($quantity) : 0; ?>">
    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <br><br>

  <h2>Order History</h2>
  <?php
    // Fetch order history (example - adapt to your database structure)
    $order_query = "SELECT id, name, email, quantity, order_date FROM orders";
    $result = $conn->query($order_query);

    if ($result->num_rows > 0) {
      echo "<h3>Order History:</h3>";
      while($row = $result->fetch_assoc()) {
        echo "<div>";
        echo "<strong>Order ID:</strong> " . $row["id"] . "<br>";
        echo "<strong>Name:</strong> " . $row["name"] . "<br>";
        echo "<strong>Email:</strong> " . $row["email"] . "<br>";
        echo "<strong>Quantity:</strong> " . $row["quantity"] . "<br>";
        echo "<strong>Order Date:</strong> " . $row["order_date"] . "<br>";
        echo "</div>";
      }
    } else {
      echo "<p>No orders found.</p>";
    }

  ?>

</body>
</html>


<?php

// --- Configuration ---
$cart = array(); // Array to store items in the cart
$product_data = array(
    1 => array('name' => 'T-Shirt', 'price' => 20.00, 'description' => 'Comfortable cotton t-shirt.'),
    2 => array('name' => 'Jeans', 'price' => 50.00, 'description' => 'Classic blue denim jeans.'),
    3 => array('name' => 'Hat', 'price' => 15.00, 'description' => 'Stylish baseball cap.')
);

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.  Defaults to 1.
 */
function addToCart($product_id, $quantity = 1) {
    if (isset($product_data[$product_id])) {
        $product = $product_data[$product_id];

        //Check if the item is already in the cart
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = array(
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $quantity,
                'description' => $product['description']
            );
        }
    } else {
        echo "Product ID $product_id not found.";
    }
}

/**
 * Displays the shopping cart.
 */
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . number_format($item['price'], 2) . "<br>";
        echo "Description: " . $item['description'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Total Item Price: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p><a href='checkout.php'>Checkout</a></p>"; //Link to checkout page
}

/**
 * Simulates the checkout process.  In a real application, this would involve
 * database interaction, payment processing, and order confirmation.
 */
function checkout() {
    echo "<h2>Checkout</h2>";
    echo "<p>Thank you for your order!</p>";
    echo "<p>Your order will be processed shortly.</p>";
    // In a real application, this is where you would:
    // 1.  Validate the order (ensure quantities are valid, etc.)
    // 2.  Process payment through a payment gateway.
    // 3.  Store the order in a database.
    // 4.  Send an order confirmation email to the customer.

    //Clear the cart after checkout (optional)
    $cart = array();
}


// --- Example Usage and Handling ---

//Add items to the cart
addToCart(1, 2); // Add 2 T-Shirts
addToCart(2, 1); // Add 1 pair of Jeans
addToCart(3, 3); // Add 3 Hats


//Display the cart
displayCart();

//Simulate checkout
//checkout();
?>


<?php
session_start();

// Configuration
$items = []; // Array to store cart items
$item_id = 1; // Unique item ID
$db_file = 'cart.txt'; // File to store cart data

// Function to load cart data from file
function loadCart() {
    if (file_exists($db_file)) {
        $cartData = file_get_contents($db_file);
        if ($cartData = json_decode($cartData, true)) {
            return $cartData;
        } else {
            return [];
        }
    }
    return [];
}

// Function to save cart data to file
function saveCart($cartData) {
    file_put_contents($db_file, json_encode($cartData, JSON_PRETTY_PRINT));
}

// Load cart data
$cartData = loadCart();

// ------------------- Cart Management Functions -------------------

// Add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    global $items, $item_id;

    // Check if the item is already in the cart
    $item_found = false;
    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $items[$key]['quantity'] += $quantity;
            $item_found = true;
            break;
        }
    }

    // If the item isn't in the cart, add it
    if (!$item_found) {
        $items[$item_id] = [
            'product_id' => $product_id,
            'quantity' => $quantity,
        ];
        $item_id++;
    }

    saveCart($items);
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    global $items;

    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($items[$key]);
            // Re-index array to prevent gaps
            $i = 0;
            foreach ($items as $k => $v) {
                $items[$i] = $v;
                $i++;
            }
            saveCart($items);
            return true;
        }
    }
    return false;
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    global $items;

    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $items[$key]['quantity'] = $new_quantity;
            saveCart($items);
            return true;
        }
    }
    return false;
}


// Get the cart contents
function get_cart_contents() {
    return $items;
}


// ------------------- Display Cart -------------------

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($items as $key => $item) {
        echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";

    // Calculate total price (assuming a simple price per item)
    $total_price = 0;
    foreach ($items as $key => $item) {
        // Replace this with your actual price retrieval logic
        $price = 10; // Placeholder price
        $total_price += $price * $item['quantity'];
    }
    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}

// ------------------- Example Usage (Simulating Actions) -------------------

// Example: Add a product to the cart
// add_to_cart(1, 2);

// Example: Remove a product
// remove_from_cart(1);

// Example: Update quantity
// update_quantity(1, 5);

?>

<!--  HTML form to add items to the cart (simulated) -->
<h2>Add Items to Cart</h2>
<form method="post">
  <label for="product_id">Product ID:</label>
  <select name="product_id" id="product_id">
    <?php
    //Simulate product list (replace with actual data retrieval)
    $products = [
        1 => ['name' => 'Laptop', 'price' => 2000],
        2 => ['name' => 'Mouse', 'price' => 25],
        3 => ['name' => 'Keyboard', 'price' => 75]
    ];

    foreach ($products as $id => $product) {
        echo "<option value='" . $id . "'>" . $id . "</option>";
    }
    ?>
  </select><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>
  <input type="submit" value="Add to Cart">
</form>


<?php

// Assuming you have a database connection established
// (Replace with your actual database connection)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    // Validate Inputs (IMPORTANT - Add more robust validation)
    if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
        return "Error: All fields are required.";
    }

    // Example:  Add the order to the database
    $sql = "INSERT INTO orders (cart_id, customer_name, customer_email, payment_method, order_date) VALUES (:cart_id, :customer_name, :customer_email, :payment_method, NOW())";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->bindParam(':customer_name', $customer_name);
    $stmt->bindParam(':customer_email', $customer_email);
    $stmt->bindParam(':payment_method', $payment_method);

    if ($stmt->execute()) {
        // Update the cart status to 'processed'
        $update_cart_sql = "UPDATE carts SET status = 'processed' WHERE id = :cart_id";
        $update_stmt = $conn->prepare($update_cart_sql);
        $update_stmt->bindParam(':cart_id', $cart_id);
        if ($update_stmt->execute()) {
            return "Purchase successful! Order ID: " . $conn->lastInsertId();  // Returns the order ID
        } else {
            return "Error updating cart status.";
        }
    } else {
        return "Error creating order.";
    }
}



// --- Example Usage (This would typically be handled by a form submission) ---

// Assuming $cart_id and $payment_method are received from a form
//  (e.g., $_POST['cart_id'])
$cart_id = $_POST['cart_id'];
$payment_method = $_POST['payment_method'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];


$result = handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);
echo $result;

// --- Database Setup (Example Tables - Adjust to your needs) ---
/*
CREATE TABLE carts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,  -- Link to product table
    quantity INT,
    status ENUM('active', 'processed', 'cancelled') DEFAULT 'active',
    total_price DECIMAL(10,2)
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT,
    customer_name VARCHAR(255),
    customer_email VARCHAR(255),
    payment_method VARCHAR(50),
    order_date DATETIME,
    FOREIGN KEY (cart_id) REFERENCES carts(id)
);
*/

?>


<?php

// --- Database Configuration (Replace with your actual values) ---
$db_host = "localhost";
$db_name = "e_commerce";
$db_user = "your_username";
$db_password = "your_password";
// --- End Database Configuration ---

//  --- Product Data (Example - Replace with your actual database query) ---
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200, 'stock' => 5],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25, 'stock' => 50],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75, 'stock' => 20],
];

// --- Shopping Cart (Simulated for this example) ---
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    global $cart;

    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id]['quantity'] += $quantity;
    } else {
        $cart[$product_id] = ['quantity' => $quantity];
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    global $cart;

    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id]['quantity'] = $quantity;
    } else {
        // Handle the case where the item isn't in the cart - perhaps log an error or redirect.
        // For this example, we'll just silently do nothing.
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    global $cart;

    if (array_key_exists($product_id, $cart)) {
        unset($cart[$product_id]);
    }
}

// Function to calculate the total cart value
function calculateTotal() {
    global $cart;
    $total = 0;
    foreach ($cart as $item_id => $details) {
        $product = getProductById($item_id);  // Use getProductById function
        if ($product) {
            $total_item_price = $product['price'] * $details['quantity'];
            $total += $total_item_price;
        }
    }
    return $total;
}

//  Helper function to get product details by ID (simulated database query)
function getProductById($product_id) {
    global $products;
    if (array_key_exists($product_id, $products)) {
        return $products[$product_id];
    }
    return null;
}

// --- Purchase Functionality ---

function processPurchase() {
    global $cart;
    $total = calculateTotal();

    if (empty($cart)) {
        return false; // Cart is empty
    }

    // **Important:** In a real application, you would:
    // 1. Authenticate the user.
    // 2. Process the payment (using a payment gateway).
    // 3. Update the database with the order details (product IDs, quantities, user ID, order date, etc.).
    // 4. Empty the cart.

    // For this simulated example, we'll just print a success message.
    echo "<h2>Order Summary</h2>";
    echo "<p>Total: $" . number_format($total, 2) . "</p>";
    echo "<p>Thank you for your order! (Simulated)</p>";
    // Empty the cart (simulated)
    $cart = [];

    return true; // Purchase completed (simulated)
}

// ---  Example Usage/UI (for demonstration)  ---

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    addToCart($product_id, $quantity);
    echo "<p>Item added to cart.</p>";
}

// 2. Update Cart Quantity
if (isset($_POST['update_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    updateCartQuantity($product_id, $quantity);
    echo "<p>Cart updated.</p>";
}

// 3. Remove from Cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    removeFromCart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// 4. Process Purchase
if (isset($_POST['purchase'])) {
    processPurchase();
}


// --- Display Cart Items (for demonstration) ---
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $details) {
        $product = getProductById($item_id);
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . " x " . $details['quantity'] . " = $" . number_format($product['price'] * $details['quantity'], 2) . "</li>";
    }
    echo "</ul>";
}

?>


<?php

// Database Configuration (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate and sanitize inputs (IMPORTANT for security!)
    $product_name = htmlspecialchars($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);

    // Check if inputs are valid
    if (empty($product_name) || $quantity <= 0 || $price <= 0) {
        $error_message = "Please fill in all fields and enter valid quantities and prices.";
    } else {
        // Create a database connection
        $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare and execute the SQL query
        $sql = "INSERT INTO purchases (product_name, quantity, price) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);

        if ($stmt) {
            $stmt->bind_param("ssi", $product_name, $quantity, $price); // "ssi" indicates string, string, integer
            if ($stmt->execute()) {
                $success_message = "Purchase added successfully!";
            } else {
                $error_message = "Error adding purchase: " . $stmt->error;
            }

            $stmt->close();
        } else {
            $error_message = "Error preparing statement.";
        }

        $conn->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Add Purchase</h1>

<?php
if (isset($error_message)) {
    echo "<p style='color: red;'>$error_message</p>";
}

if (isset($success_message)) {
    echo "<p style='color: green;'>$success_message</p>";
}
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" required>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" required>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" placeholder="Enter price" required>

    <button type="submit">Add to Purchase</button>
</form>

<a href="index.php">Return to Home</a>

</body>
</html>


<?php

// Sample Data (Replace with your actual database connection and product data)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

$cart = [];  // Initialize an empty cart

// Function to add an item to the cart
function addToCart($product_id, $cart) {
    if (array_key_exists($product_id, $products)) {
        $product = $products[$product_id];
        $cart[] = $product;  // Add the product to the cart array
        return true; // Indicate success
    }
    return false; // Indicate failure (product not found)
}

// Function to view the cart
function viewCart($cart) {
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<h2>Your Cart</h2>";
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
        }
        echo "</ul>";
        
        // Calculate total
        $total = array_sum(array_column($cart, 'price'));
        echo "<p><strong>Total: $" . $total . "</strong></p>";
    }
}

// Function to remove an item from the cart (example - needs product_id)
function removeFromCart($product_id, &$cart) {
    // Iterate through the cart and remove the item
    foreach ($cart as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($cart[$key]);
            return true;
        }
    }
    return false; // Item not found
}


// Handle form submission (example)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if 'add_to_cart' is present in the form data
    if (isset($_POST['add_to_cart'])) {
        $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
        addToCart($product_id, $cart);
    }

    if (isset($_POST['remove_item'])) {
        $product_id = (int)$_POST['product_id'];
        removeFromCart($product_id, $cart);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<h2>Available Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "<br>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $id . "'>";
        echo "<button type='submit' name='add_to_cart'>Add to Cart</button>";
        echo "</form></li>";
    }
    ?>
</ul>

<hr>

<?php viewCart($cart); ?>


</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli, PDO)
// For simplicity, we'll use a placeholder for the database connection:
$db = new mysqli("localhost", "username", "password", "database_name");

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Function to handle product purchase
function purchaseProduct($product_id, $quantity, $user_id) {
    // **1. Input Validation & Security**
    //  - Validate product_id, quantity, and user_id to prevent SQL injection and other vulnerabilities.
    //  - Sanitize inputs before using them in a query.
    $product_id = (int)$product_id; // Convert to integer to prevent type-based SQL injection
    $quantity = (int)$quantity;
    $user_id = (int)$user_id;

    if ($quantity <= 0) {
        return "Invalid quantity.  Quantity must be greater than 0.";
    }

    // **2. Check Product Availability**
    $sql = "SELECT * FROM products WHERE id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return "Product not found.";
    }

    $product = $result->fetch_assoc();

    if ($product['stock'] < $quantity) {
        $stmt->close();
        return "Not enough stock available.";
    }

    // **3. Update Stock**
    $sql = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("is", $quantity, $product_id);
    $stmt->execute();

    // **4. Record Purchase (Add to Order Table)**
    $sql = "INSERT INTO orders (user_id, product_id, quantity, purchase_date) VALUES (?, ?, ?, NOW())";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("iii", $user_id, $product_id, $quantity);
    $stmt->execute();

    // **5.  Clean up**
    $stmt->close();

    return "Purchase successful! Order ID: " . $db->insert_id;
}


// **Example Usage (Handling Form Submission - Simulate a Request)**
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    $user_id = $_SESSION["user_id"]; // Assuming you have a user_id stored in session

    $purchase_result = purchaseProduct($product_id, $quantity, $user_id);
    echo "<p>" . $purchase_result . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Purchase</title>
</head>
<body>

<h1>Product Purchase</h1>

<form method="post" action="">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Purchase</button>
</form>

</body>
</html>


<?php

// Database connection (replace with your database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
    // Sanitize input (important for security)
    $product_id = mysqli_real_escape_string($conn, $product_id);
    $quantity = mysqli_real_escape_string($conn, $quantity);


    // Check if the product is already in the cart
    $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Product already exists in cart, update the quantity
        $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
        if (!$conn->query($query)) {
            echo "Update error: " . $conn->error;
        }
    } else {
        // Product not in cart, add it
        $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
        if (!$conn->query($query)) {
            echo "Insert error: " . $conn->error;
        }
    }
}

// Function to get the cart contents
function getCartContents($conn) {
    $query = "SELECT * FROM cart";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Product ID: " . $row["product_id"]. " - Quantity: " . $row["quantity"]. "<br>";
        }
    } else {
        echo "Cart is empty";
    }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
    // Sanitize input
    $product_id = mysqli_real_escape_string($conn, $product_id);

    $query = "DELETE FROM cart WHERE product_id = '$product_id'";
    if (!$conn->query($query)) {
        echo "Delete error: " . $conn->error;
    }
}



// --- Example Usage (Simulated Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if 'add_to_cart' is submitted
    if (isset($_POST["add_to_cart"])) {
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        addToCart($conn, $product_id, $quantity);
    }

    // Check if 'remove_from_cart' is submitted
    if (isset($_POST["remove_from_cart"])) {
        $product_id = $_POST["product_id"];
        removeFromCart($conn, $product_id);
    }

    // Always refresh the cart contents
    getCartContents($conn);
}



// --- Display the Cart Form ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

    <h1>Purchase Functionality</h1>

    <h2>Add to Cart</h2>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>

        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>

    <h2>Cart Contents</h2>
    <?php getCartContents($conn); ?>

    <h2>Remove from Cart</h2>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID to Remove:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>
        <input type="submit" name="remove_from_cart" value="Remove from Cart">
    </form>



</body>
</html>


<?php

// Sample Products (In a real app, this would come from a database)
$products = [
    [
        'id' => 1,
        'name' => 'T-Shirt',
        'price' => 20.00
    ],
    [
        'id' => 2,
        'name' => 'Mug',
        'price' => 10.00
    ],
    [
        'id' => 3,
        'name' => 'Notebook',
        'price' => 5.00
    ]
];

// Initialize Orders
$orders = [];

// Function to display available products
function displayProducts() {
    echo "<h2>Available Products:</h2>";
    echo "<ul>";
    foreach ($products as $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}

// Function to handle order creation
function createOrder($productId, $quantity) {
    // Validate product ID and quantity
    $product = null;
    foreach ($products as $p) {
        if ($p['id'] == $productId) {
            $product = $p;
            break;
        }
    }

    if ($product === null) {
        echo "<p style='color:red;'>Product with ID " . $productId . " not found.</p>";
        return;
    }

    if ($quantity <= 0) {
        echo "<p style='color:red;'>Quantity must be greater than 0.</p>";
        return;
    }

    // Create the order object
    $order = [
        'id' => uniqid(), // Generate a unique order ID (for demonstration)
        'productId' => $productId,
        'product' => $product,
        'quantity' => $quantity,
        'total' => $product['price'] * $quantity
    ];

    // Add the order to the orders array
    $orders[] = $order;

    echo "<p style='color:green;'>Order created successfully! Order ID: " . $order['id'] . "</p>";
}

// Function to display the order list
function displayOrders() {
    echo "<h2>Orders:</h2>";
    if (empty($orders)) {
        echo "<p>No orders placed yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($orders as $order) {
        echo "<li>Order ID: " . $order['id'] . "<br>";
        echo "Product: " . $order['product']['name'] . " - $" . $order['product']['price'] . "<br>";
        echo "Quantity: " . $order['quantity'] . "<br>";
        echo "Total: $" . $order['total'] . "</li>";
    }
    echo "</ul>";
}


// Example Usage (This would typically be handled through a web form)
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $productId = (int)$_POST['product_id']; // Ensure it's an integer
    $quantity = (int)$_POST['quantity'];

    createOrder($productId, $quantity);
}

//Display the products
displayProducts();

//Display the orders
displayOrders();

?>


<?php

// Sample Product Data (Replace with your actual database or data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to handle the purchase process
function handlePurchase($productId, $quantity) {
    // Validate input
    if (!isset($products[$productId])) {
        return "Product ID not found.";
    }

    if ($quantity <= 0) {
        return "Quantity must be greater than zero.";
    }

    // Calculate total price
    $totalPrice = $products[$productId]['price'] * $quantity;

    // Display purchase confirmation
    return "Purchase Confirmation:
" .
           "Product: " . $products[$productId]['name'] . "
" .
           "Quantity: " . $quantity . "
" .
           "Total Price: $" . $totalPrice;
}

// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get product ID and quantity from the form
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate input (Important - prevent SQL injection, bad data)
    if (!isset($products[$productId])) {
        echo "<p style='color:red;'>Product ID not found.</p>";
    } else if ($quantity <= 0) {
        echo "<p style='color:red;'>Quantity must be greater than zero.</p>";
    } else {
        // Process the purchase
        $confirmationMessage = handlePurchase($productId, $quantity);
        echo $confirmationMessage;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Functionality</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - " . $product['name'] . "</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Sample Product Data (replace with your database connection)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Session handling (for storing shopping cart data)
session_start();

// Initialize shopping cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add a product to the cart
function add_to_cart($product_id, $quantity = 1) {
    if (array_key_exists($product_id, $products)) {
        $product = $products[$product_id];

        if (isset($_SESSION['cart'][$product_id])) {
            // Product already in cart, increase quantity
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            // Product not in cart, add it
            $_SESSION['cart'][$product_id] = [
                'id' => $product_id,
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => $quantity,
            ];
        }
    }
}

// Function to remove a product from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of a product in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart total
function get_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Handling form submissions ---

// Check if the "add" button was pressed
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1

    add_to_cart($product_id, $quantity);
}

// Check if the "remove" button was pressed
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_product'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
}

// Check if the "update_quantity" button was pressed
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1

    update_quantity($product_id, $new_quantity);
}


// --- Displaying the Cart ---

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
// Display cart items
if (count($_SESSION['cart']) > 0) {
    echo "<h2>Cart Items:</h2>";
    foreach ($_SESSION['cart'] as $item) {
        echo '<div class="cart-item">';
        echo '<strong>' . $item['name'] . '</strong> - $' . $item['price'] . '<br>';
        echo 'Quantity: ' . $item['quantity'] . '<br>';
        echo '<form method="post" action="">';
        echo '<input type="hidden" name="product_id" value="' . $item['id'] . '">';
        echo '<input type="hidden" name="update_quantity" value="update">';
        echo '<input type="number" name="quantity" value="' . $item['quantity'] . '" min="1" style="width: 50px;">';
        echo '<button type="submit">Update Quantity</button>';
        echo '</form>';
        echo '<form method="post" action="">';
        echo '<input type="hidden" name="product_id" value="' . $item['id'] . '">';
        echo '<input type="hidden" name="remove_product" value="remove">';
        echo '<button type="submit">Remove</button>';
        echo '</form>';
        echo '<br>';
    }
} else {
    echo '<p>Your cart is empty.</p>';
}
?>

<br>

<h2>Cart Total:</h2>
<p><?php echo ' $' . get_cart_total(); ?></p>

</body>
</html>


<?php

// Sample Product Data (Replace with your database connection)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to display the product list
function displayProductList($products) {
    echo "<h2>Available Products</h2>";
    echo "<ul>";
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}

// Function to handle the purchase process
function handlePurchase($productId, $quantity) {
    // Validate inputs
    if (!isset($products[$productId])) {
        return "Product not found.";
    }

    if ($quantity <= 0) {
        return "Invalid quantity. Please enter a positive number.";
    }

    // Calculate the total price
    $totalPrice = $products[$productId]['price'] * $quantity;

    // Display the purchase details
    echo "<h2>Purchase Confirmation</h2>";
    echo "<p>Product: " . $products[$productId]['name'] . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Total Price: $" . $totalPrice . "</p>";

    //  In a real application, you'd save this purchase to a database
    //  or another persistent storage. For this example, we just confirm.

    return "Purchase confirmed!  You have purchased " . $quantity . " " . $products[$productId]['name'] . " for $" . $totalPrice;
}


// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $quantity = $_POST["quantity"];

    // Validate product_id
    if (!is_numeric($productId)) {
        echo "<p style='color:red;'>Invalid Product ID. Please enter a number.</p>";
    } else {
        $purchaseResult = handlePurchase($productId, $quantity);
        echo $purchaseResult;
    }

} else {
    // Display the purchase form
    ?>
    <h2>Make a Purchase</h2>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <button type="submit">Place Order</button>
    </form>
    <?php
    displayProductList($products);
}
?>


<?php
session_start();

// Configuration
$items = []; // Array to store the shopping cart items
$database_file = "cart_data.txt"; // File to store cart data

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity of the product to add.
 * @param float $price The price of the single product.
 */
function addItemToCart(string $product_id, string $product_name, int $quantity, float $price): void
{
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    $item = [
        'id' => $product_id,
        'name' => $product_name,
        'quantity' => $quantity,
        'price' => $price
    ];

    $_SESSION['cart'][] = $item;
    
    //Persist the cart data to a file (for session persistence)
    saveCartData();
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $newQuantity The new quantity of the product.
 */
function updateCartItemQuantity(string $product_id, int $newQuantity): void
{
    if (!empty($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) { // Use &$item for modification
            if ($item['id'] === $product_id) {
                $item['quantity'] = $newQuantity;
                break;
            }
        }
        saveCartData();
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeItemFromCart(string $product_id): void
{
    if (!empty($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['id'] === $product_id) {
                unset($_SESSION['cart'][$key]);
                // Optionally, you can re-index the array if needed
                //  $_SESSION['cart'] = array_values($_SESSION['cart']);
                saveCartData();
                break;
            }
        }
    }
}


/**
 * Retrieves the contents of the shopping cart.
 *
 * @return array The shopping cart items.
 */
function getCartContents(): array
{
    return $_SESSION['cart'] ?? []; // Return empty array if cart is empty
}

/**
 * Saves the cart data to a file.
 */
function saveCartData(): void
{
    file_put_contents($database_file, json_encode($_SESSION['cart']));
}

/**
 * Loads the cart data from the file.
 */
function loadCartData(): void
{
    if (file_exists($database_file)) {
        $cartData = file_get_contents($database_file);
        if ($cartData = json_decode($cartData, true)) {
            $_SESSION['cart'] = $cartData;
        }
    }
}



// ---  Handle Add to Cart Request ---
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1; // Default to 1 if not provided
    $price = floatval($_POST['price']);  // Convert to float
    
    addItemToCart($product_id, $product_name, $quantity, $price);
    // Redirect to the cart page or display a confirmation message
    header("Location: cart.php"); // Redirect to cart.php
    exit();
}

// --- Handle Update Quantity Request ---
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $newQuantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 0;
    
    updateCartItemQuantity($product_id, $newQuantity);
    header("Location: cart.php");
    exit();
}

// --- Handle Remove Item Request ---
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];
    removeItemFromCart($product_id);
    header("Location: cart.php");
    exit();
}

// --- Load Cart Data on Page Load ---
loadCartData();

// --- Display Cart Contents (cart.php would handle this) ---
$cart_items = getCartContents();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart-item { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else { ?>
    <table id="cart-table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr class="cart-item">
                    <td><?php echo htmlspecialchars($item['name']); ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td>$<?php echo htmlspecialchars(number_format($item['price'], 2)); ?></td>
                    <td>
                        <form method="post" action="cart.php">
                            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                            <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1" style="width: 60px;">
                            <button type="submit" name="update_quantity">Update</button>
                        </form>
                        <form method="post" action="cart.php">
                            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                            <button type="submit" name="remove_item">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <p><a href="checkout.php">Proceed to Checkout</a></p>
<?php } ?>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "root";
$db_pass = "your_password";

// Session management (for tracking user's shopping cart)
session_start();

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];

  // Validate input (basic example - add more robust validation)
  if (!is_numeric($quantity) || $quantity <= 0) {
    $error_message = "Invalid quantity. Please enter a positive number.";
  } else {
    // Add product to the cart
    if (!isset($_SESSION["cart"])) {
      $_SESSION["cart"] = [];
    }

    $_SESSION["cart"][] = [
      "product_id" => $product_id,
      "quantity" => $quantity
    ];

    // Display success message
    $success_message = "Product added to cart!";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>E-commerce Purchase</title>
  <style>
    body {
      font-family: sans-serif;
    }
    .cart {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
    .cart table {
      width: 100%;
      border-collapse: collapse;
    }
    .cart th, .cart td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
  </style>
</head>
<body>

  <h1>E-commerce Purchase</h1>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"> <?php echo $success_message; ?> </p>
  <?php } ?>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"> <?php echo $error_message; ?> </p>
  <?php } ?>

  <h2>Shopping Cart</h2>

  <?php if (isset($_SESSION["cart"])) { ?>
    <table class="cart">
      <thead>
        <tr>
          <th>Product ID</th>
          <th>Quantity</th>
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        <?php
        $total = 0;
        foreach ($_SESSION["cart"] as $item) {
          $product_id = $item["product_id"];
          $quantity = $item["quantity"];
          $total += $quantity; // Assuming product price is stored elsewhere
        }
        ?>
        <tr>
          <td><?php echo $product_id; ?></td>
          <td><?php echo $quantity; ?></td>
          <td><?php echo $total; ?></td>
        </tr>
      </tbody>
    </table>
  <?php } else { ?>
    <p>Your cart is empty.</p>
  <?php } ?>


  <h2>Add to Cart</h2>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br>
    <button type="submit">Add to Cart</button>
  </form>

</body>
</html>


<?php

// Database configuration (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'ecommerce_db';
$db_user = 'your_user';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    // Handle connection errors appropriately (log, display message, etc.)
    error_log("Database connection error: " . $e->getMessage());
    die("Database connection failed.  Check your credentials and server status.");
  }
}

// Function to add a product to the cart
function addToCart($product_id, $quantity, $user_id) {
  $pdo = connectToDatabase();

  try {
    // Check if the product exists
    $stmt = $pdo->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
      // Product not found
      return false;
    }

    // Check if the user has a cart
    $stmt = $pdo->prepare("SELECT id FROM carts WHERE user_id = ?");
    $stmt->execute([$user_id]);
    $cart = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$cart) {
      // User has no cart, create a new one
      $new_cart_query = "INSERT INTO carts (user_id) VALUES (?)";
      $stmt = $pdo->prepare($new_cart_query);
      $stmt->execute([$user_id]);
      $cart_id = $pdo->lastInsertId();
    } else {
      // User has a cart
      $cart_id = $cart['id'];
    }


    // Add the product to the cart
    $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$cart_id, $product_id, $quantity]);

    return true;
  } catch (PDOException $e) {
    // Handle errors
    error_log("Error adding to cart: " . $e->getMessage());
    return false;
  }
}


// Function to view the cart
function viewCart($user_id) {
  $pdo = connectToDatabase();

  try {
    // Get cart items for the user
    $stmt = $pdo->prepare("SELECT c.id, ci.product_id, p.name, p.price, ci.quantity FROM cart_items ci JOIN carts c ON ci.cart_id = c.id JOIN products p ON ci.product_id = p.id WHERE c.user_id = ?");
    $stmt->execute([$user_id]);
    $cart_items = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $cart_items;
  } catch (PDOException $e) {
    // Handle errors
    error_log("Error viewing cart: " . $e->getMessage());
    return [];
  }
}

// Function to update the quantity of a product in the cart
function updateCartItemQuantity($product_id, $new_quantity, $user_id) {
    $pdo = connectToDatabase();

    try {
        // Check if the user has a cart
        $stmt = $pdo->prepare("SELECT id FROM carts WHERE user_id = ?");
        $stmt->execute([$user_id]);
        $cart = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$cart) {
            // User has no cart
            return false;
        }

        // Check if the cart item exists
        $stmt = $pdo->prepare("SELECT id FROM cart_items WHERE cart_id = ? AND product_id = ?");
        $stmt->execute([$cart['id'], $product_id]);
        $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$cart_item) {
            // Cart item doesn't exist
            return false;
        }

        // Update the quantity
        $query = "UPDATE cart_items SET quantity = ? WHERE id = ?";
        $stmt = $pdo->prepare($query);
        $stmt->execute([$new_quantity, $cart_item['id']]);

        return true;

    } catch (PDOException $e) {
        error_log("Error updating cart item: " . $e->getMessage());
        return false;
    }
}


// Function to remove a product from the cart
function removeFromCart($product_id, $user_id) {
    $pdo = connectToDatabase();

    try {
        // Check if the user has a cart
        $stmt = $pdo->prepare("SELECT id FROM carts WHERE user_id = ?");
        $stmt->execute([$user_id]);
        $cart = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$cart) {
            // User has no cart
            return false;
        }

        // Check if the cart item exists
        $stmt = $pdo->prepare("SELECT id FROM cart_items WHERE cart_id = ? AND product_id = ?");
        $stmt->execute([$cart['id'], $product_id]);
        $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$cart_item) {
            // Cart item doesn't exist
            return false;
        }

        // Delete the cart item
        $query = "DELETE FROM cart_items WHERE id = ?";
        $stmt = $pdo->prepare($query);
        $stmt->execute([$cart_item['id']]);

        return true;

    } catch (PDOException $e) {
        error_log("Error removing from cart: " . $e->getMessage());
        return false;
    }
}


// --- Example Usage (Simulated - replace with your actual logic) ---

// Add a product to the cart
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $product_id = (int)$_POST['product_id']; // Sanitize input!
  $quantity = (int)$_POST['quantity'];
  $user_id = (int)$_SESSION['user_id'];  // Assuming you have a user ID in session

  if (addToCart($product_id, $quantity, $user_id)) {
    echo "Product added to cart!";
  } else {
    echo "Error adding product to cart.";
  }
}


// View the cart
if (isset($_SESSION['user_id'])) {
  $cart_items = viewCart($_SESSION['user_id']);
  echo "<h2>Your Cart</h2>";
  if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<table><thead><tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Action</th></tr></thead><tbody>";
    foreach ($cart_items as $item) {
      echo "<tr>";
      echo "<td>" . $item['name'] . "</td>";
      echo "<td>$" . $item['price'] . "</td>";
      echo "<td>" . $item['quantity'] . "</td>";
      echo "<td><button onclick=\"updateQuantity(" . $item['product_id'] . ", 1)">Update</button>  <button onclick=\"removeFromCart(" . $item['product_id'] . ")\">Remove</button></td>";
      echo "</tr>";
    }
    echo "</tbody></table>";
  }
}

?>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Session Handling (To store user information and cart)
session_start();

// Cart data (Initialize if not already set)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ------------------- Product Information (Dummy for example) -------------------
// This is just a sample product; replace with your product data source
$products = [
    1 => [
        'id' => 1,
        'name' => 'T-Shirt',
        'price' => 20.00,
        'description' => 'A comfortable cotton T-shirt.',
        'image' => 'tshirt.jpg' // Add image path here
    ],
    2 => [
        'id' => 2,
        'name' => 'Jeans',
        'price' => 50.00,
        'description' => 'Classic blue denim jeans.',
        'image' => 'jeans.jpg' // Add image path here
    ]
];

// ------------------- Purchase Functionality -------------------

// Function to add an item to the cart
function addToCart($productId, $quantity) {
  global $conn, $products;

  // Validate product ID
  if (!isset($products[$productId])) {
    return false; // Product not found
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$productId] = [
      'id' => $productId,
      'name' => $products[$productId]['name'],
      'price' => $products[$productId]['price'],
      'quantity' => $quantity
    ];
  }
  return true;
}

// Function to remove an item from the cart
function removeFromCart($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
    return true;
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
    return true;
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Function to process the purchase (This is a simplified example)
function processPurchase() {
  //  1. Validate Cart
  if (empty($_SESSION['cart'])) {
      return false; // Cart is empty
  }

  // 2. Calculate Total
  $total = calculateTotal();

  // 3. Clear Cart (After successful purchase)
  $_SESSION['cart'] = [];

  // 4.  You would typically:
  //     -  Validate payment information (e.g., using a payment gateway)
  //     -  Update order details in your database
  //     -  Send confirmation emails

  // Simulate a successful purchase
  return true;
}

// -------------------  Handle Actions (GET/POST) -------------------

// Handle adding to cart
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($productId, $quantity);
}

// Handle removing from cart
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $productId = $_POST['product_id'];
    removeFromCart($productId);
}

// Handle updating quantity
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
    $productId = $_POST['product_id'];
    $newQuantity = $_POST['quantity'];
    updateQuantity($productId, $newQuantity);
}


// Handle the purchase action
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['purchase'])) {
    if (processPurchase()) {
        echo "<p>Order placed successfully!  Your cart is now empty.</p>";
    } else {
        echo "<p>Order placement failed. Please try again.</p>";
    }
}

// ------------------- Display Cart -------------------

// Display cart contents
echo "<h2>Shopping Cart</h2>";
if (!empty($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>";
        echo "<h3>" . $item['name'] . "</h3>";
        echo "Price: $" . number_format($item['price'], 2) . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $item['id'] . "'>";
        echo "<input type='submit' name='remove_from_cart' value='Remove from Cart'>";
        echo "</form>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $item['id'] . "'>";
        echo "<input type='number' name='quantity' value='" . $item['quantity'] . "' min='1'>";
        echo "<input type='submit' name='update_quantity' value='Update Quantity'>";
        echo "</form>";
        echo "<br>";
    }
    echo "</ul>";
    echo "<p>Total Cart Value: $" . number_format(calculateTotal(), 2) . "</p>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='purchase' value='1'>";
    echo "<input type='submit' name='purchase' value='Place Order'>";
    echo "</form>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php

// --- Configuration ---
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

$cart = []; // Array to store the cart items
$order_id = 1; // Simple order ID generator (incrementing)

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 */
function addToCart(int $product_id, int $quantity = 1) {
    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        if ($quantity <= $product['quantity']) {
            $cart[] = ['product_id' => $product_id, 'quantity' => $quantity, 'price' => $product['price']];
            echo "<p>Added $quantity x $product['name'] to your cart.</p>";
        } else {
            echo "<p>Not enough stock for $product['name']</p>";
        }
    } else {
        echo "<p>Product ID $product_id not found.</p>";
    }
}

/**
 * Calculates the total order amount.
 */
function calculateTotal() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

/**
 * Displays the cart contents.
 */
function displayCart() {
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['quantity'] . " x " . $products[$item['product_id']]['name'] . " - $" . number_format($item['quantity'] * $item['price'], 2) . "</li>";
    }
    echo "</ul>";

    echo "<h3>Total: $" . number_format(calculateTotal(), 2) . "</h3>";
}

/**
 * Simulates an order submission.  In a real application, this would
 * process the payment, update inventory, etc.
 */
function submitOrder() {
    global $cart, $products, $order_id;

    if (empty($cart)) {
        echo "<p>Your cart is empty.  Please add items before submitting an order.</p>";
        return;
    }

    // Reset the cart after order submission (or update inventory, etc.)
    $cart = [];

    echo "<h2>Order Confirmation</h2>";
    echo "<p>Your order (ID: $order_id) has been placed!</p>";
    echo "<p>Thank you for your purchase.</p>";

    // Increment the order ID
    $order_id++;
}

// --- Handling User Input (Example) ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'] ?? 1; // Use ?? to provide a default value of 1
    addToCart($product_id, $quantity);
}

if (isset($_POST['action']) && $_POST['action'] == 'submit_order') {
    submitOrder();
}

// --- Displaying the Shopping Page ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Our Products</h1>

<?php
foreach ($products as $id => $product) {
    echo "<div class='product'>";
    echo "<form method='post'>";
    echo "<label for='product_id_{$id}'>Product: " . $product['name'] . " - $" . number_format($product['price'], 2) . "</label><br>";
    echo "<input type='number' id='product_id_{$id}' value='$id' name='product_id' min='1' max='$product['quantity']' style='width:50px;'>";
    echo "<br>";
    echo "<label for='quantity_{$id}'>Quantity:</label><br>";
    echo "<input type='number' id='quantity_{$id}' value='1' name='quantity' min='1' max='$product['quantity']' style='width:50px;'>";
    echo "<input type='submit' value='Add to Cart' name='action' value='add_to_cart'>";
    echo "</form>";
    echo "</div>";
}
?>

</body>
</html>


<?php

// Database connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the form data
    $product_name = trim($_POST["product_name"]);
    $quantity = intval($_POST["quantity"]);
    $price = floatval($_POST["price"]);

    // Sanitize input (Important for security!)
    $product_name = htmlspecialchars($product_name);
    $quantity = intval($quantity);
    $price = floatval($price);

    // Check if data is valid
    if (empty($product_name) || $quantity <= 0 || $price <= 0) {
        $error = "Please fill in all fields and ensure quantity and price are positive values.";
    } else {
        // Calculate the total price
        $total_price = $quantity * $price;

        // Store the order information (Replace with your database logic)
        // This is a simple example, you'll likely want to use a database
        $order_data = array(
            "product_name" => $product_name,
            "quantity" => $quantity,
            "price" => $price,
            "total_price" => $total_price,
            "order_date" => date("Y-m-d H:i:s")
        );

        // Store the order data (Example: Storing in a session - not ideal for production)
        session_start();
        $_SESSION["shopping_cart"][] = $order_data;

        // Redirect to a success page
        header("Location: success.php");
        exit(); // Important to stop further script execution
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Product</title>
</head>
<body>

    <h1>Purchase Product</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name" required><br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required><br><br>

        <label for="price">Price:</label>
        <input type="number" id="price" name="price" step="0.01" required><br><br>

        <input type="submit" value="Purchase">
    </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce_db";
$db_user = "your_username";
$db_password = "your_password";

// Handle the purchase process
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 1. Validation & Sanitization (Crucial for security!)
  $product_id = isset($_POST["product_id"]) ? filter_input(INPUT_POST, "product_id", FILTER_SANITIZE_NUMBER_INT) : null;
  $quantity = isset($_POST["quantity"]) ? filter_input(INPUT_POST, "quantity", FILTER_SANITIZE_NUMBER_INT) : 1; // Default quantity is 1
  $customer_name = isset($_POST["customer_name"]) ? filter_input(INPUT_POST, "customer_name", FILTER_SANITIZE_STRING) : "";
  $customer_email = isset($_POST["customer_email"]) ? filter_input(INPUT_POST, "customer_email", FILTER_SANITIZE_EMAIL) : "";

  // Basic validation
  if (!$product_id || $product_id <= 0 || !$quantity || $quantity <= 0) {
    $error = "Invalid product ID or quantity.";
  } elseif (empty($customer_name) && empty($customer_email)) {
      $error = "Please provide your name and/or email address.";
  }
  
  // 2. Database Interaction
  if (!$error) {
    try {
      // Connect to the database
      $pdo = new PDO("mysql:host=" . $db_host . ";dbname=" . $db_name . ";charset=utf8mb4", $db_user, $db_password);
      $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION); // Throw exceptions on errors
  
      // Get product details
      $stmt = $pdo->prepare("SELECT product_id, product_name, price FROM products WHERE product_id = :id");
      $stmt->bindParam(':id', $product_id);
      $stmt->execute();
      $product = $stmt->fetch(PDO::FETCH_ASSOC);
  
      if (!$product) {
        throw new Exception("Product not found.");
      }
  
      // Calculate total price
      $total_price = $product["price"] * $quantity;
  
      // Insert order details into the orders table
      $sql = "INSERT INTO orders (customer_name, customer_email, product_id, quantity, total_price, order_date) VALUES (:name, :email, :product_id, :quantity, :total_price, NOW())";
      $stmt = $pdo->prepare($sql);
      $stmt->bindParam(':name', $customer_name);
      $stmt->bindParam(':email', $customer_email);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->bindParam(':total_price', $total_price);
      $stmt->execute();
  
      // You might want to update inventory here, depending on your requirements.
  
      // Success message
      $success = "Order placed successfully! Order ID: " . $pdo->lastInsertId();
  
    } catch (PDOException $e) {
      // Error handling
      $error = "Database error: " . $e->getMessage();
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
  <style>
    body {
      font-family: sans-serif;
    }
    .container {
      width: 80%;
      margin: 0 auto;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    .error {
      color: red;
    }
    .success {
      color: green;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Purchase Product</h1>

    <?php if (isset($error)) { ?>
      <p class="error"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
      <p class="success"><?php echo $success; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <label for="product_id">Product ID:</label>
      <input type="number" id="product_id" name="product_id" required>
      <br><br>

      <label for="quantity">Quantity:</label>
      <input type="number" id="quantity" name="quantity" value="1" min="1" required>
      <br><br>

      <label for="customer_name">Customer Name:</label>
      <input type="text" id="customer_name" name="customer_name" >
      <br><br>

      <label for="customer_email">Customer Email:</label>
      <input type="email" id="customer_email" name="customer_email" >
      <br><br>

      <button type="submit">Place Order</button>
    </form>
  </div>
</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = 'localhost';
$db_name = 'shop_db';
$db_user = 'your_user';
$db_password = 'your_password';

//  Assume a simple product table (you'll need to create this in your database)
//  Columns: id, product_name, price
//  Example data:  id=1, product_name='T-Shirt', price=20; id=2, product_name='Jeans', price=50;

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Function to display the product list
function displayProducts($pdo) {
    $stmt = $pdo->prepare("SELECT id, product_name, price FROM products");
    $stmt->execute();
    echo "<h2>Available Products</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th></tr>";
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        echo "<tr>";
        echo "<td>" . htmlspecialchars($row['product_name']) . "</td>"; // Escape for security
        echo "<td>" . htmlspecialchars($row['price']) . "</td>";
        echo "</tr>";
    }
    echo "</table>";
}

// Function to handle the purchase process
function processPurchase($product_id, $quantity, $pdo) {
    // Validate inputs (add more validation as needed)
    if (!is_numeric($product_id) || !is_numeric($quantity)) {
        return false;
    }
    $quantity = intval($quantity); // Ensure quantity is an integer

    // Check if product exists
    $stmt = $pdo->prepare("SELECT id, product_name, price FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        return false;
    }

    // Calculate total price
    $total_price = $product['price'] * $quantity;

    // Add order to the database (you'll need an 'orders' table with columns: id, product_id, quantity, total_price, order_date)
    // Example:
    $order_date = date('Y-m-d H:i:s'); // Get current timestamp

    $stmt = $pdo->prepare("INSERT INTO orders (product_id, quantity, total_price, order_date) VALUES (?, ?, ?, ?)");
    $stmt->execute([$product_id, $quantity, $total_price, $order_date]);

    return true; // Purchase successful
}


// --- Main Script Execution ---

// 1. Display Products
displayProducts($pdo);

// 2. Handle Purchase Form Submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (processPurchase($product_id, $quantity, $pdo)) {
        echo "<p style='color:green;'>Purchase successful! Your order ID is: " . $product_id . "</p>";
    } else {
        echo "<p style='color:red;'>Purchase failed.  Please check your inputs.</p>";
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

    <h2>Select a Product to Purchase</h2>
    <form method="post">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            // Display product IDs in the select dropdown
            $stmt = $pdo->prepare("SELECT id FROM products");
            $stmt->execute();
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                echo "<option value='" . $row['id'] . "'>" . $row['id'] . "</option>";
            }
            ?>
        </select>
        <br><br>

        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" min="1" max="10" style="width:50px;">
        <br><br>

        <button type="submit">Purchase</button>
    </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

//  Simulate product data (replace with your database query)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
    4 => ['id' => 4, 'name' => 'Monitor', 'price' => 300]
];

// Session management (to store the cart)
session_start();

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (isset($products[$product_id])) {
        if (isset($_SESSION['cart'])) {
            // Check if the product already exists in the cart
            if (isset($_SESSION['cart'][$product_id])) {
                $_SESSION['cart'][$product_id]['quantity'] += $quantity;
            } else {
                // Product not in cart, add it
                $_SESSION['cart'][$product_id] = ['quantity' => $quantity, 'price' => $products[$product_id]['price']];
            }
        } else {
            // Cart is empty, create a new array
            $_SESSION['cart'][$product_id] = ['quantity' => $quantity, 'price' => $products[$product_id]['price']];
        }
    }
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];

    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Calculate the total price
$total_price = 0;
if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $total_price += $item['price'] * $item['quantity'];
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart { border: 1px solid #ccc; padding: 10px; margin: 10px; }
        .cart-item { margin-bottom: 5px; }
        .cart-total { font-weight: bold; }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <div class="cart">
        <?php if (empty($_SESSION['cart'])) { ?>
            <p>Your cart is empty.</p>
        <?php } else { ?>
            <h2>Items in Cart</h2>
            <?php
            foreach ($_SESSION['cart'] as $product_id => $item) {
                echo '<div class="cart-item">';
                echo '<strong>' . $products[$product_id]['name'] . '</strong> - $' . $products[$product_id]['price'] . ' ';
                echo 'Quantity: ' . $item['quantity'];
                echo '</div>';
            }
            ?>
        </div>

        <div class="cart-total">
            Total: $<?php echo round($total_price, 2); ?>
        </div>

        <form method="post">
            <label for="product_id">Select Product to Remove:</label>
            <select name="product_id" id="product_id">
                <?php if (empty($_SESSION['cart'])) { ?>
                    <option disabled selected>No products in cart</option>
                <?php } else { ?>
                    <?php
                    foreach ($_SESSION['cart'] as $product_id => $item) {
                        echo '<option value="' . $product_id . '">' . $products[$product_id]['name'] . '</option>';
                    }
                    ?>
                </select>
            <button type="submit" name="action" value="remove_from_cart">Remove from Cart</button>
        </form>
    </div>

</body>
</html>


<?php

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_name = 'e_commerce_db';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    return $conn;
}

// Function to handle purchase process
function handlePurchase($cart, $customer_name, $customer_email, $address, $payment_method) {
    $conn = connectToDatabase();

    // 1. Insert Order Information
    $query = "INSERT INTO orders (customer_name, customer_email, address, order_date, payment_method) VALUES (?, ?, NOW(), ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ssis", $customer_name, $customer_email, $payment_method);
    if (!$stmt->execute()) {
        echo "Error inserting order: " . $stmt->error;
        return false;
    }
    $order_id = $conn->insert_id; // Get the newly created order ID

    // 2. Insert Order Items
    foreach ($cart as $item_id => $quantity) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iii", $order_id, $item_id, $quantity);
        if (!$stmt->execute()) {
            echo "Error inserting order item: " . $stmt->error;
            // You might want to handle this more robustly, like rolling back the order
            return false;
        }
    }

    // 3. Update Product Stock (Optional - depends on your requirements)
    // This is a basic example. You'd likely want to handle concurrency and potential errors.
    // This example assumes a simple update, which may not be suitable for high-volume sales.
    foreach ($cart as $item_id => $quantity) {
        $query = "UPDATE products SET stock = stock - ? WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("is", $quantity, $item_id);
        if (!$stmt->execute()) {
            echo "Error updating product stock: " . $stmt->error;
            // Handle error appropriately
            return false;
        }
    }


    // 4.  Confirmation Message
    echo "<h1>Purchase Successful!</h1>";
    echo "<p>Order ID: " . $order_id . "</p>";
    echo "<p>Thank you for your purchase!</p>";

    return true;
}


// --- Example Usage (Simulated Form Submission) ---
//  This is how you'd handle a form submission.  In a real application, you'd
//  process the form data using a server-side language like PHP, and
//  use appropriate input validation and sanitization.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Simulate cart data (replace with data from your shopping cart)
    $cart = [
        1 => 2, // Product ID 1, Quantity 2
        2 => 1, // Product ID 2, Quantity 1
        3 => 3  // Product ID 3, Quantity 3
    ];

    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $address = $_POST["address"];
    $payment_method = $_POST["payment_method"];

    if (handlePurchase($cart, $customer_name, $customer_email, $address, $payment_method)) {
        // Handle successful purchase (e.g., redirect, send confirmation email)
        echo "<p>Order submitted successfully!</p>";
    } else {
        // Handle purchase failure
        echo "<p>Purchase failed. Please try again.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>E-Commerce Purchase</title>
</head>
<body>

<h1>Make a Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="address">Address:</label>
    <textarea id="address" name="address" rows="4" cols="50" required></textarea><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method" required>
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
    </select><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$dbHost = "localhost";
$dbName = "shopping_cart";
$dbUser = "your_user";
$dbPass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Sanitize and validate the input
    $product_id = isset($_POST["product_id"]) ? filter_var($_POST["product_id"], FILTER_SANITIZE_NUMBER_INT) : null;
    $quantity = isset($_POST["quantity"]) ? filter_var($_POST["quantity"], FILTER_SANITIZE_NUMBER_INT) : 1; // Default quantity is 1
    $customer_name = isset($_POST["customer_name"]) ? filter_var($_POST["customer_name"], FILTER_SANITIZE_STRING) : "";
    $customer_email = isset($_POST["customer_email"]) ? filter_var($_POST["customer_email"], FILTER_SANITIZE_EMAIL) : "";


    // Check if the product ID is valid
    if ($product_id !== null && $product_id > 0) {
        // Connect to the database
        $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

        // Check connection
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL query
        $sql = "INSERT INTO orders (product_id, quantity, customer_name, customer_email) VALUES (?, ?, ?, ?)";

        // Prepare the statement
        $stmt = $conn->prepare($sql);

        // Bind the parameters
        $stmt->bind_param("isss", $product_id, $quantity, $customer_name, $customer_email);

        // Execute the statement
        if ($stmt->execute()) {
            echo "Order placed successfully!  Thank you, " . htmlspecialchars($customer_name) . "!";
        } else {
            echo "Error placing order: " . $stmt->error;
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();
    } else {
        echo "Invalid product ID.  Please try again.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart Purchase</title>
</head>
<body>

<h2>Place Your Order</h2>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required>
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required>
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required>
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$dbHost = 'localhost';
$dbUser = 'your_db_user';
$dbPass = 'your_db_password';
$dbName = 'your_db_name';

//  Basic product data - replace with your product data source (e.g., database query)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
    4 => ['id' => 4, 'name' => 'Monitor', 'price' => 300],
];


// Function to add an item to the cart
function addItemToCart($productId, $cart) {
    if (isset($cart['items'][$productId])) {
        $cart['items'][$productId]['quantity']++;
    } else {
        $cart['items'][$productId] = ['quantity' => 1];
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity, $cart) {
    if (isset($cart['items'][$productId])) {
        $cart['items'][$productId]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function removeItemFromCart($productId, $cart) {
    unset($cart['items'][$productId]);
}

// Function to get the cart contents
function getCartContents($cart) {
    return $cart['items'];
}

// Cart initialization
$cart = ['items' => []];

// Handle form submissions (add to cart)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Validate and convert to integer

    if (isset($products[$productId])) {
        addItemToCart($productId, $cart);
    } else {
        echo "Product ID $productId not found.";
    }
}


// Handle updating quantities
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
    $productId = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    updateQuantity($productId, $quantity, $cart);
}

// Handle removing items
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_item'])) {
    $productId = (int)$_POST['product_id'];
    removeItemFromCart($productId, $cart);
}


// Display the cart
echo "<h2>Shopping Cart</h2>";

if (empty($cart['items'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart['items'] as $id => $item) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $products[$id]['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $products[$id]['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . $products[$id]['price'] * $item['quantity'] . "<br>";
        echo "<form action=\"update_quantity.php\" method=\"POST\">";
        echo "<input type=\"hidden\" name=\"product_id\" value=\"".$id."\">";
        echo "<input type='number' name='quantity' value='".$item['quantity']."'>";
        echo "<button type=\"submit\">Update</button>";
        echo "</form>";
        echo "<form action=\"remove_item.php\" method=\"POST\">";
        echo "<input type=\"hidden\" name=\"product_id\" value=\"".$id."\">";
        echo "<button type=\"submit\">Remove</button>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";

    // Calculate total cart value
    $total = 0;
    foreach ($cart['items'] as $id => $item) {
        $total += $products[$id]['price'] * $item['quantity'];
    }

    echo "<p><strong>Total Cart Value:</strong> $" . $total . "</p>";
}


?>


<?php

// Database connection (Replace with your database details)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

try {
    $conn = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Function to handle purchase creation
function createPurchase($cart_id, $customer_name, $customer_email, $address, $total_amount) {
    global $conn;

    try {
        // Prepare the SQL query
        $stmt = $conn->prepare("INSERT INTO purchases (cart_id, customer_name, customer_email, address, total_amount, purchase_date) VALUES (?, ?, ?, ?, ?, NOW())");

        // Bind parameters
        $stmt->bindParam(1, $cart_id);
        $stmt->bindParam(2, $customer_name);
        $stmt->bindParam(3, $customer_email);
        $stmt->bindParam(4, $address);
        $stmt->bindParam(5, $total_amount);

        // Execute the query
        $stmt->execute();

        return true; // Success
    } catch(PDOException $e) {
        error_log("Database error creating purchase: " . $e->getMessage());  // Log the error for debugging
        return false; // Failure
    }
}

// --- Example Usage (This part demonstrates how you might use the functionality) ---

// 1.  Get cart ID from a form or session
//  (This would typically come from a form submission)
$cart_id = isset($_POST['cart_id']) ? $_POST['cart_id'] : null;  // Example:  Retrieve from a form

if ($cart_id !== null && $cart_id !== "") { //validate that $cart_id is not empty or null
    // 2. Get customer details from a form
    $customer_name = isset($_POST['customer_name']) ? $_POST['customer_name'] : "";
    $customer_email = isset($_POST['customer_email']) ? $_POST['customer_email'] : "";
    $address = isset($_POST['address']) ? $_POST['address'] : "";
    $total_amount = isset($_POST['total_amount']) ? $_POST['total_amount'] : 0.00; // Default to 0 if not provided


    // 3. Create the purchase
    if (createPurchase($cart_id, $customer_name, $customer_email, $address, $total_amount)) {
        echo "Purchase created successfully!  Purchase ID: " . $conn->lastInsertId();  // Display the new purchase ID.
    } else {
        echo "Error creating purchase. Please try again later.";
    }
} else {
    echo "Invalid cart ID. Please provide a valid cart ID.";
}


// --- Database Schema (Example) ---
/*
CREATE TABLE purchases (
    purchase_id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    address TEXT NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/
?>


<?php

// Configuration (Simulated)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

class Order {
    public $items = [];
    public $total = 0;

    public function addItem($product_id, $quantity = 1) {
        if (isset($products[$product_id])) {
            $item = $products[$product_id];
            $item_total = $item_total = $item['price'] * $quantity;
            $this->items[] = ['product_id' => $product_id, 'quantity' => $quantity, 'item_total' => $item_total];
            $this->total += $item_total;
        } else {
            echo "Error: Product ID $product_id not found.";
        }
    }

    public function getItems() {
        return $this->items;
    }

    public function getTotal() {
        return $this->total;
    }
}


// --- Order Processing ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get Product IDs and Quantities from the form
    $product_ids = isset($_POST['product_ids']) ? $_POST['product_ids'] : [];
    $quantities = isset($_POST['quantities']) ? $_POST['quantities'] : [];

    // Validate Input (Basic - more thorough validation needed in production)
    if (count($product_ids) !== count($quantities)) {
        echo "<p>Error: Number of product IDs and quantities must match.</p>";
        exit; // Stop execution
    }

    // Create the order object
    $order = new Order();

    // Process the order
    for ($i = 0; $i < count($product_ids); $i++) {
        $product_id = $product_ids[$i];
        $quantity = $quantities[$i];
        $order->addItem($product_id, $quantity);
    }

    // Display the order details
    echo "<h2>Order Confirmation</h2>";
    echo "<p>Items Ordered:</p>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Quantity</th><th>Item Total</th></tr>";
    foreach ($order->getItems() as $item) {
        echo "<tr>";
        echo "<td>" . $products[$item['product_id']]['name'] . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>$" . number_format($item['item_total'], 2) . "</td>";
        echo "</tr>";
    }
    echo "</table>";
    echo "<p>Total: $" . number_format($order->getTotal(), 2) . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Purchase Products</h1>

<form method="post" action="purchase.php">
    <label for="product_ids">Product IDs:</label>
    <input type="text" id="product_ids" name="product_ids" value="<?php echo isset($_GET['product_ids']) ? $_GET['product_ids'] : ''; ?>"  placeholder="Enter product IDs (comma-separated)">
    <br><br>

    <label for="quantities">Quantities:</label>
    <input type="text" id="quantities" name="quantities"  placeholder="Enter quantities (comma-separated)">
    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate inputs (essential for security!)
  $name = filter_input(INPUT_POST, 'name', FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);
  $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT); // Assuming you have a product_id

  // Check if required fields are filled
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error = "Please fill in all fields.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } elseif ($quantity <= 0) {
    $error = "Quantity must be a positive integer.";
  } else {
    // --- Process the purchase ---

    // 1.  Store the order information (e.g., in a database)
    //    This is a basic example - you'd likely want a more robust order system.
    $order_id = generate_order_id(); // Function to generate a unique order ID
    $sql = "INSERT INTO orders (order_id, name, email, quantity, product_id)
            VALUES ('$order_id', '$name', '$email', '$quantity', '$product_id')";

    // Execute the query
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    if ($conn->query($sql) === TRUE) {
      $success = "Order placed successfully! Order ID: $order_id";
    } else {
      $error = "Error placing order: " . $conn->error;
    }

    $conn->close();

  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart Purchase</title>
</head>
<body>

  <h1>Shopping Cart Purchase</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="<?php echo isset($name) ? htmlspecialchars($name) : ''; ?>">

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo isset($quantity) ? $quantity : ''; ?>">

    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="<?php echo isset($product_id) ? $product_id : ''; ?>">

    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <br><br>
  <a href="cart.php">View Cart</a>  <!-- Link to your cart page -->

</body>
</html>


function generate_order_id() {
  // This is a very basic example.  In a real application, you'd want a more robust
  // method to generate unique IDs, such as using a UUID (Universally Unique Identifier).
  $timestamp = time();
  return 'ORDER-' . $timestamp;
}


<?php

// --- Database Configuration ---
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_db_user";
$db_password = "your_db_password";

// --- Database Connection ---
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 *
 * @return bool True on success, false on failure.
 */
function add_to_cart(int $product_id, int $quantity) {
  global $conn;

  // Check if product exists (basic validation - expand for more robust validation)
  $product_query = "SELECT id, name, price FROM products WHERE id = ?";
  $stmt = $conn->prepare($product_query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    $name = $row['name'];
    $price = $row['price'];
  } else {
    return false; // Product doesn't exist
  }

  // Get current cart contents (if any)
  $cart_query = "SELECT id, product_id, quantity FROM cart WHERE product_id = ?";
  $stmt = $conn->prepare($cart_query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  $cart_data = $result->fetch_assoc();

  // If the product is already in the cart, update the quantity
  if ($cart_data) {
    $quantity = $cart_data['quantity'] + $quantity;
    $stmt = $conn->prepare("UPDATE cart SET quantity = ? WHERE product_id = ?");
    $stmt->bind_param("is", $quantity, $product_id);
    $stmt->execute();
  } else {
    // Otherwise, add the product to the cart
    $stmt = $conn->prepare("INSERT INTO cart (product_id, quantity) VALUES (?, ?)");
    $stmt->bind_param("is", $product_id, $quantity);
    $stmt->execute();
  }

  return true;
}


/**
 * Retrieves the contents of the cart.
 *
 * @return array An array of cart items, each with 'id', 'product_id', 'name', 'price', and 'quantity' keys.
 */
function get_cart() {
  $query = "SELECT c.id, c.product_id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
  $result = $conn->query($query);

  $cart_items = array();
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
  }

  return $cart_items;
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True on success, false on failure.
 */
function remove_from_cart(int $product_id) {
  $query = "DELETE FROM cart WHERE product_id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();

  return true;
}

/**
 * Calculates the total price of the cart.
 *
 * @return float The total price.
 */
function calculate_total() {
  $cart_items = get_cart();
  $total = 0;
  foreach ($cart_items as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Product Data (Example - replace with your product database) ---
$products = array(
    array("id" => 1, "name" => "Laptop", "price" => 1200),
    array("id" => 2, "name" => "Mouse", "price" => 25),
    array("id" => 3, "name" => "Keyboard", "price" => 75),
);


// --- Purchase Functionality ---

function purchase() {
  // 1. Get Cart Items
  $cart_items = get_cart();

  // 2. Calculate Total
  $total = calculate_total();

  // 3. Display Cart Summary
  echo "<h2>Cart Summary</h2>";
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $total . "</strong></p>";

  // 4.  (Simulated Payment - Replace with actual payment processing)
  echo "<p>Processing Payment... (Simulated)</p>";
  echo "<p>Thank you for your purchase!</p>";

  // 5. Clear the Cart (Optional - depending on your requirements)
  // remove_from_cart(1); // Remove all items
  // remove_from_cart(2);
}


// ---  Example Usage (for demonstration - you'll integrate this into your form) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST["add_to_cart"])) {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    add_to_cart($product_id, $quantity);
  } elseif (isset($_POST["remove_from_cart"])) {
    $product_id = $_POST["product_id"];
    remove_from_cart($product_id);
  } elseif (isset($_POST["purchase"])) {
    purchase();
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <form method="post" action="">
    <h2>Add to Cart</h2>
    <?php
    foreach ($products as $product) {
      echo "<label for='" . $product['id'] . "'>" . $product['name'] . " ($" . $product['price'] . ")</label><br>";
      echo "<input type='number' id='" . $product['id'] . "' name='product_id' value='" . $product['id'] . "' min='1'><br>";
    }
    ?>

    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <br>

  <form method="post" action="">
    <label for="remove_product_id">Remove Product:</label>
    <input type="number" id="remove_product_id" name="product_id" value="<?php echo $products[0]['id']; ?>" min="1">
    <button type="submit" name="remove_from_cart">Remove Product</button>
  </form>

  <br>

  <form method="post" action="">
    <button type="submit" name="purchase">Purchase</button>
  </form>


</body>
</html>


<?php

// Database Connection (Replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_user';
$db_password = 'your_password';
$db_name = 'your_database';

try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Function to handle the purchase process
function processPurchase($cart, $customer_name, $customer_email, $payment_method) {
    // 1. Data Validation (Basic - expand as needed)
    if (empty($cart) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
        return false; // Indicate failure
    }

    // 2. Create Order Record in the Database
    try {
        $stmt = $pdo->prepare("INSERT INTO orders (customer_name, customer_email, payment_method, order_date) VALUES (:customer_name, :customer_email, :payment_method, NOW())");
        $stmt->bindParam(':customer_name', $customer_name);
        $stmt->bindParam(':customer_email', $customer_email);
        $stmt->bindParam(':payment_method', $payment_method);
        $stmt->execute();
        $order_id = $pdo->lastInsertId(); // Get the ID of the newly created order

        // 3. Add Order Items to the Database
        foreach ($cart as $item_id => $quantity) {
            try {
                $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
                $stmt->bindParam(':order_id', $order_id);
                $stmt->bindParam(':product_id', $item_id); // Product ID is the item key
                $stmt->bindParam(':quantity', $quantity);
                $stmt->execute();
            } catch(PDOException $e) {
                // Handle any errors during item insertion (e.g., product not found)
                error_log("Error adding item to order: " . $e->getMessage());
                return false; // Indicate failure
            }
        }

        return true; // Indicate success

    } catch(PDOException $e) {
        //Handle any errors during order creation or item insertion
        error_log("Database error during purchase: " . $e->getMessage());
        return false;
    }
}

// --- Example Usage (for demonstration - integrate into a form) ---

// 1. Get cart data (Assuming this is coming from a session or form)
$cart = [
    'product_1' => 2, // Item ID: 2 of product 1
    'product_3' => 1, // Item ID: 3 of product 3
];


// 2. Get customer information (From a form)
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];
$payment_method = $_POST['payment_method'];

// 3. Process the purchase
if (processPurchase($cart, $customer_name, $customer_email, $payment_method)) {
    echo "Purchase successful! Order ID: " . $order_id = $pdo->lastInsertId(); // Display the order ID
    // Add success message to the user
} else {
    echo "Purchase failed. Please try again.";
    // Add error message to the user
}

?>


<?php

// Database connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_pass = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1.  Get Cart Items
    $sql = "SELECT product_id, quantity FROM cart WHERE cart_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $cart_id); // i for integer
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_items = [];
    while ($row = $result->fetch_assoc()) {
        $cart_items[] = $row;
    }

    if (empty($cart_items)) {
        $conn->close();
        return false; // No items in the cart
    }

    // 2. Calculate Total Amount
    $total_amount = 0;
    foreach ($cart_items as $item) {
        // Assuming you have a products table with price
        // Replace 'product_id' and 'price' with your actual table/column names
        $sql_product = "SELECT price FROM products WHERE product_id = ?";
        $stmt_product = $conn->prepare($sql_product);
        $stmt_product->bind_param("i", $item['product_id']);
        $stmt_product->execute();
        $product_result = $stmt_product->get_result();

        if ($product_row = $product_row->fetch_assoc()) {
            $total_amount += $product_row['price'] * $item['quantity'];
        } else {
            echo "Error: Product with ID " . $item['product_id'] . " not found.<br>";
            $conn->close();
            return false;
        }
    }

    // 3. Insert Order into the Orders table
    $sql_order = "INSERT INTO orders (cart_id, customer_name, customer_email, total_amount, payment_method)
                  VALUES (?, ?, ?, ?, ?)";
    $stmt_order = $conn->prepare($sql_order);
    $stmt_order->bind_param("isss", $cart_id, $customer_name, $customer_email, $total_amount);
    $stmt_order->execute();
    $order_id = $conn->insert_id;

    // 4.  Update Cart (Mark as Purchased)
    foreach ($cart_items as $item) {
        $sql_update_cart = "UPDATE cart SET purchased = 1 WHERE product_id = ? AND cart_id = ?";
        $stmt_update = $conn->prepare($sql_update_cart);
        $stmt_update->bind_param("is", $item['product_id'], $cart_id);
        $stmt_update->execute();
    }

    $conn->close();
    return $order_id; // Return the order ID
}


// --- Example Usage (For testing -  This is where you'd integrate with a form and display success messages) ---

// Sample Cart ID (This should come from the cart ID passed from a form)
$cart_id = 1;

// Sample Customer Information (This would be taken from a form)
$customer_name = "John Doe";
$customer_email = "john.doe@example.com";
$payment_method = "Credit Card";

// Handle the purchase
$order_id = handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);

if ($order_id) {
    echo "Purchase successful! Order ID: " . $order_id;
} else {
    echo "Purchase failed.";
}

?>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_user = "your_db_user";
$db_password = "your_db_password";
$db_name = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Sanitize and Validate Input (Crucial for Security!)
    $product_id = isset($_POST["product_id"]) ? intval($_POST["product_id"]) : 0;
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 1;

    // Database Connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and Execute the SQL Query
    $sql = "INSERT INTO orders (product_id, quantity) VALUES (?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $product_id, $quantity);  // "ii" indicates two integers
    $stmt->execute();

    // Check if the query was successful
    if ($stmt->affected_rows > 0) {
        echo "<p>Order placed successfully! Order ID: " . $conn->insert_id . "</p>";
    } else {
        echo "<p>Order failed.  Check your product ID and quantity.</p>";
    }

    $stmt->close();
    $conn->close();
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required><br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data (crucial for security)
  $name = $_POST["name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"];

  if (empty($name) || empty($quantity) || empty($price)) {
    $error = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } elseif (!is_numeric($price) || $price <= 0) {
    $error = "Price must be a positive number.";
  } else {
    // Sanitize data (important to prevent SQL injection)
    $name = mysqli_real_escape_string($connection, $name);
    $quantity = intval($quantity); // Convert to integer
    $price = floatval($price);  // Convert to float

    // SQL query to insert the purchase into the database
    $sql = "INSERT INTO purchases (product_name, quantity, price) VALUES ('$name', $quantity, $price)";

    if (mysqli_query($connection, $sql)) {
      $success = "Purchase added successfully!";
    } else {
      $error = "Error adding purchase: " . mysqli_error($connection);
    }
  }
}

// Connect to the database
$connection = mysqli_connect($db_host, $db_user, $db_password, $db_name);

// Check the connection
if (!$connection) {
  die("Connection failed: " . mysqli_connect_error());
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" placeholder="Enter product name" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required>
    <br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" required>
    <br><br>

    <button type="submit">Add to Purchase</button>
  </form>

  <br><br>

  <h2>Purchase History</h2>
  <?php
    // Retrieve purchase data from the database
    $sql = "SELECT product_name, quantity, price FROM purchases";
    $result = mysqli_query($connection, $sql);

    if (mysqli_num_rows($result) > 0) {
      echo "<ul>";
      while($row = mysqli_fetch_assoc($result)) {
        echo "<li>Product: " . $row["product_name"] . ", Quantity: " . $row["quantity"] . ", Price: $" . $row["price"] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "No purchases yet.";
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace these with your actual database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ---  Purchase Functionality ---

/**
 * Processes a purchase request.
 *
 * @param array $order_data  An associative array containing order details.
 *                         Example: ['product_id' => 123, 'quantity' => 2, 'customer_name' => 'John Doe']
 * @return int|string  Returns the order ID on success, or an error message string on failure.
 */
function processPurchase(array $order_data) {
  // Validate input (Important for security!)
  if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['customer_name'])) {
    return "Error: Missing order details.";
  }

  if (!is_numeric($order_data['product_id']) || $order_data['product_id'] <= 0) {
    return "Error: Invalid product ID.";
  }

  if (!is_numeric($order_data['quantity']) || $order_data['quantity'] <= 0) {
    return "Error: Invalid quantity.";
  }

  // Sanitize customer name (Prevent SQL injection)
  $customer_name = $conn->real_escape_string($order_data['customer_name']);

  // Prepare the SQL query
  $sql = "INSERT INTO orders (product_id, quantity, customer_name, order_date)
          VALUES ($order_data['product_id'], $order_data['quantity'], '$customer_name', NOW())";

  if ($conn->query($sql) === TRUE) {
    // Optionally, you can update inventory here
    // Example:  update product_stock set stock = stock - $order_data['quantity'] WHERE product_id = $order_data['product_id'];

    return $conn->insert_id; // Returns the newly inserted order ID
  } else {
    return "Error: " . $conn->error;
  }
}


// --- Example Usage ---

// Simulate a new order
$new_order_data = [
  'product_id' => 1, // Assuming product ID 1 exists in your database
  'quantity' => 3,
  'customer_name' => 'Alice Smith'
];

// Process the purchase
$order_id = processPurchase($new_order_data);

// Display the result
if ($order_id === NULL) {  // Checking for null indicates an error
  echo "Purchase failed: " . $order_id;
} else {
  echo "Purchase successful! Order ID: " . $order_id;
}


// --- Database Setup (Example - Create Tables) ---
//  This part is just for demonstration and setting up the database.
//  You'll likely have your database already set up.

// This code won't execute unless you've created the tables!
// Make sure you run this only once to create the tables.
// It's commented out to avoid accidentally executing it multiple times.

/*
$sql_create_orders = "CREATE TABLE IF NOT EXISTS orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  customer_name VARCHAR(255) NOT NULL,
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)";

if ($conn->query($sql_create_orders) === TRUE) {
  echo "Table 'orders' created successfully";
} else {
  echo "Error creating table: " . $conn->error;
}

*/

?>


<?php

// Database connection details (replace with your actual values)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize inputs
  $product_name = trim($_POST["product_name"]);
  $product_price = floatval($_POST["product_price"]);
  $quantity = intval($_POST["quantity"]);

  //  Input validation (add more as needed!)
  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {
    $error_message = "Please enter valid product name, price, and quantity.";
  } else {
    // Prepare the SQL statement
    $sql = "INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sii", $product_name, $product_price, $quantity);

    // Execute the statement
    if ($stmt->execute()) {
      $success_message = "Product added successfully!";
    } else {
      $error_message = "Error adding product: " . $stmt->error;
    }

    // Close the statement
    $stmt->close();
  }

}

// Establish database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
  <style>
    body {
      font-family: sans-serif;
    }
    .container {
      width: 80%;
      margin: 0 auto;
      padding: 20px;
      border: 1px solid #ccc;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
    }
    input[type="text"],
    input[type="number"] {
      width: 100%;
      padding: 8px;
      box-sizing: border-box;
      margin-bottom: 10px;
    }
    .success-message {
      color: green;
      margin-bottom: 10px;
    }
    .error-message {
      color: red;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Purchase Functionality</h1>

    <?php if (isset($error_message)) { ?>
      <p class="error-message"><?php echo $error_message; ?></p>
    <?php } ?>

    <?php if (isset($success_message)) { ?>
      <p class="success-message"><?php echo $success_message; ?></p>
    <?php } ?>

    <form method="post">
      <div class="form-group">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name" required>
      </div>
      <div class="form-group">
        <label for="product_price">Product Price:</label>
        <input type="number" id="product_price" name="product_price" required>
      </div>
      <div class="form-group">
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" required>
      </div>
      <button type="submit">Add to Cart</button>
    </form>
  </div>
</body>
</html>


<?php
session_start();

// Database connection (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Create a database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

//  Configuration
$items_per_page = 8; // Number of items to display per page
$total_items = 0;
$page = 1;

//  Shopping Cart Functions

/**
 * Add an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @return bool True if added successfully, false otherwise.
 */
function add_to_cart($product_id) {
  global $conn;

  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity']++;
  } else {
    // If not, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'id' => $product_id,
      'quantity' => 1,
      'name' =>  // Get product name from database -  See functions below for this
          "", // placeholder for now - add database query here
      'price' =>  // Get product price from database -  See functions below for this
          0.00,   // placeholder for now - add database query here
    ];
  }
  return true;
}

/**
 * Update the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return bool True if updated successfully, false otherwise.
 */
function update_cart_quantity($product_id, $new_quantity) {
  global $conn;

  if (isset($_SESSION['cart'][$product_id])) {
    if ($new_quantity > 0) {
      $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
      return true;
    } else {
      //  Remove item from cart if quantity is 0
      unset($_SESSION['cart'][$product_id]);
      return true;
    }
  }
  return false;
}

/**
 * Remove an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True if removed successfully, false otherwise.
 */
function remove_from_cart($product_id) {
  global $conn;

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    return true;
  }
  return false;
}

/**
 * Get the total cart value.
 *
 * @return float The total cart value.
 */
function get_cart_total() {
  global $conn;
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price'];
    }
  }
  return $total;
}

/**
 *  Get cart contents.
 *
 * @return array The contents of the cart.
 */
function get_cart_contents() {
    return $_SESSION['cart'];
}

/**
 * Clear the cart
 *
 * @return bool True if cleared successfully, false otherwise.
 */
function clear_cart() {
    global $conn;
    unset($_SESSION['cart']);
    return true;
}


// Example Product Data - Replace with your database queries
$products = [
    [
        'id' => 1,
        'name' => 'Laptop',
        'price' => 1200.00
    ],
    [
        'id' => 2,
        'name' => 'Mouse',
        'price' => 25.00
    ],
    [
        'id' => 3,
        'name' => 'Keyboard',
        'price' => 75.00
    ]
];


// Shopping Cart Handling

// Add to cart functionality
if (isset($_POST['add_to_cart']) && isset($_POST['product_id'])) {
  $product_id = intval($_POST['product_id']);
  add_to_cart($product_id);
}

// Update cart quantity
if (isset($_POST['update_quantity']) && isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $product_id = intval($_POST['product_id']);
  $new_quantity = intval($_POST['quantity']);
  update_cart_quantity($product_id, $new_quantity);
}

// Remove from cart
if (isset($_POST['remove_from_cart']) && isset($_POST['product_id'])) {
  $product_id = intval($_POST['product_id']);
  remove_from_cart($product_id);
}

// Clear Cart
if (isset($_POST['clear_cart'])) {
    clear_cart();
}

// Get Cart Contents
$cart_contents = get_cart_contents();

// Calculate total
$total = get_cart_total();

// Get page number
if (isset($_GET['page']) && is_numeric($_GET['page'])) {
    $page = intval($_GET['page']);
    //  Pagination logic goes here -  Example:
    $offset = ($page - 1) * $items_per_page;
    $limited_cart = array_slice($cart_contents, $items_per_page, $offset);
} else {
    $page = 1;
    $limited_cart = $cart_contents; // All cart contents if no page is specified.
}


// Display the Cart
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <form method="post" action="">
    <button type="submit" name="clear_cart">Clear Cart</button>
  </form>

  <?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>

    <?php foreach ($limited_cart as $item): ?>
      <div class="cart-item">
        <strong><?php echo $item['name']; ?></strong> - $<?php echo number_format($item['price'], 2); ?>
        <p>Quantity: <?php echo $item['quantity']; ?></p>
        <form method="post" action="">
          <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
          <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1">
          <button type="submit" name="update_quantity">Update</button>
        </form>
        <form method="post" action="">
          <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
          <button type="submit" name="remove_from_cart">Remove</button>
        </form>
      </div>
    <?php endforeach; ?>

    <p>Total: $<?php echo number_format($total, 2); ?></p>
    <a href="?page=1&page=<?php echo $page + 1; ?>">Next Page</a>
    <a href="?page=1&page=<?php echo $page - 1; ?>">Previous Page</a>

  <?php endif; ?>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Establish the database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ---------------------  Shopping Cart Functionality  ---------------------

// Function to add an item to the cart
function addToCart($conn, $userId, $productId, $quantity) {
  //  (This is a basic example, in a real application you'd also handle
  //  validation, error checking, and potentially database transactions.)

  // Check if the item already exists in the cart for this user
  $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ii", $userId, $productId);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    // Item already in cart, increment quantity
    $stmt = $conn->prepare("UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?");
    $stmt->bind_param("iii", $quantity, $userId, $productId);
    $stmt->execute();
  } else {
    // Item not in cart, add it
    $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $userId, $productId, $quantity);
    $stmt->execute();
  }

  return true; // Indicate success
}

// Function to get the contents of the cart
function getCartContents($conn, $userId) {
  $sql = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $userId);
  $stmt->execute();
  $result = $stmt->get_result();

  $cart_items = [];
  while ($row = $result->fetch_assoc()) {
    $cart_items[] = $row;
  }

  return $cart_items;
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($conn, $userId, $productId, $quantity) {
  // Check if the item exists in the cart for this user
  $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ii", $userId, $productId);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    // Item exists, update quantity
    $sql = "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $quantity, $userId, $productId);
    $stmt->execute();
  } else {
    // Item doesn't exist, return false.  You might want to add an error log here.
    return false;
  }

  return true;
}


// Function to remove an item from the cart
function removeFromCart($conn, $userId, $productId) {
    $sql = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $userId, $productId);
    $stmt->execute();
    return true;
}


// ---------------------  Purchase Functionality  ---------------------

//  This is a simplified purchase function.  A real application would involve:
//  - Payment processing (e.g., Stripe, PayPal)
//  - Order fulfillment (updating inventory, generating shipping labels)
//  - Order confirmation emails

// Function to process a purchase (simplified)
function processPurchase($conn, $userId, $productId, $quantity) {
    // 1. Get the item's price (assuming a 'products' table exists)
    $sql = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
    $result = $stmt->get_result();
    $product = $result->fetch_assoc();

    if (!$product) {
        // Product not found
        return false;
    }

    $item_price = $product['price'];

    // 2. Calculate the total price
    $total_price = $item_price * $quantity;

    // 3.  Remove the items from the cart
    if (!removeFromCart($conn, $userId, $productId)) {
        // Handle error - could not remove item from cart.  Critical error!
        return false;
    }

    // 4.  (In a real application, you'd integrate with a payment processor here)
    //     For this example, we'll just simulate a payment.

    // 5.  Update order table (example - create an 'orders' table)
    //    This is a placeholder.
    $sql = "INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $userId, $productId, $quantity, $total_price);
    $stmt->execute();



    return true;  // Indicate successful purchase
}


// ---------------------  Example Usage (Illustrative)  ---------------------

//  This is just to demonstrate how the functions might be called.

// 1. Add an item to the cart
if (isset($_POST['add_to_cart'])) {
    $userId = 1; // Example user ID
    $productId = 101; // Example product ID
    $quantity = $_POST['quantity'];

    if (addToCart($conn, $userId, $productId, $quantity)) {
        echo "Item added to cart.<br>";
    } else {
        echo "Failed to add item to cart.<br>";
    }
}

// 2.  Get Cart Contents
$cart_items = getCartContents($conn, 1);
echo "<h2>Cart Contents:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// 3.  Process a Purchase (example)
if (isset($_POST['purchase'])) {
    $userId = 1;
    $productId = 101;
    $quantity = $_POST['quantity'];
    if (processPurchase($conn, $userId, $productId, $quantity)) {
        echo "Purchase successful!  (Simulated)<br>";
    } else {
        echo "Purchase failed.<br>";
    }
}


// Close the database connection
$conn->close();
?>


<?php

// Simulate a product database (replace with your actual database connection)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80],
];

// Function to handle the purchase process
function handlePurchase($cart) {
    // Validate cart items
    foreach ($cart as $itemId => $quantity) {
        if (!isset($products[$itemId]) || $quantity <= 0) {
            return ['error' => 'Invalid item or quantity'];
        }
    }

    // Calculate total price
    $totalPrice = 0;
    foreach ($cart as $itemId => $quantity) {
        $totalPrice += $products[$itemId]['price'] * $quantity;
    }

    // Display purchase confirmation
    echo "<h2>Purchase Confirmation</h2>";
    echo "<p>Items purchased: </p>";
    echo "<ul>";
    foreach ($cart as $itemId => $quantity) {
        echo "<li>" . $products[$itemId]['name'] . " x " . $quantity . " = $" . $products[$itemId]['price'] * $quantity . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Price: $" . $totalPrice . "</p>";

    // Simulate payment processing (replace with actual payment gateway integration)
    // echo "<p>Processing payment...</p>";
    // echo "<p>Payment successful!</p>";
    // return ['success' => true];
    
    return ['success' => true, 'total' => $totalPrice];
}

// ----------------------------------------------------
// Example Usage & Handling the Purchase
// ----------------------------------------------------

// 1. Get Cart Items from User Input (e.g., form submission)
$cart = [];
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['item1'])) {
        $cart[] = ['item1' => 'item1', 'quantity' => $_POST['item1']];
    }
    if (isset($_POST['item2'])) {
        $cart[] = ['item2' => 'item2', 'quantity' => $_POST['item2']];
    }
    if (isset($_POST['item3'])) {
        $cart[] = ['item3' => 'item3', 'quantity' => $_POST['item3']];
    }
}


// 2.  Handle the Purchase
$purchaseResult = handlePurchase($cart);

// 3. Display the Result
?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Store - Purchase</title>
</head>
<body>

    <h1>Online Store</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <h2>Shopping Cart</h2>
        <ul>
            <li>
                <label for="item1">T-Shirt (ID: 1) - $20</label><br>
                <input type="number" id="item1" name="item1" value="<?php echo isset($_POST['item1']) ? $_POST['item1'] : ''; ?>">
            </li>
            <li>
                <label for="item2">Jeans (ID: 2) - $50</label><br>
                <input type="number" id="item2" name="item2" value="<?php echo isset($_POST['item2']) ? $_POST['item2'] : ''; ?>">
            </li>
            <li>
                <label for="item3">Sneakers (ID: 3) - $80</label><br>
                <input type="number" id="item3" name="item3" value="<?php echo isset($_POST['item3']) ? $_POST['item3'] : ''; ?>">
            </li>
            <button type="submit">Checkout</button>
        </ul>
    </form>

    <?php if (isset($purchaseResult['error'])) { ?>
        <p style="color: red;">Error: <?php echo $purchaseResult['error']; ?></p>
    <?php } elseif (isset($purchaseResult['success'])) { ?>
        <p>Successfully placed order! Total: $<?php echo $purchaseResult['total']; ?></p>
    <?php } ?>

</body>
</html>


<?php

// Database configuration (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_user";
$dbPass = "your_password";
$dbName = "your_database";

//  Create a connection to the database
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to handle the purchase process
function handlePurchase($cart, $user_id) {
    global $conn;

    // 1. Calculate the total amount
    $totalAmount = 0;
    foreach ($cart as $item_id => $quantity) {
        // Fetch product details from the database
        $product = $conn->query("SELECT price, quantity FROM products WHERE id = $item_id");

        if ($product->num_rows > 0) {
            $row = $product->fetch_assoc();
            $totalAmount += $row['price'] * $quantity;
        } else {
            // Handle product not found error (e.g., log an error, display a message)
            error_log("Product with ID $item_id not found.");
            continue; // Skip to the next item in the cart.
        }
    }

    // 2. Insert order details into the orders table
    $order_id = $conn->query("INSERT INTO orders (user_id, total_amount, order_date) VALUES ($user_id, $totalAmount, NOW())");

    if (!$order_id) {
        error_log("Error inserting order details: " . $conn->error);
        return false;
    }

    // Get the newly created order ID
    $order_id = $conn->query("SELECT id FROM orders WHERE id = LAST_INSERT_ID()");

    if (!$order_id) {
        error_log("Error getting order ID: " . $conn->error);
        return false;
    }
    $order_id = $order_id->fetch_assoc()['id'];


    // 3.  Insert order items into the order_items table
    foreach ($cart as $item_id => $quantity) {
        $conn->query("INSERT INTO order_items (order_id, product_id, quantity) VALUES ($order_id, $item_id, $quantity)");
    }

    // 4.  Clear the cart (Important for a real application)
    $_SESSION['cart'] = [];

    return $order_id; // Return the order ID for confirmation
}

// Example Usage:

// 1.  Simulate user data (Replace with actual user authentication)
session_start();
$userId = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : 1; // Default user ID 1

// 2. Simulate the cart data.  This should come from a session or form input.
$cart = [
    1 => 2, // Product ID 1, quantity 2
    3 => 1,  // Product ID 3, quantity 1
];


// 3.  Handle the purchase
$orderId = handlePurchase($cart, $userId);

if ($orderId) {
    echo "<h2>Purchase successful!</h2>";
    echo "<p>Order ID: " . $orderId . "</p>";
    echo "<p>Thank you for your purchase!</p>";
} else {
    echo "<h2>Purchase failed.  Please try again.</h2>";
}

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (Important for security)
  $product_name = $_POST["product_name"];
  $quantity = intval($_POST["quantity"]);
  $price = floatval($_POST["price"]);

  // Input validation - essential for security
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error_message = "Please fill in all fields and ensure quantities and prices are positive.";
  } else {
    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO cart (product_name, quantity, price) VALUES (?, ?, ?)";

    // Use prepared statements to prevent SQL injection
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sii", $product_name, $quantity, $price);

    // Execute the statement
    if ($stmt->execute()) {
      $success_message = "Product added to cart!";
    } else {
      $error_message = "Error adding product to cart.";
    }

    // Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (isset($success_message)) {
    echo "<p style='color: green;'>$success_message</p>";
  } else if (isset($error_message)) {
    echo "<p style='color: red;'>$error_message</p>";
  } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" step="0.01" id="price" name="price" required><br><br>

    <button type="submit">Add to Cart</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_user";
$dbPass = "your_password";
$dbName = "your_database";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($orderData) {
    $conn = connectToDatabase();

    // Sanitize and validate the input data
    $product_id = $conn->real_escape_string($orderData['product_id']);
    $quantity = $conn->real_escape_string($orderData['quantity']);
    $customer_name = $conn->real_escape_string($orderData['customer_name']);
    $customer_email = $conn->real_escape_string($orderData['customer_email']);

    // Check if product exists (basic example - improve with more robust validation)
    $check_product_query = "SELECT id, name, price FROM products WHERE id = '$product_id'";
    $result = $conn->query($check_product_query);

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Calculate the total price
        $total_price = $product_price * $quantity;

        // Insert the order into the database
        $order_query = "INSERT INTO orders (product_id, quantity, customer_name, customer_email, total_price)
                        VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', '$total_price')";

        if ($conn->query($order_query) === TRUE) {
            // Optionally, update the product inventory (example)
            //  $inventory_update_query = "UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
            //  $conn->query($inventory_update_query);

            return true; // Purchase successful
        } else {
            echo "Error inserting order: " . $conn->error;
            return false;
        }
    } else {
        echo "Product with ID '$product_id' not found.";
        return false;
    }

    $conn->close();
}

// ------------------ Example Usage (from a form submission or API) ------------------

// Assuming you received the order data from a POST request
// (e.g., from an HTML form or an API call)

// Example Data (replace with actual form data)
$orderData = [
    'product_id' => '1',
    'quantity' => '2',
    'customer_name' => 'John Doe',
    'customer_email' => 'john.doe@example.com'
];

// Process the purchase
$purchaseSuccessful = handlePurchase($orderData);

if ($purchaseSuccessful) {
    echo "Purchase successful! Order ID: [Generated Order ID Here]";
} else {
    echo "Purchase failed.  Check the error messages above.";
}

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "shop_db";
$db_user = "your_username";
$db_password = "your_password";

// -------------------------------------------------
//  Purchase Functionality
// -------------------------------------------------

/**
 * Processes a purchase.
 *
 * @param array $cart_items  Array of product IDs and quantities in the cart.
 * @return string  Message indicating success or failure.
 */
function processPurchase(array $cart_items) {
  // 1. Validate Cart Items (Check for valid product IDs and quantities)
  foreach ($cart_items as $product_id => $quantity) {
    if (!isset($product_id) || !is_numeric($product_id) || $quantity <= 0) {
      return "Invalid cart item(s). Please check your cart.";
    }
  }

  // 2. Database Interaction - Insert Order Details
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  // Enable exception handling

    $stmt = $pdo->prepare("
      INSERT INTO orders (user_id, total_amount)
      VALUES (:user_id, :total_amount)
    ");
    $user_id = 1; // Replace with the actual user ID.  Could get from session/auth.
    $total_amount = calculateTotal($cart_items); // Get total from cart
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':total_amount', $total_amount);
    $stmt->execute();

    $order_id = $pdo->lastInsertId();

    // 3. Insert Order Items
    foreach ($cart_items as $product_id => $quantity) {
      $stmt = $pdo->prepare("
        INSERT INTO order_items (order_id, product_id, quantity)
        VALUES (:order_id, :product_id, :quantity)
      ");
      $stmt->bindParam(':order_id', $order_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->execute();
    }

    // 4. Clear Cart (Remove items from the cart)
    clearCart($product_id => $quantity);

    return "Purchase successful! Order ID: $order_id";

  } catch (PDOException $e) {
    return "Error: " . $e->getMessage();
  }
}


/**
 * Calculates the total amount for the cart.
 *
 * @param array $cart_items Array of product IDs and quantities in the cart.
 * @return float The total amount.
 */
function calculateTotal(array $cart_items) {
  $total = 0;
  // This is a placeholder - replace with your actual product price retrieval
  $product_prices = [
      1 => 25.00, // Example: Product ID 1 - $25.00
      2 => 15.50, // Example: Product ID 2 - $15.50
  ];

  foreach ($cart_items as $product_id => $quantity) {
    if (isset($product_prices[$product_id])) {
      $total_for_product = $product_prices[$product_id] * $quantity;
      $total += $total_for_product;
    } else {
      // Handle the case where product_id is not found.
      return "Error: Product not found";
    }
  }
  return round($total, 2); // Round to 2 decimal places
}

/**
 * Clears the shopping cart. This is a placeholder -  Implement your cart clearing logic here.
 * @param array $cart_items  Array of product IDs and quantities.
 */
function clearCart(array $cart_items) {
  // Placeholder: Implement your logic to clear the shopping cart.
  // This might involve updating the cart table, session, or whatever your
  // cart implementation uses.  For this example, we simply empty the array.

  //This function is needed for the cart_items to be passed to the `processPurchase` function
  $cart_items = [];
}


// -------------------------------------------------
//  Example Usage (This part is for demonstration and testing.  Don't use this directly in a production environment.)
// -------------------------------------------------

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Assuming the cart items are sent as a JSON array (check for this in the form submission)
  $cart_items_json = $_POST["cart_items"];
  $cart_items = json_decode($cart_items_json, true); // Convert JSON to associative array

  if (json_decode($cart_items_json, true)) {
    $result = processPurchase($cart_items);
    echo "<p>$result</p>";
  } else {
    echo "<p>Invalid cart format.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>
  <h1>Shopping Cart</h1>

  <form method="post" action="">
    <label for="cart_items">Cart Items:</label>
    <textarea id="cart_items" name="cart_items" rows="10" cols="50">
      1,2
    </textarea>
    <br>
    <button type="submit">Place Order</button>
  </form>
</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the product ID exists (optional, but good practice)
  // You can add a query here to verify product existence and prevent invalid IDs.
  // For simplicity, we'll assume the product exists.

  //  Prepare the SQL statement
  $sql = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";

  // Prepare statement
  $stmt = $conn->prepare($sql);

  if ($stmt) {
      // Bind parameters
      $stmt->bind_param("ii", $product_id, $quantity);

      // Execute the statement
      if ($stmt->execute()) {
          return true;
      } else {
          error_log("Query execution failed: " . $conn->error);
          return false;
      }
  } else {
      error_log("Query preparation failed");
      return false;
  }
  // Close statement
  $stmt->close();
}

// Function to get the cart contents
function getCartContents($conn) {
  $sql = "SELECT p.product_name, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $cart_data = array();
    while($row = $result->fetch_assoc()) {
      $cart_data[] = $row;
    }
    return $cart_data;
  } else {
    return [];
  }
}



// Example Usage (Simulating a Purchase)
// Assuming this is called during a purchase process

// 1. Add items to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (addToCart($conn, $product_id, $quantity)) {
    echo "<p>Item added to cart!</p>";
  } else {
    echo "<p>Error adding item to cart.</p>";
  }
}


// 2.  Example of getting and displaying the cart contents
$cart_items = getCartContents($conn);

echo "<h2>Your Shopping Cart</h2>";
if (count($cart_items) > 0) {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}



// Close the database connection
$conn->close();

?>


<?php

// --- Configuration ---
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200, 'quantity' => 10],
    2 => ['name' => 'Mouse', 'price' => 25, 'quantity' => 50],
    3 => ['name' => 'Keyboard', 'price' => 75, 'quantity' => 30],
    4 => ['name' => 'Monitor', 'price' => 300, 'quantity' => 15]
];

$cart = []; // Array to store items in the cart
$total_amount = 0;
$order_id = rand(1000, 9999); // Generate a random order ID

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 */
function addToCart(int $product_id, int $quantity) {
    global $cart, $total_amount; // Access the global variables

    if (isset($products[$product_id])) {
        $product = $products[$product_id];

        if ($product['quantity'] >= $quantity) {
            $cart[] = $product;
            $total_amount += $product['price'] * $quantity;
            echo "Added " . $quantity . " " . $product['name'] . " to your cart.<br>";
        } else {
            echo "Not enough " . $product['name'] . " in stock.<br>";
        }
    } else {
        echo "Product ID " . $product_id . " not found.<br>";
    }
}

/**
 * Displays the contents of the cart.
 */
function displayCart() {
    global $cart;

    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cart as $item) {
            echo "<li>" . $item['name'] . " - $" . $item['price'] . "  (Quantity: " . $item['quantity'] . ")</li>";
        }
        echo "</ul>";
        echo "<p><b>Total: $" . $total_amount . "</p>";
    }
}

/**
 * Processes the order (simulated).  In a real application, this would
 * integrate with a database or payment gateway.
 */
function processOrder() {
  global $cart, $total_amount;

  if (empty($cart)) {
    echo "<p>Your cart is empty.  Cannot process order.</p>";
    return;
  }

  echo "<h2>Order Confirmation</h2>";
  echo "<p>Order ID: " . $order_id . "</p>";
  echo "<p>Items: </p>";

  foreach ($cart as $item) {
    echo $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . "<br>";
  }

  echo "<p>Total Amount: $" . $total_amount . "</p>";
  echo "<p>Thank you for your order!</p>";

  // Clear the cart after processing (optional)
  $cart = [];
  $total_amount = 0;
}

// --- Example Usage (Handle the Purchase) ---

if (isset($_GET['add_to_cart'])) {
    $product_id = (int)$_GET['add_to_cart']; // Get product ID from GET request
    $quantity = (int)$_GET['quantity'] ?? 1; //Get quantity, default to 1 if not provided

    addToCart($product_id, $quantity);
}

if (isset($_GET['process_order'])) {
    processOrder();
}

// Display the Cart and a Button to Process the Order
displayCart();
echo "<br><br>";
echo "<a href='?process_order=true'>Process Order</a>";
?>


<?php

// Database connection details (Replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to handle purchase logic
function handlePurchase($product_id, $quantity, $customer_name, $customer_email) {
  // Validate input (basic example - you should add more robust validation)
  if (empty($product_id) || empty($quantity) || empty($customer_name) || empty($customer_email)) {
    return "Error: All fields are required.";
  }

  if (!is_numeric($quantity) || $quantity <= 0) {
    return "Error: Quantity must be a positive number.";
  }

  // Fetch product details from the database
  $sql = "SELECT product_id, product_name, price FROM products WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id); // "i" for integer
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    return "Error: Product not found.";
  }

  $product = $result->fetch_assoc();

  // Calculate total price
  $total_price = $product['price'] * $quantity;

  //  Simulate order processing (replace with actual database interaction)
  //  In a real application, you would insert a new record into the 'orders' table.
  echo "<h2>Order Summary:</h2>";
  echo "<p>Product: " . $product['product_name'] . "</p>";
  echo "<p>Quantity: " . $quantity . "</p>";
  echo "<p>Total Price: $" . number_format($total_price, 2) . "</p>"; // Format to 2 decimal places

  echo "<p>Customer Name: " . $customer_name . "</p>";
  echo "<p>Customer Email: " . $customer_email . "</p>";
  
  return "Order placed successfully! (Simulated)"; // Return a confirmation message
}

// ---  Handling the Purchase Request (Example - Using a POST request) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  $customer_name = $_POST["customer_name"];
  $customer_email = $_POST["customer_email"];

  $order_confirmation = handlePurchase($product_id, $quantity, $customer_name, $customer_email);

  echo $order_confirmation;
} else {
  // If not a POST request, display a form to collect purchase details.
  ?>
  <h2>Make a Purchase</h2>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <input type="submit" value="Place Order">
  </form>
<?php
}

// --- Database Setup (For demonstration purposes - Create a sample 'products' table ---
/*
$sql = "CREATE TABLE IF NOT EXISTS products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  price DECIMAL(10, 2) NOT NULL
)";
if ($conn->query($sql) === TRUE) {
  $conn->query("INSERT INTO products (product_id, product_name, price) VALUES (1, 'Laptop', 1200.00)");
  $conn->query("INSERT INTO products (product_id, product_name, price) VALUES (2, 'Mouse', 25.00)");
} else {
  echo "Error creating table: " . $conn->error;
}
*/
?>


<?php
session_start(); // Start the session to maintain user data

// Sample Product Data (replace with your database or data source)
$products = [
    1 => ["name" => "T-Shirt", "price" => 20.00],
    2 => ["name" => "Mug", "price" => 10.00],
    3 => ["name" => "Hat", "price" => 15.00],
];


if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if the form has been submitted

    $cart = isset($_POST["cart"]) ? $_POST["cart"] : [];
    $quantity = isset($_POST["quantity"]) ? $_POST["quantity"] : [];

    // Validate input (very basic - enhance in a real application)
    $valid_cart = true;
    $valid_quantity = true;
    foreach($cart as $product_id => $qty) {
        if(!is_numeric($product_id) || !is_numeric($qty) || $qty <= 0) {
            $valid_cart = false;
        }
    }

    if (!$valid_cart) {
        $error_message = "Invalid product ID or quantity.";
    }

    if ($valid_cart) {
        $total = 0;
        foreach ($cart as $product_id => $qty) {
            if (isset($products[$product_id])) {
                $total += $products[$product_id]["price"] * $qty;
            } else {
                $error_message = "Product ID not found.";
                break; // Stop processing if product ID is invalid
            }
        }

        if ($error_message == "") {
            // Display Order Summary
            echo "<h2>Order Summary</h2>";
            echo "<p>Total Amount: $" . number_format($total, 2) . "</p>";
            echo "<p>Thank you for your order!</p>";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Products</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <br><br>

    <input type="submit" value="Add to Cart">
</form>

<hr>

<h2>Your Cart</h2>
<?php
if (isset($_SESSION["cart"])) {
    echo "<ul>";
    foreach ($_SESSION["cart"] as $product_id => $qty) {
        if (isset($products[$product_id])) {
            echo "<li>" . $products[$product_id]["name"] . " - Quantity: " . $qty . " - Price: $" . number_format($products[$product_id]["price"], 2) . "</li>";
        }
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual details)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle adding to cart
function addToCart($productId, $quantity) {
    $conn = connectDB();
    $userId = isset($_SESSION['userId']) ? $_SESSION['userId'] : null; // Get user ID from session

    if (!$userId) {
        return false; // User not logged in
    }

    // Check if product exists
    $productQuery = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($productQuery);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        // Product exists - add to cart
        $productName = $row['name'];
        $productPrice = $row['price'];

        // Check if the cart exists for this user
        $cartQuery = "SELECT id FROM carts WHERE userId = ? ";
        $stmt = $conn->prepare($cartQuery);
        $stmt->bind_param("i", $userId);
        $stmt->execute();
        $cartResult = $stmt->get_result();
        $cartId = null;

        if ($cartResult->num_rows > 0) {
            $cartId = $cartResult->fetch_assoc()['id'];
        } else {
            // Create a new cart for the user
            $newCartQuery = "INSERT INTO carts (userId) VALUES (?)";
            $stmt = $conn->prepare($newCartQuery);
            $stmt->bind_param("i", $userId);
            $stmt->execute();
            $cartId = $conn->insert_id;
        }

        // Add item to cart
        $cartItemQuery = "INSERT INTO cart_items (cartId, productId, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($cartItemQuery);
        $stmt->bind_param("iii", $cartId, $productId, $quantity);
        $stmt->execute();

        return true;
    } else {
        return false; // Product not found
    }
    $stmt->close();
    $conn->close();
}


// Function to retrieve cart items
function getCartItems() {
    $conn = connectDB();
    $userId = isset($_SESSION['userId']) ? $_SESSION['userId'] : null;

    if (!$userId) {
        return []; // Empty cart for unauthenticated users
    }

    $cartItemsQuery = "SELECT ci.id AS cartItemId, ci.productId, ci.quantity, p.name, p.price FROM cart_items ci JOIN products p ON ci.productId = p.id WHERE ci.cartId IN (SELECT id FROM carts WHERE userId = ?) ";
    $stmt = $conn->prepare($cartItemsQuery);
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();

    $cartItems = [];
    while ($row = $result->fetch_assoc()) {
        $cartItems[] = $row;
    }

    $stmt->close();
    $conn->close();
    return $cartItems;
}


// Function to remove an item from cart
function removeFromCart($cartItemId) {
    $conn = connectDB();
    $userId = isset($_SESSION['userId']) ? $_SESSION['userId'] : null;

    if (!$userId) {
        return false; // User not logged in
    }

    $removeCartItemQuery = "DELETE FROM cart_items WHERE id = ?";
    $stmt = $conn->prepare($removeCartItemQuery);
    $stmt->bind_param("i", $cartItemId);
    $stmt->execute();

    return $stmt->affected_rows > 0; // Return true if item was removed
}

// Function to update quantity in cart
function updateCartQuantity($cartItemId, $newQuantity) {
    $conn = connectDB();
    $userId = isset($_SESSION['userId']) ? $_SESSION['userId'] : null;

    if (!$userId) {
        return false; // User not logged in
    }

    $updateCartItemQuery = "UPDATE cart_items SET quantity = ? WHERE id = ? ";
    $stmt = $conn->prepare($updateCartItemQuery);
    $stmt->bind_param("is", $newQuantity, $cartItemId);
    $stmt->execute();

    return $stmt->affected_rows > 0;
}



// ---  Example Usage -  Frontend (JavaScript)  ---
//  This code demonstrates how you'd use the PHP functions in a JavaScript environment.
//  You'll need to adapt this to your specific frontend framework (e.g., React, Angular, Vue).
//  This is a simplified illustration.

//  1.  Add to Cart (example)
//  $productId = 1;
//  $quantity = 2;
//  if (addToCart($productId, $quantity)) {
//      console.log("Product added to cart");
//  } else {
//      console.log("Failed to add product to cart");
//  }

//  2. Retrieve Cart Items
//  let cartItems = getCartItems();
//  console.log("Cart Items:", cartItems);

//  3. Remove Item
//  let cartItemIdToRemove = 5;
//  if (removeFromCart(cartItemIdToRemove)) {
//      console.log("Item removed from cart");
//      let cartItems = getCartItems();
//      console.log("Cart Items after removal:", cartItems);
//  } else {
//      console.log("Failed to remove item from cart");
//  }

//  4. Update Quantity
//  let cartItemIdToUpdate = 3;
//  let newQuantity = 5;
//  if (updateCartQuantity(cartItemIdToUpdate, newQuantity)) {
//      console.log("Quantity updated");
//      let cartItems = getCartItems();
//      console.log("Cart Items after update:", cartItems);
//  } else {
//      console.log("Failed to update quantity");
//  }


// ---  Important Notes  ---
// 1.  Database Setup: Create the `products`, `carts`, and `cart_items` tables in your MySQL database.  The specific schema should be appropriate for your needs.

// 2.  Error Handling: This code includes minimal error handling.  In a production environment, you should implement more robust error handling and logging.

// 3.  Security: This code is a basic example and does not include all security measures.  You *must* sanitize user input, protect against SQL injection, and implement proper authentication and authorization.

// 4.  Frontend Integration: Adapt the JavaScript code to your frontend framework for proper rendering and interaction.
// 5.  Sessions: The code uses `session_start()` to maintain user sessions.  Make sure your server is configured to handle PHP sessions.

// Example database schema:

// products table:
//   id (INT, PRIMARY KEY)
//   name (VARCHAR)
//   price (DECIMAL)

// carts table:
//   id (INT, PRIMARY KEY)
//   userId (INT)

// cart_items table:
//   id (INT, PRIMARY KEY)
//   cartId (INT, FOREIGN KEY referencing carts.id)
//   productId (INT, FOREIGN KEY referencing products.id)
//   quantity (INT)
?>


<?php

// Database connection details (Replace with your actual details)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // Validate input (add more robust validation as needed)
    if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
        return "Error: All fields are required.";
    }

    // Check if the cart exists
    $result = $conn->query("SELECT * FROM carts WHERE id = '$cart_id'");
    if ($result->num_rows > 0) {
        $cart = $result->fetch_assoc();

        // Insert order details into the orders table
        $order_id = $conn->insert("orders", [
            "cart_id" => $cart_id,
            "customer_name" => $customer_name,
            "customer_email" => $customer_email,
            "payment_method" => $payment_method,
            "order_date" => date("Y-m-d H:i:s")
        ]);

        // Update the cart (e.g., mark as sold or delete)
        $conn->query("UPDATE carts SET sold = 1 WHERE id = '$cart_id'");

        // Optionally, you can send an email confirmation here

        return "Purchase successful! Order ID: " . $conn->insert_id;
    } else {
        return "Error: Cart not found.";
    }
}

// --- Example usage (assuming you have a form to submit data) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $cart_id = $_POST["cart_id"];
    $customer_name = $_POST["customer_name"];
    $customer_email = $_POST["customer_email"];
    $payment_method = $_POST["payment_method"];

    $result = handlePurchase($cart_id, $customer_name, $customer_email, $payment_method);

    echo $result;
} else {
    // Display form (for initial setup)
    echo "<form method='post'>";
    echo "Cart ID: <input type='text' name='cart_id' value='" . $_POST["cart_id"] . "'><br>";
    echo "Customer Name: <input type='text' name='customer_name' value='" . $_POST["customer_name"] . "'><br>";
    echo "Customer Email: <input type='email' name='customer_email' value='" . $_POST["customer_email"] . "'><br>";
    echo "Payment Method: <input type='text' name='payment_method' value='" . $_POST["payment_method"] . "'><br>";
    echo "<input type='submit' value='Place Order'>";
    echo "</form>";
}

?>


<?php
session_start();

// Database connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


// Function to handle the purchase process
function handlePurchase($cart_id) {
    $conn = connectToDatabase();

    // Get cart details
    $query = "SELECT * FROM cart WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $cart = $result->fetch_assoc();

    // Check if cart exists
    if (!$cart) {
        $stmt->close();
        $conn->close();
        return false;
    }

    // Update order details (Assuming you have an "orders" table)
    //  You'll need to adapt this to your database schema
    $order_date = date("Y-m-d H:i:s");
    $total_amount = 0;

    // Calculate total amount (Example - adapt to your product prices)
    $query = "SELECT price, quantity FROM cart_items WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();

    while ($row = $result->fetch_assoc()) {
        $product_price = $row['price'];
        $quantity = $row['quantity'];
        $total_amount += $product_price * $quantity;
    }
    $stmt->close();



    $query = "INSERT INTO orders (user_id, order_date, total_amount) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("sss", $_SESSION['user_id'], $order_date, $total_amount);
    $stmt->execute();
    $order_id = $conn->insert_id; // Get the ID of the newly created order
    $stmt->close();

    // Iterate through cart items and insert into order_items
    $query = "SELECT product_id, quantity FROM cart_items WHERE cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();

    while ($row = $result->fetch_assoc()) {
        $product_id = $row['product_id'];
        $quantity = $row['quantity'];

        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iii", $order_id, $product_id, $quantity);
        $stmt->execute();
    }
    $stmt->close();

    // Clear the cart
    $query = "DELETE FROM cart WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $stmt->close();


    // Success message
    return true;
}



// Purchase handler
if (isset($_POST['submit_purchase'])) {
    $cart_id = $_POST['cart_id'];

    if (handlePurchase($cart_id)) {
        echo "<h2>Purchase Successful!</h2>";
        echo "<p>Your order has been placed.  A confirmation email has been sent to your address.</p>";
    } else {
        echo "<h2>Purchase Failed!</h2>";
        echo "<p>There was an error processing your purchase.  Please try again later.</p>";
    }
}

// Display cart items (for demo purposes - you'll likely have a separate display function)
function displayCartItems($cart_id) {
  $conn = connectToDatabase();

  $query = "SELECT c.id, p.name, p.price, ci.quantity FROM cart ci JOIN cart c ON ci.cart_id = c.id JOIN products p ON ci.product_id = p.id WHERE c.id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $cart_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    echo "<h3>Cart Items:</h3>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th></tr>";
    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row['name'] . "</td>";
      echo "<td>" . $row['price'] . "</td>";
      echo "<td>" . $row['quantity'] . "</td>";
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>Cart is empty.</p>";
  }
  $stmt->close();
  $conn->close();
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>E-commerce Purchase</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php displayCartItems($_SESSION['cart_id']); ?>

  <form method="post" action="">
    <input type="hidden" name="cart_id" value="<?php echo $_SESSION['cart_id']; ?>">
    <input type="submit" name="submit_purchase" value="Complete Purchase">
  </form>

</body>
</html>


<?php

// Database connection details
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Session handling
session_start();

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase process
function handlePurchase($cart, $customerName, $customerEmail, $paymentAmount) {
    $conn = connectToDatabase();

    // Insert order details into the database
    $sql = "INSERT INTO orders (customer_name, customer_email, order_total, order_date) VALUES (?, ?, ?, NOW())";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sss", $customerName, $customerEmail, $paymentAmount);
    $stmt->execute();
    $orderId = $conn->insert_id; // Get the ID of the newly inserted order

    // Insert order items into the order_items table
    foreach ($cart as $item) {
        $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iii", $orderId, $item['product_id'], $item['quantity']);
        $stmt->execute();
    }

    // Clear the cart (optional, depending on your requirements)
    $_SESSION['cart'] = [];  // You can store this in a file instead if needed

    return $orderId;
}


// Check if the purchase form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get cart data from the session
    $cart = $_SESSION['cart'];

    // Get customer details from the form
    $customerName = $_POST["customer_name"];
    $customerEmail = $_POST["customer_email"];
    $paymentAmount = $_POST["payment_amount"]; // Price of the order

    // Handle the purchase
    $orderId = handlePurchase($cart, $customerName, $customerEmail, $paymentAmount);

    // Display a success message
    echo "<p>Order placed successfully! Order ID: " . $orderId . "</p>";
}

// ---  Example Form (HTML)  ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Product</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="payment_amount">Payment Amount:</label>
    <input type="number" id="payment_amount" name="payment_amount" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
</form>

<?php

//  Example Cart Data (for testing)
//  You would likely get this from a shopping cart system in a real application.
//  This is just to demonstrate the functionality.
$_SESSION['cart'] = [
    ['product_id' => 1, 'quantity' => 2],
    ['product_id' => 2, 'quantity' => 1],
];

?>

</body>
</html>


<?php

// Define product data (in a real application, this would come from a database)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 20],
];

// Function to handle the purchase process
function handlePurchase() {
    // 1. Get user input
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if (!isset($products[$productId])) {
        echo "<p>Invalid product ID.</p>";
        return;
    }

    if ($quantity <= 0 || !is_numeric($quantity)) {
        echo "<p>Invalid quantity. Please enter a positive number.</p>";
        return;
    }

    $quantity = (int)$quantity; // Ensure quantity is an integer

    // 2. Calculate the total price
    $totalPrice = $products[$productId]['price'] * $quantity;

    // 3.  Update inventory (simulated)
    $products[$productId]['quantity'] -= $quantity;

    // 4. Display confirmation
    echo "<p><strong>Order Confirmation:</strong></p>";
    echo "<p>Product: " . $products[$productId]['name'] . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Total Price: $" . number_format($totalPrice, 2) . "</p>";
    echo "<p>Thank you for your purchase!</p>";
}


// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    handlePurchase();
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Online Purchase</title>
</head>
<body>

<h1>Online Purchase</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"" . $id . "\">" . $id . " - " . $product['name'] . "</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" value="1"><br><br>

    <input type="submit" value="Place Order">
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize and validate input
  $product_id = isset($_POST["product_id"]) ? (int)$_POST["product_id"] : 0; // Integer conversion for safety
  $quantity = isset($_POST["quantity"]) ? (int)$_POST["quantity"] : 1; // Default quantity is 1
  $shipping_address = isset($_POST["shipping_address"]) ? trim($_POST["shipping_address"]) : "";
  $customer_name = isset($_POST["customer_name"]) ? trim($_POST["customer_name"]) : "";
  $customer_email = isset($_POST["customer_email"]) ? trim($_POST["customer_email"]) : "";

  // Validate input (Add more robust validation as needed)
  if ($product_id <= 0 || $quantity <= 0 || empty($shipping_address) || empty($customer_name) || empty($customer_email)) {
    $error = "Please fill in all fields correctly.";
  } else {
    // Database query (Replace with your product table and product details)
    $sql = "SELECT * FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);  //Use prepared statements to prevent SQL injection
    $stmt->bind_param("i", $product_id); // "i" indicates integer type
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $error = "Product not found.";
    } else {
      $product = $result->fetch_assoc();

      // Calculate total price
      $total_price = $product["price"] * $quantity;

      // Data for order creation
      $order_id = rand(100000, 999999); // Generate a random order ID
      $order_date = date("Y-m-d H:i:s");

      // Prepare data for insertion into the orders table
      $order_data = [
        "order_id" => $order_id,
        "customer_name" => $customer_name,
        "customer_email" => $customer_email,
        "shipping_address" => $shipping_address,
        "product_id" => $product_id,
        "quantity" => $quantity,
        "total_price" => $total_price,
        "order_date" => $order_date,
        "status" => "pending" // Initial order status
      ];

      // Insert order into the orders table
      $order_query = "INSERT INTO orders (order_id, customer_name, customer_email, shipping_address, product_id, quantity, total_price, order_date, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
      $stmt_order = $conn->prepare($order_query);
      $stmt_order->bind_param("sisssisss", $order_id, $customer_name, $customer_email, $shipping_address, $product_id, $quantity, $total_price, $order_date, $status);
      $stmt_order->execute();

      // Insert order items into the order_items table
      $order_items_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmt_item = $conn->prepare($order_items_query);
      $stmt_item->bind_param("iii", $order_id, $product_id, $quantity);
      $stmt_item->execute();

      // Display success message
      $success = "Order placed successfully! Order ID: " . $order_id;
    }
  }
}

//  Example HTML Form
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1" required><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <input type="text" id="shipping_address" name="shipping_address" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create a database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}


// Function to handle adding a purchase
function addPurchase($cartId, $userId, $orderDate) {
  // Validate inputs (Important for security)
  if (!$cartId || !$userId || !$orderDate) {
    return false; // Or throw an exception
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO purchases (cart_id, user_id, order_date) VALUES (?, ?, ?)";

  // Prepare the statement
  $stmt = $conn->prepare($sql);

  // Bind parameters
  $stmt->bind_param("iii", $cartId, $userId, $orderDate);

  // Execute the statement
  if ($stmt->execute()) {
    return true;
  } else {
    // Handle errors (log them, display to user, etc.)
    error_log("Error adding purchase: " . $conn->error);
    return false;
  }

  // Close the statement
  $stmt->close();
}



// --- Example Usage (Simulating a Purchase Request) ---

// 1. Get Cart ID and User ID (from a form, API, etc.)
$cartId = $_POST['cart_id']; // Assuming data is sent via POST
$userId = $_POST['user_id'];
$orderDate = date("Y-m-d H:i:s"); // Get current timestamp for order date


// 2. Add the Purchase
if (addPurchase($cartId, $userId, $orderDate)) {
  echo "Purchase successful!  Cart ID: " . $cartId;
} else {
  echo "Purchase failed.  Please try again later.";
}



// --- Database Table Structure (Example) ---

// CREATE TABLE purchases (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   cart_id INT NOT NULL,
//   user_id INT NOT NULL,
//   order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
//   FOREIGN KEY (cart_id) REFERENCES carts(id),
//   FOREIGN KEY (user_id) REFERENCES users(id)
// );


// ---  Important Considerations and Best Practices ---

// 1.  Security:
//   - **Input Validation:** Always validate and sanitize user input (e.g., using `filter_var()`) to prevent SQL injection attacks.  This is *critical*.
//   - **Prepared Statements:** Use prepared statements (as shown above) to prevent SQL injection.  *Never* directly concatenate user input into SQL queries.
//   - **Error Handling:** Implement robust error handling to catch and log errors.  Don't expose error messages directly to the user, as they can be exploited.
//   - **Authentication/Authorization:**  Implement proper user authentication and authorization to ensure only authorized users can add purchases.

// 2.  Data Types:  Adjust the data types (INT, DATETIME, etc.) in your database table based on the actual data you're storing.

// 3.  Error Logging:  Use `error_log()` to log errors to a file or a logging system.  This is invaluable for debugging and monitoring.

// 4.  User Interface (UI):  This code is just the backend logic.  You'll need to create a form or API endpoint to handle the purchase request from the user's browser or other application.

// 5.  Cart and User Tables:  This code assumes you have existing `carts` and `users` tables in your database.  You'll need to define those tables as well.  The example table structure above provides a basic structure.

// 6.  Transaction Management (Advanced): For more complex scenarios (e.g., if a purchase involves updating inventory), consider using database transactions to ensure atomicity (all changes succeed or none do).

?>


<?php

// Database configuration (Replace with your actual database details)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'your_username';
$db_pass = 'your_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize input (Important for security!)
  $product_name = $_POST["product_name"];
  $quantity = (int)$_POST["quantity"];
  $price = (float)$_POST["price"];  // Use float for monetary values
  $customer_name = $_POST["customer_name"];

  //  More robust validation and sanitization can be added here
  //  e.g., check if the name is not empty, quantity is positive, etc.
  //  Also, use prepared statements to prevent SQL injection.

  //  Basic validation -  This is a minimal example.  Expand as needed.
  if (empty($product_name) || $quantity <= 0 || $price <= 0) {
    $error_message = "Please fill in all fields and ensure quantity and price are positive.";
  } else {
    // Prepare the SQL query (using prepared statements - RECOMMENDED)
    $sql = "INSERT INTO purchases (product_name, quantity, price, customer_name) 
            VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);  // $conn is your database connection object

    // Bind the parameters
    $stmt->bind_param("sss", $product_name, $quantity, $price);  // "sss" indicates 3 string parameters

    // Execute the query
    if ($stmt->execute()) {
      $success_message = "Purchase added successfully!";
    } else {
      $error_message = "Error adding purchase: " . $stmt->error;
    }

    // Close the statement
    $stmt->close();
    
    //Close connection
    $conn->close();
    
    
  }

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Add Purchase</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" min="0.01" required><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" placeholder="Enter customer name" required><br><br>

    <input type="submit" value="Add to Purchase">
  </form>

</body>
</html>


<?php

// This is a simplified example. For a production environment, 
// you would likely use a database for storing product information,
// user information, and order details.

class Product {
  public $id;
  public $name;
  public $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }
}

class ShoppingCart {
  public $items = [];

  public function addItem($product, $quantity = 1) {
    $this->items[] = ['product' => $product, 'quantity' => $quantity];
  }

  public function removeItem($productId) {
    $newItems = [];
    foreach ($this->items as $item) {
      if ($item['product']->id != $productId) {
        $newItems[] = $item;
      }
    }
    $this->items = $newItems;
  }

  public function getTotal() {
    $total = 0;
    foreach ($this->items as $item) {
      $product = $item['product'];
      $total += $product->price * $item['quantity'];
    }
    return $total;
  }
}

class Purchase {
  public $cart;
  public $customerName;
  public $customerEmail;

  public function __construct($cart, $customerName, $customerEmail) {
    $this->cart = $cart;
    $this->customerName = $customerName;
    $this->customerEmail = $customerEmail;
  }

  public function processPurchase() {
    echo "<h2>Purchase Summary</h2>";
    echo "<p>Customer Name: " . htmlspecialchars($this->customerName) . "</p>";
    echo "<p>Customer Email: " . htmlspecialchars($this->customerEmail) . "</p>";

    echo "<h3>Items Purchased:</h3>";
    echo "<ul>";
    foreach ($this->cart->items as $item) {
      echo "<li>" . $item['product']->name . " - Quantity: " . $item['quantity'] . " - Price: $" . number_format($item['product']->price, 2) . "</li>";
    }
    echo "</ul>";

    echo "<p>Total Amount: $" . number_format($this->cart->getTotal(), 2) . "</p>";

    // In a real application, you would:
    // 1. Save the order details to a database.
    // 2. Send an email confirmation to the customer.
    // 3. Update inventory levels.

    echo "<p>Order placed successfully (simulated). Thank you!</p>";
  }
}

// Example Usage:
// Create some products
$product1 = new Product(1, "T-Shirt", 20);
$product2 = new Product(2, "Jeans", 50);
$product3 = new Product(3, "Hat", 15);

// Create a shopping cart
$cart = new ShoppingCart();
$cart->addItem($product1, 2);
$cart->addItem($product2, 1);
$cart->addItem($product3, 3);

// Create a purchase object
$purchase = new Purchase($cart, "John Doe", "john.doe@example.com");

// Process the purchase
$purchase->processPurchase();

?>


<?php

// Sample product data (replace with your database connection)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate the form data
    $quantity = isset($_POST["quantity"]) ? intval($_POST["quantity"]) : 0; // Use intval for safety
    if ($quantity <= 0) {
        $errorMessage = "Please enter a valid quantity.";
    }

    // Process the order
    if (empty($errorMessage)) {
        $cart = []; // Initialize an empty cart
        $total = 0;

        foreach ($products as $product_id => $product) {
            if (isset($_POST["add_product_" . $product_id])) {
                $product_name = $product["name"];
                $product_price = $product["price"];
                $quantity_to_add = $quantity;

                $cart[$product_name] = [
                    "quantity" => $quantity_to_add,
                    "price" => $product_price,
                ];

                $total += $product_price * $quantity_to_add;
            }
        }

        // Display the order summary
        echo "<h2>Order Summary</h2>";
        echo "<ul>";
        foreach ($cart as $product_name => $item) {
            echo "<li>" . $product_name . ": " . $item["quantity"] . " x $" . $item["price"] . " = $" . $item["quantity"] * $item["price"] . "</li>";
        }
        echo "</ul>";
        echo "<p><strong>Total: $" . $total . "</strong></p>";

        // You would typically add code here to save the order to a database.
        // For example:
        // $order_data = [
        //     "user_id" => 1, // Replace with the user's ID
        //     "items" => $cart,
        //     "total" => $total,
        // ];
        // $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
        // $db->insertOrder($order_data);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Purchase Products</h1>

<form method="post" action="">
    <label for="laptop">Laptop:</label>
    <input type="number" id="laptop" name="laptop" value="1" min="1">
    <br>

    <input type="hidden" name="add_product_1" value="1">
    <br>

    <label for="mouse">Mouse:</label>
    <input type="number" id="mouse" name="mouse" value="1" min="1">
    <br>
    <input type="hidden" name="add_product_2" value="1">
    <br>

    <label for="keyboard">Keyboard:</label>
    <input type="number" id="keyboard" name="keyboard" value="1" min="1">
    <br>
    <input type="hidden" name="add_product_3" value="1">
    <br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'ecommerce';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectDB($host, $name, $user, $password) {
    $conn = new mysqli($host, $user, $password, $name);

    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
}

// Function to add a purchase to the database
function addPurchase($conn, $userId, $productId, $quantity) {
    $stmt = $conn->prepare("INSERT INTO purchases (user_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->bind_param("iii", $userId, $productId, $quantity);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
    $stmt->close();
}

// Function to update the product quantity in the database
function updateProductQuantity($conn, $productId, $quantity) {
    $stmt = $conn->prepare("UPDATE products SET quantity = quantity - ? WHERE id = ?");
    $stmt->bind_param("ii", $quantity, $productId);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
    $stmt->close();
}

// --- Example Usage (Simulated Request Handling) ---

// 1. Receive data from the form (e.g., via POST)
$userId = isset($_POST['user_id']) ? (int)$_POST['user_id'] : null; // Validate and cast to integer
$productId = isset($_POST['product_id']) ? (int)$_POST['product_id'] : null;
$quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : null;


// 2. Validate the inputs (VERY IMPORTANT!)
if (!$userId || !$productId || !$quantity) {
    echo "Error: Missing required fields.";
    exit; // Stop execution if required fields are missing
}

if ($quantity <= 0) {
    echo "Error: Quantity must be greater than 0.";
    exit;
}

// 3. Connect to the database
$conn = connectDB($db_host, $db_name, $db_user, $db_password);

// 4. Add the purchase to the database
$purchaseSuccessful = addPurchase($conn, $userId, $productId, $quantity);

// 5. Update the product quantity
if ($purchaseSuccessful) {
    $updateSuccessful = updateProductQuantity($conn, $productId, $quantity);
    if ($updateSuccessful) {
        echo "Purchase successful! Product quantity updated.";
    } else {
        echo "Purchase successful, but failed to update product quantity.";
    }
} else {
    echo "Purchase failed.";
}


// 6. Close the database connection
$conn->close();

?>


<?php
session_start();

// Configuration
$items = []; // Array to store cart items
$cart_file = 'cart.json'; // File to store the cart data

// Helper function to load cart from file
function loadCartFromFile($file) {
    if (file_exists($file)) {
        $json = file_get_contents($file);
        if ($json !== false) {
            return json_decode($json, true); // Returns associative array
        } else {
            return [];
        }
    }
    return [];
}

// Helper function to save cart to file
function saveCartToFile($items, $file) {
    $json = json_encode($items);
    if ($json !== false) {
        file_put_contents($file, $json);
    } else {
        // Handle JSON encoding error
        error_log("Error encoding cart data to JSON: " . json_last_error_msg());
    }
}


// ================== Cart Functions ==================

// Add an item to the cart
function add_to_cart($product_id, $quantity) {
    global $items;

    // Check if the item is already in the cart
    $item_exists = false;
    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $items[$key]['quantity'] += $quantity;
            $item_exists = true;
            break;
        }
    }

    // If not in the cart, add a new item
    if (!$item_exists) {
        $items[] = [
            'product_id' => $product_id,
            'quantity' => $quantity,
        ];
    }
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    global $items;

    // Iterate and remove the item
    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($items[$key]);
            // Re-index the array to avoid gaps
            $items = array_values($items);
            break;
        }
    }
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    global $items;

    foreach ($items as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $items[$key]['quantity'] = $quantity;
            break;
        }
    }
}


// Get the contents of the cart
function get_cart_contents() {
    return $items;
}


// ==================  Cart Handling ==================

// Initialize the cart if it doesn't exist
if (!file_exists($cart_file)) {
    $items = [];
    saveCartToFile($items, $cart_file);
}

$items = loadCartFromFile($cart_file);

// ==================  Cart Actions ==================

// Handle adding to cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    add_to_cart($product_id, $quantity);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}

// Handle removing an item
if (isset($_GET['remove'])) {
    $product_id = $_GET['remove'];
    remove_from_cart($product_id);
    header("Location: cart.php");
    exit();
}


// Handle updating the quantity
if (isset($_GET['update'])) {
    $product_id = $_GET['update'];
    $quantity = $_POST['quantity'];
    update_quantity($product_id, $quantity);
    header("Location: cart.php");
    exit();
}


// ==================  Display Cart ==================
// You would typically display the cart contents on a separate page (cart.php)
// This is just a placeholder to demonstrate the functionality.
if (empty($items)) {
    echo "<h1>Your Cart is Empty</h1>";
} else {
    echo "<h1>Your Shopping Cart</h1>";
    echo "<table border='1'>";
    echo "<tr><th>Product ID</th><th>Quantity</th><th>Price</th></tr>"; // Assuming price is stored in the product data
    foreach ($items as $key => $item) {
        echo "<tr>";
        echo "<td>" . $item['product_id'] . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        //  You'll need to fetch the product's price from a database or other source
        //  Example (replace with your actual price retrieval method):
        //  $product = get_product_by_id($item['product_id']);
        //  echo "<td>" . $product['price'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
}

?>


<?php

// Sample Product Data (Replace with your database or other data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Initialize variables
$cart = [];
$total = 0;

// Function to add an item to the cart
function add_to_cart($product_id, $quantity) {
    global $cart, $total;

    if (array_key_exists($product_id, $products)) {
        $product = $products[$product_id];
        $item_price = $product['price'] * $quantity;

        // Check if the item is already in the cart
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['quantity' => $quantity, 'price' => $product['price']];
        }

        $total += $item_price;
    } else {
        echo "<p>Product with ID: $product_id not found.</p>";
    }
}


// Handle Form Submission (Add to Cart Logic)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $product_id = (int)$_POST['product_id']; //Cast to integer for safety
        $quantity = (int)$_POST['quantity']; //Cast to integer for safety

        if ($quantity > 0) {
            add_to_cart($product_id, $quantity);
        } else {
            echo "<p>Quantity must be greater than 0.</p>";
        }
    }
}

// Display Cart Contents
echo "<h2>Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>" . $products[$product_id]['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $total . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h1>Online Store</h1>

<h2>Available Products</h2>
<ul>
<?php
foreach ($products as $id => $product) {
    echo "<li>" . $product['name'] . " - $" . $product['price'] . " <button type='button' onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
}
?>
</ul>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <input type="submit" value="Add to Cart">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$dbHost = "localhost";
$dbName = "shopping_cart";
$dbUser = "your_user";
$dbPass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate the form data
  $productName = $_POST["product_name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"]; // Assuming price is already in the form

  // Input validation - crucial for security and data integrity
  if (empty($productName) || empty($quantity) || empty($price)) {
    $error = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } elseif (!is_numeric($price) || $price <= 0) {
    $error = "Price must be a positive number.";
  } else {
    // Perform the purchase
    $total = $quantity * $price;

    // Log the purchase (optional, but highly recommended)
    $logMessage = "Product: " . $productName . ", Quantity: " . $quantity . ", Price: " . $price . ", Total: " . $total . ", Timestamp: " . date("Y-m-d H:i:s") . "
";
    file_put_contents("purchase_log.txt", $logMessage, FILE_APPEND);  // Append to the log file

    // Display success message
    echo "<p style='color: green;'>Purchase successful!  Total: $" . $total . "</p>";

    // You could also redirect to a confirmation page here.
    // echo "<p>You can view your order details here: <a href='confirmation.php'>Confirmation</a></p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h2>Purchase Product</h2>

  <?php if (isset($error)) {
    echo "<p style='color: red;'>Error: " . $error . "</p>";
  }
  ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price per item:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Purchase">
  </form>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
  }
}

// Function to handle the purchase process
function processPurchase($cart, $customerName, $customerEmail, $address, $paymentAmount) {
  $pdo = connectToDatabase();

  try {
    // 1. Insert Order Information
    $stmt = $pdo->prepare("INSERT INTO orders (customer_name, customer_email, address, order_date, total_amount) VALUES (:customer_name, :customer_email, :address, NOW(), :total_amount)");
    $stmt->bindParam(':customer_name', $customerName);
    $stmt->bindParam(':customer_email', $customerEmail);
    $stmt->bindParam(':address', $address);
    $stmt->bindParam(':total_amount', $paymentAmount);
    $stmt->execute();
    $orderId = $pdo->lastInsertId();

    // 2. Insert Order Items
    foreach ($cart as $item) {
      $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
      $stmt->bindParam(':order_id', $orderId);
      $stmt->bindParam(':product_id', $item['product_id']);
      $stmt->bindParam(':quantity', $item['quantity']);
      $stmt->execute();
    }

    // 3.  Update Stock (If you have stock management)
    //  You'll need to implement this based on how you manage inventory.
    //  Example (this is a basic example - adjust to your needs):
    // foreach ($cart as $item) {
    //   // Find the product by product_id
    //   $product = $pdo->prepare("SELECT id, stock FROM products WHERE id = :product_id");
    //   $productResult = $productResult->execute(['product_id' => $item['product_id']]);
    //   $product = $productResult->fetch(PDO::FETCH_ASSOC);
    //   $product['stock'] -= $item['quantity'];
    //   // Update the product stock
    //   $updateStmt = $pdo->prepare("UPDATE products SET stock = :stock WHERE id = :product_id");
    //   $updateStmt->bindParam(':stock', $product['stock']);
    //   $updateStmt->bindParam(':product_id', $product['id']);
    //   $updateStmt->execute();

    // }


    return $orderId;  // Return the order ID
  } catch (PDOException $e) {
    die("Database error during purchase: " . $e->getMessage());
  }
}



// ---  Purchase Form Handling (Simplified -  adapt for your form) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 1.  Retrieve Cart Data (Assumed to be in a session or form)
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
  } else {
    $cart = []; // Initialize an empty cart
  }


  $customerName = $_POST["customer_name"];
  $customerEmail = $_POST["customer_email"];
  $address = $_POST["address"];
  $paymentAmount = floatval($_POST["payment_amount"]);  // Ensure it's a float


  // 2. Process the Purchase
  $orderId = processPurchase($cart, $customerName, $customerEmail, $address, $paymentAmount);

  // 3.  Clear the Cart After Purchase
  session_start();
  unset($_SESSION['cart']);
  session_writeClose();

  // 4. Display Confirmation Message
  echo "<p>Order placed successfully! Order ID: " . $orderId . "</p>";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Online Store - Purchase</title>
</head>
<body>

  <h1>Online Store - Purchase</h1>

  <form method="post" action="">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" required><br><br>

    <label for="customer_email">Email:</label>
    <input type="email" id="customer_email" name="customer_email" required><br><br>

    <label for="address">Address:</label>
    <textarea id="address" name="address" rows="4" cols="50" required></textarea><br><br>

    <label for="payment_amount">Payment Amount:</label>
    <input type="number" id="payment_amount" name="payment_amount" step="0.01" required><br><br>

    <input type="submit" value="Place Order">
  </form>

  <?php
    // Display Cart Contents (for debugging and showing the user what they're buying)
    if (isset($_SESSION['cart'])) {
        echo "<h2>Cart Contents:</h2>";
        echo "<ul>";
        foreach ($_SESSION['cart'] as $item) {
          echo "<li>Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "</li>";
        }
        echo "</ul>";
    }
  ?>

</body>
</html>


<?php

// Database configuration (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_pass = "your_password";

// Function to connect to the database
function connectDB($host, $name, $user, $pass) {
  $conn = new mysqli($host, $user, $pass, $name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add an item to the cart
function add_to_cart($conn, $user_id, $product_id, $quantity) {
  // Check if the user already has items in the cart
  $query = "SELECT * FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Item already exists, increment quantity
    $query = "UPDATE cart SET quantity = quantity + $quantity WHERE user_id = '$user_id' AND product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
      echo "Item quantity updated successfully!";
    } else {
      echo "Error updating item quantity.";
    }
  } else {
    // Item doesn't exist, add it to the cart
    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
    if ($conn->query($query) === TRUE) {
      echo "Item added to cart successfully!";
    } else {
      echo "Error adding item to cart.";
    }
  }
}

// Function to view the cart
function view_cart($conn) {
  $query = "SELECT c.product_id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo "<table border='1'><tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";
    while($row = $result->fetch_assoc()) {
      $total = $row['price'] * $row['quantity'];
      echo "<tr><td>" . $row['name'] . "</td><td>" . $row['price'] . "</td><td>" . $row['quantity'] . "</td><td>" . $total . "</td></tr>";
    }
    echo "</table>";
  } else {
    echo "Cart is empty.";
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($conn, $user_id, $product_id, $quantity) {
    // Check if the item exists in the cart
    $query = "SELECT * FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // Update the quantity
        $query = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
        if ($conn->query($query) === TRUE) {
            echo "Cart quantity updated successfully!";
        } else {
            echo "Error updating cart quantity.";
        }
    } else {
        echo "Item not found in cart.";
    }
}

// Function to delete an item from the cart
function delete_from_cart($conn, $user_id, $product_id) {
    $query = "DELETE FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    if ($conn->query($query) === TRUE) {
        echo "Item removed from cart successfully!";
    } else {
        echo "Error deleting item from cart.";
    }
}


// *** Example usage (This part would typically be in a separate PHP file and called from a form) ***

// Connect to the database
$conn = connectDB($db_host, $db_name, $db_user, $db_pass);

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Add to cart
  if (isset($_POST["add_to_cart"])) {
    $user_id = "1"; // Replace with the actual user ID
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    add_to_cart($conn, $user_id, $product_id, $quantity);
  }

  // Update cart quantity
  if (isset($_POST["update_cart"])) {
    $user_id = "1";
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    update_cart_quantity($conn, $user_id, $product_id, $quantity);
  }

  // Delete from cart
  if (isset($_POST["delete_from_cart"])) {
    $user_id = "1";
    $product_id = $_POST["product_id"];
    delete_from_cart($conn, $user_id, $product_id);
  }

  // View the cart
  view_cart($conn);
} else {
  // If the form hasn't been submitted, display the form
  echo "<form method='post'>";
  echo "Product ID: <input type='number' name='product_id' value=''>";
  echo "<br>Quantity: <input type='number' name='quantity' value='1'>";
  echo "<br><input type='submit' name='add_to_cart' value='Add to Cart'>";
  echo "</form>";
}
?>


<?php
session_start();

// --- Database Connection (Replace with your actual credentials) ---
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";
// --- End Database Connection ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate the form data (Crucial for security!)
  $name = $_POST["name"];
  $email = $_POST["email"];
  $quantity = $_POST["quantity"];
  $product_id = $_POST["product_id"]; // Assuming you have a product ID
  // Add more validation here, such as:
  // - Check if name, email, and quantity are not empty
  // - Check if quantity is a valid number
  // - Sanitize inputs to prevent SQL injection

  // **IMPORTANT: SQL Injection Prevention**
  //  Instead of directly inserting user input into the query, 
  //  use prepared statements with PDO or MySQLi. 
  //  This is essential for security!  

  // Example using PDO (Recommended):
  try {
    $pdo = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare the statement
    $stmt = $pdo->prepare("INSERT INTO orders (name, email, quantity, product_id) VALUES (?, ?, ?, ?)");

    // Bind parameters
    $stmt->bindParam(1, $name);
    $stmt->bindParam(2, $email);
    $stmt->bindParam(3, $quantity);
    $stmt->bindParam(4, $product_id);

    // Execute the statement
    $stmt->execute();

    // Success message
    echo "Order placed successfully! Thank you, " . $name . "!";

  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Place an Order</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" required><br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" required><br><br>


    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// 1. Product Data (Simulated Database)
$products = [
    1 => ["name" => "T-Shirt", "price" => 20.00, "quantity" => 5],
    2 => ["name" => "Jeans", "price" => 50.00, "quantity" => 3],
    3 => ["name" => "Hat", "price" => 15.00, "quantity" => 10],
];

// 2. Shopping Cart
$cart = [];

// 3. Add to Cart Function
function addToCart($product_id, $quantity) {
    if (isset($products[$product_id])) {
        if ($quantity > 0) {
            $product = $products[$product_id];
            if (isset($cart[$product_id])) {
                $cart[$product_id]['quantity'] += $quantity;
            } else {
                $cart[$product_id] = ["name" => $product['name'], "price" => $product['price'], "quantity" => $quantity];
            }
        }
    }
}


// 4. Checkout Function
function checkout() {
    $order_summary = [];
    $total_amount = 0.00;

    foreach ($cart as $item_id => $item_details) {
        $item = $products[$item_id];
        $subtotal = $item['price'] * $item['quantity'];
        $total_amount += $subtotal;

        $order_summary[$item_id] = [
            "name" => $item['name'],
            "quantity" => $item['quantity'],
            "price" => $item['price'],
            "subtotal" => $subtotal,
        ];
    }

    echo "<h2>Order Summary</h2>";
    echo "<ul>";
    foreach ($order_summary as $id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . " - Subtotal: $" . $item['subtotal'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Amount: $" . number_format($total_amount, 2) . "</strong></p>";
}


// 5. Example Usage (Simulating User Interaction)
echo "<h1>Shopping Cart</h1>";

// Add some items to the cart
addToCart(1, 2); // Add 2 T-shirts
addToCart(2, 1); // Add 1 pair of Jeans
addToCart(3, 3); // Add 3 Hats

//Display cart contents
echo "<h2>Cart Contents</h2>";
echo "<p>You have the following items in your cart:</p>";
echo "<p>Items added to your cart:</p>";

// Display the cart contents
echo "<h2>Cart Contents</h2>";
echo "<p>You have the following items in your cart:</p>";
echo "<p>Items added to your cart:</p>";
echo "<p>Items added to your cart:</p>";

// Trigger the checkout process
echo "<br>";
echo "<a href='checkout.php'>Proceed to Checkout</a>";

// Call the checkout function
checkout();
?>


<?php

// Database connection (replace with your actual database credentials)
$dbHost = "localhost";
$dbName = "shop";
$dbUser = "username";
$dbPass = "password";

// Create a database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Function to add a new product (Example)
function addProduct($productName, $price, $quantity) {
    global $conn; // Access the database connection

    $sql = "INSERT INTO products (name, price, quantity) VALUES ('$productName', '$price', '$quantity')";

    if ($conn->query($sql) === TRUE) {
        return true; // Success
    } else {
        return false; // Failure
    }
}

// Function to process the purchase
function processPurchase($cart) {
    global $conn;

    // 1.  Validate Cart (check for valid product IDs and sufficient stock)
    $validCart = [];
    foreach ($cart as $productId => $quantity) {
        $product = getProductById($productId);

        if ($product) {
            if ($product['quantity'] >= $quantity) {
                $validCart[] = $productId => $quantity;
            } else {
                echo "<p style='color:red;'>Error: Not enough stock for product ID: " . $productId . "</p>";
                return false; // Cannot proceed if stock is insufficient
            }
        } else {
            echo "<p style='color:red;'>Error: Product ID " . $productId . " not found.</p>";
            return false; // Cannot proceed if product doesn't exist
        }
    }

    // 2. Update Stock (reduce quantity in the database)
    foreach ($validCart as $productId => $quantity) {
        $product = getProductById($productId);
        if ($product) {
            $newQuantity = $product['quantity'] - $quantity;
            updateProductQuantity($productId, $newQuantity);
        }
    }

    // 3.  Generate Order Details (example - can be expanded)
    $orderId = generateOrderId();
    $orderDate = date("Y-m-d H:i:s");
    $totalAmount = calculateTotal($validCart);

    // 4.  Create Order Table Entry
    $sql = "INSERT INTO orders (order_id, order_date, total_amount) VALUES ('$orderId', '$orderDate', '$totalAmount')";
    if ($conn->query($sql) === TRUE) {
        echo "<p style='color:green;'>Purchase successful! Order ID: " . $orderId . "</p>";
        return true;
    } else {
        echo "<p style='color:red;'>Error creating order: " . $conn->error . "</p>";
        return false;
    }
}


//  Helper Functions (Example Implementations)

// Function to get a product by ID
function getProductById($productId) {
    global $conn;

    $sql = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        return $product;
    } else {
        return null;
    }
}

// Function to update product quantity
function updateProductQuantity($productId, $newQuantity) {
    global $conn;

    $sql = "UPDATE products SET quantity = '$newQuantity' WHERE id = '$productId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to generate a unique order ID (Simple Example - improve for production)
function generateOrderId() {
    global $conn;
    $orderId = bin2hex(random_bytes(5)); // Generate a random hex string
    return $orderId;
}

// Function to calculate the total order amount
function calculateTotal($cart) {
  $total = 0;
  foreach ($cart as $productId => $quantity) {
    $product = getProductById($productId);
    if ($product) {
      $total += $product['price'] * $quantity;
    }
  }
  return $total;
}


// --- Example Usage (This would typically be handled via a form submission)
// Assume $cart is a variable containing the items the user wants to purchase.
// For example:
// $cart = array(
//    '1' => 2,  // Product ID 1, quantity 2
//    '2' => 1   // Product ID 2, quantity 1
// );

// Example cart (replace with your actual cart data)
$cart = array(
    '1' => 2,  // Product ID 1, quantity 2
    '2' => 1   // Product ID 2, quantity 1
);

// Process the purchase
if (processPurchase($cart)) {
    // Order created successfully - redirect or display confirmation
    echo "<p>Order placed successfully!</p>";
} else {
    // Handle errors - display error messages
    echo "<p>There was an error processing your order.</p>";
}


?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$dbname = "your_db_name";

// Session handling to maintain shopping cart data
session_start();

// --- Helper Functions ---

// Function to connect to the database
function connect_db($host, $username, $password, $dbname) {
  $conn = new mysqli($host, $username, $password, $dbname);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to get the total cart value
function calculateTotal($conn) {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $item) {
      // Fetch product details from the database
      $product_query = "SELECT price, quantity FROM products WHERE id = " . $product_id;
      $result = $conn->query($product_query);
      if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $total += $row['price'] * $item['quantity'];
      }
    }
  }
  return $total;
}

// --- Purchase Functionality ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate form data (Add more validation as needed)
  if (empty($_POST['name']) || empty($_POST['address']) || empty($_POST['payment_method'])) {
    $name_error = "Name is required.";
    $address_error = "Address is required.";
    $payment_error = "Payment method is required.";
  } else {
    $name = $_POST['name'];
    $address = $_POST['address'];
    $payment_method = $_POST['payment_method'];
  }


  // Process the purchase
  $conn = connect_db($host, $username, $password, $dbname);

  // Clear the cart after successful purchase
  $_SESSION['cart'] = array();

  // You'll likely want to log this purchase in a database table
  // For now, we'll just display a success message

  echo "<div class='success'>Order placed successfully!  Thank you, " . $name . "</div>";
}


// --- Product Display (Example - Replace with your actual product data) ---
$product_data = array(
  array('id' => 1, 'name' => 'T-Shirt', 'price' => 20),
  array('id' => 2, 'name' => 'Jeans', 'price' => 50),
  array('id' => 3, 'name' => 'Hat', 'price' => 15)
);


?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .success {
      color: green;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Display Cart Items -->
  <?php if (isset($_SESSION['cart'])) { ?>
    <p>Cart Items:</p>
    <ul>
      <?php
      foreach ($_SESSION['cart'] as $product_id => $item) {
        // Find the product details from the $product_data array
        $product = null;
        foreach ($product_data as $p) {
          if ($p['id'] == $product_id) {
            $product = $p;
            break;
          }
        }

        if ($product) {
          echo "<li>" . $product['name'] . " - $" . $product['price'] . " - Quantity: <input type='number' value='" . $item['quantity'] . "' min='1'></li>";
        }
      }
      ?>
    </ul>
  <?php } else {
    echo "<p>Your cart is empty.</p>";
  } ?>

  <hr>

  <!-- Purchase Form -->
  <h2>Place Order</h2>
  <form method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="address">Address:</label>
    <input type="text" id="address" name="address" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" id="payment_method" name="payment_method" required>
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Form Handling (Example using GET, can be adapted to POST)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate Form Data (Essential for Security!)
    $product_name = $_POST["product_name"];
    $quantity = $_POST["quantity"];
    $customer_name = $_POST["customer_name"];

    // Basic Validation (Expand this for more robust validation)
    if (empty($product_name) || empty($quantity) || empty($customer_name)) {
        $error = "All fields are required.";
    } elseif (!is_numeric($quantity) || $quantity <= 0) {
        $error = "Quantity must be a positive number.";
    } else {
        // Database Interaction (Insert Data)
        $conn = new mysqli($servername, $username, $password, $dbname);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        // Prepare SQL statement (Use prepared statements for security!)
        $sql = "INSERT INTO orders (product_name, quantity, customer_name) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);

        if ($stmt) {
            $stmt->bind_param("ss", $product_name, $quantity);  // "ss" for string, string
            $stmt->execute();
            $stmt->close();
        } else {
            echo "Error preparing statement: " . $conn->error;
        }

        // Success Message
        if ($stmt) {
            $success_message = "Order placed successfully! Thank you, " . $customer_name . ".";
        } else {
            $success_message = "";
        }

    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Purchase Form</h1>

<?php if (isset($error)): ?>
    <p style="color: red;">Error: <?php echo $error; ?></p>
<?php endif; ?>

<?php if (isset($success_message)): ?>
    <p style="color: green;"> <?php echo $success_message; ?></p>
<?php endif; ?>


<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" required>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" required>

    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" placeholder="Enter customer name" required>

    <br><br>

    <button type="submit">Place Order</button>
</form>

</body>
</html>


<?php

// Sample Data (Replace with your actual database or data source)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

$cart = [];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $cart) {
    if (array_key_exists($productId, $products)) {
        $product = $products[$productId];
        $cart[] = ['id' => $productId, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        return true;
    } else {
        return false;
    }
}

// Function to display the cart
function displayCart($cart) {
    echo "<h2>Your Cart</h2>";
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($cart as $item) {
        $productId = $item['id'];
        $name = $item['name'];
        $price = $item['price'];
        $quantity = $item['quantity'];

        echo "<li>" . $name . " - $" . number_format($price, 2) . " (Quantity: " . $quantity . ")</li>";
    }
    echo "</ul>";
}

// Function to calculate the total cart value
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Handle Purchase Request (Simulated)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = (int)$_POST['product_id']; // Ensure it's an integer
        $quantity = (int)$_POST['quantity'];

        if (addToCart($productId, $quantity, $cart)) {
            echo "<p>Item added to cart successfully!</p>";
            displayCart($cart);
        } else {
            echo "<p>Error adding item to cart.</p>";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Purchase Functionality</title>
</head>
<body>

<h1>Shop</h1>

<h2>Available Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<br>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $id . "'>";
        echo "<input type='number' name='quantity' value='1' min='1'>";
        echo "<button type='submit'>Add to Cart</button>";
        echo "</form></li>";
    }
    ?>
</ul>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Establish database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Helper function to sanitize input (VERY IMPORTANT)
function sanitizeInput($data) {
  $data = trim($data);
  $data = stripslashes($data);
  $data = htmlspecialchars($data); // Sanitize for HTML output
  return $data;
}

// --- Cart Functions ---

// Add item to cart
function addToCart($conn, $product_id, $quantity) {
  $product_id = sanitizeInput($product_id);
  $quantity = (int)$quantity; // Convert quantity to integer

  if ($quantity <= 0) {
    return false; // Invalid quantity
  }

  $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;

  // Check if user is logged in
  if (!$user_id) {
    return false; // User not logged in
  }

  // Check if item already exists in cart
  $query = "SELECT * FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Item exists, update quantity
    $row = $result->fetch_assoc();
    $quantity_in_cart = $row['quantity'] + $quantity;
    $conn->query("UPDATE cart SET quantity = '$quantity_in_cart' WHERE user_id = '$user_id' AND product_id = '$product_id'");
    return true;
  } else {
    // Item doesn't exist, add it to cart
    $conn->query("INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')");
    return true;
  }
}

// Get cart items
function getCartItems($conn, $user_id) {
  $query = "SELECT p.product_name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.product_id WHERE c.user_id = '$user_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $cart_items = array();
    while($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
    return $cart_items;
  } else {
    return []; // Empty cart
  }
}

// Remove item from cart
function removeFromCart($conn, $product_id, $user_id) {
  $product_id = sanitizeInput($product_id);

  $query = "DELETE FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
  return $conn->query($query);
}

// Update quantity in cart
function updateQuantity($conn, $product_id, $quantity, $user_id) {
  $product_id = sanitizeInput($product_id);
  $quantity = (int)$quantity;

  if ($quantity <= 0) {
    return false; // Invalid quantity
  }

  $query = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
  return $conn->query($query);
}

// --- Display Cart Page ---

// Get cart items for the logged-in user
$cart_items = getCartItems($conn, $_SESSION['user_id']);

// Calculate total price
$total_price = 0;
foreach ($cart_items as $item) {
  $total_price += $item['price'] * $item['quantity'];
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>
    <table id="cartTable">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Subtotal</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_items as $item): ?>
          <tr class="cart-item">
            <td><?php echo $item['product_name']; ?></td>
            <td><?php echo $item['price']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td><?php echo $item['price'] * $item['quantity']; ?></td>
            <td>
              <a href="cart_update.php?product_id=<?php echo $item['product_id']; ?>&quantity=<?php echo $item['quantity']; ?>&action=update">Update</a> |
              <a href="cart_update.php?product_id=<?php echo $item['product_id']; ?>&action=remove">Remove</a>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <p>Total: <?php echo $total_price; ?></p>
  <?php endif; ?>

  <p><a href="checkout.php">Proceed to Checkout</a></p>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Establish database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get product_id, quantity and action from the URL
$product_id = $conn->real_escape_string($_GET['product_id']); // Escape to prevent SQL injection
$quantity = (int)$_GET['quantity'];
$action = $_GET['action'];

// Get user ID from session
$user_id = $_SESSION['user_id'];

// Handle action - update or remove
if ($action == 'update') {
  if (updateQuantity($conn, $product_id, $quantity, $user_id)) {
    echo "Cart updated successfully.";
  } else {
    echo "Error updating cart.";
  }
} elseif ($action == 'remove') {
  removeFromCart($conn, $product_id, $user_id);
  echo "Product removed from cart.";
} else {
  die("Invalid action."); //Handle incorrect requests
}

// Redirect back to cart.php
header("Location: cart.php");
exit; //Important:  Stop further script execution
?>


<!DOCTYPE html>
<html>
<head>
    <title>Checkout</title>
</head>
<body>
    <h1>Checkout</h1>
    <p>Thank you for your order!  (This is a placeholder - implement payment processing here)</p>
    <a href="cart.php">Return to Cart</a>
</body>
</html>


<?php

// Configuration (Adjust these to your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// Function to connect to the database
function connectToDatabase($host, $name, $user, $pass) {
  $conn = new mysqli($host, $user, $pass, $name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to check if an item is already in the cart
function isItemInCart($cart_id, $item_id) {
  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);
  $sql = "SELECT * FROM cart_items WHERE cart_id = ? AND item_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("is", $cart_id, $item_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    return true;
  } else {
    return false;
  }
  $stmt->close();
  $conn->close();
}

// Function to add an item to the cart
function addItemToCart($cart_id, $item_id, $quantity) {
  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);

  $sql = "INSERT INTO cart_items (cart_id, item_id, quantity) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iss", $cart_id, $item_id, $quantity);

  if ($stmt->execute()) {
    echo "Item added to cart successfully!";
  } else {
    echo "Error adding item to cart.";
  }
  $stmt->close();
  $conn->close();
}

// Function to update the quantity of an item in the cart
function updateQuantityInCart($cart_id, $item_id, $quantity) {
  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);

  $sql = "UPDATE cart_items SET quantity = ? WHERE cart_id = ? AND item_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iss", $quantity, $cart_id, $item_id);

  if ($stmt->execute()) {
    echo "Quantity updated successfully!";
  } else {
    echo "Error updating quantity.";
  }
  $stmt->close();
  $conn->close();
}

// Function to remove an item from the cart
function removeItemFromCart($cart_id, $item_id) {
  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);

  $sql = "DELETE FROM cart_items WHERE cart_id = ? AND item_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("is", $cart_id, $item_id);

  if ($stmt->execute()) {
    echo "Item removed from cart successfully!";
  } else {
    echo "Error removing item from cart.";
  }
  $stmt->close();
  $conn->close();
}

// --- Example Usage (Simulated Form Handling) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get cart ID from the form (you'll want to store this in a session)
  $cart_id = $_POST["cart_id"];

  // Get item ID and quantity from the form
  $item_id = $_POST["item_id"];
  $quantity = $_POST["quantity"];

  // Add the item to the cart
  addItemToCart($cart_id, $item_id, $quantity);

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <form method="post" action="">
    <label for="item_id">Item ID:</label>
    <input type="number" id="item_id" name="item_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <input type="submit" value="Add to Cart">
  </form>

  <?php
    // You'll likely want to display the contents of the cart here,
    // using queries to retrieve items from the cart_items table.
  ?>
</body>
</html>


<?php

// Database configuration (replace with your actual database details)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to handle purchase processing
function processPurchase($cart_id, $user_id) {
  $conn = connectToDatabase();

  // 1.  Fetch products from the cart based on cart_id
  $sql = "SELECT * FROM cart_items WHERE cart_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $cart_id);  // 'i' for integer
  $stmt->execute();
  $result = $stmt->get_result();

  $cart_items = [];
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
  }

  // 2. Check if cart is empty
  if (empty($cart_items)) {
    $conn->close();
    return "Cart is empty.  Cannot process purchase.";
  }


  // 3.  Update order table
  $order_id = generateOrderID(); //Implement this function (see below)
  $sql = "INSERT INTO orders (order_id, user_id, order_date) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iii", $order_id, $user_id, date("Y-m-d H:i:s"));
  $stmt->execute();

  // 4. Insert order items into order_items table
  foreach ($cart_items as $item) {
    $product_id = $item['product_id'];
    $quantity = $item['quantity'];
    $order_item_id = generateOrderItemID();  // Implement this function (see below)

    $sql = "INSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $order_item_id, $order_id, $product_id, $quantity);
    $stmt->execute();
  }

  // 5. Update the cart (mark items as sold)
  foreach ($cart_items as $item) {
    $product_id = $item['product_id'];

    $sql = "UPDATE products SET stock = stock - ? WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("is", $item['quantity'], $product_id);
    $stmt->execute();
  }

  // 6.  Clean up the cart (delete cart items)
  $sql = "DELETE FROM cart_items WHERE cart_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $cart_id);
  $stmt->execute();
  $stmt->close();

  // 7. Close the connection
  $conn->close();

  return "Purchase successful! Order ID: " . $order_id;
}

// Function to generate a unique order ID (example - you can use a more robust method)
function generateOrderID() {
  return rand(100000, 999999);  // Simple example - consider using UUIDs for production.
}

// Function to generate a unique order item ID
function generateOrderItemID() {
  return rand(100000, 999999);
}

// --- Example Usage (This would usually be triggered by a form submission) ---

// Assuming $cart_id and $user_id are passed from a form

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $cart_id = $_POST["cart_id"];
  $user_id = $_POST["user_id"];

  // Validate the inputs (important!) - you should use more robust validation.
  if (!is_numeric($cart_id) || !is_numeric($user_id)) {
    $result = "Invalid cart_id or user_id.  Both must be numeric.";
  } else {
    $result = processPurchase($cart_id, $user_id);
  }
} else {
  $result = "No purchase initiated.";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Functionality</h1>

  <?php if ($result == "Purchase successful! Order ID: ") {
    echo "<p>" . $result . "</p>";
  } elseif ($result == "Cart is empty.  Cannot process purchase.") {
    echo "<p>" . $result . "</p>";
  } elseif ($result == "Invalid cart_id or user_id.  Both must be numeric.") {
    echo "<p>" . $result . "</p>";
  } else {
    echo "<p>" . $result . "</p>";
  }
?>

<form method="post" action="">
  <label for="cart_id">Cart ID:</label>
  <input type="text" id="cart_id" name="cart_id" value="<?php echo isset($_POST['cart_id']) ? $_POST['cart_id'] : ''; ?>">
  <br><br>
  <label for="user_id">User ID:</label>
  <input type="text" id="user_id" name="user_id" value="<?php echo isset($_POST['user_id']) ? $_POST['user_id'] : ''; ?>">
  <br><br>
  <button type="submit">Process Purchase</button>
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $pdo;
  } catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    exit; // Stop execution if the connection fails
  }
}

// Function to handle the purchase process
function handlePurchase($cart_id, $user_id) {
  $pdo = connectToDatabase();

  // Update the cart status to 'completed'
  try {
    $stmt = $pdo->prepare("UPDATE carts SET status = 'completed', completed_at = NOW() WHERE id = :cart_id");
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->execute();

    //  (Optional) Add order details to a separate orders table
    //  This allows you to track order history.
    //  You'll likely need to create an `orders` table with columns like `cart_id`, `user_id`, `order_date`, etc.

    // Example:  Inserting an order record
    // $order_stmt = $pdo->prepare("INSERT INTO orders (cart_id, user_id, order_date) VALUES (:cart_id, :user_id, NOW())");
    // $order_stmt->bindParam(':cart_id', $cart_id);
    // $order_stmt->bindParam(':user_id', $user_id);
    // $order_stmt->execute();


    echo "Purchase successful! Cart ID: " . $cart_id;

  } catch (PDOException $e) {
    echo "Purchase failed: " . $e->getMessage();
  }
}

// --- Example Usage (Simulated form submission) ---
//  This is how you would process a purchase request.
//  In a real application, this would come from an HTML form.

// Assuming the form submitted with cart_id = 3 and user_id = 1
$cart_id = 3;
$user_id = 1;

handlePurchase($cart_id, $user_id);

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_db";
$db_user = "your_username";
$db_password = "your_password";

// ---  Purchase Functionality  ---

/**
 * Handles a customer's purchase.
 *
 * @param array $cart The shopping cart data (item ID, quantity, etc.).
 * @param string $customer_name The customer's name.
 * @param string $customer_email The customer's email.
 * @return string The response message (success or error).
 */
function processPurchase(array $cart, string $customer_name, string $customer_email) {
  // 1. Validate Cart Data
  if (empty($cart)) {
    return "Error: Empty cart. Please add items to your cart.";
  }

  // 2. Connect to Database
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    return "Error: Database connection failed: " . $e->getMessage();
  }

  // 3.  Get Product Information
  $products = [];
  foreach ($cart as $item => $quantity) {
    // Assuming you have a product table with an 'id' and 'price' column
    try {
      $stmt = $pdo->prepare("SELECT id, price FROM products WHERE id = ?");
      $stmt->execute([$item]);
      $product = $stmt->fetch(PDO::FETCH_ASSOC);

      if (!$product) {
        return "Error: Product with ID $item not found.";
      }
      $products[] = [
        'id' => $item,
        'name' => $product['name'], // Assuming you have a 'name' column in the products table
        'price' => $product['price'],
        'quantity' => $quantity,
      ];
    } catch (PDOException $e) {
      return "Error: Database query error: " . $e->getMessage();
    }
  }

  // 4. Calculate Total Amount
  $total = 0;
  foreach ($products as $product) {
    $total += $product['price'] * $product['quantity'];
  }

  // 5. Insert Order into Database
  try {
    $sql = "INSERT INTO orders (customer_name, customer_email, total_amount, order_date) VALUES (?, ?, ?, NOW())";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$customer_name, $customer_email, $total]);
    $order_id = $pdo->lastInsertId(); // Get the ID of the newly inserted order

    // 6. Insert Order Items into Order_Items table (associative array for clear association)
    $order_items = [];
    foreach ($products as $product) {
      $order_items[] = [
        'order_id' => $order_id,
        'product_id' => $product['id'],
        'quantity' => $product['quantity'],
        'price' => $product['price'],
      ];
    }

    // 7.  Update Cart (Clear the cart after successful purchase) -  This is crucial!
    //    You'll likely have a cart storage mechanism (e.g., session or database)
    //    This example assumes cart data is stored in the session.  Adapt accordingly.
    session_start();
    $_SESSION['cart'] = []; // Clear the cart
    
    return "Order placed successfully! Order ID: $order_id";

  } catch (PDOException $e) {
    return "Error: Database insertion error: " . $e->getMessage();
  }
}


// --- Example Usage (Replace with actual user input) ---
// Simulate a shopping cart
$cart = [
  1 => 2, // Product ID 1, quantity 2
  2 => 1, // Product ID 2, quantity 1
];

$customer_name = "John Doe";
$customer_email = "john.doe@example.com";

$response = processPurchase($cart, $customer_name, $customer_email);
echo $response;

?>


<?php
// This file handles the order processing.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Retrieve data from the form
  $item = htmlspecialchars($_POST["item"]);
  $quantity = intval($_POST["quantity"]);

  // Basic validation (you should have more robust validation in a real application)
  if (empty($item) || $quantity <= 0) {
    echo "<p style='color: red;'>Invalid order. Please enter a valid item name and positive quantity.</p>";
  } else {
    //  Simulate order processing (e.g., save to a database)
    echo "<p style='color: green;'>Order placed successfully!  Item: " . $item . ", Quantity: " . $quantity . "</p>";
    // In a real application, you would:
    // 1. Connect to a database.
    // 2. Insert the order information into a table.
    // 3.  Generate an order confirmation number.
    // 4.  Send an email confirmation (optional).
  }
} else {
  // If the form was not submitted via POST.
  echo "<p>No order submitted.</p>";
}
?>


<?php

// Database Connection (Replace with your actual database credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// --- Purchase Functionality ---

/**
 * Creates a new purchase record in the database.
 *
 * @param array $orderData An associative array containing order details:
 *                         - product_id => int  (ID of the product)
 *                         - quantity => int   (Quantity of the product)
 *                         - customer_id => int (ID of the customer - optional, if not provided, defaults to 1)
 *
 * @return int|false  The ID of the newly created purchase record on success, 
 *                   false if the purchase creation failed.
 */
function createPurchase(array $orderData) {
    // Validate input (add more validation as needed)
    if (!isset($orderData['product_id']) || !is_numeric($orderData['product_id']) || $orderData['product_id'] <= 0) {
        return false;
    }
    if (!isset($orderData['quantity']) || !is_numeric($orderData['quantity']) || $orderData['quantity'] <= 0) {
        return false;
    }

    // Get product details
    $stmt = $pdo->prepare("SELECT id, price FROM products WHERE id = :product_id");
    $stmt->bindParam(':product_id', $orderData['product_id']);
    $stmt->execute();
    $product = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        return false; // Product not found
    }

    // Calculate total price
    $totalPrice = $product['price'] * $orderData['quantity'];

    // Insert into the purchases table
    $stmt = $pdo->prepare("INSERT INTO purchases (product_id, quantity, customer_id, total_price) 
                             VALUES (:product_id, :quantity, :customer_id, :total_price)");
    $stmt->bindParam(':product_id', $orderData['product_id']);
    $stmt->bindParam(':quantity', $orderData['quantity']);
    $stmt->bindParam(':customer_id', $orderData['customer_id'] ?? 1); // Use 1 as default customer ID
    $stmt->bindParam(':total_price', $totalPrice);
    $result = $stmt->execute();

    if ($result) {
        return $pdo->lastInsertId(); // Return the ID of the new purchase
    } else {
        return false;
    }
}


// --- Example Usage (This would typically be part of a web form submission) ---

// Assuming a form has submitted and $orderData contains the form data.
// Example:
// $orderData = [
//     'product_id' => 1,
//     'quantity' => 2,
//     'customer_id' => 5  // (Optional)
// ];


// Create the purchase
// $purchaseId = createPurchase($orderData);

// if ($purchaseId) {
//     echo "Purchase created successfully!  Purchase ID: " . $purchaseId;
// } else {
//     echo "Purchase creation failed.";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database";

// Create a database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a new purchase
function addPurchase($userId, $productId, $quantity, $purchaseDate) {
  // Sanitize inputs (IMPORTANT - Prevent SQL Injection!)
  $userId = $conn->real_escape_string($userId);
  $productId = $conn->real_escape_string($productId);
  $quantity = $conn->real_escape_string($quantity);
  $purchaseDate = $conn->real_escape_string($purchaseDate);

  // SQL query to insert the purchase
  $sql = "INSERT INTO purchases (userId, productId, quantity, purchaseDate)
          VALUES ('$userId', '$productId', '$quantity', '$purchaseDate')";

  if ($conn->query($sql) === TRUE) {
    return true; // Success
  } else {
    return false; // Failure
  }
}


// --------------------  Handling the Purchase Functionality  --------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate inputs (Implement more robust validation here)
  $userId = $_POST["userId"];
  $productId = $_POST["productId"];
  $quantity = $_POST["quantity"];

  // Check if the product ID exists (Basic validation)
  $sql_check_product = "SELECT id FROM products WHERE id = '$productId'";
  $result = $conn->query($sql_check_product);

  if ($result->num_rows > 0) {
    // Product exists, proceed with purchase
    $purchaseSuccessful = addPurchase($userId, $productId, $quantity, date("Y-m-d H:i:s")); // Use the current timestamp

    if ($purchaseSuccessful) {
      echo "<p style='color:green;'>Purchase added successfully!</p>";
    } else {
      echo "<p style='color:red;'>Failed to add purchase.  Please try again.</p>";
    }
  } else {
    echo "<p style='color:red;'>Product ID '$productId' does not exist.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="userId">User ID:</label>
    <input type="number" id="userId" name="userId" required><br><br>

    <label for="productId">Product ID:</label>
    <input type="number" id="productId" name="productId" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <button type="submit">Add to Purchase</button>
  </form>

</body>
</html>


<?php

// Database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate input (VERY IMPORTANT -  Expand this with more validation)
  $product_name = trim($_POST["product_name"]);
  $quantity = intval($_POST["quantity"]);
  $customer_name = trim($_POST["customer_name"]);
  $customer_email = trim($_POST["customer_email"]);

  // Basic input validation - Add more robust validation here
  if (empty($product_name) || $quantity <= 0 || empty($customer_name) || empty($customer_email)) {
    $error = "All fields are required.";
  } else {
    // Prepare SQL query - IMPORTANT for preventing SQL injection
    $sql = "INSERT INTO orders (product_name, quantity, customer_name, customer_email)
            VALUES (?, ?, ?, ?)";

    // Prepare statement
    $stmt = $conn->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sss", $product_name, $quantity, $customer_name, $customer_email);

    // Execute query
    if ($stmt->execute()) {
      $success = "Order placed successfully!";
    } else {
      $error = "Error placing order: " . $stmt->error;
    }

    // Close statement
    $stmt->close();
  }
}

// Display form
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Form</title>
</head>
<body>

  <h2>Purchase Form</h2>

  <?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php endif; ?>

  <?php if (isset($success)): ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php endif; ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" placeholder="Enter product name" value="<?php echo isset($product_name) ? htmlspecialchars($product_name) : ''; ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" value="<?php echo isset($quantity) ? htmlspecialchars($quantity) : ''; ?>">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name" placeholder="Enter customer name" value="<?php echo isset($customer_name) ? htmlspecialchars($customer_name) : ''; ?>">
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email" placeholder="Enter customer email" value="<?php echo isset($customer_email) ? htmlspecialchars($customer_email) : ''; ?>">
    <br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
session_start(); // Start the session

// --- Database Connection (Replace with your actual connection details) ---
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Helper Functions ---

// Function to sanitize input (important for security)
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}


// --- Purchase Functionality ---

// Check if the purchase form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Validate and sanitize form data
  $product_id = sanitizeInput($_POST["product_id"]);
  $quantity = (int)sanitizeInput($_POST["quantity"]); // Cast to integer
  $shipping_address = sanitizeInput($_POST["shipping_address"]);
  $payment_method = sanitizeInput($_POST["payment_method"]);

  // --- Error Handling ---
  $errors = [];

  if (!is_numeric($product_id)) {
    $errors[] = "Invalid product ID.";
  }
  if ($quantity <= 0) {
    $errors[] = "Quantity must be greater than zero.";
  }

  if (empty($shipping_address)) {
    $errors[] = "Shipping address is required.";
  }

  if (empty($payment_method)) {
      $errors[] = "Payment method is required.";
  }


  // --- Process Purchase if no errors ---
  if (empty($errors)) {
    // --- Database Interaction ---
    // 1. Get Product Information (Replace with your product table structure)
    $sql_product = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt_product = $conn->prepare($sql_product);
    $stmt_product->bind_param("i", $product_id);
    $stmt_product->execute();
    $result = $stmt_product->get_result();
    $product = $result->fetch_assoc();

    if (!$product) {
      die("Product not found.");
    }

    // 2. Update Inventory (Decrease Quantity)
    $sql_update_inventory = "UPDATE products SET quantity = quantity - ? WHERE id = ?";
    $stmt_update = $conn->prepare($sql_update_inventory);
    $stmt_update->bind_param("id", $quantity, $product_id);
    $stmt_update->execute();

    if ($stmt_update->affected_rows == 0) {
        die("Failed to update inventory.");
    }

    // 3.  Store Order Information (This is a simplified example -  You'll likely want
    //     to use a more robust order table and potentially a billing/shipping table)
    $sql_insert_order = "INSERT INTO orders (product_id, quantity, shipping_address, payment_method) VALUES (?, ?, ?, ?)";
    $stmt_insert = $conn->prepare($sql_insert_order);
    $stmt_insert->bind_param("isss", $product_id, $quantity, $shipping_address, $payment_method);
    $stmt_insert->execute();

    // 4. Success Message
    $order_id = $conn->insert_id; // Get the auto-incremented ID of the new order.
    echo "<p>Purchase successful! Order ID: " . $order_id . "</p>";
    echo "<p>Product: " . $product["name"] . "</p>";
    echo "<p>Quantity: " . $quantity . "</p>";
    echo "<p>Shipping Address: " . $shipping_address . "</p>";
    echo "<p>Payment Method: " . $payment_method . "</p>";

    // 5.  (Optional) Clear Cart -  You might want to reset the cart after a purchase.
    // unset($_SESSION['cart']);

  } else {
    // Display Errors
    echo "<p>Errors: " . implode(", ", $errors) . "</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Product</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="shipping_address">Shipping Address:</label>
    <input type="text" id="shipping_address" name="shipping_address" required><br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method" required>
      <option value="credit_card">Credit Card</option>
      <option value="paypal">PayPal</option>
    </select><br><br>

    <button type="submit">Purchase</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_pass = "your_password";

// --- Functions ---

/**
 * Connects to the database.
 *
 * @return mysqli Connection object or null on failure.
 */
function connect_to_db() {
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

/**
 * Adds a product to the shopping cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id The ID of the product being purchased.
 * @param int $quantity The quantity of the product being purchased.
 * @return bool True on success, false on failure.
 */
function add_to_cart(mysqli $conn, $product_id, $quantity) {
  // Validate product ID and quantity
  if (!is_numeric($product_id) || $quantity <= 0) {
    return false;
  }

  // Sanitize the input to prevent SQL injection
  $product_id = mysqli_real_escape_string($conn, $product_id);


  // Check if the product already exists in the cart.
  $query = "SELECT * FROM cart WHERE product_id = '$product_id'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    // Product already exists, update the quantity
    $query = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
    if (mysqli_query($conn, $query)) {
      return true;
    } else {
      return false;
    }
  } else {
    // Product doesn't exist in the cart, add it.
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
    if (mysqli_query($conn, $query)) {
      return true;
    } else {
      return false;
    }
  }
}

/**
 * Retrieves the items in the shopping cart.
 *
 * @param mysqli $conn Database connection.
 * @return array An array of product details (name, price, quantity) or an empty array if no items are in the cart.
 */
function get_cart_items(mysqli $conn) {
  $query = "SELECT p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
  $result = mysqli_query($conn, $query);

  $cart_items = array();
  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      $cart_items[] = $row;
    }
  }
  return $cart_items;
}

/**
 * Removes a product from the shopping cart.
 *
 * @param mysqli $conn Database connection.
 * @param int $product_id The ID of the product to remove.
 * @return bool True on success, false on failure.
 */
function remove_from_cart(mysqli $conn, $product_id) {
  if (!is_numeric($product_id)) {
    return false;
  }

  $product_id = mysqli_real_escape_string($conn, $product_id);
  $query = "DELETE FROM cart WHERE product_id = '$product_id'";
  return mysqli_query($conn, $query);
}


/**
 * Clears the entire shopping cart.
 *
 * @param mysqli $conn Database connection.
 * @return bool True on success, false on failure.
 */
function clear_cart(mysqli $conn) {
  $query = "TRUNCATE TABLE cart";
  return mysqli_query($conn, $query);
}


// --- Example Usage (Handle the Purchase Request) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Check if a "clear cart" button was clicked.
  if (isset($_POST['clear_cart'])) {
    if (clear_cart($conn)) {
      echo "<p>Cart cleared successfully!</p>";
    } else {
      echo "<p>Error clearing cart.</p>";
    }
  } else {
    // Handle adding to cart
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
      $product_id = $_POST['product_id'];
      $quantity = $_POST['quantity'];
      if (add_to_cart($conn, $product_id, $quantity)) {
        echo "<p>Product added to cart!</p>";
      } else {
        echo "<p>Error adding product to cart.</p>";
      }
    }
  }
}

// --- Display the Cart ---
$cart_items = get_cart_items($conn);

if (count($cart_items) > 0) {
  echo "<h2>Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// --- Database Connection (Replace with your actual credentials) ---
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// --- Functions ---

// Add to Cart
function addToCart($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = array(
            'quantity' => $quantity,
            'price' => getProductPrice($product_id) // Get price from product table
        );
    }
}

// Get Cart Contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Calculate Total Cart Value
function calculateTotal() {
    $total = 0;
    $cart = getCartContents();
    foreach ($cart as $item_id => $item_data) {
        $total_item_price = $item_data['price'] * $item_data['quantity'];
        $total += $total_item_price;
    }
    return $total;
}


// Get Product Price (Fetch from product table - adapt to your schema)
function getProductPrice($product_id) {
    $sql = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $product_id = intval($product_id); // Ensure integer
    $stmt->execute();
    $result = $stmt->get_result();
    $row = $result->fetch_assoc();

    if ($row) {
        return $row['price'];
    } else {
        return 0; // Or handle the error appropriately
    }
}


// --- Cart Management ---

// Check if the cart is empty
if (empty($_SESSION['cart'])) {
    echo "<h1>Your shopping cart is empty.</h1>";
    echo "<a href='index.php'>Browse Products</a>";
} else {

    // Display Cart Contents
    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    $cart = getCartContents();
    foreach ($cart as $product_id => $item_data) {
        echo "<li>";
        echo "Product ID: " . $product_id . "<br>";
        echo "Quantity: " . $item_data['quantity'] . "<br>";
        echo "Price per item: " . $item_data['price'] . "<br>";
        echo "Total for this item: " . $item_data['price'] * $item_data['quantity'] . "<br>";
        echo "<form method='post' action='update_cart.php'>";
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='number' name='quantity' value='" . $item_data['quantity'] . "' min='1'>";
        echo "<button type='submit'>Update</button>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";

    // Display Total
    echo "<p><strong>Total Cart Value: $" . calculateTotal() . "</strong></p>";

    // Checkout Link (Example -  Replace with your actual checkout process)
    echo "<a href='checkout.php'>Proceed to Checkout</a>";
}

// ---  Update Cart (update_cart.php -  Separated for clarity)
// This would handle the update of quantity in the cart.  It receives
// the product_id and the new quantity from the form submission.
//  It then calls the addToCart function to update the cart.
//  (Implementation details are intentionally omitted for brevity.)

?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a product to the cart
function addToCart($conn, $product_id, $quantity) {
    // Check if the product already exists in the cart
    $sql = "SELECT * FROM cart WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id); // 'i' for integer
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Product already in cart, update quantity
        $row = $result->fetch_assoc();
        $quantity_in_cart = $row['quantity'] + $quantity;
        $sql = "UPDATE cart SET quantity = ? WHERE product_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("is", $quantity_in_cart, $product_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        // Product not in cart, add it
        $sql = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("is", $product_id, $quantity);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }
    $stmt->close();
}

// Function to get the cart contents
function getCartContents($conn) {
    $sql = "SELECT * FROM cart";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $cart_contents = [];
        while ($row = $result->fetch_assoc()) {
            $cart_contents[] = $row;
        }
        return $cart_contents;
    } else {
        return [];
    }
}

// Function to remove a product from the cart
function removeFromCart($conn, $product_id) {
    $sql = "DELETE FROM cart WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
    $stmt->close();
}

// Function to update the quantity of a product in the cart
function updateQuantity($conn, $product_id, $new_quantity) {
    if ($new_quantity <= 0) {
        // Don't allow zero or negative quantities
        removeFromCart($conn, $product_id);
        return false;
    }

    $sql = "UPDATE cart SET quantity = ? WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("is", $new_quantity, $product_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
    $stmt->close();
}

// --- Example Usage (Demonstration) ---

// 1. Connect to the database
$conn = connectToDatabase();

// 2. Add a product to the cart (example: product_id = 1)
if (addToCart($conn, 1, 2)) {
    echo "Product 1 added to cart (quantity = 2)
";
} else {
    echo "Failed to add Product 1 to cart.
";
}

// 3. Get the cart contents
$cart = getCartContents($conn);
echo "Cart Contents:
";
foreach ($cart as $item) {
    echo "- Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "
";
}

// 4. Update quantity of product 1
if (updateQuantity($conn, 1, 5)) {
    echo "Quantity of Product 1 updated to 5.
";
} else {
    echo "Failed to update Product 1 quantity.
";
}

// 5. Get the cart contents again
$cart = getCartContents($conn);
echo "Updated Cart Contents:
";
foreach ($cart as $item) {
    echo "- Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "
";
}

// 6. Remove a product from the cart (example: product_id = 2)
if (removeFromCart($conn, 2)) {
    echo "Product 2 removed from cart.
";
} else {
    echo "Failed to remove Product 2 from cart.
";
}

// 7. Get the cart contents
$cart = getCartContents($conn);
echo "Final Cart Contents:
";
foreach ($cart as $item) {
    echo "- Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity'] . "
";
}

// Close the database connection (Important!)
$conn->close();

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// --- Purchase Functionality ---

/**
 * Processes a purchase request.
 *
 * @param array $orderData An array containing the order information.
 *                       Example: ['product_id' => 123, 'quantity' => 2, 'customer_name' => 'John Doe']
 * @return array An array containing the response data (success/failure, order ID, etc.).
 */
function processPurchase(array $orderData) {
  // Validate input (basic example - enhance for production)
  if (empty($orderData['product_id']) || empty($orderData['quantity']) || empty($orderData['customer_name'])) {
    return ['success' => false, 'message' => 'Missing order information.'];
  }

  // Product data (simulated for example purposes)
  $products = [
    123 => ['name' => 'Laptop', 'price' => 1200],
    456 => ['name' => 'Mouse', 'price' => 25],
    789 => ['name' => 'Keyboard', 'price' => 75]
  ];

  // Get product details
  $product = $products[$orderData['product_id']];

  // Calculate total price
  $totalPrice = $product['price'] * $orderData['quantity'];

  // Generate a unique order ID (simple example)
  $orderId = bin2hex(random_bytes(8));

  // Insert order into the database (using prepared statements for security)
  $sql = "INSERT INTO orders (order_id, product_id, quantity, customer_name, total_price)
          VALUES (?, ?, ?, ?, ?)";

  $stmt = $conn->prepare($sql);
  $stmt->bind_param("issss", $orderId, $orderData['product_id'], $orderData['quantity'], $orderData['customer_name'], $totalPrice);
  $stmt->execute();

  // Check if the insertion was successful
  if ($stmt->affected_rows > 0) {
    //  Optionally, you'd likely create a new order item table for more granular tracking
    //  For this example, we'll just return the order ID
    return ['success' => true, 'order_id' => $orderId];
  } else {
    return ['success' => false, 'message' => 'Failed to insert order into database.'];
  }

  $stmt->close();
}


// --- Example Usage (Simulated form submission) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $orderData = [
    'product_id' => isset($_POST['product_id']) ? intval($_POST['product_id']) : null,
    'quantity' => isset($_POST['quantity']) ? intval($_POST['quantity']) : 1,
    'customer_name' => isset($_POST['customer_name']) ? $_POST['customer_name'] : 'Guest'
  ];

  if (is_array($orderData) && !empty($orderData)) {
    $purchaseResult = processPurchase($orderData);

    if ($purchaseResult['success']) {
      echo "<h2>Purchase Successful!</h2>";
      echo "<p>Order ID: " . $purchaseResult['order_id'] . "</p>";
    } else {
      echo "<h2>Purchase Failed!</h2>";
      echo "<p>Error: " . $purchaseResult['message'] . "</p>";
    }
  } else {
    echo "<p>Invalid order data received.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Online Store Purchase</h1>

  <form method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <option value="123">Laptop</option>
      <option value="456">Mouse</option>
      <option value="789">Keyboard</option>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" value="1" min="1"><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" name="customer_name" value="Guest"><br><br>

    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php

// Database Configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Purchase Class
class Purchase {

  private $db;

  public function __construct() {
    $this->db = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  public function createPurchase($product_id, $quantity, $customer_name, $customer_email) {
    // Input Validation (Basic - improve for production)
    if (!is_numeric($product_id) || !is_numeric($quantity)) {
      return "Invalid product ID or quantity.";
    }
    if (empty($customer_name) || empty($customer_email)) {
      return "Customer name and email are required.";
    }

    // SQL Query
    $sql = "INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date)
            VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())";

    if ($this->db->query($sql)) {
      return "Purchase created successfully!";
    } else {
      return "Error creating purchase: " . $this->db->error;
    }
  }

  public function __destruct() {
    $this->db->close();
  }
}

// --- Example Usage (Simulated Form Handling) ---

// 1. Simulate form data
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];


// 2. Create a new Purchase object
$purchase = new Purchase();

// 3.  Handle the purchase creation
$result = $purchase->createPurchase($product_id, $quantity, $customer_name, $customer_email);

// 4. Display the result
echo "<p>Result: " . $result . "</p>";

// You would typically display this result to the user,
// and if successful, redirect them to a confirmation page.

?>


<?php

// Database Connection (Replace with your actual database details)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Establish Database Connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}


// Function to add a product to the cart
function addToCart($product_id, $quantity, $conn) {
  // This is a basic implementation.  A more robust system would handle 
  // quantity limits, duplicate product checks, and potentially user sessions
  // to track cart items.

  // Sanitize input (important!)
  $product_id = mysqli_real_escape_string($conn, $product_id);
  $quantity = mysqli_real_escape_string($conn, $quantity);


  // Query to check if the product is already in the cart.  If not, we add it.
  $sql = "SELECT * FROM products WHERE id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    // Product exists, update quantity
    $sql = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'";
    if ($conn->query($sql) === TRUE) {
      // Success
      return true;
    } else {
      // Handle error
      return false;
    }
  } else {
    // Product doesn't exist in the cart, create a new entry
    $sql = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)";
    if ($conn->query($sql) === TRUE) {
      // Success
      return true;
    } else {
      // Handle error
      return false;
    }
  }
}

// Function to get the cart contents
function getCartContents($conn) {
  $sql = "SELECT p.name AS product_name, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $cart_data = array();
    while($row = $result->fetch_assoc()) {
      $cart_data[] = $row;
    }
    return $cart_data;
  } else {
    return array(); // Return empty array if cart is empty
  }
}


// Function to remove a product from the cart
function removeFromCart($product_id, $conn) {
    // Sanitize input
    $product_id = mysqli_real_escape_string($conn, $product_id);

    // Delete the row from the cart
    $sql = "DELETE FROM cart WHERE product_id = '$product_id'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Example usage (Illustrative - you'll need to integrate this into your form)
// -----------------------------------------------------------------------

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Add to cart
  if (isset($_POST["action"]) && $_POST["action"] == "addToCart") {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    if (addToCart($product_id, $quantity, $conn) ) {
      echo "Product added to cart.";
    } else {
      echo "Error adding product to cart.";
    }
  }

  // Remove from cart
  if (isset($_POST["action"]) && $_POST["action"] == "removeFromCart") {
    $product_id = $_POST["product_id"];
    if(removeFromCart($product_id, $conn)) {
      echo "Product removed from cart.";
    } else {
      echo "Error removing product from cart.";
    }
  }

  // Get cart contents
  $cartContents = getCartContents($conn);
  // Display cart contents
  echo "<h2>Your Cart</h2>";
  if (count($cartContents) > 0) {
    echo "<ul>";
    foreach ($cartContents as $item) {
      echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }

}
?>

<!-- HTML Form (Simplified example - you'll need to build this out properly) -->
<form method="post">
  <label for="product_id">Product ID:</label>
  <input type="number" id="product_id" name="product_id" required>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" required>
  <button type="submit" name="action" value="addToCart">Add to Cart</button>
</form>

<form method="post">
  <label for="product_id">Product ID to Remove:</label>
  <input type="number" id="product_id" name="product_id" required>
  <button type="submit" name="action" value="removeFromCart">Remove from Cart</button>
</form>


<?php

// Database Configuration (Replace with your actual values)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle the purchase request
function handlePurchase($cart_id, $customer_name, $customer_email, $payment_method) {
    $conn = connectToDatabase();

    // 1. Retrieve cart details
    $sql_cart = "SELECT product_id, quantity FROM cart WHERE cart_id = '$cart_id'";
    $result = $conn->query($sql_cart);

    if ($result->num_rows > 0) {
        $cart_data = $result->fetch_assoc();
        $product_id = $cart_data['product_id'];
        $quantity = $cart_data['quantity'];

        // 2. Update inventory (Adjust this based on your inventory system)
        // Example:  Simple inventory update (modify for your database)
        $sql_update_inventory = "UPDATE products SET stock = stock - '$quantity' WHERE id = '$product_id'";
        if (!$conn->query($sql_update_inventory)) {
            echo "Error updating inventory: " . $conn->error;
            return false;
        }

        // 3. Record the order
        $sql_insert_order = "INSERT INTO orders (cart_id, customer_name, customer_email, order_date, payment_method)
                             VALUES ('$cart_id', '$customer_name', '$customer_email', NOW(), '$payment_method')";

        if (!$conn->query($sql_insert_order)) {
            echo "Error inserting order: " . $conn->error;
            return false;
        }

        // 4. Clear the cart (optional, depending on your requirements)
        $sql_clear_cart = "DELETE FROM cart WHERE cart_id = '$cart_id'";
        if (!$conn->query($sql_clear_cart)) {
            echo "Error clearing cart: " . $conn->error;
            return false;
        }

        return true; // Purchase successful
    } else {
        return false; // Cart not found
    }
}

// ------------------ Example Usage (Simulated) ------------------

// Assuming $cart_id is the ID of the cart to purchase
// $cart_id = "123"; // Replace with the actual cart ID

// Simulate form data (replace with actual form processing)
$cart_id = $_POST['cart_id'];
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];
$payment_method = $_POST['payment_method'];

//  Validate input (VERY IMPORTANT!  Add more robust validation here)
if (empty($cart_id) || empty($customer_name) || empty($customer_email) || empty($payment_method)) {
    echo "Error: All fields are required.";
} else {
    // Handle the purchase
    if (handlePurchase($cart_id, $customer_name, $customer_email, $payment_method)) {
        echo "Purchase successful!  Order ID: " . rand(1000, 9999); // Simulate order ID
    } else {
        echo "Purchase failed.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<h2>Purchase Functionality</h2>

<form method="post" action="">
    <label for="cart_id">Cart ID:</label>
    <input type="text" id="cart_id" name="cart_id" value="<?php echo isset($cart_id) ? $cart_id : ''; ?>">
    <br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name">
    <br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email">
    <br><br>

    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
        <option value="other">Other</option>
    </select>
    <br><br>

    <input type="submit" value="Purchase">
</form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_db";
$db_user = "your_user";
$db_pass = "your_password";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate input (Important for security - add more validation as needed)
  $name = $_POST["name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"];

  if (empty($name) || empty($quantity) || empty($price)) {
    $error_message = "Please fill in all fields.";
  } elseif (!is_numeric($quantity) || !is_numeric($price)) {
    $error_message = "Quantity and Price must be numeric values.";
  } else {
    // Sanitize input - crucial for preventing SQL injection
    $name = htmlspecialchars($name);
    $quantity = (int)$quantity; // Convert to integer
    $price = (float)$price;   // Convert to float

    // SQL query (Use prepared statements for better security)
    $sql = "INSERT INTO products (product_name, quantity, price) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql); // Prepare the statement
    $stmt->bind_param("ssi", $name, $quantity, $price); // Bind parameters
    $stmt->execute();

    // Success message
    $success_message = "Product added successfully!";

    // Reset variables
    $name = "";
    $quantity = "";
    $price = "";
  }
}

// Database connection (Establish connection here)
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Add Product</h1>

  <?php if (isset($error_message)): ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php endif; ?>

  <?php if (isset($success_message)): ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php endif; ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($name); ?>">

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo htmlspecialchars($quantity); ?>">

    <br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" value="<?php echo htmlspecialchars($price); ?>">

    <br><br>

    <button type="submit">Add to Cart</button>
  </form>

  <br><br>

  <h2>Cart (Example - You'll need to implement a proper cart system)</h2>
  <p>This is a placeholder for your cart functionality.</p>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Session handling (for user management)
session_start();

// --- Database Functions ---

/**
 * Connects to the database.
 * @return mysqli|false Connection object or false on error.
 */
function connect_to_db() {
    global $db_host, $db_name, $db_user, $db_password;
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

/**
 * Adds a product to the cart.
 * @param int $product_id
 * @param int $quantity
 * @return bool True on success, false on failure.
 */
function add_to_cart(int $product_id, int $quantity) {
    $conn = connect_to_db();

    if (!$conn) {
        return false;
    }

    // Check if the product exists (basic check)
    $stmt = $conn->prepare("SELECT id, name, price FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // Product doesn't exist
    }
    $product = $result->fetch_assoc();
    $stmt->close();

    // Get the cart ID
    $cart_id = $_SESSION['cart_id'];

    // Prepare the update query
    $update_query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($update_query);
    $stmt->bind_param("iii", $cart_id, $product_id, $quantity);

    if ($stmt->execute()) {
        return true;
    } else {
        // Handle the error (e.g., log it)
        echo "Error adding to cart: " . $stmt->error;
        return false;
    }
    $stmt->close();
}


/**
 * Retrieves the contents of the cart.
 * @return array An associative array of cart items.
 */
function get_cart_contents() {
    $cart_id = $_SESSION['cart_id'];

    $conn = connect_to_db();

    if (!$conn) {
        return []; // Return empty array if connection fails
    }

    $query = "SELECT p.id, p.name, p.price, ci.quantity FROM cart_items ci JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $cart_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $cart_items = [];
    while ($row = $result->fetch_assoc()) {
        $cart_items[$row['id']] = [
            'name' => $row['name'],
            'price' => $row['price'],
            'quantity' => $row['quantity'],
            'total' => $row['price'] * $row['quantity']
        ];
    }

    $stmt->close();
    return $cart_items;
}

/**
 * Updates the quantity of a product in the cart.
 * @param int $product_id
 * @param int $new_quantity
 * @return bool True on success, false on failure.
 */
function update_cart_quantity(int $product_id, int $new_quantity) {
    $conn = connect_to_db();

    if (!$conn) {
        return false;
    }

    // Check if the product exists in the cart
    $query = "SELECT id FROM cart_items WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("is", $product_id, $_SESSION['cart_id']);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        return false; // Product not found in cart
    }

    // Prepare the update query
    $update_query = "UPDATE cart_items SET quantity = ? WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($update_query);
    $stmt->bind_param("iii", $new_quantity, $product_id, $_SESSION['cart_id']);

    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating cart: " . $stmt->error;
        return false;
    }
    $stmt->close();
}

/**
 * Removes a product from the cart.
 * @param int $product_id
 * @return bool True on success, false on failure.
 */
function remove_from_cart(int $product_id) {
    $conn = connect_to_db();

    if (!$conn) {
        return false;
    }

    // Prepare the delete query
    $delete_query = "DELETE FROM cart_items WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($delete_query);
    $stmt->bind_param("is", $product_id, $_SESSION['cart_id']);

    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error removing from cart: " . $stmt->error;
        return false;
    }
    $stmt->close();
}

/**
 * Initializes the shopping cart session.
 */
function init_shopping_cart() {
    // Create the cart table if it doesn't exist
    $conn = connect_to_db();
    if(!$conn){
        return;
    }
    $create_table_query = "CREATE TABLE IF NOT EXISTS cart_items (
        id INT AUTO_INCREMENT PRIMARY KEY,
        cart_id INT NOT NULL,
        product_id INT NOT NULL,
        quantity INT NOT NULL
    )";
    if(!$conn->query($create_table_query)){
        echo "Error creating table: " . $conn->error;
    }

    // Create the cart table if it doesn't exist
    $create_table_query = "CREATE TABLE IF NOT EXISTS products (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2) NOT NULL
    )";
    if(!$conn->query($create_table_query)){
        echo "Error creating table: " . $conn->error;
    }


    // Create a unique cart ID (using a timestamp)
    $cart_id = md5(time()); //Use md5 to generate the id.
    $_SESSION['cart_id'] = $cart_id;
}



// --- Example Usage (for demonstration purposes) ---

// Initialize the shopping cart
init_shopping_cart();

// Add a product to the cart (example)
if (add_to_cart(1, 2)) {
    echo "Product added to cart.";
} else {
    echo "Failed to add product to cart.";
}

// Get the cart contents
$cart = get_cart_contents();
echo "<pre>";
print_r($cart);
echo "</pre>";

// Update quantity
if (update_cart_quantity(1, 3)) {
    echo "Quantity updated.";
} else {
    echo "Failed to update quantity.";
}

// Remove a product
if (remove_from_cart(1)) {
    echo "Product removed from cart.";
} else {
    echo "Failed to remove product from cart.";
}

// Get the updated cart contents
$cart = get_cart_contents();
echo "<pre>";
print_r($cart);
echo "</pre>";
?>


<?php

// This is a simplified purchase functionality for demonstration purposes.
// It doesn't include a database or payment gateway integration.
// It's designed to illustrate the basic flow of a purchase.

class Purchase {

    private $items = []; // Array to store purchased items and their quantities
    private $total_amount = 0;

    public function __construct() {
        // Initialize the purchase
        $this->items = [];
        $this->total_amount = 0;
    }

    public function addItem($item_name, $quantity, $price) {
        if (is_numeric($quantity) && is_numeric($price)) {
            $this->items[] = [
                'name' => $item_name,
                'quantity' => (int)$quantity,
                'price' => (float)$price
            ];
            $this->total_amount += ($quantity * $price);
        } else {
            echo "Invalid quantity or price.  Must be numeric values.
";
        }
    }

    public function removeItem($item_name) {
        // Simple removal logic - find and remove the first matching item.
        foreach ($this->items as $key => $item) {
            if ($item['name'] === $item_name) {
                unset($this->items[$key]);
                $this->total_amount -= ($item['quantity'] * $item['price']);
                return; // Exit after removing the item
            }
        }
        echo "Item '$item_name' not found in the purchase.
";
    }

    public function getTotalAmount() {
        return number_format($this->total_amount, 2); // Format to two decimal places
    }

    public function displayPurchase() {
        echo "<h2>Purchase Details</h2>
";
        echo "<ul>
";
        foreach ($this->items as $item) {
            echo "<li>$item['name']: $item['quantity'] x $item['price'] = $item['quantity'] * $item['price']</li>
";
        }
        echo "</ul>
";
        echo "<p><strong>Total Amount: $" . $this->getTotalAmount() . "</strong></p>
";
    }
}


// --- Example Usage ---

// Create a new purchase object
$purchase = new Purchase();

// Add some items
$purchase->addItem("Laptop", 1, 1200.00);
$purchase->addItem("Mouse", 2, 25.00);
$purchase->addItem("Keyboard", 1, 75.00);

// Display the purchase details
$purchase->displayPurchase();

// Remove an item
$purchase->removeItem("Mouse");

// Display the updated purchase details
echo "
<h2>Updated Purchase Details</h2>
";
$purchase->displayPurchase();


//  ---  Important Considerations and Enhancements ---

// 1. Database Integration:
//    - You'll typically store purchase information in a database (e.g., MySQL, PostgreSQL).
//    - This class would need to interact with the database to save, retrieve, and update purchases.

// 2. Payment Gateway Integration:
//    -  To process payments, you'll need to integrate with a payment gateway (e.g., PayPal, Stripe, Braintree).
//    - This involves handling credit card details securely (using tokenization - avoid storing sensitive card data directly).
//    -  The transaction would likely be handled asynchronously (e.g., via a webhook from the payment gateway).

// 3. Security:
//    - **Input Validation:**  Thoroughly validate all user inputs to prevent security vulnerabilities (e.g., SQL injection, XSS).
//    - **Output Encoding:**  Encode all output to prevent XSS attacks.
//    - **HTTPS:**  Always use HTTPS to encrypt communication between the user's browser and your server.

// 4. Error Handling:
//    - Implement robust error handling to gracefully handle exceptions and display informative error messages to the user.

// 5. User Interface (UI):
//   - This is a command-line example.  You'll need to create a user-friendly web interface (e.g., HTML, JavaScript, PHP) to interact with the purchase functionality.
?>


<?php

// Database configuration (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "ecommerce";
$db_user = "your_user";
$db_password = "your_password";

// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Validate and sanitize the input data
  $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_STRING);
  $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
  $quantity = filter_input(INPUT_POST, "quantity", FILTER_VALIDATE_INT);
  $product_id = filter_input(INPUT_POST, "product_id", FILTER_VALIDATE_INT);


  // Check if required fields are filled
  if (empty($name) || empty($email) || empty($quantity) || empty($product_id)) {
    $error_message = "Please fill in all fields.";
  } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error_message = "Invalid email address.";
  } else if ($quantity <= 0) {
    $error_message = "Quantity must be greater than 0.";
  } else if ($product_id <= 0) {
    $error_message = "Invalid product ID.";
  }
  else {

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO orders (name, email, quantity, product_id) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    if ($stmt) {
      // Bind the parameters
      $stmt->bind_param("ssii", $name, $email, $quantity, $product_id);

      // Execute the statement
      if ($stmt->execute()) {
        $success_message = "Order placed successfully!";
      } else {
        $error_message = "Order placement failed: " . $stmt->error;
      }
    } else {
      $error_message = "Error preparing statement.";
    }

    // Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
  <?php } ?>

  <?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Your Name" required>

    <br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" min="1" max="10" required>

    <br><br>

    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" min="1" max="10" required>


    <br><br>

    <button type="submit">Place Order</button>
  </form>

  <br><br>
  <a href="index.php">Back to Home</a>  <!-- Link to a home page, replace "index.php" with your actual home page -->

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "shop";
$db_user = "your_username";
$db_password = "your_password";

// --- Product Data (For demonstration - Replace with database retrieval) ---
$products = [
    1 => ["id" => 1, "name" => "T-Shirt", "price" => 20.00],
    2 => ["id" => 2, "name" => "Jeans", "price" => 50.00],
    3 => ["id" => 3, "name" => "Sneakers", "price" => 75.00],
];

// --- Session Management ---
session_start();

// --- Cart Data (Stored in session) ---
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Function to add to cart ---
function addToCart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

// --- Function to update quantity in cart ---
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // Handle case where product is not in the cart.  You might want to add it here
        // or simply ignore it based on your needs.
        // For this example, we'll ignore it.
    }
}

// --- Function to remove product from cart ---
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// --- Function to get cart contents ---
function getCartContents() {
    return $_SESSION['cart'];
}

// --- Function to calculate total cart value ---
function calculateTotal() {
    $total = 0;
    foreach (getCartContents() as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            $totalPrice = $products[$product_id]['price'] * $quantity;
            $total += $totalPrice;
        }
    }
    return $total;
}

// --- Handle form submission (adding to cart) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = (int)$_POST['product_id']; // Sanitize input
        addToCart($product_id, (int)$_POST['quantity']); // Sanitize input
    }
}

// --- Display Cart Contents ---
echo "<h2>Shopping Cart</h2>";

if (count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach (getCartContents() as $product_id => $quantity) {
        if (isset($products[$product_id])) {
            echo "<li>" . $products[$product_id]['name'] . " - $" . $products[$product_id]['price'] . " x " . $quantity . " = $" . $products[$product_id]['price'] * $quantity . "</li>";
        }
    }
    echo "</ul>";
    echo "<p>Total: $" . calculateTotal() . "</p>";

    echo "<form method='post'>";
    echo "<button type='submit' name='remove_from_cart' value='" . implode("','", array_keys($_SESSION['cart'])) . "'>";
    echo "Remove Items";
    echo "</button>";
    echo "</form>";

} else {
    echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Configuration
$items = []; // Array to store items in the cart
$cart_file = 'cart.json'; // File to store cart data (JSON format)

// Function to load cart data from the file
function loadCart() {
    if (file_exists($cart_file)) {
        $data = file_get_contents($cart_file);
        if ($data) {
            $cart = json_decode($data, true);
            return $cart;
        } else {
            return [];
        }
    }
    return [];
}

// Function to save cart data to the file
function saveCart($cart) {
    file_put_contents($cart_file, json_encode($cart, JSON_PRETTY_PRINT));
}


// ------------------ Cart Operations ------------------

// Add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    $cart = loadCart();

    if (empty($cart)) {
        $cart[$product_id] = $quantity;
    } else {
        if (isset($cart[$product_id])) {
            $cart[$product_id] += $quantity;
        } else {
            $cart[$product_id] = $quantity;
        }
    }

    saveCart($cart);
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    $cart = loadCart();
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
    saveCart($cart);
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    $cart = loadCart();
    if (isset($cart[$product_id])) {
        $cart[$product_id] = $quantity;
    }
    saveCart($cart);
}


// Get the cart contents
function get_cart_contents() {
    $cart = loadCart();
    return $cart;
}

// Calculate the total price
function calculate_total() {
    $cart = get_cart_contents();
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        // Assume we have a product price map (replace with your actual data source)
        $product_prices = [
            1 => 10,  // Product ID 1: $10
            2 => 20,  // Product ID 2: $20
            3 => 30   // Product ID 3: $30
        ];
        if (isset($product_prices[$product_id])) {
            $total_item_price = $product_prices[$product_id] * $quantity;
            $total += $total_item_price;
        }
    }
    return $total;
}



// ------------------  Example Usage (for demonstration) ------------------

// Example: Add an item to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;
    add_to_cart($product_id, $quantity);
    $cart_contents = get_cart_contents();
    echo "Item added to cart. Cart contents: " . json_encode($cart_contents) . "<br>";
}

// Example: Remove an item from the cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    remove_from_cart($product_id);
    $cart_contents = get_cart_contents();
    echo "Item removed from cart. Cart contents: " . json_encode($cart_contents) . "<br>";
}

// Example: Update quantity
if (isset($_GET['update_quantity'])) {
    $product_id = $_GET['update_quantity'];
    $new_quantity = isset($_GET['quantity']) ? intval($_GET['quantity']) : 1;
    update_quantity($product_id, $new_quantity);
    $cart_contents = get_cart_contents();
    echo "Quantity updated. Cart contents: " . json_encode($cart_contents) . "<br>";
}

// Show the cart contents
$cart_contents = get_cart_contents();
$total = calculate_total();

echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}

echo "<h2>Total: $" . $total . "</h2>";

?>


<?php
session_start();

// Configuration (Adjust these for your needs)
$items = []; // Array to store cart items
$cart_key = 'cart_items';

// Function to add an item to the cart
function addItemToCart($productId, $quantity, $productName, $productPrice) {
  global $items, $cart_key;

  if (isset($_SESSION[$cart_key])) {
    $items = $_SESSION[$cart_key];
  } else {
    $items = [];
  }

  // Check if the item already exists in the cart
  $item_exists = false;
  foreach ($items as &$item) { // Use reference (&) to modify the original array
    if ($item['productId'] == $productId) {
      $item['quantity'] += $quantity;
      $item['name'] = $productName;
      $item['price'] = $productPrice;
      $item_exists = true;
      break;
    }
  }

  // If the item doesn't exist, add it to the cart
  if (!$item_exists) {
    $items[] = [
      'productId' => $productId,
      'name' => $productName,
      'price' => $productPrice,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($productId, $newQuantity) {
  global $items, $cart_key;

  foreach ($items as &$item) {
    if ($item['productId'] == $productId) {
      $item['quantity'] = $newQuantity;
      break;
    }
  }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  global $items, $cart_key;

  // Use array_filter to remove the item
  $items = array_filter($items, function ($item) use ($productId) {
    return $item['productId'] != $productId;
  });
}

// Function to get the cart total
function calculateCartTotal() {
  $total = 0;
  foreach ($items as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}

// Function to get the cart contents
function getCartContents() {
  global $items, $cart_key;
  return $items;
}


// --- Example Usage (simulated product data) ---
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Shoes', 'price' => 80]
];


// --- Handle Add to Cart Request ---
if (isset($_POST['add_to_cart'])) {
  $productId = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'];
  $productName = $products[$productId]['name'];
  $productPrice = $products[$productId]['price'];

  addItemToCart($productId, $quantity, $productName, $productPrice);
  // Redirect to the cart page
  header("Location: cart.php");
  exit();
}

// --- Cart Page (cart.php) ---
?>
<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    table {
      width: 80%;
      border-collapse: collapse;
      margin: 20px auto;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
    $cart_items = getCartContents();
    $cart_total = calculateCartTotal();

    if (empty($cart_items)) {
      echo "<p>Your cart is empty.</p>";
    } else {
      echo "<table>";
      echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";
      foreach ($cart_items as $item) {
        $itemTotal = $item['quantity'] * $item['price'];
        echo "<tr>";
        echo "<td>" . $item['name'] . "</td>";
        echo "<td>$" . number_format($item['price'], 2) . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>$" . number_format($itemTotal, 2) . "</td>";
        echo "</tr>";
      }
      echo "</table><p><strong>Total: $" . number_format($cart_total, 2) . "</strong></p>";
    }
  ?>

  <hr>

  <h2>Add Items to Cart</h2>
  <?php
  if (empty($cart_items)) {
      echo "<p>Click <a href='add_to_cart.php?product_id=1'>here</a> to add a T-Shirt.</p>";
      echo "<p>Click <a href='add_to_cart.php?product_id=2'>here</a> to add Jeans.</p>";
      echo "<p>Click <a href='add_to_cart.php?product_id=3'>here</a> to add Shoes.</p>";
  }
  ?>

  <hr>

  <p><a href="checkout.php">Checkout</a></p>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize and validate inputs
  $product_name = $_POST["product_name"];
  $quantity = $_POST["quantity"];
  $price = $_POST["price"];

  // Validate inputs - Important for security and data integrity
  if (empty($product_name) || empty($quantity) || empty($price)) {
    $error = "All fields are required.";
  } elseif (!is_numeric($quantity) || $quantity <= 0) {
    $error = "Quantity must be a positive number.";
  } elseif (!is_numeric($price) || $price <= 0) {
    $error = "Price must be a positive number.";
  } else {
    // Database connection
    $conn = new mysqli($servername, $username, $password, $dbname);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Prepare and execute the SQL query
    $sql = "INSERT INTO purchases (product_name, quantity, price) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sii", $product_name, $quantity, $price);
    $stmt->execute();

    // Success message
    $message = "Purchase successful! Product: " . $product_name . ", Quantity: " . $quantity . ", Price: " . $price;

    // Close the statement and connection
    $stmt->close();
    $conn->close();
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <h1>Purchase Product</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" required><br><br>

    <input type="submit" value="Purchase">
  </form>

  <?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
  <?php } ?>

</body>
</html>


<?php
session_start();

// Configuration
$items = []; // Array to store items in the cart
$cart_file = 'cart.json'; // File to store cart data

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param int $quantity The quantity of the product being added.
 * @return void
 */
function add_to_cart(int $product_id, int $quantity) {
    // Check if the item is already in the cart
    if (isset($items[$product_id])) {
        $items[$product_id]['quantity'] += $quantity;
    } else {
        // If not, add it to the cart
        $items[$product_id] = ['quantity' => $quantity];
    }

    // Save the cart to the file
    save_cart_to_file();
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product being removed.
 * @return void
 */
function remove_from_cart(int $product_id) {
    if (isset($items[$product_id])) {
        unset($items[$product_id]);
    }

    // Save the cart to the file
    save_cart_to_file();
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product being updated.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity(int $product_id, int $new_quantity) {
    if (isset($items[$product_id])) {
        $items[$product_id]['quantity'] = $new_quantity;
    }
    save_cart_to_file();
}



/**
 * Loads the cart from the JSON file.
 *
 * @return void
 */
function load_cart_from_file() {
    if (file_exists($cart_file)) {
        $json_data = file_get_contents($cart_file);
        $data = json_decode($json_data, true);

        if ($data) {
            $items = $data; // Directly assign the decoded array
        }
    }
}

/**
 * Saves the cart to the JSON file.
 *
 * @return void
 */
function save_cart_to_file() {
    file_put_contents($cart_file, json_encode($items));
}

/**
 * Displays the cart contents.
 *
 * @return void
 */
function display_cart() {
    if (empty($items)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($items as $product_id => $item) {
        $product_name = get_product_name($product_id); // Assuming you have a function to get product name
        echo "<li>" . $product_name . " - Quantity: " . $item['quantity'] . " - Price: $" . get_product_price($product_id) . "</li>";
    }
    echo "</ul>";
}


/**
 * Retrieves the product name based on its ID. (Placeholder - Implement your logic here)
 * @param int $product_id
 * @return string
*/
function get_product_name(int $product_id) {
    // Replace this with your actual product database lookup logic.
    // This is just a placeholder.
    switch ($product_id) {
        case 1: return "Awesome T-Shirt";
        case 2: return "Cool Mug";
        case 3: return "Fancy Hat";
        default: return "Unknown Product";
    }
}

/**
 * Retrieves the product price based on its ID. (Placeholder - Implement your logic here)
 * @param int $product_id
 * @return float
*/
function get_product_price(int $product_id) {
    // Replace this with your actual product database lookup logic.
    // This is just a placeholder.
    switch ($product_id) {
        case 1: return 19.99;
        case 2: return 9.99;
        case 3: return 24.99;
        default: return 0.00;
    }
}



// --- Main Execution ---

// Load the cart data
load_cart_from_file();

// --- Example Usage (for demonstration) ---
// Add some items to the cart
//add_to_cart(1, 2); // Add 2 T-shirts
//add_to_cart(2, 1); // Add 1 Mug
//add_to_cart(1, 1); //Add 1 T-shirt
//
// //Remove item
//remove_from_cart(2);
//
// //Update quantity
// update_cart_quantity(1, 3);
//
// //Display the cart
// display_cart();
?>

<!-- HTML Form for Adding Items -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>
    <button type="submit">Add to Cart</button>
</form>


<?php
session_start();

// Configuration
$items = array(); // Array to store items in the cart
$cart_key = 'shopping_cart'; // Key to store the cart in session

// Helper Functions

// Function to add an item to the cart
function addItemToCart($product_id, $product_name, $price, $quantity) {
  global $items, $cart_key;

  $item = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // Check if the item is already in the cart
  foreach ($items as $key => $existing_item) {
    if ($existing_item['id'] == $item['id']) {
      // Update the existing item's quantity
      $items[$key]['quantity'] += $quantity;
      return;
    }
  }

  // If item not found, add it to the cart
  $items[] = $item;
}


// Function to get the cart items
function getCartItems() {
  global $items, $cart_key;
  return $items;
}

// Function to update the quantity of an item
function updateCartItemQuantity($product_id, $quantity) {
  global $items, $cart_key;

  // Find the item in the cart
  foreach ($items as $key => $item) {
    if ($item['id'] == $product_id) {
      $items[$key]['quantity'] = $quantity;
      return true;
    }
  }
  return false; // Item not found
}


// Function to remove an item from the cart
function removeItemFromCart($product_id) {
  global $items, $cart_key;

  // Iterate through the items and remove the item with the matching product_id
  for ($i = 0; $i < count($items); $i++) {
    if ($items[$i]['id'] == $product_id) {
      unset($items[$i]);
      // Re-index the array to avoid gaps
      $items = array_values($items);
      return true;
    }
  }
  return false;
}

// Function to calculate the cart total
function calculateCartTotal() {
    global $items;
    $total = 0;
    foreach ($items as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// ----  Handle incoming requests  ----

// Check if the request is adding an item to the cart
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  addItemToCart($product_id, $product_name, $price, $quantity);
  // Redirect to the cart page
  header("Location: cart.php");
  exit();
}


// Check if the request is updating the quantity of an item
if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateCartItemQuantity($product_id, $quantity);
    header("Location: cart.php");
    exit();
}

// Check if the request is removing an item from the cart
if (isset($_POST['action']) && $_POST['action'] == 'remove_item') {
    $product_id = $_POST['product_id'];
    removeItemFromCart($product_id);
    header("Location: cart.php");
    exit();
}



// ----  Display the cart contents  ----

// Get the cart items
$cart_items = getCartItems();

// Calculate the total
$total = calculateCartTotal();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else { ?>
    <table id="cart-table">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        foreach ($cart_items as $key => $item) {
          $total_item_price = $item['price'] * $item['quantity'];
          echo '<tr class="cart-item">
                <td>' . $item['name'] . '</td>
                <td>$' . number_format($item['price'], 2) . '</td>
                <td>' . $item['quantity'] . '</td>
                <td>$' . number_format($total_item_price, 2) . '</td>
                <td>
                  <form action="cart.php" method="post">
                    <input type="hidden" name="action" value="update_quantity">
                    <input type="hidden" name="product_id" value="' . $item['id'] .'">
                    <input type="number" name="quantity" value="' . $item['quantity'] .'" min="1" style="width:50px;">
                    <button type="submit">Update</button>
                  </form>
                  <form action="cart.php" method="post">
                    <input type="hidden" name="action" value="remove_item">
                    <input type="hidden" name="product_id" value="' . $item['id'] .'">
                    <button type="submit">Remove</button>
                  </form>
                </td>
              </tr>';
        } ?>
      </tbody>
    </table>
    <p><strong>Total:</strong> $' . number_format($total, 2) . '</p>
  <?php } ?>

  <a href="checkout.php">Checkout</a>  <!--  Link to checkout page -->

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "shopping_cart";

// Check if the connection is successful
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ------------------------------------------------------------------
// Product Data (Simulated Database for Example)
// In a real application, you'd retrieve this from a database.
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];

// ------------------------------------------------------------------
// Functions
// ------------------------------------------------------------------

// Add to Cart Function
function addToCart($productId, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = ['quantity' => $quantity];
    }
}

// Remove from Cart Function
function removeFromCart($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Get Cart Items
function getCartItems() {
    return $_SESSION['cart'];
}

// Calculate Total Cart Value
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $totalItemPrice = $item['price'] * $item['quantity'];
            $total = $total + $totalItemPrice;
        }
    }
    return $total;
}


// ------------------------------------------------------------------
// Handle Actions (Adding to Cart, etc.)
// ------------------------------------------------------------------

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $productId = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
    addToCart($productId, $quantity);
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $productId = $_POST['product_id'];
    removeFromCart($productId);
}


// ------------------------------------------------------------------
// Display Cart Page
// ------------------------------------------------------------------
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
// Display Cart Items
if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

    foreach ($_SESSION['cart'] as $productId => $item) {
        $product = $products[$productId]; // Get product details
        $totalItemPrice = $product['price'] * $item['quantity'];
        echo "<tr class='cart-item'>";
        echo "<td>" . $product['name'] . "</td>";
        echo "<td>$" . $product['price'] . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>$" . $totalItemPrice . "</td>";
        echo "</tr>";
    }

    echo "</table>";

    echo "<div class='cart-total'>Total: $" . calculateTotal() . "</div>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>

<hr>

<h2>Add Items to Cart</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>Product ID: " . $product['id'] . " - " . $product['name'] . " - Price: $" . $product['price'] . " <button onclick='addToCart(" . $product['id'] . ", 1)'>Add to Cart</button></li>";
    }
    ?>
</ul>


</body>
</html>


<?php
session_start();

// Configuration
$cart_file = 'cart.php';

// Function to get the cart data
function get_cart_data() {
    if (file_exists($cart_file)) {
        $cart = unserialize(file_get_contents($cart_file));
        if (!$cart) {
            return []; // Return an empty array if the file is empty or corrupted
        }
        return $cart;
    } else {
        return [];
    }
}

// Function to save the cart data
function save_cart_data($cart) {
    file_put_contents($cart_file, serialize($cart));
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    $cart = get_cart_data();

    // Check if the product is already in the cart
    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            break;
        }
    }

    // If the product is not in the cart, add it
    if (!isset($item['product_id'])) {
        $cart[] = [
            'product_id' => $product_id,
            'product_name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }

    save_cart_data($cart);
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    $cart = get_cart_data();

    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($cart[$key]);
            break;
        }
    }

    save_cart_data($cart);
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    $cart = get_cart_data();

    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $quantity;
            break;
        }
    }

    save_cart_data($cart);
}

// Example Usage (For demonstration purposes - Replace with your product/database logic)
// Simulate product information
$products = [
    1 => ['product_id' => 1, 'product_name' => 'Laptop', 'price' => 1200],
    2 => ['product_id' => 2, 'product_name' => 'Mouse', 'price' => 25],
    3 => ['product_id' => 3, 'product_name' => 'Keyboard', 'price' => 75],
];


// Handle adding to cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1;

    add_to_cart($product_id, $product_name, $price, $quantity);
    echo "<p>Item added to cart.</p>";
}

// Handle removing an item from the cart
if (isset($_GET['remove_item'])) {
    $product_id = $_GET['remove_item'];
    remove_from_cart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// Handle updating quantity
if (isset($_GET['update_quantity'])) {
    $product_id = $_GET['update_quantity'];
    $new_quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1; //Default to 1 if not provided
    update_quantity($product_id, $new_quantity);
    echo "<p>Quantity updated.</p>";
}


// Display the cart
$cart = get_cart_data();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
    echo "<a href='cart.php?action=empty'>Empty Cart</a>"; //Link to empty the cart
}

?>


<?php
session_start();

// Database connection details
$servername = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$dbname = "your_db_name";

// Initialize the cart
$_SESSION['cart'] = array();

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  $_SESSION['cart'][] = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $quantity;
            return true;
        }
    }
    return false;
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);
      return true;
    }
  }
  return false;
}


// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total = $total + ($item['price'] * $item['quantity']);
  }
  return $total;
}


// ---  Example Usage & Handling (Illustrative - Adapt to your product/database system) ---

// 1. Adding an item to the cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  addToCart($product_id, $product_name, $price, $quantity);
  echo "<p>Item added to cart!</p>";
}

// 2. Updating quantity (e.g., from a form submission)
if (isset($_POST['update_cart'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $new_quantity);
  echo "<p>Quantity updated!</p>";
}

// 3. Removing an item from the cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeCartItem($product_id);
  echo "<p>Item removed from cart!</p>";
}

// 4. Displaying the cart contents
$cart_contents = getCartContents();

if (!empty($cart_contents)) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart_contents as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// --- Database Connection (Replace with your database details) ---
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";
$conn = new mysqli($host, $username, $password, $database);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
// --------------------------------------------------------------

// --- Product Data (Replace with your actual product data source) ---
$products = array(
  1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200, 'description' => 'Powerful laptop for work and play.'),
  2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25, 'description' => 'Ergonomic wireless mouse.'),
  3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75, 'description' => 'Mechanical keyboard for a superior typing experience.'),
  4 => array('id' => 4, 'name' => 'Monitor', 'price' => 300, 'description' => '27-inch LED monitor.'),
);
// --------------------------------------------------------------

// --- Cart Functionality ---

// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Add to Cart
function addToCart($product_id, $quantity) {
  global $conn, $products;

  // Check if the product exists
  if (isset($products[$product_id])) {
    $product = $products[$product_id];

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      $_SESSION['cart'][$product_id] = array(
        'id' => $product_id,
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity,
        'description' => $product['description']
      );
    }
  } else {
    echo "Product ID $product_id not found.";
  }
}

// Remove from Cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  } else {
    echo "Product ID $product_id not found in cart.";
  }
}

// Update Quantity in Cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        echo "Product ID $product_id not found in cart.";
    }
}

// Get Cart Contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Calculate Total Cart Value
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Displaying the Cart ---

// Check if there are items in the cart
$cart_items = getCartContents();
$total_value = calculateTotal();

echo "<h1>Shopping Cart</h1>";

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total_value . "</strong></p>";
}

// --- Example Buttons & Forms ---

echo "<br>";
echo "<a href='add_to_cart.php?product_id=1'>Add Laptop to Cart</a> | ";
echo "<a href='add_to_cart.php?product_id=2'>Add Mouse to Cart</a> | ";
echo "<a href='add_to_cart.php?product_id=3'>Add Keyboard to Cart</a>";

?>

<!--
Add to Cart Form (add_to_cart.php)
<!DOCTYPE html>
<html>
<head>
    <title>Add to Cart</title>
</head>
<body>

    <h1>Add Product to Cart</h1>

    <form method="post" action="shopping_cart.php">
        <label for="product_id">Product ID:</label>
        <input type="number" id="product_id" name="product_id" required>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1">
        <button type="submit">Add to Cart</button>
    </form>

</body>
</html>
-->


<?php
session_start();

// Configuration
$items = array(
    "Product 1" => array("price" => 10.00, "quantity" => 1),
    "Product 2" => array("price" => 20.00, "quantity" => 1),
    "Product 3" => array("price" => 5.00, "quantity" => 2)
);

// Cart initialization
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Helper Functions ---

// Add item to cart
function add_to_cart($product_name, $quantity = 1) {
    global $items;

    if (isset($items[$product_name])) {
        if (isset($_SESSION['cart'][$product_name])) {
            $_SESSION['cart'][$product_name]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$product_name] = array("price" => $items[$product_name]['price'], "quantity" => $quantity);
        }
    } else {
        echo "<p style='color:red;'>Product '$product_name' not found.</p>";
    }
}


// Calculate total cart value
function calculate_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Cart Actions based on user input ---

// Add item to cart (handled via form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        add_to_cart($_POST['product_name'], $_POST['quantity']);
    }
}

// Remove item from cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['remove_item'])) {
    $product_name = $_POST['remove_item'];
    if (isset($_SESSION['cart'][$product_name])) {
        unset($_SESSION['cart'][$product_name]);
    }
}

// Clear the entire cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['clear_cart'])) {
    unset($_SESSION['cart']);
}

// --- Display Cart Content ---

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $item['quantity'] . " x " . $item['price'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . number_format(calculate_total(), 2) . "</strong></p>";

    // Remove Item Button (for each item)
    echo "<form method='post'>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<label for='remove_" . $item['price'] . "'>Remove " . $item['price'] . "</label> ";
        echo "<input type='submit' name='remove_item' value='Remove' class='remove-button' id='remove_" . $item['price'] . "'>";
    }
    echo "</form>";

    // Clear Cart Button
    echo "<form method='post'>";
    echo "<input type='submit' name='clear_cart' value='Clear Cart'>";
    echo "</form>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Shopping Cart</title>
    <style>
        .remove-button {
            background-color: #f44336;
            color: white;
            padding: 5px 10px;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>

<h2>Products</h2>
<form method="post">
    <label for="product_name">Product Name:</label>
    <select name="product_name" id="product_name">
        <?php
        foreach (array_keys($items) as $product_name) {
            echo "<option value='" . $product_name . "'>" . $product_name . "</option>";
        }
        ?>
    </select>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">
    <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

</body>
</html>


<?php
session_start();

// Configuration
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'quantity' => 1],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'quantity' => 1],
    3 => ['name' => 'Hat', 'price' => 15.00, 'quantity' => 2],
];

$cart = []; // Initialize an empty cart
$cart_count = 0; // Initialize cart count

// Handle Add to Cart functionality
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure it's an integer

    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $quantity = (int)$_POST['quantity']; // Ensure quantity is an integer

        if (isset($cart[$product_id])) {
            // Product already in cart, increase quantity
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            // Product not in cart, add it
            $cart[$product_id] = ['name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
        }
        $cart_count = count($cart);
    }
}

// Handle Remove from Cart functionality
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure it's an integer

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
        $cart_count = count($cart);
    }
}


// Display Cart
echo "<h2>Shopping Cart</h2>";

if (count($cart) > 0) {
    echo "<ul>";
    foreach ($cart as $product_id => $product) {
        echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "  (Quantity: " . $product['quantity'] . ")</li>";
    }
    echo "</ul>";

    echo "<p>Total: $" . number_format(array_sum(array_map(function($product) { return $product['price'] * $product['quantity']; }, $cart)), 2) . "</p>";

} else {
    echo "<p>Your cart is empty.</p>";
}

// Display Products for Purchase
echo "<h2>Available Products</h2>";
echo "<ul>";
foreach ($products as $id => $product) {
    echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<br>";
    echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
    echo "<label for='product_" . $id . "'>Quantity:</label>";
    echo "<input type='number' id='product_" . $id . "' min='1' value='" . (isset($_POST['product_' . $id]) ? $_POST['product_' . $id] : 1) . "'>";
    echo "<input type='hidden' name='product_id' value='" . $id . "'>";
    echo "<button type='submit' name='add_to_cart'>Add to Cart</button>";
    echo "</form></li>";
}
echo "</ul>";
?>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_name = 'shopping_cart';
$db_user = 'root';
$db_password = '';

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    $conn = connectDB();

    if (!$conn) {
        return false;
    }

    // Check if the product exists
    $product_query = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($product_query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $product_name = $row['name'];
        $product_price = $row['price'];

        // Get the cart or create a new one
        $cart_key = 'cart';
        if (!isset($_SESSION[$cart_key])) {
            $_SESSION[$cart_key] = [];
        }

        // Check if the product is already in the cart
        if (isset($_SESSION[$cart_key][$product_id])) {
            // Increment quantity
            $_SESSION[$cart_key][$product_id]['quantity'] += $quantity;
        } else {
            // Add the product to the cart
            $_SESSION[$cart_key][$product_id] = [
                'quantity' => $quantity,
                'name' => $product_name,
                'price' => $product_price
            ];
        }
        $stmt->close();
        return true;
    } else {
        $stmt->close();
        return false; // Product not found
    }
}


// Function to get the cart contents
function getCartContents() {
    $cart_key = 'cart';
    if (isset($_SESSION[$cart_key])) {
        return $_SESSION[$cart_key];
    } else {
        return [];
    }
}


// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    $cart_key = 'cart';

    if (isset($_SESSION[$cart_key][$product_id])) {
        $_SESSION[$cart_key][$product_id]['quantity'] = $quantity;
        return true;
    } else {
        return false; // Product not in cart
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    $cart_key = 'cart';

    if (isset($_SESSION[$cart_key][$product_id])) {
        unset($_SESSION[$cart_key][$product_id]);
        return true;
    } else {
        return false; // Product not in cart
    }
}

// Function to clear the entire cart
function clearCart() {
    unset($_SESSION['cart']);
}

// Example Usage (Handle Add to Cart Button)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (addToCart($product_id, $quantity)) {
        echo "<p>Item added to cart!</p>";
    } else {
        echo "<p>Failed to add item to cart.</p>";
    }
}


// Example Usage (Handle Remove from Cart Button)
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    if (removeFromCart($product_id)) {
        echo "<p>Item removed from cart!</p>";
    } else {
        echo "<p>Failed to remove item from cart.</p>";
    }
}

// Example Usage (Handle Update Quantity Button)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];

    if (updateCartItemQuantity($product_id, $new_quantity)) {
        echo "<p>Quantity updated!</p>";
    } else {
        echo "<p>Failed to update quantity.</p>";
    }
}

// Example Usage (Handle Clear Cart Button)
if (isset($_POST['clear_cart'])) {
    clearCart();
    echo "<p>Cart cleared!</p>";
}


// Display the Cart Contents
$cart_contents = getCartContents();

// HTML for the Cart Display
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (!empty($cart_contents)): ?>
    <form method="post">
        <label for="clear_cart">Clear Cart:</label>
        <button type="submit" name="clear_cart">Clear</button>
    </form>

    <h2>Cart Items:</h2>
    <?php
    $total = 0;
    foreach ($cart_contents as $item_id => $item_data):
        $product_name = $item_data['name'];
        $product_price = $item_data['price'];
        $quantity = $item_data['quantity'];
        $item_total = $product_price * $quantity;

        $total += $item_total;

        echo "<h3>" . $product_name . "</h3>";
        echo "<p>Quantity: " . $quantity . "</p>";
        echo "<p>Price per item: $" . $product_price . "</p>";
        echo "<p>Item Total: $" . $item_total . "</p>";
        echo "<input type='number' name='quantity[{$item_id}]' value='{$quantity}' min='1' />"; // Use this for updating quantity
        echo "<br>";
    endforeach;
    ?>
    <br>
    <h2>Total: $<?php echo $total; ?></h2>
    <form method="post">
        <input type="hidden" name="product_id" value="<?php echo $cart_contents ? array_key_first($cart_contents); ?>" />
        <input type="submit" name="add_to_cart" value="Update Cart" />
    </form>
<?php else: ?>
    <p>Your cart is empty.</p>
<?php endif; ?>

</body>
</html>


<?php
session_start();

// Define cart items as an array
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        // Item already in cart, increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it with quantity 1
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the total cart value
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to display the cart contents
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $item['name'] . "<br>";
        echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
        echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        echo "<form method='post'>";
        echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
        echo "<input type='number' id='quantity_" . $product_id . "' value='" . $item['quantity'] . "' min='1' max='10'>"; //Example max quantity limit
        echo "<input type='submit' value='Update'>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total:</strong> $" . number_format(calculateTotal(), 2) . "</p>";
}

// --- Example Product Data (For Demonstration) ---
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];


// --- Handle Form Submission (Add to Cart) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    $quantity = (int)$_POST['quantity'];

    if (isset($products[$product_id])) {
        addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
    } else {
        echo "<p style='color:red;'>Invalid Product ID.</p>";
    }
}

// --- Display the Cart ---
displayCart();

?>


<?php
session_start();

// Database connection details (Replace with your actual details)
$dbHost = "localhost";
$dbUser = "your_db_user";
$dbPass = "your_db_password";
$dbName = "your_db_name";

// Function to connect to the database
function connectDB($host, $user, $pass, $name) {
    $conn = new mysqli($host, $user, $pass, $name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to create a new cart
function createCart($conn) {
  // Check if cart exists for the user. If not, create it.
  $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null; // Get user ID from session
  if ($user_id) {
    // Check if cart exists for this user.  If not, create it.
    $sql = "SELECT id FROM carts WHERE user_id = '$user_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        // Cart exists, do nothing (it's already there)
    } else {
        $sql = "INSERT INTO carts (user_id) VALUES ('$user_id')";
        if ($conn->query($sql) === TRUE) {
            $_SESSION['cart_id'] = $conn->insert_id; // Get the newly created cart ID
            echo "<p>New cart created for you!</p>";
        } else {
            echo "<p>Error creating cart: " . $conn->error . "</p>";
        }
    }
} else {
    // No user logged in, so create a default cart
    $sql = "INSERT INTO carts (user_id) VALUES (NULL)"; // No user ID, create default cart
    if ($conn->query($sql) === TRUE) {
        $_SESSION['cart_id'] = $conn->insert_id; // Get the newly created cart ID
        echo "<p>Default cart created for you!</p>";
    } else {
        echo "<p>Error creating default cart: " . $conn->error . "</p>";
    }
}
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;
    $cart_id = isset($_SESSION['cart_id']) ? $_SESSION['cart_id'] : null;

    if (!$user_id || !$cart_id) {
        echo "<p>Please log in or create a cart before adding items.</p>";
        return false;
    }

    $sql = "INSERT INTO cart_items (cart_id, product_id, quantity)
            VALUES ('$cart_id', '$product_id', '$quantity')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "<p>Error adding item to cart: " . $conn->error . "</p>";
        return false;
    }
}

// Function to get cart items
function getCartItems($conn) {
    $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;
    $cart_id = isset($_SESSION['cart_id']) ? $_SESSION['cart_id'] : null;
    $cart_items = [];

    if (!$user_id || !$cart_id) {
        return $cart_items; // Return empty array if no cart or user
    }

    $sql = "SELECT ci.product_id, p.name, p.price, ci.quantity
            FROM cart_items ci
            JOIN products p ON ci.product_id = p.id
            WHERE ci.cart_id = '$cart_id'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $cart_items[] = $row;
        }
    }
    return $cart_items;
}

// Function to remove an item from the cart
function removeFromCart($conn, $product_id, $cart_id) {
    $sql = "DELETE FROM cart_items WHERE product_id = '$product_id' AND cart_id = '$cart_id'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "<p>Error removing item from cart: " . $conn->error . "</p>";
        return false;
    }
}

// Function to update quantity of an item in the cart
function updateQuantity($conn, $product_id, $cart_id, $quantity) {
    $sql = "UPDATE cart_items
            SET quantity = '$quantity'
            WHERE product_id = '$product_id' AND cart_id = '$cart_id'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "<p>Error updating quantity in cart: " . $conn->error . "</p>";
        return false;
    }
}


// --- Example Usage (Simulated for demonstration) ---

// Connect to the database
$conn = connectDB($dbHost, $dbUser, $dbPass, $dbName);

// Initialize Cart (Run this once per session)
createCart($conn);

// Get cart items
$cart_items = getCartItems($conn);

// Display cart items
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// --- Example Cart Operations (Simulated - Replace with your actual form handling) ---

// Assuming a form to update quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($conn, $product_id, $_SESSION['cart_id'], $new_quantity);
    // Optionally redirect to the cart page after updating.
}

// Example: Remove Item
if (isset($_GET['remove_item'])) {
    $product_id = $_GET['remove_item'];
    removeFromCart($conn, $product_id, $_SESSION['cart_id']);
    // Redirect to the cart page to refresh.
}

?>


<?php
session_start();

// Database connection (Replace with your actual database credentials)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database_name';

// ------------------------------------------------------------------
// Helper Functions
// ------------------------------------------------------------------

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }
    return $conn;
}

// Function to sanitize input (basic example, enhance for production)
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}


// ------------------------------------------------------------------
// Cart Management Functions
// ------------------------------------------------------------------

// Function to initialize the cart
function initializeCart() {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
}

// Function to add an item to the cart
function addItemToCart($product_id, $name, $price, $quantity) {
    initializeCart();

    $item = [
        'product_id' => $product_id,
        'name' => $name,
        'price' => $price,
        'quantity' => $quantity
    ];

    $_SESSION['cart'][] = $item;
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    initializeCart();
    
    // Find the index of the item to update
    $index = -1;
    for ($i = 0; $i < count($_SESSION['cart']); $i++) {
        if ($_SESSION['cart'][$i]['product_id'] == $product_id) {
            $index = $i;
            break;
        }
    }

    if ($index !== -1) {
        $_SESSION['cart'][$index]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    initializeCart();
    
    $key = array_search($product_id, $_SESSION['cart']);
    if ($key !== false) {
        unset($_SESSION['cart'][$key]);
        // Optionally, re-index the array to prevent gaps
        $_SESSION['cart'] = array_values($_SESSION['cart']);
    }
}

// Function to get the cart total
function getCartTotal() {
    initializeCart();
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to get the cart items
function getCartItems() {
    initializeCart();
    return $_SESSION['cart'];
}

// ------------------------------------------------------------------
// Cart Handling based on user request
// ------------------------------------------------------------------

// Example: Handle adding to cart (replace with your actual form handling)
if (isset($_POST['add_to_cart'])) {
    $product_id = sanitizeInput($_POST['product_id']);
    $name = sanitizeInput($_POST['name']);
    $price = sanitizeInput($_POST['price']);
    $quantity = sanitizeInput($_POST['quantity']);

    addItemToCart($product_id, $name, $price, $quantity);
}

// Example: Handle updating quantity
if (isset($_POST['update_quantity'])) {
    $product_id = sanitizeInput($_POST['product_id']);
    $quantity = sanitizeInput($_POST['quantity']);

    updateQuantity($product_id, $quantity);
}

// Example: Handle removing an item
if (isset($_POST['remove_item'])) {
    $product_id = sanitizeInput($_POST['product_id']);
    removeItemFromCart($product_id);
}

// ------------------------------------------------------------------
// Display Cart Function
// ------------------------------------------------------------------

function displayCart() {
    echo '<h2>Your Shopping Cart</h2>';

    if (empty($_SESSION['cart'])) {
        echo '<p>Your cart is empty.</p>';
        return;
    }

    echo '<table border="1">';
    echo '<thead><tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr></thead>';
    echo '<tbody>';

    $cartItems = getCartItems();

    foreach ($cartItems as $item) {
        $total = $item['price'] * $item['quantity'];
        echo '<tr>';
        echo '<td>' . $item['name'] . '</td>';
        echo '<td>' . $item['price'] . '</td>';
        echo '<td>' . $item['quantity'] . '</td>';
        echo '<td>' . $total . '</td>';
        echo '<td><a href="?action=remove&product_id=' . $item['product_id'] . '">Remove</a></td>';
        echo '</tr>';
    }

    echo '</tbody>';
    echo '</table>';
    echo '<br>';
    echo '<strong>Total: ' . getCartTotal() . '</strong>';
}

// ------------------------------------------------------------------
// Output
// ------------------------------------------------------------------

?>
<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php displayCart(); ?>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'shop_db';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to check if a product is in the cart
function isInCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        return true;
    }
    return false;
}

// Function to update the cart
function updateCart($product_id, $quantity) {
    if (isInCart($product_id)) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to get the cart items
function getCartItems() {
    $cart_items = array();
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product_info = mysqli_fetch_assoc(mysqli_query(connectToDatabase(), "SELECT * FROM products WHERE id = '$product_id'"));
        $cart_items[] = array(
            'id' => $product_info['id'],
            'name' => $product_info['name'],
            'price' => $product_info['price'],
            'quantity' => $quantity
        );
    }
    return $cart_items;
}

// Function to calculate the total price
function calculateTotalPrice() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product_info = mysqli_fetch_assoc(mysqli_query(connectToDatabase(), "SELECT * FROM products WHERE id = '$product_id'"));
        $total += $product_info['price'] * $quantity;
    }
    return $total;
}


// --- Handle Add to Cart Request ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    updateCart($product_id, $quantity);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}

// --- Handle Remove from Cart Request ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    unset($_SESSION['cart'][$product_id]);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}


// --- Display Cart Items ---
$cart_items = getCartItems();
$total_price = calculateTotalPrice();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else { ?>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_items as $item): ?>
                <tr>
                    <td><?php echo $item['name']; ?></td>
                    <td>$<?php echo number_format($item['price'], 2); ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td>
                        <form action="cart.php" method="post">
                            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                            <button type="submit" name="remove_from_cart">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <p><strong>Total Price:</strong> $<?php echo number_format($total_price, 2); ?></p>
<?php } ?>

<br>
<a href="checkout.php">Checkout</a>

</body>
</html>


<?php
session_start();

// Database Connection (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_user";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    // Check if the product exists
    $product_query = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($product_query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $product_name = $row['name'];
        $product_price = $row['price'];

        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$product_id] = [
                'quantity' => $quantity,
                'product_id' => $product_id,
                'product_name' => $product_name,
                'product_price' => $product_price
            ];
        }
    } else {
        // Product not found - you might want to log this
        echo "Product with ID " . $product_id . " not found.";
    }

    $stmt->close();
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
    $total = 0;
    $cart = getCartContents();
    foreach ($cart as $item) {
        $total += $item['product_price'] * $item['quantity'];
    }
    return $total;
}

// ---------------------  Handle Cart Actions  ---------------------

// Check if the action is "add"
if (isset($_POST['action']) && $_POST['action'] == 'add') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
}

// Check if the action is "remove"
if (isset($_POST['action']) && $_POST['action'] == 'remove') {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
}

// Check if the action is "update"
if (isset($_POST['action']) && $_POST['action'] == 'update') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateQuantity($product_id, $quantity);
}


// --------------------- Display the Cart  ---------------------

// Get the cart contents
$cart = getCartContents();

// Calculate the total
$total = calculateTotal();


?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            margin-bottom: 10px;
            padding: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (empty($cart)): ?>
        <p>Your cart is empty.</p>
    <?php else: ?>

        <table id="cart-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                foreach ($cart as $item): ?>
                    <tr class="cart-item">
                        <td><?php echo $item['product_name']; ?></td>
                        <td><?php echo $item['product_price']; ?></td>
                        <td><?php echo $item['quantity']; ?></td>
                        <td><?php echo number_format($item['product_price'] * $item['quantity'], 2); ?></td>
                        <td>
                            <form method="post">
                                <input type="hidden" name="action" value="update">
                                <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                                <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1">
                                <button type="submit">Update</button>
                            </form>
                            <form method="post">
                                <input type="hidden" name="action" value="remove">
                                <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                                <button type="submit">Remove</button>
                            </form>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>

        <p><strong>Total:</strong> <?php echo number_format($total, 2); ?></p>
    <?php endif; ?>

    <hr>
    <p>
        <a href="index.php">Continue Shopping</a>
    </p>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$dbHost = 'localhost';
$dbUser = 'your_db_user';
$dbPass = 'your_db_password';
$dbName = 'your_db_name';

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $userId, $productId, $quantity) {
    // Check if the user has a cart yet
    if (!isset($_SESSION['cart'][$productId])) {
        // If not, create a new entry in the cart
        $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ($userId, $productId, $quantity)";
        if ($conn->query($query) === TRUE) {
            $_SESSION['cart'][$productId] = $quantity;
        } else {
            echo "Error adding to cart: " . $conn->error;
        }
    } else {
        // If the item already exists, update the quantity
        $_SESSION['cart'][$productId] += $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($conn, $userId, $productId) {
    // Delete the item from the cart
    $query = "DELETE FROM cart WHERE user_id = $userId AND product_id = $productId";
    if ($conn->query($query) === TRUE) {
        unset($_SESSION['cart'][$productId]);
    } else {
        echo "Error removing from cart: " . $conn->error;
    }
}

// Function to get the cart contents
function getCartContents($conn, $userId) {
    $cartContents = [];

    // Retrieve all cart items for the user
    $query = "SELECT product_id, quantity FROM cart WHERE user_id = $userId";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $product_id = $row['product_id'];
            $quantity = $row['quantity'];

            // Get product details (you'll need a products table)
            $product_query = "SELECT product_id, product_name, price FROM products WHERE product_id = $product_id";
            $product_result = $conn->query($product_result);

            if ($product_result->num_rows > 0) {
                $product = $product_result->fetch_assoc();
                $cartContents[] = [
                    'product_id' => $product['product_id'],
                    'product_name' => $product['product_name'],
                    'price' => $product['price'],
                    'quantity' => $quantity,
                    'total' => $product['price'] * $quantity
                ];
            } else {
                // Handle the case where the product is not found
                echo "Product ID $product_id not found.";
            }
        }
    }

    return $cartContents;
}

// ------  Shopping Cart Logic  ------

// 1. Add to Cart (Handle form submission)
if (isset($_POST['add_to_cart'])) {
    $userId = $_SESSION['user_id']; // Assuming user is logged in
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    addToCart($conn, $userId, $productId, $quantity);
    header("Location: cart.php"); // Redirect to cart page
    exit();
}

// 2. Remove from Cart
if (isset($_GET['remove_from_cart'])) {
    $userId = $_SESSION['user_id'];
    $productId = $_GET['remove_from_cart'];
    removeFromCart($conn, $userId, $productId);
    header("Location: cart.php");
    exit();
}

// 3. Get Cart Contents (Load cart data)
$cartContents = getCartContents($conn, $_SESSION['user_id']);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (empty($cartContents)) {
        echo "<p>Your cart is empty.</p>";
    } else { ?>

        <?php foreach ($cartContents as $item): ?>
            <div class="cart-item">
                <strong>Product:</strong> <?php echo $item['product_name']; ?> (ID: <?php echo $item['product_id']; ?>)
                <br>
                <strong>Price:</strong> $<?php echo number_format($item['price'], 2); ?>
                <br>
                <strong>Quantity:</strong> <?php echo $item['quantity']; ?>
                <br>
                <strong>Total:</strong> $<?php echo number_format($item['total'], 2); ?>
                <br>
                <form action="cart.php" method="post">
                    <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                    <input type="hidden" name="quantity" value="<?php echo $item['quantity']; ?>">
                    <button type="submit">Remove from Cart</button>
                </form>
            </div>
        <?php } ?>

    <a href="checkout.php">Checkout</a> <!-- Link to checkout page -->

</body>
</html>


<?php
session_start();

// Configuration
$items = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

$cart = []; // Initialize an empty cart
$total = 0;
$cart_id = "cart_" . md5(time()); // Unique cart ID


// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $itemId The ID of the item to add.
 * @param int $quantity The quantity of the item to add.
 */
function addToCart(int $itemId, int $quantity = 1)
{
    global $cart, $itemId, $cart_id;

    if (isset($items[$itemId])) {
        $item = $items[$itemId];
        $item_id = $itemId;

        // Check if the item is already in the cart
        if (isset($cart[$item_id][$item_id])) {
            $cart[$item_id][$item_id]['quantity'] += $quantity;
            $cart[$item_id][$item_id]['quantity'] = $cart[$item_id][$item_id]['quantity'];
        } else {
            $cart[$item_id][$item_id] = ['name' => $item['name'], 'price' => $item['price'], 'quantity' => $quantity];
        }

        // Update the total
        $total += $item['price'] * $quantity;
    } else {
        // Item not found
        echo "Item ID " . $itemId . " not found.";
    }
}


/**
 * Removes an item from the cart.
 *
 * @param int $itemId The ID of the item to remove.
 */
function removeFromCart(int $itemId)
{
    global $cart, $cart_id;

    if (isset($cart[$cart_id][$itemId])) {
        unset($cart[$cart_id][$itemId]);

        // Update the total
        $total -= $items[$itemId]['price'] * $items[$itemId]['price'];

        // If the cart is now empty, reset the total to 0
        if (empty($cart[$cart_id])) {
            $total = 0;
        }

    } else {
        // Item not found in the cart
        echo "Item ID " . $itemId . " not found in the cart.";
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $itemId The ID of the item to update.
 * @param int $quantity The new quantity of the item.
 */
function updateQuantity(int $itemId, int $quantity)
{
    global $cart, $cart_id, $items;

    if (isset($items[$itemId])) {
        if (isset($cart[$cart_id][$itemId])) {
            $cart[$cart_id][$itemId]['quantity'] = $quantity;
            $total -= $items[$itemId]['price'] * ($cart[$cart_id][$item_id]['quantity'] - $quantity);
            $total += $items[$itemId]['price'] * $quantity;

        } else {
            // Item not found in the cart
            echo "Item ID " . $itemId . " not found in the cart.";
        }
    } else {
        // Item not found
        echo "Item ID " . $itemId . " not found.";
    }
}



/**
 * Gets the cart contents.
 *
 * @return array  An array representing the cart contents.
 */
function getCart()
{
    return $cart;
}


/**
 * Gets the total cart value.
 *
 * @return float The total value of the cart.
 */
function getTotal()
{
    return $total;
}



// --- Handling Cart Actions (Example) ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $itemId = (int)$_POST['item_id'];
    $quantity = (int)$_POST['quantity'] ?? 1; // Default to 1 if quantity not provided
    addToCart($itemId, $quantity);
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $itemId = (int)$_POST['item_id'];
    removeFromCart($itemId);
}

if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $itemId = (int)$_POST['item_id'];
    $quantity = (int)$_POST['quantity'];
    updateQuantity($itemId, $quantity);
}

// --- Displaying the Cart ---
$cart_contents = getCart();


?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart-item { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
        .cart-total { font-weight: bold; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (!empty($cart_contents)) { ?>
    <table class="cart-items">
        <?php foreach ($cart_contents as $cart_id => $items_in_cart): ?>
            <?php foreach ($items_in_cart as $item_id => $item_data): ?>
                <tr class="cart-item">
                    <td><?php echo $item_data['name']; ?></td>
                    <td><?php echo $item_data['quantity']; ?></td>
                    <td><?php echo $item_data['price']; ?></td>
                    <td>
                        <form method="post">
                            <input type="hidden" name="action" value="remove_from_cart">
                            <input type="hidden" name="item_id" value="<?php echo $item_id; ?>">
                            <button type="submit">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        <?php endforeach; ?>
    </table>

    <div class="cart-total">Total: $<?php echo number_format($total, 2); ?></div>
<?php } else {
    echo "<p>Your cart is empty.</p>";
} ?>


<hr>

<h2>Add Items to Cart</h2>
<?php
foreach ($items as $item_id => $item) {
    echo "<p><a href='?action=add_to_cart&item_id=" . $item_id . "&quantity=1'>Add " . $item['name'] . " to Cart</a></p>";
}
?>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to connect to the database
function connectDB() {
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// ---------------------  Cart Functionality ---------------------

// Add item to cart
function addToCart($product_id, $quantity) {
  global $conn;

  // Check if the product exists
  $stmt = $conn->prepare("SELECT id, product_name, price FROM products WHERE id = ?");
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    $product_name = $row['product_name'];
    $product_id = $row['id'];
    $price = $row['price'];

    // Check if the cart already exists for this user
    $cart_id = session_id();

    // Prepare the cart query
    $query = "SELECT id FROM cart WHERE cart_id = ? AND product_id = ?";

    // Check if the product is already in the cart
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ss", $cart_id, $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
      // Update quantity if product is already in cart
      $query_update = "UPDATE cart SET quantity = quantity + ? WHERE cart_id = ? AND product_id = ?";
      $stmt_update = $conn->prepare($query_update);
      $stmt_update->bind_param("sss", $quantity, $cart_id, $product_id);
      $stmt_update->execute();
    } else {
      // Add product to cart
      $query_insert = "INSERT INTO cart (cart_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmt_insert = $conn->prepare($query_insert);
      $stmt_insert->bind_param("sss", $cart_id, $product_id, $quantity);
      $stmt_insert->execute();
    }

  } else {
    echo "Product not found.";
  }
}

// Remove item from cart
function removeFromCart($product_id) {
  global $conn;

  // Prepare the query
  $query = "DELETE FROM cart WHERE product_id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
}

// Get cart contents
function getCartContents() {
  global $conn;

  $query = "SELECT p.product_name, c.quantity, c.price FROM cart c JOIN products p ON c.product_id = p.id WHERE c.cart_id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", session_id());
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $cart_items = [];
    while ($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
    return $cart_items;
  } else {
    return [];
  }
}

// Update cart quantity
function updateCartQuantity($product_id, $quantity) {
    global $conn;

    // Prepare the query
    $query = "SELECT id FROM cart WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("is", $product_id, session_id());
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Update the quantity
        $query_update = "UPDATE cart SET quantity = ? WHERE product_id = ? AND cart_id = ?";
        $stmt_update = $conn->prepare($query_update);
        $stmt_update->bind_param("iss", $quantity, $product_id, session_id());
        $stmt_update->execute();
    } else {
        echo "Product not found in cart.";
    }
}


// ---------------------  Shopping Cart Functions ---------------------

// Initialize cart (add a default item if it doesn't exist)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Handle adding to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  addToCart($product_id, $quantity);
}

// Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// Handle updating cart quantity
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $quantity);
}

// Get cart contents for display
$cart_items = getCartContents();


// ---------------------  Checkout (Simple Example) ---------------------

// Total price calculation
$total_price = 0;
if (!empty($cart_items)) {
    foreach ($cart_items as $item) {
        $total_price += $item['quantity'] * $item['price'];
    }
}

// ---------------------  Display Cart Contents ---------------------

echo "<h2>Shopping Cart</h2>";

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Price: $" . $total_price . "</p>";
}

?>


<?php
session_start();

// Database Connection (Replace with your actual database details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add item to cart
function addItemToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $name = $row['name'];
        $price = $row['price'];

        // Check if the product is already in the cart
        $cart_key = "cart_" . session_id(); // Unique cart identifier

        if (isset($_SESSION[$cart_key]['items'][$product_id])) {
            // Product already in cart, update the quantity
            $_SESSION[$cart_key]['items'][$product_id]['quantity'] += $quantity;
            $_SESSION[$cart_key]['total_price'] += $price * $quantity;
        } else {
            // Product not in cart, add it
            $_SESSION[$cart_key]['items'][$product_id] = array(
                'name' => $name,
                'price' => $price,
                'quantity' => $quantity
            );
            $_SESSION[$cart_key]['total_price'] = $price * $quantity;
        }
    } else {
        // Product not found, you might want to handle this error differently
        echo "Product with ID " . $product_id . " not found.";
    }

    $stmt->close();
    $conn->close();
}

// Function to get cart contents
function getCartContents() {
    $cart_key = "cart_" . session_id();

    if (isset($_SESSION[$cart_key])) {
        return $_SESSION[$cart_key];
    } else {
        return array(); // Return an empty array if cart is empty
    }
}

// Function to remove item from cart
function removeItemFromCart($product_id) {
    $cart_key = "cart_" . session_id();

    if (isset($_SESSION[$cart_key]['items'][$product_id])) {
        unset($_SESSION[$cart_key]['items'][$product_id]);
        $_SESSION[$cart_key]['total_price'] -= $_SESSION[$cart_key]['items'][$product_id]['price'] * $_SESSION[$cart_key]['items'][$product_id]['quantity'];
    }
}

// Function to update quantity of item in cart
function updateQuantity($product_id, $quantity) {
  $cart_key = "cart_" . session_id();

  if (isset($_SESSION[$cart_key]['items'][$product_id])) {
    if ($quantity > 0) {
      $_SESSION[$cart_key]['items'][$product_id]['quantity'] = $quantity;
      $_SESSION[$cart_key]['total_price'] = $_SESSION[$cart_key]['items'][$product_id]['price'] * $quantity;
    } else {
      removeItemFromCart($product_id); // If quantity is 0, remove the item
    }
  }
}

// --- Example Usage (handle form submissions) ---

// Add item to cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["add_to_cart"])) {
    $product_id = $_POST["product_id"];
    $quantity = $_POST["quantity"];
    addItemToCart($product_id, $quantity);
}

// Remove item from cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["remove_from_cart"])) {
    $product_id = $_POST["product_id"];
    removeItemFromCart($product_id);
}

// Update quantity
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["update_quantity"])) {
    $product_id = $_POST["product_id"];
    $new_quantity = $_POST["quantity"];
    updateQuantity($product_id, $new_quantity);
}

// --- Display Cart Contents (Example) ---

$cart = getCartContents();

if (!empty($cart)) {
    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart['items'] as $id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " ";
        echo "Quantity: " . $item['quantity'];
        echo "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . number_format($cart['total_price'], 2) . "</p>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start();

// Initialize the shopping cart (array)
$cart = [];

// Helper functions:
// - add_to_cart($item_id, $name, $price, $quantity)
// - display_cart()
// - update_cart($item_id, $quantity)
// - remove_from_cart($item_id)


// ------------------ Helper Functions ------------------

/**
 * Adds an item to the shopping cart.
 *
 * @param int $item_id The ID of the item to add.
 * @param string $name The name of the item.
 * @param float $price The price of the item.
 * @param int $quantity The quantity of the item to add.
 */
function add_to_cart($item_id, $name, $price, $quantity) {
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    $cart[$item_id] = [
      'name' => $name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

/**
 * Displays the contents of the shopping cart.
 */
function display_cart() {
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $item_id => $item_details) {
    echo "<li>";
    echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " x " . $item_details['quantity'] . " = $" . ($item_details['price'] * $item_details['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate total
  $total = 0;
  foreach ($cart as $item_id => $item_details) {
    $total += ($item_details['price'] * $item_details['quantity']);
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

/**
 * Updates the quantity of an item in the shopping cart.
 *
 * @param int $item_id The ID of the item to update.
 * @param int $quantity The new quantity of the item.
 */
function update_cart($item_id, $quantity) {
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the shopping cart.
 *
 * @param int $item_id The ID of the item to remove.
 */
function remove_from_cart($item_id) {
  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}


// ------------------ Main Script Logic ------------------

// Handle adding items to the cart
if (isset($_POST['add_to_cart'])) {
  $item_id = (int)$_POST['item_id'];
  $name = $_POST['name'];
  $price = (float)$_POST['price'];
  $quantity = (int)$_POST['quantity'];

  add_to_cart($item_id, $name, $price, $quantity);
}

// Handle updating item quantities
if (isset($_POST['update_cart'])) {
  $item_id = (int)$_POST['item_id'];
  $quantity = (int)$_POST['quantity'];
  update_cart($item_id, $quantity);
}

// Handle removing items from the cart
if (isset($_POST['remove_from_cart'])) {
  $item_id = (int)$_POST['item_id'];
  remove_from_cart($item_id);
}

// Display the shopping cart
display_cart();

// Example Product Data (You would typically get this from a database)
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200.00],
  2 => ['name' => 'Mouse', 'price' => 25.00],
  3 => ['name' => 'Keyboard', 'price' => 75.00],
];

// Display product listing (for adding to cart)
echo "<h2>Available Products</h2>";
echo "<ul>";
foreach ($products as $id => $product) {
  echo "<li>";
  echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . "<br>";
  echo "<form method='post'>";
  echo "<input type='hidden' name='item_id' value='" . $id . "'>";
  echo "<label for='quantity'>" . $product['name'] . " Quantity:</label>";
  echo "<input type='number' id='quantity' name='quantity' value='1' min='1'>";
  echo "<input type='submit' value='Add to Cart'>";
  echo "</form>";
  echo "</li>";
}
echo "</ul>";

?>


<?php
session_start();

// Configuration
$product_data = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'stock' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'stock' => 20],
];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart total
function getCartTotal()
{
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            if (isset($product_data[$product_id])) {
                $total_price = $product_data[$product_id]['price'] * $quantity;
                $total += $total_price;
            }
        }
    }
    return $total;
}

// Handle adding to cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Cast to integer
    $quantity = (int)$_POST['quantity']; // Cast to integer

    if (isset($product_data[$product_id]) && $quantity > 0) {
        addToCart($product_id, $quantity);
    }
}

// Handle removing from cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    removeFromCart($product_id);
}

// Display the cart
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
            border: 1px solid #ddd;
            padding: 10px;
        }
        .cart-item.removed {
            border: 1px solid red;
            padding: 10px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<div class='cart-items'>";
    $cart_total = getCartTotal();
    echo "<strong>Total: $" . number_format($cart_total, 2) . "</strong>";
    echo "</div>";

    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        if (isset($product_data[$product_id])) {
            echo "<div class='cart-item'>";
            echo "<h3>" . $product_data[$product_id]['name'] . "</h3>";
            echo "<p>Quantity: " . $quantity . "</p>";
            echo "<p>Price: $" . number_format($product_data[$product_id]['price'], 2) . "</p>";
            echo "<form method='post'>";
            echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
            echo "<input type='number' id='quantity_" . $product_id . "' value='" . $quantity . "' min='1' max='" . $product_data[$product_id]['stock'] . "' name='quantity_" . $product_id . "'>";
            echo "<button type='submit' name='update_cart'>" . (empty($product_data[$product_id]['stock']) ? "Remove" : "Update") . "</button>";
            echo "</form>";
            echo "<br>";
        }
    }
    echo "</div>";
}
?>

<br>
<a href="index.php">Back to Products</a>

</body>
</html>


<?php
session_start();

// Configuration (same as cart.php)
$product_data = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10],
    2 => ['name' => 'Jeans', 'price' => 50.00, 'stock' => 5],
    3 => ['name' => 'Hat', 'price' => 15.00, 'stock' => 20],
];
?>

<!DOCTYPE html>
<html>
<head>
    <title>Products</title>
</head>
<body>

<h1>Products</h1>

<?php
foreach ($product_data as $product_id => $product) {
    echo "<h2>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</h2>";
    echo "<p>Stock: " . $product['stock'] . "</p>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='number' name='quantity' value='1' min='1' max='" . $product_data[$product_id]['stock'] . "' >";
    echo "<button type='submit' name='add_to_cart'>Add to Cart</button>";
    echo "</form>";
    echo "<br>";
}
?>

<br>
<a href="cart.php">View Cart</a>

</body>
</html>


<?php
session_start();

// Cart data (simplified - for demonstration)
$cart = [];

// Helper functions
function add_to_cart($item_id, $item_name, $price, $quantity = 1) {
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = ['name' => $item_name, 'price' => $price, 'quantity' => $quantity];
  } else {
    $cart[$item_id]['quantity'] += $quantity;
  }
}

function get_cart_total($cart) {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

function display_cart($cart) {
  echo "<h2>Shopping Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>";
    echo "Item: " . $item['name'] . "<br>";
    echo "Price: $" . number_format($item['price'], 2) . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Total for item: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='item_id' value='" . $item_id . "'>";
    echo "<input type='number' name='quantity' value='" . $item['quantity'] . "' min='1'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . number_format(get_cart_total($cart), 2) . "</strong></p>";
}

// ---  Example items (replace with database access in a real application) ---
$items = [
  ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];

// ---  Handling Updates (POST request) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $item_id = $_POST['item_id'];
  $quantity = $_POST['quantity'];

  if (isset($items[$item_id])) {
    $items[$item_id]['quantity'] = $quantity; // Update quantity in the item array
    // Optional:  You could also update the cart array if you are storing it in a session.
  } else {
    echo "<p>Item not found.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Display the Cart -->
  <?php display_cart($cart); ?>

  <!-- Add to Cart Buttons (for demonstration -  you'd typically use a form) -->
  <?php
  echo "<h2>Add to Cart</h2>";
  foreach ($items as $item) {
    echo "<p><a href='?add=" . $item['id'] . "&name=" . urlencode($item['name']) . "&price=" . $item['price'] . "'>Add " . $item['name'] . " to Cart</a></p>";
  }
  ?>

</body>
</html>


<?php
session_start();

// Cart data (can be stored in a database for a real-time application)
$cart = [];

// Helper functions
function addItemToCart($productId, $productName, $price, $quantity = 1) {
    if (!isset($cart[$productId])) {
        $cart[$productId] = [
            'name' => $productName,
            'price' => $price,
            'quantity' => $quantity
        ];
    } else {
        $cart[$productId]['quantity'] += $quantity;
    }
}

function removeItemFromCart($productId) {
    if (isset($cart[$productId])) {
        unset($cart[$productId]);
    }
}

function updateQuantity($productId, $quantity) {
    if (isset($cart[$productId])) {
        $cart[$productId]['quantity'] = $quantity;
    }
}

function getCartTotal() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// --- Cart Handling Functions (Called by the frontend) ---

// Add to cart (example usage:  'add_to_cart' form submission)
if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $productName = $_POST['product_name'];
    $price = $_POST['product_price'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1

    addItemToCart($productId, $productName, $price, $quantity);
    // Redirect to cart page or display success message
    echo '<script>alert("Product added to cart!");</script>';
}



// Remove from cart (example: 'remove_from_cart' form submission)
if (isset($_POST['remove_from_cart'])) {
    $productId = $_POST['product_id'];
    removeItemFromCart($productId);
    echo '<script>alert("Product removed from cart!");</script>';
}

// Update quantity (example: 'update_quantity' form submission)
if (isset($_POST['update_quantity'])) {
    $productId = $_POST['product_id'];
    $newQuantity = $_POST['quantity'];
    updateQuantity($productId, $newQuantity);
    echo '<script>alert("Quantity updated!");</script>';
}



// Display Cart (example:  'view_cart' form submission)
if (isset($_GET['action']) && $_GET['action'] === 'view_cart') {
    echo '<h2>Your Shopping Cart</h2>';

    if (empty($cart)) {
        echo '<p>Your cart is empty.</p>';
    } else {
        echo '<ul>';
        foreach ($cart as $item) {
            echo '<li>' . $item['name'] . ' - $' . number_format($item['price'], 2) . ' x ' . $item['quantity'] . ' = $' . number_format($item['price'] * $item['quantity'], 2) . '</li>';
        }
        echo '</ul>';
        echo '<p><strong>Total: $' . number_format(getCartTotal(), 2) . '</strong></p>';
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Products</h1>

<!-- Example products (replace with your actual product list) -->
<ul>
    <li>
        <form method="post" action="">
            <input type="hidden" name="product_id" value="1">
            <label for="product_name">Product 1</label>
            <input type="text" name="product_name" value="Product 1" readonly>
            <label for="product_price">Price: $10.00</label>
            <input type="number" name="quantity" value="1" min="1" max="10">
            <input type="submit" name="add_to_cart" value="Add to Cart">
        </form>
    </li>
    <li>
        <form method="post" action="">
            <input type="hidden" name="product_id" value="2">
            <label for="product_name">Product 2</label>
            <input type="text" name="product_name" value="Product 2" readonly>
            <label for="product_price">Price: $20.00</label>
            <input type="number" name="quantity" value="1" min="1" max="10">
            <input type="submit" name="add_to_cart" value="Add to Cart">
        </form>
    </li>
</ul>

<br>

<a href="?action=view_cart">View Cart</a>
</body>
</html>


<?php
session_start();

// Database connection (Replace with your actual database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    if (isset($_SESSION['cart'])) {
        $cart = json_decode($_SESSION['cart'], true);
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] += $quantity;
        } else {
            $cart[$product_id] = ['quantity' => $quantity];
        }
    } else {
        $cart[$product_id] = ['quantity' => $quantity];
    }

    $_SESSION['cart'] = json_encode($cart);
}

// Function to remove an item from the cart
function removeFromCart($conn, $product_id) {
    if (isset($_SESSION['cart'])) {
        $cart = json_decode($_SESSION['cart'], true);
        if (isset($cart[$product_id])) {
            unset($cart[$product_id]);
        }
        $_SESSION['cart'] = json_encode($cart);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
    if (isset($_SESSION['cart'])) {
        $cart = json_decode($_SESSION['cart'], true);
        if (isset($cart[$product_id])) {
            $cart[$product_id]['quantity'] = $quantity;
        }
        $_SESSION['cart'] = json_encode($cart);
    }
}

// Function to display the cart contents
function displayCart($conn) {
    if (!isset($_SESSION['cart'])) {
        echo "<h2>Your cart is empty.</h2>";
        return;
    }

    $cart = json_decode($_SESSION['cart'], true);
    $total_price = 0;

    echo "<h2>Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Quantity</th><th>Price</th><th>Total</th><th>Action</th></tr>";

    foreach ($cart as $product_id => $item) {
        // Assuming you have a 'products' table with product_id and price
        $product_query = "SELECT product_name, price FROM products WHERE product_id = " . $product_id;
        $product_result = $conn->query($product_query);

        if ($product_result->num_rows > 0) {
            $product_name = $product_result->fetch_assoc()['product_name'];
            $price = $product_result->fetch_assoc()['price'];
            $item_total = $price * $item['quantity'];
            $total_price += $item_total;

            echo "<tr>";
            echo "<td>" . $product_name . "</td>";
            echo "<td>" . $item['quantity'] . "</td>";
            echo "<td>$" . number_format($price, 2) . "</td>";
            echo "<td>$" . number_format($item_total, 2) . "</td>";
            echo "<td><a href='update_cart.php?product_id=" . $product_id . "&quantity=" . $item['quantity'] . "'>Update</a> | <a href='remove_from_cart.php?product_id=" . $product_id . "'>Remove</a></td>";
            echo "</tr>";
        } else {
            echo "<tr><td>Error: Product not found</td><td></td><td></td><td></td><td></td></tr>";
        }
    }

    echo "</table>";
    echo "<p><strong>Total: $" . number_format($total_price, 2) . "</strong></p>";
}

// ------  Handling Cart Actions  ------

// Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($conn, $product_id, $quantity);
    header("Location: cart.php"); // Redirect to cart page
    exit();
}

// Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateQuantity($conn, $product_id, $quantity);
    header("Location: cart.php");
    exit();
}

// Remove from Cart
if (isset($_GET['product_id'])) {
    removeFromCart($conn, $_GET['product_id']);
    header("Location: cart.php");
    exit();
}


// ------  Display Cart  ------
displayCart($conn);

// ------  Close Connection  ------
$conn->close();
?>


<?php
session_start();

// Database Connection (Replace with your actual database credentials)
$dbHost = "localhost";
$dbName = "shopping_cart";
$dbUser = "root";
$dbPass = "";

// Create a database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
    }
}

// Function to get all items in the cart
function getCartItems($conn) {
    $cart_items = array();
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $product_id => $item) {
            // Fetch product details from the database
            $product_query = "SELECT id, name, price FROM products WHERE id = $product_id";
            $product_result = $conn->query($product_query);

            if ($product_result->num_rows > 0) {
                $product = $product_result->fetch_assoc();
                $cart_items[] = array(
                    'id' => $product['id'],
                    'name' => $product['name'],
                    'price' => $product['price'],
                    'quantity' => $item['quantity']
                );
            }
        }
    }
    return $cart_items;
}

// Function to remove an item from the cart
function removeFromCart($conn, $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// ---  Shopping Cart Operations  ---

// 1. Add to Cart (Handle POST request)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($conn, $product_id, $quantity);
}

// 2. Get Cart Items (Display the cart content)
$cart_items = getCartItems($conn);

// 3. Remove Item from Cart (Handle DELETE request)
if ($_SERVER["REQUEST_METHOD"] == "DELETE" && isset($_GET['remove'])) {
    $product_id = $_GET['remove'];
    removeFromCart($conn, $product_id);
}

// 4. Update Quantity (Handle PUT request)
if ($_SERVER["REQUEST_METHOD"] == "PUT" && isset($_GET['update'])) {
    $product_id = $_GET['update'];
    $quantity = $_GET['quantity'];
    updateQuantity($conn, $product_id, $quantity);
}


// --- Product Data (Simulated for demonstration) ---
// In a real application, this would come from your database.
$products = array(
    1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
    2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
    3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75),
);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>

    <table id="cart-table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php
            $total = 0;
            foreach ($cart_items as $item) {
                $product = $products[$item['id']];
                $item_total = $item['quantity'] * $product['price'];
                $total += $item_total;
                ?>
                <tr class="cart-item">
                    <td><?php echo $product['name']; ?></td>
                    <td><?php echo $product['price']; ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td><?php echo $item_total; ?></td>
                    <td>
                        <form action="cart.php" method="POST">
                            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                            <input type="hidden" name="quantity" value="<?php echo $item['quantity']; ?>">
                            <button type="submit">Remove</button>
                        </form>
                        <form action="cart.php" method="PUT">
                            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                            <input type="hidden" name="quantity" value="<?php echo $item['quantity']; ?>">
                            <button type="submit">Update Quantity</button>
                        </form>
                    </td>
                </tr>
            <?php
            }
            ?>
        </tbody>
    </table>

    <div class="cart-total">
        Total: <?php echo $total; ?>
    </div>
<?php
}
?>

<br>

<a href="checkout.php">Checkout</a>

</body>
</html>


<?php
session_start();

// Define cart data
$cart = [];

// --- Helper Functions ---

// Function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    $cart[$item_id] = [
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($item_id, $quantity) {
  global $cart;

  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $quantity;
  } else {
    // Item not found - handle appropriately (e.g., display error)
    echo "Error: Item with ID $item_id not found in cart.";
  }
}

// Function to remove an item from the cart
function removeFromCart($item_id) {
  global $cart;

  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  } else {
    // Item not found - handle appropriately (e.g., display error)
    echo "Error: Item with ID $item_id not found in cart.";
  }
}

// Function to calculate the total cart value
function calculateTotal() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Cart Actions (handled by form submissions) ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $item_id = $_POST['item_id'];
  $item_name = $_POST['item_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  addToCart($item_id, $item_name, $price, $quantity);
  // Optionally, redirect to the cart page
  header("Location: cart.php"); // Redirects to the cart.php page
  exit();
}

if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
  $item_id = $_POST['item_id'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($item_id, $new_quantity);
  header("Location: cart.php");
  exit();
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $item_id = $_POST['item_id'];
  removeFromCart($item_id);
  header("Location: cart.php");
  exit();
}

// --- Display Cart Content (cart.php) ---

// Example cart.php content
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
    .cart-total {
      font-weight: bold;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  $cart_total = calculateTotal();
  ?>

  <?php
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<h2>Cart Items:</h2>";
    foreach ($cart as $item) {
      echo "<div class='cart-item'>";
      echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " ";
      echo "Quantity: " . $item['quantity'];
      echo "<form method='post' action='cart.php'>";
      echo "<input type='hidden' name='item_id' value='" . $item_id . "'>";
      echo "<input type='submit' value='Update Quantity'>";
      echo "</form>";
      echo "<form method='post' action='cart.php'>";
      echo "<input type='hidden' name='item_id' value='" . $item_id . "'>";
      echo "<input type='submit' value='Remove from Cart'>";
      echo "</form>";
      echo "</div>";
    }
    echo "<div class='cart-total'>Total: $" . $cart_total . "</div>";
  }
  ?>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// -------------------- Product Handling --------------------

// Function to get product details by ID
function getProductDetails($productId) {
    $conn = connectToDatabase();
    $result = $conn->query("SELECT id, name, description, price, image FROM products WHERE id = '$productId'");

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        return $product;
    } else {
        return null;
    }
}


// -------------------- Cart Functions --------------------

// Add item to cart
function addToCart($productId, $quantity) {
    $conn = connectToDatabase();

    // Check if the product exists
    $product = getProductDetails($productId);
    if (!$product) {
        return false; // Product not found
    }

    $itemName = $product['name'];
    $itemPrice = $product['price'];

    if (isset($_SESSION['cart'][$productId])) {
        // Product already in cart, update quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Add new product to cart
        $_SESSION['cart'][$productId] = array(
            'quantity' => $quantity,
            'name' => $itemName,
            'price' => $itemPrice
        );
    }

    return true;
}

// Remove item from cart
function removeItemFromCart($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
    return true;
}

// Update quantity of item in cart
function updateQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
    return true;
}

// Get cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Calculate total cart value
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// -------------------- Displaying the Cart --------------------

// Display the cart contents
function displayCart() {
    $cartContents = getCartContents();

    echo "<div class='cart-container'>";
    echo "<h2>Shopping Cart</h2>";

    if (empty($cartContents)) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($cartContents as $productId => $item) {
            $product = getProductDetails($productId);
            echo "<li>";
            echo "<img src='" . $product['image'] . "' alt='" . $product['name'] . "' width='100'>";
            echo "<h3>" . $product['name'] . "</h3>";
            echo "<p>Price: $" . $product['price'] . "</p>";
            echo "<form method='post'>";
            echo "<label for='quantity'>" . $product['name'] . " Quantity:</label>";
            echo "<input type='number' id='quantity' name='quantity' value='" . $item['quantity'] . "' min='1'>";
            echo "<button type='submit' name='update_cart'>Update Cart</button>";
            echo "</form>";

            echo "<form method='post'>";
            echo "<button type='submit' name='remove_item_" . $productId . "'>Remove from Cart</button>";
            echo "</form>";
            echo "<br>";
        }
        echo "</ul>";
        echo "<p>Total: $" . calculateTotal() . "</p>";
    }

    echo "</div>";
}


// -------------------- Handling Cart Updates --------------------

// Update cart when the "Update Cart" button is clicked
if (isset($_POST['update_cart'])) {
    $productId = isset($_POST['update_cart']) ? $_POST['update_cart'] : ""; // get product id from form
    if (!empty($productId)) {
        addToCart($productId, 1); // Update quantity by 1 for simplicity
    }
}

// Remove item from cart when "Remove from Cart" button is clicked
if (isset($_POST['remove_item_' . $productId])) {
    removeItemFromCart($productId);
}



// -------------------- Displaying the Cart (Simplified for demonstration) --------------------
displayCart();


// -------------------- Example Product Data (for demonstration) --------------------
$products = array(
    1 => array('id' => 1, 'name' => 'T-Shirt', 'description' => 'A comfortable cotton t-shirt', 'price' => 20, 'image' => 'tshirt.jpg'),
    2 => array('id' => 2, 'name' => 'Jeans', 'description' => 'Classic blue jeans', 'price' => 50, 'image' => 'jeans.jpg'),
    3 => array('id' => 3, 'name' => 'Hat', 'description' => 'Warm wool hat', 'price' => 30, 'image' => 'hat.jpg')
);

?>


<?php
session_start();

// Database connection (replace with your actual database credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Cart variables (initialize if not already set)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 */
function addToCart($product_id, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Get the total quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product.
 * @return int The quantity of the product in the cart, or 0 if not found.
 */
function getCartItemQuantity($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        return $_SESSION['cart'][$product_id];
    } else {
        return 0;
    }
}

/**
 * Remove an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


/**
 * Calculate the total number of items in the cart.
 *
 * @return int The total number of items in the cart.
 */
function getCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $total = $total + getCartItemQuantity($product_id) * getProductPrice($product_id); // Assuming product price is available
    }
    return $total;
}

/**
 * Get the price of a product
 *
 * @param int $product_id The ID of the product
 * @return int The price of the product
 */
function getProductPrice($product_id) {
    //  Replace with your logic to retrieve product prices from the database.
    // This is just an example.  It's crucial to replace with your actual product data retrieval.
    //  You could use a database query here.
    if ($product_id == 1) {
        return 10;
    } elseif ($product_id == 2) {
        return 20;
    } else {
        return 0; // Default price or handle error appropriately
    }
}


// ---  Cart Actions based on HTTP Methods ---

// 1. GET - Display the cart contents
if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    // Output the cart contents
    echo "<h1>Shopping Cart</h1>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $product_name = getProductName($product_id); // Assumes a function to get product name
            $total_price = getCartItemQuantity($product_id) * getProductPrice($product_id); //Calculates total price
            echo "<li>Product: " . $product_name . ", Quantity: " . $quantity . ", Total: $" . $total_price . "</li>";
        }
        echo "</ul>";
        echo "<p><strong>Total: $" . getCartTotal() . "</strong></p>";
        echo "<a href='cart.php?action=empty'>Clear Cart</a>"; // Link to empty cart
    }
}

// 2. POST - Add an item to the cart
elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $product_id = intval($_POST['product_id']);
        $quantity = intval($_POST['quantity']);
        addToCart($product_id, $quantity);
        // Redirect back to the cart page
        header("Location: cart.php");
        exit();
    }
}


// 3.  POST - Remove item from cart
elseif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_product_id'])) {
    $product_id = intval($_POST['remove_product_id']);
    removeFromCart($product_id);
    header("Location: cart.php");
    exit();
}



?>


<?php
session_start();  // Start the session to store cart data

// Check if 'cart' session variable exists. If not, initialize it.
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// If the user adds an item to the cart:
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id']; // Ensure it's an integer
  $quantity = (int)$_POST['quantity'];

  // Find the product
  $product = null;
  foreach ($products as $p) {
    if ($p['id'] == $product_id) {
      $product = $p;
      break;
    }
  }

  if ($product) {
    // Add to cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      $_SESSION['cart'][$product_id] = [
        'id' => $product_id,
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity
      ];
    }
  }
}


//If the user removes an item from cart
if (isset($_POST['remove_item'])) {
    $item_id = (int)$_POST['item_id'];

    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}


// Display the cart
echo '<h2>Your Shopping Cart</h2>';
if (empty($_SESSION['cart'])) {
  echo '<p>Your cart is empty.</p>';
} else {
  echo '<ul>';
  foreach ($_SESSION['cart'] as $item_id => $cart_item) {
    echo '<li>' . $cart_item['name'] . ' - $' . $cart_item['price'] . ' x ' . $cart_item['quantity'] . ' = $' . ($cart_item['price'] * $cart_item['quantity']) . '</li>';
  }
  echo '</ul>';

  // Calculate total
  $total = 0;
  foreach ($_SESSION['cart'] as $item_id => $cart_item) {
    $total += ($cart_item['price'] * $cart_item['quantity']);
  }
  echo '<p>Total: $' . $total . '</p>';
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $quantity) {
  global $session;

  if (isset($session['cart'][$product_id])) {
    $session['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $session['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($session['cart'][$product_id])) {
        $session['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($session['cart'][$product_id])) {
    unset($session['cart'][$product_id]);
  }
}

// Function to calculate the total cart value
function calculate_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['quantity'] * $item['price']; // Assuming 'price' is in each item
  }
  return $total;
}


// Example usage (This part would be handled by the add_to_cart.php or view_cart.php)
if (isset($_GET['action']) && $_GET['action'] == 'update') {
  $product_id = $_GET['product_id'];
  $quantity = $_GET['quantity'];
  update_cart_quantity($product_id, $quantity);
}

if (isset($_GET['action']) && $_GET['action'] == 'remove') {
  $product_id = $_GET['product_id'];
  remove_from_cart($product_id);
}

?>


<?php
session_start();

// You would fetch product details (ID, name, price) from a database or other source.
// For this example, we'll assume the product_id is passed as a GET parameter.

$product_id = $_GET['product_id'];
$quantity = $_GET['quantity'];

// Validate the quantity (e.g., ensure it's a positive integer)
if (is_numeric($quantity) && $quantity > 0) {
    add_to_cart($product_id, $quantity);
} else {
    // Handle invalid quantity (e.g., display an error message)
    echo "Invalid quantity.  Please enter a positive integer.";
}
?>


<?php
session_start();

$total = calculate_total();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>
    <h1>Shopping Cart</h1>

    <?php if (empty($_SESSION['cart'])) { ?>
        <p>Your cart is empty.</p>
    <?php } else { ?>
        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                foreach ($_SESSION['cart'] as $product_id => $item) {
                    echo "<tr>";
                    echo "<td>" . $item['name'] . "</td>"; // Assume 'name' is stored with the item
                    echo "<td>" . $item['quantity'] . "</td>";
                    echo "<td>$" . $item['price'] . "</td>";
                    echo "<td>$" . ($item['quantity'] * $item['price']) . "</td>";
                    echo "<td><a href='add_to_cart.php?product_id=" . $product_id . "&quantity=1'>Add</a> | <a href='add_to_cart.php?product_id=" . $product_id . "&quantity=1'>Update</a> | <a href='add_to_cart.php?product_id=" . $product_id . "&quantity=1'>Remove</a></td>";
                    echo "</tr>";
                }
                ?>
            </tbody>
        </table>

        <p><strong>Total:</strong> $" . $total . "</p>
    <?php } ?>
</body>
</html>


    <?php
    $products = array(
        1 => array('id' => 1, 'name' => 'Shirt', 'price' => 20),
        2 => array('id' => 2, 'name' => 'Pants', 'price' => 30),
        3 => array('id' => 3, 'name' => 'Shoes', 'price' => 50)
    );
    ?>
    

3.  **Modify `view_cart.php` to Fetch Product Details:**  In `view_cart.php`, you need to fetch the product details based on the `$product_id` (which is passed from `add_to_cart.php` and stored in `$_SESSION['cart']`).  Example:

    
    <?php
    session_start();

    $total = calculate_total();

    foreach ($_SESSION['cart'] as $product_id => $item) {
        $product_name = 'Product ' . $product_id;  // Example:  Replace with your data source
        echo "<td>" . $product_name . "</td>";
        // ... rest of the table rows
    }
    ?>
    

4.  **Create a Link to `view_cart.php`:** Add a link on your main page (e.g., a button that says "View Cart") that points to `view_cart.php`.  You'll need to pass the product ID to `view_cart.php` so that the correct product information is displayed.

**Example Main Page (index.php):**



<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database_name';

// Define cart items
$cart = [];

// Function to add item to cart
function addToCart($product_id, $product_name, $price, $quantity) {
    global $cart;

    // Check if the product is already in the cart
    foreach ($cart as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            return; // Exit function if product already exists
        }
    }

    // If product not in cart, add it
    $cart[] = [
        'product_id' => $product_id,
        'product_name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
    ];
}

// Function to update cart item quantity
function updateCartQuantity($product_id, $new_quantity) {
  global $cart;

  foreach ($cart as &$item) {
    if ($item['product_id'] == $product_id) {
      $item['quantity'] = $new_quantity;
      return;
    }
  }
  // Product not found, you might want to handle this differently
  // e.g., display an error message
  echo "Product ID " . $product_id . " not found in cart.";
}


// Function to remove item from cart
function removeCartItem($product_id) {
    global $cart;

    // Iterate through the cart and remove the item
    $new_cart = [];
    foreach ($cart as $item) {
        if ($item['product_id'] != $product_id) {
            $new_cart[] = $item;
        }
    }
    $cart = $new_cart; // Update the cart array
}

// Function to get cart contents
function getCartContents() {
    return $cart;
}

// Function to calculate total cart value
function calculateTotal() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// ---  Example Usage (Simulated Product Data - Replace with your database query) ---
$products = [
    1 => ['product_id' => 1, 'product_name' => 'Laptop', 'price' => 1200],
    2 => ['product_id' => 2, 'product_name' => 'Mouse', 'price' => 25],
    3 => ['product_id' => 3, 'product_name' => 'Keyboard', 'price' => 75]
];

// ---  Handle Add to Cart Request (Simulated) ---
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    addToCart($product_id, $product_name, $price, $quantity);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}

//--- Handle Remove Cart Item Request (Simulated)
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];
    removeCartItem($product_id);
    header("Location: cart.php");
    exit();
}

//--- Handle Update Quantity Request (Simulated)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateCartQuantity($product_id, $new_quantity);
    header("Location: cart.php");
    exit();
}

// --- Display Cart Contents (cart.php) ---
// (This is a basic example, you'll need to implement more complex cart display logic)
if (count($cart) > 0) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";
    echo "<form method='post' action='cart.php'>
                <input type='hidden' name='product_id' value='" . implode( "','" , array_map(function($item) {return $item['product_id'];}, $cart)) . "'>
                <input type='submit' value='Remove Item'>
              </form>";

} else {
    echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Check if the cart is empty, initialize it if necessary
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Remove an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Get the cart contents.
 *
 * @return array The cart contents as an array.
 */
function getCart() {
  return $_SESSION['cart'];
}

/**
 * Calculate the cart total.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    // You'll need to fetch product prices from your database here
    // For demonstration purposes, let's assume product prices are hardcoded
    $product_price = getProductPrice($product_id); // Implement this function
    $total_for_product = $product_price * $quantity;
    $total = $total + $total_for_product;
  }
  return $total;
}

/**
 *  Placeholder function to get product price from DB.  Replace with your actual DB query.
 * @param int $product_id
 * @return float The product price
 */
function getProductPrice($product_id) {
    //  Replace this with your database query to fetch the price based on product_id
    // Example using a dummy hardcoded price:
    switch ($product_id) {
        case 1: return 10.00;
        case 2: return 25.50;
        case 3: return 5.00;
        default: return 0.00; // Or throw an error if the product doesn't exist
    }
}


// --- Handling Add to Cart Request ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
    // Optionally, redirect back to the product page or cart page.
    // header("Location: product.php");
}

// --- Handling Remove from Cart Request ---

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
    // Optionally, redirect back to the product page or cart page.
    // header("Location: product.php");
}


// --- Displaying the Cart ---

// Get the cart contents
$cart_contents = getCart();

// Calculate the cart total
$total = calculateTotal();

// Start the HTML output
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <table class="cart-items">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php
            foreach ($cart_contents as $product_id => $quantity) {
                $product_price = getProductPrice($product_id);
                $total_for_product = $product_price * $quantity;
                ?>
                <tr class="cart-item">
                    <td><?php echo $product_id; ?></td> <!--  Replace with product name based on $product_id -->
                    <td><?php echo $quantity; ?></td>
                    <td><?php echo $product_price; ?></td>
                    <td><?php echo $total_for_product; ?></td>
                    <td>
                        <form method="post" action="cart.php">
                            <input type="hidden" name="action" value="remove_from_cart">
                            <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                            <button type="submit">Remove</button>
                        </form>
                    </td>
                </tr>
            <?php } ?>
        </tbody>
    </table>
    <p><strong>Total:</strong> <?php echo $total; ?></p>
<?php endif; ?>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


// Cart functions

function initializeCart() {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
}

function addItemToCart($productId, $quantity) {
    initializeCart();

    // Check if the product is already in the cart
    $product_id = $productId;
    $item = array_search($product_id, $_SESSION['cart'], true);

    if ($item !== false) {
        // Product exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'id' => $product_id,
            'quantity' => $quantity,
            'price' => getProductPrice($product_id)  // Get the price
        );
    }
}


function getCartTotal($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

function removeItemFromCart($productId) {
    initializeCart();
    unset($_SESSION['cart'][$productId]);
}

function updateQuantity($productId, $quantity) {
    initializeCart();
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}


function getCartContents() {
    return $_SESSION['cart'];
}

function clearCart() {
    unset($_SESSION['cart']);
}

// Helper function to get product details from the database (replace with your database query)
function getProductPrice($productId) {
  // Example using a simple array for demonstration
  $products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
  ];

  if (isset($products[$productId])) {
    return $products[$productId]['price'];
  } else {
    return 0; // Or handle the error appropriately
  }
}

// Example usage (demonstration)
// You would typically get this information from a form submission.
// For example:
if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addItemToCart($productId, $quantity);
}


if (isset($_POST['remove_from_cart'])) {
    $productId = $_POST['product_id'];
    removeItemFromCart($productId);
}

if (isset($_POST['update_quantity'])) {
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateQuantity($productId, $quantity);
}


// Display the cart contents
$cartContents = getCartContents();

if (!empty($cartContents)) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product ID</th><th>Name</th><th>Quantity</th><th>Price</th><th>Total</th></tr>";

    $cartTotal = getCartTotal($cartContents);

    foreach ($cartContents as $item) {
        $product_id = $item['id'];
        $product_name = getProductName($product_id);
        $price = $item['price'];
        $total = $item['quantity'] * $price;
        echo "<tr>";
        echo "<td>$product_id</td>";
        echo "<td>$product_name</td>";
        echo "<td>$item['quantity']</td>";
        echo "<td>$price</td>";
        echo "<td>$total</td>";
        echo "</tr>";
    }

    echo "<tr><td colspan='4'><strong>Total: $" . $cartTotal . "</strong></td></tr>";

    echo "</table>";

    echo "<br>";
    echo "<a href='checkout.php'>Proceed to Checkout</a>"; // Link to your checkout page
} else {
    echo "<p>Your cart is empty.</p>";
}

// Example: Clear Cart Button
echo "<br>";
echo "<form method='post'>
        <button type='submit' name='clear_cart'>Clear Cart</button>
      </form>";

?>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database_name';

// Initialize the cart (if not already initialized)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param float $price The price of the product.
 * @param int $quantity The quantity to add.
 */
function addToCart($product_id, $name, $price, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total cart value.
 */
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


/**
 * Returns the cart contents.
 */
function getCartContents() {
    return $_SESSION['cart'];
}

// --- Handle Form Submission (Add to Cart) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $name = $_POST['name'];
        $price = $_POST['price'];
        $quantity = $_POST['quantity'];

        addToCart($product_id, $name, $price, $quantity);
        // Redirect to the cart page
        header("Location: cart.php");
        exit();
    }

    // Handle quantity updates (if any)
    if (isset($_POST['update_quantity'])) {
        $product_id = $_POST['product_id'];
        $new_quantity = $_POST['quantity'];
        updateQuantity($product_id, $new_quantity);
        header("Location: cart.php");
        exit();
    }

    // Handle remove from cart
    if (isset($_POST['remove_from_cart'])) {
        $product_id = $_POST['product_id'];
        removeFromCart($product_id);
        header("Location: cart.php");
        exit();
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        /* Basic styling - improve this! */
        body { font-family: sans-serif; }
        .cart-item { border: 1px solid #ccc; padding: 10px; margin: 10px; }
        .cart-total { text-align: right; font-weight: bold; }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php
// Display cart contents
$cart_contents = getCartContents();

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<h2>Cart Items</h2>";
    foreach ($cart_contents as $product_id => $item) {
        echo '<div class="cart-item">
                <strong>Product Name:</strong> ' . $item['name'] . '<br>
                <strong>Price:</strong> $' . $item['price'] . '<br>
                <strong>Quantity:</strong> ' . $item['quantity'] . '<br>
                <form method="post" action="cart.php">
                    <input type="hidden" name="product_id" value="' . $product_id . '">
                    <input type="submit" value="Update Quantity">
                </form>
                <form method="post" action="cart.php">
                    <input type="hidden" name="product_id" value="' . $product_id . '">
                    <input type="submit" value="Remove from Cart">
                </form>
            </div>';
    }

    // Calculate and display the total
    $total = calculateTotal();
    echo '<div class="cart-total"><strong>Total:</strong> $' . $total . '</div>';
}
?>

<hr>

<h2>Add to Cart</h2>
<form method="post" action="cart.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required><br><br>

    <label for="name">Product Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="price">Price:</label>
    <input type="number" step="0.01" id="price" name="price" required><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required><br><br>

    <input type="submit" value="Add to Cart">
</form>

</body>
</html>


<?php
session_start();

// (Include your database connection code here - same as cart.php)

// (Include your helper functions - addToCart, updateQuantity, removeFromCart, calculateTotal, getCartContents)

// Display cart contents - identical to the main cart.php page
?>


<?php
session_start();

// Database Connection (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add to cart
function addToCart($product_id, $quantity) {
    global $db;

    // Get product details
    $product_query = "SELECT id, name, price FROM products WHERE id = ?";
    $stmt = $db->prepare($product_query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    $product = $result->fetch_assoc();

    if ($product) {
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Check if the product is already in the cart
        if (isset($_SESSION['cart'][$product_id])) {
            // Update the quantity if the product is already in the cart
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            // Add the product to the cart
            $_SESSION['cart'][$product_id] = [
                'id' => $product_id,
                'name' => $product_name,
                'quantity' => $quantity,
                'price' => $product_price
            ];
        }
    } else {
        // Product not found
        return false;
    }
    return true;
}

// Function to remove from cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
    return true;
}

// Function to update quantity in cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
  return true;
}

// Function to get cart total
function calculateCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

// --- Example Usage (Product Listing -  Replace with your product data source) ---
$db = connectToDatabase();


// Dummy Product Data (Replace with your database query)
$products = [
    [ 'id' => 1, 'name' => 'Laptop', 'price' => 1200 ],
    [ 'id' => 2, 'name' => 'Mouse', 'price' => 25 ],
    [ 'id' => 3, 'name' => 'Keyboard', 'price' => 75 ]
];

// Function to display product listing (for demonstration)
function displayProductList($products) {
    echo "<h2>Available Products</h2>";
    echo "<ul>";
    foreach ($products as $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}

// Display product list
displayProductList($products);

// --- Cart Display and Form ---
echo "<h2>Shopping Cart</h2>";

// Display Cart Items
echo "<ul>";
$cart_total = calculateCartTotal();
foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['quantity'] * $item['price'] . "</li>";
}
echo "</ul>";
echo "<p><strong>Total: $" . $cart_total . "</strong></p>";

// Add to Cart Form
echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
echo "<h3>Add to Cart</h3>";
displayProductList($products); // Display the same product list

echo "<ul>";
foreach ($products as $product) {
    echo "<li>";
    echo "<label for='product_" . $product['id'] . "'>" . $product['name'] . ":</label>";
    echo "<input type='number' id='product_" . $product['id'] . "' name='quantity_" . $product['id'] . "' value='1' min='1'>";
    echo "<button type='submit' name='add_" . $product['id'] . "'><img src='add_to_cart.png' width='20'></button>";
    echo "</li>";
}
echo "</ul>";

echo "</form>";


// Handle Add to Cart Submission
if (isset($_POST['add_'])) {
    $product_id = $_POST['add_'];
    $quantity = 1; // Default quantity
    if (isset($_POST['quantity_' . $product_id])) {
        $quantity = intval($_POST['quantity_' . $product_id]); // Ensure it's an integer
    }

    if (addToCart($product_id, $quantity)) {
        echo "<p>Product added to cart.</p>";
    } else {
        echo "<p>Error adding product to cart.</p>";
    }
}

// Handle Remove from Cart (Example - Implement Remove buttons)
// This is just a placeholder. In a real application, you'd have a button to remove.

// Handle Update Quantity
if (isset($_POST['update_'])) {
    $product_id = $_POST['update_'];
    $quantity = intval($_POST['quantity_' . $product_id]);  // Ensure integer
    updateQuantity($product_id, $quantity);
    echo "<p>Quantity updated.</p>";
}


?>


<?php
session_start();

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectDB() {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
    if (isset($_SESSION['cart'])) {
        $cart = $_SESSION['cart'];
    } else {
        $cart = [];
    }

    // Check if the product already exists in the cart
    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $cart[$key]['quantity'] += $quantity;
            return;
        }
    }

    // If product not found, add it to the cart
    $cart[] = [
        'product_id' => $product_id,
        'quantity' => $quantity
    ];
}

// Function to get the cart total
function getCartTotal($conn) {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        $cart = $_SESSION['cart'];
        foreach ($cart as $item) {
            $product_id = $item['product_id'];
            $product_name = mysqli_fetch_assoc(mysqli_query($conn, "SELECT name, price FROM products WHERE id = $product_id"));
            $total_price = $product_name['price'] * $item['quantity'];
            $total = $total + $total_price;
        }
    }
    return $total;
}

// Function to clear the cart
function clearCart() {
    unset($_SESSION['cart']);
}

// Function to get product details by ID
function getProductDetails($conn, $product_id) {
    $result = mysqli_query($conn, "SELECT id, name, price, description FROM products WHERE id = $product_id");
    if ($result) {
        return mysqli_fetch_assoc($result);
    } else {
        return null;
    }
}

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Handle Add to Cart button
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart(connectDB(), $product_id, $quantity);
}

// Handle Remove from Cart button (basic implementation)
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    removeFromCart(connectDB(), $product_id);
}

//Remove from cart function
function removeFromCart($conn, $product_id) {
    if (isset($_SESSION['cart'])) {
        $cart = $_SESSION['cart'];
        foreach ($cart as $key => $item) {
            if ($item['product_id'] == $product_id) {
                unset($cart[$key]);
                //remove all keys greater than the current key
                $keys = array_keys($cart);
                $new_cart = array();
                foreach ($keys as $key) {
                    $new_cart[] = $cart[$key];
                }
                $_SESSION['cart'] = $new_cart;
                break;
            }
        }
    }
}

// Display the cart
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $product_id = $item['product_id'];
        $product_name = mysqli_fetch_assoc(mysqli_query(connectDB(), "SELECT name, price FROM products WHERE id = $product_id"));
        $total_price = $product_name['price'] * $item['quantity'];
        echo "<li>" . $product_name['name'] . " - $" . $product_name['price'] . " x " . $item['quantity'] . " = $" . $total_price . "</li>";
        $total = $total + $total_price;
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
    echo "<a href='checkout.php'>Proceed to Checkout</a>";
}
?>


<?php
session_start();

// Database connection (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Cart data (stored in the session)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($conn, $product_id, $quantity) {
  global $db_host, $db_user, $db_password, $db_name;

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it with initial quantity
    $_SESSION['cart'][$product_id] = [
      'id' => $product_id,
      'quantity' => $quantity,
      'name' => 'Product Name (Replace with actual product name)',  //Important: Replace with the real product name.
      'price' => 0  // Replace with the real product price
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($conn, $product_id) {
  unset($_SESSION['cart'][$product_id]);
}

// Function to update the quantity of an item in the cart
function updateQuantity($conn, $product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to display the cart
function displayCart() {
  echo "<h2>Shopping Cart</h2>";
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Name:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Subtotal:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "<form method='post' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='number' name='quantity' value='" . $product_details['quantity'] . "' min='1' max='100' style='width:50px;'>"; //Added min/max for quantity
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate total price
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total += ($product_details['price'] * $product_details['quantity']);
  }
  echo "<p><strong>Total:</strong> $" . $total . "</p>";

  // Checkout button (placeholder)
  echo "<form method='post' action='checkout.php'>";
  echo "<button type='submit'>Checkout</button>";
  echo "</form>";
}

// Handle form submission for adding items to cart
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = intval($_POST['quantity']); // Ensure quantity is an integer

    addToCart($conn, $product_id, $quantity);
  }
}

// Handle form submission for removing items from cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['remove_product_id'])) {
    $product_id = $_POST['remove_product_id'];
    removeFromCart($conn, $product_id);
}


// Display the cart
displayCart();
?>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to add a product to the cart
function addToCart($product_id, $quantity) {
  $conn = connectToDatabase();

  // Check if the product exists
  $query = "SELECT * FROM products WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    $product_name = $row['name'];
    $product_price = $row['price'];

    // Check if the cart exists for the user
    $cart_id = 'cart_' . session_id(); // Use session ID for cart identification

    // Create the cart entry if it doesn't exist
    $query = "INSERT INTO carts (user_id, product_id, quantity, cart_id) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isd", null, $product_id, $quantity, $cart_id); //user_id is null since it's for the session
    $stmt->execute();

  } else {
    // Handle product not found (e.g., log an error)
    echo "Product not found in the database.";
  }

  $stmt->close();
  $conn->close();
}

// Function to get the cart contents
function getCartContents() {
  $conn = connectToDatabase();

  // Get the cart ID for the current session
  $cart_id = 'cart_' . session_id();

  $query = "SELECT p.name, p.price, c.quantity FROM carts c JOIN products p ON c.product_id = p.id WHERE c.cart_id = ? ";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $cart_id);
  $stmt->execute();
  $result = $stmt->get_result();

  $cart_items = [];
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      $cart_items[] = [
        'id' => $row['product_id'],
        'name' => $row['name'],
        'price' => $row['price'],
        'quantity' => $row['quantity']
      ];
    }
  }

  $stmt->close();
  $conn->close();
  return $cart_items;
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    $conn = connectToDatabase();

    // Get the cart ID for the current session
    $cart_id = 'cart_' . session_id();

    $query = "UPDATE carts SET quantity = ? WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iids", $quantity, $product_id, $cart_id);

    if ($stmt->execute()) {
        // Optionally, you could also implement logic to remove the item if quantity becomes 0.
    } else {
        echo "Error updating cart.";
    }

    $stmt->close();
    $conn->close();
}


// Function to remove an item from the cart
function removeFromCart($product_id, $cart_id) {
    $conn = connectToDatabase();

    $query = "DELETE FROM carts WHERE product_id = ? AND cart_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("is", $product_id, $cart_id);

    if ($stmt->execute()) {
        // Optionally, you can also delete the cart entry if it's the last item
    } else {
        echo "Error removing item from cart.";
    }

    $stmt->close();
    $conn->close();
}


// Example usage (This would be in your HTML form)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
}

if (isset($_POST['update_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $quantity);
}

if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    $cart_id = $_POST['cart_id'];
    removeFromCart($product_id, $cart_id);
}


// Display the cart contents (This would be in your HTML)
$cart_items = getCartContents();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else { ?>
    <table>
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_items as $item): ?>
          <tr>
            <td><?php echo $item['name']; ?></td>
            <td><?php echo $item['price']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td>
              <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                <input type="hidden" name="cart_id" value="cart_<?php echo session_id(); ?>">
                <button type="submit" name="update_cart">Update Quantity</button>
              </form>
              <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                <input type="hidden" name="cart_id" value="cart_<?php echo session_id(); ?>">
                <button type="submit" name="remove_from_cart">Remove</button>
              </form>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
    <p>Total items in cart: <?php echo count($cart_items); ?></p>
  <?php } ?>

  <form action="" method="post">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}


// Cart class
class Cart {
  public $cart = [];

  public function __construct() {
    // Load cart from session on initialization
    if (session_start()) {
      $this->cart = isset($_SESSION['cart']) ? $_SESSION['cart'] : array();
    }
  }

  public function addProduct($product_id, $product_name, $price, $quantity = 1) {
    $product_id = $product_id;
    $product_name = $product_name;
    $price = $price;
    $quantity = (int)$quantity; // Convert quantity to integer

    if (!isset($this->cart[$product_id])) {
      $this->cart[$product_id] = [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity,
      ];
    } else {
      $this->cart[$product_id]['quantity'] += $quantity;
    }
    // Ensure quantity doesn't exceed a reasonable limit (optional)
    $this->cart[$product_id]['quantity'] = min($this->cart[$product_id]['quantity'], 100); // Limit to 100
  }

  public function removeProduct($product_id) {
    unset($this->cart[$product_id]);
  }

  public function updateQuantity($product_id, $new_quantity) {
    $new_quantity = (int)$new_quantity; //Convert to integer

    if (isset($this->cart[$product_id])) {
      $this->cart[$product_id]['quantity'] = $new_quantity;
    }
  }


  public function getCartContents() {
    return $this->cart;
  }

  public function getTotal($conn) {
    $total = 0;
    foreach ($this->getCartContents() as $item) {
      $total_item = $item['price'] * $item['quantity'];
      $total += $total_item;
    }
    return $total;
  }

  public function clearCart() {
    unset($_SESSION['cart']);
    session_destroy();
  }
}

// --- Cart operations ---

// Initialize the cart
$cart = new Cart();

// --- Handle Form Submission (Add to Cart) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity']; // Get quantity from form
    $cart->addProduct($product_id, $product_name, $price, $quantity);
    $_SESSION['cart'] = $cart->getCartContents(); // Update session
    // Redirect to cart page
    header("Location: cart.php");
    exit;
  }
}


// --- Display Cart Contents ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  // Display Cart Items
  $cart_contents = $cart->getCartContents();
  if (count($cart_contents)) {
    echo "<h2>Cart Items:</h2>";
    foreach ($cart_contents as $item_id => $product) {
      echo '<div class="cart-item">';
      echo 'Product: ' . $product['name'] . '<br>';
      echo 'Price: $' . number_format($product['price'], 2) . '<br>';
      echo 'Quantity: ' . $product['quantity'] . '<br>';
      // Optional: Add a remove button to the cart
      echo '<a href="cart.php?remove=' . $item_id . '" style="color: red; text-decoration: underline;">Remove</a><br>';
      echo '--------------------<br>';
    }

    // Calculate and display total
    $total = $cart->getTotal($conn);
    echo '<h2>Total: $' . number_format($total, 2) . '</h2>';

  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

  <hr>

  <h2>Add to Cart</h2>
  <?php
    // Example Products (Replace with your actual product data)
    $products = [
        'product1' => ['id' => 'product1', 'name' => 'Laptop', 'price' => 1200],
        'product2' => ['id' => 'product2', 'name' => 'Mouse', 'price' => 25],
        'product3' => ['id' => 'product3', 'name' => 'Keyboard', 'price' => 75]
    ];

    foreach ($products as $id => $product) {
        echo '<form method="post" action="cart.php">';
        echo '<label for="' . $id . '">Product ID:</label> <input type="hidden" id="' . $id . '" name="product_id" value="' . $id . '">';
        echo '<label for="' . $id . '">Product Name:</label> <input type="text" id="' . $id . '" name="product_name" value="' . $product['name'] . '" readonly>';
        echo '<label for="' . $id . '">Price:</label> <input type="text" id="' . $id . '" name="price" value="' . $product['price'] . '" readonly>';
        echo '<label for="' . $id . '">Quantity:</label> <input type="number" id="' . $id . '" name="quantity" value="1" min="1" max="100">';
        echo '<input type="submit" name="add_to_cart" value="Add to Cart">';
        echo '</form><br>';
    }
  ?>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to sanitize input (prevent SQL injection)
function sanitizeInput($data) {
  global $conn; // Access the database connection
  return mysqli_real_escape_string($conn, $data);
}

// ---------------------- Cart Functions ----------------------

// Add item to cart
function addToCart($product_id, $quantity) {
  global $conn;

  $product_id = sanitizeInput($product_id);
  $quantity = sanitizeInput($quantity);

  // Check if the product exists in the cart
  $cart_key = "cart_" . session_id();

  if (!isset($_SESSION[$cart_key])) {
    // If not, initialize the cart array
    $_SESSION[$cart_key] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION[$cart_key][$product_id])) {
    // Increment quantity
    $_SESSION[$cart_key][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to cart
    $_SESSION[$cart_key][$product_id] = [
      'quantity' => $quantity,
      'price' => getProductPrice($product_id) // Get product price
    ];
  }
}

// Get cart total
function getCartTotal($cart_key) {
  $total = 0;
  if (isset($_SESSION[$cart_key])) {
    foreach ($_SESSION[$cart_key] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return round($total, 2);
}

// Remove item from cart
function removeFromCart($product_id) {
    global $conn;
    $product_id = sanitizeInput($product_id);

    $cart_key = "cart_" . session_id();

    if (isset($_SESSION[$cart_key][$product_id])) {
        unset($_SESSION[$cart_key][$product_id]);
    }
}


// Get cart contents
function getCartContents($cart_key) {
  return $_SESSION[$cart_key] ?? []; // Return empty array if cart doesn't exist
}


// ----------------------  Product Data (For Demo) ----------------------
// Replace this with your actual database query to fetch products

$products = [
  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];


// Helper function to get product price (for demonstration)
function getProductPrice($product_id) {
  global $products;
  return $products[$product_id]['price'];
}

// ----------------------  Shopping Cart Handling ----------------------

// Initialize the shopping cart session
if (!isset($_SESSION["cart_"])){
  session_start(); // start session
}

// Handle adding to cart (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
}

// Handle removing from cart (e.g., from a form submission)
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
}

// ---------------------- Displaying the Cart ----------------------

// Get cart contents
$cartContents = getCartContents("cart_" . session_id());

$cartTotal = getCartTotal("cart_" . session_id());


?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cartContents)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>
    <table border="1">
      <thead>
        <tr>
          <th>Product</th>
          <th>Quantity</th>
          <th>Price</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        foreach ($cartContents as $product_id => $item) {
          ?>
          <tr class="cart-item">
            <td><?php echo $products[$product_id]['name']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td><?php echo $item['price']; ?></td>
            <td><?php echo $item['price'] * $item['quantity']; ?></td>
            <td>
              <form method="post">
                <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                <input type="submit" name="remove_from_cart" value="Remove" style="background-color: red;">
              </form>
            </td>
          </tr>
        <?php } ?>
      </tbody>
    </table>
    <p>Total: <?php echo $cartTotal; ?></p>
  <?php endif; ?>

  <hr>

  <h2>Add Items</h2>
  <form method="post">
    <?php
    foreach ($products as $product_id => $product) {
      ?>
      <div>
        <label for="product_id_<?php echo $product_id; ?>">Product: <?php echo $product['name']; ?></label>
        <input type="hidden" id="product_id_<?php echo $product_id; ?>" name="product_id" value="<?php echo $product_id; ?>">
        <label for="quantity_<?php echo $product_id; ?>">Quantity:</label>
        <input type="number" id="quantity_<?php echo $product_id; ?>" name="quantity" value="1" min="1">
        <input type="submit" name="add_to_cart" value="Add to Cart">
      </div>
    <?php } ?>
  </form>

</body>
</html>


<?php
session_start();

// Database connection (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database";

// Database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Cart data (stored in session)
$cart = array();

// Function to add an item to the cart
function addItemToCart($conn, $userId, $product_id, $name, $price, $quantity) {
  global $cart; // Access the global $cart array

  // Check if the item is already in the cart
  $sql = "SELECT id FROM cart WHERE user_id = '$userId' AND product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    // Item already exists, update the quantity
    $sql = "UPDATE cart SET quantity = quantity + $quantity WHERE user_id = '$userId' AND product_id = '$product_id'";
    if ($conn->query($sql) === TRUE) {
      //echo "Quantity updated successfully";
    } else {
      echo "Error updating quantity: " . $conn->error;
    }
  } else {
    // Item not in cart, add a new entry
    $sql = "INSERT INTO cart (user_id, product_id, name, price, quantity)
            VALUES ('$userId', '$product_id', '$name', $price, $quantity)";

    if ($conn->query($sql) === TRUE) {
      //echo "New item added to cart successfully";
    } else {
      echo "Error adding item to cart: " . $conn->error;
    }
  }
}

// Function to get cart items
function getCartItems($conn) {
  global $cart; // Access the global $cart array

  $sql = "SELECT c.cart_id, c.user_id, p.product_id, p.name, p.price, c.quantity
          FROM cart c
          JOIN products p ON c.product_id = p.product_id";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $cart_items = array();
    while($row = $result->fetch_assoc()) {
      $cart_items[] = $row;
    }
    return $cart_items;
  } else {
    return array();
  }
}


// Function to remove an item from the cart
function removeItemFromCart($conn, $cart_id) {
  $sql = "DELETE FROM cart WHERE cart_id = '$cart_id'";

  if ($conn->query($sql) === TRUE) {
    //echo "Item removed successfully";
  } else {
    echo "Error removing item from cart: " . $conn->error;
  }
}


// Function to update the quantity of an item in the cart
function updateCartItemQuantity($conn, $cart_id, $quantity) {
  $sql = "UPDATE cart SET quantity = '$quantity' WHERE cart_id = '$cart_id'";

  if ($conn->query($sql) === TRUE) {
    //echo "Quantity updated successfully";
  } else {
    echo "Error updating quantity: " . $conn->error;
  }
}


// --- Purchase Cart Actions (Example - this is just a placeholder) ---

// Add to Cart (Example)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $name = $_POST['name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  addItemToCart($conn, 1, $product_id, $name, $price, $quantity); // Assuming user ID 1
  header("Location: ".$_SERVER['PHP_SELF']."?add_to_cart=success");
  exit();
}

// Display Cart Items
$cart_items = getCartItems($conn);

// Get Cart Total
$total = 0;
foreach ($cart_items as $item) {
  $total += $item['price'] * $item['quantity'];
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Cart</title>
</head>
<body>

  <h1>Purchase Cart</h1>

  <?php if (count($cart_items) > 0): ?>
    <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
      <table>
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($cart_items as $item): ?>
            <tr>
              <td><?php echo $item['name']; ?></td>
              <td><?php echo $item['price']; ?></td>
              <td>
                <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1">
              </td>
              <td><?php echo $item['price'] * $item['quantity']; ?></td>
              <td>
                <a href="?update_cart=<?php echo $item['cart_id']; ?>">Update</a> |
                <a href="?remove_cart=<?php echo $item['cart_id']; ?>">Remove</a>
              </td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>

      <br>
      <input type="submit" name="submit_cart" value="Checkout" >
    </form>
  <?php else: ?>
    <p>Your cart is empty.</p>
  <?php endif; ?>

  <p>Total: <?php echo $total; ?></p>

  <hr>

  <a href="index.php">Continue Shopping</a>

</body>
</html>


<?php
session_start();

// Database connection details
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';
$db_name = 'your_db_name';

// --- Functions ---

/**
 * Adds an item to the shopping cart
 *
 * @param int $product_id The ID of the product to add
 * @return bool True on success, false on failure
 */
function add_to_cart($product_id) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity
    $_SESSION['cart'][$product_id]['quantity']++;
  } else {
    // Add product to cart
    $_SESSION['cart'][$product_id] = [
      'id' => $product_id,
      'name' => 'Product Name (From Database or Elsewhere)', // Replace with actual product name
      'price' => 10.00, // Replace with actual product price
      'quantity' => 1
    ];
  }
  return true;
}


/**
 * Updates the quantity of an item in the cart
 *
 * @param int $product_id The ID of the product to update
 * @param int $new_quantity The new quantity of the product
 * @return bool True on success, false on failure
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    return false; // Product not in cart
  }

  if ($new_quantity <= 0) {
      // Remove item if quantity is zero or negative
      unset($_SESSION['cart'][$product_id]);
      return true;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  return true;
}


/**
 * Removes an item from the cart
 *
 * @param int $product_id The ID of the product to remove
 * @return bool True on success, false on failure
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
        return true;
    }
    return false;
}


/**
 * Get the cart contents
 *
 * @return array The cart contents
 */
function get_cart() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart is not set
}



// --- Example Usage / Cart Handling (For the Shopping Cart Page) ---

// Check if the 'add_to_cart' action was triggered (e.g., from a POST request)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = isset($_POST['product_id']) ? (int)$_POST['product_id'] : null;

  if ($product_id > 0) {
    add_to_cart($product_id);
    // Redirect back to the product page (or the cart page)
    header("Location: product_page.php"); // Replace with your product page URL
    exit();
  } else {
    // Handle invalid product ID
    echo "Invalid product ID.";
  }

}


// Example: Updating cart quantity (Assume this is on a page where you can adjust the quantity)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = isset($_POST['product_id']) ? (int)$_POST['product_id'] : null;
    $new_quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 0;

    if ($product_id > 0 && $new_quantity > 0) {
        update_cart_quantity($product_id, $new_quantity);
        header("Location: cart.php"); // Redirect to cart page
        exit();
    }
}

// Example: Removing an item
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['action']) && $_POST['action'] == 'remove_item') {
    $product_id = isset($_POST['product_id']) ? (int)$_POST['product_id'] : null;
    if($product_id > 0) {
        remove_from_cart($product_id);
        header("Location: cart.php");
        exit();
    }
}



// --- Cart Page (cart.php) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  $cart_items = get_cart();

  if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart_items as $item_id => $item) {
      echo "<li>";
      echo "Product: " . $item['name'] . "<br>";
      echo "Quantity: " . $item['quantity'] . "<br>";
      echo "Price: $" . $item['price'] . "<br>";
      // Add an 'Remove' button or link here.  For simplicity, we'll just print a link.
      echo "<a href='cart.php?action=remove_item&product_id=" . $item_id . "'>Remove</a>";
      echo "<br>";
      echo "</li>";
    }
    echo "</ul>";
  }

  // Example: Display total
  $total = 0;
  foreach ($cart_items as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p>Total: $" . $total . "</p>";
  ?>


  <!-- Add a 'Checkout' button here -->
  <a href="checkout.php">Checkout</a>


</body>
</html>


<?php
session_start();

// --- Cart Data ---
$cart = [];

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
    if (!isset($cart[$productId])) {
        $cart[$productId] = [
            'name' => $productName,
            'price' => $price,
            'quantity' => $quantity,
            'total' => $price * $quantity
        ];
    } else {
        $cart[$productId]['quantity'] += $quantity;
        $cart[$productId]['total'] = $cart[$productId]['price'] * $cart[$productId]['quantity'];
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($cart[$productId])) {
        $cart[$productId]['quantity'] = $newQuantity;
        $cart[$productId]['total'] = $cart[$productId]['price'] * $cart[$productId]['quantity'];
    }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
    if (isset($cart[$productId])) {
        unset($cart[$productId]);
    }
}

// Function to calculate the total cart value
function calculateCartTotal() {
    $total = 0;
    foreach ($cart as $item) {
        $total = $total + $item['total'];
    }
    return $total;
}

// --- Product Data (Simulated Database - Replace with your actual database) ---
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
    4 => ['name' => 'Monitor', 'price' => 300]
];


// --- Handle Cart Actions ---
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addItemToCart($productId, $products[$productId]['name'], $products[$productId]['price'], $quantity);
} elseif (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $productId = $_POST['product_id'];
    $newQuantity = $_POST['quantity'];
    updateQuantity($productId, $newQuantity);
} elseif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $productId = $_POST['product_id'];
    removeItemFromCart($productId);
}
// --- Display Cart ---

$cartTotal = calculateCartTotal();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['total'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $cartTotal . "</strong></p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Online Store</h1>

    <h2>Products</h2>
    <ul>
        <li><a href="?action=view_cart&product_id=1">Laptop</a> - $1200</li>
        <li><a href="?action=view_cart&product_id=2">Mouse</a> - $25</li>
        <li><a href="?action=view_cart&product_id=3">Keyboard</a> - $75</li>
        <li><a href="?action=view_cart&product_id=4">Monitor</a> - $300</li>
    </ul>

    <form method="post" action="cart.php" >
        <h2>Add to Cart</h2>
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
        </select>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1">
        <input type="submit" name="action" value="add_to_cart">
    </form>

</body>
</html>


<?php
session_start();

// Initialize the cart
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ------------------- Functions -------------------

/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = 0; // Initialize count for new products
    }
    $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


/**
 * Removes an item from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


/**
 * Calculates the subtotal for a single item in the cart.
 *
 * @param int $product_id The ID of the product.
 * @return float
 */
function calculate_subtotal($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        return $_SESSION['cart'][$product_id] * $product_price[$product_id]; // Assuming $product_price is defined
    }
    return 0;
}

/**
 * Calculates the total price of the cart.
 *
 * @return float
 */
function calculate_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $total_item = calculate_subtotal($product_id);
        $total += $total_item;
    }
    return $total;
}

/**
 *  Gets the product price
 * @param int $product_id
 * @return float
 */
function get_product_price($product_id) {
    // Assuming you have a product price array (e.g., $product_price) defined elsewhere
    // This is just a placeholder - you'll need to populate this
    // For example:
    // $product_price = [
    //     1 => 10.00,
    //     2 => 20.00,
    //     3 => 15.00,
    // ];
    return $product_price[$product_id];
}

// ------------------- Example Product Data (Replace with your actual data) -------------------
$product_price = [
    1 => 10.00,
    2 => 20.00,
    3 => 15.00,
];



// ------------------- Handling Actions -------------------

// Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    add_to_cart($product_id, $quantity);
}

// Update Cart (Quantity Change)
if (isset($_POST['update_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    update_cart($product_id, $quantity);
}

// Remove from Cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = (int)$_GET['remove_from_cart'];
    remove_from_cart($product_id);
}



// ------------------- Cart Display -------------------

// Output Cart Contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product_name = "Product " . $product_id; // Replace with your actual product name retrieval
        echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Price: $" . get_product_price($product_id) . " - Subtotal: $" . calculate_subtotal($product_id) . " <button onclick=\"remove_item(" . $product_id . ")\" class=\"remove\">Remove</button></li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . calculate_total() . "</strong></p>";
}



// ------------------- JavaScript for Remove Button (Optional) -------------------

echo "<script>
function remove_item(product_id) {
  window.location.href = 'cart.php?remove_from_cart=" . $product_id . "'";
}
</script>";

?>


<?php
session_start();

// Configuration
$items = []; // Array to store the items in the cart
$cart_file = 'cart.json'; // File to store the cart data

// Helper functions to read and write to the JSON file
function readCart() {
    if (file_exists($cart_file)) {
        $data = file_get_contents($cart_file);
        return json_decode($data, true); // Decode to associative array
    }
    return [];
}

function writeCart($cart) {
    file_put_contents($cart_file, json_encode($cart, JSON_PRETTY_PRINT));
}


// Cart functions

// Add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
    $cart = readCart();

    // Check if the product is already in the cart
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] += $quantity;
    } else {
        $cart[$product_id] = ['quantity' => $quantity];
    }

    writeCart($cart);
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    $cart = readCart();
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }

    writeCart($cart);
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    $cart = readCart();
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    }
    writeCart($cart);
}


// Display the cart
function display_cart() {
    $cart = readCart();

    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        $product_name = get_product_name($product_id); //Get product name from a database
        echo "<li>";
        echo "<strong>$product_name</strong> - Quantity: $item['quantity'] - Price: $item['price'] (Assuming you have a database for product prices)";
        echo "<form method='post'>";
        echo "<label for='$product_id'>Quantity:</label>";
        echo "<input type='number' id='$product_id' name='$product_id' value='$item['quantity']' min='1'>";
        echo "<input type='submit' name='$product_id' value='Update'>";
        echo "<a href='?remove=$product_id'>Remove</a>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";

    // Calculate the total
    $total = 0;
    foreach ($cart as $product_id => $item) {
        $total += $item['quantity'] * $item['price']; // Assuming you have a database for product prices
    }

    echo "<p><strong>Total: $total</strong></p>";
}

// Get product name from database (example - modify to fit your setup)
function get_product_name($product_id) {
    //Replace this with your actual database query
    $products = [
        1 => ['name' => 'Laptop'],
        2 => ['name' => 'Mouse'],
        3 => ['name' => 'Keyboard']
    ];
    if (isset($products[$product_id])) {
        return $products[$product_id]['name'];
    } else {
        return "Unknown Product";
    }
}



// Handle form submission (Update Quantity)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = htmlspecialchars($_POST['product_id']);  // Sanitize input
    if (isset($product_id)) {
        update_quantity($product_id, $_POST['quantity']);
    }
}

// Handle Remove Item
if (isset($_GET['remove'])) {
    remove_from_cart($_GET['remove']);
}

// Initialize the cart (if not already initialized)
if (!readCart()) {
    $cart = [];
    writeCart($cart);
}


//Display the cart
display_cart();
?>


<?php
session_start();

// Define product data (replace with your actual data source)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Initialize the cart
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add item to cart
function addToCart($productId, $quantity = 1) {
    if (isset($products[$productId])) {
        if (isset($_SESSION['cart'][$productId])) {
            $_SESSION['cart'][$productId]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$productId] = [
                'id' => $productId,
                'name' => $products[$productId]['name'],
                'price' => $products[$productId]['price'],
                'quantity' => $quantity
            ];
        }
    }
}

// Function to update quantity
function updateQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}

// Function to remove item from cart
function removeCartItem($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to get cart total
function calculateCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Handle adding to cart (from a form submission)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1;
    addToCart($productId, $quantity);
}

// Handle updating quantity
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
    $productId = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 0;
    updateQuantity($productId, $quantity);
}

// Handle removing item
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $productId = $_POST['product_id'];
    removeCartItem($productId);
}

// Get cart contents for display
$cart_items = $_SESSION['cart'];

// Calculate cart total
$total = calculateCartTotal();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        body { font-family: sans-serif; }
        .cart-item { border: 1px solid #ccc; margin: 10px; padding: 10px; }
        .cart-total { font-weight: bold; }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="">
        <h2>Items in Cart:</h2>
        <?php if (empty($cart_items)): ?>
            <p>Your cart is empty.</p>
        <?php else: ?>
            <?php
            foreach ($cart_items as $item):
                ?>
                <div class="cart-item">
                    <strong><?php echo $item['name']; ?></strong> - $<?php echo number_format($item['price'], 2); ?>
                    <br>
                    Quantity: <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1">
                    <br>
                    <button type="submit" name="update_quantity" value="<?php echo $item['id']; ?>">Update</button>
                    <button type="submit" name="remove_from_cart" value="<?php echo $item['id']; ?>">Remove</button>
                </div>
            <?php
        endforeach;
        ?>
        <input type="hidden" name="product_id" value="">
        <?php
    }
    ?>
    </form>

    <p class="cart-total">Total: $<?php echo number_format($total, 2); ?></p>

    <a href="index.php">Continue Shopping</a> <!-- Link to the product listing page -->

</body>
</html>


<?php
// cart.php

$cart_file = 'cart.txt'; // Name of the file to store the cart

// Function to read the cart
function readCart() {
    if (file_exists($cart_file)) {
        $cart = array();
        $lines = file($cart_file, FILE_IGNORE_NEW_LINES);
        foreach ($lines as $line) {
            list($product_id, $quantity) = explode(',', $line);
            $cart[$product_id] = $quantity;
        }
        return $cart;
    } else {
        return array(); // Return an empty array if the file doesn't exist
    }
}

// Function to write the cart
function writeCart($cart) {
    $data = '';
    foreach ($cart as $product_id => $quantity) {
        $data .= $product_id . ',' . $quantity . '
';
    }
    file_put_contents($cart_file, $data);
}
?>


<?php
// index.php

require_once 'cart.php'; // Include the cart.php file

$cart = readCart();  // Read the cart data from the file

// Product data (for example purposes)
$products = array(
    'product1' => array('name' => 'T-Shirt', 'price' => 20),
    'product2' => array('name' => 'Jeans', 'price' => 50),
    'product3' => array('name' => 'Hat', 'price' => 15)
);

echo '<h1>Shopping Cart</h1>';

if (empty($cart)) {
    echo '<p>Your cart is empty.</p>';
} else {
    echo '<ul>';
    foreach ($cart as $product_id => $quantity) {
        $product_name = $products[$product_id]['name'];
        $product_price = $products[$product_id]['price'];
        $total_price = $product_price * $quantity;
        echo '<li>' . $product_name . ' - $' . $product_price . ' x ' . $quantity . ' = $' . $total_price . '</li>';
    }
    echo '</ul>';
    echo '<p><strong>Total: $' . array_sum(array_map(function($qty) { return $products[$key]['price'] * $qty; }, $cart)) . '</strong></p>';
}

echo '<br><a href="add_to_cart.php">Add to Cart</a> | <a href="remove_from_cart.php">Remove from Cart</a> | <a href="checkout.php">Checkout</a>';
?>


<?php
// add_to_cart.php

require_once 'cart.php';

$product_id = $_GET['product_id'];
$quantity = isset($_GET['quantity']) ? (int)$_GET['quantity'] : 1; // Default to 1 if not provided.

if (empty($cart)) {
    $cart[$product_id] = $quantity;
} else {
    if (isset($cart[$product_id])) {
        $cart[$product_id] += $quantity;
    } else {
        $cart[$product_id] = $quantity;
    }
}

writeCart($cart); // Save the updated cart data
header("Location: index.php"); // Redirect back to the main page.
exit();
?>


<?php
// remove_from_cart.php

require_once 'cart.php';

$product_id = $_GET['product_id'];

if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
}

writeCart($cart); // Save the updated cart data
header("Location: index.php"); // Redirect back to the main page
exit();
?>


<?php
// checkout.php

require_once 'cart.php';

if (empty($cart)) {
    echo '<p>Your cart is empty.  Nothing to checkout.</p>';
} else {
    echo '<h1>Checkout</h1>';
    echo '<p>Thank you for your order!</p>';
    echo '<p><strong>Total: $' . array_sum(array_map(function($qty) { return $products[$key]['price'] * $qty; }, $cart)) . '</strong></p>';
}
?>


<?php
session_start();

// Database connection (Replace with your actual database credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "ecommerce_db";

// Database connection
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Cart Initialization - Check if cart exists in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Add item to cart
function addToCart($conn, $product_id, $quantity) {
    $product_id = $conn->real_escape_string($product_id);  //Escape string
    $quantity = $conn->real_escape_string($quantity);

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
    }
}

// Update item quantity in cart
function updateCartQuantity($conn, $product_id, $quantity) {
    $product_id = $conn->real_escape_string($product_id);
    $quantity = $conn->real_escape_string($quantity);

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        // Handle case where product is no longer in cart (e.g., delete)
        //  You might want to log this or take another action.
        // For this example, we'll just do nothing.
        return false; // Indicate failure
    }
    return true; // Indicate success
}

// Remove item from cart
function removeCartItem($conn, $product_id) {
    $product_id = $conn->real_escape_string($product_id);
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Get cart items
function getCartItems($conn) {
    $items = [];
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $item_data = getProductDetails($conn, $product_id); //Fetch product details
        if ($item_data) {
           $item_data['quantity'] = $item_data['quantity'];
           $items[] = $item_data;
        }
    }
    return $items;
}

// Fetch product details from the database
function getProductDetails($conn, $product_id) {
    $product_id = $conn->real_escape_string($product_id);

    $query = "SELECT id, name, price, image FROM products WHERE id = $product_id";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        return $row;
    }
    return null;
}

// Calculate total cart value
function calculateTotal($conn) {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $product_data = getProductDetails($conn, $product_id);
        if($product_data) {
            $total += $product_data['price'] * $item['quantity'];
        }
    }
    return $total;
}

// --- Cart Functions (Called from the form) ---

// Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($conn, $product_id, $quantity);
}

// Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateCartQuantity($conn, $product_id, $quantity);
}

// Remove from Cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeCartItem($conn, $product_id);
}


// --- Display Cart ---

// Get cart items
$cart_items = getCartItems($conn);

// Calculate total
$total = calculateTotal($conn);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
            border: 1px solid #ddd;
            padding: 10px;
        }
        .cart-item img {
            max-width: 100px;
            height: auto;
            margin-right: 10px;
        }
    </style>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>

    <div id="cart-items">
        <?php foreach ($cart_items as $item): ?>
            <div class="cart-item">
                <img src="<?php echo $item['image']; ?>" alt="<?php echo $item['name']; ?>" >
                <p><strong>Name:</strong> <?php echo $item['name']; ?></p>
                <p><strong>Price:</strong> $<?php echo number_format($item['price'], 2); ?></p>
                <p><strong>Quantity:</strong> <?php echo $item['quantity']; ?></p>
                <form method="post" action="">
                    <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                    <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>" min="1" style="width: 50px;">
                    <button type="submit" name="update_quantity">Update</button>
                </form>
                <form method="post" action="">
                    <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
                    <button type="submit" name="remove_from_cart">Remove</button>
                </form>
            </div>
        <?php endforeach; ?>
    </div>

    <p><strong>Total:</strong> $<?php echo number_format($total, 2); ?></p>

<?php endif; ?>

</body>
</html>


<?php
session_start();

// Database connection (replace with your actual details)
$db_host = "localhost";
$db_user = "your_username";
$db_password = "your_password";
$db_name = "your_database_name";

// Function to connect to the database
function connectToDatabase() {
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to fetch products from the database
function fetchProducts($conn) {
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);
  $products = array();
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $products[] = $row;
    }
  }
  return $products;
}

// --- Cart Management Functions ---

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Add to cart function
function addToCart($conn, $product_id, $quantity) {
  global $db_host, $db_user, $db_password, $db_name;

  // Check if the product exists
  $sql = "SELECT * FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();
  $product = $result->fetch_assoc();

  if (!$product) {
    echo "Product with ID " . $product_id . " not found.";
    return false;
  }

  // Check if the product is already in the cart
  foreach($_SESSION['cart'] as $index => $item) {
    if ($item['id'] == $product_id) {
      // Update the quantity
      $_SESSION['cart'][$index]['quantity'] += $quantity;
      return true;
    }
  }

  // Add the product to the cart
  $_SESSION['cart'][] = $product;
  return true;
}

// Remove from cart function
function removeFromCart($product_id) {
  // Iterate through the cart and remove the item with the matching product_id
  foreach($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);
      // Re-index the cart array
      $_SESSION['cart'] = array_values($_SESSION['cart']);
      return true;
    }
  }
  return false;
}

// Get cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Calculate cart total
function calculateCartTotal($conn) {
  $total = 0;
  $cartItems = getCartItems();

  foreach ($cartItems as $item) {
    $sql = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $item['id']);
    $stmt->execute();
    $result = $stmt->get_result();
    $product = $result->fetch_assoc();
    $total += $product['price'] * $item['quantity'];
  }
  return $total;
}

// ---  Display the Cart ---

// Fetch products
$conn = connectToDatabase();
$products = fetchProducts($conn);


// --- Handle form submission ---
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($conn, $product_id, $quantity);
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// Get Cart items for display
$cartItems = getCartItems();

// Calculate total
$cartTotal = calculateCartTotal($conn);

// --- Output the HTML ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
  <style>
    .cart-item {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cartItems)) { ?>
    <p>Your cart is empty.</p>
  <?php } else { ?>
    <table>
      <thead>
        <tr>
          <th>Product</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Total</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        foreach ($cartItems as $item) {
          echo "<tr class='cart-item'>";
          echo "<td>" . $item['name'] . "</td>";
          echo "<td>$" . $item['price'] . "</td>";
          echo "<td>" . $item['quantity'] . "</td>";
          echo "<td>$" . $item['quantity'] * $item['price'] . "</td>";
          echo "<td><a href='?action=remove_cart&product_id=" . $item['id'] . "'>Remove</a></td>";
          echo "</tr>";
        }
        ?>
      </tbody>
    </table>

    <p><strong>Total:</strong> $" . $cartTotal . "</p>
    <?php
    }
    ?>

  <form action="" method="post">
    <?php
        foreach ($products as $product) {
        ?>
      <div>
        <label for="product_id_<?php echo $product['id']; ?>">
          <input type="checkbox" id="product_id_<?php echo $product['id']; ?>" name="product_id" value="<?php echo $product['id']; ?>" <?php if (in_array($product['id'], $cartItems)) echo 'checked'; ?> >
          <?php echo $product['name']; ?> (Price: <?php echo $product['price']; ?>)
        </label>
      </div>
    <?php } ?>

  </form>

</body>
</html>


<?php
session_start();

// Cart data (in a real application, this would likely come from a database)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $cart[$product_id]['quantity'] += $quantity;
    }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    unset($cart[$product_id]);
}

// Function to get the cart total
function get_cart_total() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// Function to display the cart
function display_cart() {
    if (empty($cart)) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    foreach ($cart as $product_id => $item) {
        echo "<tr>";
        echo "<td>" . $item['name'] . "</td>";
        echo "<td>$" . number_format($item['price'], 2) . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>$" . number_format($item['price'] * $item['quantity'], 2) . "</td>";
        echo "<td><a href='update_cart.php?product_id=" . $product_id . "&quantity=1'>-</a> <a href='update_cart.php?product_id=" . $product_id . "&quantity=1'>Update</a> <a href='remove_from_cart.php?product_id=" . $product_id . "'>Remove</a></td>";
        echo "</tr>";
    }

    echo "</table>";
    echo "<p><strong>Total: $" . number_format(get_cart_total(), 2) . "</p>";
}

// ---  Handling Cart Updates (update_cart.php) ---

//If the update_cart.php is accessed, let's handle the quantity updates
if (isset($_GET['product_id']) && isset($_GET['quantity'])) {
    $product_id = $_GET['product_id'];
    $quantity = (int)$_GET['quantity']; // Ensure it's an integer

    if ($quantity > 0) {
      update_cart_quantity($product_id, $quantity);
    } else {
      // Handle invalid quantity, e.g., display an error message
      echo "<p>Invalid quantity. Please enter a positive number.</p>";
    }
    header("Location: cart.php"); // Redirect to the cart page
    exit(); // Important to stop further execution
}



// ---  Removing Items (remove_from_cart.php) ---

//If the remove_from_cart.php is accessed, let's handle the removal
if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];
    remove_from_cart($product_id);
    header("Location: cart.php"); // Redirect to the cart page
    exit();
}

// --- Initial Cart Display (cart.php) ---

// Ensure the cart is started.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = $cart;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<!-- Display the cart -->
<?php display_cart(); ?>

<hr>

<!-- Add to Cart Button (Assuming you have a product listing) -->
<?php
// Example Product listing (Replace with your actual product data)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15]
];

echo "<h2>Add to Cart</h2>";
foreach ($products as $product_id => $product_data) {
    echo "<form method='post' action='cart.php'>";
    echo "<label for='product_" . $product_id . "'>Product: " . $product_data['name'] . " ($" . number_format($product_data['price'], 2) . ")</label><br>";
    echo "<input type='number' id='quantity_" . $product_id . "' name='quantity_" . $product_id . "' value='1' min='1' max='10'><br>"; //Added max to limit quantity
    echo "<input type='submit' value='Add to Cart'>";
    echo "</form><br>";
}
?>

</body>
</html>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}


//  Helper Function to sanitize inputs
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}


// Function to add an item to the cart
function addToCart($product_id, $quantity) {
    $conn = connectToDatabase();

    $product_id = sanitizeInput($product_id);
    $quantity = sanitizeInput($quantity);

    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = $product_id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        $product_id = $product['id'];
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Check if the product is already in the cart
        $sql = "SELECT id FROM cart WHERE product_id = $product_id";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            // Product exists in the cart, update the quantity
            $sql = "UPDATE cart SET quantity = quantity + $quantity WHERE product_id = $product_id";
        } else {
            // Product doesn't exist in the cart, add it
            $sql = "INSERT INTO cart (product_id, quantity) VALUES ($product_id, $quantity)";
        }

        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    } else {
        return false; // Product not found
    }
}



// Function to get the cart contents
function getCartContents() {
    $conn = connectToDatabase();

    $sql = "SELECT p.id AS product_id, p.name AS product_name, p.price AS product_price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id";
    $result = $conn->query($sql);

    $cart_contents = [];
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $cart_contents[] = $row;
        }
    }

    return $cart_contents;
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    $conn = connectToDatabase();
    $product_id = sanitizeInput($product_id);

    $sql = "DELETE FROM cart WHERE product_id = $product_id";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    $conn = connectToDatabase();
    $product_id = sanitizeInput($product_id);
    $quantity = sanitizeInput($quantity);

    // Check if the product exists
    $sql = "SELECT id, name, price FROM products WHERE id = $product_id";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        $product_id = $product['id'];
        $product_name = $product['name'];
        $product_price = $product['price'];

        // Check if the product is already in the cart
        $sql = "SELECT id FROM cart WHERE product_id = $product_id";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            // Product exists in the cart, update the quantity
            $sql = "UPDATE cart SET quantity = $quantity WHERE product_id = $product_id";
        } else {
            // Product doesn't exist in the cart, this should not happen
            return false;
        }

        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    } else {
        return false; // Product not found
    }
}

// Example Usage (This part would typically be in a separate PHP file, e.g., cart.php)

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    if (addToCart($product_id, $quantity)) {
        echo "Product added to cart.";
    } else {
        echo "Error adding product to cart.";
    }
}


// 2. Get Cart Contents (For Displaying the Cart)
$cart_contents = getCartContents();

// 3. Remove Item (Example)
if (isset($_GET['remove_item'])) {
    $product_id = $_GET['remove_item'];
    if (removeFromCart($product_id)) {
        echo "Product removed from cart.";
    } else {
        echo "Error removing product from cart.";
    }
}

// 4. Update Quantity (Example)
if (isset($_GET['update_quantity'])) {
  $product_id = $_GET['update_quantity'];
  $new_quantity = $_POST['quantity'];

  if (updateCartQuantity($product_id, $new_quantity)) {
    echo "Quantity updated successfully.";
  } else {
    echo "Error updating quantity.";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_contents as $item): ?>
                <tr>
                    <td><?php echo $item['product_name']; ?></td>
                    <td>$<?php echo number_format($item['product_price'], 2); ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td>$<?php echo number_format($item['product_price'] * $item['quantity'], 2); ?></td>
                    <td>
                        <form method="get" action="cart.php">
                            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
                            <input type="hidden" name="remove_item" value="<?php echo $item['product_id']; ?>">
                            <input type="submit" value="Remove">
                        </form>
                    </td>
                </tr>
            <?php
            } // end foreach
            ?>
        </tbody>
    </table>
<?php endif; ?>


</body>
</html>


<?php
session_start();

// Database connection (replace with your actual credentials)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database_name';

try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Function to check if an item is already in the cart
function isInCart($cart_id, $product_id) {
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM cart_items WHERE cart_id = ? AND product_id = ?");
    $stmt->execute([$cart_id, $product_id]);
    return (int)$stmt->fetchColumn() > 0;
}

// Function to update the cart
function updateCart($cart_id, $product_id, $quantity) {
    $stmt = $pdo->prepare("
        UPDATE cart_items
        SET quantity = :quantity
        WHERE cart_id = :cart_id AND product_id = :product_id
    ");
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':cart_id', $cart_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
}

// Function to add an item to the cart
function addItemToCart($cart_id, $product_id, $quantity) {
    if (isInCart($cart_id, $product_id)) {
        updateCart($cart_id, $product_id, $quantity);
    } else {
        $stmt = $pdo->prepare("INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (?, ?, ?)");
        $stmt->execute([$cart_id, $product_id, $quantity]);
    }
}

// Cart ID based on session
$cart_id = isset($_SESSION['cart_id']) ? $_SESSION['cart_id'] : null;

if ($cart_id === null) {
    // Create a new cart if one doesn't exist
    $cart_id = bin2hex(random_bytes(16));
    $_SESSION['cart_id'] = $cart_id;
}

// Get products (replace with your product retrieval logic)
$products = [
    ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Handle add to cart request
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate quantity (optional, but recommended)
    if (isset($quantity) && is_numeric($quantity) && $quantity > 0) {
        addItemToCart($cart_id, $product_id, $quantity);
    }
}

// Display the cart contents
$cartItems = [];
if ($cart_id !== null) {
    $stmt = $pdo->prepare("SELECT product_id, quantity FROM cart_items WHERE cart_id = ?");
    $stmt->execute([$cart_id]);
    $cartItems = $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Calculate total price
$total_price = 0;
if ($cart_id !== null) {
    foreach ($cartItems as $item) {
        $product = null;
        foreach ($products as $p) {
            if ($p['id'] == $item['product_id']) {
                $product = $p;
                break;
            }
        }
        if ($product) {
            $total_price += $product['price'] * $item['quantity'];
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <h2>Cart ID: <?php echo $cart_id; ?></h2>

    <form method="post">
        <?php if ($cart_id !== null && !empty($cartItems)) { ?>
            <h2>Cart Items</h2>
            <?php foreach ($cartItems as $item) { ?>
                <div class="cart-item">
                    <strong><?php $product = null; foreach ($products as $p) { if ($p['id'] == $item['product_id']) {$product = $p; break;} } ?></strong>
                    <?php if ($product) { ?>
                        <?php echo $product['name'] ?> - <?php echo $product['price'] ?>
                    <?php } ?>
                    Quantity: <input type="number" name="quantity" value="<?php echo $item['quantity'] ?>">
                    <br>
                    <button type="submit" name="update_cart">Update Cart</button>
                    <br>

                </div>
            <?php } ?>
        <?php } ?>

        <h2>Add to Cart</h2>
        <?php foreach ($products as $product) { ?>
            <label for="product_<?php echo $product['id'] ?>">
                <input type="number" name="product_id", value="<?php echo $product['id'] ?>" min="1" >
                <?php echo $product['name'] ?> - <?php echo $product['price'] ?>
            </label>
            <br>
        <?php } ?>

    </form>

    <p>Total Price: <?php echo number_format($total_price, 2); ?></p>

    <a href="checkout.php">Checkout</a>  <!-- Link to checkout page (not implemented) -->

</body>
</html>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// Function to add to cart
function addToCart($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to get cart items
function getCartItems() {
  return isset($_SESSION['cart']) ? $_SESSION['cart'] : array();
}

// Function to update cart quantity
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // Handle the case where the product is not in the cart
    // You might want to add it with the given quantity or handle it differently
    // For this example, we'll just return an empty array to indicate no update
    return array();
  }
  return $_SESSION['cart'];
}

// Function to remove item from cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
  return $_SESSION['cart'];
}

// Function to calculate cart total
function calculateCartTotal() {
  $total = 0;
  $cartItems = getCartItems();
  foreach ($cartItems as $product_id => $item) {
    $product = getProductById($product_id); // Assuming you have a function to get product details
    if ($product) {
      $totalPrice = $product['price'] * $item['quantity'];
      $total += $totalPrice;
    }
  }
  return $total;
}

//Example Product Retrieval Function - Replace with your actual database query
function getProductById($product_id) {
    // Replace this with your database query to retrieve product details
    // based on the product_id
    $products = array(
        1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
        2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
        3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75)
    );
    if (isset($products[$product_id])) {
        return $products[$product_id];
    }
    return null;
}

// Handling Add to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
  // Optionally, display a success message
  echo "<p>Item added to cart!</p>";
}

// Handling Update Quantity
if (isset($_POST['update_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $quantity);
  // Optionally, display a success message
  echo "<p>Cart updated!</p>";
}

// Handling Remove Item
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeItemFromCart($product_id);
  // Optionally, display a success message
  echo "<p>Item removed from cart!</p>";
}

// Display Cart Items
$cartItems = getCartItems();
$cartTotal = calculateCartTotal();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    $product = getProductById($product_id);
    if ($product) {
      echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $item['quantity'] . " = $" . ($product['price'] * $item['quantity']) . "</li>";
    }
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $cartTotal . "</strong></p>";
}
?>


<?php
session_start();

// Database connection details (Replace with your actual credentials)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'your_database';

// Function to connect to the database
function connectToDatabase() {
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to handle adding to cart
function addToCart($productId, $quantity) {
    $conn = connectToDatabase();

    // Check if product exists in the cart
    $cartKey = 'cart_' . session_id();

    if (!isset($_SESSION[$cartKey])) {
        $_SESSION[$cartKey] = array();
    }

    if (isset($_SESSION[$cartKey][$productId])) {
        $_SESSION[$cartKey][$productId] += $quantity;
    } else {
        $_SESSION[$cartKey][$productId] = $quantity;
    }

    $conn->close();
}

// Function to get the cart contents
function getCartContents() {
    $cartKey = 'cart_' . session_id();

    if (!isset($cartKey)) {
        return []; // Return an empty array if cart doesn't exist
    }

    return $_SESSION[$cartKey];
}

// Function to remove a product from the cart
function removeFromCart($productId) {
    $cartKey = 'cart_' . session_id();

    if (!isset($cartKey)) {
        return; // Cart doesn't exist
    }

    unset($_SESSION[$cartKey][$productId]);
}


// Handling Add to Cart Request
if (isset($_POST['action']) && $_POST['action'] == 'addToCart') {
    $productId = $_POST['productId'];
    $quantity = $_POST['quantity'];

    addToCart($productId, $quantity);
}

// Handling Remove from Cart Request
if (isset($_POST['action']) && $_POST['action'] == 'removeFromCart') {
    $productId = $_POST['productId'];
    removeFromCart($productId);
}


// Displaying the Cart Contents
$cart = getCartContents();

$total = 0;
foreach ($cart as $productId => $quantity) {
    // Get product details from the database
    $product = getProductDetails($productId);

    if ($product) {
        $total += $product['price'] * $quantity;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
    <style>
        .cart-item {
            border: 1px solid #ccc;
            margin-bottom: 10px;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }
    </style>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (empty($cart)): ?>
        <p>Your cart is empty.</p>
    <?php else: ?>

        <?php
        // Display cart items
        foreach ($cart as $productId => $quantity) {
            $product = getProductDetails($productId);

            if ($product) {
                echo '<div class="cart-item">';
                echo '<img src="' . $product['image'] . '" alt="' . $product['name'] . '">';
                echo '<h3>' . $product['name'] . '</h3>';
                echo '<p>Quantity: ' . $quantity . '</p>';
                echo '<p>Price: $' . $product['price'] . '</p>';
                echo '<form method="post" action="">';
                echo '<input type="hidden" name="action" value="removeFromCart">';
                echo '<input type="hidden" name="productId" value="' . $productId . '">';
                echo '<button type="submit">Remove</button>';
                echo '</form>';
                echo '</div>';
            }
        }
        ?>

        <p>Total: $<?php echo round($total, 2); ?></p>
    <?php endif; ?>

    <hr>

    <h2>Add to Cart</h2>
    <ul>
        <li><form method="post" action="">
            <input type="hidden" name="action" value="addToCart">
            <input type="hidden" name="productId" value="1">
            <input type="number" name="quantity" value="1" min="1">
            <button type="submit">Add Product 1 to Cart</button>
        </form></li>

        <li><form method="post" action="">
            <input type="hidden" name="action" value="addToCart">
            <input type="hidden" name="productId" value="2">
            <input type="number" name="quantity" value="1" min="1">
            <button type="submit">Add Product 2 to Cart</button>
        </form></li>
    </ul>

</body>
</html>


<?php
session_start();

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Database connection
$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Cart Data
$cart = array();


// Function to add an item to the cart
function add_to_cart($conn, $product_id, $quantity) {
    global $cart;

    // Check if the product is already in the cart
    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            // Update the quantity
            $cart[$key]['quantity'] += $quantity;
            return;
        }
    }

    // If not in the cart, add it
    $cart[] = array('product_id' => $product_id, 'quantity' => $quantity);
}

// Function to remove an item from the cart
function remove_from_cart($conn, $product_id) {
    global $cart;

    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($cart[$key]);
            return;
        }
    }
}


// Function to update the quantity of an item in the cart
function update_cart_quantity($conn, $product_id, $quantity) {
    global $cart;

    foreach ($cart as $key => $item) {
        if ($item['product_id'] == $product_id) {
            $cart[$key]['quantity'] = $quantity;
            return;
        }
    }
}


// ---  Handling Requests (GET/POST) ---

// 1. Add to Cart (POST request)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    add_to_cart($conn, $product_id, $quantity);
}


// 2. Remove from Cart (POST request)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($conn, $product_id);
}


// 3. Update Quantity (POST request)
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_cart_quantity($conn, $product_id, $new_quantity);
}


// --- Display Cart Contents ---
echo "<h2>Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $key => $item) {
        $product_id = $item['product_id'];

        // Fetch product details from the database (replace with your query)
        $product_query = "SELECT * FROM products WHERE id = $product_id";
        $product_result = $conn->query($product_query);

        if ($product_result->num_rows > 0) {
            $product = $product_result->fetch_assoc();
            echo "<li>";
            echo "Product: " . $product['name'] . "<br>";
            echo "Quantity: " . $item['quantity'] . "<br>";
            echo "Price: $" . $product['price'] . "<br>";
            echo "<form method='post'>";
            echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
            echo "<input type='hidden' name='quantity' value='" . $item['quantity'] . "'>";
            echo "<input type='submit' name='update_quantity' value='Update Quantity'>&nbsp; ";
            echo "<input type='submit' name='remove_from_cart' value='Remove from Cart'> ";
            echo "</form>";
            echo "</li>";
        } else {
            echo "<li>Product ID: " . $product_id . " not found.</li>";
        }
    }
    echo "</ul>";
}


// Close the database connection
$conn->close();
?>


<?php
session_start();

// Database connection (replace with your actual details)
$db_host = "localhost";
$db_name = "shopping_cart";
$db_user = "your_username";
$db_password = "your_password";

// Create database connection
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// --- Product Data (Simulated for Example) ---
$products = [
    1 => ["id" => 1, "name" => "Laptop", "price" => 1200, "quantity" => 1],
    2 => ["id" => 2, "name" => "Mouse", "price" => 25, "quantity" => 5],
    3 => ["id" => 3, "name" => "Keyboard", "price" => 75, "quantity" => 3],
];

// --- Functions ---

/**
 * Adds an item to the cart.
 * @param int $product_id
 * @param int $quantity
 */
function add_to_cart($product_id, $quantity) {
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] ?? 0;
        $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] + $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Updates the quantity of an item in the cart.
 * @param int $product_id
 * @param int $quantity
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


/**
 * Removes an item from the cart.
 * @param int $product_id
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the cart contents
 * @return array An array containing the cart data.
 */
function get_cart_contents() {
    return $_SESSION['cart'] ?? []; //Return empty array if session not set
}

// --- Handling Add to Cart Request ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["add_to_cart"])) {
    $product_id = (int)$_POST["product_id"];
    $quantity = (int)$_POST["quantity"];

    if (isset($products[$product_id])) {
        add_to_cart($product_id, $quantity);
    } else {
        echo "Product ID $product_id not found.";
    }
}


// --- Handling Update Quantity Request ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["update_quantity"])) {
    $product_id = (int)$_POST["product_id"];
    $quantity = (int)$_POST["quantity"];

    update_cart_quantity($product_id, $quantity);
}

// --- Handling Remove from Cart Request ---
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST["remove_from_cart"])) {
    $product_id = (int)$_POST["product_id"];
    remove_from_cart($product_id);
}

// --- Display Cart Contents ---
$cart_contents = get_cart_contents();

echo "<h2>Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item_quantity) {
        $product = $products[$product_id];
        echo "<li>" . $product['name'] . " - Quantity: " . $item_quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";

    // --- Calculate Total Price ---
    $total_price = 0;
    foreach ($cart_contents as $product_id => $item_quantity) {
        $product = $products[$product_id];
        $total_price += $product['price'] * $item_quantity;
    }
    echo "<p><strong>Total Price: $" . number_format($total_price, 2) . "</strong></p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Products</h1>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - Price: $" . $product['price'] . "</li>";
    }
    ?>
</ul>

<h2>Add to Cart</h2>
<form method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - $product['name']</option>";
        }
        ?>
    </select>
    <br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1">
    <br><br>
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

</body>
</html>

