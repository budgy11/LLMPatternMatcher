{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP:\n\n**database schema:**\n\nWe'll assume we have two tables, `products` and `orders`, with the following structure:\n\n* `products`: id (primary key), name, price\n* `orders`: id (primary key), user_id, product_id, order_date\n\n**code:**\n```php\n// db.php (database connection settings)\n$host = 'localhost';\n$dbname = 'mydb';\n$user = 'myuser';\n$password = 'mypassword';\n\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n\n// functions.php (purchase functionality)\nfunction add_product_to_cart($product_id) {\n  // check if product exists\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  $product = $stmt->fetch();\n  \n  if (!$product) {\n    throw new Exception(\"Product not found\");\n  }\n  \n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // add product to cart\n  $cart_item = array(\n    'product_id' => $product_id,\n    'quantity' => 1\n  );\n  $user_cart[] = $cart_item;\n  update_user_cart($_SESSION['user_id'], $user_cart);\n}\n\nfunction remove_product_from_cart($product_id) {\n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // find product in cart and remove it\n  foreach ($user_cart as &$cart_item) {\n    if ($cart_item['product_id'] == $product_id) {\n      unset($cart_item);\n      break;\n    }\n  }\n  \n  update_user_cart($_SESSION['user_id'], array_filter($user_cart));\n}\n\nfunction make_purchase() {\n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // calculate total cost of order\n  $total_cost = 0;\n  foreach ($user_cart as &$cart_item) {\n    $product = get_product($cart_item['product_id']);\n    $total_cost += $product['price'] * $cart_item['quantity'];\n  }\n  \n  // create new order\n  $order_date = date('Y-m-d H:i:s');\n  $stmt = $conn->prepare('INSERT INTO orders (user_id, product_id, order_date) VALUES (:user_id, :product_id, :order_date)');\n  foreach ($user_cart as &$cart_item) {\n    $stmt->execute(array(\n      ':user_id' => $_SESSION['user_id'],\n      ':product_id' => $cart_item['product_id']\n    ));\n    \n    // update product stock\n    $product = get_product($cart_item['product_id']);\n    if ($product['quantity'] > 0) {\n      $new_quantity = $product['quantity'] - $cart_item['quantity'];\n      $stmt = $conn->prepare('UPDATE products SET quantity = :quantity WHERE id = :id');\n      $stmt->execute(array(\n        ':quantity' => $new_quantity,\n        ':id' => $cart_item['product_id']\n      ));\n    }\n  }\n  \n  // update user's cart\n  update_user_cart($_SESSION['user_id'], array());\n}\n\nfunction get_product($product_id) {\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction get_user_cart($user_id) {\n  // retrieve user's cart\n  $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n  return $stmt->fetchAll();\n}\n\nfunction update_user_cart($user_id, $cart) {\n  // update user's cart\n  $stmt = $conn->prepare('UPDATE carts SET cart = :cart WHERE user_id = :user_id');\n  $stmt->bindParam(':cart', serialize($cart));\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n}\n\n// example usage:\n$_SESSION['user_id'] = 1; // set user's ID\nadd_product_to_cart(1); // add product to cart\nmake_purchase(); // make purchase\n```\nThis is a very basic implementation, and you should consider implementing additional features such as:\n\n* User authentication and authorization\n* Product categorization and filtering\n* Order status tracking (e.g. pending, shipped, delivered)\n* Payment gateway integration\n\nNote that this code assumes you have already set up a database connection using PDO and have created the necessary tables (`products` and `orders`) with the specified structure.\n\nAlso note that this is just an example and you should adapt it to your specific use case and requirements.", "code_blocks": ["```php\n// db.php (database connection settings)\n$host = 'localhost';\n$dbname = 'mydb';\n$user = 'myuser';\n$password = 'mypassword';\n\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n\n// functions.php (purchase functionality)\nfunction add_product_to_cart($product_id) {\n  // check if product exists\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  $product = $stmt->fetch();\n  \n  if (!$product) {\n    throw new Exception(\"Product not found\");\n  }\n  \n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // add product to cart\n  $cart_item = array(\n    'product_id' => $product_id,\n    'quantity' => 1\n  );\n  $user_cart[] = $cart_item;\n  update_user_cart($_SESSION['user_id'], $user_cart);\n}\n\nfunction remove_product_from_cart($product_id) {\n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // find product in cart and remove it\n  foreach ($user_cart as &$cart_item) {\n    if ($cart_item['product_id'] == $product_id) {\n      unset($cart_item);\n      break;\n    }\n  }\n  \n  update_user_cart($_SESSION['user_id'], array_filter($user_cart));\n}\n\nfunction make_purchase() {\n  // retrieve user's cart\n  $user_cart = get_user_cart($_SESSION['user_id']);\n  \n  // calculate total cost of order\n  $total_cost = 0;\n  foreach ($user_cart as &$cart_item) {\n    $product = get_product($cart_item['product_id']);\n    $total_cost += $product['price'] * $cart_item['quantity'];\n  }\n  \n  // create new order\n  $order_date = date('Y-m-d H:i:s');\n  $stmt = $conn->prepare('INSERT INTO orders (user_id, product_id, order_date) VALUES (:user_id, :product_id, :order_date)');\n  foreach ($user_cart as &$cart_item) {\n    $stmt->execute(array(\n      ':user_id' => $_SESSION['user_id'],\n      ':product_id' => $cart_item['product_id']\n    ));\n    \n    // update product stock\n    $product = get_product($cart_item['product_id']);\n    if ($product['quantity'] > 0) {\n      $new_quantity = $product['quantity'] - $cart_item['quantity'];\n      $stmt = $conn->prepare('UPDATE products SET quantity = :quantity WHERE id = :id');\n      $stmt->execute(array(\n        ':quantity' => $new_quantity,\n        ':id' => $cart_item['product_id']\n      ));\n    }\n  }\n  \n  // update user's cart\n  update_user_cart($_SESSION['user_id'], array());\n}\n\nfunction get_product($product_id) {\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction get_user_cart($user_id) {\n  // retrieve user's cart\n  $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n  return $stmt->fetchAll();\n}\n\nfunction update_user_cart($user_id, $cart) {\n  // update user's cart\n  $stmt = $conn->prepare('UPDATE carts SET cart = :cart WHERE user_id = :user_id');\n  $stmt->bindParam(':cart', serialize($cart));\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n}\n\n// example usage:\n$_SESSION['user_id'] = 1; // set user's ID\nadd_product_to_cart(1); // add product to cart\nmake_purchase(); // make purchase\n```"]}
