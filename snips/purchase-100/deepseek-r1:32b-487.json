{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should consider the structure of the application. It's common to separate concerns into different files for better management. So, I'll have an index.php for displaying products and handling the shopping cart, a config.php for database connections, and a functions.php for utility functions like adding or removing items from the cart.\n\nNext, setting up the database is essential. I'll need tables for users, products, orders, order items, and maybe categories. The products table should include details like name, description, price, quantity, and category. Orders will store user information and a unique order ID, while order items will handle each product in the order with quantities and prices.\n\nIn functions.php, I'll write functions to add or remove items from the cart. These functions will interact with the session variable $_SESSION['cart'] to keep track of selected products. Also, calculating the total price is necessary for checkout.\n\nFor user authentication, I should create a login system. Users should be able to register and log in securely using hashed passwords. Once logged in, they can view their cart, add items, and proceed to checkout.\n\nIn index.php, I'll display all available products. Each product will have an \"Add to Cart\" button that uses AJAX to update the cart without reloading the page. This improves user experience by making the interface more responsive.\n\nThe checkout process needs a form for users to enter their details like name, email, and address. After submitting, the order is saved in the orders table, and each item is stored in order_items. The session cart should be cleared after placing the order to reset the shopping process.\n\nI'll also include a logout button for logged-in users and display user information like username and email. Error handling is important, so I'll make sure to show any registration or login errors clearly.\n\nFinally, I'll ensure that all data sent to the database is sanitized to prevent SQL injection and other security issues. Testing each part thoroughly will help catch any bugs before deployment.\n</think>\n\nHere's a simple example of purchase functionality using PHP:\n\n```php\n<?php\nsession_start();\n\n// Database configuration\n$host = 'localhost';\n$dbname = 'my_store';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Add to cart function\nfunction add_to_cart($product_id) {\n    global $conn;\n    \n    // Check if product exists in database\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch();\n    \n    if (!$product) {\n        return false;\n    }\n    \n    // Add to cart session\n    $_SESSION['cart'][$product_id] = [\n        'id' => $product_id,\n        'name' => $product['name'],\n        'price' => $product['price'],\n        'quantity' => 1\n    ];\n    \n    return true;\n}\n\n// Remove from cart function\nfunction remove_from_cart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n        return true;\n    }\n    return false;\n}\n\n// Calculate total price function\nfunction calculate_total() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// Checkout process function\nfunction checkout($user_id, $address, $payment_method) {\n    global $conn;\n    \n    // Check if cart is not empty\n    if (empty($_SESSION['cart'])) {\n        return false;\n    }\n    \n    try {\n        // Start transaction\n        $conn->beginTransaction();\n        \n        // Insert order\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_price, address, payment_method) VALUES (?, ?, ?, ?)\");\n        $stmt->execute([$user_id, calculate_total(), $address, $payment_method]);\n        $order_id = $conn->lastInsertId();\n        \n        // Insert order items\n        foreach ($_SESSION['cart'] as $item) {\n            $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$order_id, $item['id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        $_SESSION['cart'] = [];\n        \n        // Commit transaction\n        $conn->commit();\n        return true;\n    } catch (PDOException $e) {\n        // Rollback transaction on error\n        $conn->rollBack();\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['add_to_cart'])) {\n        add_to_cart($_POST['product_id']);\n    } elseif (isset($_POST['remove_from_cart'])) {\n        remove_from_cart($_POST['product_id']);\n    } elseif (isset($_POST['checkout'])) {\n        $user_id = 1; // Get user ID from session or login\n        $address = $_POST['address'];\n        $payment_method = $_POST['payment_method'];\n        checkout($user_id, $address, $payment_method);\n    }\n}\n?>\n```\n\nThis is a basic implementation that includes:\n\n1. Session management for the cart\n2. Database connection setup\n3. Functions to:\n   - Add items to the cart\n   - Remove items from the cart\n   - Calculate total price of items in the cart\n   - Process checkout with order placement\n\nTo use this code, you'll need to create the following database tables:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL,\n    category_id INT\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    address VARCHAR(255) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE order_items (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n```\n\nTo use this code:\n\n1. Create a login/register system to manage users\n2. Display products with \"Add to Cart\" buttons\n3. Show the cart contents on a separate page\n4. Provide a checkout form for user details and payment information\n\nRemember to:\n- Sanitize all inputs\n- Use prepared statements to prevent SQL injection\n- Implement proper error handling\n- Add security measures like CSRF protection\n- Use HTTPS for production environments\n- Store passwords securely using password_hash()\n\nYou can expand this code by adding features like:\n- User authentication\n- Product categories\n- Search functionality\n- Sorting options\n- Pagination\n- Order tracking\n- Product reviews and ratings\n- Payment gateways integration\n\nThis is a basic example to help you get started with implementing purchase functionality in PHP. You'll need to modify it according to your specific requirements and add necessary security measures for production use.", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database configuration\n$host = 'localhost';\n$dbname = 'my_store';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Add to cart function\nfunction add_to_cart($product_id) {\n    global $conn;\n    \n    // Check if product exists in database\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch();\n    \n    if (!$product) {\n        return false;\n    }\n    \n    // Add to cart session\n    $_SESSION['cart'][$product_id] = [\n        'id' => $product_id,\n        'name' => $product['name'],\n        'price' => $product['price'],\n        'quantity' => 1\n    ];\n    \n    return true;\n}\n\n// Remove from cart function\nfunction remove_from_cart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n        return true;\n    }\n    return false;\n}\n\n// Calculate total price function\nfunction calculate_total() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// Checkout process function\nfunction checkout($user_id, $address, $payment_method) {\n    global $conn;\n    \n    // Check if cart is not empty\n    if (empty($_SESSION['cart'])) {\n        return false;\n    }\n    \n    try {\n        // Start transaction\n        $conn->beginTransaction();\n        \n        // Insert order\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_price, address, payment_method) VALUES (?, ?, ?, ?)\");\n        $stmt->execute([$user_id, calculate_total(), $address, $payment_method]);\n        $order_id = $conn->lastInsertId();\n        \n        // Insert order items\n        foreach ($_SESSION['cart'] as $item) {\n            $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$order_id, $item['id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        $_SESSION['cart'] = [];\n        \n        // Commit transaction\n        $conn->commit();\n        return true;\n    } catch (PDOException $e) {\n        // Rollback transaction on error\n        $conn->rollBack();\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['add_to_cart'])) {\n        add_to_cart($_POST['product_id']);\n    } elseif (isset($_POST['remove_from_cart'])) {\n        remove_from_cart($_POST['product_id']);\n    } elseif (isset($_POST['checkout'])) {\n        $user_id = 1; // Get user ID from session or login\n        $address = $_POST['address'];\n        $payment_method = $_POST['payment_method'];\n        checkout($user_id, $address, $payment_method);\n    }\n}\n?>\n```", null]}
