{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Connection (Replace with your actual database credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// Establish the database connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// ---------------------  Shopping Cart Functionality  ---------------------\n\n// Function to add an item to the cart\nfunction addToCart($conn, $userId, $productId, $quantity) {\n  //  (This is a basic example, in a real application you'd also handle\n  //  validation, error checking, and potentially database transactions.)\n\n  // Check if the item already exists in the cart for this user\n  $sql = \"SELECT * FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ii\", $userId, $productId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Item already in cart, increment quantity\n    $stmt = $conn->prepare(\"UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?\");\n    $stmt->bind_param(\"iii\", $quantity, $userId, $productId);\n    $stmt->execute();\n  } else {\n    // Item not in cart, add it\n    $sql = \"INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $userId, $productId, $quantity);\n    $stmt->execute();\n  }\n\n  return true; // Indicate success\n}\n\n// Function to get the contents of the cart\nfunction getCartContents($conn, $userId) {\n  $sql = \"SELECT * FROM cart WHERE user_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"i\", $userId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  $cart_items = [];\n  while ($row = $result->fetch_assoc()) {\n    $cart_items[] = $row;\n  }\n\n  return $cart_items;\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateCartQuantity($conn, $userId, $productId, $quantity) {\n  // Check if the item exists in the cart for this user\n  $sql = \"SELECT * FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ii\", $userId, $productId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Item exists, update quantity\n    $sql = \"UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $quantity, $userId, $productId);\n    $stmt->execute();\n  } else {\n    // Item doesn't exist, return false.  You might want to add an error log here.\n    return false;\n  }\n\n  return true;\n}\n\n\n// Function to remove an item from the cart\nfunction removeFromCart($conn, $userId, $productId) {\n    $sql = \"DELETE FROM cart WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ii\", $userId, $productId);\n    $stmt->execute();\n    return true;\n}\n\n\n// ---------------------  Purchase Functionality  ---------------------\n\n//  This is a simplified purchase function.  A real application would involve:\n//  - Payment processing (e.g., Stripe, PayPal)\n//  - Order fulfillment (updating inventory, generating shipping labels)\n//  - Order confirmation emails\n\n// Function to process a purchase (simplified)\nfunction processPurchase($conn, $userId, $productId, $quantity) {\n    // 1. Get the item's price (assuming a 'products' table exists)\n    $sql = \"SELECT price FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $productId);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $product = $result->fetch_assoc();\n\n    if (!$product) {\n        // Product not found\n        return false;\n    }\n\n    $item_price = $product['price'];\n\n    // 2. Calculate the total price\n    $total_price = $item_price * $quantity;\n\n    // 3.  Remove the items from the cart\n    if (!removeFromCart($conn, $userId, $productId)) {\n        // Handle error - could not remove item from cart.  Critical error!\n        return false;\n    }\n\n    // 4.  (In a real application, you'd integrate with a payment processor here)\n    //     For this example, we'll just simulate a payment.\n\n    // 5.  Update order table (example - create an 'orders' table)\n    //    This is a placeholder.\n    $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iiii\", $userId, $productId, $quantity, $total_price);\n    $stmt->execute();\n\n\n\n    return true;  // Indicate successful purchase\n}\n\n\n// ---------------------  Example Usage (Illustrative)  ---------------------\n\n//  This is just to demonstrate how the functions might be called.\n\n// 1. Add an item to the cart\nif (isset($_POST['add_to_cart'])) {\n    $userId = 1; // Example user ID\n    $productId = 101; // Example product ID\n    $quantity = $_POST['quantity'];\n\n    if (addToCart($conn, $userId, $productId, $quantity)) {\n        echo \"Item added to cart.<br>\";\n    } else {\n        echo \"Failed to add item to cart.<br>\";\n    }\n}\n\n// 2.  Get Cart Contents\n$cart_items = getCartContents($conn, 1);\necho \"<h2>Cart Contents:</h2>\";\nif (empty($cart_items)) {\n    echo \"<p>Your cart is empty.</p>\";\n} else {\n    echo \"<ul>\";\n    foreach ($cart_items as $item) {\n        echo \"<li>Product ID: \" . $item['product_id'] . \", Quantity: \" . $item['quantity'] . \"</li>\";\n    }\n    echo \"</ul>\";\n}\n\n// 3.  Process a Purchase (example)\nif (isset($_POST['purchase'])) {\n    $userId = 1;\n    $productId = 101;\n    $quantity = $_POST['quantity'];\n    if (processPurchase($conn, $userId, $productId, $quantity)) {\n        echo \"Purchase successful!  (Simulated)<br>\";\n    } else {\n        echo \"Purchase failed.<br>\";\n    }\n}\n\n\n// Close the database connection\n$conn->close();\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Clearer connection setup with error handling.  Placeholder credentials are used. *Replace these with your actual database details.*\n* **Prepared Statements:**  Crucially, *all* database queries now use prepared statements (`$conn->prepare()`). This prevents SQL injection vulnerabilities, a *critical* security concern.  The `bind_param()` function is used to safely insert values into the prepared statements.\n* **`mysqli` object:** Uses the `mysqli` extension for database interaction.  This is the standard extension for PHP.\n* **Cart Functionality:**\n    * `addToCart`, `getCartContents`, `updateCartQuantity`, and `removeFromCart` functions are implemented.  These provide the core shopping cart operations.\n    * The `addToCart` function now correctly handles adding an item to the cart, either incrementing an existing quantity or adding a new item.\n    * `updateCartQuantity` correctly updates the quantity of an existing item.\n    * `removeFromCart` correctly removes items.\n* **Purchase Functionality:**\n    * `processPurchase` function simulates a purchase.  *Important:* This is a simplified example. A real-world application would integrate with a payment processor (Stripe, PayPal) and potentially update inventory and generate shipping labels.\n* **Error Handling:** Basic error handling is included (checking for database connection errors and product not found).  More robust error handling would be needed for a production application.\n* **Clearer Example Usage:** The `if (isset($_POST['...']))` blocks demonstrate how to call the functions from a web form.  This makes it easier to understand how the code works.\n* **Comments and Documentation:**  Extensive comments explain the purpose of each function and section of the code.\n* **Security:** The use of prepared statements is the most important security improvement.\n* **Code Organization:** The code is organized into functions for better reusability and maintainability.\n* **Database Table Structure (Assumed):** The code assumes the existence of the following database tables:\n    * `products`:  `id` (INT, PRIMARY KEY), `name`, `price`, etc.\n    * `cart`:  `id` (INT, PRIMARY KEY, AUTO_INCREMENT), `user_id` (INT), `product_id` (INT), `quantity` (INT)\n    * `orders`: `id` (INT, PRIMARY KEY, AUTO_INCREMENT), `user_id` (INT), `product_id` (INT), `quantity` (INT), `total_price` (DECIMAL)\n\nHow to use it:\n\n1. **Set up your database:** Create the `products`, `cart`, and `orders` tables in your MySQL database.\n2. **Replace database credentials:** Change the `$host`, `$username`, `$password`, and `$dbname` variables in the code to match your database connection details.\n3. **Create a web form:**  Create an HTML form that allows a user to:\n   * Add an item to the cart (including a quantity input field).\n   * (Potentially) Process the purchase.\n4. **Connect the form to the PHP code:**  Use `$_POST` to retrieve the data from the form and call the appropriate PHP functions.\n5. **Run the PHP code:**  Deploy the PHP code to a web server.\n\nThis improved version provides a more secure and functional foundation for a shopping cart and purchase system. Remember to adapt and expand upon this example to meet the specific requirements of your application.\n", "code_blocks": ["```php\n<?php\n\n// Database Connection (Replace with your actual database credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// Establish the database connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// ---------------------  Shopping Cart Functionality  ---------------------\n\n// Function to add an item to the cart\nfunction addToCart($conn, $userId, $productId, $quantity) {\n  //  (This is a basic example, in a real application you'd also handle\n  //  validation, error checking, and potentially database transactions.)\n\n  // Check if the item already exists in the cart for this user\n  $sql = \"SELECT * FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ii\", $userId, $productId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Item already in cart, increment quantity\n    $stmt = $conn->prepare(\"UPDATE cart SET quantity = quantity + ? WHERE user_id = ? AND product_id = ?\");\n    $stmt->bind_param(\"iii\", $quantity, $userId, $productId);\n    $stmt->execute();\n  } else {\n    // Item not in cart, add it\n    $sql = \"INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $userId, $productId, $quantity);\n    $stmt->execute();\n  }\n\n  return true; // Indicate success\n}\n\n// Function to get the contents of the cart\nfunction getCartContents($conn, $userId) {\n  $sql = \"SELECT * FROM cart WHERE user_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"i\", $userId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  $cart_items = [];\n  while ($row = $result->fetch_assoc()) {\n    $cart_items[] = $row;\n  }\n\n  return $cart_items;\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateCartQuantity($conn, $userId, $productId, $quantity) {\n  // Check if the item exists in the cart for this user\n  $sql = \"SELECT * FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ii\", $userId, $productId);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Item exists, update quantity\n    $sql = \"UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $quantity, $userId, $productId);\n    $stmt->execute();\n  } else {\n    // Item doesn't exist, return false.  You might want to add an error log here.\n    return false;\n  }\n\n  return true;\n}\n\n\n// Function to remove an item from the cart\nfunction removeFromCart($conn, $userId, $productId) {\n    $sql = \"DELETE FROM cart WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ii\", $userId, $productId);\n    $stmt->execute();\n    return true;\n}\n\n\n// ---------------------  Purchase Functionality  ---------------------\n\n//  This is a simplified purchase function.  A real application would involve:\n//  - Payment processing (e.g., Stripe, PayPal)\n//  - Order fulfillment (updating inventory, generating shipping labels)\n//  - Order confirmation emails\n\n// Function to process a purchase (simplified)\nfunction processPurchase($conn, $userId, $productId, $quantity) {\n    // 1. Get the item's price (assuming a 'products' table exists)\n    $sql = \"SELECT price FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $productId);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $product = $result->fetch_assoc();\n\n    if (!$product) {\n        // Product not found\n        return false;\n    }\n\n    $item_price = $product['price'];\n\n    // 2. Calculate the total price\n    $total_price = $item_price * $quantity;\n\n    // 3.  Remove the items from the cart\n    if (!removeFromCart($conn, $userId, $productId)) {\n        // Handle error - could not remove item from cart.  Critical error!\n        return false;\n    }\n\n    // 4.  (In a real application, you'd integrate with a payment processor here)\n    //     For this example, we'll just simulate a payment.\n\n    // 5.  Update order table (example - create an 'orders' table)\n    //    This is a placeholder.\n    $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iiii\", $userId, $productId, $quantity, $total_price);\n    $stmt->execute();\n\n\n\n    return true;  // Indicate successful purchase\n}\n\n\n// ---------------------  Example Usage (Illustrative)  ---------------------\n\n//  This is just to demonstrate how the functions might be called.\n\n// 1. Add an item to the cart\nif (isset($_POST['add_to_cart'])) {\n    $userId = 1; // Example user ID\n    $productId = 101; // Example product ID\n    $quantity = $_POST['quantity'];\n\n    if (addToCart($conn, $userId, $productId, $quantity)) {\n        echo \"Item added to cart.<br>\";\n    } else {\n        echo \"Failed to add item to cart.<br>\";\n    }\n}\n\n// 2.  Get Cart Contents\n$cart_items = getCartContents($conn, 1);\necho \"<h2>Cart Contents:</h2>\";\nif (empty($cart_items)) {\n    echo \"<p>Your cart is empty.</p>\";\n} else {\n    echo \"<ul>\";\n    foreach ($cart_items as $item) {\n        echo \"<li>Product ID: \" . $item['product_id'] . \", Quantity: \" . $item['quantity'] . \"</li>\";\n    }\n    echo \"</ul>\";\n}\n\n// 3.  Process a Purchase (example)\nif (isset($_POST['purchase'])) {\n    $userId = 1;\n    $productId = 101;\n    $quantity = $_POST['quantity'];\n    if (processPurchase($conn, $userId, $productId, $quantity)) {\n        echo \"Purchase successful!  (Simulated)<br>\";\n    } else {\n        echo \"Purchase failed.<br>\";\n    }\n}\n\n\n// Close the database connection\n$conn->close();\n?>\n```"]}
