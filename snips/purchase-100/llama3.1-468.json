{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of a basic purchase functionality implemented in PHP. This will include features for adding products to cart, viewing cart contents, and processing payment.\n\n**Database Setup**\n\nFirstly, let's set up the database schema to store the products and orders.\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE carts (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    total DECIMAL(10, 2) DEFAULT 0.00,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE cart_items (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    cart_id INT,\n    product_id INT,\n    quantity INT,\n    price DECIMAL(10, 2),\n    FOREIGN KEY (cart_id) REFERENCES carts(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\nLet's create a PHP class `Purchase` to encapsulate the purchase functionality.\n\n```php\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database using PDO\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n    }\n\n    /**\n     * Add product to cart\n     *\n     * @param int $user_id\n     * @param int $product_id\n     * @param int $quantity\n     */\n    public function addProductToCart($user_id, $product_id, $quantity) {\n        // Get current user's cart id\n        $cartId = $this->getCartIdByUser($user_id);\n\n        if (!$cartId) {\n            // Create new cart for the user\n            $stmt = $this->db->prepare('INSERT INTO carts (user_id) VALUES (:user_id)');\n            $stmt->execute([':user_id' => $user_id]);\n            $cartId = $this->db->lastInsertId();\n        }\n\n        // Add product to cart\n        $stmt = $this->db->prepare('INSERT INTO cart_items (cart_id, product_id, quantity, price) VALUES (:cart_id, :product_id, :quantity, :price)');\n        $product = $this->getProduct($product_id);\n        $stmt->execute([\n            ':cart_id' => $cartId,\n            ':product_id' => $product_id,\n            ':quantity' => $quantity,\n            ':price' => $product['price']\n        ]);\n\n        // Update cart total\n        $this->updateCartTotal($cartId, $product['price'] * $quantity);\n    }\n\n    /**\n     * Get product details by id\n     *\n     * @param int $productId\n     * @return array\n     */\n    private function getProduct($productId) {\n        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :product_id');\n        $stmt->execute([':product_id' => $productId]);\n        return $stmt->fetch();\n    }\n\n    /**\n     * Get cart id by user\n     *\n     * @param int $userId\n     * @return int|null\n     */\n    private function getCartIdByUser($userId) {\n        $stmt = $this->db->prepare('SELECT id FROM carts WHERE user_id = :user_id');\n        $stmt->execute([':user_id' => $userId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Update cart total\n     *\n     * @param int $cartId\n     * @param float $newTotal\n     */\n    private function updateCartTotal($cartId, $newTotal) {\n        $stmt = $this->db->prepare('UPDATE carts SET total = :total WHERE id = :cart_id');\n        $stmt->execute([':total' => $newTotal, ':cart_id' => $cartId]);\n    }\n\n    /**\n     * Process payment and create order\n     *\n     * @param int $cartId\n     */\n    public function processPayment($cartId) {\n        // Get cart contents\n        $cartItems = $this->getCartItems($cartId);\n\n        // Create new order\n        $stmt = $this->db->prepare('INSERT INTO orders (user_id, total, created_at) VALUES (:user_id, :total, NOW())');\n        $cartTotal = $this->getCartTotal($cartId);\n        $stmt->execute([':user_id' => $userId, ':total' => $cartTotal]);\n\n        // Update product quantities\n        foreach ($cartItems as $item) {\n            $this->updateProductQuantity($item['product_id'], $item['quantity']);\n        }\n\n        // Remove cart items\n        $this->removeCartItems($cartId);\n    }\n\n    /**\n     * Get cart contents by id\n     *\n     * @param int $cartId\n     * @return array\n     */\n    private function getCartItems($cartId) {\n        $stmt = $this->db->prepare('SELECT ci.*, p.name AS product_name FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Get cart total\n     *\n     * @param int $cartId\n     * @return float\n     */\n    private function getCartTotal($cartId) {\n        $stmt = $this->db->prepare('SELECT total FROM carts WHERE id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Update product quantity\n     *\n     * @param int $productId\n     * @param int $newQuantity\n     */\n    private function updateProductQuantity($productId, $newQuantity) {\n        $stmt = $this->db->prepare('UPDATE products SET quantity = :quantity WHERE id = :product_id');\n        $stmt->execute([':quantity' => $newQuantity, ':product_id' => $productId]);\n    }\n\n    /**\n     * Remove cart items\n     *\n     * @param int $cartId\n     */\n    private function removeCartItems($cartId) {\n        $stmt = $this->db->prepare('DELETE FROM cart_items WHERE cart_id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n    }\n}\n```\n\n**Example Usage**\n\n```php\n$purchase = new Purchase();\n\n// Add product to cart\n$userId = 1;\n$product_id = 1;\n$quantity = 2;\n$purchase->addProductToCart($userId, $product_id, $quantity);\n\n// Process payment and create order\n$cartId = // get current user's cart id\n$purchase->processPayment($cartId);\n```\n\nThis is a basic example of a purchase functionality implemented in PHP. You can extend this code to include more features such as user authentication, payment gateways, and order management.\n\nNote: This code assumes you have a database set up with the necessary tables and fields. The database schema and PHP code are just examples and may need to be modified to fit your specific requirements.", "code_blocks": [null, "```php\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database using PDO\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n    }\n\n    /**\n     * Add product to cart\n     *\n     * @param int $user_id\n     * @param int $product_id\n     * @param int $quantity\n     */\n    public function addProductToCart($user_id, $product_id, $quantity) {\n        // Get current user's cart id\n        $cartId = $this->getCartIdByUser($user_id);\n\n        if (!$cartId) {\n            // Create new cart for the user\n            $stmt = $this->db->prepare('INSERT INTO carts (user_id) VALUES (:user_id)');\n            $stmt->execute([':user_id' => $user_id]);\n            $cartId = $this->db->lastInsertId();\n        }\n\n        // Add product to cart\n        $stmt = $this->db->prepare('INSERT INTO cart_items (cart_id, product_id, quantity, price) VALUES (:cart_id, :product_id, :quantity, :price)');\n        $product = $this->getProduct($product_id);\n        $stmt->execute([\n            ':cart_id' => $cartId,\n            ':product_id' => $product_id,\n            ':quantity' => $quantity,\n            ':price' => $product['price']\n        ]);\n\n        // Update cart total\n        $this->updateCartTotal($cartId, $product['price'] * $quantity);\n    }\n\n    /**\n     * Get product details by id\n     *\n     * @param int $productId\n     * @return array\n     */\n    private function getProduct($productId) {\n        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :product_id');\n        $stmt->execute([':product_id' => $productId]);\n        return $stmt->fetch();\n    }\n\n    /**\n     * Get cart id by user\n     *\n     * @param int $userId\n     * @return int|null\n     */\n    private function getCartIdByUser($userId) {\n        $stmt = $this->db->prepare('SELECT id FROM carts WHERE user_id = :user_id');\n        $stmt->execute([':user_id' => $userId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Update cart total\n     *\n     * @param int $cartId\n     * @param float $newTotal\n     */\n    private function updateCartTotal($cartId, $newTotal) {\n        $stmt = $this->db->prepare('UPDATE carts SET total = :total WHERE id = :cart_id');\n        $stmt->execute([':total' => $newTotal, ':cart_id' => $cartId]);\n    }\n\n    /**\n     * Process payment and create order\n     *\n     * @param int $cartId\n     */\n    public function processPayment($cartId) {\n        // Get cart contents\n        $cartItems = $this->getCartItems($cartId);\n\n        // Create new order\n        $stmt = $this->db->prepare('INSERT INTO orders (user_id, total, created_at) VALUES (:user_id, :total, NOW())');\n        $cartTotal = $this->getCartTotal($cartId);\n        $stmt->execute([':user_id' => $userId, ':total' => $cartTotal]);\n\n        // Update product quantities\n        foreach ($cartItems as $item) {\n            $this->updateProductQuantity($item['product_id'], $item['quantity']);\n        }\n\n        // Remove cart items\n        $this->removeCartItems($cartId);\n    }\n\n    /**\n     * Get cart contents by id\n     *\n     * @param int $cartId\n     * @return array\n     */\n    private function getCartItems($cartId) {\n        $stmt = $this->db->prepare('SELECT ci.*, p.name AS product_name FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Get cart total\n     *\n     * @param int $cartId\n     * @return float\n     */\n    private function getCartTotal($cartId) {\n        $stmt = $this->db->prepare('SELECT total FROM carts WHERE id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Update product quantity\n     *\n     * @param int $productId\n     * @param int $newQuantity\n     */\n    private function updateProductQuantity($productId, $newQuantity) {\n        $stmt = $this->db->prepare('UPDATE products SET quantity = :quantity WHERE id = :product_id');\n        $stmt->execute([':quantity' => $newQuantity, ':product_id' => $productId]);\n    }\n\n    /**\n     * Remove cart items\n     *\n     * @param int $cartId\n     */\n    private function removeCartItems($cartId) {\n        $stmt = $this->db->prepare('DELETE FROM cart_items WHERE cart_id = :cart_id');\n        $stmt->execute([':cart_id' => $cartId]);\n    }\n}\n```", "```php\n$purchase = new Purchase();\n\n// Add product to cart\n$userId = 1;\n$product_id = 1;\n$quantity = 2;\n$purchase->addProductToCart($userId, $product_id, $quantity);\n\n// Process payment and create order\n$cartId = // get current user's cart id\n$purchase->processPayment($cartId);\n```"]}
