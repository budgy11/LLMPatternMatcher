{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, so the user wants to create a purchase functionality using PHP. I need to figure out how to approach this step by step.\n\nFirst, I should outline what a basic purchase functionality entails. It probably includes displaying products, allowing users to add them to a cart, and then processing the checkout.\n\nI'll start with setting up the database because that's foundational. The user will need tables for products, orders, order items, and maybe users if authentication is required. I should include essential fields like product ID, name, price, description, stock quantity, and timestamps for orders.\n\nNext, connecting to the database using PHP is crucial. Using PDO with prepared statements is a good practice to prevent SQL injection. I'll make sure to handle any connection errors gracefully.\n\nFor displaying products, I'll write a function that fetches all products from the database and returns them as an array. This way, the user can easily loop through and display each product on their webpage. Including details like price, description, and an \"Add to Cart\" button is important for user interaction.\n\nHandling the cart requires sessions because they allow data to persist across pages. I'll create a function that adds products to the session when the user clicks \"Add to Cart.\" This involves checking if the product is already in the cart and updating its quantity or adding it as a new item if not.\n\nUpdating the cart is another key step. Users should be able to change the quantity of items they've added. I'll write a function that takes the product ID and new quantity, then updates the session accordingly.\n\nProcessing the order involves capturing user details and saving both the order and its items into the database. Using transactions here ensures data consistency. After inserting the order, I'll loop through each item in the cart to insert them into the order_items table and decrease their stock in the products table.\n\nGenerating an invoice is necessary for users to have a receipt of their purchase. The function should calculate totals including tax, then display this information clearly on the page. Including order ID, user details, items, quantities, prices, and total amount makes it comprehensive.\n\nFinally, displaying all orders gives the user an overview of past transactions. Fetching each order along with its items from the database allows for a detailed view. Looping through each order and then through each item within that order ensures nothing is missed.\n\nI should also consider mentioning optional features like payment integration or additional validation to give the user ideas for expanding the functionality further. Including sample HTML code shows how to implement these functions in a real application, making the explanation more concrete.\n\nThroughout the process, I need to ensure that the code is clean, well-commented, and handles errors appropriately to make it easy for the user to understand and modify as needed.\n</think>\n\nHere's an example of how you can create a purchase functionality using PHP. This example includes basic product display, cart management, and checkout functionality:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to get products\nfunction getProducts() {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to add product to cart\nfunction addToCart($product_id, $quantity = 1) {\n    session_start();\n    \n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        $stmt = $conn->prepare(\"SELECT name, price FROM products WHERE id = ?\");\n        $stmt->execute(array($product_id));\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($row) {\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $row['name'],\n                'price' => $row['price'],\n                'quantity' => $quantity\n            );\n        }\n    }\n}\n\n// Function to update cart quantity\nfunction updateCart($product_id, $new_quantity) {\n    session_start();\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to remove item from cart\nfunction removeFromCart($product_id) {\n    session_start();\n    \n    unset($_SESSION['cart'][$product_id]);\n}\n\n// Function to process order\nfunction processOrder() {\n    session_start();\n\n    if (!empty($_SESSION['cart'])) {\n        try {\n            // Start transaction\n            $conn->beginTransaction();\n\n            // Insert order into orders table\n            $orderStmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n            $totalAmount = calculateTotal();\n            $orderStmt->execute(array($_SESSION['user_id'], $totalAmount));\n            $orderId = $conn->lastInsertId();\n\n            // Insert order items into order_items table\n            foreach ($_SESSION['cart'] as $item) {\n                $orderItemStmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n                $orderItemStmt->execute(array($orderId, $item['id'], $item['quantity'], $item['price']));\n            }\n\n            // Decrease stock quantity\n            foreach ($_SESSION['cart'] as $item) {\n                $stockUpdateStmt = $conn->prepare(\"UPDATE products SET stock_quantity = stock_quantity - ? WHERE id = ?\");\n                $stockUpdateStmt->execute(array($item['quantity'], $item['id']));\n            }\n\n            // Commit transaction\n            $conn->commit();\n\n            // Clear cart\n            unset($_SESSION['cart']);\n            return true;\n        } catch(PDOException $e) {\n            // Rollback transaction on error\n            $conn->rollback();\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    return false;\n}\n\n// Function to calculate total amount of items in cart\nfunction calculateTotal() {\n    session_start();\n\n    $total = 0;\n\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n\n    return $total;\n}\n\n// Function to generate invoice\nfunction generateInvoice($orderId) {\n    global $conn;\n\n    try {\n        // Get order details\n        $orderStmt = $conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n        $orderStmt->execute(array($orderId));\n        $order = $orderStmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$order) {\n            echo \"Order not found!\";\n            return;\n        }\n\n        // Get order items\n        $itemsStmt = $conn->prepare(\"SELECT * FROM order_items WHERE order_id = ?\");\n        $itemsStmt->execute(array($orderId));\n        $items = $itemsStmt->fetchAll(PDO::FETCH_ASSOC);\n\n        // Display invoice\n        echo \"<h2>Invoice</h2>\";\n        echo \"<p>Order ID: \" . $order['id'] . \"</p>\";\n        echo \"<p>Date: \" . $order['created_at'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n        echo \"<table border='1'>\";\n        echo \"<tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n        \n        foreach ($items as $item) {\n            echo \"<tr>\";\n            echo \"<td>\" . $item['product_id'] . \"</td>\";\n            echo \"<td>\" . $item['quantity'] . \"</td>\";\n            echo \"<td>$\" . number_format($item['price'], 2) . \"</td>\";\n            echo \"</tr>\";\n        }\n\n        echo \"</table>\";\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Function to display all orders\nfunction displayOrders() {\n    global $conn;\n\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM orders ORDER BY created_at DESC\");\n        $stmt->execute();\n        $orders = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n        if (!empty($orders)) {\n            echo \"<table border='1'>\";\n            echo \"<tr><th>Order ID</th><th>User ID</th><th>Total Amount</th><th>Date</th></tr>\";\n            \n            foreach ($orders as $order) {\n                echo \"<tr>\";\n                echo \"<td>\" . $order['id'] . \"</td>\";\n                echo \"<td>\" . $order['user_id'] . \"</td>\";\n                echo \"<td>$\" . number_format($order['total_amount'], 2) . \"</td>\";\n                echo \"<td>\" . $order['created_at'] . \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"</table>\";\n        } else {\n            echo \"No orders found!\";\n        }\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Sample usage:\nsession_start();\n\nif (isset($_POST['add_to_cart'])) {\n    addToCart($_POST['product_id'], $_POST['quantity']);\n}\n\nif (isset($_POST['update_cart'])) {\n    foreach ($_POST as $key => $value) {\n        if (strpos($key, 'quantity_') === 0) {\n            $productId = substr($key, 9);\n            updateCart($productId, $value);\n        }\n    }\n}\n\nif (isset($_GET['remove'])) {\n    removeFromCart($_GET['remove']);\n}\n\nif (isset($_POST['checkout'])) {\n    if (processOrder()) {\n        echo \"Thank you for your purchase!\";\n    }\n}\n\n// Display products\n$products = getProducts();\nforeach ($products as $product) {\n    echo \"<div>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<p>Description: \" . $product['description'] . \"</p>\";\n    echo \"<form method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $product['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' value='1'>\";\n    echo \"<button type='submit' name='add_to_cart'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n\n// Display cart\necho \"<h2>Your Cart:</h2>\";\nif (!empty($_SESSION['cart'])) {\n    echo \"<form method='post'>\";\n    echo \"<table border='1'>\";\n    echo \"<tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n    \n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<tr>\";\n        echo \"<td>\" . $item['name'] . \"</td>\";\n        echo \"<td><input type='number' name='quantity_\" . $item['id'] . \"' value='\" . $item['quantity'] . \"' min='1'></td>\";\n        echo \"<td>$\" . number_format($item['price'], 2) . \"</td>\";\n        echo \"<td><a href='?remove=\" . $item['id'] . \"'>Remove</a></td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n    echo \"<button type='submit' name='update_cart'>Update Cart</button>\";\n    echo \"</form>\";\n\n    if (isset($_SESSION['user_id'])) {\n        echo \"<form method='post'>\";\n        echo \"<h3>Proceed to Checkout</h3>\";\n        echo \"<button type='submit' name='checkout'>Checkout</button>\";\n        echo \"</form>\";\n    } else {\n        echo \"<p>Please <a href='login.php'>login</a> to checkout.</p>\";\n    }\n\n    echo \"<p>Total: $\" . number_format(calculateTotal(), 2) . \"</p>\";\n} else {\n    echo \"Your cart is empty!\";\n}\n\n// Display orders\ndisplayOrders();\n\n$conn = null;\n?>\n```\n\nThis code includes:\n\n1. Database connection setup\n\n2. Product management functions:\n   - getProducts(): Retrieve all products from database\n   - addToCart(): Add product to shopping cart\n   - updateCart(): Update item quantity in cart\n   - removeFromCart(): Remove item from cart\n\n3. Order processing functions:\n   - processOrder(): Handle checkout and save order to database\n   - calculateTotal(): Calculate total amount of items in cart\n   - generateInvoice(): Display invoice for a specific order\n   - displayOrders(): Show all orders in the system\n\n4. Session-based shopping cart functionality\n\n5. Basic HTML output for products, cart, and orders\n\nTo use this code:\n\n1. Create a database named 'shopping_cart' with tables:\n   ```sql\n   CREATE TABLE products (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL,\n       description TEXT,\n       stock_quantity INT NOT NULL DEFAULT 0\n   );\n\n   CREATE TABLE orders (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       user_id INT NOT NULL,\n       total_amount DECIMAL(10, 2) NOT NULL,\n       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n   );\n\n   CREATE TABLE order_items (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       order_id INT NOT NULL,\n       product_id INT NOT NULL,\n       quantity INT NOT NULL,\n       price DECIMAL(10, 2) NOT NULL\n   );\n   ```\n\n2. Add some test products to the database\n\n3. Customize the code according to your needs\n\n4. You can add additional features like:\n   - User authentication\n   - Payment integration\n   - Email notifications\n   - More validation\n   - Error handling\n   - Shipping options\n   - Coupon codes\n   - Order status tracking\n\nRemember to implement proper security measures, error handling, and input validation in a production environment.\n\nThis is a basic example to get you started. You can expand upon this foundation based on your specific requirements.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to get products\nfunction getProducts() {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to add product to cart\nfunction addToCart($product_id, $quantity = 1) {\n    session_start();\n    \n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        $stmt = $conn->prepare(\"SELECT name, price FROM products WHERE id = ?\");\n        $stmt->execute(array($product_id));\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($row) {\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $row['name'],\n                'price' => $row['price'],\n                'quantity' => $quantity\n            );\n        }\n    }\n}\n\n// Function to update cart quantity\nfunction updateCart($product_id, $new_quantity) {\n    session_start();\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to remove item from cart\nfunction removeFromCart($product_id) {\n    session_start();\n    \n    unset($_SESSION['cart'][$product_id]);\n}\n\n// Function to process order\nfunction processOrder() {\n    session_start();\n\n    if (!empty($_SESSION['cart'])) {\n        try {\n            // Start transaction\n            $conn->beginTransaction();\n\n            // Insert order into orders table\n            $orderStmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n            $totalAmount = calculateTotal();\n            $orderStmt->execute(array($_SESSION['user_id'], $totalAmount));\n            $orderId = $conn->lastInsertId();\n\n            // Insert order items into order_items table\n            foreach ($_SESSION['cart'] as $item) {\n                $orderItemStmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n                $orderItemStmt->execute(array($orderId, $item['id'], $item['quantity'], $item['price']));\n            }\n\n            // Decrease stock quantity\n            foreach ($_SESSION['cart'] as $item) {\n                $stockUpdateStmt = $conn->prepare(\"UPDATE products SET stock_quantity = stock_quantity - ? WHERE id = ?\");\n                $stockUpdateStmt->execute(array($item['quantity'], $item['id']));\n            }\n\n            // Commit transaction\n            $conn->commit();\n\n            // Clear cart\n            unset($_SESSION['cart']);\n            return true;\n        } catch(PDOException $e) {\n            // Rollback transaction on error\n            $conn->rollback();\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    return false;\n}\n\n// Function to calculate total amount of items in cart\nfunction calculateTotal() {\n    session_start();\n\n    $total = 0;\n\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n\n    return $total;\n}\n\n// Function to generate invoice\nfunction generateInvoice($orderId) {\n    global $conn;\n\n    try {\n        // Get order details\n        $orderStmt = $conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n        $orderStmt->execute(array($orderId));\n        $order = $orderStmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$order) {\n            echo \"Order not found!\";\n            return;\n        }\n\n        // Get order items\n        $itemsStmt = $conn->prepare(\"SELECT * FROM order_items WHERE order_id = ?\");\n        $itemsStmt->execute(array($orderId));\n        $items = $itemsStmt->fetchAll(PDO::FETCH_ASSOC);\n\n        // Display invoice\n        echo \"<h2>Invoice</h2>\";\n        echo \"<p>Order ID: \" . $order['id'] . \"</p>\";\n        echo \"<p>Date: \" . $order['created_at'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n        echo \"<table border='1'>\";\n        echo \"<tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n        \n        foreach ($items as $item) {\n            echo \"<tr>\";\n            echo \"<td>\" . $item['product_id'] . \"</td>\";\n            echo \"<td>\" . $item['quantity'] . \"</td>\";\n            echo \"<td>$\" . number_format($item['price'], 2) . \"</td>\";\n            echo \"</tr>\";\n        }\n\n        echo \"</table>\";\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Function to display all orders\nfunction displayOrders() {\n    global $conn;\n\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM orders ORDER BY created_at DESC\");\n        $stmt->execute();\n        $orders = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n        if (!empty($orders)) {\n            echo \"<table border='1'>\";\n            echo \"<tr><th>Order ID</th><th>User ID</th><th>Total Amount</th><th>Date</th></tr>\";\n            \n            foreach ($orders as $order) {\n                echo \"<tr>\";\n                echo \"<td>\" . $order['id'] . \"</td>\";\n                echo \"<td>\" . $order['user_id'] . \"</td>\";\n                echo \"<td>$\" . number_format($order['total_amount'], 2) . \"</td>\";\n                echo \"<td>\" . $order['created_at'] . \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"</table>\";\n        } else {\n            echo \"No orders found!\";\n        }\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Sample usage:\nsession_start();\n\nif (isset($_POST['add_to_cart'])) {\n    addToCart($_POST['product_id'], $_POST['quantity']);\n}\n\nif (isset($_POST['update_cart'])) {\n    foreach ($_POST as $key => $value) {\n        if (strpos($key, 'quantity_') === 0) {\n            $productId = substr($key, 9);\n            updateCart($productId, $value);\n        }\n    }\n}\n\nif (isset($_GET['remove'])) {\n    removeFromCart($_GET['remove']);\n}\n\nif (isset($_POST['checkout'])) {\n    if (processOrder()) {\n        echo \"Thank you for your purchase!\";\n    }\n}\n\n// Display products\n$products = getProducts();\nforeach ($products as $product) {\n    echo \"<div>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<p>Description: \" . $product['description'] . \"</p>\";\n    echo \"<form method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $product['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' value='1'>\";\n    echo \"<button type='submit' name='add_to_cart'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n\n// Display cart\necho \"<h2>Your Cart:</h2>\";\nif (!empty($_SESSION['cart'])) {\n    echo \"<form method='post'>\";\n    echo \"<table border='1'>\";\n    echo \"<tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n    \n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<tr>\";\n        echo \"<td>\" . $item['name'] . \"</td>\";\n        echo \"<td><input type='number' name='quantity_\" . $item['id'] . \"' value='\" . $item['quantity'] . \"' min='1'></td>\";\n        echo \"<td>$\" . number_format($item['price'], 2) . \"</td>\";\n        echo \"<td><a href='?remove=\" . $item['id'] . \"'>Remove</a></td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n    echo \"<button type='submit' name='update_cart'>Update Cart</button>\";\n    echo \"</form>\";\n\n    if (isset($_SESSION['user_id'])) {\n        echo \"<form method='post'>\";\n        echo \"<h3>Proceed to Checkout</h3>\";\n        echo \"<button type='submit' name='checkout'>Checkout</button>\";\n        echo \"</form>\";\n    } else {\n        echo \"<p>Please <a href='login.php'>login</a> to checkout.</p>\";\n    }\n\n    echo \"<p>Total: $\" . number_format(calculateTotal(), 2) . \"</p>\";\n} else {\n    echo \"Your cart is empty!\";\n}\n\n// Display orders\ndisplayOrders();\n\n$conn = null;\n?>\n```"]}
