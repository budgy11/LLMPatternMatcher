{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Connection (Replace with your database credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Establish database connection\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Functions ---\n\n/**\n * Adds a new order to the database.\n *\n * @param array $orderData  An associative array containing order details.\n *                          Example: ['product_id' => 123, 'quantity' => 2, 'customer_id' => 456]\n * @return int|false  The ID of the new order if successful, or false on failure.\n */\nfunction addOrder(array $orderData) {\n  global $conn;\n\n  $product_id = $orderData['product_id'];\n  $quantity = $orderData['quantity'];\n  $customer_id = $orderData['customer_id'];\n\n  // Sanitize inputs (important for security!) -  This is a basic example.  Expand as needed.\n  $product_id = (int)$product_id;\n  $quantity = (int)$quantity;\n  $customer_id = (int)$customer_id;\n\n  // SQL Query\n  $sql = \"INSERT INTO orders (product_id, quantity, customer_id) VALUES (?, ?, ?)\";\n\n  // Prepare statement\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt) {\n    // Bind parameters\n    $stmt->bind_param(\"iii\", $product_id, $quantity, $customer_id);\n\n    // Execute statement\n    if ($stmt->execute()) {\n      // Get the last inserted ID\n      $order_id = $conn->insert_id;\n      return $order_id; // Return the actual ID inserted\n    } else {\n      error_log(\"Query failed: \" . $conn->error);\n      return false;\n    }\n  } else {\n    error_log(\"Prepare failed: \" . $conn->error);\n    return false;\n  }\n\n  // Close statement\n  $stmt->close();\n}\n\n/**\n * Retrieves product details by product_id.\n *\n * @param int $product_id The ID of the product to retrieve.\n * @return array|null An associative array containing product details, or null if not found.\n */\nfunction getProductDetails(int $product_id) {\n  $sql = \"SELECT * FROM products WHERE id = ?\";\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt) {\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n      $row = $result->fetch_assoc();\n      return $row;\n    } else {\n      return null;\n    }\n\n    $stmt->close();\n  } else {\n    error_log(\"Prepare failed: \" . $conn->error);\n    return null;\n  }\n}\n\n// --- Example Usage (Handle form submission or other triggering event) ---\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get form data\n  $product_id = $_POST[\"product_id\"];\n  $quantity = $_POST[\"quantity\"];\n  $customer_id = $_POST[\"customer_id\"];\n\n  // Validate input (Important!  Don't just trust user input.)\n  if (!is_numeric($product_id) || $product_id <= 0) {\n    $error = \"Invalid product ID.\";\n  } elseif (!is_numeric($quantity) || $quantity <= 0) {\n    $error = \"Invalid quantity.\";\n  } elseif (!is_numeric($customer_id) || $customer_id <= 0) {\n    $error = \"Invalid customer ID.\";\n  } else {\n\n    // Add the order to the database\n    $order_id = addOrder([\"product_id\" => $product_id, \"quantity\" => $quantity, \"customer_id\" => $customer_id]);\n\n    if ($order_id) {\n      $message = \"Order placed successfully! Order ID: \" . $order_id;\n    } else {\n      $error = \"Failed to place order. Please try again.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase Functionality</title>\n</head>\n<body>\n\n  <h1>Purchase Order</h1>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <?php if (isset($message)) { ?>\n    <p style=\"color: green;\"><?php echo $message; ?></p>\n  <?php } ?>\n\n\n  <form method=\"post\" action=\"\">\n    <label for=\"product_id\">Product ID:</label>\n    <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n    <br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n    <br><br>\n\n    <label for=\"customer_id\">Customer ID:</label>\n    <input type=\"number\" id=\"customer_id\" name=\"customer_id\" required>\n    <br><br>\n\n    <button type=\"submit\">Place Order</button>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses `mysqli` which is the most common and recommended method for connecting to MySQL databases in PHP. *Replace the placeholder credentials* (`$host`, `$username`, `$password`, `$database`) with your actual database connection information.\n* **Error Handling:** Includes `error_log()` to log database errors, which is crucial for debugging.  Also, displays user-friendly error messages.\n* **Input Validation:**  *Critically important* for security and data integrity. The code now checks if the product_id, quantity, and customer_id are numeric and greater than zero *before* attempting to insert them into the database. This prevents SQL injection vulnerabilities and ensures that you're only processing valid data.  Expand these checks as needed for your application.\n* **SQL Injection Prevention:**  Uses prepared statements with `mysqli`'s `prepare()` and `bind_param()` methods. This is the *only* secure way to insert data into a database from user input, preventing SQL injection attacks.  *Never* directly concatenate user input into SQL queries.\n* **`addOrder()` Function:** Encapsulates the logic for adding a new order to the database, making the code more organized and reusable.  It returns the ID of the newly inserted order (if successful) or `false` if there was an error.\n* **`getProductDetails()` Function (Optional but recommended):** Retrieves product details by product ID, making it easier to display product information in the form.\n* **Clearer Example Usage:**  The code demonstrates how to handle form submission and display success or error messages.\n* **Form Handling:** Includes the necessary HTML form elements and sets the `method` to `post` and the `action` to the current script.\n* **`mysqli::insert_id`:**  Uses `mysqli::insert_id` to get the auto-generated ID of the newly inserted order.  This is much more reliable than relying on the database server's internal ID generation.\n* **Comments:** Added detailed comments to explain the code.\n\n**To use this code:**\n\n1. **Set up your MySQL database:** Create the `products` and `orders` tables (as shown in the SQL examples below) in your MySQL database.\n2. **Replace placeholders:** Update the database connection credentials (`$host`, `$username`, `$password`, `$database`).\n3. **Customize the tables:**  Adjust the table schemas if you have different columns.\n4. **Run the script:**  Save the code as a `.php` file (e.g., `purchase.php`) and access it through your web server.\n\n**Example SQL Table Structures (Create these in your MySQL database):**\n\n```sql\n-- Products Table\nCREATE TABLE products (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL\n);\n\n-- Orders Table\nCREATE TABLE orders (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  product_id INT NOT NULL,\n  quantity INT NOT NULL,\n  customer_id INT NOT NULL,\n  FOREIGN KEY (product_id) REFERENCES products(id),\n  FOREIGN KEY (customer_id) REFERENCES customers(id)  -- Assuming you have a customers table\n);\n```\n\n**Important Security Considerations:**\n\n* **Input Validation is Crucial:** Never trust user input.  Always validate and sanitize it before using it in any database query. The example provides a basic check, but you might need more sophisticated validation based on your application's requirements.  Consider using a library or framework for input validation.\n* **Output Encoding:** When displaying data retrieved from the database in HTML, use appropriate output encoding to prevent cross-site scripting (XSS) vulnerabilities. `htmlspecialchars()` is the standard function for this.\n* **Authentication and Authorization:** This code only handles the purchase functionality.  You'll need to add authentication (user login) and authorization (controlling which users can place orders) to your application.\n\nThis comprehensive example provides a solid foundation for building a purchase functionality in PHP.  Remember to prioritize security and adapt the code to your specific application needs.  Test thoroughly.\n", "code_blocks": ["```php\n<?php\n\n// Database Connection (Replace with your database credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Establish database connection\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Functions ---\n\n/**\n * Adds a new order to the database.\n *\n * @param array $orderData  An associative array containing order details.\n *                          Example: ['product_id' => 123, 'quantity' => 2, 'customer_id' => 456]\n * @return int|false  The ID of the new order if successful, or false on failure.\n */\nfunction addOrder(array $orderData) {\n  global $conn;\n\n  $product_id = $orderData['product_id'];\n  $quantity = $orderData['quantity'];\n  $customer_id = $orderData['customer_id'];\n\n  // Sanitize inputs (important for security!) -  This is a basic example.  Expand as needed.\n  $product_id = (int)$product_id;\n  $quantity = (int)$quantity;\n  $customer_id = (int)$customer_id;\n\n  // SQL Query\n  $sql = \"INSERT INTO orders (product_id, quantity, customer_id) VALUES (?, ?, ?)\";\n\n  // Prepare statement\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt) {\n    // Bind parameters\n    $stmt->bind_param(\"iii\", $product_id, $quantity, $customer_id);\n\n    // Execute statement\n    if ($stmt->execute()) {\n      // Get the last inserted ID\n      $order_id = $conn->insert_id;\n      return $order_id; // Return the actual ID inserted\n    } else {\n      error_log(\"Query failed: \" . $conn->error);\n      return false;\n    }\n  } else {\n    error_log(\"Prepare failed: \" . $conn->error);\n    return false;\n  }\n\n  // Close statement\n  $stmt->close();\n}\n\n/**\n * Retrieves product details by product_id.\n *\n * @param int $product_id The ID of the product to retrieve.\n * @return array|null An associative array containing product details, or null if not found.\n */\nfunction getProductDetails(int $product_id) {\n  $sql = \"SELECT * FROM products WHERE id = ?\";\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt) {\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n      $row = $result->fetch_assoc();\n      return $row;\n    } else {\n      return null;\n    }\n\n    $stmt->close();\n  } else {\n    error_log(\"Prepare failed: \" . $conn->error);\n    return null;\n  }\n}\n\n// --- Example Usage (Handle form submission or other triggering event) ---\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get form data\n  $product_id = $_POST[\"product_id\"];\n  $quantity = $_POST[\"quantity\"];\n  $customer_id = $_POST[\"customer_id\"];\n\n  // Validate input (Important!  Don't just trust user input.)\n  if (!is_numeric($product_id) || $product_id <= 0) {\n    $error = \"Invalid product ID.\";\n  } elseif (!is_numeric($quantity) || $quantity <= 0) {\n    $error = \"Invalid quantity.\";\n  } elseif (!is_numeric($customer_id) || $customer_id <= 0) {\n    $error = \"Invalid customer ID.\";\n  } else {\n\n    // Add the order to the database\n    $order_id = addOrder([\"product_id\" => $product_id, \"quantity\" => $quantity, \"customer_id\" => $customer_id]);\n\n    if ($order_id) {\n      $message = \"Order placed successfully! Order ID: \" . $order_id;\n    } else {\n      $error = \"Failed to place order. Please try again.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase Functionality</title>\n</head>\n<body>\n\n  <h1>Purchase Order</h1>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <?php if (isset($message)) { ?>\n    <p style=\"color: green;\"><?php echo $message; ?></p>\n  <?php } ?>\n\n\n  <form method=\"post\" action=\"\">\n    <label for=\"product_id\">Product ID:</label>\n    <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n    <br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n    <br><br>\n\n    <label for=\"customer_id\">Customer ID:</label>\n    <input type=\"number\" id=\"customer_id\" name=\"customer_id\" required>\n    <br><br>\n\n    <button type=\"submit\">Place Order</button>\n  </form>\n\n</body>\n</html>\n```", null]}
