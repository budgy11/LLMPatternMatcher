{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this step by step.\n\nFirst, I should outline the main components required for a purchase system. It seems like there are three primary tables: users, products, and orders. The users table will store customer information, products will hold the items available for sale, and orders will track each purchase made.\n\nI'll start by setting up the database tables. For the users table, I'll include fields like user_id, username, email, password, and a created_at timestamp. The products table should have product_id, name, description, price, stock quantity, image path, and availability status. The orders table will link users to their purchases with order_id, user_id, product_id, quantity, total_amount, purchase_date, and payment_status.\n\nNext, I need to handle user registration. This involves creating a form where users can input their details and then inserting that data into the users table after sanitizing the inputs to prevent SQL injection or other attacks.\n\nLogin functionality is essential too. Users should be able to log in with their email and password. After verifying the credentials, they'll receive a session indicating they're logged in, which allows them to access restricted areas like the shopping cart or order history.\n\nFor displaying products, I'll fetch all available items from the database and present them on a webpage. Each product should show its name, description, price, image, and an \"Add to Cart\" button. This requires a query that selects from the products table where availability is set to 1.\n\nThe shopping cart needs to be implemented using sessions so that items persist across pages without needing a database until checkout. When a user adds an item, it's stored in the session. The cart should allow adding, removing, and updating quantities. At checkout, I'll calculate the total amount by summing up each product's price multiplied by quantity.\n\nProcessing the order involves inserting into the orders table each item from the shopping cart, along with the user_id, quantity, total_amount, and payment status (like unpaid initially). After placing the order, it's good practice to clear the cart session.\n\nOrder history should display all past purchases for a logged-in user. This requires querying the orders table joined with products to get detailed information about each purchase. The results are then formatted into a readable list on the webpage.\n\nThroughout this process, I need to ensure that inputs are properly sanitized and that database queries use prepared statements or parameterized queries to prevent SQL injection. Also, sessions should be secured with appropriate settings to protect user data.\n\nI should also consider error handling. For example, if a product's stock is zero, adding it to the cart shouldn't be allowed. Similarly, during checkout, I need to handle cases where there might be issues with payment processing or database insertion errors.\n\nTesting each part as I go is crucial. I'll check user registration and login flows, ensure that products are displayed correctly, verify that the shopping cart functions as expected, and test order placement and history viewing.\n\nFinally, I'll structure all these functionalities into separate PHP files, linking them appropriately with HTML forms and buttons. Styling can be added later for a better user experience, but for now, the focus is on getting the core functionality working correctly.\n</think>\n\nCreating a purchase functionality using PHP involves several steps, including setting up a database, creating forms for user interaction, handling form submissions, and processing orders. Below is an example of how you might implement this:\n\n### Step 1: Set Up Your Database\n\nFirst, create a database to store users, products, and orders.\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT NOT NULL,\n    image VARCHAR(255),\n    available BOOLEAN DEFAULT TRUE\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    payment_status VARCHAR(50),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n### Step 2: Create a Registration Form\n\nCreate a form for users to register.\n\n```php\n<?php\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n\n    // Insert into database\n    $sql = \"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $password);\n    if ($stmt->execute()) {\n        echo \"Registration successful!\";\n        header('Location: login.php');\n    } else {\n        echo \"Error registering: \" . $stmt->error;\n    }\n}\n?>\n\n<form action=\"\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n    <button type=\"submit\">Register</button>\n</form>\n```\n\n### Step 3: Create a Login Form\n\nCreate a form for users to log in.\n\n```php\n<?php\nsession_start();\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    // Check if user exists\n    $sql = \"SELECT * FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        $user = $result->fetch_assoc();\n        if (password_verify($password, $user['password_hash'])) {\n            $_SESSION['logged_in'] = true;\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n        } else {\n            echo \"Incorrect password!\";\n        }\n    } else {\n        echo \"User not found!\";\n    }\n}\n?>\n\n<form action=\"\" method=\"POST\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n    <button type=\"submit\">Login</button>\n</form>\n```\n\n### Step 4: Display Products\n\nCreate a page to display available products.\n\n```php\n<?php\ninclude('db.php');\n\n$sql = \"SELECT * FROM products WHERE available = TRUE\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>\" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        if ($row['stock'] > 0) {\n            echo \"<form action='add_to_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' max='\" . $row['stock'] . \"' required>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n        } else {\n            echo \"<p>Out of Stock</p>\";\n        }\n        echo \"</div>\";\n    }\n} else {\n    echo \"No products available.\";\n}\n?>\n```\n\n### Step 5: Add Products to Cart\n\nCreate a script to handle adding products to the cart.\n\n```php\n<?php\nsession_start();\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Check if product exists and has stock\n    $sql = \"SELECT * FROM products WHERE id = ? AND available = TRUE\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        $product = $result->fetch_assoc();\n        if ($quantity <= $product['stock']) {\n            // Add to cart\n            $cart_item = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n\n            if (isset($_SESSION['cart'])) {\n                $found = false;\n                foreach ($_SESSION['cart'] as &$item) {\n                    if ($item['id'] == $product_id) {\n                        $item['quantity'] += $quantity;\n                        $found = true;\n                        break;\n                    }\n                }\n                if (!$found) {\n                    $_SESSION['cart'][] = $cart_item;\n                }\n            } else {\n                $_SESSION['cart'] = array($cart_item);\n            }\n\n            echo \"Product added to cart!\";\n        } else {\n            echo \"Not enough stock!\";\n        }\n    } else {\n        echo \"Product not found!\";\n    }\n}\n?>\n```\n\n### Step 6: View Cart and Checkout\n\nCreate a page to view the cart and process checkout.\n\n```php\n<?php\nsession_start();\ninclude('db.php');\n\nif (isset($_SESSION['cart'])) {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<div class='cart-item'>\";\n        echo \"<h3>\" . $item['name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n        echo \"<p>Total: $\" . number_format($item['price'] * $item['quantity'], 2) . \"</p>\";\n        echo \"</div>\";\n        $total += $item['price'] * $item['quantity'];\n    }\n    echo \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\n\n    if (isset($_SESSION['user_id'])) {\n        // Process order\n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_amount, payment_status)\n                    VALUES (?, ?, ?, ?, 'unpaid')\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"iidi\", $_SESSION['user_id'], $item['id'], $item['quantity'], $item['price'] * $item['quantity']);\n            if (!$stmt->execute()) {\n                die(\"Error processing order: \" . $stmt->error);\n            }\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        echo \"<p>Order placed successfully!</p>\";\n    } else {\n        echo \"<p>Please login to checkout.</p>\";\n    }\n} else {\n    echo \"Your cart is empty!\";\n}\n?>\n```\n\n### Step 7: Order History\n\nCreate a page for users to view their order history.\n\n```php\n<?php\nsession_start();\ninclude('db.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n}\n\n$sql = \"SELECT o.*, p.name as product_name FROM orders o\n        JOIN products p ON o.product_id = p.id\n        WHERE o.user_id = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"i\", $_SESSION['user_id']);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='order'>\";\n        echo \"<h3>Order #\" . $row['id'] . \"</h3>\";\n        echo \"<p>Product: \" . $row['product_name'] . \"</p>\";\n        echo \"<p>Quantity: \" . $row['quantity'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($row['total_amount'], 2) . \"</p>\";\n        echo \"<p>Purchase Date: \" . $row['purchase_date'] . \"</p>\";\n        echo \"<p>Payment Status: \" . $row['payment_status'] . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No orders found!\";\n}\n?>\n```\n\n### Step 8: Logout\n\nCreate a logout page.\n\n```php\n<?php\nsession_start();\nunset($_SESSION['logged_in']);\nunset($_SESSION['user_id']);\nheader('Location: login.php');\n?>\n```\n\n### Notes:\n\n1. **Security**: Always use prepared statements to prevent SQL injection.\n2. **Sessions**: Use sessions to store cart contents and user authentication status.\n3. **Error Handling**: Add proper error handling and validation for all inputs.\n4. **Frontend**: You might want to add CSS styling to make the pages look nicer.\n5. **Payment Integration**: This example doesn't include payment processing. You would need to integrate a payment gateway (like Stripe or PayPal) for real-world use.\n\nThis is a basic implementation and can be extended with more features like user roles, admin panels, order tracking, etc., as needed.", "code_blocks": [null, "```php\n<?php\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n\n    // Insert into database\n    $sql = \"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $password);\n    if ($stmt->execute()) {\n        echo \"Registration successful!\";\n        header('Location: login.php');\n    } else {\n        echo \"Error registering: \" . $stmt->error;\n    }\n}\n?>\n\n<form action=\"\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n    <button type=\"submit\">Register</button>\n</form>\n```", "```php\n<?php\nsession_start();\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    // Check if user exists\n    $sql = \"SELECT * FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        $user = $result->fetch_assoc();\n        if (password_verify($password, $user['password_hash'])) {\n            $_SESSION['logged_in'] = true;\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: dashboard.php');\n        } else {\n            echo \"Incorrect password!\";\n        }\n    } else {\n        echo \"User not found!\";\n    }\n}\n?>\n\n<form action=\"\" method=\"POST\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n    <button type=\"submit\">Login</button>\n</form>\n```", "```php\n<?php\ninclude('db.php');\n\n$sql = \"SELECT * FROM products WHERE available = TRUE\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>\" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        if ($row['stock'] > 0) {\n            echo \"<form action='add_to_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' max='\" . $row['stock'] . \"' required>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n        } else {\n            echo \"<p>Out of Stock</p>\";\n        }\n        echo \"</div>\";\n    }\n} else {\n    echo \"No products available.\";\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db.php');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Check if product exists and has stock\n    $sql = \"SELECT * FROM products WHERE id = ? AND available = TRUE\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        $product = $result->fetch_assoc();\n        if ($quantity <= $product['stock']) {\n            // Add to cart\n            $cart_item = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n\n            if (isset($_SESSION['cart'])) {\n                $found = false;\n                foreach ($_SESSION['cart'] as &$item) {\n                    if ($item['id'] == $product_id) {\n                        $item['quantity'] += $quantity;\n                        $found = true;\n                        break;\n                    }\n                }\n                if (!$found) {\n                    $_SESSION['cart'][] = $cart_item;\n                }\n            } else {\n                $_SESSION['cart'] = array($cart_item);\n            }\n\n            echo \"Product added to cart!\";\n        } else {\n            echo \"Not enough stock!\";\n        }\n    } else {\n        echo \"Product not found!\";\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db.php');\n\nif (isset($_SESSION['cart'])) {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<div class='cart-item'>\";\n        echo \"<h3>\" . $item['name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n        echo \"<p>Total: $\" . number_format($item['price'] * $item['quantity'], 2) . \"</p>\";\n        echo \"</div>\";\n        $total += $item['price'] * $item['quantity'];\n    }\n    echo \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\n\n    if (isset($_SESSION['user_id'])) {\n        // Process order\n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_amount, payment_status)\n                    VALUES (?, ?, ?, ?, 'unpaid')\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"iidi\", $_SESSION['user_id'], $item['id'], $item['quantity'], $item['price'] * $item['quantity']);\n            if (!$stmt->execute()) {\n                die(\"Error processing order: \" . $stmt->error);\n            }\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        echo \"<p>Order placed successfully!</p>\";\n    } else {\n        echo \"<p>Please login to checkout.</p>\";\n    }\n} else {\n    echo \"Your cart is empty!\";\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n}\n\n$sql = \"SELECT o.*, p.name as product_name FROM orders o\n        JOIN products p ON o.product_id = p.id\n        WHERE o.user_id = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"i\", $_SESSION['user_id']);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='order'>\";\n        echo \"<h3>Order #\" . $row['id'] . \"</h3>\";\n        echo \"<p>Product: \" . $row['product_name'] . \"</p>\";\n        echo \"<p>Quantity: \" . $row['quantity'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($row['total_amount'], 2) . \"</p>\";\n        echo \"<p>Purchase Date: \" . $row['purchase_date'] . \"</p>\";\n        echo \"<p>Payment Status: \" . $row['payment_status'] . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No orders found!\";\n}\n?>\n```", "```php\n<?php\nsession_start();\nunset($_SESSION['logged_in']);\nunset($_SESSION['user_id']);\nheader('Location: login.php');\n?>\n```"]}
