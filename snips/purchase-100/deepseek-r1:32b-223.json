{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this step by step.\n\nFirst, I should consider the structure of the application. It's common to separate data access, business logic, and presentation layers. So maybe I'll use a Model-View-Controller (MVC) pattern or at least have separate files for each concern.\n\nI'll start with the database setup. I need tables for users, products, orders, order items, and categories. The user table should store essential information like username, email, password, and address. Products will include details like name, description, price, stock quantity, image, and category. Orders will track each purchase with a foreign key to the user. Order items will link orders to products and specify quantities.\n\nNext, I'll write the SQL statements for creating these tables. Each table should have appropriate columns and constraints. For example, the product table will have an auto-incremented ID as the primary key, and foreign keys where necessary, like linking products to categories.\n\nThen, I need to create a PHP class for database interactions. This class, let's call it Database, will handle connecting to the database and executing queries. Using PDO is a good choice because it supports prepared statements and is secure against SQL injection.\n\nAfter setting up the database, I'll move on to user authentication. Users should be able to register and log in. The registration form will collect username, email, password, and address. Passwords need to be hashed for security using password_hash(). When a user logs in, their credentials are checked against the stored hashes.\n\nFor displaying products, I'll write functions that fetch all products from the database. Each product should display its name, description, price, image, and have an \"Add to Cart\" button. The cart functionality is crucial here. Users need to add items, adjust quantities, and remove items from their cart. Storing the cart in a session makes sense since it's temporary and tied to the user's browsing session.\n\nWhen a user decides to purchase, they'll go through the checkout process. Here, I'll capture the order details: total amount, order date, and the customer ID (from the logged-in user). This creates an order record in the orders table. Then, for each item in the cart, I'll insert a new record into the order_items table with the product ID, order ID, quantity, and price.\n\nFinally, after placing the order, the cart should be cleared to reflect that the purchase is complete.\n\nI also need to handle cases where users aren't logged in. If someone tries to access pages like checkout or my orders without logging in, they should be redirected to the login page.\n\nTesting each part step by step is important. I'll make sure registration and login work, products display correctly, adding items to the cart functions as expected, and placing an order accurately records all necessary data in the database.\n\nI might also consider error handling and validation throughout the process. For example, ensuring that required fields are filled out during registration and checkout, checking if a product exists before adding it to the cart, and validating user input to prevent SQL injection or XSS attacks.\n\nIn summary, I'll structure my project with separate files for classes, functions, forms, and views. Each part will handle specific responsibilities, making the code organized and maintainable. By breaking down the problem into these components, I can tackle each one systematically.\n</think>\n\nTo create a purchase functionality using PHP, follow this step-by-step guide:\n\n### Step 1: Set Up the Database\n\nFirst, create the necessary database tables to store user information, products, orders, order items, and categories.\n\n**SQL Code:**\n\n```sql\nCREATE TABLE IF NOT EXISTS users (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    address TEXT\n);\n\nCREATE TABLE IF NOT EXISTS products (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT(11) NOT NULL,\n    image VARCHAR(255),\n    category_id INT(11),\n    FOREIGN KEY (category_id) REFERENCES categories(id)\n);\n\nCREATE TABLE IF NOT EXISTS orders (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    customer_id INT(11),\n    FOREIGN KEY (customer_id) REFERENCES users(id)\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    product_id INT(11),\n    order_id INT(11),\n    quantity INT(11) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(id),\n    FOREIGN KEY (order_id) REFERENCES orders(id)\n);\n\nCREATE TABLE IF NOT EXISTS categories (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL\n);\n```\n\n### Step 2: Create the Database Class\n\nCreate a `Database.php` file for database connections and queries.\n\n**Database.php:**\n\n```php\n<?php\nclass Database {\n    private $host = 'localhost';\n    private $db_name = 'purchase_db';\n    private $username = 'root';\n    private $password = '';\n    public $conn;\n\n    public function __construct() {\n        try {\n            $this->conn = new PDO(\"mysql:host=$this->host;dbname=$this->db_name\", $this->username, $this->password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            echo \"Connection failed: \" . $e->getMessage();\n        }\n    }\n\n    public function execute($query, $values = array()) {\n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($values);\n            return $stmt;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            die();\n        }\n    }\n}\n?>\n```\n\n### Step 3: User Registration and Login\n\nCreate `auth.php` for user authentication functions.\n\n**auth.php:**\n\n```php\n<?php\nsession_start();\n\nrequire_once 'Database.php';\n\nfunction registerUser($username, $email, $password, $address) {\n    $db = new Database();\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    $query = \"INSERT INTO users (username, email, password_hash, address) VALUES (?, ?, ?, ?)\";\n    return $db->execute($query, array($username, $email, $hashedPassword, $address));\n}\n\nfunction loginUser($email, $password) {\n    $db = new Database();\n    $query = \"SELECT * FROM users WHERE email = ?\";\n    $result = $db->execute($query, array($email))->fetch(PDO::FETCH_ASSOC);\n    \n    if ($result && password_verify($password, $result['password_hash'])) {\n        $_SESSION['user'] = $result;\n        return true;\n    }\n    return false;\n}\n\nfunction isLoggedIn() {\n    return isset($_SESSION['user']);\n}\n\nfunction logoutUser() {\n    session_unset();\n    session_destroy();\n}\n?>\n```\n\n### Step 4: Display Products\n\nCreate `products.php` to fetch and display products.\n\n**products.php:**\n\n```php\n<?php\nrequire_once 'Database.php';\n\nfunction getAllProducts() {\n    $db = new Database();\n    $query = \"SELECT * FROM products\";\n    return $db->execute($query)->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction getProductById($id) {\n    $db = new Database();\n    $query = \"SELECT * FROM products WHERE id = ?\";\n    return $db->execute($query, array($id))->fetch(PDO::FETCH_ASSOC);\n}\n?>\n```\n\n### Step 5: Cart Functionality\n\nUse sessions to handle the shopping cart.\n\n**cart.php:**\n\n```php\n<?php\nsession_start();\n\nfunction addToCart($productId, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $product = getProductById($productId);\n        $_SESSION['cart'][$productId] = array(\n            'id' => $product['id'],\n            'name' => $product['name'],\n            'price' => $product['price'],\n            'quantity' => $quantity\n        );\n    }\n}\n\nfunction getCartItems() {\n    if (isset($_SESSION['cart'])) {\n        return $_SESSION['cart'];\n    } else {\n        return array();\n    }\n}\n\nfunction updateCartItem($productId, $quantity) {\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId]['quantity'] = $quantity;\n    }\n}\n\nfunction removeCartItem($productId) {\n    unset($_SESSION['cart'][$productId]);\n}\n?>\n```\n\n### Step 6: Checkout and Order Processing\n\nCreate `checkout.php` to handle the checkout process.\n\n**checkout.php:**\n\n```php\n<?php\nrequire_once 'Database.php';\nrequire_once 'auth.php';\nrequire_once 'cart.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $db = new Database();\n    \n    // Insert order\n    $totalAmount = 0;\n    foreach (getCartItems() as $item) {\n        $totalAmount += ($item['price'] * $item['quantity']);\n    }\n    \n    $query = \"INSERT INTO orders (total_amount, customer_id) VALUES (?, ?)\";\n    $orderStmt = $db->execute($query, array($totalAmount, $_SESSION['user']['id']));\n    $orderId = $db->conn->lastInsertId();\n    \n    // Insert order items\n    foreach (getCartItems() as $item) {\n        $query = \"INSERT INTO order_items (product_id, order_id, quantity, price) VALUES (?, ?, ?, ?)\";\n        $db->execute($query, array(\n            $item['id'],\n            $orderId,\n            $item['quantity'],\n            $item['price']\n        ));\n    }\n    \n    // Clear cart\n    $_SESSION['cart'] = array();\n    \n    header('Location: thank_you.php');\n    exit();\n}\n?>\n```\n\n### Step 7: Display My Orders\n\nCreate `orders.php` to display the user's orders.\n\n**orders.php:**\n\n```php\n<?php\nrequire_once 'Database.php';\nrequire_once 'auth.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\nfunction getMyOrders() {\n    $db = new Database();\n    $query = \"SELECT * FROM orders WHERE customer_id = ?\";\n    return $db->execute($query, array($_SESSION['user']['id']))->fetchAll(PDO::FETCH_ASSOC);\n}\n?>\n```\n\n### Step 8: Create the Thank You Page\n\nAfter a successful purchase, redirect users to `thank_you.php`.\n\n**thank_you.php:**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Thank You for Your Purchase!</title>\n</head>\n<body>\n    <h1>Thank You for Your Purchase!</h1>\n    <p>Your order has been successfully placed. We will contact you soon to confirm your purchase.</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```\n\n### Step 9: Create the Login and Registration Pages\n\n**login.php:**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (isLoggedIn()) {\n    header('Location: products.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    \n    if (loginUser($email, $password)) {\n        header('Location: products.php');\n        exit();\n    } else {\n        $error = \"Invalid email or password\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <?php if (isset($error)): ?>\n        <p><?php echo $error; ?></p>\n    <?php endif; ?>\n\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        Email: <input type=\"email\" name=\"email\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <input type=\"submit\" value=\"Login\">\n    </form>\n    <a href=\"register.php\">Register</a>\n</body>\n</html>\n```\n\n**register.php:**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (isLoggedIn()) {\n    header('Location: products.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $address = $_POST['address'];\n    \n    if (registerUser($username, $email, $password, $address)) {\n        header('Location: login.php');\n        exit();\n    } else {\n        $error = \"Registration failed. Please try again.\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <?php if (isset($error)): ?>\n        <p><?php echo $error; ?></p>\n    <?php endif; ?>\n\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Email: <input type=\"email\" name=\"email\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        Address: <input type=\"text\" name=\"address\" required><br>\n        <input type=\"submit\" value=\"Register\">\n    </form>\n    <a href=\"login.php\">Login</a>\n</body>\n</html>\n```\n\n### Step 10: Create the Products Page\n\n**products.php (frontend):**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$products = getAllProducts();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n</head>\n<body>\n    <h1>Welcome, <?php echo $_SESSION['user']['username']; ?></h1>\n    <a href=\"orders.php\">My Orders</a> | <a href=\"logout.php\">Logout</a><br><br>\n\n    <?php if (!empty($products)): ?>\n        <table border=\"1\">\n            <tr>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Price</th>\n                <th>Action</th>\n            </tr>\n            <?php foreach ($products as $product): ?>\n                <tr>\n                    <td><?php echo $product['name']; ?></td>\n                    <td><?php echo $product['description']; ?></td>\n                    <td>$<?php echo number_format($product['price'], 2); ?></td>\n                    <td><a href=\"cart.php?action=add&id=<?php echo $product['id']; ?>\">Add to Cart</a></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>No products available.</p>\n    <?php endif; ?>\n\n    <a href=\"checkout.php\">Checkout</a> | <a href=\"cart.php\">View Cart</a>\n</body>\n</html>\n```\n\n### Step 11: Create the Cart Page\n\n**cart.php:**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$cartItems = getCartItems();\n\nif ($_GET['action'] == 'add') {\n    $productId = $_GET['id'];\n    addToCart($productId, 1);\n    header(\"Location: products.php\");\n} elseif ($_GET['action'] == 'update' && isset($_POST['quantity'])) {\n    foreach ($_POST['quantity'] as $productId => $qty) {\n        updateCartItem($productId, $qty);\n    }\n    header(\"Location: cart.php\");\n} elseif ($_GET['action'] == 'remove') {\n    removeCartItem($_GET['id']);\n    header(\"Location: cart.php\");\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if (!empty($cartItems)): ?>\n        <form action=\"cart.php?action=update\" method=\"post\">\n            <table border=\"1\">\n                <tr>\n                    <th>Product Name</th>\n                    <th>Price</th>\n                    <th>Quantity</th>\n                    <th>Total</th>\n                    <th>Action</th>\n                </tr>\n                <?php foreach ($cartItems as $item): ?>\n                    <tr>\n                        <td><?php echo $item['name']; ?></td>\n                        <td>$<?php echo number_format($item['price'], 2); ?></td>\n                        <td><input type=\"number\" name=\"quantity[<?php echo $item['id']; ?>]\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\"></td>\n                        <td>$<?php echo number_format(($item['price'] * $item['quantity']), 2); ?></td>\n                        <td><a href=\"cart.php?action=remove&id=<?php echo $item['id']; ?>\">Remove</a></td>\n                    </tr>\n                <?php endforeach; ?>\n            </table>\n            <input type=\"submit\" value=\"Update Cart\">\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <?php if (!empty($cartItems)): ?>\n        <a href=\"checkout.php\">Proceed to Checkout</a> | <a href=\"products.php\">Continue Shopping</a>\n    <?php else: ?>\n        <a href=\"products.php\">Continue Shopping</a>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 12: Create the Orders Page\n\n**orders.php (frontend):**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$orders = getMyOrders();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Orders</title>\n</head>\n<body>\n    <h1>My Orders</h1>\n    \n    <?php if (!empty($orders)): ?>\n        <table border=\"1\">\n            <tr>\n                <th>Order ID</th>\n                <th>Total Amount</th>\n                <th>Date Placed</th>\n            </tr>\n            <?php foreach ($orders as $order): ?>\n                <tr>\n                    <td><?php echo $order['id']; ?></td>\n                    <td>$<?php echo number_format($order['total_amount'], 2); ?></td>\n                    <td><?php echo date('Y-m-d H:i:s', strtotime($order['created_at'])); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>No orders found.</p>\n    <?php endif; ?>\n\n    <a href=\"products.php\">Continue Shopping</a> | <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n```\n\n### Step 13: Create the Logout Page\n\n**logout.php:**\n\n```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nunset($_SESSION['user']);\nsession_unset();\nsession_destroy();\n\nheader('Location: login.php');\nexit();\n?>\n```\n\nThis completes the basic implementation of a PHP shopping cart system. Users can now:\n\n1. Register and log in to their accounts.\n2. Browse products and add them to their cart.\n3. Update quantities or remove items from their cart.\n4. Checkout and place orders.\n5. View their order history.\n\nThe system includes security measures such as session management, basic input validation, and user authentication. You can further enhance it by adding features like:\n\n- Product categories\n- Search functionality\n- User profile management\n- Order tracking\n- Payment integration\n- Email notifications\n- Error handling\n- Input validation and sanitization\n\nRemember to secure your application by implementing proper security practices, such as using prepared statements or ORMs to prevent SQL injection, hashing passwords, validating all user inputs, and securing sensitive data.", "code_blocks": [null, "```php\n<?php\nclass Database {\n    private $host = 'localhost';\n    private $db_name = 'purchase_db';\n    private $username = 'root';\n    private $password = '';\n    public $conn;\n\n    public function __construct() {\n        try {\n            $this->conn = new PDO(\"mysql:host=$this->host;dbname=$this->db_name\", $this->username, $this->password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            echo \"Connection failed: \" . $e->getMessage();\n        }\n    }\n\n    public function execute($query, $values = array()) {\n        try {\n            $stmt = $this->conn->prepare($query);\n            $stmt->execute($values);\n            return $stmt;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            die();\n        }\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nrequire_once 'Database.php';\n\nfunction registerUser($username, $email, $password, $address) {\n    $db = new Database();\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    $query = \"INSERT INTO users (username, email, password_hash, address) VALUES (?, ?, ?, ?)\";\n    return $db->execute($query, array($username, $email, $hashedPassword, $address));\n}\n\nfunction loginUser($email, $password) {\n    $db = new Database();\n    $query = \"SELECT * FROM users WHERE email = ?\";\n    $result = $db->execute($query, array($email))->fetch(PDO::FETCH_ASSOC);\n    \n    if ($result && password_verify($password, $result['password_hash'])) {\n        $_SESSION['user'] = $result;\n        return true;\n    }\n    return false;\n}\n\nfunction isLoggedIn() {\n    return isset($_SESSION['user']);\n}\n\nfunction logoutUser() {\n    session_unset();\n    session_destroy();\n}\n?>\n```", "```php\n<?php\nrequire_once 'Database.php';\n\nfunction getAllProducts() {\n    $db = new Database();\n    $query = \"SELECT * FROM products\";\n    return $db->execute($query)->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction getProductById($id) {\n    $db = new Database();\n    $query = \"SELECT * FROM products WHERE id = ?\";\n    return $db->execute($query, array($id))->fetch(PDO::FETCH_ASSOC);\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nfunction addToCart($productId, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $product = getProductById($productId);\n        $_SESSION['cart'][$productId] = array(\n            'id' => $product['id'],\n            'name' => $product['name'],\n            'price' => $product['price'],\n            'quantity' => $quantity\n        );\n    }\n}\n\nfunction getCartItems() {\n    if (isset($_SESSION['cart'])) {\n        return $_SESSION['cart'];\n    } else {\n        return array();\n    }\n}\n\nfunction updateCartItem($productId, $quantity) {\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId]['quantity'] = $quantity;\n    }\n}\n\nfunction removeCartItem($productId) {\n    unset($_SESSION['cart'][$productId]);\n}\n?>\n```", "```php\n<?php\nrequire_once 'Database.php';\nrequire_once 'auth.php';\nrequire_once 'cart.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $db = new Database();\n    \n    // Insert order\n    $totalAmount = 0;\n    foreach (getCartItems() as $item) {\n        $totalAmount += ($item['price'] * $item['quantity']);\n    }\n    \n    $query = \"INSERT INTO orders (total_amount, customer_id) VALUES (?, ?)\";\n    $orderStmt = $db->execute($query, array($totalAmount, $_SESSION['user']['id']));\n    $orderId = $db->conn->lastInsertId();\n    \n    // Insert order items\n    foreach (getCartItems() as $item) {\n        $query = \"INSERT INTO order_items (product_id, order_id, quantity, price) VALUES (?, ?, ?, ?)\";\n        $db->execute($query, array(\n            $item['id'],\n            $orderId,\n            $item['quantity'],\n            $item['price']\n        ));\n    }\n    \n    // Clear cart\n    $_SESSION['cart'] = array();\n    \n    header('Location: thank_you.php');\n    exit();\n}\n?>\n```", "```php\n<?php\nrequire_once 'Database.php';\nrequire_once 'auth.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\nfunction getMyOrders() {\n    $db = new Database();\n    $query = \"SELECT * FROM orders WHERE customer_id = ?\";\n    return $db->execute($query, array($_SESSION['user']['id']))->fetchAll(PDO::FETCH_ASSOC);\n}\n?>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Thank You for Your Purchase!</title>\n</head>\n<body>\n    <h1>Thank You for Your Purchase!</h1>\n    <p>Your order has been successfully placed. We will contact you soon to confirm your purchase.</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (isLoggedIn()) {\n    header('Location: products.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    \n    if (loginUser($email, $password)) {\n        header('Location: products.php');\n        exit();\n    } else {\n        $error = \"Invalid email or password\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <?php if (isset($error)): ?>\n        <p><?php echo $error; ?></p>\n    <?php endif; ?>\n\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        Email: <input type=\"email\" name=\"email\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <input type=\"submit\" value=\"Login\">\n    </form>\n    <a href=\"register.php\">Register</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nif (isLoggedIn()) {\n    header('Location: products.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $address = $_POST['address'];\n    \n    if (registerUser($username, $email, $password, $address)) {\n        header('Location: login.php');\n        exit();\n    } else {\n        $error = \"Registration failed. Please try again.\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <?php if (isset($error)): ?>\n        <p><?php echo $error; ?></p>\n    <?php endif; ?>\n\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Email: <input type=\"email\" name=\"email\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        Address: <input type=\"text\" name=\"address\" required><br>\n        <input type=\"submit\" value=\"Register\">\n    </form>\n    <a href=\"login.php\">Login</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$products = getAllProducts();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n</head>\n<body>\n    <h1>Welcome, <?php echo $_SESSION['user']['username']; ?></h1>\n    <a href=\"orders.php\">My Orders</a> | <a href=\"logout.php\">Logout</a><br><br>\n\n    <?php if (!empty($products)): ?>\n        <table border=\"1\">\n            <tr>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Price</th>\n                <th>Action</th>\n            </tr>\n            <?php foreach ($products as $product): ?>\n                <tr>\n                    <td><?php echo $product['name']; ?></td>\n                    <td><?php echo $product['description']; ?></td>\n                    <td>$<?php echo number_format($product['price'], 2); ?></td>\n                    <td><a href=\"cart.php?action=add&id=<?php echo $product['id']; ?>\">Add to Cart</a></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>No products available.</p>\n    <?php endif; ?>\n\n    <a href=\"checkout.php\">Checkout</a> | <a href=\"cart.php\">View Cart</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$cartItems = getCartItems();\n\nif ($_GET['action'] == 'add') {\n    $productId = $_GET['id'];\n    addToCart($productId, 1);\n    header(\"Location: products.php\");\n} elseif ($_GET['action'] == 'update' && isset($_POST['quantity'])) {\n    foreach ($_POST['quantity'] as $productId => $qty) {\n        updateCartItem($productId, $qty);\n    }\n    header(\"Location: cart.php\");\n} elseif ($_GET['action'] == 'remove') {\n    removeCartItem($_GET['id']);\n    header(\"Location: cart.php\");\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if (!empty($cartItems)): ?>\n        <form action=\"cart.php?action=update\" method=\"post\">\n            <table border=\"1\">\n                <tr>\n                    <th>Product Name</th>\n                    <th>Price</th>\n                    <th>Quantity</th>\n                    <th>Total</th>\n                    <th>Action</th>\n                </tr>\n                <?php foreach ($cartItems as $item): ?>\n                    <tr>\n                        <td><?php echo $item['name']; ?></td>\n                        <td>$<?php echo number_format($item['price'], 2); ?></td>\n                        <td><input type=\"number\" name=\"quantity[<?php echo $item['id']; ?>]\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\"></td>\n                        <td>$<?php echo number_format(($item['price'] * $item['quantity']), 2); ?></td>\n                        <td><a href=\"cart.php?action=remove&id=<?php echo $item['id']; ?>\">Remove</a></td>\n                    </tr>\n                <?php endforeach; ?>\n            </table>\n            <input type=\"submit\" value=\"Update Cart\">\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <?php if (!empty($cartItems)): ?>\n        <a href=\"checkout.php\">Proceed to Checkout</a> | <a href=\"products.php\">Continue Shopping</a>\n    <?php else: ?>\n        <a href=\"products.php\">Continue Shopping</a>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\nrequire_once 'Database.php';\n\nif (!isLoggedIn()) {\n    header('Location: login.php');\n    exit();\n}\n\n$orders = getMyOrders();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Orders</title>\n</head>\n<body>\n    <h1>My Orders</h1>\n    \n    <?php if (!empty($orders)): ?>\n        <table border=\"1\">\n            <tr>\n                <th>Order ID</th>\n                <th>Total Amount</th>\n                <th>Date Placed</th>\n            </tr>\n            <?php foreach ($orders as $order): ?>\n                <tr>\n                    <td><?php echo $order['id']; ?></td>\n                    <td>$<?php echo number_format($order['total_amount'], 2); ?></td>\n                    <td><?php echo date('Y-m-d H:i:s', strtotime($order['created_at'])); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>No orders found.</p>\n    <?php endif; ?>\n\n    <a href=\"products.php\">Continue Shopping</a> | <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'auth.php';\n\nunset($_SESSION['user']);\nsession_unset();\nsession_destroy();\n\nheader('Location: login.php');\nexit();\n?>\n```"]}
