{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP. This example assumes that you have a MySQL database set up with the following tables:\n\n**products table**\n\n| Field Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique product ID |\n| name | varchar | Product name |\n| price | decimal | Product price |\n\n**orders table**\n\n| Field Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique order ID |\n| customer_name | varchar | Customer name |\n| total | decimal | Total cost of the order |\n| date | datetime | Date of the order |\n\n**order_items table**\n\n| Field Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique order item ID |\n| order_id | int | Foreign key referencing orders.id |\n| product_id | int | Foreign key referencing products.id |\n| quantity | int | Quantity of the product purchased |\n\n**purchase functionality**\n\nFirst, we'll create a PHP script to handle the purchase request. Let's call it `purchase.php`.\n\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Get POST variables\n$customer_name = $_POST['customer_name'];\n$product_id = $_POST['product_id'];\n$quantity = $_POST['quantity'];\n\n// Validate input\nif (empty($customer_name) || empty($product_id) || empty($quantity)) {\n    die('Error: All fields are required');\n}\n\n// Get product details from database\n$product = get_product($product_id);\n\n// Check if product exists and quantity is valid\nif (!$product || $quantity < 1) {\n    die('Error: Invalid product or quantity');\n}\n\n// Calculate total cost\n$total = $product['price'] * $quantity;\n\n// Create order\n$order_id = create_order($customer_name, $total);\n\n// Add order item\ncreate_order_item($order_id, $product_id, $quantity);\n\n// Update stock\nupdate_stock($product_id, -$quantity);\n\n?>\n```\n\n**functions.php**\n\nThis script uses several functions to interact with the database. Let's create a `functions.php` file to define these functions.\n\n```php\n<?php\n\nfunction get_product($id) {\n    global $db;\n    $query = \"SELECT * FROM products WHERE id = '$id'\";\n    return mysqli_fetch_assoc(mysqli_query($db, $query));\n}\n\nfunction create_order($customer_name, $total) {\n    global $db;\n    $query = \"INSERT INTO orders (customer_name, total) VALUES ('$customer_name', '$total')\";\n    return mysqli_insert_id($db);\n}\n\nfunction create_order_item($order_id, $product_id, $quantity) {\n    global $db;\n    $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\";\n    return mysqli_query($db, $query);\n}\n\nfunction update_stock($id, $quantity) {\n    global $db;\n    $query = \"UPDATE products SET stock = stock - '$quantity' WHERE id = '$id'\";\n    return mysqli_query($db, $query);\n}\n```\n\n**config.php**\n\nThis script assumes that you have a `config.php` file to configure the database connection.\n\n```php\n<?php\n\n// Database configuration\n$db = new mysqli('localhost', 'username', 'password', 'database');\n\n?>\n```\n\nNote: This is a basic example and should not be used in production without proper security measures (e.g., input validation, error handling, prepared statements).\n\nTo use this functionality, simply create an HTML form with the following fields:\n\n```html\n<form action=\"purchase.php\" method=\"post\">\n    <input type=\"text\" name=\"customer_name\" placeholder=\"Customer Name\">\n    <select name=\"product_id\">\n        <?php foreach (get_products() as $product) { ?>\n            <option value=\"<?php echo $product['id']; ?>\"><?php echo $product['name']; ?></option>\n        <?php } ?>\n    </select>\n    <input type=\"number\" name=\"quantity\" placeholder=\"Quantity\">\n    <button type=\"submit\">Purchase</button>\n</form>\n```\n\nThis example demonstrates a basic purchase functionality using PHP and MySQL. You can modify it to suit your specific requirements.\n\nPlease note that this is a simplified example, you should consider implementing proper validation and security measures in a real-world application.", "code_blocks": ["```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Get POST variables\n$customer_name = $_POST['customer_name'];\n$product_id = $_POST['product_id'];\n$quantity = $_POST['quantity'];\n\n// Validate input\nif (empty($customer_name) || empty($product_id) || empty($quantity)) {\n    die('Error: All fields are required');\n}\n\n// Get product details from database\n$product = get_product($product_id);\n\n// Check if product exists and quantity is valid\nif (!$product || $quantity < 1) {\n    die('Error: Invalid product or quantity');\n}\n\n// Calculate total cost\n$total = $product['price'] * $quantity;\n\n// Create order\n$order_id = create_order($customer_name, $total);\n\n// Add order item\ncreate_order_item($order_id, $product_id, $quantity);\n\n// Update stock\nupdate_stock($product_id, -$quantity);\n\n?>\n```", "```php\n<?php\n\nfunction get_product($id) {\n    global $db;\n    $query = \"SELECT * FROM products WHERE id = '$id'\";\n    return mysqli_fetch_assoc(mysqli_query($db, $query));\n}\n\nfunction create_order($customer_name, $total) {\n    global $db;\n    $query = \"INSERT INTO orders (customer_name, total) VALUES ('$customer_name', '$total')\";\n    return mysqli_insert_id($db);\n}\n\nfunction create_order_item($order_id, $product_id, $quantity) {\n    global $db;\n    $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\";\n    return mysqli_query($db, $query);\n}\n\nfunction update_stock($id, $quantity) {\n    global $db;\n    $query = \"UPDATE products SET stock = stock - '$quantity' WHERE id = '$id'\";\n    return mysqli_query($db, $query);\n}\n```", "```php\n<?php\n\n// Database configuration\n$db = new mysqli('localhost', 'username', 'password', 'database');\n\n?>\n```", null]}
