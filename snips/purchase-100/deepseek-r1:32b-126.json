{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, so the user wants to create a purchase functionality using PHP. I need to figure out how to approach this step by step.\n\nFirst, I should outline the basic requirements for a purchase system. It needs user authentication since only registered users can make purchases. Then, there should be a way to display available products with their details. Users need a cart to add items they want to buy. Once the cart is ready, users should proceed to checkout where they provide shipping and payment info. Finally, after processing the order, an email confirmation would be nice.\n\nI'll start by setting up the database tables. I'll need a 'users' table for user details like id, name, email, password, phone, address, and a registration date. Then, a 'products' table to store product information such as id, name, description, price, stock, image, and category. An 'orders' table will track each order with an id, user_id, total amount, status, order date, payment method, shipping details, and transaction ID. Lastly, an 'order_details' table to link orders with products and store quantity and subtotal for each item.\n\nNext, I'll create the necessary PHP classes. A User class will handle user registration, login, and profile management. The Product class will manage adding, editing, and displaying products. For orders, an Order class will handle creating new orders, generating order details, updating order status, and showing past orders to users.\n\nI should also consider session management so that users stay logged in as they navigate through the site. This helps track their cart items and personal information across different pages.\n\nThen, I'll need to implement the checkout process. Users should see a summary of their cart, enter shipping info, choose a payment method, and confirm their order. After processing, an email confirmation can be sent using PHP's mail function or a library like PHPMailer for better reliability.\n\nSecurity is crucial. I'll make sure to use prepared statements to prevent SQL injection and validate all user inputs to avoid XSS attacks. Also, handling errors properly will help users understand if something goes wrong during the checkout process.\n\nFinally, testing each part thoroughly is important. I should test adding products, logging in, adding items to the cart, checking out, and receiving an email confirmation. This ensures that all functionalities work together smoothly.\n</think>\n\nHere's a simple implementation of purchase functionality using PHP:\n\n### 1. Database Setup\n\nFirst, create the necessary database tables.\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255) UNIQUE,\n    password VARCHAR(255),\n    phone VARCHAR(20),\n    address TEXT,\n    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT,\n    price DECIMAL(10, 2),\n    stock INT,\n    image VARCHAR(255),\n    category VARCHAR(255)\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    total_amount DECIMAL(10, 2),\n    order_status VARCHAR(50),\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    payment_method VARCHAR(255),\n    shipping_address TEXT,\n    transaction_id VARCHAR(255)\n);\n\nCREATE TABLE order_details (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    subtotal DECIMAL(10, 2)\n);\n```\n\n### 2. User Authentication\n\nCreate a `User` class for user registration and login.\n\n```php\nclass User {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Register new user\n    public function register($name, $email, $password, $phone, $address) {\n        try {\n            $hashPassword = password_hash($password, PASSWORD_DEFAULT);\n            $stmt = $this->db->prepare(\"INSERT INTO users (name, email, password, phone, address) VALUES (?, ?, ?, ?, ?)\");\n            $stmt->execute([$name, $email, $hashPassword, $phone, $address]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Registration Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Login user\n    public function login($email, $password) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM users WHERE email = ?\");\n            $stmt->execute([$email]);\n            $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n            if ($user && password_verify($password, $user['password'])) {\n                $_SESSION['user'] = [\n                    'id' => $user['id'],\n                    'name' => $user['name'],\n                    'email' => $user['email']\n                ];\n                return true;\n            }\n            return false;\n        } catch (PDOException $e) {\n            echo \"Login Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user profile\n    public function getProfile($userId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Profile Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```\n\n### 3. Product Management\n\nCreate a `Product` class for managing products.\n\n```php\nclass Product {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Add new product\n    public function addProduct($name, $description, $price, $stock, $image, $category) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO products (name, description, price, stock, image, category) VALUES (?, ?, ?, ?, ?, ?)\");\n            $stmt->execute([$name, $description, $price, $stock, $image, $category]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Product Addition Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products\");\n            $stmt->execute();\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Product Retrieval Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get product details\n    public function getProductDetails($productId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$productId]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Product Details Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```\n\n### 4. Purchase Functionality\n\nCreate an `Order` class for handling purchases.\n\n```php\nclass Order {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Create new order\n    public function createOrder($userId, $cartItems, $totalAmount, $paymentMethod, $shippingAddress) {\n        try {\n            $orderDate = date('Y-m-d H:i:s');\n            $transactionId = uniqid();\n\n            // Insert main order\n            $stmt = $this->db->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, shipping_address, transaction_id) \n                                      VALUES (?, ?, ?, ?, ?)\");\n            $stmt->execute([$userId, $totalAmount, $paymentMethod, $shippingAddress, $transactionId]);\n            $orderId = $this->db->lastInsertId();\n\n            // Insert order details\n            foreach ($cartItems as $item) {\n                $this->addOrderDetail($orderId, $item['id'], $item['quantity'], $item['subtotal']);\n            }\n\n            return [\n                'order_id' => $orderId,\n                'transaction_id' => $transactionId,\n                'total_amount' => $totalAmount\n            ];\n        } catch (PDOException $e) {\n            echo \"Order Creation Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Add order details\n    private function addOrderDetail($orderId, $productId, $quantity, $subtotal) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO order_details (order_id, product_id, quantity, subtotal) \n                                      VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$orderId, $productId, $quantity, $subtotal]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Order Detail Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user orders\n    public function getUserOrders($userId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Order Retrieval Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Update order status\n    public function updateOrderStatus($orderId, $newStatus) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE orders SET order_status = ? WHERE id = ?\");\n            $stmt->execute([$newStatus, $orderId]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Order Status Update Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```\n\n### 5. Session Management\n\nUse PHP sessions to track user and cart information.\n\n```php\n// Start session\nsession_start();\n\n// Check if user is logged in\nif (isset($_SESSION['user'])) {\n    $userId = $_SESSION['user']['id'];\n} else {\n    // Redirect to login page\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if product is already in cart\n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $product = new Product($db);\n        $productDetails = $product->getProductDetails($productId);\n\n        $_SESSION['cart'][$productId] = array(\n            'id' => $productId,\n            'name' => $productDetails['name'],\n            'price' => $productDetails['price'],\n            'quantity' => $quantity,\n            'subtotal' => $productDetails['price'] * $quantity\n        );\n    }\n}\n\n// Remove item from cart\nif (isset($_GET['remove'])) {\n    $productId = $_GET['remove'];\n    unset($_SESSION['cart'][$productId]);\n}\n```\n\n### 6. Checkout Process\n\nCreate a checkout page where users can review their order and make payment.\n\n```php\n// Display cart contents\nif (isset($_SESSION['cart'])) {\n    $cartItems = $_SESSION['cart'];\n    $totalAmount = array_sum(array_column($cartItems, 'subtotal'));\n} else {\n    // No items in cart\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Process checkout\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $paymentMethod = $_POST['payment_method'];\n    $shippingAddress = $_POST['shipping_address'];\n\n    try {\n        $order = new Order($db);\n        $orderResult = $order->createOrder(\n            $userId,\n            array_values($cartItems),\n            $totalAmount,\n            $paymentMethod,\n            $shippingAddress\n        );\n\n        if ($orderResult) {\n            // Clear cart\n            unset($_SESSION['cart']);\n\n            // Redirect to thank you page\n            header(\"Location: thankyou.php?order_id=\" . $orderResult['order_id']);\n            exit();\n        }\n    } catch (PDOException $e) {\n        echo \"Error processing your order: \" . $e->getMessage();\n    }\n}\n```\n\n### 7. Order Confirmation Email\n\nSend an email confirmation to the user after purchase.\n\n```php\n// Send order confirmation email\nfunction sendOrderConfirmation($email, $orderId, $totalAmount, $transactionId) {\n    $subject = \"Order Confirmation #{$orderId}\";\n    $message = \"\n        <html>\n            <head>\n                <title>Order Confirmation</title>\n            </head>\n            <body>\n                <h1>Your order has been received!</h1>\n                <p>Order ID: {$orderId}</p>\n                <p>Total Amount: ${$totalAmount}</p>\n                <p>Transaction ID: {$transactionId}</p>\n                <p>We will ship your items within 2-3 business days.</p>\n            </body>\n        </html>\n    \";\n    \n    $headers = \"MIME-Version: 1.0\" . \"\\r\\n\";\n    $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";\n    $headers .= \"From: Your Store <yourstore@example.com>\" . \"\\r\\n\";\n\n    mail($email, $subject, $message, $headers);\n}\n```\n\n### 8. Usage Example\n\nHere's how to use the classes in your application:\n\n```php\n// Connect to database\ntry {\n    $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Create user instance\n$user = new User($db);\n\n// Check if user is logged in\nif (!isset($_SESSION['user'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Display user profile\n$userProfile = $user->getProfile($_SESSION['user']['id']);\necho \"Welcome, \" . $userProfile['name'] . \"!\";\n\n// Display all products\n$product = new Product($db);\n$products = $product->getAllProducts();\n\nforeach ($products as $product) {\n    echo \"<div class='product'>\";\n    echo \"<h2>{$product['name']}</h2>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='{$product['id']}'>\";\n    echo \"<input type='number' name='quantity' min='1' max='{$product['stock']}' value='1'>\";\n    echo \"<button type='submit' name='add_to_cart'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n```\n\n### Important Notes\n\n- Replace `your_database`, `username`, and `password` with your actual database credentials.\n- Implement proper error handling and security measures like input validation, SQL injection prevention (using prepared statements), and CSRF protection.\n- Use HTTPS for secure transactions when dealing with real payment information.\n- You might want to integrate a real payment gateway instead of the placeholder implementation shown here.\n\nThis is a basic implementation that you can expand based on your specific needs. Features like product categories, search functionality, user reviews, etc., can be added as per your requirements.", "code_blocks": [null, "```php\nclass User {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Register new user\n    public function register($name, $email, $password, $phone, $address) {\n        try {\n            $hashPassword = password_hash($password, PASSWORD_DEFAULT);\n            $stmt = $this->db->prepare(\"INSERT INTO users (name, email, password, phone, address) VALUES (?, ?, ?, ?, ?)\");\n            $stmt->execute([$name, $email, $hashPassword, $phone, $address]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Registration Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Login user\n    public function login($email, $password) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM users WHERE email = ?\");\n            $stmt->execute([$email]);\n            $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n            if ($user && password_verify($password, $user['password'])) {\n                $_SESSION['user'] = [\n                    'id' => $user['id'],\n                    'name' => $user['name'],\n                    'email' => $user['email']\n                ];\n                return true;\n            }\n            return false;\n        } catch (PDOException $e) {\n            echo \"Login Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user profile\n    public function getProfile($userId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Profile Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```", "```php\nclass Product {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Add new product\n    public function addProduct($name, $description, $price, $stock, $image, $category) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO products (name, description, price, stock, image, category) VALUES (?, ?, ?, ?, ?, ?)\");\n            $stmt->execute([$name, $description, $price, $stock, $image, $category]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Product Addition Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products\");\n            $stmt->execute();\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Product Retrieval Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get product details\n    public function getProductDetails($productId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$productId]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Product Details Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```", "```php\nclass Order {\n    private $db;\n\n    public function __construct($database) {\n        $this->db = $database;\n    }\n\n    // Create new order\n    public function createOrder($userId, $cartItems, $totalAmount, $paymentMethod, $shippingAddress) {\n        try {\n            $orderDate = date('Y-m-d H:i:s');\n            $transactionId = uniqid();\n\n            // Insert main order\n            $stmt = $this->db->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, shipping_address, transaction_id) \n                                      VALUES (?, ?, ?, ?, ?)\");\n            $stmt->execute([$userId, $totalAmount, $paymentMethod, $shippingAddress, $transactionId]);\n            $orderId = $this->db->lastInsertId();\n\n            // Insert order details\n            foreach ($cartItems as $item) {\n                $this->addOrderDetail($orderId, $item['id'], $item['quantity'], $item['subtotal']);\n            }\n\n            return [\n                'order_id' => $orderId,\n                'transaction_id' => $transactionId,\n                'total_amount' => $totalAmount\n            ];\n        } catch (PDOException $e) {\n            echo \"Order Creation Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Add order details\n    private function addOrderDetail($orderId, $productId, $quantity, $subtotal) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO order_details (order_id, product_id, quantity, subtotal) \n                                      VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$orderId, $productId, $quantity, $subtotal]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Order Detail Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user orders\n    public function getUserOrders($userId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Order Retrieval Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Update order status\n    public function updateOrderStatus($orderId, $newStatus) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE orders SET order_status = ? WHERE id = ?\");\n            $stmt->execute([$newStatus, $orderId]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Order Status Update Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```", "```php\n// Start session\nsession_start();\n\n// Check if user is logged in\nif (isset($_SESSION['user'])) {\n    $userId = $_SESSION['user']['id'];\n} else {\n    // Redirect to login page\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if product is already in cart\n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $product = new Product($db);\n        $productDetails = $product->getProductDetails($productId);\n\n        $_SESSION['cart'][$productId] = array(\n            'id' => $productId,\n            'name' => $productDetails['name'],\n            'price' => $productDetails['price'],\n            'quantity' => $quantity,\n            'subtotal' => $productDetails['price'] * $quantity\n        );\n    }\n}\n\n// Remove item from cart\nif (isset($_GET['remove'])) {\n    $productId = $_GET['remove'];\n    unset($_SESSION['cart'][$productId]);\n}\n```", "```php\n// Display cart contents\nif (isset($_SESSION['cart'])) {\n    $cartItems = $_SESSION['cart'];\n    $totalAmount = array_sum(array_column($cartItems, 'subtotal'));\n} else {\n    // No items in cart\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Process checkout\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $paymentMethod = $_POST['payment_method'];\n    $shippingAddress = $_POST['shipping_address'];\n\n    try {\n        $order = new Order($db);\n        $orderResult = $order->createOrder(\n            $userId,\n            array_values($cartItems),\n            $totalAmount,\n            $paymentMethod,\n            $shippingAddress\n        );\n\n        if ($orderResult) {\n            // Clear cart\n            unset($_SESSION['cart']);\n\n            // Redirect to thank you page\n            header(\"Location: thankyou.php?order_id=\" . $orderResult['order_id']);\n            exit();\n        }\n    } catch (PDOException $e) {\n        echo \"Error processing your order: \" . $e->getMessage();\n    }\n}\n```", "```php\n// Send order confirmation email\nfunction sendOrderConfirmation($email, $orderId, $totalAmount, $transactionId) {\n    $subject = \"Order Confirmation #{$orderId}\";\n    $message = \"\n        <html>\n            <head>\n                <title>Order Confirmation</title>\n            </head>\n            <body>\n                <h1>Your order has been received!</h1>\n                <p>Order ID: {$orderId}</p>\n                <p>Total Amount: ${$totalAmount}</p>\n                <p>Transaction ID: {$transactionId}</p>\n                <p>We will ship your items within 2-3 business days.</p>\n            </body>\n        </html>\n    \";\n    \n    $headers = \"MIME-Version: 1.0\" . \"\\r\\n\";\n    $headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";\n    $headers .= \"From: Your Store <yourstore@example.com>\" . \"\\r\\n\";\n\n    mail($email, $subject, $message, $headers);\n}\n```", "```php\n// Connect to database\ntry {\n    $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Create user instance\n$user = new User($db);\n\n// Check if user is logged in\nif (!isset($_SESSION['user'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Display user profile\n$userProfile = $user->getProfile($_SESSION['user']['id']);\necho \"Welcome, \" . $userProfile['name'] . \"!\";\n\n// Display all products\n$product = new Product($db);\n$products = $product->getAllProducts();\n\nforeach ($products as $product) {\n    echo \"<div class='product'>\";\n    echo \"<h2>{$product['name']}</h2>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='{$product['id']}'>\";\n    echo \"<input type='number' name='quantity' min='1' max='{$product['stock']}' value='1'>\";\n    echo \"<button type='submit' name='add_to_cart'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n```"]}
