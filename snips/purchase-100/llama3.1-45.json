{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here's an example of how you can create a basic purchase cart functionality using PHP:\n\n**Note:** This is a simplified example and does not include security measures like authentication, authorization, or payment processing.\n\n**Database Schema:**\n\nWe'll need a database schema to store the products and the cart items. Let's assume we have two tables:\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE cart_items (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  product_id INT,\n  quantity INT,\n  cart_id INT,\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**Cart Class:**\n\nCreate a `Cart` class to manage the cart functionality:\n```php\nclass Cart {\n  private $cartId;\n  private $items;\n\n  public function __construct($cartId = null) {\n    if ($cartId) {\n      $this->cartId = $cartId;\n    } else {\n      // Generate a new cart ID if none is provided\n      $this->cartId = uniqid();\n    }\n    $this->items = array();\n  }\n\n  public function addItem($productId, $quantity) {\n    if (!isset($this->items[$productId])) {\n      $this->items[$productId] = array('quantity' => 0);\n    }\n    $this->items[$productId]['quantity'] += $quantity;\n    // Insert the item into the cart_items table\n    db::insert('cart_items', array(\n      'product_id' => $productId,\n      'quantity' => $quantity,\n      'cart_id' => $this->cartId\n    ));\n  }\n\n  public function removeItem($productId) {\n    if (isset($this->items[$productId])) {\n      unset($this->items[$productId]);\n      // Delete the item from the cart_items table\n      db::delete('cart_items', array(\n        'product_id' => $productId,\n        'cart_id' => $this->cartId\n      ));\n    }\n  }\n\n  public function getItems() {\n    return $this->items;\n  }\n\n  public function getCartTotal() {\n    $total = 0;\n    foreach ($this->items as $item) {\n      $total += $item['quantity'] * db::select('products', array(\n        'id' => $item['product_id']\n      ))[0]['price'];\n    }\n    return $total;\n  }\n\n  public function isEmpty() {\n    return empty($this->items);\n  }\n}\n```\n\n**DB Class:**\n\nCreate a `db` class to handle database interactions:\n```php\nclass db {\n  private static $connection;\n\n  public static function connect() {\n    self::$connection = new mysqli('localhost', 'username', 'password', 'database');\n    if (self::$connection->connect_error) {\n      die('Connection failed: ' . self::$connection->connect_error);\n    }\n  }\n\n  public static function select($table, $conditions) {\n    $query = \"SELECT * FROM $table WHERE \";\n    foreach ($conditions as $key => $value) {\n      $query .= \"$key = '$value' AND \";\n    }\n    $query = rtrim($query, ' AND ');\n    return self::$connection->query($query)->fetch_assoc();\n  }\n\n  public static function insert($table, $data) {\n    $fields = implode(', ', array_keys($data));\n    $values = implode(', ', array_map(function($v){ return \"'$v'\"; }, array_values($data)));\n    return self::$connection->query(\"INSERT INTO $table ($fields) VALUES ($values)\");\n  }\n\n  public static function delete($table, $conditions) {\n    $query = \"DELETE FROM $table WHERE \";\n    foreach ($conditions as $key => $value) {\n      $query .= \"$key = '$value' AND \";\n    }\n    $query = rtrim($query, ' AND ');\n    return self::$connection->query($query);\n  }\n}\n```\n\n**Usage:**\n\n```php\n$cart = new Cart();\n$cart->addItem(1, 2); // Add product with ID 1 and quantity 2 to the cart\n$cart->addItem(3, 1); // Add product with ID 3 and quantity 1 to the cart\n\nprint_r($cart->getItems()); // Output: Array ( [1] => Array ( [product_id] => 1 [quantity] => 2 ) [3] => Array ( [product_id] => 3 [quantity] => 1 ) )\n\necho $cart->getCartTotal(); // Output: Total price of the cart\n\n$cart->removeItem(1); // Remove product with ID 1 from the cart\n\nprint_r($cart->getItems()); // Output: Array ( [3] => Array ( [product_id] => 3 [quantity] => 1 ) )\n\necho $cart->isEmpty(); // Output: boolean true\n```\n\nThis is a basic implementation of a purchase cart functionality using PHP. You can extend this example to include features like authentication, authorization, payment processing, and more.", "code_blocks": [null, "```php\nclass Cart {\n  private $cartId;\n  private $items;\n\n  public function __construct($cartId = null) {\n    if ($cartId) {\n      $this->cartId = $cartId;\n    } else {\n      // Generate a new cart ID if none is provided\n      $this->cartId = uniqid();\n    }\n    $this->items = array();\n  }\n\n  public function addItem($productId, $quantity) {\n    if (!isset($this->items[$productId])) {\n      $this->items[$productId] = array('quantity' => 0);\n    }\n    $this->items[$productId]['quantity'] += $quantity;\n    // Insert the item into the cart_items table\n    db::insert('cart_items', array(\n      'product_id' => $productId,\n      'quantity' => $quantity,\n      'cart_id' => $this->cartId\n    ));\n  }\n\n  public function removeItem($productId) {\n    if (isset($this->items[$productId])) {\n      unset($this->items[$productId]);\n      // Delete the item from the cart_items table\n      db::delete('cart_items', array(\n        'product_id' => $productId,\n        'cart_id' => $this->cartId\n      ));\n    }\n  }\n\n  public function getItems() {\n    return $this->items;\n  }\n\n  public function getCartTotal() {\n    $total = 0;\n    foreach ($this->items as $item) {\n      $total += $item['quantity'] * db::select('products', array(\n        'id' => $item['product_id']\n      ))[0]['price'];\n    }\n    return $total;\n  }\n\n  public function isEmpty() {\n    return empty($this->items);\n  }\n}\n```", "```php\nclass db {\n  private static $connection;\n\n  public static function connect() {\n    self::$connection = new mysqli('localhost', 'username', 'password', 'database');\n    if (self::$connection->connect_error) {\n      die('Connection failed: ' . self::$connection->connect_error);\n    }\n  }\n\n  public static function select($table, $conditions) {\n    $query = \"SELECT * FROM $table WHERE \";\n    foreach ($conditions as $key => $value) {\n      $query .= \"$key = '$value' AND \";\n    }\n    $query = rtrim($query, ' AND ');\n    return self::$connection->query($query)->fetch_assoc();\n  }\n\n  public static function insert($table, $data) {\n    $fields = implode(', ', array_keys($data));\n    $values = implode(', ', array_map(function($v){ return \"'$v'\"; }, array_values($data)));\n    return self::$connection->query(\"INSERT INTO $table ($fields) VALUES ($values)\");\n  }\n\n  public static function delete($table, $conditions) {\n    $query = \"DELETE FROM $table WHERE \";\n    foreach ($conditions as $key => $value) {\n      $query .= \"$key = '$value' AND \";\n    }\n    $query = rtrim($query, ' AND ');\n    return self::$connection->query($query);\n  }\n}\n```", "```php\n$cart = new Cart();\n$cart->addItem(1, 2); // Add product with ID 1 and quantity 2 to the cart\n$cart->addItem(3, 1); // Add product with ID 3 and quantity 1 to the cart\n\nprint_r($cart->getItems()); // Output: Array ( [1] => Array ( [product_id] => 1 [quantity] => 2 ) [3] => Array ( [product_id] => 3 [quantity] => 1 ) )\n\necho $cart->getCartTotal(); // Output: Total price of the cart\n\n$cart->removeItem(1); // Remove product with ID 1 from the cart\n\nprint_r($cart->getItems()); // Output: Array ( [3] => Array ( [product_id] => 3 [quantity] => 1 ) )\n\necho $cart->isEmpty(); // Output: boolean true\n```"]}
