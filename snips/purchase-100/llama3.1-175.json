{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**Database Setup**\n\nFirst, let's assume we have a database with two tables: `products` and `orders`. The `products` table has the following structure:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| name | varchar(255) |\n| price | decimal(10,2) |\n\nThe `orders` table has the following structure:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| customer_id | int (foreign key referencing customers.id) |\n| order_date | date |\n| total | decimal(10,2) |\n\n**PHP Code**\n\nLet's create a PHP class called `Purchase` that will handle the purchase functionality.\n\n```php\n// purchase.php\n\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');\n    }\n\n    /**\n     * Add a product to the cart\n     *\n     * @param int $product_id\n     * @param int $quantity\n     */\n    public function addProductToCart($product_id, $quantity) {\n        // Check if product exists\n        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :id');\n        $stmt->bindParam(':id', $product_id);\n        $stmt->execute();\n        $product = $stmt->fetch();\n\n        if ($product) {\n            // Calculate new total\n            $newTotal = $product['price'] * $quantity;\n\n            // Insert into cart (assuming a cart table exists)\n            $stmt = $this->db->prepare('INSERT INTO cart (product_id, quantity, total) VALUES (:id, :quantity, :total)');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->bindParam(':total', $newTotal);\n            $stmt->execute();\n        } else {\n            echo \"Product does not exist\";\n        }\n    }\n\n    /**\n     * Place an order\n     *\n     * @param int $customer_id\n     */\n    public function placeOrder($customer_id) {\n        // Get cart contents\n        $cartContents = $this->getCartContents();\n\n        // Calculate total for order\n        $orderTotal = 0;\n        foreach ($cartContents as $content) {\n            $orderTotal += $content['total'];\n        }\n\n        // Insert into orders table\n        $stmt = $this->db->prepare('INSERT INTO orders (customer_id, order_date, total) VALUES (:id, NOW(), :total)');\n        $stmt->bindParam(':id', $customer_id);\n        $stmt->bindParam(':total', $orderTotal);\n        $stmt->execute();\n\n        // Insert into order_details table\n        foreach ($cartContents as $content) {\n            $stmt = $this->db->prepare('INSERT INTO order_details (order_id, product_id, quantity) VALUES (:id, :product_id, :quantity)');\n            $stmt->bindParam(':id', $this->db->lastInsertId());\n            $stmt->bindParam(':product_id', $content['product_id']);\n            $stmt->bindParam(':quantity', $content['quantity']);\n            $stmt->execute();\n        }\n\n        // Clear cart\n        $this->clearCart();\n\n        echo \"Order placed successfully\";\n    }\n\n    /**\n     * Get cart contents\n     *\n     * @return array\n     */\n    public function getCartContents() {\n        // Assuming a cart table exists with product_id, quantity, and total columns\n        $stmt = $this->db->prepare('SELECT * FROM cart');\n        $stmt->execute();\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Clear cart\n     */\n    public function clearCart() {\n        // Assuming a cart table exists\n        $stmt = $this->db->prepare('DELETE FROM cart');\n        $stmt->execute();\n    }\n}\n```\n\n**Example Usage**\n\n```php\n// Create a new purchase object\n$purchase = new Purchase();\n\n// Add product to cart\n$purchase->addProductToCart(1, 2);\n\n// Place order\n$purchase->placeOrder(123);\n```\n\nNote that this is a simplified example and does not include any error handling or security measures (such as sanitizing user input). You should adapt it to your specific needs and add the necessary security measures. Additionally, you will need to modify the database schema and PHP code to fit your exact requirements.", "code_blocks": ["```php\n// purchase.php\n\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');\n    }\n\n    /**\n     * Add a product to the cart\n     *\n     * @param int $product_id\n     * @param int $quantity\n     */\n    public function addProductToCart($product_id, $quantity) {\n        // Check if product exists\n        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :id');\n        $stmt->bindParam(':id', $product_id);\n        $stmt->execute();\n        $product = $stmt->fetch();\n\n        if ($product) {\n            // Calculate new total\n            $newTotal = $product['price'] * $quantity;\n\n            // Insert into cart (assuming a cart table exists)\n            $stmt = $this->db->prepare('INSERT INTO cart (product_id, quantity, total) VALUES (:id, :quantity, :total)');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->bindParam(':total', $newTotal);\n            $stmt->execute();\n        } else {\n            echo \"Product does not exist\";\n        }\n    }\n\n    /**\n     * Place an order\n     *\n     * @param int $customer_id\n     */\n    public function placeOrder($customer_id) {\n        // Get cart contents\n        $cartContents = $this->getCartContents();\n\n        // Calculate total for order\n        $orderTotal = 0;\n        foreach ($cartContents as $content) {\n            $orderTotal += $content['total'];\n        }\n\n        // Insert into orders table\n        $stmt = $this->db->prepare('INSERT INTO orders (customer_id, order_date, total) VALUES (:id, NOW(), :total)');\n        $stmt->bindParam(':id', $customer_id);\n        $stmt->bindParam(':total', $orderTotal);\n        $stmt->execute();\n\n        // Insert into order_details table\n        foreach ($cartContents as $content) {\n            $stmt = $this->db->prepare('INSERT INTO order_details (order_id, product_id, quantity) VALUES (:id, :product_id, :quantity)');\n            $stmt->bindParam(':id', $this->db->lastInsertId());\n            $stmt->bindParam(':product_id', $content['product_id']);\n            $stmt->bindParam(':quantity', $content['quantity']);\n            $stmt->execute();\n        }\n\n        // Clear cart\n        $this->clearCart();\n\n        echo \"Order placed successfully\";\n    }\n\n    /**\n     * Get cart contents\n     *\n     * @return array\n     */\n    public function getCartContents() {\n        // Assuming a cart table exists with product_id, quantity, and total columns\n        $stmt = $this->db->prepare('SELECT * FROM cart');\n        $stmt->execute();\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Clear cart\n     */\n    public function clearCart() {\n        // Assuming a cart table exists\n        $stmt = $this->db->prepare('DELETE FROM cart');\n        $stmt->execute();\n    }\n}\n```", "```php\n// Create a new purchase object\n$purchase = new Purchase();\n\n// Add product to cart\n$purchase->addProductToCart(1, 2);\n\n// Place order\n$purchase->placeOrder(123);\n```"]}
