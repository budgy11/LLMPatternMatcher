{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Establish database connection\n$conn = new mysqli($host, $username, $password, $database);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to handle purchase process\nfunction handlePurchase($orderData) {\n    // Sanitize and validate input data\n    $product_id = mysqli_real_escape_string($conn, $orderData['product_id']);\n    $quantity = mysqli_real_escape_string($conn, $orderData['quantity']);\n    $customer_name = mysqli_real_escape_string($conn, $orderData['customer_name']);\n    $customer_email = mysqli_real_escape_string($conn, $orderData['customer_email']);\n    $payment_method = mysqli_real_escape_string($conn, $orderData['payment_method']);  // e.g., \"credit_card\", \"paypal\"\n\n    // Check if product exists\n    $product_query = \"SELECT id, name, price FROM products WHERE id = '$product_id'\";\n    $product_result = $conn->query($product_query);\n\n    if (!$product_result->num_rows > 0) {\n        return \"Error: Product not found.\";\n    }\n\n    $product = $product_result->fetch_assoc();\n    $product_name = $product['name'];\n    $product_price = $product['price'];\n\n    // Calculate total price\n    $total_price = $product_price * $quantity;\n\n    // Insert order into the database\n    $sql = \"INSERT INTO orders (product_id, customer_name, customer_email, product_name, quantity, price, payment_method)\n            VALUES ('$product_id', '$customer_name', '$customer_email', '$product_name', '$quantity', '$total_price', '$payment_method')\";\n\n    if ($conn->query($sql) === TRUE) {\n        // Update product inventory (Assuming you have an inventory table)\n        $inventory_sql = \"UPDATE inventory SET quantity = quantity - '$quantity' WHERE product_id = '$product_id'\";\n        if ($conn->query($inventory_sql) === TRUE) {\n            return \"Purchase successful! Order ID: \" . $conn->insert_id;\n        } else {\n            return \"Error updating inventory.\";\n        }\n    } else {\n        return \"Error creating order.\";\n    }\n}\n\n// ---  Example Usage (Simulating a form submission) ---\n\n// Assuming you have a form with fields: product_id, quantity, customer_name, customer_email, payment_method\n\n// Get form data (Simulating input)\n$orderData = [\n    'product_id' => 1, // Example product ID\n    'quantity' => 2,\n    'customer_name' => \"John Doe\",\n    'customer_email' => \"john.doe@example.com\",\n    'payment_method' => \"credit_card\"\n];\n\n// Process the purchase\n$result = handlePurchase($orderData);\n\n// Display the result\necho \"<p>\" . $result . \"</p>\";\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:** Establishes a connection to your database using `mysqli`.  **IMPORTANT:** Replace the placeholder credentials with your actual database details.  **NEVER** store database passwords directly in your code in a production environment. Use environment variables or a configuration file.\n\n* **Error Handling:** Includes `if ($conn->connect_error)` to check for connection errors.  Also includes error handling within the `handlePurchase` function, so you can give more specific error messages.\n\n* **`handlePurchase` Function:** This function encapsulates the entire purchase logic, making the code more organized and reusable.\n\n* **Input Sanitization:**  Uses `mysqli_real_escape_string()` to escape all user input *before* using it in your SQL queries.  This is **critical** to prevent SQL injection vulnerabilities.\n\n* **Product Validation:** Checks if the `product_id` actually exists in the `products` table.  This avoids errors if someone enters a non-existent ID.\n\n* **Price Calculation:**  Calculates the `total_price` correctly based on the product price and quantity.\n\n* **Inventory Update:** Includes an example of how to update your inventory table.  This assumes you have a separate `inventory` table that tracks product quantities.  **Important:**  Adapt this part to your specific inventory management system.\n\n* **Order ID:**  The `mysqli->insert_id` retrieves the auto-generated ID for the new order.\n\n* **Clearer Return Values:** The `handlePurchase` function returns a string indicating success or failure, with a more descriptive error message in case of failure.\n\n* **Example Usage:**  Demonstrates how to call the `handlePurchase` function with example form data.  This makes the code easier to understand and test.\n\n* **Comments:**  Added comments to explain the purpose of each section of the code.\n\n**To make this functional, you need to:**\n\n1. **Create the Database and Tables:**\n   * Create a MySQL database.\n   * Create the following tables:\n\n   ```sql\n   CREATE TABLE products (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL\n   );\n\n   CREATE TABLE orders (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       product_id INT NOT NULL,\n       customer_name VARCHAR(255) NOT NULL,\n       customer_email VARCHAR(255) NOT NULL,\n       product_name VARCHAR(255) NOT NULL,\n       quantity INT NOT NULL,\n       price DECIMAL(10, 2) NOT NULL,\n       payment_method VARCHAR(50) NOT NULL,\n       FOREIGN KEY (product_id) REFERENCES products(id)\n   );\n\n   CREATE TABLE inventory (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       product_id INT NOT NULL,\n       quantity INT NOT NULL,\n       FOREIGN KEY (product_id) REFERENCES products(id)\n   );\n   ```\n\n2. **Populate the `products` Table:**  Add some sample products to the `products` table.\n\n3. **Adapt to your Inventory System:** Modify the `inventory` update query to match your specific inventory management logic (e.g., if you track stock levels differently).\n\n4. **Create a Form:** Create an HTML form with the fields necessary to collect customer information and the purchase details (product ID, quantity, etc.).\n\n5. **Connect the Form to the PHP Script:**  Use JavaScript to submit the form data to your PHP script.\n\n6. **Handle Form Submission:**  On the server-side (the PHP script), process the form data using the `handlePurchase` function.\n\n7. **Display the Result:** Display the result of the purchase to the user.\n\n**Security Considerations (Important):**\n\n* **SQL Injection:**  The use of `mysqli_real_escape_string()` is *essential* to prevent SQL injection.  However, always validate and sanitize user input rigorously.\n* **Cross-Site Scripting (XSS):**  If you're displaying any user-provided data (e.g., customer name or product name) on your website, you *must* encode it properly to prevent XSS vulnerabilities. Use `htmlspecialchars()` for HTML encoding.\n* **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server, protecting sensitive data like customer information.\n* **Password Protection:**  If you need to store customer passwords, use a strong password hashing algorithm (e.g., bcrypt) and store only the hash, not the plain password.\n* **Rate Limiting:**  Implement rate limiting to prevent abuse and denial-of-service attacks.\n\nThis comprehensive example provides a solid foundation for building a purchase functionality. Remember to prioritize security and adapt the code to your specific needs.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Establish database connection\n$conn = new mysqli($host, $username, $password, $database);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to handle purchase process\nfunction handlePurchase($orderData) {\n    // Sanitize and validate input data\n    $product_id = mysqli_real_escape_string($conn, $orderData['product_id']);\n    $quantity = mysqli_real_escape_string($conn, $orderData['quantity']);\n    $customer_name = mysqli_real_escape_string($conn, $orderData['customer_name']);\n    $customer_email = mysqli_real_escape_string($conn, $orderData['customer_email']);\n    $payment_method = mysqli_real_escape_string($conn, $orderData['payment_method']);  // e.g., \"credit_card\", \"paypal\"\n\n    // Check if product exists\n    $product_query = \"SELECT id, name, price FROM products WHERE id = '$product_id'\";\n    $product_result = $conn->query($product_query);\n\n    if (!$product_result->num_rows > 0) {\n        return \"Error: Product not found.\";\n    }\n\n    $product = $product_result->fetch_assoc();\n    $product_name = $product['name'];\n    $product_price = $product['price'];\n\n    // Calculate total price\n    $total_price = $product_price * $quantity;\n\n    // Insert order into the database\n    $sql = \"INSERT INTO orders (product_id, customer_name, customer_email, product_name, quantity, price, payment_method)\n            VALUES ('$product_id', '$customer_name', '$customer_email', '$product_name', '$quantity', '$total_price', '$payment_method')\";\n\n    if ($conn->query($sql) === TRUE) {\n        // Update product inventory (Assuming you have an inventory table)\n        $inventory_sql = \"UPDATE inventory SET quantity = quantity - '$quantity' WHERE product_id = '$product_id'\";\n        if ($conn->query($inventory_sql) === TRUE) {\n            return \"Purchase successful! Order ID: \" . $conn->insert_id;\n        } else {\n            return \"Error updating inventory.\";\n        }\n    } else {\n        return \"Error creating order.\";\n    }\n}\n\n// ---  Example Usage (Simulating a form submission) ---\n\n// Assuming you have a form with fields: product_id, quantity, customer_name, customer_email, payment_method\n\n// Get form data (Simulating input)\n$orderData = [\n    'product_id' => 1, // Example product ID\n    'quantity' => 2,\n    'customer_name' => \"John Doe\",\n    'customer_email' => \"john.doe@example.com\",\n    'payment_method' => \"credit_card\"\n];\n\n// Process the purchase\n$result = handlePurchase($orderData);\n\n// Display the result\necho \"<p>\" . $result . \"</p>\";\n?>\n```"]}
