{"prompt": "Create a purchase cart functionality using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database connection details (Replace with your actual details)\n$db_host = \"localhost\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n\n// Cart class\nclass Cart {\n  public $cart = [];\n\n  public function __construct() {\n    // Load cart from session on initialization\n    if (session_start()) {\n      $this->cart = isset($_SESSION['cart']) ? $_SESSION['cart'] : array();\n    }\n  }\n\n  public function addProduct($product_id, $product_name, $price, $quantity = 1) {\n    $product_id = $product_id;\n    $product_name = $product_name;\n    $price = $price;\n    $quantity = (int)$quantity; // Convert quantity to integer\n\n    if (!isset($this->cart[$product_id])) {\n      $this->cart[$product_id] = [\n        'name' => $product_name,\n        'price' => $price,\n        'quantity' => $quantity,\n      ];\n    } else {\n      $this->cart[$product_id]['quantity'] += $quantity;\n    }\n    // Ensure quantity doesn't exceed a reasonable limit (optional)\n    $this->cart[$product_id]['quantity'] = min($this->cart[$product_id]['quantity'], 100); // Limit to 100\n  }\n\n  public function removeProduct($product_id) {\n    unset($this->cart[$product_id]);\n  }\n\n  public function updateQuantity($product_id, $new_quantity) {\n    $new_quantity = (int)$new_quantity; //Convert to integer\n\n    if (isset($this->cart[$product_id])) {\n      $this->cart[$product_id]['quantity'] = $new_quantity;\n    }\n  }\n\n\n  public function getCartContents() {\n    return $this->cart;\n  }\n\n  public function getTotal($conn) {\n    $total = 0;\n    foreach ($this->getCartContents() as $item) {\n      $total_item = $item['price'] * $item['quantity'];\n      $total += $total_item;\n    }\n    return $total;\n  }\n\n  public function clearCart() {\n    unset($_SESSION['cart']);\n    session_destroy();\n  }\n}\n\n// --- Cart operations ---\n\n// Initialize the cart\n$cart = new Cart();\n\n// --- Handle Form Submission (Add to Cart) ---\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  if (isset($_POST['add_to_cart'])) {\n    $product_id = $_POST['product_id'];\n    $product_name = $_POST['product_name'];\n    $price = $_POST['price'];\n    $quantity = $_POST['quantity']; // Get quantity from form\n    $cart->addProduct($product_id, $product_name, $price, $quantity);\n    $_SESSION['cart'] = $cart->getCartContents(); // Update session\n    // Redirect to cart page\n    header(\"Location: cart.php\");\n    exit;\n  }\n}\n\n\n// --- Display Cart Contents ---\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n  <style>\n    .cart-item {\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php\n  // Display Cart Items\n  $cart_contents = $cart->getCartContents();\n  if (count($cart_contents)) {\n    echo \"<h2>Cart Items:</h2>\";\n    foreach ($cart_contents as $item_id => $product) {\n      echo '<div class=\"cart-item\">';\n      echo 'Product: ' . $product['name'] . '<br>';\n      echo 'Price: $' . number_format($product['price'], 2) . '<br>';\n      echo 'Quantity: ' . $product['quantity'] . '<br>';\n      // Optional: Add a remove button to the cart\n      echo '<a href=\"cart.php?remove=' . $item_id . '\" style=\"color: red; text-decoration: underline;\">Remove</a><br>';\n      echo '--------------------<br>';\n    }\n\n    // Calculate and display total\n    $total = $cart->getTotal($conn);\n    echo '<h2>Total: $' . number_format($total, 2) . '</h2>';\n\n  } else {\n    echo \"<p>Your cart is empty.</p>\";\n  }\n  ?>\n\n  <hr>\n\n  <h2>Add to Cart</h2>\n  <?php\n    // Example Products (Replace with your actual product data)\n    $products = [\n        'product1' => ['id' => 'product1', 'name' => 'Laptop', 'price' => 1200],\n        'product2' => ['id' => 'product2', 'name' => 'Mouse', 'price' => 25],\n        'product3' => ['id' => 'product3', 'name' => 'Keyboard', 'price' => 75]\n    ];\n\n    foreach ($products as $id => $product) {\n        echo '<form method=\"post\" action=\"cart.php\">';\n        echo '<label for=\"' . $id . '\">Product ID:</label> <input type=\"hidden\" id=\"' . $id . '\" name=\"product_id\" value=\"' . $id . '\">';\n        echo '<label for=\"' . $id . '\">Product Name:</label> <input type=\"text\" id=\"' . $id . '\" name=\"product_name\" value=\"' . $product['name'] . '\" readonly>';\n        echo '<label for=\"' . $id . '\">Price:</label> <input type=\"text\" id=\"' . $id . '\" name=\"price\" value=\"' . $product['price'] . '\" readonly>';\n        echo '<label for=\"' . $id . '\">Quantity:</label> <input type=\"number\" id=\"' . $id . '\" name=\"quantity\" value=\"1\" min=\"1\" max=\"100\">';\n        echo '<input type=\"submit\" name=\"add_to_cart\" value=\"Add to Cart\">';\n        echo '</form><br>';\n    }\n  ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Integration (Placeholders):**  The code includes placeholders for database connection details.  You *must* replace these with your actual database credentials.  This is crucial for real-world usage.\n* **Cart Class:** Encapsulates all cart logic, making the code much more organized and maintainable.\n* **`add_to_cart` Handling:**  The `add_to_cart` form handles adding items to the cart.  It correctly gets the `product_id`, `product_name`, `price`, and `quantity` from the form.\n* **Quantity Handling:** The code explicitly converts the quantity to an integer, preventing potential type issues.\n* **`removeProduct` function:** Allows for removing items from the cart\n* **`updateQuantity` function:** Allows for updating the quantity of a specific item in the cart\n* **`getTotal` Function:**  Calculates the total price of the cart contents.\n* **`clearCart()` Function:** Clears the cart, invalidating the session.\n* **Session Management:** Uses `session_start()` to maintain cart state between requests.  `session_destroy()` is called to clear the session.\n* **Form Input for Products:**  The example products are displayed in a form, allowing users to select them and add them to the cart.  The product name and price are read-only.  This makes it much easier to add products.\n* **Clearer HTML Output:** The HTML output is formatted for better readability.\n* **Error Handling (Basic):**  While this example doesn't have comprehensive error handling, it provides a solid foundation for adding more robust error checking (e.g., handling invalid product IDs).\n* **Comments:**  The code is thoroughly commented to explain the logic.\n* **Security:** Important! The current code is *not* fully secure.  For a production environment, you need to:\n    * **Input Validation:**  Validate all user input (product IDs, quantities, etc.) to prevent SQL injection and other vulnerabilities. *Never* trust user input directly.\n    * **Output Encoding:** Properly encode all output to prevent Cross-Site Scripting (XSS) vulnerabilities.  Use `htmlspecialchars()` for this.\n    * **Prepared Statements (Crucial):** Use prepared statements with parameterized queries to prevent SQL injection.  This is the *most* important security measure.\n\n**How to Use:**\n\n1. **Database Setup:** Create a database (e.g., `shopping_cart`) and a table (e.g., `products`) with columns for `id`, `name`, and `price`.  Populate the table with some sample data.\n2. **Replace Placeholders:**  Update the `$db_host`, `$db_user`, `$db_password`, and `$db_name` variables with your actual database credentials.\n3. **Adjust Product Data:** Replace the example `$products` array with your actual product data.  The `id` should match the `id` column in your database table.\n4. **Run the Script:**  Save the code as a `.php` file (e.g., `cart.php`) and run it through your web server.\n\nThis improved answer provides a much more complete and robust foundation for building a shopping cart functionality in PHP.  Remember to implement proper security measures for a production environment.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection details (Replace with your actual details)\n$db_host = \"localhost\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n\n// Cart class\nclass Cart {\n  public $cart = [];\n\n  public function __construct() {\n    // Load cart from session on initialization\n    if (session_start()) {\n      $this->cart = isset($_SESSION['cart']) ? $_SESSION['cart'] : array();\n    }\n  }\n\n  public function addProduct($product_id, $product_name, $price, $quantity = 1) {\n    $product_id = $product_id;\n    $product_name = $product_name;\n    $price = $price;\n    $quantity = (int)$quantity; // Convert quantity to integer\n\n    if (!isset($this->cart[$product_id])) {\n      $this->cart[$product_id] = [\n        'name' => $product_name,\n        'price' => $price,\n        'quantity' => $quantity,\n      ];\n    } else {\n      $this->cart[$product_id]['quantity'] += $quantity;\n    }\n    // Ensure quantity doesn't exceed a reasonable limit (optional)\n    $this->cart[$product_id]['quantity'] = min($this->cart[$product_id]['quantity'], 100); // Limit to 100\n  }\n\n  public function removeProduct($product_id) {\n    unset($this->cart[$product_id]);\n  }\n\n  public function updateQuantity($product_id, $new_quantity) {\n    $new_quantity = (int)$new_quantity; //Convert to integer\n\n    if (isset($this->cart[$product_id])) {\n      $this->cart[$product_id]['quantity'] = $new_quantity;\n    }\n  }\n\n\n  public function getCartContents() {\n    return $this->cart;\n  }\n\n  public function getTotal($conn) {\n    $total = 0;\n    foreach ($this->getCartContents() as $item) {\n      $total_item = $item['price'] * $item['quantity'];\n      $total += $total_item;\n    }\n    return $total;\n  }\n\n  public function clearCart() {\n    unset($_SESSION['cart']);\n    session_destroy();\n  }\n}\n\n// --- Cart operations ---\n\n// Initialize the cart\n$cart = new Cart();\n\n// --- Handle Form Submission (Add to Cart) ---\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  if (isset($_POST['add_to_cart'])) {\n    $product_id = $_POST['product_id'];\n    $product_name = $_POST['product_name'];\n    $price = $_POST['price'];\n    $quantity = $_POST['quantity']; // Get quantity from form\n    $cart->addProduct($product_id, $product_name, $price, $quantity);\n    $_SESSION['cart'] = $cart->getCartContents(); // Update session\n    // Redirect to cart page\n    header(\"Location: cart.php\");\n    exit;\n  }\n}\n\n\n// --- Display Cart Contents ---\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n  <style>\n    .cart-item {\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php\n  // Display Cart Items\n  $cart_contents = $cart->getCartContents();\n  if (count($cart_contents)) {\n    echo \"<h2>Cart Items:</h2>\";\n    foreach ($cart_contents as $item_id => $product) {\n      echo '<div class=\"cart-item\">';\n      echo 'Product: ' . $product['name'] . '<br>';\n      echo 'Price: $' . number_format($product['price'], 2) . '<br>';\n      echo 'Quantity: ' . $product['quantity'] . '<br>';\n      // Optional: Add a remove button to the cart\n      echo '<a href=\"cart.php?remove=' . $item_id . '\" style=\"color: red; text-decoration: underline;\">Remove</a><br>';\n      echo '--------------------<br>';\n    }\n\n    // Calculate and display total\n    $total = $cart->getTotal($conn);\n    echo '<h2>Total: $' . number_format($total, 2) . '</h2>';\n\n  } else {\n    echo \"<p>Your cart is empty.</p>\";\n  }\n  ?>\n\n  <hr>\n\n  <h2>Add to Cart</h2>\n  <?php\n    // Example Products (Replace with your actual product data)\n    $products = [\n        'product1' => ['id' => 'product1', 'name' => 'Laptop', 'price' => 1200],\n        'product2' => ['id' => 'product2', 'name' => 'Mouse', 'price' => 25],\n        'product3' => ['id' => 'product3', 'name' => 'Keyboard', 'price' => 75]\n    ];\n\n    foreach ($products as $id => $product) {\n        echo '<form method=\"post\" action=\"cart.php\">';\n        echo '<label for=\"' . $id . '\">Product ID:</label> <input type=\"hidden\" id=\"' . $id . '\" name=\"product_id\" value=\"' . $id . '\">';\n        echo '<label for=\"' . $id . '\">Product Name:</label> <input type=\"text\" id=\"' . $id . '\" name=\"product_name\" value=\"' . $product['name'] . '\" readonly>';\n        echo '<label for=\"' . $id . '\">Price:</label> <input type=\"text\" id=\"' . $id . '\" name=\"price\" value=\"' . $product['price'] . '\" readonly>';\n        echo '<label for=\"' . $id . '\">Quantity:</label> <input type=\"number\" id=\"' . $id . '\" name=\"quantity\" value=\"1\" min=\"1\" max=\"100\">';\n        echo '<input type=\"submit\" name=\"add_to_cart\" value=\"Add to Cart\">';\n        echo '</form><br>';\n    }\n  ?>\n\n</body>\n</html>\n```"]}
