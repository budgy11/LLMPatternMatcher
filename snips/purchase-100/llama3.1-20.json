{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of a basic purchase cart functionality in PHP. This example includes the following features:\n\n*   A cart that stores items with their quantities and prices\n*   A function to add items to the cart\n*   A function to remove items from the cart\n*   A function to update item quantities in the cart\n*   A function to calculate the total cost of the items in the cart\n\nThis is a simplified example and you may need to adapt it to your specific use case.\n\n**cart.php**\n```php\n<?php\n\n// Initialize an empty cart array\n$cart = [];\n\nfunction add_item_to_cart($product_id, $quantity) {\n    global $cart;\n\n    // Check if product already exists in the cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $product_id) {\n            // If product is found, update its quantity\n            $item['quantity'] += $quantity;\n            return;\n        }\n    }\n\n    // If product not found, add it to the cart with given quantity\n    $cart[] = ['id' => $product_id, 'name' => '', 'price' => 0, 'quantity' => $quantity];\n}\n\nfunction remove_item_from_cart($product_id) {\n    global $cart;\n\n    // Find and remove product from the cart\n    foreach ($cart as $key => &$item) {\n        if ($item['id'] == $product_id) {\n            unset($cart[$key]);\n            return;\n        }\n    }\n}\n\nfunction update_item_quantity($product_id, $new_quantity) {\n    global $cart;\n\n    // Find product in the cart and update its quantity\n    foreach ($cart as &$item) {\n        if ($item['id'] == $product_id) {\n            $item['quantity'] = $new_quantity;\n            return;\n        }\n    }\n}\n\nfunction calculate_total_cost() {\n    global $cart;\n\n    $total_cost = 0;\n    // Calculate total cost by multiplying price of each item by its quantity\n    foreach ($cart as $item) {\n        $total_cost += $item['price'] * $item['quantity'];\n    }\n\n    return $total_cost;\n}\n\n// Example usage:\nadd_item_to_cart(1, 2); // Add product with id 1 to the cart in a quantity of 2\nadd_item_to_cart(3, 1); // Add product with id 3 to the cart in a quantity of 1\n\nprint_r($cart);\n\nremove_item_from_cart(1);\necho \"\\n\";\n\nupdate_item_quantity(3, 5);\necho \"Total cost: \" . calculate_total_cost();\n\n?>\n```\n\n**Explanation:**\n\n*   The `add_item_to_cart` function adds products to the cart. It checks if a product is already in the cart and updates its quantity instead of adding it again.\n*   The `remove_item_from_cart` function removes items from the cart by their id.\n*   The `update_item_quantity` function updates the quantity of an item in the cart.\n*   The `calculate_total_cost` function calculates the total cost of all items in the cart.\n\nThis is a very basic example. You may need to adapt it for your specific use case, like displaying product names and prices, handling different product types (e.g., taxable vs non-taxable), etc.\n\n**Note:** In this simplified version, I have used `global $cart;` which means every function has access to the entire `$cart` array. This is not a good practice in larger applications because it can lead to data corruption or unexpected behavior. For production code, you should consider encapsulating the cart logic into an object with its own properties and methods.", "code_blocks": ["```php\n<?php\n\n// Initialize an empty cart array\n$cart = [];\n\nfunction add_item_to_cart($product_id, $quantity) {\n    global $cart;\n\n    // Check if product already exists in the cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $product_id) {\n            // If product is found, update its quantity\n            $item['quantity'] += $quantity;\n            return;\n        }\n    }\n\n    // If product not found, add it to the cart with given quantity\n    $cart[] = ['id' => $product_id, 'name' => '', 'price' => 0, 'quantity' => $quantity];\n}\n\nfunction remove_item_from_cart($product_id) {\n    global $cart;\n\n    // Find and remove product from the cart\n    foreach ($cart as $key => &$item) {\n        if ($item['id'] == $product_id) {\n            unset($cart[$key]);\n            return;\n        }\n    }\n}\n\nfunction update_item_quantity($product_id, $new_quantity) {\n    global $cart;\n\n    // Find product in the cart and update its quantity\n    foreach ($cart as &$item) {\n        if ($item['id'] == $product_id) {\n            $item['quantity'] = $new_quantity;\n            return;\n        }\n    }\n}\n\nfunction calculate_total_cost() {\n    global $cart;\n\n    $total_cost = 0;\n    // Calculate total cost by multiplying price of each item by its quantity\n    foreach ($cart as $item) {\n        $total_cost += $item['price'] * $item['quantity'];\n    }\n\n    return $total_cost;\n}\n\n// Example usage:\nadd_item_to_cart(1, 2); // Add product with id 1 to the cart in a quantity of 2\nadd_item_to_cart(3, 1); // Add product with id 3 to the cart in a quantity of 1\n\nprint_r($cart);\n\nremove_item_from_cart(1);\necho \"\\n\";\n\nupdate_item_quantity(3, 5);\necho \"Total cost: \" . calculate_total_cost();\n\n?>\n```"]}
