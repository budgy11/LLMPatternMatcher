{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Configuration (Replace with your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shop\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// Connect to the database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n\n// Function to add a purchase to the database\nfunction addPurchase($product_id, $quantity, $customer_name, $customer_email) {\n    global $conn;\n\n    // Sanitize input (Important for security - prevent SQL injection)\n    $product_id = $conn->real_escape_string($product_id);\n    $quantity = $conn->real_escape_string($quantity);\n    $customer_name = $conn->real_escape_string($customer_name);\n    $customer_email = $conn->real_escape_string($customer_email);\n\n\n    $sql = \"INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) \n            VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())\";\n\n    if ($conn->query($sql) === TRUE) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n// Function to update product quantity\nfunction updateProductQuantity($product_id, $quantity) {\n    global $conn;\n\n    // Sanitize input\n    $product_id = $conn->real_escape_string($product_id);\n    $quantity = $conn->real_escape_string($quantity);\n\n    // Check if the product exists\n    $check_query = \"SELECT id FROM products WHERE id = '$product_id'\";\n    $result = $conn->query($check_query);\n\n    if ($result->num_rows > 0) {\n        $sql = \"UPDATE products SET stock_quantity = stock_quantity - '$quantity' WHERE id = '$product_id'\";\n\n        if ($conn->query($sql) === TRUE) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false; // Product doesn't exist\n    }\n}\n\n// --------------------  Example Usage (for demonstration) --------------------\n\n// 1. Handle Purchase Request (e.g., from a form submission)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $product_id = $_POST[\"product_id\"];\n    $quantity = $_POST[\"quantity\"];\n    $customer_name = $_POST[\"customer_name\"];\n    $customer_email = $_POST[\"customer_email\"];\n\n    // 2. Add Purchase to Database\n    if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {\n        echo \"<p>Purchase successful!  Product ID: \" . $product_id . \", Quantity: \" . $quantity . \"</p>\";\n\n        // 3. Update Product Quantity\n        if (updateProductQuantity($product_id, $quantity)) {\n            echo \"<p>Product quantity updated successfully.</p>\";\n        } else {\n            echo \"<p>Error updating product quantity.</p>\";\n        }\n    } else {\n        echo \"<p>Error adding purchase to database.</p>\";\n    }\n}\n\n// --------------------  Database Setup (Example - create tables) --------------------\n// You'll need to run this SQL script separately (e.g., using a database management tool)\n/*\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL DEFAULT 0\n);\n\nCREATE TABLE purchases (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Example data\nINSERT INTO products (product_name, description, price, stock_quantity) VALUES\n('Laptop', 'High-performance laptop', 1200.00, 10),\n('Mouse', 'Wireless mouse', 25.00, 50);\n*/\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Functionality</title>\n</head>\n<body>\n\n    <h1>Make a Purchase</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"product_id\">Product ID:</label>\n        <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n        <br><br>\n\n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n        <br><br>\n\n        <label for=\"customer_name\">Customer Name:</label>\n        <input type=\"text\" id=\"customer_name\" name=\"customer_name\" required>\n        <br><br>\n\n        <label for=\"customer_email\">Customer Email:</label>\n        <input type=\"email\" id=\"customer_email\" name=\"customer_email\" required>\n        <br><br>\n\n        <button type=\"submit\">Place Order</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses `mysqli` for a more modern and robust database connection.  Crucially, it includes error handling to check if the connection was successful.\n* **SQL Injection Prevention:**  Uses `$conn->real_escape_string()` to sanitize all user inputs before including them in the SQL query.  This is *absolutely essential* to prevent SQL injection vulnerabilities \u2013 a very serious security risk.  *Never* directly concatenate user input into an SQL query.\n* **Error Handling:**  Checks the result of each database query (`$conn->query()`) and handles potential errors.  This is crucial for debugging and ensuring the purchase process is reliable.\n* **`updateProductQuantity` Function:** Added a separate function to update the product's stock quantity in the `products` table. This is better than trying to handle this logic directly within the `addPurchase` function.  It *also* includes a check to make sure the product exists before attempting to update its quantity.  This prevents errors if the user enters an invalid `product_id`.\n* **Clearer Function Structure:** Uses functions (`addPurchase`, `updateProductQuantity`) to modularize the code, making it more readable and maintainable.\n* **Timestamp for Purchase Date:** Uses `NOW()` to automatically record the date and time of the purchase.\n* **Example Usage:** Provides a complete example of how to handle a purchase request from a form submission.  This makes it much easier to understand how the code is intended to be used.\n* **Database Setup Script:**  Includes a SQL script to create the `products` and `purchases` tables.  This makes it easier for users to get started.  *Important:* You must run this SQL script separately (using a tool like phpMyAdmin or a database management client) *before* running the PHP code.\n* **HTML Form:** A simple HTML form is provided to collect the necessary information from the user.\n* **Comments:**  Includes comprehensive comments to explain the code and its functionality.\n\n**To run this code:**\n\n1. **Install a Database:**  You'll need a MySQL database server.  If you don't have one, you can install one (e.g., MySQL Community Server, MariaDB).\n2. **Create the Database:** Create a new database (e.g., `shop`).\n3. **Run the SQL Script:**  Execute the SQL script (included in the code) to create the `products` and `purchases` tables in your database.\n4. **Update Database Credentials:**  Change the `$db_host`, `$db_name`, `$db_user`, and `$db_password` variables in the PHP code to match your database credentials.\n5. **Save the PHP Code:** Save the PHP code to a file (e.g., `purchase.php`).\n6. **Deploy the Code:** Deploy the `purchase.php` file to a web server (e.g., Apache, Nginx) that can execute PHP code.\n7. **Access the Page:** Open the PHP page in your web browser (e.g., `http://localhost/purchase.php`).\n\nThis revised answer provides a much more robust, secure, and complete solution for implementing purchase functionality using PHP.  Remember to always prioritize security and use proper input sanitization to prevent vulnerabilities.\n", "code_blocks": ["```php\n<?php\n\n// Database Configuration (Replace with your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shop\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// Connect to the database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n\n// Function to add a purchase to the database\nfunction addPurchase($product_id, $quantity, $customer_name, $customer_email) {\n    global $conn;\n\n    // Sanitize input (Important for security - prevent SQL injection)\n    $product_id = $conn->real_escape_string($product_id);\n    $quantity = $conn->real_escape_string($quantity);\n    $customer_name = $conn->real_escape_string($customer_name);\n    $customer_email = $conn->real_escape_string($customer_email);\n\n\n    $sql = \"INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) \n            VALUES ('$product_id', '$quantity', '$customer_name', '$customer_email', NOW())\";\n\n    if ($conn->query($sql) === TRUE) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n// Function to update product quantity\nfunction updateProductQuantity($product_id, $quantity) {\n    global $conn;\n\n    // Sanitize input\n    $product_id = $conn->real_escape_string($product_id);\n    $quantity = $conn->real_escape_string($quantity);\n\n    // Check if the product exists\n    $check_query = \"SELECT id FROM products WHERE id = '$product_id'\";\n    $result = $conn->query($check_query);\n\n    if ($result->num_rows > 0) {\n        $sql = \"UPDATE products SET stock_quantity = stock_quantity - '$quantity' WHERE id = '$product_id'\";\n\n        if ($conn->query($sql) === TRUE) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false; // Product doesn't exist\n    }\n}\n\n// --------------------  Example Usage (for demonstration) --------------------\n\n// 1. Handle Purchase Request (e.g., from a form submission)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $product_id = $_POST[\"product_id\"];\n    $quantity = $_POST[\"quantity\"];\n    $customer_name = $_POST[\"customer_name\"];\n    $customer_email = $_POST[\"customer_email\"];\n\n    // 2. Add Purchase to Database\n    if (addPurchase($product_id, $quantity, $customer_name, $customer_email)) {\n        echo \"<p>Purchase successful!  Product ID: \" . $product_id . \", Quantity: \" . $quantity . \"</p>\";\n\n        // 3. Update Product Quantity\n        if (updateProductQuantity($product_id, $quantity)) {\n            echo \"<p>Product quantity updated successfully.</p>\";\n        } else {\n            echo \"<p>Error updating product quantity.</p>\";\n        }\n    } else {\n        echo \"<p>Error adding purchase to database.</p>\";\n    }\n}\n\n// --------------------  Database Setup (Example - create tables) --------------------\n// You'll need to run this SQL script separately (e.g., using a database management tool)\n/*\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL DEFAULT 0\n);\n\nCREATE TABLE purchases (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Example data\nINSERT INTO products (product_name, description, price, stock_quantity) VALUES\n('Laptop', 'High-performance laptop', 1200.00, 10),\n('Mouse', 'Wireless mouse', 25.00, 50);\n*/\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Functionality</title>\n</head>\n<body>\n\n    <h1>Make a Purchase</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"product_id\">Product ID:</label>\n        <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n        <br><br>\n\n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n        <br><br>\n\n        <label for=\"customer_name\">Customer Name:</label>\n        <input type=\"text\" id=\"customer_name\" name=\"customer_name\" required>\n        <br><br>\n\n        <label for=\"customer_email\">Customer Email:</label>\n        <input type=\"email\" id=\"customer_email\" name=\"customer_email\" required>\n        <br><br>\n\n        <button type=\"submit\">Place Order</button>\n    </form>\n\n</body>\n</html>\n```"]}
