{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to help the user create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. There's displaying products, handling user input for quantity, adding items to a cart, processing payment, and confirming the order.\n\nI'll start by setting up a database connection. Using MySQLi is good because it's secure and commonly used. The configuration file will hold the database details so it's easy to manage.\n\nNext, I need functions to fetch products and orders from the database. The get_products() function will retrieve all products, which will be displayed on the homepage. Similarly, get_orders() will fetch existing orders for display in an admin section or order history.\n\nThen, I'll handle adding items to the cart. Using sessions makes sense here because they allow data persistence across pages without involving the database until checkout. The add_to_cart function checks if the item is already in the session and updates the quantity or adds it as a new entry.\n\nDisplaying the cart contents is essential for users to review their purchases. The display_cart() function loops through the session data, calculates the total price, and presents each product with its details and total cost.\n\nFor processing payment, I'll create a form that collects user information like name, email, address, and phone number. This form will be submitted to another PHP script for validation and order processing. The process_order() function will validate the input data to ensure all required fields are filled and that the product quantities in the cart are correct.\n\nAfter validating, the order needs to be inserted into the database. I'll generate a unique order ID using microtime to avoid duplicates. Each item in the cart is then added as an order detail with its own record, linking back to the main order via the order_id.\n\nFinally, after processing the order, it's good practice to clear the cart session and display a confirmation message to the user. This informs them that their purchase was successful and thanks them for their business.\n\nThroughout this process, I should consider security aspects like SQL injection prevention by using prepared statements in the database queries. Also, input validation is crucial to ensure data integrity and prevent malicious inputs.\n\nI think about error handling as well. For example, if a user tries to add a product with zero quantity or an invalid product ID, the system should handle these gracefully without crashing.\n\nIn the end, I structure the code into separate functions and include explanations so that the user can understand each part. This modular approach makes it easier to maintain and expand the functionality in the future.\n</think>\n\nHere's an example of a purchase functionality using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'shopping_cart';\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to get products from database\nfunction get_products() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Function to add item to cart\nfunction add_to_cart($product_id, $quantity) {\n    global $conn;\n    session_start();\n    \n    // Check if product exists in database\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    \n    if ($result->num_rows > 0) {\n        $product = $result->fetch_assoc();\n        \n        // Check if product already in cart\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n        \n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display cart contents\nfunction display_cart() {\n    session_start();\n    \n    if (!empty($_SESSION['cart'])) {\n        $total_price = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>\" . $item['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n            echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n            echo \"<p>Total: $\" . number_format($item['price'] * $item['quantity'], 2) . \"</p>\";\n            echo \"</div>\";\n            \n            $total_price += $item['price'] * $item['quantity'];\n        }\n        \n        echo \"<h3>Grand Total: $\" . number_format($total_price, 2) . \"</h3>\";\n    } else {\n        echo \"Your cart is empty!\";\n    }\n}\n\n// Function to process order\nfunction process_order() {\n    session_start();\n    \n    if (!empty($_SESSION['cart'])) {\n        // Validate user input\n        $name = trim($_POST['name']);\n        $email = trim($_POST['email']);\n        $address = trim($_POST['address']);\n        $phone = trim($_POST['phone']);\n        \n        if (empty($name) || empty($email) || empty($address) || empty($phone)) {\n            return false;\n        }\n        \n        // Insert order into database\n        global $conn;\n        $order_id = microtime(true);\n        $total_price = 0;\n        \n        foreach ($_SESSION['cart'] as $item) {\n            $total_price += $item['price'] * $item['quantity'];\n        }\n        \n        $sql = \"INSERT INTO orders (order_id, name, email, address, phone, total_price, order_date)\n                VALUES (?, ?, ?, ?, ?, ?, NOW())\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"sddssd\", $order_id, $name, $email, $address, $phone, $total_price);\n        $stmt->execute();\n        \n        // Insert order details\n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO order_details (order_id, product_id, name, price, quantity)\n                    VALUES (?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"isdss\", $order_id, $item['id'], $item['name'], $item['price'], $item['quantity']);\n            $stmt->execute();\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n        \n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display orders\nfunction get_orders() {\n    global $conn;\n    $sql = \"SELECT * FROM orders\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Close database connection\n$conn->close();\n?>\n```\n\nThis example includes the following features:\n\n1. Database configuration and connection\n\n2. Product management:\n   - Get products from database\n   - Add items to cart with quantity validation\n\n3. Cart management:\n   - Display cart contents\n   - Calculate total price\n\n4. Order processing:\n   - Validate user input\n   - Insert order into database\n   - Clear cart after purchase\n\n5. Order display\n\nTo use this code:\n\n1. Create a MySQL database named 'shopping_cart'\n\n2. Create the following tables:\n\n```sql\n-- products table\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n\n-- orders table\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id BIGINT NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    address TEXT NOT NULL,\n    phone VARCHAR(20) NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME NOT NULL\n);\n\n-- order_details table\nCREATE TABLE order_details (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id BIGINT NOT NULL,\n    product_id INT NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT NOT NULL\n);\n```\n\n3. Add some sample products to the 'products' table\n\n4. Use these functions in your PHP pages to implement a complete purchase functionality.\n\nYou can also add more features like:\n\n- User authentication\n- Payment integration (e.g., PayPal, Stripe)\n- Product filtering and search\n- Order tracking\n- Admin panel for managing products and orders\n- Email notifications\n- Error handling and validation\n\nThis is a basic implementation that you can customize according to your needs.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'shopping_cart';\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to get products from database\nfunction get_products() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Function to add item to cart\nfunction add_to_cart($product_id, $quantity) {\n    global $conn;\n    session_start();\n    \n    // Check if product exists in database\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    \n    if ($result->num_rows > 0) {\n        $product = $result->fetch_assoc();\n        \n        // Check if product already in cart\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n        \n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display cart contents\nfunction display_cart() {\n    session_start();\n    \n    if (!empty($_SESSION['cart'])) {\n        $total_price = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>\" . $item['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n            echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n            echo \"<p>Total: $\" . number_format($item['price'] * $item['quantity'], 2) . \"</p>\";\n            echo \"</div>\";\n            \n            $total_price += $item['price'] * $item['quantity'];\n        }\n        \n        echo \"<h3>Grand Total: $\" . number_format($total_price, 2) . \"</h3>\";\n    } else {\n        echo \"Your cart is empty!\";\n    }\n}\n\n// Function to process order\nfunction process_order() {\n    session_start();\n    \n    if (!empty($_SESSION['cart'])) {\n        // Validate user input\n        $name = trim($_POST['name']);\n        $email = trim($_POST['email']);\n        $address = trim($_POST['address']);\n        $phone = trim($_POST['phone']);\n        \n        if (empty($name) || empty($email) || empty($address) || empty($phone)) {\n            return false;\n        }\n        \n        // Insert order into database\n        global $conn;\n        $order_id = microtime(true);\n        $total_price = 0;\n        \n        foreach ($_SESSION['cart'] as $item) {\n            $total_price += $item['price'] * $item['quantity'];\n        }\n        \n        $sql = \"INSERT INTO orders (order_id, name, email, address, phone, total_price, order_date)\n                VALUES (?, ?, ?, ?, ?, ?, NOW())\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"sddssd\", $order_id, $name, $email, $address, $phone, $total_price);\n        $stmt->execute();\n        \n        // Insert order details\n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO order_details (order_id, product_id, name, price, quantity)\n                    VALUES (?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"isdss\", $order_id, $item['id'], $item['name'], $item['price'], $item['quantity']);\n            $stmt->execute();\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n        \n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display orders\nfunction get_orders() {\n    global $conn;\n    $sql = \"SELECT * FROM orders\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Close database connection\n$conn->close();\n?>\n```", null]}
