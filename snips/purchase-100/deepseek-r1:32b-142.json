{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, the user wants to create a purchase functionality using PHP. I need to figure out how to approach this.\n\nFirst, I should outline the basic requirements. The functionality needs to handle adding products to a cart, calculating totals, processing payments, and handling errors. Also, security is crucial, so I'll include sanitization and validation steps.\n\nI'll start by setting up the database connection. Using PDO makes sense because it's secure and supports prepared statements, which help prevent SQL injection.\n\nNext, I need functions for adding products to the cart. The add_to_cart function should insert a new record into the purchase table with the user ID, product ID, quantity, and price. But before inserting, I'll check if the product is already in the cart to avoid duplicates. If it exists, I'll update the quantity instead.\n\nCalculating totals is important for displaying the cart correctly. The get_cart_total function will sum up all the prices multiplied by their quantities from the purchase table where the user ID matches.\n\nUpdating the cart allows users to change the quantity of items they've added. The update_cart function will take the purchase ID and new quantity, ensuring it's a positive integer before updating.\n\nDeleting items from the cart is straightforward with the delete_from_cart function. It uses the purchase ID to remove the specific item.\n\nProcessing payments involves several steps. I'll validate the payment details like card number, name, CVC, and expiry date. Sanitizing inputs helps prevent SQL injection and other attacks. Then, I'll check if the payment is valid, though in a real scenario, this would integrate with an actual payment gateway.\n\nIf the payment is successful, I need to move items from the cart to the order table. The create_order function will handle this by inserting each item into orders and removing them from the purchase table. It also adds an order ID for tracking.\n\nThroughout all these steps, error handling is essential. Using try-catch blocks ensures that any exceptions are caught and logged, preventing the application from crashing and providing useful debugging information.\n\nI should also mention optional features like using sessions instead of user IDs if users aren't authenticated, but since this example uses a database, I'll stick with user IDs. Additionally, integrating a real payment gateway is something the user might need to do later.\n\nFinally, I'll note that the code should be tested thoroughly and consider edge cases like out-of-stock items or invalid quantities.\n</think>\n\nHere's an example of how you can create a purchase functionality using PHP:\n\nThis example includes:\n1. Adding products to cart\n2. Calculating totals\n3. Processing payments\n4. Order management\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Add product to cart\nfunction add_to_cart($product_id, $quantity, $price, $user_id) {\n    global $pdo;\n    \n    try {\n        // Check if the product is already in the cart\n        $stmt = $pdo->prepare(\"SELECT id FROM purchase WHERE user_id = ? AND product_id = ?\");\n        $stmt->execute([$user_id, $product_id]);\n        \n        if ($stmt->rowCount() > 0) {\n            // Update quantity and price\n            $cart_item_id = $stmt->fetch(PDO::FETCH_ASSOC)['id'];\n            $pdo->prepare(\"UPDATE purchase SET quantity = ?, total_price = ? WHERE id = ?\")\n                ->execute([$quantity, $price * $quantity, $cart_item_id]);\n        } else {\n            // Add new product to cart\n            $pdo->prepare(\"INSERT INTO purchase (user_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\")\n                ->execute([$user_id, $product_id, $quantity, $price]);\n        }\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error adding to cart: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Get cart items\nfunction get_cart_items($user_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM purchase WHERE user_id = ?\");\n        $stmt->execute([$user_id]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        error_log(\"Error fetching cart items: \" . $e->getMessage());\n        return [];\n    }\n}\n\n// Calculate cart total\nfunction get_cart_total($user_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT SUM(price * quantity) AS total FROM purchase WHERE user_id = ?\");\n        $stmt->execute([$user_id]);\n        \n        return $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n    } catch (PDOException $e) {\n        error_log(\"Error calculating cart total: \" . $e->getMessage());\n        return 0;\n    }\n}\n\n// Update cart item quantity\nfunction update_cart_item($cart_id, $new_quantity) {\n    global $pdo;\n    \n    try {\n        $pdo->prepare(\"UPDATE purchase SET quantity = ? WHERE id = ?\")\n            ->execute([$new_quantity, $cart_id]);\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error updating cart item: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Delete cart item\nfunction delete_cart_item($cart_id) {\n    global $pdo;\n    \n    try {\n        $pdo->prepare(\"DELETE FROM purchase WHERE id = ?\")\n            ->execute([$cart_id]);\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error deleting cart item: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Process payment\nfunction process_payment($user_id, $card_number, $card_name, $cvc, $expiry_date) {\n    // Validate input\n    if (!preg_match('/^\\d{16}$/', $card_number)) {\n        return ['error' => 'Invalid card number'];\n    }\n    \n    if (!preg_match('/^[a-zA-Z ]+$/',$card_name)) {\n        return ['error' => 'Invalid card holder name'];\n    }\n    \n    if (!preg_match('/^\\d{3}$/', $cvc)) {\n        return ['error' => 'Invalid CVC'];\n    }\n    \n    // Sanitize input\n    $card_number = htmlspecialchars($card_number);\n    $card_name = htmlspecialchars($card_name);\n    $cvc = htmlspecialchars($cvc);\n    $expiry_date = htmlspecialchars($expiry_date);\n\n    // Here you would typically integrate with a payment gateway\n    // For this example, we'll assume the payment is successful\n    \n    try {\n        // Get cart items\n        $cart_items = get_cart_items($user_id);\n        \n        if (empty($cart_items)) {\n            return ['error' => 'Your cart is empty'];\n        }\n        \n        // Calculate total amount\n        $total_amount = get_cart_total($user_id);\n        \n        // Create order\n        $stmt = $pdo->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->execute([$user_id, $total_amount]);\n        $order_id = $pdo->lastInsertId();\n        \n        // Insert order items\n        foreach ($cart_items as $item) {\n            $pdo->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\")\n                ->execute([$order_id, $item['product_id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        $pdo->prepare(\"DELETE FROM purchase WHERE user_id = ?\")\n            ->execute([$user_id]);\n        \n        return ['success' => true, 'order_id' => $order_id];\n    } catch (PDOException $e) {\n        error_log(\"Error processing payment: \" . $e->getMessage());\n        return ['error' => 'Payment processing failed'];\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Sanitize input\n        $product_id = (int)$_POST['product_id'];\n        $quantity = (int)$_POST['quantity'];\n        $price = (float)$_POST['price'];\n        $user_id = (int)$_SESSION['user_id']; // Assuming user is logged in\n        \n        if ($quantity <= 0) {\n            throw new Exception('Quantity must be greater than zero');\n        }\n        \n        add_to_cart($product_id, $quantity, $price, $user_id);\n        \n        // Redirect to cart page\n        header(\"Location: cart.php\");\n        exit();\n    } catch (Exception $e) {\n        die(\"Error: \" . $e->getMessage());\n    }\n}\n\n// Example payment processing:\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['process_payment'])) {\n    try {\n        $card_number = $_POST['card_number'];\n        $card_name = $_POST['card_name'];\n        $cvc = $_POST['cvc'];\n        $expiry_date = $_POST['expiry_date'];\n        \n        $user_id = (int)$_SESSION['user_id']; // Assuming user is logged in\n        \n        $result = process_payment($user_id, $card_number, $card_name, $cvc, $expiry_date);\n        \n        if (isset($result['error'])) {\n            die(\"Error: \" . $result['error']);\n        } else {\n            // Payment successful, show order confirmation\n            echo \"Order placed successfully! Order ID: #\" . $result['order_id'];\n        }\n    } catch (Exception $e) {\n        die(\"Payment error: \" . $e->getMessage());\n    }\n}\n?>\n```\n\nThis is a basic implementation of purchase functionality. You would need to:\n\n1. Create the necessary database tables\n2. Add proper validation and error handling\n3. Implement security measures like CSRF protection\n4. Use HTTPS for payment processing\n5. Integrate with a real payment gateway (e.g., Stripe, PayPal)\n6. Add proper session management\n7. Handle currency formatting\n8. Add order tracking functionality\n\nRemember to:\n- Never store sensitive payment information in your database\n- Use secure methods for handling user input\n- Implement proper error logging and reporting\n- Follow PCI DSS compliance guidelines when handling payments\n- Regularly test your code for security vulnerabilities\n\nThis example provides a foundation that you can build upon based on your specific requirements.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Add product to cart\nfunction add_to_cart($product_id, $quantity, $price, $user_id) {\n    global $pdo;\n    \n    try {\n        // Check if the product is already in the cart\n        $stmt = $pdo->prepare(\"SELECT id FROM purchase WHERE user_id = ? AND product_id = ?\");\n        $stmt->execute([$user_id, $product_id]);\n        \n        if ($stmt->rowCount() > 0) {\n            // Update quantity and price\n            $cart_item_id = $stmt->fetch(PDO::FETCH_ASSOC)['id'];\n            $pdo->prepare(\"UPDATE purchase SET quantity = ?, total_price = ? WHERE id = ?\")\n                ->execute([$quantity, $price * $quantity, $cart_item_id]);\n        } else {\n            // Add new product to cart\n            $pdo->prepare(\"INSERT INTO purchase (user_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\")\n                ->execute([$user_id, $product_id, $quantity, $price]);\n        }\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error adding to cart: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Get cart items\nfunction get_cart_items($user_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM purchase WHERE user_id = ?\");\n        $stmt->execute([$user_id]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        error_log(\"Error fetching cart items: \" . $e->getMessage());\n        return [];\n    }\n}\n\n// Calculate cart total\nfunction get_cart_total($user_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT SUM(price * quantity) AS total FROM purchase WHERE user_id = ?\");\n        $stmt->execute([$user_id]);\n        \n        return $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n    } catch (PDOException $e) {\n        error_log(\"Error calculating cart total: \" . $e->getMessage());\n        return 0;\n    }\n}\n\n// Update cart item quantity\nfunction update_cart_item($cart_id, $new_quantity) {\n    global $pdo;\n    \n    try {\n        $pdo->prepare(\"UPDATE purchase SET quantity = ? WHERE id = ?\")\n            ->execute([$new_quantity, $cart_id]);\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error updating cart item: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Delete cart item\nfunction delete_cart_item($cart_id) {\n    global $pdo;\n    \n    try {\n        $pdo->prepare(\"DELETE FROM purchase WHERE id = ?\")\n            ->execute([$cart_id]);\n        \n        return true;\n    } catch (PDOException $e) {\n        error_log(\"Error deleting cart item: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Process payment\nfunction process_payment($user_id, $card_number, $card_name, $cvc, $expiry_date) {\n    // Validate input\n    if (!preg_match('/^\\d{16}$/', $card_number)) {\n        return ['error' => 'Invalid card number'];\n    }\n    \n    if (!preg_match('/^[a-zA-Z ]+$/',$card_name)) {\n        return ['error' => 'Invalid card holder name'];\n    }\n    \n    if (!preg_match('/^\\d{3}$/', $cvc)) {\n        return ['error' => 'Invalid CVC'];\n    }\n    \n    // Sanitize input\n    $card_number = htmlspecialchars($card_number);\n    $card_name = htmlspecialchars($card_name);\n    $cvc = htmlspecialchars($cvc);\n    $expiry_date = htmlspecialchars($expiry_date);\n\n    // Here you would typically integrate with a payment gateway\n    // For this example, we'll assume the payment is successful\n    \n    try {\n        // Get cart items\n        $cart_items = get_cart_items($user_id);\n        \n        if (empty($cart_items)) {\n            return ['error' => 'Your cart is empty'];\n        }\n        \n        // Calculate total amount\n        $total_amount = get_cart_total($user_id);\n        \n        // Create order\n        $stmt = $pdo->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->execute([$user_id, $total_amount]);\n        $order_id = $pdo->lastInsertId();\n        \n        // Insert order items\n        foreach ($cart_items as $item) {\n            $pdo->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\")\n                ->execute([$order_id, $item['product_id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        $pdo->prepare(\"DELETE FROM purchase WHERE user_id = ?\")\n            ->execute([$user_id]);\n        \n        return ['success' => true, 'order_id' => $order_id];\n    } catch (PDOException $e) {\n        error_log(\"Error processing payment: \" . $e->getMessage());\n        return ['error' => 'Payment processing failed'];\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Sanitize input\n        $product_id = (int)$_POST['product_id'];\n        $quantity = (int)$_POST['quantity'];\n        $price = (float)$_POST['price'];\n        $user_id = (int)$_SESSION['user_id']; // Assuming user is logged in\n        \n        if ($quantity <= 0) {\n            throw new Exception('Quantity must be greater than zero');\n        }\n        \n        add_to_cart($product_id, $quantity, $price, $user_id);\n        \n        // Redirect to cart page\n        header(\"Location: cart.php\");\n        exit();\n    } catch (Exception $e) {\n        die(\"Error: \" . $e->getMessage());\n    }\n}\n\n// Example payment processing:\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['process_payment'])) {\n    try {\n        $card_number = $_POST['card_number'];\n        $card_name = $_POST['card_name'];\n        $cvc = $_POST['cvc'];\n        $expiry_date = $_POST['expiry_date'];\n        \n        $user_id = (int)$_SESSION['user_id']; // Assuming user is logged in\n        \n        $result = process_payment($user_id, $card_number, $card_name, $cvc, $expiry_date);\n        \n        if (isset($result['error'])) {\n            die(\"Error: \" . $result['error']);\n        } else {\n            // Payment successful, show order confirmation\n            echo \"Order placed successfully! Order ID: #\" . $result['order_id'];\n        }\n    } catch (Exception $e) {\n        die(\"Payment error: \" . $e->getMessage());\n    }\n}\n?>\n```"]}
