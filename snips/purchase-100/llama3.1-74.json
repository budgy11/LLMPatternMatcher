{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can create a simple purchase cart functionality using PHP:\n\n**cart.php**\n```php\n<?php\n// Initialize the cart array\n$cart = [];\n\n// Function to add item to cart\nfunction addItemToCart($itemId, $itemName, $price) {\n  global $cart;\n  if (!isset($cart[$itemId])) {\n    $cart[$itemId] = [\n      'name' => $itemName,\n      'price' => $price,\n      'quantity' => 1\n    ];\n  } else {\n    $cart[$itemId]['quantity']++;\n  }\n}\n\n// Function to remove item from cart\nfunction removeItemFromCart($itemId) {\n  global $cart;\n  if (isset($cart[$itemId])) {\n    unset($cart[$itemId]);\n  }\n}\n\n// Function to update quantity of item in cart\nfunction updateQuantity($itemId, $newQuantity) {\n  global $cart;\n  if (isset($cart[$itemId]) && $newQuantity > 0) {\n    $cart[$itemId]['quantity'] = $newQuantity;\n  } else {\n    // If new quantity is invalid, remove item from cart\n    removeItemFromCart($itemId);\n  }\n}\n\n// Function to calculate total cost of items in cart\nfunction calculateTotalCost() {\n  global $cart;\n  $totalCost = 0;\n  foreach ($cart as $item) {\n    $totalCost += $item['price'] * $item['quantity'];\n  }\n  return $totalCost;\n}\n\n// Function to display cart contents\nfunction displayCart() {\n  global $cart;\n  ?>\n  <h2>Cart Contents:</h2>\n  <table border=\"1\">\n    <tr>\n      <th>Item</th>\n      <th>Quantity</th>\n      <th>Price</th>\n    </tr>\n  <?php\n  foreach ($cart as $item) {\n    ?>\n    <tr>\n      <td><?= $item['name'] ?></td>\n      <td><?= $item['quantity'] ?></td>\n      <td><?= $item['price'] ?></td>\n    </tr>\n  <?php\n  }\n  ?>\n  </table>\n  <p>Total Cost: <?= calculateTotalCost() ?></p>\n  <?php\n}\n\n// Example usage:\naddItemToCart(1, \"Apple\", 0.99);\naddItemToCart(2, \"Banana\", 0.59);\n\ndisplayCart();\n\n?>\n```\nThis code defines a simple cart system that uses an array to store the items in the cart. The `addItemToCart`, `removeItemFromCart`, and `updateQuantity` functions are used to manipulate the cart contents.\n\nThe `calculateTotalCost` function calculates the total cost of all items in the cart by multiplying the price of each item by its quantity and summing up the results.\n\nThe `displayCart` function displays a table showing the contents of the cart, including the item name, quantity, and price for each item. The total cost is also displayed at the bottom of the page.\n\n**Example HTML:**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n  <?php include 'cart.php'; ?>\n</body>\n</html>\n```\nNote that this is a very basic example and you may want to add more features, such as:\n\n* Handling multiple sessions or users\n* Implementing a database storage system for cart contents\n* Adding error handling and validation for user input\n* Displaying item descriptions and images\n* Providing payment processing functionality\n\nAlso, this code assumes that the PHP script is executed on a server-side environment (e.g. Apache/Nginx). If you're running this code in an environment where PHP is not available or enabled, it won't work as expected.", "code_blocks": ["```php\n<?php\n// Initialize the cart array\n$cart = [];\n\n// Function to add item to cart\nfunction addItemToCart($itemId, $itemName, $price) {\n  global $cart;\n  if (!isset($cart[$itemId])) {\n    $cart[$itemId] = [\n      'name' => $itemName,\n      'price' => $price,\n      'quantity' => 1\n    ];\n  } else {\n    $cart[$itemId]['quantity']++;\n  }\n}\n\n// Function to remove item from cart\nfunction removeItemFromCart($itemId) {\n  global $cart;\n  if (isset($cart[$itemId])) {\n    unset($cart[$itemId]);\n  }\n}\n\n// Function to update quantity of item in cart\nfunction updateQuantity($itemId, $newQuantity) {\n  global $cart;\n  if (isset($cart[$itemId]) && $newQuantity > 0) {\n    $cart[$itemId]['quantity'] = $newQuantity;\n  } else {\n    // If new quantity is invalid, remove item from cart\n    removeItemFromCart($itemId);\n  }\n}\n\n// Function to calculate total cost of items in cart\nfunction calculateTotalCost() {\n  global $cart;\n  $totalCost = 0;\n  foreach ($cart as $item) {\n    $totalCost += $item['price'] * $item['quantity'];\n  }\n  return $totalCost;\n}\n\n// Function to display cart contents\nfunction displayCart() {\n  global $cart;\n  ?>\n  <h2>Cart Contents:</h2>\n  <table border=\"1\">\n    <tr>\n      <th>Item</th>\n      <th>Quantity</th>\n      <th>Price</th>\n    </tr>\n  <?php\n  foreach ($cart as $item) {\n    ?>\n    <tr>\n      <td><?= $item['name'] ?></td>\n      <td><?= $item['quantity'] ?></td>\n      <td><?= $item['price'] ?></td>\n    </tr>\n  <?php\n  }\n  ?>\n  </table>\n  <p>Total Cost: <?= calculateTotalCost() ?></p>\n  <?php\n}\n\n// Example usage:\naddItemToCart(1, \"Apple\", 0.99);\naddItemToCart(2, \"Banana\", 0.59);\n\ndisplayCart();\n\n?>\n```", null]}
