{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, so the user wants to create a purchase functionality using PHP. Let me break down what that entails.\n\nFirst, I need to consider the basic structure. A purchase system typically involves displaying products, allowing users to add them to a cart, and then checkout. So, I'll outline these steps: display products, add to cart, view cart, checkout, process payment, and confirm the order.\n\nNext, for each step, I should think about what PHP files are needed. For displaying products, maybe an index.php that fetches data from a database. Then, when a user adds a product to the cart, it could be handled by a separate script, like add_to_cart.php. The cart itself would be stored in sessions so it persists across pages.\n\nWhen checking out, I'll need a form where users enter their details. This will post to another script, process_checkout.php. At this point, payment processing is needed. Since integrating actual payment gateways can be complex, perhaps using a placeholder function that simulates payment success or failure would be best for now.\n\nAfter the payment is processed, an order confirmation page should display the result. Also, it's important to store the order details in the database and send a confirmation email. For simplicity, maybe just echoing the message instead of sending an actual email, but I'll note that as something to expand later.\n\nSecurity is a big concern. I'll need to include sanitization functions to prevent SQL injection and XSS attacks. Also, validating all user inputs before processing them is crucial.\n\nLooking ahead, there are several areas for expansion: adding a database connection, implementing CSRF protection, enhancing the frontend with CSS or JavaScript, integrating real payment gateways, and improving error handling. I should mention these so the user knows where to expand based on their needs.\n\nPutting it all together, I'll structure each section of code with clear explanations, making sure it's easy for the user to follow and modify as necessary. Including comments in the code will help them understand each part's purpose.\n</think>\n\nHere's an example of a purchase functionality using PHP. This includes basic steps like displaying products, adding to cart, checkout, and payment processing:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'shopping_cart';\n\n$conn = mysqli_connect($host, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to display products\nfunction displayProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = mysqli_query($conn, $sql);\n\n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>Price: $\" . $row['price'] . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' value='1'>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n}\n\n// Function to add product to cart\nfunction addToCart($productId, $quantity) {\n    global $conn;\n    \n    // Check if product exists\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, \"i\", $productId);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    if ($product = mysqli_fetch_assoc($result)) {\n        // Add to session cart\n        $_SESSION['cart'][$productId] = [\n            'name' => $product['name'],\n            'price' => $product['price'],\n            'quantity' => $quantity\n        ];\n        return true;\n    }\n    return false;\n}\n\n// Function to display cart\nfunction displayCart() {\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $productId => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>\" . $item['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . $item['price'] . \"</p>\";\n            echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n            echo \"</div>\";\n        }\n    } else {\n        echo \"Your cart is empty.\";\n    }\n}\n\n// Function to process checkout\nfunction processCheckout($cart) {\n    global $conn;\n    \n    // Insert order into database\n    $sql = \"INSERT INTO orders (total_amount, status) VALUES (?, 'pending')\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, \"d\", calculateTotal($cart));\n    mysqli_stmt_execute($stmt);\n    $orderId = mysqli_insert_id($conn);\n    \n    // Insert order details\n    foreach ($cart as $productId => $item) {\n        $sql = \"INSERT INTO order_details (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"iiid\", $orderId, $productId, $item['quantity'], $item['price']);\n        mysqli_stmt_execute($stmt);\n    }\n    \n    // Clear cart\n    unset($_SESSION['cart']);\n    \n    return $orderId;\n}\n\n// Function to calculate total amount\nfunction calculateTotal($cart) {\n    $total = 0;\n    foreach ($cart as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// Function to process payment\nfunction processPayment($amount) {\n    // This is a simplified payment processing function\n    // In real application, you would integrate with a payment gateway\n    \n    $success = true; // Simulate payment success\n    \n    if ($success) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to send order confirmation email\nfunction sendOrderConfirmation($email, $orderId, $totalAmount) {\n    $subject = \"Order Confirmation\";\n    $body = \"Thank you for your purchase! Your order ID is: $orderId and the total amount is: $\" . number_format($totalAmount, 2);\n    \n    // In real application, use mail() function or a third-party library\n    echo \"Email sent to: $email with order details.\";\n}\n\n// Example usage:\nif (isset($_POST['checkout'])) {\n    if (!empty($_SESSION['cart'])) {\n        $cart = $_SESSION['cart'];\n        $orderId = processCheckout($cart);\n        $totalAmount = calculateTotal($cart);\n        \n        // Process payment\n        if (processPayment($totalAmount)) {\n            sendOrderConfirmation('customer@example.com', $orderId, $totalAmount);\n            echo \"Purchase completed successfully!\";\n        } else {\n            echo \"Payment failed. Please try again.\";\n        }\n    } else {\n        echo \"Your cart is empty.\";\n    }\n}\n?>\n```\n\nThis example includes:\n\n1. Database connection\n2. Product display functionality\n3. Adding products to cart\n4. Displaying cart contents\n5. Checkout process\n6. Payment processing (simplified)\n7. Order confirmation\n\nTo use this code, you'll need to:\n\n1. Create a database with tables for products, orders, and order details\n2. Add some sample products to the database\n3. Implement security measures like:\n   - Input validation\n   - SQL injection prevention\n   - CSRF protection\n4. Add proper error handling\n5. Implement real payment processing (e.g., Stripe, PayPal)\n6. Add frontend styling\n7. Implement user authentication\n\nHere's how you can create the database tables:\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    total_amount DECIMAL(10, 2),\n    status VARCHAR(255)\n);\n\nCREATE TABLE order_details (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    price DECIMAL(10, 2)\n);\n```\n\nThis is a basic example and should be expanded based on your specific requirements. You might want to add features like:\n\n- User authentication\n- Product categories\n- Product images\n- Shipping options\n- Coupon codes\n- Order tracking\n- Customer reviews\n- Admin panel for managing products and orders\n\nRemember to always sanitize user inputs and implement proper security measures in a production environment.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'shopping_cart';\n\n$conn = mysqli_connect($host, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to display products\nfunction displayProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = mysqli_query($conn, $sql);\n\n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>Price: $\" . $row['price'] . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' value='1'>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n}\n\n// Function to add product to cart\nfunction addToCart($productId, $quantity) {\n    global $conn;\n    \n    // Check if product exists\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, \"i\", $productId);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    if ($product = mysqli_fetch_assoc($result)) {\n        // Add to session cart\n        $_SESSION['cart'][$productId] = [\n            'name' => $product['name'],\n            'price' => $product['price'],\n            'quantity' => $quantity\n        ];\n        return true;\n    }\n    return false;\n}\n\n// Function to display cart\nfunction displayCart() {\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $productId => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>\" . $item['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . $item['price'] . \"</p>\";\n            echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n            echo \"</div>\";\n        }\n    } else {\n        echo \"Your cart is empty.\";\n    }\n}\n\n// Function to process checkout\nfunction processCheckout($cart) {\n    global $conn;\n    \n    // Insert order into database\n    $sql = \"INSERT INTO orders (total_amount, status) VALUES (?, 'pending')\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, \"d\", calculateTotal($cart));\n    mysqli_stmt_execute($stmt);\n    $orderId = mysqli_insert_id($conn);\n    \n    // Insert order details\n    foreach ($cart as $productId => $item) {\n        $sql = \"INSERT INTO order_details (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"iiid\", $orderId, $productId, $item['quantity'], $item['price']);\n        mysqli_stmt_execute($stmt);\n    }\n    \n    // Clear cart\n    unset($_SESSION['cart']);\n    \n    return $orderId;\n}\n\n// Function to calculate total amount\nfunction calculateTotal($cart) {\n    $total = 0;\n    foreach ($cart as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// Function to process payment\nfunction processPayment($amount) {\n    // This is a simplified payment processing function\n    // In real application, you would integrate with a payment gateway\n    \n    $success = true; // Simulate payment success\n    \n    if ($success) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to send order confirmation email\nfunction sendOrderConfirmation($email, $orderId, $totalAmount) {\n    $subject = \"Order Confirmation\";\n    $body = \"Thank you for your purchase! Your order ID is: $orderId and the total amount is: $\" . number_format($totalAmount, 2);\n    \n    // In real application, use mail() function or a third-party library\n    echo \"Email sent to: $email with order details.\";\n}\n\n// Example usage:\nif (isset($_POST['checkout'])) {\n    if (!empty($_SESSION['cart'])) {\n        $cart = $_SESSION['cart'];\n        $orderId = processCheckout($cart);\n        $totalAmount = calculateTotal($cart);\n        \n        // Process payment\n        if (processPayment($totalAmount)) {\n            sendOrderConfirmation('customer@example.com', $orderId, $totalAmount);\n            echo \"Purchase completed successfully!\";\n        } else {\n            echo \"Payment failed. Please try again.\";\n        }\n    } else {\n        echo \"Your cart is empty.\";\n    }\n}\n?>\n```", null]}
