{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of how to create a basic purchase functionality in PHP. This example assumes that you have already set up a database with the necessary tables for storing products, customers, and orders.\n\n**Database Schema:**\n\nFor this example, we'll assume the following database schema:\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  total_cost DECIMAL(10,2),\n  FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL(10,2),\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\n```php\n<?php\n\n// Connect to the database\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"database_name\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add product\nfunction add_product($product_name, $price) {\n    global $conn;\n    $sql = \"INSERT INTO products (name, price) VALUES ('$product_name', '$price')\";\n    if ($conn->query($sql)) {\n        echo \"Product added successfully!\";\n    } else {\n        echo \"Error adding product: \" . $conn->error;\n    }\n}\n\n// Function to place order\nfunction place_order($customer_id, $products, $quantity) {\n    global $conn;\n    // Get total cost of products\n    $total_cost = 0;\n    foreach ($products as $product) {\n        $sql = \"SELECT price FROM products WHERE id='\" . $product['id'] . \"'\";\n        $result = $conn->query($sql);\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                $total_cost += $row['price'];\n            }\n        } else {\n            echo \"Error fetching product price: \" . $conn->error;\n        }\n    }\n\n    // Insert order\n    $sql = \"INSERT INTO orders (customer_id, total_cost) VALUES ('\" . $customer_id . \"', '\" . $total_cost . \"')\";\n\n    if ($conn->query($sql)) {\n        // Get last inserted id of the order\n        $last_inserted_id = $conn->insert_id;\n\n        // Insert order items\n        foreach ($products as $product) {\n            $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES ('\" . $last_inserted_id . \"', '\" . $product['id'] . \"', '\" . $quantity[$product['id']] . \"', '\" . $total_cost . \"')\";\n\n            if ($conn->query($sql)) {\n                echo \"Order placed successfully!\";\n            } else {\n                echo \"Error placing order: \" . $conn->error;\n            }\n        }\n    } else {\n        echo \"Error placing order: \" . $conn->error;\n    }\n}\n\n// Test functions\nadd_product(\"Apple\", 5.99);\n$products = array(\n    array('id' => 1, 'price' => 5.99),\n    array('id' => 2, 'price' => 7.99)\n);\n\n$quantity = array(1 => 2, 2 => 3);\nplace_order(1, $products, $quantity);\n\n?>\n```\n\nThis code provides a basic structure for creating a purchase functionality using PHP and MySQL. However, this is just an example and you should adapt it to your specific requirements.\n\nRemember to replace the placeholders (`$servername`, `$username`, `$password`, `$dbname`) with your actual database credentials.\n\nAlso note that in a real-world scenario, you would want to add more error checking, validation, and security measures (such as prepared statements) to prevent SQL injection attacks.", "code_blocks": [null, "```php\n<?php\n\n// Connect to the database\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"database_name\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add product\nfunction add_product($product_name, $price) {\n    global $conn;\n    $sql = \"INSERT INTO products (name, price) VALUES ('$product_name', '$price')\";\n    if ($conn->query($sql)) {\n        echo \"Product added successfully!\";\n    } else {\n        echo \"Error adding product: \" . $conn->error;\n    }\n}\n\n// Function to place order\nfunction place_order($customer_id, $products, $quantity) {\n    global $conn;\n    // Get total cost of products\n    $total_cost = 0;\n    foreach ($products as $product) {\n        $sql = \"SELECT price FROM products WHERE id='\" . $product['id'] . \"'\";\n        $result = $conn->query($sql);\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                $total_cost += $row['price'];\n            }\n        } else {\n            echo \"Error fetching product price: \" . $conn->error;\n        }\n    }\n\n    // Insert order\n    $sql = \"INSERT INTO orders (customer_id, total_cost) VALUES ('\" . $customer_id . \"', '\" . $total_cost . \"')\";\n\n    if ($conn->query($sql)) {\n        // Get last inserted id of the order\n        $last_inserted_id = $conn->insert_id;\n\n        // Insert order items\n        foreach ($products as $product) {\n            $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES ('\" . $last_inserted_id . \"', '\" . $product['id'] . \"', '\" . $quantity[$product['id']] . \"', '\" . $total_cost . \"')\";\n\n            if ($conn->query($sql)) {\n                echo \"Order placed successfully!\";\n            } else {\n                echo \"Error placing order: \" . $conn->error;\n            }\n        }\n    } else {\n        echo \"Error placing order: \" . $conn->error;\n    }\n}\n\n// Test functions\nadd_product(\"Apple\", 5.99);\n$products = array(\n    array('id' => 1, 'price' => 5.99),\n    array('id' => 2, 'price' => 7.99)\n);\n\n$quantity = array(1 => 2, 2 => 3);\nplace_order(1, $products, $quantity);\n\n?>\n```"]}
