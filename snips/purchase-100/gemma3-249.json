{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual details)\n$dbHost = \"localhost\";\n$dbUser = \"your_username\";\n$dbPass = \"your_password\";\n$dbName = \"your_database_name\";\n\n//  Helper function to connect to the database\nfunction connectToDatabase() {\n  try {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    return $pdo;\n  } catch (PDOException $e) {\n    // Handle database connection error.  Log or display error.\n    error_log(\"Database Connection Error: \" . $e->getMessage());\n    die(\"Database connection failed.\");\n  }\n}\n\n// Function to create a new purchase\nfunction createPurchase($product_id, $quantity, $customer_name, $customer_email) {\n    $pdo = connectToDatabase();\n\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) VALUES ( :product_id, :quantity, :customer_name, :customer_email, NOW())\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->bindParam(':customer_name', $customer_name);\n        $stmt->bindParam(':customer_email', $customer_email);\n\n        $stmt->execute();\n        return $pdo->lastInsertId(); // Returns the ID of the newly created purchase\n    } catch (PDOException $e) {\n        // Handle any database errors\n        error_log(\"Purchase Creation Error: \" . $e->getMessage());\n        return false; // Indicate failure\n    }\n}\n\n// Function to get purchase details by ID\nfunction getPurchaseDetails($purchase_id) {\n    $pdo = connectToDatabase();\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM purchases WHERE id = :purchase_id\");\n        $stmt->bindParam(':purchase_id', $purchase_id);\n        $stmt->execute();\n        $purchase = $stmt->fetch(PDO::FETCH_ASSOC);  // Fetch as an associative array\n        return $purchase;\n    } catch (PDOException $e) {\n        // Handle database errors\n        error_log(\"Purchase Retrieval Error: \" . $e->getMessage());\n        return false;\n    }\n}\n\n\n//  Example Usage (You'd typically handle this through a form submission, but this shows how it's used)\n\n// --- Sample Data (For Testing) ---\n$product_id = 1;\n$quantity = 2;\n$customer_name = \"John Doe\";\n$customer_email = \"john.doe@example.com\";\n\n// --- Create the Purchase ---\n$newPurchaseId = createPurchase($product_id, $quantity, $customer_name, $customer_email);\n\nif ($newPurchaseId) {\n  echo \"Purchase created successfully!  New Purchase ID: \" . $newPurchaseId . \"<br>\";\n\n  //  Example: Retrieve details of the purchase\n  $purchaseDetails = getPurchaseDetails($newPurchaseId);\n  if ($purchaseDetails) {\n    echo \"Purchase Details:<br>\";\n    echo \"Product ID: \" . $purchaseDetails['product_id'] . \"<br>\";\n    echo \"Quantity: \" . $purchaseDetails['quantity'] . \"<br>\";\n    echo \"Customer Name: \" . $purchaseDetails['customer_name'] . \"<br>\";\n    echo \"Customer Email: \" . $purchaseDetails['customer_email'] . \"<br>\";\n    echo \"Purchase Date: \" . $purchaseDetails['purchase_date'] . \"<br>\";\n  } else {\n    echo \"Error retrieving purchase details.<br>\";\n  }\n} else {\n  echo \"Purchase creation failed.<br>\";\n}\n\n\n// --- Database Table Creation (Run this once to set up the database) ---\n// This is just a sample, adjust data types and constraints as needed\n/*\nCREATE TABLE purchases (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n*/\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses PDO (PHP Data Objects) for a more robust and secure database connection.  PDO is much preferred over the older `mysql_*` functions, which are deprecated and have security vulnerabilities.  It handles connection pooling and error handling more effectively.\n* **Error Handling:**  Includes `try...catch` blocks to gracefully handle potential database errors (e.g., connection issues, SQL errors).  Critically, `error_log()` is used to log these errors \u2013 this is *essential* for debugging.  Without logging, you'll have no idea why something isn't working.  The `die()` function is used within the `catch` block to halt script execution in case of a critical error.\n* **Prepared Statements:**  Uses *prepared statements* (`$pdo->prepare()` and `$stmt->bindParam()`).  This is *vital* for security to prevent SQL injection attacks.  Prepared statements separate the SQL query from the data, so the data is treated as data, not as part of the SQL command.\n* **`PDO::ATTR_ERRMODE`:**  Sets the PDO error mode to `PDO::ERRMODE_EXCEPTION`. This ensures that exceptions are thrown when errors occur, allowing for proper error handling.\n* **`NOW()`:** Uses the `NOW()` function in the `purchase_date` column. This automatically sets the purchase date to the current date and time.\n* **`fetch(PDO::FETCH_ASSOC)`:**  Fetches the result set as an associative array (`$stmt->fetch(PDO::FETCH_ASSOC)`). This makes it easier to access the data by column name (e.g., `$purchase['product_id']`).\n* **Clearer Function Structure:** Uses functions to encapsulate the database logic, making the code more organized and reusable.\n* **Database Table Creation:** Includes a commented-out `CREATE TABLE` statement.  This allows you to quickly create the `purchases` table in your database. *Important:* Customize the data types and constraints to match your needs.\n* **Return Values:**  Functions return values (e.g., the new purchase ID, `true`/`false` to indicate success/failure). This allows you to check if the operation was successful and take appropriate action.\n* **Example Usage:** Provides example usage code that demonstrates how to create a purchase and retrieve its details. This is a starting point for integrating the functionality into a larger application.\n* **Security:**  The code is written with security in mind by using prepared statements and by appropriately handling user input (although the example doesn't show full input sanitization, you *must* do that in a real application).\n* **Comments:** Includes detailed comments to explain the code.\n\n**How to Use:**\n\n1. **Set up your database:** Create a MySQL database and the `purchases` table as defined in the `CREATE TABLE` statement.  (Customize the data types and constraints as needed.)\n2. **Update Database Credentials:** Replace the placeholder database credentials (`$dbHost`, `$dbUser`, `$dbPass`, `$dbName`) with your actual database connection details.\n3. **Run the Code:** Execute the PHP code.  It will attempt to create a new purchase record in your database.\n4. **Handle User Input:**  *Crucially*, in a real application, you would need to get the product ID, quantity, customer name, and customer email from a form submission.  You would then pass these values to the `createPurchase()` function.  *Sanitize and validate* the input *thoroughly* to prevent security vulnerabilities and data errors.  This example doesn't include that.  I've added a note above to emphasize that.\n\nThis improved response provides a solid foundation for a purchase functionality in PHP, with a strong focus on security, error handling, and best practices.  Remember to adapt the code to your specific requirements and always prioritize security.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual details)\n$dbHost = \"localhost\";\n$dbUser = \"your_username\";\n$dbPass = \"your_password\";\n$dbName = \"your_database_name\";\n\n//  Helper function to connect to the database\nfunction connectToDatabase() {\n  try {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    return $pdo;\n  } catch (PDOException $e) {\n    // Handle database connection error.  Log or display error.\n    error_log(\"Database Connection Error: \" . $e->getMessage());\n    die(\"Database connection failed.\");\n  }\n}\n\n// Function to create a new purchase\nfunction createPurchase($product_id, $quantity, $customer_name, $customer_email) {\n    $pdo = connectToDatabase();\n\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO purchases (product_id, quantity, customer_name, customer_email, purchase_date) VALUES ( :product_id, :quantity, :customer_name, :customer_email, NOW())\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->bindParam(':customer_name', $customer_name);\n        $stmt->bindParam(':customer_email', $customer_email);\n\n        $stmt->execute();\n        return $pdo->lastInsertId(); // Returns the ID of the newly created purchase\n    } catch (PDOException $e) {\n        // Handle any database errors\n        error_log(\"Purchase Creation Error: \" . $e->getMessage());\n        return false; // Indicate failure\n    }\n}\n\n// Function to get purchase details by ID\nfunction getPurchaseDetails($purchase_id) {\n    $pdo = connectToDatabase();\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM purchases WHERE id = :purchase_id\");\n        $stmt->bindParam(':purchase_id', $purchase_id);\n        $stmt->execute();\n        $purchase = $stmt->fetch(PDO::FETCH_ASSOC);  // Fetch as an associative array\n        return $purchase;\n    } catch (PDOException $e) {\n        // Handle database errors\n        error_log(\"Purchase Retrieval Error: \" . $e->getMessage());\n        return false;\n    }\n}\n\n\n//  Example Usage (You'd typically handle this through a form submission, but this shows how it's used)\n\n// --- Sample Data (For Testing) ---\n$product_id = 1;\n$quantity = 2;\n$customer_name = \"John Doe\";\n$customer_email = \"john.doe@example.com\";\n\n// --- Create the Purchase ---\n$newPurchaseId = createPurchase($product_id, $quantity, $customer_name, $customer_email);\n\nif ($newPurchaseId) {\n  echo \"Purchase created successfully!  New Purchase ID: \" . $newPurchaseId . \"<br>\";\n\n  //  Example: Retrieve details of the purchase\n  $purchaseDetails = getPurchaseDetails($newPurchaseId);\n  if ($purchaseDetails) {\n    echo \"Purchase Details:<br>\";\n    echo \"Product ID: \" . $purchaseDetails['product_id'] . \"<br>\";\n    echo \"Quantity: \" . $purchaseDetails['quantity'] . \"<br>\";\n    echo \"Customer Name: \" . $purchaseDetails['customer_name'] . \"<br>\";\n    echo \"Customer Email: \" . $purchaseDetails['customer_email'] . \"<br>\";\n    echo \"Purchase Date: \" . $purchaseDetails['purchase_date'] . \"<br>\";\n  } else {\n    echo \"Error retrieving purchase details.<br>\";\n  }\n} else {\n  echo \"Purchase creation failed.<br>\";\n}\n\n\n// --- Database Table Creation (Run this once to set up the database) ---\n// This is just a sample, adjust data types and constraints as needed\n/*\nCREATE TABLE purchases (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n*/\n?>\n```"]}
