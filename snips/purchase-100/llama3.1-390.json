{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**Database Schema:**\n\nWe'll assume we have a database with the following tables:\n\n* `products`: stores product information\n\t+ `id` (primary key): unique identifier for each product\n\t+ `name`: product name\n\t+ `price`: product price\n\t+ `stock`: product stock level\n* `orders`: stores order information\n\t+ `id` (primary key): unique identifier for each order\n\t+ `customer_name`: customer's name\n\t+ `order_date`: date the order was placed\n* `order_items`: stores items in an order\n\t+ `id` (primary key): unique identifier for each item in an order\n\t+ `order_id` (foreign key): references the `orders` table\n\t+ `product_id` (foreign key): references the `products` table\n\t+ `quantity`: quantity of product purchased\n\n**PHP Code:**\n\nWe'll use a simple object-oriented approach to create a Purchase class that handles the purchase functionality.\n\n```php\n// db.php: database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\nclass Database {\n    private $conn;\n\n    function __construct() {\n        try {\n            $this->conn = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            echo 'Connection failed: ' . $e->getMessage();\n        }\n    }\n\n    function query($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $this->conn->lastInsertId() : null;\n    }\n\n    function fetchAll($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : null;\n    }\n\n    function fetchOne($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : null;\n    }\n\n    function close() {\n        $this->conn = null;\n    }\n}\n\nclass Purchase {\n    private $db;\n\n    function __construct(Database $db) {\n        $this->db = $db;\n    }\n\n    function placeOrder($customerName, $products) {\n        try {\n            // validate input\n            if (empty($customerName)) {\n                throw new Exception('Customer name is required');\n            }\n            foreach ($products as $product) {\n                if (!isset($product['id']) || !isset($product['quantity'])) {\n                    throw new Exception('Invalid product data');\n                }\n            }\n\n            // create order\n            $orderData = array(\n                'customer_name' => $customerName,\n                'order_date' => date('Y-m-d H:i:s')\n            );\n            $orderId = $this->db->query('INSERT INTO orders SET ?', $orderData);\n\n            // add items to order\n            foreach ($products as $product) {\n                $itemData = array(\n                    'order_id' => $orderId,\n                    'product_id' => $product['id'],\n                    'quantity' => $product['quantity']\n                );\n                $this->db->query('INSERT INTO order_items SET ?', $itemData);\n            }\n\n            return array('message' => 'Order placed successfully', 'order_id' => $orderId);\n\n        } catch (Exception $e) {\n            return array('error' => $e->getMessage());\n        }\n    }\n\n    function getOrderByID($id) {\n        try {\n            $order = $this->db->fetchOne('SELECT * FROM orders WHERE id = ?', array('id' => $id));\n            if ($order) {\n                $items = $this->db->fetchAll('SELECT * FROM order_items WHERE order_id = ?', array('order_id' => $id));\n                return array_merge($order, array('items' => $items));\n            }\n        } catch (Exception $e) {\n            echo 'Error getting order by ID: ' . $e->getMessage();\n        }\n    }\n\n    function updateOrderStatus($id, $status) {\n        try {\n            // update order status\n            $this->db->query('UPDATE orders SET status = ? WHERE id = ?', array($status, $id));\n        } catch (Exception $e) {\n            echo 'Error updating order status: ' . $e->getMessage();\n        }\n    }\n\n    function close() {\n        $this->db->close();\n    }\n}\n\n// usage\n$db = new Database();\n$purchase = new Purchase($db);\n\n$products = array(\n    array('id' => 1, 'quantity' => 2),\n    array('id' => 2, 'quantity' => 3)\n);\n$result = $purchase->placeOrder('John Doe', $products);\n\nprint_r($result);\n\n$orderID = $result['order_id'];\n$result = $purchase->getOrderByID($orderID);\n\nprint_r($result);\n\n$purchase->updateOrderStatus($orderID, 'shipped');\n\n$purchase->close();\n```\n\nThis code defines a `Database` class to handle database connections and queries, and a `Purchase` class that encapsulates the purchase functionality. The `Purchase` class has methods for placing orders, getting orders by ID, and updating order status.\n\nNote that this is just an example and you should modify it according to your specific requirements and security considerations.", "code_blocks": ["```php\n// db.php: database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\nclass Database {\n    private $conn;\n\n    function __construct() {\n        try {\n            $this->conn = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            echo 'Connection failed: ' . $e->getMessage();\n        }\n    }\n\n    function query($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $this->conn->lastInsertId() : null;\n    }\n\n    function fetchAll($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : null;\n    }\n\n    function fetchOne($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : null;\n    }\n\n    function close() {\n        $this->conn = null;\n    }\n}\n\nclass Purchase {\n    private $db;\n\n    function __construct(Database $db) {\n        $this->db = $db;\n    }\n\n    function placeOrder($customerName, $products) {\n        try {\n            // validate input\n            if (empty($customerName)) {\n                throw new Exception('Customer name is required');\n            }\n            foreach ($products as $product) {\n                if (!isset($product['id']) || !isset($product['quantity'])) {\n                    throw new Exception('Invalid product data');\n                }\n            }\n\n            // create order\n            $orderData = array(\n                'customer_name' => $customerName,\n                'order_date' => date('Y-m-d H:i:s')\n            );\n            $orderId = $this->db->query('INSERT INTO orders SET ?', $orderData);\n\n            // add items to order\n            foreach ($products as $product) {\n                $itemData = array(\n                    'order_id' => $orderId,\n                    'product_id' => $product['id'],\n                    'quantity' => $product['quantity']\n                );\n                $this->db->query('INSERT INTO order_items SET ?', $itemData);\n            }\n\n            return array('message' => 'Order placed successfully', 'order_id' => $orderId);\n\n        } catch (Exception $e) {\n            return array('error' => $e->getMessage());\n        }\n    }\n\n    function getOrderByID($id) {\n        try {\n            $order = $this->db->fetchOne('SELECT * FROM orders WHERE id = ?', array('id' => $id));\n            if ($order) {\n                $items = $this->db->fetchAll('SELECT * FROM order_items WHERE order_id = ?', array('order_id' => $id));\n                return array_merge($order, array('items' => $items));\n            }\n        } catch (Exception $e) {\n            echo 'Error getting order by ID: ' . $e->getMessage();\n        }\n    }\n\n    function updateOrderStatus($id, $status) {\n        try {\n            // update order status\n            $this->db->query('UPDATE orders SET status = ? WHERE id = ?', array($status, $id));\n        } catch (Exception $e) {\n            echo 'Error updating order status: ' . $e->getMessage();\n        }\n    }\n\n    function close() {\n        $this->db->close();\n    }\n}\n\n// usage\n$db = new Database();\n$purchase = new Purchase($db);\n\n$products = array(\n    array('id' => 1, 'quantity' => 2),\n    array('id' => 2, 'quantity' => 3)\n);\n$result = $purchase->placeOrder('John Doe', $products);\n\nprint_r($result);\n\n$orderID = $result['order_id'];\n$result = $purchase->getOrderByID($orderID);\n\nprint_r($result);\n\n$purchase->updateOrderStatus($orderID, 'shipped');\n\n$purchase->close();\n```"]}
