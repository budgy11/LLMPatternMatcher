{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP:\n\n**purchase.php**\n```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'e commerce_db';\n$username = 'root';\n$password = '';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to add product to cart\nfunction addProductToCart($productId, $quantity) {\n    global $conn;\n    \n    // Check if product exists in cart\n    $stmt = $conn->prepare('SELECT * FROM cart WHERE productId = :productId');\n    $stmt->bindParam(':productId', $productId);\n    $stmt->execute();\n    $productInCart = $stmt->fetch();\n\n    if ($productInCart) {\n        // Update quantity if product already exists in cart\n        $updateStmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE productId = :productId');\n        $updateStmt->bindParam(':quantity', $quantity);\n        $updateStmt->bindParam(':productId', $productId);\n        $updateStmt->execute();\n    } else {\n        // Add new product to cart\n        $insertStmt = $conn->prepare('INSERT INTO cart (productId, quantity) VALUES (:productId, :quantity)');\n        $insertStmt->bindParam(':productId', $productId);\n        $insertStmt->bindParam(':quantity', $quantity);\n        $insertStmt->execute();\n    }\n}\n\n// Function to update cart\nfunction updateCart($cartId, $productId, $quantity) {\n    global $conn;\n    \n    // Update quantity of product in cart\n    $stmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE id = :cartId AND productId = :productId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n}\n\n// Function to remove product from cart\nfunction removeProductFromCart($cartId, $productId) {\n    global $conn;\n    \n    // Delete product from cart\n    $stmt = $conn->prepare('DELETE FROM cart WHERE id = :cartId AND productId = :productId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->execute();\n}\n\n// Function to checkout (process payment and update order)\nfunction checkout($cartId, $paymentMethod) {\n    global $conn;\n    \n    // Get total cost of cart\n    $stmt = $conn->prepare('SELECT SUM(quantity * price) AS total FROM cart WHERE id = :cartId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->execute();\n    $totalCost = $stmt->fetch()['total'];\n\n    // Process payment (this example assumes a simple PayPal payment gateway)\n    if ($paymentMethod == 'paypal') {\n        $paypalToken = 'YOUR_PAYPAL_TOKEN';\n        $paypalSecret = 'YOUR_PAYPAL_SECRET';\n\n        // Call PayPal API to process payment\n        $paypalResponse = callPayPalAPI($paypalToken, $paypalSecret, $cartId);\n\n        // Update order status if payment is successful\n        if ($paypalResponse['success']) {\n            updateOrderStatus($cartId);\n        } else {\n            echo 'Payment failed: ' . $paypalResponse['error'];\n        }\n    }\n\n    // Update order with new total cost and payment method\n    $updateStmt = $conn->prepare('UPDATE orders SET totalCost = :totalCost, paymentMethod = :paymentMethod WHERE id = :cartId');\n    $updateStmt->bindParam(':cartId', $cartId);\n    $updateStmt->bindParam(':totalCost', $totalCost);\n    $updateStmt->bindParam(':paymentMethod', $paymentMethod);\n    $updateStmt->execute();\n}\n\n// Function to update order status\nfunction updateOrderStatus($orderId) {\n    global $conn;\n    \n    // Update order status (e.g. from \"pending\" to \"shipped\")\n    $stmt = $conn->prepare('UPDATE orders SET status = :status WHERE id = :orderId');\n    $stmt->bindParam(':orderId', $orderId);\n    $stmt->bindParam(':status', 'shipped'); // example status\n    $stmt->execute();\n}\n\n// Process request\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    switch ($_POST['action']) {\n        case 'add_product_to_cart':\n            addProductToCart($_POST['productId'], $_POST['quantity']);\n            break;\n        case 'update_cart':\n            updateCart($_POST['cartId'], $_POST['productId'], $_POST['quantity']);\n            break;\n        case 'remove_product_from_cart':\n            removeProductFromCart($_POST['cartId'], $_POST['productId']);\n            break;\n        case 'checkout':\n            checkout($_POST['cartId'], $_POST['paymentMethod']);\n            break;\n    }\n}\n\n// Display cart contents\n$stmt = $conn->prepare('SELECT * FROM cart WHERE id = :id');\n$stmt->bindParam(':id', $_SESSION['cartId']);\n$stmt->execute();\n$cartContents = $stmt->fetchAll();\n\n?>\n```\nThis code defines several functions for managing the shopping cart:\n\n* `addProductToCart`: adds a product to the cart or updates its quantity if it already exists\n* `updateCart`: updates the quantity of a product in the cart\n* `removeProductFromCart`: removes a product from the cart\n* `checkout`: processes payment and updates order status\n\nThe code also includes a simple PayPal payment gateway, which you will need to configure with your own PayPal account.\n\nTo use this code, simply include it on a page and submit form data to the server using AJAX or a similar mechanism. The functions can be called from JavaScript using the `XMLHttpRequest` object or a library like jQuery.\n\nNote that this is just an example code and you will need to modify it to fit your specific requirements. Additionally, you should take care to secure your database connection and protect against SQL injection attacks.\n\n**Database schema:**\n\nTo use this code, you will need to create the following tables in your database:\n\n```sql\nCREATE TABLE cart (\n    id INT PRIMARY KEY,\n    productId INT,\n    quantity INT,\n    FOREIGN KEY (productId) REFERENCES products(id)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    totalCost DECIMAL(10, 2),\n    paymentMethod VARCHAR(255),\n    status VARCHAR(255)\n);\n```\nMake sure to adjust the schema as needed to fit your specific requirements.\n\n**JavaScript example:**\n\nHere is an example JavaScript code that can be used to call the PHP functions:\n```javascript\nfunction addProductToCart(productId, quantity) {\n    var data = { action: 'add_product_to_cart', productId: productId, quantity: quantity };\n    $.ajax({\n        type: 'POST',\n        url: 'purchase.php',\n        data: data,\n        success: function(response) {\n            console.log('Product added to cart');\n        }\n    });\n}\n\nfunction updateCart(cartId, productId, quantity) {\n    var data = { action: 'update_cart', cartId: cartId, productId: productId, quantity: quantity };\n    $.ajax({\n        type: 'POST',\n        url: 'purchase.php',\n        data: data,\n        success: function(response) {\n            console.log('Cart updated');\n        }\n    });\n}\n\nfunction removeProductFromCart(cartId, productId) {\n    var data = { action: 'remove_product_from_cart', cartId: cartId, productId: productId };\n    $.ajax({\n        type: 'POST',\n        url: 'purchase.php',\n        data: data,\n        success: function(response) {\n            console.log('Product removed from cart');\n        }\n    });\n}\n\nfunction checkout(cartId, paymentMethod) {\n    var data = { action: 'checkout', cartId: cartId, paymentMethod: paymentMethod };\n    $.ajax({\n        type: 'POST',\n        url: 'purchase.php',\n        data: data,\n        success: function(response) {\n            console.log('Checkout successful');\n        }\n    });\n}\n```\nThis code defines four functions for interacting with the PHP backend. Each function sends a POST request to the `purchase.php` file with the relevant data.\n\nNote that this is just an example and you will need to modify it to fit your specific requirements.\n\n**Error handling:**\n\nRemember to handle errors properly when calling the JavaScript functions. For example:\n```javascript\nfunction addProductToCart(productId, quantity) {\n    $.ajax({\n        type: 'POST',\n        url: 'purchase.php',\n        data: { action: 'add_product_to_cart', productId: productId, quantity: quantity },\n        success: function(response) {\n            console.log('Product added to cart');\n        },\n        error: function(xhr, status, error) {\n            console.error('Error adding product to cart:', error);\n        }\n    });\n}\n```\nThis code defines an `error` callback function that will be called if the AJAX request fails. You can customize this function as needed.\n\n**Final notes:**\n\nRemember to test your code thoroughly and ensure that it works as expected in all scenarios. This example is meant to serve as a starting point for you, but you should adapt it to fit your specific requirements.\n\nI hope this helps! Let me know if you have any questions or need further assistance.", "code_blocks": ["```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'e commerce_db';\n$username = 'root';\n$password = '';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to add product to cart\nfunction addProductToCart($productId, $quantity) {\n    global $conn;\n    \n    // Check if product exists in cart\n    $stmt = $conn->prepare('SELECT * FROM cart WHERE productId = :productId');\n    $stmt->bindParam(':productId', $productId);\n    $stmt->execute();\n    $productInCart = $stmt->fetch();\n\n    if ($productInCart) {\n        // Update quantity if product already exists in cart\n        $updateStmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE productId = :productId');\n        $updateStmt->bindParam(':quantity', $quantity);\n        $updateStmt->bindParam(':productId', $productId);\n        $updateStmt->execute();\n    } else {\n        // Add new product to cart\n        $insertStmt = $conn->prepare('INSERT INTO cart (productId, quantity) VALUES (:productId, :quantity)');\n        $insertStmt->bindParam(':productId', $productId);\n        $insertStmt->bindParam(':quantity', $quantity);\n        $insertStmt->execute();\n    }\n}\n\n// Function to update cart\nfunction updateCart($cartId, $productId, $quantity) {\n    global $conn;\n    \n    // Update quantity of product in cart\n    $stmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE id = :cartId AND productId = :productId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n}\n\n// Function to remove product from cart\nfunction removeProductFromCart($cartId, $productId) {\n    global $conn;\n    \n    // Delete product from cart\n    $stmt = $conn->prepare('DELETE FROM cart WHERE id = :cartId AND productId = :productId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->execute();\n}\n\n// Function to checkout (process payment and update order)\nfunction checkout($cartId, $paymentMethod) {\n    global $conn;\n    \n    // Get total cost of cart\n    $stmt = $conn->prepare('SELECT SUM(quantity * price) AS total FROM cart WHERE id = :cartId');\n    $stmt->bindParam(':cartId', $cartId);\n    $stmt->execute();\n    $totalCost = $stmt->fetch()['total'];\n\n    // Process payment (this example assumes a simple PayPal payment gateway)\n    if ($paymentMethod == 'paypal') {\n        $paypalToken = 'YOUR_PAYPAL_TOKEN';\n        $paypalSecret = 'YOUR_PAYPAL_SECRET';\n\n        // Call PayPal API to process payment\n        $paypalResponse = callPayPalAPI($paypalToken, $paypalSecret, $cartId);\n\n        // Update order status if payment is successful\n        if ($paypalResponse['success']) {\n            updateOrderStatus($cartId);\n        } else {\n            echo 'Payment failed: ' . $paypalResponse['error'];\n        }\n    }\n\n    // Update order with new total cost and payment method\n    $updateStmt = $conn->prepare('UPDATE orders SET totalCost = :totalCost, paymentMethod = :paymentMethod WHERE id = :cartId');\n    $updateStmt->bindParam(':cartId', $cartId);\n    $updateStmt->bindParam(':totalCost', $totalCost);\n    $updateStmt->bindParam(':paymentMethod', $paymentMethod);\n    $updateStmt->execute();\n}\n\n// Function to update order status\nfunction updateOrderStatus($orderId) {\n    global $conn;\n    \n    // Update order status (e.g. from \"pending\" to \"shipped\")\n    $stmt = $conn->prepare('UPDATE orders SET status = :status WHERE id = :orderId');\n    $stmt->bindParam(':orderId', $orderId);\n    $stmt->bindParam(':status', 'shipped'); // example status\n    $stmt->execute();\n}\n\n// Process request\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    switch ($_POST['action']) {\n        case 'add_product_to_cart':\n            addProductToCart($_POST['productId'], $_POST['quantity']);\n            break;\n        case 'update_cart':\n            updateCart($_POST['cartId'], $_POST['productId'], $_POST['quantity']);\n            break;\n        case 'remove_product_from_cart':\n            removeProductFromCart($_POST['cartId'], $_POST['productId']);\n            break;\n        case 'checkout':\n            checkout($_POST['cartId'], $_POST['paymentMethod']);\n            break;\n    }\n}\n\n// Display cart contents\n$stmt = $conn->prepare('SELECT * FROM cart WHERE id = :id');\n$stmt->bindParam(':id', $_SESSION['cartId']);\n$stmt->execute();\n$cartContents = $stmt->fetchAll();\n\n?>\n```", null, null, null]}
