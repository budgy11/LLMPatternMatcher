{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should consider the basic structure of a shopping cart system. Users add products to their cart, review them, and then proceed to checkout. So, I'll need pages for displaying products, adding to cart, viewing the cart, and handling the purchase.\n\nI'll start by setting up the database. The main tables needed are products, which hold product details like id, name, description, price, and stock. Then, an orders table to store order information such as user ID, total amount, order date, and payment status. Lastly, an order_items table to keep track of each item in an order, including the order ID, product ID, quantity, and price.\n\nNext, I'll create a Product class with methods to add products, get all products, and check stock. This helps manage the product data efficiently.\n\nFor the cart functionality, I'll use sessions to store the cart items. The Cart class will handle adding items, calculating totals, updating quantities, and removing items from the cart. This way, users can manipulate their cart without persisting it to the database until checkout.\n\nThe checkout process involves capturing user details and processing the payment. For simplicity, I'll simulate the payment approval with a random success rate. In a real scenario, this would integrate with a payment gateway.\n\nAfter payment approval, I'll place the order by inserting into the orders table and then record each item in the order_items table. If payment fails, I'll inform the user accordingly.\n\nI'll also need to handle cases where products are out of stock when placing the order. This ensures that users can't purchase unavailable items.\n\nFinally, I'll provide a thank you page for successful purchases and an order history page for users to view their past orders.\n\nThroughout this process, I should ensure proper error handling, security measures like prepared statements to prevent SQL injection, and session management for user-specific data.\n</think>\n\nHere's an example of how you can create a purchase functionality using PHP. This example includes basic database operations, cart management, and order processing:\n\n```php\n<?php\nsession_start();\ninclude(\"db_connection.php\");\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Add product to database\n    public function addProduct($name, $description, $price, $stock) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO products (name, description, price, stock) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$name, $description, $price, $stock]);\n            return true;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Check product stock\n    public function checkStock($productId, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT stock FROM products WHERE id = ?\");\n            $stmt->execute([$productId]);\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            return $result['stock'] >= $quantity;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Cart class\nclass Cart {\n    public function __construct() {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n    }\n\n    // Add item to cart\n    public function addItem($productId, $quantity) {\n        if (isset($_SESSION['cart'][$productId])) {\n            $_SESSION['cart'][$productId] += $quantity;\n        } else {\n            $_SESSION['cart'][$productId] = $quantity;\n        }\n    }\n\n    // Get total price of items in cart\n    public function getTotal($products) {\n        $total = 0;\n        foreach ($_SESSION['cart'] as $productId => $quantity) {\n            $productPrice = $products[$productId]['price'];\n            $total += ($productPrice * $quantity);\n        }\n        return $total;\n    }\n\n    // Update item quantity\n    public function updateItem($productId, $quantity) {\n        if (isset($_SESSION['cart'][$productId])) {\n            $_SESSION['cart'][$productId] = $quantity;\n        }\n    }\n\n    // Remove item from cart\n    public function removeItem($productId) {\n        unset($_SESSION['cart'][$productId]);\n    }\n}\n\n// Checkout class\nclass Checkout {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Process order\n    public function processOrder($userId, $totalAmount) {\n        try {\n            // Insert into orders table\n            $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount, order_date, payment_status) VALUES (?, ?, NOW(), 'pending')\");\n            $stmt->execute([$userId, $totalAmount]);\n            $orderId = $this->conn->lastInsertId();\n\n            // Insert into order_items table\n            foreach ($_SESSION['cart'] as $productId => $quantity) {\n                $stmt = $this->conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, (SELECT price FROM products WHERE id = ?))\");\n                $stmt->execute([$orderId, $productId, $quantity, $productId]);\n            }\n\n            // Clear cart\n            unset($_SESSION['cart']);\n\n            return true;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Simulate payment approval\n    public function approvePayment() {\n        // In real application, this would integrate with a payment gateway\n        $approval = rand(0, 1);\n        if ($approval >= 0.5) {\n            return true; // Payment approved\n        } else {\n            return false; // Payment declined\n        }\n    }\n\n    // Check order status\n    public function getOrderStatus($orderId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT payment_status FROM orders WHERE id = ?\");\n            $stmt->execute([$orderId]);\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            return $result['payment_status'];\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Order history class\nclass OrderHistory {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get user orders\n    public function getUserOrders($userId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get order details\n    public function getOrderDetails($orderId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT oi.*, p.name AS product_name FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?\");\n            $stmt->execute([$orderId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Database tables creation\ntry {\n    $conn = new PDO(\"mysql:host=localhost;dbname=shopping_cart\", \"root\", \"\");\n    // Create products table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS products (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255),\n        description TEXT,\n        price DECIMAL(10, 2),\n        stock INT\n    )\");\n\n    // Create orders table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS orders (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT,\n        total_amount DECIMAL(10, 2),\n        order_date DATETIME,\n        payment_status VARCHAR(50)\n    )\");\n\n    // Create order_items table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS order_items (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        order_id INT,\n        product_id INT,\n        quantity INT,\n        price DECIMAL(10, 2)\n    )\");\n} catch(PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n// Sample usage\n$product = new Product($conn);\n$cart = new Cart();\n$checkout = new Checkout($conn);\n$orderHistory = new OrderHistory($conn);\n\n// Add sample products\nif ($product->addProduct('Laptop', 'High performance laptop', 999.99, 10)) {\n    echo \"Product added successfully!\";\n}\n\n// Display all products\n$products = $product->getAllProducts();\nforeach ($products as $prod) {\n    echo \"<div>\";\n    echo \"<h3>\" . $prod['name'] . \"</h3>\";\n    echo \"<p>Description: \" . $prod['description'] . \"</p>\";\n    echo \"<p>Price: $\" . number_format($prod['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $prod['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' max='\" . $prod['stock'] . \"' value='1'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n\n// Add to cart page (add_to_cart.php)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->addItem($_POST['product_id'], $_POST['quantity']);\n    header(\"Location: view_cart.php\");\n}\n\n// View cart page (view_cart.php)\necho \"<h2>Your Cart</h2>\";\n$total = 0;\nforeach ($_SESSION['cart'] as $productId => $quantity) {\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n    $stmt->execute([$productId]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n    echo \"<div>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \" x \" . $quantity . \"</p>\";\n    echo \"<form action='update_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $productId . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' max='\" . $product['stock'] . \"' value='\" . $quantity . \"'>\";\n    echo \"<button type='submit'>Update</button>\";\n    echo \"</form>\";\n    echo \"<a href='remove_from_cart.php?product_id=\" . $productId . \"'>Remove</a>\";\n    echo \"</div>\";\n    $total += ($product['price'] * $quantity);\n}\necho \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\necho \"<a href='checkout.php'>Proceed to Checkout</a>\";\n\n// Update cart page (update_cart.php)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->updateItem($_POST['product_id'], $_POST['quantity']);\n    header(\"Location: view_cart.php\");\n}\n\n// Remove from cart page (remove_from_cart.php)\nif (isset($_GET['product_id'])) {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->removeItem($_GET['product_id']);\n    header(\"Location: view_cart.php\");\n}\n\n// Checkout process (checkout.php)\nif (!isset($_SESSION)) session_start();\n$user_id = 1; // Replace with actual user authentication\n$totalAmount = $cart->getTotal($products);\n\nif ($checkout->approvePayment()) {\n    if ($checkout->processOrder($user_id, $totalAmount)) {\n        echo \"Thank you for your purchase!\";\n        header(\"Location: thank_you.php\");\n    } else {\n        echo \"Error processing order.\";\n    }\n} else {\n    echo \"Payment declined. Please try again.\";\n}\n\n// Thank you page (thank_you.php)\necho \"<h2>Thank You for Your Purchase!</h2>\";\necho \"<p>Your order has been successfully processed.</p>\";\n\n// Order history page\n$user_orders = $orderHistory->getUserOrders($user_id);\nforeach ($user_orders as $order) {\n    echo \"<div>\";\n    echo \"<h3>Order #\" . $order['id'] . \"</h3>\";\n    echo \"<p>Total: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n    echo \"<p>Status: \" . $order['payment_status'] . \"</p>\";\n    echo \"<a href='view_order.php?order_id=\" . $order['id'] . \"'>View Details</a>\";\n    echo \"</div>\";\n}\n\n// View order details page (view_order.php)\nif (isset($_GET['order_id'])) {\n    $order_details = $orderHistory->getOrderDetails($_GET['order_id']);\n    foreach ($order_details as $detail) {\n        echo \"<div>\";\n        echo \"<h3>\" . $detail['product_name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $detail['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($detail['price'], 2) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n?>\n```\n\nThis example includes:\n\n1. A Product class for managing products\n2. A Cart class for handling cart operations\n3. A Checkout class for processing orders\n4. An OrderHistory class for viewing past orders\n5. Database tables creation and basic CRUD operations\n\nTo use this code:\n\n1. Create a new database named \"shopping_cart\"\n2. Replace the database connection details with your own\n3. Set up user authentication (not included in this example)\n4. Use the provided classes to manage products, cart, and orders\n\nNote: This is a simplified example and should be adapted to fit your specific needs. You might want to add features like:\n\n- User authentication\n- Product images\n- Shipping calculations\n- Payment integration\n- Order tracking\n- Refunds and returns\n- Discounts and promotions\n- Admin panel for managing products and orders\n\nRemember to secure your application by:\n- Using prepared statements to prevent SQL injection\n- Validating all user input\n- Sanitizing output\n- Implementing proper error handling\n- Securing sensitive data (e.g., using HTTPS)\n- Protecting against CSRF attacks\n\nThis is a basic implementation and should be customized according to your specific requirements.", "code_blocks": ["```php\n<?php\nsession_start();\ninclude(\"db_connection.php\");\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Add product to database\n    public function addProduct($name, $description, $price, $stock) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO products (name, description, price, stock) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$name, $description, $price, $stock]);\n            return true;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Check product stock\n    public function checkStock($productId, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT stock FROM products WHERE id = ?\");\n            $stmt->execute([$productId]);\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            return $result['stock'] >= $quantity;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Cart class\nclass Cart {\n    public function __construct() {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n    }\n\n    // Add item to cart\n    public function addItem($productId, $quantity) {\n        if (isset($_SESSION['cart'][$productId])) {\n            $_SESSION['cart'][$productId] += $quantity;\n        } else {\n            $_SESSION['cart'][$productId] = $quantity;\n        }\n    }\n\n    // Get total price of items in cart\n    public function getTotal($products) {\n        $total = 0;\n        foreach ($_SESSION['cart'] as $productId => $quantity) {\n            $productPrice = $products[$productId]['price'];\n            $total += ($productPrice * $quantity);\n        }\n        return $total;\n    }\n\n    // Update item quantity\n    public function updateItem($productId, $quantity) {\n        if (isset($_SESSION['cart'][$productId])) {\n            $_SESSION['cart'][$productId] = $quantity;\n        }\n    }\n\n    // Remove item from cart\n    public function removeItem($productId) {\n        unset($_SESSION['cart'][$productId]);\n    }\n}\n\n// Checkout class\nclass Checkout {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Process order\n    public function processOrder($userId, $totalAmount) {\n        try {\n            // Insert into orders table\n            $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount, order_date, payment_status) VALUES (?, ?, NOW(), 'pending')\");\n            $stmt->execute([$userId, $totalAmount]);\n            $orderId = $this->conn->lastInsertId();\n\n            // Insert into order_items table\n            foreach ($_SESSION['cart'] as $productId => $quantity) {\n                $stmt = $this->conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, (SELECT price FROM products WHERE id = ?))\");\n                $stmt->execute([$orderId, $productId, $quantity, $productId]);\n            }\n\n            // Clear cart\n            unset($_SESSION['cart']);\n\n            return true;\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Simulate payment approval\n    public function approvePayment() {\n        // In real application, this would integrate with a payment gateway\n        $approval = rand(0, 1);\n        if ($approval >= 0.5) {\n            return true; // Payment approved\n        } else {\n            return false; // Payment declined\n        }\n    }\n\n    // Check order status\n    public function getOrderStatus($orderId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT payment_status FROM orders WHERE id = ?\");\n            $stmt->execute([$orderId]);\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            return $result['payment_status'];\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Order history class\nclass OrderHistory {\n    private $conn;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get user orders\n    public function getUserOrders($userId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$userId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get order details\n    public function getOrderDetails($orderId) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT oi.*, p.name AS product_name FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?\");\n            $stmt->execute([$orderId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Database tables creation\ntry {\n    $conn = new PDO(\"mysql:host=localhost;dbname=shopping_cart\", \"root\", \"\");\n    // Create products table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS products (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255),\n        description TEXT,\n        price DECIMAL(10, 2),\n        stock INT\n    )\");\n\n    // Create orders table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS orders (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT,\n        total_amount DECIMAL(10, 2),\n        order_date DATETIME,\n        payment_status VARCHAR(50)\n    )\");\n\n    // Create order_items table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS order_items (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        order_id INT,\n        product_id INT,\n        quantity INT,\n        price DECIMAL(10, 2)\n    )\");\n} catch(PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n// Sample usage\n$product = new Product($conn);\n$cart = new Cart();\n$checkout = new Checkout($conn);\n$orderHistory = new OrderHistory($conn);\n\n// Add sample products\nif ($product->addProduct('Laptop', 'High performance laptop', 999.99, 10)) {\n    echo \"Product added successfully!\";\n}\n\n// Display all products\n$products = $product->getAllProducts();\nforeach ($products as $prod) {\n    echo \"<div>\";\n    echo \"<h3>\" . $prod['name'] . \"</h3>\";\n    echo \"<p>Description: \" . $prod['description'] . \"</p>\";\n    echo \"<p>Price: $\" . number_format($prod['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $prod['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' max='\" . $prod['stock'] . \"' value='1'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n\n// Add to cart page (add_to_cart.php)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->addItem($_POST['product_id'], $_POST['quantity']);\n    header(\"Location: view_cart.php\");\n}\n\n// View cart page (view_cart.php)\necho \"<h2>Your Cart</h2>\";\n$total = 0;\nforeach ($_SESSION['cart'] as $productId => $quantity) {\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n    $stmt->execute([$productId]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n    echo \"<div>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \" x \" . $quantity . \"</p>\";\n    echo \"<form action='update_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $productId . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' max='\" . $product['stock'] . \"' value='\" . $quantity . \"'>\";\n    echo \"<button type='submit'>Update</button>\";\n    echo \"</form>\";\n    echo \"<a href='remove_from_cart.php?product_id=\" . $productId . \"'>Remove</a>\";\n    echo \"</div>\";\n    $total += ($product['price'] * $quantity);\n}\necho \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\necho \"<a href='checkout.php'>Proceed to Checkout</a>\";\n\n// Update cart page (update_cart.php)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->updateItem($_POST['product_id'], $_POST['quantity']);\n    header(\"Location: view_cart.php\");\n}\n\n// Remove from cart page (remove_from_cart.php)\nif (isset($_GET['product_id'])) {\n    if (!isset($_SESSION)) session_start();\n    $cart = new Cart();\n    $cart->removeItem($_GET['product_id']);\n    header(\"Location: view_cart.php\");\n}\n\n// Checkout process (checkout.php)\nif (!isset($_SESSION)) session_start();\n$user_id = 1; // Replace with actual user authentication\n$totalAmount = $cart->getTotal($products);\n\nif ($checkout->approvePayment()) {\n    if ($checkout->processOrder($user_id, $totalAmount)) {\n        echo \"Thank you for your purchase!\";\n        header(\"Location: thank_you.php\");\n    } else {\n        echo \"Error processing order.\";\n    }\n} else {\n    echo \"Payment declined. Please try again.\";\n}\n\n// Thank you page (thank_you.php)\necho \"<h2>Thank You for Your Purchase!</h2>\";\necho \"<p>Your order has been successfully processed.</p>\";\n\n// Order history page\n$user_orders = $orderHistory->getUserOrders($user_id);\nforeach ($user_orders as $order) {\n    echo \"<div>\";\n    echo \"<h3>Order #\" . $order['id'] . \"</h3>\";\n    echo \"<p>Total: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n    echo \"<p>Status: \" . $order['payment_status'] . \"</p>\";\n    echo \"<a href='view_order.php?order_id=\" . $order['id'] . \"'>View Details</a>\";\n    echo \"</div>\";\n}\n\n// View order details page (view_order.php)\nif (isset($_GET['order_id'])) {\n    $order_details = $orderHistory->getOrderDetails($_GET['order_id']);\n    foreach ($order_details as $detail) {\n        echo \"<div>\";\n        echo \"<h3>\" . $detail['product_name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $detail['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($detail['price'], 2) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n?>\n```"]}
