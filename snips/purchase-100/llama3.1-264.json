{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a basic purchase functionality using PHP:\n\n**Database Setup**\n\nFirst, let's assume we have the following database tables:\n\n* `products`: stores product information\n\t+ `id` (primary key)\n\t+ `name`\n\t+ `price`\n* `orders`: stores order information\n\t+ `id` (primary key)\n\t+ `customer_name`\n\t+ `order_date`\n* `order_items`: stores relationship between orders and products\n\t+ `id` (primary key)\n\t+ `order_id` (foreign key referencing `orders.id`)\n\t+ `product_id` (foreign key referencing `products.id`)\n\t+ `quantity`\n\n**PHP Code**\n\nCreate a new PHP file, e.g. `purchase.php`, and add the following code:\n```php\n<?php\n\n// database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n  // connect to database\n  $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n  echo \"Error connecting to database: \" . $e->getMessage();\n  exit;\n}\n\n// function to handle purchase request\nfunction purchase($product_id, $quantity) {\n  global $conn;\n\n  // retrieve product information\n  $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n  $stmt->execute(array($product_id));\n  $product_info = $stmt->fetch();\n\n  if (!$product_info) {\n    throw new Exception(\"Product not found\");\n  }\n\n  // check if quantity is valid\n  if ($quantity <= 0) {\n    throw new Exception(\"Invalid quantity\");\n  }\n\n  // insert order and order item into database\n  $order_id = uniqid();\n  $stmt = $conn->prepare(\"INSERT INTO orders (customer_name, order_date) VALUES (?, ?)\");\n  $stmt->execute(array(null, date('Y-m-d H:i:s')));\n  $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\");\n  for ($i = 0; $i < $quantity; $i++) {\n    $stmt->execute(array($order_id, $product_info['id'], 1));\n  }\n\n  // update product stock\n  $stmt = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n  $stmt->execute(array(1, $product_info['id']));\n\n  return array(\n    'order_id' => $order_id,\n    'total_amount' => $quantity * $product_info['price']\n  );\n}\n\n// handle purchase request\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n  try {\n    $result = purchase($_POST['product_id'], $_POST['quantity']);\n    echo json_encode($result);\n  } catch (Exception $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n}\n\n?>\n```\n**HTML Form**\n\nCreate an HTML form to allow users to submit their purchase requests:\n```html\n<form action=\"purchase.php\" method=\"post\">\n  <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $_POST['product_id']; ?>\">\n  <input type=\"number\" name=\"quantity\" value=\"<?php echo $_POST['quantity']; ?>\">\n  <button type=\"submit\">Place Order</button>\n</form>\n```\n**Usage**\n\nTo use this code, simply create a new PHP file called `purchase.php` and add the code above. Create an HTML form with two input fields: one for the product ID and one for the quantity. When the user submits the form, it will send a POST request to `purchase.php`, which will execute the purchase function and return the order details in JSON format.\n\nNote that this is just a basic example, and you should consider implementing additional features such as:\n\n* User authentication\n* Payment processing\n* Stock management\n* Order tracking\n* Error handling\n\nAlso, make sure to update your database schema and PHP code according to your specific requirements.", "code_blocks": ["```php\n<?php\n\n// database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n  // connect to database\n  $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n  echo \"Error connecting to database: \" . $e->getMessage();\n  exit;\n}\n\n// function to handle purchase request\nfunction purchase($product_id, $quantity) {\n  global $conn;\n\n  // retrieve product information\n  $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n  $stmt->execute(array($product_id));\n  $product_info = $stmt->fetch();\n\n  if (!$product_info) {\n    throw new Exception(\"Product not found\");\n  }\n\n  // check if quantity is valid\n  if ($quantity <= 0) {\n    throw new Exception(\"Invalid quantity\");\n  }\n\n  // insert order and order item into database\n  $order_id = uniqid();\n  $stmt = $conn->prepare(\"INSERT INTO orders (customer_name, order_date) VALUES (?, ?)\");\n  $stmt->execute(array(null, date('Y-m-d H:i:s')));\n  $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\");\n  for ($i = 0; $i < $quantity; $i++) {\n    $stmt->execute(array($order_id, $product_info['id'], 1));\n  }\n\n  // update product stock\n  $stmt = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n  $stmt->execute(array(1, $product_info['id']));\n\n  return array(\n    'order_id' => $order_id,\n    'total_amount' => $quantity * $product_info['price']\n  );\n}\n\n// handle purchase request\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n  try {\n    $result = purchase($_POST['product_id'], $_POST['quantity']);\n    echo json_encode($result);\n  } catch (Exception $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n}\n\n?>\n```", null]}
