{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of a basic purchase cart functionality using PHP:\n\n**Cart Class**\n```php\nclass Cart {\n  private $items = array();\n\n  public function add_item($product_id, $quantity) {\n    if (array_key_exists($product_id, $this->items)) {\n      $this->items[$product_id] += $quantity;\n    } else {\n      $this->items[$product_id] = $quantity;\n    }\n  }\n\n  public function remove_item($product_id) {\n    unset($this->items[$product_id]);\n  }\n\n  public function get_items() {\n    return $this->items;\n  }\n\n  public function get_total() {\n    $total = 0;\n    foreach ($this->items as $product_id => $quantity) {\n      // assume we have a function to get the price of a product\n      $price = get_product_price($product_id);\n      $total += $price * $quantity;\n    }\n    return $total;\n  }\n\n  public function display_cart() {\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($this->items as $product_id => $quantity) {\n      // assume we have a function to get the name and price of a product\n      $name = get_product_name($product_id);\n      $price = get_product_price($product_id);\n      echo \"Product: $name, Quantity: $quantity, Price: $\" . number_format($price, 2) . \"<br>\";\n    }\n    echo \"<p>Total: $\" . number_format($this->get_total(), 2) . \"</p>\";\n  }\n}\n```\n**Example Usage**\n```php\n$cart = new Cart();\n\n// Add some products to the cart\n$cart->add_item(1, 2); // add 2 of product 1\n$cart->add_item(3, 1); // add 1 of product 3\n\n// Display the cart\n$cart->display_cart();\n```\n**Database Integration**\nTo store the cart data in a database, you can use an ORM like Doctrine or create your own database logic. Here is an example using PDO:\n```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=shopping_cart', 'username', 'password');\n  }\n\n  public function add_item($product_id, $quantity) {\n    $stmt = $this->db->prepare(\"INSERT INTO cart (product_id, quantity) VALUES (:product_id, :quantity)\");\n    $stmt->bindParam(':product_id', $product_id);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function remove_item($product_id) {\n    $this->db->query(\"DELETE FROM cart WHERE product_id = '$product_id'\");\n  }\n\n  // ...\n}\n```\n**Security Considerations**\n\n* Make sure to validate and sanitize user input (e.g. `$_POST` data) to prevent SQL injection attacks.\n* Use prepared statements or parameterized queries to avoid SQL injection vulnerabilities.\n* Store sensitive data (e.g. credit card numbers, passwords) securely using encryption.\n\nNote: This is a basic example and you should adapt it to your specific use case and requirements. Additionally, this example assumes that the product prices are stored in a separate table or function `get_product_price($product_id)` for simplicity.", "code_blocks": ["```php\nclass Cart {\n  private $items = array();\n\n  public function add_item($product_id, $quantity) {\n    if (array_key_exists($product_id, $this->items)) {\n      $this->items[$product_id] += $quantity;\n    } else {\n      $this->items[$product_id] = $quantity;\n    }\n  }\n\n  public function remove_item($product_id) {\n    unset($this->items[$product_id]);\n  }\n\n  public function get_items() {\n    return $this->items;\n  }\n\n  public function get_total() {\n    $total = 0;\n    foreach ($this->items as $product_id => $quantity) {\n      // assume we have a function to get the price of a product\n      $price = get_product_price($product_id);\n      $total += $price * $quantity;\n    }\n    return $total;\n  }\n\n  public function display_cart() {\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($this->items as $product_id => $quantity) {\n      // assume we have a function to get the name and price of a product\n      $name = get_product_name($product_id);\n      $price = get_product_price($product_id);\n      echo \"Product: $name, Quantity: $quantity, Price: $\" . number_format($price, 2) . \"<br>\";\n    }\n    echo \"<p>Total: $\" . number_format($this->get_total(), 2) . \"</p>\";\n  }\n}\n```", "```php\n$cart = new Cart();\n\n// Add some products to the cart\n$cart->add_item(1, 2); // add 2 of product 1\n$cart->add_item(3, 1); // add 1 of product 3\n\n// Display the cart\n$cart->display_cart();\n```", "```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=shopping_cart', 'username', 'password');\n  }\n\n  public function add_item($product_id, $quantity) {\n    $stmt = $this->db->prepare(\"INSERT INTO cart (product_id, quantity) VALUES (:product_id, :quantity)\");\n    $stmt->bindParam(':product_id', $product_id);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function remove_item($product_id) {\n    $this->db->query(\"DELETE FROM cart WHERE product_id = '$product_id'\");\n  }\n\n  // ...\n}\n```"]}
