{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how to create a basic purchase functionality using PHP:\n\n**Database Structure**\n\nWe'll assume you have a database with the following tables:\n\n* `products`: stores product information (ID, name, price)\n* `orders`: stores order information (ID, customer ID, date)\n* `order_items`: stores items in each order (order ID, product ID, quantity)\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_id INT,\n  date DATE,\n  FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\nWe'll create a simple PHP class called `Purchase` that handles the purchase functionality.\n\n```php\nclass Purchase {\n  private $db;\n\n  public function __construct() {\n    // Initialize database connection\n    $this->db = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n  }\n\n  /**\n   * Add product to cart\n   *\n   * @param int $product_id Product ID\n   * @param int $quantity Quantity of product to add\n   */\n  public function addToCart($product_id, $quantity) {\n    // Check if product exists\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if ($result->num_rows == 0) {\n      return false; // Product not found\n    }\n\n    // Add item to cart (simulated using session)\n    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);\n  }\n\n  /**\n   * Checkout and create order\n   *\n   * @param int $customer_id Customer ID\n   */\n  public function checkout($customer_id) {\n    // Get products in cart\n    $cart = $_SESSION['cart'];\n\n    // Create new order\n    $order_id = $this->createOrder($customer_id);\n\n    // Add items to order\n    foreach ($cart as $product_id => $item) {\n      $this->addOrderItem($order_id, $product_id, $item['quantity']);\n    }\n  }\n\n  /**\n   * Create new order\n   *\n   * @param int $customer_id Customer ID\n   */\n  private function createOrder($customer_id) {\n    // Generate unique order ID\n    $order_id = uniqid();\n\n    // Insert order into database\n    $this->db->query(\"INSERT INTO orders (customer_id, date) VALUES ('$customer_id', NOW())\");\n\n    return $order_id;\n  }\n\n  /**\n   * Add item to order\n   *\n   * @param int $order_id Order ID\n   * @param int $product_id Product ID\n   * @param int $quantity Quantity of product\n   */\n  private function addOrderItem($order_id, $product_id, $quantity) {\n    // Check if product exists\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if ($result->num_rows == 0) {\n      return false; // Product not found\n    }\n\n    // Insert order item into database\n    $this->db->query(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\");\n  }\n}\n```\n\n**Example Usage**\n\n```php\n// Create new purchase instance\n$purchase = new Purchase();\n\n// Add products to cart\n$purchase->addToCart(1, 2); // Add 2 units of product with ID 1 to cart\n$purchase->addToCart(2, 3); // Add 3 units of product with ID 2 to cart\n\n// Checkout and create order\n$purchase->checkout(1);\n```\n\nNote: This is a basic example and you should add proper error handling, security measures (e.g. escaping user input), and validation for the purchase functionality.\n\n**Additional Notes**\n\n* In this example, we're using `mysqli` extension to interact with the database. Consider upgrading to `PDO` or `mysqli` (with prepared statements) for better security.\n* We're storing cart contents in session variables (`$_SESSION['cart']`). Consider using a more robust solution like Redis or Memcached for cart management.\n* This example assumes that products are already in stock and available for purchase. You may want to add inventory management functionality as well.\n\nI hope this helps!", "code_blocks": [null, "```php\nclass Purchase {\n  private $db;\n\n  public function __construct() {\n    // Initialize database connection\n    $this->db = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n  }\n\n  /**\n   * Add product to cart\n   *\n   * @param int $product_id Product ID\n   * @param int $quantity Quantity of product to add\n   */\n  public function addToCart($product_id, $quantity) {\n    // Check if product exists\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if ($result->num_rows == 0) {\n      return false; // Product not found\n    }\n\n    // Add item to cart (simulated using session)\n    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);\n  }\n\n  /**\n   * Checkout and create order\n   *\n   * @param int $customer_id Customer ID\n   */\n  public function checkout($customer_id) {\n    // Get products in cart\n    $cart = $_SESSION['cart'];\n\n    // Create new order\n    $order_id = $this->createOrder($customer_id);\n\n    // Add items to order\n    foreach ($cart as $product_id => $item) {\n      $this->addOrderItem($order_id, $product_id, $item['quantity']);\n    }\n  }\n\n  /**\n   * Create new order\n   *\n   * @param int $customer_id Customer ID\n   */\n  private function createOrder($customer_id) {\n    // Generate unique order ID\n    $order_id = uniqid();\n\n    // Insert order into database\n    $this->db->query(\"INSERT INTO orders (customer_id, date) VALUES ('$customer_id', NOW())\");\n\n    return $order_id;\n  }\n\n  /**\n   * Add item to order\n   *\n   * @param int $order_id Order ID\n   * @param int $product_id Product ID\n   * @param int $quantity Quantity of product\n   */\n  private function addOrderItem($order_id, $product_id, $quantity) {\n    // Check if product exists\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if ($result->num_rows == 0) {\n      return false; // Product not found\n    }\n\n    // Insert order item into database\n    $this->db->query(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\");\n  }\n}\n```", "```php\n// Create new purchase instance\n$purchase = new Purchase();\n\n// Add products to cart\n$purchase->addToCart(1, 2); // Add 2 units of product with ID 1 to cart\n$purchase->addToCart(2, 3); // Add 3 units of product with ID 2 to cart\n\n// Checkout and create order\n$purchase->checkout(1);\n```"]}
