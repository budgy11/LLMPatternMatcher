{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of a simple purchase functionality using PHP. This example assumes that you have already set up a database with the necessary tables for storing products and users.\n\n**Database Schema**\n\nLet's assume we have two tables in our database: `products` and `orders`. The `products` table has the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique identifier for each product |\n| name | varchar | Name of the product |\n| price | decimal | Price of the product |\n\nThe `orders` table has the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique identifier for each order |\n| user_id | int | Foreign key referencing the users table |\n| product_id | int | Foreign key referencing the products table |\n| quantity | int | Quantity of the product ordered |\n\n**PHP Code**\n\nCreate a new PHP file called `purchase.php` and add the following code:\n\n```php\n<?php\n\n// Include database connection script\nrequire_once 'db.php';\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get product details from form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n\n    // Sanitize input data\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Validate user input\n    if (!$product_id || !$quantity) {\n        echo \"Error: Please enter valid product ID and quantity.\";\n        exit;\n    }\n\n    try {\n        // Check if product exists in database\n        $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n        $stmt->bindParam(':id', $product_id);\n        $stmt->execute();\n        $product_data = $stmt->fetch();\n\n        // Check if quantity is valid\n        if ($quantity < 1) {\n            echo \"Error: Please enter a valid quantity.\";\n            exit;\n        }\n\n        // Place order in database\n        $order_id = uniqid();\n        $stmt = $db->prepare('INSERT INTO orders (user_id, product_id, quantity)\n                                VALUES (:user_id, :product_id, :quantity)');\n        $stmt->bindParam(':user_id', $_SESSION['user_id']);\n        $stmt->bindParam(':product_id', $product_data['id']);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->execute();\n\n        // Update product stock\n        $current_stock = $product_data['stock'] - $quantity;\n        $stmt = $db->prepare('UPDATE products SET stock = :stock WHERE id = :id');\n        $stmt->bindParam(':stock', $current_stock);\n        $stmt->bindParam(':id', $product_data['id']);\n        $stmt->execute();\n\n        echo \"Order placed successfully! Your order ID is: $order_id\";\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        exit;\n    }\n}\n\n// Display products for user to select\n$stmt = $db->prepare('SELECT * FROM products');\n$stmt->execute();\n$products = $stmt->fetchAll();\n\n?>\n\n<!-- Display HTML form for user to select product and quantity -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <select name=\"product_id\" required>\n        <?php foreach ($products as $product) { ?>\n            <option value=\"<?php echo $product['id']; ?>\"><?php echo $product['name']; ?></option>\n        <?php } ?>\n    </select>\n\n    <input type=\"number\" min=\"1\" name=\"quantity\" placeholder=\"Quantity\">\n\n    <button type=\"submit\">Place Order</button>\n</form>\n```\n\n**Explanation**\n\nThis code assumes that you have already set up a database connection script called `db.php` and are using a PHP session to store the user's ID.\n\nThe code checks if the user is logged in, and if not, redirects them to the login page. If the form is submitted, it validates the input data and places an order in the database by inserting a new row into the `orders` table. It also updates the product stock accordingly.\n\nNote that this is a simplified example and you should consider adding more features such as payment processing, user authentication, and error handling to make it production-ready.", "code_blocks": ["```php\n<?php\n\n// Include database connection script\nrequire_once 'db.php';\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get product details from form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n\n    // Sanitize input data\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Validate user input\n    if (!$product_id || !$quantity) {\n        echo \"Error: Please enter valid product ID and quantity.\";\n        exit;\n    }\n\n    try {\n        // Check if product exists in database\n        $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n        $stmt->bindParam(':id', $product_id);\n        $stmt->execute();\n        $product_data = $stmt->fetch();\n\n        // Check if quantity is valid\n        if ($quantity < 1) {\n            echo \"Error: Please enter a valid quantity.\";\n            exit;\n        }\n\n        // Place order in database\n        $order_id = uniqid();\n        $stmt = $db->prepare('INSERT INTO orders (user_id, product_id, quantity)\n                                VALUES (:user_id, :product_id, :quantity)');\n        $stmt->bindParam(':user_id', $_SESSION['user_id']);\n        $stmt->bindParam(':product_id', $product_data['id']);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->execute();\n\n        // Update product stock\n        $current_stock = $product_data['stock'] - $quantity;\n        $stmt = $db->prepare('UPDATE products SET stock = :stock WHERE id = :id');\n        $stmt->bindParam(':stock', $current_stock);\n        $stmt->bindParam(':id', $product_data['id']);\n        $stmt->execute();\n\n        echo \"Order placed successfully! Your order ID is: $order_id\";\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        exit;\n    }\n}\n\n// Display products for user to select\n$stmt = $db->prepare('SELECT * FROM products');\n$stmt->execute();\n$products = $stmt->fetchAll();\n\n?>\n\n<!-- Display HTML form for user to select product and quantity -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <select name=\"product_id\" required>\n        <?php foreach ($products as $product) { ?>\n            <option value=\"<?php echo $product['id']; ?>\"><?php echo $product['name']; ?></option>\n        <?php } ?>\n    </select>\n\n    <input type=\"number\" min=\"1\" name=\"quantity\" placeholder=\"Quantity\">\n\n    <button type=\"submit\">Place Order</button>\n</form>\n```"]}
