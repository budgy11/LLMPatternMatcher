{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, the user wants to create a purchase functionality using PHP. Let me break down what that entails.\n\nFirst, I need to consider the basic structure. A purchase system typically involves displaying products, allowing users to add them to a cart, and then checkout. So, I'll outline these steps.\n\nI'll start by setting up the database. The products table will store product details like id, name, description, price, and quantity. Then, an orders table is needed to record each purchase with user info, product details, and timestamps.\n\nNext, connecting to the database in PHP is essential. I'll use mysqli for this, which is more secure and efficient than older methods. Including a config file helps keep the connection details organized.\n\nDisplaying products involves fetching data from the products table. I'll write a function that selects all products and displays them with an \"Add to Cart\" button. Each product should have its own form to handle quantity selection, so users can choose how many they want.\n\nHandling the cart is crucial. I'll use $_SESSION to store the cart items. When a user adds a product, it checks if the item already exists in the session. If it does, it increments the quantity; otherwise, it adds the new item. Updating the cart when quantities change or removing items are also necessary features.\n\nFor the checkout process, I'll retrieve the cart items from the session and calculate the total price. Users need to enter their shipping information, so a form with fields like name, email, address, city, zip code, and payment method is needed.\n\nProcessing the order involves inserting each item into the orders table. Using transactions ensures that all data is committed correctly or rolled back if there's an error. Each order entry includes user details, product info, purchase date, total price, and payment method.\n\nOrder confirmation is important for user feedback. After processing, displaying a thank you message with order details helps users know their purchase was successful. A link to view all orders can be added for convenience.\n\nFinally, showing past orders gives users transparency. Fetching from the orders table where the user email matches allows them to see their previous purchases.\n\nI should also mention including CSS and JavaScript for better UI/UX, error handling with try-catch blocks, form validation, and security measures like prepared statements to prevent SQL injection. These aspects ensure the application is robust and user-friendly.\n</think>\n\nHere's an example of a purchase functionality using PHP:\n\nThis example includes:\n\n1. Product display\n2. Add to cart functionality\n3. Cart management\n4. Checkout process\n5. Order confirmation\n\n```php\n<?php\n// Database configuration\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"purchase_system\";\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $dbname);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Display products\nfunction displayProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = mysqli_query($conn, $sql);\n    \n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>Description: \" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' max='\" . $row['quantity'] . \"' placeholder='Quantity'>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n}\n\n// Add to cart functionality\nif (isset($_POST['add_to_cart'])) {\n    if (!isset($_SESSION)) {\n        session_start();\n    }\n    \n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    // Check if product exists in database\n    $sql = \"SELECT * FROM products WHERE id = '$product_id'\";\n    $result = mysqli_query($conn, $sql);\n    $product = mysqli_fetch_assoc($result);\n    \n    if ($product) {\n        // Add to cart or update quantity\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n        \n        echo \"<script>alert('Product added to cart');</script>\";\n    }\n}\n\n// Cart management\nif (isset($_GET['action'])) {\n    switch ($_GET['action']) {\n        case 'update':\n            foreach ($_SESSION['cart'] as &$item) {\n                if ($item['id'] == $_POST['product_id']) {\n                    $item['quantity'] = $_POST['quantity'];\n                }\n            }\n            break;\n            \n        case 'remove':\n            unset($_SESSION['cart'][$_GET['product_id']]);\n            break;\n    }\n}\n\n// Checkout process\nif (isset($_POST['checkout'])) {\n    // Process payment and place order\n    $total_price = 0;\n    \n    foreach ($_SESSION['cart'] as $item) {\n        $total_price += ($item['price'] * $item['quantity']);\n    }\n    \n    // Insert order into database\n    $sql = \"INSERT INTO orders (product_id, product_name, quantity, price, total_price, user_name, email, address, city, zip_code, payment_method, purchase_date) \n            VALUES ('$item[id]', '$item[name]', '$item[quantity]', '$item[price]', '$total_price', '\".$_POST['name'].\"','\".$_POST['email'].\"','\".$_POST['address'].\"','\".$_POST['city'].\"','\".$_POST['zip_code'].\"','\".$_POST['payment_method'].\"', NOW())\";\n    \n    if (mysqli_query($conn, $sql)) {\n        echo \"<script>alert('Order placed successfully');</script>\";\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Error: \" . mysqli_error($conn);\n    }\n}\n\n// Order confirmation\nfunction showOrderConfirmation() {\n    global $conn;\n    $email = $_SESSION['user_email'];\n    \n    $sql = \"SELECT * FROM orders WHERE email = '$email'\";\n    $result = mysqli_query($conn, $sql);\n    \n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='order'>\";\n        echo \"<h3>Order #\".$row['id'].\"</h3>\";\n        echo \"<p>Date: \" . $row['purchase_date'] . \"</p>\";\n        echo \"<p>Total Price: $\" . number_format($row['total_price'], 2) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```\n\nThis is a basic example that includes:\n\n1. A product display page with add to cart functionality\n2. A shopping cart where users can update quantities or remove items\n3. A checkout form where users can enter their shipping and payment information\n4. Order processing and confirmation\n\nTo use this code, you'll need to:\n\n1. Create a database named `purchase_system`\n2. Create two tables:\n   - `products` (id, name, description, price, quantity)\n   - `orders` (id, product_id, product_name, quantity, price, total_price, user_name, email, address, city, zip_code, payment_method, purchase_date)\n3. Insert some sample products into the products table\n4. Include this code in your PHP files\n\nFeatures:\n\n- Add/remove products from cart\n- Update quantities\n- Order processing with database storage\n- Order confirmation\n- Basic error handling\n\nYou can enhance this further by adding:\n\n1. User authentication\n2. Payment integration (e.g., PayPal, Stripe)\n3. Product images\n4. Category management\n5. Search functionality\n6. More robust error handling\n7. Admin panel for managing products and orders\n8. Email notifications for order confirmation\n\nRemember to secure your code by:\n\n- Sanitizing user inputs\n- Using prepared statements\n- Implementing proper session management\n- Adding CSRF protection\n- Encrypting sensitive data\n- Regularly backing up your database", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"purchase_system\";\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $dbname);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Display products\nfunction displayProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = mysqli_query($conn, $sql);\n    \n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='product'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>Description: \" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' max='\" . $row['quantity'] . \"' placeholder='Quantity'>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n}\n\n// Add to cart functionality\nif (isset($_POST['add_to_cart'])) {\n    if (!isset($_SESSION)) {\n        session_start();\n    }\n    \n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    // Check if product exists in database\n    $sql = \"SELECT * FROM products WHERE id = '$product_id'\";\n    $result = mysqli_query($conn, $sql);\n    $product = mysqli_fetch_assoc($result);\n    \n    if ($product) {\n        // Add to cart or update quantity\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n        \n        echo \"<script>alert('Product added to cart');</script>\";\n    }\n}\n\n// Cart management\nif (isset($_GET['action'])) {\n    switch ($_GET['action']) {\n        case 'update':\n            foreach ($_SESSION['cart'] as &$item) {\n                if ($item['id'] == $_POST['product_id']) {\n                    $item['quantity'] = $_POST['quantity'];\n                }\n            }\n            break;\n            \n        case 'remove':\n            unset($_SESSION['cart'][$_GET['product_id']]);\n            break;\n    }\n}\n\n// Checkout process\nif (isset($_POST['checkout'])) {\n    // Process payment and place order\n    $total_price = 0;\n    \n    foreach ($_SESSION['cart'] as $item) {\n        $total_price += ($item['price'] * $item['quantity']);\n    }\n    \n    // Insert order into database\n    $sql = \"INSERT INTO orders (product_id, product_name, quantity, price, total_price, user_name, email, address, city, zip_code, payment_method, purchase_date) \n            VALUES ('$item[id]', '$item[name]', '$item[quantity]', '$item[price]', '$total_price', '\".$_POST['name'].\"','\".$_POST['email'].\"','\".$_POST['address'].\"','\".$_POST['city'].\"','\".$_POST['zip_code'].\"','\".$_POST['payment_method'].\"', NOW())\";\n    \n    if (mysqli_query($conn, $sql)) {\n        echo \"<script>alert('Order placed successfully');</script>\";\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Error: \" . mysqli_error($conn);\n    }\n}\n\n// Order confirmation\nfunction showOrderConfirmation() {\n    global $conn;\n    $email = $_SESSION['user_email'];\n    \n    $sql = \"SELECT * FROM orders WHERE email = '$email'\";\n    $result = mysqli_query($conn, $sql);\n    \n    while ($row = mysqli_fetch_assoc($result)) {\n        echo \"<div class='order'>\";\n        echo \"<h3>Order #\".$row['id'].\"</h3>\";\n        echo \"<p>Date: \" . $row['purchase_date'] . \"</p>\";\n        echo \"<p>Total Price: $\" . number_format($row['total_price'], 2) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```"]}
