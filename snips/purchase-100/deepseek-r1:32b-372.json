{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. There's the product catalog, where users can view items they want to buy. Then, there's the shopping cart where selected products are stored temporarily. After that, during checkout, the user provides their payment and shipping details. Finally, the order is processed and confirmed.\n\nI'll start by setting up the database. I need tables for products, orders, and order items. The products table should have an ID, name, description, price, and quantity. Orders will store each transaction with a unique ID, user's first and last names, email, address, total amount, payment method, status, and timestamps. Order items link each order to the products purchased, storing the product ID, quantity, and subtotal for each item.\n\nNext, I'll create PHP classes to handle these functionalities. A Product class will manage CRUD operations on products. An Order class will handle creating new orders, adding items, calculating totals, and updating order statuses. The Checkout class will process the checkout form data, validate inputs, and interact with the Order class to finalize the purchase.\n\nI should consider user sessions to store the cart contents. When a user adds an item to the cart, it's stored in the session array. During checkout, this cart is retrieved and used to create the order items.\n\nSecurity is important, so I'll use prepared statements in the database queries to prevent SQL injection. Also, form validation is necessary to ensure all required fields are filled out correctly.\n\nFor payment processing, since integrating a real gateway might be beyond the scope here, I'll simulate it by checking if test credentials are used. In a real application, this would involve API calls to a payment provider.\n\nI'll outline the functions needed in each class: fetching all products, adding products with images, updating stock upon purchase, creating new orders with user details, adding order items, calculating totals, validating checkout data, and handling the payment simulation.\n\nTesting is crucial. I'll need to ensure that adding products to the cart works, sessions are handled correctly, orders are saved properly, and payments are processed as expected. Also, error handling should be in place for invalid inputs or database errors.\n\nFinally, I'll structure the code with proper separation of concerns, using classes for better organization and maintainability. Including autoloaders can help manage class files without manual includes.\n\nI think that covers the main aspects. Now, I'll translate this plan into actual PHP code, making sure each part is implemented step by step.\n</think>\n\nHere's a basic implementation of purchase functionality in PHP:\n\n```php\n<?php\nsession_start();\n\n// Database configuration\n$host = 'localhost';\n$db_name = 'shopping_cart';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Get all products\n    public function getProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            die(\"Error fetching products: \" . $e->getMessage());\n        }\n    }\n\n    // Add product to cart\n    public function addToCart($id, $quantity) {\n        if (isset($_SESSION['cart'])) {\n            $_SESSION['cart'][$id] = $quantity;\n        } else {\n            $_SESSION['cart'] = array($id => $quantity);\n        }\n    }\n\n    // Get product details\n    public function getProductDetails($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            die(\"Error fetching product details: \" . $e->getMessage());\n        }\n    }\n\n    // Update stock after purchase\n    public function updateStock($id, $quantity) {\n        try {\n            $currentStock = $this->getProductDetails($id)['quantity'];\n            if ($currentStock >= $quantity) {\n                $stmt = $this->conn->prepare(\"UPDATE products SET quantity = ? WHERE id = ?\");\n                $stmt->execute([$currentStock - $quantity, $id]);\n                return true;\n            } else {\n                return false; // Not enough stock\n            }\n        } catch(PDOException $e) {\n            die(\"Error updating stock: \" . $e->getMessage());\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Create new order\n    public function createOrder($user_id, $total_amount, $payment_method) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, order_status, created_at) \n                                      VALUES (?, ?, ?, 'pending', NOW())\");\n            $stmt->execute([$user_id, $total_amount, $payment_method]);\n            return $this->conn->lastInsertId();\n        } catch(PDOException $e) {\n            die(\"Error creating order: \" . $e->getMessage());\n        }\n    }\n\n    // Add order items\n    public function addOrderItems($order_id, $product_id, $quantity, $subtotal) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, subtotal) \n                                      VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$order_id, $product_id, $quantity, $subtotal]);\n        } catch(PDOException $e) {\n            die(\"Error adding order items: \" . $e->getMessage());\n        }\n    }\n\n    // Update order status\n    public function updateOrderStatus($order_id, $status) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE orders SET order_status = ? WHERE id = ?\");\n            $stmt->execute([$status, $order_id]);\n        } catch(PDOException $e) {\n            die(\"Error updating order status: \" . $e->getMessage());\n        }\n    }\n\n    // Calculate total amount\n    public function calculateTotal($cart_items) {\n        $total = 0;\n        foreach ($cart_items as $id => $quantity) {\n            $product = new Product($this->conn);\n            $details = $product->getProductDetails($id);\n            if ($details) {\n                $total += $details['price'] * $quantity;\n            }\n        }\n        return $total;\n    }\n}\n\n// Checkout class\nclass Checkout {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Process checkout\n    public function processCheckout($order_data, $cart_items) {\n        try {\n            if (!isset($_SESSION['user_id'])) {\n                throw new Exception(\"User not logged in\");\n            }\n\n            $product = new Product($this->conn);\n            $order = new Order($this->conn);\n\n            // Validate cart items\n            foreach ($cart_items as $id => $quantity) {\n                if (!$product->updateStock($id, $quantity)) {\n                    throw new Exception(\"Not enough stock for product \" . $id);\n                }\n            }\n\n            // Create order\n            $order_id = $order->createOrder($_SESSION['user_id'], $order_data['total_amount'], $order_data['payment_method']);\n\n            // Add order items\n            foreach ($cart_items as $id => $quantity) {\n                $product_price = $product->getProductDetails($id)['price'];\n                $subtotal = $product_price * $quantity;\n                $order->addOrderItems($order_id, $id, $quantity, $subtotal);\n            }\n\n            // Update order status\n            if ($this->processPayment($order_data)) {\n                $order->updateOrderStatus($order_id, 'completed');\n                unset($_SESSION['cart']);\n                return true;\n            } else {\n                $order->updateOrderStatus($order_id, 'failed');\n                throw new Exception(\"Payment failed\");\n            }\n\n        } catch(PDOException $e) {\n            die(\"Checkout error: \" . $e->getMessage());\n        }\n    }\n\n    // Process payment\n    private function processPayment($payment_data) {\n        // Simulate payment processing\n        if ($payment_data['card_number'] == '4242424242424242' && \n            $payment_data['cvv'] == '123') {\n            return true;\n        }\n        return false;\n    }\n\n    // Validate checkout form\n    public function validateCheckoutData($data) {\n        $errors = array();\n\n        if (empty($data['first_name'])) {\n            $errors[] = \"First name is required\";\n        }\n\n        if (empty($data['last_name'])) {\n            $errors[] = \"Last name is required\";\n        }\n\n        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n            $errors[] = \"Email is invalid\";\n        }\n\n        if (strlen($data['address']) < 5) {\n            $errors[] = \"Address must be at least 5 characters\";\n        }\n\n        return $errors;\n    }\n}\n\n// Example usage:\n\n$product = new Product($conn);\n$products = $product->getProducts();\nprint_r($products);\n\n// Add product to cart\n$product_id = 1;\n$quantity = 2;\n$product->addToCart($product_id, $quantity);\n\n// Checkout process\n$checkout_data = array(\n    'first_name' => 'John',\n    'last_name' => 'Doe',\n    'email' => 'john@example.com',\n    'address' => '123 Main St',\n    'total_amount' => 100.00,\n    'payment_method' => 'credit_card',\n    'card_number' => '4242424242424242',\n    'cvv' => '123'\n);\n\n$checkout = new Checkout($conn);\n$errors = $checkout->validateCheckoutData($checkout_data);\n\nif (empty($errors)) {\n    $cart_items = $_SESSION['cart'];\n    $success = $checkout->processCheckout($checkout_data, $cart_items);\n\n    if ($success) {\n        echo \"Order completed successfully!\";\n    } else {\n        echo \"Payment failed. Please try again.\";\n    }\n} else {\n    foreach ($errors as $error) {\n        echo $error . \"\\n\";\n    }\n}\n?>\n```\n\nThis code implements a basic purchase functionality with the following features:\n\n1. Product management\n2. Shopping cart functionality\n3. Order processing\n4. Payment simulation\n5. Checkout validation\n\nKey components:\n\n- `Product` class handles product CRUD operations and stock updates\n- `Order` class manages order creation, status updates, and total calculations\n- `Checkout` class processes the checkout flow including payment validation and error handling\n\nTo use this code:\n\n1. Create a database named 'shopping_cart'\n2. Set up the required tables (products, orders, order_items)\n3. Update the database connection details\n4. Use the classes to implement your purchase functionality\n\nNote: This is a basic implementation and should be extended with additional security measures, error handling, and payment integration for production use.\n\nRemember to:\n- Add proper error handling\n- Implement CSRF protection\n- Secure sensitive data\n- Add input validation\n- Use real payment gateways in production\n- Implement user authentication\n- Add more fields as needed for your specific requirements\n\nYou can extend this code by adding features like:\n- User authentication\n- Product categories\n- Discounts and promotions\n- Order tracking\n- Customer reviews\n- Wishlist functionality\n- More sophisticated payment processing", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database configuration\n$host = 'localhost';\n$db_name = 'shopping_cart';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Get all products\n    public function getProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            die(\"Error fetching products: \" . $e->getMessage());\n        }\n    }\n\n    // Add product to cart\n    public function addToCart($id, $quantity) {\n        if (isset($_SESSION['cart'])) {\n            $_SESSION['cart'][$id] = $quantity;\n        } else {\n            $_SESSION['cart'] = array($id => $quantity);\n        }\n    }\n\n    // Get product details\n    public function getProductDetails($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch(PDOException $e) {\n            die(\"Error fetching product details: \" . $e->getMessage());\n        }\n    }\n\n    // Update stock after purchase\n    public function updateStock($id, $quantity) {\n        try {\n            $currentStock = $this->getProductDetails($id)['quantity'];\n            if ($currentStock >= $quantity) {\n                $stmt = $this->conn->prepare(\"UPDATE products SET quantity = ? WHERE id = ?\");\n                $stmt->execute([$currentStock - $quantity, $id]);\n                return true;\n            } else {\n                return false; // Not enough stock\n            }\n        } catch(PDOException $e) {\n            die(\"Error updating stock: \" . $e->getMessage());\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Create new order\n    public function createOrder($user_id, $total_amount, $payment_method) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, order_status, created_at) \n                                      VALUES (?, ?, ?, 'pending', NOW())\");\n            $stmt->execute([$user_id, $total_amount, $payment_method]);\n            return $this->conn->lastInsertId();\n        } catch(PDOException $e) {\n            die(\"Error creating order: \" . $e->getMessage());\n        }\n    }\n\n    // Add order items\n    public function addOrderItems($order_id, $product_id, $quantity, $subtotal) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, subtotal) \n                                      VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$order_id, $product_id, $quantity, $subtotal]);\n        } catch(PDOException $e) {\n            die(\"Error adding order items: \" . $e->getMessage());\n        }\n    }\n\n    // Update order status\n    public function updateOrderStatus($order_id, $status) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE orders SET order_status = ? WHERE id = ?\");\n            $stmt->execute([$status, $order_id]);\n        } catch(PDOException $e) {\n            die(\"Error updating order status: \" . $e->getMessage());\n        }\n    }\n\n    // Calculate total amount\n    public function calculateTotal($cart_items) {\n        $total = 0;\n        foreach ($cart_items as $id => $quantity) {\n            $product = new Product($this->conn);\n            $details = $product->getProductDetails($id);\n            if ($details) {\n                $total += $details['price'] * $quantity;\n            }\n        }\n        return $total;\n    }\n}\n\n// Checkout class\nclass Checkout {\n    private $conn;\n\n    public function __construct($connection) {\n        $this->conn = $connection;\n    }\n\n    // Process checkout\n    public function processCheckout($order_data, $cart_items) {\n        try {\n            if (!isset($_SESSION['user_id'])) {\n                throw new Exception(\"User not logged in\");\n            }\n\n            $product = new Product($this->conn);\n            $order = new Order($this->conn);\n\n            // Validate cart items\n            foreach ($cart_items as $id => $quantity) {\n                if (!$product->updateStock($id, $quantity)) {\n                    throw new Exception(\"Not enough stock for product \" . $id);\n                }\n            }\n\n            // Create order\n            $order_id = $order->createOrder($_SESSION['user_id'], $order_data['total_amount'], $order_data['payment_method']);\n\n            // Add order items\n            foreach ($cart_items as $id => $quantity) {\n                $product_price = $product->getProductDetails($id)['price'];\n                $subtotal = $product_price * $quantity;\n                $order->addOrderItems($order_id, $id, $quantity, $subtotal);\n            }\n\n            // Update order status\n            if ($this->processPayment($order_data)) {\n                $order->updateOrderStatus($order_id, 'completed');\n                unset($_SESSION['cart']);\n                return true;\n            } else {\n                $order->updateOrderStatus($order_id, 'failed');\n                throw new Exception(\"Payment failed\");\n            }\n\n        } catch(PDOException $e) {\n            die(\"Checkout error: \" . $e->getMessage());\n        }\n    }\n\n    // Process payment\n    private function processPayment($payment_data) {\n        // Simulate payment processing\n        if ($payment_data['card_number'] == '4242424242424242' && \n            $payment_data['cvv'] == '123') {\n            return true;\n        }\n        return false;\n    }\n\n    // Validate checkout form\n    public function validateCheckoutData($data) {\n        $errors = array();\n\n        if (empty($data['first_name'])) {\n            $errors[] = \"First name is required\";\n        }\n\n        if (empty($data['last_name'])) {\n            $errors[] = \"Last name is required\";\n        }\n\n        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n            $errors[] = \"Email is invalid\";\n        }\n\n        if (strlen($data['address']) < 5) {\n            $errors[] = \"Address must be at least 5 characters\";\n        }\n\n        return $errors;\n    }\n}\n\n// Example usage:\n\n$product = new Product($conn);\n$products = $product->getProducts();\nprint_r($products);\n\n// Add product to cart\n$product_id = 1;\n$quantity = 2;\n$product->addToCart($product_id, $quantity);\n\n// Checkout process\n$checkout_data = array(\n    'first_name' => 'John',\n    'last_name' => 'Doe',\n    'email' => 'john@example.com',\n    'address' => '123 Main St',\n    'total_amount' => 100.00,\n    'payment_method' => 'credit_card',\n    'card_number' => '4242424242424242',\n    'cvv' => '123'\n);\n\n$checkout = new Checkout($conn);\n$errors = $checkout->validateCheckoutData($checkout_data);\n\nif (empty($errors)) {\n    $cart_items = $_SESSION['cart'];\n    $success = $checkout->processCheckout($checkout_data, $cart_items);\n\n    if ($success) {\n        echo \"Order completed successfully!\";\n    } else {\n        echo \"Payment failed. Please try again.\";\n    }\n} else {\n    foreach ($errors as $error) {\n        echo $error . \"\\n\";\n    }\n}\n?>\n```"]}
