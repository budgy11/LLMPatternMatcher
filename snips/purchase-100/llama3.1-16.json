{"prompt": "Create a purchase cart functionality using php", "llm_output": "**Purchase Cart Functionality Using PHP**\n\nBelow is an example implementation of a basic purchase cart functionality in PHP. This includes features like adding products to the cart, removing products from the cart, updating product quantities, and calculating the total cost.\n\n### Database Setup\n\nFirstly, let's assume you have a MySQL database with two tables: `products` and `carts`. The `products` table stores information about available items for sale, while the `carts` table tracks user purchases.\n\n```sql\n-- products table\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\n-- carts table\nCREATE TABLE carts (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    product_id INT,\n    quantity TINYINT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### PHP Implementation\n\n#### `cart.php` (Cart Management)\n\n```php\n// Configuration\nrequire_once 'config.php';\n\n// Database Connection\n$db = new mysqli(HOST, USERNAME, PASSWORD, DATABASE);\n\n// Check connection\nif ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n}\n\nclass Cart {\n    private $db;\n\n    public function __construct() {\n        $this->db = $GLOBALS['db'];\n    }\n\n    // Get all products from database\n    public function getProducts() {\n        $query = \"SELECT * FROM products\";\n        $result = $this->db->query($query);\n        return $result;\n    }\n\n    // Add product to cart\n    public function addProduct($user_id, $product_id) {\n        $quantity = 1; // Default quantity\n\n        // Check if product is already in cart\n        $existingProductQuery = \"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n        $existingResult = $this->db->query($existingProductQuery);\n\n        if ($existingResult->num_rows > 0) {\n            // Update existing product quantity\n            $updateQuantityQuery = \"UPDATE carts SET quantity = quantity + '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n            $this->db->query($updateQuantityQuery);\n        } else {\n            // Insert new product into cart\n            $insertProductQuery = \"INSERT INTO carts (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')\";\n            $this->db->query($insertProductQuery);\n        }\n    }\n\n    // Remove product from cart\n    public function removeProduct($user_id, $product_id) {\n        // Check if product exists in cart\n        $existingProductQuery = \"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n        $existingResult = $this->db->query($existingProductQuery);\n\n        if ($existingResult->num_rows > 0) {\n            // Delete product from cart\n            $deleteProductQuery = \"DELETE FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n            $this->db->query($deleteProductQuery);\n        }\n    }\n\n    // Update product quantity in cart\n    public function updateQuantity($user_id, $product_id, $new_quantity) {\n        // Check if product exists in cart and is being updated with a valid new quantity\n        if ($existingResult = $this->db->query(\"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\")) {\n            if ($existingResult->num_rows > 0 && (int)$new_quantity >= 1) {\n                // Update product quantity in cart\n                $updateQuantityQuery = \"UPDATE carts SET quantity = '$new_quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n                $this->db->query($updateQuantityQuery);\n            }\n        }\n    }\n\n    // Calculate total cost of cart\n    public function calculateTotalCost() {\n        $totalCost = 0;\n\n        // Query cart for products and their quantities\n        if ($cartProducts = $this->db->query(\"SELECT product_id, quantity FROM carts WHERE user_id = '$user_id'\")) {\n            while ($row = $cartProducts->fetch_assoc()) {\n                // Fetch corresponding product price from database\n                $productPriceQuery = \"SELECT price FROM products WHERE id = '\" . (int)$row['product_id'] . \"'\";\n                if ($priceResult = $this->db->query($productPriceQuery)) {\n                    if ($priceRow = $priceResult->fetch_assoc()) {\n                        // Add product cost to total cost\n                        $totalCost += (float)$priceRow['price'] * $row['quantity'];\n                    }\n                }\n            }\n\n            return $totalCost;\n        } else {\n            return null; // No products in cart\n        }\n    }\n}\n```\n\n#### `index.php` (Example Usage)\n\n```php\nrequire_once 'cart.php';\n\n// Initialize Cart class instance\n$cart = new Cart();\n\n// User ID\n$user_id = 1;\n\n// Product IDs to add/remove/update\n$product_ids = array(1, 2, 3);\n\n// Quantities for products 2 and 3 (optional)\n$new_quantities = array(null, 2, 3);\n\n// Add/Remove products from cart\nforeach ($product_ids as $i => $id) {\n    if ($new_quantities[$i]) {\n        // Update quantity\n        $cart->updateQuantity($user_id, $id, $new_quantities[$i]);\n    } else {\n        // Add or remove product based on existence in cart\n        if (isset($existingProducts[$id])) {\n            // Remove product from cart\n            $cart->removeProduct($user_id, $id);\n        } else {\n            // Add product to cart\n            $cart->addProduct($user_id, $id);\n        }\n    }\n}\n\n// Calculate total cost of cart\n$totalCost = $cart->calculateTotalCost();\n\necho \"Total Cost: $\" . number_format((float)$totalCost, 2);\n\n// Display products in cart (optional)\nif ($cartProducts = $cart->db->query(\"SELECT * FROM carts WHERE user_id = '$user_id'\")) {\n    echo \"<ul>\";\n    while ($row = $cartProducts->fetch_assoc()) {\n        echo \"<li>Product ID: \" . $row['product_id'] . \", Quantity: \" . $row['quantity'] . \"</li>\";\n    }\n    echo \"</ul>\";\n}\n```\n\nThis code snippet demonstrates a basic cart system in PHP. It includes functions for adding, removing, and updating products in the cart, as well as calculating the total cost of the cart contents. Remember to adapt this code to your specific database schema and application requirements.\n\nNote: This example is simplified and does not cover all possible edge cases. Consider implementing additional security measures (e.g., user authentication and validation) before deploying a production-ready cart system.", "code_blocks": [null, "```php\n// Configuration\nrequire_once 'config.php';\n\n// Database Connection\n$db = new mysqli(HOST, USERNAME, PASSWORD, DATABASE);\n\n// Check connection\nif ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n}\n\nclass Cart {\n    private $db;\n\n    public function __construct() {\n        $this->db = $GLOBALS['db'];\n    }\n\n    // Get all products from database\n    public function getProducts() {\n        $query = \"SELECT * FROM products\";\n        $result = $this->db->query($query);\n        return $result;\n    }\n\n    // Add product to cart\n    public function addProduct($user_id, $product_id) {\n        $quantity = 1; // Default quantity\n\n        // Check if product is already in cart\n        $existingProductQuery = \"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n        $existingResult = $this->db->query($existingProductQuery);\n\n        if ($existingResult->num_rows > 0) {\n            // Update existing product quantity\n            $updateQuantityQuery = \"UPDATE carts SET quantity = quantity + '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n            $this->db->query($updateQuantityQuery);\n        } else {\n            // Insert new product into cart\n            $insertProductQuery = \"INSERT INTO carts (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')\";\n            $this->db->query($insertProductQuery);\n        }\n    }\n\n    // Remove product from cart\n    public function removeProduct($user_id, $product_id) {\n        // Check if product exists in cart\n        $existingProductQuery = \"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n        $existingResult = $this->db->query($existingProductQuery);\n\n        if ($existingResult->num_rows > 0) {\n            // Delete product from cart\n            $deleteProductQuery = \"DELETE FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n            $this->db->query($deleteProductQuery);\n        }\n    }\n\n    // Update product quantity in cart\n    public function updateQuantity($user_id, $product_id, $new_quantity) {\n        // Check if product exists in cart and is being updated with a valid new quantity\n        if ($existingResult = $this->db->query(\"SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'\")) {\n            if ($existingResult->num_rows > 0 && (int)$new_quantity >= 1) {\n                // Update product quantity in cart\n                $updateQuantityQuery = \"UPDATE carts SET quantity = '$new_quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'\";\n                $this->db->query($updateQuantityQuery);\n            }\n        }\n    }\n\n    // Calculate total cost of cart\n    public function calculateTotalCost() {\n        $totalCost = 0;\n\n        // Query cart for products and their quantities\n        if ($cartProducts = $this->db->query(\"SELECT product_id, quantity FROM carts WHERE user_id = '$user_id'\")) {\n            while ($row = $cartProducts->fetch_assoc()) {\n                // Fetch corresponding product price from database\n                $productPriceQuery = \"SELECT price FROM products WHERE id = '\" . (int)$row['product_id'] . \"'\";\n                if ($priceResult = $this->db->query($productPriceQuery)) {\n                    if ($priceRow = $priceResult->fetch_assoc()) {\n                        // Add product cost to total cost\n                        $totalCost += (float)$priceRow['price'] * $row['quantity'];\n                    }\n                }\n            }\n\n            return $totalCost;\n        } else {\n            return null; // No products in cart\n        }\n    }\n}\n```", "```php\nrequire_once 'cart.php';\n\n// Initialize Cart class instance\n$cart = new Cart();\n\n// User ID\n$user_id = 1;\n\n// Product IDs to add/remove/update\n$product_ids = array(1, 2, 3);\n\n// Quantities for products 2 and 3 (optional)\n$new_quantities = array(null, 2, 3);\n\n// Add/Remove products from cart\nforeach ($product_ids as $i => $id) {\n    if ($new_quantities[$i]) {\n        // Update quantity\n        $cart->updateQuantity($user_id, $id, $new_quantities[$i]);\n    } else {\n        // Add or remove product based on existence in cart\n        if (isset($existingProducts[$id])) {\n            // Remove product from cart\n            $cart->removeProduct($user_id, $id);\n        } else {\n            // Add product to cart\n            $cart->addProduct($user_id, $id);\n        }\n    }\n}\n\n// Calculate total cost of cart\n$totalCost = $cart->calculateTotalCost();\n\necho \"Total Cost: $\" . number_format((float)$totalCost, 2);\n\n// Display products in cart (optional)\nif ($cartProducts = $cart->db->query(\"SELECT * FROM carts WHERE user_id = '$user_id'\")) {\n    echo \"<ul>\";\n    while ($row = $cartProducts->fetch_assoc()) {\n        echo \"<li>Product ID: \" . $row['product_id'] . \", Quantity: \" . $row['quantity'] . \"</li>\";\n    }\n    echo \"</ul>\";\n}\n```"]}
