{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP, including input validation and error handling:\n\n**User Registration Function**\n```php\nfunction registerUser($username, $email, $password) {\n  // Input Validation\n  if (empty($username)) {\n    throw new Exception('Username is required');\n  }\n  if (empty($email)) {\n    throw new Exception('Email is required');\n  }\n  if (empty($password)) {\n    throw new Exception('Password is required');\n  }\n\n  // Validate email format\n  $emailRegex = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n  if (!preg_match($emailRegex, $email)) {\n    throw new Exception('Invalid email address');\n  }\n\n  // Hash password\n  $passwordHash = hash('sha256', $password);\n\n  // Connect to database (using PDO for example)\n  try {\n    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $passwordHash);\n    $stmt->execute();\n  } catch (PDOException $e) {\n    throw new Exception('Error registering user: ' . $e->getMessage());\n  }\n\n  // Return registration success message\n  return 'User registered successfully';\n}\n```\n**Example Usage**\n```php\ntry {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $result = registerUser($username, $email, $password);\n  echo $result;\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```\nNote:\n\n* This example uses a simple SHA-256 hash for password storage. In production environments, consider using more secure methods like bcrypt or Argon2.\n* The `PDO` connection is just an example; replace it with your actual database credentials and schema.\n* Always validate user input to prevent SQL injection attacks and other security issues.\n\nAlso note that this code does not handle session management or authentication. After a successful registration, you will need to implement a login system to allow users to access their account.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password) {\n  // Input Validation\n  if (empty($username)) {\n    throw new Exception('Username is required');\n  }\n  if (empty($email)) {\n    throw new Exception('Email is required');\n  }\n  if (empty($password)) {\n    throw new Exception('Password is required');\n  }\n\n  // Validate email format\n  $emailRegex = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n  if (!preg_match($emailRegex, $email)) {\n    throw new Exception('Invalid email address');\n  }\n\n  // Hash password\n  $passwordHash = hash('sha256', $password);\n\n  // Connect to database (using PDO for example)\n  try {\n    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $passwordHash);\n    $stmt->execute();\n  } catch (PDOException $e) {\n    throw new Exception('Error registering user: ' . $e->getMessage());\n  }\n\n  // Return registration success message\n  return 'User registered successfully';\n}\n```", "```php\ntry {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $result = registerUser($username, $email, $password);\n  echo $result;\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```"]}
