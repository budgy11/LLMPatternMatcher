{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes validation for username, email, and password.\n\n### User Registration Function\n```php\n/**\n * Register a new user.\n *\n * @param array $data User data to register (username, email, password)\n *\n * @return bool True if registration was successful, false otherwise\n */\nfunction registerUser($data) {\n    // Validation: Ensure required fields are set\n    if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n        throw new Exception('Missing required data');\n    }\n\n    // Validate username (minimum 3 characters, maximum 20)\n    $minUsernameLength = 3;\n    $maxUsernameLength = 20;\n    if (strlen($data['username']) < $minUsernameLength || strlen($data['username']) > $maxUsernameLength) {\n        throw new Exception('Username must be between ' . $minUsernameLength . ' and ' . $maxUsernameLength . ' characters long');\n    }\n\n    // Validate email (email address should match the format of a valid email)\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Validate password (minimum 8 characters, maximum 30)\n    $minPasswordLength = 8;\n    $maxPasswordLength = 30;\n    if (strlen($data['password']) < $minPasswordLength || strlen($data['password']) > $maxPasswordLength) {\n        throw new Exception('Password must be between ' . $minPasswordLength . ' and ' . $maxPasswordLength . ' characters long');\n    }\n\n    // Hash the password for secure storage\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Insert user data into database (example using PDO)\n    try {\n        $db = new PDO('sqlite:users.db');\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->execute([\n            'username' => $data['username'],\n            'email' => $data['email'],\n            'password' => $hashedPassword,\n        ]);\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n\n    return true;\n}\n```\n### Example Usage\n```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword123',\n];\n\ntry {\n    if (registerUser($data)) {\n        echo 'Registration successful!';\n    } else {\n        throw new Exception('Registration failed');\n    }\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```\nThis function includes input validation for the username, email, and password. The password is hashed using PHP's built-in `password_hash` function before being stored in the database.\n\nPlease note that this example uses a SQLite database, but you can modify it to use any other database system by changing the PDO connection details.\n\nAlso, make sure to adjust the validation rules according to your specific requirements and security policies.", "code_blocks": ["```php\n/**\n * Register a new user.\n *\n * @param array $data User data to register (username, email, password)\n *\n * @return bool True if registration was successful, false otherwise\n */\nfunction registerUser($data) {\n    // Validation: Ensure required fields are set\n    if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n        throw new Exception('Missing required data');\n    }\n\n    // Validate username (minimum 3 characters, maximum 20)\n    $minUsernameLength = 3;\n    $maxUsernameLength = 20;\n    if (strlen($data['username']) < $minUsernameLength || strlen($data['username']) > $maxUsernameLength) {\n        throw new Exception('Username must be between ' . $minUsernameLength . ' and ' . $maxUsernameLength . ' characters long');\n    }\n\n    // Validate email (email address should match the format of a valid email)\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Validate password (minimum 8 characters, maximum 30)\n    $minPasswordLength = 8;\n    $maxPasswordLength = 30;\n    if (strlen($data['password']) < $minPasswordLength || strlen($data['password']) > $maxPasswordLength) {\n        throw new Exception('Password must be between ' . $minPasswordLength . ' and ' . $maxPasswordLength . ' characters long');\n    }\n\n    // Hash the password for secure storage\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Insert user data into database (example using PDO)\n    try {\n        $db = new PDO('sqlite:users.db');\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->execute([\n            'username' => $data['username'],\n            'email' => $data['email'],\n            'password' => $hashedPassword,\n        ]);\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n\n    return true;\n}\n```", "```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword123',\n];\n\ntry {\n    if (registerUser($data)) {\n        echo 'Registration successful!';\n    } else {\n        throw new Exception('Registration failed');\n    }\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```"]}
