{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a user registration function written in PHP, using prepared statements for database interactions to ensure security.\n\n```php\nfunction register_user($db, $username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields must be filled out');\n    }\n\n    // Check for existing users with the same username or email\n    $stmt = $db->prepare('SELECT * FROM users WHERE username = ? OR email = ?');\n    $stmt->execute(array($username, $email));\n    if ($stmt->fetch()) {\n        return array('error' => 'Username or email already exists');\n    }\n\n    // Hash password using a secure algorithm\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into database\n    try {\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (?, ?, ?)');\n        $stmt->execute(array($username, $email, $hashed_password));\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```\n\n**Example Use Case**\n---------------------\n\n```php\n$db = new PDO('sqlite:users.db');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$results = register_user($db, $username, $email, $password);\n\necho json_encode($results);\n```\n\n**Security Notes**\n\n*   This function uses prepared statements to prevent SQL injection attacks.\n*   Passwords are hashed using the `password_hash` function, which is a secure way to store passwords in your database.\n*   The example use case assumes that you're using `$_POST` data for demonstration purposes. In a real-world application, you should validate and sanitize user input before passing it to this function.\n\n**Assumptions**\n\n*   You have already created the `users` table with the required columns (`username`, `email`, `password`) in your database.\n*   You're using SQLite as an example; adjust the PDO connection string accordingly for other database systems (e.g., MySQL).", "code_blocks": ["```php\nfunction register_user($db, $username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields must be filled out');\n    }\n\n    // Check for existing users with the same username or email\n    $stmt = $db->prepare('SELECT * FROM users WHERE username = ? OR email = ?');\n    $stmt->execute(array($username, $email));\n    if ($stmt->fetch()) {\n        return array('error' => 'Username or email already exists');\n    }\n\n    // Hash password using a secure algorithm\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into database\n    try {\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (?, ?, ?)');\n        $stmt->execute(array($username, $email, $hashed_password));\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```", "```php\n$db = new PDO('sqlite:users.db');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$results = register_user($db, $username, $email, $password);\n\necho json_encode($results);\n```"]}
