{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP that checks for the existence of the user, validates their input data and hashes their password before inserting it into a database:\n```php\n<?php\n\n// Config file to store database credentials and other settings\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n  // Check if username already exists in database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->execute([':username' => $username]);\n  if ($stmt->fetch()) {\n    return 'Username already taken';\n  }\n\n  // Validate email address\n  $emailValidated = validateEmail($email);\n  if (!$emailValidated) {\n    return 'Invalid email address';\n  }\n\n  // Hash password using bcrypt\n  $hashedPassword = bcryptHash($password);\n\n  // Insert new user into database\n  try {\n    $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashedPassword]);\n    return 'Registration successful!';\n  } catch (PDOException $e) {\n    return 'Error registering user';\n  }\n}\n\n// Helper function to validate email address\nfunction validateEmail($email) {\n  if (!preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email)) {\n    return false;\n  }\n  return true;\n}\n\n// Helper function to hash password using bcrypt\nfunction bcryptHash($password) {\n  return password_hash($password, PASSWORD_BCRYPT);\n}\n```\nThis code assumes you have a `config.php` file with the database credentials and settings:\n```php\n$pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n```\nTo use this function, simply call it with the desired username, email address, and password as arguments:\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\necho $result; // Registration successful! or error message\n```\nRemember to replace the `config.php` file with your own database credentials and settings.\n\n**Security Note:** This code uses bcrypt to hash passwords securely. You should never store plain text passwords in your database.", "code_blocks": ["```php\n<?php\n\n// Config file to store database credentials and other settings\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n  // Check if username already exists in database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->execute([':username' => $username]);\n  if ($stmt->fetch()) {\n    return 'Username already taken';\n  }\n\n  // Validate email address\n  $emailValidated = validateEmail($email);\n  if (!$emailValidated) {\n    return 'Invalid email address';\n  }\n\n  // Hash password using bcrypt\n  $hashedPassword = bcryptHash($password);\n\n  // Insert new user into database\n  try {\n    $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashedPassword]);\n    return 'Registration successful!';\n  } catch (PDOException $e) {\n    return 'Error registering user';\n  }\n}\n\n// Helper function to validate email address\nfunction validateEmail($email) {\n  if (!preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email)) {\n    return false;\n  }\n  return true;\n}\n\n// Helper function to hash password using bcrypt\nfunction bcryptHash($password) {\n  return password_hash($password, PASSWORD_BCRYPT);\n}\n```", "```php\n$pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\necho $result; // Registration successful! or error message\n```"]}
