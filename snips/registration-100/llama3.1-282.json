{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP, including input validation and password hashing:\n\n**`register.php`:**\n```php\n<?php\n\n// Database connection settings (replace with your own)\n$database_host = 'localhost';\n$database_name = 'your_database';\n$database_username = 'your_username';\n$database_password = 'your_password';\n\n// Function to register new user\nfunction registerUser($name, $email, $password) {\n  // Input validation\n  if (!isset($name) || !isset($email) || !isset($password)) {\n    return array('error' => 'Missing required fields');\n  }\n\n  if (empty($name) || empty($email) || empty($password)) {\n    return array('error' => 'All fields are required');\n  }\n\n  // Check for valid email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Hash password using SHA-256\n  $hashed_password = hash('sha256', $password);\n\n  try {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$database_host;dbname=$database_name\", $database_username, $database_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Insert new user into database\n    $stmt = $conn->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    $stmt->execute();\n\n    // Return success message\n    return array('success' => 'User registered successfully');\n  } catch (PDOException $e) {\n    // Handle database errors\n    echo \"Error: \" . $e->getMessage();\n    return array('error' => 'Failed to register user');\n  }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($name, $email, $password);\n\nif (isset($result['success'])) {\n  echo \"User registered successfully!\";\n} elseif (isset($result['error'])) {\n  echo \"Error: \" . $result['error'];\n}\n\n?>\n```\nThis code uses PDO (PHP Data Objects) for database interactions and stores passwords using SHA-256 hashing.\n\n**To use this function, you'll need to:**\n\n1. Replace placeholders in the database connection settings (`$database_host`, `$database_name`, etc.) with your own credentials.\n2. Create a `users` table in your MySQL database with columns for `name`, `email`, and `password`.\n3. Call the `registerUser()` function from another PHP file, passing in user input (e.g., using `$_POST`) as arguments.\n\nRemember to handle form submission securely by using prepared statements or parameterized queries to prevent SQL injection attacks!", "code_blocks": ["```php\n<?php\n\n// Database connection settings (replace with your own)\n$database_host = 'localhost';\n$database_name = 'your_database';\n$database_username = 'your_username';\n$database_password = 'your_password';\n\n// Function to register new user\nfunction registerUser($name, $email, $password) {\n  // Input validation\n  if (!isset($name) || !isset($email) || !isset($password)) {\n    return array('error' => 'Missing required fields');\n  }\n\n  if (empty($name) || empty($email) || empty($password)) {\n    return array('error' => 'All fields are required');\n  }\n\n  // Check for valid email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Hash password using SHA-256\n  $hashed_password = hash('sha256', $password);\n\n  try {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$database_host;dbname=$database_name\", $database_username, $database_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Insert new user into database\n    $stmt = $conn->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    $stmt->execute();\n\n    // Return success message\n    return array('success' => 'User registered successfully');\n  } catch (PDOException $e) {\n    // Handle database errors\n    echo \"Error: \" . $e->getMessage();\n    return array('error' => 'Failed to register user');\n  }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($name, $email, $password);\n\nif (isset($result['success'])) {\n  echo \"User registered successfully!\";\n} elseif (isset($result['error'])) {\n  echo \"Error: \" . $result['error'];\n}\n\n?>\n```"]}
