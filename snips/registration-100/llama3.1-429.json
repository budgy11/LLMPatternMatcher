{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a basic user registration function in PHP. This function will create a new user account with the provided details, including username, email, password, and other additional fields.\n\n### Code\n```php\nfunction register_user($username, $email, $password, $confirm_password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  if ($password !== $confirm_password) {\n    throw new Exception(\"Passwords do not match.\");\n  }\n\n  try {\n    // Connect to database\n    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Check if username already exists\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->execute([':username' => $username]);\n    if ($stmt->fetch()) {\n      throw new Exception(\"Username already taken.\");\n    }\n\n    // Hash password before storing in database\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashed_password]);\n\n    // Return a success message and the newly created user's ID\n    return [\"message\" => \"User created successfully.\", \"userId\" => $db->lastInsertId()];\n  } catch (PDOException $e) {\n    // Handle any database errors\n    throw new Exception(\"Failed to create user: \" . $e->getMessage());\n  }\n}\n```\n\n### Example Usage\n```php\ntry {\n  $userData = register_user(\"newuser\", \"newuser@example.com\", \"password123\", \"password123\");\n  print_r($userData);\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```\n\n### Notes\n\n*   This code assumes a MySQL database with the necessary tables and columns. You'll need to modify it according to your specific database schema.\n*   The `register_user` function takes four arguments: `$username`, `$email`, `$password`, and `$confirm_password`. It returns an array containing a success message and the newly created user's ID, or throws an exception if validation fails or database operations fail.\n*   Passwords are hashed using PHP's built-in `password_hash` function before storing them in the database. This ensures that passwords are securely stored even if someone gains access to your database.\n\nRemember to replace placeholders (e.g., `localhost`, `username`, and `password`) with your actual database connection details when implementing this code.", "code_blocks": ["```php\nfunction register_user($username, $email, $password, $confirm_password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  if ($password !== $confirm_password) {\n    throw new Exception(\"Passwords do not match.\");\n  }\n\n  try {\n    // Connect to database\n    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Check if username already exists\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->execute([':username' => $username]);\n    if ($stmt->fetch()) {\n      throw new Exception(\"Username already taken.\");\n    }\n\n    // Hash password before storing in database\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashed_password]);\n\n    // Return a success message and the newly created user's ID\n    return [\"message\" => \"User created successfully.\", \"userId\" => $db->lastInsertId()];\n  } catch (PDOException $e) {\n    // Handle any database errors\n    throw new Exception(\"Failed to create user: \" . $e->getMessage());\n  }\n}\n```", "```php\ntry {\n  $userData = register_user(\"newuser\", \"newuser@example.com\", \"password123\", \"password123\");\n  print_r($userData);\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```"]}
