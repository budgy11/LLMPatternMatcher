{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, I need to create a user registration function in PHP. Let me think about how to approach this.\n\nFirst, I should set up the basic HTML form where users can input their details. The form needs fields for username, email, password, confirm password, first name, last name, and a date of birth. I'll use the POST method to send the data to the server.\n\nNext, I need to handle form submission in PHP. So, when the user clicks submit, the form data should be processed. I'll start by initializing an empty array for error messages so I can display them if something goes wrong.\n\nI should check if all required fields are filled out. The username and email are essential, so if they're missing, I'll add errors. Also, the password needs to match the confirm password field, otherwise, there's an error.\n\nFor validation, the username should only contain letters and numbers and have a length between 2 and 20 characters. Using a regular expression makes sense here. Similarly, the email should be checked using PHP's built-in function to ensure it's valid.\n\nThe password needs to meet certain criteria: at least 8 characters, with one uppercase letter, one lowercase letter, and a number or special character. I'll create a regex pattern for that. Also, the confirm password must match the password exactly.\n\nI should also validate the first name and last name to ensure they only contain letters and are between 2 and 50 characters long.\n\nThe date of birth needs to be in the correct format (YYYY-MM-DD) and shouldn't be a future date. I'll check if it's a valid date using strtotime and then compare it with today's date.\n\nOnce all validations pass, I need to check if the username or email already exists in the database to prevent duplicates. This requires a SQL query that checks both fields.\n\nIf there are no errors and the user doesn't exist yet, I'll proceed to insert the new user into the database. But before inserting, I should hash the password using password_hash() for security. Also, formatting the date as YYYY-MM-DD is important for consistency in the database.\n\nFinally, after successful insertion, I'll redirect the user to a welcome page with a success message. If there are any errors during this process, I'll display them on the registration form so the user can correct their input.\n</think>\n\nHere's an example of a user registration function using PHP:\n\n```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username_db = \"root\";\n$password_db = \"\";\n$db_name = \"user_registration\";\n\n// Connect to database\n$conn = new mysqli($host, $username_db, $password_db, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction registerUser() {\n    global $conn;\n    \n    // Initialize an array for error messages\n    $errors = array();\n    \n    // Check if form is submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Get user inputs\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n        $confirm_password = $_POST['confirm_password'];\n        $first_name = $_POST['first_name'];\n        $last_name = $_POST['last_name'];\n        $date_of_birth = $_POST['date_of_birth'];\n        \n        // Validate username\n        if (empty($username)) {\n            $errors[] = \"Username is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z0-9]*$/\", $username) || strlen($username) < 2 || strlen($username) > 20) {\n                $errors[] = \"Username must be between 2 and 20 characters and contain only letters and numbers\";\n            }\n        }\n        \n        // Validate email\n        if (empty($email)) {\n            $errors[] = \"Email is required\";\n        } else {\n            // Check for valid email format\n            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $errors[] = \"Invalid email format\";\n            }\n        }\n        \n        // Validate password\n        if (empty($password) || empty($confirm_password)) {\n            $errors[] = \"Password is required\";\n        } else {\n            if ($password !== $confirm_password) {\n                $errors[] = \"Passwords do not match\";\n            }\n            // Check for strong password criteria\n            if (!preg_match(\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[\\w@#$%^&+=]{8,}$/\", $password)) {\n                $errors[] = \"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and a special character\";\n            }\n        }\n        \n        // Validate first name\n        if (empty($first_name)) {\n            $errors[] = \"First name is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z]*$/\", $first_name) || strlen($first_name) < 2 || strlen($first_name) > 50) {\n                $errors[] = \"First name must be between 2 and 50 characters and contain only letters\";\n            }\n        }\n        \n        // Validate last name\n        if (empty($last_name)) {\n            $errors[] = \"Last name is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z]*$/\", $last_name) || strlen($last_name) < 2 || strlen($last_name) > 50) {\n                $errors[] = \"Last name must be between 2 and 50 characters and contain only letters\";\n            }\n        }\n        \n        // Validate date of birth\n        if (empty($date_of_birth)) {\n            $errors[] = \"Date of Birth is required\";\n        } else {\n            // Check for valid date format\n            if (!preg_match(\"/^(\\d{4}-\\d{2}-\\d{2})$/\", $date_of_birth) || strtotime($date_of_birth) > time()) {\n                $errors[] = \"Invalid date of birth. Must be in YYYY-MM-DD format and not a future date\";\n            }\n        }\n        \n        // Check if username or email already exists\n        $check_query = \"SELECT * FROM users WHERE username=? OR email=?\";\n        $stmt = $conn->prepare($check_query);\n        $stmt->bind_param(\"ss\", $username, $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Check if username already exists\n            $row = $result->fetch_assoc();\n            if ($row['username'] == $username) {\n                $errors[] = \"Username already exists\";\n            }\n            // Check if email already exists\n            if ($row['email'] == $email) {\n                $errors[] = \"Email already exists\";\n            }\n        }\n        \n        // If no errors, proceed to register the user\n        if (empty($errors)) {\n            // Hash password\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n            \n            // Insert into database\n            $register_query = \"INSERT INTO users (username, email, password, first_name, last_name, date_of_birth) VALUES (?, ?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($register_query);\n            $stmt->bind_param(\"ssssss\", $username, $email, $hashed_password, $first_name, $last_name, $date_of_birth);\n            \n            if ($stmt->execute()) {\n                // Registration successful\n                header(\"Location: welcome.php?success=1\");\n                exit();\n            } else {\n                $errors[] = \"Error occurred while registering user\";\n            }\n        }\n    }\n    \n    return $errors;\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```\n\nThis registration function includes:\n\n1. Database configuration and connection\n\n2. Input validation for:\n   - Username (must be 2-20 characters, letters and numbers only)\n   - Email (valid email format)\n   - Password (must match confirmation password, strong password criteria: at least 8 characters, one uppercase letter, one lowercase letter, one number, and one special character)\n   - First name and Last name (must be 2-50 characters, letters only)\n   - Date of Birth (must be in YYYY-MM-DD format, not a future date)\n\n3. Check for existing username or email\n\n4. Password hashing using PHP's password_hash() function\n\n5. Error handling with specific error messages\n\n6. Redirection to welcome page upon successful registration\n\nTo use this code:\n\n1. Create a database named \"user_registration\" and a table called \"users\" with the following columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - username (VARCHAR(20))\n   - email (VARCHAR(50))\n   - password (VARCHAR(255))\n   - first_name (VARCHAR(50))\n   - last_name (VARCHAR(50))\n   - date_of_birth (DATE)\n\n2. Create an HTML registration form that sends POST requests to this script\n\n3. Modify the database connection details according to your setup\n\n4. Handle any potential errors and display error messages to the user\n\nRemember to:\n\n- Never store passwords in plain text\n- Use proper security measures like CSRF protection and SQL injection prevention (like prepared statements used here)\n- Add additional fields or validations as needed for your application\n- Implement a secure login system after registration\n- Add session management for user authentication", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username_db = \"root\";\n$password_db = \"\";\n$db_name = \"user_registration\";\n\n// Connect to database\n$conn = new mysqli($host, $username_db, $password_db, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction registerUser() {\n    global $conn;\n    \n    // Initialize an array for error messages\n    $errors = array();\n    \n    // Check if form is submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Get user inputs\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n        $confirm_password = $_POST['confirm_password'];\n        $first_name = $_POST['first_name'];\n        $last_name = $_POST['last_name'];\n        $date_of_birth = $_POST['date_of_birth'];\n        \n        // Validate username\n        if (empty($username)) {\n            $errors[] = \"Username is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z0-9]*$/\", $username) || strlen($username) < 2 || strlen($username) > 20) {\n                $errors[] = \"Username must be between 2 and 20 characters and contain only letters and numbers\";\n            }\n        }\n        \n        // Validate email\n        if (empty($email)) {\n            $errors[] = \"Email is required\";\n        } else {\n            // Check for valid email format\n            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $errors[] = \"Invalid email format\";\n            }\n        }\n        \n        // Validate password\n        if (empty($password) || empty($confirm_password)) {\n            $errors[] = \"Password is required\";\n        } else {\n            if ($password !== $confirm_password) {\n                $errors[] = \"Passwords do not match\";\n            }\n            // Check for strong password criteria\n            if (!preg_match(\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[\\w@#$%^&+=]{8,}$/\", $password)) {\n                $errors[] = \"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and a special character\";\n            }\n        }\n        \n        // Validate first name\n        if (empty($first_name)) {\n            $errors[] = \"First name is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z]*$/\", $first_name) || strlen($first_name) < 2 || strlen($first_name) > 50) {\n                $errors[] = \"First name must be between 2 and 50 characters and contain only letters\";\n            }\n        }\n        \n        // Validate last name\n        if (empty($last_name)) {\n            $errors[] = \"Last name is required\";\n        } else {\n            // Check for valid characters and length\n            if (!preg_match(\"/^[a-zA-Z]*$/\", $last_name) || strlen($last_name) < 2 || strlen($last_name) > 50) {\n                $errors[] = \"Last name must be between 2 and 50 characters and contain only letters\";\n            }\n        }\n        \n        // Validate date of birth\n        if (empty($date_of_birth)) {\n            $errors[] = \"Date of Birth is required\";\n        } else {\n            // Check for valid date format\n            if (!preg_match(\"/^(\\d{4}-\\d{2}-\\d{2})$/\", $date_of_birth) || strtotime($date_of_birth) > time()) {\n                $errors[] = \"Invalid date of birth. Must be in YYYY-MM-DD format and not a future date\";\n            }\n        }\n        \n        // Check if username or email already exists\n        $check_query = \"SELECT * FROM users WHERE username=? OR email=?\";\n        $stmt = $conn->prepare($check_query);\n        $stmt->bind_param(\"ss\", $username, $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Check if username already exists\n            $row = $result->fetch_assoc();\n            if ($row['username'] == $username) {\n                $errors[] = \"Username already exists\";\n            }\n            // Check if email already exists\n            if ($row['email'] == $email) {\n                $errors[] = \"Email already exists\";\n            }\n        }\n        \n        // If no errors, proceed to register the user\n        if (empty($errors)) {\n            // Hash password\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n            \n            // Insert into database\n            $register_query = \"INSERT INTO users (username, email, password, first_name, last_name, date_of_birth) VALUES (?, ?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($register_query);\n            $stmt->bind_param(\"ssssss\", $username, $email, $hashed_password, $first_name, $last_name, $date_of_birth);\n            \n            if ($stmt->execute()) {\n                // Registration successful\n                header(\"Location: welcome.php?success=1\");\n                exit();\n            } else {\n                $errors[] = \"Error occurred while registering user\";\n            }\n        }\n    }\n    \n    return $errors;\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```"]}
