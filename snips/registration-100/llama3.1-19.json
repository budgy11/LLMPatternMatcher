{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle the basic logic for registering new users, including validating input data and storing it in a database.\n\n### Code\n```php\n<?php\n\n// Database connection settings\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Create a new PDO instance\n$dsn = \"mysql:host=$db_host;dbname=$db_name\";\n$conn = new PDO($dsn, $db_username, $db_password);\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username)) {\n        throw new Exception('Username cannot be empty');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user data into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n\n?>\n```\n\n### Explanation\n\nThis function takes three parameters:\n\n*   `$username`: The desired username for the new account.\n*   `$email`: The email address associated with the new account.\n*   `$password`: The password for the new account.\n\nThe function first validates the input data to ensure it meets certain criteria (e.g., a valid email address and a password that's at least 8 characters long). If any of these checks fail, an exception is thrown with a descriptive error message.\n\nNext, the function hashes the provided password using `password_hash()` to store it securely in the database.\n\nFinally, the function inserts the user data into the database using a prepared statement. If this step fails (e.g., due to a database connection issue), an exception is thrown with the underlying error message.\n\n### Example Usage\n\n```php\ntry {\n    registerUser('johnDoe', 'johndoe@example.com', 'mysecretpassword');\n} catch (Exception $e) {\n    echo 'Error registering user: ' . $e->getMessage();\n}\n```\n\nNote that this example uses a MySQL database connection, but the code should work with any PDO-compatible database. Make sure to replace the placeholders (`$db_host`, `$db_username`, etc.) with your actual database credentials and settings.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Create a new PDO instance\n$dsn = \"mysql:host=$db_host;dbname=$db_name\";\n$conn = new PDO($dsn, $db_username, $db_password);\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username)) {\n        throw new Exception('Username cannot be empty');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user data into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\ntry {\n    registerUser('johnDoe', 'johndoe@example.com', 'mysecretpassword');\n} catch (Exception $e) {\n    echo 'Error registering user: ' . $e->getMessage();\n}\n```"]}
