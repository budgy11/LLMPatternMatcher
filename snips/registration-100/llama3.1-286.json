{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes validation for username, email, password, and confirm_password fields.\n\n**Function Code:**\n```php\nfunction register_user($username, $email, $password, $confirm_password) {\n    // Validation\n    if (empty($username)) {\n        throw new Exception(\"Username is required\");\n    }\n\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        throw new Exception(\"Invalid username. Only alphanumeric characters and underscores are allowed.\");\n    }\n\n    if (empty($email)) {\n        throw new Exception(\"Email is required\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email format\");\n    }\n\n    if (empty($password)) {\n        throw new Exception(\"Password is required\");\n    }\n\n    if ($password !== $confirm_password) {\n        throw new Exception(\"Passwords do not match\");\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert into database\n    try {\n        // Assuming a MySQL database and the user table has columns 'username', 'email', 'password'\n        $db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        // Return user data\n        return array('success' => true, 'message' => \"User created successfully\", 'data' => array('username' => $username, 'email' => $email));\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n}\n```\n**Example Usage:**\n```php\ntry {\n    // Call the function with user input data\n    $user_data = register_user('johnDoe', 'johndoe@example.com', 'password123', 'password123');\n\n    // Check if registration was successful\n    if ($user_data['success']) {\n        echo \"User created successfully!\";\n        print_r($user_data['data']);\n    } else {\n        throw new Exception($user_data['message']);\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n**Notes:**\n\n* This function assumes a MySQL database with the user table having columns 'username', 'email', and 'password'. You may need to modify this to fit your specific database schema.\n* The password is hashed using `password_hash()` function, which is recommended for secure password storage.\n* Error handling has been added to catch potential exceptions that might occur during registration or database operations.", "code_blocks": ["```php\nfunction register_user($username, $email, $password, $confirm_password) {\n    // Validation\n    if (empty($username)) {\n        throw new Exception(\"Username is required\");\n    }\n\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        throw new Exception(\"Invalid username. Only alphanumeric characters and underscores are allowed.\");\n    }\n\n    if (empty($email)) {\n        throw new Exception(\"Email is required\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email format\");\n    }\n\n    if (empty($password)) {\n        throw new Exception(\"Password is required\");\n    }\n\n    if ($password !== $confirm_password) {\n        throw new Exception(\"Passwords do not match\");\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert into database\n    try {\n        // Assuming a MySQL database and the user table has columns 'username', 'email', 'password'\n        $db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        // Return user data\n        return array('success' => true, 'message' => \"User created successfully\", 'data' => array('username' => $username, 'email' => $email));\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n}\n```", "```php\ntry {\n    // Call the function with user input data\n    $user_data = register_user('johnDoe', 'johndoe@example.com', 'password123', 'password123');\n\n    // Check if registration was successful\n    if ($user_data['success']) {\n        echo \"User created successfully!\";\n        print_r($user_data['data']);\n    } else {\n        throw new Exception($user_data['message']);\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
