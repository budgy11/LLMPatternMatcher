{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes validation for username, email, and password.\n\n```php\nfunction register_user($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Validate username length\n    if (strlen($username) < 3 || strlen($username) > 30) {\n        return array('error' => 'Username must be between 3 and 30 characters long');\n    }\n\n    // Validate email format\n    $email_regex = '/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/';\n    if (!preg_match($email_regex, $email)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate password length\n    if (strlen($password) < 8 || strlen($password) > 50) {\n        return array('error' => 'Password must be between 8 and 50 characters long');\n    }\n\n    // Hash the password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user data into database (assuming $db is a PDO instance)\n    try {\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n\n    // Return success message\n    return array('success' => true, 'message' => 'User registered successfully');\n}\n```\n\n**Example Usage**\n----------------\n\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\nif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n} else {\n    echo 'User registered successfully!';\n}\n```\n\nNote that this is a basic example and you should adjust it according to your specific requirements (e.g., database schema, error handling). Additionally, make sure to use prepared statements to prevent SQL injection attacks.", "code_blocks": ["```php\nfunction register_user($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Validate username length\n    if (strlen($username) < 3 || strlen($username) > 30) {\n        return array('error' => 'Username must be between 3 and 30 characters long');\n    }\n\n    // Validate email format\n    $email_regex = '/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/';\n    if (!preg_match($email_regex, $email)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate password length\n    if (strlen($password) < 8 || strlen($password) > 50) {\n        return array('error' => 'Password must be between 8 and 50 characters long');\n    }\n\n    // Hash the password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user data into database (assuming $db is a PDO instance)\n    try {\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n\n    // Return success message\n    return array('success' => true, 'message' => 'User registered successfully');\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\nif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n} else {\n    echo 'User registered successfully!';\n}\n```"]}
