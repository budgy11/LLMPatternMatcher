{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a basic user registration function using PHP. This function will validate the input data, hash the password, and store the user's information in a database.\n\n**Function Code**\n```php\nfunction registerUser($username, $email, $password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  // Hash password\n  $hashedPassword = hash('sha256', $password);\n\n  // Connect to database\n  $db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\n  // Check if user already exists\n  $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  if ($stmt->fetch()) {\n    throw new Exception(\"Username or email already exists.\");\n  }\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->execute();\n\n  // Return user's ID\n  return $db->lastInsertId();\n}\n```\n**Example Usage**\n```php\ntry {\n  $userId = registerUser('johnDoe', 'johndoe@example.com', 'mysecretpassword');\n  echo \"User registered successfully. User ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```\n**Database Schema**\n\nAssuming you have a `users` table with the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique user ID |\n| username | varchar(255) | User's username |\n| email | varchar(255) | User's email address |\n| password | varchar(255) | Hashed password |\n\n**Security Notes**\n\n* Always use prepared statements to prevent SQL injection.\n* Use a secure hashing algorithm like `sha256` to store passwords.\n* Never store plain text passwords in the database.\n\nRemember to replace `database_name`, `username`, and `password` with your actual database credentials.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  // Hash password\n  $hashedPassword = hash('sha256', $password);\n\n  // Connect to database\n  $db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\n  // Check if user already exists\n  $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  if ($stmt->fetch()) {\n    throw new Exception(\"Username or email already exists.\");\n  }\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->execute();\n\n  // Return user's ID\n  return $db->lastInsertId();\n}\n```", "```php\ntry {\n  $userId = registerUser('johnDoe', 'johndoe@example.com', 'mysecretpassword');\n  echo \"User registered successfully. User ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```"]}
