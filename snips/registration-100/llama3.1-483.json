{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a user registration function written in PHP, including password hashing and validation.\n\n### **Registration Function**\n\n```php\n/**\n * User Registration Function\n *\n * @param array $data Registration data\n * @return bool|false|string Result of registration (true/false or error message)\n */\nfunction registerUser(array $data) {\n    // Database connection parameters\n    $host = 'localhost';\n    $username = 'your_username';\n    $password = 'your_password';\n    $database = 'your_database';\n\n    try {\n        // Connect to the database\n        $conn = new PDO(\"mysql:host=$host;dbname=$database\", $username, $password);\n\n        // Validate input data\n        if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n            return 'Error: Missing required fields';\n        }\n\n        // Check for existing username and email\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username OR email = :email');\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->execute();\n\n        if ($stmt->fetch()) {\n            return 'Error: Username or email already taken';\n        }\n\n        // Hash the password\n        $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $sql = 'INSERT INTO users (username, email, password) VALUES (:username, :email, :password)';\n        $stmt = $conn->prepare($sql);\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n\n    } catch (PDOException $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n```\n\n### **Example Usage**\n\n```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n];\n\n$result = registerUser($data);\n\nif ($result === true) {\n    echo 'User registered successfully!';\n} elseif (is_string($result)) {\n    echo $result;\n}\n```\n\n### **Security Considerations**\n\n*   Use prepared statements to prevent SQL injection attacks.\n*   Hash passwords using a secure algorithm like `password_hash()`.\n*   Validate user input data on the server-side, including username and email uniqueness checks.\n\nRemember to adjust the database connection parameters and table schema according to your specific requirements. This example provides a basic implementation of user registration functionality in PHP.", "code_blocks": ["```php\n/**\n * User Registration Function\n *\n * @param array $data Registration data\n * @return bool|false|string Result of registration (true/false or error message)\n */\nfunction registerUser(array $data) {\n    // Database connection parameters\n    $host = 'localhost';\n    $username = 'your_username';\n    $password = 'your_password';\n    $database = 'your_database';\n\n    try {\n        // Connect to the database\n        $conn = new PDO(\"mysql:host=$host;dbname=$database\", $username, $password);\n\n        // Validate input data\n        if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n            return 'Error: Missing required fields';\n        }\n\n        // Check for existing username and email\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username OR email = :email');\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->execute();\n\n        if ($stmt->fetch()) {\n            return 'Error: Username or email already taken';\n        }\n\n        // Hash the password\n        $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $sql = 'INSERT INTO users (username, email, password) VALUES (:username, :email, :password)';\n        $stmt = $conn->prepare($sql);\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n\n    } catch (PDOException $e) {\n        return 'Error: ' . $e->getMessage();\n    }\n}\n```", "```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n];\n\n$result = registerUser($data);\n\nif ($result === true) {\n    echo 'User registered successfully!';\n} elseif (is_string($result)) {\n    echo $result;\n}\n```"]}
