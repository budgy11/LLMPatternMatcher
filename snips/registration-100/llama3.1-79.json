{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP. This function takes in the user's details as input, validates them, and then inserts the data into a database.\n\n```php\n<?php\n// Define the connection settings for your database\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\nfunction connectToDatabase() {\n    global $dbHost, $dbUsername, $dbPassword, $dbName;\n    try {\n        // Attempt to connect to the database\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit();\n    }\n}\n\nfunction registerUser($username, $email, $password, $confirmPassword) {\n    // Check if the input fields are not empty\n    if (empty($username) || empty($email) || empty($password) || empty($confirmPassword)) {\n        return array('status' => 'error', 'message' => 'Please fill in all the required fields.');\n    }\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('status' => 'error', 'message' => 'Invalid email address.');\n    }\n\n    // Check if password and confirm password match\n    if ($password !== $confirmPassword) {\n        return array('status' => 'error', 'message' => 'Passwords do not match.');\n    }\n\n    // Hash the password for security\n    $hashedPassword = hash('sha256', $password);\n\n    // Connect to database\n    $conn = connectToDatabase();\n\n    try {\n        // Insert user data into the database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the query\n        $stmt->execute();\n\n        return array('status' => 'success', 'message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return array('status' => 'error', 'message' => 'Failed to register user.');\n    }\n}\n?>\n```\n\n**Example Use Case**\n-------------------\n\n```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n$confirmPassword = 'password123';\n\n$result = registerUser($username, $email, $password, $confirmPassword);\n\nif ($result['status'] == 'success') {\n    echo 'User registered successfully.';\n} else {\n    echo 'Error: ' . $result['message'];\n}\n```\n\nNote that you should replace `'localhost'`, `'your_username'`, `'your_password'`, and `'your_database'` with your actual database credentials. This code assumes that you have a `users` table in your database with columns for `username`, `email`, and `password`.", "code_blocks": ["```php\n<?php\n// Define the connection settings for your database\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\nfunction connectToDatabase() {\n    global $dbHost, $dbUsername, $dbPassword, $dbName;\n    try {\n        // Attempt to connect to the database\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit();\n    }\n}\n\nfunction registerUser($username, $email, $password, $confirmPassword) {\n    // Check if the input fields are not empty\n    if (empty($username) || empty($email) || empty($password) || empty($confirmPassword)) {\n        return array('status' => 'error', 'message' => 'Please fill in all the required fields.');\n    }\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('status' => 'error', 'message' => 'Invalid email address.');\n    }\n\n    // Check if password and confirm password match\n    if ($password !== $confirmPassword) {\n        return array('status' => 'error', 'message' => 'Passwords do not match.');\n    }\n\n    // Hash the password for security\n    $hashedPassword = hash('sha256', $password);\n\n    // Connect to database\n    $conn = connectToDatabase();\n\n    try {\n        // Insert user data into the database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the query\n        $stmt->execute();\n\n        return array('status' => 'success', 'message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return array('status' => 'error', 'message' => 'Failed to register user.');\n    }\n}\n?>\n```", "```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n$confirmPassword = 'password123';\n\n$result = registerUser($username, $email, $password, $confirmPassword);\n\nif ($result['status'] == 'success') {\n    echo 'User registered successfully.';\n} else {\n    echo 'Error: ' . $result['message'];\n}\n```"]}
