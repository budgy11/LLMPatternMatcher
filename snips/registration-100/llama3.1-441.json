{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function in PHP. This function will handle the validation and insertion of new users into a database.\n\n### Database Connection\n\nFirst, ensure you have a MySQL database set up with a table named `users` having the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Registration Function\n\nNext, create a file named `register.php` with the following code:\n\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check for form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Extract submitted data\n  $username = trim($_POST['username']);\n  $email = trim($_POST['email']);\n  $password = trim($_POST['password']);\n\n  // Validate inputs\n  if (empty($username) || empty($email) || empty($password)) {\n    echo 'Please fill in all fields.';\n  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address.';\n  } else {\n    // Hash the password for secure storage\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n      // Prepare and execute SQL query to insert new user\n      $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n      $stmt->execute([\n        'username' => $username,\n        'email' => $email,\n        'password' => $hashedPassword\n      ]);\n\n      // If successful, display success message and redirect to login page\n      echo \"Registration successful! Please log in.\";\n    } catch (PDOException $e) {\n      echo 'Error registering user: ' . $e->getMessage();\n    }\n  }\n}\n\n// Display registration form if not already registered or logged in\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <button type=\"submit\">Register</button>\n</form>\n\n<?php\n// Close database connection when done\n?>\n```\n\n### Configuration File (`config.php`)\n\nCreate a separate file named `config.php` for configuration settings, including your database credentials. \n\n```php\n<?php\n$dsn = 'mysql:host=localhost;dbname=your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n  echo 'Error connecting to database: ' . $e->getMessage();\n}\n?>\n```\n\nThis registration function uses prepared statements for secure SQL injection protection and `password_hash()` for hashing passwords. Remember to replace placeholders (`your_database_name`, `your_username`, etc.) with your actual database credentials and name in the configuration file.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check for form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Extract submitted data\n  $username = trim($_POST['username']);\n  $email = trim($_POST['email']);\n  $password = trim($_POST['password']);\n\n  // Validate inputs\n  if (empty($username) || empty($email) || empty($password)) {\n    echo 'Please fill in all fields.';\n  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address.';\n  } else {\n    // Hash the password for secure storage\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n      // Prepare and execute SQL query to insert new user\n      $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n      $stmt->execute([\n        'username' => $username,\n        'email' => $email,\n        'password' => $hashedPassword\n      ]);\n\n      // If successful, display success message and redirect to login page\n      echo \"Registration successful! Please log in.\";\n    } catch (PDOException $e) {\n      echo 'Error registering user: ' . $e->getMessage();\n    }\n  }\n}\n\n// Display registration form if not already registered or logged in\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <button type=\"submit\">Register</button>\n</form>\n\n<?php\n// Close database connection when done\n?>\n```", "```php\n<?php\n$dsn = 'mysql:host=localhost;dbname=your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n  echo 'Error connecting to database: ' . $e->getMessage();\n}\n?>\n```"]}
