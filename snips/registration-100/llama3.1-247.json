{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP:\n\n```php\n<?php\n\n// Define the database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Function to register new users\nfunction registerUser($username, $email, $password) {\n    // Connect to the database\n    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Hash the password using SHA-256\n    $hashedPassword = hash('sha256', $password);\n\n    // Prepare and execute the query to register new user\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n    if ($stmt->execute()) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error registering user: \" . $stmt->error;\n    }\n\n    // Close the database connection\n    $conn->close();\n}\n\n// Example usage:\nregisterUser('johnDoe', 'johndoe@example.com', 'password123');\n\n?>\n```\n\nIn this code:\n\n*   We define a `registerUser` function that takes three arguments: `$username`, `$email`, and `$password`.\n*   Inside the function, we connect to our database using the provided connection settings.\n*   We hash the password using SHA-256 for security purposes.\n*   Then, we prepare and execute an SQL query to insert a new user into the `users` table. The query is prepared with parameterized queries to prevent SQL injection attacks.\n*   Finally, if the registration process is successful, we close the database connection.\n\n**Remember to replace the placeholders (`your_username`, `your_password`, `your_database_name`) with your actual database credentials and database name.**\n\nNote: This example uses a basic SHA-256 hashing algorithm for simplicity. In a production environment, consider using a more secure password hashing library like `password_hash()` (introduced in PHP 5.5) or a dedicated password hashing library.\n\nFor password verification on login, you'll need to store the original hash and verify it against the input password using the same hashing algorithm.", "code_blocks": ["```php\n<?php\n\n// Define the database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Function to register new users\nfunction registerUser($username, $email, $password) {\n    // Connect to the database\n    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Hash the password using SHA-256\n    $hashedPassword = hash('sha256', $password);\n\n    // Prepare and execute the query to register new user\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n    if ($stmt->execute()) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error registering user: \" . $stmt->error;\n    }\n\n    // Close the database connection\n    $conn->close();\n}\n\n// Example usage:\nregisterUser('johnDoe', 'johndoe@example.com', 'password123');\n\n?>\n```"]}
