{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP, which includes input validation and password hashing for secure storage:\n\n```php\n<?php\n\n// Configuration\n$allowedExtensions = array('jpg', 'jpeg', 'png', 'gif');\n$maxFileSize = 2097152; // 2 MB\n\nfunction registerUser($firstName, $lastName, $email, $password, $confirmPassword, $username) {\n    try {\n        // Validate input\n        if (empty($firstName)) {\n            throw new Exception(\"First name is required.\");\n        }\n\n        if (empty($lastName)) {\n            throw new Exception(\"Last name is required.\");\n        }\n\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            throw new Exception(\"Invalid email address.\");\n        }\n\n        if ($password !== $confirmPassword) {\n            throw new Exception(\"Passwords do not match.\");\n        }\n\n        // Hash password\n        $hashedPassword = hash('sha256', $password);\n\n        // Connect to database (use your own db connection method)\n        // For this example, we'll use a fictional \"users\" table with columns: id, username, email, password\n        $db = new PDO('sqlite:database.db');\n        $query = 'INSERT INTO users (username, email, password) VALUES (:username, :email, :password)';\n        $stmt = $db->prepare($query);\n        $stmt->execute(array(\n            ':username' => $username,\n            ':email' => $email,\n            ':password' => $hashedPassword\n        ));\n\n        // If the query was successful, the user has been registered\n        if ($stmt) {\n            return \"User registered successfully.\";\n        } else {\n            throw new Exception(\"Failed to register user.\");\n        }\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage() . '<br>';\n        return false;\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage() . '<br>';\n        return false;\n    }\n}\n\n?>\n```\n\n**Usage**\n\nTo use the function, you can call it with required parameters like this:\n\n```php\nregisterUser(\"John\", \"Doe\", \"john@example.com\", \"password123\", \"password123\", \"johndoe\");\n```\n\nThis example will register a new user in the database. Make sure to replace `'database.db'` with your actual database file name.\n\nRemember that storing plain text passwords is not secure; use password hashing and salting mechanisms like `hash('sha256', $password)` as shown above, or consider using PHP's built-in `password_hash()` function for better security.\n\n**Error Handling**\n\nThis example includes basic error handling to catch any potential database connection issues. However, a real-world implementation would want to handle more specific errors and exceptions for better user experience.\n\nPlease be aware that this is a simplified example. Real applications should always follow best practices for security, including input validation, secure password storage, proper database connections, and more.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$allowedExtensions = array('jpg', 'jpeg', 'png', 'gif');\n$maxFileSize = 2097152; // 2 MB\n\nfunction registerUser($firstName, $lastName, $email, $password, $confirmPassword, $username) {\n    try {\n        // Validate input\n        if (empty($firstName)) {\n            throw new Exception(\"First name is required.\");\n        }\n\n        if (empty($lastName)) {\n            throw new Exception(\"Last name is required.\");\n        }\n\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            throw new Exception(\"Invalid email address.\");\n        }\n\n        if ($password !== $confirmPassword) {\n            throw new Exception(\"Passwords do not match.\");\n        }\n\n        // Hash password\n        $hashedPassword = hash('sha256', $password);\n\n        // Connect to database (use your own db connection method)\n        // For this example, we'll use a fictional \"users\" table with columns: id, username, email, password\n        $db = new PDO('sqlite:database.db');\n        $query = 'INSERT INTO users (username, email, password) VALUES (:username, :email, :password)';\n        $stmt = $db->prepare($query);\n        $stmt->execute(array(\n            ':username' => $username,\n            ':email' => $email,\n            ':password' => $hashedPassword\n        ));\n\n        // If the query was successful, the user has been registered\n        if ($stmt) {\n            return \"User registered successfully.\";\n        } else {\n            throw new Exception(\"Failed to register user.\");\n        }\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage() . '<br>';\n        return false;\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage() . '<br>';\n        return false;\n    }\n}\n\n?>\n```", "```php\nregisterUser(\"John\", \"Doe\", \"john@example.com\", \"password123\", \"password123\", \"johndoe\");\n```"]}
