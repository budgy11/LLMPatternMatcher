{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP, including error handling and password hashing using the `password_hash` function.\n\n**User Registration Function:**\n```php\nfunction register_user($username, $email, $password) {\n  // Database connection (assuming you have a database setup)\n  require_once 'db_config.php';\n  $conn = new mysqli($host, $user, $pass, $database);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Check for existing user\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    return array('error' => 'Username already taken');\n  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Hash password\n  $password = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')\";\n  $conn->query($query);\n\n  // Close database connection\n  $conn->close();\n\n  return array('success' => 'Registration successful');\n}\n```\n**Example Usage:**\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\n\nif ($result['error']) {\n  echo json_encode(array('message' => $result['error']));\n} else {\n  echo json_encode(array('message' => 'User registered successfully'));\n}\n```\n**Note:**\n\n* This example assumes you have a database setup with a `users` table containing columns for `username`, `email`, and `password`.\n* The `db_config.php` file should contain your database connection details.\n* This is just a basic example, you may want to add more error handling, validation, and security measures depending on your specific requirements.\n\nRemember to follow best practices for password storage and never store passwords in plain text. Always hash and salt them using functions like `password_hash`.", "code_blocks": ["```php\nfunction register_user($username, $email, $password) {\n  // Database connection (assuming you have a database setup)\n  require_once 'db_config.php';\n  $conn = new mysqli($host, $user, $pass, $database);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Check for existing user\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    return array('error' => 'Username already taken');\n  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Hash password\n  $password = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')\";\n  $conn->query($query);\n\n  // Close database connection\n  $conn->close();\n\n  return array('success' => 'Registration successful');\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\n\nif ($result['error']) {\n  echo json_encode(array('message' => $result['error']));\n} else {\n  echo json_encode(array('message' => 'User registered successfully'));\n}\n```"]}
