{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function written in PHP. This function will validate the input data, hash and store the password securely.\n\n```php\n<?php\n\n// Configuration settings\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (!validateUsername($username)) {\n        return array('error' => 'Invalid username');\n    }\n\n    if (!validateEmail($email)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    if (!validatePassword($password)) {\n        return array('error' => 'Invalid password');\n    }\n\n    try {\n        // Hash and store the password securely\n        $hashedPassword = hash('sha256', $password);\n\n        // Insert new user into database\n        $sql = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return success message\n        return array('success' => 'User registered successfully');\n\n    } catch (PDOException $e) {\n        // Handle database error\n        return array('error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n\nfunction validateUsername($username) {\n    // Simple username validation (6-20 characters, alphanumeric and underscores)\n    if (strlen($username) >= 6 && strlen($username) <= 20) {\n        if (ctype_alnum($username) || strpos($username, '_') !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction validateEmail($email) {\n    // Simple email validation\n    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction validatePassword($password) {\n    // Simple password validation (8-20 characters, alphanumeric and special characters)\n    if (strlen($password) >= 8 && strlen($password) <= 20) {\n        if (ctype_alnum($password) || strpos($password, '_') !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Example usage\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n    echo 'User registered successfully!';\n} elseif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n}\n```\n\n**Explanation**\n\nThis code defines a `registerUser` function that takes three arguments: `$username`, `$email`, and `$password`. It first validates the input data using three helper functions: `validateUsername`, `validateEmail`, and `validatePassword`.\n\nIf all validation checks pass, it hashes the password using SHA-256 and stores it securely in the database. Finally, it returns a success message or an error message if any of the validation checks fail.\n\n**Note**: This is a basic example and should be adapted to your specific use case. You may want to add additional validation rules, handle errors more robustly, or integrate with other authentication mechanisms.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (!validateUsername($username)) {\n        return array('error' => 'Invalid username');\n    }\n\n    if (!validateEmail($email)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    if (!validatePassword($password)) {\n        return array('error' => 'Invalid password');\n    }\n\n    try {\n        // Hash and store the password securely\n        $hashedPassword = hash('sha256', $password);\n\n        // Insert new user into database\n        $sql = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return success message\n        return array('success' => 'User registered successfully');\n\n    } catch (PDOException $e) {\n        // Handle database error\n        return array('error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n\nfunction validateUsername($username) {\n    // Simple username validation (6-20 characters, alphanumeric and underscores)\n    if (strlen($username) >= 6 && strlen($username) <= 20) {\n        if (ctype_alnum($username) || strpos($username, '_') !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction validateEmail($email) {\n    // Simple email validation\n    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction validatePassword($password) {\n    // Simple password validation (8-20 characters, alphanumeric and special characters)\n    if (strlen($password) >= 8 && strlen($password) <= 20) {\n        if (ctype_alnum($password) || strpos($password, '_') !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Example usage\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n    echo 'User registered successfully!';\n} elseif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n}\n```"]}
