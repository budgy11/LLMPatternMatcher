{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP. This function will handle the creation of new users, validate user input, and encrypt passwords for security.\n\n### **`register_user.php`**\n\n```php\n<?php\n\n/**\n * Register a new user.\n *\n * @param string $username Username chosen by the user.\n * @param string $email Email address chosen by the user.\n * @param string $password Password chosen by the user.\n *\n * @return bool|mixed False on failure, true on success and array of user data.\n */\nfunction registerUser($username, $email, $password)\n{\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        return 'Error: All fields are required.';\n    }\n\n    // Check if username is available\n    global $db;\n    $sql = \"SELECT * FROM users WHERE username=:username\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return 'Error: Username already taken.';\n    }\n\n    // Check if email is available\n    $sql = \"SELECT * FROM users WHERE email=:email\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return 'Error: Email already taken.';\n    }\n\n    // Hash password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    // Create new user\n    $sql = \"INSERT INTO users (username, email, password)\n            VALUES (:username, :email, :password)\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $passwordHash);\n    $stmt->execute();\n\n    // Get the newly inserted user data\n    $userId = $db->lastInsertId();\n    $sql = \"SELECT * FROM users WHERE id=:id\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':id', $userId);\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    return true;\n}\n\n?>\n```\n\n### **Example Usage**\n\n```php\n// Set up your database connection\n$db = new PDO('sqlite:database.db');\n\n// Create a new user\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\n\nif ($result === true) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user: \" . $result;\n}\n```\n\nRemember to replace `'sqlite:database.db'` with your actual database connection settings.\n\nThis code assumes you have a SQLite database set up and configured. If you're using another type of database, adjust the SQL queries accordingly.", "code_blocks": ["```php\n<?php\n\n/**\n * Register a new user.\n *\n * @param string $username Username chosen by the user.\n * @param string $email Email address chosen by the user.\n * @param string $password Password chosen by the user.\n *\n * @return bool|mixed False on failure, true on success and array of user data.\n */\nfunction registerUser($username, $email, $password)\n{\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        return 'Error: All fields are required.';\n    }\n\n    // Check if username is available\n    global $db;\n    $sql = \"SELECT * FROM users WHERE username=:username\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return 'Error: Username already taken.';\n    }\n\n    // Check if email is available\n    $sql = \"SELECT * FROM users WHERE email=:email\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return 'Error: Email already taken.';\n    }\n\n    // Hash password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    // Create new user\n    $sql = \"INSERT INTO users (username, email, password)\n            VALUES (:username, :email, :password)\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $passwordHash);\n    $stmt->execute();\n\n    // Get the newly inserted user data\n    $userId = $db->lastInsertId();\n    $sql = \"SELECT * FROM users WHERE id=:id\";\n    $stmt = $db->prepare($sql);\n    $stmt->bindParam(':id', $userId);\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    return true;\n}\n\n?>\n```", "```php\n// Set up your database connection\n$db = new PDO('sqlite:database.db');\n\n// Create a new user\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\n\nif ($result === true) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user: \" . $result;\n}\n```"]}
