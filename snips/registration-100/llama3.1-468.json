{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a basic user registration function in PHP:\n\n```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$dbname = 'database_name';\n$username = 'username';\n$password = 'password';\n\nfunction registerUser($name, $email, $password) {\n    // Connect to the database\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Hash the password\n        $hashedPassword = hash('sha256', $password);\n\n        // Prepare and execute the insert query\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the insert query\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    } finally {\n        $conn = null;\n    }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (registerUser($name, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user.\";\n}\n?>\n```\n\nThis code creates a `registerUser` function that takes three arguments: `$name`, `$email`, and `$password`. The function connects to the database using PDO, hashes the password using SHA-256, and then prepares an insert query with the user's details. If the query executes successfully, it returns `true`; otherwise, it returns `false`.\n\nPlease note:\n\n*   You'll need to replace `'localhost'`, `'database_name'`, `'username'`, and `'password'` with your actual database credentials.\n*   This example uses SHA-256 for password hashing. In a real-world application, you should use a more secure hashing algorithm like bcrypt or Argon2.\n*   This code doesn't handle the case where the email address is already registered in the database. You may want to add error handling and validation depending on your specific requirements.\n\nAlways ensure that you're protecting user data by using prepared statements and validating user input.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$dbname = 'database_name';\n$username = 'username';\n$password = 'password';\n\nfunction registerUser($name, $email, $password) {\n    // Connect to the database\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Hash the password\n        $hashedPassword = hash('sha256', $password);\n\n        // Prepare and execute the insert query\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the insert query\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    } finally {\n        $conn = null;\n    }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (registerUser($name, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user.\";\n}\n?>\n```"]}
