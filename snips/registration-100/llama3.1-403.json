{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP:\n\n**`register_user.php`**\n```php\n<?php\n// Define the database connection settings\n$host = 'localhost';\n$dbname = 'users_database';\n$username = 'root'; // Replace with your username\n$password = ''; // Replace with your password\n\ntry {\n    // Connect to the database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Function to register a user\nfunction register_user($name, $email, $password) {\n    // Validate the input data\n    if (!validate_input($name, $email, $password)) {\n        return false; // Invalid input\n    }\n\n    // Hash the password for security\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert the user into the database\n    $query = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    if ($stmt->execute()) {\n        return true; // User registered successfully\n    } else {\n        echo \"Error registering user: \" . $conn->errorInfo()[2];\n        return false;\n    }\n}\n\n// Function to validate input data\nfunction validate_input($name, $email, $password) {\n    if (!preg_match(\"/^[a-zA-Z ]*$/\", $name)) {\n        return false; // Invalid name\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false; // Invalid email address\n    }\n    if (strlen($password) < 8 || !preg_match(\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$/\", $password)) {\n        return false; // Password too short or not complex enough\n    }\n    return true;\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (register_user($name, $email, $password)) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error registering user. Please try again.\";\n    }\n}\n\n?>\n```\nThis code defines a `register_user` function that takes three parameters: `$name`, `$email`, and `$password`. It first validates the input data using the `validate_input` function, then hashes the password for security. If everything checks out, it inserts the user into the database.\n\n**Note**: This is a basic example, and you should consider implementing additional security measures such as:\n\n* Email verification to prevent spam accounts\n* Password reset mechanism\n* More robust input validation\n* Error handling\n\nAlso, this code assumes that you have created the `users` table with the correct columns (`name`, `email`, `password`) in your database.", "code_blocks": ["```php\n<?php\n// Define the database connection settings\n$host = 'localhost';\n$dbname = 'users_database';\n$username = 'root'; // Replace with your username\n$password = ''; // Replace with your password\n\ntry {\n    // Connect to the database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Function to register a user\nfunction register_user($name, $email, $password) {\n    // Validate the input data\n    if (!validate_input($name, $email, $password)) {\n        return false; // Invalid input\n    }\n\n    // Hash the password for security\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert the user into the database\n    $query = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    if ($stmt->execute()) {\n        return true; // User registered successfully\n    } else {\n        echo \"Error registering user: \" . $conn->errorInfo()[2];\n        return false;\n    }\n}\n\n// Function to validate input data\nfunction validate_input($name, $email, $password) {\n    if (!preg_match(\"/^[a-zA-Z ]*$/\", $name)) {\n        return false; // Invalid name\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false; // Invalid email address\n    }\n    if (strlen($password) < 8 || !preg_match(\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$/\", $password)) {\n        return false; // Password too short or not complex enough\n    }\n    return true;\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (register_user($name, $email, $password)) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error registering user. Please try again.\";\n    }\n}\n\n?>\n```"]}
