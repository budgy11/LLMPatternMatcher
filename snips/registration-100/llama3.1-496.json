{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes input validation, password hashing, and storing the user data in a database.\n\n**Function Code:**\n```php\n/**\n * User Registration Function\n *\n * @param array $data User input data (name, email, password)\n * @return bool|string True on successful registration, error message on failure\n */\nfunction registerUser(array $data) {\n    // Input validation\n    if (!isset($data['name']) || !isset($data['email']) || !isset($data['password'])) {\n        return 'Error: Invalid input data';\n    }\n\n    // Validate email format\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return 'Error: Invalid email address';\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Connect to database (replace with your own connection method)\n    global $db;\n    $sql = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n    try {\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':name', $data['name']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        // Handle database errors\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n```\n**Example Usage:**\n```php\n// Sample user input data\n$data = [\n    'name' => 'John Doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'strongpassword123'\n];\n\n// Call the registration function\n$result = registerUser($data);\n\nif ($result === true) {\n    echo 'Registration successful!';\n} else {\n    echo $result;\n}\n```\n**Security Notes:**\n\n* Password hashing is done using `password_hash()` with a strong algorithm (currently `PASSWORD_DEFAULT`).\n* Email validation uses `filter_var()` to ensure the email address conforms to the standard format.\n* Input data validation checks for the presence of required fields (`name`, `email`, and `password`).\n* Database connection is handled separately; replace the `$db` global variable with your own connection method.\n\nRemember to adjust this example according to your specific database schema and connection method.", "code_blocks": ["```php\n/**\n * User Registration Function\n *\n * @param array $data User input data (name, email, password)\n * @return bool|string True on successful registration, error message on failure\n */\nfunction registerUser(array $data) {\n    // Input validation\n    if (!isset($data['name']) || !isset($data['email']) || !isset($data['password'])) {\n        return 'Error: Invalid input data';\n    }\n\n    // Validate email format\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return 'Error: Invalid email address';\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Connect to database (replace with your own connection method)\n    global $db;\n    $sql = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n    try {\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':name', $data['name']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        // Handle database errors\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n```", "```php\n// Sample user input data\n$data = [\n    'name' => 'John Doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'strongpassword123'\n];\n\n// Call the registration function\n$result = registerUser($data);\n\nif ($result === true) {\n    echo 'Registration successful!';\n} else {\n    echo $result;\n}\n```"]}
