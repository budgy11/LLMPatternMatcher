{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP that includes validation for username, email, and password. This example uses prepared statements to prevent SQL injection attacks.\n\n### User Registration Form\n\nFirst, create a basic HTML form to collect user input:\n```html\n<form action=\"register.php\" method=\"post\">\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\"><br><br>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\"><br><br>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Register</button>\n</form>\n```\n### PHP Registration Function\n\nNext, create the PHP function to handle user registration:\n```php\n// register.php\n\n// Connect to database (replace with your own connection string)\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n}\n\nfunction registerUser($data)\n{\n    // Validate input\n    if (!isset($data['username']) || empty($data['username'])) {\n        throw new Exception('Username is required.');\n    }\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n    if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/', $data['password'])) {\n        throw new Exception('Password must be at least 8 characters long and contain uppercase and lowercase letters, as well as numbers.');\n    }\n\n    // Prepare and execute INSERT query\n    $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->bindParam(':username', $data['username']);\n    $stmt->bindParam(':email', $data['email']);\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n    $stmt->bindParam(':password', $hashedPassword);\n\n    if ($stmt->execute()) {\n        return 'User registered successfully!';\n    } else {\n        throw new Exception('Error registering user.');\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Get form data\n        $data = $_POST;\n\n        // Register user\n        echo registerUser($data);\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n```\n### Explanation\n\nThis example demonstrates how to create a basic user registration function in PHP. Here's what it does:\n\n1. It connects to the database using PDO.\n2. The `registerUser` function takes an array of input data, including username, email, and password.\n3. It validates the input data:\n\t* Checks if the username is set and not empty.\n\t* Verifies that the email address is valid.\n\t* Ensures that the password meets the required complexity criteria (at least 8 characters long and contains uppercase and lowercase letters, as well as numbers).\n4. If all validation checks pass, it prepares an INSERT query to create a new user record in the database. The `password_hash` function is used to securely store the password.\n5. Finally, if the query executes successfully, the function returns a success message.\n\nNote: This example assumes you have already set up a MySQL database and created a table named \"users\" with columns for username, email, and password. You'll need to modify the SQL queries and connection settings to match your own database configuration.", "code_blocks": [null, "```php\n// register.php\n\n// Connect to database (replace with your own connection string)\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n}\n\nfunction registerUser($data)\n{\n    // Validate input\n    if (!isset($data['username']) || empty($data['username'])) {\n        throw new Exception('Username is required.');\n    }\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n    if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/', $data['password'])) {\n        throw new Exception('Password must be at least 8 characters long and contain uppercase and lowercase letters, as well as numbers.');\n    }\n\n    // Prepare and execute INSERT query\n    $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->bindParam(':username', $data['username']);\n    $stmt->bindParam(':email', $data['email']);\n    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n    $stmt->bindParam(':password', $hashedPassword);\n\n    if ($stmt->execute()) {\n        return 'User registered successfully!';\n    } else {\n        throw new Exception('Error registering user.');\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Get form data\n        $data = $_POST;\n\n        // Register user\n        echo registerUser($data);\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n```"]}
