{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP that includes form validation, password hashing, and database interaction:\n\n**Note:** This is a basic implementation. You should adapt it to your specific needs and ensure you're following best practices for security.\n\n```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbUsername = 'username';\n$dbPassword = 'password';\n$dbName = 'database_name';\n\n// Connect to the database\nfunction connectToDatabase() {\n    global $dbHost, $dbUsername, $dbPassword, $dbName;\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n    }\n}\n\n// Register a new user\nfunction registerUser($username, $email, $password) {\n    global $dbHost, $dbUsername, $dbName;\n\n    // Validate the input data\n    if (!validateFormData($username, $email, $password)) {\n        return array('success' => false, 'message' => 'Invalid form data');\n    }\n\n    // Hash the password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to the database\n    $conn = connectToDatabase();\n\n    // Insert the new user into the database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('success' => true, 'message' => 'User created successfully');\n    } catch (PDOException $e) {\n        echo \"Error creating user: \" . $e->getMessage();\n        return array('success' => false, 'message' => 'Error creating user');\n    }\n\n    // Close the database connection\n    $conn = null;\n}\n\n// Validate form data\nfunction validateFormData($username, $email, $password) {\n    if (empty($username)) {\n        return false;\n    }\n    if (empty($email)) {\n        return false;\n    }\n    if (empty($password)) {\n        return false;\n    }\n\n    // Check for valid email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false;\n    }\n\n    // Minimum password length is 8 characters\n    if (strlen($password) < 8) {\n        return false;\n    }\n\n    return true;\n}\n\n?>\n```\n\nTo use this code, create a form on your webpage that submits to the `register.php` file:\n\n```html\n<form action=\"register.php\" method=\"post\">\n    Username: <input type=\"text\" name=\"username\"><br><br>\n    Email: <input type=\"email\" name=\"email\"><br><br>\n    Password: <input type=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"Register\">\n</form>\n```\n\nOn the `register.php` file, call the `registerUser()` function with the submitted form data:\n\n```php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    $result = registerUser($username, $email, $password);\n    if ($result['success']) {\n        echo 'User created successfully!';\n    } else {\n        echo 'Error creating user: ' . $result['message'];\n    }\n}\n```\n\nThis is a basic example and you should adapt it to your specific needs. For instance, you might want to add more validation checks or handle errors differently.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbUsername = 'username';\n$dbPassword = 'password';\n$dbName = 'database_name';\n\n// Connect to the database\nfunction connectToDatabase() {\n    global $dbHost, $dbUsername, $dbPassword, $dbName;\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n    }\n}\n\n// Register a new user\nfunction registerUser($username, $email, $password) {\n    global $dbHost, $dbUsername, $dbName;\n\n    // Validate the input data\n    if (!validateFormData($username, $email, $password)) {\n        return array('success' => false, 'message' => 'Invalid form data');\n    }\n\n    // Hash the password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to the database\n    $conn = connectToDatabase();\n\n    // Insert the new user into the database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('success' => true, 'message' => 'User created successfully');\n    } catch (PDOException $e) {\n        echo \"Error creating user: \" . $e->getMessage();\n        return array('success' => false, 'message' => 'Error creating user');\n    }\n\n    // Close the database connection\n    $conn = null;\n}\n\n// Validate form data\nfunction validateFormData($username, $email, $password) {\n    if (empty($username)) {\n        return false;\n    }\n    if (empty($email)) {\n        return false;\n    }\n    if (empty($password)) {\n        return false;\n    }\n\n    // Check for valid email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false;\n    }\n\n    // Minimum password length is 8 characters\n    if (strlen($password) < 8) {\n        return false;\n    }\n\n    return true;\n}\n\n?>\n```", null, "```php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    $result = registerUser($username, $email, $password);\n    if ($result['success']) {\n        echo 'User created successfully!';\n    } else {\n        echo 'Error creating user: ' . $result['message'];\n    }\n}\n```"]}
