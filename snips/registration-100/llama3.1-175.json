{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration system in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Set up error messages array\n$errors = [];\n\n// Define database connection settings (replace with your own)\n$dbHost = 'localhost';\n$dbUsername = 'username';\n$dbPassword = 'password';\n$dbName = 'database';\n\n// Create a new PDO object for database connection\ntry {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Function to register a user\nfunction registerUser($username, $email, $password)\n{\n    global $pdo;\n\n    // Check if username or email already exists in the database\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username=:username OR email=:email\");\n    $stmt->execute([':username' => $username, ':email' => $email]);\n    $userExists = $stmt->fetch();\n\n    // Check if user data is valid\n    if ($userExists) {\n        return ['error' => 'Username or email already exists'];\n    }\n\n    // Hash password before storing in database\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into the database\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashedPassword]);\n    } catch (PDOException $e) {\n        echo \"Error registering user: \" . $e->getMessage();\n        return ['error' => 'Database error'];\n    }\n\n    // Return success message\n    return ['success' => true];\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (!empty($username) && !empty($email) && !empty($password)) {\n        // Validate input data\n        if (strlen($username) < 3 || strlen($username) > 30) {\n            $errors[] = 'Username must be between 3 and 30 characters';\n        }\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            $errors[] = 'Invalid email address';\n        }\n        if (strlen($password) < 8) {\n            $errors[] = 'Password must be at least 8 characters long';\n        }\n\n        // If no errors, register the user\n        if (empty($errors)) {\n            $result = registerUser($username, $email, $password);\n            if ($result['success']) {\n                echo \"User registered successfully!\";\n            } elseif ($result['error']) {\n                echo $result['error'];\n            }\n        } else {\n            // Display error messages\n            echo 'Error: ';\n            foreach ($errors as $error) {\n                echo $error . '<br>';\n            }\n        }\n    } else {\n        echo 'Please fill in all required fields!';\n    }\n}\n\n?>\n```\nThis script uses the PDO (PHP Data Objects) extension to connect to a MySQL database. It includes the following features:\n\n1. **Input validation**: The script checks if the username and email are valid, and if the password meets the minimum length requirement.\n2. **Database connection**: The script connects to the specified database using PDO.\n3. **User registration**: If the user data is valid, it registers a new user by inserting their details into the `users` table.\n4. **Error handling**: If any errors occur during registration, the script displays an error message.\n\n**How to use:**\n\n1. Create a new PHP file called `register.php`.\n2. Copy and paste this code into the file.\n3. Replace the database connection settings with your own (e.g., `$dbHost`, `$dbUsername`, etc.).\n4. Set up a form on your website to collect user data (username, email, password) and submit it to this script using an HTTP POST request.\n\nNote: This is just a basic example to get you started. You should always validate user input thoroughly and use prepared statements with parameterized queries to prevent SQL injection attacks. Additionally, consider implementing additional security measures such as password salting, two-factor authentication, and account verification mechanisms.", "code_blocks": ["```php\n<?php\n\n// Set up error messages array\n$errors = [];\n\n// Define database connection settings (replace with your own)\n$dbHost = 'localhost';\n$dbUsername = 'username';\n$dbPassword = 'password';\n$dbName = 'database';\n\n// Create a new PDO object for database connection\ntry {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Function to register a user\nfunction registerUser($username, $email, $password)\n{\n    global $pdo;\n\n    // Check if username or email already exists in the database\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username=:username OR email=:email\");\n    $stmt->execute([':username' => $username, ':email' => $email]);\n    $userExists = $stmt->fetch();\n\n    // Check if user data is valid\n    if ($userExists) {\n        return ['error' => 'Username or email already exists'];\n    }\n\n    // Hash password before storing in database\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into the database\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->execute([':username' => $username, ':email' => $email, ':password' => $hashedPassword]);\n    } catch (PDOException $e) {\n        echo \"Error registering user: \" . $e->getMessage();\n        return ['error' => 'Database error'];\n    }\n\n    // Return success message\n    return ['success' => true];\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (!empty($username) && !empty($email) && !empty($password)) {\n        // Validate input data\n        if (strlen($username) < 3 || strlen($username) > 30) {\n            $errors[] = 'Username must be between 3 and 30 characters';\n        }\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            $errors[] = 'Invalid email address';\n        }\n        if (strlen($password) < 8) {\n            $errors[] = 'Password must be at least 8 characters long';\n        }\n\n        // If no errors, register the user\n        if (empty($errors)) {\n            $result = registerUser($username, $email, $password);\n            if ($result['success']) {\n                echo \"User registered successfully!\";\n            } elseif ($result['error']) {\n                echo $result['error'];\n            }\n        } else {\n            // Display error messages\n            echo 'Error: ';\n            foreach ($errors as $error) {\n                echo $error . '<br>';\n            }\n        }\n    } else {\n        echo 'Please fill in all required fields!';\n    }\n}\n\n?>\n```"]}
