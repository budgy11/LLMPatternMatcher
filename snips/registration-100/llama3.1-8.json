{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP that includes password hashing, email verification, and error handling.\n\n### Configuration\n\nBefore running the code, you need to configure your database settings. Create a file named `config.php` with the following content:\n\n```php\n<?php\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Email configuration\ndefine('EMAIL_FROM_ADDRESS', 'your_email_address');\ndefine('EMAIL_VERIFICATION_LINK_SECRET', 'secret_key_for_email_verification');\n```\n\n### User Registration Function\n\nCreate a file named `register.php` with the following content:\n\n```php\n<?php\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'Please fill in all fields.');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n        // Check if email is already registered\n        $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        if ($stmt->fetch()) {\n            return array('error' => 'Email address is already taken.');\n        }\n\n        // Hash password\n        $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $passwordHash);\n        $stmt->execute();\n\n        // Generate verification link\n        $verificationLink = generateVerificationLink($conn, $email);\n\n        return array('success' => 'User registered successfully. Please verify your email address by clicking the following link: ' . $verificationLink);\n\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return array('error' => 'An error occurred while registering user.');\n    }\n}\n\nfunction generateVerificationLink($conn, $email) {\n    // Generate secret token\n    $secretToken = bin2hex(random_bytes(16));\n\n    // Insert new verification record into database\n    $stmt = $conn->prepare('INSERT INTO verification_tokens (token, email) VALUES (:token, :email)');\n    $stmt->bindParam(':token', $secretToken);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // Generate verification link\n    $verificationLink = 'http://example.com/verify-email?token=' . urlencode($secretToken);\n\n    return $verificationLink;\n}\n```\n\n### Verification Link\n\nCreate a file named `verify-email.php` with the following content:\n\n```php\n<?php\nrequire_once 'config.php';\n\nfunction verifyEmail($token) {\n    // Validate input data\n    if (empty($token)) {\n        return array('error' => 'Invalid token.');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n        // Check if verification token is valid\n        $stmt = $conn->prepare('SELECT * FROM verification_tokens WHERE token = :token AND email IS NOT NULL');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n        if (!$stmt->fetch()) {\n            return array('error' => 'Invalid token or has been used.');\n        }\n\n        // Activate user account\n        $stmt = $conn->prepare('UPDATE users SET active = 1 WHERE email IN (SELECT email FROM verification_tokens WHERE token = :token)');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n\n        return array('success' => 'Email address verified successfully.');\n\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return array('error' => 'An error occurred while verifying email.');\n    }\n}\n```\n\n### Example Usage\n\nTo use the `registerUser` function, call it with the required arguments:\n\n```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\necho json_encode($result);\n```\n\nThis will return a JSON response indicating whether the user was registered successfully or not. If successful, it will also include a verification link that the user can click to verify their email address.\n\nRemember to replace `http://example.com/verify-email` with your actual URL in the `generateVerificationLink` function.", "code_blocks": ["```php\n<?php\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Email configuration\ndefine('EMAIL_FROM_ADDRESS', 'your_email_address');\ndefine('EMAIL_VERIFICATION_LINK_SECRET', 'secret_key_for_email_verification');\n```", "```php\n<?php\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'Please fill in all fields.');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n        // Check if email is already registered\n        $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        if ($stmt->fetch()) {\n            return array('error' => 'Email address is already taken.');\n        }\n\n        // Hash password\n        $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $passwordHash);\n        $stmt->execute();\n\n        // Generate verification link\n        $verificationLink = generateVerificationLink($conn, $email);\n\n        return array('success' => 'User registered successfully. Please verify your email address by clicking the following link: ' . $verificationLink);\n\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return array('error' => 'An error occurred while registering user.');\n    }\n}\n\nfunction generateVerificationLink($conn, $email) {\n    // Generate secret token\n    $secretToken = bin2hex(random_bytes(16));\n\n    // Insert new verification record into database\n    $stmt = $conn->prepare('INSERT INTO verification_tokens (token, email) VALUES (:token, :email)');\n    $stmt->bindParam(':token', $secretToken);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // Generate verification link\n    $verificationLink = 'http://example.com/verify-email?token=' . urlencode($secretToken);\n\n    return $verificationLink;\n}\n```", "```php\n<?php\nrequire_once 'config.php';\n\nfunction verifyEmail($token) {\n    // Validate input data\n    if (empty($token)) {\n        return array('error' => 'Invalid token.');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n        // Check if verification token is valid\n        $stmt = $conn->prepare('SELECT * FROM verification_tokens WHERE token = :token AND email IS NOT NULL');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n        if (!$stmt->fetch()) {\n            return array('error' => 'Invalid token or has been used.');\n        }\n\n        // Activate user account\n        $stmt = $conn->prepare('UPDATE users SET active = 1 WHERE email IN (SELECT email FROM verification_tokens WHERE token = :token)');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n\n        return array('success' => 'Email address verified successfully.');\n\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return array('error' => 'An error occurred while verifying email.');\n    }\n}\n```", "```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\necho json_encode($result);\n```"]}
