{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes input validation, password hashing, and database interaction.\n\n### Database Schema\n\nAssuming you have the following table schema in your database:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### User Registration Function\n\n```php\nfunction registerUser($data)\n{\n  // Input validation and sanitization\n  $validatedData = validateRegistrationData($data);\n\n  if (!$validatedData) {\n    return ['error' => 'Invalid data'];\n  }\n\n  try {\n    // Hash password\n    $passwordHash = hashPassword($validatedData['password']);\n\n    // Insert user into database\n    $userId = insertUserIntoDatabase($validatedData);\n\n    return [\n      'success' => true,\n      'message' => 'User registered successfully',\n      'user_id' => $userId\n    ];\n  } catch (Exception $e) {\n    return ['error' => 'Error registering user'];\n  }\n}\n\nfunction validateRegistrationData($data)\n{\n  // Validate username and email\n  if (!isset($data['username']) || !isset($data['email'])) {\n    return false;\n  }\n\n  if (strlen($data['username']) < 3 || strlen($data['username']) > 255) {\n    return false;\n  }\n\n  if (filter_var($data['email'], FILTER_VALIDATE_EMAIL) === false) {\n    return false;\n  }\n\n  // Validate password\n  if (!isset($data['password'])) {\n    return false;\n  }\n\n  if (strlen($data['password']) < 8 || strlen($data['password']) > 255) {\n    return false;\n  }\n\n  return [\n    'username' => $data['username'],\n    'email' => $data['email'],\n    'password' => $data['password']\n  ];\n}\n\nfunction hashPassword($password)\n{\n  // Implement your preferred password hashing algorithm (e.g. bcrypt, Argon2)\n  // For demonstration purposes, we're using simple SHA-256\n  return hash('sha256', $password);\n}\n\nfunction insertUserIntoDatabase($user)\n{\n  global $db;\n\n  try {\n    $stmt = $db->prepare(\"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\");\n    $stmt->execute([$user['username'], $user['email'], $user['password']]);\n\n    return $db->lastInsertId();\n  } catch (Exception $e) {\n    throw new Exception('Error inserting user into database');\n  }\n}\n```\n\n### Example Usage\n\n```php\n$data = [\n  'username' => 'johnDoe',\n  'email' => 'johndoe@example.com',\n  'password' => 'mysecretpassword'\n];\n\n$response = registerUser($data);\n\nif ($response['success']) {\n  echo \"User registered successfully\";\n} else {\n  echo \"Error: \" . $response['error'];\n}\n```\n\nRemember to adapt the function and database schema according to your specific requirements.", "code_blocks": [null, "```php\nfunction registerUser($data)\n{\n  // Input validation and sanitization\n  $validatedData = validateRegistrationData($data);\n\n  if (!$validatedData) {\n    return ['error' => 'Invalid data'];\n  }\n\n  try {\n    // Hash password\n    $passwordHash = hashPassword($validatedData['password']);\n\n    // Insert user into database\n    $userId = insertUserIntoDatabase($validatedData);\n\n    return [\n      'success' => true,\n      'message' => 'User registered successfully',\n      'user_id' => $userId\n    ];\n  } catch (Exception $e) {\n    return ['error' => 'Error registering user'];\n  }\n}\n\nfunction validateRegistrationData($data)\n{\n  // Validate username and email\n  if (!isset($data['username']) || !isset($data['email'])) {\n    return false;\n  }\n\n  if (strlen($data['username']) < 3 || strlen($data['username']) > 255) {\n    return false;\n  }\n\n  if (filter_var($data['email'], FILTER_VALIDATE_EMAIL) === false) {\n    return false;\n  }\n\n  // Validate password\n  if (!isset($data['password'])) {\n    return false;\n  }\n\n  if (strlen($data['password']) < 8 || strlen($data['password']) > 255) {\n    return false;\n  }\n\n  return [\n    'username' => $data['username'],\n    'email' => $data['email'],\n    'password' => $data['password']\n  ];\n}\n\nfunction hashPassword($password)\n{\n  // Implement your preferred password hashing algorithm (e.g. bcrypt, Argon2)\n  // For demonstration purposes, we're using simple SHA-256\n  return hash('sha256', $password);\n}\n\nfunction insertUserIntoDatabase($user)\n{\n  global $db;\n\n  try {\n    $stmt = $db->prepare(\"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\");\n    $stmt->execute([$user['username'], $user['email'], $user['password']]);\n\n    return $db->lastInsertId();\n  } catch (Exception $e) {\n    throw new Exception('Error inserting user into database');\n  }\n}\n```", "```php\n$data = [\n  'username' => 'johnDoe',\n  'email' => 'johndoe@example.com',\n  'password' => 'mysecretpassword'\n];\n\n$response = registerUser($data);\n\nif ($response['success']) {\n  echo \"User registered successfully\";\n} else {\n  echo \"Error: \" . $response['error'];\n}\n```"]}
