{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, I need to create a user registration function in PHP. Let me think about how to approach this.\n\nFirst, I should consider the basic information needed for registration. Usually, users provide their full name, email, username, and password. So, I'll include these fields in my form.\n\nNext, I need to handle form submission. When the user submits the form, I should process the data. I'll check if the POST request is set for each field.\n\nValidation is crucial. For each input, I should ensure they're not empty. Also, checking if the email is valid using PHP's built-in functions makes sense. I'll use filter_var with FILTER_VALIDATE_EMAIL for that.\n\nPasswords need to be secure. I'll require a minimum length, maybe 8 characters, and enforce at least one uppercase letter, one lowercase letter, one number, and a special character. Using regular expressions can help with this validation.\n\nAfter validation, if there are errors, I should display them to the user so they know what to fix. If everything is correct, I'll prepare to insert the data into the database.\n\nStoring passwords in plain text is a bad idea. I'll use password_hash() to securely hash the password before saving it to the database. This ensures even if the database is compromised, passwords aren't exposed.\n\nFor the database connection, I'll use PDO because it's secure and supports prepared statements, which help prevent SQL injection. I'll set up the connection with error mode exceptions for easier debugging.\n\nIn the registration function, I'll first check if a user with the same email or username already exists. If they do, I'll return an appropriate error message to avoid duplicates.\n\nIf all checks pass, I'll insert the new user into the database using prepared statements. After successful insertion, redirecting the user to a login page makes sense as the next logical step.\n\nI should also handle any exceptions that might occur during database operations and display meaningful error messages to the user.\n\nFinally, I'll make sure to include the registration form in the HTML so users can input their details. The form should use POST method and point to the same script for processing.\n\nTesting each part as I go is important. I'll check validation errors, ensure passwords are hashed correctly, and verify database insertion works without issues.\n</think>\n\nHere's an example of a user registration function using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'user_database';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create a database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Function to register a user\n    function registerUser($conn) {\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // Sanitize input data\n            $full_name = htmlspecialchars(trim($_POST['full_name']));\n            $email = htmlspecialchars(trim($_POST['email']));\n            $username = htmlspecialchars(trim($_POST['username']));\n            $password = $_POST['password'];\n            $confirm_password = $_POST['confirm_password'];\n\n            // Validate input data\n            $errors = array();\n\n            if (empty($full_name)) {\n                $errors[] = \"Full name is required\";\n            }\n\n            if (empty($email)) {\n                $errors[] = \"Email is required\";\n            } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $errors[] = \"Invalid email format\";\n            }\n\n            if (empty($username)) {\n                $errors[] = \"Username is required\";\n            }\n\n            if (empty($password)) {\n                $errors[] = \"Password is required\";\n            } elseif (!preg_match('/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{8,}$/', $password)) {\n                $errors[] = \"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and a special character\";\n            }\n\n            if ($password != $confirm_password) {\n                $errors[] = \"Passwords do not match\";\n            }\n\n            // If there are errors\n            if (!empty($errors)) {\n                foreach ($errors as $error) {\n                    echo \"<div class='error'>$error</div>\";\n                }\n                return;\n            }\n\n            // Check if user already exists\n            $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = :email OR username = :username\");\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':username', $username);\n            $stmt->execute();\n\n            if ($stmt->rowCount() > 0) {\n                echo \"<div class='error'>User with this email or username already exists</div>\";\n                return;\n            }\n\n            // Hash the password\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n            // Insert user into database\n            $stmt = $conn->prepare(\"INSERT INTO users (full_name, email, username, password) VALUES (:full_name, :email, :username, :password)\");\n            $stmt->bindParam(':full_name', $full_name);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':username', $username);\n            $stmt->bindParam(':password', $hashed_password);\n\n            try {\n                $stmt->execute();\n                // Registration successful\n                echo \"<div class='success'>Registration successful! Please login.</div>\";\n                header(\"Location: login.php\");\n                exit();\n            } catch (PDOException $e) {\n                echo \"<div class='error'>Error registering user: \" . $e->getMessage() . \"</div>\";\n            }\n        }\n    }\n\n    // Call the registration function\n    registerUser($conn);\n\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            background-color: white;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        }\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n        .success {\n            color: green;\n            margin-bottom: 10px;\n        }\n        input {\n            width: 100%;\n            padding: 10px;\n            margin: 5px 0;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Registration Form</h1>\n        <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n            <input type=\"text\" placeholder=\"Full Name\" name=\"full_name\" required><br>\n            <input type=\"email\" placeholder=\"Email\" name=\"email\" required><br>\n            <input type=\"text\" placeholder=\"Username\" name=\"username\" required><br>\n            <input type=\"password\" placeholder=\"Password\" name=\"password\" required><br>\n            <input type=\"password\" placeholder=\"Confirm Password\" name=\"confirm_password\" required><br>\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n</body>\n</html>\n```\n\nThis PHP script includes:\n\n1. A secure registration form\n2. Input validation for all fields\n3. Password strength requirements\n4. Email validation\n5. Unique username and email check\n6. Password hashing using PHP's `password_hash()` function\n7. PDO database connection with error handling\n8. Form styling\n\nKey features:\n- Checks if the user already exists in the database\n- Uses prepared statements to prevent SQL injection\n- Validates all input data\n- Hashes passwords before storing them\n- Includes error messages for invalid inputs\n- Provides feedback for successful registration\n- Responsive design\n\nTo use this code:\n\n1. Create a database named `user_database`\n2. Create a table `users` with columns:\n   - id (INT, PRIMARY KEY, AUTO_INCREMENT)\n   - full_name (VARCHAR(255))\n   - email (VARCHAR(255), UNIQUE)\n   - username (VARCHAR(255), UNIQUE)\n   - password (VARCHAR(255))\n\n3. Update the database connection details in the script\n\nThe code includes:\n- Input sanitization and validation\n- Password complexity requirements\n- Secure password hashing\n- Error handling\n- Database connectivity with PDO\n- Prevention of SQL injection\n- Form styling\n\nYou can customize the error messages, styling, and database schema according to your needs.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'user_database';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create a database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Function to register a user\n    function registerUser($conn) {\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // Sanitize input data\n            $full_name = htmlspecialchars(trim($_POST['full_name']));\n            $email = htmlspecialchars(trim($_POST['email']));\n            $username = htmlspecialchars(trim($_POST['username']));\n            $password = $_POST['password'];\n            $confirm_password = $_POST['confirm_password'];\n\n            // Validate input data\n            $errors = array();\n\n            if (empty($full_name)) {\n                $errors[] = \"Full name is required\";\n            }\n\n            if (empty($email)) {\n                $errors[] = \"Email is required\";\n            } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                $errors[] = \"Invalid email format\";\n            }\n\n            if (empty($username)) {\n                $errors[] = \"Username is required\";\n            }\n\n            if (empty($password)) {\n                $errors[] = \"Password is required\";\n            } elseif (!preg_match('/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{8,}$/', $password)) {\n                $errors[] = \"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and a special character\";\n            }\n\n            if ($password != $confirm_password) {\n                $errors[] = \"Passwords do not match\";\n            }\n\n            // If there are errors\n            if (!empty($errors)) {\n                foreach ($errors as $error) {\n                    echo \"<div class='error'>$error</div>\";\n                }\n                return;\n            }\n\n            // Check if user already exists\n            $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = :email OR username = :username\");\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':username', $username);\n            $stmt->execute();\n\n            if ($stmt->rowCount() > 0) {\n                echo \"<div class='error'>User with this email or username already exists</div>\";\n                return;\n            }\n\n            // Hash the password\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n            // Insert user into database\n            $stmt = $conn->prepare(\"INSERT INTO users (full_name, email, username, password) VALUES (:full_name, :email, :username, :password)\");\n            $stmt->bindParam(':full_name', $full_name);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':username', $username);\n            $stmt->bindParam(':password', $hashed_password);\n\n            try {\n                $stmt->execute();\n                // Registration successful\n                echo \"<div class='success'>Registration successful! Please login.</div>\";\n                header(\"Location: login.php\");\n                exit();\n            } catch (PDOException $e) {\n                echo \"<div class='error'>Error registering user: \" . $e->getMessage() . \"</div>\";\n            }\n        }\n    }\n\n    // Call the registration function\n    registerUser($conn);\n\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            background-color: white;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        }\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n        .success {\n            color: green;\n            margin-bottom: 10px;\n        }\n        input {\n            width: 100%;\n            padding: 10px;\n            margin: 5px 0;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Registration Form</h1>\n        <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n            <input type=\"text\" placeholder=\"Full Name\" name=\"full_name\" required><br>\n            <input type=\"email\" placeholder=\"Email\" name=\"email\" required><br>\n            <input type=\"text\" placeholder=\"Username\" name=\"username\" required><br>\n            <input type=\"password\" placeholder=\"Password\" name=\"password\" required><br>\n            <input type=\"password\" placeholder=\"Confirm Password\" name=\"confirm_password\" required><br>\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n</body>\n</html>\n```"]}
