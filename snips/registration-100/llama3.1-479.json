{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function written in PHP. This example uses prepared statements to prevent SQL injection attacks.\n\n### MySQL Database Setup\n\nFirst, create a MySQL database and add the following table:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    PRIMARY KEY (id)\n);\n```\n\n### PHP User Registration Function\n\n```php\n<?php\n\n// Configuration\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction registerUser($username, $email, $password)\n{\n    // Hash password for security\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    \n    // Bind parameters\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n    \n    // Execute query\n    if ($stmt->execute()) {\n        return true;\n    } else {\n        echo \"Error: \" . $conn->error;\n        return false;\n    }\n}\n\n// Example usage:\nif (isset($_POST['register'])) {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (!empty($username) && !empty($email) && !empty($password)) {\n        if (registerUser($username, $email, $password)) {\n            echo \"User registered successfully!\";\n        }\n    } else {\n        echo \"Please fill in all fields.\";\n    }\n}\n\n// Close database connection\n$conn->close();\n?>\n```\n\n### HTML Registration Form\n\nCreate an HTML form to capture user input:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\" name=\"register\">Register</button>\n</form>\n\n<?php\n// PHP code from above goes here...\n?>\n\n</body>\n</html>\n```\n\nThis example demonstrates a basic user registration function in PHP, including password hashing for security. Remember to adapt the configuration variables (`$host`, `$dbname`, etc.) to your specific database setup.\n\n### Notes\n\n*   Always validate user input and ensure it conforms to expected formats.\n*   Use prepared statements and parameter binding to prevent SQL injection attacks.\n*   Hash passwords using a secure algorithm (e.g., `password_hash()`).\n*   Consider implementing additional security measures, such as email verification or password strength requirements.\n\n### Example Use Cases\n\n*   User registration for web applications\n*   Creating user accounts for online services\n*   Handling user sign-ups and authentication", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction registerUser($username, $email, $password)\n{\n    // Hash password for security\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    \n    // Bind parameters\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n    \n    // Execute query\n    if ($stmt->execute()) {\n        return true;\n    } else {\n        echo \"Error: \" . $conn->error;\n        return false;\n    }\n}\n\n// Example usage:\nif (isset($_POST['register'])) {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (!empty($username) && !empty($email) && !empty($password)) {\n        if (registerUser($username, $email, $password)) {\n            echo \"User registered successfully!\";\n        }\n    } else {\n        echo \"Please fill in all fields.\";\n    }\n}\n\n// Close database connection\n$conn->close();\n?>\n```", null]}
