{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThis example demonstrates a basic user registration function in PHP. It includes input validation, password hashing, and data storage in a MySQL database.\n\n**Database Setup**\n\nFirst, you need to create a database table to store user information:\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(255) NOT NULL UNIQUE,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n**User Registration Function**\n```php\nfunction register_user($username, $email, $password) {\n  // Input validation\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  // Password hashing\n  $password_hash = password_hash($password, PASSWORD_DEFAULT);\n\n  // Connect to database\n  $conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n  try {\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password_hash) VALUES (:username, :email, :password_hash)\");\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password_hash', $password_hash);\n\n    // Execute query\n    $stmt->execute();\n\n    // Return user ID (auto-incremented primary key)\n    return $conn->lastInsertId();\n  } catch (PDOException $e) {\n    throw new Exception(\"Database error: \" . $e->getMessage());\n  }\n}\n```\n**Example Usage**\n```php\ntry {\n  $userId = register_user('johnDoe', 'johndoe@example.com', 'password123');\n  echo \"User registered successfully. ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```\n**Notes**\n\n* This implementation uses the `PDO` extension for database interactions.\n* Password hashing is done using the `password_hash()` function, which generates a secure hash using the specified password and salt.\n* Input validation checks for empty fields to prevent SQL injection attacks.\n* The function returns the auto-incremented primary key of the newly created user.\n\nRemember to replace placeholders like `your_database`, `username`, and `password` with your actual database credentials.", "code_blocks": [null, "```php\nfunction register_user($username, $email, $password) {\n  // Input validation\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  // Password hashing\n  $password_hash = password_hash($password, PASSWORD_DEFAULT);\n\n  // Connect to database\n  $conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n  try {\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password_hash) VALUES (:username, :email, :password_hash)\");\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password_hash', $password_hash);\n\n    // Execute query\n    $stmt->execute();\n\n    // Return user ID (auto-incremented primary key)\n    return $conn->lastInsertId();\n  } catch (PDOException $e) {\n    throw new Exception(\"Database error: \" . $e->getMessage());\n  }\n}\n```", "```php\ntry {\n  $userId = register_user('johnDoe', 'johndoe@example.com', 'password123');\n  echo \"User registered successfully. ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```"]}
