{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP that includes validation, hashing, and storing the data in a database.\n\n**Database Configuration**\n-------------------------\n\nFirst, ensure you have a MySQL database set up with a table named `users` containing at least the following columns:\n\n| Column Name | Data Type | Description |\n|-------------|-----------|-------------|\n| id          | int       | Unique ID for each user. |\n| username    | varchar   | The chosen username by the user. |\n| email       | varchar   | The email address of the user. |\n| password    | varchar   | The hashed version of the user's password. |\n\n**PHP Function**\n----------------\n\n```php\n<?php\n\n// Configuration constants\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\nfunction dbConnect() {\n    global $conn;\n    try {\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USERNAME, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        die(\"Error connecting to database: \" . $e->getMessage());\n    }\n}\n\n// User registration function\nfunction registerUser($username, $email, $password) {\n    global $conn;\n    \n    // Check if email and username already exist\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email OR username = :username\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        \n        if ($stmt->rowCount() > 0) {\n            return array('error' => 'Email or username already taken');\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking for existing users: \" . $e->getMessage());\n    }\n    \n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    \n    try {\n        // Insert new user into database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        \n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        die(\"Error registering user: \" . $e->getMessage());\n    }\n}\n\n// Example usage\ndbConnect(); // Connect to database before using the function\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif (isset($result['error'])) {\n    echo $result['error']; // Output: Email or username already taken\n} else if (isset($result['success'])) {\n    echo $result['success']; // Output: User registered successfully\n}\n\n?>\n```\n\n**Security Considerations**\n\n- The function uses prepared statements to prevent SQL injection.\n- It utilizes the `password_hash` and `PASSWORD_DEFAULT` constants for secure password hashing, following best practices.\n- Error handling is included to make debugging easier.\n\n**Note**: Always follow good coding practices by using a separate file for database configuration and including it in your main code when necessary. This example assumes you have PHP installed with PDO support. If not, adjust the connection method according to your setup.", "code_blocks": ["```php\n<?php\n\n// Configuration constants\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\nfunction dbConnect() {\n    global $conn;\n    try {\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USERNAME, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        die(\"Error connecting to database: \" . $e->getMessage());\n    }\n}\n\n// User registration function\nfunction registerUser($username, $email, $password) {\n    global $conn;\n    \n    // Check if email and username already exist\n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email OR username = :username\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        \n        if ($stmt->rowCount() > 0) {\n            return array('error' => 'Email or username already taken');\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking for existing users: \" . $e->getMessage());\n    }\n    \n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    \n    try {\n        // Insert new user into database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        \n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        die(\"Error registering user: \" . $e->getMessage());\n    }\n}\n\n// Example usage\ndbConnect(); // Connect to database before using the function\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif (isset($result['error'])) {\n    echo $result['error']; // Output: Email or username already taken\n} else if (isset($result['success'])) {\n    echo $result['success']; // Output: User registered successfully\n}\n\n?>\n```"]}
