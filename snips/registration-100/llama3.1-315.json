{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere is an example of a user registration function in PHP that includes input validation, password hashing, and database storage.\n\n**Code:**\n```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbName = 'database_name';\n$dbUsername = 'username';\n$dbPassword = 'password';\n\n// Function to register a new user\nfunction registerUser($userData) {\n    // Validate input data\n    if (!isset($userData['email']) || !filter_var($userData['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    if (!isset($userData['username']) || strlen($userData['username']) < 3 || strlen($userData['username']) > 32) {\n        throw new Exception('Username must be between 3 and 32 characters long');\n    }\n\n    if (!isset($userData['password']) || strlen($userData['password']) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($userData['password'], PASSWORD_DEFAULT);\n\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Insert user data into database\n    try {\n        $stmt = $conn->prepare('INSERT INTO users (email, username, password) VALUES (:email, :username, :password)');\n        $stmt->bindParam(':email', $userData['email']);\n        $stmt->bindParam(':username', $userData['username']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return success message\n        return 'User registered successfully';\n    } catch (PDOException $e) {\n        throw new Exception('Failed to register user: ' . $e->getMessage());\n    }\n}\n\n?>\n```\n**Example Use Case:**\n```php\n// User data array\n$userData = [\n    'email' => 'john.doe@example.com',\n    'username' => 'johndoe',\n    'password' => 'mysecretpassword'\n];\n\ntry {\n    // Call registerUser function with user data\n    $result = registerUser($userData);\n    echo $result; // Output: User registered successfully\n} catch (Exception $e) {\n    echo $e->getMessage(); // Output: Error message\n}\n```\n**Notes:**\n\n* This example assumes you have a MySQL database set up and the necessary PDO extensions enabled.\n* Password hashing is done using `password_hash()` with the default algorithm (currently bcrypt).\n* Input data validation checks for email address, username length, and password length.\n* The function returns a success message on successful registration, or throws an exception if any errors occur.\n\nRemember to replace the placeholders (`$dbHost`, `$dbName`, `$dbUsername`, `$dbPassword`) with your actual database credentials.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbName = 'database_name';\n$dbUsername = 'username';\n$dbPassword = 'password';\n\n// Function to register a new user\nfunction registerUser($userData) {\n    // Validate input data\n    if (!isset($userData['email']) || !filter_var($userData['email'], FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    if (!isset($userData['username']) || strlen($userData['username']) < 3 || strlen($userData['username']) > 32) {\n        throw new Exception('Username must be between 3 and 32 characters long');\n    }\n\n    if (!isset($userData['password']) || strlen($userData['password']) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($userData['password'], PASSWORD_DEFAULT);\n\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Insert user data into database\n    try {\n        $stmt = $conn->prepare('INSERT INTO users (email, username, password) VALUES (:email, :username, :password)');\n        $stmt->bindParam(':email', $userData['email']);\n        $stmt->bindParam(':username', $userData['username']);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return success message\n        return 'User registered successfully';\n    } catch (PDOException $e) {\n        throw new Exception('Failed to register user: ' . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\n// User data array\n$userData = [\n    'email' => 'john.doe@example.com',\n    'username' => 'johndoe',\n    'password' => 'mysecretpassword'\n];\n\ntry {\n    // Call registerUser function with user data\n    $result = registerUser($userData);\n    echo $result; // Output: User registered successfully\n} catch (Exception $e) {\n    echo $e->getMessage(); // Output: Error message\n}\n```"]}
