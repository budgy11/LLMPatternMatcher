{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, the user asked to create a user registration function using PHP. I need to provide a clear and secure example.\n\nFirst, I should outline the basic structure: HTML form for input and a PHP script to handle submission.\n\nSecurity is crucial, so I'll include sanitization functions to clean the inputs. That means stripping tags and escaping special characters.\n\nNext, password handling must be secure. I'll use password_hash() to hash the password and store it in the database. Also, I should check if the password meets certain criteria like length and complexity.\n\nI need to validate each input field: username, email, password, confirm password. Checks for empty fields, valid email format, matching passwords, etc.\n\nDatabase interaction is another key point. Using mysqli to connect securely, preparing statements to prevent SQL injection, and checking for existing usernames or emails.\n\nAfter validation, if everything's okay, I'll insert the data into the database. Then, provide feedback like success messages or error logs.\n\nI should also include a redirect after successful registration to avoid resubmission issues.\n\nFinally, I'll note important considerations like configuration settings, form styling, and CSRF protection for completeness.\n\nPutting it all together, I'll structure the code with clear sections: sanitization functions, validation logic, database connection, query execution, and feedback handling.\n</think>\n\nHere's a simple user registration function in PHP that includes input validation, password hashing, and database interaction:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'registration';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = htmlspecialchars($data);\n    $data = mysqli_real_escape_string($GLOBALS['conn'], $data);\n    return $data;\n}\n\n// Registration function\nfunction registerUser() {\n    // Get form data\n    $username = sanitizeInput($_POST['username']);\n    $email = sanitizeInput($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate input fields\n    if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n        return \"Please fill in all required fields.\";\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    if ($password !== $confirm_password) {\n        return \"Passwords do not match.\";\n    }\n\n    // Password requirements: at least 8 characters with letters and numbers\n    if (strlen($password) < 8 || !preg_match('/^[a-zA-Z0-9]+$/', $password)) {\n        return \"Password must be at least 8 characters long and contain only letters and numbers.\";\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Check if username already exists\n    $check_username = \"SELECT id FROM users WHERE username = ?\";\n    $stmt = $conn->prepare($check_username);\n    $stmt->bind_param(\"s\", $username);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        return \"Username already exists.\";\n    }\n\n    // Check if email already exists\n    $check_email = \"SELECT id FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($check_email);\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        return \"Email already exists.\";\n    }\n\n    // Insert new user into database\n    $insert_user = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($insert_user);\n    $stmt->bind_param(\"sss\", $username, $email, $hashed_password);\n\n    if ($stmt->execute()) {\n        return \"Registration successful!\";\n    } else {\n        return \"Error registering user: \" . $conn->error;\n    }\n}\n\n// Close database connection\n$conn->close();\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = registerUser();\n    echo $result;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Registration Page</title>\n</head>\n<body>\n    <h2>Register Here</h2>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        Username: <input type=\"text\" name=\"username\"><br>\n        Email: <input type=\"email\" name=\"email\"><br>\n        Password: <input type=\"password\" name=\"password\"><br>\n        Confirm Password: <input type=\"password\" name=\"confirm_password\"><br>\n        <input type=\"submit\" value=\"Register\">\n    </form>\n</body>\n</html>\n```\n\nThis registration script includes the following features:\n\n1. Input sanitization and validation\n2. Email format checking\n3. Password complexity requirements\n4. Username and email uniqueness checks\n5. Secure password hashing using PHP's `password_hash()` function\n6. Prevention against SQL injection\n7. Error handling\n\nTo use this script:\n\n1. Make sure to configure the database connection details at the top of the file\n2. Create a table named 'users' in your database with columns: id (int, primary key), username (varchar), email (varchar), password (varchar)\n3. The form will submit data via POST method\n4. Error messages are returned if any validation fails\n\nImportant security notes:\n\n1. Always use HTTPS to protect sensitive user information\n2. Never store plain text passwords in the database\n3. Use prepared statements to prevent SQL injection\n4. Consider adding additional security measures like:\n   - CSRF protection\n   - Password strength requirements\n   - Account verification via email\n   - Session management\n\nRemember to customize this script according to your specific needs and security requirements.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'registration';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = htmlspecialchars($data);\n    $data = mysqli_real_escape_string($GLOBALS['conn'], $data);\n    return $data;\n}\n\n// Registration function\nfunction registerUser() {\n    // Get form data\n    $username = sanitizeInput($_POST['username']);\n    $email = sanitizeInput($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate input fields\n    if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n        return \"Please fill in all required fields.\";\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    if ($password !== $confirm_password) {\n        return \"Passwords do not match.\";\n    }\n\n    // Password requirements: at least 8 characters with letters and numbers\n    if (strlen($password) < 8 || !preg_match('/^[a-zA-Z0-9]+$/', $password)) {\n        return \"Password must be at least 8 characters long and contain only letters and numbers.\";\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Check if username already exists\n    $check_username = \"SELECT id FROM users WHERE username = ?\";\n    $stmt = $conn->prepare($check_username);\n    $stmt->bind_param(\"s\", $username);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        return \"Username already exists.\";\n    }\n\n    // Check if email already exists\n    $check_email = \"SELECT id FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($check_email);\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        return \"Email already exists.\";\n    }\n\n    // Insert new user into database\n    $insert_user = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($insert_user);\n    $stmt->bind_param(\"sss\", $username, $email, $hashed_password);\n\n    if ($stmt->execute()) {\n        return \"Registration successful!\";\n    } else {\n        return \"Error registering user: \" . $conn->error;\n    }\n}\n\n// Close database connection\n$conn->close();\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = registerUser();\n    echo $result;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Registration Page</title>\n</head>\n<body>\n    <h2>Register Here</h2>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        Username: <input type=\"text\" name=\"username\"><br>\n        Email: <input type=\"email\" name=\"email\"><br>\n        Password: <input type=\"password\" name=\"password\"><br>\n        Confirm Password: <input type=\"password\" name=\"confirm_password\"><br>\n        <input type=\"submit\" value=\"Register\">\n    </form>\n</body>\n</html>\n```"]}
