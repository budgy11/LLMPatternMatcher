{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP. This script assumes you have the following:\n\n*   A MySQL database with a table called `users` that has the columns `username`, `email`, `password` (hashed), and other relevant fields.\n*   The `mysqli` extension installed, or an alternative database library like PDO.\n\n**Important:** In a production environment, consider using prepared statements to prevent SQL injection attacks. You'll see how to do this in the code example below.\n\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Function to register a user\nfunction registerUser($username, $email, $password) {\n    // Connect to the database\n    $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\n    // Check connection\n    if ($mysqli->connect_errno) {\n        echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n        return false;\n    }\n\n    // Prepare and execute SQL query (using prepared statements)\n    $stmt = $mysqli->prepare(\"INSERT INTO users SET username=?, email=?, password=?\");\n    $stmt->bind_param(\"sss\", $username, $email, hash('sha256', $password));\n\n    // Execute statement\n    if (!$stmt->execute()) {\n        echo \"Error registering user: \" . $stmt->error;\n        return false;\n    }\n\n    // Close the connection and statement\n    $stmt->close();\n    $mysqli->close();\n\n    return true;\n}\n\n// Example usage:\n$username = 'newuser';\n$email = 'new@example.com';\n$password = 'password';\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Failed to register user.\";\n}\n\n?>\n```\n\n**Note:**\n\n*   This example uses the `mysqli` extension for simplicity. In a real-world scenario, you might prefer to use PDO (PHP Data Objects), which offers better security and portability.\n*   Always hash passwords before storing them in your database using a strong hashing algorithm like SHA-256.\n*   This is a basic script; consider implementing additional validation and error handling based on your specific requirements.\n\nThis registration function should help you create users with the provided details. Make sure to replace placeholders (`your_host`, `your_username`, etc.) with actual values for your database setup.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Function to register a user\nfunction registerUser($username, $email, $password) {\n    // Connect to the database\n    $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\n    // Check connection\n    if ($mysqli->connect_errno) {\n        echo \"Failed to connect to MySQL: \" . $mysqli->connect_error;\n        return false;\n    }\n\n    // Prepare and execute SQL query (using prepared statements)\n    $stmt = $mysqli->prepare(\"INSERT INTO users SET username=?, email=?, password=?\");\n    $stmt->bind_param(\"sss\", $username, $email, hash('sha256', $password));\n\n    // Execute statement\n    if (!$stmt->execute()) {\n        echo \"Error registering user: \" . $stmt->error;\n        return false;\n    }\n\n    // Close the connection and statement\n    $stmt->close();\n    $mysqli->close();\n\n    return true;\n}\n\n// Example usage:\n$username = 'newuser';\n$email = 'new@example.com';\n$password = 'password';\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Failed to register user.\";\n}\n\n?>\n```"]}
