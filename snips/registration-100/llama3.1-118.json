{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a basic user registration function in PHP. This example assumes that you have already set up a database and created a table for storing users.\n\n### **Database Schema**\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### **User Registration Function**\n\n```php\nfunction registerUser($username, $email, $password) {\n  // Hash the password for security\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Prepare the SQL query to insert a new user\n  $query = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n  \n  try {\n    // Execute the query with prepared statements\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$username, $email, $hashedPassword]);\n    \n    // Get the ID of the newly inserted user\n    $userId = $pdo->lastInsertId();\n    \n    return [\n      'success' => true,\n      'message' => 'User registered successfully.',\n      'userId' => $userId,\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error registering user: ' . $e->getMessage(),\n    ];\n  }\n}\n```\n\n### **Example Usage**\n\n```php\n$pdo = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n  echo \"User registered successfully. ID: \" . $result['userId'];\n} else {\n  echo \"Error registering user: \" . $result['message'];\n}\n```\n\n### **Password Hashing**\n\nThe `registerUser` function uses the `password_hash` function to hash the password before storing it in the database. This ensures that passwords are stored securely and can't be retrieved even if an attacker gains access to the database.\n\n**Note:** Make sure to replace `database_name`, `username`, and `password` with your actual database credentials. Also, make sure to validate user input data (e.g., sanitize `$_POST` variables) before passing it to the function.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password) {\n  // Hash the password for security\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Prepare the SQL query to insert a new user\n  $query = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n  \n  try {\n    // Execute the query with prepared statements\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$username, $email, $hashedPassword]);\n    \n    // Get the ID of the newly inserted user\n    $userId = $pdo->lastInsertId();\n    \n    return [\n      'success' => true,\n      'message' => 'User registered successfully.',\n      'userId' => $userId,\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error registering user: ' . $e->getMessage(),\n    ];\n  }\n}\n```", "```php\n$pdo = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n  echo \"User registered successfully. ID: \" . $result['userId'];\n} else {\n  echo \"Error registering user: \" . $result['message'];\n}\n```"]}
