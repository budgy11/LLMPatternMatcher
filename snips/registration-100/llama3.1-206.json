{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP:\n\n**Note:** This is just a simple example and you should never store passwords in plain text. Always hash the password before storing it.\n\n**Registration Function:**\n```php\n<?php\n\nfunction registerUser($username, $email, $password) {\n    // Check for empty fields\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required.');\n    }\n\n    // Hash the password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    try {\n        $conn = new PDO('mysql:host=localhost;dbname=mydb', 'myuser', 'mypassword');\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        return array('error' => 'Database connection failed.');\n    }\n\n    // Check if username or email already exists\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username OR email = :email\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return array('error' => 'Username or email already exists.');\n    }\n\n    // Insert new user into database\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    // Return success message\n    return array('message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```\n**Example Use Case:**\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n} else {\n    echo 'Success: ' . $result['message'];\n}\n```\n**Security Considerations:**\n\n* Use a secure password hashing algorithm (in this case `password_hash()`).\n* Store passwords securely in the database using a hashed format.\n* Validate user input on the server-side to prevent SQL injection and other security vulnerabilities.\n\nNote that this is just a simple example, you may want to add more features such as email verification, forgot password functionality etc.", "code_blocks": ["```php\n<?php\n\nfunction registerUser($username, $email, $password) {\n    // Check for empty fields\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required.');\n    }\n\n    // Hash the password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    try {\n        $conn = new PDO('mysql:host=localhost;dbname=mydb', 'myuser', 'mypassword');\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        return array('error' => 'Database connection failed.');\n    }\n\n    // Check if username or email already exists\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username OR email = :email\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $result = $stmt->fetch();\n\n    if ($result) {\n        return array('error' => 'Username or email already exists.');\n    }\n\n    // Insert new user into database\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    // Return success message\n    return array('message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n} else {\n    echo 'Success: ' . $result['message'];\n}\n```"]}
