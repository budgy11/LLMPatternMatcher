{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP:\n\n**User Registration Function**\n```php\n<?php\n/**\n * User Registration Function\n *\n * @param string $username Username for the new account\n * @param string $email Email address for the new account\n * @param string $password Password for the new account\n * @return bool|object True if registration is successful, false otherwise with an error message\n */\nfunction registerUser($username, $email, $password) {\n    // Database connection settings\n    $dbHost = 'localhost';\n    $dbUsername = 'your_database_username';\n    $dbPassword = 'your_database_password';\n    $dbName = 'your_database_name';\n\n    try {\n        // Establish database connection\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Check if username or email already exists in the database\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username=:username OR email=:email');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $existingUser = $stmt->fetch();\n\n        if ($existingUser) {\n            // Return error message if user already exists\n            return array('error' => 'Username or email is already taken');\n        }\n\n        // Hash password for secure storage\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return true on successful registration\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n?>\n```\n**Example Usage**\n```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'mysecretpassword';\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n    echo 'User registered successfully!';\n} elseif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n}\n```\nThis function uses PDO (PHP Data Objects) to interact with the database and securely stores passwords using `password_hash()`. The function takes in three parameters: `$username`, `$email`, and `$password`, and returns an array containing a success or error message.\n\nNote that you should replace the placeholder database connection settings (`$dbHost`, `$dbUsername`, etc.) with your actual database credentials. Additionally, this example assumes a simple `users` table structure; you may need to modify the SQL queries accordingly if your schema differs.", "code_blocks": ["```php\n<?php\n/**\n * User Registration Function\n *\n * @param string $username Username for the new account\n * @param string $email Email address for the new account\n * @param string $password Password for the new account\n * @return bool|object True if registration is successful, false otherwise with an error message\n */\nfunction registerUser($username, $email, $password) {\n    // Database connection settings\n    $dbHost = 'localhost';\n    $dbUsername = 'your_database_username';\n    $dbPassword = 'your_database_password';\n    $dbName = 'your_database_name';\n\n    try {\n        // Establish database connection\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Check if username or email already exists in the database\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username=:username OR email=:email');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $existingUser = $stmt->fetch();\n\n        if ($existingUser) {\n            // Return error message if user already exists\n            return array('error' => 'Username or email is already taken');\n        }\n\n        // Hash password for secure storage\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        // Return true on successful registration\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n?>\n```", "```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'mysecretpassword';\n\n$result = registerUser($username, $email, $password);\n\nif ($result['success']) {\n    echo 'User registered successfully!';\n} elseif ($result['error']) {\n    echo 'Error: ' . $result['error'];\n}\n```"]}
