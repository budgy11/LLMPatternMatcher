{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, the user wants to create a user registration function using PHP. I need to provide a clear and secure example. Let me break down what needs to be done.\n\nFirst, I should outline the basic requirements for a registration form. It typically includes fields like username, email, password, confirm password, full name, date of birth, and phone number. These are common and cover essential user information.\n\nNext, I need to consider security aspects. The password must be hashed using PHP's password_hash function. Also, input validation is crucial to prevent SQL injection and other attacks. Using prepared statements with PDO will help secure the database interactions.\n\nI'll structure the code into two main parts: HTML for the form and PHP for processing the submission. The HTML should include form fields with proper attributes like type=\"email\" and pattern for phone numbers. I'll add some basic CSS for styling to make it user-friendly.\n\nIn the PHP part, I'll check if the form is submitted using $_POST. Then, validate each input field\u2014trimming whitespace, checking lengths, ensuring password and confirm match, and validating email format. If any validation fails, display appropriate error messages.\n\nFor SQL injection prevention, prepared statements with placeholders are a must. I'll use PDO to connect to the database, insert the hashed password, and other sanitized inputs into the users table.\n\nI should also handle existing usernames or emails by checking if they already exist in the database. This prevents duplicate registrations and informs the user if their chosen username or email is taken.\n\nAfter successful registration, redirecting the user to a welcome page makes sense. I'll include a header location for that, ensuring the script exits afterward with exit();.\n\nAdditionally, including some error handling, like catching exceptions from the database connection, will make the code more robust. It's also good practice to show warnings if there are any issues during registration.\n\nI think about optional features too, like password strength requirements or CAPTCHA, but decide they're beyond the basic scope. Including them could be an enhancement for later.\n\nFinally, I'll test the code by filling out the form and checking if the user is added correctly to the database. Ensuring that all validations work as intended and that secure practices are followed is essential.\n</think>\n\nHere's a PHP function for user registration with input validation, password hashing, and SQL injection prevention:\n\n```php\n<?php\nsession_start();\nrequire_once 'db.php'; // Database connection file\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = trim($_POST['username']);\n    $email = trim($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n    $full_name = trim($_POST['full_name']);\n    $date_of_birth = $_POST['date_of_birth'];\n    $phone_number = trim($_POST['phone_number']);\n\n    // Input validation\n    if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n        die(\"All fields are required!\");\n    }\n\n    if (strlen($password) < 6) {\n        die(\"Password must be at least 6 characters long!\");\n    }\n\n    if ($password !== $confirm_password) {\n        die(\"Passwords do not match!\");\n    }\n\n    // Email validation\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die(\"Invalid email format!\");\n    }\n\n    // Phone number validation (simple check)\n    if (!preg_match('/^\\+?[0-9]{10,}$/', $phone_number)) {\n        die(\"Invalid phone number format!\");\n    }\n\n    // Check if username already exists\n    try {\n        $stmt = $pdo->prepare('SELECT id FROM users WHERE username = ?');\n        $stmt->execute([$username]);\n        if ($stmt->fetch()) {\n            die(\"Username already exists!\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking username: \" . $e->getMessage());\n    }\n\n    // Check if email already exists\n    try {\n        $stmt = $pdo->prepare('SELECT id FROM users WHERE email = ?');\n        $stmt->execute([$email]);\n        if ($stmt->fetch()) {\n            die(\"Email already registered!\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking email: \" . $e->getMessage());\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users SET \n            username = ?,\n            email = ?,\n            password = ?,\n            full_name = ?,\n            date_of_birth = ?,\n            phone_number = ?');\n        \n        $result = $stmt->execute([\n            $username,\n            $email,\n            $hashed_password,\n            $full_name,\n            $date_of_birth,\n            $phone_number\n        ]);\n\n        if ($result) {\n            header('Location: welcome.php');\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Registration error: \" . $e->getMessage());\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Form</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        input {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <h2>Registration Form</h2>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"username\">Username:</label><br>\n            <input type=\"text\" id=\"username\" name=\"username\" required pattern=\"[a-zA-Z0-9_]{3,15}\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"password\">Password:</label><br>\n            <input type=\"password\" id=\"password\" name=\"password\" required pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"confirm_password\">Confirm Password:</label><br>\n            <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"full_name\">Full Name:</label><br>\n            <input type=\"text\" id=\"full_name\" name=\"full_name\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"date_of_birth\">Date of Birth:</label><br>\n            <input type=\"date\" id=\"date_of_birth\" name=\"date_of_birth\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"phone_number\">Phone Number:</label><br>\n            <input type=\"tel\" id=\"phone_number\" name=\"phone_number\" pattern=\"[0-9]{10}\" required>\n        </div>\n\n        <button type=\"submit\">Register</button>\n    </form>\n</body>\n</html>\n```\n\nThis registration function includes:\n\n1. **Input Validation:**\n   - Checks for empty fields\n   - Validates password length and match\n   - Email format validation\n   - Phone number validation\n\n2. **Security Features:**\n   - Password hashing using `password_hash()`\n   - SQL injection prevention with prepared statements\n   - Input sanitization\n\n3. **Database Integration:**\n   - Checks for existing username and email\n   - Stores user data in the database\n\n4. **User Experience:**\n   - Clean and simple HTML form\n   - Basic CSS styling\n   - Real-time feedback for errors\n\nTo use this code:\n\n1. Create a `db.php` file with your database connection details:\n```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n?>\n```\n\n2. Adjust the form validation rules and database schema according to your needs.\n\n3. Add a `welcome.php` page for the registration success message.\n\nOptional enhancements you could add:\n\n- Password strength requirements\n- CAPTCHA verification\n- Email confirmation\n- Profile picture upload\n- Role-based access control\n- Error logging\n- Rate limiting\n\nRemember to:\n- Never store passwords in plain text\n- Use HTTPS for secure data transmission\n- Regularly backup your database\n- Keep your PHP version updated\n- Implement proper error handling", "code_blocks": ["```php\n<?php\nsession_start();\nrequire_once 'db.php'; // Database connection file\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = trim($_POST['username']);\n    $email = trim($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n    $full_name = trim($_POST['full_name']);\n    $date_of_birth = $_POST['date_of_birth'];\n    $phone_number = trim($_POST['phone_number']);\n\n    // Input validation\n    if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n        die(\"All fields are required!\");\n    }\n\n    if (strlen($password) < 6) {\n        die(\"Password must be at least 6 characters long!\");\n    }\n\n    if ($password !== $confirm_password) {\n        die(\"Passwords do not match!\");\n    }\n\n    // Email validation\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die(\"Invalid email format!\");\n    }\n\n    // Phone number validation (simple check)\n    if (!preg_match('/^\\+?[0-9]{10,}$/', $phone_number)) {\n        die(\"Invalid phone number format!\");\n    }\n\n    // Check if username already exists\n    try {\n        $stmt = $pdo->prepare('SELECT id FROM users WHERE username = ?');\n        $stmt->execute([$username]);\n        if ($stmt->fetch()) {\n            die(\"Username already exists!\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking username: \" . $e->getMessage());\n    }\n\n    // Check if email already exists\n    try {\n        $stmt = $pdo->prepare('SELECT id FROM users WHERE email = ?');\n        $stmt->execute([$email]);\n        if ($stmt->fetch()) {\n            die(\"Email already registered!\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error checking email: \" . $e->getMessage());\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users SET \n            username = ?,\n            email = ?,\n            password = ?,\n            full_name = ?,\n            date_of_birth = ?,\n            phone_number = ?');\n        \n        $result = $stmt->execute([\n            $username,\n            $email,\n            $hashed_password,\n            $full_name,\n            $date_of_birth,\n            $phone_number\n        ]);\n\n        if ($result) {\n            header('Location: welcome.php');\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Registration error: \" . $e->getMessage());\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Form</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        input {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <h2>Registration Form</h2>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <div class=\"form-group\">\n            <label for=\"username\">Username:</label><br>\n            <input type=\"text\" id=\"username\" name=\"username\" required pattern=\"[a-zA-Z0-9_]{3,15}\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"password\">Password:</label><br>\n            <input type=\"password\" id=\"password\" name=\"password\" required pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"confirm_password\">Confirm Password:</label><br>\n            <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"full_name\">Full Name:</label><br>\n            <input type=\"text\" id=\"full_name\" name=\"full_name\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"date_of_birth\">Date of Birth:</label><br>\n            <input type=\"date\" id=\"date_of_birth\" name=\"date_of_birth\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"phone_number\">Phone Number:</label><br>\n            <input type=\"tel\" id=\"phone_number\" name=\"phone_number\" pattern=\"[0-9]{10}\" required>\n        </div>\n\n        <button type=\"submit\">Register</button>\n    </form>\n</body>\n</html>\n```", "```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n?>\n```"]}
