{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP. This function will handle user input, validate it, and then store the data in a database.\n\n### **Database Setup**\n\nFor this example, we'll assume you have a MySQL database with a table named `users` that has the following structure:\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(100) UNIQUE,\n  password VARCHAR(255)\n);\n```\n### **Registration Function**\n```php\nfunction registerUser($username, $email, $password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception('All fields are required.');\n  }\n\n  if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n    throw new Exception('Username can only contain letters and numbers.');\n  }\n\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    throw new Exception('Invalid email address.');\n  }\n\n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  try {\n    // Connect to database\n    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n\n    // Prepare query\n    $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n\n    // Execute query\n    $stmt->execute();\n\n    // Return user ID\n    return $db->lastInsertId();\n  } catch (PDOException $e) {\n    throw new Exception('Database error: ' . $e->getMessage());\n  }\n}\n```\n### **Example Usage**\n```php\ntry {\n  $userId = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n  echo \"User registered successfully! ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```\n### **Notes**\n\n* Make sure to replace `your_database_name`, `your_username`, and `your_password` with your actual database credentials.\n* This is a basic example, you should consider implementing additional validation and security measures (e.g., email verification, password strength requirements).\n* Always use prepared statements to prevent SQL injection attacks.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password) {\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    throw new Exception('All fields are required.');\n  }\n\n  if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n    throw new Exception('Username can only contain letters and numbers.');\n  }\n\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    throw new Exception('Invalid email address.');\n  }\n\n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  try {\n    // Connect to database\n    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n\n    // Prepare query\n    $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n\n    // Execute query\n    $stmt->execute();\n\n    // Return user ID\n    return $db->lastInsertId();\n  } catch (PDOException $e) {\n    throw new Exception('Database error: ' . $e->getMessage());\n  }\n}\n```", "```php\ntry {\n  $userId = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n  echo \"User registered successfully! ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```"]}
