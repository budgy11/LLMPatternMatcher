{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of how you can create a simple user registration function in PHP:\n\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\nfunction registerUser($email, $username, $password) {\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Check if username or email already exist in the database\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email OR username = :username\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        if ($stmt->fetch()) {\n            return array('status' => false, 'message' => 'Email or Username already taken.');\n        }\n\n        // Hash the password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare(\"INSERT INTO users (email, username, password) VALUES (:email, :username, :password)\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('status' => true, 'message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('status' => false, 'message' => 'An error occurred while connecting to the database: ' . $e->getMessage());\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$username = 'johnDoe';\n$password = 'mysecretpassword';\n\n$result = registerUser($email, $username, $password);\n\nprint_r($result);\n?>\n```\n\nThis code snippet includes the following features:\n\n1. **Database Connection**: This example uses PDO to connect to a MySQL database.\n2. **Error Handling**: We're catching potential exceptions and returning an array with a status of `false` and a message indicating what went wrong.\n3. **Password Hashing**: To prevent password storage in plain text, we use PHP's built-in `password_hash()` function to hash the user-provided password before storing it in the database.\n\nPlease remember to replace `'your_database_name'`, `'your_username'`, and `'your_password'` placeholders with your actual MySQL credentials. Additionally, ensure that you're using a secure connection (HTTPS) when transmitting sensitive information like passwords.\n\nKeep in mind that this is a basic example and might need adjustments based on your specific requirements or database schema.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\nfunction registerUser($email, $username, $password) {\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Check if username or email already exist in the database\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email OR username = :username\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        if ($stmt->fetch()) {\n            return array('status' => false, 'message' => 'Email or Username already taken.');\n        }\n\n        // Hash the password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert new user into database\n        $stmt = $conn->prepare(\"INSERT INTO users (email, username, password) VALUES (:email, :username, :password)\");\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('status' => true, 'message' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('status' => false, 'message' => 'An error occurred while connecting to the database: ' . $e->getMessage());\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$username = 'johnDoe';\n$password = 'mysecretpassword';\n\n$result = registerUser($email, $username, $password);\n\nprint_r($result);\n?>\n```"]}
