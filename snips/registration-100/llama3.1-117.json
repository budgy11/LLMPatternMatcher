{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will create a new user and store their details in a database.\n\n### Database Setup\n\nBefore running the code, make sure you have set up your database with a table named `users`. The `users` table should have the following columns:\n\n| Field Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| username | varchar(255) |\n| email | varchar(255) |\n| password | varchar(255) |\n\n### PHP Code\n\n```php\n<?php\n\n// Connect to database\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"your_database_name\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password)\n{\n    global $conn;\n\n    // Hash password using SHA-256\n    $hashedPassword = hash('sha256', $password);\n\n    // Prepare SQL query\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n\n    // Bind parameters and execute query\n    if ($stmt = $conn->prepare($sql)) {\n        $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n        $stmt->execute();\n        $stmt->close();\n\n        return true;\n    } else {\n        echo \"Error preparing statement: \" . $conn->error;\n        return false;\n    }\n}\n\n// Example usage:\n$username = \"john_doe\";\n$email = \"johndoe@example.com\";\n$password = \"password123\";\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Registration failed.\";\n}\n?>\n```\n\n### Security Notes\n\n* This example uses the SHA-256 hashing algorithm to store passwords securely. You should consider using a more secure password hashing algorithm like bcrypt.\n* Always validate user input data to prevent SQL injection attacks.\n* Make sure to handle errors and exceptions properly in your production code.\n\nRemember to replace `your_database_name` with your actual database name.", "code_blocks": ["```php\n<?php\n\n// Connect to database\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"your_database_name\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password)\n{\n    global $conn;\n\n    // Hash password using SHA-256\n    $hashedPassword = hash('sha256', $password);\n\n    // Prepare SQL query\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n\n    // Bind parameters and execute query\n    if ($stmt = $conn->prepare($sql)) {\n        $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n        $stmt->execute();\n        $stmt->close();\n\n        return true;\n    } else {\n        echo \"Error preparing statement: \" . $conn->error;\n        return false;\n    }\n}\n\n// Example usage:\n$username = \"john_doe\";\n$email = \"johndoe@example.com\";\n$password = \"password123\";\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Registration failed.\";\n}\n?>\n```"]}
