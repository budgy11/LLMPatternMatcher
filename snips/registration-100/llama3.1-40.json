{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle user registration, including validation and database insertion.\n\n### User Registration Function\n```php\nfunction registerUser($firstName, $lastName, $email, $password) {\n    // Validate input\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $db = new PDO('sqlite:user_database.db');\n        $stmt = $db->prepare('INSERT INTO users (first_name, last_name, email, password) VALUES (:firstName, :lastName, :email, :hashedPassword)');\n        $stmt->bindParam(':firstName', $firstName);\n        $stmt->bindParam(':lastName', $lastName);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':hashedPassword', $hashedPassword);\n        $stmt->execute();\n\n        return 'User registered successfully';\n    } catch (PDOException $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n```\n\n### Example Usage\n```php\ntry {\n    echo registerUser('John', 'Doe', 'john@example.com', 'password123');\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\nThis function takes in four parameters: `$firstName`, `$lastName`, `$email`, and `$password`. It first validates the input to ensure that all fields are filled in, the email address is valid, and the password is at least 8 characters long. If any of these conditions are not met, an exception is thrown.\n\nIf the input is valid, the function hashes the password using `password_hash()` and attempts to insert a new user into the database using a prepared statement. If the insertion is successful, the function returns a success message; otherwise, it throws an exception with an error message.\n\nNote: This example assumes you have a SQLite database set up in a file called `user_database.db`. You'll need to adjust this code to fit your specific database setup and configuration.\n\nAlso note that password hashing is done using `password_hash()` which is a one-way function. This means that even if someone gets access to the hashed passwords, they won't be able to obtain the original password.", "code_blocks": ["```php\nfunction registerUser($firstName, $lastName, $email, $password) {\n    // Validate input\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $db = new PDO('sqlite:user_database.db');\n        $stmt = $db->prepare('INSERT INTO users (first_name, last_name, email, password) VALUES (:firstName, :lastName, :email, :hashedPassword)');\n        $stmt->bindParam(':firstName', $firstName);\n        $stmt->bindParam(':lastName', $lastName);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':hashedPassword', $hashedPassword);\n        $stmt->execute();\n\n        return 'User registered successfully';\n    } catch (PDOException $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n```", "```php\ntry {\n    echo registerUser('John', 'Doe', 'john@example.com', 'password123');\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```"]}
