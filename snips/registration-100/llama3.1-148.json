{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP. This code uses the PDO (PHP Data Objects) extension to connect to a MySQL database.\n\n```php\n// config.php: database connection settings\n$dbhost = 'localhost';\n$dbname = 'mydatabase';\n$dbuser = 'myusername';\n$dbpass = 'mypassword';\n\nfunction createUser($firstName, $lastName, $email, $password, $confirmPassword)\n{\n    // Connect to the database using PDO\n    try {\n        $pdo = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare a SQL query to insert user data into the users table\n        $stmt = $pdo->prepare(\"INSERT INTO users (first_name, last_name, email, password) VALUES (:first_name, :last_name, :email, :password)\");\n\n        // Bind parameters to prevent SQL injection\n        $stmt->bindParam(\":first_name\", $firstName);\n        $stmt->bindParam(\":last_name\", $lastName);\n        $stmt->bindParam(\":email\", $email);\n        $stmt->bindParam(\":password\", $password);\n\n        // Execute the query\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new PDOException($pdo->errorInfo()[2]);\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Validate form data before calling createUser function\nif (isset($_POST['submit'])) {\n\n    // Get form values from POST request\n    $firstName = $_POST['first_name'];\n    $lastName = $_POST['last_name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $confirmPassword = $_POST['confirm_password'];\n\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        echo \"All fields are required.\";\n        return;\n    }\n\n    // Validate email using regular expression\n    $emailPattern = \"/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/\";\n    if (!preg_match($emailPattern, $email)) {\n        echo \"Invalid email address.\";\n        return;\n    }\n\n    // Validate password length\n    if (strlen($password) < 8) {\n        echo \"Password must be at least 8 characters long.\";\n        return;\n    }\n\n    // Check if passwords match\n    if ($password !== $confirmPassword) {\n        echo \"Passwords do not match.\";\n        return;\n    }\n\n    // Create user account\n    $createUserResult = createUser($firstName, $lastName, $email, password_hash($password, PASSWORD_DEFAULT), $confirmPassword);\n\n    if ($createUserResult === true) {\n        header('Location: login.php');\n        exit();\n    } else {\n        echo \"Account creation failed.\";\n    }\n}\n?>\n```\n\nTo use this code:\n\n1. Replace `config.php` with your actual database connection settings.\n2. Create a new table in the database named `users` with columns for `first_name`, `last_name`, `email`, and `password`.\n3. Submit a form with the required fields (`first_name`, `last_name`, `email`, and `password`) to trigger the registration process.\n\n**Note**: This example uses password hashing using PHP's built-in `password_hash()` function, which is recommended for secure password storage.", "code_blocks": ["```php\n// config.php: database connection settings\n$dbhost = 'localhost';\n$dbname = 'mydatabase';\n$dbuser = 'myusername';\n$dbpass = 'mypassword';\n\nfunction createUser($firstName, $lastName, $email, $password, $confirmPassword)\n{\n    // Connect to the database using PDO\n    try {\n        $pdo = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare a SQL query to insert user data into the users table\n        $stmt = $pdo->prepare(\"INSERT INTO users (first_name, last_name, email, password) VALUES (:first_name, :last_name, :email, :password)\");\n\n        // Bind parameters to prevent SQL injection\n        $stmt->bindParam(\":first_name\", $firstName);\n        $stmt->bindParam(\":last_name\", $lastName);\n        $stmt->bindParam(\":email\", $email);\n        $stmt->bindParam(\":password\", $password);\n\n        // Execute the query\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new PDOException($pdo->errorInfo()[2]);\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Validate form data before calling createUser function\nif (isset($_POST['submit'])) {\n\n    // Get form values from POST request\n    $firstName = $_POST['first_name'];\n    $lastName = $_POST['last_name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $confirmPassword = $_POST['confirm_password'];\n\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        echo \"All fields are required.\";\n        return;\n    }\n\n    // Validate email using regular expression\n    $emailPattern = \"/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/\";\n    if (!preg_match($emailPattern, $email)) {\n        echo \"Invalid email address.\";\n        return;\n    }\n\n    // Validate password length\n    if (strlen($password) < 8) {\n        echo \"Password must be at least 8 characters long.\";\n        return;\n    }\n\n    // Check if passwords match\n    if ($password !== $confirmPassword) {\n        echo \"Passwords do not match.\";\n        return;\n    }\n\n    // Create user account\n    $createUserResult = createUser($firstName, $lastName, $email, password_hash($password, PASSWORD_DEFAULT), $confirmPassword);\n\n    if ($createUserResult === true) {\n        header('Location: login.php');\n        exit();\n    } else {\n        echo \"Account creation failed.\";\n    }\n}\n?>\n```"]}
