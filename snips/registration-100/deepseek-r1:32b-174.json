{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, I need to create a user registration function in PHP. Let me think about how to approach this.\n\nFirst, I should set up the basic HTML structure for the form. It needs fields like username, email, password, and confirm password. I'll use input elements with appropriate types and placeholders.\n\nNext, I need to handle form submission. So, when the user clicks submit, the data should be sent to a PHP script. I'll check if the form was submitted using $_POST.\n\nNow, validating the inputs is crucial. For the username, I should ensure it's not empty and only contains allowed characters like letters, numbers, underscores, and hyphens. I'll use a regular expression for that.\n\nFor the email, I'll check if it's not empty and valid using PHP's filter_var function with FILTER_VALIDATE_EMAIL.\n\nThe password needs to be strong enough. Maybe require at least 8 characters, including letters, numbers, and special symbols. Again, a regex will help here.\n\nI also need to make sure the password and confirm password fields match. If they don't, I'll display an error message.\n\nAssuming all validations pass, I should prepare the data for the database. I'll sanitize the inputs using mysqli_real_escape_string to prevent SQL injection.\n\nStoring the password securely is important, so I'll use password_hash with PASSWORD_DEFAULT algorithm and a cost of 12.\n\nNow, connecting to the database. I need to include the DB connection details like host, username, password, and database name. Then, create a connection using mysqli_connect and check for errors.\n\nI should also check if the username or email already exists in the database to prevent duplicates. If either is taken, display an appropriate error.\n\nIf everything checks out, I'll insert the user into the users table with their details and a default role as 'user'.\n\nAfter successful registration, redirecting to a login page makes sense. I'll use header(\"Location: ...\") for that.\n\nI should also handle any potential errors during database operations, like connection failures or query issues, by displaying error messages.\n\nFinally, putting it all together, the function will display the form initially and process the submission upon form data being sent.\n</think>\n\nHere's an example of a user registration function using PHP. This script includes form validation and secure password handling:\n\n```php\n<?php\nsession_start();\n\n// Configuration file (make sure to create this with your actual database credentials)\nrequire_once 'db_config.php';\n\n// Function to sanitize input\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data, ENT_QUOTES, 'UTF-8');\n    return $data;\n}\n\n// Registration function\nfunction registerUser() {\n    // Check if form was submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $username = sanitizeInput($_POST['username']);\n        $email = sanitizeInput($_POST['email']);\n        $password = $_POST['password'];\n        $confirm_password = $_POST['confirm_password'];\n\n        // Validate input fields\n        $errors = array();\n\n        if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n            $errors[] = \"All fields are required!\";\n        }\n\n        // Check username format\n        if (!preg_match('/^[a-zA-Z0-9_\\-]+$/', $username)) {\n            $errors[] = \"Username can only contain letters, numbers, underscores, and hyphens!\";\n        }\n\n        // Check email format\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            $errors[] = \"Please enter a valid email address!\";\n        }\n\n        // Password requirements (minimum 8 characters, at least one letter, one number, and one special character)\n        if (!preg_match('/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d])/', $password)) {\n            $errors[] = \"Password must be at least 8 characters long and contain letters, numbers, and special symbols!\";\n        }\n\n        // Check password match\n        if ($password !== $confirm_password) {\n            $errors[] = \"Passwords do not match!\";\n        }\n\n        // If there are no errors, proceed with registration\n        if (empty($errors)) {\n            try {\n                global $db;\n\n                // Sanitize inputs\n                $username = mysqli_real_escape_string($db, $username);\n                $email = mysqli_real_escape_string($db, $email);\n\n                // Check if username or email already exists\n                $checkQuery = \"SELECT id FROM users WHERE username = ? OR email = ?\";\n                $stmt = $db->prepare($checkQuery);\n                $stmt->bind_param('ss', $username, $email);\n                $stmt->execute();\n                $result = $stmt->get_result();\n\n                if ($result->num_rows > 0) {\n                    throw new Exception(\"Username or email already exists!\");\n                }\n\n                // Hash the password\n                $hashedPassword = password_hash($password, PASSWORD_DEFAULT, array('cost' => 12));\n\n                // Insert user into database\n                $insertQuery = \"INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, 'user')\";\n                $stmt = $db->prepare($insertQuery);\n                $stmt->bind_param('sss', $username, $email, $hashedPassword);\n\n                if ($stmt->execute()) {\n                    // Registration successful\n                    $_SESSION['success'] = \"Registration successful! Please login.\";\n                    header(\"Location: login.php\");\n                    exit();\n                } else {\n                    throw new Exception(\"Error registering user. Please try again.\");\n                }\n\n            } catch (Exception $e) {\n                die(\"An error occurred: \" . $e->getMessage());\n            }\n        } else {\n            foreach ($errors as $error) {\n                echo \"<div class='alert alert-danger'>$error</div>\";\n            }\n        }\n    }\n}\n\n// Display registration form\nfunction displayRegistrationForm() {\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Page</title>\n    <style>\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Register New Account</h2>\n        <form method=\"POST\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n            <div class=\"form-group\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"confirm_password\">Confirm Password:</label>\n                <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" placeholder=\"Confirm password\" required>\n            </div>\n\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n</body>\n</html>\n<?php\n}\n\n// Main function call\nif (!isset($_SESSION['user_id'])) {\n    registerUser();\n    displayRegistrationForm();\n} else {\n    header(\"Location: dashboard.php\");\n}\n?>\n```\n\nThis registration script includes the following features:\n\n1. Input validation and sanitization\n2. Secure password handling using PHP's `password_hash()` function\n3. Error handling and messages\n4. Prevention of duplicate usernames and emails\n5. Simple form styling\n\nTo use this code:\n\n1. Create a database table named `users` with at least the following columns:\n   - id (INT, PRIMARY KEY, AUTO_INCREMENT)\n   - username (VARCHAR(50))\n   - email (VARCHAR(100))\n   - password (VARCHAR(255))\n   - role (VARCHAR(20))\n\n2. Create a `db_config.php` file with your database connection details:\n```php\n<?php\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$dbname = 'your_database_name';\n\n// Establish database connection\ntry {\n    $db = new mysqli($host, $username, $password, $dbname);\n    \n    if ($db->connect_error) {\n        throw new Exception(\"Connection failed: \" . $db->connect_error);\n    }\n} catch (Exception $e) {\n    die(\"An error occurred: \" . $e->getMessage());\n}\n?>\n```\n\n3. Modify the `registerUser()` function to match your database schema if needed\n\n4. Add appropriate styling and adjust the layout as desired\n\n5. Implement a login system for users after registration\n\nRemember to:\n\n- Never store plain text passwords\n- Use secure connections (HTTPS)\n- Validate all user inputs\n- Sanitize all outputs\n- Handle errors gracefully\n- Protect against SQL injection and XSS attacks\n\nYou can also add additional features such as:\n- Email verification\n- Password strength indicators\n- CAPTCHA protection\n- Account lockout after multiple failed attempts\n- Two-factor authentication", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Configuration file (make sure to create this with your actual database credentials)\nrequire_once 'db_config.php';\n\n// Function to sanitize input\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data, ENT_QUOTES, 'UTF-8');\n    return $data;\n}\n\n// Registration function\nfunction registerUser() {\n    // Check if form was submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $username = sanitizeInput($_POST['username']);\n        $email = sanitizeInput($_POST['email']);\n        $password = $_POST['password'];\n        $confirm_password = $_POST['confirm_password'];\n\n        // Validate input fields\n        $errors = array();\n\n        if (empty($username) || empty($email) || empty($password) || empty($confirm_password)) {\n            $errors[] = \"All fields are required!\";\n        }\n\n        // Check username format\n        if (!preg_match('/^[a-zA-Z0-9_\\-]+$/', $username)) {\n            $errors[] = \"Username can only contain letters, numbers, underscores, and hyphens!\";\n        }\n\n        // Check email format\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            $errors[] = \"Please enter a valid email address!\";\n        }\n\n        // Password requirements (minimum 8 characters, at least one letter, one number, and one special character)\n        if (!preg_match('/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d])/', $password)) {\n            $errors[] = \"Password must be at least 8 characters long and contain letters, numbers, and special symbols!\";\n        }\n\n        // Check password match\n        if ($password !== $confirm_password) {\n            $errors[] = \"Passwords do not match!\";\n        }\n\n        // If there are no errors, proceed with registration\n        if (empty($errors)) {\n            try {\n                global $db;\n\n                // Sanitize inputs\n                $username = mysqli_real_escape_string($db, $username);\n                $email = mysqli_real_escape_string($db, $email);\n\n                // Check if username or email already exists\n                $checkQuery = \"SELECT id FROM users WHERE username = ? OR email = ?\";\n                $stmt = $db->prepare($checkQuery);\n                $stmt->bind_param('ss', $username, $email);\n                $stmt->execute();\n                $result = $stmt->get_result();\n\n                if ($result->num_rows > 0) {\n                    throw new Exception(\"Username or email already exists!\");\n                }\n\n                // Hash the password\n                $hashedPassword = password_hash($password, PASSWORD_DEFAULT, array('cost' => 12));\n\n                // Insert user into database\n                $insertQuery = \"INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, 'user')\";\n                $stmt = $db->prepare($insertQuery);\n                $stmt->bind_param('sss', $username, $email, $hashedPassword);\n\n                if ($stmt->execute()) {\n                    // Registration successful\n                    $_SESSION['success'] = \"Registration successful! Please login.\";\n                    header(\"Location: login.php\");\n                    exit();\n                } else {\n                    throw new Exception(\"Error registering user. Please try again.\");\n                }\n\n            } catch (Exception $e) {\n                die(\"An error occurred: \" . $e->getMessage());\n            }\n        } else {\n            foreach ($errors as $error) {\n                echo \"<div class='alert alert-danger'>$error</div>\";\n            }\n        }\n    }\n}\n\n// Display registration form\nfunction displayRegistrationForm() {\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Page</title>\n    <style>\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        input[type=\"text\"], input[type=\"email\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Register New Account</h2>\n        <form method=\"POST\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n            <div class=\"form-group\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"confirm_password\">Confirm Password:</label>\n                <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" placeholder=\"Confirm password\" required>\n            </div>\n\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n</body>\n</html>\n<?php\n}\n\n// Main function call\nif (!isset($_SESSION['user_id'])) {\n    registerUser();\n    displayRegistrationForm();\n} else {\n    header(\"Location: dashboard.php\");\n}\n?>\n```", "```php\n<?php\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$dbname = 'your_database_name';\n\n// Establish database connection\ntry {\n    $db = new mysqli($host, $username, $password, $dbname);\n    \n    if ($db->connect_error) {\n        throw new Exception(\"Connection failed: \" . $db->connect_error);\n    }\n} catch (Exception $e) {\n    die(\"An error occurred: \" . $e->getMessage());\n}\n?>\n```"]}
