{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a user registration function written in PHP. This function will handle user input, validate it, and store the user data in a database.\n\n**Database Setup**\n\nFirst, you need to set up your database. For this example, we'll use MySQL. You can create a table called `users` with the following columns:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n```\n\n**User Registration Function**\n------------------------------\n\nThe user registration function will take care of validating and storing the user data.\n\n```php\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    // Check for existing username or email\n    if ($this->getUserByUsername($username) !== null) {\n        throw new Exception(\"Username already exists.\");\n    }\n    if ($this->getUserByEmail($email) !== null) {\n        throw new Exception(\"Email already exists.\");\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Store user data in database\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $this->pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception(\"Error storing user data: \" . $e->getMessage());\n    }\n}\n\n// Helper functions to check for existing username or email\nfunction getUserByUsername($username)\n{\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    $stmt = $this->pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n\nfunction getUserByEmail($email)\n{\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $this->pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n```\n\n**Example Usage**\n-----------------\n\nTo use this function, you'll need to create an instance of the class and call the `registerUser` method. Here's an example:\n\n```php\nclass UserRegistration {\n    private $pdo;\n\n    public function __construct(PDO $pdo)\n    {\n        $this->pdo = $pdo;\n    }\n\n    // ... registerUser function defined above ...\n}\n\n// Create a PDO instance and pass it to the UserRegistration class\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n$userRegistration = new UserRegistration($pdo);\n\ntry {\n    // Register a new user\n    $userRegistration->registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\nNote that this is just an example and you should adjust it to fit your specific needs. Additionally, make sure to handle password hashing and storage securely.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    // Check for existing username or email\n    if ($this->getUserByUsername($username) !== null) {\n        throw new Exception(\"Username already exists.\");\n    }\n    if ($this->getUserByEmail($email) !== null) {\n        throw new Exception(\"Email already exists.\");\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Store user data in database\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $this->pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception(\"Error storing user data: \" . $e->getMessage());\n    }\n}\n\n// Helper functions to check for existing username or email\nfunction getUserByUsername($username)\n{\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    $stmt = $this->pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n\nfunction getUserByEmail($email)\n{\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $this->pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n```", "```php\nclass UserRegistration {\n    private $pdo;\n\n    public function __construct(PDO $pdo)\n    {\n        $this->pdo = $pdo;\n    }\n\n    // ... registerUser function defined above ...\n}\n\n// Create a PDO instance and pass it to the UserRegistration class\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n$userRegistration = new UserRegistration($pdo);\n\ntry {\n    // Register a new user\n    $userRegistration->registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
