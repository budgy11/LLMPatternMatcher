{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration\n$database = 'users';\n$usernameField = 'username';\n$emailField = 'email';\n$passwordField = 'password';\n\n// Function to hash password\nfunction hashPassword($password) {\n  return crypt($password, '$2y$10$' . substr(hash('sha256', microtime(true)), 0, 22));\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password) {\n  // Prepare SQL query\n  $sql = \"INSERT INTO $database SET $usernameField = ?, $emailField = ?, $passwordField = ?\";\n\n  try {\n    // Connect to database\n    $pdo = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$username, $email, hashPassword($password)]);\n\n    if ($stmt === true) {\n      echo \"User registered successfully!\";\n    } else {\n      throw new Exception(\"Error registering user: \" . json_encode($stmt));\n    }\n  } catch (PDOException $e) {\n    echo \"Database error: \" . $e->getMessage();\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n\n  return true;\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  if (empty($username) || empty($email) || empty($password)) {\n    echo \"Please fill in all fields!\";\n  } else {\n    registerUser($username, $email, $password);\n  }\n}\n\n?>\n```\n**How it works:**\n\n1. The function `hashPassword()` takes a password as input and returns the hashed version using the SHA-256 algorithm.\n2. The function `registerUser()` prepares an SQL query to insert new user data into the database. It uses PDO (PHP Data Objects) to execute the query securely.\n3. If the registration is successful, it prints out a success message.\n4. In the example usage section, we check if the form has been submitted using the `$_SERVER['REQUEST_METHOD']` superglobal. If so, we retrieve the input values and call the `registerUser()` function.\n\nNote that this is just an example and should be adapted to your specific database schema and requirements. Additionally, you may want to add more error handling or validation checks depending on your needs.\n\nAlso, make sure to replace `'mysql:host=localhost;dbname=database'`, `'username'` and `'password'` with your actual MySQL credentials and database name.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$database = 'users';\n$usernameField = 'username';\n$emailField = 'email';\n$passwordField = 'password';\n\n// Function to hash password\nfunction hashPassword($password) {\n  return crypt($password, '$2y$10$' . substr(hash('sha256', microtime(true)), 0, 22));\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password) {\n  // Prepare SQL query\n  $sql = \"INSERT INTO $database SET $usernameField = ?, $emailField = ?, $passwordField = ?\";\n\n  try {\n    // Connect to database\n    $pdo = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$username, $email, hashPassword($password)]);\n\n    if ($stmt === true) {\n      echo \"User registered successfully!\";\n    } else {\n      throw new Exception(\"Error registering user: \" . json_encode($stmt));\n    }\n  } catch (PDOException $e) {\n    echo \"Database error: \" . $e->getMessage();\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n\n  return true;\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  if (empty($username) || empty($email) || empty($password)) {\n    echo \"Please fill in all fields!\";\n  } else {\n    registerUser($username, $email, $password);\n  }\n}\n\n?>\n```"]}
