{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes input validation, password hashing, and database interaction.\n\n### Database Schema\n\nFor this example, we assume that you have a MySQL database with the following table structure:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL UNIQUE,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### User Registration Function\n\n```php\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        throw new Exception(\"Username can only contain letters, numbers and underscores.\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n\n    // Password hashing\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Database interaction\n    try {\n        $conn = new PDO(\"mysql:host=localhost;dbname=your_database\", \"your_username\", \"your_password\");\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        \n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(\":username\", $username);\n        $stmt->bindParam(\":email\", $email);\n        $stmt->bindParam(\":password\", $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception(\"Failed to register user.\");\n        }\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    } finally {\n        // Close the database connection\n        $conn = null;\n    }\n\n    return false;\n}\n```\n\n### Example Usage\n\n```php\ntry {\n    $registered = registerUser(\"johnDoe\", \"johndoe@example.com\", \"password123\");\n    if ($registered) {\n        echo \"User registered successfully.\";\n    } else {\n        throw new Exception(\"Failed to register user.\");\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\nRemember to replace the placeholders (`your_database`, `your_username`, and `your_password`) with your actual database credentials.\n\nThis function provides a basic implementation of user registration. You should adapt it to fit your specific use case and requirements, such as adding additional validation rules or error handling mechanisms.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        throw new Exception(\"Username can only contain letters, numbers and underscores.\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n\n    // Password hashing\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Database interaction\n    try {\n        $conn = new PDO(\"mysql:host=localhost;dbname=your_database\", \"your_username\", \"your_password\");\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        \n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(\":username\", $username);\n        $stmt->bindParam(\":email\", $email);\n        $stmt->bindParam(\":password\", $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception(\"Failed to register user.\");\n        }\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    } finally {\n        // Close the database connection\n        $conn = null;\n    }\n\n    return false;\n}\n```", "```php\ntry {\n    $registered = registerUser(\"johnDoe\", \"johndoe@example.com\", \"password123\");\n    if ($registered) {\n        echo \"User registered successfully.\";\n    } else {\n        throw new Exception(\"Failed to register user.\");\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
