{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a basic user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration settings\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Error connecting to database: ' . $e->getMessage();\n    exit;\n}\n\n// User registration function\nfunction register_user($email, $username, $password) {\n    global $pdo;\n\n    // Validate user input\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    if (strlen($username) < 3 || strlen($username) > 32) {\n        throw new Exception('Username must be between 3 and 32 characters long');\n    }\n    if (strlen($password) < 8 || !preg_match('/\\d/', $password)) {\n        throw new Exception('Password must be at least 8 characters long and contain a digit');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users (email, username, password) VALUES (:email, :username, :password)');\n        $stmt->execute([':email' => $email, ':username' => $username, ':password' => $hashed_password]);\n        return true;\n    } catch (PDOException $e) {\n        echo 'Error inserting user into database: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    try {\n        if (register_user($email, $username, $password)) {\n            echo 'User registered successfully!';\n        } else {\n            echo 'Error registering user. Please try again.';\n        }\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```\n**Explanation**\n\nThis script uses the PDO extension to connect to a MySQL database. The `register_user` function takes three arguments: `$email`, `$username`, and `$password`. It first validates the user input using various filters and regular expressions. If any of the validation checks fail, it throws an exception.\n\nIf the input is valid, it hashes the password using the `password_hash` function (which uses bcrypt by default). Then, it inserts a new user into the database using a prepared statement.\n\nThe example usage at the end shows how to call the `register_user` function from a form submission. If any errors occur during registration, an error message is displayed on the page.\n\n**Note**: This script assumes you have already set up a MySQL database with a table called `users` that has columns for email, username, and password. You should replace the placeholders in the script (`$dsn`, `$username`, `$password`) with your actual database credentials. Additionally, this script uses a very basic validation scheme; you may want to add additional checks (e.g., checking for existing usernames) depending on your application's requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Error connecting to database: ' . $e->getMessage();\n    exit;\n}\n\n// User registration function\nfunction register_user($email, $username, $password) {\n    global $pdo;\n\n    // Validate user input\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    if (strlen($username) < 3 || strlen($username) > 32) {\n        throw new Exception('Username must be between 3 and 32 characters long');\n    }\n    if (strlen($password) < 8 || !preg_match('/\\d/', $password)) {\n        throw new Exception('Password must be at least 8 characters long and contain a digit');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users (email, username, password) VALUES (:email, :username, :password)');\n        $stmt->execute([':email' => $email, ':username' => $username, ':password' => $hashed_password]);\n        return true;\n    } catch (PDOException $e) {\n        echo 'Error inserting user into database: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    try {\n        if (register_user($email, $username, $password)) {\n            echo 'User registered successfully!';\n        } else {\n            echo 'Error registering user. Please try again.';\n        }\n    } catch (Exception $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```"]}
