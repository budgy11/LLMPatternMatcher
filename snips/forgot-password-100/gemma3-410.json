{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n/**\n * Forgot Password Function\n *\n * This function allows a user to reset their password by sending an email\n * with a reset link.\n *\n * @param string $email The email address of the user requesting the reset.\n * @param string $reset_token A unique token to generate for the reset link.  Use a library like UUID or generate a random string.\n * @param string $to Email address to send the reset link to.\n * @param string $from Email address to send the reset link from.\n * @param string $website_url URL of your website.\n *\n * @return bool True on success, false on failure.\n */\nfunction forgot_password(string $email, string $reset_token, string $to, string $from, string $website_url): bool\n{\n    // 1. Sanitize and Validate Email\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        error_log(\"Invalid email format: \" . $email); // Log for debugging\n        return false;\n    }\n\n    // 2. Generate Reset Link\n    $reset_link = $website_url . \"/reset_password?token=\" . $reset_token;\n\n    // 3. Send Email\n    $subject = \"Password Reset Request\";\n    $message = \"Please click on the following link to reset your password:\\n\" . $reset_link;\n    $headers = \"From: \" . $from . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $from . \"\\r\\n\";\n    $headers .= \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return true;\n    } else {\n        error_log(\"Failed to send email to \" . $email); // Log email sending failure\n        return false;\n    }\n}\n\n// Example Usage (for testing - REMOVE in production)\nif (isset($_POST['email']) && isset($_POST['reset_token'])) {\n    $email = $_POST['email'];\n    $reset_token = $_POST['reset_token'];\n    $to = $email; // Use the posted email or a default\n    $from = \"your_email@example.com\"; // Replace with your email\n    $website_url = \"https://yourwebsite.com\"; // Replace with your website URL\n\n    if (forgot_password($email, $reset_token, $to, $from, $website_url)) {\n        echo \"Reset link sent to \" . $email;\n    } else {\n        echo \"Failed to send reset link.\";\n    }\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Clear Function Definition:** Defines a function `forgot_password` with type hinting (`string` for arguments and `bool` return) for better code clarity and maintainability.\n* **Input Validation and Sanitization:**  Crucially includes `filter_var($email, FILTER_SANITIZE_EMAIL)` to strip potentially malicious characters from the email address and `filter_var($email, FILTER_VALIDATE_EMAIL)` to validate the format.  This prevents security vulnerabilities like email injection.\n* **Token Generation (Critical for Security):**  The function *requires* a `$reset_token`. *Never* generate a reset token using just a simple string.  Use a cryptographically secure method like the `uuid` library (install with `composer require rammed/uuid`) or a random string generator.  This ensures that the token is unique and difficult to guess.\n* **Secure Token Handling:**  The reset link contains the token. *Never* store the token in a way that can be easily accessed. Use a database.\n* **Email Sending with `mail()`:** The `mail()` function is used for sending the email.\n* **Headers:**  Properly sets the `From`, `Reply-To`, and `Content-Type` headers for the email.  This is essential for email deliverability and proper rendering in the recipient's email client. `charset=UTF-8` ensures proper display of non-ASCII characters.\n* **Error Logging:** Uses `error_log()` to log errors if the email fails to send.  This is essential for debugging and monitoring.  In a production environment, you'd likely want to use a more robust logging system.\n* **Example Usage (for testing - REMOVE in Production):**  Provides example code to demonstrate how to use the function.  *Important:* The example usage code is for testing purposes *only*.  In a real production environment, you would typically process the reset request through a form and handle the token validation before allowing the user to set a new password. The `isset($_POST['email'])` checks if the form has been submitted.\n* **Security Considerations (Important):**\n    * **Token Expiration:**  Implement token expiration to limit the window of opportunity for attackers.  Store the token's creation timestamp in the database.  Consider expiring tokens after a short period (e.g., 30 minutes).\n    * **Token Uniqueness:** Always ensure that reset tokens are unique.\n    * **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server. This prevents eavesdropping and man-in-the-middle attacks.\n    * **Rate Limiting:** Implement rate limiting to prevent attackers from repeatedly requesting reset links.\n    * **Database Storage:**  Store the token *and* the email address in the database. This is crucial for later validation.\n\n**How to use it in a real application:**\n\n1.  **Generate a Token:** Before sending the reset link, generate a unique token (using `rammed/uuid` or a similar library).\n2.  **Store Token & Email:**  Store the generated token and the user's email address in your database.\n3.  **Form Submission:**  When the user submits the reset form:\n    *   Validate the email address.\n    *   Check if the email and token exist in the database.\n    *   If found, proceed to allow the user to set a new password (with appropriate validation).\n4.  **Validation:** When the user attempts to set a new password, *always* validate the token against the one stored in the database *before* allowing the password change.  This is a critical security step.\n\nThis revised code provides a more robust and secure implementation of a forgot password function, along with important considerations for production use.  Remember to adapt this code to your specific application and security requirements.\n", "code_blocks": ["```php\n<?php\n\n/**\n * Forgot Password Function\n *\n * This function allows a user to reset their password by sending an email\n * with a reset link.\n *\n * @param string $email The email address of the user requesting the reset.\n * @param string $reset_token A unique token to generate for the reset link.  Use a library like UUID or generate a random string.\n * @param string $to Email address to send the reset link to.\n * @param string $from Email address to send the reset link from.\n * @param string $website_url URL of your website.\n *\n * @return bool True on success, false on failure.\n */\nfunction forgot_password(string $email, string $reset_token, string $to, string $from, string $website_url): bool\n{\n    // 1. Sanitize and Validate Email\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        error_log(\"Invalid email format: \" . $email); // Log for debugging\n        return false;\n    }\n\n    // 2. Generate Reset Link\n    $reset_link = $website_url . \"/reset_password?token=\" . $reset_token;\n\n    // 3. Send Email\n    $subject = \"Password Reset Request\";\n    $message = \"Please click on the following link to reset your password:\\n\" . $reset_link;\n    $headers = \"From: \" . $from . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $from . \"\\r\\n\";\n    $headers .= \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return true;\n    } else {\n        error_log(\"Failed to send email to \" . $email); // Log email sending failure\n        return false;\n    }\n}\n\n// Example Usage (for testing - REMOVE in production)\nif (isset($_POST['email']) && isset($_POST['reset_token'])) {\n    $email = $_POST['email'];\n    $reset_token = $_POST['reset_token'];\n    $to = $email; // Use the posted email or a default\n    $from = \"your_email@example.com\"; // Replace with your email\n    $website_url = \"https://yourwebsite.com\"; // Replace with your website URL\n\n    if (forgot_password($email, $reset_token, $to, $from, $website_url)) {\n        echo \"Reset link sent to \" . $email;\n    } else {\n        echo \"Failed to send reset link.\";\n    }\n}\n\n?>\n```"]}
