{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a \"forgot password\" function in PHP:\n\n**Database Schema**\n\nLet's assume we have a `users` table with the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique user ID |\n| email | varchar(255) | User email address |\n| password | varchar(255) | Hashed user password |\n\n**Forgot Password Function**\n\nWe'll create a PHP script that will handle the forgot password functionality. We'll use a form to collect the user's email address, and then send an email with a reset link.\n\n```php\n// forgot_password.php\n\n<?php\n\nrequire_once 'config/db.php'; // database connection settings\nrequire_once 'lib/password.php'; // for hashing passwords\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = $_POST['email'];\n    $query = \"SELECT * FROM users WHERE email = '$email'\";\n    $result = mysqli_query($conn, $query);\n\n    if (mysqli_num_rows($result) > 0) {\n        $user = mysqli_fetch_assoc($result);\n        $token = bin2hex(random_bytes(32)); // generate a random token\n        $reset_url = \"http://example.com/reset_password.php?token=$token\";\n\n        // update user's reset token in database\n        $query = \"UPDATE users SET reset_token = '$token' WHERE email = '$email'\";\n        mysqli_query($conn, $query);\n\n        // send email with reset link\n        $subject = 'Reset Password';\n        $message = \"Click here to reset your password: $reset_url\";\n        mail($user['email'], $subject, $message);\n    } else {\n        echo \"Email not found.\";\n    }\n} else {\n    echo \"Invalid request method.\";\n}\n\n?>\n```\n\n**Reset Password Function**\n\nWe'll create another PHP script that will handle the password reset functionality.\n\n```php\n// reset_password.php\n\n<?php\n\nrequire_once 'config/db.php'; // database connection settings\nrequire_once 'lib/password.php'; // for hashing passwords\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    $token = $_GET['token'];\n\n    if (empty($token)) {\n        echo \"Invalid token.\";\n    } else {\n        $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n        $result = mysqli_query($conn, $query);\n\n        if (mysqli_num_rows($result) > 0) {\n            $user = mysqli_fetch_assoc($result);\n            if ($user['reset_token'] === $token) { // validate token\n                echo \"Reset Password Form\";\n                ?>\n                <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n                    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n                    <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm New Password\">\n                    <button type=\"submit\">Reset Password</button>\n                </form>\n                <?php\n            } else {\n                echo \"Invalid token.\";\n            }\n        } else {\n            echo \"Email not found.\";\n        }\n    }\n} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $new_password = $_POST['new_password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    if ($new_password !== $confirm_password) {\n        echo \"Passwords do not match.\";\n    } else {\n        // update user's password in database\n        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n        $query = \"UPDATE users SET password = '$hashed_password' WHERE reset_token = '$token'\";\n        mysqli_query($conn, $query);\n\n        // delete reset token from database\n        $query = \"DELETE FROM users WHERE reset_token = '$token'\";\n        mysqli_query($conn, $query);\n\n        echo \"Password updated successfully.\";\n    }\n} else {\n    echo \"Invalid request method.\";\n}\n\n?>\n```\n\n**Security Notes**\n\n* Always validate user input to prevent SQL injection.\n* Use prepared statements or parameterized queries to improve security.\n* Store passwords securely using a library like `password_hash`.\n* Never store plaintext passwords.\n* Always delete reset tokens from the database after password reset.\n\nThis is just an example, and you should adapt it to your specific use case. Additionally, make sure to follow best practices for PHP development, such as using prepared statements, parameterized queries, and a secure password hashing library like `password_hash`.", "code_blocks": ["```php\n// forgot_password.php\n\n<?php\n\nrequire_once 'config/db.php'; // database connection settings\nrequire_once 'lib/password.php'; // for hashing passwords\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = $_POST['email'];\n    $query = \"SELECT * FROM users WHERE email = '$email'\";\n    $result = mysqli_query($conn, $query);\n\n    if (mysqli_num_rows($result) > 0) {\n        $user = mysqli_fetch_assoc($result);\n        $token = bin2hex(random_bytes(32)); // generate a random token\n        $reset_url = \"http://example.com/reset_password.php?token=$token\";\n\n        // update user's reset token in database\n        $query = \"UPDATE users SET reset_token = '$token' WHERE email = '$email'\";\n        mysqli_query($conn, $query);\n\n        // send email with reset link\n        $subject = 'Reset Password';\n        $message = \"Click here to reset your password: $reset_url\";\n        mail($user['email'], $subject, $message);\n    } else {\n        echo \"Email not found.\";\n    }\n} else {\n    echo \"Invalid request method.\";\n}\n\n?>\n```", "```php\n// reset_password.php\n\n<?php\n\nrequire_once 'config/db.php'; // database connection settings\nrequire_once 'lib/password.php'; // for hashing passwords\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    $token = $_GET['token'];\n\n    if (empty($token)) {\n        echo \"Invalid token.\";\n    } else {\n        $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n        $result = mysqli_query($conn, $query);\n\n        if (mysqli_num_rows($result) > 0) {\n            $user = mysqli_fetch_assoc($result);\n            if ($user['reset_token'] === $token) { // validate token\n                echo \"Reset Password Form\";\n                ?>\n                <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n                    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n                    <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm New Password\">\n                    <button type=\"submit\">Reset Password</button>\n                </form>\n                <?php\n            } else {\n                echo \"Invalid token.\";\n            }\n        } else {\n            echo \"Email not found.\";\n        }\n    }\n} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $new_password = $_POST['new_password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    if ($new_password !== $confirm_password) {\n        echo \"Passwords do not match.\";\n    } else {\n        // update user's password in database\n        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n        $query = \"UPDATE users SET password = '$hashed_password' WHERE reset_token = '$token'\";\n        mysqli_query($conn, $query);\n\n        // delete reset token from database\n        $query = \"DELETE FROM users WHERE reset_token = '$token'\";\n        mysqli_query($conn, $query);\n\n        echo \"Password updated successfully.\";\n    }\n} else {\n    echo \"Invalid request method.\";\n}\n\n?>\n```"]}
