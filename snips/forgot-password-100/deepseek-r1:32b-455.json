{"prompt": "Create a forgot password function using php", "llm_output": "<think>\nOkay, I need to create a \"Forgot Password\" function using PHP. Let me think about how to approach this.\n\nFirst, the user will request a new password by entering their email address. So, I'll need an HTML form for that. The form should have a field for the email and a submit button.\n\nNext, when the form is submitted, the PHP script needs to check if the email exists in the database. If it doesn't, return an error message. If it does exist, proceed further.\n\nOnce the email is confirmed, I should generate a temporary password reset token. This token will be stored in the database so that the user can use it later to reset their password. The token should have an expiration time, maybe 1 hour from generation.\n\nI'll need to send an email to the user with a reset link. The link should include the token and perhaps the user's ID or username to validate later. The email content should be simple but informative, guiding the user to click the link and reset their password.\n\nNow, when the user clicks the reset link, they'll land on another PHP page that checks the validity of the token. This page needs to verify if the token is valid (exists in the database and hasn't expired). If it's invalid, show an error message.\n\nIf the token is valid, display a form where the user can enter their new password. After submission, update the user's password in the database and invalidate the token to prevent reuse.\n\nSecurity considerations are important here. I should use prepared statements to prevent SQL injection. Hashing the new password before storing it is crucial for security. Also, setting a reasonable expiration time for tokens to ensure they can't be used indefinitely.\n\nI'll structure this into three main parts: the reset request form, processing the reset request, and the password reset page. Each part will handle different aspects of the process, ensuring a smooth user experience while maintaining security.\n\nI should also include error handling at each step\u2014checking for missing inputs, database errors, and invalid tokens. Providing clear feedback to the user is essential, whether it's success messages or error notices.\n\nFinally, I'll make sure the code is well-commented and organized so that anyone reading it can understand the flow easily. Testing each part thoroughly will help catch any issues before deploying.\n</think>\n\nHere's an example of a \"Forgot Password\" function using PHP:\n\nThis example includes:\n1. A reset password request form\n2. Reset password email\n3. Password reset page\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'test';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Generate random token\nfunction generateToken() {\n    return bin2hex(random_bytes(16));\n}\n\n// Send reset password email\nfunction sendResetEmail($email, $token, $username) {\n    $to = $email;\n    $subject = 'Password Reset Request';\n    $message = \"Click the following link to reset your password: http://example.com/reset_password.php?token=$token&user=$username\";\n    $headers = 'From: noreply@example.com' . \"\\r\\n\" .\n               'Reply-To: noreply@example.com' . \"\\r\\n\" .\n               'X-Mailer: PHP/' . phpversion();\n\n    mail($to, $subject, $message, $headers);\n}\n\n// Reset password request form\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    \n    // Sanitize email\n    $email = $conn->real_escape_string(trim($email));\n    \n    // Check if email exists in database\n    $sql = \"SELECT id, username FROM users WHERE email='$email'\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows == 0) {\n        die(\"Email not found!\");\n    }\n    \n    $row = $result->fetch_assoc();\n    $token = generateToken();\n    $expires = date('Y-m-d H:i:s', time() + 3600); // Token expires in 1 hour\n    \n    // Insert token into database\n    $sql = \"INSERT INTO password_reset (user_id, token, expires) VALUES ('{$row['id']}', '$token', '$expires')\";\n    \n    if ($conn->query($sql)) {\n        sendResetEmail($email, $token, $row['username']);\n        echo \"Password reset link has been sent to your email!\";\n    } else {\n        die(\"Error: \" . $conn->error);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label>Email:</label><br>\n        <input type=\"email\" name=\"email\" required><br><br>\n        <input type=\"submit\" value=\"Request Reset\">\n    </form>\n</body>\n</html>\n\n// reset_password.php\n\n<?php\n// Database connection (same as above)\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    $token = $_GET['token'];\n    $username = $_GET['user'];\n\n    // Check token validity\n    $sql = \"SELECT user_id, expires FROM password_reset WHERE token='$token'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows == 0) {\n        die(\"Invalid or expired reset link!\");\n    }\n\n    $row = $result->fetch_assoc();\n    \n    // Check if token has expired\n    if (strtotime($row['expires']) < time()) {\n        die(\"Reset link has expired. Please request a new one.\");\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $token = $_GET['token'];\n    $newPassword = password_hash($_POST['password'], PASSWORD_DEFAULT);\n    \n    // Update user's password\n    $sql = \"UPDATE users SET password='$newPassword' WHERE id='$row[user_id]'\";\n    if ($conn->query($sql)) {\n        // Delete used token\n        $sql = \"DELETE FROM password_reset WHERE token='$token'\";\n        $conn->query($sql);\n        echo \"Password reset successful!\";\n    } else {\n        die(\"Error: \" . $conn->error);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <h2>Reset Password</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label>New Password:</label><br>\n        <input type=\"password\" name=\"password\" required><br><br>\n        <input type=\"submit\" value=\"Reset Password\">\n    </form>\n</body>\n</html>\n```\n\nThis example includes:\n\n1. A forgot password form that sends a reset link to the user's email\n2. Token generation and storage in the database with an expiration time\n3. Email verification\n4. Security measures:\n   - Input sanitization\n   - Password hashing using `password_hash()`\n   - Token expiration\n   - Protection against token reuse (tokens are deleted after use)\n\nRequired tables:\n\nYou'll need at least two tables in your database:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE password_reset (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    token VARCHAR(32) NOT NULL,\n    expires DATETIME NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\nTo use this code:\n\n1. Replace the database connection details with your own\n2. Make sure to create the required tables in your database\n3. Update the email sending function (`sendResetEmail`) with your actual domain and from address\n\nSecurity considerations:\n\n- Always use HTTPS when dealing with sensitive information like passwords\n- Never send plain text passwords via email\n- Use appropriate error handling and validation\n- Consider implementing additional security measures like CAPTCHA for reset requests\n- Regularly test your code for vulnerabilities", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'test';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Generate random token\nfunction generateToken() {\n    return bin2hex(random_bytes(16));\n}\n\n// Send reset password email\nfunction sendResetEmail($email, $token, $username) {\n    $to = $email;\n    $subject = 'Password Reset Request';\n    $message = \"Click the following link to reset your password: http://example.com/reset_password.php?token=$token&user=$username\";\n    $headers = 'From: noreply@example.com' . \"\\r\\n\" .\n               'Reply-To: noreply@example.com' . \"\\r\\n\" .\n               'X-Mailer: PHP/' . phpversion();\n\n    mail($to, $subject, $message, $headers);\n}\n\n// Reset password request form\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    \n    // Sanitize email\n    $email = $conn->real_escape_string(trim($email));\n    \n    // Check if email exists in database\n    $sql = \"SELECT id, username FROM users WHERE email='$email'\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows == 0) {\n        die(\"Email not found!\");\n    }\n    \n    $row = $result->fetch_assoc();\n    $token = generateToken();\n    $expires = date('Y-m-d H:i:s', time() + 3600); // Token expires in 1 hour\n    \n    // Insert token into database\n    $sql = \"INSERT INTO password_reset (user_id, token, expires) VALUES ('{$row['id']}', '$token', '$expires')\";\n    \n    if ($conn->query($sql)) {\n        sendResetEmail($email, $token, $row['username']);\n        echo \"Password reset link has been sent to your email!\";\n    } else {\n        die(\"Error: \" . $conn->error);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label>Email:</label><br>\n        <input type=\"email\" name=\"email\" required><br><br>\n        <input type=\"submit\" value=\"Request Reset\">\n    </form>\n</body>\n</html>\n\n// reset_password.php\n\n<?php\n// Database connection (same as above)\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    $token = $_GET['token'];\n    $username = $_GET['user'];\n\n    // Check token validity\n    $sql = \"SELECT user_id, expires FROM password_reset WHERE token='$token'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows == 0) {\n        die(\"Invalid or expired reset link!\");\n    }\n\n    $row = $result->fetch_assoc();\n    \n    // Check if token has expired\n    if (strtotime($row['expires']) < time()) {\n        die(\"Reset link has expired. Please request a new one.\");\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $token = $_GET['token'];\n    $newPassword = password_hash($_POST['password'], PASSWORD_DEFAULT);\n    \n    // Update user's password\n    $sql = \"UPDATE users SET password='$newPassword' WHERE id='$row[user_id]'\";\n    if ($conn->query($sql)) {\n        // Delete used token\n        $sql = \"DELETE FROM password_reset WHERE token='$token'\";\n        $conn->query($sql);\n        echo \"Password reset successful!\";\n    } else {\n        die(\"Error: \" . $conn->error);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <h2>Reset Password</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label>New Password:</label><br>\n        <input type=\"password\" name=\"password\" required><br><br>\n        <input type=\"submit\" value=\"Reset Password\">\n    </form>\n</body>\n</html>\n```", null]}
