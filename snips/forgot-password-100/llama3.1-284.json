{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a forgot password function in PHP:\n\n**Database Table Structure**\n\nFirst, let's assume we have a table named `users` with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n**Forgot Password Form**\n\nCreate an HTML form to handle forgot password requests. We'll use a simple form with an `email` input field:\n```html\n<form method=\"POST\" action=\"forgot-password.php\">\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\" required>\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```\n**Forgot Password PHP Code**\n\nCreate a file named `forgot-password.php` with the following code:\n```php\n<?php\n\n// Configuration\ndefine('ROOT_DIR', dirname(__FILE__));\ndefine('PASSWORD_SALT', 'your-salt-value-here');\n\n// Include database connection script\nrequire_once ROOT_DIR . '/includes/db.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get the email from the request\n  $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n  // If email is valid, proceed with password reset\n  if ($email) {\n    try {\n      // Retrieve user data from database\n      $user = fetchUser($db, $email);\n      if ($user) {\n        // Generate new password and send it via email\n        $newPassword = generateRandomPassword();\n        $passwordHash = hash('sha256', $newPassword . PASSWORD_SALT);\n\n        // Update user's password in database\n        updatePassword($db, $user['id'], $passwordHash);\n\n        // Send email with new password\n        sendEmailNotification($email, 'Your new password is: ' . $newPassword);\n        echo '<p>Password reset link sent to your email.</p>';\n      } else {\n        throw new Exception('User not found');\n      }\n    } catch (Exception $e) {\n      echo '<p>Something went wrong: ' . $e->getMessage() . '</p>';\n    }\n  } else {\n    echo '<p>Please enter a valid email address.</p>';\n  }\n}\n\n// Function to fetch user data from database\nfunction fetchUser($db, $email)\n{\n  // Execute query to retrieve user data\n  $stmt = $db->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\n// Function to update user's password in database\nfunction updatePassword($db, $userId, $passwordHash)\n{\n  // Execute query to update password\n  $stmt = $db->prepare('UPDATE users SET password_hash = :passwordHash WHERE id = :id');\n  $stmt->bindParam(':passwordHash', $passwordHash);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\n// Function to send email notification with new password\nfunction sendEmailNotification($email, $message)\n{\n  // Replace this with your own email sending library or service\n  mail($email, 'Your Password Reset Link', $message);\n}\n```\n**Security Considerations**\n\n1. **Password Hashing**: We're using SHA-256 to hash the new password before storing it in the database.\n2. **Email Verification**: You should consider implementing email verification for security reasons (e.g., prevent unauthorized users from resetting passwords).\n3. **CSRF Protection**: Use a CSRF token to protect against cross-site request forgery attacks.\n4. **Input Validation and Sanitization**: Always validate and sanitize user input to prevent SQL injection or other vulnerabilities.\n\nThis is a basic example, and you should adapt it to your specific use case and security requirements.", "code_blocks": [null, null, "```php\n<?php\n\n// Configuration\ndefine('ROOT_DIR', dirname(__FILE__));\ndefine('PASSWORD_SALT', 'your-salt-value-here');\n\n// Include database connection script\nrequire_once ROOT_DIR . '/includes/db.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get the email from the request\n  $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n  // If email is valid, proceed with password reset\n  if ($email) {\n    try {\n      // Retrieve user data from database\n      $user = fetchUser($db, $email);\n      if ($user) {\n        // Generate new password and send it via email\n        $newPassword = generateRandomPassword();\n        $passwordHash = hash('sha256', $newPassword . PASSWORD_SALT);\n\n        // Update user's password in database\n        updatePassword($db, $user['id'], $passwordHash);\n\n        // Send email with new password\n        sendEmailNotification($email, 'Your new password is: ' . $newPassword);\n        echo '<p>Password reset link sent to your email.</p>';\n      } else {\n        throw new Exception('User not found');\n      }\n    } catch (Exception $e) {\n      echo '<p>Something went wrong: ' . $e->getMessage() . '</p>';\n    }\n  } else {\n    echo '<p>Please enter a valid email address.</p>';\n  }\n}\n\n// Function to fetch user data from database\nfunction fetchUser($db, $email)\n{\n  // Execute query to retrieve user data\n  $stmt = $db->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\n// Function to update user's password in database\nfunction updatePassword($db, $userId, $passwordHash)\n{\n  // Execute query to update password\n  $stmt = $db->prepare('UPDATE users SET password_hash = :passwordHash WHERE id = :id');\n  $stmt->bindParam(':passwordHash', $passwordHash);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\n// Function to send email notification with new password\nfunction sendEmailNotification($email, $message)\n{\n  // Replace this with your own email sending library or service\n  mail($email, 'Your Password Reset Link', $message);\n}\n```"]}
