{"prompt": "Create a forgot password function using php", "llm_output": "<think>\nOkay, I need to create a \"Forgot Password\" function using PHP. Let me think about how to approach this.\n\nFirst, the user should be able to request a password reset by entering their email or username. So, I'll need an HTML form with a text input and a submit button.\n\nWhen the user submits the form, I should validate that they've entered something. If the input is empty, show an error message.\n\nNext, check if the provided email/username exists in the database. I'll use PHP to connect to MySQL, run a SELECT query, and see if there's a matching record. If not, inform the user that the details are incorrect.\n\nIf it does exist, generate a unique token for password reset. This token should be random and long enough to prevent guessing. Maybe use bin2hex(random_bytes()) which is secure.\n\nStore this token in the database, maybe in a new column or a separate table linked by user ID. Also, set an expiration time so the token doesn't stay active forever. I'll calculate the expiry as current timestamp plus 1 hour.\n\nThen, send an email to the user with a reset link. The email should be friendly, explaining what's happening and include the link with the token.\n\nOn the password reset page, which is accessed via the unique link, the user will enter their new password twice to confirm. I'll need another form for this.\n\nWhen submitting the new password, check that both entries match and meet complexity requirements, like minimum length, uppercase letters, numbers, or symbols. If not, show an error message.\n\nValidate the token from the URL against the stored one in the database. Also, ensure it hasn't expired. Update the user's password if everything checks out, then redirect them to a success page or login page.\n\nI should also handle cases where the token is invalid or has expired by showing appropriate messages.\n\nMake sure to use prepared statements and parameterized queries to prevent SQL injection. Hashing passwords with bcrypt using password_hash() is essential for security.\n\nDon't forget to set up your database with the necessary columns, like a 'reset_token' and 'token_expiry' in the users table or another related table.\n\nTest each part step by step: form submission, token generation, email sending, password reset page functionality, and security measures. Also, ensure that expired tokens are handled correctly and that the user can't use them after they've expired.\n\nFinally, think about edge cases like multiple reset requests, handling different time zones for expiration, and making sure the process is user-friendly with clear instructions.\n</think>\n\nHere's a comprehensive guide to creating a \"Forgot Password\" function in PHP:\n\n### 1. Create a Reset Password Form (reset_form.php)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <?php if (!empty($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error; ?></p>\n    <?php } ?>\n    \n    <form action=\"reset_password.php\" method=\"post\">\n        <input type=\"text\" name=\"email_or_username\" placeholder=\"Enter your email or username\" required><br><br>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n```\n\n### 2. Process the Reset Request (reset_password.php)\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\n$error = '';\n\nif (!empty($_POST['email_or_username'])) {\n    $input = mysqli_real_escape_string($conn, $_POST['email_or_username']);\n    \n    // Check if input exists in database\n    $sql = \"SELECT id FROM users WHERE email='$input' OR username='$input'\";\n    $result = mysqli_query($conn, $sql);\n    \n    if (mysqli_num_rows($result) > 0) {\n        // Generate reset token and set expiration\n        $token = bin2hex(random_bytes(32));\n        $expires = time() + 3600; // 1 hour\n        \n        $sql = \"UPDATE users SET reset_token='$token', token_expiry=$expires WHERE email='$input' OR username='$input'\";\n        mysqli_query($conn, $sql);\n        \n        // Send reset link\n        $to = $input;\n        $subject = 'Password Reset Request';\n        $message = \"Please click the following link to reset your password: http://example.com/reset.php?token=$token\";\n        mail($to, $subject, $message);\n        echo \"Reset email sent. Check your inbox.\";\n    } else {\n        $error = \"Email/username not found!\";\n    }\n} else {\n    $error = \"Please enter an email or username!\";\n}\n?>\n```\n\n### 3. Reset Password Page (reset.php)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <?php include('db_connection.php');\n    \n    if (!isset($_GET['token'])) {\n        die(\"Invalid token!\");\n    }\n    \n    $token = $_GET['token'];\n    \n    // Check token validity\n    $sql = \"SELECT id, email FROM users WHERE reset_token='$token' AND token_expiry > CURRENT_TIMESTAMP\";\n    $result = mysqli_query($conn, $sql);\n    \n    if (mysqli_num_rows($result) == 0) {\n        die(\"Invalid or expired token. Please request again.\");\n    }\n    \n    if (!empty($_POST['password'])) {\n        $password = $_POST['password'];\n        $confirm_password = $_POST['confirm_password'];\n        \n        // Validate password\n        $error = '';\n        if (strlen($password) < 8) {\n            $error = \"Password must be at least 8 characters!\";\n        } elseif (!preg_match(\"#[A-Z]#\", $password)) {\n            $error = \"Password must include an uppercase letter!\";\n        } elseif (!preg_match(\"#[0-9]#\", $password)) {\n            $error = \"Password must include a number!\";\n        }\n        \n        if ($error == '') {\n            if ($password != $confirm_password) {\n                $error = \"Passwords do not match!\";\n            } else {\n                // Update password\n                $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n                \n                $sql = \"UPDATE users SET password='$hashed_password', reset_token='', token_expiry=0 WHERE reset_token='$token'\";\n                mysqli_query($conn, $sql);\n                \n                header(\"Location: login.php\");\n                die();\n            }\n        }\n    }\n    \n    if (!empty($error)) {\n        echo \"<p style='color:red;'>$error</p>\";\n    }\n    ?>\n    \n    <form action=\"reset.php?token=<?php echo $token; ?>\" method=\"post\">\n        New Password:<br>\n        <input type=\"password\" name=\"password\" required><br><br>\n        Confirm Password:<br>\n        <input type=\"password\" name=\"confirm_password\" required><br><br>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n```\n\n### 4. Database Setup\n\nCreate a table with the following structure:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50),\n    email VARCHAR(100),\n    password VARCHAR(255),\n    reset_token VARCHAR(64) DEFAULT '',\n    token_expiry TIMESTAMP DEFAULT 0\n);\n```\n\n### Important Notes\n\n- **Security**: Use HTTPS to encrypt data. Store passwords hashed with `password_hash()`.\n- **Token Expiry**: Tokens should expire after a short period (e.g., 1 hour).\n- **Rate Limiting**: Implement measures to prevent abuse.\n- **Email Verification**: Ensure the email address is valid and confirmable.\n\nThis implementation provides a basic structure for a password reset system. Depending on your specific needs, you might want to add more features like rate limiting, additional security questions, or two-factor authentication.", "code_blocks": [null, "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\n$error = '';\n\nif (!empty($_POST['email_or_username'])) {\n    $input = mysqli_real_escape_string($conn, $_POST['email_or_username']);\n    \n    // Check if input exists in database\n    $sql = \"SELECT id FROM users WHERE email='$input' OR username='$input'\";\n    $result = mysqli_query($conn, $sql);\n    \n    if (mysqli_num_rows($result) > 0) {\n        // Generate reset token and set expiration\n        $token = bin2hex(random_bytes(32));\n        $expires = time() + 3600; // 1 hour\n        \n        $sql = \"UPDATE users SET reset_token='$token', token_expiry=$expires WHERE email='$input' OR username='$input'\";\n        mysqli_query($conn, $sql);\n        \n        // Send reset link\n        $to = $input;\n        $subject = 'Password Reset Request';\n        $message = \"Please click the following link to reset your password: http://example.com/reset.php?token=$token\";\n        mail($to, $subject, $message);\n        echo \"Reset email sent. Check your inbox.\";\n    } else {\n        $error = \"Email/username not found!\";\n    }\n} else {\n    $error = \"Please enter an email or username!\";\n}\n?>\n```", null, null]}
