{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// IMPORTANT: This is a simplified example for demonstration purposes only.\n// In a production environment, you should NEVER store passwords in plain text.\n// Use strong hashing algorithms (e.g., bcrypt, Argon2) and salting.\n\n// 1. Database connection (replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbName = \"your_database_name\";\n$dbUser = \"your_database_username\";\n$dbPassword = \"your_database_password\";\n\ntry {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4\", $dbUser, $dbPassword);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Database connection failed: \" . $e->getMessage());\n}\n\n// 2. Function to handle the forgot password process\nfunction forgotPassword($email) {\n    // Validate email (basic check - improve in a real application)\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email address.\";\n    }\n\n    // Check if the user exists\n    $stmt = $pdo->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return \"User not found.\";\n    }\n\n    // Generate a unique token (use a more robust method in production)\n    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random string\n\n    // Store the token and user ID in the database\n    $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?\");\n    $stmt->execute([$token, date('Y-m-d H:i:s', time() + 3600), $email]); // Token expires after 1 hour\n\n    return $token; // Return the token to the user\n}\n\n// 3. Example usage (simulated form handling)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (isset($email)) {\n        $resetToken = forgotPassword($email);\n        echo \"<p>Please check your email inbox. A password reset link has been sent to you.</p>\";\n        echo \"<p>Reset Token: \" . htmlspecialchars($resetToken) . \"</p>\"; //Display the token (careful with security)\n        echo \"<p>You can copy and paste this token into the reset password form.</p>\";\n    } else {\n        echo \"<p>Error: Email address is required.</p>\";\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **PDO for Database Interaction:** Uses PDO, which is the recommended way to interact with databases in PHP.  It handles connection pooling, error handling, and provides a consistent API for different database systems.\n* **Error Handling:** Uses a `try...catch` block to gracefully handle potential database connection errors.  This prevents the script from crashing.\n* **Token Generation:**  Generates a cryptographically secure random token using `random_bytes()` and `bin2hex()`.  This is crucial for security.  Do *not* use simple random number generators for tokens.\n* **Token Expiration:** Sets an expiration time for the token (e.g., 1 hour) using `date('Y-m-d H:i:s', time() + 3600)`.  This ensures that the token is only valid for a limited time, reducing the risk of unauthorized password resets.\n* **Clearer Logic:**  The code is structured for better readability and understanding.\n* **Input Validation:** Includes basic email validation using `filter_var()`.  **Crucially, this should be expanded with more robust validation in a production environment.**\n* **Security Considerations:**\n    * **Never store passwords in plain text.** The example shows storing the token, but you MUST use a secure hashing algorithm (bcrypt, Argon2) to hash the password before storing it.\n    * **Token Security:** The token should be sufficiently long and random to resist guessing.\n    * **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset endpoint.\n    * **HTTPS:**  Always use HTTPS to encrypt the communication between the user and the server, protecting the token during transmission.\n* **`htmlspecialchars()`:** Uses `htmlspecialchars()` when displaying the token in the HTML. This prevents cross-site scripting (XSS) vulnerabilities. **However, remember this only protects the display, not the actual token storage or transmission.**\n* **Clear Instructions:** Provides instructions to the user on how to use the token.\n* **Complete HTML Form:**  Includes a basic HTML form for the user to enter their email address and submit the form.\n\n**How to Use and Important Security Notes:**\n\n1. **Replace Placeholders:**  Update the database connection details (`$dbHost`, `$dbName`, `$dbUser`, `$dbPassword`) with your actual database credentials.\n2. **Database Setup:**  Create a database and a `users` table with at least an `id`, `email`, and `password` (for eventual hashing) column.\n3. **Hashing:**  *You MUST* implement password hashing (bcrypt or Argon2) to store the user's password securely. This example *does not* hash the password; it only stores the token.\n4. **Token Handling:**\n   *   **Upon receiving the token:**  The application *must* verify that the token exists in the database and that it has not expired.\n   *   **Upon resetting the password:** The application *must* delete the token from the database.\n5. **Security Best Practices:**  Follow all the security notes outlined above.  This is a simplified example; real-world applications require more robust security measures.\n\n**Important Disclaimer:** This code is for educational purposes only. It is *not* production-ready without significant security enhancements and thorough testing.  I am not responsible for any security vulnerabilities or issues that may arise from using this code.  Always prioritize security when developing any web application.\n", "code_blocks": ["```php\n<?php\n\n// IMPORTANT: This is a simplified example for demonstration purposes only.\n// In a production environment, you should NEVER store passwords in plain text.\n// Use strong hashing algorithms (e.g., bcrypt, Argon2) and salting.\n\n// 1. Database connection (replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbName = \"your_database_name\";\n$dbUser = \"your_database_username\";\n$dbPassword = \"your_database_password\";\n\ntry {\n    $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4\", $dbUser, $dbPassword);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Database connection failed: \" . $e->getMessage());\n}\n\n// 2. Function to handle the forgot password process\nfunction forgotPassword($email) {\n    // Validate email (basic check - improve in a real application)\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email address.\";\n    }\n\n    // Check if the user exists\n    $stmt = $pdo->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return \"User not found.\";\n    }\n\n    // Generate a unique token (use a more robust method in production)\n    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random string\n\n    // Store the token and user ID in the database\n    $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?\");\n    $stmt->execute([$token, date('Y-m-d H:i:s', time() + 3600), $email]); // Token expires after 1 hour\n\n    return $token; // Return the token to the user\n}\n\n// 3. Example usage (simulated form handling)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (isset($email)) {\n        $resetToken = forgotPassword($email);\n        echo \"<p>Please check your email inbox. A password reset link has been sent to you.</p>\";\n        echo \"<p>Reset Token: \" . htmlspecialchars($resetToken) . \"</p>\"; //Display the token (careful with security)\n        echo \"<p>You can copy and paste this token into the reset password form.</p>\";\n    } else {\n        echo \"<p>Error: Email address is required.</p>\";\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```"]}
