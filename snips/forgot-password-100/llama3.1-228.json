{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can implement a \"Forgot Password\" functionality using PHP. This script will send a reset link to the user's email address.\n\n**Password Reset Script**\n\n```php\n// Configuration\n$reset_link_expires_in = 3600; // in seconds (1 hour)\n$email_protocol = 'https';\n$email_host = 'smtp.gmail.com'; // Your SMTP host\n$email_port = 587;\n$email_username = 'your-email@gmail.com'; // Your email address\n$email_password = 'your-password'; // Your email password\n\n// Function to send reset link via email\nfunction send_reset_link($email, $username) {\n    global $reset_link_expires_in, $email_protocol, $email_host, $email_port, $email_username, $email_password;\n\n    try {\n        // Create a token for the user\n        $token = bin2hex(random_bytes(32));\n\n        // Store the token in database (for demonstration purposes)\n        // In real application, use your database library to store the token.\n        // Update the user's password reset token and expiration time in your database.\n        $user_id = insert_user($email, $username); // Assuming you have a function called insert_user\n        update_user_password_reset_token($user_id, $token, $reset_link_expires_in);\n\n        // Send email with reset link\n        send_email($email, 'Reset Password Link', get_reset_link_url($token));\n\n    } catch (Exception $e) {\n        echo \"Error sending email: \" . $e->getMessage();\n    }\n}\n\n// Function to generate reset link URL\nfunction get_reset_link_url($token) {\n    return \"$email_protocol://$email_host/reset-password?token=$token\";\n}\n\n// Function to send email\nfunction send_email($to, $subject, $body) {\n    global $email_protocol, $email_host, $email_port, $email_username, $email_password;\n\n    // Set up the mail server settings\n    $mail = new PHPMailer();\n\n    $mail->isSMTP();\n    $mail->Host = $email_host;\n    $mail->Port = $email_port;\n    $mail->SMTPAuth = true;\n    $mail->Username = $email_username;\n    $mail->Password = $email_password;\n    $mail->SMTPSecure = 'tls';\n    $mail->setFrom($email_username, 'Your Email');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n\n    if (!$mail->send()) {\n        echo \"Error sending email: \" . $mail->ErrorInfo;\n    } else {\n        echo \"Email sent successfully!\";\n    }\n}\n\n// Function to update user's password reset token\nfunction update_user_password_reset_token($user_id, $token, $expires_in) {\n    // Update the user's password reset token and expiration time in your database.\n    // For demonstration purposes, we'll use an array to store the data.\n    $users = $_SESSION['users'] ?? [];\n    $users[$user_id]['password_reset_token'] = $token;\n    $users[$user_id]['password_reset_expires_in'] = time() + $expires_in;\n\n    return $users;\n}\n\n// Example usage:\n$username = 'john_doe';\n$email = 'johndoe@example.com';\n\nsend_reset_link($email, $username);\n```\n\n**Database Schema**\n\nYou'll need to have a database schema that stores user information. For demonstration purposes, we'll use an array, but in real applications, you should use your preferred database library.\n\n```php\n// Example database array (for demonstration purposes)\n$users = [\n    1 => [\n        'email' => 'johndoe@example.com',\n        'username' => 'john_doe'\n    ],\n];\n```\n\nRemember to replace the placeholders (`your-email@gmail.com` and `your-password`) with your actual email address and password.\n\nThis script uses the PHPMailer library, which can be installed via Composer:\n\n```bash\ncomposer require phpmailer/phpmailer\n```\n\n**Reset Password Process**\n\nHere's an overview of how the reset password process works:\n\n1.  The user clicks on the \"Forgot Password\" link.\n2.  They enter their email address and username.\n3.  Our PHP script verifies that they have a valid account by checking the email address against our database.\n4.  If the email address is valid, we generate a random token for the user's account using `random_bytes()`.\n5.  We store the token in our database with an expiration time (e.g., 1 hour) and send a reset link to their email address via PHPMailer.\n6.  When they click on the reset link, it sends them back to our server with the token.\n7.  Our script verifies that the token is valid by checking the user's password reset token in our database.\n8.  If the token is valid, we allow them to set a new password.\n\n**Security Considerations**\n\n*   To prevent attacks, store tokens securely and make sure they expire after a short time (e.g., 1 hour).\n*   Use secure communication protocols like HTTPS for sending emails with reset links.\n*   Validate user input to prevent SQL injection or cross-site scripting (XSS) attacks.\n*   Store passwords securely using a library like password_hash() in PHP.\n\n**Note**: This example is a simplified version of how you could implement a \"Forgot Password\" feature. Depending on your application's requirements, you may need to modify it further to ensure security and functionality.", "code_blocks": ["```php\n// Configuration\n$reset_link_expires_in = 3600; // in seconds (1 hour)\n$email_protocol = 'https';\n$email_host = 'smtp.gmail.com'; // Your SMTP host\n$email_port = 587;\n$email_username = 'your-email@gmail.com'; // Your email address\n$email_password = 'your-password'; // Your email password\n\n// Function to send reset link via email\nfunction send_reset_link($email, $username) {\n    global $reset_link_expires_in, $email_protocol, $email_host, $email_port, $email_username, $email_password;\n\n    try {\n        // Create a token for the user\n        $token = bin2hex(random_bytes(32));\n\n        // Store the token in database (for demonstration purposes)\n        // In real application, use your database library to store the token.\n        // Update the user's password reset token and expiration time in your database.\n        $user_id = insert_user($email, $username); // Assuming you have a function called insert_user\n        update_user_password_reset_token($user_id, $token, $reset_link_expires_in);\n\n        // Send email with reset link\n        send_email($email, 'Reset Password Link', get_reset_link_url($token));\n\n    } catch (Exception $e) {\n        echo \"Error sending email: \" . $e->getMessage();\n    }\n}\n\n// Function to generate reset link URL\nfunction get_reset_link_url($token) {\n    return \"$email_protocol://$email_host/reset-password?token=$token\";\n}\n\n// Function to send email\nfunction send_email($to, $subject, $body) {\n    global $email_protocol, $email_host, $email_port, $email_username, $email_password;\n\n    // Set up the mail server settings\n    $mail = new PHPMailer();\n\n    $mail->isSMTP();\n    $mail->Host = $email_host;\n    $mail->Port = $email_port;\n    $mail->SMTPAuth = true;\n    $mail->Username = $email_username;\n    $mail->Password = $email_password;\n    $mail->SMTPSecure = 'tls';\n    $mail->setFrom($email_username, 'Your Email');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n\n    if (!$mail->send()) {\n        echo \"Error sending email: \" . $mail->ErrorInfo;\n    } else {\n        echo \"Email sent successfully!\";\n    }\n}\n\n// Function to update user's password reset token\nfunction update_user_password_reset_token($user_id, $token, $expires_in) {\n    // Update the user's password reset token and expiration time in your database.\n    // For demonstration purposes, we'll use an array to store the data.\n    $users = $_SESSION['users'] ?? [];\n    $users[$user_id]['password_reset_token'] = $token;\n    $users[$user_id]['password_reset_expires_in'] = time() + $expires_in;\n\n    return $users;\n}\n\n// Example usage:\n$username = 'john_doe';\n$email = 'johndoe@example.com';\n\nsend_reset_link($email, $username);\n```", "```php\n// Example database array (for demonstration purposes)\n$users = [\n    1 => [\n        'email' => 'johndoe@example.com',\n        'username' => 'john_doe'\n    ],\n];\n```", null]}
