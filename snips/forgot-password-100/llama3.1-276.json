{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a simple \"Forgot Password\" function using PHP:\n\n**Database Structure**\n\nFirst, let's assume we have the following database structure for our users table:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\nWe'll be using a simple salted hash to store passwords. In a real-world application, you should use a more secure method like bcrypt or Argon2.\n\n**PHP Code**\n\nCreate a new PHP file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // Generate a random secret key for security\n$email_subject = 'Reset Password';\n\n// Validate input data\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    die('Invalid email address');\n  }\n\n  // Query database to get user's password hash\n  $db = new mysqli('localhost', 'username', 'password', 'database_name');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if (!$result || $result->num_rows === 0) {\n    die('Email not found');\n  }\n\n  // Get password hash from database\n  $row = $result->fetch_assoc();\n  $password_hash = $row['password_hash'];\n\n  // Generate reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update user's reset token in database\n  $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n  $db->query($update_query);\n\n  // Send password reset link via email\n  $to = $email;\n  $subject = $email_subject;\n  $message = 'Click this link to reset your password: <a href=\"' . url('password_reset.php?reset_token=' . $reset_token) . '\">Reset Password</a>';\n  mail($to, $subject, $message);\n\n  die('Password reset link sent to your email');\n}\n\n?>\n```\nThis code checks if the user's email address is valid and exists in our database. If so, it generates a random reset token and sends an email with a password reset link.\n\n**password_reset.php**\n\nCreate another PHP file called `password_reset.php` that will handle the password reset form:\n```php\n<?php\n\n// Validate input data\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $reset_token = $_POST['reset_token'];\n  $new_password = $_POST['new_password'];\n  $confirm_password = $_POST['confirm_password'];\n\n  // Check if reset token matches user's record in database\n  $db = new mysqli('localhost', 'username', 'password', 'database_name');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token = '$reset_token'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if (!$result || $result->num_rows === 0) {\n    die('Invalid reset token');\n  }\n\n  // Get user's id from database\n  $row = $result->fetch_assoc();\n  $user_id = $row['id'];\n\n  // Update password hash in database\n  $update_query = \"UPDATE users SET password_hash = '$new_password' WHERE id = '$user_id'\";\n  $db->query($update_query);\n\n  die('Password updated successfully');\n}\n\n?>\n```\nThis code checks if the provided reset token matches a user's record in our database. If so, it updates the user's password hash with the new password.\n\n**Security Considerations**\n\nNote that this is a basic implementation and you should consider implementing additional security measures such as:\n\n* Hashing passwords using bcrypt or Argon2\n* Using HTTPS (SSL/TLS) to encrypt traffic between client and server\n* Validating user input data thoroughly\n* Storing reset tokens securely, e.g. in an encrypted database field\n* Implementing rate limiting to prevent brute-force attacks\n\nRemember to test this code thoroughly before deploying it in a production environment.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // Generate a random secret key for security\n$email_subject = 'Reset Password';\n\n// Validate input data\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    die('Invalid email address');\n  }\n\n  // Query database to get user's password hash\n  $db = new mysqli('localhost', 'username', 'password', 'database_name');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if (!$result || $result->num_rows === 0) {\n    die('Email not found');\n  }\n\n  // Get password hash from database\n  $row = $result->fetch_assoc();\n  $password_hash = $row['password_hash'];\n\n  // Generate reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update user's reset token in database\n  $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n  $db->query($update_query);\n\n  // Send password reset link via email\n  $to = $email;\n  $subject = $email_subject;\n  $message = 'Click this link to reset your password: <a href=\"' . url('password_reset.php?reset_token=' . $reset_token) . '\">Reset Password</a>';\n  mail($to, $subject, $message);\n\n  die('Password reset link sent to your email');\n}\n\n?>\n```", "```php\n<?php\n\n// Validate input data\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $reset_token = $_POST['reset_token'];\n  $new_password = $_POST['new_password'];\n  $confirm_password = $_POST['confirm_password'];\n\n  // Check if reset token matches user's record in database\n  $db = new mysqli('localhost', 'username', 'password', 'database_name');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token = '$reset_token'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if (!$result || $result->num_rows === 0) {\n    die('Invalid reset token');\n  }\n\n  // Get user's id from database\n  $row = $result->fetch_assoc();\n  $user_id = $row['id'];\n\n  // Update password hash in database\n  $update_query = \"UPDATE users SET password_hash = '$new_password' WHERE id = '$user_id'\";\n  $db->query($update_query);\n\n  die('Password updated successfully');\n}\n\n?>\n```"]}
