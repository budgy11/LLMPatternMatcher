{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// Function to handle password reset\nfunction forgot_password($email)\n{\n    // 1. Check if the email exists in the database\n    $conn = new mysqli($host, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" indicates a string\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Email not found\n    }\n\n    $user = $result->fetch_assoc();\n    $userId = $user['id'];\n    $userEmail = $user['email'];\n    $stmt->close();\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32));\n\n    // 3. Store the token and user ID in the database\n    $sql = \"UPDATE users SET reset_token = ? WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $token, $userId);\n    $stmt->execute();\n\n    if (!$stmt->affected_rows > 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Failed to store the token\n    }\n\n    // 4.  Send an email with the reset link\n    $to = $email;\n    $subject = \"Password Reset Link\";\n    $message = \"Click this link to reset your password: \" . \"<a href='\" . $_SERVER[\"PHP_SELF\"] . \"?reset=\" . urlencode($token) . \"'>Reset Password</a>\";\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    mail($to, $subject, $message, $headers);\n\n    // 5. Close the connection\n    $conn->close();\n\n    return true; // Password reset link sent successfully\n}\n\n\n// Example Usage (This should be in a separate file or part of a form)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (empty($email)) {\n        echo \"Error: Please enter your email address.\";\n    } else {\n        if (forgot_password($email)) {\n            echo \"Password reset link has been sent to your email address.\";\n        } else {\n            echo \"Error: Failed to send password reset link. Please try again.\";\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h2>Forgot Password</h2>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**  This revised code incorporates crucial security best practices:\n    * **`htmlspecialchars()`:**  Uses `htmlspecialchars()` to prevent XSS attacks when displaying the `$_SERVER[\"PHP_SELF\"]` in the form. This is critical.\n    * **`bind_param()`:** Uses `bind_param()` for parameterized queries.  *Never* directly embed user input into SQL queries. This prevents SQL injection vulnerabilities.\n    * **`random_bytes()` and `bin2hex()`:** Generates a cryptographically secure random token using `random_bytes()` and converts it to a hexadecimal string using `bin2hex()`. This is far better than simple random numbers.\n    * **Unique Token:**  The `reset_token` in the database is a unique, random string.  This is a fundamental requirement for secure password reset functionality.\n    * **No direct SQL concatenation:**  Avoids building SQL queries by directly concatenating strings, which is a major security risk.\n\n* **Error Handling:** Includes basic error handling.  If the connection fails or the token update fails, it displays an error message.  More robust error handling would involve logging these errors.\n\n* **Clearer Structure and Comments:**  Improved code organization and comments explain the different steps.\n\n* **User Experience:**  A basic HTML form is provided for ease of use.\n\n* **Database Connection:** Uses `mysqli` which is a common and relatively simple PHP database extension.  You'll need to install and configure this on your server.\n\n* **Complete Example:** Provides a complete, runnable example.\n\n* **`urlencode()`:** Uses `urlencode($token)` to properly encode the token in the URL. This is essential for the reset link to work correctly.\n\n* **Token Storage:** Stores the `reset_token` in the `users` table. This is essential.  The token is *not* the password itself.\n\n* **Email Sending:**  Uses the `mail()` function to send the password reset link.  **Important:** `mail()` is notoriously unreliable across different servers and email configurations.  For production environments, you should use a more robust email sending library (e.g., PHPMailer).\n\nHow to use:\n\n1. **Database Setup:**\n   - Create a database (e.g., `your_database`).\n   - Create a `users` table with columns: `id` (INT, PRIMARY KEY, AUTO_INCREMENT), `email` (VARCHAR), `password` (VARCHAR), and `reset_token` (VARCHAR).\n   - Populate the table with some test user data.\n\n2. **Install `mysqli`:**  Make sure the `mysqli` extension is enabled on your PHP server.\n\n3. **Replace placeholders:**  Update the `$host`, `$username`, `$password`, and `$dbname` variables with your actual database credentials. Change `your_email@example.com` to your actual email address.\n\n4. **Run the script:**  Place the PHP code in a file (e.g., `forgot_password.php`) and run it through a web server.\n\n5. **Test:**\n   - Go to the page in your browser.\n   - Enter an email address that exists in your database.\n   - You should receive an email with a link to reset your password.\n\nImportant Considerations and Production Readiness:\n\n* **Email Sending Library (PHPMailer):**  For production, *strongly* use a dedicated email sending library like PHPMailer. It handles SMTP configuration, TLS/SSL encryption, and better error handling than the built-in `mail()` function.\n\n* **Token Expiration:**  Implement token expiration.  The `reset_token` should only be valid for a limited time (e.g., 15-30 minutes).  Add a `expiration_date` column to your `users` table and check the expiration date when the user attempts to reset their password.\n\n* **Rate Limiting:**  Add rate limiting to prevent abuse (e.g., a user from repeatedly requesting password reset links).\n\n* **Logging:**  Log all password reset attempts (successful or unsuccessful) for auditing and security monitoring.\n\n* **Password Reset Process:** This code only handles the *request* to reset the password. You'll need to implement the actual password reset process (e.g., generate a new password, update the user's password in the database).\n\n* **User Interface:**  The HTML form is very basic.  A production application would require a more polished and user-friendly interface.\n\n* **Two-Factor Authentication (2FA):** For increased security, consider implementing 2FA.\n\nThis comprehensive example provides a solid foundation for implementing a password reset feature in your PHP application.  Remember to prioritize security and robustness when deploying this code in a production environment.  Always stay up-to-date with security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// Function to handle password reset\nfunction forgot_password($email)\n{\n    // 1. Check if the email exists in the database\n    $conn = new mysqli($host, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" indicates a string\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Email not found\n    }\n\n    $user = $result->fetch_assoc();\n    $userId = $user['id'];\n    $userEmail = $user['email'];\n    $stmt->close();\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32));\n\n    // 3. Store the token and user ID in the database\n    $sql = \"UPDATE users SET reset_token = ? WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $token, $userId);\n    $stmt->execute();\n\n    if (!$stmt->affected_rows > 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Failed to store the token\n    }\n\n    // 4.  Send an email with the reset link\n    $to = $email;\n    $subject = \"Password Reset Link\";\n    $message = \"Click this link to reset your password: \" . \"<a href='\" . $_SERVER[\"PHP_SELF\"] . \"?reset=\" . urlencode($token) . \"'>Reset Password</a>\";\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    mail($to, $subject, $message, $headers);\n\n    // 5. Close the connection\n    $conn->close();\n\n    return true; // Password reset link sent successfully\n}\n\n\n// Example Usage (This should be in a separate file or part of a form)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (empty($email)) {\n        echo \"Error: Please enter your email address.\";\n    } else {\n        if (forgot_password($email)) {\n            echo \"Password reset link has been sent to your email address.\";\n        } else {\n            echo \"Error: Failed to send password reset link. Please try again.\";\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h2>Forgot Password</h2>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```"]}
