{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"forgot password\" function using PHP:\n\n**Database Schema:**\n\nFor this example, let's assume we have a database table called `users` with the following columns:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| email | varchar(255) |\n| username | varchar(255) |\n| password | varchar(255) |\n\n**PHP Code:**\n\nCreate a new PHP file called `forgot_password.php`. This file will contain the logic for handling the forgot password request.\n\n```php\n<?php\n\n// Include database connection script\ninclude 'db_connection.php';\n\n// Define variables\n$email = $_POST['email'];\n$token = md5(uniqid(mt_rand(), true)); // Generate a random token\n\n// Check if email exists in database\n$query = \"SELECT * FROM users WHERE email = :email\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':email', $email);\n$stmt->execute();\n$result = $stmt->fetchAll();\n\nif (!empty($result)) {\n    // Email found, send reset password email with token\n    $subject = 'Reset Password';\n    $message = \"Click on this link to reset your password: <a href='reset_password.php?token=\" . $token . \"'>\" . $_SERVER['HTTP_HOST'] . \"/reset_password.php?token=\" . $token . \"</a>\";\n    mail($email, $subject, $message);\n    \n    // Save token in database for later use\n    $query = \"UPDATE users SET reset_token = :token WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n    \n    echo json_encode(array('message' => 'An email has been sent to your email address with a reset link.'));\n} else {\n    echo json_encode(array('error' => 'Email not found in our records.'));\n}\n\n?>\n```\n\n**Reset Password PHP File:**\n\nCreate another PHP file called `reset_password.php` which will contain the logic for resetting the password.\n\n```php\n<?php\n\n// Include database connection script\ninclude 'db_connection.php';\n\n// Define variables\n$token = $_GET['token'];\n$email = $_POST['email'];\n\n// Check if token exists in database\n$query = \"SELECT * FROM users WHERE reset_token = :token AND email = :email\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':email', $email);\n$stmt->bindParam(':token', $token);\n$stmt->execute();\n$result = $stmt->fetchAll();\n\nif (!empty($result)) {\n    // Token found, allow user to change password\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $new_password = $_POST['new_password'];\n        $confirm_password = $_POST['confirm_password'];\n        \n        if ($new_password == $confirm_password) {\n            // Update password in database\n            $query = \"UPDATE users SET password = :password WHERE reset_token = :token AND email = :email\";\n            $stmt = $pdo->prepare($query);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':token', $token);\n            $stmt->bindParam(':password', $new_password);\n            $stmt->execute();\n            \n            // Remove token from database\n            $query = \"UPDATE users SET reset_token = NULL WHERE email = :email\";\n            $stmt = $pdo->prepare($query);\n            $stmt->bindParam(':email', $email);\n            $stmt->execute();\n            \n            echo json_encode(array('message' => 'Password changed successfully.'));\n        } else {\n            echo json_encode(array('error' => 'Passwords do not match.'));\n        }\n    } else {\n        // Render password change form\n        include 'reset_password_form.php';\n    }\n} else {\n    echo json_encode(array('error' => 'Invalid token or email.'));\n}\n\n?>\n```\n\n**HTML Form for Reset Password:**\n\nCreate an HTML file called `reset_password_form.html` which will contain the form for changing the password.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <h2>Reset Password</h2>\n    \n    <?php if (!empty($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error['message']; ?></p>\n    <?php } elseif (!empty($success)) { ?>\n        <p style=\"color: green;\"><?php echo $success; ?></p>\n    <?php } ?>\n    \n    <form method=\"post\">\n        <label for=\"new_password\">New Password:</label>\n        <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n        <label for=\"confirm_password\">Confirm Password:</label>\n        <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n        <button type=\"submit\">Change Password</button>\n    </form>\n    \n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            $('input[type=\"password\"]').focus(function(){\n                $(this).attr('type', 'text');\n            });\n            \n            $('input[type=\"password\"]').blur(function(){\n                $(this).attr('type', 'password');\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**Note:**\n\n* Make sure to update the `db_connection.php` file with your database credentials and connection settings.\n* This is a basic example, you should consider implementing password hashing and verification using libraries like `password_hash()` and `password_verify()`.\n* You should also implement additional security measures such as CSRF tokens and validation for user input.", "code_blocks": ["```php\n<?php\n\n// Include database connection script\ninclude 'db_connection.php';\n\n// Define variables\n$email = $_POST['email'];\n$token = md5(uniqid(mt_rand(), true)); // Generate a random token\n\n// Check if email exists in database\n$query = \"SELECT * FROM users WHERE email = :email\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':email', $email);\n$stmt->execute();\n$result = $stmt->fetchAll();\n\nif (!empty($result)) {\n    // Email found, send reset password email with token\n    $subject = 'Reset Password';\n    $message = \"Click on this link to reset your password: <a href='reset_password.php?token=\" . $token . \"'>\" . $_SERVER['HTTP_HOST'] . \"/reset_password.php?token=\" . $token . \"</a>\";\n    mail($email, $subject, $message);\n    \n    // Save token in database for later use\n    $query = \"UPDATE users SET reset_token = :token WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n    \n    echo json_encode(array('message' => 'An email has been sent to your email address with a reset link.'));\n} else {\n    echo json_encode(array('error' => 'Email not found in our records.'));\n}\n\n?>\n```", "```php\n<?php\n\n// Include database connection script\ninclude 'db_connection.php';\n\n// Define variables\n$token = $_GET['token'];\n$email = $_POST['email'];\n\n// Check if token exists in database\n$query = \"SELECT * FROM users WHERE reset_token = :token AND email = :email\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':email', $email);\n$stmt->bindParam(':token', $token);\n$stmt->execute();\n$result = $stmt->fetchAll();\n\nif (!empty($result)) {\n    // Token found, allow user to change password\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $new_password = $_POST['new_password'];\n        $confirm_password = $_POST['confirm_password'];\n        \n        if ($new_password == $confirm_password) {\n            // Update password in database\n            $query = \"UPDATE users SET password = :password WHERE reset_token = :token AND email = :email\";\n            $stmt = $pdo->prepare($query);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':token', $token);\n            $stmt->bindParam(':password', $new_password);\n            $stmt->execute();\n            \n            // Remove token from database\n            $query = \"UPDATE users SET reset_token = NULL WHERE email = :email\";\n            $stmt = $pdo->prepare($query);\n            $stmt->bindParam(':email', $email);\n            $stmt->execute();\n            \n            echo json_encode(array('message' => 'Password changed successfully.'));\n        } else {\n            echo json_encode(array('error' => 'Passwords do not match.'));\n        }\n    } else {\n        // Render password change form\n        include 'reset_password_form.php';\n    }\n} else {\n    echo json_encode(array('error' => 'Invalid token or email.'));\n}\n\n?>\n```", null]}
