{"prompt": "Create a forgot password function using php", "llm_output": "Creating a \"forgot password\" feature involves several steps, including:\n\n1. **User Input**: The user attempts to recover their account by providing the email address associated with it.\n2. **Verification**: A verification code or link is sent to the provided email for validation.\n3. **Password Reset**: After verifying the identity of the user through the code or link, a new password can be created and saved.\n\nBelow is a basic implementation using PHP, focusing on sending a reset link (a simple approach). This example does not cover all security measures (like hashing passwords) but demonstrates the flow:\n\n### Database Setup\n\nFirst, ensure your database has a table to store user information. For this example, let's assume we have a `users` table with columns for `id`, `username`, `email`, and `password` stored in plain text. **Note:** In practice, you should always hash passwords for security.\n\n### Step 1: Create the Database Schema\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT,\n    username VARCHAR(50),\n    email VARCHAR(100) UNIQUE,\n    password VARCHAR(255),\n    PRIMARY KEY (id)\n);\n```\n\n### PHP Code for Forgot Password Functionality\n\nThis example includes scripts for the user input, sending a verification link, and changing the password.\n\n#### 1. User Input: Forgot Password Page (`forgot_password.php`)\n\n```php\n<?php\nrequire_once 'db.php'; // Include your database connection script here.\nif (isset($_POST['submit'])) {\n    $email = $_POST['email'];\n    $user = getUserByEmail($email); // Assume this function returns a user object or NULL if not found.\n    if ($user) {\n        // Send reset link\n        sendResetLink($user->id, $user->email);\n    } else {\n        echo \"Email not found.\";\n    }\n}\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"text\" name=\"email\" placeholder=\"Your Email Address\">\n    <button type=\"submit\" name=\"submit\">Send Reset Link</button>\n</form>\n```\n\n#### 2. Send Verification Code (`send_reset_link.php`)\n\nThis script sends a reset link to the user's email.\n\n```php\n<?php\nrequire_once 'db.php';\n\nfunction sendResetLink($userId, $userEmail) {\n    // Generate unique code for password reset\n    $resetCode = uniqid();\n    \n    // Store the code in database\n    updateResetCode($userId, $resetCode);\n    \n    // Send email with reset link\n    sendMail($userEmail, 'Password Reset', \"Your password reset link: <a href='https://example.com/reset?code=$resetCode'>Click Here</a>\");\n}\n\nfunction updateResetCode($id, $code) {\n    global $conn;\n    $stmt = $conn->prepare(\"UPDATE users SET reset_code = ? WHERE id = ?\");\n    $stmt->execute([$code, $id]);\n}\n?>\n```\n\n#### 3. Password Reset (`reset.php`)\n\n```php\n<?php\nrequire_once 'db.php';\n\nif (isset($_GET['code'])) {\n    $userId = getUserIdByCode($_GET['code']);\n    if ($userId) {\n        // Display form for new password and send it to db\n        ?>\n        <form action=\"\" method=\"post\">\n            <input type=\"password\" name=\"newPassword\" placeholder=\"New Password\">\n            <button type=\"submit\" name=\"change\">Change Password</button>\n        </form>\n        <?php\n    } else {\n        echo \"Invalid reset code.\";\n    }\n}\n\nif (isset($_POST['change'])) {\n    $userId = getUserIdByCode($_GET['code']);\n    if ($userId) {\n        // Change password in db\n        changePassword($userId, $_POST['newPassword']);\n        echo \"Password changed successfully.\";\n    } else {\n        echo \"Invalid reset code.\";\n    }\n}\n\nfunction changePassword($id, $password) {\n    global $conn;\n    $stmt = $conn->prepare(\"UPDATE users SET password = ? WHERE id = ?\");\n    $stmt->execute([$password, $id]);\n}\n?>\n```\n\n### Notes:\n- This example is simplified for illustration purposes and should be adapted to your specific database schema and security standards.\n- Consider implementing additional security measures such as password hashing and salting to protect user passwords.\n- Error handling and validation are minimal in this example; ensure you add proper error checking and user input sanitization in a production environment.", "code_blocks": [null, "```php\n<?php\nrequire_once 'db.php'; // Include your database connection script here.\nif (isset($_POST['submit'])) {\n    $email = $_POST['email'];\n    $user = getUserByEmail($email); // Assume this function returns a user object or NULL if not found.\n    if ($user) {\n        // Send reset link\n        sendResetLink($user->id, $user->email);\n    } else {\n        echo \"Email not found.\";\n    }\n}\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"text\" name=\"email\" placeholder=\"Your Email Address\">\n    <button type=\"submit\" name=\"submit\">Send Reset Link</button>\n</form>\n```", "```php\n<?php\nrequire_once 'db.php';\n\nfunction sendResetLink($userId, $userEmail) {\n    // Generate unique code for password reset\n    $resetCode = uniqid();\n    \n    // Store the code in database\n    updateResetCode($userId, $resetCode);\n    \n    // Send email with reset link\n    sendMail($userEmail, 'Password Reset', \"Your password reset link: <a href='https://example.com/reset?code=$resetCode'>Click Here</a>\");\n}\n\nfunction updateResetCode($id, $code) {\n    global $conn;\n    $stmt = $conn->prepare(\"UPDATE users SET reset_code = ? WHERE id = ?\");\n    $stmt->execute([$code, $id]);\n}\n?>\n```", "```php\n<?php\nrequire_once 'db.php';\n\nif (isset($_GET['code'])) {\n    $userId = getUserIdByCode($_GET['code']);\n    if ($userId) {\n        // Display form for new password and send it to db\n        ?>\n        <form action=\"\" method=\"post\">\n            <input type=\"password\" name=\"newPassword\" placeholder=\"New Password\">\n            <button type=\"submit\" name=\"change\">Change Password</button>\n        </form>\n        <?php\n    } else {\n        echo \"Invalid reset code.\";\n    }\n}\n\nif (isset($_POST['change'])) {\n    $userId = getUserIdByCode($_GET['code']);\n    if ($userId) {\n        // Change password in db\n        changePassword($userId, $_POST['newPassword']);\n        echo \"Password changed successfully.\";\n    } else {\n        echo \"Invalid reset code.\";\n    }\n}\n\nfunction changePassword($id, $password) {\n    global $conn;\n    $stmt = $conn->prepare(\"UPDATE users SET password = ? WHERE id = ?\");\n    $stmt->execute([$password, $id]);\n}\n?>\n```"]}
