{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// 1. Get the email from the form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    // 2. Validate the email\n    if (empty($email)) {\n        $error = \"Please enter your email address.\";\n    } else {\n        // 3.  Check if the email exists in the database\n        $conn = new mysqli($host, $username, $password, $dbname);\n\n        if ($conn->connect_error) {\n            die(\"Connection failed: \" . $conn->connect_error);\n        }\n\n        $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n        $result = $conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            // Email exists, generate a unique token and send a reset password email\n            $token = bin2hex(random_bytes(32)); // Generate a random token\n            $reset_link = \"http://yourwebsite.com/reset_password.php?token=\" . $token; // Replace with your website URL\n\n            // Prepare the reset password email\n            $to = $email;\n            $subject = \"Password Reset\";\n            $message = \"Click on the link below to reset your password:\\n\" . $reset_link;\n            $headers = \"From: your_email@example.com\\r\\n\";\n            mail($to, $subject, $message, $headers);\n\n            // Store the token in the database (for later retrieval) -  This is crucial!\n            $conn->query(\"UPDATE users SET token = '$token' WHERE email = '$email'\");\n\n            $success = \"Password reset email sent to $email.  Check your inbox.\";\n        } else {\n            $error = \"Email address not found.\";\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h2>Forgot Password</h2>\n\n    <?php if (isset($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error; ?></p>\n    <?php } ?>\n\n    <?php if (isset($success)) { ?>\n        <p style=\"color: green;\"><?php echo $success; ?></p>\n    <?php } ?>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your Email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:  `htmlspecialchars()`:**  Crucially, the code now uses `htmlspecialchars($_SERVER[\"PHP_SELF\"])` in the `action` attribute of the form.  This prevents Cross-Site Scripting (XSS) attacks by escaping any potentially malicious characters in the form's URL.  *This is essential for any user-submitted form.*\n\n* **Token Generation and Storage:**\n   * `bin2hex(random_bytes(32))` generates a cryptographically secure, unique token.  Using `random_bytes` is significantly better than `rand()` or `mt_rand()` for security.  32 bytes (256 bits) provides a very high level of security.\n   * The token is *stored* in the database (in the `token` column of the `users` table) *after* it's generated. This is absolutely critical. Without storing the token, you can't verify if the user actually requested a reset.\n   * `UPDATE users SET token = '$token' WHERE email = '$email';` This line updates the user's record with the token.\n\n* **Database Connection:**  The code includes a basic database connection example.  **Replace the placeholder values** with your actual database credentials.\n\n* **Input Validation:**  A basic check `empty($email)` is included to ensure that the email address is actually provided. This prevents errors and makes the form more user-friendly.\n\n* **Clearer Error and Success Messages:** The error and success messages are displayed in red and green, respectively, for better visibility.\n\n* **Reset Link Generation:** The `reset_link` is generated with the token embedded in the URL.  **Replace `http://yourwebsite.com` with your actual website domain.**\n\n* **Email Sending:**  The `mail()` function is used to send the reset password email. *Important:* The `mail()` function's success is not reliably tracked in PHP. You'll need to implement your own email sending logic (e.g., using a library like PHPMailer) for more robust handling.  The `mail()` function is often problematic due to variations in server configurations.\n\n* **Reset Password Process (Missing \u2013 Needs Expansion):**  This code *only* handles sending the reset password email.  It does *not* include the code to handle the user clicking the reset link and updating their password.  You'll need to add the following functionality:\n    1. **URL Decoding:**  When the user clicks the reset link, decode the token from the URL.\n    2. **Token Verification:**  Check if the token exists in the database and if it's valid (not expired - you'll need to add an expiration time for the tokens).\n    3. **Password Update:**  Allow the user to enter a new password and update the password in the database.\n\n* **Email Sending Considerations (Important):**\n    * **PHPMailer:** The `mail()` function is notoriously unreliable.  Consider using a dedicated email sending library like PHPMailer: [https://www.phpmailer.com/](https://www.phpmailer.com/)\n    * **SMTP:**  Configure PHPMailer to use an SMTP server for sending emails.\n    * **SPF, DKIM, DMARC:** Implement these email authentication protocols to improve deliverability and prevent spoofing.\n\nHow to use:\n\n1. **Save the Code:** Save the code as a `.php` file (e.g., `forgot_password.php`).\n2. **Database Setup:** Create a `users` table in your database with columns like `id`, `email`, and `token`.\n3. **Replace Placeholders:** Replace the placeholder database credentials and website URL with your actual values.\n4. **Run the File:**  Place the file in your web server's document root and access it through your browser.\n5. **Test:**  Test the functionality to ensure that emails are sent correctly and that the reset password process works as expected.\n\nRemember to prioritize security when implementing this functionality. Always validate and sanitize user inputs, use strong passwords, and store sensitive information securely.  Use a reliable email sending library.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// 1. Get the email from the form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    // 2. Validate the email\n    if (empty($email)) {\n        $error = \"Please enter your email address.\";\n    } else {\n        // 3.  Check if the email exists in the database\n        $conn = new mysqli($host, $username, $password, $dbname);\n\n        if ($conn->connect_error) {\n            die(\"Connection failed: \" . $conn->connect_error);\n        }\n\n        $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n        $result = $conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            // Email exists, generate a unique token and send a reset password email\n            $token = bin2hex(random_bytes(32)); // Generate a random token\n            $reset_link = \"http://yourwebsite.com/reset_password.php?token=\" . $token; // Replace with your website URL\n\n            // Prepare the reset password email\n            $to = $email;\n            $subject = \"Password Reset\";\n            $message = \"Click on the link below to reset your password:\\n\" . $reset_link;\n            $headers = \"From: your_email@example.com\\r\\n\";\n            mail($to, $subject, $message, $headers);\n\n            // Store the token in the database (for later retrieval) -  This is crucial!\n            $conn->query(\"UPDATE users SET token = '$token' WHERE email = '$email'\");\n\n            $success = \"Password reset email sent to $email.  Check your inbox.\";\n        } else {\n            $error = \"Email address not found.\";\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h2>Forgot Password</h2>\n\n    <?php if (isset($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error; ?></p>\n    <?php } ?>\n\n    <?php if (isset($success)) { ?>\n        <p style=\"color: green;\"><?php echo $success; ?></p>\n    <?php } ?>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your Email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```"]}
