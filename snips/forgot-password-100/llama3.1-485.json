{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nThis is an example of a simple forgot password function in PHP. It uses a hash table to store user email addresses and corresponding passwords.\n\n**Database Schema**\n\nFor this example, we'll assume you have the following database schema:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n\n**PHP Code**\n\nCreate a new PHP file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to hash password\nfunction hashPassword($password) {\n    return md5(uniqid(mt_rand(), true));\n}\n\n// Function to reset password\nfunction resetPassword($email, $newPassword) {\n    global $conn;\n    \n    // Get user ID\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $userId = $result->fetch_assoc()['id'];\n    \n    if ($userId) {\n        // Hash new password\n        $hashedPassword = hashPassword($newPassword);\n        \n        // Update user password\n        $stmt = $conn->prepare(\"UPDATE users SET password_hash = ? WHERE id = ?\");\n        $stmt->bind_param(\"ss\", $hashedPassword, $userId);\n        $stmt->execute();\n    }\n    \n    return true;\n}\n\n// Function to send reset email\nfunction sendResetEmail($email) {\n    global $conn;\n    \n    // Get user ID\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $userId = $result->fetch_assoc()['id'];\n    \n    if ($userId) {\n        // Generate reset token\n        $resetToken = uniqid(mt_rand(), true);\n        \n        // Store reset token in database\n        $stmt = $conn->prepare(\"UPDATE users SET reset_token = ? WHERE id = ?\");\n        $stmt->bind_param(\"ss\", $resetToken, $userId);\n        $stmt->execute();\n        \n        // Send email with reset link\n        $to = $email;\n        $subject = \"Reset Password\";\n        $body = \"Click this link to reset your password: <a href='http://your_website.com/reset_password.php?token=\" . $resetToken . \"'>Reset Password</a>\";\n        \n        mail($to, $subject, $body);\n    }\n    \n    return true;\n}\n\n// Handle forgot password request\nif (isset($_POST['email'])) {\n    sendResetEmail($_POST['email']);\n}\n\n?>\n```\n\n**Explanation**\n\n1. The `forgot_password.php` file connects to the database using the provided configuration variables.\n2. The `hashPassword()` function hashes a password using MD5 and uniqid functions.\n3. The `resetPassword()` function takes an email address, new password, and user ID as input. It updates the user's password in the database.\n4. The `sendResetEmail()` function sends an email to the user with a reset link. This function also generates a reset token and stores it in the database.\n\n**Example Use Case**\n\nTo test this code, create a new HTML file called `forgot_password.html` with the following form:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n  <input type=\"email\" name=\"email\" placeholder=\"Enter email address\">\n  <button type=\"submit\">Reset Password</button>\n</form>\n```\n\nSubmit the form with a valid email address. The `sendResetEmail()` function will be triggered, sending an email to the user with a reset link.\n\n**Note**: This is a simplified example and you should consider implementing additional security measures such as:\n\n* Using a more secure hashing algorithm like bcrypt or Argon2.\n* Implementing rate limiting for password resets.\n* Storing passwords securely using a library like PHPass.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to hash password\nfunction hashPassword($password) {\n    return md5(uniqid(mt_rand(), true));\n}\n\n// Function to reset password\nfunction resetPassword($email, $newPassword) {\n    global $conn;\n    \n    // Get user ID\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $userId = $result->fetch_assoc()['id'];\n    \n    if ($userId) {\n        // Hash new password\n        $hashedPassword = hashPassword($newPassword);\n        \n        // Update user password\n        $stmt = $conn->prepare(\"UPDATE users SET password_hash = ? WHERE id = ?\");\n        $stmt->bind_param(\"ss\", $hashedPassword, $userId);\n        $stmt->execute();\n    }\n    \n    return true;\n}\n\n// Function to send reset email\nfunction sendResetEmail($email) {\n    global $conn;\n    \n    // Get user ID\n    $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n    $stmt->bind_param(\"s\", $email);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    $userId = $result->fetch_assoc()['id'];\n    \n    if ($userId) {\n        // Generate reset token\n        $resetToken = uniqid(mt_rand(), true);\n        \n        // Store reset token in database\n        $stmt = $conn->prepare(\"UPDATE users SET reset_token = ? WHERE id = ?\");\n        $stmt->bind_param(\"ss\", $resetToken, $userId);\n        $stmt->execute();\n        \n        // Send email with reset link\n        $to = $email;\n        $subject = \"Reset Password\";\n        $body = \"Click this link to reset your password: <a href='http://your_website.com/reset_password.php?token=\" . $resetToken . \"'>Reset Password</a>\";\n        \n        mail($to, $subject, $body);\n    }\n    \n    return true;\n}\n\n// Handle forgot password request\nif (isset($_POST['email'])) {\n    sendResetEmail($_POST['email']);\n}\n\n?>\n```", null]}
