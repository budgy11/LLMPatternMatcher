{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a simple \"Forgot Password\" function using PHP:\n\n**Database Schema:**\n\nWe'll assume you have a `users` table with the following columns:\n\n* `id`: unique identifier\n* `username`: username chosen by user\n* `email`: email address associated with user account\n* `password`: hashed password (using a library like [password_hash](https://php.net/manual/en/function.password-hash.php))\n\n**PHP Code:**\n\nCreate a new PHP file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_POST['email'])) {\n    die('Invalid request');\n}\n\n$email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\nif (!$email) {\n    die('Invalid email address');\n}\n\n// Query database for user with matching email\n$stmt = $db->prepare(\"SELECT id, username FROM users WHERE email = ?\");\n$stmt->execute([$email]);\n$user_data = $stmt->fetch();\n\nif ($user_data === false) {\n    echo 'Email not found';\n} else {\n    // Generate password reset token and store in database\n    $token = bin2hex(random_bytes(32));\n    $stmt = $db->prepare(\"UPDATE users SET password_reset_token = ? WHERE id = ?\");\n    $stmt->execute([$token, $user_data['id']]);\n\n    // Send email with password reset link\n    $subject = 'Password Reset Link';\n    $message = '\n        <p>Click the following link to reset your password:</p>\n        <a href=\"' . URL . '/reset_password.php?token=' . $token . '\">Reset Password</a>\n    ';\n    mail($email, $subject, $message);\n\n    echo 'Password reset link sent to email';\n}\n\n?>\n```\n**Explanation:**\n\n1. We first validate the input `email` field using PHP's built-in `filter_input` function.\n2. We query the database for a user with matching email address. If no match is found, we display an error message.\n3. If a match is found, we generate a random password reset token and store it in the database associated with the user account.\n4. We send an email to the user's email address with a link to reset their password. The link includes the password reset token as a query parameter.\n\n**Security Considerations:**\n\n* Make sure to use HTTPS (SSL/TLS) for all communication between client and server to prevent eavesdropping.\n* Use a secure library like [password_hash](https://php.net/manual/en/function.password-hash.php) to store passwords securely in the database.\n* When generating password reset tokens, use a cryptographically secure pseudo-random number generator (like `random_bytes`) to avoid predictability.\n\n**Reset Password Form:**\n\nCreate a new PHP file called `reset_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_GET['token'])) {\n    die('Invalid request');\n}\n\n$token = filter_input(INPUT_GET, 'token', FILTER_SANITIZE_STRING);\nif (!$token) {\n    die('Invalid token');\n}\n\n// Query database for user with matching password reset token\n$stmt = $db->prepare(\"SELECT id, username FROM users WHERE password_reset_token = ?\");\n$stmt->execute([$token]);\n$user_data = $stmt->fetch();\n\nif ($user_data === false) {\n    echo 'Invalid token';\n} else {\n    // Prompt user to enter new password\n    ?>\n    <h1>Reset Password</h1>\n    <form action=\"\" method=\"post\">\n        <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n        <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm New Password\">\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    <?php\n}\n\n?>\n```\n**Explanation:**\n\n1. We first validate the input `token` field using PHP's built-in `filter_input` function.\n2. We query the database for a user with matching password reset token. If no match is found, we display an error message.\n3. If a match is found, we prompt the user to enter their new password and confirm it.\n\n**Reset Password Logic:**\n\nCreate a new PHP file called `reset_password_logic.php` and add the following code:\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_POST['new_password']) || !isset($_POST['confirm_password'])) {\n    die('Invalid request');\n}\n\n$new_password = filter_input(INPUT_POST, 'new_password', FILTER_SANITIZE_STRING);\n$confirm_password = filter_input(INPUT_POST, 'confirm_password', FILTER_SANITIZE_STRING);\n\nif ($new_password !== $confirm_password) {\n    echo 'Passwords do not match';\n} else {\n    // Update user password in database\n    $stmt = $db->prepare(\"UPDATE users SET password = ?, password_reset_token = NULL WHERE id = ?\");\n    $password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n    $stmt->execute([$password_hash, $_POST['user_id']]);\n\n    echo 'Password updated successfully';\n}\n\n?>\n```\n**Explanation:**\n\n1. We first validate the input `new_password` and `confirm_password` fields using PHP's built-in `filter_input` function.\n2. If the passwords do not match, we display an error message.\n3. If the passwords match, we update the user password in the database by hashing it with a secure algorithm (like [password_hash](https://php.net/manual/en/function.password-hash.php)).\n\nNote: This is just one possible implementation of a \"Forgot Password\" function using PHP. You should adapt this code to fit your specific use case and security requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_POST['email'])) {\n    die('Invalid request');\n}\n\n$email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\nif (!$email) {\n    die('Invalid email address');\n}\n\n// Query database for user with matching email\n$stmt = $db->prepare(\"SELECT id, username FROM users WHERE email = ?\");\n$stmt->execute([$email]);\n$user_data = $stmt->fetch();\n\nif ($user_data === false) {\n    echo 'Email not found';\n} else {\n    // Generate password reset token and store in database\n    $token = bin2hex(random_bytes(32));\n    $stmt = $db->prepare(\"UPDATE users SET password_reset_token = ? WHERE id = ?\");\n    $stmt->execute([$token, $user_data['id']]);\n\n    // Send email with password reset link\n    $subject = 'Password Reset Link';\n    $message = '\n        <p>Click the following link to reset your password:</p>\n        <a href=\"' . URL . '/reset_password.php?token=' . $token . '\">Reset Password</a>\n    ';\n    mail($email, $subject, $message);\n\n    echo 'Password reset link sent to email';\n}\n\n?>\n```", "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_GET['token'])) {\n    die('Invalid request');\n}\n\n$token = filter_input(INPUT_GET, 'token', FILTER_SANITIZE_STRING);\nif (!$token) {\n    die('Invalid token');\n}\n\n// Query database for user with matching password reset token\n$stmt = $db->prepare(\"SELECT id, username FROM users WHERE password_reset_token = ?\");\n$stmt->execute([$token]);\n$user_data = $stmt->fetch();\n\nif ($user_data === false) {\n    echo 'Invalid token';\n} else {\n    // Prompt user to enter new password\n    ?>\n    <h1>Reset Password</h1>\n    <form action=\"\" method=\"post\">\n        <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n        <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm New Password\">\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    <?php\n}\n\n?>\n```", "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Input validation\nif (!isset($_POST['new_password']) || !isset($_POST['confirm_password'])) {\n    die('Invalid request');\n}\n\n$new_password = filter_input(INPUT_POST, 'new_password', FILTER_SANITIZE_STRING);\n$confirm_password = filter_input(INPUT_POST, 'confirm_password', FILTER_SANITIZE_STRING);\n\nif ($new_password !== $confirm_password) {\n    echo 'Passwords do not match';\n} else {\n    // Update user password in database\n    $stmt = $db->prepare(\"UPDATE users SET password = ?, password_reset_token = NULL WHERE id = ?\");\n    $password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n    $stmt->execute([$password_hash, $_POST['user_id']]);\n\n    echo 'Password updated successfully';\n}\n\n?>\n```"]}
