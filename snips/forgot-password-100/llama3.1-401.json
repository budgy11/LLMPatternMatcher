{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nBelow is an example of how to implement a forgot password function using PHP. This example includes:\n\n1. A form for the user to enter their email address.\n2. A script that sends an email with a temporary password reset link.\n3. A page that allows the user to update their password after clicking on the reset link.\n\n**Database Setup**\n-----------------\n\nAssuming you're using MySQL, create a table `users` with columns `email`, `password` (hashed using `password_hash()` function), and `reset_token`.\n\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255)\n);\n```\n\n**Forgot Password Form**\n------------------------\n\nCreate a new PHP file `forgot-password.php` with the following code:\n\n```php\n<?php\nrequire_once 'db.php'; // database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n  \n  if ($email) {\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() === 1) {\n      // Generate a temporary reset token\n      $resetToken = bin2hex(random_bytes(32));\n      \n      // Update the user's reset token in the database\n      $query = \"UPDATE users SET reset_token = :resetToken WHERE email = :email\";\n      $stmt = $db->prepare($query);\n      $stmt->bindParam(':resetToken', $resetToken);\n      $stmt->bindParam(':email', $email);\n      $stmt->execute();\n      \n      // Send an email with a password reset link\n      sendResetEmail($email, $resetToken);\n    }\n  }\n}\n\nfunction sendResetEmail($email, $resetToken) {\n  // Email configuration (replace with your own)\n  $to = $email;\n  $subject = 'Password Reset Link';\n  $body = \"Click this link to reset your password: http://example.com/reset-password/$resetToken\";\n  \n  mail($to, $subject, $body);\n}\n\n?>\n```\n\n**Password Reset Page**\n------------------------\n\nCreate a new PHP file `reset-password.php` with the following code:\n\n```php\n<?php\nrequire_once 'db.php'; // database connection\n\n$token = filter_input(INPUT_GET, 'token');\n\nif ($token) {\n  // Check if the token is valid\n  $query = \"SELECT * FROM users WHERE reset_token = :token\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  \n  if ($stmt->rowCount() === 1) {\n    // Display the password update form\n    ?>\n    \n    <h2>Reset Password</h2>\n    \n    <?php\n    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n      $password = filter_input(INPUT_POST, 'password', FILTER_DEFAULT);\n      \n      if ($password) {\n        // Hash the new password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n        \n        // Update the user's password in the database\n        $query = \"UPDATE users SET password = :password WHERE reset_token = :token\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n        \n        // Clear the reset token\n        $query = \"UPDATE users SET reset_token = NULL WHERE reset_token = :token\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n      }\n    } else {\n      ?>\n      \n      <form action=\"\" method=\"post\">\n        <label for=\"password\">New Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Update Password</button>\n      </form>\n      \n      <?php\n    }\n  } else {\n    echo \"Invalid token.\";\n  }\n} else {\n  echo \"No token provided.\";\n}\n?>\n```\n\n**Example Use Case**\n--------------------\n\n1. The user visits the forgot password page (`forgot-password.php`) and enters their email address.\n2. The script checks if a user with the entered email exists in the database.\n3. If the user exists, a temporary reset token is generated and stored in the database along with the email.\n4. An email is sent to the user's email address with a password reset link containing the reset token.\n5. The user clicks on the reset link, which directs them to the password reset page (`reset-password.php`).\n6. On the password reset page, the user can update their password by entering a new one and submitting the form.\n\nRemember to adjust the database connection settings and email configuration according to your specific setup.", "code_blocks": [null, "```php\n<?php\nrequire_once 'db.php'; // database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n  \n  if ($email) {\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() === 1) {\n      // Generate a temporary reset token\n      $resetToken = bin2hex(random_bytes(32));\n      \n      // Update the user's reset token in the database\n      $query = \"UPDATE users SET reset_token = :resetToken WHERE email = :email\";\n      $stmt = $db->prepare($query);\n      $stmt->bindParam(':resetToken', $resetToken);\n      $stmt->bindParam(':email', $email);\n      $stmt->execute();\n      \n      // Send an email with a password reset link\n      sendResetEmail($email, $resetToken);\n    }\n  }\n}\n\nfunction sendResetEmail($email, $resetToken) {\n  // Email configuration (replace with your own)\n  $to = $email;\n  $subject = 'Password Reset Link';\n  $body = \"Click this link to reset your password: http://example.com/reset-password/$resetToken\";\n  \n  mail($to, $subject, $body);\n}\n\n?>\n```", "```php\n<?php\nrequire_once 'db.php'; // database connection\n\n$token = filter_input(INPUT_GET, 'token');\n\nif ($token) {\n  // Check if the token is valid\n  $query = \"SELECT * FROM users WHERE reset_token = :token\";\n  $stmt = $db->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  \n  if ($stmt->rowCount() === 1) {\n    // Display the password update form\n    ?>\n    \n    <h2>Reset Password</h2>\n    \n    <?php\n    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n      $password = filter_input(INPUT_POST, 'password', FILTER_DEFAULT);\n      \n      if ($password) {\n        // Hash the new password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n        \n        // Update the user's password in the database\n        $query = \"UPDATE users SET password = :password WHERE reset_token = :token\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n        \n        // Clear the reset token\n        $query = \"UPDATE users SET reset_token = NULL WHERE reset_token = :token\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n      }\n    } else {\n      ?>\n      \n      <form action=\"\" method=\"post\">\n        <label for=\"password\">New Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Update Password</button>\n      </form>\n      \n      <?php\n    }\n  } else {\n    echo \"Invalid token.\";\n  }\n} else {\n  echo \"No token provided.\";\n}\n?>\n```"]}
