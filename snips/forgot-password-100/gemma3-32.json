{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle the forgot password process\nfunction forgotPassword($email) {\n  // 1. Validate email format (basic check)\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email address.\";\n  }\n\n  // 2.  Check if the user exists in the database\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    return \"Connection failed: \" . $conn->connect_error;\n  }\n\n  $query = \"SELECT id, email FROM users WHERE email = '$email'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    $row = $result->fetch_assoc();\n    $userId = $row['id'];\n    $userEmail = $row['email'];\n\n    // 3. Generate a unique, secure token\n    $token = bin2hex(random_bytes(32)); // Generate a 32-byte random string\n    \n    // 4.  Store the token in the database -  use a 'temp_password_token' column\n    $insertQuery = \"UPDATE users SET temp_password_token = '$token' WHERE id = '$userId'\";\n    if (!$conn->query($insertQuery)) {\n      return \"Error updating database.  \" . $conn->error;\n    }\n\n    // 5.  Send an email to the user with the token and a link\n    $to = $email;\n    $subject = \"Password Reset\";\n    $message = \"Please click on the following link to reset your password:\\n\" .\n               \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=$token'>Reset Password</a>\"; // Use $_SERVER['PHP_SELF']\n    $headers = \"From: your_email@example.com\"; // Replace with your email\n\n    if (mail($to, $subject, $message, $headers)) {\n      return \"Password reset email sent to $email.  Please check your inbox.\";\n    } else {\n      return \"Failed to send password reset email. Check your server's mail configuration.\";\n    }\n  } else {\n    return \"User not found.\";\n  }\n}\n\n// Example usage (from the reset.php page)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $email = $_POST[\"email\"];\n  $resetToken = $_POST[\"reset_token\"];\n\n  if (empty($email) || empty($reset_token)) {\n    echo \"Error: Both email and token are required.\";\n  } else {\n    $result = forgotPassword($email, $reset_token);\n    echo $result; // Display the result\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n\n  <h1>Forgot Password</h1>\n\n  <form method=\"post\" action=\"reset.php\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n\n    <input type=\"hidden\" name=\"reset_token\" value=\"\">\n\n    <input type=\"submit\" value=\"Request Password Reset\">\n  </form>\n\n  <hr>\n\n  <form method=\"post\" action=\"reset.php\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n\n    <input type=\"hidden\" name=\"reset_token\" value=\"\">\n\n    <label for=\"reset_token\">Reset Token:</label>\n    <input type=\"text\" id=\"reset_token\" name=\"reset_token\" required><br><br>\n\n    <input type=\"submit\" value=\"Reset Password\">\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Secure Token Generation:**  Critically, it now uses `random_bytes(32)` to generate a cryptographically secure random string.  This is *essential* for security.  `bin2hex()` converts the binary data to a hexadecimal string.\n* **Email Sending:** Includes the `mail()` function to send the password reset link.  You *must* configure your server's `mail()` function to work correctly.  This often involves setting up an SMTP server.  The code now includes a placeholder `your_email@example.com` for your email address that you must replace.\n* **Error Handling:** Includes basic error handling for database connection errors, invalid emails, and database update failures, and email sending issues.  This helps in debugging.\n* **Clearer Instructions & Placeholders:**  The code has comments explaining the different steps and provides placeholders for database credentials and email settings.\n* **`$_SERVER['PHP_SELF']`:** Uses `$_SERVER['PHP_SELF']` in the reset link to dynamically generate the URL. This means if the page is shared, the reset link will still work.\n* **Input Validation:** Basic email format validation is included using `filter_var()`.\n* **Security Considerations:**  This is a *basic* example.  In a production environment, you MUST implement these additional security measures:\n    * **Password Hashing:**  *Never* store passwords in plain text.  Use a strong password hashing algorithm like `password_hash()` to securely store user passwords.  This code *does not* include password hashing because it's only for the token generation and reset link, not the actual password.\n    * **Token Expiration:**  Implement token expiration to limit the time a user can reset their password.  Add a `TIMESTAMP` column to the `users` table and check the expiration of the `temp_password_token` before allowing password reset.\n    * **Rate Limiting:**  Prevent brute-force attacks by limiting the number of password reset requests from the same IP address.\n    * **CSRF Protection:** Implement CSRF (Cross-Site Request Forgery) protection to prevent malicious websites from initiating password resets on behalf of your users.\n    * **Logging:**  Log all password reset attempts for auditing and security monitoring.\n* **Reset Page:** Added a second form (in the HTML) for the user to enter the token.\n\n**How to Use:**\n\n1. **Database Setup:** Create a `users` table in your database.  It should have at least `id`, `email`, and `temp_password_token` columns.  The `temp_password_token` is where the generated token will be stored.\n\n   ```sql\n   CREATE TABLE users (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       email VARCHAR(255) NOT NULL UNIQUE,\n       temp_password_token VARCHAR(255)\n   );\n   ```\n\n2. **Replace Placeholders:**  Fill in the correct database credentials in the PHP code.  Replace `your_email@example.com` with your email address.\n\n3. **Create `reset.php`:** Copy the HTML code into a file named `reset.php` in the same directory as your PHP script.\n\n4. **Run the script:** Access the \"Forgot Password\" page in your web browser.  Follow the instructions to request a password reset.\n\n**Important Security Note:** This example is for educational purposes. It's not a production-ready solution. You *must* implement the security measures mentioned above before deploying this code in a live environment.  Ignoring security best practices can leave your application vulnerable to attacks.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle the forgot password process\nfunction forgotPassword($email) {\n  // 1. Validate email format (basic check)\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email address.\";\n  }\n\n  // 2.  Check if the user exists in the database\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    return \"Connection failed: \" . $conn->connect_error;\n  }\n\n  $query = \"SELECT id, email FROM users WHERE email = '$email'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    $row = $result->fetch_assoc();\n    $userId = $row['id'];\n    $userEmail = $row['email'];\n\n    // 3. Generate a unique, secure token\n    $token = bin2hex(random_bytes(32)); // Generate a 32-byte random string\n    \n    // 4.  Store the token in the database -  use a 'temp_password_token' column\n    $insertQuery = \"UPDATE users SET temp_password_token = '$token' WHERE id = '$userId'\";\n    if (!$conn->query($insertQuery)) {\n      return \"Error updating database.  \" . $conn->error;\n    }\n\n    // 5.  Send an email to the user with the token and a link\n    $to = $email;\n    $subject = \"Password Reset\";\n    $message = \"Please click on the following link to reset your password:\\n\" .\n               \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=$token'>Reset Password</a>\"; // Use $_SERVER['PHP_SELF']\n    $headers = \"From: your_email@example.com\"; // Replace with your email\n\n    if (mail($to, $subject, $message, $headers)) {\n      return \"Password reset email sent to $email.  Please check your inbox.\";\n    } else {\n      return \"Failed to send password reset email. Check your server's mail configuration.\";\n    }\n  } else {\n    return \"User not found.\";\n  }\n}\n\n// Example usage (from the reset.php page)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $email = $_POST[\"email\"];\n  $resetToken = $_POST[\"reset_token\"];\n\n  if (empty($email) || empty($reset_token)) {\n    echo \"Error: Both email and token are required.\";\n  } else {\n    $result = forgotPassword($email, $reset_token);\n    echo $result; // Display the result\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n\n  <h1>Forgot Password</h1>\n\n  <form method=\"post\" action=\"reset.php\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n\n    <input type=\"hidden\" name=\"reset_token\" value=\"\">\n\n    <input type=\"submit\" value=\"Request Password Reset\">\n  </form>\n\n  <hr>\n\n  <form method=\"post\" action=\"reset.php\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n\n    <input type=\"hidden\" name=\"reset_token\" value=\"\">\n\n    <label for=\"reset_token\">Reset Token:</label>\n    <input type=\"text\" id=\"reset_token\" name=\"reset_token\" required><br><br>\n\n    <input type=\"submit\" value=\"Reset Password\">\n  </form>\n\n</body>\n</html>\n```"]}
