{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a forgotten password function in PHP:\n\n**Database Schema**\n\nFirst, let's assume we have the following database schema for storing user information:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255)\n);\n```\n**PHP Code**\n\nCreate a new PHP file, e.g., `forgot-password.php`, and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('RESET_TOKEN_EXPIRATION', 3600); // 1 hour in seconds\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email) {\n  $token = generateResetToken();\n  $passwordResetUrl = 'http://example.com/reset-password.php?token=' . $token;\n  \n  $message = \"Dear user,\\n\\nYou have requested a password reset for your account.\\n\\nTo reset your password, please click on the following link: \\n\" . $passwordResetUrl;\n  sendEmail($email, 'Password Reset', $message);\n}\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\n// Function to send email using PHPMailer\nfunction sendEmail($to, $subject, $body) {\n  require_once 'PHPMailer/PHPMailer.php';\n  require_once 'PHPMailer/SMTP.php';\n  \n  $mail = new \\PHPMailer\\PHPMailer();\n  $mail->isSMTP();\n  $mail->CharSet = 'UTF-8';\n  $mail->setFrom('your-email@example.com', 'Your Name');\n  $mail->addAddress($to);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  \n  if (!$mail->send()) {\n    echo 'Error sending email: ' . $mail->ErrorInfo;\n  }\n}\n\n// Function to reset password\nfunction resetPassword($token, $newPassword) {\n  $user = getUserByResetToken($token);\n  \n  if ($user !== null && !$user['reset_token']) {\n    // Update user's password and reset token\n    updateUserPasswordAndToken($user, $newPassword);\n    \n    return true;\n  }\n  \n  return false;\n}\n\n// Function to get user by reset token\nfunction getUserByResetToken($token) {\n  global $conn;\n  \n  $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n  $result = mysqli_query($conn, $query);\n  \n  if ($result !== false && mysqli_num_rows($result) > 0) {\n    return mysqli_fetch_assoc($result);\n  }\n  \n  return null;\n}\n\n// Function to update user's password and reset token\nfunction updateUserPasswordAndToken($user, $newPassword) {\n  global $conn;\n  \n  $passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);\n  $updateQuery = \"UPDATE users SET password_hash = '$passwordHash', reset_token = '' WHERE id = '\" . $user['id'] . \"'\";\n  mysqli_query($conn, $updateQuery);\n}\n\n// Main logic\nif (isset($_POST['email'])) {\n  $email = trim($_POST['email']);\n  \n  if (!empty($email)) {\n    sendPasswordResetEmail($email);\n    \n    echo 'A password reset email has been sent to your registered email address.';\n  } else {\n    echo 'Please enter a valid email address.';\n  }\n} elseif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n  \n  if (!empty($token)) {\n    // Display form for user to input new password\n    displayResetPasswordForm($token);\n  } else {\n    echo 'Invalid reset token.';\n  }\n}\n\n// Function to display reset password form\nfunction displayResetPasswordForm($token) {\n  global $conn;\n  \n  // Get user's information by reset token\n  $user = getUserByResetToken($token);\n  \n  if ($user !== null && !$user['reset_token']) {\n    // Display form with CSRF token and hidden input fields\n    echo '<form action=\"reset-password.php\" method=\"post\">\n      <input type=\"hidden\" name=\"csrf_token\" value=\"' . generateCsrfToken() . '\">\n      <label>New Password:</label>\n      <input type=\"password\" name=\"new_password\" required>\n      <br>\n      <button type=\"submit\">Reset Password</button>\n    </form>';\n    \n    // CSRF token generation function\n    function generateCsrfToken() {\n      return bin2hex(random_bytes(32));\n    }\n  } else {\n    echo 'Invalid reset token.';\n  }\n}\n\n// Function to handle password reset form submission\nif (isset($_POST['new_password'])) {\n  $token = $_GET['token'];\n  $newPassword = trim($_POST['new_password']);\n  \n  if (!empty($token) && !empty($newPassword)) {\n    if (resetPassword($token, $newPassword)) {\n      echo 'Your password has been reset successfully!';\n    } else {\n      echo 'Invalid reset token or new password.';\n    }\n  } else {\n    echo 'Please enter both a valid reset token and a new password.';\n  }\n}\n\n?>\n```\n**Explanation**\n\nThis code provides a simple implementation of a forgotten password feature:\n\n1. When the user clicks on the \"Forgot Password\" link, they are prompted to enter their email address.\n2. If the email is valid, an email with a password reset link is sent to the user's registered email address.\n3. The password reset link contains a unique token that can be used to reset the user's password.\n4. When the user clicks on the password reset link, they are taken to a form where they can input their new password.\n5. If the new password and reset token are valid, the user's password is updated, and the reset token is cleared.\n\n**Note**: This code uses PHPMailer for sending emails and assumes that you have installed it using Composer or by downloading the library manually. Additionally, this code uses a simple approach to generate CSRF tokens; in a production environment, consider using a more secure method, such as using a dedicated security library like OWASP ESAPI.\n\n**Security Considerations**\n\n* Make sure to validate user input thoroughly to prevent SQL injection and cross-site scripting (XSS) attacks.\n* Use prepared statements or parameterized queries to avoid SQL injection vulnerabilities.\n* Store passwords securely using password hashing algorithms like bcrypt, Argon2, or PBKDF2.\n* Never store plain text passwords in the database.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('RESET_TOKEN_EXPIRATION', 3600); // 1 hour in seconds\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email) {\n  $token = generateResetToken();\n  $passwordResetUrl = 'http://example.com/reset-password.php?token=' . $token;\n  \n  $message = \"Dear user,\\n\\nYou have requested a password reset for your account.\\n\\nTo reset your password, please click on the following link: \\n\" . $passwordResetUrl;\n  sendEmail($email, 'Password Reset', $message);\n}\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\n// Function to send email using PHPMailer\nfunction sendEmail($to, $subject, $body) {\n  require_once 'PHPMailer/PHPMailer.php';\n  require_once 'PHPMailer/SMTP.php';\n  \n  $mail = new \\PHPMailer\\PHPMailer();\n  $mail->isSMTP();\n  $mail->CharSet = 'UTF-8';\n  $mail->setFrom('your-email@example.com', 'Your Name');\n  $mail->addAddress($to);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  \n  if (!$mail->send()) {\n    echo 'Error sending email: ' . $mail->ErrorInfo;\n  }\n}\n\n// Function to reset password\nfunction resetPassword($token, $newPassword) {\n  $user = getUserByResetToken($token);\n  \n  if ($user !== null && !$user['reset_token']) {\n    // Update user's password and reset token\n    updateUserPasswordAndToken($user, $newPassword);\n    \n    return true;\n  }\n  \n  return false;\n}\n\n// Function to get user by reset token\nfunction getUserByResetToken($token) {\n  global $conn;\n  \n  $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n  $result = mysqli_query($conn, $query);\n  \n  if ($result !== false && mysqli_num_rows($result) > 0) {\n    return mysqli_fetch_assoc($result);\n  }\n  \n  return null;\n}\n\n// Function to update user's password and reset token\nfunction updateUserPasswordAndToken($user, $newPassword) {\n  global $conn;\n  \n  $passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);\n  $updateQuery = \"UPDATE users SET password_hash = '$passwordHash', reset_token = '' WHERE id = '\" . $user['id'] . \"'\";\n  mysqli_query($conn, $updateQuery);\n}\n\n// Main logic\nif (isset($_POST['email'])) {\n  $email = trim($_POST['email']);\n  \n  if (!empty($email)) {\n    sendPasswordResetEmail($email);\n    \n    echo 'A password reset email has been sent to your registered email address.';\n  } else {\n    echo 'Please enter a valid email address.';\n  }\n} elseif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n  \n  if (!empty($token)) {\n    // Display form for user to input new password\n    displayResetPasswordForm($token);\n  } else {\n    echo 'Invalid reset token.';\n  }\n}\n\n// Function to display reset password form\nfunction displayResetPasswordForm($token) {\n  global $conn;\n  \n  // Get user's information by reset token\n  $user = getUserByResetToken($token);\n  \n  if ($user !== null && !$user['reset_token']) {\n    // Display form with CSRF token and hidden input fields\n    echo '<form action=\"reset-password.php\" method=\"post\">\n      <input type=\"hidden\" name=\"csrf_token\" value=\"' . generateCsrfToken() . '\">\n      <label>New Password:</label>\n      <input type=\"password\" name=\"new_password\" required>\n      <br>\n      <button type=\"submit\">Reset Password</button>\n    </form>';\n    \n    // CSRF token generation function\n    function generateCsrfToken() {\n      return bin2hex(random_bytes(32));\n    }\n  } else {\n    echo 'Invalid reset token.';\n  }\n}\n\n// Function to handle password reset form submission\nif (isset($_POST['new_password'])) {\n  $token = $_GET['token'];\n  $newPassword = trim($_POST['new_password']);\n  \n  if (!empty($token) && !empty($newPassword)) {\n    if (resetPassword($token, $newPassword)) {\n      echo 'Your password has been reset successfully!';\n    } else {\n      echo 'Invalid reset token or new password.';\n    }\n  } else {\n    echo 'Please enter both a valid reset token and a new password.';\n  }\n}\n\n?>\n```"]}
