{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Assuming you have a database connection established and named $db\n\n/**\n * Resets a user's password.\n *\n * @param string $email The email address of the user requesting password reset.\n * @return string A message indicating success or failure.\n */\nfunction forgot_password(string $email) {\n    // 1. Validate Input (Important for Security)\n    if (empty($email)) {\n        return \"Error: Email address is required.\";\n    }\n\n    // Sanitize the email address to prevent potential vulnerabilities\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n        return \"Error: Invalid email address format.\";\n    }\n\n    // 2. Check if User Exists\n    $user = getUserByEmail($email); // Assuming you have a function to retrieve user by email\n    if ($user === null) {\n        return \"Error: User not found.\";\n    }\n\n    // 3. Generate a Unique Token and Store it\n    $token = generate_unique_token();  // Assuming you have a function to generate a unique token\n    $expiry_time = time() + (3600 * 24); // Token expires in 24 hours (adjust as needed)\n\n    // Store the token and expiry time in the database, linked to the user.\n    // This is a crucial step.  The example below is illustrative;\n    // your actual implementation will vary based on your database schema.\n    store_token($user->id, $token, $expiry_time);\n\n    // 4. Send the Password Reset Email\n    $subject = \"Password Reset Request\";\n    $headers = \"From: your_email@example.com\" . \"\\r\\n\"; // Replace with your email\n    $message = \"Click on this link to reset your password: \" . base_url . \"reset_password?token=\" . urlencode($token);\n    $result = send_email($email, $subject, $headers, $message);\n\n    if ($result) {\n        return \"Password reset link has been sent to your email.\";\n    } else {\n        return \"Error: Failed to send email.\";\n    }\n}\n\n\n/**\n * Placeholder functions (You'll need to implement these based on your application)\n */\n// Example: Get user by email (Replace with your actual database query)\nfunction getUserByEmail(string $email): ?User {\n    // Example database query - Replace with your actual query\n    // Assuming you have a User class/model\n    // This is just a placeholder - replace with your logic\n    //  $db = get_database_connection();  // Get database connection\n    //  $query = \"SELECT * FROM users WHERE email = ?\";\n    //  $stmt = $db->prepare($query);\n    //  $stmt->execute([$email]);\n    //  $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    //  if ($user) {\n    //      return new User($user); // Create a User object\n    //  }\n    //  return null;\n\n    // Placeholder for demo - returns a dummy user object\n    return new User(['id' => 1, 'email' => 'test@example.com']);\n}\n\n// Example: Generate a unique token (You'll need to implement this)\nfunction generate_unique_token(): string {\n    return bin2hex(random_bytes(32)); // A secure random string\n}\n\n// Example: Store the token and expiry time in the database (Implement this)\nfunction store_token(int $userId, string $token, int $expiry_time): void {\n  // Implement the logic to store the token and expiry time in your database\n  //  e.g., using a database query to update the user's record.\n  // Example:\n  // $db = get_database_connection();\n  // $query = \"UPDATE users SET token = ?, expiry_time = ? WHERE id = ?\";\n  // $stmt = $db->prepare($query);\n  // $stmt->execute([$token, $expiry_time, $userId]);\n}\n\n// Example: Send an email (You'll need to implement this, likely using a library)\nfunction send_email(string $to, string $subject, string $headers, string $message): bool {\n    //  Implement the email sending logic using a library like PHPMailer\n    //  This is a placeholder -  replace with your actual email sending code.\n    //  For demonstration, simply return true.\n    //  e.g.,\n    //  $mailer = new PHPMailer(true);\n    //  $mailer->addAddress($to, $to);\n    //  $mailer->setFrom('your_email@example.com', 'Your Name');\n    //  $mailer->Subject = $subject;\n    //  $mailer->Body = $message;\n    //  return $mailer->send();\n\n    // Placeholder\n    return true;\n}\n\n\n\n// Example User Class (Customize as needed)\nclass User {\n    public int $id;\n    public string $email;\n\n    public function __construct(array $data) {\n        $this->id = $data['id'];\n        $this->email = $data['email'];\n    }\n}\n\n\n\n// Example Usage:\n$email = \"test@example.com\"; // Replace with a user's email\n$result = forgot_password($email);\necho $result . \"\\n\";\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Input Validation & Sanitization:**  Crucially includes `filter_var()` to sanitize the email address, preventing potential security vulnerabilities like email injection.  Also checks for an empty email.  This is *essential* for any real-world application.\n* **Error Handling:** Returns meaningful error messages for various failure scenarios (invalid email, user not found, email sending failure). This makes debugging much easier.\n* **Secure Token Generation:** Uses `random_bytes()` and `bin2hex()` for generating a cryptographically secure token.  This is *far* more secure than using simple random numbers.\n* **Token Expiry:**  Stores the token along with an expiry time. This is *absolutely critical* for security.  Without an expiry, a malicious user could potentially use the token indefinitely.\n* **Database Interaction (Placeholders):** Uses placeholder functions (`getUserByEmail`, `store_token`, `send_email`) to demonstrate where your database logic should go.  *You must replace these with your actual database queries and interactions.*\n* **Clearer Database Logic:**  The comments clearly indicate where you need to implement your database queries.  Example SQL is included.\n* **Secure Email Handling:**  The `send_email` function is a placeholder.  You should use a dedicated email library like PHPMailer to handle email sending securely, including TLS/SSL encryption and proper authentication.\n* **User Class:** Demonstrates a basic `User` class to represent user data. Customize this to match your application's model.\n* **Complete Example:** Provides a complete, runnable example (after replacing the placeholders).\n* **Code Comments:**  Thoroughly commented to explain the purpose of each section.\n* **Uses `urlencode`**:  Correctly uses `urlencode()` to encode the token in the URL, which is essential for safe URL construction.\n* **Security Best Practices:**  Emphasizes the importance of security best practices throughout the code.\n* **PHP Version Compatibility**: Uses modern PHP features for better readability and security.\n* **Clearer Structure:** The code is structured logically, making it easier to understand and maintain.\n\n**Important Considerations & Next Steps:**\n\n1. **Database Setup:**  You'll need a database with a `users` table (or similar) that includes columns for email, password (you won't be setting a new password, just validating), and the token/expiry time.\n\n2. **PHPMailer or Similar:** Install and configure PHPMailer (or another email library).  This is essential for reliable email sending.\n\n3. **Password Validation:**  When a user uses the reset token, you *must* validate the token and expiry time against the database.  Then, *before* allowing the user to set a new password, you must *reset* the user's password (typically by generating a new, strong password and storing it securely in the database).  *Never* allow a user to simply enter a new password using the reset token.\n\n4. **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset functionality.\n\n5. **Logging:** Add logging to track password reset requests and any errors that occur.\n\n6. **CSRF Protection:**  If your application is vulnerable to Cross-Site Request Forgery (CSRF), you'll need to implement CSRF protection for the password reset form.\n\n7. **Security Audits:** Regularly conduct security audits to identify and address any vulnerabilities.\n\nThis comprehensive example provides a solid foundation for building a secure password reset functionality in your PHP application. Remember to adapt it to your specific needs and always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Assuming you have a database connection established and named $db\n\n/**\n * Resets a user's password.\n *\n * @param string $email The email address of the user requesting password reset.\n * @return string A message indicating success or failure.\n */\nfunction forgot_password(string $email) {\n    // 1. Validate Input (Important for Security)\n    if (empty($email)) {\n        return \"Error: Email address is required.\";\n    }\n\n    // Sanitize the email address to prevent potential vulnerabilities\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n        return \"Error: Invalid email address format.\";\n    }\n\n    // 2. Check if User Exists\n    $user = getUserByEmail($email); // Assuming you have a function to retrieve user by email\n    if ($user === null) {\n        return \"Error: User not found.\";\n    }\n\n    // 3. Generate a Unique Token and Store it\n    $token = generate_unique_token();  // Assuming you have a function to generate a unique token\n    $expiry_time = time() + (3600 * 24); // Token expires in 24 hours (adjust as needed)\n\n    // Store the token and expiry time in the database, linked to the user.\n    // This is a crucial step.  The example below is illustrative;\n    // your actual implementation will vary based on your database schema.\n    store_token($user->id, $token, $expiry_time);\n\n    // 4. Send the Password Reset Email\n    $subject = \"Password Reset Request\";\n    $headers = \"From: your_email@example.com\" . \"\\r\\n\"; // Replace with your email\n    $message = \"Click on this link to reset your password: \" . base_url . \"reset_password?token=\" . urlencode($token);\n    $result = send_email($email, $subject, $headers, $message);\n\n    if ($result) {\n        return \"Password reset link has been sent to your email.\";\n    } else {\n        return \"Error: Failed to send email.\";\n    }\n}\n\n\n/**\n * Placeholder functions (You'll need to implement these based on your application)\n */\n// Example: Get user by email (Replace with your actual database query)\nfunction getUserByEmail(string $email): ?User {\n    // Example database query - Replace with your actual query\n    // Assuming you have a User class/model\n    // This is just a placeholder - replace with your logic\n    //  $db = get_database_connection();  // Get database connection\n    //  $query = \"SELECT * FROM users WHERE email = ?\";\n    //  $stmt = $db->prepare($query);\n    //  $stmt->execute([$email]);\n    //  $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    //  if ($user) {\n    //      return new User($user); // Create a User object\n    //  }\n    //  return null;\n\n    // Placeholder for demo - returns a dummy user object\n    return new User(['id' => 1, 'email' => 'test@example.com']);\n}\n\n// Example: Generate a unique token (You'll need to implement this)\nfunction generate_unique_token(): string {\n    return bin2hex(random_bytes(32)); // A secure random string\n}\n\n// Example: Store the token and expiry time in the database (Implement this)\nfunction store_token(int $userId, string $token, int $expiry_time): void {\n  // Implement the logic to store the token and expiry time in your database\n  //  e.g., using a database query to update the user's record.\n  // Example:\n  // $db = get_database_connection();\n  // $query = \"UPDATE users SET token = ?, expiry_time = ? WHERE id = ?\";\n  // $stmt = $db->prepare($query);\n  // $stmt->execute([$token, $expiry_time, $userId]);\n}\n\n// Example: Send an email (You'll need to implement this, likely using a library)\nfunction send_email(string $to, string $subject, string $headers, string $message): bool {\n    //  Implement the email sending logic using a library like PHPMailer\n    //  This is a placeholder -  replace with your actual email sending code.\n    //  For demonstration, simply return true.\n    //  e.g.,\n    //  $mailer = new PHPMailer(true);\n    //  $mailer->addAddress($to, $to);\n    //  $mailer->setFrom('your_email@example.com', 'Your Name');\n    //  $mailer->Subject = $subject;\n    //  $mailer->Body = $message;\n    //  return $mailer->send();\n\n    // Placeholder\n    return true;\n}\n\n\n\n// Example User Class (Customize as needed)\nclass User {\n    public int $id;\n    public string $email;\n\n    public function __construct(array $data) {\n        $this->id = $data['id'];\n        $this->email = $data['email'];\n    }\n}\n\n\n\n// Example Usage:\n$email = \"test@example.com\"; // Replace with a user's email\n$result = forgot_password($email);\necho $result . \"\\n\";\n\n?>\n```"]}
