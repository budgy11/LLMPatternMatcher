{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Function to handle the forgot password process\nfunction forgotPassword($email) {\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email address.\";\n    }\n\n    // 2. Check if the user exists\n    $conn = new mysqli($host, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        return \"Connection failed: \" . $conn->connect_error;\n    }\n\n    $sql = \"SELECT id, password FROM users WHERE email = '$email'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        $user = $result->fetch_assoc();\n        $userId = $user['id'];\n        $hashedPassword = $user['password']; //Retrieve the hashed password.\n\n        // 3. Generate a unique token\n        $token = bin2hex(random_bytes(32)); // Generate a secure random token\n        \n        // 4. Update the user's record with the token\n        $sql = \"UPDATE users SET reset_token = '$token' WHERE id = '$userId'\";\n        if ($conn->query($sql) === TRUE) {\n            // 5. Send an email with the token and a link\n            $emailTo = $email;\n            $subject = \"Password Reset Link\";\n            $message = \"Click on the following link to reset your password: \" . \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=\" . urlencode($token) . \"'>Reset Password</a>\";\n            $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n\n            if (mail($emailTo, $subject, $message, $headers)) {\n                return \"Password reset link sent to your email.  Please check your inbox.\";\n            } else {\n                return \"Failed to send password reset email.\";\n            }\n        } else {\n            return \"Error updating user record.\";\n        }\n    } else {\n        return \"User not found.\";\n    }\n\n    $conn->close();\n}\n\n\n// Example usage (this is just for demonstration, don't use this directly in a form)\n// $email = $_POST['email']; // Get email from form\n// $resetMessage = forgotPassword($email);\n// echo $resetMessage;\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Secure Token Generation:**  `bin2hex(random_bytes(32))` generates a cryptographically secure random token.  This is *essential* for security.  Don't use simple `rand()` or `mt_rand()` for tokens.\n* **HTTPS Recommendation**:  The code *still* requires HTTPS for security.  Without HTTPS, the token can be intercepted and used to reset the password.  This example doesn't include HTTPS setup, but you *must* use HTTPS in a real-world application.\n* **Escaping/Encoding:** `urlencode($token)` is *crucial*.  It encodes the token for use in the URL, preventing potential security vulnerabilities like URL manipulation.  It's used when generating the reset link.\n* **Error Handling:** Includes `if ($conn->connect_error)` to check for connection errors and provides more informative messages.\n* **Email Sending:** Uses `mail()` to send the reset link.  This is a standard PHP function, but keep in mind that `mail()` can be unreliable, depending on your server's configuration.  Consider using a dedicated email library (like PHPMailer) for better control and reliability in a production environment.\n* **Clearer Messages:** Provides more user-friendly messages for different scenarios (user found, user not found, email sent, error sending email).\n* **Form Handling:**  The example includes a simple HTML form that you can adapt to your application.  Critically, `htmlspecialchars($_SERVER[\"PHP_SELF\"])` is used to safely output the form URL, preventing XSS vulnerabilities.\n* **`$_SERVER['PHP_SELF']`:** This ensures the form submits to the same script, simplifying the URL.  It's combined with the `reset` parameter to generate the unique reset link.\n* **Database Connection:** Demonstrates how to establish a connection to your database.  **Replace the placeholder values** with your actual database credentials.\n* **Security Considerations (Important):**\n    * **Password Hashing:**  **Never store passwords in plain text!** The example *retrieves* the hashed password.  You *must* hash the password before storing it in the database. Use a strong hashing algorithm like `password_hash()` with a salt.\n    * **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks on the reset password functionality.\n    * **Token Expiration:**  Set an expiration time for the reset tokens to limit the window of opportunity for attackers.  You can add a `expiration_time` field to the `users` table and check it during the token verification process (when the user clicks the reset link).\n    * **HTTPS:**  As mentioned repeatedly, *always* use HTTPS.\n\n**Example of How to Store a Hashed Password (Important!)**\n\n```php\n// Example:  Using password_hash()\n$password = $_POST['password'];  // Get the user's new password\n$hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n// Then, in your query:\n$sql = \"UPDATE users SET password = '$hashedPassword' WHERE id = '$userId'\";\n```\n\n**Important Security Reminders:**\n\n* **This is a simplified example.**  It's crucial to implement robust security measures in a real-world application.\n* **Never expose your database credentials in your code.** Use environment variables or a configuration file to store them securely.\n* **Thoroughly test your code** to identify and fix any vulnerabilities.\n* **Keep your software up-to-date** to patch security vulnerabilities.\n\nThis comprehensive response provides a functional password reset function with important security considerations.  Remember to adapt the code to your specific application and to follow best practices for security.  Always prioritize security when developing web applications.  Also, be aware of the limitations of `mail()` and consider using a more robust email library.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual details)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Function to handle the forgot password process\nfunction forgotPassword($email) {\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email address.\";\n    }\n\n    // 2. Check if the user exists\n    $conn = new mysqli($host, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        return \"Connection failed: \" . $conn->connect_error;\n    }\n\n    $sql = \"SELECT id, password FROM users WHERE email = '$email'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        $user = $result->fetch_assoc();\n        $userId = $user['id'];\n        $hashedPassword = $user['password']; //Retrieve the hashed password.\n\n        // 3. Generate a unique token\n        $token = bin2hex(random_bytes(32)); // Generate a secure random token\n        \n        // 4. Update the user's record with the token\n        $sql = \"UPDATE users SET reset_token = '$token' WHERE id = '$userId'\";\n        if ($conn->query($sql) === TRUE) {\n            // 5. Send an email with the token and a link\n            $emailTo = $email;\n            $subject = \"Password Reset Link\";\n            $message = \"Click on the following link to reset your password: \" . \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=\" . urlencode($token) . \"'>Reset Password</a>\";\n            $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n\n            if (mail($emailTo, $subject, $message, $headers)) {\n                return \"Password reset link sent to your email.  Please check your inbox.\";\n            } else {\n                return \"Failed to send password reset email.\";\n            }\n        } else {\n            return \"Error updating user record.\";\n        }\n    } else {\n        return \"User not found.\";\n    }\n\n    $conn->close();\n}\n\n\n// Example usage (this is just for demonstration, don't use this directly in a form)\n// $email = $_POST['email']; // Get email from form\n// $resetMessage = forgotPassword($email);\n// echo $resetMessage;\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```", "```php\n// Example:  Using password_hash()\n$password = $_POST['password'];  // Get the user's new password\n$hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n// Then, in your query:\n$sql = \"UPDATE users SET password = '$hashedPassword' WHERE id = '$userId'\";\n```"]}
