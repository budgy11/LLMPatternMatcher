{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Ensure this is a secure file and protected from direct access.\n// This is a simplified example and should be adapted for a production environment.\n\n// 1. Database Connection (Replace with your actual details)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// 2.  Reset Password Form Handling (POST request)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = trim($_POST['email']);\n\n    // Validation -  Important!  This is a minimal validation.  Improve as needed.\n    if (empty($email)) {\n        $error = \"Please enter your email address.\";\n    } else {\n        //Sanitize email to prevent injection\n        $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n        // Check if the email exists in the database.  Case-insensitive is better.\n        $stmt = $conn->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 0) {\n            $error = \"Email address not found.\";\n        } else {\n            // Create a unique token for the reset link\n            $reset_token = bin2hex(random_bytes(32));\n\n            // Store the token in the database, associated with the user's email.\n            $stmt = $conn->prepare(\"UPDATE users SET reset_token = ? WHERE email = ?\");\n            $stmt->bind_param(\"ss\", $reset_token, $email);\n            $stmt->execute();\n\n            // Check if the update was successful (you'll likely have more error handling here)\n            if ($stmt->affected_rows == 0) {\n                $error = \"Failed to generate reset token.\";\n            }\n\n            if ($error) {\n                $reset_token = ''; // Clear the token if there's an error\n            }\n        }\n    }\n}\n\n// 3.  Generate Reset Link (If requested)\nif (isset($_GET['token'])) {\n    $token = trim($_GET['token']);\n\n    // Check if the token exists in the database\n    $stmt = $conn->prepare(\"SELECT id, email FROM users WHERE reset_token = ?\");\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n        $user = $result->fetch_assoc();\n        $userId = $user['id'];\n        $email = $user['email'];\n\n        // Generate a reset password link\n        $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;\n        echo \"<p>Click the link above to reset your password.</p>\";\n        echo \"<p>This link will expire in 30 minutes.</p>\";\n    } else {\n        echo \"<p>Invalid reset token.</p>\";\n    }\n}\n\n// 4. Form for requesting a password reset\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <?php if (isset($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error; ?></p>\n    <?php } ?>\n\n    <form method=\"post\" action=\"forgot_password.php\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your email address\">\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n    <br>\n    <a href=\"login.php\">Back to Login</a>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`filter_var()`:**  Crucially uses `filter_var($email, FILTER_SANITIZE_EMAIL)` to sanitize the email address *before* using it in a database query. This helps prevent SQL injection vulnerabilities.  This is a *basic* sanitization.  For production, use a more robust sanitization/validation library.\n    * **`bind_param()`:**  Uses `bind_param()` for prepared statements. This is *essential* for preventing SQL injection.  It properly escapes and handles the parameters, so you don't have to worry about manual escaping.\n    * **`random_bytes()`**:  Generates a cryptographically secure random token.\n    * **`bin2hex()`**:  Converts the random bytes into a hexadecimal string for the token.\n* **Database Connection (Placeholder):** The code includes a placeholder for database connection. *Replace the example with your actual database credentials and connection code.*  Use PDO or MySQLi for database interaction.\n* **Error Handling:**  Includes a basic error message if the email doesn't exist, the token doesn't exist, or if the update fails.  More robust error handling is *highly* recommended in a production environment.\n* **Token Generation:** Generates a unique, random token for each password reset request. The token is stored in the database. This allows you to track and expire reset links, increasing security.\n* **Token Expiration (Important but not implemented fully):** This revised version *does not* fully implement token expiration.  To implement it, you'd need to add a `expiration_time` column to your `users` table and update the code to check if the token has expired before generating the reset link or updating the token in the database.  Without expiration, a user could potentially reset their password multiple times.\n* **Clearer Code Structure:** Improved code organization and readability with comments.\n* **Reset Link Generation:**  Constructs the reset password link with the token.\n* **Form Validation:** Basic validation checks if the email field is empty. *Expand this significantly for a production application.*\n* **Back to Login Link:** Includes a link back to the login page.\n* **Secure File Handling:**  This example assumes the PHP file is not publicly accessible.  It's essential to protect the script to prevent unauthorized password resets.\n\n**Important Considerations and Further Improvements (For Production):**\n\n1. **Database Setup:**\n   - **Secure the Database:**  Make sure your database is properly secured (strong passwords, access restrictions, etc.).\n2. **Password Reset Logic:**\n   - **Password Reset Process:** The code *only* handles the \"forgot password\" part.  You'll need to add the actual logic to reset the user's password *after* they click the reset link.  This involves:\n     - Validating the token.\n     - Allowing the user to set a new password.\n     - Updating the user's password in the database.\n   - **Token Expiration:** Implement token expiration to prevent abuse. Use a `expiration_time` column in the `users` table and the `time()` function to compare against the token's creation time.\n   - **Rate Limiting:** Add rate limiting to prevent attackers from repeatedly requesting password resets.\n   - **Two-Factor Authentication (2FA):** Consider requiring 2FA for password resets.\n3. **Security Best Practices:**\n   - **HTTPS:**  Always use HTTPS to encrypt the communication between the browser and the server.\n   - **Input Validation:**  Perform extensive input validation on *all* user inputs.  Don't rely solely on the `filter_var()` function.\n   - **Output Encoding:**  Properly encode all output to prevent XSS vulnerabilities.\n   - **Logging and Monitoring:**  Log all password reset requests and monitor for suspicious activity.\n4. **User Experience:**\n   - **Clear Instructions:** Provide clear instructions to the user.\n   - **Confirmation Messages:**  Provide confirmation messages after each step.\n\n**How to use:**\n\n1.  **Save the code:** Save the code as a `.php` file (e.g., `forgot_password.php`).\n2.  **Update Database Credentials:**  Replace the placeholder database credentials with your actual database connection details.\n3.  **Create a `users` table:** Make sure you have a `users` table in your database with at least `email` and `password` columns.  You'll likely want to add a `reset_token` column and a `expiration_time` column.\n4.  **Run the script:** Access the `forgot_password.php` file through your web browser.\n\nThis revised answer provides a more secure and robust foundation for implementing a password reset functionality.  Remember to always prioritize security and thoroughly test your implementation.  This is a starting point; you'll need to tailor it to your specific application needs.\n", "code_blocks": ["```php\n<?php\n\n// Ensure this is a secure file and protected from direct access.\n// This is a simplified example and should be adapted for a production environment.\n\n// 1. Database Connection (Replace with your actual details)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// 2.  Reset Password Form Handling (POST request)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = trim($_POST['email']);\n\n    // Validation -  Important!  This is a minimal validation.  Improve as needed.\n    if (empty($email)) {\n        $error = \"Please enter your email address.\";\n    } else {\n        //Sanitize email to prevent injection\n        $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n        // Check if the email exists in the database.  Case-insensitive is better.\n        $stmt = $conn->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 0) {\n            $error = \"Email address not found.\";\n        } else {\n            // Create a unique token for the reset link\n            $reset_token = bin2hex(random_bytes(32));\n\n            // Store the token in the database, associated with the user's email.\n            $stmt = $conn->prepare(\"UPDATE users SET reset_token = ? WHERE email = ?\");\n            $stmt->bind_param(\"ss\", $reset_token, $email);\n            $stmt->execute();\n\n            // Check if the update was successful (you'll likely have more error handling here)\n            if ($stmt->affected_rows == 0) {\n                $error = \"Failed to generate reset token.\";\n            }\n\n            if ($error) {\n                $reset_token = ''; // Clear the token if there's an error\n            }\n        }\n    }\n}\n\n// 3.  Generate Reset Link (If requested)\nif (isset($_GET['token'])) {\n    $token = trim($_GET['token']);\n\n    // Check if the token exists in the database\n    $stmt = $conn->prepare(\"SELECT id, email FROM users WHERE reset_token = ?\");\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n        $user = $result->fetch_assoc();\n        $userId = $user['id'];\n        $email = $user['email'];\n\n        // Generate a reset password link\n        $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;\n        echo \"<p>Click the link above to reset your password.</p>\";\n        echo \"<p>This link will expire in 30 minutes.</p>\";\n    } else {\n        echo \"<p>Invalid reset token.</p>\";\n    }\n}\n\n// 4. Form for requesting a password reset\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <?php if (isset($error)) { ?>\n        <p style=\"color: red;\"><?php echo $error; ?></p>\n    <?php } ?>\n\n    <form method=\"post\" action=\"forgot_password.php\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your email address\">\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n    <br>\n    <a href=\"login.php\">Back to Login</a>\n\n</body>\n</html>\n```"]}
