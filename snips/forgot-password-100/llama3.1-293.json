{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"Forgot Password\" functionality in PHP:\n\n**Database Schema**\n\nFirst, let's assume we have a database table `users` with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**PHP Code**\n\nCreate a new file called `forgot_password.php`. This script will handle the \"Forgot Password\" functionality.\n\n```php\n// Include the database connection script\nrequire_once 'db_connection.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Get user input\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Query database to retrieve user data\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = mysqli_query($conn, $query);\n\n  if (mysqli_num_rows($result) == 1) {\n    // Retrieve user data from result set\n    $user_data = mysqli_fetch_assoc($result);\n\n    // Generate a reset token and store it in the database\n    $reset_token = bin2hex(random_bytes(16));\n    $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n    mysqli_query($conn, $update_query);\n\n    // Send email with password reset link to user's email address\n    send_password_reset_email($user_data['email'], $reset_token);\n  } else {\n    echo \"Email not found in our database.\";\n  }\n}\n\n// Function to send password reset email\nfunction send_password_reset_email($email, $reset_token) {\n  // Set up email headers and body\n  $subject = 'Password Reset Request';\n  $body = \"\n    Hello!\n\n    You have requested a password reset for your account. Please click on the following link to reset your password:\n\n    <a href='http://example.com/reset_password.php?reset_token=$reset_token'>Reset Password</a>\n\n    If you did not request a password reset, please ignore this email.\n\n    Best regards,\n    [Your Name]\n  \";\n\n  // Send email using PHP's mail function\n  $headers = 'From: your-email@example.com' . \"\\r\\n\";\n  $headers .= 'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\";\n  mail($email, $subject, $body, $headers);\n\n  echo \"Email sent successfully.\";\n}\n\n// Function to reset password (not implemented in this example)\nfunction reset_password() {\n  // TO DO: implement password reset logic here\n}\n```\n\n**Explanation**\n\nThis script first checks if the form has been submitted using the `$_SERVER['REQUEST_METHOD']` superglobal. If it has, it retrieves the user input from the form and validates the email address using PHP's built-in `filter_var()` function.\n\nNext, the script queries the database to retrieve the user data based on the provided email address. If a match is found, it generates a reset token (a random 32-character string) and stores it in the database associated with the user's email address.\n\nFinally, the script sends an email to the user's email address with a password reset link that includes the reset token as a query parameter. The recipient can then use this link to access the password reset page.\n\nNote: This is a basic example and should not be used in production without further security measures (e.g., hashing and salting passwords, implementing proper authentication mechanisms).\n\n**Security Notes**\n\n* Use HTTPS for password resets to prevent man-in-the-middle attacks.\n* Implement strong password hashing using algorithms like bcrypt or Argon2.\n* Use prepared statements or parameterized queries to prevent SQL injection vulnerabilities.\n\nPlease let me know if you need further assistance!", "code_blocks": [null, "```php\n// Include the database connection script\nrequire_once 'db_connection.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Get user input\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Query database to retrieve user data\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = mysqli_query($conn, $query);\n\n  if (mysqli_num_rows($result) == 1) {\n    // Retrieve user data from result set\n    $user_data = mysqli_fetch_assoc($result);\n\n    // Generate a reset token and store it in the database\n    $reset_token = bin2hex(random_bytes(16));\n    $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n    mysqli_query($conn, $update_query);\n\n    // Send email with password reset link to user's email address\n    send_password_reset_email($user_data['email'], $reset_token);\n  } else {\n    echo \"Email not found in our database.\";\n  }\n}\n\n// Function to send password reset email\nfunction send_password_reset_email($email, $reset_token) {\n  // Set up email headers and body\n  $subject = 'Password Reset Request';\n  $body = \"\n    Hello!\n\n    You have requested a password reset for your account. Please click on the following link to reset your password:\n\n    <a href='http://example.com/reset_password.php?reset_token=$reset_token'>Reset Password</a>\n\n    If you did not request a password reset, please ignore this email.\n\n    Best regards,\n    [Your Name]\n  \";\n\n  // Send email using PHP's mail function\n  $headers = 'From: your-email@example.com' . \"\\r\\n\";\n  $headers .= 'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\";\n  mail($email, $subject, $body, $headers);\n\n  echo \"Email sent successfully.\";\n}\n\n// Function to reset password (not implemented in this example)\nfunction reset_password() {\n  // TO DO: implement password reset logic here\n}\n```"]}
