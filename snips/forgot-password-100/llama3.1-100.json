{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"Forgot Password\" functionality using PHP:\n\n**Database Structure**\n\nWe'll need to have the following database table structure for storing user credentials and password reset tokens:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE password_resets (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  token VARCHAR(255) NOT NULL,\n  expires_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n**PHP Code**\n\nCreate a new PHP file named `forgot-password.php` and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('PASSWORD_RESET_EXPIRES_IN_HOURS', 1);\n\n// Function to send password reset email\nfunction send_password_reset_email($user_id, $token) {\n  // Get user details\n  $user = get_user_by_id($user_id);\n  \n  if (!$user) {\n    return false;\n  }\n  \n  // Set email content\n  $subject = 'Reset your password';\n  $message = '\n    <p>Dear ' . $user->username . ',</p>\n    <p>We received a request to reset your password. To do so, click on the link below:</p>\n    <p><a href=\"' . $_SERVER['HTTP_HOST'] . '/reset-password?token=' . $token . '\">Reset Password</a></p>\n  ';\n  \n  // Send email\n  mail($user->email, $subject, $message);\n  \n  return true;\n}\n\n// Function to reset password\nfunction reset_password($token) {\n  // Validate token\n  $password_reset = get_password_reset_by_token($token);\n  \n  if (!$password_reset || $password_reset->expires_at < time()) {\n    return false;\n  }\n  \n  // Get user ID from token\n  $user_id = $password_reset->user_id;\n  \n  // Set new password (for example, a random one)\n  $new_password = bin2hex(random_bytes(32));\n  \n  // Update user's password\n  update_user_password($user_id, $new_password);\n  \n  return true;\n}\n\n// Function to get user by ID\nfunction get_user_by_id($id) {\n  global $conn;\n  \n  $query = 'SELECT * FROM users WHERE id = :id';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $id);\n  $stmt->execute();\n  \n  return $stmt->fetchObject();\n}\n\n// Function to get password reset by token\nfunction get_password_reset_by_token($token) {\n  global $conn;\n  \n  $query = 'SELECT * FROM password_resets WHERE token = :token AND expires_at > :expires_at';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->bindParam(':expires_at', time());\n  $stmt->execute();\n  \n  return $stmt->fetchObject();\n}\n\n// Function to update user's password\nfunction update_user_password($user_id, $new_password) {\n  global $conn;\n  \n  $query = 'UPDATE users SET password_hash = :password_hash WHERE id = :id';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $user_id);\n  $stmt->bindParam(':password_hash', hash('sha256', $new_password));\n  $stmt->execute();\n}\n\n// Handle form submission\nif (isset($_POST['forgot-password'])) {\n  // Get user's email\n  $email = trim($_POST['email']);\n  \n  // Check if email is valid\n  if (!preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email)) {\n    die('Invalid email address');\n  }\n  \n  // Get user ID from database\n  $query = 'SELECT id FROM users WHERE email = :email';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  if ($result = $stmt->fetchObject()) {\n    $user_id = $result->id;\n    \n    // Generate password reset token\n    $token = bin2hex(random_bytes(32));\n    \n    // Insert new password reset record into database\n    $query = 'INSERT INTO password_resets (user_id, token) VALUES (:user_id, :token)';\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':user_id', $user_id);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n    \n    // Send email with reset link\n    send_password_reset_email($user_id, $token);\n  } else {\n    die('Email address not found');\n  }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n  <h1>Forgot Password</h1>\n  \n  <?php if (isset($_POST['forgot-password'])) : ?>\n    <p>Email sent with password reset link.</p>\n  <?php endif; ?>\n  \n  <form method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"example@example.com\">\n    <button type=\"submit\" name=\"forgot-password\">Send Password Reset Link</button>\n  </form>\n</body>\n</html>\n```\n**Explanation**\n\nThis code provides a basic \"Forgot Password\" functionality. Here's how it works:\n\n1. The user submits their email address via the form.\n2. The PHP script checks if the email is valid and exists in the database.\n3. If the email is valid, a password reset token is generated using the `random_bytes` function.\n4. A new record is inserted into the `password_resets` table with the user's ID and the generated token.\n5. An email is sent to the user with a link to reset their password (in this example, a simple link that resets the password to a random value).\n\n**Security Notes**\n\n* The `SECRET_KEY` constant should be replaced with a secure secret key for your application.\n* The `PASSWORD_RESET_EXPIRES_IN_HOURS` constant determines how long the password reset token is valid. This should be set to a reasonable time frame (e.g., 1 hour).\n* The `send_password_reset_email()` function uses the `mail()` function, which may not work with all email providers or hosting environments.\n* The `reset_password()` function updates the user's password by hashing it with SHA-256. This is a basic implementation and should be replaced with a more secure password hashing algorithm (e.g., Argon2).\n* This code assumes that you have already implemented a registration system with a separate page for creating new users.\n\nPlease note that this is a simplified example and should not be used in production without proper security reviews and testing.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('PASSWORD_RESET_EXPIRES_IN_HOURS', 1);\n\n// Function to send password reset email\nfunction send_password_reset_email($user_id, $token) {\n  // Get user details\n  $user = get_user_by_id($user_id);\n  \n  if (!$user) {\n    return false;\n  }\n  \n  // Set email content\n  $subject = 'Reset your password';\n  $message = '\n    <p>Dear ' . $user->username . ',</p>\n    <p>We received a request to reset your password. To do so, click on the link below:</p>\n    <p><a href=\"' . $_SERVER['HTTP_HOST'] . '/reset-password?token=' . $token . '\">Reset Password</a></p>\n  ';\n  \n  // Send email\n  mail($user->email, $subject, $message);\n  \n  return true;\n}\n\n// Function to reset password\nfunction reset_password($token) {\n  // Validate token\n  $password_reset = get_password_reset_by_token($token);\n  \n  if (!$password_reset || $password_reset->expires_at < time()) {\n    return false;\n  }\n  \n  // Get user ID from token\n  $user_id = $password_reset->user_id;\n  \n  // Set new password (for example, a random one)\n  $new_password = bin2hex(random_bytes(32));\n  \n  // Update user's password\n  update_user_password($user_id, $new_password);\n  \n  return true;\n}\n\n// Function to get user by ID\nfunction get_user_by_id($id) {\n  global $conn;\n  \n  $query = 'SELECT * FROM users WHERE id = :id';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $id);\n  $stmt->execute();\n  \n  return $stmt->fetchObject();\n}\n\n// Function to get password reset by token\nfunction get_password_reset_by_token($token) {\n  global $conn;\n  \n  $query = 'SELECT * FROM password_resets WHERE token = :token AND expires_at > :expires_at';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->bindParam(':expires_at', time());\n  $stmt->execute();\n  \n  return $stmt->fetchObject();\n}\n\n// Function to update user's password\nfunction update_user_password($user_id, $new_password) {\n  global $conn;\n  \n  $query = 'UPDATE users SET password_hash = :password_hash WHERE id = :id';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $user_id);\n  $stmt->bindParam(':password_hash', hash('sha256', $new_password));\n  $stmt->execute();\n}\n\n// Handle form submission\nif (isset($_POST['forgot-password'])) {\n  // Get user's email\n  $email = trim($_POST['email']);\n  \n  // Check if email is valid\n  if (!preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email)) {\n    die('Invalid email address');\n  }\n  \n  // Get user ID from database\n  $query = 'SELECT id FROM users WHERE email = :email';\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  if ($result = $stmt->fetchObject()) {\n    $user_id = $result->id;\n    \n    // Generate password reset token\n    $token = bin2hex(random_bytes(32));\n    \n    // Insert new password reset record into database\n    $query = 'INSERT INTO password_resets (user_id, token) VALUES (:user_id, :token)';\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':user_id', $user_id);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n    \n    // Send email with reset link\n    send_password_reset_email($user_id, $token);\n  } else {\n    die('Email address not found');\n  }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n  <h1>Forgot Password</h1>\n  \n  <?php if (isset($_POST['forgot-password'])) : ?>\n    <p>Email sent with password reset link.</p>\n  <?php endif; ?>\n  \n  <form method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"example@example.com\">\n    <button type=\"submit\" name=\"forgot-password\">Send Password Reset Link</button>\n  </form>\n</body>\n</html>\n```"]}
