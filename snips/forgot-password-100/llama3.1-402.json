{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"forgot password\" function in PHP. This will send a password reset link to the user's email.\n\n**Note:** This is just a basic example and you should consider implementing additional security measures, such as storing passwords securely (e.g., using bcrypt) and validating user input.\n\n**Database Table:**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires_at TIMESTAMP\n);\n```\n**PHP Code:**\n\n**`forgot_password.php`:**\n```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Check if user exists\n$email = $_POST['email'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n$stmt->bind_param('s', $email);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    echo \"Email not found.\";\n    exit;\n}\n\n// Generate reset token\n$token = bin2hex(random_bytes(32));\n$expires_at = date('Y-m-d H:i:s', strtotime('+1 day'));\n\n// Update user with reset token\n$stmt = $conn->prepare(\"UPDATE users SET reset_token = ?, reset_expires_at = ? WHERE email = ?\");\n$stmt->bind_param('ss', $token, $expires_at, $email);\n$stmt->execute();\n\n// Send password reset email\n$subject = \"Reset your password\";\n$body = \"Click this link to reset your password: <a href='http://yourdomain.com/reset_password.php?token=$token'>Reset Password</a>\";\nmail($email, $subject, $body);\n\necho \"Password reset email sent.\";\n\n?>\n```\n**`reset_password.php`:**\n```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Check if token is valid\n$token = $_GET['token'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = ? AND reset_expires_at >= NOW()\");\n$stmt->bind_param('s', $token);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    echo \"Invalid or expired token.\";\n    exit;\n}\n\n// Get user email\n$email = $result->fetch_assoc()['email'];\n\n// Let user reset password\necho \"Enter new password: \";\n$new_password = trim(fgets(STDIN));\n$hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n// Update user with new password\n$stmt = $conn->prepare(\"UPDATE users SET password_hash = ?, reset_token = NULL, reset_expires_at = NULL WHERE email = ?\");\n$stmt->bind_param('ss', $hashed_password, $email);\n$stmt->execute();\n\necho \"Password updated.\";\n\n?>\n```\n**How it works:**\n\n1. The user submits their email address to the `forgot_password.php` script.\n2. The script checks if the email exists in the database. If not, it displays an error message.\n3. If the email exists, the script generates a random reset token and updates the user's record with this token.\n4. The script sends a password reset email to the user with a link to `reset_password.php`.\n5. When the user clicks on the link in the email, they are taken to `reset_password.php`, which checks if the token is valid (i.e., not expired and matches the one stored in the database).\n6. If the token is valid, the script lets the user enter their new password, hashes it, and updates the user's record with the new password.\n\nRemember to replace the placeholders (`your_username`, `your_password`, etc.) with your actual database credentials and other configuration settings. Also, this is just a basic example, you should consider implementing additional security measures, such as using HTTPS for email links, validating user input, and storing passwords securely.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Check if user exists\n$email = $_POST['email'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n$stmt->bind_param('s', $email);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    echo \"Email not found.\";\n    exit;\n}\n\n// Generate reset token\n$token = bin2hex(random_bytes(32));\n$expires_at = date('Y-m-d H:i:s', strtotime('+1 day'));\n\n// Update user with reset token\n$stmt = $conn->prepare(\"UPDATE users SET reset_token = ?, reset_expires_at = ? WHERE email = ?\");\n$stmt->bind_param('ss', $token, $expires_at, $email);\n$stmt->execute();\n\n// Send password reset email\n$subject = \"Reset your password\";\n$body = \"Click this link to reset your password: <a href='http://yourdomain.com/reset_password.php?token=$token'>Reset Password</a>\";\nmail($email, $subject, $body);\n\necho \"Password reset email sent.\";\n\n?>\n```", "```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Check if token is valid\n$token = $_GET['token'];\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = ? AND reset_expires_at >= NOW()\");\n$stmt->bind_param('s', $token);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    echo \"Invalid or expired token.\";\n    exit;\n}\n\n// Get user email\n$email = $result->fetch_assoc()['email'];\n\n// Let user reset password\necho \"Enter new password: \";\n$new_password = trim(fgets(STDIN));\n$hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n// Update user with new password\n$stmt = $conn->prepare(\"UPDATE users SET password_hash = ?, reset_token = NULL, reset_expires_at = NULL WHERE email = ?\");\n$stmt->bind_param('ss', $hashed_password, $email);\n$stmt->execute();\n\necho \"Password updated.\";\n\n?>\n```"]}
