{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// This is a simplified example and should be used with caution.\n// It's crucial to implement proper security measures in a real application.\n\n// Assume you have a database connection established (e.g., $db)\n// and user credentials stored in a database table (e.g., 'users')\n// with columns like 'id', 'email', 'password_hash', 'salt'\n\nfunction forgot_password($email, $db) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email address.\";\n  }\n\n  // 2. Check if the user exists\n  $user = $db->query(\"SELECT id, password_hash, salt FROM users WHERE email = '$email' LIMIT 1\");\n\n  if ($user->num_rows === 0) {\n    return \"User not found.\";\n  }\n\n  $user_data = $user->fetch_assoc();\n  $id = $user_data['id'];\n  $password_hash = $user_data['password_hash'];\n  $salt = $user_data['salt'];\n\n  // 3. Generate a unique token\n  $token = bin2hex(random_bytes(32)); //  Generate a cryptographically secure random token\n\n  // 4.  Store the token in the database, associated with the user\n  $db->query(\"INSERT INTO password_resets (user_id, token, expires_at) VALUES ($id, '$token', NOW() + INTERVAL 24 HOUR)\"); // Store for 24 hours\n\n  // 5.  Send an email to the user with the token\n  $email_subject = \"Password Reset\";\n  $email_body = \"To reset your password, please click on the following link: <a href='\" . $_SERVER['PHP_SELF'] . \"?reset=$token'</a>\"; //  '$_SERVER['PHP_SELF']' ensures correct link generation.\n  $email_to = $email;\n  $headers = \"From: your_website@example.com\";\n\n  mail($email_to, $email_body, $headers);\n\n  return \"Password reset email sent to $email.\";\n}\n\n\n\n//  Example usage (This part is for testing purposes - NOT for actual user interaction)\n//  You'd replace this with your actual user input and database interactions.\n//  For demonstration, we're using a hardcoded email.\n\n// Simulate a database connection (replace with your actual database connection)\n$db = new mysqli(\"localhost\", \"your_username\", \"your_password\", \"your_database\");\nif ($db->connect_error) {\n  die(\"Connection failed: \" . $db->connect_error);\n}\n\n\n// Test the function\n$result = forgot_password(\"testuser@example.com\", $db);\necho $result;\n\n\n// Clean up the database connection\n$db->close();\n?>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **Cryptographically Secure Token:** Uses `random_bytes(32)` to generate a 32-byte random token, which is much more secure than simple random numbers.  `bin2hex()` converts the binary data to a hexadecimal string. This is the best practice for generating tokens.\n    * **`$_SERVER['PHP_SELF']`:**  Critically important.  Uses `$_SERVER['PHP_SELF']` to construct the reset link. This ensures that the link will always point to the correct script, even if the URL is modified.  Do not hardcode the path to the script directly.\n    * **Database Interaction:**  This example emphasizes the need for secure database queries.  It's *crucial* to use parameterized queries or prepared statements (if your database library supports them) to prevent SQL injection vulnerabilities.  (The code shows a basic INSERT, but in a real application, parameterized queries are essential.)\n* **Error Handling and Validation:**\n    * **Email Validation:** Includes `filter_var($email, FILTER_VALIDATE_EMAIL)` to ensure the email address is in a valid format.\n    * **User Existence Check:** Checks if the user exists in the database before proceeding.\n* **Token Expiration:**  The `password_resets` table now includes an `expires_at` column, which is automatically populated with the current timestamp plus 24 hours. This is *essential* for security.  Expired tokens should be removed from the database to prevent abuse.\n* **Database Table Structure (Important):** The code assumes a `password_resets` table:\n    ```sql\n    CREATE TABLE password_resets (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        token VARCHAR(64) NOT NULL,\n        expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE KEY unique_token(token)\n    );\n    ```\n* **Clearer Explanation and Comments:**  The code is thoroughly commented to explain each step.\n* **Clean-up:** Includes `$db->close()` to close the database connection after use.\n* **Simulated Database Connection:**  The example provides a simulated database connection to make it runnable. *Replace this with your actual database connection.*\n\n**Important Considerations and Further Enhancements (Beyond this basic example):**\n\n1. **Password Reset Link Generation:** The reset link is generated using the token. The user clicks this link, and the script (also using the same token) updates the user's password in the database.\n\n2. **Password Update Logic:** The most critical part is *how* you update the password.\n   * **Verification:**  The script that receives the reset token should *not* directly ask the user to enter a new password. This is a major security risk.\n   * **Hashing:** Hash the *new* password using a strong hashing algorithm (e.g., bcrypt, Argon2) *before* updating the database.  *Never* store passwords in plain text.\n   * **Token Deactivation:**  After the password is successfully updated, *immediately* delete the token from the `password_resets` table to prevent it from being used later.\n\n3. **Rate Limiting:** Implement rate limiting to prevent attackers from repeatedly requesting password reset tokens.\n\n4. **Logging:** Log all password reset attempts (successful and unsuccessful) for auditing and security monitoring.\n\n5. **User Experience:**  Improve the user experience with clear instructions and feedback.\n\n6. **Session Management:** Use session management to track logged-in users and protect against session hijacking.\n\n7. **Input Sanitization:** Always sanitize user input to prevent vulnerabilities.\n\n8. **HTTPS:**  Use HTTPS to encrypt all communication between the user's browser and your server.\n\n**Disclaimer:** This code is a simplified example for educational purposes only.  It is *not* production-ready and requires significant enhancements and security measures before being deployed in a real-world application.  Always prioritize security best practices and consult with security experts.  This is for illustrative purposes only.\n", "code_blocks": ["```php\n<?php\n\n// This is a simplified example and should be used with caution.\n// It's crucial to implement proper security measures in a real application.\n\n// Assume you have a database connection established (e.g., $db)\n// and user credentials stored in a database table (e.g., 'users')\n// with columns like 'id', 'email', 'password_hash', 'salt'\n\nfunction forgot_password($email, $db) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email address.\";\n  }\n\n  // 2. Check if the user exists\n  $user = $db->query(\"SELECT id, password_hash, salt FROM users WHERE email = '$email' LIMIT 1\");\n\n  if ($user->num_rows === 0) {\n    return \"User not found.\";\n  }\n\n  $user_data = $user->fetch_assoc();\n  $id = $user_data['id'];\n  $password_hash = $user_data['password_hash'];\n  $salt = $user_data['salt'];\n\n  // 3. Generate a unique token\n  $token = bin2hex(random_bytes(32)); //  Generate a cryptographically secure random token\n\n  // 4.  Store the token in the database, associated with the user\n  $db->query(\"INSERT INTO password_resets (user_id, token, expires_at) VALUES ($id, '$token', NOW() + INTERVAL 24 HOUR)\"); // Store for 24 hours\n\n  // 5.  Send an email to the user with the token\n  $email_subject = \"Password Reset\";\n  $email_body = \"To reset your password, please click on the following link: <a href='\" . $_SERVER['PHP_SELF'] . \"?reset=$token'</a>\"; //  '$_SERVER['PHP_SELF']' ensures correct link generation.\n  $email_to = $email;\n  $headers = \"From: your_website@example.com\";\n\n  mail($email_to, $email_body, $headers);\n\n  return \"Password reset email sent to $email.\";\n}\n\n\n\n//  Example usage (This part is for testing purposes - NOT for actual user interaction)\n//  You'd replace this with your actual user input and database interactions.\n//  For demonstration, we're using a hardcoded email.\n\n// Simulate a database connection (replace with your actual database connection)\n$db = new mysqli(\"localhost\", \"your_username\", \"your_password\", \"your_database\");\nif ($db->connect_error) {\n  die(\"Connection failed: \" . $db->connect_error);\n}\n\n\n// Test the function\n$result = forgot_password(\"testuser@example.com\", $db);\necho $result;\n\n\n// Clean up the database connection\n$db->close();\n?>\n```"]}
