{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"Forgot Password\" function in PHP:\n\n**Database Table Structure:**\n\nLet's assume we have a database table named `users` with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255) DEFAULT NULL,\n  reset_expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**Forgot Password Form:**\n\nCreate a form in your HTML file to handle the forgot password functionality:\n```php\n<form action=\"forgot-password.php\" method=\"post\">\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\" required>\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```\n**Forgot Password PHP Code:**\n\nCreate a PHP file named `forgot-password.php` to handle the forgot password functionality:\n```php\n<?php\n\n// Include database connection settings\nrequire 'config/db.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get email from form\n  $email = $_POST['email'];\n\n  // Validate email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address\";\n    exit;\n  }\n\n  // Check if user exists\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"User not found\";\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = bin2hex(random_bytes(16));\n\n  // Update user's reset token and expires at\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE id = :id\");\n  $stmt->bindParam(':token', $resetToken);\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Send email with reset link\n  $subject = \"Reset Password Link\";\n  $message = \"Click this link to reset your password: <a href='https://your-website.com/reset-password.php?token=$resetToken'>Reset Password</a>\";\n  mail($email, $subject, $message);\n\n  echo \"Reset link sent to your email. Click on the link to reset your password.\";\n} else {\n  // Form not submitted\n}\n\n?>\n```\n**Explanation:**\n\n1. We first include our database connection settings using `require 'config/db.php';`.\n2. We check if the form has been submitted by checking the request method.\n3. If the form has been submitted, we get the email from the form and validate it using a regular expression.\n4. We then check if the user exists in the database. If not, we display an error message.\n5. If the user exists, we generate a reset token using `bin2hex(random_bytes(16))`.\n6. We update the user's reset token and expires at in the database.\n7. Finally, we send an email to the user with a reset link.\n\n**Reset Password Page:**\n\nCreate a page named `reset-password.php` to handle the password reset functionality:\n```php\n<?php\n\n// Include database connection settings\nrequire 'config/db.php';\n\n// Get reset token from URL parameter\n$token = $_GET['token'];\n\n// Check if reset token is valid\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()\");\n$stmt->bindParam(':token', $token);\n$stmt->execute();\n$user = $stmt->fetch();\n\nif (!$user) {\n  echo \"Invalid reset link\";\n  exit;\n}\n\n// Display password reset form\n?>\n<form action=\"reset-password.php\" method=\"post\">\n  <label>New Password:</label>\n  <input type=\"password\" name=\"new_password\" required>\n  <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get new password from form\n  $newPassword = $_POST['new_password'];\n\n  // Validate new password\n  if (strlen($newPassword) < 8) {\n    echo \"New password must be at least 8 characters\";\n    exit;\n  }\n\n  // Update user's password\n  $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password WHERE id = :id\");\n  $stmt->bindParam(':password', password_hash($newPassword, PASSWORD_DEFAULT));\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Update user's reset token and expires at\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = NULL, reset_expires_at = NULL WHERE id = :id\");\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  echo \"Password reset successfully\";\n}\n\n?>\n```\n**Explanation:**\n\n1. We first include our database connection settings using `require 'config/db.php';`.\n2. We get the reset token from the URL parameter.\n3. We check if the reset token is valid by checking if it exists in the database and has not expired.\n4. If the reset token is valid, we display a password reset form.\n5. When the form is submitted, we update the user's password using `password_hash()`.\n6. Finally, we update the user's reset token and expires at to prevent further password resets.\n\nThis is a basic example of how to create a \"Forgot Password\" function in PHP. You may want to add additional security measures such as email verification or two-factor authentication.", "code_blocks": [null, "```php\n<form action=\"forgot-password.php\" method=\"post\">\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\" required>\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```", "```php\n<?php\n\n// Include database connection settings\nrequire 'config/db.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get email from form\n  $email = $_POST['email'];\n\n  // Validate email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address\";\n    exit;\n  }\n\n  // Check if user exists\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"User not found\";\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = bin2hex(random_bytes(16));\n\n  // Update user's reset token and expires at\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE id = :id\");\n  $stmt->bindParam(':token', $resetToken);\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Send email with reset link\n  $subject = \"Reset Password Link\";\n  $message = \"Click this link to reset your password: <a href='https://your-website.com/reset-password.php?token=$resetToken'>Reset Password</a>\";\n  mail($email, $subject, $message);\n\n  echo \"Reset link sent to your email. Click on the link to reset your password.\";\n} else {\n  // Form not submitted\n}\n\n?>\n```", "```php\n<?php\n\n// Include database connection settings\nrequire 'config/db.php';\n\n// Get reset token from URL parameter\n$token = $_GET['token'];\n\n// Check if reset token is valid\n$stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()\");\n$stmt->bindParam(':token', $token);\n$stmt->execute();\n$user = $stmt->fetch();\n\nif (!$user) {\n  echo \"Invalid reset link\";\n  exit;\n}\n\n// Display password reset form\n?>\n<form action=\"reset-password.php\" method=\"post\">\n  <label>New Password:</label>\n  <input type=\"password\" name=\"new_password\" required>\n  <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get new password from form\n  $newPassword = $_POST['new_password'];\n\n  // Validate new password\n  if (strlen($newPassword) < 8) {\n    echo \"New password must be at least 8 characters\";\n    exit;\n  }\n\n  // Update user's password\n  $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password WHERE id = :id\");\n  $stmt->bindParam(':password', password_hash($newPassword, PASSWORD_DEFAULT));\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Update user's reset token and expires at\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = NULL, reset_expires_at = NULL WHERE id = :id\");\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  echo \"Password reset successfully\";\n}\n\n?>\n```"]}
