{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a simple \"forgot password\" function in PHP:\n\n**Database Setup**\n\nLet's assume we have a table called `users` with the following columns:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\nWe'll use the `email` column to send the password reset link to the user.\n\n**PHP Code**\n\nCreate a new PHP file called `forgot_password.php`. This script will handle the forgot password request:\n```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // change this to a random secret key\n$reset_token_expiration = 60 * 15; // 15 minutes in seconds\n\n// Function to generate a reset token\nfunction generate_reset_token($email) {\n  $token = bin2hex(random_bytes(32));\n  return array(\n    'token' => $token,\n    'expires_at' => time() + $reset_token_expiration\n  );\n}\n\n// Function to send the password reset email\nfunction send_password_reset_email($email, $token) {\n  $subject = \"Reset your password\";\n  $body = \"\n  Dear user,\n\n  You are receiving this email because we received a request to reset your password.\n\n  To reset your password, click on the following link:\n  <a href='\" . $GLOBALS['base_url'] . \"/reset_password?token=\" . $token . \"'>Reset Password</a>\n\n  If you did not request this change, please ignore this email.\n\";\n\n  // Send the email using a mail library (e.g. PHPMailer)\n  // ...\n}\n\n// Handle the forgot password form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if ($email !== '') {\n    try {\n      // Get the user from the database\n      $user = get_user_from_email($email);\n      if ($user) {\n        // Generate a reset token and send the email\n        $reset_token = generate_reset_token($email);\n        send_password_reset_email($email, $reset_token['token']);\n        echo \"Email sent with password reset link.\";\n      } else {\n        throw new Exception(\"User not found\");\n      }\n    } catch (Exception $e) {\n      echo \"Error: \" . $e->getMessage();\n    }\n  } else {\n    echo \"Please enter your email address.\";\n  }\n}\n\nfunction get_user_from_email($email) {\n  // Query the database to retrieve the user\n  $query = \"\n    SELECT id, email, password_hash\n    FROM users\n    WHERE email = :email\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\n?>\n```\n**Reset Password Page**\n\nCreate a new PHP file called `reset_password.php`. This script will handle the password reset request:\n```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // change this to a random secret key\n\n// Function to validate the reset token\nfunction validate_reset_token($token) {\n  $query = \"\n    SELECT id, email, expires_at\n    FROM users\n    WHERE reset_token = :token\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $result = $stmt->fetch();\n  if ($result) {\n    return array(\n      'id' => $result['id'],\n      'email' => $result['email']\n    );\n  } else {\n    throw new Exception(\"Invalid token\");\n  }\n}\n\n// Handle the reset password form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_POST['token'];\n  try {\n    // Validate the reset token\n    $user_data = validate_reset_token($token);\n    $email = $user_data['email'];\n\n    // Hash and store the new password\n    $new_password = hash('sha256', $_POST['password']);\n    $query = \"\n      UPDATE users\n      SET password_hash = :new_password, reset_token = NULL\n      WHERE id = :id AND email = :email\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':new_password', $new_password);\n    $stmt->bindParam(':id', $user_data['id']);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    echo \"Password reset successfully.\";\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\n?>\n```\n**Usage**\n\n1. Send a request to `forgot_password.php` with the user's email address.\n2. The script will generate a reset token and send an email with a link to `reset_password.php`.\n3. Click on the link to access the password reset page, where you can enter a new password.\n\nNote: This is a basic example and you should consider implementing additional security measures, such as:\n\n* Using HTTPS (SSL/TLS) for encrypting sensitive data\n* Implementing two-factor authentication\n* Storing passwords securely using a salted hash function (e.g. bcrypt)\n* Limiting the number of password reset attempts per user\n\nAlso, make sure to replace `your_secret_key_here` with a random secret key and update the database configuration as needed.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // change this to a random secret key\n$reset_token_expiration = 60 * 15; // 15 minutes in seconds\n\n// Function to generate a reset token\nfunction generate_reset_token($email) {\n  $token = bin2hex(random_bytes(32));\n  return array(\n    'token' => $token,\n    'expires_at' => time() + $reset_token_expiration\n  );\n}\n\n// Function to send the password reset email\nfunction send_password_reset_email($email, $token) {\n  $subject = \"Reset your password\";\n  $body = \"\n  Dear user,\n\n  You are receiving this email because we received a request to reset your password.\n\n  To reset your password, click on the following link:\n  <a href='\" . $GLOBALS['base_url'] . \"/reset_password?token=\" . $token . \"'>Reset Password</a>\n\n  If you did not request this change, please ignore this email.\n\";\n\n  // Send the email using a mail library (e.g. PHPMailer)\n  // ...\n}\n\n// Handle the forgot password form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if ($email !== '') {\n    try {\n      // Get the user from the database\n      $user = get_user_from_email($email);\n      if ($user) {\n        // Generate a reset token and send the email\n        $reset_token = generate_reset_token($email);\n        send_password_reset_email($email, $reset_token['token']);\n        echo \"Email sent with password reset link.\";\n      } else {\n        throw new Exception(\"User not found\");\n      }\n    } catch (Exception $e) {\n      echo \"Error: \" . $e->getMessage();\n    }\n  } else {\n    echo \"Please enter your email address.\";\n  }\n}\n\nfunction get_user_from_email($email) {\n  // Query the database to retrieve the user\n  $query = \"\n    SELECT id, email, password_hash\n    FROM users\n    WHERE email = :email\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\n?>\n```", "```php\n<?php\n\n// Configuration\n$secret_key = 'your_secret_key_here'; // change this to a random secret key\n\n// Function to validate the reset token\nfunction validate_reset_token($token) {\n  $query = \"\n    SELECT id, email, expires_at\n    FROM users\n    WHERE reset_token = :token\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $result = $stmt->fetch();\n  if ($result) {\n    return array(\n      'id' => $result['id'],\n      'email' => $result['email']\n    );\n  } else {\n    throw new Exception(\"Invalid token\");\n  }\n}\n\n// Handle the reset password form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_POST['token'];\n  try {\n    // Validate the reset token\n    $user_data = validate_reset_token($token);\n    $email = $user_data['email'];\n\n    // Hash and store the new password\n    $new_password = hash('sha256', $_POST['password']);\n    $query = \"\n      UPDATE users\n      SET password_hash = :new_password, reset_token = NULL\n      WHERE id = :id AND email = :email\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':new_password', $new_password);\n    $stmt->bindParam(':id', $user_data['id']);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    echo \"Password reset successfully.\";\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\n?>\n```"]}
