{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can implement a \"forgot password\" functionality in PHP:\n\n**Step 1: Database Schema**\n\nFirst, let's assume that we have a `users` table with the following schema:\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password_hash VARCHAR(255) NOT NULL,\n    reset_token VARCHAR(255),\n    reset_expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**Step 2: PHP Code**\n\nCreate a new file called `forgot_password.php` and add the following code:\n```php\n<?php\n\nrequire_once 'db.php'; // assume you have a db.php file that connects to your database\n\nfunction forgotPassword() {\n    $email = $_POST['email'];\n    if (empty($email)) {\n        throw new Exception('Email is required');\n    }\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->execute([':email' => $email]);\n        $user = $stmt->fetch();\n\n        if (!$user) {\n            throw new Exception('Email not found');\n        }\n\n        // generate a random reset token\n        $resetToken = bin2hex(random_bytes(32));\n        $pdo->exec(\"UPDATE users SET reset_token = :resetToken, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE email = :email\", ['resetToken' => $resetToken, 'email' => $email]);\n\n        // send a password reset email (not implemented here)\n        // you can use PHPMailer or SwiftMail for this\n\n        return array('message' => 'Password reset link sent to your email');\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $result = forgotPassword();\n        echo json_encode($result);\n    } catch (Exception $e) {\n        echo json_encode(array('error' => $e->getMessage()));\n    }\n}\n```\n**Step 3: HTML Form**\n\nCreate an HTML form that allows users to input their email address:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Enter your email address\">\n    <button type=\"submit\">Reset Password</button>\n</form>\n```\n**Step 4: Password Reset Email**\n\nCreate a new PHP script called `reset_password.php` that handles the password reset request:\n```php\n<?php\n\nrequire_once 'db.php';\n\nfunction resetPassword() {\n    $token = $_GET['token'];\n    if (empty($token)) {\n        throw new Exception('Token is required');\n    }\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()\");\n        $stmt->execute([':token' => $token]);\n        $user = $stmt->fetch();\n\n        if (!$user) {\n            throw new Exception('Token is invalid or has expired');\n        }\n\n        // prompt user to enter a new password\n        echo '<form action=\"reset_password.php\" method=\"post\">';\n        echo '<input type=\"password\" name=\"new_password\">';\n        echo '<button type=\"submit\">Reset Password</button>';\n        echo '</form>';\n\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $newPassword = $_POST['new_password'];\n            // hash the new password and update it in the database\n            $pdo->exec(\"UPDATE users SET password_hash = :passwordHash WHERE email = :email\", ['passwordHash' => password_hash($newPassword, PASSWORD_DEFAULT), 'email' => $user['email']]);\n\n            return array('message' => 'Password updated successfully');\n        }\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    try {\n        $result = resetPassword();\n        echo json_encode($result);\n    } catch (Exception $e) {\n        echo json_encode(array('error' => $e->getMessage()));\n    }\n}\n```\n**Note**: This is a basic implementation and you should add additional security measures such as token validation, password hashing, and salted passwords. Also, make sure to handle exceptions properly in production code.\n\nThis code will generate a random reset token when the user requests a password reset, and then prompt them to enter a new password after clicking on the reset link sent via email. The new password is then hashed and updated in the database.", "code_blocks": [null, "```php\n<?php\n\nrequire_once 'db.php'; // assume you have a db.php file that connects to your database\n\nfunction forgotPassword() {\n    $email = $_POST['email'];\n    if (empty($email)) {\n        throw new Exception('Email is required');\n    }\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->execute([':email' => $email]);\n        $user = $stmt->fetch();\n\n        if (!$user) {\n            throw new Exception('Email not found');\n        }\n\n        // generate a random reset token\n        $resetToken = bin2hex(random_bytes(32));\n        $pdo->exec(\"UPDATE users SET reset_token = :resetToken, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE email = :email\", ['resetToken' => $resetToken, 'email' => $email]);\n\n        // send a password reset email (not implemented here)\n        // you can use PHPMailer or SwiftMail for this\n\n        return array('message' => 'Password reset link sent to your email');\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $result = forgotPassword();\n        echo json_encode($result);\n    } catch (Exception $e) {\n        echo json_encode(array('error' => $e->getMessage()));\n    }\n}\n```", null, "```php\n<?php\n\nrequire_once 'db.php';\n\nfunction resetPassword() {\n    $token = $_GET['token'];\n    if (empty($token)) {\n        throw new Exception('Token is required');\n    }\n\n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()\");\n        $stmt->execute([':token' => $token]);\n        $user = $stmt->fetch();\n\n        if (!$user) {\n            throw new Exception('Token is invalid or has expired');\n        }\n\n        // prompt user to enter a new password\n        echo '<form action=\"reset_password.php\" method=\"post\">';\n        echo '<input type=\"password\" name=\"new_password\">';\n        echo '<button type=\"submit\">Reset Password</button>';\n        echo '</form>';\n\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $newPassword = $_POST['new_password'];\n            // hash the new password and update it in the database\n            $pdo->exec(\"UPDATE users SET password_hash = :passwordHash WHERE email = :email\", ['passwordHash' => password_hash($newPassword, PASSWORD_DEFAULT), 'email' => $user['email']]);\n\n            return array('message' => 'Password updated successfully');\n        }\n    } catch (PDOException $e) {\n        throw new Exception($e->getMessage());\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    try {\n        $result = resetPassword();\n        echo json_encode($result);\n    } catch (Exception $e) {\n        echo json_encode(array('error' => $e->getMessage()));\n    }\n}\n```"]}
