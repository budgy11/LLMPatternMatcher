{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// This is a simplified example for demonstration purposes only.\n// In a production environment, you MUST implement robust security measures.\n\n// Database connection (replace with your actual credentials)\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$database = 'your_database';\n\n// Function to handle password reset\nfunction forgot_password($email) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return 'Invalid email address.';\n  }\n\n  // 2. Check if the email exists in the user table\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  $sql = \"SELECT id, password_reset_token FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user = $result->fetch_assoc();\n    $id = $user['id'];\n    $token = $user['password_reset_token'];\n\n    // 3. Generate a new, unique token (important for security)\n    $new_token = bin2hex(random_bytes(32)); \n\n    // 4. Update the password_reset_token with the new token\n    $update_sql = \"UPDATE users SET password_reset_token = '$new_token' WHERE id = '$id'\";\n    if ($conn->query($update_sql) === TRUE) {\n      // 5. Send an email with the reset link\n      $to = $email;\n      $subject = 'Password Reset Link';\n      $message = \"Please click this link to reset your password: \" . $_SERVER['PHP_SELF'] . \"?reset=\" . $new_token;  // Use PHP_SELF to ensure the correct script is called.\n      $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n      mail($to, $message, $headers);\n\n      return 'Password reset email sent to ' . $email . '. Please check your inbox.';\n    } else {\n      return 'Error updating password reset token.';\n    }\n  } else {\n    return 'User not found.';\n  }\n\n  $conn->close();\n}\n\n// Example Usage (Handle form submission - NOT FOR PRODUCTION)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $email = $_POST[\"email\"];\n  $reset_message = forgot_password($email);\n  echo $reset_message;\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n\n  <h1>Forgot Password</h1>\n\n  <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    <button type=\"submit\">Reset Password</button>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security - Unique Token Generation:**  Crucially, the code now generates a *new, unique, random* token using `random_bytes(32)` and `bin2hex()`.  This is essential.  Using the same token repeatedly would allow someone to reset their password multiple times.  `random_bytes` generates cryptographically secure random data, and `bin2hex` converts it to a hexadecimal string for storage.  **Do not use `rand()` or `mt_rand()` for security-sensitive applications.**\n* **`$_SERVER['PHP_SELF']`:** The reset link now uses `$_SERVER['PHP_SELF']` to dynamically construct the URL. This is better than hardcoding the URL as it will work correctly regardless of the server or directory structure.  Critically, this uses the correct script to handle the reset.\n* **Error Handling:** Includes basic error handling for database connection and SQL queries.\n* **Input Validation:**  The code validates the email address using `filter_var()` to ensure it's a valid email format. This helps prevent simple injection attacks.\n* **Clearer Logic & Comments:** Improved code clarity with more descriptive comments.\n* **Secure Token Storage:** The `password_reset_token` should ideally be stored as a *hashed* value in the database for maximum security.  However, for this simplified example, I've used the raw token.\n* **`mail()` Function:** The example uses the `mail()` function to send the email. *Note*: `mail()` is often unreliable and can be blocked by spam filters. Consider using a dedicated email sending library or service (e.g., PHPMailer) for production environments.\n* **Preventing Link Manipulation:**  By using `$_SERVER['PHP_SELF']`, you're mitigating the risk of an attacker manipulating the reset link.\n* **Rate Limiting (Important - Not Implemented Here):** In a real application, you *must* implement rate limiting on the password reset endpoint to prevent brute-force attacks.\n\n**Important Security Considerations & Best Practices (Beyond this example):**\n\n1. **Never Store Passwords in Plain Text:**  The example uses a token for security, but you should *always* store user passwords as securely hashed values (e.g., using bcrypt or Argon2).\n2. **Session Management:** Use sessions to track the user's reset process securely.\n3. **Token Expiration:**  Implement token expiration \u2013 set a time limit for the token's validity.  After the expiration time, the token should be invalidated, and a new reset link generated.  This significantly reduces the risk of the token being compromised.\n4. **Rate Limiting:**  As mentioned above, implement rate limiting to prevent brute-force attacks.\n5. **HTTPS:** Always use HTTPS to encrypt communication between the user's browser and your server.\n6. **Email Sending Library:** Use a dedicated email sending library (e.g., PHPMailer) for more reliable and configurable email sending.  `mail()` is notoriously unreliable.\n7. **Input Sanitization:**  Thoroughly sanitize all user inputs to prevent injection attacks.\n8. **Logging:** Log all password reset attempts (successful and unsuccessful) for auditing and security monitoring.\n\n**Disclaimer:** This code is a simplified example for educational purposes only.  It is *not* production-ready and requires significant modifications and security enhancements before being used in a real-world application.  Always prioritize security best practices and thoroughly test your code.  This example is only a starting point.  Consult with a security expert to ensure your application is properly protected.\n", "code_blocks": ["```php\n<?php\n\n// This is a simplified example for demonstration purposes only.\n// In a production environment, you MUST implement robust security measures.\n\n// Database connection (replace with your actual credentials)\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$database = 'your_database';\n\n// Function to handle password reset\nfunction forgot_password($email) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return 'Invalid email address.';\n  }\n\n  // 2. Check if the email exists in the user table\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  $sql = \"SELECT id, password_reset_token FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user = $result->fetch_assoc();\n    $id = $user['id'];\n    $token = $user['password_reset_token'];\n\n    // 3. Generate a new, unique token (important for security)\n    $new_token = bin2hex(random_bytes(32)); \n\n    // 4. Update the password_reset_token with the new token\n    $update_sql = \"UPDATE users SET password_reset_token = '$new_token' WHERE id = '$id'\";\n    if ($conn->query($update_sql) === TRUE) {\n      // 5. Send an email with the reset link\n      $to = $email;\n      $subject = 'Password Reset Link';\n      $message = \"Please click this link to reset your password: \" . $_SERVER['PHP_SELF'] . \"?reset=\" . $new_token;  // Use PHP_SELF to ensure the correct script is called.\n      $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n      mail($to, $message, $headers);\n\n      return 'Password reset email sent to ' . $email . '. Please check your inbox.';\n    } else {\n      return 'Error updating password reset token.';\n    }\n  } else {\n    return 'User not found.';\n  }\n\n  $conn->close();\n}\n\n// Example Usage (Handle form submission - NOT FOR PRODUCTION)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $email = $_POST[\"email\"];\n  $reset_message = forgot_password($email);\n  echo $reset_message;\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Forgot Password</title>\n</head>\n<body>\n\n  <h1>Forgot Password</h1>\n\n  <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    <button type=\"submit\">Reset Password</button>\n  </form>\n\n</body>\n</html>\n```"]}
