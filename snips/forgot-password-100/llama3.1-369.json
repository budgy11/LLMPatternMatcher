{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a \"forgot password\" function in PHP that sends a reset link to the user's email address:\n\n**`forgot_password.php`**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get the email address from the form submission\n$email = $_POST['email'];\n\n// Check if the email is valid\nif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n}\n\n// Query to select the user's ID and hashed password\n$query = \"SELECT id, password FROM users WHERE email = '$email'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Get the user's data from the result\n    $row = $result->fetch_assoc();\n    $userId = $row['id'];\n    $hashedPassword = $row['password'];\n\n    // Generate a random password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // Store the token in the database (you can use a separate table for this)\n    $query = \"INSERT INTO password_reset_tokens (user_id, token) VALUES ('$userId', '$token')\";\n    $conn->query($query);\n\n    // Send an email with the reset link\n    sendPasswordResetEmail($email, $token);\n} else {\n    echo 'Email not found';\n}\n\n// Function to send the password reset email\nfunction sendPasswordResetEmail($email, $token) {\n    // Configuration for your email provider (e.g. Gmail)\n    $from = 'your_email@example.com';\n    $to = $email;\n    $subject = 'Reset your password';\n    $body = '\n        <p>Hello,</p>\n        <p>To reset your password, click on this link:</p>\n        <a href=\"' . $_SERVER['PHP_SELF'] . '?token=' . $token . '\">Reset Password</a>\n        <p>Best regards,\n        [Your Name]</p>';\n\n    // Send the email using PHPMailer (you'll need to install it first)\n    require 'phpmailer/PHPMailerAutoload.php';\n    $mail = new PHPMailer;\n    $mail->isSMTP();\n    $mail->Host = 'smtp.example.com';\n    $mail->Port = 587;\n    $mail->Username = 'your_email@example.com';\n    $mail->Password = 'your_password';\n    $mail->setFrom($from, 'Your Name');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n    if (!$mail->send()) {\n        echo 'Error sending email: ' . $mail->ErrorInfo;\n    }\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```\n**`reset_password.php`**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get the token from the URL parameter\n$token = $_GET['token'];\n\n// Check if the token is valid\n$query = \"SELECT * FROM password_reset_tokens WHERE token = '$token'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Get the user's data from the result\n    $row = $result->fetch_assoc();\n    $userId = $row['user_id'];\n\n    // Generate a new password for the user\n    $newPassword = bin2hex(random_bytes(32));\n\n    // Update the user's hashed password in the database\n    $query = \"UPDATE users SET password = '$newPassword' WHERE id = '$userId'\";\n    $conn->query($query);\n\n    // Delete the password reset token from the database\n    $query = \"DELETE FROM password_reset_tokens WHERE token = '$token'\";\n    $conn->query($query);\n} else {\n    echo 'Invalid token';\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```\nThis code assumes that you have a `users` table in your database with columns `id`, `email`, and `password`. The `password` column stores the hashed password using a library like `phpass`.\n\nThe `forgot_password.php` script sends an email to the user's email address with a reset link. When the user clicks on the link, they are taken to the `reset_password.php` script, which generates a new random password for the user and updates their hashed password in the database.\n\nNote that this is just an example code, and you should modify it to fit your specific use case. Additionally, make sure to install and configure PHPMailer or another email library if you want to send emails from your server.\n\n**Example Use Case**\n\n1. User requests a password reset by submitting their email address to `forgot_password.php`.\n2. The script sends an email with a reset link to the user's email address.\n3. User clicks on the reset link and is taken to `reset_password.php`, which generates a new random password for them.\n4. The script updates the user's hashed password in the database.\n\nI hope this helps! Let me know if you have any questions or need further assistance.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get the email address from the form submission\n$email = $_POST['email'];\n\n// Check if the email is valid\nif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n}\n\n// Query to select the user's ID and hashed password\n$query = \"SELECT id, password FROM users WHERE email = '$email'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Get the user's data from the result\n    $row = $result->fetch_assoc();\n    $userId = $row['id'];\n    $hashedPassword = $row['password'];\n\n    // Generate a random password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // Store the token in the database (you can use a separate table for this)\n    $query = \"INSERT INTO password_reset_tokens (user_id, token) VALUES ('$userId', '$token')\";\n    $conn->query($query);\n\n    // Send an email with the reset link\n    sendPasswordResetEmail($email, $token);\n} else {\n    echo 'Email not found';\n}\n\n// Function to send the password reset email\nfunction sendPasswordResetEmail($email, $token) {\n    // Configuration for your email provider (e.g. Gmail)\n    $from = 'your_email@example.com';\n    $to = $email;\n    $subject = 'Reset your password';\n    $body = '\n        <p>Hello,</p>\n        <p>To reset your password, click on this link:</p>\n        <a href=\"' . $_SERVER['PHP_SELF'] . '?token=' . $token . '\">Reset Password</a>\n        <p>Best regards,\n        [Your Name]</p>';\n\n    // Send the email using PHPMailer (you'll need to install it first)\n    require 'phpmailer/PHPMailerAutoload.php';\n    $mail = new PHPMailer;\n    $mail->isSMTP();\n    $mail->Host = 'smtp.example.com';\n    $mail->Port = 587;\n    $mail->Username = 'your_email@example.com';\n    $mail->Password = 'your_password';\n    $mail->setFrom($from, 'Your Name');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n    if (!$mail->send()) {\n        echo 'Error sending email: ' . $mail->ErrorInfo;\n    }\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```", "```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get the token from the URL parameter\n$token = $_GET['token'];\n\n// Check if the token is valid\n$query = \"SELECT * FROM password_reset_tokens WHERE token = '$token'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Get the user's data from the result\n    $row = $result->fetch_assoc();\n    $userId = $row['user_id'];\n\n    // Generate a new password for the user\n    $newPassword = bin2hex(random_bytes(32));\n\n    // Update the user's hashed password in the database\n    $query = \"UPDATE users SET password = '$newPassword' WHERE id = '$userId'\";\n    $conn->query($query);\n\n    // Delete the password reset token from the database\n    $query = \"DELETE FROM password_reset_tokens WHERE token = '$token'\";\n    $conn->query($query);\n} else {\n    echo 'Invalid token';\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```"]}
