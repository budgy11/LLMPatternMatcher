{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"forgot password\" function in PHP:\n\n**Database Setup:**\n\nAssuming you have a database with the following table structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255) DEFAULT NULL\n);\n```\n**PHP Code:**\n```php\n// forgot_password.php\n\nrequire_once 'config.php'; // load database config\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // process the form data\n    $email = $_POST['email'];\n\n    // validate email input\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo 'Invalid email address';\n        exit;\n    }\n\n    // retrieve user from database\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    if (!$user) {\n        echo 'Email not found';\n        exit;\n    }\n\n    // generate reset token\n    $resetToken = bin2hex(random_bytes(32));\n    $expiresAt = date('Y-m-d H:i:s', strtotime('+1 hour'));\n\n    // update user's reset token and expires at time\n    $stmt = $pdo->prepare('UPDATE users SET reset_token = :token, expires_at = :expires WHERE email = :email');\n    $stmt->bindParam(':token', $resetToken);\n    $stmt->bindParam(':expires', $expiresAt);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // send password reset email\n    $to = $email;\n    $subject = 'Reset your password';\n    $message = '<p>Click this link to reset your password: <a href=\"' . $_SERVER['PHP_SELF'] . '?token=' . $resetToken . '\">Reset Password</a></p>';\n    mail($to, $subject, $message);\n\n    echo 'Password reset email sent. Check your inbox and click on the link to reset your password.';\n} else {\n    // display forgot password form\n    ?>\n    <h1>Forgot Password?</h1>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\" id=\"email\" required>\n        <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n}\n```\n**Explanation:**\n\n1. The code checks if the form has been submitted using `$_SERVER['REQUEST_METHOD'] == 'POST'`.\n2. It validates the email input using a regular expression.\n3. If the email is valid, it retrieves the user from the database based on the provided email address.\n4. If the user exists, it generates a reset token using `bin2hex(random_bytes(32))` and updates the user's reset token and expires at time in the database.\n5. It sends an email to the user with a link to reset their password. The link includes the generated reset token as a query parameter.\n6. If the form is not submitted, it displays the forgot password form.\n\n**Security Considerations:**\n\n* Use HTTPS (SSL/TLS) to encrypt communication between the client and server.\n* Store passwords securely using a salted hash (e.g., bcrypt).\n* Validate user input on the server-side to prevent SQL injection attacks.\n* Implement rate limiting for password reset requests to prevent brute-force attacks.\n\n**Example Use Case:**\n\n1. The user visits the forgot password page and enters their email address in the form.\n2. They submit the form, which triggers the code above.\n3. If the email is valid, an email with a link to reset the password is sent to the user's inbox.\n4. The user clicks on the link, which redirects them back to the server with the reset token as a query parameter.\n5. The server verifies the reset token and displays a form for the user to enter their new password.\n\nNote: This is a basic example and you should adapt it to your specific use case and requirements. Additionally, consider implementing additional security measures such as two-factor authentication or account lockout policies.", "code_blocks": [null, "```php\n// forgot_password.php\n\nrequire_once 'config.php'; // load database config\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // process the form data\n    $email = $_POST['email'];\n\n    // validate email input\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo 'Invalid email address';\n        exit;\n    }\n\n    // retrieve user from database\n    $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    if (!$user) {\n        echo 'Email not found';\n        exit;\n    }\n\n    // generate reset token\n    $resetToken = bin2hex(random_bytes(32));\n    $expiresAt = date('Y-m-d H:i:s', strtotime('+1 hour'));\n\n    // update user's reset token and expires at time\n    $stmt = $pdo->prepare('UPDATE users SET reset_token = :token, expires_at = :expires WHERE email = :email');\n    $stmt->bindParam(':token', $resetToken);\n    $stmt->bindParam(':expires', $expiresAt);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // send password reset email\n    $to = $email;\n    $subject = 'Reset your password';\n    $message = '<p>Click this link to reset your password: <a href=\"' . $_SERVER['PHP_SELF'] . '?token=' . $resetToken . '\">Reset Password</a></p>';\n    mail($to, $subject, $message);\n\n    echo 'Password reset email sent. Check your inbox and click on the link to reset your password.';\n} else {\n    // display forgot password form\n    ?>\n    <h1>Forgot Password?</h1>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\" id=\"email\" required>\n        <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n}\n```"]}
