{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a forgotten password function using PHP:\n\n**Database Schema**\n\nAssuming we have the following database schema for users:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n**PHP Code**\n\nCreate a new file called `forgot_password.php` and add the following code:\n```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_POST['email'])) {\n    $email = $_POST['email'];\n\n    // validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo 'Invalid email address';\n        exit;\n    }\n\n    try {\n        // get user data from database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($user = $stmt->fetch()) {\n            // generate reset token\n            $resetToken = bin2hex(random_bytes(32));\n\n            // update user data with new reset token and expiration time\n            $pdo->prepare('UPDATE users SET reset_token = :token, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE id = :id')\n                ->bindParam(':token', $resetToken)\n                ->bindParam(':id', $user['id'])\n                ->execute();\n\n            // send email with reset link\n            $to = $email;\n            $subject = 'Reset your password';\n            $message = '<p>Please click the following link to reset your password:</p>' .\n                      '<p><a href=\"http://example.com/reset-password?token=' . $resetToken . '\">' .\n                      'Reset Password</a></p>';\n\n            mail($to, $subject, $message);\n        } else {\n            echo 'Email address not found';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n} else {\n    ?>\n    <form method=\"post\" action=\"\">\n        <label>Email Address:</label>\n        <input type=\"email\" name=\"email\">\n        <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n}\n```\n**How it works**\n\n1. When the form is submitted, the PHP script checks if an email address was provided.\n2. If the email address is valid, the script queries the database to retrieve user data for that email address.\n3. If a matching user is found, the script generates a new reset token using the `random_bytes` function and updates the user's data with this new token and sets an expiration time of 1 hour from now.\n4. The script then sends an email to the user with a link to reset their password, passing in the reset token as a query parameter.\n\n**Reset Password Form**\n\nCreate another file called `reset-password.php` and add the following code:\n```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n\n    try {\n        // get user data from database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n\n        if ($user = $stmt->fetch()) {\n            ?>\n            <form method=\"post\" action=\"\">\n                <label>Password:</label>\n                <input type=\"password\" name=\"password\">\n                <label>Confirm Password:</label>\n                <input type=\"password\" name=\"confirm_password\">\n                <button type=\"submit\">Submit</button>\n            </form>\n\n            <?php\n        } else {\n            echo 'Invalid reset token or has expired';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n} else {\n    ?>\n    <p>Invalid request.</p>\n    <?php\n}\n```\n**How it works**\n\n1. When the form is submitted, the PHP script checks if a reset token was provided as a query parameter.\n2. If a valid reset token is found and has not expired, the script queries the database to retrieve user data for that token.\n3. If a matching user is found, the script renders a password reset form.\n\n**Password Reset**\n\nTo complete the password reset process, create another file called `password-reset.php` and add the following code:\n```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_POST['password'])) {\n    $newPassword = $_POST['password'];\n    $confirmPassword = $_POST['confirm_password'];\n\n    if ($newPassword !== $confirmPassword) {\n        echo 'Passwords do not match';\n        exit;\n    }\n\n    try {\n        // update user data with new password\n        $stmt = $pdo->prepare('UPDATE users SET password = :password WHERE id = :id');\n        $stmt->bindParam(':password', $newPassword)\n              ->bindParam(':id', $_POST['user_id'])\n              ->execute();\n\n        echo 'Password reset successfully!';\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n```\nThis script updates the user's password with the new value provided in the form.", "code_blocks": [null, "```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_POST['email'])) {\n    $email = $_POST['email'];\n\n    // validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo 'Invalid email address';\n        exit;\n    }\n\n    try {\n        // get user data from database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($user = $stmt->fetch()) {\n            // generate reset token\n            $resetToken = bin2hex(random_bytes(32));\n\n            // update user data with new reset token and expiration time\n            $pdo->prepare('UPDATE users SET reset_token = :token, reset_expires_at = NOW() + INTERVAL 1 HOUR WHERE id = :id')\n                ->bindParam(':token', $resetToken)\n                ->bindParam(':id', $user['id'])\n                ->execute();\n\n            // send email with reset link\n            $to = $email;\n            $subject = 'Reset your password';\n            $message = '<p>Please click the following link to reset your password:</p>' .\n                      '<p><a href=\"http://example.com/reset-password?token=' . $resetToken . '\">' .\n                      'Reset Password</a></p>';\n\n            mail($to, $subject, $message);\n        } else {\n            echo 'Email address not found';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n} else {\n    ?>\n    <form method=\"post\" action=\"\">\n        <label>Email Address:</label>\n        <input type=\"email\" name=\"email\">\n        <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n}\n```", "```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n\n    try {\n        // get user data from database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE reset_token = :token AND reset_expires_at > NOW()');\n        $stmt->bindParam(':token', $token);\n        $stmt->execute();\n\n        if ($user = $stmt->fetch()) {\n            ?>\n            <form method=\"post\" action=\"\">\n                <label>Password:</label>\n                <input type=\"password\" name=\"password\">\n                <label>Confirm Password:</label>\n                <input type=\"password\" name=\"confirm_password\">\n                <button type=\"submit\">Submit</button>\n            </form>\n\n            <?php\n        } else {\n            echo 'Invalid reset token or has expired';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n} else {\n    ?>\n    <p>Invalid request.</p>\n    <?php\n}\n```", "```php\n<?php\n\nrequire_once 'config.php'; // load database connection settings\n\nif (isset($_POST['password'])) {\n    $newPassword = $_POST['password'];\n    $confirmPassword = $_POST['confirm_password'];\n\n    if ($newPassword !== $confirmPassword) {\n        echo 'Passwords do not match';\n        exit;\n    }\n\n    try {\n        // update user data with new password\n        $stmt = $pdo->prepare('UPDATE users SET password = :password WHERE id = :id');\n        $stmt->bindParam(':password', $newPassword)\n              ->bindParam(':id', $_POST['user_id'])\n              ->execute();\n\n        echo 'Password reset successfully!';\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n```"]}
