{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nBelow is an example of how you can create a simple \"forgot password\" functionality using PHP. This example includes:\n\n1. User input for their username or email address\n2. Sending a password reset link to the user's registered email address (in this case, a placeholder `reset_password.php` script will handle the actual password reset)\n3. Basic security measures like hashing and verifying passwords\n\n**Database Schema**\n-------------------\n\nFor this example, we'll use a simple database schema with two tables: `users` and `password_resets`.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  email VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE password_resets (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  token VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**Forgot Password Form**\n-----------------------\n\nCreate a form for users to enter their username or email address:\n```php\n<!-- forgot_password_form.php -->\n<form action=\"forgot_password.php\" method=\"post\">\n  <label>Username/Email:</label>\n  <input type=\"text\" name=\"username_or_email\" required>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n**Forgot Password Script**\n-------------------------\n\nCreate a PHP script to handle the forgot password request:\n```php\n<!-- forgot_password.php -->\n<?php\n\nrequire 'db.php'; // your database connection file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $username_or_email = $_POST['username_or_email'];\n\n  $query = \"SELECT * FROM users WHERE username = :username_or_email OR email = :username_or_email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':username_or_email', $username_or_email);\n  $stmt->execute();\n\n  if ($row = $stmt->fetch()) {\n    // Generate a password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // Insert the token into the password_resets table\n    $query = \"INSERT INTO password_resets (user_id, token) VALUES (:user_id, :token)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':user_id', $row['id']);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    // Send the password reset email\n    mail(\n      $row['email'],\n      'Password Reset',\n      'Click this link to reset your password: <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>'\n    );\n\n    echo \"Email sent with password reset link.\";\n  } else {\n    echo \"Username or email not found.\";\n  }\n}\n\n?>\n```\n\n**Password Reset Script**\n-------------------------\n\nCreate a PHP script to handle the actual password reset:\n```php\n<!-- reset_password.php -->\n<?php\n\nrequire 'db.php'; // your database connection file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_GET['token'];\n\n  $query = \"SELECT * FROM password_resets WHERE token = :token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n\n  if ($row = $stmt->fetch()) {\n    // Update the user's password\n    $new_password = $_POST['new_password'];\n    $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n    $query = \"UPDATE users SET password_hash = :password_hash WHERE id = :user_id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':password_hash', $hashed_new_password);\n    $stmt->bindParam(':user_id', $row['user_id']);\n    $stmt->execute();\n\n    // Delete the token from the password_resets table\n    $query = \"DELETE FROM password_resets WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':id', $row['id']);\n    $stmt->execute();\n\n    echo \"Password updated successfully.\";\n  } else {\n    echo \"Invalid token.\";\n  }\n}\n\n?>\n```\n\nThis is a basic example and should be adapted to fit your specific needs. Remember to secure the `reset_password.php` script by implementing proper validation, sanitization, and protection against SQL injection attacks.\n\n**Note**: This example uses PHP's built-in `mail()` function to send emails. You may need to configure your server to use a mail transport agent (MTA) or email service provider like SendGrid.", "code_blocks": [null, "```php\n<!-- forgot_password_form.php -->\n<form action=\"forgot_password.php\" method=\"post\">\n  <label>Username/Email:</label>\n  <input type=\"text\" name=\"username_or_email\" required>\n  <button type=\"submit\">Submit</button>\n</form>\n```", "```php\n<!-- forgot_password.php -->\n<?php\n\nrequire 'db.php'; // your database connection file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $username_or_email = $_POST['username_or_email'];\n\n  $query = \"SELECT * FROM users WHERE username = :username_or_email OR email = :username_or_email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':username_or_email', $username_or_email);\n  $stmt->execute();\n\n  if ($row = $stmt->fetch()) {\n    // Generate a password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // Insert the token into the password_resets table\n    $query = \"INSERT INTO password_resets (user_id, token) VALUES (:user_id, :token)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':user_id', $row['id']);\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    // Send the password reset email\n    mail(\n      $row['email'],\n      'Password Reset',\n      'Click this link to reset your password: <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>'\n    );\n\n    echo \"Email sent with password reset link.\";\n  } else {\n    echo \"Username or email not found.\";\n  }\n}\n\n?>\n```", "```php\n<!-- reset_password.php -->\n<?php\n\nrequire 'db.php'; // your database connection file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_GET['token'];\n\n  $query = \"SELECT * FROM password_resets WHERE token = :token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n\n  if ($row = $stmt->fetch()) {\n    // Update the user's password\n    $new_password = $_POST['new_password'];\n    $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n    $query = \"UPDATE users SET password_hash = :password_hash WHERE id = :user_id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':password_hash', $hashed_new_password);\n    $stmt->bindParam(':user_id', $row['user_id']);\n    $stmt->execute();\n\n    // Delete the token from the password_resets table\n    $query = \"DELETE FROM password_resets WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':id', $row['id']);\n    $stmt->execute();\n\n    echo \"Password updated successfully.\";\n  } else {\n    echo \"Invalid token.\";\n  }\n}\n\n?>\n```"]}
