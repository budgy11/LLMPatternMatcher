{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nIn this example, we'll create a simple \"forgot password\" function that sends an email with a temporary link to reset the user's password.\n\n**Database Schema**\n-------------------\n\nAssuming you have a database table named `users` with the following structure:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    email VARCHAR(255),\n    password_hash VARCHAR(255)\n);\n```\n\n**Forgot Password Function**\n-----------------------------\n\nCreate a new PHP file (e.g., `forgot_password.php`) and add the following code:\n```php\n<?php\n\n// Configuration variables\ndefine('EMAIL_FROM', 'no-reply@example.com');\ndefine('PASSWORD_RESET_TOKEN_EXPIRY', 60 * 15); // 15 minutes\n\n// Check if the request is a POST\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = $_POST['email'];\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo json_encode(array('error' => 'Invalid email address'));\n        exit;\n    }\n\n    // Get the user's data from the database\n    $query = \"SELECT id, password_hash FROM users WHERE email = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$email]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        echo json_encode(array('error' => 'Email address not found'));\n        exit;\n    }\n\n    // Generate a temporary password reset token\n    $token = bin2hex(random_bytes(32));\n    $expiry_time = time() + PASSWORD_RESET_TOKEN_EXPIRY;\n\n    // Store the token in the database (e.g., as an additional column)\n    $query = \"UPDATE users SET password_reset_token = ?, expiry_time = ? WHERE id = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token, $expiry_time, $user_data['id']]);\n\n    // Send the email with the temporary link\n    $subject = 'Reset your password';\n    $body = \"\n        <p>Hello {username},</p>\n        <p>Click this link to reset your password: <a href='http://example.com/reset-password?token={$token}'>Reset Password</a></p>\n        <p>This link will expire in 15 minutes.</p>\n    \";\n    $headers = 'From: ' . EMAIL_FROM . \"\\r\\n\" .\n        'MIME-Version: 1.0' . \"\\r\\n\" .\n        'Content-type: text/html; charset=iso-8859-1' . \"\\r\\n\";\n    mail($email, $subject, $body, $headers);\n\n    echo json_encode(array('success' => 'Email sent with password reset link'));\n} else {\n    // Handle GET requests (e.g., display a form)\n}\n```\n\n**Reset Password Function**\n---------------------------\n\nCreate another PHP file (e.g., `reset_password.php`) to handle the password reset request:\n```php\n<?php\n\n// Configuration variables\ndefine('PASSWORD_RESET_TOKEN_EXPIRY', 60 * 15); // 15 minutes\n\n// Check if the request is a POST\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $token = $_POST['token'];\n    $new_password = $_POST['new_password'];\n\n    // Validate the token and check its expiry time\n    $query = \"SELECT id, password_reset_token FROM users WHERE password_reset_token = ? AND expiry_time > ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token, time()]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        echo json_encode(array('error' => 'Invalid token'));\n        exit;\n    }\n\n    // Hash the new password\n    $new_password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n\n    // Update the user's password in the database\n    $query = \"UPDATE users SET password_hash = ?, password_reset_token = NULL WHERE id = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$new_password_hash, $user_data['id']]);\n\n    echo json_encode(array('success' => 'Password updated successfully'));\n} else {\n    // Handle GET requests (e.g., display a form)\n}\n```\n\n**Security Considerations**\n\n* Store the temporary password reset token in an additional column in the database.\n* Set a reasonable expiry time for the token to prevent abuse.\n* Use a secure hashing algorithm (e.g., `password_hash`) to store passwords.\n* Validate user input on both sides of the API (i.e., client-side and server-side).\n* Implement proper email verification using a cryptographically secure random string.\n\nThis example demonstrates a basic implementation of a forgot password function. You should adapt it to your specific use case, ensuring that all security measures are in place.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables\ndefine('EMAIL_FROM', 'no-reply@example.com');\ndefine('PASSWORD_RESET_TOKEN_EXPIRY', 60 * 15); // 15 minutes\n\n// Check if the request is a POST\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $email = $_POST['email'];\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo json_encode(array('error' => 'Invalid email address'));\n        exit;\n    }\n\n    // Get the user's data from the database\n    $query = \"SELECT id, password_hash FROM users WHERE email = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$email]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        echo json_encode(array('error' => 'Email address not found'));\n        exit;\n    }\n\n    // Generate a temporary password reset token\n    $token = bin2hex(random_bytes(32));\n    $expiry_time = time() + PASSWORD_RESET_TOKEN_EXPIRY;\n\n    // Store the token in the database (e.g., as an additional column)\n    $query = \"UPDATE users SET password_reset_token = ?, expiry_time = ? WHERE id = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token, $expiry_time, $user_data['id']]);\n\n    // Send the email with the temporary link\n    $subject = 'Reset your password';\n    $body = \"\n        <p>Hello {username},</p>\n        <p>Click this link to reset your password: <a href='http://example.com/reset-password?token={$token}'>Reset Password</a></p>\n        <p>This link will expire in 15 minutes.</p>\n    \";\n    $headers = 'From: ' . EMAIL_FROM . \"\\r\\n\" .\n        'MIME-Version: 1.0' . \"\\r\\n\" .\n        'Content-type: text/html; charset=iso-8859-1' . \"\\r\\n\";\n    mail($email, $subject, $body, $headers);\n\n    echo json_encode(array('success' => 'Email sent with password reset link'));\n} else {\n    // Handle GET requests (e.g., display a form)\n}\n```", "```php\n<?php\n\n// Configuration variables\ndefine('PASSWORD_RESET_TOKEN_EXPIRY', 60 * 15); // 15 minutes\n\n// Check if the request is a POST\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $token = $_POST['token'];\n    $new_password = $_POST['new_password'];\n\n    // Validate the token and check its expiry time\n    $query = \"SELECT id, password_reset_token FROM users WHERE password_reset_token = ? AND expiry_time > ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token, time()]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        echo json_encode(array('error' => 'Invalid token'));\n        exit;\n    }\n\n    // Hash the new password\n    $new_password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n\n    // Update the user's password in the database\n    $query = \"UPDATE users SET password_hash = ?, password_reset_token = NULL WHERE id = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$new_password_hash, $user_data['id']]);\n\n    echo json_encode(array('success' => 'Password updated successfully'));\n} else {\n    // Handle GET requests (e.g., display a form)\n}\n```"]}
