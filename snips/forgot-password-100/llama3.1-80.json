{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"Forgot Password\" function using PHP. This example assumes that the password reset functionality will be handled by sending a password reset link to the user's email address.\n\n**Please note:** In a production environment, consider implementing additional security measures such as email verification, secure password hashing (e.g., bcrypt), and input validation.\n\n### Database Schema\n\nFor this example, we'll assume you have an `users` table with the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### PHP Code\n\n#### `forgot-password.php`\n```php\n<?php\n// Include the database connection settings\nrequire_once 'db-config.php';\n\n// Set up form handling and error handling\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = trim($_POST['username']);\n    $email = trim($_POST['email']);\n\n    // Validate user input\n    if (empty($username) || empty($email)) {\n        echo \"Error: Both username and email are required.\";\n        exit;\n    }\n\n    // Retrieve the user data from the database\n    try {\n        $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n\n        if ($stmt->execute()) {\n            $user = $stmt->fetch();\n\n            // If a user exists, generate a reset token and send the password reset email\n            if (!empty($user)) {\n                // Generate a random reset token (replace with your own logic)\n                $resetToken = bin2hex(random_bytes(32));\n\n                // Update the user's reset token in the database\n                try {\n                    $query = \"UPDATE users SET reset_token = :resetToken WHERE id = :id\";\n                    $stmt = $db->prepare($query);\n                    $stmt->bindParam(':resetToken', $resetToken);\n                    $stmt->bindParam(':id', $user['id']);\n\n                    if ($stmt->execute()) {\n                        // Send the password reset email\n                        sendPasswordResetEmail($email, $resetToken);\n\n                        echo \"A password reset link has been sent to your email address.\";\n                    } else {\n                        throw new Exception(\"Error: Unable to update user data.\");\n                    }\n                } catch (Exception $e) {\n                    // Handle database errors\n                    echo \"Database Error: \" . $e->getMessage();\n                }\n            } else {\n                echo \"Error: User not found with provided credentials.\";\n            }\n        } else {\n            throw new Exception(\"Error: Database query failed.\");\n        }\n    } catch (Exception $e) {\n        // Handle SQL errors\n        echo \"Database Error: \" . $e->getMessage();\n    }\n}\n\nfunction sendPasswordResetEmail($email, $resetToken)\n{\n    // Email template for the password reset link\n    $subject = 'Reset Your Password';\n    $body = \"<p>Click on the following link to reset your password:</p><p><a href='http://example.com/reset-password.php?token=\" . $resetToken . \"'>\" . $resetToken . \"</a></p>\";\n\n    // Send the email (use a library like PHPMailer for a secure implementation)\n    mail($email, $subject, $body);\n}\n?>\n```\n\n#### `reset-password.php`\n```php\n<?php\n// Include the database connection settings\nrequire_once 'db-config.php';\n\n// Set up form handling and error handling\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Retrieve the reset token from the URL query string\n    $token = $_GET['token'];\n\n    // Validate user input (e.g., password, confirm password)\n    if (empty($_POST['password'])) {\n        echo \"Error: Password is required.\";\n        exit;\n    }\n\n    // Update the user's password and reset token in the database\n    try {\n        $query = \"UPDATE users SET password_hash = :passwordHash, reset_token = '' WHERE reset_token = :resetToken\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':passwordHash', $_POST['password']);\n        $stmt->bindParam(':resetToken', $token);\n\n        if ($stmt->execute()) {\n            echo \"Password updated successfully.\";\n        } else {\n            throw new Exception(\"Error: Unable to update user data.\");\n        }\n    } catch (Exception $e) {\n        // Handle database errors\n        echo \"Database Error: \" . $e->getMessage();\n    }\n}\n?>\n```\n\n### Notes:\n\n* The code above assumes you have a `db-config.php` file containing your database connection settings.\n* Make sure to implement proper input validation and sanitization in the production environment.\n* Consider using PHPMailer or another email library for secure password reset links.\n* Keep in mind that this is a simplified example and should be adapted to fit your specific application requirements.", "code_blocks": [null, "```php\n<?php\n// Include the database connection settings\nrequire_once 'db-config.php';\n\n// Set up form handling and error handling\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $username = trim($_POST['username']);\n    $email = trim($_POST['email']);\n\n    // Validate user input\n    if (empty($username) || empty($email)) {\n        echo \"Error: Both username and email are required.\";\n        exit;\n    }\n\n    // Retrieve the user data from the database\n    try {\n        $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n\n        if ($stmt->execute()) {\n            $user = $stmt->fetch();\n\n            // If a user exists, generate a reset token and send the password reset email\n            if (!empty($user)) {\n                // Generate a random reset token (replace with your own logic)\n                $resetToken = bin2hex(random_bytes(32));\n\n                // Update the user's reset token in the database\n                try {\n                    $query = \"UPDATE users SET reset_token = :resetToken WHERE id = :id\";\n                    $stmt = $db->prepare($query);\n                    $stmt->bindParam(':resetToken', $resetToken);\n                    $stmt->bindParam(':id', $user['id']);\n\n                    if ($stmt->execute()) {\n                        // Send the password reset email\n                        sendPasswordResetEmail($email, $resetToken);\n\n                        echo \"A password reset link has been sent to your email address.\";\n                    } else {\n                        throw new Exception(\"Error: Unable to update user data.\");\n                    }\n                } catch (Exception $e) {\n                    // Handle database errors\n                    echo \"Database Error: \" . $e->getMessage();\n                }\n            } else {\n                echo \"Error: User not found with provided credentials.\";\n            }\n        } else {\n            throw new Exception(\"Error: Database query failed.\");\n        }\n    } catch (Exception $e) {\n        // Handle SQL errors\n        echo \"Database Error: \" . $e->getMessage();\n    }\n}\n\nfunction sendPasswordResetEmail($email, $resetToken)\n{\n    // Email template for the password reset link\n    $subject = 'Reset Your Password';\n    $body = \"<p>Click on the following link to reset your password:</p><p><a href='http://example.com/reset-password.php?token=\" . $resetToken . \"'>\" . $resetToken . \"</a></p>\";\n\n    // Send the email (use a library like PHPMailer for a secure implementation)\n    mail($email, $subject, $body);\n}\n?>\n```", "```php\n<?php\n// Include the database connection settings\nrequire_once 'db-config.php';\n\n// Set up form handling and error handling\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Retrieve the reset token from the URL query string\n    $token = $_GET['token'];\n\n    // Validate user input (e.g., password, confirm password)\n    if (empty($_POST['password'])) {\n        echo \"Error: Password is required.\";\n        exit;\n    }\n\n    // Update the user's password and reset token in the database\n    try {\n        $query = \"UPDATE users SET password_hash = :passwordHash, reset_token = '' WHERE reset_token = :resetToken\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':passwordHash', $_POST['password']);\n        $stmt->bindParam(':resetToken', $token);\n\n        if ($stmt->execute()) {\n            echo \"Password updated successfully.\";\n        } else {\n            throw new Exception(\"Error: Unable to update user data.\");\n        }\n    } catch (Exception $e) {\n        // Handle database errors\n        echo \"Database Error: \" . $e->getMessage();\n    }\n}\n?>\n```"]}
