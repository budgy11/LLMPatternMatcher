{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle password reset requests\nfunction forgot_password($email) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email format.\";\n  }\n\n  // 2. Check if the email exists in the users table\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    return \"Connection failed: \" . $conn->connect_error;\n  }\n\n  $sql = \"SELECT id, password FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user = $result->fetch_assoc();\n    $id = $user['id'];\n    $hashed_password = $user['password']; // Or generate a random token for reset link\n\n    // 3. Generate a unique reset token (for security)\n    $reset_token = bin2hex(random_bytes(32)); \n\n    // 4. Store the reset token with the user's ID\n    $reset_sql = \"INSERT INTO password_resets (user_id, token, created_at) \n                  VALUES ($id, '$reset_token', NOW())\";\n    if (!$conn->query($reset_sql)) {\n      return \"Error storing reset token.  Database error: \" . $conn->error;\n    }\n\n    // 5.  Send an email with the reset link\n    $to = $email;\n    $subject = \"Password Reset Link\";\n    $message = \"Click this link to reset your password: \" . \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=\" . urlencode($reset_token) . \"'>Reset Password</a>\";\n    $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n    mail($to, $message, $headers); \n\n    return \"Password reset link sent to your email.  Check your inbox.\";\n\n  } else {\n    return \"User not found with this email.\";\n  }\n  $conn->close();\n}\n\n// --- Example Usage (for testing) ---\n// $email_to_reset = \"testuser@example.com\"; // Replace with a valid email address for testing\n// $reset_result = forgot_password($email_to_reset);\n// echo $reset_result;\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Security:**  This version significantly improves security:\n    * **`bin2hex(random_bytes(32))`:**  Uses `random_bytes()` to generate cryptographically secure random bytes, then converts them to a hexadecimal string.  This is MUCH stronger than `rand()` or `mt_rand()` for generating tokens.  Using hex ensures a stable and predictable token format.\n    * **Storing Tokens in a Database:** Critically important.  The random token is now stored in a dedicated `password_resets` table in the database.  This is essential for security.  Without this, a compromised token would be useless.\n    * **`urlencode()`:** Uses `urlencode()` to properly encode the URL parameters when generating the reset link.  This prevents issues with special characters in the URL.\n* **Database Interaction:**\n    * Uses `mysqli` (or `PDO`) for robust database connection and query execution.\n    * Includes error handling for the database connection and queries.\n    *  `NOW()` function to automatically get the current timestamp.\n* **Clearer Logic and Structure:**\n    * The code is well-structured with comments explaining each step.\n    * Uses descriptive variable names.\n* **Error Handling:**  Includes basic error handling for database connection, query execution, and invalid email format.  This makes debugging easier.\n* **Email Sending:** Demonstrates how to send the password reset link via email.  You'll need to configure your server to send email.\n* **Reset Link Generation:** The reset link is generated dynamically using the token stored in the database.\n* **`$_SERVER['PHP_SELF']`:**  Dynamically builds the reset link using `$_SERVER['PHP_SELF']`, which is the current script's URL. This ensures that the link always points to the correct page for resetting the password.\n* **Password Reset Link Security:**\n    * **Important:**  In a production environment, you **MUST NOT** directly pass the `reset_token` as a GET parameter.  This is a significant security vulnerability.  This example is for demonstration and learning purposes.  In production, use a POST request to submit the token for verification.  Also, the token should be stored securely in the database, not in a cookie.\n\n**Important Considerations for Production:**\n\n1. **POST Request:**  Change the function to handle a POST request instead of GET. This is crucial for security.\n\n2. **Token Verification:**  When the user clicks the reset link, the server will *verify* the token in the database before allowing the password reset.\n\n3. **Token Expiration:**  Implement token expiration.  Tokens should have a limited lifespan (e.g., 30 minutes) to prevent attackers from using old tokens.  Add a `expires_at` column to the `password_resets` table and set the expiry time appropriately.  You would then need to check this in the verification process.\n\n4. **Security Libraries:**  Use established security libraries like Symfony's Security component, or Laravel's built-in security features, for best practices.\n\n5. **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n\n6. **HTTPS:** Always use HTTPS to encrypt communication between the user's browser and your server.\n\n7. **Input Validation:**  Thoroughly validate and sanitize all user input.\n\n8. **Password Complexity:**  Enforce strong password policies.\n\n9. **Error Logging:**  Log all errors and suspicious activity for debugging and security monitoring.\n\n10. **Test Thoroughly:**  Test the entire password reset process extensively before deploying to a production environment.\n\nThis revised code provides a more secure and robust foundation for a password reset function.  However, remember that security is an ongoing process, and you must adapt your implementation based on your specific environment and security requirements.  Always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle password reset requests\nfunction forgot_password($email) {\n  // 1. Validate Email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return \"Invalid email format.\";\n  }\n\n  // 2. Check if the email exists in the users table\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    return \"Connection failed: \" . $conn->connect_error;\n  }\n\n  $sql = \"SELECT id, password FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user = $result->fetch_assoc();\n    $id = $user['id'];\n    $hashed_password = $user['password']; // Or generate a random token for reset link\n\n    // 3. Generate a unique reset token (for security)\n    $reset_token = bin2hex(random_bytes(32)); \n\n    // 4. Store the reset token with the user's ID\n    $reset_sql = \"INSERT INTO password_resets (user_id, token, created_at) \n                  VALUES ($id, '$reset_token', NOW())\";\n    if (!$conn->query($reset_sql)) {\n      return \"Error storing reset token.  Database error: \" . $conn->error;\n    }\n\n    // 5.  Send an email with the reset link\n    $to = $email;\n    $subject = \"Password Reset Link\";\n    $message = \"Click this link to reset your password: \" . \"<a href='\" . $_SERVER['PHP_SELF'] . \"?reset=\" . urlencode($reset_token) . \"'>Reset Password</a>\";\n    $headers = \"From: your_email@example.com\" . \"\\r\\n\";\n    mail($to, $message, $headers); \n\n    return \"Password reset link sent to your email.  Check your inbox.\";\n\n  } else {\n    return \"User not found with this email.\";\n  }\n  $conn->close();\n}\n\n// --- Example Usage (for testing) ---\n// $email_to_reset = \"testuser@example.com\"; // Replace with a valid email address for testing\n// $reset_result = forgot_password($email_to_reset);\n// echo $reset_result;\n\n?>\n```"]}
