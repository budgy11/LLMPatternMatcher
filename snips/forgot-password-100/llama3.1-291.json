{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nThis is a basic implementation of a forgot password function using PHP. It includes email verification, sending a reset link to the user's registered email address.\n\n**Database Schema:**\n\nFor this example, we'll assume you have a database table named `users` with the following columns:\n\n*   `id`: primary key\n*   `username`\n*   `email`\n*   `password`\n\n**PHP Code:**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to send email using PHPMailer\nfunction send_email($to, $subject, $body) {\n    require_once 'PHPMailer/PHPMailer.php';\n    $mail = new PHPMailer\\PHPMailer();\n    $mail->isSMTP();\n    $mail->Host = 'smtp.example.com'; // your SMTP host\n    $mail->Port = 587; // or other port\n    $mail->Username = 'your_email@gmail.com'; // your email\n    $mail->Password = 'your_password';\n    $mail->setFrom('your_email@gmail.com', 'Your Name');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n    if (!$mail->send()) {\n        echo 'Error sending email: ' . $mail->ErrorInfo;\n    }\n}\n\n// Function to check if the user exists\nfunction check_user_exists($username) {\n    $sql = \"SELECT * FROM users WHERE username='\" . mysqli_real_escape_string($conn, $username) . \"'\";\n    $result = $conn->query($sql);\n    return $result->num_rows > 0;\n}\n\n// Function to reset password\nfunction reset_password($token, $new_password) {\n    $sql = \"UPDATE users SET password='\" . mysqli_real_escape_string($conn, $new_password) . \"' WHERE token='\" . mysqli_real_escape_string($conn, $token) . \"'\";\n    if ($conn->query($sql) === TRUE) {\n        return true;\n    } else {\n        echo 'Error updating user data: ' . $conn->error;\n        return false;\n    }\n}\n\n// Forgot password function\nfunction forgot_password() {\n    // Check if the form was submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get user input\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n\n        // Check if the username exists\n        if (check_user_exists($username)) {\n            // Generate token and insert into database\n            $token = bin2hex(random_bytes(32));\n            $sql = \"UPDATE users SET token='\" . mysqli_real_escape_string($conn, $token) . \"' WHERE username='\" . mysqli_real_escape_string($conn, $username) . \"'\";\n            if ($conn->query($sql) === TRUE) {\n                // Send email with reset link\n                send_email($email, 'Reset Password', '\n                    <p>Click the following link to reset your password:</p>\n                    <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>');\n            } else {\n                echo 'Error updating user data: ' . $conn->error;\n            }\n        } else {\n            echo 'User not found';\n        }\n    }\n\n    // If the form was not submitted, show the form\n    if (isset($_GET['email'])) {\n        echo '\n            <form action=\"\" method=\"post\">\n                <input type=\"hidden\" name=\"username\" value=\"' . $_GET['email'] . '\">\n                <button type=\"submit\">Reset Password</button>\n            </form>';\n    } else {\n        echo '\n            <form action=\"\" method=\"post\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n                <button type=\"submit\">Reset Password</button>\n            </form>';\n    }\n}\n\n// Call the forgot password function\nforgot_password();\n\n?>\n```\n\n**Explanation:**\n\n1.  The code first defines a configuration section where you need to replace placeholders with your actual database credentials and email information.\n2.  It then establishes a connection to your MySQL database using the provided credentials.\n3.  A function named `send_email()` is defined, which uses PHPMailer to send an email with a password reset link to the user's registered email address.\n4.  The `check_user_exists()` function checks if the given username exists in the database by querying the `users` table.\n5.  The `reset_password()` function updates the user's password in the database using the provided token and new password.\n6.  Finally, the `forgot_password()` function handles the forgot password form submission, checks for the existence of a matching username in the database, generates a token if it does exist, sends an email with a reset link to the registered email address, or displays an error message if any errors occur.\n\n**Note:**\n\nThis code is meant to be used as a starting point and should not be deployed without proper security measures. Always validate user input and ensure that your application uses secure password hashing practices.\n\n**Example Use Case:**\n\n1.  A user visits the forgot password page on your website.\n2.  They fill in their username and email address into the provided form and submit it.\n3.  If the submitted username exists in your database, a token is generated for that user's account.\n4.  The `send_email()` function sends an email to the registered email address with a password reset link containing the generated token.\n5.  When the user clicks on this link, they are taken to a new page where they can enter their new password.\n\n**Best Practices:**\n\n*   **Validate User Input**: Always validate and sanitize any input received from users, especially in functions that interact directly with your database.\n*   **Use Secure Password Hashing**: Never store passwords as plain text. Use a secure hashing algorithm to protect user passwords in your database.\n*   **Keep Dependencies Up-to-Date**: Ensure you're using the latest versions of PHPMailer and any other dependencies to prevent security vulnerabilities.\n\nRemember that this is just an example implementation, and it's essential to follow best practices for security and software development.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to send email using PHPMailer\nfunction send_email($to, $subject, $body) {\n    require_once 'PHPMailer/PHPMailer.php';\n    $mail = new PHPMailer\\PHPMailer();\n    $mail->isSMTP();\n    $mail->Host = 'smtp.example.com'; // your SMTP host\n    $mail->Port = 587; // or other port\n    $mail->Username = 'your_email@gmail.com'; // your email\n    $mail->Password = 'your_password';\n    $mail->setFrom('your_email@gmail.com', 'Your Name');\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = $body;\n    if (!$mail->send()) {\n        echo 'Error sending email: ' . $mail->ErrorInfo;\n    }\n}\n\n// Function to check if the user exists\nfunction check_user_exists($username) {\n    $sql = \"SELECT * FROM users WHERE username='\" . mysqli_real_escape_string($conn, $username) . \"'\";\n    $result = $conn->query($sql);\n    return $result->num_rows > 0;\n}\n\n// Function to reset password\nfunction reset_password($token, $new_password) {\n    $sql = \"UPDATE users SET password='\" . mysqli_real_escape_string($conn, $new_password) . \"' WHERE token='\" . mysqli_real_escape_string($conn, $token) . \"'\";\n    if ($conn->query($sql) === TRUE) {\n        return true;\n    } else {\n        echo 'Error updating user data: ' . $conn->error;\n        return false;\n    }\n}\n\n// Forgot password function\nfunction forgot_password() {\n    // Check if the form was submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get user input\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n\n        // Check if the username exists\n        if (check_user_exists($username)) {\n            // Generate token and insert into database\n            $token = bin2hex(random_bytes(32));\n            $sql = \"UPDATE users SET token='\" . mysqli_real_escape_string($conn, $token) . \"' WHERE username='\" . mysqli_real_escape_string($conn, $username) . \"'\";\n            if ($conn->query($sql) === TRUE) {\n                // Send email with reset link\n                send_email($email, 'Reset Password', '\n                    <p>Click the following link to reset your password:</p>\n                    <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>');\n            } else {\n                echo 'Error updating user data: ' . $conn->error;\n            }\n        } else {\n            echo 'User not found';\n        }\n    }\n\n    // If the form was not submitted, show the form\n    if (isset($_GET['email'])) {\n        echo '\n            <form action=\"\" method=\"post\">\n                <input type=\"hidden\" name=\"username\" value=\"' . $_GET['email'] . '\">\n                <button type=\"submit\">Reset Password</button>\n            </form>';\n    } else {\n        echo '\n            <form action=\"\" method=\"post\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n                <button type=\"submit\">Reset Password</button>\n            </form>';\n    }\n}\n\n// Call the forgot password function\nforgot_password();\n\n?>\n```"]}
