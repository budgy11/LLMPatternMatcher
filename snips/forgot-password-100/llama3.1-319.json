{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a forgotten password feature in PHP, which includes sending a reset link to the user's email address. This example uses a simple implementation and you should consider implementing additional security measures such as hashing passwords, validating emails, and storing salts.\n\n**Step 1: Create Database Table**\n\nFirst, create a database table named `users` with the following columns:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    reset_token VARCHAR(100),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**Step 2: PHP Code for Forgot Password**\n\nCreate a new PHP file named `forgot_password.php` with the following code:\n\n```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_POST['submit'])) {\n    // Get user input from form submission\n    $email = $_POST['email'];\n\n    try {\n        // Check if email exists in database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            // Email exists, generate reset token and send email with link to reset password\n            $user = $stmt->fetch();\n            $resetToken = bin2hex(random_bytes(50));\n            $pdo->exec(\"UPDATE users SET reset_token = '$resetToken' WHERE id = \" . $user['id']);\n\n            // Send email with reset link\n            $to      = $email;\n            $subject = 'Reset Password Link';\n            $message = '\n                <html>\n                    <body>\n                        <p>Hello, please click on the link below to reset your password:</p>\n                        <a href=\"reset_password.php?token=' . $resetToken . '\">Reset Password</a>\n                    </body>\n                </html>\n            ';\n            $headers  = 'MIME-Version: 1.0' . \"\\r\\n\";\n            $headers .= 'Content-type:text/html; charset=iso-8859-1' . \"\\r\\n\";\n            mail($to, $subject, $message, $headers);\n\n            // Display success message\n            echo '<p>Reset link has been sent to your email.</p>';\n        } else {\n            // Email does not exist in database\n            echo '<p>Email address is not registered.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```\n\n**Step 3: Create Form for Forgot Password**\n\nCreate a new HTML file named `forgot_password.html` with the following code:\n\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" id=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>\n```\n\nThis example demonstrates a simple forgotten password feature using PHP. However, consider implementing additional security measures such as hashing passwords and validating emails to ensure the security of your application.\n\n**Reset Password Functionality**\n\nCreate another PHP file named `reset_password.php` with the following code:\n\n```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_GET['token'])) {\n    // Get user input from form submission\n    $resetToken = $_GET['token'];\n\n    try {\n        // Check if reset token exists in database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE reset_token = :reset_token');\n        $stmt->bindParam(':reset_token', $resetToken);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            // Reset token exists, display form to enter new password\n            echo '<form action=\"update_password.php\" method=\"post\">\n                <label for=\"new_password\">New Password:</label>\n                <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n                <label for=\"confirm_new_password\">Confirm New Password:</label>\n                <input type=\"password\" id=\"confirm_new_password\" name=\"confirm_new_password\"><br><br>\n                <input type=\"hidden\" name=\"reset_token\" value=\"' . $resetToken . '\">\n                <input type=\"submit\" name=\"submit\" value=\"Update Password\">\n            </form>';\n        } else {\n            // Reset token does not exist in database\n            echo '<p>Invalid reset token.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```\n\n**Step 4: Update Password Functionality**\n\nCreate another PHP file named `update_password.php` with the following code:\n\n```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_POST['submit'])) {\n    // Get user input from form submission\n    $newPassword = $_POST['new_password'];\n    $confirmNewPassword = $_POST['confirm_new_password'];\n    $resetToken = $_POST['reset_token'];\n\n    try {\n        // Check if new password and confirm new password match\n        if ($newPassword == $confirmNewPassword) {\n            // Update user's password in database\n            $stmt = $pdo->prepare('UPDATE users SET password = :password WHERE reset_token = :reset_token');\n            $stmt->bindParam(':password', $newPassword);\n            $stmt->bindParam(':reset_token', $resetToken);\n            $stmt->execute();\n\n            // Display success message\n            echo '<p>Password updated successfully.</p>';\n        } else {\n            // New password and confirm new password do not match\n            echo '<p>New passwords do not match.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```\n\nThis example demonstrates a forgotten password feature using PHP, which includes sending a reset link to the user's email address and updating their password after resetting it.", "code_blocks": [null, "```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_POST['submit'])) {\n    // Get user input from form submission\n    $email = $_POST['email'];\n\n    try {\n        // Check if email exists in database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            // Email exists, generate reset token and send email with link to reset password\n            $user = $stmt->fetch();\n            $resetToken = bin2hex(random_bytes(50));\n            $pdo->exec(\"UPDATE users SET reset_token = '$resetToken' WHERE id = \" . $user['id']);\n\n            // Send email with reset link\n            $to      = $email;\n            $subject = 'Reset Password Link';\n            $message = '\n                <html>\n                    <body>\n                        <p>Hello, please click on the link below to reset your password:</p>\n                        <a href=\"reset_password.php?token=' . $resetToken . '\">Reset Password</a>\n                    </body>\n                </html>\n            ';\n            $headers  = 'MIME-Version: 1.0' . \"\\r\\n\";\n            $headers .= 'Content-type:text/html; charset=iso-8859-1' . \"\\r\\n\";\n            mail($to, $subject, $message, $headers);\n\n            // Display success message\n            echo '<p>Reset link has been sent to your email.</p>';\n        } else {\n            // Email does not exist in database\n            echo '<p>Email address is not registered.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```", null, "```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_GET['token'])) {\n    // Get user input from form submission\n    $resetToken = $_GET['token'];\n\n    try {\n        // Check if reset token exists in database\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE reset_token = :reset_token');\n        $stmt->bindParam(':reset_token', $resetToken);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            // Reset token exists, display form to enter new password\n            echo '<form action=\"update_password.php\" method=\"post\">\n                <label for=\"new_password\">New Password:</label>\n                <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n                <label for=\"confirm_new_password\">Confirm New Password:</label>\n                <input type=\"password\" id=\"confirm_new_password\" name=\"confirm_new_password\"><br><br>\n                <input type=\"hidden\" name=\"reset_token\" value=\"' . $resetToken . '\">\n                <input type=\"submit\" name=\"submit\" value=\"Update Password\">\n            </form>';\n        } else {\n            // Reset token does not exist in database\n            echo '<p>Invalid reset token.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```", "```php\n<?php\n\n// Include config file\nrequire_once 'config.php';\n\nif (isset($_POST['submit'])) {\n    // Get user input from form submission\n    $newPassword = $_POST['new_password'];\n    $confirmNewPassword = $_POST['confirm_new_password'];\n    $resetToken = $_POST['reset_token'];\n\n    try {\n        // Check if new password and confirm new password match\n        if ($newPassword == $confirmNewPassword) {\n            // Update user's password in database\n            $stmt = $pdo->prepare('UPDATE users SET password = :password WHERE reset_token = :reset_token');\n            $stmt->bindParam(':password', $newPassword);\n            $stmt->bindParam(':reset_token', $resetToken);\n            $stmt->execute();\n\n            // Display success message\n            echo '<p>Password updated successfully.</p>';\n        } else {\n            // New password and confirm new password do not match\n            echo '<p>New passwords do not match.</p>';\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n    }\n}\n\n?>\n```"]}
