{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"forgot password\" function in PHP. This will allow users to reset their passwords by receiving an email with a link to reset their password.\n\n**Assumptions:**\n\n* You have a database set up with a table for users, which includes fields such as `id`, `email`, and `password`.\n* The user's email is used as the primary key.\n* You are using PHP 7.x or higher.\n\n**Step 1: Database Setup**\n\nCreate a table in your database to store user information. For simplicity, let's assume you have the following table structure:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    reset_token VARCHAR(255)\n);\n```\n\n**Step 2: PHP Code**\n\nCreate a new file (e.g., `forgot_password.php`) and add the following code:\n\n```php\n<?php\n\n// Configuration variables\nrequire_once 'config.php';\n\n// Check if request method is POST\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    exit;\n}\n\n// Get user input data\n$email = $_POST['email'];\n\n// Validate email\nif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n}\n\n// Attempt to find user with matching email\ntry {\n    $stmt = $pdo->prepare('SELECT id, password FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to connect to database';\n    exit;\n}\n\n// Check if user exists\nif (!$row = $stmt->fetch()) {\n    echo 'Email address not found';\n    exit;\n}\n\n// Generate random token for password reset\n$token = bin2hex(random_bytes(32));\n\n// Update token in user's record\ntry {\n    $stmt = $pdo->prepare('UPDATE users SET reset_token = :token WHERE id = :id');\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':id', $row['id']);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to update database';\n    exit;\n}\n\n// Send password reset email\ntry {\n    mail($email, 'Password Reset Request', sprintf(\n        'Click this link to reset your password: <a href=\"%s\">Reset Password</a>',\n        url('reset_password.php?token=' . $token)\n    ));\n} catch (Exception $e) {\n    echo 'Error: Unable to send email';\n    exit;\n}\n\n// Display success message\necho 'A password reset email has been sent to your email address. Please check your inbox and follow the instructions.';\nexit;\n\n?>\n```\n\n**Step 3: Reset Password PHP Code**\n\nCreate a new file (e.g., `reset_password.php`) and add the following code:\n\n```php\n<?php\n\n// Configuration variables\nrequire_once 'config.php';\n\n// Check if request method is GET\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    exit;\n}\n\n// Get token from URL parameter\n$token = $_GET['token'];\n\n// Validate token\nif (!$token) {\n    echo 'Invalid token';\n    exit;\n}\n\n// Attempt to find user with matching token\ntry {\n    $stmt = $pdo->prepare('SELECT id, email FROM users WHERE reset_token = :token');\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to connect to database';\n    exit;\n}\n\n// Check if user exists\nif (!$row = $stmt->fetch()) {\n    echo 'Invalid token';\n    exit;\n}\n\n// Display reset password form\n?>\n<form action=\"reset_password.php?token=<?php echo $token; ?>\" method=\"POST\">\n    <label for=\"password\">New Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <label for=\"confirm_password\">Confirm New Password:</label>\n    <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n    <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input data\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate new password and confirm password\n    if ($password !== $confirm_password) {\n        echo 'Passwords do not match';\n        exit;\n    }\n\n    try {\n        // Update password in user's record\n        $stmt = $pdo->prepare('UPDATE users SET password = :password, reset_token = NULL WHERE id = :id');\n        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n        $stmt->bindParam(':id', $row['id']);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error: Unable to update database';\n        exit;\n    }\n\n    // Display success message\n    echo 'Password has been reset successfully!';\n}\n\n?>\n```\n\nThis example uses a simple password hashing algorithm using `password_hash()`. Make sure you're using the correct PHP version that supports this function.\n\nNote that this is a basic example and should be adapted to your specific use case. Additionally, you may want to add additional security measures such as rate limiting on password reset requests or implementing a more secure password hashing algorithm like Argon2.\n\nAlso, ensure that you have a valid email address set up for the application's contact information in order for the `mail()` function to work correctly.\n\nLastly, don't forget to replace `'config.php'` with your actual configuration file name.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables\nrequire_once 'config.php';\n\n// Check if request method is POST\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n    exit;\n}\n\n// Get user input data\n$email = $_POST['email'];\n\n// Validate email\nif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n}\n\n// Attempt to find user with matching email\ntry {\n    $stmt = $pdo->prepare('SELECT id, password FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to connect to database';\n    exit;\n}\n\n// Check if user exists\nif (!$row = $stmt->fetch()) {\n    echo 'Email address not found';\n    exit;\n}\n\n// Generate random token for password reset\n$token = bin2hex(random_bytes(32));\n\n// Update token in user's record\ntry {\n    $stmt = $pdo->prepare('UPDATE users SET reset_token = :token WHERE id = :id');\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':id', $row['id']);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to update database';\n    exit;\n}\n\n// Send password reset email\ntry {\n    mail($email, 'Password Reset Request', sprintf(\n        'Click this link to reset your password: <a href=\"%s\">Reset Password</a>',\n        url('reset_password.php?token=' . $token)\n    ));\n} catch (Exception $e) {\n    echo 'Error: Unable to send email';\n    exit;\n}\n\n// Display success message\necho 'A password reset email has been sent to your email address. Please check your inbox and follow the instructions.';\nexit;\n\n?>\n```", "```php\n<?php\n\n// Configuration variables\nrequire_once 'config.php';\n\n// Check if request method is GET\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n    exit;\n}\n\n// Get token from URL parameter\n$token = $_GET['token'];\n\n// Validate token\nif (!$token) {\n    echo 'Invalid token';\n    exit;\n}\n\n// Attempt to find user with matching token\ntry {\n    $stmt = $pdo->prepare('SELECT id, email FROM users WHERE reset_token = :token');\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n} catch (PDOException $e) {\n    echo 'Error: Unable to connect to database';\n    exit;\n}\n\n// Check if user exists\nif (!$row = $stmt->fetch()) {\n    echo 'Invalid token';\n    exit;\n}\n\n// Display reset password form\n?>\n<form action=\"reset_password.php?token=<?php echo $token; ?>\" method=\"POST\">\n    <label for=\"password\">New Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <label for=\"confirm_password\">Confirm New Password:</label>\n    <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n    <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input data\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate new password and confirm password\n    if ($password !== $confirm_password) {\n        echo 'Passwords do not match';\n        exit;\n    }\n\n    try {\n        // Update password in user's record\n        $stmt = $pdo->prepare('UPDATE users SET password = :password, reset_token = NULL WHERE id = :id');\n        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n        $stmt->bindParam(':id', $row['id']);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error: Unable to update database';\n        exit;\n    }\n\n    // Display success message\n    echo 'Password has been reset successfully!';\n}\n\n?>\n```"]}
