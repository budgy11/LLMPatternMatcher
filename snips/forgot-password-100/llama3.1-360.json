{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"forgot password\" function in PHP:\n\n**Database Setup**\n\nFirst, let's assume we have the following database table structure for users:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n\n**Forgot Password Function (PHP)**\n\n```php\n// config.php (connects to database)\n<?php\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n?>\n\n// forgot_password.php\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Check if form was submitted\n    $email = trim($_POST['email']);\n\n    // Validate email\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address\";\n        exit;\n    }\n\n    // Find user by email\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // User found, generate new password and send reset link via email\n        $user_data = $stmt->fetch();\n        $new_password = substr(str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 0, 12);\n        $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?email=' . urlencode($email) . '&token=' . hash_hmac('sha256', $user_data['id'], 'mysecretkey');\n\n        // Send email\n        $subject = \"Reset Password\";\n        $message = \"Click the following link to reset your password: \" . $reset_link;\n        $headers = \"From: no-reply@example.com\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\";\n\n        mail($email, $subject, $message, $headers);\n\n        echo \"An email with a reset link has been sent to your inbox.\";\n    } else {\n        echo \"No user found with the given email address\";\n    }\n} else {\n    // Display form\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"Send Reset Link\">\n</form>\n\n<?php\n}\n?>\n```\n\n**Reset Password Function (PHP)**\n\n```php\n// reset_password.php\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n\n    // Validate token and email\n    if (!empty($email) && !empty($token)) {\n        // Find user by email\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            $user_data = $stmt->fetch();\n            $stored_token = hash_hmac('sha256', $user_data['id'], 'mysecretkey');\n\n            // Check if token is valid\n            if ($token === $stored_token) {\n                // User found, allow password change\n                ?>\n                <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n                    <label>New Password:</label>\n                    <input type=\"password\" name=\"new_password\"><br><br>\n                    <label>Confirm New Password:</label>\n                    <input type=\"password\" name=\"confirm_new_password\"><br><br>\n                    <input type=\"submit\" value=\"Change Password\">\n                </form>\n\n                <?php\n            } else {\n                echo \"Invalid token\";\n            }\n        } else {\n            echo \"No user found with the given email address\";\n        }\n    } else {\n        echo \"Invalid request\";\n    }\n} else if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Change password\n    $new_password = trim($_POST['new_password']);\n    $confirm_new_password = trim($_POST['confirm_new_password']);\n\n    if (!empty($new_password) && !empty($confirm_new_password)) {\n        if ($new_password === $confirm_new_password) {\n            // Update user password\n            $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password WHERE email = :email\");\n            $stmt->bindParam(':password', password_hash($new_password, PASSWORD_DEFAULT));\n            $stmt->bindParam(':email', $_GET['email']);\n            $stmt->execute();\n\n            echo \"Password changed successfully\";\n        } else {\n            echo \"Passwords do not match\";\n        }\n    } else {\n        echo \"Please fill out all fields\";\n    }\n}\n?>\n```\n\nThis implementation includes:\n\n1. A `forgot_password.php` page that sends a reset link to the user's email.\n2. A `reset_password.php` page that allows users to change their password after receiving a reset link.\n\nNote: This is just an example and should be adapted to your specific requirements. It is also recommended to use a more secure way of generating tokens, such as using a cryptographically secure pseudo-random number generator.", "code_blocks": [null, "```php\n// config.php (connects to database)\n<?php\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n?>\n\n// forgot_password.php\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Check if form was submitted\n    $email = trim($_POST['email']);\n\n    // Validate email\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address\";\n        exit;\n    }\n\n    // Find user by email\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // User found, generate new password and send reset link via email\n        $user_data = $stmt->fetch();\n        $new_password = substr(str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 0, 12);\n        $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?email=' . urlencode($email) . '&token=' . hash_hmac('sha256', $user_data['id'], 'mysecretkey');\n\n        // Send email\n        $subject = \"Reset Password\";\n        $message = \"Click the following link to reset your password: \" . $reset_link;\n        $headers = \"From: no-reply@example.com\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\";\n\n        mail($email, $subject, $message, $headers);\n\n        echo \"An email with a reset link has been sent to your inbox.\";\n    } else {\n        echo \"No user found with the given email address\";\n    }\n} else {\n    // Display form\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"Send Reset Link\">\n</form>\n\n<?php\n}\n?>\n```", "```php\n// reset_password.php\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n\n    // Validate token and email\n    if (!empty($email) && !empty($token)) {\n        // Find user by email\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            $user_data = $stmt->fetch();\n            $stored_token = hash_hmac('sha256', $user_data['id'], 'mysecretkey');\n\n            // Check if token is valid\n            if ($token === $stored_token) {\n                // User found, allow password change\n                ?>\n                <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n                    <label>New Password:</label>\n                    <input type=\"password\" name=\"new_password\"><br><br>\n                    <label>Confirm New Password:</label>\n                    <input type=\"password\" name=\"confirm_new_password\"><br><br>\n                    <input type=\"submit\" value=\"Change Password\">\n                </form>\n\n                <?php\n            } else {\n                echo \"Invalid token\";\n            }\n        } else {\n            echo \"No user found with the given email address\";\n        }\n    } else {\n        echo \"Invalid request\";\n    }\n} else if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Change password\n    $new_password = trim($_POST['new_password']);\n    $confirm_new_password = trim($_POST['confirm_new_password']);\n\n    if (!empty($new_password) && !empty($confirm_new_password)) {\n        if ($new_password === $confirm_new_password) {\n            // Update user password\n            $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password WHERE email = :email\");\n            $stmt->bindParam(':password', password_hash($new_password, PASSWORD_DEFAULT));\n            $stmt->bindParam(':email', $_GET['email']);\n            $stmt->execute();\n\n            echo \"Password changed successfully\";\n        } else {\n            echo \"Passwords do not match\";\n        }\n    } else {\n        echo \"Please fill out all fields\";\n    }\n}\n?>\n```"]}
