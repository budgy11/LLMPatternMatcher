{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP. This code assumes you have already set up a database to store usernames and passwords.\n\n**Note:** It's not recommended to store passwords in plain text, but rather use a password hashing algorithm like `password_hash()` to securely store the hashed version of the password.\n\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Establish database connection\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to login user\nfunction login($username, $password) {\n    global $conn;\n\n    // Hash password (if you're using a recent version of PHP)\n    if (version_compare(PHP_VERSION, '7.2.0', '<')) {\n        $hashed_password = md5($password);\n    } else {\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n    }\n\n    try {\n        // SQL query to select user from database\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        // Fetch user data (if a match is found)\n        if ($row = $stmt->fetch()) {\n            return array('success' => true, 'user_id' => $row['id'], 'username' => $row['username']);\n        } else {\n            return array('success' => false);\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return array('success' => false);\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$user_data = login($username, $password);\n\nif ($user_data['success']) {\n    // Successful login\n    echo \"Login successful! User ID: {$user_data['user_id']}\";\n} else {\n    // Failed login (show error message or redirect to login page)\n    echo \"Invalid username or password\";\n}\n\n?>\n```\n\nThis code performs the following actions:\n\n1. Establishes a database connection using PDO.\n2. Defines a `login()` function that takes in a username and password as parameters.\n3. Hashes the inputted password (using `password_hash()` for PHP 7.2+).\n4. Executes an SQL query to select the user with matching username and hashed password from the database.\n5. If a match is found, returns an array containing success flag (`true`), user ID, and username. Otherwise, returns failure.\n\nNote that this is a basic example and you should implement proper error handling and security measures (e.g., protecting against SQL injection). Additionally, consider using prepared statements with parameterized queries for better security.\n\n**Please remember to replace placeholders like `your_database_name`, `your_username`, and `your_password` with actual values specific to your database setup.**", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Establish database connection\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to login user\nfunction login($username, $password) {\n    global $conn;\n\n    // Hash password (if you're using a recent version of PHP)\n    if (version_compare(PHP_VERSION, '7.2.0', '<')) {\n        $hashed_password = md5($password);\n    } else {\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n    }\n\n    try {\n        // SQL query to select user from database\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        // Fetch user data (if a match is found)\n        if ($row = $stmt->fetch()) {\n            return array('success' => true, 'user_id' => $row['id'], 'username' => $row['username']);\n        } else {\n            return array('success' => false);\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return array('success' => false);\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$user_data = login($username, $password);\n\nif ($user_data['success']) {\n    // Successful login\n    echo \"Login successful! User ID: {$user_data['user_id']}\";\n} else {\n    // Failed login (show error message or redirect to login page)\n    echo \"Invalid username or password\";\n}\n\n?>\n```"]}
