{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login functionality in PHP. The code is well-structured, readable, and includes error handling.\n\n### Database Setup (for illustration purposes)\n\nFor this example, we'll assume you have a database with the following schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n**User Login Function**\n------------------------\n\n```php\n<?php\n\n// Configuration\n$DB_HOST = 'localhost';\n$DB_USER = 'your_username';\n$DB_PASSWORD = 'your_password';\n$DB_NAME = 'your_database';\n\nfunction login($username, $password) {\n  // Establish database connection\n  try {\n    $conn = new PDO(\"mysql:host=$DB_HOST;dbname=$DB_NAME\", $DB_USER, $DB_PASSWORD);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Prepare SQL query to select user by username\n    $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n\n    // Fetch user data if found\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    // Check password (using SHA-256 for illustration purposes)\n    if ($user && hash('sha256', $password) === $user['password']) {\n      return true; // Login successful\n    } else {\n      return false; // Incorrect username or password\n    }\n  } catch (PDOException $e) {\n    echo 'Error connecting to database: ' . $e->getMessage();\n    return false;\n  } finally {\n    $conn = null;\n  }\n}\n\n?>\n```\n**Example Usage**\n------------------\n\n```php\n<?php\n\n// Define user input\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Call login function\nif (login($username, $password)) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password.';\n}\n\n?>\n```\n**Security Notes**\n\n* Use a secure hashing algorithm (e.g., bcrypt) for storing passwords instead of SHA-256.\n* Always validate and sanitize user input to prevent SQL injection attacks.\n* Implement additional security measures, such as authentication tokens or sessions.\n\nThis code provides a basic example of a user login functionality in PHP. Remember to adapt it to your specific database schema and requirements.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$DB_HOST = 'localhost';\n$DB_USER = 'your_username';\n$DB_PASSWORD = 'your_password';\n$DB_NAME = 'your_database';\n\nfunction login($username, $password) {\n  // Establish database connection\n  try {\n    $conn = new PDO(\"mysql:host=$DB_HOST;dbname=$DB_NAME\", $DB_USER, $DB_PASSWORD);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Prepare SQL query to select user by username\n    $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n\n    // Fetch user data if found\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    // Check password (using SHA-256 for illustration purposes)\n    if ($user && hash('sha256', $password) === $user['password']) {\n      return true; // Login successful\n    } else {\n      return false; // Incorrect username or password\n    }\n  } catch (PDOException $e) {\n    echo 'Error connecting to database: ' . $e->getMessage();\n    return false;\n  } finally {\n    $conn = null;\n  }\n}\n\n?>\n```", "```php\n<?php\n\n// Define user input\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Call login function\nif (login($username, $password)) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password.';\n}\n\n?>\n```"]}
