{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function using PHP. This example uses a database to store usernames and passwords, but please note that storing passwords as plain text is insecure. In a real-world application, you should use a secure method such as hashing and salting.\n\n**Database Schema:**\n\nWe'll assume the following database schema:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**Login Function:**\n\n```php\nfunction login($username, $password) {\n  // Connect to database (e.g. MySQL)\n  $db = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n\n  // Prepare SQL query\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute query and store result\n  if ($stmt->execute()) {\n    $result = $stmt->get_result();\n    $user = $result->fetch_assoc();\n\n    // Check password (insecure, use a secure method like hashing/salting in real-world app)\n    if (password_verify($password, $user[\"password\"])) {\n      return array(\"success\" => true, \"username\" => $user[\"username\"]);\n    } else {\n      return array(\"success\" => false, \"message\" => \"Incorrect password\");\n    }\n  } else {\n    // Handle query execution error\n    return array(\"success\" => false, \"message\" => \"Database error: \" . $db->error);\n  }\n\n  // Close database connection\n  $stmt->close();\n  $db->close();\n\n  return array(\"success\" => false, \"message\" => \"Unknown error\");\n}\n```\n\n**Example Usage:**\n\n```php\n$username = \"john\";\n$password = \"secret\";\n\n$result = login($username, $password);\n\nif ($result[\"success\"]) {\n  echo \"Login successful for user {$result['username']}\";\n} else {\n  echo \"Error: \" . $result[\"message\"];\n}\n```\n\n**Security Note:** In a real-world application, you should use secure methods like hashing and salting to store passwords. This example is provided for illustrative purposes only.\n\n**Best Practices:**\n\n* Always validate user input before using it in SQL queries.\n* Use prepared statements with parameterized queries to prevent SQL injection attacks.\n* Store sensitive data (e.g. passwords) securely, using a secure method like hashing and salting.", "code_blocks": [null, "```php\nfunction login($username, $password) {\n  // Connect to database (e.g. MySQL)\n  $db = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n\n  // Prepare SQL query\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute query and store result\n  if ($stmt->execute()) {\n    $result = $stmt->get_result();\n    $user = $result->fetch_assoc();\n\n    // Check password (insecure, use a secure method like hashing/salting in real-world app)\n    if (password_verify($password, $user[\"password\"])) {\n      return array(\"success\" => true, \"username\" => $user[\"username\"]);\n    } else {\n      return array(\"success\" => false, \"message\" => \"Incorrect password\");\n    }\n  } else {\n    // Handle query execution error\n    return array(\"success\" => false, \"message\" => \"Database error: \" . $db->error);\n  }\n\n  // Close database connection\n  $stmt->close();\n  $db->close();\n\n  return array(\"success\" => false, \"message\" => \"Unknown error\");\n}\n```", "```php\n$username = \"john\";\n$password = \"secret\";\n\n$result = login($username, $password);\n\nif ($result[\"success\"]) {\n  echo \"Login successful for user {$result['username']}\";\n} else {\n  echo \"Error: \" . $result[\"message\"];\n}\n```"]}
