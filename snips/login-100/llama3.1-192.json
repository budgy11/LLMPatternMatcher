{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n====================================\n\nThis example demonstrates a basic user login function using PHP. It uses the `$_POST` superglobal to retrieve form data and connects to a database using MySQLi.\n\n### Database Setup\n\nBefore running this code, ensure you have a MySQL database set up with a `users` table containing the following columns:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| username | varchar(255) |\n| password | varchar(255) |\n\n### PHP Code\n\n```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'root';\n$password = '';\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Retrieve form data\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// SQL query to select the user from the database\n$sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    // Login successful, redirect to a protected page\n    header('Location: protected-page.php');\n} else {\n    // Login failed, display an error message\n    echo 'Invalid username or password';\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```\n\n### Explanation\n\n1. The code connects to the MySQL database using MySQLi.\n2. It retrieves the form data from the `$_POST` superglobal array.\n3. An SQL query is executed to select the user from the database based on their username and password.\n4. If a match is found, the script redirects the user to a protected page (e.g., `protected-page.php`).\n5. If no match is found or an error occurs, an error message is displayed.\n\n### Security Note\n\nThis example uses plain text passwords in the database for simplicity. In a real-world application, you should store hashed passwords using a library like bcrypt or Argon2.\n\n### Form HTML Example\n\n```html\n<form action=\"login.php\" method=\"post\">\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\"><br><br>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"Login\">\n</form>\n```\n\nRemember to replace `login.php` with the actual PHP script file that contains the user login function.\n\n**Security Recommendations**\n\n* Always validate and sanitize user input data.\n* Use prepared statements or parameterized queries to prevent SQL injection attacks.\n* Store hashed passwords in the database instead of plain text.\n* Implement a secure password hashing algorithm like bcrypt or Argon2.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'root';\n$password = '';\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Retrieve form data\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// SQL query to select the user from the database\n$sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    // Login successful, redirect to a protected page\n    header('Location: protected-page.php');\n} else {\n    // Login failed, display an error message\n    echo 'Invalid username or password';\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```", null]}
