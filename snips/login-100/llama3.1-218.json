{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\n### Overview\n\nThis is a simple example of a user login function in PHP. This function will check if the provided username and password match with the stored credentials.\n\n### Code\n```php\n<?php\nfunction login_user($username, $password) {\n  // Database connection settings (replace with your actual database settings)\n  $host = 'localhost';\n  $db_name = 'my_database';\n  $username_db = 'my_username';\n  $password_db = 'my_password';\n\n  // Create a connection to the database\n  try {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username_db, $password_db);\n  } catch(PDOException $e) {\n    die(\"Error connecting to database: \" . $e->getMessage());\n  }\n\n  // SQL query to check if the user exists and password matches\n  $query = \"\n    SELECT * FROM users\n    WHERE username = :username AND password = :password;\n  \";\n\n  // Prepare the query with the provided credentials\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':password', $password);\n\n  // Execute the query and fetch results\n  try {\n    $stmt->execute();\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    if ($result) {\n      // User credentials match, return user data\n      return array(\n        'id' => $result['id'],\n        'username' => $result['username']\n      );\n    } else {\n      // Incorrect username or password\n      return null;\n    }\n  } catch(PDOException $e) {\n    die(\"Error executing query: \" . $e->getMessage());\n  }\n\n  finally {\n    $conn = null; // Close the database connection\n  }\n}\n?>\n```\n### Example Usage\n\n```php\n$username = 'my_username';\n$password = 'my_password';\n\n$user_data = login_user($username, $password);\n\nif ($user_data) {\n  echo \"User logged in successfully!\";\n  print_r($user_data);\n} else {\n  echo \"Invalid username or password.\";\n}\n```\n### Notes\n\n* Make sure to replace the database connection settings with your actual database credentials.\n* This example uses PDO (PHP Data Objects) for a secure and efficient way to interact with the database.\n* The function returns `null` if the user credentials do not match, indicating an invalid login attempt.", "code_blocks": ["```php\n<?php\nfunction login_user($username, $password) {\n  // Database connection settings (replace with your actual database settings)\n  $host = 'localhost';\n  $db_name = 'my_database';\n  $username_db = 'my_username';\n  $password_db = 'my_password';\n\n  // Create a connection to the database\n  try {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username_db, $password_db);\n  } catch(PDOException $e) {\n    die(\"Error connecting to database: \" . $e->getMessage());\n  }\n\n  // SQL query to check if the user exists and password matches\n  $query = \"\n    SELECT * FROM users\n    WHERE username = :username AND password = :password;\n  \";\n\n  // Prepare the query with the provided credentials\n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':password', $password);\n\n  // Execute the query and fetch results\n  try {\n    $stmt->execute();\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    if ($result) {\n      // User credentials match, return user data\n      return array(\n        'id' => $result['id'],\n        'username' => $result['username']\n      );\n    } else {\n      // Incorrect username or password\n      return null;\n    }\n  } catch(PDOException $e) {\n    die(\"Error executing query: \" . $e->getMessage());\n  }\n\n  finally {\n    $conn = null; // Close the database connection\n  }\n}\n?>\n```", "```php\n$username = 'my_username';\n$password = 'my_password';\n\n$user_data = login_user($username, $password);\n\nif ($user_data) {\n  echo \"User logged in successfully!\";\n  print_r($user_data);\n} else {\n  echo \"Invalid username or password.\";\n}\n```"]}
