{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP:\n\n**login.php**\n```php\n<?php\n\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Function to connect to database\nfunction db_connect() {\n  $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n  if (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n  }\n  return $conn;\n}\n\n// Function to check user credentials\nfunction login_user($username, $password) {\n  $conn = db_connect();\n  \n  // Prepare SQL query\n  $query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n  \n  // Bind parameters\n  $stmt = mysqli_prepare($conn, $query);\n  mysqli_stmt_bind_param($stmt, \"ss\", $username, $password);\n  \n  // Execute query\n  if (mysqli_stmt_execute($stmt)) {\n    // Fetch results\n    mysqli_stmt_bind_result($stmt, $result);\n    \n    // Check if user exists and password is correct\n    while (mysqli_stmt_fetch($stmt)) {\n      if ($result == '1') {\n        // Login successful, return true and user data\n        return array(true, $_SESSION['username'], $_SESSION['password']);\n      }\n    }\n  }\n  \n  // Login failed, return false\n  return array(false, null);\n}\n\n// Check for POST request\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n  \n  // Hash password before checking user credentials\n  $hashed_password = hash('sha256', $password);\n  \n  // Call login_user function\n  $result = login_user($username, $hashed_password);\n  \n  if ($result[0]) {\n    // Login successful, redirect to protected page\n    header(\"Location: protected.php\");\n    exit;\n  } else {\n    // Login failed, display error message\n    echo \"Invalid username or password\";\n  }\n}\n\n?>\n```\n**Explanation**\n\nThis code defines a `login_user` function that takes two parameters: `$username` and `$password`. It connects to the database using the `db_connect` function, which is used to establish a connection to the MySQL database.\n\nThe `login_user` function then prepares an SQL query with placeholders for the username and password. The `mysqli_stmt_bind_param` function is used to bind the parameters to the prepared statement.\n\nIf the login credentials are correct, the function returns an array with `true` as the first element and the user's data (username and password) as the second and third elements. If the credentials are incorrect, it returns an array with `false` as the first element and no additional data.\n\nThe code then checks for a POST request using `$_SERVER[\"REQUEST_METHOD\"] == \"POST\"`. If this condition is met, it calls the `login_user` function with the username and password from the POST request. The hashed password is used instead of the original password to prevent password hashing errors.\n\n**Security Notes**\n\n* This code uses prepared statements to prevent SQL injection attacks.\n* It uses a hash function (SHA256) to store passwords securely.\n* The database connection settings should be changed to match your own setup.\n* This example assumes that you have a `users` table with columns for username and password. You'll need to modify the SQL query accordingly.\n\n**Example Use Cases**\n\n1. User logs in with correct credentials:\n\t* Username: `john_doe`\n\t* Password: `password123`\n\t* Result: `true`, `[username => 'john_doe', password => 'hashed_password']`\n2. User logs in with incorrect credentials:\n\t* Username: `wrong_username`\n\t* Password: `wrong_password`\n\t* Result: `false`\n\n**Next Steps**\n\nYou'll need to create a protected page (`protected.php`) that checks for the presence of user data in the session and redirects to a login page if not present. You can also add additional error handling, security measures (e.g., rate limiting), or features (e.g., password recovery).", "code_blocks": ["```php\n<?php\n\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Function to connect to database\nfunction db_connect() {\n  $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n  if (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n  }\n  return $conn;\n}\n\n// Function to check user credentials\nfunction login_user($username, $password) {\n  $conn = db_connect();\n  \n  // Prepare SQL query\n  $query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n  \n  // Bind parameters\n  $stmt = mysqli_prepare($conn, $query);\n  mysqli_stmt_bind_param($stmt, \"ss\", $username, $password);\n  \n  // Execute query\n  if (mysqli_stmt_execute($stmt)) {\n    // Fetch results\n    mysqli_stmt_bind_result($stmt, $result);\n    \n    // Check if user exists and password is correct\n    while (mysqli_stmt_fetch($stmt)) {\n      if ($result == '1') {\n        // Login successful, return true and user data\n        return array(true, $_SESSION['username'], $_SESSION['password']);\n      }\n    }\n  }\n  \n  // Login failed, return false\n  return array(false, null);\n}\n\n// Check for POST request\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n  \n  // Hash password before checking user credentials\n  $hashed_password = hash('sha256', $password);\n  \n  // Call login_user function\n  $result = login_user($username, $hashed_password);\n  \n  if ($result[0]) {\n    // Login successful, redirect to protected page\n    header(\"Location: protected.php\");\n    exit;\n  } else {\n    // Login failed, display error message\n    echo \"Invalid username or password\";\n  }\n}\n\n?>\n```"]}
