{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This script uses prepared statements to prevent SQL injection attacks.\n\n### Database Connection (replace with your own credentials)\n\n```php\n// database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    print \"Error connecting to database: \" . $e->getMessage();\n}\n```\n\n### User Login Function\n\n```php\nfunction user_login($email, $password) {\n    global $conn;\n\n    // Prepare SQL query to select username and password hash from the users table\n    $stmt = $conn->prepare(\"SELECT id, email, password_hash FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n\n    try {\n        // Execute prepared statement\n        $stmt->execute();\n\n        // Fetch result\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($user_data) {\n            // Check password hash using PHP's built-in crypt function (using a one-way hash)\n            if (crypt($password, $user_data['password_hash']) === $user_data['password_hash']) {\n                return $user_data; // Successful login\n            } else {\n                return false; // Password incorrect\n            }\n        } else {\n            return false; // User not found\n        }\n\n    } catch (PDOException $e) {\n        print \"Error logging in: \" . $e->getMessage();\n        return false;\n    }\n}\n```\n\n### Example Usage\n\n```php\n$email = 'user@example.com';\n$password = 'password123';\n\n$user_data = user_login($email, $password);\n\nif ($user_data) {\n    echo 'Successful login!';\n} else {\n    echo 'Login failed. Please try again.';\n}\n```\n\nRemember to replace the placeholders in the database connection settings with your actual database credentials.\n\n**Security Notes:**\n\n* This script uses PHP's built-in `crypt` function for password hashing, which is a relatively secure method.\n* The script does not store sensitive data such as passwords or authentication tokens in plain text.\n* As mentioned earlier, prepared statements are used to prevent SQL injection attacks.", "code_blocks": ["```php\n// database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    print \"Error connecting to database: \" . $e->getMessage();\n}\n```", "```php\nfunction user_login($email, $password) {\n    global $conn;\n\n    // Prepare SQL query to select username and password hash from the users table\n    $stmt = $conn->prepare(\"SELECT id, email, password_hash FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n\n    try {\n        // Execute prepared statement\n        $stmt->execute();\n\n        // Fetch result\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($user_data) {\n            // Check password hash using PHP's built-in crypt function (using a one-way hash)\n            if (crypt($password, $user_data['password_hash']) === $user_data['password_hash']) {\n                return $user_data; // Successful login\n            } else {\n                return false; // Password incorrect\n            }\n        } else {\n            return false; // User not found\n        }\n\n    } catch (PDOException $e) {\n        print \"Error logging in: \" . $e->getMessage();\n        return false;\n    }\n}\n```", "```php\n$email = 'user@example.com';\n$password = 'password123';\n\n$user_data = user_login($email, $password);\n\nif ($user_data) {\n    echo 'Successful login!';\n} else {\n    echo 'Login failed. Please try again.';\n}\n```"]}
