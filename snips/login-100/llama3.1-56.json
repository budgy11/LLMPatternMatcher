{"prompt": "Create a user login function using php", "llm_output": "Here's an example of how you can create a simple user login function in PHP:\n\n**login.php**\n```php\n<?php\n// Configuration\n$db_host = 'localhost';\n$db_user = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to check login credentials\nfunction check_login($username, $password) {\n    global $conn;\n    // SQL query to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n    $result = $conn->query($query);\n\n    // Check if result is not empty (i.e., user exists and credentials match)\n    if ($result->num_rows > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get user data\nfunction get_user_data($username) {\n    global $conn;\n    // SQL query to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $conn->query($query);\n\n    // Check if result is not empty (i.e., user exists)\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc();\n    } else {\n        return null;\n    }\n}\n\n// Handle login request\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    if (check_login($username, $password)) {\n        // If user exists and credentials match, get their data\n        $user_data = get_user_data($username);\n\n        // Set session variables\n        $_SESSION['username'] = $username;\n        $_SESSION['logged_in'] = true;\n\n        // Redirect to protected page (e.g., dashboard)\n        header(\"Location: /dashboard.php\");\n        exit();\n    } else {\n        // Display error message if credentials don't match\n        echo \"Invalid username or password.\";\n    }\n}\n?>\n```\n**login.html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <form action=\"<?php echo $_SERVER[\"PHP_SELF\"]; ?>\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>\n```\nThis code uses the `mysqli` extension to connect to a MySQL database. The `check_login()` function checks if the provided username and password match any existing user in the database. If they do, it returns `true`; otherwise, it returns `false`.\n\nThe `get_user_data()` function retrieves the data for the specified user from the database.\n\nWhen the form is submitted, the code checks if the login credentials are valid using the `check_login()` function. If they are, it sets session variables and redirects the user to a protected page (e.g., `/dashboard.php`). Otherwise, it displays an error message.\n\nNote that this is a basic example and you should consider implementing additional security measures, such as:\n\n* Hashing passwords instead of storing them in plain text\n* Validating user input\n* Using prepared statements to prevent SQL injection attacks\n* Implementing account lockout policies\n\nRemember to replace the placeholder database credentials with your actual database credentials.", "code_blocks": ["```php\n<?php\n// Configuration\n$db_host = 'localhost';\n$db_user = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to check login credentials\nfunction check_login($username, $password) {\n    global $conn;\n    // SQL query to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n    $result = $conn->query($query);\n\n    // Check if result is not empty (i.e., user exists and credentials match)\n    if ($result->num_rows > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get user data\nfunction get_user_data($username) {\n    global $conn;\n    // SQL query to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $conn->query($query);\n\n    // Check if result is not empty (i.e., user exists)\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc();\n    } else {\n        return null;\n    }\n}\n\n// Handle login request\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    if (check_login($username, $password)) {\n        // If user exists and credentials match, get their data\n        $user_data = get_user_data($username);\n\n        // Set session variables\n        $_SESSION['username'] = $username;\n        $_SESSION['logged_in'] = true;\n\n        // Redirect to protected page (e.g., dashboard)\n        header(\"Location: /dashboard.php\");\n        exit();\n    } else {\n        // Display error message if credentials don't match\n        echo \"Invalid username or password.\";\n    }\n}\n?>\n```", null]}
