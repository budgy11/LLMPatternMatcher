{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a basic user login function in PHP:\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Function to check user credentials\n    function login($email, $password) {\n        global $conn;\n\n        // SQL query to select user data\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($user_data) {\n            // Check password\n            if (password_verify($password, $user_data['password'])) {\n                return array(\n                    'id' => $user_data['id'],\n                    'name' => $user_data['name'],\n                    'email' => $user_data['email']\n                );\n            } else {\n                throw new Exception('Invalid password');\n            }\n        } else {\n            throw new Exception('User not found');\n        }\n    }\n\n    // Example usage:\n    try {\n        $credentials = array(\n            'email' => 'example@example.com',\n            'password' => 'password123'\n        );\n\n        $user_data = login($credentials['email'], $credentials['password']);\n\n        echo \"Logged in successfully!\";\n        print_r($user_data);\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n}\n\n?>\n```\nThis code defines a `login` function that takes an email and password as input, and checks them against the database. If the credentials are valid, it returns an array with the user's ID, name, and email.\n\n**Security Notes**\n\n* Passwords are stored securely using the `password_hash` function (not shown in this example).\n* The login function uses prepared statements to prevent SQL injection attacks.\n* Input validation is minimal in this example; you should add additional checks to ensure that user input is sanitized before being used in database queries.\n\n**Example Usage**\n\nTo use this code, simply call the `login` function with an email and password as arguments. If the credentials are valid, it will return an array with the user's data.\n```php\n$credentials = array(\n    'email' => 'example@example.com',\n    'password' => 'password123'\n);\n\n$user_data = login($credentials['email'], $credentials['password']);\n\nif ($user_data) {\n    echo \"Logged in successfully!\";\n    print_r($user_data);\n} else {\n    echo \"Invalid credentials\";\n}\n```\nNote that this is a basic example, and you should consider implementing additional security measures, such as:\n\n* Using HTTPS to encrypt the connection\n* Implementing rate limiting or IP blocking for login attempts\n* Storing passwords securely using a library like PHP-Password-Hasher\n* Validating user input on both server-side and client-side", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Function to check user credentials\n    function login($email, $password) {\n        global $conn;\n\n        // SQL query to select user data\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($user_data) {\n            // Check password\n            if (password_verify($password, $user_data['password'])) {\n                return array(\n                    'id' => $user_data['id'],\n                    'name' => $user_data['name'],\n                    'email' => $user_data['email']\n                );\n            } else {\n                throw new Exception('Invalid password');\n            }\n        } else {\n            throw new Exception('User not found');\n        }\n    }\n\n    // Example usage:\n    try {\n        $credentials = array(\n            'email' => 'example@example.com',\n            'password' => 'password123'\n        );\n\n        $user_data = login($credentials['email'], $credentials['password']);\n\n        echo \"Logged in successfully!\";\n        print_r($user_data);\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n}\n\n?>\n```", "```php\n$credentials = array(\n    'email' => 'example@example.com',\n    'password' => 'password123'\n);\n\n$user_data = login($credentials['email'], $credentials['password']);\n\nif ($user_data) {\n    echo \"Logged in successfully!\";\n    print_r($user_data);\n} else {\n    echo \"Invalid credentials\";\n}\n```"]}
