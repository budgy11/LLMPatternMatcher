{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This function will verify the username and password against a predefined array of users.\n\n### `login.php`\n\n```php\n<?php\n\n// Define the array of users for demonstration purposes only.\n$users = [\n    'admin' => ['password' => '$2y$10$1tQp5mEz6f0G3lK9H7hAqOnB.9T', 'email' => 'admin@example.com'],\n    // Add more users here...\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    if (empty($username) || empty($password)) {\n        return ['success' => false, 'message' => 'Please enter both username and password.'];\n    }\n\n    if (!isset($users[$username])) {\n        return ['success' => false, 'message' => 'Invalid username or password.'];\n    }\n\n    $hashedPassword = $users[$username]['password'];\n\n    // Check the provided password against the stored hash.\n    if (password_verify($password, $hashedPassword)) {\n        return ['success' => true, 'user' => $users[$username]];\n    } else {\n        return ['success' => false, 'message' => 'Invalid username or password.'];\n    }\n}\n\n// Example usage:\n$username = 'admin';\n$password = 'secret';\n\n$result = login($username, $password);\n\nif ($result['success']) {\n    echo 'Login successful!';\n} else {\n    echo $result['message'];\n}\n```\n\n**How to Use:**\n\n1. Replace the `$users` array with your own database of users.\n2. Modify the `login()` function to connect to and query your user database (e.g., using PDO or a similar library).\n3. Call the `login()` function from your PHP script, passing in the provided username and password.\n\n**Security Notes:**\n\n* This example uses the built-in `password_verify()` function to securely compare passwords.\n* Make sure to store hashed passwords instead of plaintext ones for enhanced security.\n* Use prepared statements or parameterized queries when interacting with your database to prevent SQL injection attacks.", "code_blocks": ["```php\n<?php\n\n// Define the array of users for demonstration purposes only.\n$users = [\n    'admin' => ['password' => '$2y$10$1tQp5mEz6f0G3lK9H7hAqOnB.9T', 'email' => 'admin@example.com'],\n    // Add more users here...\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    if (empty($username) || empty($password)) {\n        return ['success' => false, 'message' => 'Please enter both username and password.'];\n    }\n\n    if (!isset($users[$username])) {\n        return ['success' => false, 'message' => 'Invalid username or password.'];\n    }\n\n    $hashedPassword = $users[$username]['password'];\n\n    // Check the provided password against the stored hash.\n    if (password_verify($password, $hashedPassword)) {\n        return ['success' => true, 'user' => $users[$username]];\n    } else {\n        return ['success' => false, 'message' => 'Invalid username or password.'];\n    }\n}\n\n// Example usage:\n$username = 'admin';\n$password = 'secret';\n\n$result = login($username, $password);\n\nif ($result['success']) {\n    echo 'Login successful!';\n} else {\n    echo $result['message'];\n}\n```"]}
