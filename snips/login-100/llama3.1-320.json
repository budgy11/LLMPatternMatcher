{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This function will handle form data, validate it, and check if the credentials are correct.\n\n### Database Setup (assuming MySQL)\n\nFirst, you need to create a table named `users` with the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50),\n  password VARCHAR(255)\n);\n```\n\n**login.php**\n```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'your_database_name';\n\n// Establish connection to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user() {\n  // Get form data\n  if (isset($_POST['login'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Validate form data\n    if (empty($username) || empty($password)) {\n      echo 'Please fill in all fields.';\n    } else {\n      // Hash password for verification\n      $hashed_password = hash('sha256', $password);\n\n      // Prepare SQL query\n      $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$hashed_password'\";\n      $result = $conn->query($sql);\n\n      if ($result->num_rows > 0) {\n        while ($row = $result->fetch_assoc()) {\n          session_start();\n          $_SESSION['logged_in'] = true;\n          $_SESSION['username'] = $username;\n          header('Location: dashboard.php');\n          exit;\n        }\n      } else {\n        echo 'Invalid username or password.';\n      }\n    }\n  }\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```\n\n### Explanation\n\n1. The function `login_user` checks if the form has been submitted.\n2. It validates the form data, ensuring that both the username and password fields are not empty.\n3. If the form is valid, it hashes the password for verification using SHA-256 hash algorithm.\n4. The SQL query selects all rows from the `users` table where the `username` matches and the hashed `password` matches.\n5. If a match is found, it starts a session, sets `logged_in` to true and stores the username in the session variables, then redirects the user to `dashboard.php`.\n6. Finally, if no rows are returned (i.e., invalid credentials), an error message is displayed.\n\nNote: Remember to replace `'your_database_name'`, `$host`, `$username`, `$password`, and `$dbname` with your actual database settings. Also, this example uses SHA-256 hashing for simplicity; consider using more secure methods like bcrypt or PBKDF2 for production environments.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'your_database_name';\n\n// Establish connection to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user() {\n  // Get form data\n  if (isset($_POST['login'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Validate form data\n    if (empty($username) || empty($password)) {\n      echo 'Please fill in all fields.';\n    } else {\n      // Hash password for verification\n      $hashed_password = hash('sha256', $password);\n\n      // Prepare SQL query\n      $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$hashed_password'\";\n      $result = $conn->query($sql);\n\n      if ($result->num_rows > 0) {\n        while ($row = $result->fetch_assoc()) {\n          session_start();\n          $_SESSION['logged_in'] = true;\n          $_SESSION['username'] = $username;\n          header('Location: dashboard.php');\n          exit;\n        }\n      } else {\n        echo 'Invalid username or password.';\n      }\n    }\n  }\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```"]}
