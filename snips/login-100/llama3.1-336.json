{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function in PHP:\n```php\n<?php\n\n// Configuration variables\n$databaseHost = 'localhost';\n$databaseUsername = 'your_username';\n$databasePassword = 'your_password';\n$databaseName = 'your_database';\n\n// Connect to the database\n$conn = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    // SQL query to select user data from the database\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n    \n    // Execute the query and get the result\n    $result = $conn->query($sql);\n    \n    // Check if the user exists in the database\n    if ($result->num_rows > 0) {\n        // Get the user data from the result set\n        $row = $result->fetch_assoc();\n        \n        // Return the user ID and username for further use\n        return array('user_id' => $row['id'], 'username' => $row['username']);\n    } else {\n        // If no matching user is found, return false\n        return false;\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result) {\n    echo \"Login successful. User ID: \" . $result['user_id'] . \", Username: \" . $result['username'];\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```\nThis code assumes you have a table called `users` with columns `id`, `username`, and `password` in your database.\n\n**Security Note:** This is a basic example, and in a production environment, you should never store passwords in plain text. Consider using a secure password hashing function like `password_hash()` and `password_verify()`.\n\n**Best Practices:**\n\n* Use prepared statements to prevent SQL injection.\n* Validate user input before executing the query.\n* Consider using a more robust authentication mechanism like OAuth or OpenID Connect.\n* Never store sensitive data, such as passwords, in plain text.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$databaseHost = 'localhost';\n$databaseUsername = 'your_username';\n$databasePassword = 'your_password';\n$databaseName = 'your_database';\n\n// Connect to the database\n$conn = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    // SQL query to select user data from the database\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n    \n    // Execute the query and get the result\n    $result = $conn->query($sql);\n    \n    // Check if the user exists in the database\n    if ($result->num_rows > 0) {\n        // Get the user data from the result set\n        $row = $result->fetch_assoc();\n        \n        // Return the user ID and username for further use\n        return array('user_id' => $row['id'], 'username' => $row['username']);\n    } else {\n        // If no matching user is found, return false\n        return false;\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result) {\n    echo \"Login successful. User ID: \" . $result['user_id'] . \", Username: \" . $result['username'];\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Close the database connection\n$conn->close();\n\n?>\n```"]}
