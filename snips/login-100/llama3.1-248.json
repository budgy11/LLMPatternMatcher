{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function in PHP:\n\n**Note:** This code uses the `mysqli` extension for database interaction. You should replace it with your preferred extension (e.g., PDO, mysqli) and adjust the code accordingly.\n\n```php\n<?php\n\n// Configuration variables\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to the database\n$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check connection\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n    exit();\n}\n\nfunction login_user($username, $password) {\n    global $mysqli;\n\n    // Prepare the SQL query\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\n    $stmt->bind_param(\"ss\", $username, $password);\n\n    // Execute the query\n    $stmt->execute();\n\n    // Get the result\n    $result = $stmt->get_result();\n\n    // Check if a user was found\n    if ($result->num_rows > 0) {\n        return true; // User logged in successfully\n    } else {\n        return false; // User not found or password incorrect\n    }\n}\n\n// Example usage:\n$login_username = 'example_user';\n$login_password = 'example_password';\n\nif (login_user($login_username, $login_password)) {\n    echo \"User logged in successfully!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Clean up resources\n$stmt->close();\n$mysqli->close();\n\n?>\n```\n\n**Security Notes:**\n\n1. **Hash and store passwords securely:** In a real-world application, you should use a secure password hashing algorithm (e.g., `password_hash()`) to store user passwords.\n2. **Prevent SQL injection:** Use prepared statements with parameterized queries to prevent SQL injection attacks.\n3. **Use HTTPS:** Serve your login form over HTTPS to encrypt the communication between the client and server.\n\n**Best Practices:**\n\n1. **Separate concerns:** Keep database credentials out of your code by using environment variables or a secure configuration file.\n2. **Validate user input:** Always validate user input, especially when it comes to sensitive data like passwords.\n3. **Use a secure authentication protocol:** Consider implementing a secure authentication protocol (e.g., OAuth) for more complex applications.\n\nThis example should provide a basic understanding of creating a user login function in PHP using `mysqli`. Remember to adapt and extend this code to fit your specific needs and security requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to the database\n$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check connection\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n    exit();\n}\n\nfunction login_user($username, $password) {\n    global $mysqli;\n\n    // Prepare the SQL query\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\n    $stmt->bind_param(\"ss\", $username, $password);\n\n    // Execute the query\n    $stmt->execute();\n\n    // Get the result\n    $result = $stmt->get_result();\n\n    // Check if a user was found\n    if ($result->num_rows > 0) {\n        return true; // User logged in successfully\n    } else {\n        return false; // User not found or password incorrect\n    }\n}\n\n// Example usage:\n$login_username = 'example_user';\n$login_password = 'example_password';\n\nif (login_user($login_username, $login_password)) {\n    echo \"User logged in successfully!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Clean up resources\n$stmt->close();\n$mysqli->close();\n\n?>\n```"]}
