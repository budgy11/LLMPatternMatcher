{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login function using PHP, including password hashing and verification.\n\n**Database Setup**\n\nFor this example, we'll assume you have a MySQL database with the following table structure:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**Login Function**\n-----------------\n\nCreate a file named `login.php` and add the following code:\n```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\nfunction connectDatabase() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Hash password (using bcrypt)\nfunction hashPassword($password) {\n  $salt = strtr(random_bytes(16), '+', '.');\n  $hash = crypt($password, '$2y$10$' . $salt . '$');\n  return array('hashed_password' => $hash, 'salt' => $salt);\n}\n\n// Verify password\nfunction verifyPassword($hashed_password, $provided_password) {\n  $salt = substr($hashed_password, strpos($hashed_password, '$2y$10$') + strlen('$2y$10$'));\n  $new_hash = crypt($provided_password, '$2y$10$' . $salt);\n  return $new_hash === $hashed_password;\n}\n\n// Login function\nfunction login($username, $password) {\n  // Connect to database\n  $conn = connectDatabase();\n\n  // Retrieve user data\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n  if ($result->num_rows > 0) {\n    // Fetch user data\n    $user_data = $result->fetch_assoc();\n    \n    // Verify password\n    $hashed_password = $user_data['password'];\n    $verified = verifyPassword($hashed_password, $password);\n    \n    if ($verified) {\n      // Login successful\n      return true;\n    } else {\n      // Password incorrect\n      return false;\n    }\n  } else {\n    // User not found\n    return false;\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n// Example usage:\n$username = 'example_user';\n$password = 'example_password';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```\n**Explanation**\n\n1. The `connectDatabase` function establishes a connection to the database using the provided settings.\n2. The `hashPassword` function generates a hashed password for the given input string, using bcrypt with a random salt.\n3. The `verifyPassword` function takes a hashed password and the user's provided password as input, then checks if they match by generating a new hash using the same salt.\n4. The `login` function connects to the database, retrieves the user data for the given username, verifies the password using the `verifyPassword` function, and returns a boolean indicating whether the login was successful.\n\n**Security Notes**\n\n* Always use prepared statements or parameterized queries to prevent SQL injection attacks.\n* Use bcrypt with a random salt to securely hash passwords.\n* Store hashed passwords securely in your database.\n* Do not store user passwords in plaintext.\n* Implement additional security measures, such as password policy enforcement and rate limiting.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\nfunction connectDatabase() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Hash password (using bcrypt)\nfunction hashPassword($password) {\n  $salt = strtr(random_bytes(16), '+', '.');\n  $hash = crypt($password, '$2y$10$' . $salt . '$');\n  return array('hashed_password' => $hash, 'salt' => $salt);\n}\n\n// Verify password\nfunction verifyPassword($hashed_password, $provided_password) {\n  $salt = substr($hashed_password, strpos($hashed_password, '$2y$10$') + strlen('$2y$10$'));\n  $new_hash = crypt($provided_password, '$2y$10$' . $salt);\n  return $new_hash === $hashed_password;\n}\n\n// Login function\nfunction login($username, $password) {\n  // Connect to database\n  $conn = connectDatabase();\n\n  // Retrieve user data\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n  if ($result->num_rows > 0) {\n    // Fetch user data\n    $user_data = $result->fetch_assoc();\n    \n    // Verify password\n    $hashed_password = $user_data['password'];\n    $verified = verifyPassword($hashed_password, $password);\n    \n    if ($verified) {\n      // Login successful\n      return true;\n    } else {\n      // Password incorrect\n      return false;\n    }\n  } else {\n    // User not found\n    return false;\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n// Example usage:\n$username = 'example_user';\n$password = 'example_password';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```"]}
