{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a basic user login function in PHP:\n\n**login.php**\n```php\n<?php\n\n// Configuration settings\n$database_host = 'localhost';\n$database_username = 'your_username';\n$database_password = 'your_password';\n$database_name = 'your_database';\n\n// Establish database connection\n$mysqli = new mysqli($database_host, $database_username, $database_password, $database_name);\n\nif ($mysqli->connect_errno) {\n    die(\"Connection failed: \" . $mysqli->connect_error);\n}\n\n// Function to hash password (using PHP 5.5+ built-in function)\nfunction hashPassword($password) {\n    return password_hash($password, PASSWORD_DEFAULT);\n}\n\n// Function to verify user credentials\nfunction verifyUser($username, $password) {\n    global $mysqli;\n\n    // Prepare and execute query to select user record\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->bind_param('s', $username);\n\n    if ($stmt->execute()) {\n        $result = $stmt->get_result();\n\n        if ($row = $result->fetch_assoc()) {\n            // Compare stored password with provided password\n            if (password_verify($password, $row['password'])) {\n                return true;\n            }\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    } else {\n        echo \"Database error: \" . $mysqli->error;\n    }\n\n    return false;\n}\n\n// Function to login user and set session variables\nfunction loginUser($username, $password) {\n    global $mysqli;\n\n    // Verify user credentials\n    if (verifyUser($username, $password)) {\n        // Select user record with matching username and password\n        $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n        $stmt->bind_param('s', $username);\n\n        if ($stmt->execute()) {\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                // Set session variables\n                $_SESSION['user_id'] = $row['id'];\n                $_SESSION['username'] = $row['username'];\n\n                return true;\n            }\n        } else {\n            echo \"Database error: \" . $mysqli->error;\n        }\n\n        return false;\n    }\n\n    return false;\n}\n\n?>\n```\n**login.html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n\n<form action=\"login.php\" method=\"post\">\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\"><br><br>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Login</button>\n</form>\n\n<?php\nif (isset($_SESSION['user_id'])) {\n    echo \"Welcome, \" . $_SESSION['username'];\n} else {\n?>\n```\n**Explanation:**\n\n1. The `login.php` file establishes a database connection and defines three functions:\n\t* `hashPassword()`: hashes the user's password using PHP 5.5+ built-in function.\n\t* `verifyUser()`: verifies the user's credentials by comparing the provided password with the stored password (hashed).\n\t* `loginUser()`: logs in the user, sets session variables, and returns a boolean value indicating success or failure.\n2. The `login.html` file contains an HTML form that posts to the `login.php` script when submitted.\n3. If the user is already logged in (i.e., `$_SESSION['user_id']` is set), it displays a welcome message.\n\n**Usage:**\n\n1. Create a new PHP file named `users.sql` containing the necessary SQL code to create a users table with columns for `id`, `username`, and `password`.\n2. Run the SQL script in your database management tool (e.g., phpMyAdmin) to create the users table.\n3. In the `login.php` file, update the database connection settings (`$database_host`, `$database_username`, etc.) to match your own setup.\n4. Place both files in the same directory on your server and access the `login.html` page via a web browser.\n\n**Security Notes:**\n\n* Always use prepared statements when interacting with databases to prevent SQL injection attacks.\n* Never store passwords in plain text; always hash them using a secure algorithm like bcrypt (PHP 5.5+).\n* Verify user credentials securely by comparing hashed passwords instead of original passwords.\n\nThis is a basic example, and you should consider implementing additional security measures (e.g., CSRF protection, password strength checking) depending on your application's requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$database_host = 'localhost';\n$database_username = 'your_username';\n$database_password = 'your_password';\n$database_name = 'your_database';\n\n// Establish database connection\n$mysqli = new mysqli($database_host, $database_username, $database_password, $database_name);\n\nif ($mysqli->connect_errno) {\n    die(\"Connection failed: \" . $mysqli->connect_error);\n}\n\n// Function to hash password (using PHP 5.5+ built-in function)\nfunction hashPassword($password) {\n    return password_hash($password, PASSWORD_DEFAULT);\n}\n\n// Function to verify user credentials\nfunction verifyUser($username, $password) {\n    global $mysqli;\n\n    // Prepare and execute query to select user record\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->bind_param('s', $username);\n\n    if ($stmt->execute()) {\n        $result = $stmt->get_result();\n\n        if ($row = $result->fetch_assoc()) {\n            // Compare stored password with provided password\n            if (password_verify($password, $row['password'])) {\n                return true;\n            }\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    } else {\n        echo \"Database error: \" . $mysqli->error;\n    }\n\n    return false;\n}\n\n// Function to login user and set session variables\nfunction loginUser($username, $password) {\n    global $mysqli;\n\n    // Verify user credentials\n    if (verifyUser($username, $password)) {\n        // Select user record with matching username and password\n        $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n        $stmt->bind_param('s', $username);\n\n        if ($stmt->execute()) {\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                // Set session variables\n                $_SESSION['user_id'] = $row['id'];\n                $_SESSION['username'] = $row['username'];\n\n                return true;\n            }\n        } else {\n            echo \"Database error: \" . $mysqli->error;\n        }\n\n        return false;\n    }\n\n    return false;\n}\n\n?>\n```", null]}
