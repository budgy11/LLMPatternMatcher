{"prompt": "Create a user login function using php", "llm_output": "Here's an example of how you can create a simple user login system in PHP.\n\n**Database Schema:**\nWe will be assuming that we have the following database schema:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n```\n\n**PHP Code:**\n\nFirst, let's create a function to hash passwords (we'll be using PHP's built-in `password_hash` function).\n\n```php\nfunction hash_password($password) {\n    return password_hash($password, PASSWORD_DEFAULT);\n}\n```\n\nNext, we can create the user login function.\n\n```php\nfunction user_login($username, $password) {\n    // Connect to database (replace with your actual database connection code)\n    require_once 'db_config.php';\n    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT password_hash FROM users WHERE username = ?\");\n    $stmt->bind_param(\"s\", $username);\n\n    // Execute query and get result\n    if ($stmt->execute()) {\n        $stmt->store_result();\n        if ($stmt->num_rows == 1) {\n            $stmt->fetch($result);\n            if (password_verify($password, $result[0])) {\n                return true; // Login successful\n            } else {\n                return false; // Password incorrect\n            }\n        } else {\n            return false; // Username not found\n        }\n    }\n\n    return false; // Query execution failed\n}\n```\n\n**Example Usage:**\n\n```php\n$username = 'example_user';\n$password = 'password123';\n\nif (user_login($username, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid username or password.';\n}\n```\n\nThis code checks if the provided `username` and `password` are valid. It does this by connecting to the database, executing a SQL query to retrieve the hashed password for the given `username`, and then using PHP's built-in `password_verify` function to check whether the provided `password` matches the retrieved hash.\n\n**Remember:**\n\n* This is a simplified example and should not be used in production without additional security measures (e.g., error handling, input validation).\n* You'll need to replace `'db_config.php'` with your actual database connection configuration.\n* Consider using prepared statements more extensively for SQL queries.", "code_blocks": [null, "```php\nfunction hash_password($password) {\n    return password_hash($password, PASSWORD_DEFAULT);\n}\n```", "```php\nfunction user_login($username, $password) {\n    // Connect to database (replace with your actual database connection code)\n    require_once 'db_config.php';\n    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT password_hash FROM users WHERE username = ?\");\n    $stmt->bind_param(\"s\", $username);\n\n    // Execute query and get result\n    if ($stmt->execute()) {\n        $stmt->store_result();\n        if ($stmt->num_rows == 1) {\n            $stmt->fetch($result);\n            if (password_verify($password, $result[0])) {\n                return true; // Login successful\n            } else {\n                return false; // Password incorrect\n            }\n        } else {\n            return false; // Username not found\n        }\n    }\n\n    return false; // Query execution failed\n}\n```", "```php\n$username = 'example_user';\n$password = 'password123';\n\nif (user_login($username, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid username or password.';\n}\n```"]}
