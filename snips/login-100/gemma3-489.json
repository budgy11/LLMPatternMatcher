{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database credentials (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_db_user\";\n$db_pass = \"your_db_password\";\n\n// Function to check user credentials\nfunction loginUser($username, $password) {\n  // Connect to the database\n  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n  // Bind the values (using prepared statements to prevent SQL injection)\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" means two strings\n\n  // Execute the query\n  if ($stmt->execute() === TRUE) {\n    $result = $stmt->get_result();\n    $row = $result->fetch_assoc();\n\n    // Check if a user was found\n    if ($row) {\n      // User found!  You can do things like set a session\n      $_SESSION['username'] = $row['username']; // Store username in session\n      $_SESSION['user_id'] = $row['id']; // Store user ID\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    // Error executing query\n    return false;\n  }\n\n  // Close the statement and connection\n  $stmt->close();\n  $conn->close();\n}\n\n// Example Usage:\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (important!) - Add more validation as needed\n  if (empty($username) || empty($password)) {\n    echo \"Username and password cannot be empty!\";\n  } else {\n    // Call the loginUser function\n    if (loginUser($username, $password)) {\n      // Login successful - Redirect to a protected page or display a welcome message\n      echo \"Login successful!  You are now logged in.\";\n      // Redirect to your main page or protected content\n      header(\"Location: /protected_page.php\"); // Replace with your protected page\n      exit;\n    } else {\n      echo \"Invalid username or password.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Prepared Statements (SQL Injection Prevention):** This is *crucial* for security. The code now uses `mysqli_prepare()` and `mysqli_stmt_bind_param()` to prepare the SQL query and bind the values. This *completely* prevents SQL injection attacks.  **Never** directly concatenate user input into SQL queries.\n* **Error Handling:**  Includes `if ($conn->connect_error)` and checks if `execute()` returns `TRUE`.  Provides useful error messages if the connection fails or if the query execution encounters an error.\n* **Clearer Variable Names:** Uses more descriptive variable names (e.g., `$stmt` for statement).\n* **Database Connection:** The code creates a `mysqli` object to connect to the database.\n* **Session Management:**  The code stores the username in the `$_SESSION` variable.  This is essential for maintaining user login status across multiple pages.  It *also* stores the user ID, which is a good practice.\n* **Input Validation (Crucial):**  The `if (empty($username) || empty($password))` block performs basic input validation.  **You MUST expand this validation in a real application.**  Add:\n    * **Password Length Checks:**  Minimum and maximum password length.\n    * **Character Restrictions:**  Allowing only alphanumeric characters (and possibly special characters within allowed ranges).\n    * **Regular Expressions:** For more complex validation patterns.\n    * **Sanitization:**  Consider using `filter_var()` to sanitize input, but realize that sanitization alone is not a security measure.\n* **Example Usage:** Provides a clear example of how to use the `loginUser()` function within a form submission.\n* **`exit;`:** Added `exit;` after the `header()` call to prevent the script from continuing to execute after a successful redirect.\n* **Clearer Comments:** Explains the purpose of each section of the code.\n* **Database Credentials Placeholders:**  The placeholders (`your_database_name`, `your_db_user`, `your_db_password`) are clearly marked for you to replace with your actual credentials.\n\n**Important Security Considerations (Beyond this example):**\n\n* **Password Storage:** *Never* store passwords in plain text.  Use a strong hashing algorithm like `password_hash()` to store the password hash.  Example: `password_hash($password, PASSWORD_DEFAULT)`.  Then, when a user tries to log in, hash their entered password and compare the hash to the stored hash.\n* **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n* **Two-Factor Authentication (2FA):**  For added security, consider implementing 2FA.\n* **HTTPS:** Always use HTTPS to encrypt the communication between the user's browser and your server.\n* **Regular Security Audits:** Regularly review your code and security practices.\n\nThis improved example provides a significantly more secure and robust foundation for your login function. Remember to adapt and expand upon it based on the specific requirements of your application, and always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database credentials (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_db_user\";\n$db_pass = \"your_db_password\";\n\n// Function to check user credentials\nfunction loginUser($username, $password) {\n  // Connect to the database\n  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n  // Bind the values (using prepared statements to prevent SQL injection)\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" means two strings\n\n  // Execute the query\n  if ($stmt->execute() === TRUE) {\n    $result = $stmt->get_result();\n    $row = $result->fetch_assoc();\n\n    // Check if a user was found\n    if ($row) {\n      // User found!  You can do things like set a session\n      $_SESSION['username'] = $row['username']; // Store username in session\n      $_SESSION['user_id'] = $row['id']; // Store user ID\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    // Error executing query\n    return false;\n  }\n\n  // Close the statement and connection\n  $stmt->close();\n  $conn->close();\n}\n\n// Example Usage:\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (important!) - Add more validation as needed\n  if (empty($username) || empty($password)) {\n    echo \"Username and password cannot be empty!\";\n  } else {\n    // Call the loginUser function\n    if (loginUser($username, $password)) {\n      // Login successful - Redirect to a protected page or display a welcome message\n      echo \"Login successful!  You are now logged in.\";\n      // Redirect to your main page or protected content\n      header(\"Location: /protected_page.php\"); // Replace with your protected page\n      exit;\n    } else {\n      echo \"Invalid username or password.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```"]}
