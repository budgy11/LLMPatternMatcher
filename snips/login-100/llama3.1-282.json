{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function in PHP:\n```php\n<?php\n\n// Define the database connection details\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"your_database_name\";\n\n// Create a connection to the database\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check if the connection was successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    // Hash the password for security\n    $hashed_password = hash('sha256', $password);\n\n    // Query the database to check if the username and hashed password match\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$hashed_password'\";\n    $result = $conn->query($sql);\n\n    // Check if there is a match\n    if ($result->num_rows > 0) {\n        // If there is a match, retrieve the user's data and return it\n        while ($row = $result->fetch_assoc()) {\n            return array(\n                \"id\" => $row[\"id\"],\n                \"username\" => $row[\"username\"],\n                \"email\" => $row[\"email\"]\n            );\n        }\n    } else {\n        // If there is no match, return false\n        return false;\n    }\n}\n\n// Example usage:\n$username = \"your_username\";\n$password = \"your_password\";\n\n$user_data = login_user($username, $password);\n\nif ($user_data) {\n    print(\"Login successful! User data:\");\n    print_r($user_data);\n} else {\n    print(\"Invalid username or password.\");\n}\n?>\n```\nThis code assumes you have a database table called `users` with columns for `id`, `username`, `email`, and `password`. You should replace the placeholders in the code (`$servername`, `$username`, `$password`, etc.) with your actual database connection details.\n\n**Note:** This is a very basic example, and you should never use this code as-is in a production environment. In a real-world application, you would want to:\n\n* Use prepared statements to prevent SQL injection attacks\n* Hash the password using a more secure algorithm (e.g., bcrypt)\n* Store the hashed password securely (e.g., using a salted hash)\n\nAlso, consider using a PHP framework like Laravel or CodeIgniter to handle user authentication and database interactions in a more secure and maintainable way.", "code_blocks": ["```php\n<?php\n\n// Define the database connection details\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"your_database_name\";\n\n// Create a connection to the database\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check if the connection was successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    // Hash the password for security\n    $hashed_password = hash('sha256', $password);\n\n    // Query the database to check if the username and hashed password match\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password = '$hashed_password'\";\n    $result = $conn->query($sql);\n\n    // Check if there is a match\n    if ($result->num_rows > 0) {\n        // If there is a match, retrieve the user's data and return it\n        while ($row = $result->fetch_assoc()) {\n            return array(\n                \"id\" => $row[\"id\"],\n                \"username\" => $row[\"username\"],\n                \"email\" => $row[\"email\"]\n            );\n        }\n    } else {\n        // If there is no match, return false\n        return false;\n    }\n}\n\n// Example usage:\n$username = \"your_username\";\n$password = \"your_password\";\n\n$user_data = login_user($username, $password);\n\nif ($user_data) {\n    print(\"Login successful! User data:\");\n    print_r($user_data);\n} else {\n    print(\"Invalid username or password.\");\n}\n?>\n```"]}
