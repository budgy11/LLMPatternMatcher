{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function using PHP and MySQL:\n\n**Note:** This is just a basic example, in a real-world application you should use prepared statements to prevent SQL injection.\n\n```php\n<?php\n// Connect to database\n$conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database\");\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\nfunction login_user($email, $password) {\n    global $conn;\n\n    // Escape input to prevent SQL injection\n    $email = mysqli_real_escape_string($conn, $email);\n    $password = mysqli_real_escape_string($conn, $password);\n\n    // Query the database for the user's credentials\n    $sql = \"SELECT * FROM users WHERE email = '$email'\";\n    $result = mysqli_query($conn, $sql);\n\n    if (mysqli_num_rows($result) > 0) {\n        while ($row = mysqli_fetch_assoc($result)) {\n            // Check if the entered password matches the stored one\n            if (password_verify($password, $row['password'])) {\n                return true; // Login successful\n            }\n        }\n    }\n\n    return false; // Login failed\n}\n\n// Example usage:\nif (isset($_POST['login'])) {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (login_user($email, $password)) {\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid email or password\";\n    }\n}\n?>\n```\n\n**Security notes:**\n\n1. **Hashing passwords:** In this example, we're using `password_verify()` to check the user's entered password against the stored hash. This is a secure way to handle passwords.\n2. **Preventing SQL injection:** We're using `mysqli_real_escape_string()` to escape any special characters in the input data.\n\n**Form usage:**\n\nCreate an HTML form with email and password inputs, and submit it to this script:\n```html\n<form action=\"\" method=\"post\">\n    <input type=\"text\" name=\"email\" placeholder=\"Email\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <button type=\"submit\" name=\"login\">Login</button>\n</form>\n```\n\nRemember to replace the placeholders (`localhost`, `username`, `password`, and `database`) with your actual database credentials.\n\nPlease note that this is a basic example, in a real-world application you should also consider adding features like:\n\n* Salting passwords\n* Token-based authentication (e.g. using JWT)\n* Session management\n* Error handling", "code_blocks": ["```php\n<?php\n// Connect to database\n$conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database\");\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\nfunction login_user($email, $password) {\n    global $conn;\n\n    // Escape input to prevent SQL injection\n    $email = mysqli_real_escape_string($conn, $email);\n    $password = mysqli_real_escape_string($conn, $password);\n\n    // Query the database for the user's credentials\n    $sql = \"SELECT * FROM users WHERE email = '$email'\";\n    $result = mysqli_query($conn, $sql);\n\n    if (mysqli_num_rows($result) > 0) {\n        while ($row = mysqli_fetch_assoc($result)) {\n            // Check if the entered password matches the stored one\n            if (password_verify($password, $row['password'])) {\n                return true; // Login successful\n            }\n        }\n    }\n\n    return false; // Login failed\n}\n\n// Example usage:\nif (isset($_POST['login'])) {\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (login_user($email, $password)) {\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid email or password\";\n    }\n}\n?>\n```", null]}
