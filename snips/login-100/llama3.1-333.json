{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This code will handle user authentication by verifying the provided username and password against a predefined array of users.\n\n**Important Notes:**\n\n* In a real-world application, you should use a secure method to store passwords (e.g., hash them using `password_hash()`).\n* For demonstration purposes, we'll be storing passwords in plain text.\n* This example does not include any error handling or security measures beyond basic validation. You should add these features according to your requirements.\n\n**UserLogin.php**\n```php\n<?php\n\n// Array of users (in a real app, use a database)\n$users = [\n    'admin' => [\n        'password' => 'password123',\n        'role' => 'admin'\n    ],\n    'user1' => [\n        'password' => 'user1pass',\n        'role' => 'normal user'\n    ]\n];\n\nfunction loginUser($username, $password) {\n    // Validate input\n    if (empty($username) || empty($password)) {\n        return false; // Return false for invalid username or password\n    }\n\n    // Get the corresponding user from the array\n    $user = $users[$username] ?? null;\n\n    if ($user && password_verify($password, $user['password'])) {\n        // Validate roles (optional)\n        if (!in_array($user['role'], ['admin', 'normal user'])) {\n            return false; // Invalid role\n        }\n\n        // Login successful!\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $username;\n        $_SESSION['role'] = $user['role'];\n\n        return true;\n    } else {\n        return false; // Incorrect username or password\n    }\n}\n\n// Example usage:\nif (loginUser('admin', 'password123')) {\n    echo \"Login successful!\";\n} else {\n    echo \"Incorrect username or password.\";\n}\n```\n**Explanation:**\n\n1. We define an array of users with their corresponding passwords and roles.\n2. The `loginUser` function takes two arguments, `$username` and `$password`.\n3. It first validates the input by checking if either is empty. If so, it returns `false`.\n4. Then, it tries to retrieve the user from the array using their username. If the user exists, it verifies their password using `password_verify()`. If both checks pass, it sets session variables for the logged-in user.\n5. Finally, we demonstrate an example usage of the function.\n\nRemember to adjust this code according to your specific needs and security requirements.", "code_blocks": ["```php\n<?php\n\n// Array of users (in a real app, use a database)\n$users = [\n    'admin' => [\n        'password' => 'password123',\n        'role' => 'admin'\n    ],\n    'user1' => [\n        'password' => 'user1pass',\n        'role' => 'normal user'\n    ]\n];\n\nfunction loginUser($username, $password) {\n    // Validate input\n    if (empty($username) || empty($password)) {\n        return false; // Return false for invalid username or password\n    }\n\n    // Get the corresponding user from the array\n    $user = $users[$username] ?? null;\n\n    if ($user && password_verify($password, $user['password'])) {\n        // Validate roles (optional)\n        if (!in_array($user['role'], ['admin', 'normal user'])) {\n            return false; // Invalid role\n        }\n\n        // Login successful!\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $username;\n        $_SESSION['role'] = $user['role'];\n\n        return true;\n    } else {\n        return false; // Incorrect username or password\n    }\n}\n\n// Example usage:\nif (loginUser('admin', 'password123')) {\n    echo \"Login successful!\";\n} else {\n    echo \"Incorrect username or password.\";\n}\n```"]}
