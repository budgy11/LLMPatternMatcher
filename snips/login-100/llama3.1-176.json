{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function using PHP, MySQL, and PDO for database interactions.\n\n### Requirements\n\n* PHP 7.2+\n* MySQL 5.6+\n* PDO extension enabled\n* A database with a `users` table (see below)\n\n### Database Schema\n\nCreate the following table in your MySQL database:\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n```\n**user_login.php**\n```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\ntry {\n    // Establish database connection\n    $dsn = \"mysql:host=$dbHost;dbname=$dbName\";\n    $pdo = new PDO($dsn, $dbUsername, $dbPassword);\n\n    // Define the user login function\n    function loginUser($username, $password) {\n        global $pdo;\n\n        // Prepare and execute query to retrieve user data\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        // Fetch the user data\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Check if user exists and password matches\n        if ($user && password_verify($password, $user['password'])) {\n            return true; // Login successful\n        } else {\n            return false; // Invalid username or password\n        }\n    }\n\n    // Example usage:\n    $username = 'john_doe';\n    $password = 'my_secret_password';\n\n    if (loginUser($username, $password)) {\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid username or password.\";\n    }\n\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n}\n\n?>\n```\n**Note:**\n\n* The `password_verify()` function is used for password hashing and verification. You should use a strong hashing algorithm like bcrypt, Argon2, or PBKDF2.\n* This example uses prepared statements with PDO for improved security.\n* Don't forget to replace the placeholders (`your_username`, `your_password`, etc.) with your actual database credentials.\n\nThis is a basic implementation of user login functionality. You may want to add additional features like:\n\n* User registration\n* Session management\n* Error handling and logging", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\ntry {\n    // Establish database connection\n    $dsn = \"mysql:host=$dbHost;dbname=$dbName\";\n    $pdo = new PDO($dsn, $dbUsername, $dbPassword);\n\n    // Define the user login function\n    function loginUser($username, $password) {\n        global $pdo;\n\n        // Prepare and execute query to retrieve user data\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        // Fetch the user data\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Check if user exists and password matches\n        if ($user && password_verify($password, $user['password'])) {\n            return true; // Login successful\n        } else {\n            return false; // Invalid username or password\n        }\n    }\n\n    // Example usage:\n    $username = 'john_doe';\n    $password = 'my_secret_password';\n\n    if (loginUser($username, $password)) {\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid username or password.\";\n    }\n\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n}\n\n?>\n```"]}
