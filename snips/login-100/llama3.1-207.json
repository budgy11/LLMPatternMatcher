{"prompt": "Create a user login function using php", "llm_output": "Here's an example of how you can create a simple user login system using PHP. This code includes functions for registering new users, logging in existing users, and resetting passwords.\n\n**Database Connection**\n\nBefore we begin, make sure to replace `localhost` with your database server name, `your_database_name` with the name of your database, `username` with the username of the MySQL user you created to manage this database, and `password` with the password for that user. You'll also need to create a table in your database named `users` with columns for the user's ID (`id`), email address (`email`), and password hash (`password`).\n\n```php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'username';\n$password = 'password';\n\n// Function to connect to database\nfunction dbConnect() {\n    global $host, $dbname, $username, $password;\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n        exit();\n    }\n}\n```\n\n**User Registration**\n\nHere's a function to register a new user:\n\n```php\n// Function to register a new user\nfunction registerUser($email, $password) {\n    global $host, $dbname, $username, $password;\n    $conn = dbConnect();\n\n    // Hash the password for storage in database\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        $query = \"INSERT INTO users (email, password) VALUES (:email, :password)\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        echo \"User registered successfully.\";\n    } catch(PDOException $e) {\n        echo \"Registration failed: \" . $e->getMessage();\n    }\n\n    $conn = null;\n}\n```\n\n**Login Function**\n\nHere's a function to login an existing user:\n\n```php\n// Function to login an existing user\nfunction loginUser($email, $password) {\n    global $host, $dbname, $username, $password;\n\n    $conn = dbConnect();\n    try {\n        $query = \"SELECT * FROM users WHERE email = :email\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($row = $stmt->fetch()) {\n            // Check password with hashed stored in database\n            if (password_verify($password, $row['password'])) {\n                echo \"Login successful. Welcome, \" . $email;\n                return true;\n            } else {\n                echo \"Invalid password.\";\n                return false;\n            }\n        } else {\n            echo \"Email not found.\";\n            return false;\n        }\n    } catch(PDOException $e) {\n        echo \"Login failed: \" . $e->getMessage();\n        return false;\n    }\n\n    $conn = null;\n}\n```\n\n**Password Reset Function (Optional)**\n\nHere's a function to reset a user's password. This example will use an email address to identify the user and send them a new password via email.\n\n```php\n// Function to reset a user's password\nfunction resetPassword($email, $newPassword) {\n    global $host, $dbname, $username, $password;\n\n    $conn = dbConnect();\n\n    // Hash the new password for storage in database\n    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n\n    try {\n        $query = \"UPDATE users SET password = :password WHERE email = :email\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedNewPassword);\n        $stmt->execute();\n\n        echo \"Password reset successfully.\";\n    } catch(PDOException $e) {\n        echo \"Password reset failed: \" . $e->getMessage();\n    }\n\n    $conn = null;\n}\n```\n\n**Usage**\n\nTo use these functions, call them with the required parameters. For example:\n\n```php\nregisterUser('user@example.com', 'password123');\nloginUser('user@example.com', 'password123');\n\n// Optionally reset a user's password via email:\nresetPassword('user@example.com', 'newpassword456');\n```\n\nRemember to modify these functions according to your specific database schema and password hashing requirements. This example uses `PDO` for database interactions, but you can use other libraries or drivers as needed.\n\n**Security Notes**\n\n- Always hash passwords using a secure algorithm like `PASSWORD_DEFAULT`.\n- Never store plain text passwords in your database.\n- Use prepared statements with parameterized queries to prevent SQL injection attacks.\n- Be cautious when handling sensitive data like passwords and never expose them directly.", "code_blocks": ["```php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'username';\n$password = 'password';\n\n// Function to connect to database\nfunction dbConnect() {\n    global $host, $dbname, $username, $password;\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n        exit();\n    }\n}\n```", "```php\n// Function to register a new user\nfunction registerUser($email, $password) {\n    global $host, $dbname, $username, $password;\n    $conn = dbConnect();\n\n    // Hash the password for storage in database\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        $query = \"INSERT INTO users (email, password) VALUES (:email, :password)\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        echo \"User registered successfully.\";\n    } catch(PDOException $e) {\n        echo \"Registration failed: \" . $e->getMessage();\n    }\n\n    $conn = null;\n}\n```", "```php\n// Function to login an existing user\nfunction loginUser($email, $password) {\n    global $host, $dbname, $username, $password;\n\n    $conn = dbConnect();\n    try {\n        $query = \"SELECT * FROM users WHERE email = :email\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n\n        if ($row = $stmt->fetch()) {\n            // Check password with hashed stored in database\n            if (password_verify($password, $row['password'])) {\n                echo \"Login successful. Welcome, \" . $email;\n                return true;\n            } else {\n                echo \"Invalid password.\";\n                return false;\n            }\n        } else {\n            echo \"Email not found.\";\n            return false;\n        }\n    } catch(PDOException $e) {\n        echo \"Login failed: \" . $e->getMessage();\n        return false;\n    }\n\n    $conn = null;\n}\n```", "```php\n// Function to reset a user's password\nfunction resetPassword($email, $newPassword) {\n    global $host, $dbname, $username, $password;\n\n    $conn = dbConnect();\n\n    // Hash the new password for storage in database\n    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n\n    try {\n        $query = \"UPDATE users SET password = :password WHERE email = :email\";\n        $stmt = $conn->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedNewPassword);\n        $stmt->execute();\n\n        echo \"Password reset successfully.\";\n    } catch(PDOException $e) {\n        echo \"Password reset failed: \" . $e->getMessage();\n    }\n\n    $conn = null;\n}\n```", "```php\nregisterUser('user@example.com', 'password123');\nloginUser('user@example.com', 'password123');\n\n// Optionally reset a user's password via email:\nresetPassword('user@example.com', 'newpassword456');\n```"]}
