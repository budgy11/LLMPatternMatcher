{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function in PHP:\n\n**`login.php`**\n```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to login user\nfunction login_user($email, $password) {\n  global $conn;\n\n  // Prepare query\n  $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email AND password = :password');\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $password);\n\n  try {\n    // Execute query\n    $stmt->execute();\n\n    // Get user data\n    $user_data = $stmt->fetch();\n\n    if ($user_data) {\n      // User exists, login successful\n      return $user_data;\n    } else {\n      // User does not exist or password is incorrect\n      return false;\n    }\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password123';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n  // Login successful\n  echo \"Welcome, {$user_data['name']}!\";\n} else {\n  // Login failed\n  echo \"Invalid email or password\";\n}\n\n?>\n```\n**How it works:**\n\n1. The function `login_user` takes two parameters: `$email` and `$password`.\n2. It connects to the database using PDO.\n3. It prepares a query to select the user data from the `users` table where the email matches and the password matches (hashed or plain text, depending on your implementation).\n4. If the user exists and the password is correct, it returns the user data as an array.\n5. If the user does not exist or the password is incorrect, it returns `false`.\n\n**Security considerations:**\n\n1. **Password hashing:** Make sure to hash passwords using a secure algorithm like bcrypt, Argon2, or PBKDF2.\n2. **SQL injection protection:** Use prepared statements and parameterized queries to prevent SQL injection attacks.\n3. **Input validation:** Validate user input (email and password) on the client-side and server-side to prevent malicious inputs.\n\nNote that this is a basic example and you should adapt it to your specific use case and security requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to login user\nfunction login_user($email, $password) {\n  global $conn;\n\n  // Prepare query\n  $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email AND password = :password');\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $password);\n\n  try {\n    // Execute query\n    $stmt->execute();\n\n    // Get user data\n    $user_data = $stmt->fetch();\n\n    if ($user_data) {\n      // User exists, login successful\n      return $user_data;\n    } else {\n      // User does not exist or password is incorrect\n      return false;\n    }\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password123';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n  // Login successful\n  echo \"Welcome, {$user_data['name']}!\";\n} else {\n  // Login failed\n  echo \"Invalid email or password\";\n}\n\n?>\n```"]}
