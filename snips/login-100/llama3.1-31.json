{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login function using PHP. The function will validate the username and password against a hardcoded array, but you should replace this with your own database query or storage solution.\n\n### `login.php` file:\n```php\n<?php\n\n// Define the users array (replace with database query or storage)\n$users = [\n    'john' => [\n        'password' => '12345',\n        'role' => 'admin'\n    ],\n    'jane' => [\n        'password' => '67890',\n        'role' => 'user'\n    ]\n];\n\nfunction login($username, $password) {\n    // Check if the username exists in the users array\n    if (array_key_exists($username, $users)) {\n        // Hash the provided password for comparison\n        $hashedPassword = hash('sha256', $password);\n\n        // Compare the hashed password with the stored one\n        if ($hashedPassword === $users[$username]['password']) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        // Username not found in the users array\n        return false;\n    }\n}\n\nfunction validateRole($username, $role) {\n    // Check if the username has the specified role\n    if (array_key_exists($username, $users)) {\n        return $users[$username]['role'] === $role;\n    } else {\n        return false;\n    }\n}\n```\n### Example Usage:\n\n```php\n// User login attempt\n$loggedIn = login('john', '12345');\n\nif ($loggedIn) {\n    echo \"Login successful!\";\n    \n    // Check role (e.g., admin or user)\n    if (validateRole('john', 'admin')) {\n        echo \"User has admin role.\";\n    } else {\n        echo \"User does not have admin role.\";\n    }\n} else {\n    echo \"Login failed. Incorrect username or password.\";\n}\n```\n### Notes:\n\n* In a real-world scenario, you should store passwords securely using a library like `password_hash()` and verify them using `password_verify()`.\n* This example uses an array for simplicity; replace it with your own database query or storage solution.\n* The role validation function (`validateRole`) can be used to restrict access to certain pages or functions based on the user's role.", "code_blocks": ["```php\n<?php\n\n// Define the users array (replace with database query or storage)\n$users = [\n    'john' => [\n        'password' => '12345',\n        'role' => 'admin'\n    ],\n    'jane' => [\n        'password' => '67890',\n        'role' => 'user'\n    ]\n];\n\nfunction login($username, $password) {\n    // Check if the username exists in the users array\n    if (array_key_exists($username, $users)) {\n        // Hash the provided password for comparison\n        $hashedPassword = hash('sha256', $password);\n\n        // Compare the hashed password with the stored one\n        if ($hashedPassword === $users[$username]['password']) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        // Username not found in the users array\n        return false;\n    }\n}\n\nfunction validateRole($username, $role) {\n    // Check if the username has the specified role\n    if (array_key_exists($username, $users)) {\n        return $users[$username]['role'] === $role;\n    } else {\n        return false;\n    }\n}\n```", "```php\n// User login attempt\n$loggedIn = login('john', '12345');\n\nif ($loggedIn) {\n    echo \"Login successful!\";\n    \n    // Check role (e.g., admin or user)\n    if (validateRole('john', 'admin')) {\n        echo \"User has admin role.\";\n    } else {\n        echo \"User does not have admin role.\";\n    }\n} else {\n    echo \"Login failed. Incorrect username or password.\";\n}\n```"]}
