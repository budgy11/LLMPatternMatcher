{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a simple user login function in PHP:\n\n```php\n<?php\n\n// Set database connection details\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\nfunction login($username, $password) {\n    global $conn;\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $username);\n\n    // Execute the query and fetch results\n    if ($stmt->execute()) {\n        $result = $stmt->fetch();\n\n        // Check if user exists in database\n        if ($result && password_verify($password, $result['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n?>\n```\n\nIn this example:\n\n1.  We first set up the database connection details at the top.\n2.  The `login` function takes in two parameters: `$username` and `$password`.\n3.  Inside the `login` function, we prepare an SQL query that selects all data from the `users` table where the `username` matches the provided one.\n4.  We then execute the prepared query using the `execute()` method.\n5.  If a result is found in the database, we use the `password_verify()` function to compare the stored password with the entered one.\n6.  If both match, we return `true`, indicating successful login.\n\n**Please note:**\n\n*   Make sure to replace `'your_database_name'`, `'your_username'`, and `'your_password'` with your actual database name, username, and password.\n*   For production environments, consider using prepared statements with parameterized queries (as shown above) to prevent SQL injection attacks.\n*   Passwords should always be stored securely in the database (e.g., hashed with `password_hash()`) for improved security.", "code_blocks": ["```php\n<?php\n\n// Set database connection details\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\nfunction login($username, $password) {\n    global $conn;\n\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $username);\n\n    // Execute the query and fetch results\n    if ($stmt->execute()) {\n        $result = $stmt->fetch();\n\n        // Check if user exists in database\n        if ($result && password_verify($password, $result['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n?>\n```"]}
