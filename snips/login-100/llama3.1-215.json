{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n**Database Table Structure**\n---------------------------\n\nFor this example, let's assume we have the following database table structure:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    username VARCHAR(255),\n    password VARCHAR(255)\n);\n```\n\n**Login Function Code**\n-----------------------\n\n```php\nfunction login($username, $password) {\n    // Database connection settings\n    $dbHost = 'localhost';\n    $dbName = 'mydatabase';\n    $dbUser = 'myuser';\n    $dbPass = 'mypassword';\n\n    // Create a database connection\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare the SQL query to select user data from the database\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->bindParam(':username', $username);\n\n        // Execute the prepared statement with the provided credentials\n        $stmt->execute();\n\n        // Fetch the selected user data\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Check if a matching user exists in the database and if their password matches\n        if ($user && password_verify($password, $user['password'])) {\n            return true;\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        return false;\n    }\n\n    // Close the database connection if it was opened\n    if ($conn !== null) {\n        $conn = null;\n    }\n}\n```\n\n**Example Usage**\n------------------\n\n```php\n$username = 'myusername';\n$password = 'mypassword';\n\nif (login($username, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid username or password';\n}\n```\n\nNote that in a production environment, you should never store passwords in plain text. Always use a secure method for storing and comparing passwords.\n\nAlso note that this is a simplified example and may need to be adapted to fit the specifics of your application and database.", "code_blocks": [null, "```php\nfunction login($username, $password) {\n    // Database connection settings\n    $dbHost = 'localhost';\n    $dbName = 'mydatabase';\n    $dbUser = 'myuser';\n    $dbPass = 'mypassword';\n\n    // Create a database connection\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare the SQL query to select user data from the database\n        $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n        $stmt->bindParam(':username', $username);\n\n        // Execute the prepared statement with the provided credentials\n        $stmt->execute();\n\n        // Fetch the selected user data\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Check if a matching user exists in the database and if their password matches\n        if ($user && password_verify($password, $user['password'])) {\n            return true;\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        return false;\n    }\n\n    // Close the database connection if it was opened\n    if ($conn !== null) {\n        $conn = null;\n    }\n}\n```", "```php\n$username = 'myusername';\n$password = 'mypassword';\n\nif (login($username, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid username or password';\n}\n```"]}
