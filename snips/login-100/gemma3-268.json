{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual details)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// Form handling\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (basic, for demonstration purposes)\n  if (empty($username) || empty($password)) {\n    $error_message = \"Username and password are required.\";\n  } else {\n    // Database query (use prepared statements for security - see important note)\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, username, password FROM users WHERE username = ?;\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $username); // 's' indicates a string\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n      $error_message = \"Invalid username or password.\";\n    } else {\n      $row = $result->fetch_assoc();\n      // Hash the password from the database and compare\n      if (password_verify($password, $row[\"password\"])) {\n        // Login successful\n        $_SESSION[\"user_id\"] = $row[\"id\"];\n        $_SESSION[\"username\"] = $row[\"username\"];\n        header(\"Location: welcome.php\"); // Redirect to a welcome page\n        exit();\n      } else {\n        $error_message = \"Invalid username or password.\";\n      }\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error_message)) { ?>\n    <p style=\"color: red;\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    Username: <input type=\"text\" name=\"username\" required>\n    Password: <input type=\"password\" name=\"password\" required>\n    <button type=\"submit\">Login</button>\n  </form>\n\n  <p>Don't have an account? <a href=\"register.php\">Register</a></p>\n</body>\n</html>\n```\n\n**Explanation:**\n\n1.  **`session_start();`**: Starts the PHP session, which is crucial for maintaining user login status.\n\n2.  **Database Connection:**\n    *   `$db_host`, `$db_name`, `$db_user`, `$db_password`:  Replace these placeholders with your actual database credentials.\n    *   `new mysqli(...)`: Creates a connection to your MySQL database.\n\n3.  **Form Handling (`if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")`)**: This code executes only when the form is submitted.\n\n4.  **Input Validation**:\n    *   `empty($username) || empty($password)`: Checks if both username and password fields are empty.  A more robust validation would include checking for valid character types, length restrictions, and potentially patterns (e.g., for email addresses).\n\n5.  **Database Query (Prepared Statement):**\n    *   `$sql = \"SELECT id, username, password FROM users WHERE username = ?;\";`:  This constructs the SQL query. The `?` is a placeholder for the username.  **IMPORTANT: Using prepared statements is essential for security to prevent SQL injection attacks.**\n    *   `$stmt = $conn->prepare($sql);`: Prepares the SQL statement.\n    *   `$stmt->bind_param(\"s\", $username);`: Binds the `$username` variable to the placeholder in the SQL statement.  The `\"s\"` indicates that `$username` is a string.  This also prevents SQL injection.\n    *   `$stmt->execute();`: Executes the prepared statement.\n    *   `$result = $result->get_result();`: Gets the result set from the database.\n\n6.  **Check for Valid User:**\n    *   `$result->num_rows == 0`: Checks if the query returned any rows.  If not, the username doesn't exist in the database.\n\n7.  **Password Verification:**\n    *   `password_verify($password, $row[\"password\"])`:  This is the *correct* way to verify a password.  `password_verify()` takes the user-provided password and the *hashed* password from the database and compares them.  It automatically handles the hashing, so you don't need to manually hash the password.\n    *   **Important:**  Your database *must* store passwords as hashed values (using a strong hashing algorithm like bcrypt or Argon2).  Storing passwords in plain text is a massive security risk.\n\n8.  **Login Success:**\n    *   `$_SESSION[\"user_id\"] = $row[\"id\"];`: Stores the user's ID in the session.\n    *   `$_SESSION[\"username\"] = $row[\"username\"];`: Stores the username in the session.\n    *   `header(\"Location: welcome.php\");`:  Redirects the user to a welcome page (`welcome.php`).\n    *   `exit();`: Stops further execution of the script after the redirect.\n\n9.  **HTML Form:**\n    *   The HTML form uses the `method=\"post\"` attribute to submit data using the POST method.\n    *   `action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\"`:  Specifies that the form data should be submitted to the same script. `htmlspecialchars()` is used to escape any potentially malicious characters in the URL.\n    *   `required`:  Adds the `required` attribute to the input fields, which means that the user must fill in these fields before the form can be submitted.\n\n**Important Security Considerations & Best Practices:**\n\n*   **Hashing Passwords:**  **Never** store passwords in plain text in your database.  Use a strong hashing algorithm (bcrypt or Argon2) to hash passwords before storing them.  There are PHP libraries that can help you do this.  `password_hash()` in PHP is designed for this purpose.  Example:\n    ```php\n    $password = $_POST[\"password\"];\n    $hashed_password = password_hash($password, PASSWORD_BCRYPT); // or PASSWORD_ARGON2\n    // Then insert $hashed_password into the database.\n    ```\n*   **Prepared Statements (SQL Injection Prevention):**  Always use prepared statements with placeholders to prevent SQL injection attacks.  This is absolutely critical.\n*   **Input Validation:** While the basic validation in the example is good, you should implement more robust validation, including:\n    *   Checking for valid character types (alphanumeric, etc.).\n    *   Setting length restrictions.\n    *   Using regular expressions to match expected patterns (e.g., for email addresses).\n*   **Session Management:** Secure your session management by setting the `session.cookie_secure` and `session.cookie_httponly` settings in your `php.ini` file.\n*   **HTTPS:**  Always use HTTPS to encrypt communication between the user's browser and your server.  This protects user credentials from being intercepted.\n*   **Error Handling:** Implement more robust error handling to catch database errors, invalid input, and other potential problems.\n*   **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n\n**How to Use:**\n\n1.  **Replace Placeholders:** Update the database connection details (`$db_host`, `$db_name`, `$db_user`, `$db_password`) with your actual values.\n\n2.  **Create `users` Table:**  Make sure you have a `users` table in your MySQL database with columns for `id`, `username`, and `password` (and any other user data you need).\n\n3.  **Hashing Passwords:**  Before inserting new user passwords into the database, hash them using `password_hash()` as shown above.\n\n4.  **`welcome.php`:** Create a `welcome.php` file that displays a welcome message to the logged-in user.\n\n5.  **`register.php`:** Create a `register.php` file for user registration.\n\nThis detailed explanation and the included code provide a strong foundation for building a secure login system in PHP. Remember to prioritize security best practices to protect your users' data.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual details)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// Form handling\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (basic, for demonstration purposes)\n  if (empty($username) || empty($password)) {\n    $error_message = \"Username and password are required.\";\n  } else {\n    // Database query (use prepared statements for security - see important note)\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, username, password FROM users WHERE username = ?;\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $username); // 's' indicates a string\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n      $error_message = \"Invalid username or password.\";\n    } else {\n      $row = $result->fetch_assoc();\n      // Hash the password from the database and compare\n      if (password_verify($password, $row[\"password\"])) {\n        // Login successful\n        $_SESSION[\"user_id\"] = $row[\"id\"];\n        $_SESSION[\"username\"] = $row[\"username\"];\n        header(\"Location: welcome.php\"); // Redirect to a welcome page\n        exit();\n      } else {\n        $error_message = \"Invalid username or password.\";\n      }\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error_message)) { ?>\n    <p style=\"color: red;\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    Username: <input type=\"text\" name=\"username\" required>\n    Password: <input type=\"password\" name=\"password\" required>\n    <button type=\"submit\">Login</button>\n  </form>\n\n  <p>Don't have an account? <a href=\"register.php\">Register</a></p>\n</body>\n</html>\n```"]}
