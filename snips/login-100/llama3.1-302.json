{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n### Database Schema\n\nFor this example, we assume you have a database table named `users` with the following structure:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Code\n\nCreate a file named `login.php` and add the following code:\n\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\n$conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n\n// Function to login user\nfunction login($username, $password) {\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    \n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    \n    // Execute query\n    $stmt->execute();\n    \n    // Fetch result\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    // Check if user exists and password is correct\n    if ($result && password_verify($password, $result['password'])) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n```\n\n### Security Notes\n\n*   Use prepared statements to prevent SQL injection attacks.\n*   Store passwords securely using a hashing algorithm like `password_hash()` and verify them using `password_verify()`.\n*   Use a secure way to store sensitive data like database credentials.\n\nRemember to replace the placeholders (`your_database_host`, `your_database_username`, etc.) with your actual database details.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to database\n$conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n\n// Function to login user\nfunction login($username, $password) {\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    \n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    \n    // Execute query\n    $stmt->execute();\n    \n    // Fetch result\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    // Check if user exists and password is correct\n    if ($result && password_verify($password, $result['password'])) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n```"]}
