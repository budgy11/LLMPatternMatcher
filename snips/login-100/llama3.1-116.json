{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP. This code includes form validation, error handling, and secure password hashing.\n\n**Note:** This is just a simple example and should not be used for production purposes without further security measures (e.g., salting, hashing).\n\n### Database Setup\n\nCreate a database with the following schema:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL\n);\n```\n\n**user_login.php**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Error handling function\nfunction error($message, $code = 1) {\n    http_response_code($code);\n    echo json_encode(array('error' => $message));\n    exit;\n}\n\n// Database connection\ntry {\n    $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n} catch (PDOException $e) {\n    error('Database connection failed: ' . $e->getMessage());\n}\n\n// Form validation function\nfunction validate_form($data) {\n    if (!isset($_POST['username']) || !isset($_POST['password'])) {\n        error('Missing required fields', 400);\n    }\n    \n    if (empty($_POST['username']) || empty($_POST['password'])) {\n        error('Username and password are required');\n    }\n    \n    $username = $_POST['username'];\n    $password = $_POST['password'];\n    \n    if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n        error('Invalid username', 400);\n    }\n    \n    if (strlen($password) < 8) {\n        error('Password must be at least 8 characters long', 400);\n    }\n}\n\n// Hashing and verifying password function\nfunction hash_password($plain_text) {\n    return crypt($plain_text, 'your_salt');\n}\n\nfunction verify_password($hashed, $plain_text) {\n    if (hash_equals($hashed, crypt($plain_text, 'your_salt'))) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Login function\nfunction login_user() {\n    validate_form($_POST);\n    \n    // Retrieve user data from database\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $_POST['username']);\n    $stmt->execute();\n    \n    $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$user_data) {\n        error('Invalid username or password');\n    }\n    \n    // Verify password\n    if (verify_password($user_data['password_hash'], $_POST['password'])) {\n        // Successful login, create session and redirect to dashboard\n        session_start();\n        $_SESSION['username'] = $user_data['username'];\n        header('Location: /dashboard');\n        exit;\n    } else {\n        error('Invalid username or password', 400);\n    }\n}\n\n// Login form handler\nif (isset($_POST['login'])) {\n    login_user();\n} elseif (isset($_GET['logout'])) {\n    // Destroy session and redirect to login page\n    session_destroy();\n    header('Location: /login');\n    exit;\n}\n?>\n```\n\n**index.php**\n```php\n<?php\nrequire 'user_login.php';\n\n// Display login form if user is not logged in\nif (!isset($_SESSION['username'])) {\n?>\n    <form action=\"\" method=\"post\">\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\"><br><br>\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\" name=\"login\">Login</button>\n    </form>\n<?php\n} else {\n?>\n    <!-- Display dashboard content -->\n    Welcome, <?php echo $_SESSION['username']; ?>\n    \n    <a href=\"?logout=true\">Logout</a>\n<?php\n}\n?>\n```\n\nRemember to replace `your_host`, `your_user`, `your_password`, and `your_database` with your actual database credentials. This is just a basic example; consider implementing additional security measures, such as salting and hashing passwords, for production use.\n\n**Do not forget to always sanitize and validate user input!**", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Error handling function\nfunction error($message, $code = 1) {\n    http_response_code($code);\n    echo json_encode(array('error' => $message));\n    exit;\n}\n\n// Database connection\ntry {\n    $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n} catch (PDOException $e) {\n    error('Database connection failed: ' . $e->getMessage());\n}\n\n// Form validation function\nfunction validate_form($data) {\n    if (!isset($_POST['username']) || !isset($_POST['password'])) {\n        error('Missing required fields', 400);\n    }\n    \n    if (empty($_POST['username']) || empty($_POST['password'])) {\n        error('Username and password are required');\n    }\n    \n    $username = $_POST['username'];\n    $password = $_POST['password'];\n    \n    if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n        error('Invalid username', 400);\n    }\n    \n    if (strlen($password) < 8) {\n        error('Password must be at least 8 characters long', 400);\n    }\n}\n\n// Hashing and verifying password function\nfunction hash_password($plain_text) {\n    return crypt($plain_text, 'your_salt');\n}\n\nfunction verify_password($hashed, $plain_text) {\n    if (hash_equals($hashed, crypt($plain_text, 'your_salt'))) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Login function\nfunction login_user() {\n    validate_form($_POST);\n    \n    // Retrieve user data from database\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $_POST['username']);\n    $stmt->execute();\n    \n    $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$user_data) {\n        error('Invalid username or password');\n    }\n    \n    // Verify password\n    if (verify_password($user_data['password_hash'], $_POST['password'])) {\n        // Successful login, create session and redirect to dashboard\n        session_start();\n        $_SESSION['username'] = $user_data['username'];\n        header('Location: /dashboard');\n        exit;\n    } else {\n        error('Invalid username or password', 400);\n    }\n}\n\n// Login form handler\nif (isset($_POST['login'])) {\n    login_user();\n} elseif (isset($_GET['logout'])) {\n    // Destroy session and redirect to login page\n    session_destroy();\n    header('Location: /login');\n    exit;\n}\n?>\n```", "```php\n<?php\nrequire 'user_login.php';\n\n// Display login form if user is not logged in\nif (!isset($_SESSION['username'])) {\n?>\n    <form action=\"\" method=\"post\">\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\"><br><br>\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\" name=\"login\">Login</button>\n    </form>\n<?php\n} else {\n?>\n    <!-- Display dashboard content -->\n    Welcome, <?php echo $_SESSION['username']; ?>\n    \n    <a href=\"?logout=true\">Logout</a>\n<?php\n}\n?>\n```"]}
