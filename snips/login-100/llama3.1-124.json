{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This function will check the username and password against a predefined array of users.\n\n### `users.php`\n\n```php\n// Users Array\n$users = [\n    'admin' => ['password' => '$2y$10$NjQ4ZTBlMmYzMDc3NmJiZS1wY0d6', 'name' => 'Admin'],\n    'user'  => ['password' => '$2y$10$tWJvVgF2RlKtRkZfY0xuOu', 'name' => 'User']\n];\n\nfunction login($username, $password) {\n    // Check if username exists\n    if (!isset($users[$username])) {\n        return false;\n    }\n\n    // Get stored password hash and user details\n    $storedPassword = $users[$username]['password'];\n    $userDetails   = $users[$username];\n\n    // Compare provided password with stored hash using password_verify()\n    if (password_verify($password, $storedPassword)) {\n        // If passwords match, return user details\n        return $userDetails;\n    } else {\n        // Password mismatch, return false\n        return false;\n    }\n}\n```\n\n### Using the `login()` function\n\n```php\n// Login form handler\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Call login() function and store result in $user variable\n    $user = login($username, $password);\n\n    if ($user) {\n        // Passwords match, redirect to secure area or display welcome message\n        echo 'Welcome, ' . $user['name'] . '!';\n    } else {\n        // Password mismatch, display error message\n        echo 'Incorrect username or password.';\n    }\n}\n```\n\n### Notes\n\n*   This example uses `password_verify()` to securely compare the provided password with the stored hash.\n*   The passwords are hashed using `hash('sha256', $password)` for demonstration purposes. In a real application, use PHP's built-in password_hash() function.\n*   Always store user passwords securely using a suitable hashing algorithm and never store them in plain text.\n\nRemember to implement proper error handling and security measures when working with user authentication in your production environment.", "code_blocks": ["```php\n// Users Array\n$users = [\n    'admin' => ['password' => '$2y$10$NjQ4ZTBlMmYzMDc3NmJiZS1wY0d6', 'name' => 'Admin'],\n    'user'  => ['password' => '$2y$10$tWJvVgF2RlKtRkZfY0xuOu', 'name' => 'User']\n];\n\nfunction login($username, $password) {\n    // Check if username exists\n    if (!isset($users[$username])) {\n        return false;\n    }\n\n    // Get stored password hash and user details\n    $storedPassword = $users[$username]['password'];\n    $userDetails   = $users[$username];\n\n    // Compare provided password with stored hash using password_verify()\n    if (password_verify($password, $storedPassword)) {\n        // If passwords match, return user details\n        return $userDetails;\n    } else {\n        // Password mismatch, return false\n        return false;\n    }\n}\n```", "```php\n// Login form handler\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Call login() function and store result in $user variable\n    $user = login($username, $password);\n\n    if ($user) {\n        // Passwords match, redirect to secure area or display welcome message\n        echo 'Welcome, ' . $user['name'] . '!';\n    } else {\n        // Password mismatch, display error message\n        echo 'Incorrect username or password.';\n    }\n}\n```"]}
