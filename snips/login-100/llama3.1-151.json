{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a simple user login function in PHP. This code will check if the provided username and password match the stored credentials.\n\n**Security Note:** Never store passwords as plain text! Use a secure hashing algorithm like `password_hash()` to hash your users' passwords before storing them in the database.\n\n```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USERNAME', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to the database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n}\n\nfunction login_user($username, $password) {\n    // Prevent SQL injection\n    $username = $mysqli->real_escape_string($username);\n    \n    // Select the user from the database\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $mysqli->query($query);\n\n    if ($result->num_rows == 1) {\n        $user_data = $result->fetch_assoc();\n\n        // Hashed password for comparison (assuming you used password_hash())\n        $stored_password = $user_data['password'];\n\n        // Compare hashed passwords\n        if (password_verify($password, $stored_password)) {\n            return true;\n        } else {\n            return false; // Incorrect password\n        }\n    } else {\n        return false; // User not found\n    }\n}\n\n// Usage example:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login_user($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n?>\n```\n\n**Important:** This is a simplified version of user login functionality. In a real-world application, you should also:\n\n1. Implement secure password hashing (use `password_hash()`).\n2. Use prepared statements to prevent SQL injection.\n3. Validate user input on both the client-side and server-side.\n4. Consider implementing additional security measures like two-factor authentication or CAPTCHA.\n\n**Security best practices:**\n\n* Store passwords securely using a salted hash function (like `password_hash()`.\n* Avoid storing sensitive data in plain text.\n* Regularly update your password hashing algorithm to stay up-to-date with the latest security standards.\n* Implement secure protocols for login and logout functionality.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USERNAME', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Connect to the database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n}\n\nfunction login_user($username, $password) {\n    // Prevent SQL injection\n    $username = $mysqli->real_escape_string($username);\n    \n    // Select the user from the database\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $mysqli->query($query);\n\n    if ($result->num_rows == 1) {\n        $user_data = $result->fetch_assoc();\n\n        // Hashed password for comparison (assuming you used password_hash())\n        $stored_password = $user_data['password'];\n\n        // Compare hashed passwords\n        if (password_verify($password, $stored_password)) {\n            return true;\n        } else {\n            return false; // Incorrect password\n        }\n    } else {\n        return false; // User not found\n    }\n}\n\n// Usage example:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login_user($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n?>\n```"]}
