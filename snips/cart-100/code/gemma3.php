
<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulated Product Data - Replace with your actual data) ---

$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15],
];


// 1. Add an item to the cart
addToCart(1, 'T-Shirt', 20, 2);
echo "Added 2 T-Shirts to the cart.
";

// 2. Add another item
addToCart(2, 'Jeans', 50, 1);
echo "Added 1 Jeans to the cart.
";

// 3. Update the quantity of the T-Shirt
updateQuantity(1, 5); // Increase the quantity of T-Shirts to 5
echo "Updated T-Shirt quantity to 5.
";

// 4. Get the cart contents
$cart = getCartContents();
echo "Current Cart Contents:
";
print_r($cart);


// 5.  Remove an item
removeCartItem(2); // Remove the Jeans
echo "Removed Jeans from the cart.
";

// Display updated cart contents
$cart = getCartContents();
print_r($cart);

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Functions to Manage the Cart ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets the total items in the cart.
 *
 * @return int The total number of items in the cart.
 */
function getCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $quantity) {
        $total += $quantity;
    }
    return $total;
}


// --- Example Usage (Simulated Product Data) ---

$products = array(
    1 => array('name' => 'Laptop', 'price' => 1200),
    2 => array('name' => 'Mouse', 'price' => 25),
    3 => array('name' => 'Keyboard', 'price' => 75)
);


// --- Handle User Actions (Simulated) ---

// Example 1: Adding a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
    echo "<p>Added " . $quantity . " " . $products[$product_id]['name'] . " to your cart.</p>";
}

// Example 2: Removing an item from the cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
    echo "<p>Removed " . $products[$product_id]['name'] . " from your cart.</p>";
}

// Example 3: Updating quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($product_id, $new_quantity);
    echo "<p>Updated quantity of " . $products[$product_id]['name'] . " to " . $new_quantity . "</p>";
}

// --- Display the Cart ---
echo "<br>";
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product = $products[$product_id];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";
}

?>


<?php
session_start(); // Start the session

// --- Cart Functions ---

/**
 * Add an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity to add.
 * @param float $price The price of the single product.
 *
 * @return void
 */
function addToCart(string $product_id, string $product_name, int $quantity, float $price) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    $_SESSION['cart'][] = [
        'id' => $product_id,
        'name' => $product_name,
        'quantity' => $quantity,
        'price' => $price
    ];
}


/**
 * Update the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity.
 *
 * @return void
 */
function updateCartQuantity(string $product_id, int $new_quantity) {
    if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) { // Use &$item to modify the original array
            if ($item['id'] == $product_id) {
                $item['quantity'] = $new_quantity;
                break;
            }
        }
    }
}


/**
 * Remove an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 *
 * @return void
 */
function removeFromCart(string $product_id) {
    if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['id'] == $product_id) {
                unset($_SESSION['cart'][$key]);
                //  Optional:  You could re-index the array if needed.
                //  unset($_SESSION['cart']);
                //  $_SESSION['cart'] = array_values($_SESSION['cart']);
                break;
            }
        }
    }
}



/**
 * Calculate the total cart value.
 *
 * @return float The total value.
 */
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['quantity'] * $item['price'];
        }
    }
    return round($total, 2); // Round to 2 decimal places
}

/**
 * Get all items in the cart
 *
 * @return array An array of items in the cart
 */
function getCartItems() {
    if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
        return $_SESSION['cart'];
    }
    return [];
}



// --- Example Usage (Simulating User Actions) ---

// 1. Add a product to the cart
addToCart('product1', 'T-Shirt', 2, 20.00);

// 2. Add another product
addToCart('product2', 'Jeans', 1, 50.00);

// 3. Update the quantity of product1 to 3
updateCartQuantity('product1', 3);

// 4. Remove product2 from the cart
removeFromCart('product2');

// 5. Calculate and display the total
$total = calculateCartTotal();
echo "Cart Total: $" . $total . "<br>";

// 6. Get items in cart
$cartItems = getCartItems();
echo "Cart Items: <br>";
echo "<pre>";
print_r($cartItems);
echo "</pre>";



// ---  Important Notes ---

// 1. Session Start:  `session_start();` MUST be called at the beginning of your script to initialize the session.
// 2. Persistence: Sessions store data on the server.  This data is associated with the user's browser.
// 3. Security:  Be mindful of security.  Avoid storing sensitive information directly in sessions.
// 4.  Error Handling: Add proper error handling (e.g., check if the product exists, handle invalid input).
// 5.  Database Integration:  In a real application, you would likely fetch product details (name, price, ID) from a database.
// 6.  Cart Data Structure: The array structure `$_SESSION['cart']` is just an example.  You can adapt it to your specific needs.  Consider using an object-oriented approach if your application becomes more complex.
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = ['name' => $product_name, 'price' => $price, 'quantity' => $quantity];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get all items in the cart
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to clear the cart
function clearCart() {
  unset($_SESSION['cart']);
}

// --- Example Usage (Simulated - Replace with actual product/database calls) ---

// Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Adding another laptop

// Display the cart contents
$cartItems = getCartItems();
echo "<h2>Your Shopping Cart</h2>";

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item
// removeFromCart(2);

// Example: Update quantity
// updateQuantity(1, 3);

// Example: Clear the cart
// clearCart();

?>


<?php

// Start a session (if not already started)
session_start();

// --- Cart Logic ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart session exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get all items in the cart
function get_cart_items() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return [];
  }
}

// Function to calculate the cart total
function calculate_cart_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage (Simulating User Interactions) ---

// Add some items to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(1, 'Laptop', 1200); // Add another laptop

// Display the cart contents
$cart_items = get_cart_items();
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// Calculate and display the total
$total = calculate_cart_total();
echo "<p><strong>Total: $" . $total . "</strong></p>";

// Remove an item
remove_from_cart(2);

//Display the updated cart
echo "<h2>Your Cart after removing the mouse</h2>";
$cart_items = get_cart_items();
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

//Update Quantity
update_quantity(1, 3);
echo "<h2>Your Cart after updating the laptop quantity</h2>";
$cart_items = get_cart_items();
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php

session_start();

// **Initialize the Cart**
// This is where you would normally load cart data from a database or file.
// For this example, we'll start with an empty cart.  In a real application,
// you'd load this from a database.

$_SESSION['cart'] = []; // Initialize an empty array to store items in the cart.

// **Helper Functions** (for demonstration - you'd likely have these in a separate file)

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment quantity if product exists
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product not in cart, add it
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// **Example Usage (Simulating a Shopping Cart Interaction)**

// 1. Add an item to the cart
addToCart(101, 'T-Shirt', 20.00, 2); // Product ID 101, T-Shirt, price $20, quantity 2

// 2. Add another item
addToCart(102, 'Jeans', 50.00, 1);

// 3.  Update quantity of product 101 to 3
updateQuantity(101, 3);

// 4. Remove a product
removeFromCart(102);

// **Displaying the Cart Content**

// This section shows how you'd display the contents of the cart.
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

echo "<p><strong>Total Cart Value:</strong> $" . (array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart']))) . "</p>";



?>


<?php
session_start();

// --- Cart Functionality ---

// Add item to cart
function add_to_cart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array($product_id => $quantity);
  } else {
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id] += $quantity;
    } else {
      $_SESSION['cart'][$product_id] = $quantity;
    }
  }
}

// Remove item from cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update quantity of an item in cart
function update_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Get cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}


// --- Example Usage ---

// 1.  Let's say we have a product with ID 1
$product_id = 1;

// 2.  Add an item to the cart (quantity of 2)
add_to_cart($product_id, 2);

// 3.  Add another item to the cart (quantity of 1)
add_to_cart($product_id, 1);


// 4.  Display the cart contents
echo "<h2>Your Cart</h2>";
echo "<ul>";

$cart_items = get_cart_contents();
if (!empty($cart_items)) {
  foreach ($cart_items as $product_id => $quantity) {
    //  In a real application, you'd likely fetch product details
    //  based on the $product_id.  This is just a placeholder.

    // Simulate getting product details
    $product_name = "Product " . $product_id;
    $product_price = 25.00;

    echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Price: $" . $product_price . "</li>";
  }
} else {
  echo "<li>Your cart is empty.</li>";
}

echo "</ul>";

// --- Remove item example ---
// remove_from_cart($product_id);

// --- Update quantity example ---
// update_quantity($product_id, 5);  // Change quantity of product 1 to 5
?>


<?php

session_start(); // Start the session

// This is a basic example and doesn't handle persistence, database interaction, or validation.
// It's intended to demonstrate the core concepts of a shopping cart session.

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// --- Example Usage (Simulating Product Actions) ---

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// Update the quantity of a product
updateCartQuantity(2, 5);


// --- Displaying the Cart Contents (for demonstration) ---

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    echo "<li>";
    echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " x " . $item_details['quantity'] . " = $" . ($item_details['price'] * $item_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// --- To remove an item from the cart (example) ---
// removeCartItem(2);

//  You would typically retrieve this information from a database and display it in your shopping cart page.
?>


<?php
session_start(); // Start the session

// Check if the cart is empty
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example Usage:
// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); // Add more of the same item

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start(); // Start the session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------- Functions ---------------------

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add (defaults to 1).
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


/**
 * Gets all items in the cart.
 *
 * @return array  An array of product IDs and quantities.
 */
function get_cart() {
  return $_SESSION['cart'];
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart() {
  unset($_SESSION['cart']);
}

// --------------------- Example Usage (for demonstration) ---------------------

// Add a product to the cart
add_to_cart(123); // Add product with ID 123 in quantity 1
add_to_cart(456, 2); // Add product with ID 456 in quantity 2

// Update the quantity of product 123 to 3
update_cart_quantity(123, 3);


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = get_cart();
if (empty($cart_items)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
}
echo "</ul>";


// Example: Remove a product
// remove_from_cart(456);

// Example: Clear the entire cart
// clear_cart();

// After clearing, the cart contents will be empty
?>


<?php

session_start();

// Cart array to store items
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $cart[$product_id]['quantity'] += $quantity;
    }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    unset($cart[$product_id]);
}

// Function to get the cart contents
function get_cart_contents() {
    return $cart;
}

// Example Usage - Simulated Products
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Shoes', 'price' => 80],
];

// ---  Example User Interaction (Simulated) ---

// 1. User adds a T-Shirt to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
echo "T-Shirt added to cart (quantity: 2) <br>";

// 2. User updates the quantity of Jeans to 3
update_cart_quantity(2, 3);
echo "Jeans quantity updated to 3 <br>";

// 3. User removes Shoes from the cart
remove_from_cart(3);
echo "Shoes removed from cart <br>";

// 4. Display the cart contents
$cart_contents = get_cart_contents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

// -----------------------  Session Management  -----------------------
// Add Cart Data to Session
$_SESSION['cart'] = $cart;

// Display Cart Contents from Session (for demonstration)
echo "<h2>Cart Contents from Session:</h2>";
if (!empty($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = 0;  // Initialize count for new product
    }
    $_SESSION['cart'][$product_id] += $quantity;
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Returns the items in the cart.
 *
 * @return array An array containing the items in the cart.
 */
function get_cart_items() {
    return $_SESSION['cart'];
}


/**
 * Calculates the total price of the cart.
 *
 * @param array $cart_items The cart items array (e.g., from get_cart_items()).
 * @return float The total price.
 */
function calculate_total_price($cart_items) {
    $total = 0;
    foreach ($cart_items as $product_id => $quantity) {
        //  Assume you have a function or data source to get product prices
        $price = get_product_price($product_id); // Replace with your actual price retrieval
        $total_for_item = $price * $quantity;
        $total += $total_for_item;
    }
    return $total;
}

/**
 * Placeholder function to get product price.  Replace with your actual logic.
 * @param int $product_id
 * @return float
 */
function get_product_price($product_id) {
    // In a real application, this would fetch the price of the product
    // from a database or other source.  This is just a placeholder.

    //Example:
    if ($product_id == 1) return 10.00;
    if ($product_id == 2) return 25.00;
    if ($product_id == 3) return 5.00;
    return 0.00; // Return 0 if product isn't found or price isn't set
}


// --- Example Usage (Demonstration) ---

// Add a product to the cart
add_to_cart(1);
add_to_cart(2, 2);  // Add 2 of product 2

// Display the cart items
echo "<h2>Cart Items:</h2>";
echo "<ul>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";


// Calculate and display the total price
$total = calculate_total_price($cart_items);
echo "<br><h2>Total Price: $" . $total . "</h2>";

// Update the quantity of an item
update_cart_quantity(1, 3); // Change quantity of product 1 to 3

// Display updated cart items
echo "<br><h2>Updated Cart Items:</h2>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}


//Remove an item
remove_from_cart(2);
echo "<br><h2>Cart Items after removing product 2:</h2>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($item_id, $item_name, $item_price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$item_id])) {
        // If it exists, update the quantity
        $_SESSION['cart'][$item_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add it to the cart
        $_SESSION['cart'][$item_id] = [
            'name' => $item_name,
            'price' => $item_price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeItemFromCart($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($item_id, $quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $quantity;
    }
}


// Example usage:

// Add an item to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);

// Display the cart contents
echo "<h2>Cart Items</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_details) {
        echo "<li>";
        echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " x " . $item_details['quantity'];
        echo "</li>";
    }
    echo "</ul>";

    // Calculate the total price
    $totalPrice = 0;
    foreach ($_SESSION['cart'] as $item_id => $item_details) {
        $totalPrice += $item_details['price'] * $item_details['quantity'];
    }
    echo "<p><strong>Total Price: $" . $totalPrice . "</strong></p>";

    // Remove an item (e.g., remove item with ID 2)
    // removeItemFromCart(2);

    // Update quantity of an item (e.g., update quantity of item with ID 1 to 3)
    // updateQuantity(1, 3);


} else {
    echo "<p>Your cart is empty.</p>";
}


// Session management:  Important for persistent cart data.  This is the basic session setup.
//  In a real application, you would likely handle session start within a route or controller.
//  This example demonstrates the initial session setup.
?>


<?php
session_start();

// Function to add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update quantity of item in cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove item from cart
function removeCartItem($product_id) {
  unset($_SESSION['cart'][$product_id]);
}

// Function to display the cart
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";

  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'];
    echo "<br>";
    echo "<form action='update_cart.php' method='post'>";
    echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
    echo "<input type='number' id='quantity_" . $product_id . "' value='" . $item['quantity'] . "' min='1' max='100'>"; // Allow min/max quantity
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }

  echo "</ul>";

  echo "<p><a href='checkout.php'>Checkout</a></p>";  // Link to checkout
}


// Example usage (simulating adding to cart from a form)

// Let's assume we received a product ID of 123 and quantity of 2
// In a real application, this would come from an actual form submission
// For demonstration purposes, we'll add the product
// addToCart(123, 'Awesome T-Shirt', 25.00, 2);

// Simulating updates from a form (for demo purposes)
// updateQuantity(123, 3); //Update the quantity of product 123 to 3


// Displaying the cart
displayCart();

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Otherwise, add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function get_cart_contents() {
    return $_SESSION['cart'];
}

// Example Usage (Demonstration - you'd integrate this into your application)

// Simulate a product adding (you'd likely get this from a database or API)
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);

// Display the cart contents
$cart = get_cart_contents();
echo "<h2>Your Cart:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
        // You could add an "Remove" button/link here using JavaScript to call remove_from_cart()
    }
    echo "</ul>";
}

// Example of updating a quantity
update_quantity(1, 3);  // Increase the quantity of the T-Shirt to 3

// Display the updated cart
echo "<h2>Your Cart (Updated):</h2>";
$cart = get_cart_contents();
echo "<ul>";
foreach ($cart as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
    // You could add an "Remove" button/link here using JavaScript to call remove_from_cart()
}
echo "</ul>";



?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Functions to manage the cart ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment quantity if already in cart
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Get the items in the cart
function get_cart_items() {
    return $_SESSION['cart'];
}

// Calculate the total price of the cart
function calculate_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total = $total + ($item['price'] * $item['quantity']);
    }
    return $total;
}

// --- Example Usage (Illustrative) ---

// Example: Adding an item to the cart
add_to_cart(1, "Laptop", 1200, 1); // product_id, product_name, price, quantity
add_to_cart(2, "Mouse", 25, 2);

// Example: Updating the quantity of a product
update_cart_quantity(1, 3); // Increase the quantity of product 1 to 3

// Example: Removing an item
// remove_from_cart(2);


// Example: Displaying the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . calculate_cart_total() . "</p>";
}


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Example Functions to Add/Remove Items ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $item = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  $_SESSION['cart'][] = $item;
  return true; // Indicate success
}

// Function to remove an item from the cart by ID
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Re-index the array if necessary to avoid key gaps
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        return true;
      }
    }
  }
  return false;
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['id'] == $product_id) {
                $item['quantity'] = $new_quantity;
                $_SESSION['cart'][$key] = $item;
                $_SESSION['cart'] = array_values($_SESSION['cart']); // Re-index
                return true;
            }
        }
    }
    return false;
}

// --- Example Usage (Demonstration) ---

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);
add_to_cart(1, 'T-Shirt', 20.00, 1); // Add another one for testing

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove an item
remove_from_cart(2);

// Display the cart contents again
echo "<br>";
echo "<h2>Cart Contents (After Removal):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Update quantity of a product
update_quantity(1, 3);

echo "<br>";
echo "<h2>Cart Contents (After Update):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// ------------------  Session Management Functions ------------------

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return void
 */
function addToCart(int $productId, int $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    // Item already in cart, update quantity
    $_SESSION['cart'][] = $productId;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'] = [$productId => $quantity]; // Use associative array for quantity
  }
}

/**
 * Removes an item from the cart by its product ID.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeFromCart(int $productId) {
  if (isset($_SESSION['cart'])) {
    unset($_SESSION['cart'][$productId]);
    // Remove duplicate keys
    $_SESSION['cart'] = array_values($_SESSION['cart']);
  }
}

/**
 * Retrieves the items in the cart.
 *
 * @return array|null Returns the cart items as an array, or null if the cart is empty.
 */
function getCart() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return null;
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}


// ------------------  Example Usage (For Demonstration) ------------------

// --- Example 1: Adding an item ---
addToCart(123); // Add product ID 123 to the cart (quantity defaults to 1)
addToCart(456, 3); // Add product ID 456 to the cart with quantity 3

// --- Example 2:  Retrieving the cart contents ---
$cartItems = getCart();
if ($cartItems) {
  echo "<h2>Cart Items:</h2>";
  echo "<ul>";
  foreach ($cartItems as $productId => $quantity) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}



// --- Example 3: Removing an item ---
removeFromCart(123);

// --- Example 4:  Retrieving the cart contents after removal ---
$cartItems = getCart();
if ($cartItems) {
  echo "<h2>Cart Items after removal:</h2>";
  echo "<ul>";
  foreach ($cartItems as $productId => $quantity) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// --- Example 5: Clearing the cart ---
//clearCart();
//echo "<p>Cart cleared.</p>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ---------------------  Functions  ---------------------

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Calculate the total cart value
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// ---------------------  Example Usage (Handling Add to Cart Request)  ---------------------

// Check if the request is to add to the cart
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];  //Added quantity

  add_to_cart($product_id, $product_name, $price, $quantity);
}

// Check if the request is to remove an item
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
}

// Check if the request is to update quantity
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  update_quantity($product_id, $new_quantity);
}



// ---------------------  Displaying the Cart  ---------------------

// Get the cart contents
$cart_contents = get_cart_contents();

// Calculate the total
$total = calculate_total();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>
    <ul>
      <?php foreach ($cart_contents as $item): ?>
        <li>
          <?php echo $item['name'] . ' - $' . $item['price'] . ' x ' . $item['quantity'] . ' = $' . $item['price'] * $item['quantity']; ?>
          <form action="" method="post">
            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
            <input type="hidden" name="quantity" value="<?php echo $item['quantity']; ?>">
            <button type="submit" name="update_quantity">Update Quantity</button>
          </form>
          <form action="" method="post">
            <input type="hidden" name="product_id" value="<?php echo $item['product_id']; ?>">
            <button type="submit" name="remove_from_cart">Remove</button>
          </form>
        </li>
      <?php endforeach; ?>
    </ul>
    <p>Total: $<?php echo $total; ?></p>
  <?php endif; ?>

  <a href="index.php">Continue Shopping</a> <!-- Link to your product listing page -->

</body>
</html>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------  Functions for Cart Operations --------------------

/**
 * Adds an item to the cart.
 *
 * @param string $product_id  The ID of the product being added.
 * @param string $product_name  The name of the product (for display purposes).
 * @param int    $quantity    The quantity of the product to add.
 * @param float  $price       The price of the product.
 *
 * @return void
 */
function add_to_cart(string $product_id, string $product_name, int $quantity, float $price): void {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'quantity' => $quantity,
      'price' => $price
    );
  } else {
    // Item already in cart, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id  The ID of the product to update.
 * @param int    $quantity  The new quantity of the product.
 *
 * @return void
 */
function update_cart_quantity(string $product_id, int $quantity): void {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id  The ID of the product to remove.
 *
 * @return void
 */
function remove_from_cart(string $product_id): void {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the contents of the cart.
 *
 * @return array  An array representing the cart contents.
 */
function get_cart_contents(): array {
  return $_SESSION['cart'];
}

// --------------------  Example Usage (for demonstration) --------------------

// Add a product to the cart
add_to_cart('product1', 'Awesome T-Shirt', 2, 25.00);

// Add another product
add_to_cart('product2', 'Cool Mug', 1, 10.00);

// Update the quantity of product1 to 3
update_cart_quantity('product1', 3);

// Get the cart contents
$cart_contents = get_cart_contents();

// Display the cart contents (for demonstration)
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . " per item<br>";
    echo "<strong>Total:</strong> $" . ($product_details['quantity'] * $product_details['price']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Remove an item
remove_from_cart('product2');

// Display cart contents after removal
echo "<hr>";
echo "<h2>Cart Contents After Removal:</h2>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . " per item<br>";
    echo "<strong>Total:</strong> $" . ($product_details['quantity'] * $product_details['price']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.  Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart already exists.  If not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart.
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product exists.
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart with a quantity of 1.
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the current cart contents.
 *
 * @return array The contents of the cart.
 */
function getCartContents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cart The cart contents.
 * @param array $product_prices An array of product IDs and their prices.  Example: ['product1' => 10, 'product2' => 20].
 * @return float The total price.
 */
function calculateTotal($cart, $product_prices) {
    $total = 0;
    foreach ($cart as $product_id => $item) {
        if (isset($product_prices[$product_id])) {
            $total += $product_prices[$product_id] * $item['quantity'];
        }
    }
    return $total;
}



// --- Example Usage (Simulation) ---

// Simulate some product prices
$product_prices = [
    1 => 10,  // Product ID 1: $10
    2 => 20,  // Product ID 2: $20
    3 => 5,   // Product ID 3: $5
];

// 1. Add some items to the cart
addToCart(1, 2); // Add 2 of Product 1
addToCart(2);     // Add 1 of Product 2
addToCart(3, 3);  // Add 3 of Product 3

// 2. Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart = getCartContents();
if (empty($cart)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
echo "</ul>";

// 3. Update the quantity of an item
updateCartItem(1, 3); // Change quantity of Product 1 to 3

// 4. Display the updated cart contents
echo "<br>";
echo "<h2>Updated Cart Contents:</h2>";
echo "<ul>";
$cart = getCartContents();
if (empty($cart)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
echo "</ul>";

// 5. Calculate the total
$total = calculateTotal($cart, $product_prices);
echo "<br><h2>Total Price: $" . $total . "</h2>";

// 6. Remove an item
removeItemFromCart(2);
echo "<br><h2>Cart Contents after removing Product 2:</h2>";
$cart = getCartContents();
if (empty($cart)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
?>


<?php

// Session Start
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the product to the cart array
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// Example Usage (Simulating user actions)

// 1. Add an item to the cart
addToCart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, Price $1200, Quantity 1
addToCart(2, "Mouse", 25, 2); // Product ID 2, Mouse, Price $25, Quantity 2

// 2. Update the quantity of an item
updateQuantity(1, 3);  // Change the quantity of Laptop to 3

// 3. Get the cart contents
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart_contents);
echo "</pre>";

// 4. Calculate the total
$total = calculateTotal();
echo "<p>Total Cart Value: $" . $total . "</p>";

// 5. Remove an item from the cart
removeCartItem(2); // Remove the Mouse
?>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// Example Product Information (replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// ----------------------- Functions -----------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add (default is 1).
 */
function addToCart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
    }
}

/**
 * Retrieves the items in the cart.
 *
 * @return array The array of items in the cart.
 */
function getCart() {
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    }
    return [];
}

/**
 * Calculates the total price of the items in the cart.
 *
 * @return float The total price.
 */
function calculateTotal() {
    $total = 0;
    $cart = getCart();
    foreach ($cart as $item_id => $item_data) {
        $product = $products[$item_id];
        $total_item_price = $product['price'] * $item_data['quantity'];
        $total += $total_item_price;
    }
    return $total;
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}



// ----------------------- Handling Cart Actions -----------------------

// Example: Adding a product to the cart when a button is clicked
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    addToCart($product_id, (int)$_POST['quantity']);  // Ensure quantity is an integer
}

// Example: Removing an item from the cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    removeFromCart($product_id);
}


// ----------------------- Displaying the Cart -----------------------

// Get the current cart contents
$cart = getCart();

// Calculate the total price
$total = calculateTotal();


echo "<h1>Your Shopping Cart</h1>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $item_data) {
        $product = $products[$item_id];
        echo "<li>";
        echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . "</li>";
        echo "<form method='post'>";
        echo "<label for='quantity_" . $item_id . "'>Quantity:</label>";
        echo "<input type='number' id='quantity_" . $item_id . "' value='" . $item_data['quantity'] . "' min='1' max='10'>";
        echo "<input type='hidden' name='product_id' value='" . $item_id . "'>";
        echo "<button type='submit' name='update_cart'>Update Cart</button>";
        echo "</form>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}


?>


<?php
session_start();

// --- Cart Logic ---

// Initialize an empty cart in the session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function get_cart() {
    return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total_item = $item['price'] * $item['quantity'];
        $total += $total_item;
    }
    return $total;
}

// --- Example Usage (Simulated Product Data) ---

$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];


// ---  Handle Cart Actions (Simulated Input) ---

// Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    $quantity = (int)$_POST['quantity']; // Ensure quantity is an integer

    if (array_key_exists($product_id, $products)) {
        add_to_cart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
    }
}

// Remove an item from the cart
if (isset($_POST['remove_item'])) {
    $product_id = (int)$_POST['product_id'];
    remove_from_cart($product_id);
}

// Update quantity
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $new_quantity = (int)$_POST['quantity'];
    update_quantity($product_id, $new_quantity);
}


// --- Display the Cart ---

echo '<div class="cart">';
echo '<h2>Shopping Cart</h2>';

// Display items in the cart
$cart_items = get_cart();
if (!empty($cart_items)) {
    echo '<ul>';
    foreach ($cart_items as $product_id => $item) {
        echo '<li>';
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . number_format($item['price'], 2) . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Total for item: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        echo "<form method="post" action=\"#\">"; // Use a form for removal
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<button type='submit' name='remove_item'>Remove</button>";
        echo "</form>";
        echo '</li>';
    }
    echo '</ul>';
} else {
    echo '<p>Your cart is empty.</p>';
}

echo '<h2>Total Cart Value: $"' . number_format(calculate_total(), 2) . '</h2>';
echo '</div>';

?>


<?php

// Start a session if it's not already started
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment quantity if already in cart
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// --- Example Usage (Handling Form Submission -  Illustrative) ---

// If the form is submitted (e.g., adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check for adding to cart
    if (isset($_POST['action']) && $_POST['action'] == 'addToCart') {
        $product_id = $_POST['product_id'];
        $product_name = $_POST['product_name'];
        $price = $_POST['price'];
        $quantity = $_POST['quantity'];

        addToCart($product_id, $product_name, $price, $quantity);
    }

    // Check for removing an item
    if (isset($_POST['action']) && $_POST['action'] == 'removeFromCart') {
        $product_id = $_POST['product_id'];
        removeFromCart($product_id);
    }

     // Check for updating quantity
    if (isset($_POST['action']) && $_POST['action'] == 'updateQuantity') {
        $product_id = $_POST['product_id'];
        $new_quantity = $_POST['quantity'];
        updateQuantity($product_id, $new_quantity);
    }
}

// --- Displaying the Cart (Example) ---

// Output the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Function to add an item to the cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If yes, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If no, add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// --- Example Usage (You'd typically get these from a database or form) ---

// Add a product to the cart
addToCart(1, 'T-Shirt', 20.00, 2); // product_id, name, price, quantity

// Add another product to the cart
addToCart(2, 'Jeans', 50.00, 1);

// --- Function to update the quantity of an item in the cart ---
function updateCartQuantity($product_id, $new_quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    // Product not found, you might want to handle this (e.g., log an error or return an error message)
    return false;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  return true;
}

// Example: Update the quantity of product 1 to 3
updateCartQuantity(1, 3);


// --- Function to remove an item from the cart ---
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example: Remove product 2 from the cart
removeItemFromCart(2);

// --- Function to display the cart contents ---
function displayCart() {
    echo "<h2>Shopping Cart</h2>";

    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $product_id => $product_details) {
            echo "<li>";
            echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
        }
        echo "</ul>";
    }
}

// --- Call the display function to show the cart contents ---
displayCart();

// ---  Session Data (Cleanup - good practice to clear out session data) ---
//  This is just an example, you'd typically do this on logout or when the user leaves the site.
//  Don't do this *every* time the page loads!
//session_unset();
//session_destroy();

?>


<?php
session_start();

// --------------------- Cart Logic ---------------------

// Initialize the cart as an array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --------------------- Helper Functions ---------------------

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $product_name The name of the product.
 * @param int    $quantity    The quantity of the product to add.
 * @param float  $price       The price of the product.
 *
 * @return void
 */
function add_to_cart(string $product_id, string $product_name, int $quantity, float $price) {
    // Check if the product is already in the cart.
    if (isset($_SESSION['cart'][$product_id])) {
        // If it is, increment the quantity.
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If not, create a new entry in the cart.
        $_SESSION['cart'][$product_id] = [
            'name'      => $product_name,
            'quantity'  => $quantity,
            'price'     => $price,
        ];
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The unique identifier of the product.
 * @param int    $new_quantity The new quantity for the product.
 *
 * @return void
 */
function update_cart_quantity(string $product_id, int $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The unique identifier of the product to remove.
 *
 * @return void
 */
function remove_from_cart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculate_cart_total() {
    $total = 0.0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

/**
 * Gets the cart items.
 *
 * @return array The cart items.
 */
function get_cart_items() {
    return $_SESSION['cart'];
}

// --------------------- Example Usage (for demonstration) ---------------------
//  This is for illustrating how to use the functions.  In a real application,
//  you'd typically handle this from a form submission.

// Add a product to the cart
add_to_cart('product1', 'Awesome Widget', 2, 19.99);

// Update the quantity of a product
update_cart_quantity('product1', 5);

// Add another product
add_to_cart('product2', 'Super Gadget', 1, 29.99);

// Display the cart items
echo "<h2>Cart Items</h2>";
echo "<ul>";
$cart_items = get_cart_items();
if (count($cart_items) > 0) {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
} else {
    echo "<li>Your cart is empty.</li>";
}
echo "</ul>";

// Calculate and display the total
echo "<p><strong>Total Cart Value: $" . calculate_cart_total() . "</strong></p>";

// Remove a product from the cart (example)
// remove_from_cart('product1');
?>


<?php

// Start a session if it doesn't exist
if (!session_id()) {
    session_start();
}

// Cart data -  This can be stored in a database or a more sophisticated system
// For simplicity, we'll store it in the session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Helper functions
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
            'total' => $price * $quantity
        ];
    } else {
        // If the product already exists, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}

function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

function update_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}


// Example Usage:
// Add a product to the cart
add_to_cart(1, "T-Shirt", 20, 2);
add_to_cart(2, "Jeans", 50, 1);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['total'];
        echo " <a href='update_cart.php?product_id=" . $product_id . "&quantity='>Update Quantity</a> | <a href='remove_from_cart.php?product_id=" . $item_id . "'>Remove</a></li>";
    }
    echo "</ul>";
}



// Example functions for updating/removing:

// Function to update quantity (update_cart.php would handle this)
//  $product_id = the ID of the product to update
//  $quantity = the new quantity to set
// function update_quantity($product_id, $quantity) {
//     if (isset($_SESSION['cart'][$product_id])) {
//         $_SESSION['cart'][$product_id]['quantity'] = $quantity;
//         $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
//     }
// }


// Function to remove from cart (remove_from_cart.php would handle this)
// function remove_from_cart($product_id) {
//     if (isset($_SESSION['cart'][$product_id])) {
//         unset($_SESSION['cart'][$product_id]);
//     }
// }


?>


<?php
session_start();

// update_cart.php
if (isset($_GET['product_id']) && isset($_GET['quantity'])) {
    $product_id = $_GET['product_id'];
    $quantity = (int)$_GET['quantity'];  // Ensure quantity is an integer

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    } else {
        // Product doesn't exist in the cart, do nothing.  Or, add it with the new quantity
    }
}
// remove_cart.php
if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}
?>


<?php

// Start a session (if it doesn't exist)
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ------------------------------------------------------------------
// Example Functions for Adding to Cart
// ------------------------------------------------------------------

/**
 * Adds an item to the shopping cart.
 *
 * @param string $product_id The ID of the product being added.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity of the product to add.  Defaults to 1.
 * @param float $price The price of the product.
 */
function add_to_cart(string $product_id, string $product_name, int $quantity = 1, float $price = 0.0) {
  //Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'quantity' => $quantity,
      'price' => $price
    );
  }
}



// ------------------------------------------------------------------
// Example Usage (Illustrative)
// ------------------------------------------------------------------

// Add a product to the cart
add_to_cart("product1", "Awesome T-Shirt", 2, 25.00);
add_to_cart("product2", "Cool Hat", 1, 15.00);


// Display the contents of the cart
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - Quantity: " . $product_details['quantity'] . " - Price: $" . $product_details['price'] . "</li>";
  }
  echo "</ul>";

  // Calculate the total cost
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total += $product_details['quantity'] * $product_details['price'];
  }
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}


// ------------------------------------------------------------------
// Example Functions for Removing from Cart
// ------------------------------------------------------------------

/**
 * Removes an item from the shopping cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function remove_from_cart(string $product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example: Remove 'product1' from the cart
//remove_from_cart("product1");


// ------------------------------------------------------------------
// Example Functions for Updating Cart Quantity
// ------------------------------------------------------------------

/**
 * Updates the quantity of an item in the shopping cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function update_cart_quantity(string $product_id, int $new_quantity)
{
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
  // You might want to add error handling here to ensure that the quantity
  // is a valid number (e.g., positive).
}


// Example: Update the quantity of 'product2' to 3
//update_cart_quantity("product2", 3);
?>


<?php

// Start a session to store the cart data
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add it to the cart as a new item
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $newQuantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (demonstration)

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 1);  //Add a second Laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_items = getCartContents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
}
echo "</ul>";


// Example: Remove an item
// removeFromCart(2);

// Example: Update quantity
// updateQuantity(1, 3);

//Display updated cart
echo "<h2>Your Shopping Cart (Updated)</h2>";
$cart_items = getCartContents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
}
echo "</ul>";

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with quantity
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name,
      'price' => $price
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage:

// Add an item to the cart
addToCart(1, 2, "T-Shirt", 20);
addToCart(2, 1, "Jeans", 50);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty(getCartContents())) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach (getCartContents() as $item_id => $item) {
    echo "<li>";
    echo "Product: " . $item['name'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "Total: $" . $item['quantity'] * $item['price'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeFromCart(1);

// Example of updating quantity
// updateQuantity(2, 3);
?>


<?php

// Initialize the session if it doesn't exist
session_start();

// Sample product data (replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to add an item to the cart
function addItemToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0; // Initialize to 0 if not found
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = $quantity;
    }
}


// Handle adding items to the cart (example: from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = (int)$_POST['product_id']; // Convert to integer for safety
        $quantity = (int)$_POST['quantity'];

        if (isset($products[$productId])) {
            addItemToCart($productId, $quantity);
        } else {
            echo "Product ID " . $productId . " not found.";
        }
    } elseif (isset($_POST['remove_from_cart'])) {
        $productId = (int)$_POST['product_id'];
        removeItemFromCart($productId);
    } elseif (isset($_POST['update_quantity'])) {
       $productId = (int)$_POST['product_id'];
       $quantity = (int)$_POST['quantity'];
       updateQuantity($productId, $quantity);
    }
}


// Display the cart contents
echo "<h2>Your Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize an empty cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product already exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // Handle the case where the product isn't in the cart (e.g., remove from cart)
    // You could also add it with a quantity of 1 if desired
    // For simplicity, we'll just do nothing here.  A better solution would be to return
    // an error message or use an appropriate flag.
    echo "Product " . $product_id . " not found in cart."; // or handle differently
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total_item = $price * $quantity;
    $total += $total_item;

    echo "<tr>";
    echo "<td>" . $name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total_item, 2) . "</td>";
    echo "<td><a href='cart.php?remove=" . $product_id . "'>Remove</a></td>";
    echo "</tr>";
  }

  echo "</table>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</p>";
}

// Example Usage (simulated product data)
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200],
  2 => ['name' => 'Mouse', 'price' => 25],
  3 => ['name' => 'Keyboard', 'price' => 75]
];

// Simulate adding items to the cart (you would typically get this from a form submission)
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id'];  // Important: Cast to integer
  $quantity = (int)$_POST['quantity']; // Cast to integer
  addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
}

if (isset($_POST['update_quantity'])) {
  $product_id = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'];
  updateQuantity($product_id, $quantity);
}

// Display the cart contents
displayCart();

?>

<!-- HTML form to add items to the cart -->
<form method="post" action="">
  <h2>Add to Cart</h2>
  <?php
  foreach ($products as $id => $product) {
    echo "<label for='" . $id . "'>" . $product['name'] . " ($" . number_format($product['price'], 2) . ")</label><br>";
    echo "<input type='number' id='" . $id . "' name='product_id' value='" . $id . "' min='1' max='10'><br>"; // Added min and max for input validation
  }
  ?>
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<!-- HTML form to update the quantity of items -->
<form method="post" action="">
  <h2>Update Quantity</h2>
  <?php
  foreach ($products as $id => $product) {
    echo "<label for='" . $id . "'>" . $product['name'] . "</label><br>";
    echo "<input type='number' id='" . $id . "' name='product_id' value='" . $id . "' min='1' max='10'><br>"; // Added min and max
  }
  ?>
  <button type="submit" name="update_quantity">Update Quantity</button>
</form>


<?php
session_start();

// Assuming this code is within a web page that can handle sessions

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// Example Usage (Simulated Product Information)
$product1_id = 1;
$product1_name = "T-Shirt";
$product1_price = 20.00;

$product2_id = 2;
$product2_name = "Jeans";
$product2_price = 50.00;

// Add items to the cart
addToCart($product1_id, $product1_name, $product1_price, 2); // Add 2 T-Shirts
addToCart($product2_id, $product2_name, $product2_price, 1); // Add 1 pair of Jeans


// Display the Cart Content
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_details['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . number_format($product_details['price'] * $product_details['quantity'], 2) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example: Remove a product from the cart (Optional - for completeness)
// If you want to add functionality to remove products.
// For example, you could add a button or link to remove a specific item.
// (This is not implemented in this example but is good to know)
// $product_id_to_remove = 1; // The ID of the product to remove
// if (isset($_SESSION['cart'][$product_id_to_remove])) {
//   unset($_SESSION['cart'][$product_id_to_remove]);
// }

?>


<?php

// Initialize an empty session if it doesn't exist
session_start();

// Cart variables (This is a simplified example, replace with a database or more robust storage)
$cart = [];

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If not, add a new entry
    $_SESSION['cart'][$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example usage:  This simulates a user adding items to their cart
// In a real application, this would come from a form submission or API call

// Add a product
addItemToCart(1, "Laptop", 1200, 1);

// Add another quantity of the same product
addItemToCart(1, "Laptop", 1200, 2);

// Add a different product
addItemToCart(2, "Mouse", 25, 3);

// Get the cart contents
$cartContents = getCartContents();

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $productId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example of updating the quantity
updateQuantity(1, 5); // Change the quantity of Laptop to 5

echo "<br>";
echo "<h2>Updated Cart</h2>";
$cartContents = getCartContents();
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $productId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
removeItemFromCart(2);

echo "<br>";
echo "<h2>Cart after removing Mouse</h2>";
$cartContents = getCartContents();
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $productId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

session_start();

// Initialize the cart as an array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --------------------------------------------------
// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If the product exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If the product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// --------------------------------------------------
// Example Usage (Demonstration)
//  You would normally get these product details from a database or another source.

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 2); // Adding more of the same product

// --------------------------------------------------
// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// --------------------------------------------------
// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// --------------------------------------------------
// Function to display the cart contents
function displayCart() {
    echo "<h2>Your Shopping Cart</h2>";

    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total per item:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";

    // Calculate the total cart value
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $total += $product_details['price'] * $product_details['quantity'];
    }
    echo "<p><strong>Total Cart Value:</strong> $" . $total . "</p>";
}

// --------------------------------------------------
// Example Usage (Displaying the cart)

displayCart();

// --------------------------------------------------
// Example Usage (Removing an item)
//removeItemFromCart(2); // Remove the mouse
//displayCart();

// --------------------------------------------------
// Example Usage (Updating quantity)
//updateQuantity(1, 3); // Change quantity of Laptop to 3
//displayCart();

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize an empty cart
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product already exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Returns the cart array or an empty array if it doesn't exist
}


// --- Example Usage / Cart Logic ---

// 1.  Add some items to the cart

addToCart(1, "Shirt", 25.00, 2);
addToCart(2, "Pants", 50.00, 1);
addToCart(1, "Shirt", 25.00, 3); //Add another shirt

// 2. Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
$cart = getCartContents();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate total price
  $total = 0;
  foreach ($cart as $product_id => $product_data) {
    $total += $product_data['price'] * $product_data['quantity'];
  }
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}


// 3. Example: Remove an item
//removeCartItem(2);

// 4. Example: Update Quantity
//updateCartQuantity(1, 5);
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example Usage (This is just demonstration, you'd get this data from a form, API, etc.)
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);
add_to_cart(1, "Laptop", 1200, 3); // Adding more of the Laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "<a href='update_cart.php?product_id=" . $product_id . "&quantity='>Update Quantity</a> | ";
    echo "<a href='remove_from_cart.php?product_id=" . $product_id . "'>Remove</a>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of updating quantity (you'd handle this in the update_cart.php file)
//  echo "<br>Update quantity for product 1 to 5: <a href='update_cart.php?product_id=1&quantity=5'>Update</a>";

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$item_id] = array(
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($item_id, $quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function removeFromCart($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

//  ---  Example Usage  ---

// 1. Add an item to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);

// 2. Update the quantity of an item
updateCartQuantity(1, 5); // Increase the quantity of T-Shirt to 5

// 3. Get the cart contents
$cart = getCartContents();
echo "<h1>Your Cart:</h1>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// 4. Remove an item
removeFromCart(2);

// After removing the Jeans, re-display the cart
$cart = getCartContents();
echo "<h1>Your Cart (After Removal):</h1>";
echo "<pre>";
print_r($cart);
echo "</pre>";


//  ---  Considerations and Next Steps  ---

// 1.  Database Integration: This example uses a simple associative array in the session to store the cart data.  For a real application, you would typically store this data in a database (e.g., MySQL) for persistence.

// 2.  Session Management:
//     *  `session_start()` must be called at the beginning of every PHP script that uses sessions.
//     *  You need to set a session ID and transmit it to the browser.  This is usually done automatically when the user visits your website for the first time.
//     *  Consider using a session cookie to store the session ID.

// 3.  Error Handling: Add error handling (e.g., check if the item ID is valid before adding to the cart).

// 4.  Security:
//     *  Use HTTPS to protect session IDs from being intercepted.
//     *  Consider using secure session cookies.
//     *  Implement proper input validation to prevent cross-site scripting (XSS) attacks.

// 5.  User Interface: This example only provides the backend logic for the cart.  You'll need to create a user interface (e.g., HTML forms, JavaScript) to allow users to add, update, and remove items from the cart.

// 6.  Quantity Validation:  Ensure that the quantity added/updated is a valid number.
?>


<?php
session_start();

// Array to store cart items
$cart = array();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart total
function get_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// Example Usage (Simulating a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Simulate receiving product data from a form
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  // Add the item to the cart
  add_to_cart($product_id, $product_name, $price, $quantity);
}

// To update the quantity of an item
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  update_cart_quantity($product_id, $new_quantity);
}

// To remove an item from the cart
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['remove_item'])) {
  $product_id = $_POST['product_id'];
  remove_from_cart($product_id);
}


// Display the cart contents
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . get_cart_total() . "</strong></p>";
}

?>


<?php

session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it as an array
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example Usage:  (Replace with your actual product IDs, names, and prices)
// This simulates adding a product to the cart
addToCart(1, "T-Shirt", 20, 2); // Product ID 1, T-Shirt, price $20, quantity 2
addToCart(2, "Jeans", 50, 1);   // Product ID 2, Jeans, price $50, quantity 1
addToCart(1, "T-Shirt", 20, 3); // Add another T-Shirt to the cart
// Display Cart Contents (for demonstration - remove in a real application)
echo "<h2>Cart Contents</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // ... (same addToCart function as above) ...
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id']) && isset($_POST['product_name']) && isset($_POST['price']) && isset($_POST['quantity'])) {
        $product_id = $_POST['product_id'];
        $product_name = $_POST['product_name'];
        $price = floatval($_POST['price']);  // Ensure price is a float
        $quantity = intval($_POST['quantity']); // Ensure quantity is an integer

        addToCart($product_id, $product_name, $price, $quantity);
    }
}
?>

<h1>Add to Cart</h1>

<form method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="<?php if(isset($_POST['product_id'])) echo $_POST['product_id']; ?>">
    <br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name" value="<?php if(isset($_POST['product_name'])) echo $_POST['product_name']; ?>">
    <br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01" value="<?php if(isset($_POST['price'])) echo floatval($_POST['price']); ?>">
    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" step="1" min="1" value="<?php if(isset($_POST['quantity'])) echo intval($_POST['quantity']); ?>">
    <br><br>

    <button type="submit">Add to Cart</button>
</form>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, create a new cart array
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart array
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // Optionally, you could also update the quantity if the item already exists
  // This example just adds new items.
}

// Example Usage:
// Let's say we have these product details:
$product1_id = 1;
$product1_name = "T-Shirt";
$product1_price = 20.00;

$product2_id = 2;
$product2_name = "Jeans";
$product2_price = 50.00;

// Add product 1 to the cart (quantity of 2)
addToCart($product1_id, $product1_name, $product1_price, 2);

// Add product 2 to the cart (quantity of 1)
addToCart($product2_id, $product2_name, $product2_price, 1);


// Display the contents of the cart
echo "<h2>Your Shopping Cart</h2>";

if (!empty($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }

  echo "<p><strong>Total: $" . $total . "</strong></p>";

} else {
  echo "<p>Your cart is empty.</p>";
}


// Example of removing an item from the cart (optional)
// Remove the item with product_id = 1
if (isset($_GET['remove'])) {
    $product_id_to_remove = $_GET['remove'];

    // Find the item in the cart and remove it
    $key = array_search($product_id_to_remove, 0, count($_SESSION['cart']));

    if ($key !== false) {
        unset($_SESSION['cart'][$key]);
    }
}

?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array($product_id => $quantity);
  } else {
    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id] += $quantity;
    } else {
      // If the product is not in the cart, add it
      $_SESSION['cart'][$product_id] = $quantity;
    }
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to get the contents of the cart
function get_cart_contents() {
  return $_SESSION['cart'];
}

// --- Example Usage ---

// 1. Adding items to the cart
add_to_cart(1, 2); // Add product with ID 1 to cart with quantity 2
add_to_cart(2, 1); // Add product with ID 2 to cart with quantity 1
add_to_cart(1, 3); // Add more of product with ID 1

// 2. Viewing the cart
$cart_items = get_cart_contents();
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $quantity) {
    //  You'll need to have a way to retrieve product details based on $product_id
    //  This is just a placeholder - replace with your actual product retrieval logic
    $product_name = get_product_name($product_id);  // Example function - see below
    echo "<li>Product: $product_name (Quantity: $quantity)</li>";
  }
  echo "</ul>";
}

// 3. Removing an item
//remove_from_cart(2);

// 4. Updating quantity
// update_cart_quantity(1, 5);


// --- Placeholder functions for product details (replace with your database/logic) ---

function get_product_name($product_id) {
    // Replace this with your actual product retrieval logic
    // This is just an example -  you'll likely fetch from a database
    switch ($product_id) {
        case 1: return "Awesome T-Shirt";
        case 2: return "Cool Mug";
        default: return "Unknown Product";
    }
}
?>


if (isset($_POST['add_to_cart'])) {
    $product_id = 1; // Or get the product ID from where the button was clicked
    $quantity = 1; // Or get the quantity from the user's input
    add_to_cart($product_id, $quantity);
}


<?php
session_start();

// --- Cart Operations ---

// 1. Add item to cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    $_SESSION['cart'][$product_id] = [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
    ];
}

// 2. Update item quantity in cart
function update_cart_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// 3. Remove item from cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// 4. Get cart items
function get_cart_items() {
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return [];
    }
}

// 5. Calculate total cart value
function calculate_cart_total() {
    $total = 0;
    $cart_items = get_cart_items();

    foreach ($cart_items as $item) {
        $total += $item['price'] * $item['quantity'];
    }

    return $total;
}

// --- Example Usage (Simulated Product Data) ---

// Sample product data (replace with your actual database)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];

// ---  Session Management and User Interaction (Simulated) ---
// For demonstration purposes, we'll simulate a user adding an item.
// In a real application, you'd get this from a form or other user input.

// 1. Add a Laptop to the cart (Product ID 1)
add_to_cart(1, $products[1]['name'], $products[1]['price'], 1);

// 2.  Update the quantity of the Laptop to 2
update_cart_quantity(1, 2);

// 3. Get the cart contents
$cart_items = get_cart_items();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// 4. Calculate and display the total
$total = calculate_cart_total();
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";

// 5. Remove the Mouse from the cart
remove_from_cart(2);

// Display updated cart
echo "<p><strong>Updated Cart Items:</strong></p>";
$cart_items = get_cart_items();

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// Array to hold cart items (you'd typically store this in a database)
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, increase quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to get the cart items
function getCart() {
  return $cart;
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    global $cart;

    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    } else {
        // Item not in cart, you might want to return an error or do nothing
        // For this example, we'll just return false
        return false;
    }
    return true;
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    global $cart;

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
}


// Sample Usage - Add items to the cart (example)
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another Laptop (duplicates are handled)


// Get the current cart
$current_cart = getCart();

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($current_cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($current_cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example of updating the quantity
updateCartQuantity(2, 3);
echo "<br>";

//Display the updated cart
echo "<h2>Your Shopping Cart (Updated)</h2>";
if (empty($current_cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($current_cart as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Example of removing an item
removeCartItem(2);
echo "<br>";
echo "<h2>Your Shopping Cart (After Removing Item)</h2>";
if (empty($current_cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($current_cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Function to Add Item to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If yes, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If no, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// --- Example Usage ---

// Adding an item to the cart
addToCart(1, 'T-Shirt', 20.00, 2);
addToCart(2, 'Jeans', 50.00, 1);
addToCart(1, 'T-Shirt', 20.00, 3); // Add more of the same item


// --- Displaying the Cart ---

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $product_price = $product_details['price'];
    $product_quantity = $product_details['quantity'];

    echo "<li>" . $product_name . " - $" . $product_price . " x " . $product_quantity . " = $" . ($product_price * $product_quantity) . "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total += ($product_details['price'] * $product_details['quantity']);
  }

  echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";
}


// --- Optional:  Cart Clearing Function ---
function clearCart() {
    unset($_SESSION['cart']);
}
?>


<?php
session_start();

// Function to add item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, create an empty array
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update quantity of a product in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove product from cart
function removeProduct($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to view the cart
function viewCart() {
  if (empty($_SESSION['cart'])) {
    echo "<h1>Your Cart is Empty</h1>";
  } else {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $id => $item) {
      echo "<li>";
      echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $totalPrice = 0;
    foreach ($_SESSION['cart'] as $id => $item) {
      $totalPrice += ($item['price'] * $item['quantity']);
    }
    echo "<p><strong>Total: $" . $totalPrice . "</strong></p>";
  }
}

// Example Usage (Simulating a product being added to the cart)
// You'd typically get this data from a form or other source.

// Add a product to the cart
addToCart(1, "T-Shirt", 20.00, 2); // product_id, product_name, price, quantity
addToCart(2, "Jeans", 50.00, 1);

// Update quantity of a product
updateQuantity(1, 3); // Increase the quantity of T-Shirt to 3

// Remove a product from the cart
// removeProduct(2); // Remove Jeans from the cart

// View the cart
viewCart();

// Session Management -  Important Note:  Sessions can expire.  Make sure to handle session expiration appropriately.
// Consider using a session management library for production environments.
?>


<?php

// Initialize the session if it doesn't exist
session_start();

// **1. Define Cart Variables**
// These variables will store the items in the cart.
// You can expand this to include quantity, price, etc.
// For simplicity, we'll just use an array of product IDs.
$_SESSION['cart'] = [];

// **2. Cart Operations (Functions)**

// Add an item to the cart
function add_to_cart($product_id, $quantity = 1) {
  global $cart; // Access the global cart array

  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity; // Increment quantity if exists
  } else {
    $cart[$product_id] = ['quantity' => $quantity];
  }
}


// Remove an item from the cart (by product ID)
function remove_from_cart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
    global $cart;

    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}

// Get the cart contents (for display or processing)
function get_cart_contents() {
  global $cart;
  return $cart;
}

// **3. Example Usage (Illustrative - You'll integrate this into your application)**

//  Simulate adding items to the cart
add_to_cart(123, 2); // Add product 123 to the cart with quantity 2
add_to_cart(456, 1); // Add product 456 to the cart with quantity 1
add_to_cart(123, 3); //  Increase the quantity of product 123

// Display the contents of the cart (for demonstration)
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";



// **4.  Interaction (Demonstrates how you'd use these functions in a website)**

//  Simulate a user selecting an item (This is just a simplified example)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = intval($_POST['quantity']); // Sanitize input

    add_to_cart($product_id, $quantity);
}


// Example of removing an item (for demonstration)
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
}


// **Important Considerations and Next Steps:**

// * **Database Integration:** In a real application, you'd retrieve product information (name, price, etc.) from a database based on the product ID.
// * **Session Management:** The session needs to be persistent.  This means the user needs to remain on the site (or have a cookie set) to maintain the cart.
// * **Input Validation and Sanitization:**  Always sanitize and validate user input (e.g., `intval()` to convert input to integers).  This prevents security vulnerabilities.
// * **Quantity Handling:** This example uses a simple quantity.  You might want to add error handling (e.g., prevent negative quantities).
// * **Error Handling:** Add error handling (e.g., if a product ID is invalid).
// * **Real-World Cart Implementations:** For larger e-commerce sites, you'd likely use a more robust cart library or framework component.  Consider using a session management service other than the native PHP session for scalability and security.
// * **Security:** Use appropriate security measures to protect user data and prevent unauthorized access to the cart.



?>


<?php
session_start();

// ----------------------- Cart Functions -----------------------

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity  The quantity to add. Defaults to 1.
 * @return void
 */
function addToCart($productId, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0; // Initialize if not present
    $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
  } else {
    $_SESSION['cart'][$productId] = $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $productId The ID of the product to update.
 * @param int $quantity  The new quantity.
 * @return void
 */
function updateCartQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

/**
 * Gets the cart items.
 *
 * @return array The cart items as an array.
 */
function getCartItems() {
  return $_SESSION['cart'];
}

/**
 * Gets the total cart value.
 *
 * @return float The total cart value.  Returns 0 if the cart is empty.
 */
function getCartTotal() {
  $total = 0.0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $productId => $quantity) {
      // Assuming you have a function to get the price of a product based on its ID
      $price = getProductPrice($productId); //  Implement this function
      if ($price > 0) { // Prevent division by zero
        $totalQuantity = $quantity; // Use the quantity directly here
        $total += $price * $totalQuantity;
      }
    }
  }
  return $total;
}


// ----------------------- Example Usage -----------------------

// 1. Add an item to the cart
addToCart(123, 2); // Add product ID 123 to the cart with quantity 2

// 2. Update the quantity of an item
updateCartQuantity(123, 5); // Increase the quantity of product 123 to 5

// 3. Remove an item from the cart
// removeFromCart(123);

// 4. Get the cart items
$cartItems = getCartItems();
print_r($cartItems);

// 5. Get the total cart value (assuming product prices are known)
$total = getCartTotal();
echo "Total cart value: $" . number_format($total, 2) . "
";

?>


<?php

session_start(); // Start the session

// Define a function to add items to the cart
function addItemToCart($productId, $productName, $price, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If the product exists, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If the product doesn't exist, add it to the cart
    $_SESSION['cart'][$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example usage (Simulating adding items to the cart)
addItemToCart(1, 'T-Shirt', 20, 2);
addItemToCart(2, 'Jeans', 50, 1);
addItemToCart(1, 'T-Shirt', 20, 3); // Add more of the T-Shirt

// Display the contents of the cart
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $item) {
    echo "<li>";
    echo "Product: " . $item['name'] . "<br>";
    echo "Price: $" . number_format($item['price'], 2) . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Total for this item: $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
  }
  echo "</ul>";
}

// Calculate the total cost
$totalCost = 0;
if (!empty($_SESSION['cart'])) {
  foreach ($_SESSION['cart'] as $productId => $item) {
    $totalCost += $item['price'] * $item['quantity'];
  }
}

echo "<p><strong>Total Cost: $" . number_format($totalCost, 2) . "</strong></p>";

// --- Example of removing an item (optional) ---
// To remove an item, you would use a function like this:
// function removeItemFromCart($productId) {
//   if (isset($_SESSION['cart'][$productId])) {
//     unset($_SESSION['cart'][$productId]);
//   }
// }
//
// // Example: Remove product ID 1
// removeItemFromCart(1);

?>


<?php
session_start();

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array(); // Initialize the cart
}

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $item_price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$item_id])) {
    // Item already exists, increment the quantity
    $_SESSION['cart'][$item_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$item_id] = array(
      'name' => $item_name,
      'price' => $item_price,
      'quantity' => $quantity
    );
  }
}

// Example Usage:  You would typically call this from a form submission
// add_to_cart(1, 'T-Shirt', 20, 2); // Add two T-shirts
// add_to_cart(2, 'Jeans', 50, 1);   // Add one pair of jeans


// Function to remove an item from the cart
function remove_from_cart($item_id) {
  if (isset($_SESSION['cart'][$item_id])) {
    unset($_SESSION['cart'][$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($item_id, $quantity) {
  if (isset($_SESSION['cart'][$item_id])) {
    $_SESSION['cart'][$item_id]['quantity'] = $quantity;
  }
}

// Function to display the cart contents
function display_cart() {
  echo "<h2>Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    $item_name = $item_details['name'];
    $item_price = $item_details['price'];
    $quantity = $item_details['quantity'];
    $item_total = $item_total = $item_price * $quantity;
    $total += $item_total;

    echo "<tr>";
    echo "<td>" . $item_name . "</td>";
    echo "<td>$" . number_format($item_price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($item_total, 2) . "</td>";
    echo "</tr>";
  }

  echo "</table><br>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}

//  Example:  If you were processing a form submission, you would call this.
// display_cart();


// Example form submission handling (replace with your actual form processing)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['item_id']) && isset($_POST['quantity'])) {
    $item_id = $_POST['item_id'];
    $quantity = intval($_POST['quantity']); // Convert to integer

    // Add the item to the cart
    add_to_cart($item_id, "Product " . $item_id, 25, $quantity);

    // Display the updated cart
    display_cart();
  }

} else {
  // Initial display of the cart.
  display_cart();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart Example</title>
</head>
<body>

  <h2>Add Items to Cart</h2>
  <form method="post" action="">
    <label for="item_id">Item ID:</label>
    <select name="item_id" id="item_id">
      <option value="1">Product 1</option>
      <option value="2">Product 2</option>
      <option value="3">Product 3</option>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1"><br><br>

    <input type="submit" value="Add to Cart">
  </form>

</body>
</html>


<?php

session_start(); // Start the session

// Check if the cart is initialized.  If not, create it.
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array(); // Initialize an empty cart array
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update quantity of an item in cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// --- Example usage (you would replace this with your actual product handling) ---

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 1); // Add another laptop (overwrites the previous one)


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "<br>";
    echo "<form action='' method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='submit' value='Remove';</form>";
  }
  echo "</ul>";
}

//Example update
//updateQuantity(1, 3);

// Example remove
// removeFromCart(2);

// Print cart total
$total = 0;
if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $total += $item['price'] * $item['quantity'];
    }
}
echo "<p><strong>Total: $" . $total . "</strong></p>";

?>


<?php
session_start();

// --- Example Product Information ---
// This is just for demonstration.  In a real application,
// you would retrieve product data from a database or other source.

$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// --- Add to Cart Function ---
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;  // Get existing quantity or default to 0
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity; // Initialize if cart doesn't exist
    }
}

// --- Remove from Cart Function ---
function removeCartItem($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// --- Update Cart Item Quantity Function ---
function updateCartItemQuantity($productId, $quantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// --- View Cart Function ---
function viewCart()
{
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}

// --- Handle Add to Cart Request (Example - from a button click) ---
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id'];  // Cast to integer for safety
    $quantity = (int)$_POST['quantity'] ?? 1;  //Get quantity or default to 1

    addToCart($productId, $quantity);
}

// --- Handle Remove from Cart Request ---
if (isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id'];
    removeCartItem($productId);
}

// --- Handle Update Cart Item Quantity Request ---
if (isset($_POST['update_quantity'])) {
    $productId = (int)$_POST['product_id'];
    $newQuantity = (int)$_POST['quantity'];
    updateCartItemQuantity($productId, $newQuantity);
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart Example</h1>

<!-- Product Listing (Example) -->
<h2>Available Products</h2>
<ul>
    <?php
    foreach ($products as $id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . "<button onclick=\"addToCart(" . $id . ", 1)\" class=\"add-to-cart\">Add to Cart</button></li>";
    }
    ?>
</ul>

<hr>

<!-- Cart Display -->
<?php viewCart(); ?>

</body>
</html>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'name' => $product_name,
      'price' => $price
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example Usage:

// 1. Adding items to the cart
addToCart(1, 2, "Laptop", 1200);  // Product ID 1, Quantity 2, Name "Laptop", Price 1200
addToCart(2, 1, "Mouse", 25);   // Product ID 2, Quantity 1, Name "Mouse", Price 25
addToCart(1, 1, "Laptop", 1200); // Add another laptop

// 2. Displaying the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}

// 3. Removing an item
// removeCartItem(2); // Example: Remove the mouse

// 4. Updating the quantity
// updateCartItem(1, 3); // Example: Change the laptop quantity to 3

// 5. Calculating the total cost (example)
$total = 0;
foreach ($_SESSION['cart'] as $product_id => $item) {
  $total += $item['quantity'] * $item['price'];
}

echo "<p><b>Total: $" . $total . "</b></p>";

?>


<?php
session_start();

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage:  Let's say we have products with IDs 1, 2, and 3
// You'll typically get this data from a database or another source

// Add a product to the cart
addToCart(1, "T-Shirt", 20.00, 2); // Product ID 1, "T-Shirt", $20.00, quantity 2
addToCart(2, "Jeans", 50.00, 1); // Product ID 2, "Jeans", $50.00, quantity 1


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example of removing an item
// removeFromCart(1); // Remove the T-Shirt from the cart


// Example of updating quantity
// updateQuantity(2, 3); // Update the Jeans quantity to 3
?>


<?php
session_start();

// Array to hold cart items (key is product ID, value is quantity)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1)
{
  global $cart;

  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = ['quantity' => $quantity];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id)
{
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity)
{
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $quantity;
  }
}


// Example Usage -  Simulating some actions to populate the cart

// Add some items to the cart
add_to_cart(1, 2); // Product ID 1, Quantity 2
add_to_cart(2, 1); // Product ID 2, Quantity 1
add_to_cart(1, 3); // Product ID 1, Quantity 3  (update existing item)

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item_details) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item_details['quantity'] . "</li>";
  }
  echo "</ul>";
}

//  Simulating a remove action
// remove_from_cart(2);

//  Simulating an update action
// update_cart_quantity(1, 5);

// Display updated cart
echo "<h2>Updated Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item_details) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item_details['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Function to add an item to the cart ---
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it is, increase the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it's not, add the product to the cart
    $_SESSION['cart'][$productId] = array(
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// --- Example Usage ---

// Add an item to the cart
addItemToCart(101, "Awesome T-Shirt", 25.00, 2); // Product ID 101, Name, Price, Quantity

// Add another item to the cart
addItemToCart(102, "Cool Mug", 12.50, 1);

// --- Function to remove an item from the cart ---
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// --- Function to update quantity of an item in cart ---
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// --- Function to display the cart contents ---
function displayCart() {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $productId => $product) {
    $name = $product['name'];
    $price = $product['price'];
    $quantity = $product['quantity'];
    $itemTotal = $price * $quantity;
    $total += $itemTotal;

    echo "<tr>";
    echo "<td>" . $name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($itemTotal, 2) . "</td>";
    echo "</tr>";
  }

  echo "</table>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</p>";
}


// --- Display the cart contents ---
displayCart();
?>


<?php

session_start();

// Session variables for the cart
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (!isset($cart[$product_id])) {
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $cart[$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to display the cart contents
function displayCart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];

    echo "<li>" . $product_name . " - $" . $price . " x " . $quantity . "  <button onclick='updateQuantity(" . $product_id . ", 1)'>+</button> <button onclick='updateQuantity(" . $product_id . ", -1)'>-</button> <button onclick='removeCartItem(" . $product_id . ")'>Remove</button></li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($cart as $product_id => $product_details) {
    $total += $product_details['price'] * $product_details['quantity'];
  }

  echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// Example usage (simulating user actions)
// Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 2); //Add another laptop


// Update the quantity of a product
updateCartQuantity(2, 3); // Increase Mouse quantity to 3


// Display the cart contents
displayCart();


// --- Session Management ---
// Save the cart data to the session
session_start();
$_SESSION['cart'] = $cart;

// To retrieve the cart data later, you can use:
// $cart = $_SESSION['cart'];
// displayCart();


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Example Functions for Cart Operations ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // If the product is not in the cart, it's an error
    return false;
  }
  return true;
}

// Remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Get all items in the cart
function get_cart_items() {
  return $_SESSION['cart'];
}

// Calculate the cart total
function calculate_cart_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// --- Example Usage (Simulating User Actions) ---

// Add some items to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);
add_to_cart(1, "Laptop", 1200, 1); // Add another laptop

// Update quantity of the mouse
update_cart_quantity(2, 5);

// Remove the mouse
remove_from_cart(2);

// Get the cart contents
$cart_items = get_cart_items();
echo "<h2>Cart Items:</h2>";
echo "<ul>";
foreach ($cart_items as $item) {
  echo "<li>" . $item['name'] . " - " . $item['quantity'] . " x $" . $item['price'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
}
echo "</ul>";

// Calculate and display the total
$total = calculate_cart_total();
echo "<p><strong>Total: $" . $total . "</strong></p>";

?>


<?php
session_start();

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart(string $product_id, int $quantity = 1) {
    if (isset($_SESSION['cart'])) {
        // Item already in the cart, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item not in the cart, add it
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
    }
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function updateQuantity(string $product_id, int $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


/**
 *  Gets the items in the cart
 *
 * @return array|null Returns the cart items as an array, or null if the cart is empty.
 */
function getCart() {
    return $_SESSION['cart'] ?? null;
}


/**
 * Clears the entire cart
 *
 * @return void
 */
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Simulating a Product Page) ---

// 1.  Add an item to the cart (e.g., when a user clicks an "Add to Cart" button)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1; // Default to 1 if quantity not provided
    addToCart($product_id, $quantity);
    echo "<p>Item added to cart.</p>";
}


// 2. Remove an item from the cart (e.g., when a user clicks a "Remove from Cart" button)
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// 3. Update the quantity of an item
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = intval($_POST['quantity']);
    updateQuantity($product_id, $new_quantity);
    echo "<p>Quantity updated in cart.</p>";
}



// 4. Display the cart contents (This is just an example)
$cart_items = getCart();

if ($cart_items) {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}

// 5. Clear the cart (e.g., when a user clicks a "Clear Cart" button)
if (isset($_POST['clear_cart'])) {
    clearCart();
    echo "<p>Cart cleared.</p>";
}



?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Handle the case where the product isn't in the cart (e.g., product removed)
    // You might want to remove the product entirely here.
    // For simplicity, we'll just do nothing, but you should consider this.
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Example Usage (Simulated product data)
$products = array(
  1 => array('name' => 'Shirt', 'price' => 25),
  2 => array('name' => 'Pants', 'price' => 50),
  3 => array('name' => 'Shoes', 'price' => 80)
);

// --- Example Actions ---

// 1. Add a shirt to the cart
addToCart(1, $products[1]['name'], $products[1]['price']);

// 2. Add 2 pants to the cart
addToCart(2, $products[2]['name'], $products[2]['price'], 2);

// 3. Update the quantity of the shirt to 3
updateQuantity(1, 3);

// 4. Remove the pants
removeCartItem(2);

// --- Display the Cart Contents (for demonstration) ---
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start(); // Start the PHP session

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][] = $product_id; // Add to existing array
  } else {
    $_SESSION['cart'] = [$product_id => $quantity]; // Create a new array
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    unset($_SESSION['cart'][$product_id]); // Remove from array
    // Optionally, clean up if the cart becomes empty.
    if (empty($_SESSION['cart'])) {
      unset($_SESSION['cart']);
    }
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array An array of product IDs in the cart.
 */
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return []; // Return an empty array if the cart is empty
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


// --- Example Usage (for demonstration) ---

// 1. Adding items to the cart:
$product1Id = 123; // Example product ID
$product2Id = 456;
addToCart($product1Id);
addToCart($product1Id, 2); // Add two of product 1
addToCart($product2Id);


// 2. Displaying the cart contents:
$cartItems = getCartItems();
echo "<h2>Your Shopping Cart:</h2>";
if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $product_id => $quantity) {
        // You would ideally fetch product details here based on $product_id
        // For example:
        // $product = getProductDetails($product_id);
        // echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}


// 3. Removing an item from the cart:
removeFromCart($product1Id);


// 4. Updating the quantity of an item:
updateCartItemQuantity($product2Id, 5);


//Display updated cart:
$cartItems = getCartItems();
echo "<h2>Your Shopping Cart:</h2>";
if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $product_id => $quantity) {
        // You would ideally fetch product details here based on $product_id
        // For example:
        // $product = getProductDetails($product_id);
        // echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}



?>


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage (Simulating a product selection)

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);

// Add another product
addToCart(2, "Mouse", 25, 2);

//Update the quantity of the mouse
updateQuantity(2, 5);

// Remove a product from the cart
//removeFromCart(1);



// Displaying the cart contents
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start the session if it's not already started
session_start();

// Check if the cart is already initialized
if (!isset($_SESSION['cart'])) {
  // Initialize the cart as an empty array
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Example usage:

// Add a product to the cart
add_to_cart(1, "T-Shirt", 20, 2); // product_id, name, price, quantity
add_to_cart(2, "Jeans", 50, 1);

// Display the cart contents
$cart = get_cart_contents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove a product
remove_from_cart(1);

// Display the cart contents again after removing an item
$cart = get_cart_contents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Update quantity of a product
update_quantity(2, 3);

$cart = get_cart_contents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The unique ID of the product.
 * @param string $name      The name of the product.
 * @param int    $quantity  The quantity of the product to add.
 * @param float  $price     The price per item.
 *
 * @return void
 */
function addToCart(string $product_id, string $name, int $quantity, float $price) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][] = [
    'product_id' => $product_id,
    'name'       => $name,
    'quantity'   => $quantity,
    'price'      => $price,
  ];
}

/**
 * Updates the quantity of an existing item in the cart.
 *
 * @param string $product_id The unique ID of the product.
 * @param int    $newQuantity The new quantity of the item.
 *
 * @return void
 */
function updateCartItem(string $product_id, int $newQuantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
  }
}

/**
 * Removes an item from the cart by its ID.
 *
 * @param string $product_id The unique ID of the product.
 *
 * @return void
 */
function removeCartItem(string $product_id) {
  unset($_SESSION['cart'][$product_id]);
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateCartTotal() {
  $total = 0.0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price'];
    }
  }
  return $total;
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}

// --- Example Usage (Demonstration) ---

// 1. Add an item to the cart
addToCart('product123', 'T-Shirt', 2, 20.00);
addToCart('product456', 'Jeans', 1, 50.00);


// 2. Update the quantity of an item
updateCartItem('product123', 3); // Increase the quantity of T-Shirt to 3

// 3. Remove an item
// removeCartItem('product456');

// 4. Calculate the total
$total = calculateCartTotal();
echo "Cart Total: $" . number_format($total, 2) . "<br>";

// 5. Clear the cart
// clearCart();
// echo "Cart cleared.";

// --- Display Cart Contents (For demonstration only - adapt to your website layout) ---
echo "<br>";
echo "<h2>Cart Contents:</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . number_format($item['price'], 2) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// 1. Initialize the session if it doesn't exist
session_start();

// 2. Define a function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart session variable exists. If not, initialize it as an array.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart.
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already in the cart - increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in the cart - add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// 3. Example usage:  Let's say we have product IDs 1, 2, and 3

// Add product 1 to the cart - quantity 2
addToCart(1, "Awesome T-Shirt", 20, 2);

// Add product 2 to the cart - quantity 1
addToCart(2, "Cool Hat", 15, 1);

// Add product 1 again - quantity 1 (to demonstrate increasing quantity)
addToCart(1, "Awesome T-Shirt", 20, 1);

// 4. Display the cart contents (for demonstration purposes)
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total Cost:</strong> $" .  totalCartCost() . "</p>";
?>


<?php
session_start();

// Simulate a product and its price (replace with your actual data source)
$productName = "Awesome Widget";
$productPrice = 25.99;

// Check if the product is already in the cart
if (isset($_SESSION['cart']) === false) {
  // Cart is empty, initialize it as an array
  $_SESSION['cart'] = [];
}

// Add the product to the cart
$_SESSION['cart'][] = $productName . " - $" . $productPrice;

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item . "</li>";
  }
  echo "</ul>";
}

//  Example: Update quantity (optional - extend this for a full shopping cart)
//  If you want to allow users to update quantities, you'd need to add
//  variables for quantity and update $_SESSION['cart'] accordingly.
//  This is a more complex addition.

// You could add a "Update" button that would run a script to
// update the quantity in the cart.


// Example of removing an item from the cart (optional)
//  Add a "Remove" button to delete items.
//  You would then need to modify the cart array to remove the item.

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return bool True if the item was added, false otherwise (e.g., invalid product ID).
 */
function addToCart(int $product_id, int $quantity) {
  // Validate product ID (you should have better validation in a real application)
  if (!is_numeric($product_id) || $product_id <= 0) {
    return false;
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the item to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price'    => 0 // Replace with actual product price (from database)
    ];
  }
  return true;
}


/**
 * Retrieves the contents of the cart.
 *
 * @return array The cart contents as an associative array.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Return an empty array if cart is not initialized
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity for the product.
 * @return bool True if the quantity was updated, false otherwise.
 */
function updateCartQuantity(int $product_id, int $quantity) {
    if (!is_numeric($product_id) || $product_id <= 0) {
        return false;
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }

    return true;
}



/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True if the item was removed, false otherwise.
 */
function removeFromCart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    return true;
  }
  return false;
}



// --- Example Usage (Demonstration) ---

// 1. Add some items to the cart
addToCart(1, 2);  // Add product ID 1 in quantity 2
addToCart(2, 1);  // Add product ID 2 in quantity 1
addToCart(1, 3);  // Add product ID 1 in quantity 3 (updates existing quantity)

// Display the contents of the cart
$cart = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: $product_id, Quantity: $item['quantity']</li>";
  }
  echo "</ul>";
}


// 2.  Update the quantity of a product
updateCartQuantity(1, 5); // Change quantity of product 1 to 5

// Display the cart after update
$cart = getCart();
echo "<h2>Cart Contents (After Update):</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: $product_id, Quantity: $item['quantity']</li>";
  }
  echo "</ul>";
}

// 3. Remove an item from the cart
removeFromCart(2);

// 4. Display the cart after removal
$cart = getCart();
echo "<h2>Cart Contents (After Removal):</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: $product_id, Quantity: $item['quantity']</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start a session if it's not already started
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    // If it doesn't, initialize it as an empty array
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add a new item to the cart
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Gets all items in the cart.
 *
 * @return array  An array containing all items in the cart, or an empty array if the cart is empty.
 */
function getCartItems() {
  return $_SESSION['cart'];
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}



// --- Example Usage (Demonstration) ---

// Add some items to the cart
addToCart(101); // Product ID 101
addToCart(102, 2); // Product ID 102, quantity 2
addToCart(101, 3); // Product ID 101, quantity 3

// Display the contents of the cart
echo "<h2>Cart Items:</h2>";
echo "<ul>";
$cart_items = getCartItems();
if (empty($cart_items)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_items as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";

// Update the quantity of a product
updateCartQuantity(101, 5); // Change quantity of product 101 to 5

// Display the cart again after updating
echo "<br><h2>Cart Items (Updated):</h2>";
$cart_items = getCartItems();
if (empty($cart_items)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_items as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";


// Remove a product from the cart
removeFromCart(102);

// Display the cart after removing an item
echo "<br><h2>Cart Items (After Removal):</h2>";
$cart_items = getCartItems();
if (empty($cart_items)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_items as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";


// Clear the cart
//clearCart();

// Display the cart after clearing
// echo "<br><h2>Cart Items (After Clearing):</h2>";
// $cart_items = getCartItems();
// if (empty($cart_items)) {
//   echo "<li>Cart is empty.</li>";
// } else {
//   foreach ($cart_items as $product_id => $item) {
//     echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
//   }
// }
// echo "</ul>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to display the cart contents
function displayCart() {
  echo "<h2>Shopping Cart</h2>";
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
      echo "<li>";
      echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
      echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
      echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
      echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
      echo "</li>";
    }
    echo "</ul>";
    // Calculate the total cart value
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $total += ($product_details['price'] * $product_details['quantity']);
    }
    echo "<p><strong>Total Cart Value:</strong> $" . $total . "</p>";
  }
}


// Example Usage (Simulating a user adding items to the cart)

// Add item 1
addToCart(1, "Laptop", 1200, 1);

// Add item 2
addToCart(2, "Mouse", 25, 2);

// Add item 1 again - to update quantity
addToCart(1, "Laptop", 1200, 3);

// Display the cart
displayCart();

// Remove item 2 from the cart
removeFromCart(2);

// Display the cart after removal
displayCart();


//  You would typically integrate this with your product details and potentially
//  a database to store and retrieve products.  This example is for demonstration
//  purposes.
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// ------------------------------------------------------------------------
//  Functions to handle adding items to the cart
// ------------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

// ------------------------------------------------------------------------
//  Example usage - Handle adding items from a form (simulated)
// ------------------------------------------------------------------------

//  If a form was submitted (simulated here for demonstration)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1; // Default quantity is 1
    add_to_cart($product_id, $quantity);
}


// ------------------------------------------------------------------------
//  Functions to handle cart manipulation (e.g., removing items)
// ------------------------------------------------------------------------

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}



// ------------------------------------------------------------------------
//  Functions to calculate cart totals
// ------------------------------------------------------------------------

/**
 * Calculates the total number of items in the cart.
 *
 * @return int The total number of items.
 */
function get_cart_total() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $total_for_product = $quantity; // Assuming you'll fetch product price later
            $total += $total_for_product;
        }
    }
    return $total;
}

/**
 * Calculates the cart total (simplified - assuming product price is known)
 *  **Important:** This is a basic example.  In a real application, you'd fetch
 *  the price of each product from a database or other source.
 *
 * @return float The total cart value.
 */
function get_cart_total_value() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            // Simulate fetching product price (replace with your database lookup)
            $product_price = 25; // Example price
            $total_for_product = $product_price * $quantity;
            $total_for_product = $total_for_product;
            $total += $total_for_product;
        }
    }
    return $total;
}


// ------------------------------------------------------------------------
//  Display the cart contents
// ------------------------------------------------------------------------

// Display the cart contents
if (isset($_SESSION['cart'])) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        //  Replace this with your actual product details retrieval from the database
        $product_name = "Product " . $product_id;

        echo "<li>" . $product_name . " - Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Cart Value: $" . get_cart_total_value() . "</strong></p>";
} else {
    echo "<p>Your cart is empty.</p>";
}

?>


// Replace this with your database query to get the product price
$product_price = get_product_price($product_id); // Assuming you have a function to fetch the price


<?php

session_start(); // Start the session

// This is a very basic cart implementation.  For production, you'll
// want to use a database and handle quantities, images, etc. properly.

// -------------------------------------------------------------------
// Utility Functions (for example)
// -------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id  The ID of the product.
 * @param int $quantity    The quantity to add.
 */
function addToCart($product_id, $quantity) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Initialize the cart array
    }

    $_SESSION['cart'][] = $product_id; // Add the product ID to the cart
    $_SESSION['quantity'][$product_id] = $quantity; // Store the quantity
}


// -------------------------------------------------------------------
// Example Usage - Simulate User Interactions
// -------------------------------------------------------------------

// Simulate user adding products to the cart:
addToCart(1, 2); // User adds product with ID 1, quantity 2
addToCart(2, 1); // User adds product with ID 2, quantity 1
addToCart(1, 3); // User adds product with ID 1, quantity 3

// -------------------------------------------------------------------
// Display the Cart
// -------------------------------------------------------------------

echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    // Loop through the cart and display the items
    foreach ($_SESSION['cart'] as $product_id) {
        // Simulate fetching product details (replace with actual database query)
        $product_name = "Product " . $product_id;
        $product_price = rand(10, 50); // Random price for demonstration

        echo "<li>$product_name - $" . $product_price . " (Quantity: " . $_SESSION['quantity'][$product_id] . ")</li>";
    }
    echo "</ul>";
}


// -------------------------------------------------------------------
// Example:  Simulating Removing an Item (Advanced - requires a method to identify the item to remove)
// -------------------------------------------------------------------
/*
//  This requires a way to identify the product to remove (e.g., a hidden field)
//  For simplicity, this example assumes you know the product_id
//  For production, you'd use a more robust mechanism.

$product_id_to_remove = 1; // Example: User selected to remove product 1

if (isset($_POST['remove_item'])) {
    if (isset($_SESSION['cart']) && isset($_SESSION['quantity'][$product_id_to_remove])) {
        unset($_SESSION['cart'][$product_id_to_remove]);
        unset($_SESSION['quantity'][$product_id_to_remove]);
    }
}

//  After the removal code, you would likely need to refresh the cart display.

// -------------------------------------------------------------------
// Important Considerations and Next Steps:

// 1. Database Integration:  This is a *very* basic example. In a real application,
//    you would store product details (name, price, image, etc.) in a database.
//    You would then use SQL queries to fetch product information based on the
//    product ID.

// 2. Quantity Handling:  This example simply adds the product to the cart.
//    You'll need to allow users to update the quantity of items in their cart.
//    This usually involves adding a quantity field to the cart display and
//    handling form submissions to update the quantity in the session.

// 3.  Session Management:  Make sure your session is properly set up and
//     handled.  Set the session cookie with the appropriate flags (e.g., `session.cookie_secure = true` if you are using HTTPS).

// 4.  Error Handling:  Add error handling for situations like invalid product IDs,
//    empty carts, etc.

// 5.  User Interface (UI):  You'll need to design and implement a user-friendly
//     interface for adding items to the cart, viewing the cart, and
//     updating quantities.

// 6.  Security:  Always sanitize and validate user input to prevent
//     security vulnerabilities (e.g., SQL injection).  Use prepared statements
//     when interacting with the database.

// 7.  Data Storage: For larger carts or multiple users, consider using
//     a caching system (like Redis or Memcached) to improve performance.
// -------------------------------------------------------------------


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// Example Usage:  (Simulate user actions)

// 1. Add an item to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);


// 2.  Update the quantity of a product
updateCartQuantity(2, 5); // Now user has 5 mice in the cart

// 3. Remove an item from the cart
// removeCartItem(1); // Uncomment to remove the laptop.

// 4. Display the cart contents
$cart = getCartContents();
echo "<h2>Your Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total Price for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Check if the cart is empty
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Example Usage:  (Simulated data for demonstration)

// Add a product to the cart
addToCart(1, "Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);

// Update the quantity of a product
updateQuantity(1, 5);  // Increase shirt quantity to 5

// Get the cart contents
$cartContents = getCartContents();
print_r($cartContents);

// Remove an item from the cart
removeCartItem(2);

// Get the cart contents again
$cartContents = getCartContents();
print_r($cartContents);
?>


<?php

session_start();

// --- Initialize Cart (if it doesn't exist) ---
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Remove item from cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// --- Example Usage (Simulating adding items to the cart) ---

// Add a product
addToCart(1, 'Laptop', 1200, 1);
// Add another laptop
addToCart(1, 'Laptop', 1200, 2);
// Add a phone
addToCart(2, 'Smartphone', 800, 1);

// Print the contents of the cart
echo "<h2>Your Cart:</h2>";
echo "<ul>";
if (empty($_SESSION['cart'])) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
    echo "</li>";
  }
}
echo "</ul>";

// --- Example: Remove an item ---
// removeFromCart(1);  //Remove the first laptop

// --- Example: Update quantity ---
// updateQuantity(2, 3); // Change the quantity of the smartphone to 3

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ---  Functions to Manage the Cart ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $new_quantity;
  }
}

/**
 * Gets the cart contents.
 *
 * @return array  An array representing the cart contents (product_id => quantity).
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cart_contents The cart contents array.
 * @return float  The total price.  Returns 0 if cart is empty.
 */
function calculate_total($cart_contents) {
  $total = 0;
  foreach ($cart_contents as $product_id => $quantity) {
    //  Assume you have a product details database to get the price
    $product_price = get_product_price($product_id);
    if($product_price > 0) {
        $total_for_item = $product_price * $quantity;
        $total += $total_for_item;
    }
  }
  return $total;
}

/**
 * Placeholder function to get product price.  You'll need to implement this
 * based on how your product information is stored.
 *
 * @param int $product_id The ID of the product.
 * @return float  The price of the product.
 */
function get_product_price($product_id) {
  //  Replace this with your actual database query or logic to retrieve the price.
  //  This is just a placeholder.
  switch ($product_id) {
    case 1: return 10.00;
    case 2: return 25.50;
    case 3: return 5.75;
    default: return 0; // Handle unknown product ID
  }
}



// --- Example Usage (Illustrative - for demonstration) ---

// 1. Add a product to the cart
add_to_cart(1); // Add one of product ID 1
add_to_cart(2, 2); // Add two of product ID 2

// 2. Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_contents as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
}
echo "</ul>";


// 3. Calculate and display the total
$total = calculate_total($cart_contents);
echo "<p>Total: $" . $total . "</p>";


// 4. Remove a product
remove_from_cart(1);

// 5. Update the quantity of a product
update_cart_quantity(2, 3);


// 6. Display the cart contents after updates
echo "<h2>Cart Contents (After Updates):</h2>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_contents as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
}
echo "</ul>";

$total = calculate_total($cart_contents);
echo "<p>Total: $" . $total . "</p>";


?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// -------------------- Functions for Cart Management --------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = 0;  // Initialize count if not already present
    }
    $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array containing the items in the cart.
 */
function get_cart_items() {
    return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function cart_total() {
    $total = 0;
    foreach($_SESSION['cart'] as $quantity => $qty) {
        $total = $total + $qty;
    }
    return $total;
}



// -------------------- Example Usage (Simulated Product Add/Remove) --------------------

// Example 1: Add a product to the cart
add_to_cart(123, 2); // Add 2 units of product with ID 123

// Example 2: Add another unit of the same product
add_to_cart(123, 1);

// Example 3:  Remove a product
// remove_from_cart(123);

// Example 4: Update the quantity of a product
// update_cart_quantity(123, 3);


// -------------------- Displaying the Cart --------------------

// Get the cart items
$cart_items = get_cart_items();

// Print the cart items
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $quantity) {
        //  In a real application, you'd retrieve product details here 
        //  based on the $product_id
        echo "<li>Product ID: $product_id, Quantity: $quantity</li>";
    }
    echo "</ul>";
    echo "<p>Cart Total: " . cart_total() . "</p>";
}


//  You would typically:
// 1.  Replace the product ID's with actual product IDs from your database.
// 2.  Retrieve product details (name, price, etc.) for each product in the cart.
// 3.  Implement a mechanism for users to view and modify the cart contents.
// 4.  Integrate this cart functionality with your shopping cart system.

?>


<?php
session_start();

// This code demonstrates a basic shopping cart session.
// In a real application, you'd likely use a database for persistent storage.

// ----------------- Cart Functions -----------------

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($productId, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0; // Use ?? to default to 0 if not set
    $_SESSION['cart'][$productId] += $quantity;
  } else {
    $_SESSION['cart'][$productId] = $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $productId The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId] = $quantity;
  }
}

/**
 * Gets the contents of the cart.
 *
 * @return array An array representing the cart items.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Return an empty array if 'cart' isn't set
}


// ----------------- Example Usage (For Demonstration) -----------------

// Simulate a product ID and its details
$productId = 123;
$productName = "Awesome T-Shirt";
$productPrice = 25.00;


// ----------------- Adding Items to the Cart -----------------
if (isset($_POST['add_to_cart'])) {
  // Assuming the form has an input field named "quantity"
  $quantity = intval($_POST['quantity']); // Convert to integer
  addToCart($productId, $quantity);
}

// ----------------- Displaying the Cart -----------------
$cartItems = getCart();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $id => $qty) {
    echo "<li>" . $productName . " - Quantity: " . $qty . " - Price: $" . $productPrice . "</li>";
  }
  echo "</ul>";
}

// ----------------- Example Remove Item -----------------
if (isset($_GET['remove_item'])) {
  removeFromCart($productId);
}

// ----------------- Example Update Quantity -----------------
if (isset($_POST['update_quantity'])) {
    $newQuantity = intval($_POST['quantity']);
    updateQuantity($productId, $newQuantity);
}



?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart Example</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Add to Cart Form -->
  <form method="post" action="">
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <!-- Remove Item Button -->
  <a href="?remove_item=<?php echo $productId; ?>">Remove from Cart</a>

  <!-- Update Quantity Form -->
  <form method="post" action="">
    <label for="quantity">Update Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="<?php echo $_SESSION['cart'][$productId] ?? 1; ?>" min="1">
    <button type="submit" name="update_quantity">Update Quantity</button>
  </form>

</body>
</html>


<?php
session_start();

// This is a basic example and can be expanded upon.

// Function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][] = [
    'id' => $item_id,
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Example Usage:

// Adding an item to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00);

// Displaying the cart contents
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

// Example of removing an item
// You'd likely implement this using a session variable for the item ID
// to be removed.  This is just a conceptual illustration.

// if (isset($_POST['remove_item'])) {
//   $item_id_to_remove = $_POST['remove_item'];
//   // Implement logic to remove the item from the cart
// }

// End of example.  This code is illustrative and needs a real web app setup
// (HTML form, database, etc.) to function properly.

?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
      'total' => $price * $quantity // Calculate total for the item
    );
  } else {
    // If the item already exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $newQuantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}


// Example usage:

// Add an item to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// Remove an item from the cart
//removeCartItem(2); // Uncomment to remove the mouse

// Update the quantity of an item
//updateCartQuantity(1, 3); //  Update laptop quantity to 3

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . $product_details['total'] . "<button onclick='removeCartItem(" . $product_id . ")'>Remove</button></li>";
  }
  echo "</ul>";
}

// You'll typically use this cart data in your HTML to display the cart and allow users to proceed to checkout.
// You'd also use this to calculate the total amount for the order.
?>


<?php
session_start();

// --- Example Cart Data ---
$cart = array();

// Functions to manipulate the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][] = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

function remove_from_cart($product_id) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Optionally, re-index the array if needed
        // reset($_SESSION['cart']);
        return true;
      }
    }
    return false; // Item not found
  }
  return false; // Cart is empty
}

function update_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        $_SESSION['cart'][$key]['quantity'] = $new_quantity;
        return true;
      }
    }
    return false; // Item not found
  }
  return false; // Cart is empty
}

function get_cart_contents() {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return array(); // Return an empty array if the cart is empty
}

function calculate_total() {
    $total = 0;
    $cart_contents = get_cart_contents();
    foreach ($cart_contents as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Usage ---

// Add a product to the cart
add_to_cart(1, "Awesome T-Shirt", 25.00, 2);
add_to_cart(2, "Cool Mug", 10.00, 1);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_contents = get_cart_contents();
if (!empty($cart_contents)) {
    foreach ($cart_contents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
} else {
    echo "<li>Your cart is empty.</li>";
}
echo "</ul>";

echo "<p><strong>Total:</strong> $" . calculate_total() . "</p>";

// Remove a product
if (remove_from_cart(1)) {
  echo "<p>Awesome T-Shirt removed from cart.</p>";
} else {
  echo "<p>Unable to remove Awesome T-Shirt.</p>";
}


//Update quantity
if (update_quantity(2, 3)) {
    echo "<p>Mug quantity updated to 3</p>";
} else {
    echo "<p>Unable to update Mug quantity.</p>";
}

//Display updated cart
echo "<h2>Your Updated Shopping Cart</h2>";
echo "<ul>";
$cart_contents = get_cart_contents();
if (!empty($cart_contents)) {
    foreach ($cart_contents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
} else {
    echo "<li>Your cart is empty.</li>";
}
echo "</ul>";
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity of the product.
 * @return void
 */
function update_cart_item($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function get_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $quantity) {
    $total += $quantity;
  }
  return $total;
}


/**
 * Gets the contents of the cart.
 *
 * @return array  An array containing the cart's contents
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

// --- Example Usage / Demonstration ---

// 1. Adding items to the cart
add_to_cart(101, 2); // Add 2 units of product with ID 101
add_to_cart(102, 1); // Add 1 unit of product with ID 102
add_to_cart(101, 3); // Add 3 units of product with ID 101
add_to_cart(103, 1); // Add 1 unit of product with ID 103

// 2. Displaying the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Items in Cart: " . get_cart_total() . "</p>";


// 3. Removing an item
remove_from_cart(102);

// 4. Updating an item
update_cart_item(101, 5);

echo "<p>Total Items in Cart: " . get_cart_total() . "</p>";

// 5. Displaying cart contents again after changes
echo "<p>Total Items in Cart: " . get_cart_total() . "</p>";

//Display updated cart contents
echo "<p>Total Items in Cart: " . get_cart_total() . "</p>";

echo "<p>Updated Cart Contents: " . print_r($_SESSION['cart'], true) . "</p>";
?>


<?php
session_start();

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists, initialize if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}

// --- Example Usage ---

// 1. Add an item to the cart
addToCart(1, "T-Shirt", 20, 2); // Product ID 1, T-Shirt, $20, Quantity 2
addToCart(2, "Jeans", 50, 1); // Product ID 2, Jeans, $50, Quantity 1


// 2. Update the quantity of an item
updateCartQuantity(1, 3); // Increase the quantity of T-Shirts to 3

// 3. Remove an item
//removeCartItem(2); // Remove Jeans


// 4. Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price per item: $" . $item['price'] . " - Total: $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}


// 5. Calculate the total
$total = calculateCartTotal();
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";

?>


<?php
session_start();

// ------------------- Session Management Functions -------------------

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart with a quantity of 1
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return void
 */
function update_cart_quantity(int $product_id, int $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents as an array.
 */
function get_cart() {
  return $_SESSION['cart'] ?? []; // Returns the cart or an empty array if not initialized.
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart() {
  unset($_SESSION['cart']);
}

// ------------------- Example Usage (This is for demonstration) -------------------

// 1. Add a product to the cart
add_to_cart(123); // Adds product ID 123 to the cart with a quantity of 1.
add_to_cart(456, 2); // Adds product ID 456 to the cart with a quantity of 2.


// 2. Get the current cart contents
$cart_items = get_cart();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// 3. Update the quantity of product 123 to 3
update_cart_quantity(123, 3);

// 4.  Display cart after update
echo "<h2>Cart Contents After Update:</h2>";
$cart_items = get_cart();
echo "<ul>";
foreach ($cart_items as $product_id => $item) {
  echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
}
echo "</ul>";


// 5. Remove product 456
remove_from_cart(456);

// 6. Display cart after removal
echo "<h2>Cart Contents After Removal:</h2>";
$cart_items = get_cart();
echo "<ul>";
foreach ($cart_items as $product_id => $item) {
  echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
}
echo "</ul>";


// 7. Clear the cart
clear_cart();
echo "<h2>Cart Contents After Clearing:</h2>";
$cart_items = get_cart();
if (empty($cart_items)) {
  echo "<p>Your cart is now empty.</p>";
} else {
  echo "<p>Your cart is not empty.  This shouldn't happen.</p>"; // Debugging
}
?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// Example Usage (Simulated product information - replace with your database or API)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];


// Example: Adding items to the cart
addToCart(1, $products[1]['name'], $products[1]['price']);
addToCart(2, $products[2]['name'], $products[2]['price'], 3);
addToCart(3, $products[3]['name'], $products[3]['price']);


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>" . $product_data['name'] . "</strong> - $" . $product_data['price'] . " (Quantity: " . $product_data['quantity'] . ")";
    echo "<form action='' method='post'>"; // Empty action to prevent accidental form submission
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='number' name='quantity' value='" . $product_data['quantity'] . "' min='1'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example: Handling the update form submission (if you want to update quantities)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['product_id'])) {
        $product_id = $_POST['product_id'];
        $new_quantity = intval($_POST['quantity']);  // Ensure the quantity is an integer

        if (isset($_SESSION['cart'][$product_id])) {
            updateQuantity($product_id, $new_quantity);
        } else {
            echo "<p>Product not found in cart.</p>";
        }
    }
}



?>


<?php
session_start();

// This is a simple example, suitable for small carts.  For production,
// you'll want a more robust solution (e.g., using a database).

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart.  If so, increment quantity.
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If the product is not in the cart, add it with quantity 1.
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the contents of the cart
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to clear the entire cart
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Simulated User Interaction) ---

// Add some items to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(1, "T-Shirt", 20.00, 1); // Add another T-Shirt

// Display the cart contents
echo "<h2>Your Shopping Cart:</h2>";
echo "<ul>";
$cartContents = getCartContents();
if (!empty($cartContents)) {
  foreach ($cartContents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
} else {
  echo "<li>Your cart is empty.</li>";
}
echo "</ul>";


// Simulate updating the quantity of a product
updateQuantity(1, 3); // Increase the quantity of T-Shirt to 3

// Display the updated cart contents
echo "<br>";
echo "<h2>Updated Cart Contents:</h2>";
echo "<ul>";
$cartContents = getCartContents();
if (!empty($cartContents)) {
    foreach ($cartContents as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
} else {
  echo "<li>Your cart is empty.</li>";
}
echo "</ul>";

// Simulate removing an item
removeCartItem(2);

// Display the updated cart contents after removal
echo "<br>";
echo "<h2>Cart After Removing Jeans:</h2>";
echo "<ul>";
$cartContents = getCartContents();
if (!empty($cartContents)) {
    foreach ($cartContents as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
} else {
  echo "<li>Your cart is empty.</li>";
}
echo "</ul>";

// Clear the cart
clearCart();

echo "<br>";
echo "<h2>Cart After Clearing:</h2>";
echo "<ul>";
$cartContents = getCartContents();
if (!empty($cartContents)) {
    foreach ($cartContents as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
} else {
  echo "<li>Your cart is empty.</li>";
}
echo "</ul>";
?>


<?php
session_start(); // Start the session

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int $quantity The quantity of the product to add.
 * @param float $price The price of the product per unit.
 * @return bool True if the item was added, false otherwise (e.g., invalid quantity).
 */
function addToCart(string $product_id, string $name, int $quantity, float $price) {
  // Validation
  if ($quantity <= 0) {
    return false;
  }

  // If the item is already in the cart, update the quantity.
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add a new item to the cart.
    $_SESSION['cart'][$product_id] = [
      'name' => $name,
      'quantity' => $quantity,
      'price' => $price
    ];
  }
  return true;
}


/**
 * Retrieves the items in the cart.
 *
 * @return array An array representing the cart contents.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use ?? to return an empty array if 'cart' is not set
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return bool True if the quantity was updated, false otherwise (e.g., invalid quantity).
 */
function updateCartItemQuantity(string $product_id, int $new_quantity) {
    if ($new_quantity <= 0) {
        return false;
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
    return true;
}



/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart(string $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}


/**
 * Calculates the total cost of the items in the cart.
 *
 * @return float The total cost.
 */
function calculateCartTotal() {
  $total = 0;
  $cart = getCart();
  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}



// --- Example Usage (for demonstration) ---

// Add some items to the cart
addToCart('product1', 'Awesome T-Shirt', 2, 25.00);
addToCart('product2', 'Cool Hat', 1, 15.00);


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
$cart = getCart();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p>Total: $" . calculateCartTotal() . "</p>";
}

// Example: Update the quantity of a product
updateCartItemQuantity('product1', 3);

// Example: Remove an item from the cart
removeFromCart('product2');


// Display the cart contents after changes
echo "<h2>Your Shopping Cart (Updated)</h2>";
$cart = getCart();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p>Total: $" . calculateCartTotal() . "</p>";
}

// Example: Clear the cart
// clearCart();

// Display the cart contents after clearing
// echo "<h2>Your Shopping Cart (Cleared)</h2>";
// $cart = getCart();
// if (empty($cart)) {
//   echo "<p>Your cart is empty.</p>";
// }
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    
    // Optional:  If you want to remove items with 0 quantity
    // if (empty($_SESSION['cart'])) {
    //   $_SESSION['cart'] = array();
    // }
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart items
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return array(); // Return an empty array if the cart is empty
}

// Example Usage (Simulating a product listing and a user action)
// In a real application, you'd get this data from a database or other source.

$products = array(
  1 => array('name' => 'Shirt', 'price' => 20),
  2 => array('name' => 'Pants', 'price' => 30),
  3 => array('name' => 'Shoes', 'price' => 50)
);

// 1. Add items to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Validate the product ID
  if (array_key_exists($product_id, $products)) {
    addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
  }
}

// 2. Remove an item
if (isset($_GET['remove_item'])) {
  $product_id = $_GET['remove_item'];
  removeFromCart($product_id);
}


// 3. Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($product_id, $new_quantity);
}

// 4. Display the cart items
$cart_items = getCartItems();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)): ?>
    <p>Your cart is empty.</p>
  <?php else: ?>
    <table>
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($cart_items as $item_id => $product): ?>
          <tr>
            <td><?php echo $product['name']; ?></td>
            <td>$<?php echo number_format($product['price'], 2); ?></td>
            <td><?php echo $product['quantity']; ?></td>
            <td>
              <form method="post">
                <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                <button type="submit">Remove</button>
              </form>
              <form method="post">
                <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
                <input type="number" name="quantity" value="<?php echo $product['quantity']; ?>">
                <button type="submit">Update</button>
              </form>
            </td>
          </tr>
        <?php endforeach; ?>
      </tbody>
    </table>

    <p>Total: $<?php
      $total = 0;
      foreach ($cart_items as $product_id => $product) {
        $total += $product['price'] * $product['quantity'];
      }
      echo number_format($total, 2);
    ?>
    </p>
  <?php endif; ?>

  <hr>
  <p>Add Items:</p>
  <form method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <?php
      foreach ($products as $id => $product): ?>
        <option value="<?php echo $id; ?>"><?php echo $id; ?></option>
      <?php endforeach; ?>
    </select>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" value="1" min="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

</body>
</html>


<?php

// Session handling start
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ---  Example functions to manage the cart ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function get_cart_contents() {
    return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total_item_price = $item['price'] * $item['quantity'];
        $total += $total_item_price;
    }
    return $total;
}

// --- Example usage (This section is for demonstration. In a real application,
//  this would be handled by a form submission) ---

// 1.  Adding an item to the cart (simulated form submission)
//    In a real application, this would come from a form submission.
//    For this example, let's add a product with ID 1, name "Shirt", price $20, quantity 2
//    add_to_cart(1, 'Shirt', 20, 2);

// 2.  Updating the quantity of an item
//    update_cart_quantity(1, 5); // Change quantity of "Shirt" (ID 1) to 5

// 3. Getting the cart contents
$cart_items = get_cart_contents();
print_r($cart_items); // This will show the contents of the cart

// 4. Calculating the total
$total = calculate_cart_total();
echo "Total cart value: $" . $total . "<br>";

// 5. Removing an item from the cart
// remove_from_cart(1); // Remove the "Shirt" (ID 1) from the cart.  This is commented out to prevent accidentally emptying the cart.

?>


<?php

session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $product_price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name,
      'price' => $product_price,
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example Usage (Simulating a product being added to the cart)
// Assuming a product ID of 1, quantity of 2, product name "Laptop", and price of $1000
addToCart(1, 2, "Laptop", 1000);

// Example Usage (Simulating a product being removed from the cart)
// Assuming a product ID of 1
//removeFromCart(1);

// Example Usage (Simulating updating the quantity)
// Assuming a product ID of 1 and a new quantity of 3
//updateQuantity(1, 3);

// Displaying the Cart Contents
if (isset($_SESSION['cart'])) {
  echo "<h2>Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Price per item:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . $product_details['quantity'] * $product_details['price'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

//  Optional:  Implement session expiration (important for security)
//  This is a basic example.  In a real application, you'd use a more robust mechanism.
//  This is just to illustrate the concept of session expiration.
//  You'd likely use a timer and a mechanism to destroy the session if it's inactive.
//  For example:
//  setcookie("session_id", session_id(), time() + 3600); // Set cookie for 1 hour (adjust as needed)
//  You'd then need code to check if the session has been idle for a specific time.

?>


<?php

// Start a session (if not already started)
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product (for display purposes).
 * @param int $price The price of the product.
 * @param int $quantity The quantity to add (default is 1).
 */
function add_to_cart(string $product_id, string $product_name, float $price, int $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 */
function update_cart_quantity(string $product_id, int $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function remove_from_cart(string $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculate_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Illustrative - Replace with actual product data) ---

// Add some products to the cart
add_to_cart("product1", "Laptop", 1200.00, 1);
add_to_cart("product2", "Mouse", 25.00, 2);
add_to_cart("product3", "Keyboard", 75.00, 1);


// Example: Update the quantity of product2 to 3
update_cart_quantity("product2", 3);


// Example: Remove product1 from the cart
// remove_from_cart("product1");


// Get and display the cart contents
$cart_contents = get_cart_contents();

echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - Quantity: " . $product_details['quantity'] . " - Price: $" . $product_details['price'] . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Cart Value: $" . calculate_cart_total() . "</p>";


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage:
// Add an item to the cart
addToCart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, Price $1200, Quantity 1
addToCart(2, "Mouse", 25, 2);    // Product ID 2, Mouse, Price $25, Quantity 2

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeCartItem(2); // Remove the Mouse

// Example of updating quantity
// updateQuantity(1, 3); // Update the quantity of the Laptop to 3

// You would typically have a method for calculating the total cart price here.
?>


<?php
session_start();

// Define cart variables (these will be stored in the session)
$cart = array();
$total_items = 0;
$total_price = 0.00;

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $item_price, $quantity = 1) {
    global $cart;

    // Check if the item is already in the cart
    if (isset($cart[$item_id])) {
        $cart[$item_id]['quantity'] += $quantity;
    } else {
        $cart[$item_id] = array(
            'name' => $item_name,
            'price' => $item_price,
            'quantity' => $quantity
        );
    }

    // Update total items and price
    $total_items += $quantity;
    $total_price += $item_price * $quantity;
}

// --- Example Usage (Simulating user interactions) ---

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);
add_to_cart(1, 'T-Shirt', 20.00, 1); // Add another T-Shirt

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $item_details) {
        echo "<li>";
        echo "<strong>" . $item_details['name'] . "</strong> - $" . number_format($item_details['price'], 2) . "</li>";
        echo "Quantity: " . $item_details['quantity'] . "<br>";
    }
    echo "</ul>";

    // Calculate and display the total price
    echo "<p><strong>Total: $" . number_format($total_price, 2) . "</strong></p>";
}

// ---  Session Management (Example) ---

//  You would typically do this based on user actions (e.g., adding to cart, updating quantity, removing item)
//  This is just a simplified example

//  Let's simulate adding an item.  In a real app, this would come from user interaction.
// add_to_cart(3, 'Hat', 15.00, 1);

// To clear the cart, you'd reset the session variables:
// session_start();
// unset($cart);
// session_write_close(); // Important to release the session
?>


<?php
session_start(); // Start the session

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
    if (isset($_SESSION['cart'])) {
        // Item already in cart - increment quantity
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        // Item not in cart - add it
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents as an associative array.
 */
function getCart() {
    return $_SESSION['cart'] ?? []; // Return cart or empty array if session doesn't exist
}

/**
 * Gets the total number of items in the cart
 *
 * @return int
 */
function getCartTotal() {
    $total = 0;
    if(isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $quantity) {
            $total += $quantity;
        }
    }
    return $total;
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
    unset($_SESSION['cart']);
}


// --- Example Usage (Simulating a product list - replace with your actual product data) ---

$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];

// ---  Add to Cart Examples ---
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id'];
    $quantity = (int)$_POST['quantity']; // Allow for different quantities
    addToCart($product_id, $quantity);
    echo "<p>Item added to cart.</p>";
}

// --- Display Cart Contents ---
$cart = getCart();

echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        $product = $products[$product_id];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Items: " . getCartTotal() . "</p>";
}

// --- Example Remove Item ---
if (isset($_POST['remove_item'])) {
    $product_id = (int)$_POST['product_id'];
    removeFromCart($product_id);
    echo "<p>Item removed from cart.</p>";
}

// --- Clear Cart (Example - usually a button on your page) ---
if (isset($_POST['clear_cart'])) {
    clearCart();
    echo "<p>Cart cleared.</p>";
}

?>


<?php
session_start();

// --- Cart Operations ---

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][] = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use reference to modify directly
      if ($item['id'] == $product_id) {
        $item['quantity'] = $new_quantity;
        break;
      }
    }
  }
}

// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Re-index the array to avoid gaps
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        break;
      }
    }
  }
}

// Function to get the contents of the cart
function getCart() {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return [];
  }
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  $cart = getCart();

  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }

  return $total;
}


// --- Example Usage (Simulating User Interactions) ---

// 1. Add an item to the cart
addToCart(1, "Awesome T-Shirt", 20, 2);  // Product ID 1, Name "Awesome T-Shirt", Price 20, Quantity 2

// 2. Update the quantity of an item
updateQuantity(1, 3); // Increase quantity of product 1 to 3

// 3. Remove an item from the cart
// removeItem(1);

// 4. Get the cart contents
$cart_items = getCart();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 5. Calculate the total
$total = calculateTotal();
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";

?>


<?php
session_start();

// ------------------------------------
//  Session Management Functions
// ------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart(int $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        // Product already in cart - increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product not in cart - add it with quantity 1
        $_SESSION['cart'][$product_id] = [
            'quantity' => $quantity,
            'price' => getProductPrice($product_id) // Assuming a function to get the price
        ];
    }
}

/**
 * Retrieves the total cart value.
 *
 * @return float The total cart value.
 */
function getCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $totalItem = $item['quantity'] * getProductPrice($item['id']); //Use getProductPrice here to get the price
            $total += $totalItem;
        }
    }
    return $total;
}

/**
 * Retrieves the price of a product given its ID.
 *  This is a placeholder - you'll need to implement this function
 *  to fetch product prices from your database or other data source.
 *
 * @param int $product_id The ID of the product.
 * @return float The price of the product.
 */
function getProductPrice(int $product_id) {
    // This is a placeholder - replace with your actual logic
    // For example, fetch from a database or an array of products.
    switch ($product_id) {
        case 1:
            return 10.00;
        case 2:
            return 25.50;
        case 3:
            return 5.75;
        default:
            return 0.00; // Handle unknown product IDs
    }
}


// ------------------------------------
//  Example Usage (Simulated Cart Interactions)
// ------------------------------------

// 1. Add items to the cart
addToCart(1, 2); // Add 2 of product ID 1
addToCart(2, 1); // Add 1 of product ID 2
addToCart(1, 1); // Add 1 of product ID 1

// 2. Display the cart content
if (isset($_SESSION['cart'])) {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Cart Value: $" . number_format(getCartTotal(), 2) . "</p>";
} else {
    echo "<p>Your cart is empty.</p>";
}

// ------------------------------------
//  Cleanup Session (for demonstration purposes)
// ------------------------------------

// To clear the cart, you can use this (recommended for production, use a more robust solution)
// unset($_SESSION['cart']);
// session_destroy(); // Important to completely clear the session data.
?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add. Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] ?? 0; // Initialize if not already present
    $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] + $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents.
 */
function getCartContents() {
  return isset($_SESSION['cart']) ? $_SESSION['cart'] : [];
}


/**
 * Clears the cart
 *
 * @return void
 */
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Simulating adding to cart) ---

// Let's assume we have these product IDs: "product1", "product2", "product3"

// Add product1 to the cart with a quantity of 2
addToCart("product1", 2);

// Add product2 to the cart with a quantity of 1
addToCart("product2", 1);

// Remove product1 from the cart
removeFromCart("product1");

// Update the quantity of product2 to 3
updateQuantity("product2", 3);


// --- Displaying the Cart Contents (for demonstration) ---

echo "<h2>Your Shopping Cart</h2>";

if (empty(getCartContents())) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach (getCartContents() as $product_id => $quantity) {
    //  Ideally, you would fetch product details based on $product_id here
    //  This is just a placeholder.  Replace with your actual product retrieval logic.
    $product_name = "Product " . $product_id;

    echo "<li>$product_name (Quantity: $quantity)</li>";
  }
  echo "</ul>";
}


// --- Session Management (Important) ---
// In a real application, you would typically handle session management through
// a server-side technology like a web server with session support.  This example
// uses PHP's built-in session management.

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example usage:

// Add a product to the cart
add_to_cart(1, "Laptop", 1200, 1); // product_id 1, name "Laptop", price 1200, quantity 1
add_to_cart(2, "Mouse", 25, 2);   // product_id 2, name "Mouse", price 25, quantity 2
add_to_cart(1, "Laptop", 1200, 3); // Add another laptop - quantity will be updated

// Remove a product from the cart
remove_from_cart(2);

// Update the quantity of a product
update_cart_quantity(1, 5); // change laptop quantity to 5



// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    // Add a delete link or button here (implementation depends on your design)
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start a session (if not already started)
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// ---  Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity of the product to add.
 * @param float $price The price per unit of the product.
 */
function addToCart(int $product_id, string $product_name, int $quantity, float $price) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product already exists, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price
        );
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function updateQuantity(int $product_id, int $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart(int $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents.
 */
function getCartContents() {
    return $_SESSION['cart'];
}


// --- Example Usage  ---

// 1. Adding items to the cart
addToCart(1, "T-Shirt", 2, 20.00);
addToCart(2, "Jeans", 1, 50.00);

// 2. Updating the quantity of an item
updateQuantity(1, 5); // Increase the quantity of T-Shirt to 5

// 3. Removing an item from the cart
removeFromCart(2); // Remove Jeans

// 4. Getting the current cart contents
$cart = getCartContents();

// Print the cart contents to the browser
echo "<h2>Your Shopping Cart:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_data) {
        echo "<li>";
        echo "<strong>Product Name:</strong> " . $product_data['name'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
        echo "<strong>Price per unit:</strong> " . $product_data['price'] . "<br>";
        echo "<strong>Total Price for this item:</strong> " . $product_data['quantity'] * $product_data['price'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions to Manage the Cart ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id   The ID of the product being added.
 * @param string $product_name The name of the product (for display purposes).
 * @param int    $quantity     The quantity of the product being added.
 * @param float  $price       The price of a single unit of the product.
 *
 * @return void
 */
function addToCart($product_id, $product_name, $quantity, $price) {
  //  Simple check to ensure quantity is valid (positive integer)
  if (!is_numeric($quantity) || $quantity <= 0) {
    echo "<p style='color:red;'>Invalid quantity.  Please enter a positive number.</p>";
    return;
  }

  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'quantity' => $quantity,
      'price' => $price
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id   The ID of the product being updated.
 * @param int    $new_quantity The new quantity for the item.
 *
 * @return void
 */
function updateCartQuantity($product_id, $new_quantity) {
    if (!is_numeric($new_quantity) || $new_quantity <= 0) {
        echo "<p style='color:red;'>Invalid quantity. Please enter a positive number.</p>";
        return;
    }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    echo "<p style='color:red;'>Product not found in cart.</p>";
  }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id   The ID of the product being removed.
 *
 * @return void
 */
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  } else {
    echo "<p style='color:red;'>Product not found in cart.</p>";
  }
}

/**
 * Gets the contents of the cart.
 *
 * @return array  The cart contents.
 */
function getCartContents() {
  return $_SESSION['cart'];
}


/**
 * Calculates the total cost of the cart.
 *
 * @return float The total cost.
 */
function calculateCartTotal() {
  $total = 0;
  $cart = getCartContents();
  foreach ($cart as $item) {
    $total_item = $item['quantity'] * $item['price'];
    $total += $total_item;
  }
  return $total;
}


// --- Example Usage (Simulated) ---

// Add a product to the cart
addToCart('product1', 'Awesome T-Shirt', 2, 20.00);
addToCart('product2', 'Cool Mug', 1, 10.00);

// Update the quantity of a product
updateCartQuantity('product1', 5);


// Get the contents of the cart
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart_contents);
echo "</pre>";

// Calculate the total
$total = calculateCartTotal();
echo "<p><strong>Total Cost: $" . $total . "</strong></p>";

// Remove an item
removeCartItem('product2');


// Display cart contents again
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart_contents);
echo "</pre>";

// Calculate the total
$total = calculateCartTotal();
echo "<p><strong>Total Cost: $" . $total . "</strong></p>";

?>


<?php
session_start();

// --- Shopping Cart Functionality ---

/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart(int $product_id, int $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If the product exists, increment the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // If the product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity(int $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Removes an item from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets the contents of the shopping cart.
 *
 * @return array The shopping cart contents.
 */
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for empty array safety
}

// --- Example Usage (for demonstration) ---

// Add some items to the cart
addToCart(1, 2); // Add 2 of product ID 1
addToCart(2, 1); // Add 1 of product ID 2
addToCart(1, 3); // Add 3 of product ID 1

// Display the cart contents
$cart = getCartContents();
echo "<h2>Shopping Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $quantity) {
    // Get product details (replace with your actual database or product data)
    $product = getProductDetails($product_id); // Placeholder function

    if ($product) {
      echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    } else {
      echo "<li>Product ID: $product_id (Product details not found)</li>";
    }
  }
  echo "</ul>";
}

// Example: Update quantity
updateCartQuantity(1, 5); // Change quantity of product 1 to 5

//Example: Remove an item
//removeFromCart(2);

// Display the updated cart contents
$cart = getCartContents();
echo "<h2>Shopping Cart (Updated):</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $quantity) {
    // Get product details (replace with your actual database or product data)
    $product = getProductDetails($product_id); // Placeholder function

    if ($product) {
      echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    } else {
      echo "<li>Product ID: $product_id (Product details not found)</li>";
    }
  }
  echo "</ul>";
}
?>


<?php

// Initialize a session if it doesn't exist
session_start();

// --- Cart Functionality ---

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart already exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'price' => $product_price //Assuming you have a $product_price variable
    );
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    } else {
      // If product not found, potentially add it or handle error
      // Here we just ignore the update
      // echo "Product not found in cart: " . $product_id . "<br>";
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total price of the cart
function calculateTotalPrice() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price']; // Assuming $item['price'] is the price
    }
  }
  return $total;
}

// --- Example Usage (Demonstration) ---

// Let's simulate some products and prices (replace with your actual product data)
$product_prices = [
  1 => 10.00,  // Product ID 1
  2 => 20.00,  // Product ID 2
  3 => 5.00,   // Product ID 3
];

// ---  Simulate user adding items to the cart ---

// User adds 2 of Product 1
addToCart(1, 2);

// User adds 1 of Product 2
addToCart(2, 1);

// User updates the quantity of Product 1 to 5
updateCartQuantity(1, 5);

// User removes Product 2 from the cart
removeCartItem(2);

// --- Display the Cart Contents ---

// Get the cart contents
$cart = getCartContents();

echo "<h2>Your Cart:</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . "<br>";
    echo "  Quantity: " . $item['quantity'] . "<br>";
    echo "  Price: $" . $product_prices[$product_id] . "<br>";
    echo "  Total Price for this item: $" . ($item['quantity'] * $product_prices[$product_id]) . "<br>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate and display the total price
  $totalPrice = calculateTotalPrice();
  echo "<p><strong>Total Cart Price: $" . $totalPrice . "</strong></p>";
}
?>


<?php
session_start();

// --- Add to Cart Functions ---

/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.  Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    // If cart already exists, check if the product is already in it
    if (isset($_SESSION['cart'][$product_id])) {
      // Product is already in cart, increment quantity
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      // Product not in cart, add it with quantity 1
      $_SESSION['cart'][$product_id] = array(
        'quantity' => $quantity,
        'name' => "Product Name (Placeholder)" // Replace with actual product name
      );
    }
  } else {
    // Cart doesn't exist, initialize it with the new product
    $_SESSION['cart'] = array(
      $product_id => array(
        'quantity' => $quantity,
        'name' => "Product Name (Placeholder)" // Replace with actual product name
      )
    );
  }
}


// --- Example Usage ---

// Add a product to the cart
addToCart(123); // Add product ID 123 in quantity 1

// Add product ID 123 in quantity of 2
addToCart(123, 2);

// Add a different product
addToCart(456, 1);

// Display the cart contents (for demonstration)
echo "<h2>Shopping Cart</h2>";
if (isset($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $product_details['quantity'] . ", Name: " . $product_details['name'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// ---  Demonstration of Removing items from the cart (Optional) ---

/**
 * Removes a product from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example: Remove product ID 123
// removeFromCart(123);

//  (To actually run the removal, uncomment the call above)
//  echo "<h2>Shopping Cart (After Removal)</h2>";
//  if (isset($_SESSION['cart'])) {
//    echo "<ul>";
//    foreach ($_SESSION['cart'] as $product_id => $product_details) {
//      echo "<li>Product ID: " . $product_id . ", Quantity: " . $product_details['quantity'] . ", Name: " . $product_details['name'] . "</li>";
//    }
//    echo "</ul>";
//  } else {
//    echo "<p>Your cart is empty.</p>";
//  }
?>


<?php

session_start();

// --- Cart Functionality ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
    $total = 0;
    if (empty($_SESSION['cart'])) {
        return $total = 0;
    }

    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Product Data (Replace with your database or data source) ---
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15],
];

// --- Example Usage (For demonstration purposes) ---

// 1. Add a T-Shirt to the cart
add_to_cart(1, $products[1]['name'], $products[1]['price']);

// 2. Add two pairs of Jeans to the cart
add_to_cart(2, $products[2]['name'], $products[2]['price'], 2);

// 3. Update the quantity of the T-Shirt to 3
update_cart_quantity(1, 3);

// 4. Remove the Hat from the cart
remove_from_cart(3);

// 5. Get the contents of the cart
$cart_contents = get_cart_contents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

// 6. Calculate and display the total
$total = calculate_total();
echo "<p><strong>Total: $" . $total . "</strong></p>";

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.  Defaults to 1 if not provided.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = 0; // Initialize count if not already in cart
  }
  $_SESSION['cart'][$product_id] += $quantity;
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return void
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $new_quantity;
  }
}

/**
 * Gets the items in the cart.
 *
 * @return array An array representing the cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 *  Calculates the total number of items in the cart
 *
 * @return int
 */
function cart_total() {
    $total = 0;
    foreach($_SESSION['cart'] as $quantity) {
        $total += $quantity;
    }
    return $total;
}


// --- Example Usage (Demonstration) ---

// 1. Add an item to the cart
add_to_cart(123, 2); // Add 2 of product ID 123
add_to_cart(456, 1); // Add 1 of product ID 456

// 2. Update the quantity of an item
update_cart_quantity(123, 5);  // Change quantity of product 123 to 5

// 3. Remove an item from the cart
remove_from_cart(456);


// 4. Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = get_cart_contents();
if (empty($cart_items)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
}
echo "</ul>";

echo "<p>Total Items in Cart: " . cart_total() . "</p>";



//  (Optional) Clear the cart (for testing or resetting)
//  session_unset();
//  session_destroy();
?>


<?php
session_start();

// This is the shopping cart array.  You can change the keys to be more descriptive.
$cart = array();

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $price, $quantity = 1) {
  global $cart;

  if (empty($cart)) {
    $cart[$item_id] = array(
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    // Check if the item is already in the cart
    if (isset($cart[$item_id])) {
      $cart[$item_id]['quantity'] += $quantity;
    } else {
      $cart[$item_id] = array(
        'name' => $item_name,
        'price' => $price,
        'quantity' => $quantity
      );
    }
  }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;
  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($item_id, $quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $quantity;
  }
}


// Example Usage:
// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);
add_to_cart(1, 'T-Shirt', 20, 3); // Add more of the same item

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($cart as $id => $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// Example of Removing an item
// remove_from_cart(2);

// Example of Updating the quantity
// update_cart_quantity(1, 5);

?>


<?php
session_start();

// --- Cart Logic ---

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart total
function getCartTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// --- Example Usage (Simulating a Product List ) ---

$products = [
  ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// --- Handling User Interactions (Simulated) ---

// 1. Add to Cart (Example: Adding a T-Shirt)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
  addToCart($product_id, $products[$product_id - 1]['name'], $products[$product_id - 1]['price'], $quantity);
  echo "<p>T-Shirt added to cart.  Quantity: $quantity</p>";
}

// 2. Update Quantity (Example:  User changes quantity of T-Shirt)
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($product_id, $new_quantity);
    echo "<p>Quantity of T-Shirt updated to $new_quantity</p>";
}


// 3. Remove from Cart (Example: Removing Jeans)
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeCartItem($product_id);
  echo "<p>Jeans removed from cart.</p>";
}


// --- Displaying the Cart ---

echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<form method='post'>";
    echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
    echo "<input type='number' id='quantity_" . $product_id . "' value='" . $item['quantity'] . "' min='1' name='quantity_" . $product_id . "'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total:</strong> $" . number_format(getCartTotal(), 2) . "</p>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Example Usage (Simulating a product list and adding items to the cart)

// Sample product data (replace with a database query in a real application)
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15]
];

// Add some items to the cart
add_to_cart(1, $products[1]['name'], $products[1]['price'], 2);
add_to_cart(2, $products[2]['name'], $products[2]['price']);
add_to_cart(3, $products[3]['name'], $products[3]['price'], 3);

// Get the cart contents
$cart_contents = get_cart_contents();

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// remove_from_cart(2);

// Example of updating quantity
// update_cart_quantity(1, 5);
?>


<?php
session_start(); // Start the session

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
}

// --- Example Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param string $item_id   The ID of the item to add.
 * @param string $item_name The name of the item.
 * @param int    $quantity  The quantity of the item to add (default: 1).
 * @param float  $price     The price per unit of the item.
 */
function addToCart(string $item_id, string $item_name, int $quantity = 1, float $price) {
    if (!isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] = [
            'name' => $item_name,
            'quantity' => $quantity,
            'price' => $price
        ];
    } else {
        $_SESSION['cart'][$item_id]['quantity'] += $quantity;
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $item_id The ID of the item to update.
 * @param int    $newQuantity The new quantity for the item.
 */
function updateCartItem(string $item_id, int $newQuantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $newQuantity;
    }
}

/**
 * Removes an item from the cart by its ID.
 *
 * @param string $item_id The ID of the item to remove.
 */
function removeCartItem(string $item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}

/**
 * Calculates the total cart value.
 */
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['quantity'] * $item['price'];
        }
    }
    return $total;
}

// --- Example Usage (Demonstration) ---

// Add some items to the cart
addToCart('item1', 'Red T-Shirt', 2, 15.00);
addToCart('item2', 'Blue Jeans', 1, 45.00);

// Update the quantity of item1
updateCartItem('item1', 5);

// Calculate and display the total cart value
$total = calculateCartTotal();
echo "Total Cart Value: $" . number_format($total, 2) . "<br>";

// Display the contents of the cart
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item) {
        echo "<li>" . $item['name'] . " (Quantity: " . $item['quantity'] . ", Price: $" . number_format($item['price'], 2) . ")</li>";
    }
    echo "</ul>";
}

// Remove an item from the cart
//removeCartItem('item1');  // Uncomment to remove the item

// Display the cart again after removal (if uncommented)
//if (empty($_SESSION['cart'])) {
//    echo "<p>Your cart is empty.</p>";
//} else {
//   // ... (same as before to display cart)
//}
?>


<?php
session_start(); // Start the session

// --- Cart Functions ---

// Add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][] = [
    'id' => $item_id,
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Update quantity of an existing item
function updateQuantity($item_id, $quantity) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use &$item to modify the original item
      if ($item['id'] == $item_id) {
        $item['quantity'] = $quantity;
        break;
      }
    }
  }
}

// Remove an item from the cart
function removeFromCart($item_id) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
    foreach ($cart as $key => $item) {
      if ($item['id'] == $item_id) {
        unset($cart[$key]); // Remove the item from the array
        break;
      }
    }
  }
}

// Get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return [];
}

// Calculate the cart total
function calculateCartTotal() {
    $total = 0;
    $cart = getCartContents();

    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Usage (Demonstration) ---

// Example: Add an item to the cart
addToCart(1, "Awesome T-Shirt", 25.00, 2);
addToCart(2, "Cool Mug", 10.00, 1);

// Example: Update the quantity of an item
updateQuantity(1, 3); // Increase quantity of Awesome T-Shirt to 3

// Example: Remove an item from the cart
// removeFromCart(2); // Remove Cool Mug

// Get the current cart contents
$cart = getCartContents();
echo "<pre>";
print_r($cart);
echo "</pre>";

// Calculate and display the total
$total = calculateCartTotal();
echo "Total Cart Value: $" . number_format($total, 2) . "<br>";
?>


<?php

// Start a session if it doesn't exist
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add the item to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example usage:
// Add some items to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);

// Update the quantity of an item
updateQuantity(1, 3);

// Remove an item from the cart
// removeFromCart(2);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If yes, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If no, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the contents of the cart
function getCartContents() {
  return $_SESSION['cart'];
}

// Example usage (for demonstration purposes)

// Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another laptop

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_contents = getCartContents();
if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $id => $item) {
    echo "<li>" . $item['name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . " - Total: $" . ($item['price'] * $item['quantity']) . "</li>";
  }
}
echo "</ul>";

// Remove an item (example)
//removeCartItem(2);

// Update quantity (example)
//updateCartQuantity(1, 3);  // Change the quantity of Laptop to 3

// Display updated cart contents (after update example)
//echo "<h2>Updated Cart Contents:</h2>";
//echo "<ul>";
//  $cart_contents = getCartContents();
//   if (empty($cart_contents)) {
//     echo "<li>Cart is empty.</li>";
//   } else {
//     foreach ($cart_contents as $id => $item) {
//       echo "<li>" . $item['name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . " - Total: $" . ($item['price'] * $item['quantity']) . "</li>";
//     }
//   }
//   echo "</ul>";
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array($product_id => $quantity);
  } else {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id] += $quantity;
    } else {
      $_SESSION['cart'][$product_id] = $quantity;
    }
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

// Example usage (simulated product data - replace with your database)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];

// Simulate a user adding items to the cart
addToCart(1, 1);  // Add 1 Laptop to the cart
addToCart(2, 3);  // Add 3 Mouses to the cart
addToCart(1, 2); // Add 2 more Laptops
removeFromCart(2); // Remove all mouses

// Display the cart contents
echo "<h2>Your Cart:</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];
    $total_price = $product_price * $quantity;

    echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Total: $" . $total_price . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Initialize session if not already started
if (!session_id()) {
    session_start();
}

// --- Cart Data ---
// This is where you'll store the items in the user's cart.
// In a real application, this would typically be stored in a database.
// For this example, we'll use an associative array.

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $productId  The ID of the product to add.
 * @param string $name        The name of the product.
 * @param int    $quantity   The quantity of the product to add (default: 1).
 * @param float  $price      The price of the product.
 */
function addItemToCart(string $productId, string $name, int $quantity = 1, float $price) {
    if (!session_id()) {
        session_start();
    }

    // Check if the product is already in the cart
    if (isset($session['cart'][$productId])) {
        // Increment quantity if already present
        $session['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Add new item to the cart
        $session['cart'][$productId] = [
            'name'     => $name,
            'quantity' => $quantity,
            'price'    => $price
        ];
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $productId  The ID of the product to update.
 * @param int    $quantity  The new quantity.
 */
function updateCartItemQuantity(string $productId, int $quantity) {
    if (!session_id()) {
        session_start();
    }

    if (isset($session['cart'][$productId])) {
        $session['cart'][$productId]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param string $productId  The ID of the product to remove.
 */
function removeItemFromCart(string $productId) {
    if (!session_id()) {
        session_start();
    }

    if (isset($session['cart'][$productId])) {
        unset($session['cart'][$productId]);
    }
}

/**
 * Returns the cart contents.
 *
 * @return array  An array representing the cart.
 */
function getCartContents() {
    if (!session_id()) {
        session_start();
    }
    return $session['cart'];
}

/**
 * Calculates the total cart value.
 *
 * @return float  The total cart value.
 */
function calculateCartTotal() {
    if (!session_id()) {
        session_start();
    }

    $total = 0.0;
    foreach ($session['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}


// --- Example Usage ---

// 1. Add some items to the cart
addItemToCart('product1', 'T-Shirt', 2, 20.00);
addItemToCart('product2', 'Jeans', 1, 50.00);

// 2. Update the quantity of an item
updateCartItemQuantity('product1', 5);

// 3. Display the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// 4. Calculate and display the total
$total = calculateCartTotal();
echo "<p>Total Cart Value: $" . number_format($total, 2) . "</p>";

// 5. Remove an item
removeItemFromCart('product2');

// 6. Display the updated cart
$cart = getCartContents();
echo "<h2>Cart Contents After Removal:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][$product_id] = [
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return []; // Return an empty array if cart is empty
  }
}


// --- Example Usage (Simulating a product being added to the cart) ---

//  Let's say we have a product with ID 1, name "T-Shirt", and price $20
addToCart(1, "T-Shirt", 20);

//  Now let's say the user wants to update the quantity of the T-Shirt to 3
updateCartQuantity(1, 3);

//  And they want to add one more pair of shoes (product_id 2, name "Shoes", price $50)
addToCart(2, "Shoes", 50);

//  Let's get the current cart contents
$cart = getCartContents();

// Display the cart contents (for demonstration)
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - Price: $" . $product_data['price'] . " - Quantity: " . $product_data['quantity'] . "</li>";
  }
  echo "</ul>";
}

//  Example of removing an item
// removeFromCart(1); // Remove the T-Shirt

?>


<?php

// Start session management (if not already started)
session_start();

//  ---  Cart Initialization  ---

// If a cart isn't already present, initialize it as an empty array.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}


// -------------------  Helper Functions  -------------------

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it is, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If not, add the product to the cart array
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}


// Function to calculate the total cart value
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $totalItem = $item['price'] * $item['quantity'];
        $total += $totalItem;
    }
    return $total;
}

// -------------------  Cart Operations (Example Usage)  -------------------

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = floatval($_POST['price']);  //Ensure price is a number
    $quantity = intval($_POST['quantity']); //Ensure quantity is an integer

    addToCart($product_id, $product_name, $price, $quantity);
    // You might want to redirect the user to the cart page or display a success message.
    echo "<p>Product added to cart.</p>";
}

// 2. Update Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = intval($_POST['quantity']); //Convert to integer
    updateQuantity($product_id, $new_quantity);
    echo "<p>Quantity updated to " . $new_quantity . "</p>";
}


// 3. Remove from Cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    removeCartItem($product_id);
    echo "<p>Product removed from cart.</p>";
}

// 4.  Get and Display Cart Contents
$cart_contents = getCartContents();

// Output Cart Items
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Calculate and display total
$total = calculateTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";
?>


<?php

// Start session management (if not already started)
session_start();

// --- Cart Session Variables ---
// Use a session variable to store the cart content.
// Structure:  array('product_id' => ['name' => 'Product Name', 'price' => 10.00, 'quantity' => 1])
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $_SESSION['cart'];

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it's already in the cart, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Remove an item from the cart
function removeItemFromCart($product_id) {
  global $_SESSION['cart'];

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  global $_SESSION['cart'];

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Calculate the total cart value
function calculateCartTotal() {
  global $_SESSION['cart'];
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// Clear the cart
function clearCart() {
  unset($_SESSION['cart']);
}



// --- Example Usage / Sample Code (Demonstration) ---

// 1. Add an item to the cart
addToCart(1, "Laptop", 1200.00, 1);
addToCart(2, "Mouse", 25.00, 2);

// 2. Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    // Add a remove button (for demonstration purposes)
    echo "<a href='?action=remove&product_id=" . $product_id . "'>Remove</a><br>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value:</strong> $" . number_format(calculateCartTotal(), 2) . "</p>";
}

// 3. Example of removing an item (using a query)
// echo "<br><a href='?action=clear_cart'>Clear Cart</a>";
// if (isset($_GET['action']) && $_GET['action'] == 'clear_cart') {
//   clearCart();
//   echo "<p>Your cart has been cleared.</p>";
// }
?>


<?php
session_start();

// Cart data (in a real application, this would come from a database)
$cart = [];

// Helper function to add items to the cart
function addToCart($product_id, $quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = ['quantity' => $quantity];
  }
}

// Example: Add some items to the cart
addToCart(1, 2);  // Add 2 of product ID 1
addToCart(2, 1);  // Add 1 of product ID 2
addToCart(1, 3);  // Add 3 of product ID 1

// Display the cart contents (for demonstration)
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    // Simulate getting product details (replace with database lookup)
    $product_name = "Product " . $product_id;
    $product_price = $product_id * 10;  //  Example price

    echo "<li>" . $product_name . " - Quantity: " . $item['quantity'] . " - Price: $" . $product_price . "</li>";
  }
  echo "</ul>";
}

// Example:  Remove an item
if (isset($_GET['remove'])) {
  $remove_id = $_GET['remove'];

  if (isset($cart[$remove_id])) {
    unset($cart[$remove_id]);
  }

  // Redirect back to the cart page
  header("Location: cart.php");
  exit();
}


// Example: Update quantity (via a form)
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }

  // Redirect back to the cart page
  header("Location: cart.php");
  exit();
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Cart Display (as shown above) -->

  <h2>Add to Cart</h2>
  <ul>
    <li><a href="cart.php?add=1">Product 1 (Quantity: 2)</a></li>
    <li><a href="cart.php?add=2">Product 2 (Quantity: 1)</a></li>
    <li><a href="cart.php?add=1">Product 1 (Quantity: 3)</a></li>
  </ul>

  <h2>Remove from Cart</h2>
  <ul>
    <li><a href="cart.php?remove=2">Remove Product 2</a></li>
  </ul>

  <!-- Form to update quantity -->
  <h2>Update Quantity</h2>
  <form method="post" action="cart.php">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" value="2">
    <br>
    <label for="quantity">New Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="5">
    <br>
    <button type="submit" name="update_quantity">Update</button>
  </form>

</body>
</html>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Functions for Cart Management ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    // If the product is not already in the cart, add it with a quantity of 1
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    // If the product is already in the cart, increase the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}



// --- Example Usage (Simulating User Actions) ---

// 1.  Adding an item to the cart:
add_to_cart(123); // Add product with ID 123 to the cart, quantity = 1
add_to_cart(456, 2); // Add product with ID 456 to the cart, quantity = 2

// 2.  Updating the quantity of an item:
update_cart_quantity(123, 3);  // Change quantity of product 123 to 3


// 3. Removing an item:
remove_from_cart(456);


// --- Displaying the Cart Contents (for demonstration) ---

echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    // Simulate retrieving product details (replace with actual database query)
    $product_name = "Product " . $product_id; // Placeholder
    echo "<li>$product_name x $quantity  -  Total: $quantity</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

// Add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product already exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Remove item from cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update item quantity in cart
function updateCartItem($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Calculate cart total
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}

// Display the cart contents
function displayCart() {
    if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
        echo "<h2>Your Cart is Empty</h2>";
        return;
    }

    echo "<h2>Your Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    foreach ($_SESSION['cart'] as $product_id => $item) {
        $total_item = $item['price'] * $item['quantity'];
        echo "<tr>";
        echo "<td>" . $item['name'] . "</td>";
        echo "<td>$" . number_format($item['price'], 2) . "</td>";
        echo "<td>" . $item['quantity'] . "</td>";
        echo "<td>$" . number_format($total_item, 2) . "</td>";
        echo "<td><a href='cart.php?remove=$product_id'>Remove</a></td>";
        echo "</tr>";
    }

    echo "</table>";
    echo "<br>";
    echo "<strong>Total: $" . number_format(calculateCartTotal(), 2) . "</strong>";
}



// --- Example Usage (Handling Add to Cart Request) ---

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default to 1

    addToCart($product_id, $product_name, $price, $quantity);
    // Redirect to the cart page
    header("Location: cart.php");
    exit();
}


// --- Cart Page (cart.php) ---

// Display the cart contents (as defined in the function above)
displayCart();
?>


<?php
session_start();

// Assuming you have a function to handle adding items to the cart
function addToCart($product_id, $quantity) {
  // In a real application, you would likely interact with a database here
  // to get product details and update the cart.
  // This is just a simplified example.

  if (isset($_SESSION['cart']) === false) {
    $_SESSION['cart'] = array();
  }

  if (isset($_SESSION['cart'][$product_id]) === true) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Example usage:  Adding an item to the cart
$productId = 123; // Example product ID
$quantity = 2;

addToCart($productId, $quantity);

// Display the cart contents (for demonstration)
echo "<h2>Your Cart</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: $product_id - Quantity: $item['quantity']</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

// Example: Removing an item from the cart (optional)
// This is a simplified example and doesn't handle errors or other complexities.
// In a real application, you would need to handle these cases more robustly.

// echo "<br><br>Removing Item <br>";
// if (isset($_GET['remove'])) {
//    $productIdToRemove = $_GET['remove'];
//    if (isset($_SESSION['cart'][$productIdToRemove]) ) {
//      unset($_SESSION['cart'][$productIdToRemove]);
//      if (empty($_SESSION['cart'])) {
//         unset($_SESSION['cart']);
//      }
//    }
// }
?>


<?php

session_start();

// Session variables for the cart
$cart = array();

// Helper functions for cart operations

/**
 * Add an item to the cart.
 *
 * @param string $product_id   The ID of the product being added.
 * @param string $name         The name of the product.
 * @param int    $quantity   The quantity of the product to add.
 * @param float  $price       The price of a single unit of the product.
 */
function addToCart(string $product_id, string $name, int $quantity, float $price) {
  $product = array(
    'id' => $product_id,
    'name' => $name,
    'quantity' => $quantity,
    'price' => $price
  );

  // Check if the product is already in the cart
  foreach ($cart as $key => $item) {
    if ($item['id'] == $product['id']) {
      // Update the quantity if the product already exists
      $cart[$key]['quantity'] += $quantity;
      return;
    }
  }

  // If the product is not in the cart, add it
  $cart[$product['id']] = $product;
}


/**
 * Get the total price of the cart.
 *
 * @return float  The total price.
 */
function getCartTotal() {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return round($total, 2); // Round to 2 decimal places
}

// Example usage:  Simulating a user adding items to the cart
addToCart('product1', 'T-Shirt', 2, 20.00);
addToCart('product2', 'Jeans', 1, 50.00);
addToCart('product3', 'Shoes', 1, 80.00);



// Display the cart contents
echo "<h2>Cart Contents</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p>Total: $" . getCartTotal() . "</p>";
}


// Example:  Clearing the cart (for demonstration purposes)
//session_unset($_SESSION['cart']);
//session_destroy();

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name'     => $product_name,
      'price'    => $price
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart is empty
}

// Example usage (Demonstration - Replace with your actual data retrieval)
//  Simulating product data for demonstration.  In a real application, this would
//  come from a database or other source.

$products = [
  1 => ['name' => 'Laptop', 'price' => 1200],
  2 => ['name' => 'Mouse', 'price' => 25],
  3 => ['name' => 'Keyboard', 'price' => 75],
];

//  Simulating user interaction.  This is just for demonstrating the cart functionality.
//  In a real website, you'd get this data from user actions (add to cart button, etc.).

// Add a laptop to the cart
addToCart(1, 1, $products[1]['name'], $products[1]['price']);

// Add a mouse to the cart
addToCart(2, 2, $products[2]['name'], $products[2]['price']);

// Update the quantity of the mouse
updateCartQuantity(2, 5);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart already exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price' => 0 // Replace with the actual product price
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Returns the cart or an empty array if it doesn't exist
}


// --- Example Usage (Simulating user interactions) ---

// 1. Add an item to the cart
addToCart(1, 2); // Add 2 units of product with ID 1

// 2. Add another item
addToCart(2, 1);

// 3. Update the quantity of product 1 to 5
updateQuantity(1, 5);

// 4. Remove product 2 from the cart
removeCartItem(2);

// 5. Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
  }
  echo "</ul>";
}

//Example of adding a product with a price
function addToCartWithPrice($product_id, $quantity, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price' => $price
    ];
  }
}

addToCartWithPrice(3, 1, 19.99);

$cart = getCartContents();
echo "<h2>Cart Contents with Price:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Add the product to the cart array
  $_SESSION['cart'][] = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) {
            if ($item['id'] == $product_id) {
                $item['quantity'] = $quantity;
                break;
            }
        }
    }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Re-index the array to avoid gaps
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        return true;
      }
    }
    return false; // Item not found
  }
  return false; // Cart is empty
}


// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? [];  // Return empty array if cart is not initialized
}


// Example Usage (Demonstration - This would typically come from a form submission)
// Simulate a product being added to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];

  addToCart($product_id, $quantity, $product_name, $price);
}

//Example of updating quantity:
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($product_id, $new_quantity);
}

//Example of removing an item
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeCartItem($product_id);
}



// Displaying the Cart Contents (for demonstration)
$cart_items = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// Example Usage (Illustrative - this would be handled by a form submission)
// Assume a product ID of 1, product name "Laptop", price $1000, quantity of 1
// You would get this information from a form submission or other input.

//Example: Adding a product to the cart
addToCart(1, 'Laptop', 1000);

// Example: Removing an item from the cart (assuming product ID 1)
//removeCartItem(1);

// Example: Updating the quantity of an item in the cart (assuming product ID 1 and desired quantity of 2)
//updateCartItem(1, 2);


// Display the cart contents
$cartContents = getCartContents();
echo "<h2>Shopping Cart</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Function to add item to cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove item from cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
      unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function get_cart_contents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return array();
}

// Example Usage:
// -----------------------------------------------------

// Add an item to the cart
add_to_cart(1, 'Laptop', 1200, 1); // Product ID 1, Laptop, Price: 1200, Quantity: 1
add_to_cart(2, 'Mouse', 25, 2);   // Product ID 2, Mouse, Price: 25, Quantity: 2
add_to_cart(1, 'Laptop', 1200, 3); // Add another laptop

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
echo "<ul>";

$cart_items = get_cart_contents();

if (empty($cart_items)) {
    echo "<li>Your cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $product_info) {
        echo "<li>" . $product_info['name'] . " - $" . $product_info['price'] . " x " . $product_info['quantity'] . " = $" . ($product_info['price'] * $product_info['quantity']) . "</li>";
    }
}

echo "</ul>";

// Example of updating quantity
update_cart_quantity(2, 5); // Update the quantity of Mouse to 5

echo "<br>";
echo "<h2>Updated Cart</h2>";
echo "<ul>";

$cart_items = get_cart_contents();

if (empty($cart_items)) {
    echo "<li>Your cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $product_info) {
        echo "<li>" . $product_info['name'] . " - $" . $product_info['price'] . " x " . $product_info['quantity'] . " = $" . ($product_info['price'] * $product_info['quantity']) . "</li>";
    }
}

echo "</ul>";
?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param int $quantity  The quantity of the product being added. Defaults to 1.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity.
 * @return void
 */
function update_cart_item($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function get_cart() {
    return $_SESSION['cart'];
}

/**
 * Clears the cart.
 *
 * @return void
 */
function clear_cart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Illustrative - Replace with your actual product data) ---

// Simulate a product database (for demonstration only)
$products = array(
    1 => array('name' => 'Laptop', 'price' => 1200),
    2 => array('name' => 'Mouse', 'price' => 25),
    3 => array('name' => 'Keyboard', 'price' => 75)
);

// -------------------- Cart Interaction --------------------

// Example: Add a product to the cart
add_to_cart(1); // Add 1 Laptop to the cart
add_to_cart(2, 3); // Add 3 Mice to the cart
add_to_cart(3); // Add 1 Keyboard to the cart

// Print the current cart contents
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r(get_cart());
echo "</pre>";

// Example: Update the quantity of a product
update_cart_item(2, 5); // Increase the quantity of Mice to 5

// Print the updated cart contents
echo "<h2>Cart Contents (Updated):</h2>";
echo "<pre>";
print_r(get_cart());
echo "</pre>";

// Example: Remove an item from the cart
remove_from_cart(1);

// Print the cart contents after removing the Laptop
echo "<h2>Cart Contents (After Removing Laptop):</h2>";
echo "<pre>";
print_r(get_cart());
echo "</pre>";

// Example: Clear the cart
//clear_cart();
//echo "<h2>Cart Contents (Cleared):</h2>";
//echo "<pre>";
//print_r(get_cart());
//echo "</pre>";
?>

<!DOCTYPE html>
<html>
<head>
    <title>PHP Cart Session Example</title>
</head>
<body>

<h1>PHP Cart Session Example</h1>

<p>This example demonstrates a simple cart session implementation in PHP.</p>

</body>
</html>


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Create an associative array for the item
  $item = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // Add the item to the cart
  $_SESSION['cart'][] = $item;
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return [];
}

// Example Usage:

// Add an item to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00);

// Update the quantity of the T-Shirt
updateCartQuantity(1, 5); // Increase quantity of product 1 to 5

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Example: Removing an item
//removeCartItem(1);
// $cart = getCartContents();
// echo "<h2>Cart Contents after removing T-Shirt:</h2>";
// echo "<ul>";
// foreach ($cart as $item) {
//     echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
// }
// echo "</ul>";
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists, initialize if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return cart or an empty array if it doesn't exist
}

// Example Usage (Simulating product data)
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15],
];


// 1. Add an item to the cart
addToCart(1, $products[1]['name'], $products[1]['price'], 2); // Add 2 T-Shirts

// 2. Update quantity of an item
updateCartQuantity(1, 5); // Increase the quantity of T-Shirts to 5

// 3. Get the cart contents
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// 4. Remove an item from the cart
removeFromCart(2);

// 5. Get the cart contents after removal
$cart_contents = getCartContents();
echo "<h2>Cart Contents After Removal:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($productId, $productName, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Initialize the cart as an empty array
    }

    if (!isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = [
            'product_id' => $productId,
            'product_name' => $productName,
            'price' => $price,
            'quantity' => $quantity
        ];
    } else {
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    }
}

// Function to update quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($productId) {
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to get the cart items
function getCartItems() {
    return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $totalItemPrice = $item['price'] * $item['quantity'];
            $total += $totalItemPrice;
        }
    }
    return $total;
}

//  Example Usage (Simulating a product and adding to the cart)
$productId = 123;
$productName = "Awesome T-Shirt";
$price = 25.00;

addToCart($productId, $productName, $price);
$cartItems = getCartItems();

echo "<h2>Cart Items:</h2>";
if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $item) {
        echo "<li>" . $item['product_name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";
}

echo "<p>Total Cart Value: $" . number_format(calculateTotal(), 2) . "</p>";


//  Example: Updating quantity
updateQuantity($productId, 2);
echo "<p>Updated cart after adding another shirt.</p>";
$cartItems = getCartItems();
echo "<h2>Cart Items (after update):</h2>";
foreach ($cartItems as $item) {
    echo "<li>" . $item['product_name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
}


// Example: Removing an item
removeCartItem($productId);
echo "<p>Item removed from cart.</p>";
$cartItems = getCartItems();
echo "<h2>Cart Items (after remove):</h2>";
if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    foreach ($cartItems as $item) {
        echo "<li>" . $item['product_name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
}

?>


<?php
session_start();

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array representing the cart contents (product_id => quantity).
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for empty cart
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function getCartTotal() {
  $total = 0;
  foreach (getCart() as $quantity) {
    $total += $quantity;
  }
  return $total;
}


// --- Example Usage ---

// 1. Adding an item to the cart
addToCart(123); // Add product 123 to the cart (quantity defaults to 1)
addToCart(456, 2); // Add product 456 to the cart with quantity 2

// 2.  Displaying the cart contents
echo "<h2>Your Cart</h2>";
if (empty(getCart())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCart() as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";
}


// 3. Removing an item from the cart
removeFromCart(456);

// 4. Updating the quantity of an item
updateCartQuantity(123, 3); // Change quantity of product 123 to 3

// 5. Displaying the cart contents after updates
echo "<h2>Your Cart (After Updates)</h2>";
if (empty(getCart())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCart() as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";
}


?>


<?php

session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (simulating a product add to cart)
// This would typically be triggered by a form submission

// // Let's assume the product ID is 1, product name is "T-Shirt", price is $20
// addToCart(1, "T-Shirt", 20, 2);

// // Let's assume the product ID is 2, product name is "Jeans", price is $50
// addToCart(2, "Jeans", 50, 1);

// // Update the quantity of the "T-Shirt" to 3
// updateQuantity(1, 3);


// Display the cart contents
$cart = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example to remove a cart item (uncomment to use)
//removeCartItem(1);
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// -------------------------------------------------------------------
// Example Functions for Adding, Removing, and Updating Items
// -------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product being added.
 * @param string $name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity to add.
 */
function addToCart($product_id, $name, $price, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        // If the product already exists in the cart, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// -------------------------------------------------------------------
// Example Usage (Simulated Product Information - Replace with actual data)
// -------------------------------------------------------------------

$products = array(
    'product1' => array('name' => 'Laptop', 'price' => 1200),
    'product2' => array('name' => 'Mouse', 'price' => 25),
    'product3' => array('name' => 'Keyboard', 'price' => 75)
);

// Simulate adding items to the cart
addToCart('product1', $products['product1']['name'], $products['product1']['price'], 1);
addToCart('product2', $products['product2']['name'], $products['product2']['price'], 2);
addToCart('product3', $products['product3']['name'], $products['product3']['price'], 1);


// -------------------------------------------------------------------
// Displaying the Cart Contents
// -------------------------------------------------------------------

echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// -------------------------------------------------------------------
// Example: Removing an item (Illustrative)
// -------------------------------------------------------------------

// echo "<br><br><h2>Remove Item</h2>";
// if(isset($_POST['remove_product'])) {
//   removeFromCart($_POST['product_id']);
//   echo "<p>Item removed from cart.</p>";
// }
?>


<?php

session_start(); // Start the session

// Example function to add items to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  // Check if the cart exists in session.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$item_id])) {
    // If item exists, increment quantity
    $_SESSION['cart'][$item_id]['quantity'] += $quantity;
  } else {
    // If item doesn't exist, add it to the cart
    $_SESSION['cart'][$item_id] = [
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example function to update cart quantity
function updateCartQuantity($item_id, $new_quantity) {
  if (isset($_SESSION['cart'][$item_id])) {
    $_SESSION['cart'][$item_id]['quantity'] = $new_quantity;
  }
}

// Example function to remove an item from the cart
function removeFromCart($item_id) {
  if (isset($_SESSION['cart'][$item_id])) {
    unset($_SESSION['cart'][$item_id]);
  }
}

// Example function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// ----  Example Usage  ----

// Add some items to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);
addToCart(1, 'T-Shirt', 20, 3); // Add more of the same item


// Update quantity
updateCartQuantity(1, 5); // Increase quantity of item 1 to 5

// Get the cart contents
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Remove an item
removeFromCart(2);

// Get the cart contents again to see the change
$cart_contents = getCartContents();
echo "<br><h2>Cart Contents after removing item 2:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start a session (if it doesn't exist)
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart total
function getCartTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Example usage (simulating user actions)

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// Print the current cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// Get the cart total
$total = getCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";

// Remove a product from the cart
removeFromCart(2);

// Print the updated cart contents
echo "<hr>";
echo "<h2>Cart Contents after removing Mouse:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

//Update quantity
updateQuantity(1,3);

echo "<hr>";
echo "<h2>Cart Contents after updating Laptop quantity to 3:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php

// Start the session if it doesn't exist
session_start();

// Initialize the cart session data if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ------------------------------------------------------------------
//  Helper Functions (for adding to and viewing the cart)
// ------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = 0; // Initialize count if not already present
    }
    $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents (an array of product IDs and their quantities).
 */
function get_cart_contents() {
    return $_SESSION['cart'];
}

// ------------------------------------------------------------------
//  Example Usage (Simulated Product Information - Replace with Database Queries)
// ------------------------------------------------------------------

$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

// ------------------------------------------------------------------
//  Simulate User Interactions (e.g., adding to cart)
// ------------------------------------------------------------------

// Example: User adds one T-Shirt to the cart
if (isset($_POST['add_tshirt'])) {
    add_to_cart(1);
}

// Example: User adds two Jeans to the cart
if (isset($_POST['add_jeans'])) {
    add_to_cart(2, 2);
}

// Example: User updates the quantity of a T-Shirt
if (isset($_POST['update_tshirt_qty'])) {
    $new_qty = intval($_POST['tshirt_qty']);
    update_cart_quantity(1, $new_qty);
}

// Example: User removes a Hat from the cart
if (isset($_POST['remove_hat'])) {
    remove_from_cart(3);
}

// ------------------------------------------------------------------
//  Displaying the Cart Contents
// ------------------------------------------------------------------

// Get the cart contents
$cart_contents = get_cart_contents();

// Calculate the total price
$total_price = 0;
foreach ($cart_contents as $product_id => $quantity) {
    $product = $products[$product_id];
    $total_price += $product['price'] * $quantity;
}

echo "<h2>Your Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $quantity) {
        $product = $products[$product_id];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}
?>


<?php

session_start();

// --------------------------------------------------
//  Functions to handle cart operations
// --------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($productId, $quantity) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it's not, add it to the cart with a quantity of $quantity
    $_SESSION['cart'][$productId] = array('quantity' => $quantity);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $productId The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array containing all items in the cart.
 */
function getCartItems() {
  return $_SESSION['cart'];
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}

// --------------------------------------------------
//  Example Usage / Demonstration
// --------------------------------------------------

// Add some items to the cart
addToCart(1, 2);  // Add 2 of product ID 1
addToCart(2, 1);  // Add 1 of product ID 2
addToCart(1, 3);  // Add 3 of product ID 1

// Print the contents of the cart
echo "<h2>Cart Items:</h2>";
echo "<ul>";
$cartItems = getCartItems();
if (empty($cartItems)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cartItems as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";

// Update the quantity of product ID 1 to 5
updateCartQuantity(1, 5);

// Print the updated cart
echo "<br><h2>Updated Cart Items:</h2>";
$cartItems = getCartItems();
echo "<ul>";
foreach ($cartItems as $productId => $item) {
  echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
}
echo "</ul>";

// Remove product ID 2 from the cart
removeFromCart(2);

// Print the updated cart again
echo "<br><h2>Cart Items after Removal:</h2>";
$cartItems = getCartItems();
echo "<ul>";
foreach ($cartItems as $productId => $item) {
  echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
}
echo "</ul>";


// Clear the cart
clearCart();

echo "<br><h2>Cart Items after Clearing:</h2>";
$cartItems = getCartItems();
if (empty($cartItems)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cartItems as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
  }
}
echo "</ul>";
?>


<?php
session_start();

// Example Product Information (Replace with your actual product data)
$product_id = 1;
$product_name = "Awesome T-Shirt";
$product_price = 25.00;

// Function to add a product to the cart
function addToCart($product_id, $product_name, $product_price) {
  // Check if the cart already exists in the session
  if (isset($_SESSION['cart'])) {
    // If the cart exists, check if the product is already in it
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity']++;
    } else {
      // If the product is not in the cart, add it with a quantity of 1
      $_SESSION['cart'][$product_id] = [
        'id' => $product_id,
        'name' => $product_name,
        'price' => $product_price,
        'quantity' => 1
      ];
    }
  } else {
    // If the cart doesn't exist, create it with the new product
    $_SESSION['cart'] = [
      $product_id => [
        'id' => $product_id,
        'name' => $product_name,
        'price' => $product_price,
        'quantity' => 1
      ]
    ];
  }
}

// Example: Add the product to the cart
addToCart($product_id, $product_name, $product_price);

// Display the cart content
echo "<h2>Your Shopping Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total amount
  $total_amount = 0;
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    $total_amount += ($item_data['price'] * $item_data['quantity']);
  }
  echo "<p><strong>Total: $" . $total_amount . "</strong></p>";
} else {
  echo "<p>Your cart is empty.</p>";
}

// Example: Increment the quantity of the product in the cart
if (isset($_GET['action']) && $_GET['action'] == 'increment') {
  $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : null;

  if ($product_id !== null) {
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity']++;
    }
  }
}

// Example: Decrement the quantity of the product in the cart
if (isset($_GET['action']) && $_GET['action'] == 'decrement') {
  $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : null;

  if ($product_id !== null) {
    if (isset($_SESSION['cart'][$product_id])) {
      if ($_SESSION['cart'][$product_id]['quantity'] > 1) {
        $_SESSION['cart'][$product_id]['quantity']--;
      } else {
        // Remove the item if quantity is 1 or less
        unset($_SESSION['cart'][$product_id]);
      }
    }
  }
}

// Example: Remove an item from the cart
if (isset($_GET['action']) && $_GET['action'] == 'remove') {
  $product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : null;

  if ($product_id !== null) {
    if (isset($_SESSION['cart'][$product_id])) {
      unset($_SESSION['cart'][$product_id]);
    }
  }
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// --- Example Usage and Demonstration ---

// Add some items to the cart
add_to_cart(1, "Shirt", 25.00, 2);
add_to_cart(2, "Pants", 50.00, 1);
add_to_cart(1, "Shirt", 25.00, 1); // Add another shirt - will update quantity
update_cart_quantity(1, 5); // Change quantity of the first shirt to 5

// Display the cart contents
$cart = get_cart_contents();
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove an item from the cart
// remove_from_cart(2);
?>


<?php

// Initialize the session if it doesn't exist
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id  The ID of the product to add.
 * @param string $product_name The name of the product (for display in the cart).
 * @param int $quantity     The quantity of the product to add.
 * @param float $price       The price of the product.
 * @return void
 */
function addToCart(string $product_id, string $product_name, int $quantity, float $price) {
    if (empty($_SESSION['cart'])) {
        // Cart is empty, create an empty cart array
        $_SESSION['cart'] = [];
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price,
            'id' => $product_id //  Keep the product ID for future operations
        ];
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id  The ID of the product to update.
 * @param int $quantity     The new quantity of the product.
 * @return void
 */
function updateCartQuantity(string $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
    //  Consider handling the case where the product is not found.  You might want
    //  to throw an error, log it, or just return without doing anything.
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}



/**
 * Calculates the total cart value.
 *
 * @return float The total price of all items in the cart.
 */
function calculateCartTotal() {
    $total = 0.00;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['quantity'] * $item['price'];
        }
    }
    return $total;
}


/**
 * Retrieves the contents of the cart.
 *
 * @return array The cart array.
 */
function getCartContents() {
    return $_SESSION['cart'] ?? [];  // Use null coalescing operator for empty cart
}


// --- Example Usage (Demonstration) ---

// 1. Add some items to the cart
addToCart('product1', 'T-Shirt', 2, 20.00);
addToCart('product2', 'Jeans', 1, 50.00);

// 2. Update the quantity of a product
updateCartQuantity('product1', 5);  // Increase the quantity of T-Shirt to 5

// 3. Remove an item from the cart
removeCartItem('product2');

// 4. Display the cart contents
$cartItems = getCartContents();
$total = calculateCartTotal();

echo "<h2>Your Cart:</h2>";

if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $total . "</p>";
}

?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}


// Example usage:

// 1. Add an item to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// 2. Update the quantity of a product
updateCartQuantity(2, 5); // Increase the quantity of product ID 2 to 5

// 3. Get the cart items
$cart = getCartItems();
print_r($cart);  // Display the cart contents for debugging

// 4. Remove an item from the cart
removeFromCart(1);


// Display the cart items again to show the changes
$cart = getCartItems();
print_r($cart);



?>


<?php
session_start();

// Sample product data (replace with your actual data source)
$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80],
];


// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
  if (isset($_SESSION['cart'][$productId])) {
    // Item already in cart, increment quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it with quantity 1
    $_SESSION['cart'][$productId] = [
      'id' => $productId,
      'name' => $products[$productId]['name'],
      'price' => $products[$productId]['price'],
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}


// --- Example Usage (This would typically come from a form submission) ---

// Add some items to the cart
addToCart(1, 2); // Add 2 T-Shirts
addToCart(2, 1); // Add 1 pair of Jeans
// addToCart(3, 3); // Add 3 pairs of Sneakers

// Display the cart contents
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $itemId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Example: Remove an item (replace with the ID you want to remove)
  // removeFromCart(1);
}


?>


<?php

session_start();

// Cart data (in a real application, this would likely be stored in a database)
$cart = [];

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $item_price, $quantity = 1) {
  global $cart;

  // Check if the item is already in the cart
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    $cart[$item_id] = [
      'name' => $item_name,
      'price' => $item_price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;
  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $quantity) {
  global $cart;

  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $quantity;
  }
}

// Function to get the cart total
function get_cart_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Function to display the cart contents
function display_cart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . number_format($item['price'], 2) . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Price per item: $" . number_format($item['price'], 2) . "<br>";
    echo "Subtotal: $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    echo "Remove: <a href='cart.php?action=remove&id=" . $item_id . "'>Remove</a><br>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . number_format(get_cart_total(), 2) . "</p>";
}


// Handle user actions (e.g., adding to cart, removing from cart)
if (isset($_GET['action']) && $_GET['action'] == 'remove') {
  $item_id = $_GET['id'];
  remove_from_cart($item_id);
  // Redirect back to the cart page
  header("Location: cart.php");
  exit;
}

if (isset($_GET['update']) && $_GET['update'] == 'quantity') {
    $item_id = $_GET['id'];
    $quantity = intval($_POST['quantity']); // Ensure quantity is an integer
    update_quantity($item_id, $quantity);
    header("Location: cart.php");
    exit;
}

// Example product data (replace with your actual product data)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20.00],
    2 => ['name' => 'Jeans', 'price' => 50.00],
    3 => ['name' => 'Shoes', 'price' => 80.00]
];



?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Product Listing (replace with your product listing logic) -->
  <h2>Available Products</h2>
  <ul>
    <?php
    foreach ($products as $item_id => $product) {
      echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<br>";
      echo "<form method='post' action='cart.php'>
                <label for='quantity_" . $item_id . "'>Quantity:</label>
                <input type='number' id='quantity_" . $item_id . "' name='quantity' value='1' min='1'>
                <input type='hidden' name='id' value='" . $item_id . "'>
                <input type='submit' value='Add to Cart'>
              </form>
            </li>";
    }
    ?>
  </ul>

  <?php display_cart(); ?>

</body>
</html>


<?php
session_start();

// Array to store cart items (key is product ID, value is quantity)
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id] = $cart[$product_id] + $quantity;
  } else {
    $cart[$product_id] = $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    if ($cart[$product_id] > $quantity) {
      $cart[$product_id] -= $quantity;
    } else {
      unset($cart[$product_id]);
    }
  }
}

// Function to get the current cart contents
function getCart() {
  return $cart;
}

// Function to clear the cart (remove all items)
function clearCart() {
    global $cart;
    $cart = [];
}

// ************************
// Example Usage / Demo
// ************************

// 1. Add an item to the cart
addToCart(123);  // Add 1 of product ID 123
addToCart(456, 2); // Add 2 of product ID 456

// 2. View the cart contents
$cartContents = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}


// 3. Remove an item from the cart
removeFromCart(123, 1);  // Remove 1 of product ID 123

// 4. View the cart after removal
$cartContents = getCart();
echo "<br><br><h2>Cart Contents After Removal:</h2>";
if (empty($cartContents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartContents as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}

//5. Clear the cart
//clearCart();
//echo "<br><br><h2>Cart Contents After Clearing:</h2>";
//if (empty($cartContents)) {
//    echo "<p>Your cart is empty.</p>";
//} else {
//    echo "<ul>";
//    foreach ($cartContents as $product_id => $quantity) {
//        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
//    }
//    echo "</ul>";
//}
?>


<?php

// This example demonstrates a simple cart session implementation.
// It's a basic illustration and needs to be adapted for real-world use, 
// particularly with database integration and security best practices.

session_start(); // Start the session

// Example product data (replace with your actual product database)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75]
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;  // Initialize if not present
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}


// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId] = $quantity;
  }
}


// Handle adding items to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Sanitize input

    if (isset($products[$productId])) {
        addToCart($productId);
    }
}

// Handle removing items from the cart
if (isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id']; // Sanitize input
    removeFromCart($productId);
}


// Handle updating quantity
if (isset($_POST['update_quantity'])) {
  $productId = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'];
  updateQuantity($productId, $quantity);
}


// Display the cart contents
$cart_count = 0;
if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $id => $quantity) {
        $cart_count++;
        $product = $products[$id];
        $total_price = $product['price'] * $quantity;
        echo '<p><strong>Item:</strong> ' . $product['name'] . '<br>';
        echo '<strong>Quantity:</strong> ' . $quantity . '<br>';
        echo '<strong>Price:</strong> $' . $product['price'] . '<br>';
        echo '<strong>Total:</strong> $' . $total_price . '</p>';
    }
}

echo '<p><strong>Total Items in Cart:</strong> ' . $cart_count . '</p>';

// Example:  A button to clear the entire cart
if (isset($_POST['clear_cart'])) {
    session_destroy();
    echo "<p>Cart cleared.</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form method="post">
    <h2>Add Items to Cart</h2>
    <?php
    foreach (array_keys($products) as $productId) {
        echo '<label for="product_id_' . $productId . '">Add ' . $products[$productId]['name'] . ':</label>';
        echo '<input type="number" id="product_id_' . $productId . '" name="product_id" value="0" min="0">';
        echo '<input type="submit" name="add_to_cart" value="Add to Cart">';
    }
    ?>
</form>

</body>
</html>


<?php

session_start();

// Initialize an empty cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (Demonstration)

// Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another laptop

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeCartItem(2);

// Example of updating quantity
// updateQuantity(1, 3);  // Change quantity of Laptop to 3
?>


<?php
session_start();

// Cart data (in a real application, this would likely come from a database)
$cart = [];

// Helper functions for cart operations
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

function update_quantity($product_id, $new_quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

function remove_from_cart($product_id) {
  global $cart;
  unset($cart[$product_id]);
}

function get_cart_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

function get_cart_items() {
    global $cart;
    return $cart;
}

// --- Example Usage (Simulating User Actions) ---

// 1. User adds a product
add_to_cart(1, 'T-Shirt', 20, 2); // Product ID 1: T-Shirt, Quantity: 2
add_to_cart(2, 'Jeans', 50, 1);  // Product ID 2: Jeans

// 2. User updates the quantity of a product
update_quantity(1, 3); // Increase T-Shirt quantity to 3

// 3. User removes a product
//remove_from_cart(2); // Remove Jeans

// 4.  Get the cart contents for display
$cart_items = get_cart_items();

// 5. Get the cart total
$total = get_cart_total();

// --- Displaying the Cart (For demonstration) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<h2>Cart Items:</h2>";
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
      echo "<li>" . $item['name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $total . "</p>";
  }
?>

</body>
</html>


<?php
session_start();

// Assuming you have a file (e.g., products.php) that retrieves product data
// For demonstration, I'll use some hardcoded data.

$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = [
            'id' => $productId,
            'name' => $products[$productId]['name'],
            'price' => $products[$productId]['price'],
            'quantity' => $quantity,
        ];
    }
}

// Function to get the cart contents
function getCartContents()
{
    if (empty($_SESSION['cart'])) {
        return [];
    }
    return $_SESSION['cart'];
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// ---------------------------------------
// Example Usage (Simulating User Actions)
// ---------------------------------------

// 1. User adds a T-Shirt
addToCart(1);

// 2. User adds two Jeans
addToCart(2, 2);

// 3. User adds a Hat
addToCart(3);

// 4. User removes a Jeans
removeFromCart(2);

// ---------------------------------------
// Displaying the Cart Contents
// ---------------------------------------

$cart = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $itemId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Example Product Data (replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0; // Use ?? to handle new items
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to get the cart total
function getCartTotal()
{
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $productId => $quantity) {
            $product = $products[$productId];
            $totalForProduct = $product['price'] * $quantity;
            $totalForProduct += $totalForProduct;
        }
    }
    return $totalForProduct;
}

// Example usage:  Add items to the cart
addToCart(1, 2); // Add 2 T-Shirts to the cart
addToCart(2, 1); // Add 1 Jeans to the cart
addToCart(3, 3); // Add 3 Hats to the cart

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (isset($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . " - Total: $" . ($product['price'] * $quantity) . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Cart Total: $" . getCartTotal() . "</strong></p>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start(); // Start the session

// -----------------------------------------------------
// Helper Functions
// -----------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Removes a specific item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array representing the cart contents.
 */
function getCartItems() {
    return $_SESSION['cart'] ?? []; // Return empty array if cart is empty
}



// -----------------------------------------------------
// Example Usage (Simulating a Product View)
// -----------------------------------------------------

// Simulate a user adding an item to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
}

// Example: Remove an item
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
}


// Example: Update the quantity of an item
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateQuantity($product_id, $new_quantity);
}

// -----------------------------------------------------
// Displaying the Cart (for demonstration)
// -----------------------------------------------------

// Get the cart items
$cart_items = getCartItems();

// Display the cart contents
echo "<div class='cart'>";
if (empty($cart_items)) {
    echo "<h2>Your cart is empty.</h2>";
} else {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>";
        echo "Product ID: " . $product_id . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        // You would likely fetch product details from a database based on $product_id here
        echo "</li>";
    }
    echo "</ul>";
}
echo "</div>";

?>


<?php
session_start();

// --- Cart Operations ---

// 1. Add Item to Cart
function add_to_cart($product_id, $quantity = 1, $product_name = "") {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name // Optional: Add product name for display
    ];
  }
}

// 2. Remove Item from Cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// 3. Update Item Quantity in Cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// 4. Get Cart Contents
function get_cart_contents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return []; // Return an empty array if cart is empty
  }
}


// --- Example Usage (Simulated Product Data - Replace with your actual database/product data) ---

$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];


// --- Handle Actions (Simulated - Replace with form handling from a web form) ---

// Example 1: Add a T-Shirt to the cart
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  add_to_cart($product_id, $quantity);
  // You would typically display a success message here.
}

// Example 2: Remove Jeans
if (isset($_POST['action']) && $_POST['action'] == 'remove_item') {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
    // You would typically display a success message here.
}

// Example 3: Update quantity of a T-Shirt
if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_cart_quantity($product_id, $new_quantity);
}


// --- Display Cart Contents (For demonstration purposes) ---
$cart_contents = get_cart_contents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];

    echo "<li>" . $product_name . " - $" . $product_price . " (Quantity: " . $product_data['quantity'] . ")</li>";
  }
  echo "</ul>";
}

?>


<?php

session_start(); // Start the session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Otherwise, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    return false; // Product not found in the cart
  }

  if ($new_quantity <= 0) {
    // Remove the item if the quantity is zero or negative
    unset($_SESSION['cart'][$product_id]);
    return true;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  return true;
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
  return true;
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}



// --- Example Usage (Demonstration) ---

// 1. Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another laptop


// 2. Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'];
    echo " <button onclick=\"updateQuantity('" . $product_id . "', 1)">+</button>  <button onclick=\"updateQuantity('" . $product_id . "', 0)\">Remove</button>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}



// ---  Example HTML to display the cart and update the quantity using JavaScript ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <!-- Display cart content - the above PHP code generates this -->

  <script>
    // Example JavaScript function to update the quantity
    function updateQuantity(productId, quantityChange) {
      //  This is a simplified example.  In a real application, you'd send
      //  a request to the server to update the cart.
      //  For simplicity, we'll just update a local variable (not persistent)
      //  This is for demonstration only!

      // In a real application, you would:
      // 1. Make an AJAX request to your PHP server to update the cart.
      // 2. The PHP server would update the session.
      // 3. Then, you would refresh the page (or use JavaScript to update the DOM).

      // Simulated update (DO NOT USE IN PRODUCTION - ONLY FOR DEMO)
      console.log("Updating quantity of product " + productId + " by " + quantityChange);
      // You'd replace this with a server-side update.
    }
  </script>
</body>
</html>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If yes, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If not, add the product to the cart with quantity 1
    $_SESSION['cart'][$productId] = array(
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Example Usage (Demonstration)

// Add some items to the cart
addItemToCart(1, 'Laptop', 1200, 1);
addItemToCart(2, 'Mouse', 25, 2);
addItemToCart(1, 'Laptop', 1200, 3); // Adding more of the same item

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $item['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . $item['price'] * $item['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item
// removeItemFromCart(2);

// Example: Update the quantity
// updateQuantity(1, 5);

// To view updated cart after changes, uncomment the display section again
// echo "<h2>Your Shopping Cart</h2>";
// if (empty($_SESSION['cart'])) {
//     echo "<p>Your cart is empty.</p>";
// } else {
//    echo "<ul>";
//    foreach ($_SESSION['cart'] as $id => $item) {
//        echo "<li>";
//        echo "<strong>Product:</strong> " . $item['name'] . "<br>";
//        echo "<strong>Price:</strong> $" . $item['price'] . "<br>";
//        echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
//        echo "<strong>Total for this item:</strong> $" . $item['price'] * $item['quantity'] . "<br>";
//        echo "</li>";
//    }
//    echo "</ul>";
// }
?>


<?php
session_start(); // Start the session

// Cart initialization - Initialize an empty cart in the session.
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If yes, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If no, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example Usage (Simulated Product Data)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];

//  Simulate user actions (Example)
// Add a laptop to the cart
addToCart(1, 'Laptop', $products[1]['price']);

// Add a mouse to the cart
addToCart(2, 'Mouse', $products[2]['price'], 2); // Add two mice

//  Add a keyboard to the cart
addToCart(3, 'Keyboard', $products[3]['price']);

// Update the quantity of the mouse
updateCartQuantity(2, 5);

// Remove the keyboard from the cart
removeCartItem(3);

// Display the cart contents
echo "<h2>Cart Contents</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " - Total: $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it's already there, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not there, add it to the cart as a new item
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'price' => getProductPrice($product_id) // You'll need a function to get product price
    );
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


/**
 * Gets the price of a product based on its ID.  (This needs to be implemented)
 *
 * @param int $product_id
 * @return float|null
 */
function getProductPrice($product_id) {
    // Replace this with your actual database query or other method
    // to retrieve the product price.  This is just a placeholder.
    //  Example:
    //  $db = new DatabaseConnection();
    //  $result = $db->query("SELECT price FROM products WHERE id = $product_id");
    //  if ($result->num_rows > 0) {
    //      return $result->fetch_assoc()['price'];
    //  }
    //  return null; // Or handle the case where the product isn't found.
    return 10.00;  //Placeholder Price
}

// --- Example Usage (demonstration) ---

// Add some items to the cart
addToCart(1, 2); // Add 2 of product ID 1
addToCart(2, 1); // Add 1 of product ID 2
addToCart(1, 1); // Add 1 of product ID 1

// Display the cart contents
echo "<h2>Your Cart:</h2>";
echo "<ul>";
if (empty($_SESSION['cart'])) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $quantity = $item['quantity'];
    $price = $item['price'];
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . ", Price: $" . $price . "</li>";
  }
}
echo "</ul>";

// Remove an item from the cart
removeFromCart(2);

// Display the cart contents after removal
echo "<br>";
echo "<h2>Your Cart (After Removal):</h2>";
if (empty($_SESSION['cart'])) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $quantity = $item['quantity'];
        $price = $item['price'];
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . ", Price: $" . $price . "</li>";
    }
}

// Update the quantity of a product
updateQuantity(1, 3);

echo "<br>";
echo "<h2>Your Cart (After Quantity Update):</h2>";
if (empty($_SESSION['cart'])) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($_SESSION['cart'] as $product_id => $item) {
        $quantity = $item['quantity'];
        $price = $item['price'];
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . ", Price: $" . $price . "</li>";
    }
}

?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity) {
  // Create an associative array for the item
  $item = array(
    'id' => $productId,
    'name' => $productName,
    'price' => $price,
    'quantity' => $quantity
  );

  // Add the item to the cart array
  $_SESSION['cart'][] = $item;
}

// Example Usage:

// Add a product to the cart
addItemToCart(1, "Laptop", 1200, 1);

// Add another product to the cart
addItemToCart(2, "Mouse", 25, 2);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";

// Loop through the cart items
if (count($_SESSION['cart']) > 0) {
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
} else {
  echo "<li>Your cart is empty.</li>";
}

echo "</ul>";

// Example of updating the quantity of an item (optional)
// This is just an example - you'd usually handle this through a form or AJAX.
if (isset($_POST['update_quantity'])) {
  $itemId = $_POST['item_id'];
  $newQuantity = $_POST['quantity'];

  // Find the item in the cart
  foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $itemId) {
      $_SESSION['cart'][$key]['quantity'] = $newQuantity;
      break; // Exit the loop once the item is found and updated
    }
  }
}
?>


<?php
session_start(); // Start the session

// This is a basic example.  A real-world implementation would:
// 1.  Fetch product data from a database or other source.
// 2.  Handle user input more robustly (e.g., validation, error handling).
// 3.  Implement more sophisticated session management.

// Sample product data (replace with your database or data source)
$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];


// Function to add a product to the cart
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] + $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

// Function to remove a product from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $product = $products[$product_id]; // Get product details
      $total_price = $product['price'] * $quantity;
      $total = $total + $total_price;
    }
  }
  return $total;
}



// ---  Example Usage (Simulating User Interaction) ---

// 1. User adds a T-Shirt to the cart
addToCart(1); // Adds one T-Shirt to the cart

// 2. User adds two Jeans to the cart
addToCart(2, 2);

// 3. User removes the T-Shirt from the cart
removeFromCart(1);


// 4. Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";

if (isset($_SESSION['cart'])) {
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product = $products[$product_id];
    echo "<li>" . $product['name'] . " x " . $quantity . " = $" . $product['price'] * $quantity . "</li>";
  }
} else {
  echo "<li>Your cart is empty.</li>";
}

echo "</ul>";

// 5. Calculate and display the total
echo "<p><strong>Total Cart Value:</strong> $" . calculateTotal() . "</p>";

?>


<?php
session_start();

// --- Session Variables ---
$cart = array(); // Array to store cart items.  Keys will be product IDs.
$total_items = 0;

// --- Helper Functions ---

// Add an item to the cart
function addToCart($product_id, $quantity = 1, $product_name = null) {
    global $cart, $total_items;

    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] += $quantity;
    } else {
        $cart[$product_id] = array(
            'quantity' => $quantity,
            'name' => $product_name ?? $product_id, // Use product_name if provided, otherwise use product_id as name
        );
    }
    $total_items += $quantity;
}

// Remove an item from the cart
function removeFromCart($product_id) {
    global $cart, $total_items;

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
        $total_items -= $cart[$product_id]['quantity'];
    }
}

// Get the cart contents
function getCart() {
    return $cart;
}

// Get total cart value
function getTotalCartValue() {
    global $cart;
    $total = 0;
    foreach ($cart as $item) {
        // Assuming you have a way to get the product price.  Replace with your actual price retrieval.
        $price = getProductPrice($item['name']);  // Replace with your product price retrieval function
        $total_item_value = $price * $item['quantity'];
        $total_item_value += $total_item_value;
        $total = $total + $total_item_value;
    }
    return $total;
}


// --- Example Usage (Illustrative) ---

// Add some items to the cart
addToCart(101, 2);  // Product ID 101, quantity 2
addToCart(102, 1, "Blue Shirt"); // Product ID 102, quantity 1, product name "Blue Shirt"
addToCart(103, 3);


// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . getProductPrice($item['name']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . getTotalCartValue() . "</strong></p>";
}

// ---  Demonstration of session management ---

// To persist the cart across multiple page views, you'll likely use this in your
// page structure.  Here's how it might look:

// 1.  On the product page:
//     - When the user adds an item to the cart, call addToCart().
//     -  *After* the product page loads, `session_start();` will automatically
//        start the session, and the $cart variable will be available.

// 2.  On the cart page:
//     - `session_start();`
//     - Display the contents of $cart, calculated using getCart() and getTotalCartValue().

?>


<?php

session_start();

// --- Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id      The ID of the product being added.
 * @param int $quantity       The quantity of the product to add (default: 1).
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id   The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return void
 */
function update_cart_quantity(int $product_id, int $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets the contents of the cart.
 *
 * @return array  An array representing the cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart() {
  unset($_SESSION['cart']);
}

// --- Example Usage ---

// 1. Add a product to the cart
add_to_cart(123); // Add product with ID 123 to the cart (quantity = 1)
add_to_cart(456, 2); // Add product with ID 456 to the cart (quantity = 2)

// 2. Update the quantity of a product
update_cart_quantity(123, 5); // Increase the quantity of product 123 to 5

// 3. Get the cart contents
$cart_contents = get_cart_contents();
print_r($cart_contents);

// 4. Remove an item
remove_from_cart(456);

// 5. Get the cart contents again
$cart_contents = get_cart_contents();
print_r($cart_contents);

// 6. Clear the cart
clear_cart();

// 7. Get the cart contents after clearing
$cart_contents = get_cart_contents();
print_r($cart_contents); // Should be an empty array
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example usage -  Let's say we have a product with ID 1, name "Shirt", price $20
addToCart(1, 'Shirt', 20, 2);

// Another product with ID 2, name "Pants", price $30
addToCart(2, 'Pants', 30, 1);


// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total Price for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeFromCart(1); // Uncomment to remove the shirt

// Example of updating the quantity
// updateQuantity(2, 3); // Uncomment to change the quantity of pants to 3


?>


<?php
session_start();

// Simulate a product
$product_name = "Awesome T-Shirt";
$product_price = 25.00;

// Function to add to cart
function addToCart($product_name, $product_price, $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the product to the cart
  $_SESSION['cart'][] = array(
    'name' => $product_name,
    'price' => $product_price,
    'quantity' => $quantity
  );

  // Optional: Update quantity if product already in cart
  $product_found = false;
  for ($i = 0; $i < count($_SESSION['cart']); $i++) {
    if ($_SESSION['cart'][$i]['name'] == $product_name) {
      $_SESSION['cart'][$i]['quantity'] += $quantity;
      $product_found = true;
      break;
    }
  }

  // If the product wasn't found, add it to the cart
  if (!$product_found) {
    $_SESSION['cart'][] = array(
      'name' => $product_name,
      'price' => $product_price,
      'quantity' => $quantity
    );
  }

  // Optional: Calculate total cart value
  $_SESSION['cart_total'] = 0;
  foreach ($_SESSION['cart'] as $item) {
    $_SESSION['cart_total'] += $item['price'] * $item['quantity'];
  }
}

// Example Usage:
// Add one T-Shirt to the cart
addToCart($product_name, $product_price);

// Add two more T-Shirts
addToCart($product_name, $product_price, 2);

// Display the cart contents (for demonstration)
echo "<h2>Your Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . number_format($_SESSION['cart_total'], 2) . "</strong></p>";
}

?>


<?php
session_start();

// --- Cart Initialization ---
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param int $quantity The quantity of the product being added.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = 0;
  }
  $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Returns the cart contents.
 *
 * @return array The cart contents as an array.
 */
function getCartContents() {
  return $_SESSION['cart'];
}

/**
 *  Calculates the total number of items in the cart.
 *
 * @return int The total number of items
 */
function getCartTotal(){
  $total = 0;
  if(isset($_SESSION['cart'])){
    foreach($_SESSION['cart'] as $quantity => $count){
      $total = $total + $count;
    }
  }
  return $total;
}

// --- Example Usage (Simulated Product Details) ---
// This is just for demonstration; in a real application, you'd
// fetch this data from a database or other source.

$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15]
];


// ---  Handling Cart Actions (Simulated) ---

// 1. Adding to Cart
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
  addToCart($product_id, $quantity);
  echo "<p>Item added to cart!</p>";
}

// 2. Removing from Cart
if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
  echo "<p>Item removed from cart!</p>";
}


// --- Displaying the Cart ---
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>";
    echo "Product ID: " . $product_id . "<br>";
    echo "Product Name: " . $products[$product_id]['name'] . "<br>";
    echo "Quantity: " . $quantity . "<br>";
    echo "Price: $" . $products[$product_id]['price'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";

?>


<?php
session_start();

// ------------------------------------------------------------------
//  Example Cart Session Functions
// ------------------------------------------------------------------

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name = 'Unknown Product', $product_price = 0.00) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'quantity' => $quantity,
    'price' => $product_price
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart total
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price'];
    }
  }
  return $total;
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return null;
}



// ------------------------------------------------------------------
//  Example Usage (simulated shopping process)
// ------------------------------------------------------------------

// Simulate user actions (e.g., from a form submission)

// 1. Add some items to the cart
addToCart(101, 2, 'T-Shirt', 20.00);
addToCart(102, 1, 'Jeans', 50.00);
addToCart(103, 3, 'Hat', 15.00);

// 2. User updates the quantity of a T-Shirt
updateCartQuantity(101, 5);

// 3. User removes Jeans
removeFromCart(102);

// 4. Get the cart contents
$cart = getCartContents();
if ($cart) {
  echo "<h2>Cart Contents:</h2>";
  echo "<ul>";
  foreach ($cart as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - Quantity: " . $item_data['quantity'] . " - Price: $" . $item_data['price'] . "</li>";
  }
  echo "</ul>";
  echo "<h2>Total: $" . getCartTotal() . "</h2>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name = 'Unknown Product') {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if it exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name // Optional: Add product name for display
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// --- Example Usage (Illustrative) ---

// Add a product to the cart
addToCart(123, 2, 'Awesome T-Shirt'); // product_id = 123, quantity = 2, product_name = 'Awesome T-Shirt'
addToCart(456, 1, 'Cool Mug');       // Add another product

// Display the contents of the cart
echo "<h2>Your Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "Product: " . $product_details['name'] . ", Quantity: " . $product_details['quantity'];
    echo "<button onclick='removeFromCart(" . $product_id . ")'>Remove</button>"; // Link to remove
    echo "</li>";
  }
  echo "</ul>";
}

// Update the quantity of an item
updateCartQuantity(123, 5);

// Remove an item
// removeFromCart(456);

// Display the cart again after the update
echo "<h2>Your Cart (Updated):</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "Product: " . $product_details['name'] . ", Quantity: " . $product_details['quantity'];
    echo "<button onclick='removeFromCart(" . $product_id . ")'>Remove</button>"; // Link to remove
    echo "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start();

// --- Cart Functions ---

// Add item to cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][$product_id] = [
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Update quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        // Product doesn't exist in cart, create a new item
        add_to_cart($product_id, $product_name, $price, $quantity); // Use the updated quantity
    }
}

// Remove item from cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Get cart items
function get_cart_items() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return [];
  }
}

// Calculate cart total
function calculate_cart_total() {
    $total = 0;
    $cart_items = get_cart_items();

    foreach ($cart_items as $item) {
        $total += $item['price'] * $item['quantity'];
    }

    return $total;
}

// --- Example Usage (In a Web Page - e.g., index.php) ---

// Example product data (simulated)
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 80]
];

// --- Handle Add to Cart Request (e.g., from a form submission) ---

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['add_to_cart_id']) && isset($_POST['quantity'])) {
        $product_id = (int)$_POST['add_to_cart_id']; // Cast to integer
        $quantity = (int)$_POST['quantity'];
        add_to_cart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
    } elseif (isset($_POST['update_quantity'])) {
        $product_id = (int)$_POST['product_id'];
        $quantity = (int)$_POST['quantity'];
        update_cart_quantity($product_id, $quantity);
    } elseif (isset($_POST['remove_from_cart_id'])) {
        $product_id = (int)$_POST['remove_from_cart_id'];
        remove_from_cart($product_id);
    }
}

// --- Display Cart Contents ---

$cart_items = get_cart_items();
$cart_total = calculate_cart_total();

echo "<h1>Your Shopping Cart</h1>";

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $cart_total . "</strong></p>";
}

?>


<?php
session_start();

// Sample Product Data (for demonstration)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Example Usage (simulating user actions)

// User adds a T-Shirt to the cart
addToCart(1);

// User adds 2 Jeans to the cart
addToCart(2, 2);

// User removes the Hat from the cart
removeFromCart(3);

// User updates the quantity of Jeans to 3
updateQuantity(2, 3);


// Display the Cart Contents
echo "<h2>Shopping Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>";
        echo "<strong>" . $product['name'] . "</strong> - $" . $product['price'] . " x " . $quantity . " = $" . ($product['price'] * $quantity) . "</li>";
    }
    echo "</ul>";

    // Calculate the total price
    $totalPrice = 0;
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        $totalPrice += $product['price'] * $quantity;
    }
    echo "<p><strong>Total: $" . $totalPrice . "</strong></p>";
} else {
    echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start();

// Define session variables for the cart
$_SESSION['cart'] = array();
$_SESSION['cart_count'] = 0; // Keeps track of the number of items in the cart

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
  // Update the cart count
  $_SESSION['cart_count'] = count($_SESSION['cart']);
}


// Example usage:  Let's say we have some products available:

// Product 1: ID = 1, Name = "Shirt", Price = 20
// Product 2: ID = 2, Name = "Pants", Price = 30
// Product 3: ID = 3, Name = "Shoes", Price = 50

// Add a shirt (product ID 1) to the cart - quantity 2
add_to_cart(1, 'Shirt', 20, 2);

// Add pants (product ID 2) to the cart - quantity 1
add_to_cart(2, 'Pants', 30, 1);

// Add shoes (product ID 3) to the cart - quantity 1
add_to_cart(3, 'Shoes', 50, 1);


// Display the contents of the cart

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - Price: $" . $product_data['price'] . ", Quantity: " . $product_data['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p>Total Items in Cart: " . $_SESSION['cart_count'] . "</p>";
}

// Example:  Remove an item (illustrative -  you'd typically do this on a delete button click)
// To remove a product, you'd unset the key in the $_SESSION['cart'] array.
// For example, to remove product with ID 2:
// unset($_SESSION['cart'][2]);
// $_SESSION['cart_count'] = count($_SESSION['cart']);

?>


<?php

session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage (Demonstration - this part will likely be handled by your frontend)
//  You'll likely be getting this data from your product listing page
//  or your shopping cart page.

// Add some items to the cart
addToCart(1, 'T-Shirt', 20.00, 2);
addToCart(2, 'Jeans', 50.00, 1);
addToCart(1, 'T-Shirt', 20.00, 1); // Add more of the T-shirt


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of updating quantity
updateQuantity(1, 3);

// Display the updated cart
echo "<h2>Updated Cart</h2>";
echo "<ul>";
foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
}


// Example of removing an item
//removeFromCart(2);


// Important Considerations & Next Steps:

// 1. Frontend Integration:
//    -  You'll need to add HTML forms to your web page to allow users to add items to the cart.
//    -  When a user clicks an "Add to Cart" button, you'll use JavaScript to send a request to the server (typically a POST request) with the product ID and quantity.
//    -  The PHP code (this example) will receive that request, update the session, and return a response (e.g., a confirmation message to display on the page).

// 2. Security:
//    -  **Input Validation:**  Always validate and sanitize user inputs (product IDs, quantities) to prevent vulnerabilities like SQL injection or cross-site scripting (XSS).
//    -  **Session Management:**  Implement proper session management practices, including setting appropriate session expiration times, using secure session IDs, and protecting session cookies.
//    -  **CSRF Protection:** Implement Cross-Site Request Forgery (CSRF) protection.

// 3.  Database Integration:
//    - In a real application, you'll typically store product information (name, price, etc.) in a database.
//    -  The PHP code would need to query the database to retrieve product details before adding them to the cart.

// 4.  Cart Persistence:
//    - Sessions are stored on the server.  However, the session data is still associated with the user's browser.
//    -  If the user closes their browser and reopens it, the session will be lost unless you implement a mechanism to persist the cart data (e.g., using cookies or localStorage, or storing it on the server).

// 5.  Error Handling:
//    -  Include error handling to gracefully handle situations like invalid product IDs, database connection errors, or other unexpected issues.

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// --- Example Usage (Replace with your actual data) ---

// Add some items to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(1, "T-Shirt", 20.00, 3); // Add another T-Shirt

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    $product_name = $product_data['name'];
    $price = $product_data['price'];
    $quantity = $product_data['quantity'];
    echo "<li>" . $product_name . " - $" . $price . " x " . $quantity . " = $" . ($price * $quantity) . "</li>";
  }
  echo "</ul>";
}

// Remove an item from the cart (e.g., remove the first T-Shirt)
// removeFromCart(1);

// Update the quantity of an item (e.g., update the quantity of Jeans to 2)
// updateQuantity(2, 3);

// --- End Example Usage ---
?>


<?php
session_start();

// --- Cart Logic ---

// Initialize cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if already exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    return false; // Product not in cart
  }

  if ($quantity <= 0) {
    // Handle invalid quantity (e.g., remove the item)
    remove_from_cart($product_id);
    return false;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  return true;
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculate_cart_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage (for demonstration purposes) ---

// Simulate adding an item to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);

// Update the quantity of a product
update_cart_quantity(1, 3); // Increase T-Shirt quantity to 5

// Get the cart contents
$cart_items = get_cart_contents();
echo "<h2>Cart Items:</h2>";
echo '<ul>';
foreach ($cart_items as $item) {
  echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}
echo '</ul>';

// Calculate and display the total
$total = calculate_cart_total();
echo "<p><strong>Total: $" . $total . "</strong></p>";


// Example: Removing an item
remove_from_cart(2);  // Remove Jeans from the cart

// Display cart contents after removal
echo "<p><strong>Cart Items After Removal:</strong></p>";
$cart_items = get_cart_contents();
echo '<ul>';
foreach ($cart_items as $item) {
  echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}
echo '</ul>';
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($productId, $productName, $price, $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If the product exists, increase the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If the product is not in the cart, add it with quantity 1
    $_SESSION['cart'][$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart doesn't exist
}


// Example Usage:  (This would typically come from a form submission)
// Assuming a product ID of 1, name "Laptop", price $1000, and quantity of 2

// Add 2 laptops to the cart
addToCart(1, "Laptop", 1000, 2);

// Remove the laptop (product ID 1)
// removeFromCart(1);

// Update the quantity of laptop product ID 1 to 3
// updateQuantity(1, 3);

// Display the cart contents
$cart = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $productId => $item) {
    echo "<li>";
    echo "Product: " . $item['name'] . "<br>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Total for this item: $" . ($item['price'] * $item['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Cart Value: " . number_format(calculateCartTotal($cart)) . "</p>";
?>


<?php
session_start();

// Assuming you have a function to add items to the cart (e.g., addToCart())

// Example:
function addToCart($product_id, $quantity) {
    // Logic to add the product to the cart
    if (isset($_SESSION['cart'])) {
        // Check if the product is already in the cart
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            // Product not in cart, add it
            $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
        }
    } else {
        // Cart is empty, create it and add the product
        $_SESSION['cart'] = [$product_id => ['quantity' => $quantity]];
    }
}

// Example usage:
// Let's say we want to add a product with ID 1 to the cart in quantity 2
addToCart(1, 2);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (isset($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}

//  You would likely have a way to remove items, update quantities, and
//  calculate the total cost in a real application.
?>


<?php

session_start();

// --- Cart Session Variables ---
$cart = []; // Array to store items in the cart
$cart_id = 'cart_' . md5(uniqid(rand(), true)); // Unique ID for the session

// --- Helper Functions ---
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart, $cart_id;

  $item = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // Check if the item is already in the cart
  foreach ($cart as &$item_in_cart) {
    if ($item_in_cart['id'] === $item['id']) {
      $item_in_cart['quantity'] += $item['quantity'];
      return;
    }
  }

  // If not in the cart, add it
  $cart[] = $item;
}

function update_cart_quantity($product_id, $quantity) {
    global $cart;
    foreach ($cart as &$item) {
        if ($item['id'] === $product_id) {
            $item['quantity'] = $quantity;
            return;
        }
    }
}

function remove_from_cart($product_id) {
    global $cart;
    $new_cart = [];
    foreach ($cart as $item) {
        if ($item['id'] !== $product_id) {
            $new_cart[] = $item;
        }
    }
    $cart = $new_cart;
}

function get_cart_total($cart) {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Usage (Simulate adding items to the cart) ---

// Add a product to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);


// Update quantity
update_cart_quantity(2, 5);

// Remove item
//remove_from_cart(1);

// --- Displaying the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . get_cart_total($cart) . "</strong></p>";
}

?>


<?php
session_start();

// Check if the cart is initialized. If not, initialize it as an empty array.
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage:
// Let's say we have products with IDs 1, 2, and 3.
// Let's add 2 units of product 1 and 1 unit of product 2.

addToCart(1, 'Product 1', 10.00, 2);
addToCart(2, 'Product 2', 5.00, 1);


// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example: Remove product 2
removeFromCart(2);


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example: Update the quantity of product 1 to 5
updateQuantity(1, 5);

// Function to display the cart contents
function displayCart() {
  echo "<h2>Shopping Cart</h2>";
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_details) {
      echo "<li>" . $item_details['name'] . " - $" . $item_details['price'] . " x " . $item_details['quantity'] . " = $" . ($item_details['price'] * $item_details['quantity']) . "</li>";
    }
    echo "</ul>";
  }
}

// Call the displayCart function to show the contents
displayCart();

//  You can add more functions here for:
//  *  Calculating the total cart value
//  *  Saving the cart to a database (for persistent carts)
//  *  Clearing the cart (e.g., on logout)

?>


<?php

// Start the session
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ---  Functions for Cart Manipulation  ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to clear the entire cart
function clear_cart() {
  unset($_SESSION['cart']);
  $_SESSION['cart'] = array();
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulated Product Data) ---

// Dummy product data (replace with your actual database retrieval)
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);

// ---  Handling Cart Actions (Simulated) ---

// Example:  Adding a product to the cart
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity']; // Get quantity from form
  add_to_cart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
}

// Example: Removing a product from the cart
if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $product_id = $_POST['product_id'];
  remove_from_cart($product_id);
}

// Example:  Updating quantity (simulated)
if(isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_quantity($product_id, $new_quantity);
}

// Example: Clearing the cart
if (isset($_POST['action']) && $_POST['action'] == 'clear_cart') {
  clear_cart();
}


// --- Displaying the Cart Contents ---

// Get the cart contents
$cart_contents = get_cart_contents();

// Output the cart contents
echo "<div class='cart'>";
echo "<h2>Shopping Cart</h2>";

if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='submit' value='Remove from Cart'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<form method='post'>";
  echo "<input type='hidden' name='action' value='clear_cart'>";
  echo "<input type='submit' value='Clear Cart'>";
  echo "</form>";
}
echo "</div>";

?>


<?php
session_start();

// ---------------------------------------------------
// Function to Add Item to Cart
// ---------------------------------------------------
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Add the product to the cart
  $_SESSION['cart'][] = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // You can optionally update the quantity if the item already exists
  updateCartQuantity($product_id, $quantity);
}

// ---------------------------------------------------
// Function to Update Cart Quantity
// ---------------------------------------------------
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use &$item to modify the original array
      if ($item['id'] == $product_id) {
        $item['quantity'] = $quantity;
        break;
      }
    }
  }
}

// ---------------------------------------------------
// Function to Get Cart Items
// ---------------------------------------------------
function getCartItems() {
  return $_SESSION['cart'] ?? []; // Returns the cart, or an empty array if it doesn't exist
}

// ---------------------------------------------------
// Function to Remove Item From Cart
// ---------------------------------------------------
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['id'] == $product_id) {
                unset($_SESSION['cart'][$key]);
                // Optional:  Re-index the array to avoid gaps
                $_SESSION['cart'] = array_values($_SESSION['cart']);
                break;
            }
        }
    }
}


// ---------------------------------------------------
// Example Usage (Demonstration)
// ---------------------------------------------------

// Add some products to the cart
addToCart(1, "Shirt", 25.00, 2);
addToCart(2, "Shoes", 75.00, 1);
addToCart(1, "Shirt", 25.00, 3); // Add more of the shirt

// Display the cart items
$cart_items = getCartItems();
echo "<h2>Your Cart:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove an item
removeItemFromCart(2);

// Display the cart items again
$cart_items = getCartItems();
echo "<h2>Your Cart (After Removal):</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Initialize an empty session if it doesn't exist
session_start();

// Check if the 'cart' session variable exists
if (!isset($_SESSION['cart'])) {
  // If not, initialize it as an empty array
  $_SESSION['cart'] = array();
}

// ---  Example Function to Add Items to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the 'cart' session variable exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// --- Example Usage (Simulated) ---

// Add a product to the cart
addToCart(1, 'T-Shirt', 20.00, 2);

// Add another product
addToCart(2, 'Jeans', 50.00, 1);

// Display the contents of the cart
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total Cart Value:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart'])) . "</p>";


// ---  Example Function to Remove Items from Cart ---
function removeItemFromCart($product_id) {
  // Check if the 'cart' session variable exists
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example: Remove product with ID 1
// removeItemFromCart(1);

// Display the cart contents after removing an item (for demonstration)
// echo "<h2>Cart Contents After Removal:</h2>";
// if (empty($_SESSION['cart'])) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($_SESSION['cart'] as $product_id => $product_details) {
//     echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
//   }
//   echo "</ul>";
// }

?>


<?php
session_start();

// Session variables for the cart
$cart = array();

// Function to add an item to the cart
function addItemToCart($item_id, $item_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $cart = array();
  }

  $cart[] = array(
    'id' => $item_id,
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // You might want to store the cart in a session for persistence
  $_SESSION['cart'] = $cart;
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($item_id, $quantity) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $item_id) {
        $_SESSION['cart'][$key]['quantity'] = $quantity;
        return true;
      }
    }
    return false; // Item not found
  }
  return false; // Cart is empty
}

// Function to remove an item from the cart
function removeItemFromCart($item_id) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $item_id) {
        unset($_SESSION['cart'][$key]);
        // Re-index the array to avoid key issues after deleting
        $_SESSION['cart'] = array_values($_SESSION['cart']);
        return true;
      }
    }
    return false; // Item not found
  }
  return false; // Cart is empty
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// ------------------  Example Usage  ------------------

// 1. Add an item to the cart
addItemToCart(1, "T-Shirt", 20.00, 2);
addItemToCart(2, "Jeans", 50.00);

// 2. Update the quantity of an item
updateCartItemQuantity(1, 3); // Increase the quantity of the T-Shirt to 3

// 3. Remove an item from the cart
removeItemFromCart(2); // Remove the Jeans

// 4. Get and display the cart contents
$cart_contents = getCartContents();

echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


//  Example of clearing the cart (e.g., after checkout)
//  session_destroy();
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $new_quantity;
    }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

// --- Example Usage (Simulated Product Data - Replace with your actual database) ---

$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15],
];


// --- Handling User Actions (Example) ---

if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];  // Get quantity from POST
  add_to_cart($product_id, $quantity);
}

if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $product_id = $_POST['product_id'];
  remove_from_cart($product_id);
}

if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_cart_quantity($product_id, $new_quantity);
}


// --- Displaying the Cart Contents ---

echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product = $products[$product_id];
    echo "<li>Product: " . $product['name'] . ", Quantity: " . $quantity . ", Price: $" . $product['price'] . "</li>";
  }
  echo "</ul>";
}

// --- Example Form for Adding to Cart ---
echo "<h2>Add to Cart</h2>";
echo "<form method='post'>
        <label for='product_id'>Product ID:</label>
        <select name='product_id' id='product_id'>
            <option value='1'>T-Shirt</option>
            <option value='2'>Jeans</option>
            <option value='3'>Hat</option>
        </select><br><br>

        <label for='quantity'>Quantity:</label>
        <input type='number' id='quantity' name='quantity' value='1' min='1'><br><br>

        <button type='submit' name='action' value='add_to_cart'>Add to Cart</button>
      </form>";

// Example form for updating quantity
echo "<h2>Update Quantity</h2>";
echo "<form method='post'>
        <label for='product_id'>Product ID:</label>
        <select name='product_id' id='product_id'>
            <option value='1'>T-Shirt</option>
            <option value='2'>Jeans</option>
            <option value='3'>Hat</option>
        </select><br><br>

        <label for='new_quantity'>New Quantity:</label>
        <input type='number' id='new_quantity' name='quantity' value='1' min='1'><br><br>

        <button type='submit' name='action' value='update_quantity'>Update Quantity</button>
      </form>";

?>


<?php
session_start();

// Session variables for the cart
$cart = array();

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $item_price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$item_id])) {
    $_SESSION['cart'][$item_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$item_id] = array(
      'name' => $item_name,
      'price' => $item_price,
      'quantity' => $quantity
    );
  }
}


// Function to remove an item from the cart
function remove_from_cart($item_id) {
  if (isset($_SESSION['cart'][$item_id])) {
    unset($_SESSION['cart'][$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $new_quantity) {
  if (isset($_SESSION['cart'][$item_id])) {
    $_SESSION['cart'][$item_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart items
function get_cart() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// Example Usage:
// -----------------------------------------------------
// Add an item to the cart (e.g., a product with ID 1, name "T-Shirt", price 20)
add_to_cart(1, "T-Shirt", 20, 2);

// Add another item (e.g., a product with ID 2, name "Jeans", price 50)
add_to_cart(2, "Jeans", 50, 1);

// Get the cart contents
$cart_items = get_cart();
print_r($cart_items);

// Calculate the total
$total = calculate_total();
echo "Total Cart Value: $" . $total . "<br>";


// Remove an item from the cart (e.g., remove the T-Shirt)
remove_from_cart(1);

// Get the updated cart contents
$cart_items = get_cart();
print_r($cart_items);

//Calculate updated total
$total = calculate_total();
echo "Total Cart Value: $" . $total . "<br>";


//Update quantity of Jeans to 3
update_quantity(2, 3);
$cart_items = get_cart();
print_r($cart_items);

$total = calculate_total();
echo "Total Cart Value: $" . $total . "<br>";

?>


<?php

// Start a session if it doesn't exist
session_start();

// --- Example Cart Data (Replace with a database or other storage) ---
$cart = []; // Array to store items in the cart

// Function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($cart[$item_id])) {
    // Item exists, increment quantity
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $cart[$item_id] = [
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeItemFromCart($item_id) {
    unset($cart[$item_id]);
}

// Function to update quantity of an item in the cart
function updateQuantity($item_id, $newQuantity) {
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $newQuantity;
  }
}

// --- Example Usage/Handling (Simulation of user actions) ---

// User adds an item
if (isset($_POST['add_to_cart'])) {
  $item_id = $_POST['item_id'];
  $item_name = $_POST['item_name'];
  $price = $_POST['price'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1

  addToCart($item_id, $item_name, $price, $quantity);
  // You could add a success message or redirect after adding
}


// User removes an item
if (isset($_POST['remove_item'])) {
  $item_id = $_POST['item_id'];
  removeItemFromCart($item_id);
}

// User updates quantity
if (isset($_POST['update_quantity'])) {
  $item_id = $_POST['item_id'];
  $newQuantity = $_POST['quantity'];
  updateQuantity($item_id, $newQuantity);
}


// --- Displaying the Cart ---

//  Get the cart contents for display (This can be done from session storage)
$cart_items = [];
if (isset($_SESSION['cart'])) {
  $cart_items = $_SESSION['cart'];
}


echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>Name:</strong> " . $item_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item_data['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item_data['quantity'] . "<br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='item_id' value='" . $item_id . "'>";
    echo "<input type='submit' value='Remove Item'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start(); // Start the session

// Sample product data (replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to add a product to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}


// Example usage - Handling adding items to the cart
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = $_POST['product_id'];
        $quantity = $_POST['quantity'];

        addToCart($productId, $quantity);
        // Redirect to the same page to update the cart display
        header("Location: cart.php"); // Redirect to the cart page
        exit();
    }
}



// Display the cart contents (cart.php would handle this)
echo "<h1>Your Shopping Cart</h1>";

if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>";
        echo "Product: " . $product['name'] . "<br>";
        echo "Quantity: " . $quantity . "<br>";
        echo "Price per item: $" . $product['price'] . "<br>";
        echo "Total: $" . ($product['price'] * $quantity) . "<br>";
        echo "</li>";
    }
    echo "</ul>";

    // Calculate total cost
    $totalCost = 0;
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $product = $products[$productId];
        $totalCost += ($product['price'] * $quantity);
    }

    echo "<p><b>Total Cost: $" . $totalCost . "</b></p>";

} else {
    echo "<p>Your cart is empty.</p>";
}

?>


<?php
// Start the session
session_start();

// Check if the cart is empty - prevent displaying cart if empty
if (empty($_SESSION['cart'])) {
    header("Location: index.php"); // Redirect if cart is empty
    exit();
}

// Display the cart contents
echo "<h1>Your Shopping Cart</h1>";

echo "<ul>";
foreach ($_SESSION['cart'] as $productId => $quantity) {
    $product = $products[$productId];
    echo "<li>";
    echo "Product: " . $product['name'] . "<br>";
    echo "Quantity: " . $quantity . "<br>";
    echo "Price per item: $" . $product['price'] . "<br>";
    echo "Total: $" . ($product['price'] * $quantity) . "<br>";
    echo "</li>";
}
echo "</ul>";

// Calculate total cost
$totalCost = 0;
foreach ($_SESSION['cart'] as $productId => $quantity) {
    $product = $products[$productId];
    $totalCost += ($product['price'] * $quantity);
}

echo "<p><b>Total Cost: $" . $totalCost . "</b></p>";

// Buttons to remove items from the cart (you'll need to add form elements for this)
// ... (Implementation for removing items)

// Clear the cart on checkout (example)
// if (isset($_POST['checkout'])) {
//     unset($_SESSION['cart']);
//     header("Location: index.php"); // Redirect to the home page
//     exit();
// }
?>


<?php

// Start a session (if not already started)
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Example Functions to Handle Cart Operations ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the product ID exists in the cart
  if (array_key_exists($product_id, $_SESSION['cart'])) {
    // Product already in cart - update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart - add it to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name'     => 'Product Name (Placeholder)' // Add product name (or get it from a database)
    ];
  }
}

/**
 * Remove an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (array_key_exists($product_id, $_SESSION['cart'])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Update the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($product_id, $new_quantity) {
    if (array_key_exists($product_id, $_SESSION['cart'])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

/**
 * Get the current cart contents.
 *
 * @return array The cart array.
 */
function getCart() {
    return $_SESSION['cart'];
}


// --- Example Usage / Demonstration  ---

// 1. Add some items to the cart:
addToCart(101);    // Add product 101 with quantity 1
addToCart(102, 2);  // Add product 102 with quantity 2
addToCart(101);  // Add another product 101

// 2. Display the cart contents:
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = getCart();
if (count($cart_items) > 0) {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
} else {
    echo "<li>Your cart is empty.</li>";
}
echo "</ul>";


// 3. Remove an item from the cart:
// removeFromCart(102);

// 4. Update a product's quantity:
// updateQuantity(101, 3);

// 5. Display the cart contents after the update
// echo "<h2>Cart Contents after update:</h2>";
// $cart_items = getCart();
// if (count($cart_items) > 0) {
//     foreach ($cart_items as $product_id => $item) {
//         echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
//     }
// } else {
//     echo "<li>Your cart is empty.</li>";
// }
?>


<?php

// Start a session (if not already started)
session_start();

// ----------------------------------------------------------------------
// Cart Management Functions
// ----------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1)
{
    // Check if the cart already exists in session
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product already in cart, update quantity
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        // Product not in cart, add it
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity)
{
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // Handle the case where the product doesn't exist in the cart
        // This might involve displaying an error message or doing nothing
        // depending on your application's requirements.
        error_log("Product {$product_id} not found in cart."); // Log the error
    }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart()
{
    unset($_SESSION['cart']);
}

/**
 * Gets the cart contents.
 *
 * @return array  An array representing the cart contents.
 */
function getCart()
{
    return $_SESSION['cart'] ?? []; // Use null coalesce operator for default empty array.
}


// ----------------------------------------------------------------------
// Example Usage (Illustrative)
// ----------------------------------------------------------------------

// Add some items to the cart
addToCart(101, 2); // Add 2 of product ID 101
addToCart(102, 1); // Add 1 of product ID 102
addToCart(101, 3); // Add 3 more of product ID 101

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_items = getCart();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";


// Update quantity (example)
updateCartQuantity(101, 5);
echo "<br>After updating quantity of product 101 to 5: ";
$cart_items = getCart();
echo "<ul>";
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";



// Remove a product
removeFromCart(102);
echo "<br>After removing product 102: ";
$cart_items = getCart();
echo "<ul>";
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Clear the cart
//clearCart();
//echo "<br>After clearing the cart: ";
//$cart_items = getCart();
//echo "<ul>";
//foreach ($cart_items as $product_id => $quantity) {
//    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
//}
//echo "</ul>";


?>


<?php

// This script demonstrates a basic user cart session in PHP.
// It's a simplified example and doesn't include security features like
// input validation or protection against CSRF attacks.  For production
// environments, you'll need to add robust security measures.

session_start();

// --- Cart Initialization ---

// If the cart session variable doesn't exist, initialize it as an empty array.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Add a product to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Ensure the cart exists
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Remove a product from the cart
function removeProduct($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of a product in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Get the cart contents
function getCart() {
    return $_SESSION['cart'];
}

// Calculate the total cart value
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}


// --- Example Usage (Simulated User Actions) ---

//  Simulate a user adding a product to the cart:
addToCart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, $1200, Quantity 1
addToCart(2, "Mouse", 25, 2);   // Product ID 2, Mouse, $25, Quantity 2
addToCart(1, "Laptop", 1200); // Add another laptop

// Display the cart contents:
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . $product['price'] * $product['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Cart Value:</strong> $" . calculateTotal() . "</p>";
}


//  Simulate a user removing a product from the cart:
//removeProduct(2); // Remove the mouse

//Simulate updating the quantity of a product
//updateQuantity(1, 3);  // Increase laptop quantity to 3


?>


<?php
session_start();

// --- Cart Operations ---

// 1. Add an Item to the Cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart.  If so, update the quantity.
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Otherwise, add a new entry with quantity 1.
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// 2. Remove an Item from the Cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// 3. Update Item Quantity
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// 4. Get Cart Items
function get_cart_items() {
    return $_SESSION['cart'];
}

// 5. Calculate Cart Total
function calculate_cart_total() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}


// --- Example Usage (Demonstration) ---

// **Simulating Product Information (Replace with actual database retrieval)**
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];

// ---------------------  Cart Session Handling Examples ---------------------

// **1. Add a Product to the Cart**
// $product_id = 1;
// $quantity = 2;
// add_to_cart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);

// **2. Remove a Product**
// remove_from_cart(2);

// **3. Update Quantity**
// update_cart_quantity(1, 3);

// **4.  Display Cart Contents (for demonstration)**
$cart_items = get_cart_items();
$cart_total = calculate_cart_total();

echo "<h2>Your Cart</h2>";

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $cart_total . "</strong></p>";
}


?>


<?php

session_start();

// Check if the cart exists, if not, initialize it.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ------------------------------------------------------------------
// Example Functions (You'll need to implement these)
// ------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product being added.
 * @param string $product_name The name of the product.  (Optional, for display)
 * @param int $quantity The quantity of the product to add. Defaults to 1.
 * @return void
 */
function add_to_cart(string $product_id, string $product_name = '', int $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = ['name' => $product_name, 'quantity' => $quantity, 'price' => 0]; // Initialize with price
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product being updated.
 * @param int $new_quantity The new quantity for the product.
 * @return void
 */
function update_cart_quantity(string $product_id, int $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total price of items in the cart.
 *
 * @return float The total price.
 */
function calculate_cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}


/**
 * Returns the cart contents
 * @return array  The cart array
 */
function get_cart() : array{
    return $_SESSION['cart'];
}


// ------------------------------------------------------------------
// Example Usage (Illustrative - you'll integrate this into your form/logic)
// ------------------------------------------------------------------

// Example: Adding an item to the cart
add_to_cart('product1', 'Awesome T-Shirt', 2);
add_to_cart('product2', 'Cool Mug', 1);

// Example: Updating the quantity
update_cart_quantity('product1', 5);


// Example: Getting and displaying the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . calculate_cart_total() . "</p>";
}

// Example: Removing an item
//remove_from_cart('product1');


// ------------------------------------------------------------------
// Important Considerations and Next Steps
// ------------------------------------------------------------------

// 1.  Database Integration:  This example uses an in-memory session.  You'll *absolutely* need to integrate this with your database to store cart data persistently.  You'll need a table to store cart items, and code to read/write to that table.

// 2.  Product Information:  You'll want to fetch product details (name, price, etc.) from your database based on the product ID. This is crucial for displaying accurate information in the cart.

// 3.  User Authentication:  In a real application, you'll need user authentication to associate carts with specific users.

// 4.  Error Handling: Add error handling (e.g., checking for invalid product IDs, handling database errors).

// 5.  Quantity Validation:  Validate the quantity being added/updated to prevent negative quantities or extremely large numbers.

// 6.  Security:  Protect your session data from unauthorized access and modification.

// 7.  Testing:  Thoroughly test your cart implementation with various scenarios (adding, removing, updating, calculating total).
?>


<?php

// Start the session if it doesn't already exist
session_start();

// --- Cart Initialization ---

// If the 'cart' session variable doesn't exist, initialize it as an empty array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int    $price  The price of the product.
 * @param int    $quantity The quantity of the product to add (default: 1)
 */
function addToCart(string $product_id, string $name, float $price, int $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity The new quantity of the product.
 */
function updateCartItem(string $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        // Product doesn't exist in the cart, so you might want to handle this.
        //  - You could throw an error.
        //  - You could add the product with the given quantity.
        //  - You could log the error.

        // Example:  Adding it with a quantity of 1 if not found.
        addToCart($product_id, $nameFromId($product_id), $priceFromId($product_id), $quantity);
    }
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeCartItem(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


/**
 * Gets the name of a product by its ID.  (Example function - would likely be pulled from a database)
 *
 * @param string $product_id
 * @return string|null
 */
function nameFromId(string $product_id) {
    // In a real application, this would fetch the product name from a database.
    // This is just an example using a simple associative array.
    $products = [
        'product1' => 'Awesome T-Shirt',
        'product2' => 'Cool Mug',
        'product3' => 'Fancy Pen'
    ];
    return $products[$product_id] ?? null;  // Returns null if not found.
}


/**
 * Gets the price of a product by its ID. (Example function - would likely be pulled from a database)
 *
 * @param string $product_id
 * @return float|null
 */
function priceFromId(string $product_id) {
    // In a real application, this would fetch the product price from a database.
    // This is just an example using a simple associative array.
    $products = [
        'product1' => 25.00,
        'product2' => 12.50,
        'product3' => 5.00
    ];
    return $products[$product_id] ?? null;
}



// --- Cart Operations (Example Usage - Replace with your form processing) ---

// 1. Add to Cart (Simulated form submission)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $name = $_POST['product_name'];
    $price = floatval($_POST['product_price']);
    $quantity = intval($_POST['product_quantity']);
    addToCart($product_id, $name, $price, $quantity);
    echo "<p>Item added to cart.</p>";
}

// 2. Update Cart Item
if (isset($_POST['update_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = intval($_POST['quantity']);
    updateCartItem($product_id, $quantity);
    echo "<p>Cart updated.</p>";
}

// 3. Remove Item
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeCartItem($product_id);
    echo "<p>Item removed from cart.</p>";
}

// --- Display Cart Contents ---

// Output the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";

if (empty($_SESSION['cart'])) {
    echo "<li>Your cart is empty.</li>";
} else {
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $name = $product_details['name'];
        $price = $product_details['price'];
        $quantity = $product_details['quantity'];

        echo "<li>Product: " . $name . " - Price: $" . $price . " - Quantity: " . $quantity . "<br>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='hidden' name='quantity' value='" . $quantity . "'>";
        echo "<input type='submit' value='Update Quantity'>";
        echo "</form>";
        echo "</li>";
    }
}

echo "</ul>";


?>


<?php
session_start(); // Start the session

// --- Cart Functions ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  // Check if the cart already exists.  If not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // Otherwise, add the product to the cart
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Get the total number of items in the cart.
 *
 * @return int The total number of items in the cart.
 */
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $quantity => $count) {
      $total = $total + $count;
    }
  }
  return $total;
}

/**
 * Remove a product from the cart by its ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Get the quantity of a specific product in the cart.
 *
 * @param int $product_id The ID of the product to retrieve the quantity for.
 * @return int The quantity of the product in the cart, or 0 if not found.
 */
function getCartQuantity($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        return $_SESSION['cart'][$product_id];
    }
    return 0;
}

/**
 * Clear the entire cart.
 *
 * @return void
 */
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Illustrative) ---

// Add some items to the cart
addToCart(1, 2);  // Product ID 1, quantity 2
addToCart(2, 1);  // Product ID 2, quantity 1
addToCart(1, 3);  // Product ID 1, quantity 3 (increases existing quantity)

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>Product ID: $product_id, Quantity: $quantity</li>";
  }
  echo "</ul>";
}

echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";

// Remove a product
removeFromCart(2);

// Display the updated cart contents
echo "<p>Updated Cart Contents: </p>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>Product ID: $product_id, Quantity: $quantity</li>";
  }
  echo "</ul>";
}

// Clear the cart
//clearCart();  // Uncomment to clear the cart

// Example: Get the quantity of a specific product
$product_id_to_check = 1;
$quantity_of_product = getCartQuantity($product_id_to_check);
echo "<p>Quantity of Product ID $product_id_to_check in the cart: $quantity_of_product</p>";
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------- Cart Functions ---------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add (default: 1).
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array containing all items in the cart.
 */
function get_cart_items() {
  return $_SESSION['cart'];
}

/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function get_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    // Assuming you have a way to get the price of the product
    // Replace this with your actual product price retrieval logic.
    $price = get_product_price($product_id); // Replace with your function
    $total_for_item = $price * $quantity;
    $total = $total + $total_for_item;
  }
  return $total;
}


// --------------------- Example Usage (Demonstration) ---------------------

// Add some items to the cart
add_to_cart(1, 2); // Product ID 1, quantity 2
add_to_cart(2, 1); // Product ID 2, quantity 1
add_to_cart(1, 3); // Product ID 1, quantity 3

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Display the total
echo "<p>Total: " . get_cart_total() . "</p>";

// Remove an item
remove_from_cart(2);

// Display updated cart contents
echo "<br><h2>Cart Contents (after removal):</h2>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Update quantity
update_cart_quantity(1, 5);

// Display updated cart contents
echo "<br><h2>Cart Contents (after update):</h2>";
$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Display the total
echo "<p>Total: " . get_cart_total() . "</p>";



?>


<?php
session_start(); // Start the session

// --- Example Cart Logic ---

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Functions to Manage the Cart ---

// Add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Remove an item from the cart by product ID
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of a cart item
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Get the contents of the cart
function getCartContents() {
  return $_SESSION['cart'];
}

// Calculate the total cart value
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage / Cart Manipulation (Simulating User Actions) ---

// 1. Add an item to the cart
addToCart('product1', 'Awesome T-Shirt', 20, 2); // Add 2 T-shirts
addToCart('product2', 'Cool Mug', 10, 3);     // Add 3 Mugs

// 2. Remove an item from the cart
//removeCartItem('product1');

// 3. Update quantity
//updateCartQuantity('product2', 5);

// 4. Get the cart contents
$cart_items = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $id => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// 5. Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";


// --- Important Notes ---

// 1. Session Start:  `session_start();` *must* be called before any other code that uses session variables.

// 2. Product IDs:  In a real application, you would likely use a unique ID for each product.  This example uses 'product1', 'product2' as placeholders.

// 3. Persistence:  Session data is stored on the server.  It persists across multiple requests *from the same user*.  The user's browser doesn't store the session data itself (it stores a session ID).

// 4. Security:
//    - **Session ID Security:** The session ID is crucial.  Make sure it is generated using a strong, random method and that it is securely transmitted.  PHP's built-in session management is generally secure if you follow best practices.
//    - **Session Hijacking:** Be aware of session hijacking attacks.

// 5. Real-World Implementation:
//    - In a real e-commerce application, this would be integrated into a form handling system to collect user input and update the cart.
//    - You'd likely use a database to store product information.
//    - You'd have a system to handle user authentication and session management.
?>


<?php

session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Functions to handle the cart ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart with quantity 1
        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function getCartContents() {
    return $_SESSION['cart'];
}

// --- Example Usage (Demonstration) ---

// Add some items to the cart
addToCart(101, 2); // Product ID 101, quantity 2
addToCart(102, 1); // Product ID 102, quantity 1
addToCart(101, 3); // Product ID 101, quantity 3


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = getCartContents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
echo "</ul>";


// Update the quantity of a product
updateQuantity(101, 5);

// Display the updated cart contents
echo "<br><h2>Updated Cart Contents:</h2>";
$cart_items = getCartContents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}

// Remove an item from the cart
removeFromCart(102);

// Display the cart contents after removal
echo "<br><h2>Cart Contents After Removal:</h2>";
$cart_items = getCartContents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  if (empty($_SESSION['cart'])) {
    return $total = 0;
  }
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage (Simulated Data - Replace with your actual product data) ---

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);

// Add another product
addToCart(2, "Mouse", 25, 2);

// Update the quantity of product 1
updateQuantity(1, 3);

// Get the cart items
$cart_items = getCartItems();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";


// ---  Illustrative Session Deletion (Clean up after a purchase - Optional) ---
// You'd typically do this after the user completes their purchase
// session_unset($_SESSION['cart']);
// session_destroy();

?>


<?php

// Start the session
session_start();

// Define a function to add items to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  // Check if the cart already exists in the session
  if (!isset($_SESSION['cart'])) {
    // If not, initialize the cart as an empty array
    $_SESSION['cart'] = [];
  }

  // Add the item to the cart (associative array for item details)
  $_SESSION['cart'][] = [
    'id' => $item_id,
    'name' => $item_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Example Usage (Simulating adding items to the cart)
addToCart(1, "Shirt", 25.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(3, "Shoes", 75.00); // Default quantity is 1

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }

  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

?>


<?php
// Example of updating the cart quantity

if (isset($_POST['update_quantity'])) {
    $item_id = $_POST['item_id'];
    $new_quantity = $_POST['quantity'];

    // Find the item in the cart
    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $new_quantity;

        // Optionally, you could also update the price if needed.
        // For simplicity, we assume the price remains the same.

        echo "Cart updated successfully.";
    } else {
        echo "Item not found in the cart.";
    }
}
?>


<?php
session_start();

// ------------------ Session Variables ------------------

// Initialize session variables if they don't exist.
// This is important for cart management.

$_SESSION['cart'] = array(); // Initialize an empty cart array.
$_SESSION['cart_total'] = 0;  // Initialize the total cart value to 0

// ------------------ Helper Functions ------------------

/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  global $_SESSION['cart'];
  global $_SESSION['cart_total'];

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already in cart, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with the given quantity
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity, 'price' => 0); //  Price is set to 0.  You'd likely fetch this from a database.
  }

  // Update the total cart value
  $_SESSION['cart_total'] = 0;
  foreach ($_SESSION['cart'] as $item) {
    $_SESSION['cart_total'] += $item['quantity'] * $item['price']; // Assumes $item['price'] is a database value
  }
}

/**
 * Removes an item from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  global $_SESSION['cart'];

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Clears the entire shopping cart.
 *
 * @return void
 */
function clearCart() {
  global $_SESSION['cart'];
  global $_SESSION['cart_total'];

  $_SESSION['cart'] = array();
  $_SESSION['cart_total'] = 0;
}

/**
 * Returns the contents of the shopping cart.
 *
 * @return array The shopping cart contents.
 */
function getCartContents() {
    return $_SESSION['cart'];
}

// ------------------ Example Usage (Illustrative) ------------------

// 1. Add a product to the cart
addToCart(123, 2);  // Add product with ID 123, quantity 2

// 2. Add another product
addToCart(456, 1);

// 3. Remove a product
removeFromCart(123);

// 4. Get the cart contents
$cart_contents = getCartContents();
print_r($cart_contents); // Display the cart contents
echo "<br>";

// 5. Clear the cart
//clearCart();
//echo "<br>Cart cleared.";

// ------------------  Output (After executing the example) ------------------
// You'll see something like this, depending on the items in the cart:
// Array
// (
//     [456] => Array
//         (
//             [quantity] => 1
//             [price] => 0
//         )
// )
?>


<?php
session_start();

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Example function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example function to update the quantity of an item
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example function to clear the cart
function clearCart() {
  unset($_SESSION['cart']);
}


// ----------------------------------------------------------------------
//  Here's where you would typically handle user interactions like:
//  - Form submission to add items to the cart.
//  - Displaying the cart contents.
//  - Allowing users to update quantities or remove items.
// ----------------------------------------------------------------------

// --- Example:  Simulating a form submission to add an item ---
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  addToCart($product_id, $product_name, $price, $quantity);
  // Display a success message
  echo "<p>Item added to cart!</p>";
}

// --- Example: Removing an item ---
if (isset($_GET['remove_item'])) {
  $product_id = $_GET['remove_item'];
  removeFromCart($product_id);
  // Display a message
  echo "<p>Item removed from cart.</p>";
}

// --- Example: Updating quantity ---
if (isset($_GET['update_quantity'])) {
  $product_id = $_GET['update_quantity'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($product_id, $new_quantity);
  echo "<p>Quantity updated!</p>";
}

// --- Example: Getting and displaying the cart contents ---
$cart_contents = getCartContents();

echo "<h2>Your Shopping Cart</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// --- Example: Clearing the cart (e.g., on checkout) ---
if (isset($_GET['clear_cart'])) {
  clearCart();
  echo "<p>Your cart has been cleared.</p>";
}


?>


<?php
session_start();

// Example:  Let's say we're selling a product called "Awesome T-Shirt"
// and it costs $20.

// 1. Add to Cart Function
function addToCart($productName, $price) {
  // Check if the cart already exists in the session
  if (isset($_SESSION['cart'])) {
    // If it exists, add the product to the array
    $_SESSION['cart'][] = ['name' => $productName, 'price' => $price];
  } else {
    // If it doesn't exist, create an empty array
    $_SESSION['cart'] = [];
    // Add the product to the array
    $_SESSION['cart'][] = ['name' => $productName, 'price' => $price];
  }
}

// 2. View Cart Function
function viewCart() {
  if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . calculateTotal() . "</p>"; // Calculates the total
  } else {
    echo "<p>Your cart is empty.</p>";
  }
}

// 3. Calculate Total Function
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'];
    }
  }
  return $total;
}

// --------------------  Example Usage  --------------------

//  Add an item to the cart
addToCart("Awesome T-Shirt", 20);
addToCart("Cool Hat", 15);
addToCart("Super Socks", 8);

// View the cart
viewCart();

// Let's remove a single item from the cart.
// In a real application, you'd likely have a function for this.
// For this example, we'll manually remove the "Super Socks"
// (This is a simplified demonstration - usually you'd have an ID or similar)

// Remove Super Socks (simplified - a proper system would use an ID)
// Note:  This is just to demonstrate - in a real implementation, you would need
// a way to identify *which* product to remove.
if (isset($_SESSION['cart']) && isset($_SESSION['cart'][0]['name']) && $_SESSION['cart'][0]['name'] === 'Super Socks') {
    unset($_SESSION['cart'][0]);
    //If you remove the last item, you may need to re-index the array.
    //This is a simplification.
    //Reset the array to ensure correct indexing after deletion.
    $_SESSION['cart'] = array_values($_SESSION['cart']);

}

// View the cart after removing
viewCart();

?>


<?php
session_start();

// Initialize the cart (an array to hold items)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Item exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to display the cart contents
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $item_id => $item_details) {
            echo "<li>";
            echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " x " . $item_details['quantity'];
            echo "<br>";
            echo "<form method='post'>";
            echo "<label for='quantity_" . $item_id . "'>Quantity:</label>";
            echo "<input type='number' id='quantity_" . $item_id . "' value='" . $item_details['quantity'] . "' min='1' max='" . $item_details['quantity'] . "' name='quantity_" . $item_id . "' >";
            echo "<button type='submit' name='update_quantity_" . $item_id . "'>Update</button>";
            echo "</form>";

            echo "<br>";
            echo "<form method='post'>";
            echo "<button type='submit' name='remove_" . $item_id . "'>Remove</button>";
            echo "</form>";
            echo "<br>";
        }
        echo "</ul>";

        // Calculate the total price
        $total_price = 0;
        foreach ($_SESSION['cart'] as $item_id => $item_details) {
            $total_price += $item_details['price'] * $item_details['quantity'];
        }
        echo "<p><strong>Total: $" . $total_price . "</strong></p>";
    }
}

// Handle form submissions
if (isset($_POST['update_quantity'])) {
    $item_id = $_POST['update_quantity'];
    $new_quantity = intval($_POST['quantity_' . $item_id]); // Make sure it's an integer
    updateQuantity($item_id, $new_quantity);
}

if (isset($_POST['remove'])) {
    $item_id = $_POST['remove'];
    removeFromCart($item_id);
}

// Display the cart
displayCart();

?>


<?php
session_start();

// --- Cart Data ---
$cart = [];

// Function to add an item to the cart
function addToCart($itemId, $itemName, $itemPrice, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $cart = []; // Initialize empty cart if it doesn't exist
  }

  $cart[] = [
    'id' => $itemId,
    'name' => $itemName,
    'price' => $itemPrice,
    'quantity' => $quantity
  ];

  $_SESSION['cart'] = $cart;
}

// Function to update quantity of an item in cart
function updateQuantity($itemId, $newQuantity) {
    if (empty($_SESSION['cart'])) {
        return false; // Cart is empty, cannot update
    }

    foreach ($cart as &$item) { //Use reference (&) to modify original array
        if ($item['id'] == $itemId) {
            $item['quantity'] = $newQuantity;
            return true;
        }
    }
    return false; //Item not found
}

// Function to remove an item from the cart
function removeItem($itemId) {
    if (empty($_SESSION['cart'])) {
        return false; // Cart is empty, cannot remove
    }

    $originalCart = $_SESSION['cart']; //Store the original cart for comparison
    $cart = array_filter($_SESSION['cart'], function ($key) use ($itemId) {
        return $_SESSION['cart'][$key]['id'] !== $itemId;
    });
    
    //Check if cart is empty after filtering
    if (empty($cart)) {
      $_SESSION['cart'] = []; //Ensure cart is empty if all items are removed.
    }

    return true;
}

// Function to display the cart contents
function displayCart() {
  echo "<h2>Your Cart</h2>";
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Display total price
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += ($item['price'] * $item['quantity']);
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// --- Example Usage (Simulating some actions) ---

// Add some items to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(3, "Hat", 15.00);

//Update quantity of an item
updateQuantity(1, 3); // Change quantity of T-Shirt to 3

// Display the cart
displayCart();

// Remove an item
removeItem(2);
displayCart();


// --- End Example Usage ---
?>


<?php
session_start();

// Define constants for cart keys
define('CART_KEY', 'shopping_cart');

// Function to add item to cart
function addToCart($product_id, $quantity) {
  global($CART_KEY);

  if (isset($_SESSION[$CART_KEY])) {
    $cart = $_SESSION[$CART_KEY];
  } else {
    $cart = array();
  }

  if (isset($cart[$product_id])) {
    $cart[$product_id] = $cart[$product_id] + $quantity;
  } else {
    $cart[$product_id] = $quantity;
  }
}

// Function to remove item from cart
function removeFromCart($product_id) {
  global($CART_KEY);

  if (isset($_SESSION[$CART_KEY])) {
    $cart = $_SESSION[$CART_KEY];
    unset($cart[$product_id]); //Use product_id here, not $product_id
  }
}

// Function to get cart contents
function getCartContents() {
  global($CART_KEY);
  if (isset($_SESSION[$CART_KEY])) {
    return $_SESSION[$CART_KEY];
  } else {
    return array();
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  global($CART_KEY);

  if (isset($_SESSION[$CART_KEY])) {
    $cart = $_SESSION[$CART_KEY];
    if (isset($cart[$product_id])) {
      $cart[$product_id] = $quantity;
    }
  }
}


// Example usage:
// Add an item to the cart
addToCart(123, 2); // Product ID 123, quantity 2
addToCart(456, 1); // Product ID 456, quantity 1

// Display the cart contents
$cartContents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $quantity) {
    // In a real application, you would fetch the product details
    // based on the product_id.  For this example, we'll just display the ID and quantity.
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

// Remove an item from the cart (example)
// removeFromCart(123);

// Update the quantity of an item (example)
// updateQuantity(456, 3);

// Get the updated cart contents (example)
// $cartContents = getCartContents();
// echo "<h2>Updated Cart Contents:</h2>";
// foreach ($cartContents as $product_id => $quantity) {
//   echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
// }

?>


<?php

session_start();

// Session variables for the cart
$cart = array();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, update quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
  global $cart;
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage (Simulating Product Data)
$products = array(
  1 => array('name' => 'T-Shirt', 'price' => 20),
  2 => array('name' => 'Jeans', 'price' => 50),
  3 => array('name' => 'Hat', 'price' => 15)
);


// Handle adding items to the cart (Example form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    add_to_cart($product_id, $product_name, $price, $quantity);
  }
}

// Handle removing items from the cart (Example form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
  }
}

// Handle updating quantity (Example form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_quantity($product_id, $new_quantity);
  }
}



// Displaying the Cart
$cart_total = 0;
echo "<div class='cart'>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];

    $subtotal = $price * $quantity;
    $cart_total += $subtotal;

    echo "<li>";
    echo "<strong>$product_name</strong> - $price x $quantity = $subtotal";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='$product_id'>";
    echo "<input type='hidden' name='product_id' value='$product_id'>";
    echo "<input type='number' name='quantity' value='$quantity'>";
    echo "<button type='submit'>Update</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $cart_total . "</strong></p>";
}
echo "</div>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Operations ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.  Defaults to 1 if not provided.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = 0;  // Initialize if not already in cart
  }
  $_SESSION['cart'][$product_id] += $quantity;
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Gets the contents of the cart.
 *
 * @return array  An array representing the cart contents (product_id => quantity).
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function get_cart_total_items() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $quantity) {
            $total += $quantity;
        }
    }
    return $total;
}


// --- Example Usage (Simulating a user adding items) ---

// Add item 1 (Product ID 1) to cart with quantity 2
add_to_cart(1, 2);

// Add item 2 (Product ID 2) to cart with quantity 1
add_to_cart(2, 1);

// Update the quantity of item 1 to 5
update_cart_quantity(1, 5);

// Remove item 2 from the cart
remove_from_cart(2);

// Get the contents of the cart
$cart_contents = get_cart_contents();
print_r($cart_contents);

// Get total items in the cart
$total_items = get_cart_total_items();
echo "<br>Total items in cart: " . $total_items . "<br>";

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart total
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// Example Usage (Simulated Cart Actions)

// Add an item to the cart
addToCart(1, "Awesome T-Shirt", 20.00, 2);
addToCart(2, "Cool Mug", 10.00, 1);

// Update quantity of item 1 to 3
updateCartQuantity(1, 3);

// Remove item 2
removeCartItem(2);

// Calculate and display the total
$total = calculateCartTotal();
echo "Cart Total: $" . number_format($total, 2) . "<br>";

// Display the current cart contents
echo "<h3>Cart Contents:</h3>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// --- Session Variables ---
$cart = []; // Initialize an empty cart array

// Helper function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$item_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$item_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$item_id] = [
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Helper function to remove an item from the cart
function removeCartItem($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}

// Helper function to update quantity of an item in the cart
function updateQuantity($item_id, $quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $quantity;
    }
}

// Helper function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Helper function to clear the cart
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Simulating a Product Add to Cart Process) ---

// If a product was added (e.g., from a form submission)
if (isset($_POST['add_to_cart'])) {
  $item_id = $_POST['item_id'];
  $item_name = $_POST['item_name'];
  $price = floatval($_POST['price']); // Ensure price is a float
  $quantity = intval($_POST['quantity']); // Ensure quantity is an integer

  addToCart($item_id, $item_name, $price, $quantity);
  echo "<p>Item added to cart.</p>";
}

// If a product was removed
if (isset($_POST['remove_from_cart'])) {
  $item_id = $_POST['item_id'];
  removeCartItem($item_id);
  echo "<p>Item removed from cart.</p>";
}

// If a product quantity was updated
if (isset($_POST['update_quantity'])) {
  $item_id = $_POST['item_id'];
  $quantity = intval($_POST['quantity']);
  updateQuantity($item_id, $quantity);
  echo "<p>Quantity updated in cart.</p>";
}

// If the cart was cleared
if (isset($_POST['clear_cart'])) {
  clearCart();
  echo "<p>Cart cleared.</p>";
}


// --- Display the Cart Contents ---
if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
  echo "<h2>Your Cart:</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>Name:</strong> " . $item_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item_data['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item_data['quantity'] . "<br>";
    echo "<strong>Total Item Cost:</strong> $" . number_format($item_data['price'] * $item_data['quantity'], 2) . "<br>";

    // Add a remove link for each item
    echo "<a href='?action=remove&item_id=" . $item_id . "'>Remove</a><br>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<a href='?action=clear_cart'>Clear Cart</a>"; // Link to clear cart
} else {
  echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Function to add an item to the cart
function addItemToCart($itemId, $itemName, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$itemId])) {
    $_SESSION['cart'][$itemId]['quantity'] += $quantity;
  } else {
    // If not, add the item to the cart
    $_SESSION['cart'][$itemId] = [
      'id' => $itemId,
      'name' => $itemName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($itemId, $newQuantity) {
    if (isset($_SESSION['cart'][$itemId])) {
        $_SESSION['cart'][$itemId]['quantity'] = $newQuantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($itemId) {
  if (isset($_SESSION['cart'][$itemId])) {
    unset($_SESSION['cart'][$itemId]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// ------------------------------------------------------
// Example Usage (Illustrative - Replace with your actual logic)
// ------------------------------------------------------

// Example: Add an item to the cart
addItemToCart(1, "Laptop", 1200, 1);
addItemToCart(2, "Mouse", 25, 2);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $itemId => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
}


// Example: Update quantity
updateQuantity(2, 3);

// Get the cart contents again to see the update
$cart = getCartContents();
echo "<h2>Cart Contents (After Update):</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $itemId => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
}

// Example: Remove an item from the cart
removeItemFromCart(1);

// Get the cart contents again
$cart = getCartContents();
echo "<h2>Cart Contents (After Removal):</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $itemId => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
}
?>


<?php

// Start the session (if not already started)
session_start();

// --- Cart Operations ---

// Function to add an item to the cart
function addItemToCart($product_id, $quantity = 1, $product_name = null) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add the new item to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name ?? $product_id, // Use product name if available, otherwise product ID
    ];
  }
}


// Function to remove an item from the cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}



// --- Example Usage ---

// 1. Add an item to the cart
addItemToCart(123, 2); // Add 2 of product with ID 123
addItemToCart(456, 1, "Awesome T-Shirt"); // Add 1 of product with ID 456 and name "Awesome T-Shirt"


// 2. Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item_data['name'] . "<br>";
    echo "Quantity: " . $item_data['quantity'] . "<br>";
    echo "<a href='update_cart.php?product_id=" . $item_id . "&update_quantity='>Update Quantity</a> | ";
    echo "<a href='remove_from_cart.php?product_id=" . $item_id . "'>Remove from Cart</a>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// This is a basic example and should be expanded for a real-world e-commerce application.

// --- Session Variables ---
// These are just example keys.  Use your own, and choose appropriate data types.
$_SESSION['cart'] = array();  // Empty cart array
$_SESSION['cart_total'] = 0;
$_SESSION['user_id'] = ''; //  For user authentication (optional)


// --- Function to Add Items to Cart ---
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $session;  // Access the session variables

  if (!is_array($session['cart'])) {
    $session['cart'] = array(); // Initialize the cart
  }

  $item = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  $session['cart'][] = $item;  // Add to the cart array
  $session['cart_total'] += $price * $quantity; // Update total
}


// --- Example Usage (Simulate Product Data) ---
// Replace this with your actual product data source (database, API, etc.)

$products = array(
  1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
  2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
  3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75),
);



// --- Example Actions (Simulated Buttons/Links) ---

// **1. Add Laptop to Cart**
if (isset($_POST['add_laptop'])) {
  add_to_cart(1, 'Laptop', $products[1]['price']);
}


// **2. Add Mouse to Cart**
if (isset($_POST['add_mouse'])) {
  add_to_cart(2, 'Mouse', $products[2]['price']);
}

// **3. Add Keyboard to Cart**
if (isset($_POST['add_keyboard'])) {
  add_to_cart(3, 'Keyboard', $products[3]['price']);
}

// **4. Simulate User Removing Item From Cart (Example)**
if (isset($_POST['remove_keyboard'])) {
  // In a real application, you'd need to identify the item to remove based on
  // the product ID and remove it from the cart.  This is a simplified example.
  // This particular example is just for demonstration.
  // In a production environment, this would likely involve a database query.
  if (isset($_GET['product_id']) && $_GET['product_id'] == 3) { // Remove keyboard (product id 3)
    unset($_SESSION['cart'][2]);
    $session['cart_total'] -= $products[3]['price'];
  }

}



// --- Display Cart Contents ---

echo '<div style="border: 1px solid #ccc; padding: 10px; margin: 10px;">';
echo '<h2>Shopping Cart</h2>';

if (empty($_SESSION['cart'])) {
  echo '<p>Your cart is empty.</p>';
} else {
  echo '<ul>';
  foreach ($_SESSION['cart'] as $item) {
    echo '<li>' . $item['name'] . ' - $' . $item['price'] . ' x ' . $item['quantity'] . ' = $' . $item['price'] * $item['quantity'] . '</li>';
  }
  echo '</ul>';
  echo '<p><strong>Total:</strong> $' . number_format($session['cart_total'], 2) . '</p>';
}

echo '</div>';


?>


<?php

session_start(); // Start the session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example Usage (to demonstrate adding items)

// Add a product to the cart
addToCart(1, "Awesome T-Shirt", 20.00, 2);

// Add another product
addToCart(2, "Cool Mug", 10.00, 1);

//  Check the cart contents (for demonstration purposes)
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

//  Example:  Removing an item (demonstration only - you'd typically handle this via a UI)
//  This is a very basic demonstration.  In a real application, you'd want
//  to handle the UI and potentially error checking more robustly.
if (isset($_GET['remove']) && is_numeric($_GET['remove'])) {
    $remove_id = (int)$_GET['remove'];
    if (isset($_SESSION['cart'][$remove_id])) {
        unset($_SESSION['cart'][$remove_id]);
    }
}


// You would typically render your product listing or shopping cart HTML here
//  and have links that would trigger the addToCart function.


?>


<?php

// Start a session to store cart data
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if it exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example usage:  These are just examples - you would typically get this data from
// a form submission or other user input.

// Add some items to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);
addToCart(1, 'T-Shirt', 20, 3); // Add more of the existing item


// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>" . $product_data['name'] . "</strong> - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item
//removeFromCart(2);

// Example: Update Quantity
// updateQuantity(1, 5); // Change the quantity of T-Shirt to 5
//echo "<h2>Your Cart (After Update)</h2>";
//displayCart();

?>


<?php
session_start();

// Simulate a shopping cart
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $cart = [
      $product_id => [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
      ]
    ];
  } else {
    // Check if the product already exists in the cart
    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] += $quantity;
    } else {
      $cart[$product_id] = [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
      ];
    }
  }
  //  Save the cart to session
  $_SESSION['cart'] = $cart;
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  unset($cart[$product_id]);
  $_SESSION['cart'] = $cart;
}

// Function to update the quantity of an item in the cart
function updateCartItem($product_id, $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
    $_SESSION['cart'] = $cart;
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to get the total price of items in the cart
function calculateTotalPrice() {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage (Simulating User Actions) ---

// Add some items to the cart
addToCart('product1', 'Laptop', 1200, 1);
addToCart('product2', 'Mouse', 25, 2);
addToCart('product1', 'Laptop', 1200, 1); //Adding more of the same item

// Display the cart contents
echo "<h2>Your Shopping Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Price: $" . calculateTotalPrice() . "</p>";

//Remove an item
removeCartItem('product2');

//Display updated cart
echo "<p>Your Shopping Cart (After Removal):</p>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Update quantity
updateCartItem('product1', 3);
echo "<p>Your Shopping Cart (After Quantity Update):</p>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php

// Start a session if it doesn't exist
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Function to Add to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists - increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart - add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// --- Example Usage (Simulated Cart Manipulation) ---

// Add some products to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);
addToCart(1, 'T-Shirt', 20, 3); // Add more of the T-Shirt
addToCart(3, 'Hat', 15, 1);


// --- Display the Cart Contents ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];

    echo "<li>" . $product_name . " - $" . $price . " x " . $quantity . " = $" . ($price * $quantity) . "</li>";
  }
  echo "</ul>";

  // Calculate total cost
  $total_cost = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total_cost += $product_details['price'] * $product_details['quantity'];
  }
  echo "<p><strong>Total Cost: $" . number_format($total_cost, 2) . "</strong></p>";
}


// ---  Example:  Remove a Product from Cart (Optional) ---
// This is just an example, you'd likely implement this with a form.
/*
if (isset($_GET['remove'])) {
  $product_id = $_GET['remove'];

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}
*/

?>


<?php
session_start();

// Assuming you have a shopping cart array stored in the session
// This is a simplified example; you'd likely have a more complex structure

$_SESSION['cart'] = array(); // Initialize the cart

// Example functions to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// Example function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// ---  Simulated user interaction (Replace with actual form handling) ---
// Example: User adds a product to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;

  addToCart($product_id, $product_name, $price, $quantity);
}

// Example: User removes an item from the cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// Example: User updates the quantity of an item in the cart
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($product_id, $new_quantity);
}


// --- Display the cart contents ---
echo "<div style='border: 1px solid #ccc; padding: 10px; margin: 10px;'>";
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

echo "</div>";

// Example form for adding an item to the cart (simple)
echo "<br>";
echo "<form method='post' action=''>";
echo "<label for='product_id'>Product ID:</label><input type='text' id='product_id' name='product_id' value='1'><br>"; // Example product ID
echo "<label for='product_name'>Product Name:</label><input type='text' id='product_name' name='product_name' value='Example Product'><br>";
echo "<label for='price'>Price:</label><input type='number' id='price' name='price' value='19.99'><br>";
echo "<label for='quantity'>Quantity:</label><input type='number' id='quantity' name='quantity' value='1'><br>";
echo "<input type='submit' name='add_to_cart' value='Add to Cart'>";
echo "</form>";


?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add a new entry
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example Usage (You would typically get this from a form submission)
// For demonstration, let's add some products to the cart
addToCart(1, "T-Shirt", 20, 2);
addToCart(2, "Jeans", 50, 1);
addToCart(1, "T-Shirt", 20, 3); // Add more of the same product

// Display the cart contents
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>" . $product_data['name'] . "</strong> - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeFromCart(2);

// Example of updating the quantity
// updateQuantity(1, 5);

?>


<?php
session_start(); // Start the session

// Define some basic product information (for example)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200, 'quantity' => 1],
    2 => ['name' => 'Mouse', 'price' => 25, 'quantity' => 2],
    3 => ['name' => 'Keyboard', 'price' => 75, 'quantity' => 1],
];

// Function to add a product to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'][$productId])) {
        // Product already in cart, increase quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Product not in cart, add it
        $_SESSION['cart'][$productId] = [
            'name' => $products[$productId]['name'],
            'price' => $products[$productId]['price'],
            'quantity' => $quantity,
        ];
    }
}

// Function to update the quantity of a product in the cart
function updateCartQuantity($productId, $quantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}

// Function to remove a product from the cart
function removeCartItem($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}


// --- Example Usage (Simulating User Interactions) ---

// User adds a Laptop to the cart
addToCart(1);

// User adds 2 Mouses to the cart
addToCart(2, 2);

// User updates the quantity of the Laptop to 3
updateCartQuantity(1, 3);

// User removes the Mouse from the cart
removeCartItem(2);

// --- Displaying the Cart Contents ---

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $totalPrice = 0;
    foreach ($_SESSION['cart'] as $productId => $item) {
        $totalPrice += ($item['price'] * $item['quantity']);
    }
    echo "<p><b>Total: $" . number_format($totalPrice, 2) . "</p>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize empty cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// *** Example Usage (Simulated Input - Replace with Actual Product Data) ***

// Add an item to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); // Increase quantity of item 1

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty(getCartContents())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCartContents() as $product_id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $product['quantity'] . " = $" . ($product['price'] * $product['quantity']) . "</li>";
    }
    echo "</ul>";
}



// Example of updating quantity
updateQuantity(2, 5); // Increase quantity of Mouse to 5
echo "<br>";
echo "<h2>Your Shopping Cart (After Update)</h2>";
if (empty(getCartContents())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCartContents() as $product_id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $product['quantity'] . " = $" . ($product['price'] * $product['quantity']) . "</li>";
    }
    echo "</ul>";
}


// Example of removing an item
removeItem(2);
echo "<br>";
echo "<h2>Your Shopping Cart (After Removal)</h2>";
if (empty(getCartContents())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCartContents() as $product_id => $product) {
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $product['quantity'] . " = $" . ($product['price'] * $product['quantity']) . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Assuming you have a function or mechanism to handle adding items to the cart
function addItemToCart($itemId, $itemName, $price, $quantity) {
  // In a real application, you'd likely interact with a database here.
  // This is just a simplified example.

  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][] = array(
    'id' => $itemId,
    'name' => $itemName,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Example:  Simulating a user adding an item to the cart.
// Replace these with your actual item and quantity information.
addItemToCart(1, 'Awesome T-Shirt', 25.00, 1);
addItemToCart(2, 'Cool Hat', 15.00, 2);


// Display the cart contents
echo "<h2>Your Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total cart value.
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example Usage (Simulating user actions)

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1); // Product ID 1, Name "Laptop", Price 1200, Quantity 1
addToCart(2, "Mouse", 25, 2);   // Product ID 2, Name "Mouse", Price 25, Quantity 2

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Remove an item
removeCartItem(2);

// Update quantity
updateCartItem(1, 3);

// Display the updated cart
echo "<hr>";
echo "<h2>Updated Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// Example usage (simulated product data)
$products = array(
  1 => array('name' => 'Shirt', 'price' => 20),
  2 => array('name' => 'Pants', 'price' => 30),
  3 => array('name' => 'Shoes', 'price' => 50)
);


// Handle add to cart requests (simulated form submission)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  add_to_cart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
}

// Handle remove from cart requests
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  remove_from_cart($product_id);
}

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Total cart price calculation
$total_price = 0;
if (!empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $total_price += $product_details['price'] * $product_details['quantity'];
    }
}

echo "<p><strong>Total: $" . $total_price . "</strong></p>";
?>


<?php
session_start();

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity of the product to add.
 * @param float $price The price of the product.
 *
 * @return void
 */
function addToCart(string $product_id, string $product_name, int $quantity, float $price): void
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the item to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price
        ];
    }
}


/**
 * Retrieves the contents of the cart.
 *
 * @return array  The cart contents as an array.
 */
function getCartContents(): array
{
    return $_SESSION['cart'] ?? []; // Return empty array if cart is not set.
}

/**
 * Calculates the total price of the cart.
 *
 * @return float  The total price.
 */
function calculateTotalPrice(): float
{
    $total = 0.0;
    $cart = getCartContents();

    foreach ($cart as $item) {
        $totalItemPrice = $item['quantity'] * $item['price'];
        $total += $totalItemPrice;
    }

    return $total;
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 *
 * @return void
 */
function removeCartItem(string $product_id): void
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartItem(string $product_id, int $quantity): void
{
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// --- Example Usage / Demonstration ---

// 1. Add an item to the cart
addToCart('product1', 'T-Shirt', 2, 20.00); // Adds two T-shirts
addToCart('product2', 'Jeans', 1, 50.00);  // Adds one pair of jeans

// 2. Display the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $product_info) {
        echo "<li>" . $product_info['name'] . " - Quantity: " . $product_info['quantity'] . " - Price: $" . $product_info['price'] . "</li>";
    }
    echo "</ul>";
}


// 3. Calculate and display the total price
$totalPrice = calculateTotalPrice();
echo "<p><strong>Total Price: $" . $totalPrice . "</strong></p>";

// 4. Update the quantity of an item
updateCartItem('product1', 3); // Increase the quantity of T-Shirts to 3

// 5. Display the cart contents after update
$cart = getCartContents();
echo "<p>After updating the quantity, the cart contents are:</p>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $product_info) {
        echo "<li>" . $product_info['name'] . " - Quantity: " . $product_info['quantity'] . " - Price: $" . $product_info['price'] . "</li>";
    }
    echo "</ul>";
}

// 6. Remove an item from the cart
removeCartItem('product2');

// 7. Display the cart contents after removing item
$cart = getCartContents();
echo "<p>After removing item, the cart contents are:</p>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $product_info) {
        echo "<li>" . $product_info['name'] . " - Quantity: " . $product_info['quantity'] . " - Price: $" . $product_info['price'] . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// Session variables to store cart items
$cart = [];

// --- Functions to handle cart operations ---

/**
 * Add an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart(int $productId, int $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array if it doesn't exist
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If the product exists, increase the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If the product doesn't exist, add it to the cart with quantity 1
    $_SESSION['cart'][$productId] = ['quantity' => $quantity];
  }
}


/**
 * Update the quantity of an item in the cart.
 *
 * @param int $productId The ID of the product to update.
 * @param int $newQuantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity(int $productId, int $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}


/**
 * Remove an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}


/**
 * Get the contents of the cart.
 *
 * @return array The cart array.
 */
function get_cart() {
  return $_SESSION['cart'];
}



// --- Example Usage (Demonstration) ---

// 1. Add an item to the cart
add_to_cart(123, 2); // Add product ID 123 with quantity 2

// 2. Add another item to the cart
add_to_cart(456, 1);

// 3. Update the quantity of product 123 to 5
update_cart_quantity(123, 5);


// 4. Remove product 456 from the cart
remove_from_cart(456);



// 5. Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = get_cart();

if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $productId => $item) {
        echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
    }
}
echo "</ul>";


// ---  Important Notes: ---

// 1.  Session Start: `session_start()` must be called at the beginning of every PHP script that uses sessions.  It initializes the session.

// 2. Persistence:  Session data (like the cart) is stored on the server.  When a user closes their browser, the session data is typically lost unless you use a persistent storage mechanism like a database or a cookie.

// 3.  Security:  Sessions should be used carefully for sensitive data.  Protect your session IDs using HTTPS and consider using encryption for data stored in sessions.

// 4. Data Validation:  Always validate user input (product IDs, quantities, etc.) to prevent errors and security vulnerabilities.

// 5.  Cart Structure: This example uses an associative array to represent the cart. The keys of the array are the product IDs, and the values are associative arrays containing the 'quantity' of each product.  You can adapt the cart structure to fit your specific needs.

// 6. Error Handling: In a real application, you would add more robust error handling and logging.

// 7.  Integration with your website: This is just a basic example.  You'll need to integrate this code into your website's logic, likely with form submissions to add items to the cart.
?>


<?php
session_start();

// 1.  Handle Adding Items to the Cart
function addItemToCart($productId, $quantity = 1, $productName = null) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$productId] = array(
      'quantity' => $quantity,
      'name' => $productName ?? $productId, // Use productName if available, otherwise use product ID
    );
  }
}

// Example: Adding a product to the cart
addItemToCart(123, 2); // Add product with ID 123, quantity 2
addItemToCart(456, 1, 'Awesome T-Shirt'); // Add product with ID 456, quantity 1, product name 'Awesome T-Shirt'


// 2. Handle Removing Items from the Cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Example: Remove an item from the cart
removeItemFromCart(123);

// 3. Handle Updating Quantity of an Item in the Cart
function updateQuantity($productId, $newQuantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
  }
}

// Example: Update the quantity of product with ID 456 to 3
updateQuantity(456, 3);



// 4.  Display the Cart Contents (for demonstration)
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $id => $item) {
    echo "<li>";
    echo "Product ID: " . $id . "<br>";
    echo "Product Name: " . $item['name'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Subtotal: $" . $item['quantity'] * 10  . "<br>"; // Assuming price is $10 per item
    echo "</li>";
  }
  echo "</ul>";
}

// 5. Session Management - Important Considerations:
//    - Session starts:  session_start() must be called at the beginning of each script
//    - Session Destroy:  You should destroy the session when the user logs out or leaves the site.
//      Example: session_destroy();
?>


<?php
session_start();

// 1. Define Cart Data
$cart = []; // Initialize an empty cart array

// 2. Add Items to the Cart
// Example: Add a product with ID 1 and quantity 2
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate quantity (optional but recommended)
    if (is_numeric($quantity) && $quantity > 0) {
        $quantity = (int)$quantity; // Convert to integer
    } else {
        $quantity = 1; // Default to 1 if invalid input
    }


    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] += $quantity;
    } else {
        $cart[$product_id] = ['quantity' => $quantity, 'name' => 'Product ' . $product_id]; // Added product name for context
    }
}


// 3. Display the Cart (for demonstration)
echo "<!DOCTYPE html>";
echo "<html lang='en'>";
echo "<head>";
echo "<meta charset='UTF-8'>";
echo "<title>Shopping Cart</title>";
echo "</head>";
echo "<body>";

echo "<h1>Shopping Cart</h1>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_info) {
        echo "<li>";
        echo "Product ID: " . $product_id . "<br>";
        echo "Product Name: " . $product_info['name'] . "<br>";
        echo "Quantity: " . $product_info['quantity'] . "<br>";
        //  Optional:  Add a link to remove the item from the cart
        echo "<a href='cart.php?remove=" . $product_id . "'>Remove</a>";
        echo "</li>";
    }
    echo "</ul>";
}

echo "<br>";
echo "<a href='checkout.php'>Checkout</a>"; // Add a link to the checkout page

echo "</body>";
echo "</html>";


// 4.  Checkout Page (example) -  Simplified
if (isset($_GET['checkout'])) {
    echo "<h2>Checkout</h2>";
    echo "<p>Thank you for your order! (This is a placeholder)</p>";
    // In a real application, you'd process the order data here
    // and interact with a database or payment gateway.
}

?>


<?php

// Start the session if it's not already running
session_start();

// --- Cart Functions ---

// Add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // Optional:  You might want to update the quantity if the item already exists
  // In this simplified example, we just add a new entry.
}

// Remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Calculate the total cart value
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $item) {
            $total = $total + ($item['price'] * $item['quantity']);
        }
    }
    return $total;
}

// --- Example Usage (Illustrative - Replace with your actual logic) ---

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 2); // Add another laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";
}


// Example of removing an item
//removeFromCart(2);

// Update quantity
//updateQuantity(1, 3);


?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name = 'Default Product') {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name // Add product name for display
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    $product_name = isset($item_data['name']) ? $item_data['name'] : "Product " . $item_id; // Use name if set, else "Product" + ID
    echo "<li>" . $product_name . " - Quantity: " . $item_data['quantity'] . " - Price: $10 (Example)</li>"; // Replace $10 with actual price
  }
  echo "</ul>";
}


// --- Example Usage (Simulating adding to cart on a button click) ---

// If a product was added to the cart (e.g., by clicking a button)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  addToCart($product_id, $quantity);
}

// If a product was removed from the cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
}

// If the quantity of an item was updated
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($product_id, $new_quantity);
}

// --- Display the cart ---
displayCart();

// Example HTML for a product to add to the cart (replace with your actual product details)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Products</h1>
  <form method="post">
    <label for="product_1">Product 1 - Quantity: <input type="number" name="quantity" value="1"></label><br>
    <input type="hidden" name="product_id" value="1">
    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

  <form method="post">
    <label for="product_2">Product 2 - Quantity: <input type="number" name="quantity" value="1"></label><br>
    <input type="hidden" name="product_id" value="2">
    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

  <h2>Cart Total:</h2>
  <p>Calculated total will be displayed here (implementation required)</p>

</body>
</html>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Cart Functions ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Otherwise, add a new item to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // If the product isn't in the cart, you could handle it by adding it with the given quantity
    // Alternatively, you might want to log an error or handle it differently.
    error_log("Product ID $product_id not found in cart and quantity not updated.");
  }
}


// Remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Get the contents of the cart
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Calculate the total cart value
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage (Demonstration) ---

// Add some items to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(1, 'Laptop', 1200, 1); // Add another laptop
// Update quantity of mouse
update_cart_quantity(2, 5);

// Get the cart contents
$cart_items = get_cart_contents();
print_r($cart_items);

// Calculate the total
$total = calculate_total();
echo "Total Cart Value: $" . $total . "<br>";


// Remove an item from the cart
remove_from_cart(2);
echo "Cart after removing mouse: ";
print_r($cart_items);
?>


<?php
session_start(); // Start the session

// ---------------------- Cart Logic ----------------------

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart total
function calculateCartTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// ---------------------- Example Usage (Simulating User Interaction) ----------------------

// Example: Adding an item to the cart
// addToCart(1, "T-Shirt", 20.00, 2); // Product ID 1, T-Shirt, Price $20, Quantity 2

// Example: Removing an item from the cart
// removeFromCart(1);

// Example: Updating the quantity of an item
// updateQuantity(1, 3); // Change the quantity of product 1 to 3

// ---------------------- Displaying the Cart ----------------------

// Displaying the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    // Add an option to remove this item (example - needs HTML for a button)
    echo "<form action='cart.php' method='post'>
              <input type='hidden' name='product_id' value='" . $product_id . "'>
              <button type='submit'>Remove</button>
            </form>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value:</strong> $" . number_format(calculateCartTotal(), 2) . "</p>";
}
?>


<?php

// 1. Initialize the Session (if not already done)
session_start();

// 2. Product Data (Replace with your actual product information)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];

// 3. Handle Adding to Cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];

    if (isset($products[$product_id])) {
        $product = $products[$product_id];

        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = []; // Initialize the cart array
        }

        // Check if the product is already in the cart
        $product_exists = false;
        foreach ($_SESSION['cart'] as $key => $item) {
            if ($item['id'] == $product_id) {
                // Product already in cart, increment quantity
                $_SESSION['cart'][$key]['quantity']++;
                $product_exists = true;
                break;
            }
        }

        if (!$product_exists) {
            // Product not in cart, add it with quantity 1
            $_SESSION['cart'][] = $product;
        }
    }
}

// 4. Handle Removing from Cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];

    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
        // Optionally, remove any lingering keys from the array if needed
        while (keyexists($_SESSION['cart'], key($session['cart']))) {
           unset($_SESSION['cart'][key($session['cart'])]);
        }
    }
}


// 5. Display Cart Contents
if (isset($_SESSION['cart'])) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . "</li>";
        $total += $item['price'];
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
} else {
    echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addItemToCart($product_id, $product_name, $price, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array if it doesn't exist
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Example Usage:  This is just for demonstration.  You'd typically get this data from a form submission.

// Add some items to the cart
addItemToCart('product1', 'Laptop', 1200, 1);
addItemToCart('product2', 'Mouse', 25, 2);
addItemToCart('product1', 'Laptop', 1200, 1); // Adding another one of the same product


// Display the cart contents
echo "<h2>Cart Items</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example of removing an item
// removeItemFromCart('product2');

// Example of updating the quantity
// updateQuantity('product1', 3);

// Display updated cart
// echo "<h2>Updated Cart Items</h2>";
// if (empty($_SESSION['cart'])) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($_SESSION['cart'] as $product_id => $product_details) {
//     echo "<li>";
//     echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
//   }
//   echo "</ul>";
// }

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// Example Usage - Simulate adding a product to the cart

// Simulate a product ID
$product_id = 123;
$product_name = "Awesome T-Shirt";
$price = 25.00;

// Add the item to the cart
addToCart($product_id, $product_name, $price);

// Update the quantity of the item
updateQuantity($product_id, 2); // Now we have 2 of the T-Shirt

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";


// Remove an item from the cart
// removeItem($product_id); // Uncomment this line to remove the T-Shirt from the cart
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example usage:

// Add an item to the cart
addToCart(1, "Awesome T-Shirt", 20, 2);
addToCart(2, "Cool Hat", 15, 1);

// Update the quantity of an item
updateQuantity(1, 3);

// Get the cart contents
$cart = getCartContents();
echo "<pre>";
print_r($cart);
echo "</pre>";


// Example:  Simulating a request to display the cart contents on a webpage
?>
<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  $cart = getCartContents();
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
  }
  ?>

</body>
</html>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price' => getProductPrice($product_id) //Get product price.  Improve this if necessary.
    ];
  }
}


/**
 * Retrieves the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product.
 * @return int The quantity, or 0 if not found.
 */
function getCartQuantity($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        return $_SESSION['cart'][$product_id]['quantity'];
    }
    return 0;
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}



/**
 * Gets the price of a product (Placeholder - Implement your product data retrieval)
 *
 * @param int $product_id The ID of the product.
 * @return float The product price.
 */
function getProductPrice($product_id) {
    // **IMPORTANT:** Replace this with your actual product data retrieval logic.
    // This is just a placeholder.
    // For example, you might fetch this from a database or a product array.

    // Example using a static product array (replace with your actual data)
    $products = [
        1 => ['name' => 'Laptop', 'price' => 1200.00],
        2 => ['name' => 'Mouse', 'price' => 25.00],
        3 => ['name' => 'Keyboard', 'price' => 75.00],
    ];

    if (isset($products[$product_id])) {
        return $products[$product_id]['price'];
    } else {
        return 0.00; // Or handle the error appropriately
    }
}



// --- Example Usage ---

// Add a product to the cart
addToCart(1); // Add 1 Laptop
addToCart(2, 2); // Add 2 Mice
addToCart(1, 3); // Add 3 laptops (updates the quantity of the existing product)

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
echo "<ul>";

foreach ($_SESSION['cart'] as $product_id => $item) {
    $quantity = getCartQuantity($product_id);
    $product_name = "Product " . $product_id; // Replace with actual product name
    $price = getProductPrice($product_id);
    $total_price = $price * $quantity;

    echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Price: $" . $price . " - Total: $" . $total_price . "</li>";
}

echo "</ul>";


// Remove a product from the cart
removeFromCart(2);

// Display the cart contents after removing a product
echo "<br>";
echo "<h2>Shopping Cart (After Removal)</h2>";
echo "<ul>";

foreach ($_SESSION['cart'] as $product_id => $item) {
    $quantity = getCartQuantity($product_id);
    $product_name = "Product " . $product_id; // Replace with actual product name
    $price = getProductPrice($product_id);
    $total_price = $price * $quantity;

    echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Price: $" . $price . " - Total: $" . $total_price . "</li>";
}

echo "</ul>";


// Clear the cart
//clearCart();

// Display the cart contents after clearing the cart
//echo "<br>";
//echo "<h2>Shopping Cart (After Clearing)</h2>";
//echo "<ul>";
//foreach ($_SESSION['cart'] as $product_id => $item) {
//    $quantity = getCartQuantity($product_id);
//    $product_name = "Product " . $product_id; // Replace with actual product name
//    $price = getProductPrice($product_id);
//    $total_price = $price * $quantity;
//
//    echo "<li>" . $product_name . " - Quantity: " . $quantity . " - Price: $" . $price . " - Total: $" . $total_price . "</li>";
//}
//echo "</ul>";
?>


<?php

// Start session
session_start();

// Cart data (in a real application, this would be stored in a database)
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = [
      'product_id' => $product_id,
      'product_name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}

// Function to display the cart
function displayCart() {
  echo "<h2>Your Cart</h2>";

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($cart as $product_id => $product) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product['product_name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product['quantity'] . "<br>";
    echo "<form method='post'>";
    echo "<label for='quantity'>" . $product_id . " Quantity:</label>";
    echo "<input type='number' id='quantity' name='quantity" . $product_id . "' value='" . $product['quantity'] . "' min='1'>";
    echo "<input type='submit' value='Update'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate total
  $total = 0;
  foreach ($cart as $product_id => $product) {
      $total += $product['price'] * $product['quantity'];
  }

  echo "<p><strong>Total:</strong> $" . $total . "</p>";
}


// --- Example Usage ---

// Add some items to the cart
addToCart(1, "T-Shirt", 20, 2);
addToCart(2, "Jeans", 50, 1);
addToCart(1, "T-Shirt", 20, 3); // Add more of the same item

// Display the cart
displayCart();

// Update the quantity of a product
if (isset($_POST['quantity1'])) {
    updateQuantity(1, $_POST['quantity1']); // Update T-Shirt quantity
}
// Display the cart again after update
displayCart();


// --- Cleanup (Optional - for demonstration only) ---
// To clear the cart for the next session:
// session_destroy();
// session_start();
?>


<?php
session_start();

// This is a basic example, and you'll likely want to expand it
// with more robust error handling, validation, and database integration.

// Example Product Data (Replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        $_SESSION['cart'] = [
            $product_id => $quantity,
        ];
    }
}

// Function to get the cart items
function getCartItems()
{
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return []; // Return an empty array if the cart is empty
    }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity)
{
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // Product doesn't exist in the cart.  You might want to handle this differently
        // (e.g., add it to the cart with the given quantity)
        echo "Product ID " . $product_id . " not found in cart.";
    }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// --- Example Usage (Demonstration) ---

// 1. Add a T-Shirt to the cart
addToCart(1);

// 2. Add 2 Jeans to the cart
addToCart(2, 2);

// 3. Update the quantity of the T-Shirt to 3
updateCartItemQuantity(1, 3);

// 4. Get the cart items
$cart_items = getCartItems();

// Display the cart items
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $id => $quantity) {
        $product = $products[$id];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";
}

// Example: Remove the T-Shirt
// removeItemFromCart(1);

?>


<?php

// Start session if it's not already started
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Operations ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param string $product_name The name of the product (for display).
 * @param float $price The price of the product.
 * @param int $quantity The quantity to add (default: 1).
 */
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    // Product not in cart, add it with initial quantity of 1
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    // Product already in cart, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}


/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity.
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array  An array representing the cart contents.
 */
function get_cart_items() {
  return $_SESSION['cart'];
}


/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculate_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage (Simulated product information - in a real application, you'd get this from a database) ---

$products = array(
    1 => array('name' => 'Laptop', 'price' => 1200.00),
    2 => array('name' => 'Mouse', 'price' => 25.00),
    3 => array('name' => 'Keyboard', 'price' => 75.00)
);

// --- Handling User Interactions (Simulated - in a real application, you'd handle form submissions, AJAX, etc.) ---

// Example: Add a product to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id'];
  $product_name = $products[$product_id]['name'];
  $price = $products[$product_id]['price'];
  $quantity = (int)$_POST['quantity'];

  add_to_cart($product_id, $product_name, $price, $quantity);
  echo "Product '$product_name' added to cart.  Cart total: " . calculate_cart_total() . "<br>";
}

// Example: Update quantity of a product
if (isset($_POST['update_quantity'])) {
  $product_id = (int)$_POST['product_id'];
  $new_quantity = (int)$_POST['quantity'];
  update_cart_quantity($product_id, $new_quantity);
  echo "Quantity of product '$product_name' updated to $new_quantity.  Cart total: " . calculate_cart_total() . "<br>";
}


// Example: Remove a product from the cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    remove_from_cart($product_id);
    echo "Product '$product_name' removed from cart. Cart total: " . calculate_cart_total() . "<br>";
}



// --- Displaying the Cart (Simulated) ---
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_name = $item['name'];
    $price = $item['price'];
    $quantity = $item['quantity'];
    echo "<li>Product: " . $product_name . ", Price: $" . $price . ", Quantity: " . $quantity . " - Total: $" . $price * $quantity . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value:</strong> $" . calculate_cart_total() . "</p>";
}


?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        // Cart is empty, create an empty array
        $_SESSION['cart'] = [];
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$item_id])) {
        // Increment the quantity
        $_SESSION['cart'][$item_id]['quantity'] += $quantity;
    } else {
        // Add the new item to the cart
        $_SESSION['cart'][$item_id] = [
            'name' => $item_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($item_id, $quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}


// Example Usage (Demonstration - You'd typically get this data from a form or database)
//  Let's assume these products exist:
//  - Item ID: 1, Name: "T-Shirt", Price: 20
//  - Item ID: 2, Name: "Jeans", Price: 50
//  - Item ID: 3, Name: "Hat", Price: 15

// Add a T-Shirt to the cart
add_to_cart(1, "T-Shirt", 20, 2);

// Add some Jeans to the cart
add_to_cart(2, "Jeans", 50);

//Update quantity of a T-Shirt
update_cart_quantity(1, 5); // Change quantity of item with ID 1 to 5

// Remove the Hat from the cart
remove_from_cart(3);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
    }
    echo "</ul>";
}

?>


<?php

session_start(); // Start the session

// --- Functions for Cart Management ---

/**
 * Add item to cart
 *
 * @param int $productId  The ID of the product to add
 * @param int $quantity   The quantity of the product to add
 * @return void
 */
function add_to_cart(int $productId, int $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with default quantity of 1
    $_SESSION['cart'][$productId] = ['quantity' => $quantity];
  }
}

/**
 * Update quantity of item in cart
 *
 * @param int $productId  The ID of the product to update
 * @param int $quantity   The new quantity of the product
 * @return void
 */
function update_cart_quantity(int $productId, int $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}


/**
 * Remove item from cart
 *
 * @param int $productId The ID of the product to remove
 * @return void
 */
function remove_from_cart(int $productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

/**
 * Get cart contents
 *
 * @return array  An array representing the cart contents
 */
function get_cart_contents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart is not set
}


// --- Example Usage (Illustrative) ---

// Example:  Adding an item to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = intval($_POST['product_id']);
    $quantity = intval($_POST['quantity']) ?? 1; // Default quantity is 1
    add_to_cart($productId, $quantity);
}

// Example: Updating the quantity of an item
if (isset($_POST['update_cart'])) {
    $productId = intval($_POST['product_id']);
    $newQuantity = intval($_POST['quantity']) ?? 1;
    update_cart_quantity($productId, $newQuantity);
}

// Example: Removing an item from the cart
if (isset($_GET['remove_from_cart'])) {
    $productId = intval($_GET['product_id']);
    remove_from_cart($productId);
}



// Display the Cart Contents (for demonstration)
$cart_items = get_cart_contents();

echo "<h2>Your Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Session handling - initialize if not already
session_start();

// Cart data - initially empty
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// --- Example Usage (Simulating User Interaction) ---

// 1.  Add an item to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity']; // optional, default to 1

  addToCart($product_id, $product_name, $price, $quantity);
  echo "<p>Item added to cart.</p>";
}


// 2.  Update the quantity of an item
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];

  updateQuantity($product_id, $new_quantity);
  echo "<p>Quantity updated.</p>";
}

// 3.  Remove an item from the cart
if (isset($_POST['remove_item'])) {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
  echo "<p>Item removed from cart.</p>";
}


// 4.  Display the cart contents (for demonstration)
$cart_contents = getCartContents();

if (!empty($cart_contents)) {
  echo "<h2>Your Cart</h2>";
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session.  If not, initialize it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart array
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use & to modify the original array
      if ($item['product_id'] == $product_id) {
        $item['quantity'] = $new_quantity;
        break;
      }
    }
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    $new_cart = array();
    foreach ($_SESSION['cart'] as $item) {
      if ($item['product_id'] != $product_id) {
        $new_cart[] = $item;
      }
    }
    $_SESSION['cart'] = $new_cart;
  }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
      echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
  }
}

// Example Usage - this would typically be triggered by a button click or form submission
// For demonstration purposes, let's add a few items:
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(3, "Keyboard", 75, 1);

// Example of updating the quantity
updateQuantity(2, 3);  // Change the quantity of the mouse to 3

// Example of removing an item
// removeFromCart(3);  // Remove the keyboard

// Display the cart
displayCart();

// To actually render this on a webpage, you would need to wrap this code
// within an HTML structure.  For example:

// <html>
// <head>
//   <title>Shopping Cart</title>
// </head>
// <body>
//   <h1>Shopping Cart</h1>
//   <?php displayCart(); ?>
// </body>
// </html>
?>


<?php
session_start();

// Check if the cart is already initialized
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  global $cart;

  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = array('quantity' => $quantity);
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  unset($cart[$product_id]);
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}

// --- Example Usage (Simulating a user interaction) ---

// 1. Adding an item to the cart
addToCart(1, 2); // Add 2 of product ID 1
addToCart(2, 1); // Add 1 of product ID 2
addToCart(1, 3); // Add 3 more of product ID 1

// 2. Displaying the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// 3. Removing an item from the cart
// removeFromCart(2);

// 4.  Updating a quantity
// updateQuantity(1, 5);

// Display the cart contents after updating.
// echo "<h2>Your Cart (Updated)</h2>";
// if (empty($cart)) {
//    echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($cart as $product_id => $item) {
//     echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
//   }
//   echo "</ul>";
// }


// Example HTML for adding items to the cart (simulating a form)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post" action="">
        <label for="product_id">Product ID:</label>
        <select name="product_id" id="product_id">
            <?php
            // Assuming you have a database or array to get product IDs.
            // This is just a placeholder.  Replace with your actual product data.
            $products = array(
                1 => 'Product A',
                2 => 'Product B',
                3 => 'Product C'
            );
            foreach ($products as $id => $name) {
                echo "<option value='" . $id . "'>" . $name . "</option>";
            }
            ?>
        </select>
        <label for="quantity">Quantity:</label>
        <input type="number" name="quantity" id="quantity" value="1" min="1">
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>

</body>
</html>


<?php

session_start();

// -------------------- Cart Functions --------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity for the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array An array containing all items in the cart.
 */
function getCart() {
  return $_SESSION['cart'] ?? [];
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}

// -------------------- Example Usage (Simulated Product Data) --------------------

//  Simulate a product catalog (replace with your database connection)
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Hat', 'price' => 15],
];


// -------------------- Example Usage (Shopping Cart Interactions) --------------------

// Add a T-Shirt to the cart
addToCart(1);

// Add 2 pairs of Jeans to the cart
addToCart(2, 2);

// Update the quantity of the T-Shirt to 3
updateCartQuantity(1, 3);

// Get the current cart contents
$cart = getCart();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";


// Remove the Hat from the cart
removeFromCart(3);

// Get the updated cart contents
$cart = getCart();
echo "<h2>Cart Contents After Removal:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// Clear the cart
clearCart();

// Get the empty cart
$cart = getCart();
echo "<h2>Cart Contents After Clearing:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name,
      'price' => $price
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage (Simulating user interaction)

// Add a product to the cart
addToCart(1, 2, "Awesome T-Shirt", 20.00);
addToCart(2, 1, "Cool Hat", 15.00);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $id => $item) {
    $total += $item['quantity'] * $item['price'];
  }
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";

  // Remove an item from the cart (example)
  removeFromCart(2);
} else {
  echo "<p>Your cart is empty.</p>";
}

// Update quantity (example)
updateQuantity(1, 3);

// Display updated cart
echo "<h2>Your Cart (Updated)</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Product Information (Example Data - Replace with your actual database/API calls) ---
$products = array(
  array(
    'id' => 1,
    'name' => 'Laptop',
    'price' => 1200
  ),
  array(
    'id' => 2,
    'name' => 'Mouse',
    'price' => 25
  ),
  array(
    'id' => 3,
    'name' => 'Keyboard',
    'price' => 75
  )
);

// --- Function to add an item to the cart ---
function addToCart($product_id, $quantity = 1) {
  global $products;

  // Find the product
  $product = null;
  foreach ($products as $p) {
    if ($p['id'] == $product_id) {
      $product = $p;
      break;
    }
  }

  if ($product) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      // Add the product to the cart
      $_SESSION['cart'][$product_id] = array(
        'quantity' => $quantity,
        'name' => $product['name'],
        'price' => $product['price']
      );
    }
  }
}

// --- Handling Add to Cart Requests (Example - via form submission) ---

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = intval($_POST['product_id']); // Convert to integer
    $quantity = intval($_POST['quantity']);    // Convert to integer
    addToCart($product_id, $quantity);
  }
}

// --- Displaying the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " - Total: $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate total price
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

?>

<!-- Example HTML Form to Add to Cart -->
<form method="post" action="">
  <label for="product_id">Product ID:</label>
  <select name="product_id" id="product_id">
    <option value="1">Laptop</option>
    <option value="2">Mouse</option>
    <option value="3">Keyboard</option>
  </select><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" value="1" min="1">

  <input type="submit" value="Add to Cart">
</form>


<?php

session_start(); // Start the PHP session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Example Functions to Add/Remove Items ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int    $quantity   The quantity of the product to add.
 * @param float  $price      The price of the product.
 *
 * @return void
 */
function add_to_cart(string $product_id, string $product_name, int $quantity, float $price) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price
        );
    }
}


/**
 * Removes a product from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 *
 * @return void
 */
function remove_from_cart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $newQuantity The new quantity.
 *
 * @return void
 */
function update_cart_quantity(string $product_id, int $newQuantity) {
  if(isset($_SESSION['cart'][$product_id])){
    $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
  }
}

// --- Example Usage (Simulating a Product Purchase) ---

// Add a product to the cart
add_to_cart('product1', 'Awesome T-Shirt', 2, 25.00);

// Add another product
add_to_cart('product2', 'Cool Hat', 1, 15.00);

// Update the quantity of product1 to 5
update_cart_quantity('product1', 5);


// Remove a product from the cart
remove_from_cart('product2');



// --- Displaying the Cart Contents (for demonstration) ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        echo "<li>";
        echo "<strong>" . $product_data['name'] . "</strong> - Quantity: " . $product_data['quantity'] . " - Price: $" . $product_data['price'] . "</li>";
    }
    echo "</ul>";
}


// ---  End of the Session  (Important!) ---
// In a real application, you'd likely have a logout or session expiration mechanism
// to properly terminate the session.
?>


<?php

// Session setup (if not already initialized)
session_start();

// --- Cart Data (This would ideally be stored in a database for real-world scenarios) ---
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (!isset($cart[$product_id])) {
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
      'total' => $price * $quantity
    );
  } else {
    $cart[$product_id]['quantity'] += $quantity;
    $cart[$product_id]['total'] = $cart[$product_id]['price'] * $cart[$product_id]['quantity'];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    global $cart;

    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
        $cart[$product_id]['total'] = $cart[$product_id]['price'] * $cart[$product_id]['quantity'];
    } else {
        // Item not in cart, handle error or add it with default quantity
        // You might want to log this or display an error message.
        echo "Error: Item ID " . $product_id . " not found in cart.";
    }
}


// Function to remove an item from the cart
function removeFromCart($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  } else {
    echo "Error: Item ID " . $product_id . " not found in cart.";
  }
}

// Function to get the cart contents
function getCartContents() {
  return $cart;
}

// Function to clear the cart
function clearCart() {
  $cart = array();
}



// --- Example Usage (Simulating User Interactions) ---

// 1. Add some items to the cart
addToCart(1, "T-Shirt", 20, 2);
addToCart(2, "Jeans", 50, 1);
addToCart(1, "T-Shirt", 20, 3);  // Adding more of the same item

// 2. Display the cart contents
$cart_contents = getCartContents();
echo "<h2>Your Cart</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . $product_data['total'] . "</li>";
  }
  echo "</ul>";
}


// 3.  Update Quantity
updateCartQuantity(1, 4); // Update quantity of T-Shirt to 4

// Display updated cart
$cart_contents = getCartContents();
echo "<h2>Your Cart (Updated)</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . $product_data['total'] . "</li>";
  }
  echo "</ul>";
}

// 4. Remove an Item
removeFromCart(2);

// 5. Clear the Cart
//clearCart(); // Uncomment to clear the cart
?>


<?php
session_start(); // Start the PHP session

// Check if the 'cart' session variable exists
if (!isset($_SESSION['cart'])) {
  // If it doesn't exist, initialize an empty cart array
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addItemToCart($product_id, $product_name, $price, $quantity) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, create a new entry in the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example Usage (Illustrative - you'd likely get this data from a form or database)
// Let's add a product to the cart
addItemToCart(1, "T-Shirt", 20, 2);
addItemToCart(2, "Jeans", 50, 1);

// Function to display the cart contents
function displayCart() {
  echo "<h2>Your Shopping Cart</h2>";
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . "</li>";
    echo "<p>Quantity: " . $product_details['quantity'] . "</p>";

    // You might add an option to update quantity or remove item here
  }
  echo "</ul>";
}

// Display the cart contents
displayCart();

// Example: To remove an item (Not fully implemented but shows the concept)
// if (isset($_GET['remove'])) {
//   $product_id = $_GET['remove'];
//   if (isset($_SESSION['cart'][$product_id])) {
//     unset($_SESSION['cart'][$product_id]);
//   }
// }


?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If so, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Otherwise, add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Example usage (simulate user interaction)
// Add some products to the cart
add_to_cart('product1', 'Laptop', 1200, 1);
add_to_cart('product2', 'Mouse', 25, 2);
add_to_cart('product3', 'Keyboard', 75, 1);


// Display the contents of the cart
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
        echo "<form action='' method='post'>"; //  Leave action empty for simplicity
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='submit' value='Remove from Cart'> ";
        echo "</form>";
    }
    echo "</ul>";
}


// Example of updating quantity (Simulate user changing quantity)
// update_quantity('product2', 3); // Change quantity of mouse to 3

// Example of removing an item from the cart
// remove_from_cart('product1');
?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity to add. Defaults to 1.
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity(int $product_id, int $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array An array containing the items in the cart.
 */
function get_cart() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for empty array
}

/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function get_cart_item_count() {
    return count(get_cart());
}


// --- Example Usage (Simulated Product Data - Replace with your actual database) ---

//Simulate a product list
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];



// --- Handling Add to Cart Request (Simulated) ---

if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id'];
  $quantity = (int)$_POST['quantity'] ?? 1; // Default to 1 if quantity not provided

  if (isset($products[$product_id])) {
    add_to_cart($product_id, $quantity);
  } else {
    // Handle invalid product ID
    echo "Product ID $product_id not found.";
  }
}

// --- Handling Remove from Cart Request (Simulated) ---

if (isset($_POST['remove_from_cart'])) {
  $product_id = (int)$_POST['product_id'];
  remove_from_cart($product_id);
}


// --- Displaying the Cart ---

echo "<h2>Your Shopping Cart</h2>";

$cart_items = get_cart();

if (count($cart_items) > 0) {
  echo "<ul>";
  foreach ($cart_items as $product_id => $quantity) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];
    echo "<li>Product: $product_name - Quantity: $quantity - Price: $product_price</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

echo "<p>Total Items in Cart: " . get_cart_item_count() . "</p>";



?>


<?php
session_start();

// Initialize the cart (an associative array)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (Simulating user actions)
// Add a product to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);

// Update the quantity of a product
updateCartQuantity(1, 3);

// Display the cart contents
$cart = getCartContents();

// Print the cart data for demonstration
echo "<h2>Your Shopping Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total for Product:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Function to add items to the cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}



// Example Usage:  (Simulating user actions)

// Add some products to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(1, 'Laptop', 1200, 1); // Add another Laptop - will increase quantity

// Display the cart contents
echo "<h2>Your Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total: $" . calculate_total() . "</strong></p>";


// Simulate updating the quantity of a product
update_cart_quantity(2, 3);

echo "<br>";
echo "<h2>Cart after updating quantity of Mouse:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Simulate removing an item from the cart
remove_from_cart(2);

echo "<br>";
echo "<h2>Cart after removing Mouse:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Check if the cart is empty
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function updateCartItem($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $new_quantity;
  }
}

/**
 * Gets the items in the cart.
 *
 * @return array An array of cart items.
 */
function getCartItems() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int The total number of items in the cart.
 */
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $quantity => $product_id) {
      $total += $quantity;
    }
  }
  return $total;
}

/**
 * Clears the entire cart.
 */
function clearCart() {
  unset($_SESSION['cart']);
}


// --- Example Usage (Illustrative) ---

// Add a product to the cart
addToCart(123); // Add product ID 123 in quantity 1
addToCart(456, 2); // Add product ID 456 in quantity 2

// Display the cart contents
echo "<h2>Cart Items:</h2>";
if (count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";

// Example: Remove a product
//removeCartItem(123);

// Example: Update quantity
//updateCartItem(456, 3);

// Example: Clear the cart
//clearCart();


?>


<?php
session_start(); // Start the session

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions to handle cart operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes a specific item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a specific item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    // If product is not in cart, consider it as a new item with the specified quantity
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array An array representing the cart contents.
 */
function getCartContents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $quantity => $product_id) {
      $total += $quantity;
    }
  }
  return $total;
}


// --- Example Usage (Demonstration - can be removed when integrating with your application) ---

// 1. Add a product to the cart
addToCart(123, 2); // Add 2 of product with ID 123
addToCart(456, 1);  // Add 1 of product with ID 456

// 2. Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";

// 3.  Update the quantity of an item
updateQuantity(123, 3);

echo "<p>Updated Cart Contents:</p>";
echo "<ul>";
foreach ($_SESSION['cart'] as $product_id => $quantity) {
  echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// 4. Remove an item
removeFromCart(456);

echo "<p>Cart Contents After Removal:</p>";
echo "<ul>";
foreach ($_SESSION['cart'] as $product_id => $quantity) {
  echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";
?>


<?php

// Initialize the session (if it doesn't exist)
session_start();

// Cart array (can be more sophisticated - database, etc.)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    // Increment the quantity if the product exists
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  unset($cart[$product_id]);
}

// Function to get the cart contents
function get_cart() {
  return $cart;
}

// --- Example Usage (Simulated Product Data) ---

// Add some products to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(1, 'Laptop', 1200, 1); // Add another Laptop
add_to_cart(3, 'Keyboard', 75, 1);


// --- Get and Display the Cart Contents ---

$cart_items = get_cart();

// Calculate total price
$total_price = 0;
foreach ($cart_items as $item_id => $item_data) {
  $total_price += $item_data['price'] * $item_data['quantity'];
}

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . $item_data['price'] * $item_data['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}


// --- Example Session Data Handling (Optional - for persistence) ---
// This is to illustrate how you could save the cart data to the session.
// In a real application, you'd likely save this to a database.

//  You can add/remove items from the session using these functions
//  add_to_cart($product_id, $product_name, $price, $quantity);
//  update_cart_quantity($product_id, $new_quantity);
//  remove_from_cart($product_id);

// After a user adds items, you might do something like this:
// $_SESSION['cart'] = get_cart();
// session_start(); // Always needed after modifying session variables
?>


<?php
session_start();

// -----------------------------------------------------
//  Cart Functions
// -----------------------------------------------------

// Add an item to the cart
function addToCart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];  // Initialize the cart array
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

// Update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Get the cart contents
function getCart() {
  return $_SESSION['cart'] ?? []; // Return the cart or an empty array if it doesn't exist
}

// Calculate the cart total
function calculateCartTotal() {
  $total = 0;
  $cart = getCart();
  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price']; // Assuming each item has a 'price' key
  }
  return $total;
}


// -----------------------------------------------------
//  Example Usage (Simulated Product Data - Replace with your actual product data)
// -----------------------------------------------------

$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// -----------------------------------------------------
//  Example Interaction - Simulating User Actions
// -----------------------------------------------------

// 1. User adds a T-Shirt (quantity 2)
addToCart(1, 2);

// 2. User updates the Jeans quantity to 1
updateCartQuantity(2, 1);

// 3. User removes the Hat
removeCartItem(3);

// 4. Display the cart contents
$cart = getCart();
echo "<h2>Your Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    $product = $products[$product_id];
    echo "<li>" . $product['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['quantity'] * $product['price'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}
?>


<?php

// Initialize the session if it doesn't exist
session_start();

// **1. Cart Session Variables**

// Define the session variables to store the cart data.
// These are standard keys, but you can customize them.

//   - 'cart': An array to store the products in the cart.
//   - 'total_items': The total number of items in the cart.
//   - 'total_price': The total price of the cart.

$_SESSION['cart'] = array();
$_SESSION['total_items'] = 0;
$_SESSION['total_price'] = 0.00;


// **2. Helper Functions**

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    global $_SESSION; // Access the session variables

    $product_array = array(
        'id' => $product_id,
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
    );

    // Check if the product is already in the cart
    foreach ($_SESSION['cart'] as $key => $cart_item) {
        if ($cart_item['id'] == $product_id) {
            // Update the quantity if the product exists
            $_SESSION['cart'][$key]['quantity'] += $quantity;
            return;
        }
    }

    // If the product is not in the cart, add it.
    $_SESSION['cart'][] = $product_array;

    // Update the cart totals
    $_SESSION['total_items'] += $quantity;
    $_SESSION['total_price'] += ($price * $quantity);
}

// Function to remove an item from the cart by ID
function remove_from_cart($product_id) {
    global $_SESSION;

    // Iterate through the cart and remove the product by ID
    $keys_to_remove = array();
    foreach ($_SESSION['cart'] as $key => $cart_item) {
        if ($cart_item['id'] == $product_id) {
            $keys_to_remove[] = $key;
        }
    }

    // Remove the items from the array
    foreach ($keys_to_remove as $key) {
        unset($_SESSION['cart'][$key]);
    }

    // Update cart totals
    $_SESSION['total_items'] -= $_SESSION['cart'][count($_SESSION['cart']) - 1]['quantity'];
    $_SESSION['total_price'] -= ($_SESSION['cart'][count($_SESSION['cart']) - 1]['price'] * $_SESSION['cart'][count($_SESSION['cart']) - 1]['quantity']);
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    global $_SESSION;

    // Find the product in the cart
    foreach ($_SESSION['cart'] as $key => $cart_item) {
        if ($cart_item['id'] == $product_id) {
            // Update the quantity
            $_SESSION['cart'][$key]['quantity'] = $new_quantity;

            // Update the cart totals
            $_SESSION['total_items'] += $new_quantity - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION['cart'][$key]['quantity'] - ($_SESSION']['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION']['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION']['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION']['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION']['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION['cart']['quantity'] - ($_SESSION'][$

print("Correct answer:", length)


<?php

// Ensure this script is run from the command line for testing.
// You won't directly run this in a browser environment.
if (php_sapi_name() == 'cli') {
  //  Basic session setup
  session_start();

  //  Set a default session ID (only needed if the session cookie isn't set)
  if (!isset($_SESSION['cart_id'])) {
    session_regenerate_id(true);
  }

  // --- Example Cart Logic ---

  // Simulate adding an item to the cart
  if (isset($_GET['add']) && $_GET['add'] == 'item1') {
    $item_name = 'Item 1';
    $item_price = 10.00;

    if (!isset($_SESSION['cart'])) {
      $_SESSION['cart'] = [];
    }

    $_SESSION['cart'][] = [
      'name' => $item_name,
      'price' => $item_price
    ];

    echo "Item '$item_name' added to cart.  Cart total: " . calculateCartTotal() . "<br>";
  }

  // Display the current cart
  if (isset($_SESSION['cart'])) {
    echo "<h2>Your Cart:</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Cart total: " . calculateCartTotal() . "</p>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }

} else {
  // This part would be executed if run from a web server.
  // You'd need to implement proper form handling and session management
  // and probably use a database to persist the cart data.

  echo "<p>This script is intended for command-line execution.  Implement proper form handling and database integration for a real application.</p>";
}

// Helper function to calculate the cart total
function calculateCartTotal() {
  $total = 0.00;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'];
    }
  }
  return $total;
}

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int    $price  The price of the product.
 * @param int    $quantity The quantity to add (default: 1).
 */
function add_to_cart(string $product_id, string $name, float $price, int $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity The new quantity.
 */
function update_cart_quantity(string $product_id, int $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


/**
 * Removes a product from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function remove_from_cart(string $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for default empty array
}


/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculate_total() {
    $total = 0.0;
    $cart = get_cart_contents();
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// --- Example Usage (Simulating a shopping cart) ---

// 1. Add some items to the cart
add_to_cart('product1', 'Awesome T-Shirt', 25.00, 2);
add_to_cart('product2', 'Cool Mug', 10.00, 1);
add_to_cart('product3', 'Fancy Hat', 30.00); // Add one of this item


// 2. Update the quantity of a product
update_cart_quantity('product1', 5); // Increase the quantity of Awesome T-Shirt to 5


// 3. View the cart contents
$cart_items = get_cart_contents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

//4. Calculate the total
$total = calculate_total();
echo "<h2>Total Cart Value: $" . $total . "</h2>";

// 5. Remove an item from the cart
remove_from_cart('product2');

//6. View the updated cart
$cart_items = get_cart_contents();
echo "<h2>Cart Contents after removal:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// ------------------- Cart Management Functions -------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return bool True if added successfully, false otherwise.
 */
function add_to_cart(int $product_id, int $quantity = 1) {
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'price' => get_product_price($product_id) // Retrieve the price (implementation needed)
    );
  }
  return true;
}

/**
 * Retrieves the price of a product based on its ID.
 * (Placeholder - you'll need to replace this with your actual price retrieval logic)
 *
 * @param int $product_id The ID of the product.
 * @return float The product price.
 */
function get_product_price(int $product_id) {
  // Example:  Replace this with your database query or data source.
  switch ($product_id) {
    case 1:
      return 10.99;
    case 2:
      return 5.50;
    default:
      return 0; // Handle unknown product IDs
  }
}


/**
 * Calculates the subtotal for a given product ID.
 *
 * @param int $product_id The ID of the product.
 * @return float The subtotal for the product.
 */
function get_product_subtotal(int $product_id) {
    return get_product_price($product_id) * $_SESSION['cart'][$product_id]['quantity'];
}

/**
 * Removes an item from the cart by its product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True if removed successfully, false otherwise.
 */
function remove_from_cart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    return true;
  }
  return false;
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart() {
    unset($_SESSION['cart']);
}

// ------------------- Cart Management Functions End -------------------


// ------------------- Example Usage (Demonstration) -------------------

// 1. Add an item to the cart
add_to_cart(1); // Add one of product ID 1
add_to_cart(2, 2); // Add two of product ID 2

// 2. Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $subtotal = get_product_subtotal($product_id);
    echo "<li>Product ID: " . $product_id . "<br>";
    echo "  Quantity: " . $item['quantity'] . "<br>";
    echo "  Price: $" . number_format(get_product_price($product_id), 2) . "<br>"; // Format price
    echo "  Subtotal: $" . number_format($subtotal, 2) . "</li>";
  }
  echo "</ul>";
}

// 3. Remove an item
remove_from_cart(1);

// 4. Display the updated cart
echo "<hr>";
echo "<h2>Cart Contents After Removal:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $subtotal = get_product_subtotal($product_id);
    echo "<li>Product ID: " . $product_id . "<br>";
    echo "  Quantity: " . $item['quantity'] . "<br>";
    echo "  Price: $" . number_format(get_product_price($product_id), 2) . "<br>"; // Format price
    echo "  Subtotal: $" . number_format($subtotal, 2) . "</li>";
  }
  echo "</ul>";
}

// 5. Clear the cart
//clear_cart();
//echo "<hr>";
//echo "<h2>Cart Contents After Clearing:</h2>";
//if (empty($_SESSION['cart'])) {
//  echo "<p>Your cart is empty.</p>";
//} else {
//  echo "<ul>";
//  foreach ($_SESSION['cart'] as $product_id => $item) {
//    $subtotal = get_product_subtotal($product_id);
//    echo "<li>Product ID: " . $product_id . "<br>";
//    echo "  Quantity: " . $item['quantity'] . "<br>";
//    echo "  Price: $" . number_format(get_product_price($product_id), 2) . "<br>";
//    echo "  Subtotal: $" . number_format($subtotal, 2) . "</li>";
//  }
//  echo "</ul>";
//}

?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        // If the item isn't in the cart, you might want to handle this.
        // For example, you could create a new entry or just ignore it.
        // In this simple example, we'll ignore it.
        echo "Item with ID $product_id not found in cart.";
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulating User Interaction) ---

// Add some items to the cart
addToCart(1, "Shirt", 20.00, 2);
addToCart(2, "Pants", 30.00, 1);
addToCart(1, "Shirt", 20.00, 1); // Add another shirt

// Display the cart contents
$cart = getCartContents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Update the quantity of an item
updateQuantity(1, 3); // Update quantity of "Shirt" to 3

// Remove an item
removeCartItem(2); // Remove "Pants"

// Display the updated cart contents
$cart = getCartContents();
echo "<h2>Your Cart (Updated)</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start(); // Start the session

// Cart array (could be database-backed in a real application)
$cart = array();

// Function to add an item to the cart
function addToCart($item_id, $item_name, $price, $quantity = 1) {
    if (!isset($cart[$item_id])) {
        $cart[$item_id] = array(
            'name' => $item_name,
            'price' => $price,
            'quantity' => $quantity,
            'total' => $price * $quantity
        );
    } else {
        $cart[$item_id]['quantity'] += $quantity;
        $cart[$item_id]['total'] = $cart[$item_id]['price'] * $cart[$item_id]['quantity'];
    }
}

// Function to remove an item from the cart
function removeFromCart($item_id) {
    if (isset($cart[$item_id])) {
        unset($cart[$item_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($item_id, $new_quantity) {
    if (isset($cart[$item_id])) {
        $cart[$item_id]['quantity'] = $new_quantity;
        $cart[$item_id]['total'] = $cart[$item_id]['price'] * $cart[$item_id]['quantity'];
    }
}

// ----- Example Usage (simulating user interaction) -----

// 1. Add some items to the cart
addToCart(1, "T-Shirt", 20, 2);  // Item ID 1, T-Shirt, price 20, quantity 2
addToCart(2, "Jeans", 50, 1);    // Item ID 2, Jeans, price 50, quantity 1
addToCart(1, "Hat", 15, 1);      // Add another T-Shirt

// 2. Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>Item:</strong> " . $item_data['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $item_data['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $item_data['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . $item_data['total'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// 3. Simulate user removing an item
// remove an item (e.g., remove the first T-Shirt)
//removeFromCart(1);

// 4.  Simulate user updating the quantity of an item
//updateQuantity(2, 3); // Change the quantity of Jeans to 3

//  ---- End of Example Usage -----

?>


<?php
session_start();

// --- Example Cart Data ---
// In a real application, this would likely come from a database or API.
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, increment quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to cart
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    global $cart;
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart total
function get_cart_total($cart) {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage ---

// 1. Add items to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);
add_to_cart(1, 'T-Shirt', 20.00, 1);  // Add another T-Shirt
// 2.  Retrieve Cart Contents (for display - this is just a demo)
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// 3. Get and display the cart total
$total = get_cart_total($cart);
echo "<p><strong>Total: $" . $total . "</strong></p>";

// 4.  Simulating a removal (Example)
// remove_from_cart(2);
// echo "<p>Jeans have been removed from your cart.</p>";


// 5.  Update Quantity (Example)
// update_quantity(1, 3);
// echo "<p>You've updated the quantity of T-Shirts to 3.</p>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ------------------- Cart Functions -------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = 0; // Initialize count if not exists
  }
  $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity for the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array containing the items in the cart.
 */
function get_cart() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total cart value.
 *
 * @return float The total value of the cart.
 */
function calculate_cart_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    //  Replace this with your actual product price retrieval.
    //  For example:
    $product_price = get_product_price($product_id); // Function to get price
    $total_item_price = $product_price * $quantity;
    $total += $total_item_price;
  }
  return $total;
}

// ------------------- Example Usage (For Demonstration) -------------------

// Add a product to the cart
add_to_cart(123, 2);  // Add 2 units of product ID 123
add_to_cart(456, 1);  // Add 1 unit of product ID 456

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
foreach (get_cart() as $product_id => $quantity) {
  echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Calculate and display the total
$total = calculate_cart_total();
echo "<br><h2>Total Cart Value: $" . $total . "</h2>";


// Example of removing an item
//remove_from_cart(123);
//echo "<br><h2>Cart Contents After Removal:</h2>";
//foreach (get_cart() as $product_id => $quantity) {
//    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
//}

//Example of updating a quantity
//update_cart_quantity(123, 3);
//echo "<br><h2>Cart Contents After Quantity Update:</h2>";
//foreach (get_cart() as $product_id => $quantity) {
//    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
//}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Handle the case where the product isn't in the cart.  You might want
    // to add it with the default quantity of 1, or simply ignore it.
    // In this example, we'll ignore it.
    // echo "Product ID {$product_id} not found in cart. Ignoring update.";
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to clear the entire cart
function clearCart() {
  $_SESSION['cart'] = array();
}


// -----------------------------------  Example Usage (Illustrative) -----------------------------------

// Add an item to the cart
addToCart(101, "Awesome T-Shirt", 25.00, 2); // Product ID 101, name, price, quantity

// Add another item
addToCart(102, "Cool Hat", 15.00); // Add a hat

// Get the cart contents
$cart = getCartContents();
print_r($cart);

// Update the quantity of a product
updateQuantity(101, 5); // Increase the quantity of the T-Shirt to 5
print_r($cart);

// Remove an item
removeFromCart(102);
print_r($cart);


// Clear the cart
// clearCart();
// print_r($cart); // Empty array
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
  unset($_SESSION['cart'][$product_id]);
}

// Function to get the cart items
function get_cart_items() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Example usage (Illustrative - Replace with your actual product details)

// Add a product to the cart
add_to_cart(1, "Awesome T-Shirt", 20.00, 2);
add_to_cart(2, "Cool Mug", 10.00, 1);


// Update the quantity of item 1 to 3
update_cart_quantity(1, 3);

// Get the cart items
$cart_items = get_cart_items();
echo "<h2>Your Cart:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// Calculate and display the total
$total = calculate_total();
echo "<p><strong>Total: $" . $total . "</strong></p>";


// Remove an item from the cart (example)
//remove_from_cart(2);
?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of a product in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// Function to remove a product from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Function to get the cart contents
function get_cart_contents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return [];
}

// ------------------ Example Usage ------------------

// Example 1: Add a product to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);

// Example 2: Update the quantity of a product
update_cart_quantity(1, 3); // Increase quantity of T-Shirt to 3

// Example 3: Remove a product from the cart
remove_from_cart(2);

// Example 4: Get the cart contents
$cart_contents = get_cart_contents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $product_name The name of the product.
 * @param int $quantity The quantity of the product to add.  Defaults to 1.
 * @param float $price The price of a single unit of the product.
 *
 * @return bool True if the product was added, false otherwise (e.g., invalid quantity).
 */
function addToCart(string $product_id, string $product_name, int $quantity = 1, float $price) {
    // Validate quantity -  important to prevent issues
    if ($quantity <= 0) {
        return false; // or you could log an error
    }

    // If cart doesn't exist, initialize it.
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product already exists, update quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product not in cart, add it.  Store other information too.
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'quantity' => $quantity,
            'price' => $price
        ];
    }

    return true;
}

/**
 * Retrieves the items in the cart.
 *
 * @return array An array containing the items in the cart.  Empty if the cart is empty.
 */
function getCartItems() {
    return $_SESSION['cart'] ?? []; // Use null coalesce operator for empty cart check.
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return bool True if the quantity was updated, false otherwise (e.g., invalid quantity).
 */
function updateCartItem(string $product_id, int $new_quantity) {
    if ($new_quantity <= 0) {
        return false; // Or log an error
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
        return true;
    } else {
        return false; // Product not in cart
    }
}

/**
 * Removes a product from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return bool True if the product was removed, false otherwise (e.g., product not in cart).
 */
function removeCartItem(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
        return true;
    } else {
        return false; // Product not in cart
    }
}

/**
 * Calculates the total price of the cart.
 *
 * @return float The total price of the cart.
 */
function calculateCartTotal() {
    $total = 0.0;
    $cart_items = getCartItems();

    foreach ($cart_items as $item) {
        $total += $item['price'] * $item['quantity'];
    }

    return $total;
}

// --- Example Usage ---

// Add an item to the cart
addToCart('product1', 'Awesome T-Shirt', 2, 25.00);
addToCart('product2', 'Cool Mug', 1, 10.00);

// Display cart items
$cart_items = getCartItems();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

// Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";

// Update quantity of an item
updateCartItem('product1', 5);

// Display updated cart
$cart_items = getCartItems();
echo "<h2>Updated Cart Items:</h2>";
foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}

// Remove an item
removeCartItem('product2');

echo "<p>Cart after removing item.</p>";
$cart_items = getCartItems();
foreach ($cart_items as $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array if it doesn't exist
  }

  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . "<br>";
    echo "<form action=\"update_cart.php\" method=\"post\">"; // Link to update_cart.php
    echo "<input type=\"hidden\" name=\"product_id\" value=\"" . $item_id . "\">";
    echo "<input type=\"number\" name=\"quantity\" value=\"" . $item_data['quantity'] . "\">";
    echo "<input type=\"submit\" value=\"Update\">";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    $total += $item_data['price'] * $item_data['quantity'];
  }

  echo "<p><strong>Total: $" . $total . "</strong></p>";

  //  Link to checkout
  echo "<form action=\"checkout.php\" method=\"post\">";
  echo "<input type=\"hidden\" name=\"cart_items\" value=\"" . json_encode($_SESSION['cart']) . "\">";
  echo "<input type=\"submit\" value=\"Proceed to Checkout\">";
  echo "</form>";

}


// Example Usage (Simulated Product Data -  Replace with your actual database)

$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 80]
];


// Simulate adding items to the cart
addToCart(1, $products[1]['name'], $products[1]['price'], 2); // Add 2 T-shirts
addToCart(2, $products[2]['name'], $products[2]['price']); // Add 1 pair of Jeans
addToCart(3, $products[3]['name'], $products[3]['price'], 1); // Add 1 pair of Shoes

// Display the cart contents
displayCart();

// To remove an item
// removeCartItem(2);

// To update quantity
// updateCartQuantity(1, 3);
?>


<?php

session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price'    => // You'd typically get this from a database
      //  e.g., $product_price
      //  For simplicity, let's assume $price = 20
      'price' => 20
    ];
  }
}


/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Calculates the total cart value.
 *
 * @return float The total value of the cart.
 */
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price']; // Assuming 'price' is in each item
    }
  }
  return $total;
}


/**
 * Gets the contents of the cart.
 *
 * @return array The contents of the cart.
 */
function getCartContents() {
    return $_SESSION['cart'] ?? [];
}

// --- Example Usage (Demonstration) ---

// 1. Add a product to the cart
addToCart(123); // Add 1 of product ID 123
addToCart(456, 2); // Add 2 of product ID 456
addToCart(123, 3); // Add 3 of product ID 123


// 2. Update the quantity of a product
updateCartQuantity(123, 5); // Change the quantity of product 123 to 5

// 3. Remove a product from the cart
removeFromCart(456);

// 4. Calculate the total
$total = calculateCartTotal();
echo "Total cart value: $" . number_format($total, 2) . "<br>";

// 5. Get the cart contents
$cartContents = getCartContents();
echo "Cart Contents:<br>";
echo "<pre>";
print_r($cartContents);
echo "</pre>";


?>


<?php

// Start session management if it's not already started
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --------------------  Example Cart Functions  --------------------

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if it exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// --------------------  Example Usage - Demonstrations  --------------------

// Example 1: Adding an item
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);

// Example 2:  Updating quantity
update_cart_quantity(1, 5); // Increase T-Shirt quantity to 5

// Example 3: Removing an item
remove_from_cart(2); // Remove Jeans

// --------------------  Displaying the Cart - For Demonstration  --------------------

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
      unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example Usage (simulating a product adding)
//  (You'd typically get this from your product display/form)

// Add a product to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "Product: " . $product_details['name'] . "<br>";
    echo "Price: $" . $product_details['price'] . "<br>";
    echo "Quantity: " . $product_details['quantity'] . "<br>";
    echo "Total for this item: $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example usage: Remove an item
// removeCartItem(2);

// Example usage: Update quantity
// updateCartItemQuantity(1, 3); // Increase the quantity of product 1 to 3

?>


<?php

session_start(); // Start the session

// Session variables to store cart data
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, increase quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to cart
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage (simulating user actions)

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);

// Add another item to the cart
addToCart(2, "Mouse", 25, 2);

// Add one more of the laptop
addToCart(1, "Laptop", 1200, 1);


// Function to display the cart contents
function displayCart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";

  foreach ($cart as $product_id => $product_details) {
    $name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total_price = $price * $quantity;

    echo "<li>" . $name . " - $" . $price . " x " . $quantity . " = $" . $total_price . "</li>";
  }

  echo "</ul>";

  // Calculate total cart value
  $total = 0;
  foreach ($cart as $product_id => $product_details) {
    $total += $product_details['price'] * $product_details['quantity'];
  }
  echo "<p><b>Total Cart Value: $" . $total . "</b></p>";
}


// Display the cart
displayCart();

// Optional:  Clear the cart after the user is done
// session_destroy();

?>


<?php

// Define the session name (used to identify the session)
$session_name = 'shopping_cart';

// Start the session if it doesn't exist
session_name($session_name);
session_start();

// ---  Functions for Cart Management ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart(int $product_id, int $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array containing all items in the cart.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use null coalescing operator for default empty array
}


/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function cartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      // Assume price of $10 per product for demonstration.  Replace with your actual price
      $total_for_product = 10;
      $total_for_product += $total_for_product * $quantity;
      $total = $total + $total_for_product * $quantity;
    }
  }
  return $total;
}



// --- Example Usage ---

// Add a product to the cart
addToCart(123); // Add product ID 123
addToCart(456, 2); // Add product ID 456 with quantity 2

// Display the contents of the cart
$cart_contents = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

// Display the total
$total = cartTotal();
echo "<p>Total: $" . $total . "</p>";


// Remove a product from the cart
removeFromCart(123);

// Display the updated cart contents
$cart_contents = getCart();
echo "<h2>Cart Contents after removing product 123:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}
?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// --- Example Usage (Illustrative - adapt to your actual product information) ---

// Add a product to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Remove an item
removeFromCart(1);

// Update the quantity of an item
updateQuantity(2, 3);


// Display the cart contents after update
echo "<h2>Your Cart (Updated)</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id  The ID of the product to add.
 * @param int $quantity    The quantity of the product to add. Defaults to 1.
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart exists, initialize if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists - increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist - add it to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name'     => 'Product Name (Replace with actual name)', // Replace with product name
      'price'    => 10.00,  // Replace with product price
    ];
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id  The ID of the product to update.
 * @param int $quantity   The new quantity of the product.
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// --- Example Usage (for demonstration -  replace with your product details and logic) ---

// Example: Add a product to the cart
addToCart(123);  // Add product with ID 123 to the cart

addToCart(456, 2); // Add product with ID 456 to the cart with quantity 2

// Example: Update the quantity of a product in the cart
updateCartQuantity(123, 5); // Update the quantity of product with ID 123 to 5

// Example: Remove a product from the cart
removeFromCart(456);

// --- Displaying the Cart Contents (for demonstration) ---

// Check if the cart is empty
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<h2>Your Cart:</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "Product ID: " . $product_id . "<br>";
    echo "Quantity: " . $product_details['quantity'] . "<br>";
    echo "Price: $" . $product_details['price'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
            'total' => $price * $quantity
        );
    } else {
        // Item already in the cart, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}


// Example usage:

// 1. Add an item to the cart
// addToCart(1, 'Laptop', 1200, 1);  // Product ID 1, 'Laptop', $1200, Quantity 1

// 2. Add another item to the cart
// addToCart(2, 'Mouse', 25, 2); // Product ID 2, 'Mouse', $25, Quantity 2


// 3. Update the quantity of an existing item
// updateQuantity(1, 3); // Update the quantity of product 1 to 3

// 4. Remove an item from the cart
// removeItemFromCart(2);



// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $item['name'] . "<br>";
        echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
        echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . number_format($item['total'], 2) . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// Example products (replace with your actual product data)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20, 'quantity' => 1],
    2 => ['name' => 'Jeans', 'price' => 50, 'quantity' => 2],
    3 => ['name' => 'Hat', 'price' => 15, 'quantity' => 1],
];

// Function to add item to cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'][$productId])) {
        // Item already in cart, increase quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it
        $_SESSION['cart'][$productId] = [
            'name' => $products[$productId]['name'],
            'price' => $products[$productId]['price'],
            'quantity' => $quantity
        ];
    }
}

// Function to get cart items
function getCartItems()
{
    return $_SESSION['cart'];
}

// Function to update cart item quantity
function updateCartItemQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}

// Function to remove item from cart
function removeCartItem($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Example usage:

// Add products to the cart
addToCart(1); // Add 1 T-Shirt
addToCart(2, 3); // Add 3 Jeans
addToCart(3); // Add 1 Hat

// Display the cart items
$cartItems = getCartItems();

echo "<h2>Your Cart</h2>";
if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $productId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Example: Update quantity of item 2 to 5
    updateCartItemQuantity(2, 5);

    // Display the updated cart
    echo "<h2>Updated Cart</h2>";
    $cartItems = getCartItems();
    echo "<ul>";
    foreach ($cartItems as $productId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Example: Remove item 1 from the cart
    removeCartItem(1);

    // Display the cart after removing item 1
    echo "<h2>Cart After Removing Item 1</h2>";
    $cartItems = getCartItems();
    echo "<ul>";
    foreach ($cartItems as $productId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// Array to store cart items
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $cart = [
      $product_id => [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
      ]
    ];
  } else {
    // Check if the item is already in the cart
    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] += $quantity;
    } else {
      $cart[$product_id] = [
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
      ];
    }
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $cart;
}


// Example Usage (Illustrative - This would be in a form submission handler)

//Simulate a form submission (replace with actual form handling)
if (isset($_POST['action'])) {
  if ($_POST['action'] == 'add_to_cart') {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    add_to_cart($product_id, $product_name, $price, $quantity);
    // You'd likely redirect the user here or display a success message
  } elseif ($_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];
    remove_from_cart($product_id);
  } elseif ($_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    update_quantity($product_id, $new_quantity);
  }
}


// Output the cart contents (for demonstration)
if (!empty($_SESSION['cart'])) {
  echo "<h2>Your Cart</h2>";
  foreach ($cart as $product_id => $item) {
    echo "<h3>" . $item['name'] . "</h3>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
  }
} else {
  echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize an empty cart array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Product not found in cart, possibly need to add it (handle error appropriately)
    // You could return an error or just do nothing.  For this example, we'll do nothing.
    //echo "Product ID " . $product_id . " not found in cart."; // Optional error message
  }
}

// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// --- Example Usage (Simulated Product Information - replace with database or API calls) ---

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// Update quantity of product with ID 1
updateQuantity(1, 3);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "Product: " . $product_data['name'] . "<br>";
    echo "Price: $" . $product_data['price'] . "<br>";
    echo "Quantity: " . $product_data['quantity'] . "<br>";
    echo "Subtotal: $" . $product_data['price'] * $product_data['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Remove a product from the cart
removeItem(2);

// Display updated cart
echo "<h2>Cart Contents (after removal):</h2>";
$cart = getCartContents();
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "Product: " . $product_data['name'] . "<br>";
    echo "Price: $" . $product_data['price'] . "<br>";
    echo "Quantity: " . $product_data['quantity'] . "<br>";
    echo "Subtotal: $" . $product_data['price'] * $product_data['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// -----------------------------------------------------------------
// Cart Functions
// -----------------------------------------------------------------

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add (default: 1).
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
    if (isset($_SESSION['cart'])) {
        // Item already in cart, increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it
        $_SESSION['cart'][$product_id] = [
            'quantity' => $quantity,
            'product_id' => $product_id // Useful for later removal
        ];
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents (array of product IDs and quantities).
 */
function getCartContents() {
    return $_SESSION['cart'] ?? []; // Return empty array if cart is empty
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cart  The cart contents array.
 * @param array $product_prices  An array mapping product IDs to their prices.
 * @return float  The total price.
 */
function calculateCartTotal($cart, $product_prices) {
    $total = 0;
    foreach ($cart as $product_id => $item) {
        if (isset($product_prices[$product_id])) {
            $total += $product_prices[$product_id] * $item['quantity'];
        }
    }
    return $total;
}


// -----------------------------------------------------------------
// Example Usage (Simulated Product Data)
// -----------------------------------------------------------------

$product_prices = [
    101 => 25.00,  // Product ID 101: $25.00
    102 => 15.50,  // Product ID 102: $15.50
    103 => 8.75   // Product ID 103: $8.75
];


// -----------------------------------------------------------------
// Example Interaction - Simulate a User Adding Items
// -----------------------------------------------------------------

// User adds 2 of product 101
addToCart(101, 2);

// User adds 1 of product 102
addToCart(102, 1);

// User updates quantity of product 101 to 3
updateCartQuantity(101, 3);

// -----------------------------------------------------------------
// Display Cart Contents
// -----------------------------------------------------------------

$cart_contents = getCartContents();
$cart_total = calculateCartTotal($cart_contents, $product_prices);

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: $" . $product_prices[$product_id] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $cart_total . "</p>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Product Data (For demonstration purposes) ---
// In a real application, you'd retrieve this from a database or an API.
$products = array(
    1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
    2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
    3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75),
);


// --- Cart Functions ---

// Add an item to the cart
function addToCart($product_id, $quantity = 1) {
    global $products;

    if (isset($products[$product_id])) {
        if (isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$product_id] = array('id' => $product_id, 'name' => $products[$product_id]['name'], 'price' => $products[$product_id]['price'], 'quantity' => $quantity);
        }
    } else {
        // Product not found, handle error appropriately (e.g., display an error message)
        //echo "Product with ID " . $product_id . " not found.";
    }
}

// Remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Get the contents of the cart
function getCartContents() {
    return $_SESSION['cart'];
}

// Calculate the total cart value
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// --- Example Usage (Handle user interactions) ---

// 1. Add items to the cart (e.g., from a form submission)
// Example:  If the user clicks a "Add to Cart" button for product ID 1
// addToCart(1); // Adds one laptop to the cart

// 2. Update quantity (e.g., if user changes quantity on the page)
// updateCartItemQuantity(1, 2); // Changes the quantity of product 1 to 2

// 3. Remove an item
// removeCartItem(2); // Remove the mouse from the cart

// 4. Display the cart contents
$cart_contents = getCartContents();
$total_value = calculateTotal();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . $total_value . "</p>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If yes, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add a new item to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// Remove an item from the cart by product ID
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// Get the contents of the cart
function get_cart_contents() {
  return $_SESSION['cart'];
}



// ---  Example Usage (Illustrative -  You'd integrate this into your application) ---

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);
add_to_cart(1, 'T-Shirt', 20, 3); // Add more of the existing item

// Display the cart contents
echo "<h2>Your Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example of updating the cart
update_cart_quantity(1, 5);  // Increase the quantity of the T-Shirt to 5

// Display the updated cart
echo "<br>";
echo "<h2>Your Cart (Updated):</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example of removing an item
// remove_from_cart(2);
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Cart Items</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'];
    echo "<br>";
    echo "<form method='post'>";
    echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
    echo "<input type='number' id='quantity_" . $product_id . "' name='quantity_" . $product_id . "' value='" . $item['quantity'] . "' min='1'>";
    echo "<input type='submit' name='update_quantity_" . $product_id . "' value='Update'>";
    echo "<br>";
    echo "<input type='submit' name='remove_" . $product_id . "' value='Remove Cart Item' formnovalidate>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $total += $item['price'] * $item['quantity'];
  }

  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

// --- Example Usage (Simulating User Interactions) ---

// 1. Adding items to the cart
addToCart(1, "T-Shirt", 20, 2);
addToCart(2, "Jeans", 50, 1);
addToCart(1, "T-Shirt", 20, 3); // Adding more of the same item


// 2. Updating the quantity of an item
updateQuantity(1, 5); // Change quantity of T-Shirt to 5

// 3. Removing an item
removeCartItem(2);

// 4. Displaying the cart
displayCart();


//  --- End of Example Usage ---

?>


<?php
session_start();

// Sample product data (for demonstration)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = ['quantity' => $quantity];
    }
}

// Function to display the cart contents
function displayCart()
{
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $productId => $item) {
        $product = $products[$productId];
        $total = $product['price'] * $item['quantity'];
        echo "<li>" . $product['name'] . " - $" . $product['price'] . " x " . $item['quantity'] . " = $" . $total . "</li>";
    }
    echo "</ul>";
}

// Example Usage:

// Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Ensure product_id is an integer
    addToCart($productId);
}

// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <form method="post">
        <label for="product_id">Select Product:</label>
        <select name="product_id" id="product_id">
            <?php
            foreach ($products as $id => $product) {
                echo '<option value="' . $id . '">' . $product['name'] . '</option>';
            }
            ?>
        </select>
        <button type="submit" name="add_to_cart">Add to Cart</button>
    </form>

    <a href="checkout.php">Checkout</a>  <!--  Example of how to link to a checkout page -->

</body>
</html>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ------------------  Helper Functions ------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add the product with its quantity
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}



// ------------------ Example Usage  ------------------

// 1. Add a product to the cart
add_to_cart(123); // Add product with ID 123, quantity 1
add_to_cart(456, 2); // Add product with ID 456, quantity 2

// 2. Update the quantity of a product
update_cart_quantity(123, 5); // Change quantity of product 123 to 5

// 3. Remove a product from the cart
remove_from_cart(456);


// 4. Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}



// ------------------ Notes ------------------

// - This is a basic example and can be expanded to include:
//   - Product names, prices, images, etc.
//   - Session expiry settings
//   - Better user interface and display
// -  Security:  In a production environment, you would need to:
//    - Validate product IDs to prevent malicious input.
//    - Implement session security measures (e.g., session ID regeneration).
//    - Consider using a database to store cart information for scalability.
?>


<?php
session_start(); // Start the session

// Array to hold the cart items
$cart = array();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart; // Access the global $cart array

  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage:  Add some items to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2);
add_to_cart(2, 'Jeans', 50.00, 1);
add_to_cart(1, 'T-Shirt', 20.00, 1); // Add another T-Shirt

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];

    echo "<li>" . $product_name . " - $" . $price . " x " . $quantity . " = $" . ($price * $quantity) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total_price = 0;
  foreach ($cart as $product_id => $product_details) {
    $total_price += $product_details['price'] * $product_details['quantity'];
  }

  echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}

// Function to remove an item from the cart (Optional - for demonstration)
function remove_from_cart($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Example: Remove a T-Shirt
// remove_from_cart(1); //Remove T-Shirt with ID 1

//  You'll likely have more complex logic here, like:
//  - Handling quantity updates
//  - Saving the cart data to a database or session storage
//  - Integrating with your product catalog
?>


<?php

// Start a session (if it doesn't already exist)
session_start();

// --- Cart Logic ---

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart exists in the session.  If not, initialize it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart.
  if (isset($_SESSION['cart'][$product_id])) {
    // Product is already in the cart - increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product is not in the cart - add it with the specified quantity
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to clear the entire cart
function clearCart() {
    unset($_SESSION['cart']);
}

// --- Example Usage (Demonstration) ---

// Let's say we have these product IDs: 1, 2, 3

// 1. Add a product to the cart
addToCart(1, 2); // Add 2 of product ID 1
addToCart(2, 1); // Add 1 of product ID 2

// 2. Display the contents of the cart
echo "<h2>Your Shopping Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 3. Example: Remove a product
removeFromCart(2);

// 4. Display the cart again after removal
echo "<h2>Your Shopping Cart (after removal):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 5. Example: Update quantity
updateQuantity(1, 5); // Change quantity of product 1 to 5

// 6. Display the cart after update
echo "<h2>Your Shopping Cart (after update):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 7. Example: Clear the cart
//clearCart();
//echo "<p>Cart has been cleared.</p>";


?>


<?php
session_start();

// --- Session Variables ---
// Define keys for your session variables
$product_id = $_GET['product_id'];
$product_name = $_GET['product_name'];
$quantity = isset($_GET['quantity']) ? (int)$_GET['quantity'] : 1; // Default to 1 if not provided
$total_price = (float)$_GET['price']; // Price for the product
$cart_items = [];

// --- Function to Add Item to Cart ---
function add_to_cart($product_id, $product_name, $quantity, $total_price) {
  global $cart_items;

  // Check if the product is already in the cart
  foreach ($cart_items as $key => $item) {
    if ($item['product_id'] == $product_id) {
      // Update the quantity
      $cart_items[$key]['quantity'] += $quantity;
      $cart_items[$key]['total_price'] = $cart_items[$key]['quantity'] * $cart_items[$key]['price']; // recalculate
      return true;
    }
  }

  // If product not in cart, add it
  $cart_items[] = [
    'product_id' => $product_id,
    'product_name' => $product_name,
    'quantity' => $quantity,
    'price' => $total_price,
    'total_price' => $quantity * $total_price  // Calculate total price immediately
  ];
  return true;
}

// --- Handle Adding to Cart (Example from POST request) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // You might receive this data from a form submission
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = (int)$_POST['quantity'];
    $total_price = (float)$_POST['price'];

    add_to_cart($product_id, $product_name, $quantity, $total_price);

    //  You'd likely redirect after adding the item, for example:
    // header("Location: cart.php"); // Redirect to your cart page
    // exit;

  }
}

// --- Display Cart Contents (for demonstration) ---
echo "<h2>Your Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $index => $item) {
    echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . " - Total: $" . $item['total_price'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $productName = null) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$productId] = [
      'quantity' => $quantity,
      'name' => $productName ?? $productId, // Use product name if available, otherwise product ID
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($productId, $quantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $quantity;
    }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Price:</strong>  (Assume price is stored in a database - e.g.,  $10.00)"; // Replace with your actual price retrieval
    echo "<form action='update_cart.php' method='post'>";
    echo "<input type='hidden' name='productId' value='" . $productId . "'>";
    echo "<input type='number' name='quantity' value='" . $item['quantity'] . "' min='1'>";
    echo "<input type='submit' value='Update Quantity'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate total price (replace with your actual price retrieval)
  $total = 0;
  foreach ($_SESSION['cart'] as $productId => $item) {
    $total += $item['quantity'] * 10.00;  // Example price, change to your actual price
  }

  echo "<p><strong>Total:</strong> $" . $total . "</p>";
}

// Example Usage (to add an item to the cart)
// addToCart(123, 2);  // Add product with ID 123, quantity 2

// Example Usage (to remove an item from the cart)
// removeCartItem(123);

// Example Usage (to update the quantity of an item in the cart)
// updateCartItemQuantity(123, 3);

//  To display the cart contents
displayCart();

?>


<?php

// Start a session to store the user's cart
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// Example Usage:  Let's say we have product IDs 1, 2, and 3
// Add product 1 to the cart (quantity 2)
addToCart(1, "T-Shirt", 20.00, 2);

// Add product 2 to the cart (quantity 1)
addToCart(2, "Jeans", 50.00, 1);

// Add product 3 to the cart (quantity 3)
addToCart(3, "Hat", 15.00, 3);


// Display the contents of the cart
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Session variables for the cart
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (isset($_SESSION['cart'][$product_id])) {
        // Item already exists in the cart, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}


// --- Example Usage / Dummy Data (Simulating product data) ---
$products = array(
    1 => array('name' => 'T-Shirt', 'price' => 20),
    2 => array('name' => 'Jeans', 'price' => 50),
    3 => array('name' => 'Hat', 'price' => 15)
);

// --- Add some items to the cart ---
addToCart(1, $products[1]['name'], $products[1]['price']); // Add 1 T-Shirt
addToCart(2, $products[2]['name'], $products[2]['price']); // Add 1 Jeans
addToCart(1, $products[1]['name'], $products[1]['price'], 2); // Add 2 T-Shirts
addToCart(3, $products[3]['name'], $products[3]['price']);  // Add 1 Hat


// --- Display the cart contents ---
$cart_contents = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}

// --- Example of updating quantity ---
//updateQuantity(1, 3);  // Change the quantity of T-Shirts to 3
//echo "<p>Updated T-Shirt quantity to 3.</p>";
//echo "<p>Updated Total: $" . calculateCartTotal() . "</p>";

// --- Example of removing an item ---
//removeFromCart(2); // Remove Jeans
//echo "<p>Removed Jeans from cart.</p>";
//echo "<p>Updated Total: $" . calculateCartTotal() . "</p>";

?>


<?php
session_start();

// Example: Adding an item to the cart

// Assuming you have a product ID and quantity
$product_id = 123;
$quantity = 2;

// Check if the cart already exists
if (!isset($_SESSION['cart'])) {
  // If not, initialize an empty cart array
  $_SESSION['cart'] = array();
}

// Add the product to the cart
$_SESSION['cart'][$product_id] = $quantity;

// Optionally, update the quantity if the product already exists
if (isset($_SESSION['cart'][$product_id])) {
  $_SESSION['cart'][$product_id] += $quantity;
}

// Display a message to confirm the addition
echo "Item added to cart!<br>";
echo "Cart contents: ";
foreach ($_SESSION['cart'] as $id => $qty) {
    echo $id . ": " . $qty . "<br>";
}

// Example:  Removing an item from the cart

// Assuming you have a product ID to remove
$product_id_to_remove = 123;

// Check if the product exists in the cart
if (isset($_SESSION['cart'][$product_id_to_remove])) {
    // Remove the product from the cart
    unset($_SESSION['cart'][$product_id_to_remove]);
}

// Display a message to confirm the removal
echo "Item removed from cart!<br>";
echo "Cart contents after removal: ";
foreach ($_SESSION['cart'] as $id => $qty) {
    echo $id . ": " . $qty . "<br>";
}

// Example:  Clearing the entire cart
//  To clear the entire cart, you can unset the session variable
//  $_SESSION['cart'] = array();
//  echo "Cart cleared!";

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Functions to manipulate the cart ---

// Add an item to the cart
function addToCart($product_id, $quantity = 1) {
    $product_id = (int)$product_id; // Ensure it's an integer

    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

// Remove an item from the cart
function removeItemFromCart($product_id) {
    $product_id = (int)$product_id; // Ensure it's an integer

    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    $product_id = (int)$product_id;

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}

// Calculate the total price of the cart
function calculateTotal($cart) {
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        //  You'd need to replace this with your actual product price retrieval
        $product_price = getProductPrice($product_id);
        $total_for_item = $product_price * $quantity;
        $total = $total + $total_for_item;
    }
    return $total;
}


// --- Example Usage ---

// Add an item to the cart
addToCart(123, 2); // Add 2 items of product ID 123
addToCart(456, 1);  // Add 1 item of product ID 456

// Display the cart contents
echo "<h2>Your Cart:</h2>";
echo "<ul>";
$cartContents = getCartContents();

foreach ($cartContents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Calculate and display the total
$total = calculateTotal($cartContents);
echo "<p>Total: $" . $total . "</p>";


// Remove an item
removeItemFromCart(123);

// Display updated cart
echo "<p>Your Cart (after removing item):</p>";
echo "<ul>";
$cartContents = getCartContents();
foreach ($cartContents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart items
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return [];
  }
}

//  ------------------  Example Usage (Simulated Products ) -------------------

// Simulating products (replace with your database or other data source)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];


// ---------------------  Handle Add to Cart Request  -----------------------

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $products[$product_id]['name'];
    $price = $products[$product_id]['price'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1

    addToCart($product_id, $product_name, $price, $quantity);

    // Redirect to the cart page
    header("Location: cart.php"); // Or your specific cart page
    exit();
}

// ---------------------  Handle Remove Item Request  -----------------------

if (isset($_GET['remove_from_cart'])) {
  $product_id = $_GET['remove_from_cart'];
  removeCartItem($product_id);
  header("Location: cart.php");
  exit();
}

// ---------------------  Handle Update Quantity Request  -----------------------

if (isset($_GET['update_quantity'])) {
    $product_id = $_GET['update_quantity'];
    $new_quantity = $_GET['quantity'];
    updateCartQuantity($product_id, $new_quantity);
    header("Location: cart.php");
    exit();
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <h2>Add to Cart</h2>
  <form method="post" action="cart.php">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <?php
      foreach ($products as $id => $product) {
        echo "<option value=\"$id\">$id - $product['name']</option>";
      }
      ?>
    </select>
    <input type="number" name="quantity" value="1" min="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <?php
  // Display Cart Contents
  $cart_items = getCartItems();

  if (!empty($cart_items)) {
    echo "<h2>Cart Items</h2>";
    echo "<ul>";
    foreach ($cart_items as $id => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

</body>
</html>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
            'total_price' => $price * $quantity // Calculate total price
        );
    } else {
        // If the item already exists, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        $_SESSION['cart'][$product_id]['total_price'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
        $_SESSION['cart'][$product_id]['total_price'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}


// Example Usage (Simulating a product and adding it to the cart)

// Product details
$product_id = 1;
$product_name = "Awesome T-Shirt";
$price = 25.00;

// Add the product to the cart
addToCart($product_id, $product_name, $price);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . $item_data['total_price'];
        echo " <button onclick=\"updateQuantity('" . $item_id . "', 1)">+</button> ";
        echo " <button onclick=\"updateQuantity('" . $item_id . "', -1)\">-</button> ";
        echo " <button onclick=\"removeCartItem('" . $item_id . "')\">Remove</button>";
        echo "</li>";
    }
    echo "</ul>";
}

?>

<script>
  function updateQuantity(productId, change) {
    //  This is just a basic example.  In a real application, you'd update
    //  the cart data on the server-side (e.g., via an AJAX request).

    // For demonstration purposes, we'll simulate updating the quantity in the session.
    // THIS IS NOT A PRODUCTION-READY SOLUTION.

    // You would typically use AJAX to send the productId and change to the server
    // and the server would update the session.

    //  This is just a simplified demonstration.

    if (change > 0) {
        // Simulate increasing quantity (server-side update is needed here)
        console.log("Simulating increasing quantity of product " + productId);
    } else if (change < 0) {
        // Simulate decreasing quantity
        console.log("Simulating decreasing quantity of product " + productId);
    }

  }
</script>


<?php
session_start();

// 1. Check if the item is already in the cart
if (isset($_GET['add']) && $_GET['add'] == 'true') {
  $product_id = $_GET['product_id'];
  $quantity = $_GET['quantity'];

  // Validate input (important for security)
  if (is_numeric($quantity) && $quantity > 0) {

    if (isset($_SESSION['cart'][$product_id]) {
      // Item already exists in the cart - increase the quantity
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      // Item is not in the cart - add it
      $_SESSION['cart'][$product_id] = array(
        'quantity' => $quantity,
        'price'    => $_GET['price'] // Assuming price is sent from the product page
      );
    }
  }
}

// 2. Display the cart contents
echo "<h1>Your Shopping Cart</h1>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $details) {
    echo "<li>";
    echo "Product ID: " . $product_id . "<br>";
    echo "Quantity: " . $details['quantity'] . "<br>";
    echo "Price: " . $details['price'] . "<br>";
    echo "Subtotal: " . ($details['quantity'] * $details['price']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// 3.  (Optional)  Clear the cart (e.g., when the user clicks a "Clear Cart" button)
// if (isset($_POST['clear_cart'])) {
//   unset($_SESSION['cart']);
//   // Redirect the user to the cart page to refresh
//   header("Location: cart.php");
//   exit();
// }


// Example HTML for adding items to the cart (for demonstration)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Products</h1>
  <form method="GET" action="">
    <div>
      <label for="product1">Product 1 (Price: $10):</label>
      <input type="hidden" name="product_id" value="product1">
      <input type="hidden" name="price" value="10">
      <input type="number" id="quantity1" name="quantity" value="1" min="1">
      <input type="submit" value="Add to Cart">
    </div>

    <div>
      <label for="product2">Product 2 (Price: $20):</label>
      <input type="hidden" name="product_id" value="product2">
      <input type="hidden" name="price" value="20">
      <input type="number" id="quantity2" name="quantity" value="1" min="1">
      <input type="submit" value="Add to Cart">
    </div>
  </form>

</body>
</html>


<?php
session_start();

// --- Example Product Data (Replace with your actual database or API) ---
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80],
];

// --- Helper Functions ---
function addItemToCart($cartId, $productId, $quantity = 1) {
    if (isset($_SESSION['cart'][$cartId][$productId])) {
        $_SESSION['cart'][$cartId][$productId]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$cartId][$productId] = [
            'id' => $productId,
            'name' => $products[$productId]['name'],
            'price' => $products[$productId]['price'],
            'quantity' => $quantity
        ];
    }
}

function updateQuantity($cartId, $productId, $quantity) {
  if (isset($_SESSION['cart'][$cartId][$productId])) {
    $_SESSION['cart'][$cartId][$productId]['quantity'] = $quantity;
  }
}

function removeItemFromCart($cartId, $productId) {
  if (isset($_SESSION['cart'][$cartId][$productId])) {
    unset($_SESSION['cart'][$cartId][$productId]);
  }
}

function getCartTotal($cartId) {
  $total = 0;
  if (isset($_SESSION['cart'][$cartId])) {
    foreach($_SESSION['cart'][$cartId] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Session Handling Functions ---
function startNewCartSession() {
  // Create a new cart session
  $_SESSION['cart'] = [];
}

function addToCart($cartId, $productId, $quantity = 1) {
  addItemToCart($cartId, $productId, $quantity);
}

function updateCartItemQuantity($cartId, $productId, $newQuantity) {
    updateQuantity($cartId, $productId, $newQuantity);
}

function removeCartItem($cartId, $productId) {
    removeItemFromCart($cartId, $productId);
}

function getCartContents($cartId) {
  return $_SESSION['cart'][$cartId] ?? []; //Return an empty array if cart doesn't exist
}

function getCartTotalAmount($cartId) {
  return getCartContents($cartId) ? getCartTotal($cartId) : 0;
}

// --- Example Usage (Demonstration) ---

// 1. Start a new cart session (or use an existing one)
startNewCartSession();

// 2. Add items to the cart
addToCart('cart1', 1); // Add one T-Shirt to cart 'cart1'
addToCart('cart1', 2, 2); // Add two Jeans to cart 'cart1'
addToCart('cart2', 1); //Add one T-Shirt to cart 'cart2'

// 3.  Update Quantity
updateCartItemQuantity('cart1', 2, 3); // Increase the quantity of Jeans in cart 'cart1' to 3

// 4.  Remove an Item
removeCartItem('cart1', 2); //Remove the Jeans (id 2) from cart 'cart1'

// 5. Get Cart Contents
$cartContents = getCartContents('cart1');
echo "Cart 1 Contents:
";
if ($cartContents) {
    foreach ($cartContents as $item) {
        echo "- " . $item['name'] . " (Quantity: " . $item['quantity'] . ", Price: $" . $item['price'] . ")
";
    }
} else {
  echo "Cart is empty.
";
}

// 6. Get Total Amount of Cart
$totalAmount = getCartTotalAmount('cart1');
echo "Total amount for cart 1: $" . $totalAmount . "
";



// --- Notes ---
// 1. Session Start:  `session_start();` MUST be called at the beginning of the script
//    to initialize the session.
// 2. Cart IDs:  I've used 'cart1', 'cart2' as example cart IDs.  In a real application,
//    you'd likely use a more robust mechanism to identify and manage user carts
//    (e.g., a unique user ID associated with the cart).
// 3.  Database/API: Replace the `$products` array with your actual product data,
//     typically retrieved from a database or an API.
// 4. Error Handling:  Add more robust error handling (e.g., checking for invalid
//     product IDs, handling database connection errors, etc.).
// 5. Security: Implement appropriate security measures, such as input validation,
//    to prevent attacks like SQL injection or cross-site scripting (XSS).
// 6. Scalability:  For a large number of users, consider using a more scalable
//     solution like Redis or Memcached to store session data.


<?php

// Start a session (if it doesn't exist)
session_start();

// Cart variables (can be stored in a database for a real application)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $cart[$product_id]['quantity'] += $quantity;
    }
}

// Function to get the cart contents
function get_cart() {
    return $cart;
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $quantity;
  } else {
    // Product doesn't exist in cart, so don't do anything
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    unset($cart[$product_id]);
}

// Function to clear the entire cart
function clear_cart() {
    $cart = [];
}

// --- Example Usage (demonstration) ---

// Simulate a product being added to the cart
add_to_cart(1, 'T-Shirt', 20, 2); // Product ID 1, T-Shirt, price $20, quantity 2
add_to_cart(2, 'Jeans', 50, 1);   // Product ID 2, Jeans, price $50, quantity 1

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Example: Update quantity of item 1 to 3
update_cart_quantity(1, 3);

// Display updated cart
echo "<br><h2>Updated Cart</h2>";
echo "<ul>";
foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}
echo "</ul>";

// Example: Remove item 2 from cart
remove_from_cart(2);

echo "<br><h2>Cart After Removing Jeans</h2>";
echo "<ul>";
foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}
echo "</ul>";

// Example: Clear the cart
//clear_cart();
//echo "<br><h2>Empty Cart</h2>";
//echo "<ul>";
//if (empty($cart)) {
//    echo "<p>Your cart is empty.</p>";
//} else {
//    foreach ($cart as $product_id => $item) {
//        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
//    }
//}
//echo "</ul>";


?>


<?php

// Start the session if it's not already started
session_start();

// **Helper Functions (for clarity and organization)**

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Add the item to the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already exists in the cart - increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart - add a new entry
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// **Example Usage (Simulating a Product)**
// In a real application, you'd fetch product information from a database.
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200],
  2 => ['name' => 'Mouse', 'price' => 25],
  3 => ['name' => 'Keyboard', 'price' => 75]
];

// **Handling Cart Actions (Example)**

// 1. Add to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id']; // Cast to integer for safety
  $quantity = (int)$_POST['quantity'];

  if (isset($products[$product_id])) {
    addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
  } else {
    echo "Product ID $product_id not found.";
  }
}

// 2. Update Quantity (Example)
if (isset($_POST['update_quantity'])) {
  $product_id = (int)$_POST['product_id'];
  $new_quantity = (int)$_POST['quantity'];
  updateCartQuantity($product_id, $new_quantity);
}

// 3. Remove Item (Example)
if (isset($_POST['remove_from_cart'])) {
  $product_id = (int)$_POST['product_id'];
  removeCartItem($product_id);
}



// **Displaying the Cart (Example)**

if (isset($_SESSION['cart'])) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . "<button onclick=\"removeCartItem(" . $product_id . ")\" style=\"margin-right: 10px;\">Remove</button>";
    echo "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Function to add item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove item from the cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return array();
  }
}

// --- Example Usage (simulated product data - Replace with your actual product data) ---

$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);

// ---  Handling Cart Actions (Example - Replace with your actual form handling) ---

// 1. Add to Cart (Simulated)
if (isset($_POST['add_to_cart'])) {
  $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
  $quantity = (int)$_POST['quantity']; // Ensure quantity is an integer
  addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
  echo "Product '$products[$product_id]['name']' added to cart.<br>";
}

// 2. Update Quantity (Simulated)
if (isset($_POST['update_quantity'])) {
  $product_id = (int)$_POST['product_id'];
  $new_quantity = (int)$_POST['quantity'];
  updateQuantity($product_id, $new_quantity);
  echo "Quantity of Product '$products[$product_id]['name']' updated to $new_quantity.<br>";
}

// 3. Remove Item from Cart (Simulated)
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id'];
    removeItemFromCart($product_id);
    echo "Product '$products[$product_id]['name']' removed from cart.<br>";
}

// --- Displaying the Cart Contents (for demonstration) ---
$cart_contents = getCartContents();

if (!empty($cart_contents)) {
  echo "<h2>Cart Contents:</h2>";
  echo "<ul>";
  foreach ($cart_contents as $product_id => $item) {
    echo "<li>Product: " . $item['name'] . ", Price: $" . $item['price'] . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product already exists in the cart.  If so, increment quantity.
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return array(); // Return an empty array if the cart is empty
  }
}


// Example Usage (Simulated Product Data)
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);


// 1. Adding items to the cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (isset($products[$product_id])) {
    addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
  }
}


// 2.  Removing an item
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  removeCartItem($product_id);
}

// 3.  Updating Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateCartQuantity($product_id, $new_quantity);
}

// 4. Displaying the cart contents
$cartContents = getCartContents();

echo "<h2>Shopping Cart</h2>";

if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


?>

<!-- HTML Form to add items to the cart -->
<form method="post" action="">
  <h2>Add to Cart</h2>
  <?php
  foreach ($products as $product_id => $product) {
    echo "<label for='" . $product_id . "'>" . $product['name'] . " - $" . $product['price'] .  "</label><br>";
    echo "<input type='number' id='" . $product_id . "' name='product_id' value='" . $product_id . "' min='1'  size='3'><br>"; //Use the product id as an input for the form
  }
  ?>
  <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

<!-- Form to remove items -->
<form method="post" action="">
   <h2>Remove from Cart</h2>
   <?php
   foreach ($products as $product_id => $product) {
      echo "<label for='" . $product_id . "'>" . $product['name'] . "</label><br>";
      echo "<input type='submit' name='remove_from_cart' value='Remove ' . $product['name']  />";
   }
   ?>
</form>

<!-- Form to update quantity -->
<form method="post" action="">
  <h2>Update Quantity</h2>
  <?php
    foreach ($products as $product_id => $product) {
        echo "<label for='" . $product_id . "'>" . $product['name'] . "</label><br>";
        echo "<input type='number' id='" . $product_id . "' name='product_id' value='" . $product_id . "' min='1' size='3'><br>";
        echo "<input type='submit' name='update_quantity' value='Update ' . $product['name']  />";
    }
  ?>
</form>


<?php
session_start();

// Example product data (replace with your actual product information)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($productId, $quantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = $quantity;
    } else {
        // If the product is not in the cart, add it with the given quantity
        addToCart($productId, $quantity);
    }
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to get the cart contents
function getCartContents()
{
    return $_SESSION['cart'] ?? [];
}

// Example usage (handling adding to cart)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $productId = $_POST['product_id'];
        $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1;
        addToCart($productId, $quantity);
        // Optionally, redirect to a product page or display a success message
        // header("Location: product.php?id=$productId");
    }

    if (isset($_POST['update_cart'])) {
        $productId = $_POST['product_id'];
        $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 0;
        updateCartQuantity($productId, $quantity);
    }

    if (isset($_POST['remove_from_cart'])) {
        $productId = $_POST['product_id'];
        removeFromCart($productId);
    }
}


// Displaying the cart content
$cartContents = getCartContents();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

    <h1>Shopping Cart</h1>

    <?php if (empty($cartContents)): ?>
        <p>Your cart is empty.</p>
    <?php else: ?>
        <table border="1">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                $total = 0;
                foreach ($cartContents as $productId => $item) {
                    $productName = 'Product ' . $productId; //Replace with actual product name retrieval
                    $price = $products[$productId]['price'];
                    $quantity = $item;
                    $totalItem = $price * $quantity;
                    $total += $totalItem;

                    echo '<tr>';
                    echo '<td>' . $productName . '</td>';
                    echo '<td>$' . $price . '</td>';
                    echo '<td>' . $quantity . '</td>';
                    echo '<td>$' . $totalItem . '</td>';
                    echo '<td><a href="?remove_from_cart=' . $productId . '">Remove</a></td>';
                    echo '</tr>';
                }
                ?>
            </tbody>
        </table>

        <p><strong>Total:</strong> $<?php echo $total; ?></p>

        <form method="post">
            <input type="hidden" name="product_id" value="<?php echo $productId; ?>">
            <input type="submit" name="update_cart" value="Update Cart">
        </form>
    <?php endif; ?>

</body>
</html>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Functions for Cart Management ---

// Add a product to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Remove a product from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of a product in the cart
function updateCartItem($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulated Products - Replace with your product data) ---

// Simulate a product data array (replace with your actual database or product data source)
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);


// ---  Example Cart Interactions ---

// Add a Laptop to the cart
addToCart(1, $products[1]['name'], $products[1]['price']);

// Add a Mouse to the cart
addToCart(2, $products[2]['name'], $products[2]['price'], 2); // Add 2 mice

// Get the current cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";


// Remove the Mouse
removeCartItem(2);

// Get the updated cart contents
$cart = getCartContents();
echo "<h2>Cart Contents After Removal:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// Update the quantity of the Laptop to 3
updateCartItem(1, 3);
$cart = getCartContents();
echo "<h2>Cart Contents After Quantity Update:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, create a new entry
    $_SESSION['cart'][$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}


// Example usage:

// 1. Adding items to the cart
addItemToCart('product1', 'Awesome T-Shirt', 20.00, 2);
addItemToCart('product2', 'Cool Hat', 15.00);

// 2. Updating the quantity of an item
updateQuantity('product1', 3);  //Increase quantity of product1 to 3

// 3. Removing an item from the cart
//removeItemFromCart('product2');

// Display the cart contents
echo "<h2>Your Cart</h2>";
echo "<ul>";
$total = 0;

if (isset($_SESSION['cart'])) {
  foreach ($_SESSION['cart'] as $productId => $item) {
    $name = $item['name'];
    $price = $item['price'];
    $quantity = $item['quantity'];
    $subtotal = $price * $quantity;

    echo "<li>" . $name . " - $" . $price . " x " . $quantity . " = $" . $subtotal . "</li>";
    $total += $subtotal;
  }
} else {
  echo "<li>Your cart is empty.</li>";
}

echo "</ul>";
echo "<p><strong>Total: $" . $total . "</strong></p>";
?>


<?php

// Include the session class (if not already included)
// You'll likely have this in your base PHP file.
session_start();

// --------------------------------------------------
//  Session Management Functions
// --------------------------------------------------

/**
 * Adds an item to the cart session.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize an empty cart array
  }

  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in the cart, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in the cart, add it with quantity 1
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => 'Product Name (This is just an example)' // Add product details here
    ];
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the item.
 * @return void
 */
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Item not found, you could handle this differently (e.g., add it)
    // Or you could return an error if you want to prevent adding non-existent products.
    // For this example, we'll just do nothing.  Consider logging an error if you want.
    echo "Error: Product ID $product_id not found in cart.";  // Optional error handling
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}


// --------------------------------------------------
//  Example Usage -  Simulating user actions
// --------------------------------------------------

// Add some items to the cart
addToCart(1, 2);  // Add product with ID 1, quantity 2
addToCart(2, 1);  // Add product with ID 2, quantity 1
addToCart(1, 3); // Add more of product 1


// Update the quantity of product 1 to 5
updateCartQuantity(1, 5);

// Remove product 2 from the cart
removeCartItem(2);

// Display the contents of the cart
echo "<h2>Cart Contents:</h2>";
if (!empty($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $product_details['quantity'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// Clear the cart
// clearCart();
// echo "Cart cleared.";
?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Add the product to the cart array
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Update the quantity
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // Product not found, handle error or don't update
    // You could add a logging mechanism here for debugging.
    // For example: error_log("Product $product_id not found in cart.");
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Remove the item from the array
  unset($_SESSION['cart'][$product_id]);

  // Optionally, clear the cart if it's empty after removal
  if (empty($_SESSION['cart'])) {
    unset($_SESSION['cart']);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Returns cart or empty array if session is not initialized.  Use null coalescing operator.
}


// --- Example Usage ---

// Add a product to the cart
addToCart(1, "Awesome T-Shirt", 20.00, 2); // product_id, name, price, quantity
addToCart(2, "Cool Hat", 15.00, 1);

// Get the cart contents
$cart = getCartContents();

// Print the cart contents
echo "<h2>Your Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Update the quantity of a product
updateQuantity(1, 3); // Increase quantity of Awesome T-Shirt to 3

// Get the cart contents again to see the updated quantity
$cart = getCartContents();
echo "<h2>Your Cart (Updated):</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
    echo "</ul>";
}


// Remove an item from the cart
removeCartItem(2); // Remove the Cool Hat
echo "<br>";

// Get the cart contents again to see the updated quantity
$cart = getCartContents();
echo "<h2>Your Cart (After Removal):</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Example Usage:  You'd typically get these values from a form or database

// Add an item to the cart
addToCart(1, 'T-Shirt', 20.00, 2); // Product ID 1, Name, Price, Quantity
addToCart(2, 'Jeans', 50.00, 1);   // Product ID 2

// Remove an item
//removeCartItem(1);

// Update quantity of an item
//updateCartQuantity(1, 3);



// Display the cart contents (for demonstration)
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][$product_id] = [
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage (Demonstration) ---

// 1. Add an item to the cart
addToCart(1, "Awesome T-Shirt", 20, 2);
addToCart(2, "Cool Mug", 10, 3);

// 2. Display the cart items
echo "<h2>Your Cart</h2>";
if (empty(getCartItems())) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach (getCartItems() as $product_id => $item) {
    echo "<li>";
    echo "Product: " . $item['name'] . "<br>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Total for this item: $" . ($item['price'] * $item['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// 3. Update the quantity of a product
updateCartQuantity(1, 5);  // Change quantity of Awesome T-Shirt to 5

// 4. Calculate and display the total
$total = calculateTotal();
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";


// 5. Remove an item from the cart (Example)
//removeCartItem(2); //Uncomment this line to remove the cool mug.

?>


<?php
session_start();

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of a product in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// --- Example Usage ---

// 1. Add an item to the cart
addToCart(1, 'T-Shirt', 20, 2); // product_id, name, price, quantity
addToCart(2, 'Jeans', 50, 1);

// 2. Display the cart contents
echo "<h2>Cart Items:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";

// 3. Remove an item from the cart
removeFromCart(1);

// 4.  Update the quantity of an item
updateQuantity(2, 3); // Increase the quantity of Jeans to 3

// 5. Display the updated cart contents
echo "<h2>Updated Cart Items:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";
?>


<?php
session_start();

// Check if the cart is empty
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example Usage (Simulating user interaction - replace with actual product data)

// Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); //Adding more of the Laptop


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for this product:</strong> $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item from the cart
// removeFromCart(2);

//Example: Update quantity of an item
//updateQuantity(1, 5);

// You'll likely want to implement more robust methods for adding, removing, and updating items
// based on user interaction (e.g., from a form).  This code provides a foundational example.
?>


<?php
session_start(); // Start the session

// --- Cart Variables ---
$cart = [];  // Array to store items in the cart
$item_id = 1; // Unique ID for each item (for tracking)
$item_name = "Product A";
$item_price = 10.00;
$item_quantity = 1;

// --- Add to Cart Function ---
function add_to_cart($item_id, $item_name, $item_price, $item_quantity) {
    global $cart;

    // Check if the item is already in the cart
    if (isset($cart[$item_id])) {
        $cart[$item_id]['quantity'] += $item_quantity;
    } else {
        // Item not in cart, add it
        $cart[$item_id] = [
            'id' => $item_id,
            'name' => $item_name,
            'price' => $item_price,
            'quantity' => $item_quantity
        ];
    }
}


// --- Example Usage (Add items to the cart) ---
add_to_cart($item_id, $item_name, $item_price, 2);
add_to_cart($item_id, $item_name, $item_price, 1);
add_to_cart($item_id, "Another Item", 25.00, 1);


// --- Display the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// --- Calculate Total Cart Value ---
$total = 0;
foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
}
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";

?>


<?php
session_start();

// Cart data (in a real application, this would likely come from a database)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, increase quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
  global $cart;
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the total cart value
function get_cart_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// Example usage -  Simulating adding items to the cart
add_to_cart(1, "T-Shirt", 20, 2);
add_to_cart(2, "Jeans", 50, 1);
add_to_cart(1, "T-Shirt", 20, 3); // Adding more of the same item

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . get_cart_total() . "</strong></p>";
}

// Example of removing an item
//remove_from_cart(2);

// Example of updating the quantity
//update_quantity(1, 5);


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If the product is in the cart, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Otherwise, add the product to the cart with its quantity
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Example usage:
// Adding a product to the cart
addToCart(1, "Awesome T-Shirt", 20.00, 2);
addToCart(2, "Cool Mug", 10.00, 1);

// Displaying the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Removing an item from the cart
// removeCartItem(1); // Uncomment this line to remove the Awesome T-Shirt

// Updating the quantity of an item in the cart
// updateCartQuantity(2, 3); // Uncomment this line to change the quantity of the Cool Mug to 3
?>


<?php
session_start();

// Function to add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists, if not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart array
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new item to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage:  Let's say we have products with IDs 1, 2, and 3
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 3); // Add more of the same item

// Function to remove item from cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example usage: Remove the mouse
removeCartItem(2);

// Function to update quantity of an item in cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example usage: Update the quantity of the laptop to 2
updateCartQuantity(1, 2);

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Cart Contents</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $item['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    // Add a link to remove the item
    echo "<a href='cart.php?remove=$product_id'>Remove</a>";
    echo "</li>";
  }
  echo "</ul>";
}

// Display the cart contents
displayCart();

// Example:  You would typically include this in an HTML form
// to handle adding items to the cart.  This is just illustrative.
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <a href="checkout.php">Checkout</a>  <!-- Example link to checkout page -->

  <form action="cart.php" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id" required>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1" min="1">
    <button type="submit">Add to Cart</button>
  </form>

</body>
</html>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}

// Example Usage -  Simulated Product Data (Replace with your actual data)
$products = [
  1 => ['name' => 'Shirt', 'price' => 20],
  2 => ['name' => 'Pants', 'price' => 30],
  3 => ['name' => 'Shoes', 'price' => 50],
];


//  Simulate user interactions -  Add some items to the cart

// Add a shirt
addToCart(1, $products[1]['name'], $products[1]['price'], 2);

// Add a pair of pants
addToCart(2, $products[2]['name'], $products[2]['price'], 1);

//Update the quantity of a shirt
updateQuantity(1, 3);


// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


//Calculate the total
$total = calculateTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";
?>


<?php

session_start(); // Start the session

// Session variables for the cart
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    global $cart;
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $cart;
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  foreach ($cart as $item) {
    $total_item_value = $item['price'] * $item['quantity'];
    $total += $total_item_value;
  }
  return $total;
}


// *** Example Usage (Illustrative - Replace with your actual product data) ***

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 1); // Add another Laptop - demonstrates handling duplicates

// Display the cart contents
echo "<h2>Your Cart</h2>";
echo "<ul>";
$cart_contents = getCartContents();

foreach ($cart_contents as $product_id => $item) {
  echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}

echo "</ul>";

echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";

// Example: Remove an item
// removeFromCart(2);

// Example: Update quantity
// updateQuantity(1, 3);


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'][$product_id])) {
    // Item already exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => 'Product Name' // Replace with actual product name
    ];
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array representing the cart contents.
 */
function getCart() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulating a request) ---

// 1.  Adding items to the cart (simulated)
//   This is just for demonstration.  In a real application, this would be
//   triggered by a user clicking an "Add to Cart" button.

addToCart(101, 2); // Add 2 of product ID 101
addToCart(102, 1);  // Add 1 of product ID 102
addToCart(101, 1); // Add 1 of product ID 101 (updating quantity)


// 2.  Displaying the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>";
    echo "Product ID: " . $product_id . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Product Name: " . $item['name'] . "<br>"; // Replace with actual product name
    echo "</li>";
  }
  echo "</ul>";
}


// 3.  Removing an item from the cart (simulated)
//   Let's remove product 102
// removeFromCart(102);

// To test the removal, uncomment the following line:
// echo "<br><br>After removing product 102:<br>";
// print_r($_SESSION['cart']);
?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($productId, $productName, $price, $quantity = 1) {
  $_SESSION['cart'][] = array(
    'id' => $productId,
    'name' => $productName,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to remove an item from the cart
function removeCartItem($productId) {
  $cart = $_SESSION['cart'];

  // Iterate through the cart and remove the item with the matching ID
  foreach ($cart as $index => $item) {
    if ($item['id'] == $productId) {
      unset($_SESSION['cart'][$index]);
      // Re-index the array after deleting an element to avoid gaps
      $_SESSION['cart'] = array_values($_SESSION['cart']);
      return true;
    }
  }

  return false; // Item not found
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($productId, $quantity) {
  $cart = $_SESSION['cart'];

  // Iterate through the cart and find the item to update
  foreach ($cart as $index => $item) {
    if ($item['id'] == $productId) {
      $cart[$index]['quantity'] = $quantity;
      return true;
    }
  }

  return false; // Item not found
}


// Example Usage:  (This is just for demonstration)

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);


// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove an item
if (isset($_POST['remove_item_id'])) {
  $productIdToRemove = $_POST['remove_item_id'];
  removeCartItem($productIdToRemove);
  echo "<p>Item removed from cart.</p>";
}

// Update quantity
if (isset($_POST['update_quantity'])) {
    $productId = $_POST['product_id'];
    $newQuantity = $_POST['quantity'];
    updateCartQuantity($productId, $newQuantity);
    echo "<p>Quantity updated for product " . $productId . "</p>";
}


// Optional:  Display remaining items in the cart.  This is useful for a more complete cart system
echo "<br><br><h2>Remaining Items in Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start();

// This is the cart array.  It will hold all the items and their quantities.
$cart = array();

// Functions to handle cart operations
function addToCart($product_id, $quantity = 1)
{
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = 0;
    }
    $cart[$product_id] += $quantity;
}

function getCart()
{
    return $cart;
}

function clearCart()
{
    $cart = array();
}

function cartTotal($cart)
{
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        // Assuming you have a way to get product prices.  This is a placeholder.
        $price = getProductPrice($product_id); 
        $totalForProduct = $price * $quantity;
        $totalForProduct = $price * $quantity;
        $total += $totalForProduct;
    }
    return $total;
}

// --- Example Usage / Cart Interaction (Demonstration) ---

// 1. Adding Items to the Cart
$product1_id = 1;
$product1_name = "T-Shirt";
$product1_price = 20;

$product2_id = 2;
$product2_name = "Jeans";
$product2_price = 50;

// Add a T-Shirt to the cart (quantity 2)
addToCart($product1_id, 2);

// Add some Jeans to the cart (quantity 1)
addToCart($product2_id, 1);

// 2. Displaying the Cart Contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        // Display product details (replace with your product data retrieval)
        $product_name = getProductName($product_id);  // Replace with your method
        echo "<li>$product_name (Quantity: $quantity) - Price: $product_price</li>";
    }
    echo "</ul>";
    echo "<p>Total: " . number_format(cartTotal($cart)) . "</p>";  // Use cartTotal()
}

// 3. Clearing the Cart (Example)
// clearCart();
// echo "<p>Cart cleared.</p>";

?>


<?php

// Initialize session
session_start();

// Cart array (this will hold the items in the cart)
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart total
function calculateCartTotal() {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage (Simulating a simple shopping cart interaction) ---

// 1. Add an item to the cart
addToCart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, $1200, Quantity 1
addToCart(2, "Mouse", 25, 2); // Product ID 2, Mouse, $25, Quantity 2

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}

// 2. Remove an item from the cart
// removeFromCart(1);  // Remove the Laptop

// 3. Update the quantity of an item
// updateQuantity(2, 3); // Change the Mouse quantity to 3

// Display the cart contents again (to see the changes)
echo "<h2>Shopping Cart (Updated)</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}

?>


<?php

session_start();

// Assuming you have a database connection established elsewhere (e.g., in a config file or class)
// For simplicity, we'll represent the database connection with a variable 'db'
// In a real application, you'd use mysqli, PDO, or your preferred database library.

// Sample Product Data (replace with your actual data source)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$product_id])) {
        // Item already in cart, increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it
        $_SESSION['cart'][$product_id] = [
            'id' => $product_id,
            'name' => $products[$product_id]['name'],
            'price' => $products[$product_id]['price'],
            'quantity' => $quantity
        ];
    }
}

// Function to view the cart
function displayCart()
{
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<h2>Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_details) {
        echo "<li>";
        echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " (Quantity: " . $item_details['quantity'] . ")";
        echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
        echo "<input type='hidden' name='product_id' value='" . $item_id . "'>";
        echo "<input type='submit' name='remove' value='Remove'> ";
        echo "</li>";
    }
    echo "</ul>";

    echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
    echo "<input type='submit' name='empty_cart' value='Empty Cart'>";
    echo "</form>";
}

// Handle actions from the cart page

// Remove an item from the cart
if (isset($_POST['remove'])) {
    $product_id = $_POST['remove'];
    unset($_SESSION['cart'][$product_id]);
}

// Empty the entire cart
if (isset($_POST['empty_cart'])) {
    unset($_SESSION['cart']);
}

// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>
    <h1>Shopping Cart Example</h1>

    <!-- Buttons to add items to the cart -->
    <h2>Add Items</h2>
    <?php
    foreach ($products as $id => $product) {
        echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
        echo "<input type='hidden' name='product_id' value='" . $id . "'>";
        echo "<button type='submit' name='add_to_cart' value='" . $id . "'>" . $product['name'] . " - $" . $product['price'] . "</button>";
        echo "</form>";
    }
    ?>

</body>
</html>


<?php
session_start();

// Define some product information (for demonstration)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20, 'quantity' => 1],
    2 => ['name' => 'Jeans', 'price' => 50, 'quantity' => 2],
    3 => ['name' => 'Hat', 'price' => 15, 'quantity' => 1],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'][$productId])) {
        // Item already in cart, update quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it
        $_SESSION['cart'][$productId] = [
            'name' => $products[$productId]['name'],
            'price' => $products[$productId]['price'],
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to get the cart total
function calculateCartTotal()
{
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Usage (Simulating User Interactions) ---

// 1. User adds a T-Shirt
addToCart(1);

// 2. User adds 2 Jeans
addToCart(2, 2);

// 3. User removes the Hat (product ID 3)
removeFromCart(3);

// 4. Display the cart contents
echo "<h2>Cart Contents</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $itemId => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

echo "<p><strong>Total:</strong> $" . calculateCartTotal() . "</p>";

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// ---  Functions to manage the cart  ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add a new entry
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Remove an item from the cart by product ID
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Calculate the total cart value
function calculate_cart_total() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}


// --- Example usage (for demonstration) ---

// Add a product to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p>Total Cart Value: $" . calculate_cart_total() . "</p>";
}

// Example: Remove an item
//remove_from_cart(2);

// Example: Update the quantity of an item
//update_quantity(1, 2);
?>


<?php
session_start();

// Function to add items to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increase quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the cart quantity
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart items
function get_cart_items() {
  return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// --- Example Usage ---

// Add a product to the cart
add_to_cart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, price 1200, quantity 1
add_to_cart(2, "Mouse", 25, 2);  // Product ID 2, Mouse, price 25, quantity 2

// Display the cart items
echo "<h2>Your Shopping Cart</h2>";
if (empty(get_cart_items())) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach (get_cart_items() as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $item['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for Item:</strong> $" . $item['price'] * $item['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value:</strong> $" . calculate_total() . "</p>";
}

// Example: Update quantity
update_cart_quantity(1, 2); // Increase quantity of Laptop to 2

// Example: Remove an item
remove_from_cart(2); // Remove Mouse from cart

// Display updated cart
echo "<h2>Your Shopping Cart (Updated)</h2>";
if (empty(get_cart_items())) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach (get_cart_items() as $product_id => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $item['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for Item:</strong> $" . $item['price'] * $item['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total Cart Value:</strong> $" . calculate_total() . "</p>";
}
?>


<?php
session_start();

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        // Item already in cart, update quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Item not in cart, add a new entry
        $_SESSION['cart'][$productId] = [
            'quantity' => $quantity,
            'name' => getProductName($productId) // Optionally, get the name for display
        ];
    }
}


/**
 * Gets the name of a product based on its ID.
 *  (This is a placeholder - replace with your actual database query)
 * @param int $productId The ID of the product.
 * @return string The product name, or an empty string if not found.
 */
function getProductName($productId)
{
    // Replace this with your actual database query.
    // This example just returns a hardcoded name for demonstration.
    if ($productId == 1) {
        return "Awesome T-Shirt";
    } elseif ($productId == 2) {
        return "Cool Mug";
    }
    return "";
}


/**
 * Retrieves the items in the cart.
 *
 * @return array The array of items in the cart.
 */
function getCartItems()
{
    return isset($_SESSION['cart']) ? $_SESSION['cart'] : [];
}


/**
 * Removes an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}


// --- Example Usage ---

// 1. Add an item to the cart
addToCart(1); // Adds one Awesome T-Shirt to the cart
addToCart(2, 2); // Adds two Cool Mugs to the cart

// 2. Get the cart items
$cart = getCartItems();
echo "<h2>Cart Items:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $id => $item) {
        echo "<li>Product ID: " . $id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['name'] . "</li>";
    }
    echo "</ul>";
}

// 3. Remove an item
removeFromCart(1); // Remove one Awesome T-Shirt

// 4. Get the cart items after removal
$cart = getCartItems();
echo "<br><br><h2>Cart Items After Removal:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $id => $item) {
        echo "<li>Product ID: " . $id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['name'] . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// Function to add items to the cart
function addItemToCart($productId, $productName, $price, $quantity) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the new item to the cart array
  $_SESSION['cart'][$productId] = array(
    'name' => $productName,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// *** Example Usage (Simulated Product Info - Replace with your DB queries) ***

// Let's assume we have these products:
// Product ID: 1 - Name: "Laptop", Price: 1000,  Quantity: 1
// Product ID: 2 - Name: "Mouse", Price: 25,        Quantity: 2
// Product ID: 3 - Name: "Keyboard", Price: 75,     Quantity: 1

// 1. Adding items to the cart:
addItemToCart(1, "Laptop", 1000, 1);
addItemToCart(2, "Mouse", 25, 2);
addItemToCart(3, "Keyboard", 75, 1);



// 2. Updating the cart (e.g., increase the quantity of the mouse)
updateQuantity(2, 5); // Change the quantity of "Mouse" to 5

// 3. Removing an item from the cart:
// removeItemFromCart(1); // Remove the "Laptop" from the cart

// 4. Displaying the cart contents:
$cartContents = getCartContents();

if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<h2>Your Shopping Cart:</h2>";
  echo "<ul>";
  foreach ($cartContents as $productId => $item) {
    echo "<li>Product: " . $item['name'] . " (ID: " . $productId . ") - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'quantity' => $quantity,
    'price' => $price
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return array();
  }
}

// Example Usage (simulating a form submission)

// Assume this comes from a form submission with product_id, quantity, etc.
// For demonstration purposes, let's hardcode some data:
$product_id = 1;
$quantity = 2;
$product_name = "Awesome T-Shirt";
$price = 25.00;

// Add the item to the cart
addToCart($product_id, $quantity, $product_name, $price);

// Display the cart contents
$cart = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item_data) {
    echo "<li>" . $item_data['name'] . " - Quantity: " . $item_data['quantity'] . " - Price: $" . $item_data['price'] . "</li>";
  }
  echo "</ul>";

  //  Example: Update quantity (using a hypothetical form input)
  //  Assume the user changed the quantity of item 1 to 5
  //  updateCartQuantity(1, 5);
  //  echo "<ul>";
  //  foreach ($cart as $item_id => $item_data) {
  //    echo "<li>" . $item_data['name'] . " - Quantity: " . $item_data['quantity'] . " - Price: $" . $item_data['price'] . "</li>";
  //  }
  //  echo "</ul>";

  // Example: Remove an item
  //  removeCartItem(1);
  //  echo "<ul>";
  //  foreach ($cart as $item_id => $item_data) {
  //    echo "<li>" . $item_data['name'] . " - Quantity: " . $item_data['quantity'] . " - Price: $" . $item_data['price'] . "</li>";
  //  }
  //  echo "</ul>";
}

?>


<?php

// Session handling is crucial for cart functionality.  This example demonstrates
// setting up a basic cart session.  It's a starting point; you'll likely want
// to add more robust features like database integration and more sophisticated
// quantity/price handling.

// 1. Start the Session (if not already started)
session_start();

// 2. Initialize the Cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// 3. Functions to Handle Cart Operations

// Add an item to the cart
function add_to_cart($product_id, $quantity = 1, $price = 0) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'quantity' => $quantity,
            'price'    => $price
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}


// Remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Get the contents of the cart
function get_cart_contents() {
    return $_SESSION['cart'];
}


// 4. Example Usage (Demonstration - Replace with your actual product information and UI)

//  Let's add some items to the cart.
add_to_cart(101, 2); // Product ID 101, quantity 2
add_to_cart(102, 1); // Product ID 102, quantity 1
add_to_cart(101, 1); // Product ID 101, quantity 1 (adding to an existing item)

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_items = get_cart_contents();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: $" . $item['price'] . "</li>";
    }
}
echo "</ul>";

// Example of Removing an Item
// remove_from_cart(102);

// Example of Updating the quantity of an item.
// update_cart_quantity(101, 3);



?>


<?php

// Start a session (if not already started)
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart(int $product_id, int $quantity = 1) {
  // Check if the cart already exists in the session.
  if (!isset($_SESSION['cart'])) {
    // If not, initialize the cart as an empty array.
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If the product exists, increment the quantity.
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // If the product doesn't exist, add it to the cart with the specified quantity.
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity(int $product_id, int $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        // Product not in cart, add it
        addToCart($product_id, $quantity);
        return;
    }
    $_SESSION['cart'][$product_id] = $quantity;
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents (an array of items with their quantities).
 */
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart doesn't exist
}


/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function getCartItemCount() {
    return count(getCartContents());
}


/**
 * Gets the total value of the cart.  This assumes a fixed price per item.
 *
 * @param array $cartContents  The cart contents array.
 * @param int $productPrice The price of a single product.
 * @return float
 */
function getCartTotal(array $cartContents, int $productPrice) {
    $total = 0;
    foreach ($cartContents as $product_id => $quantity) {
        $totalForProduct = $productPrice * $quantity;
        $totalForProduct = $productPrice * $quantity;
        $total += $totalForProduct;
    }
    return $total;
}


// --- Example Usage (for demonstration) ---

// Add some items to the cart:
addToCart(101, 2); // Product ID 101, quantity 2
addToCart(102, 1); // Product ID 102, quantity 1
updateCartQuantity(101, 3); // Update quantity of product 101 to 3

// Display the cart contents:
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

// Get the item count:
$itemCount = getCartItemCount();
echo "<br>Total Items in Cart: " . $itemCount . "<br>";

// Get the cart total (assuming a product price of $20)
$productPrice = 20;
$cartTotal = getCartTotal($cart, $productPrice);
echo "Cart Total: $" . $cartTotal . "<br>";

// Remove an item:
removeCartItem(102);

// Display cart contents after removal
$cart = getCartContents();
echo "<h2>Cart Contents After Removal:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions to interact with the cart ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add (default: 1).
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart with a quantity of 1
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity, 'price' => $product_price); // Assuming you have a $product_price variable
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// --- Example Usage (Illustrative - Replace with your actual logic) ---

//  Simulate retrieving product data (replace with your database query)
$product1_id = 1;
$product1_price = 20;

$product2_id = 2;
$product2_price = 35;

// Add product 1 to the cart with a quantity of 2
addToCart($product1_id, 2);

// Add product 2 to the cart with a quantity of 1
addToCart($product2_id);

// Update the quantity of product 1 to 5
updateQuantity($product1_id, 5);


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item from the cart
// removeFromCart($product2_id);

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example usage (demonstration -  replace with your actual data/forms)
// -------------------------------------------------------------------

// Add a product to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 3); // Add more of the same item

// Remove an item
// removeFromCart(2);

// Update the quantity of a product
// updateQuantity(1, 2); // Change quantity of laptop to 2

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total cost
  $total_cost = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total_cost += $product_details['price'] * $product_details['quantity'];
  }
  echo "<p><strong>Total Cost: $" . $total_cost . "</strong></p>";
}
?>


<?php
session_start();

// ... (rest of the code, including addToCart, removeFromCart, updateQuantity) ...

// Display a form to add items to the cart
echo "<h2>Add Items to Cart</h2>";
echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
echo "<ul>";
// Product 1
echo "<li>";
echo "<label for='product1'>Laptop:</label>";
echo "<input type='number' id='product1' name='product1' value='1'>";
echo "<button type='submit' name='add_product1'>Add to Cart</button>";
echo "</li>";

// Product 2
echo "<li>";
echo "<label for='product2'>Mouse:</label>";
echo "<input type='number' id='product2' name='product2' value='1'>";
echo "<button type='submit' name='add_product2'>Add to Cart</button>";
echo "</li>";
echo "</ul>";
echo "</form>";

// Handle form submission (if add_product1 or add_product2 is submitted)
if (isset($_POST['add_product1'])) {
    addToCart(1, 'Laptop', 1200, $_POST['product1']);
}
if (isset($_POST['add_product2'])) {
    addToCart(2, 'Mouse', 25, $_POST['product2']);
}


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------------------------------------
//  Example Functions - Modify as needed for your specific application
// --------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity of the product.
 * @return void
 */
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    // If the item isn't in the cart, you might want to add it with a quantity of 1
    addToCart($product_id, $quantity); 
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets the items in the cart.
 *
 * @return array An array representing the cart contents.  Returns an empty array if the cart is empty.
 */
function getCart() {
  return $_SESSION['cart'];
}



// --------------------------------------------------
// Example Usage (Illustrative - Replace with your actual logic)
// --------------------------------------------------

//  Simulating a product ID and quantity from a form submission.
//  In a real application, this would come from a form or other request.

// Add a product to the cart
// addToCart(123, 2); // Add 2 units of product ID 123

// Update the quantity of an item
// updateCartItem(123, 3); // Change quantity of product 123 to 3

// Remove an item
// removeFromCart(123);


//  Get the current cart contents
$cart_items = getCart();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
  echo "</ul>";
}

?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions to Manage the Cart ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add. Defaults to 1.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array containing the products in the cart.
 */
function get_cart_items() {
  return $_SESSION['cart'];
}


/**
 * Calculates the total price of the cart.
 * 
 * @param array $cart_items The cart items to use for the calculation.
 * @return float The total price.
 */
function calculate_total(array $cart_items) {
    $total = 0;
    foreach ($cart_items as $product_id => $quantity) {
        // Assuming you have a product database/data to get the price
        // Replace this with your actual price retrieval logic
        $product_price = get_product_price($product_id);  
        $total_price_for_item = $product_price * $quantity;
        $total += $total_price_for_item;
    }
    return $total;
}


// --- Example Usage (Simulated) ---

// Add some products to the cart
add_to_cart(1, 2); // Product ID 1, quantity 2
add_to_cart(2, 1); // Product ID 2, quantity 1
add_to_cart(1, 3); // Product ID 1, quantity 3

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = get_cart_items();

foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";


// Calculate and display the total
$total = calculate_total($cart_items);
echo "<p><strong>Total Price: $" . $total . "</strong></p>";


// Remove a product from the cart
remove_from_cart(2);

// Display the cart contents after removal
echo "<p><strong>Cart Contents after removing product 2:</strong></p>";
$cart_items = get_cart_items();

foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}

// Update quantity of product 1
update_cart_quantity(1, 5);
echo "<p><strong>Cart Contents after updating quantity of product 1 to 5:</strong></p>";

$cart_items = get_cart_items();
foreach ($cart_items as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
      'total' => $price * $quantity
    );
  } else {
    // Item already in cart - increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
        $_SESSION['cart'][$product_id]['total'] = $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
    }
}


// Example usage (for demonstration)
// You would typically get this data from your database or product catalog
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);

// Add items to the cart
add_to_cart(1, 'Laptop', $products[1]['price']);
add_to_cart(2, 'Mouse', $products[2]['price'], 2); // Add 2 mice
add_to_cart(3, 'Keyboard', $products[3]['price']);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['total'] . "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item
// remove_from_cart(2);

// Example: Update quantity
// update_quantity(1, 3); // Change the quantity of Laptop to 3

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --------------------- Functions for Cart Management ---------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param string $product_name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity of the product being added.
 */
function add_to_cart($product_id, $product_name, $price, $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        // Item already in the cart, update the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}


/**
 * Removes an item from the cart by its product ID.
 *
 * @param int $product_id The ID of the product to remove.
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 */
function update_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Gets the cart contents.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
    return $_SESSION['cart'];
}

// --------------------- Example Usage ---------------------

// Add some items to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);
add_to_cart(1, "Laptop", 1200, 1); // Add another laptop to increase quantity


// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example of removing an item
//remove_from_cart(2);
//echo "<p>Item removed from cart.</p>";


//Example of updating quantity
//update_quantity(1, 3);
//echo "<p>Quantity of Laptop updated to 3</p>";



?>


<?php
session_start();

// Define the cart as an array.  This could be a database table, a file, etc.
// For simplicity, we'll use an array here.
$cart = [];

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addItemToCart(int $product_id, int $quantity) {
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = 0; // Initialize quantity if not already present
    }
    $cart[$product_id] += $quantity;
}

/**
 * Retrieves the cart contents.
 *
 * @return array The cart as an array of product IDs and quantities.
 */
function getCart() {
    return $cart;
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function updateCartItem(int $product_id, int $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id] = $new_quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeItemFromCart(int $product_id) {
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
    $cart = [];
}

// Example Usage:  This is just for demonstration.  You'd likely get this data
// from a form submission or API call.

// 1. Add an item to the cart
addItemToCart(1, 2); // Add 2 of product ID 1
addItemToCart(2, 1); // Add 1 of product ID 2


// 2. Get the current cart contents
$current_cart = getCart();
echo "Current Cart Contents: <br>";
print_r($current_cart);

// 3. Update an item's quantity
updateCartItem(1, 5); // Change quantity of product 1 to 5
echo "<br>Cart after updating quantity of product 1: <br>";
print_r($current_cart);

// 4. Remove an item
removeItemFromCart(2);
echo "<br>Cart after removing product 2: <br>";
print_r($current_cart);


// 5. Clear the cart
clearCart();
echo "<br>Cart after clearing: <br>";
print_r($current_cart);

//  Demonstrating session usage (saving and retrieving the cart)

//  This example shows how you'd store the cart in a session.
if (isset($_POST['add_to_cart'])) {
    // Simulate a form submission
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    addItemToCart($product_id, $quantity);
    //  You would typically handle a redirect here after adding to the cart.
    //  For example:  header("Location: cart.php");
}

if (isset($_GET['clear_cart'])) {
    clearCart();
    // Redirect to the cart page or other appropriate action
    header("Location: cart.php");
}

?>


<?php

session_start();

// Sample products (replace with your actual product data)
$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];

// Function to add an item to the cart
function add_to_cart($product_id, $quantity = 1)
{
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize an empty cart array
  }

  // Check if the product exists
  if (isset($products[$product_id])) {
    $product = $products[$product_id];

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      // Add the product to the cart
      $_SESSION['cart'][$product_id] = [
        'id' => $product_id,
        'name' => $product_id, // Using ID as name for simplicity
        'price' => $product_id,  // Using ID as price for simplicity
        'quantity' => $quantity,
      ];
    }
  }
}

// Example usage:
// Add one T-Shirt to the cart
add_to_cart(1);

// Add two Jeans to the cart
add_to_cart(2, 2);

// Add one pair of Shoes to the cart
add_to_cart(3);

// Display the cart contents
echo "<h2>Cart Contents:</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    echo "<li>" . $item_details['name'] . " - $" . $item_details['price'] . " (Quantity: " . $item_details['quantity'] . ")</li>";
  }
  echo "</ul>";
}


// Example: Remove an item from the cart (optional)
// Function to remove an item from the cart
function remove_from_cart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example: Remove the T-Shirt
//remove_from_cart(1);

// Display the cart contents after removal (optional)
// echo "<h2>Cart Contents After Removal:</h2>";
// if (empty($_SESSION['cart'])) {
//     echo "<p>Your cart is empty.</p>";
// } else {
//     echo "<ul>";
//     foreach ($_SESSION['cart'] as $item_id => $item_details) {
//         echo "<li>" . $item_details['name'] . " - $" . $item_details['price'] . " (Quantity: " . $item_details['quantity'] . ")</li>";
//     }
//     echo "</ul>";
// }


?>


<?php
session_start();

// Define session variables for the cart
$_SESSION['cart'] = array(); // Initialize the cart as an empty array
$_SESSION['cart_total'] = 0;
$_SESSION['cart_count'] = 0;

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $session; // Access the session variables

  // Check if the item is already in the cart
  $item_found = false;
  foreach ($session['cart'] as $key => $cart_item) {
    if ($cart_item['product_id'] == $product_id) {
      // Increment the quantity if the item is found
      $session['cart'][$key]['quantity'] += $quantity;
      $session['cart_total'] += $quantity * $price;
      $session['cart_count'] += $quantity;
      $item_found = true;
      break;
    }
  }

  // If the item is not in the cart, add it as a new entry
  if (!$item_found) {
    $session['cart'][] = array(
      'product_id' => $product_id,
      'product_name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
    $session['cart_total'] += $quantity * $price;
    $session['cart_count'] += $quantity;
  }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  global $session;

  // Iterate through the cart array and remove the item
  foreach ($session['cart'] as $key => $cart_item) {
    if ($cart_item['product_id'] == $product_id) {
      unset($session['cart'][$key]);
      $session['cart_total'] -= $cart_item['price'] * $cart_item['quantity'];
      $session['cart_count'] -= $cart_item['quantity'];
      break;
    }
  }
}


// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    global $session;

    // Find the item in the cart
    foreach ($session['cart'] as $key => $cart_item) {
        if ($cart_item['product_id'] == $product_id) {
            $session['cart'][$key]['quantity'] = $quantity;
            $session['cart_total'] -= $cart_item['price'] * $cart_item['quantity'];
            $session['cart_total'] += $quantity * $price;
            break;
        }
    }
}


// Example Usage (Simulating adding to cart)
// You would typically get this data from a database or other source

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another laptop


// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($session['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($session['cart'] as $key => $cart_item) {
        echo "<li>";
        echo "Product: " . $cart_item['product_name'] . "<br>";
        echo "Price: $" . $cart_item['price'] . "<br>";
        echo "Quantity: " . $cart_item['quantity'] . "<br>";
        echo "Total for this item: $" . ($cart_item['price'] * $cart_item['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p>Total Cart Value: $" . $session['cart_total'] . "</p>";
    echo "<p>Cart Count: " . $session['cart_count'] . "</p>";
}

// Example: Remove an item
// removeCartItem(2);

// Example: Update quantity
// updateCartQuantity(1, 3);  // Update laptop quantity to 3
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the total price of the cart
function calculateTotalPrice() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

// --- Example Usage (Simulating User Interaction) ---

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 3); // Add more of the same laptop

// Display the cart contents
$cart = getCartContents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>" . $item['name'] . " - " . $item['quantity'] . " x $" . $item['price'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . calculateTotalPrice() . "</strong></p>";
}


// --- Example of Updating and Removing Items ---
// updateQuantity(2, 5); // Increase the quantity of the mouse to 5
// removeFromCart(1);    // Remove the laptop from the cart
?>


<?php

session_start();

// --- Example Cart Data (Replace with database or other storage) ---
$cart = [];

// Function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
  } else {
    $cart = [];
  }

  $item = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = $item;
  }

  // Keep only items with quantity > 0 (optional, but recommended)
  $cart = array_filter($cart, function($item) {
    return $item['quantity'] > 0;
  });
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
    unset($cart[$product_id]);
  }
}

// Function to update quantity of an item in cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];

    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] = $quantity;
    }
  }
}

// Function to get the cart contents
function getCartContents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return [];
  }
}

// Function to clear the cart (session)
function clearCart() {
  unset($_SESSION['cart']);
}


// --- Example Usage (Simulating User Interactions) ---

// Add some items to the cart
addToCart(1, "T-Shirt", 20, 2);
addToCart(2, "Jeans", 50, 1);
addToCart(1, "T-Shirt", 20, 3); // Add more of the same item

// Display the cart contents
$cartContents = getCartContents();
echo "<h2>Your Cart:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Simulate removing an item
//removeFromCart(2);
//echo "<h2>Your Cart after removing jeans:</h2>";
//echo $cartContents;

//Update quantity
//updateQuantity(1, 5);
//echo "<h2>Your Cart after updating T-shirt quantity:</h2>";
//echo $cartContents;

// Clear the cart (e.g., after checkout)
//clearCart();
//echo "<h2>Your Cart after clearing:</h2>";
//echo $cartContents;

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    // If the product is already in the cart, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (Simulated Product Information)
$products = array(
  1 => array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
  2 => array('id' => 2, 'name' => 'Mouse', 'price' => 25),
  3 => array('id' => 3, 'name' => 'Keyboard', 'price' => 75)
);


// ---  Simulating User Interactions (Example) ---

// Add a Laptop to the cart
addToCart(1, $products[1]['name'], $products[1]['price']);

// Add two Mouses to the cart
addToCart(2, $products[2]['name'], $products[2]['price'], 2);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// Remove a Mouse from the cart
removeCartItem(2);

// Get the updated cart contents
$cart = getCartContents();
echo "<h2>Cart Contents (After Removal):</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// Update the quantity of the Laptop to 3
updateCartQuantity(1, 3);

// Get the updated cart contents
$cart = getCartContents();
echo "<h2>Cart Contents (After Quantity Update):</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($productId, $quantity = 1, $productName = null) {
  // Check if the cart already exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add a new item to the cart
    $_SESSION['cart'][$productId] = array(
      'quantity' => $quantity,
      'productName' => $productName ?? $productId // Use productName if provided, otherwise use the product ID
    );
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity) {
  // Check if the cart exists
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  } else {
    // If the product isn't in the cart, do nothing (or perhaps error)
    //  Consider logging an error if this is unexpected
    //  echo "Product ID " . $productId . " not found in cart.";
  }
}

// Function to remove an item from the cart
function removeCartItem($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to clear the cart
function clearCart() {
  unset($_SESSION['cart']);
}

// ------------------------------------------------------------------
//  Example Usage (Simulating user interaction)
// ------------------------------------------------------------------

// Add an item to the cart
addToCart(123, 2); // Product ID 123, quantity 2
addToCart(456, 1, "Awesome Widget"); // Product ID 456, quantity 1, with product name
addToCart(123, 3); // add more of product 123


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
$cart = getCartContents();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . ", Name: " . $item['productName'] . "</li>";
  }
  echo "</ul>";
}


// Simulate updating the quantity of product 123
updateQuantity(123, 5);

echo "<h2>Cart Contents After Update:</h2>";
$cart = getCartContents();
echo "<ul>";
foreach ($cart as $productId => $item) {
  echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . ", Name: " . $item['productName'] . "</li>";
}
echo "</ul>";

// Remove an item
removeCartItem(456);

// Display cart after removal
echo "<h2>Cart Contents After Removal:</h2>";
$cart = getCartContents();
echo "<ul>";
foreach ($cart as $productId => $item) {
  echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . ", Name: " . $item['productName'] . "</li>";
}
echo "</ul>";


// Clear the cart
//clearCart();
//echo "<h2>Cart Contents After Clearing:</h2>";
// $cart = getCartContents();
// echo "<ul>";
// foreach ($cart as $productId => $item) {
//   echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . ", Name: " . $item['productName'] . "</li>";
// }
// echo "</ul>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Management ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param string $name The name of the product.
 * @param float $price The price of the product.
 * @param int $quantity The quantity of the product to add (default: 1).
 */
function add_to_cart($product_id, $name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The contents of the cart.
 */
function get_cart() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total cost of the cart.
 *
 * @return float The total cost.
 */
function calculate_total() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// --- Example Usage ---

// 1. Add an item to the cart
add_to_cart(1, "Awesome T-Shirt", 20.00, 2);
add_to_cart(2, "Cool Mug", 10.00);


// 2. Update the quantity of an item
update_cart_quantity(1, 3); // Increase quantity of Awesome T-Shirt to 3

// 3. Get the cart contents
$cart_items = get_cart();
print_r($cart_items);

// 4. Calculate the total cost
$total = calculate_total();
echo "Total cost: $" . number_format($total, 2) . "<br>";

// 5. Remove an item from the cart
remove_from_cart(2);

// 6. Get the cart contents after removal
$cart_items = get_cart();
print_r($cart_items);
$total = calculate_total();
echo "Total cost: $" . number_format($total, 2) . "<br>";


?>


<?php

// Start a session if it doesn't exist
session_start();

// -----------------------------------------------------
//  Utility Functions (Helper functions)
// -----------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart(int $product_id, int $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product already exists
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the items in the cart.
 *
 * @return array The items in the cart.
 */
function getCart() {
  return $_SESSION['cart'] ?? [];
}

/**
 * Gets the total number of items in the cart.
 *
 * @return int
 */
function cartTotal() {
    $cart = getCart();
    return count($cart);
}

/**
 *  Gets the total price of items in the cart (assuming you have a price for each product)
 * @return float|null
 */
function calculateCartTotal(array $cart) {
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        //  You'll need to replace this with your product price retrieval logic.
        //  This example assumes you have a database or data source to get the price.
        $price = getProductPrice($product_id);
        if ($price !== null) { //Check if price exists
            $totalPrice = $price * $quantity;
            $totalPrice += $totalPrice;
        } else {
            // Handle the case where the product price is not available.
            //  You might log an error, return null, or assign a default value.
            //  For this example, we'll continue with the next product.
        }
    }
    return $totalPrice;
}

/**
 * Mock function to retrieve product price. Replace with your real implementation.
 * @param int $product_id
 * @return int|null
 */
function getProductPrice(int $product_id) {
    //  Replace this with your actual logic to fetch the price from a database or other source.
    //  This is just a placeholder.
    if ($product_id == 1) {
        return 10.00;
    } elseif ($product_id == 2) {
        return 25.50;
    } else {
        return null; // Product not found, or no price available
    }
}

// -----------------------------------------------------
//  Example Usage (Inside your web page)
// -----------------------------------------------------

// Add some items to the cart
addToCart(1, 2); // Add 2 of product 1
addToCart(2);     // Add 1 of product 2
addToCart(1, 3); // Add 3 of product 1

// Display the contents of the cart
echo "<h2>Cart Items:</h2>";
$cartItems = getCart();
if (count($cartItems) > 0) {
    echo "<ul>";
    foreach ($cartItems as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}


// Display the total number of items
echo "<p>Total Items in Cart: " . cartTotal() . "</p>";

// Display the total price
$totalPrice = calculateCartTotal($cartItems);
echo "<p>Total Price: $" . $totalPrice . "</p>"; // Use calculateCartTotal
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --------------------------------------------------
// Helper Functions
// --------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array representing the cart contents.
 */
function getCartContents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cartItems An array of item details (product_id => price).
 * @return float The total price.
 */
function calculateTotalPrice($cartItems) {
  $total = 0;
  foreach ($cartItems as $product_id => $quantity) {
    // Assuming you have a product database or data source to get the price
    $price = getProductPrice($product_id); // Replace with your price retrieval method
    $totalPriceForProduct = $price * $quantity;
    $total += $totalPriceForProduct;
  }
  return $total;
}

// --------------------------------------------------
// Example Usage (Simulated)
// --------------------------------------------------

// Example: Add an item to the cart
addToCart(123, 2); // Add 2 of product ID 123
addToCart(456, 1); // Add 1 of product ID 456

// Example: Update the quantity of an item
updateCartQuantity(123, 5);

// Example: Remove an item from the cart
removeFromCart(456);

// Get the cart contents
$cart = getCartContents();
echo "Cart Contents: <br>";
print_r($cart);

// Calculate the total price
$productPrices = [
  123 => 10.00,  //Price for product 123
  456 => 25.00   //Price for product 456
];
$total = calculateTotalPrice($productPrices, $cart);
echo "Total Price: $" . $total . "<br>";
?>


<?php
session_start();

// Example product information (replace with your actual database or product data)
$product_name = "Awesome T-Shirt";
$product_price = 25.00;
$product_id = 123; // Unique product ID

// Check if the cart is initialized (i.e., if it exists in the session)
if (!isset($_SESSION['cart'])) {
    // Initialize an empty cart array if it doesn't exist
    $_SESSION['cart'] = array();
}

// 1. Add Product to Cart

// Check if the product ID is already in the cart
if (isset($_POST['action']) == 'add' && $_POST['product_id'] == $product_id) {
    // Increment the quantity of the product in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity']++;
    } else {
        // Add the product to the cart with quantity 1
        $_SESSION['cart'][$product_id] = array('quantity' => 1);
    }
}

// 2. Display Cart Contents (for demonstration)

// Calculate the total price
$total_price = 0;
if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        $total_price += $product_data['quantity'] * $product_price;
    }
}

echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        echo "<li>Product: " . $product_name . "<br>";
        echo "  Quantity: " . $product_data['quantity'] . "<br>";
        echo "  Price: $" . number_format($product_price, 2) . "<br>";
        echo "  Total for this item: $" . number_format($product_data['quantity'] * $product_price, 2) . "<br>";
        echo "  <a href='cart_update.php?product_id=" . $product_id . "&action=remove'>Remove</a><br>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . number_format($total_price, 2) . "</p>";
}

?>


<?php
session_start();

if (isset($_GET['product_id']) && $_GET['action'] == 'remove') {
    $product_id = $_GET['product_id'];
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]); // Remove the product from the cart
    }
}
header("Location: cart.php"); // Redirect back to the cart page
exit();
?>


<?php

// Start session management if it's not already
session_start();

// Check if the cart is initialized.  If not, initialize it as an array.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// -----------------------------------------------------------------
//  Example Functions (You'll likely need to adapt these to your needs)
// -----------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        // If the product isn't already in the cart, initialize its count to 1
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        // If the product is already in the cart, increment the quantity
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the contents of the cart.
 *
 * @return array  An array representing the cart contents (product_id => quantity).
 */
function getCart() {
    return $_SESSION['cart'];
}


// -----------------------------------------------------------------
//  Example Usage (Demonstration - You'll integrate this into your application)
// -----------------------------------------------------------------

// Example: Add a product to the cart
addToCart(123);  // Adds one of product ID 123 to the cart
addToCart(456, 3); // Adds 3 of product ID 456 to the cart
addToCart(123, 2); // Adds 2 of product ID 123 to the cart

// Display the contents of the cart
echo "<h2>Your Cart:</h2>";
echo "<ul>";
$cart_items = getCart();
foreach ($cart_items as $product_id => $quantity) {
    //  You'd likely fetch the product details here based on $product_id
    //  e.g., $product = getProductDetails($product_id);
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Example: Remove a product from the cart
// removeFromCart(456);

// Display the updated cart
// echo "<h2>Your Cart:</h2>";
// $cart_items = getCart();
// echo "<ul>";
// foreach ($cart_items as $product_id => $quantity) {
//     echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
// }
// echo "</ul>";

?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions to manage the cart ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    // Item not in cart, initialize its entry
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'name'     => 'Product Name (Placeholder - Replace with actual product name)', // Replace with actual product name
      'price'    => 0  // Replace with actual product price
    );
  } else {
    // Item already in cart, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Handle the case where the item doesn't exist in the cart.
    // You might want to add it with the default quantity, or skip it.
    // For this example, we'll skip it.
    // echo "Product ID " . $product_id . " not found in cart.  Skipping update.
";
  }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of the cart.
 *
 * @return float The total price.
 */
function calculate_total() {
  $total = 0.0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}


// --- Example Usage (Demonstration) ---

// 1. Add an item to the cart
add_to_cart(123); // Add 1 of product ID 123
add_to_cart(456, 2); // Add 2 of product ID 456

// 2. View the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . "<br>";
    echo "  Quantity: " . $item['quantity'] . "<br>";
    echo "  Price: $" . $item['price'] . "<br>";
    echo "  Total for this item: $" . $item['price'] * $item['quantity'] . "</li>";
  }
}
echo "</ul>";

// 3. Update the quantity of an item
update_cart_quantity(123, 5);

echo "<br>";
echo "<h2>Updated Cart Contents:</h2>";
$cart_contents = get_cart_contents();
if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . "<br>";
    echo "  Quantity: " . $item['quantity'] . "<br>";
    echo "  Price: $" . $item['price'] . "<br>";
    echo "  Total for this item: $" . $item['price'] * $item['quantity'] . "</li>";
  }
}

// 4. Remove an item from the cart
remove_from_cart(456);

// 5. Calculate and display the total
$total = calculate_total();
echo "<br><h2>Total Cart Value:</h2>";
echo "<p>Total: $" . $total . "</p>";


?>


<?php

// Start a session if it doesn't exist
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// ---  Example Functions for Cart Operations ---

// Add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment the quantity if the product exists
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart with initial quantity
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Get the contents of the cart
function getCartContents() {
    return $_SESSION['cart'];
}

// Calculate the total cart value
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total_item = $item['price'] * $item['quantity'];
            $total += $total_item;
        }
    }
    return $total;
}


// --- Example Usage (Simulating a form submission) ---

// Simulate a product being added to the cart
// In a real application, this would come from a form submission
// or AJAX request.
// Let's say a user clicked an "Add to Cart" button for product ID 1.
addToCart(1, "Awesome T-Shirt", 20.00, 2);

// Let's say a user clicked an "Add to Cart" button for product ID 2.
addToCart(2, "Cool Mug", 10.00, 1);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_details) {
        echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Calculate and display the total
$total = calculateTotal();
echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";


// ---  Important Notes  ---

// 1. Session Start: The `session_start()` function *must* be called before any other code that uses the session.  It initializes the session and makes the session variables available.

// 2. Session Variables: Session variables are stored on the server and are associated with the user's browser session. This allows you to maintain cart data across multiple pages of a website.

// 3. Security:  Sessions are inherently insecure if not handled properly.  The `session_start()` function itself doesn't provide security. For more secure session handling, you should:
//   - Use HTTPS to encrypt communication between the browser and the server.
//   -  Implement proper session ID management (e.g., using secure random values).
//   -  Consider using session locking to prevent multiple users from accessing the same session.

// 4.  Data Storage:  This example stores cart data in the session.  For more complex applications, you might want to store cart data in a database or a persistent storage mechanism.

// 5.  Error Handling:  In a production environment, you would add error handling to handle cases where session variables are not set or contain invalid data.

// 6.  Scalability: For large-scale applications, consider using a more robust session management system or a dedicated shopping cart solution.
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with initial quantity
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name'     => $product_name,
      'price'    => $price
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  if (empty($_SESSION['cart'])) {
    return 0;
  }

  foreach ($_SESSION['cart'] as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}

// Example Usage (Simulated product data)
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200],
  2 => ['name' => 'Mouse', 'price' => 25],
  3 => ['name' => 'Keyboard', 'price' => 75],
];

// 1. Add an item to the cart
addToCart(1, 1, $products[1]['name'], $products[1]['price']);

// 2. Add another item to the cart
addToCart(2, 2, $products[2]['name'], $products[2]['price']);

// 3. Update the quantity of an item
updateCartItemQuantity(2, 5);


// 4. Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
foreach ($cart as $product_id => $item) {
  echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}
echo "</ul>";

// 5. Calculate and display the cart total
$total = calculateCartTotal();
echo "<p><strong>Cart Total: $" . $total . "</strong></p>";

// 6. Remove an item from the cart
removeFromCart(2);

// 7. Get and display updated cart contents
$cart = getCartContents();
echo "<p><strong>Cart Contents (After Removal):</strong></p>";
echo "<ul>";
foreach ($cart as $product_id => $item) {
  echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
}
echo "</ul>";
?>


<?php

session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increase quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update quantity of an existing item
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return an empty array if cart is empty
}


// Example Usage (Simulated Shopping Cart)
// -------------------------------------

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1); // Product ID 1: Laptop, Quantity: 1
addToCart(2, "Mouse", 25, 2);   // Product ID 2: Mouse, Quantity: 2
addToCart(1, "Laptop", 1200, 2); // Add another laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
$cart = getCartContents();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of updating a quantity
updateCartQuantity(2, 5);

// Display the updated cart
echo "<br><h2>Updated Cart</h2>";
$cart = getCartContents();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
removeCartItem(2);

// Example of getting cart contents again
echo "<br><h2>Final Cart</h2>";
$cart = getCartContents();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start the session
session_start();

// --- Cart Data ---

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product being added.
 * @param string $product_name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity of the product being added.
 */
function addToCart(int $product_id, string $product_name, float $price, int $quantity = 1) {
  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'id' => $product_id,
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}


/**
 * Removes a product from the cart by ID.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart(int $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $newQuantity The new quantity of the product.
 */
function updateQuantity(int $product_id, int $newQuantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
    }
}

/**
 * Gets the contents of the cart.
 *
 * @return array The cart contents.
 */
function getCartContents() {
    return $_SESSION['cart'];
}

// --- Example Usage (Illustrative -  This will be handled in your application logic) ---

// Add a product to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);

// Display the cart contents
$cart_contents = getCartContents();
echo "<h2>Your Cart:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

//Remove a product
removeFromCart(1);

//Update quantity of a product
updateQuantity(2, 3);

//Display the updated cart
echo "<h2>Your Cart (Updated):</h2>";
$cart_contents = getCartContents();
if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $product_data) {
        echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// Simulate adding items to the cart
$cart = []; // Initialize an empty cart (array)

// Function to add an item to the cart
function addToCart($itemId, $itemName, $price, $quantity = 1) {
  global $cart; // Access the global $cart array

  if (isset($cart[$itemId])) {
    // Item already exists in cart, increase quantity
    $cart[$itemId]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add a new entry
    $cart[$itemId] = [
      'name' => $itemName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example: Adding some items
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(1, "T-Shirt", 20.00, 3); //Add more of the shirt

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $itemId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total = 0;
  foreach ($cart as $itemId => $item) {
    $total += ($item['price'] * $item['quantity']);
  }
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Example Functions to Add Items to the Cart ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product being added.
 * @param string $product_name The name of the product.
 * @param int    $quantity   The quantity of the product to add (default: 1).
 * @param float  $price      The price per unit of the product.
 *
 * @return void
 */
function add_to_cart(string $product_id, string $product_name, int $quantity = 1, float $price = 0.0) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'quantity' => $quantity,
      'price' => $price
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity   The new quantity.
 * @return void
 */
function update_cart_quantity(string $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// --- Example Usage (Demonstration) ---

// Add a few items to the cart
add_to_cart('product1', 'Laptop', 1, 1200.00);
add_to_cart('product2', 'Mouse', 2, 25.00);
add_to_cart('product3', 'Keyboard', 1, 75.00);

// Display the contents of the cart
echo "<h2>Your Cart:</h2>";
echo "<ul>";
if (empty($_SESSION['cart'])) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
}
echo "</ul>";

// Example: Update the quantity of a product
update_cart_quantity('product2', 3);

// Display the updated cart
echo "<h2>Your Cart (Updated):</h2>";
echo "<ul>";
if (empty($_SESSION['cart'])) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
}
echo "</ul>";

// Example: Remove an item from the cart
remove_from_cart('product1');

// Display the updated cart
echo "<h2>Your Cart (After Removal):</h2>";
echo "<ul>";
if (empty($_SESSION['cart'])) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
}
echo "</ul>";
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

// Add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Remove item from cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update item quantity
function updateCartItemQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Get cart items
function getCartItems() {
  return $_SESSION['cart'];
}


// Calculate cart total
function calculateCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['price'] * $item['quantity'];
    }
  }
  return $total;
}


// --- Example Usage (Demonstration) ---

// 1. Add items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); // Adding more of the same item

// 2. Display the cart contents
echo "<h2>Cart Items</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 3. Display the cart total
echo "<p><strong>Cart Total:</strong> $" . calculateCartTotal() . "</p>";

// 4. Example of removing an item
// removeCartItem(2);

// 5. Example of updating quantity
// updateCartItemQuantity(1, 5);

// 6. Display the updated cart total
// echo "<p><strong>Cart Total:</strong> $" . calculateCartTotal() . "</p>";

?>


<?php
session_start(); // Start the session

// --- Add to Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return bool True if the product was successfully added, false otherwise.
 */
function addToCart(int $productId, int $quantity) {
  // Check if the cart already exists.  If not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // Product already exists, update the quantity
    $_SESSION['cart'][$productId] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$productId] = $quantity;
  }

  return true;
}


/**
 * Removes an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return bool True if the product was successfully removed, false otherwise.
 */
function removeFromCart(int $productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
    return true;
  }
  return false;
}



/**
 * Gets all items in the cart.
 *
 * @return array An array of items in the cart.
 */
function getCart() {
  return $_SESSION['cart'];
}

// --- Example Usage & Demonstration ---

// 1. Adding items to the cart
addToCart(1, 2); // Add 2 of product with ID 1
addToCart(2, 1); // Add 1 of product with ID 2
addToCart(1, 3); // Add 3 more of product with ID 1


// 2. Displaying the cart contents
echo "<h2>Your Cart:</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $quantity) {
    // You'll need to fetch product details based on $productId here
    // For example:
    $product = getProductDetails($productId); // Replace with your function
    if ($product) {
      echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    } else {
      echo "<li>Product ID: " . $productId . " - Quantity: " . $quantity . " - (Product details not found)</li>";
    }

  }
  echo "</ul>";
}


// 3. Removing an item from the cart (example)
removeFromCart(2);

// 4. Displaying the cart contents again after removal
echo "<h2>Your Cart (after removal):</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $quantity) {
    // You'll need to fetch product details based on $productId here
    $product = getProductDetails($productId); // Replace with your function
    if ($product) {
      echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    } else {
      echo "<li>Product ID: " . $productId . " - Quantity: " . $quantity . " - (Product details not found)</li>";
    }
  }
  echo "</ul>";
}


// --- Helper Function (Replace with your actual product retrieval logic) ---
/**
 *  Placeholder function to simulate getting product details based on ID.
 *  In a real application, this would query your database.
 *
 * @param int $productId The product ID.
 * @return array|null  An array containing product details, or null if not found.
 */
function getProductDetails(int $productId) {
  //  Replace this with your actual product retrieval logic from a database.
  // Example:
  $products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
  ];

  if (isset($products[$productId])) {
    return $products[$productId];
  }
  return null;
}

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Function to Add Items to Cart ---
function addToCart($product_id, $quantity) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'price'    => 0 // You'll likely want to fetch this from a database
    ];
  }
}

// --- Function to Remove Items from Cart ---
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// --- Function to Update Quantity of an Item in the Cart ---
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// --- Example Usage (Handling Cart Actions) ---

// 1.  Adding to cart (Example: When a user clicks "Add to Cart")
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity']; // Get the quantity from the form
  addToCart($product_id, $quantity);
}

// 2.  Removing from cart (Example: When a user clicks "Remove from Cart")
if (isset($_GET['remove_from_cart'])) {
  $product_id = $_GET['remove_from_cart'];
  removeFromCart($product_id);
}

// 3. Updating Quantity
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['new_quantity'];
    updateQuantity($product_id, $new_quantity);
}




// --- Displaying the Cart (For Demonstration Purposes) ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
  }
  echo "</ul>";
}


// ---  Example Form for Adding Items (Put this in your HTML) ---
// <form method="post" action="">
//   <label for="product_id">Product ID:</label>
//   <input type="number" id="product_id" name="product_id" value="">
//   <br>
//   <label for="quantity">Quantity:</label>
//   <input type="number" id="quantity" name="quantity" value="1">
//   <br>
//   <button type="submit" name="add_to_cart">Add to Cart</button>
// </form>

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// --- Example Usage ---

// 1. Adding an item to the cart (e.g., when a user clicks "Add to Cart")
// addToCart(123, "Awesome T-Shirt", 25.00, 2); //  Product ID 123, T-Shirt, Price $25, Quantity 2

// 2. Removing an item from the cart (e.g., when a user clicks "Remove from Cart")
// removeFromCart(123);

// 3. Updating the quantity of an item in the cart
// updateQuantity(123, 3); // Change the quantity of product 123 to 3


// --- Displaying the Cart Contents ---

echo "<div class='cart-container'>";
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $product_price = $product_details['price'];
    $product_quantity = $product_details['quantity'];

    echo "<li>";
    echo "<strong>Product:</strong> " . $product_name . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_price, 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_quantity . "<br>";

    // Add a remove button (example)
    echo "<a href='#' onclick='removeFromCart(" . $product_id . ")'>Remove</a>";
    echo "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total:</strong> $" . number_format(calculateTotal(), 2) . "</p>"; //Calculate Total function below
}
echo "</div>";

// Function to calculate the total cart value
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $total += $product_details['price'] * $product_details['quantity'];
    }
    return $total;
}
?>


<?php

// Initialize the session if it's not already started
session_start();

// Array to store the items in the cart
$cart = array();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already has an item with the same product_id
  if (isset($cart[$product_id])) {
    // If the item exists, increment the quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // If the item doesn't exist, add it to the cart
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}


// Example Usage:

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);
add_to_cart(1, 'T-Shirt', 20, 3); // Adding more of the same item


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item
//remove_from_cart(2);

// Example: Update Quantity
//update_quantity(1, 5); // Change the quantity of T-Shirt to 5

// Save the cart session
session_start();
$_SESSION['cart'] = $cart;  // Store the cart data in the session

// Output for testing/verification
echo "<p>Cart data saved to session.</p>";

// To retrieve the cart from the session later:
// session_start();
// $cart = $_SESSION['cart'];
// ... use $cart ...

?>


<?php

session_start(); // Start the session

// Check if the cart is empty or not
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = []; // Initialize the cart array if it doesn't exist
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with quantity 1
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    } else {
        // Product not in cart, return an error or do nothing - depends on your design
        // For simplicity, just return a message
        return "Product not found in cart.";
    }
}


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// Example Usage (simulated form submission)
// In a real application, this would be handled by an actual form

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = intval($_POST['quantity']); // Make sure quantity is an integer

    addToCart($product_id, "Product " . $product_id, 10.00, $quantity); //Example
  }

  if (isset($_POST['remove_product_id'])) {
    $remove_product_id = $_POST['remove_product_id'];
    removeCartItem($remove_product_id);
  }

   if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = intval($_POST['quantity']);
    updateCartQuantity($product_id, $quantity);
  }
}



// Display the cart contents
$cart = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product Name:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<form method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='submit' value='Remove from Cart'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Initialize the cart session if it doesn't exist
session_start();

// Check if the cart exists, if not, create it
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add a new entry
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Example Usage:  (Simulate user adding items)

// Add item 1
addToCart(1, "Laptop", 1200, 1);

// Add item 2
addToCart(2, "Mouse", 25, 2);

// Add item 1 again
addToCart(1, "Laptop", 1200, 1);


// Display the cart contents (for demonstration)
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . $item['price'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . ($item['price'] * $item['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// Function to remove an item from the cart (example)
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example of removing an item (if needed)
// removeFromCart(2);
// echo "<h2>Shopping Cart After Removal</h2>";
// if (empty($_SESSION['cart'])) {
//     echo "<p>Your cart is empty.</p>";
// } else {
//     foreach ($_SESSION['cart'] as $product_id => $item) {
//         echo "<li>Product: " . $item['name'] . "<br>";
//         echo "Price: $" . $item['price'] . "<br>";
//         echo "Quantity: " . $item['quantity'] . "<br>";
//         echo "</li>";
//     }
// }



?>


<?php
session_start();

// ------------------------------------------------------------------
// Cart Management Functions
// ------------------------------------------------------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add. Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents.
 */
function getCart() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int The total number of items.
 */
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $quantity) {
      $total += $quantity;
    }
  }
  return $total;
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}


// ------------------------------------------------------------------
// Example Usage (Simulated Product Data - Replace with your database)
// ------------------------------------------------------------------

$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];


// ------------------------------------------------------------------
// Handle Add to Cart Request (Simulated -  In a real app, this would come from a form submission)
// ------------------------------------------------------------------

if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;

  // Validate the quantity (optional, but good practice)
  if (is_numeric($quantity) && $quantity > 0) {
    addToCart($product_id, $quantity);
    echo "<p>Item added to cart.</p>";
  } else {
    echo "<p style='color:red;'>Invalid quantity. Please enter a positive number.</p>";
  }
}


// ------------------------------------------------------------------
// Display the Cart (Example)
// ------------------------------------------------------------------

echo "<h1>Shopping Cart</h1>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];
    echo "<li>$product_name - Quantity: $quantity - Price: $product_price</li>";
  }
  echo "</ul>";

  echo "<p>Total Items in Cart: " . getCartTotal() . "</p>";
  echo "<a href='clear_cart.php' >Clear Cart</a>";  // Link to clear the cart
}

?>


<?php

session_start();

// --------------------------------------------------
// Cart Functions
// --------------------------------------------------

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.  Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product is already in cart, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it with quantity 1
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array|null  Returns the cart array if it exists, otherwise null.
 */
function getCart() {
  return $_SESSION['cart'] ?? null;
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart() {
  unset($_SESSION['cart']);
}


// --------------------------------------------------
// Example Usage / Demonstration
// --------------------------------------------------

// 1. Add an item to the cart
addToCart(123); // Adds product with ID 123 to the cart, quantity 1
addToCart(456, 2); // Adds product with ID 456 to the cart, quantity 2


// 2. Display the cart contents
$cart = getCart();

if ($cart) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// 3.  Example of updating quantity
updateQuantity(123, 5);

// Display the updated cart
$cart = getCart();

if ($cart) {
    echo "<h2>Your Shopping Cart (Updated)</h2>";
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// 4. Removing an item
removeFromCart(456);

// Display the cart again
$cart = getCart();

if ($cart) {
    echo "<h2>Your Shopping Cart (After Removal)</h2>";
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// 5. Clearing the cart
clearCart();
echo "<br><h2>Cart after clearing</h2>";
$cart = getCart();
if ($cart) {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Otherwise, add the product to the cart with initial quantity of 1
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}

// Example Usage:

// 1. Adding an item to the cart
add_to_cart(1, 'T-Shirt', 20.00, 2); // Add 2 T-Shirts
add_to_cart(2, 'Jeans', 50.00, 1);   // Add 1 pair of Jeans

// 2. Getting the cart contents
$cart = get_cart_contents();
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}



// 3. Updating the quantity of a product in the cart
update_cart_quantity(1, 3); // Change quantity of T-Shirt from 2 to 3

// 4. Getting the updated cart contents
$cart = get_cart_contents();
echo "<h2>Your Cart (Updated)</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}


// 5. Removing an item from the cart
remove_from_cart(2); // Remove Jeans from the cart


// 6. Getting the updated cart contents after removal
$cart = get_cart_contents();
echo "<h2>Your Cart (After Removal)</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Simulate a shopping cart - replace with your actual database or data structure
$cart = [];

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$item_id])) {
    // Item already exists in cart, increment quantity
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add a new entry
    $cart[$item_id] = [
      'name' => $item_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;

  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $new_quantity) {
    global $cart;

    if (isset($cart[$item_id])) {
        $cart[$item_id]['quantity'] = $new_quantity;
    }
}

// Example usage:

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);
add_to_cart(1, 'T-Shirt', 20, 1);  // Add another T-Shirt

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
//remove_from_cart(2);

// Example of updating the quantity of an item
// update_quantity(1, 5);



// Example of session variable usage
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = $cart; // Store the cart data in the session
} else {
    //Ensure cart data is always the same
    $_SESSION['cart'] = $cart;
}


// Display the cart contents (again) - using session data
echo "<h2>Shopping Cart (from Session)</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}



?>


<?php

// Start a session to store the cart data
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add a new entry to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


//  Example Usage (Demonstration - you'll integrate this into your actual application)
//  Simulating form submission with product data.  In a real application,
//  this would come from an HTML form.
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Add the item to the cart
  addToCart($product_id, "Awesome Product", 20.00, $quantity);

  //  You might want to redirect the user to a cart page or display a success message
  //  For example:
  //  header("Location: cart.php");
  //  exit();
}


// Example: Removing an item (for demonstration)
if (isset($_GET['remove_id'])) {
  $remove_id = $_GET['remove_id'];
  removeFromCart($remove_id);
  header("Location: cart.php");  // Redirect to cart.php after removal
  exit();
}



//  Displaying the Cart (This will be in your cart.php page)
//  This section just demonstrates how to display the cart contents.
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  // Display the cart contents
  if (count($_SESSION['cart']) > 0) {
    echo "<h2>Cart Items:</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";

    // Calculate the total price
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $item) {
      $total += $item['price'] * $item['quantity'];
    }

    echo "<p><strong>Total: $" . $total . "</strong></p>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

  <br>
  <a href="index.php">Back to Products</a>  <!-- Link back to the product listing page -->

</body>
</html>


<?php

session_start();

// --- Function to Add to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Add the product to the cart
  $_SESSION['cart'][$product_id] = [
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];
}

// --- Example Usage (Simulating a product) ---
$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 80]
];

// 1. User adds a T-Shirt
addToCart(1, 'T-Shirt', $products[1]['price']);

// 2. User adds two Jeans
addToCart(2, 'Jeans', $products[2]['price'], 2);

// 3. User adds one pair of Shoes
addToCart(3, 'Shoes', $products[3]['price']);

// --- Display the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'] ?? []; // Return an empty array if cart is not initialized
}

// Example usage:  (Simulated product information)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];

// ---  User Actions  ---

// Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    $quantity = (int)$_POST['quantity']; // Ensure quantity is an integer

    if (isset($products[$product_id])) {
        addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
        echo "<p>Product added to cart!</p>";
    } else {
        echo "<p>Product not found.</p>";
    }
}

// Remove a product from the cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer
    removeFromCart($product_id);
    echo "<p>Product removed from cart!</p>";
}

// Update the quantity of a product in the cart
if (isset($_POST['update_quantity'])) {
    $product_id = (int)$_POST['product_id'];
    $new_quantity = (int)$_POST['quantity'];

    if (isset($products[$product_id])) {
        updateQuantity($product_id, $new_quantity);
        echo "<p>Quantity updated!</p>";
    } else {
        echo "<p>Product not found.</p>";
    }
}


// --- Display Cart Contents ---

$cart_contents = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";

    // Calculate total
    $total = 0;
    foreach ($cart_contents as $id => $item) {
        $total += $item['price'] * $item['quantity'];
    }

    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}

?>

<!-- HTML Form to Add Items to Cart (Example) -->
<form method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - $product['name']</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" value="1"><br><br>

    <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

<form method="post">
    <label for="remove_product_id">Product ID to Remove:</label>
    <select name="product_id" id="remove_product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - $product['name']</option>";
        }
        ?>
    </select><br><br>
    <input type="submit" name="remove_from_cart" value="Remove from Cart">
</form>


<form method="post">
    <label for="update_product_id">Product ID to Update:</label>
    <select name="product_id" id="update_product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - $product['name']</option>";
        }
        ?>
    </select><br><br>

    <label for="new_quantity">New Quantity:</label>
    <input type="number" id="new_quantity" name="quantity" value="1"><br><br>

    <input type="submit" name="update_quantity" value="Update Quantity">
</form>


<?php
session_start();

// This is the shopping cart array.  You'll want to replace this with
// a database or more robust storage solution in a real application.
$cart = [];

// --- Helper Functions ---

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($cart[$productId])) {
    $cart[$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $cart[$productId]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart by product ID
function removeItemFromCart($productId) {
  if (isset($cart[$productId])) {
    unset($cart[$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($cart[$productId])) {
        $cart[$productId]['quantity'] = $newQuantity;
    }
}


// ---  Example Usage / Cart Interaction (Illustrative) ---

// 1. Add an item to the cart
addItemToCart(1, "Awesome T-Shirt", 20.00, 2);
addItemToCart(2, "Cool Hat", 15.00, 1);


// 2. Display the Cart Contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $productId => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $totalPrice = 0;
  foreach ($cart as $productId => $item) {
    $totalPrice += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $totalPrice . "</strong></p>";
}

// ---  Example: Removing an item from the cart ---
// Remove the "Cool Hat" (productId 2)
// removeItemFromCart(2);

// ---  Example: Updating the quantity of an item ---
//  Update the quantity of "Awesome T-Shirt" (productId 1) to 3
//  updateQuantity(1, 3);

// --- End of Example Usage ---
?>


<?php
session_start();

// Function to add item to cart
function add_to_cart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][$product_id] = [
    'name' => $product_name,
    'quantity' => $quantity,
    'price' => $price
  ];
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to display the cart contents
function display_cart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";
  $total = 0;

  foreach ($_SESSION['cart'] as $item) {
    $item_total = $item['quantity'] * $item['price'];
    $total += $item_total;
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . number_format($item['price'], 2) . " (Quantity: " . $item['quantity'] . ") ";
    echo "<form action='' method='post'>";
    echo "<label for='quantity_" . $item['name'] . "'>Quantity:</label>";
    echo "<input type='number' id='quantity_" . $item['name'] . "' value='" . $item['quantity'] . "' min='1' max='100' name='quantity_" . $item['name'] . "'>";
    echo "<input type='submit' value='Update'>";
    echo "</form>";
    echo "</li>";
  }

  echo "</ul>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
}

// Example Usage:

// 1. Add an item to the cart (simulated)
add_to_cart(1, 2, "Laptop", 1200);
add_to_cart(2, 1, "Mouse", 25);

// 2. Update quantity of a product (simulated)
update_cart_quantity(1, 3); // Increase laptop quantity to 3

// 3. Remove an item from the cart (simulated)
// remove_from_cart(2); //Remove mouse

// 4. Display the cart contents
display_cart();

//  Session Cleanup -  Important for security.  Consider a session timeout.
//session_destroy(); // Comment this out for development/debugging.
//session_unset();
?>


<?php
session_start();

// Sample products (for demonstration purposes)
$products = [
    1 => ['name' => 'T-Shirt', 'price' => 20],
    2 => ['name' => 'Jeans', 'price' => 50],
    3 => ['name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($product_id, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] + $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to display the cart
function displayCart()
{
    if (isset($_SESSION['cart'])) {
        echo "<h2>Your Cart</h2>";
        echo "<ul>";
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $product_name = $products[$product_id]['name'];
            $product_price = $products[$product_id]['price'];
            $total_price = $product_price * $quantity;

            echo "<li>$product_name - $" . number_format($product_price, 2) . " x " . $quantity . " = $" . number_format($total_price, 2) . "</li>";
        }
        echo "</ul>";

        // Calculate total cart value
        $total = 0;
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $total += $products[$product_id]['price'] * $quantity;
        }
        echo "<p><strong>Total Cart Value: $" . number_format($total, 2) . "</strong></p>";
    } else {
        echo "<p>Your cart is empty.</p>";
    }
}


// Handle adding to cart requests (e.g., from a button click)
if (isset($_POST['add_to_cart'])) {
    $product_id = intval($_POST['product_id']);  // Ensure product_id is an integer
    $quantity = intval($_POST['quantity']) ?? 1;   // Default quantity to 1
    addToCart($product_id, $quantity);
}

// Display the cart
displayCart();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form method="post" action="">
    <h2>Add Products to Cart</h2>
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value=\"$id\">$id - $product['name']</option>";
        }
        ?>
    </select>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity" value="1" min="1">

    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

</body>
</html>


<?php
session_start();

// --- Product Information (for demonstration) ---
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20.00],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50.00],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80.00],
];

// --- Cart Session Variables ---
$cart = [];  // Array to store items in the cart (id => quantity)

// --- Helper Functions ---
function add_to_cart($product_id, $quantity = 1)
{
    global $cart;

    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id] += $quantity;
    } else {
        $cart[$product_id] = $quantity;
    }
}

function remove_from_cart($product_id, $quantity = 1)
{
    global $cart;

    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id] -= $quantity;

        // If quantity is 0, remove the item from the cart
        if ($cart[$product_id] <= 0) {
            unset($cart[$product_id]);
        }
    }
}

function get_cart_total()
{
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        if (array_key_exists($product_id, $products)) {
            $total += $products[$product_id]['price'] * $quantity;
        }
    }
    return $total;
}


// --- Example Usage & Cart Modification ---
// Add a T-Shirt to the cart
add_to_cart(1); // Add 1 T-Shirt
// Add 2 Jeans to the cart
add_to_cart(2, 2);
// Remove one pair of jeans
remove_from_cart(2,1);



// --- Display the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        if (array_key_exists($product_id, $products)) {
            $product = $products[$product_id];
            echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
        }
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . number_format(get_cart_total(), 2) . "</strong></p>"; // Format total to 2 decimal places
}

?>


<?php

// Start session if it doesn't exist
if (!session_id()) {
  session_start();
}

// --- Cart functions ---

// Add an item to the cart
function addToCart($product_id, $quantity = 1, $product_name = NULL) {
  // Check if the 'cart' session variable exists, initialize it if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product ID already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to the cart
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'product_name' => $product_name ?? $product_id, // Default product name if none provided
    ];
  }
}

// Remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


// Get all items in the cart
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return []; // Return an empty array if cart is empty
}


// Get the total number of items in the cart
function getCartTotal() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach($_SESSION['cart'] as $item) {
      $total += $item['quantity'];
    }
  }
  return $total;
}

// Clear the entire cart
function clearCart() {
  unset($_SESSION['cart']);
}

// --- Example Usage (for demonstration) ---

// Add some items to the cart
addToCart(101, 2); // Product ID 101, quantity 2
addToCart(102, 1, 'Red T-Shirt'); // Product ID 102, quantity 1, product name 'Red T-Shirt'
addToCart(103, 3);

// Display the cart contents
$cart_items = getCartItems();
echo "<h2>Your Cart</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['product_name'] . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total items in cart: " . getCartTotal() . "</p>";

// Remove an item
removeFromCart(102);

// Display cart after removing an item
echo "<h2>Your Cart (After Removal)</h2>";
$cart_items = getCartItems();
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['product_name'] . "</li>";
    }
    echo "</ul>";
}

//Clear the cart
//clearCart();
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart with quantity 1
    $_SESSION['cart'][$product_id] = array(
      'quantity' => $quantity,
      'name' => $product_name,
      'price' => $price
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example usage (simulated product data - replace with your actual data source)
$products = array(
  1 => array('name' => 'T-Shirt', 'price' => 20),
  2 => array('name' => 'Jeans', 'price' => 50),
  3 => array('name' => 'Hat', 'price' => 15)
);

// ------------------  Simulate user actions  ------------------

// User adds one T-Shirt to the cart
addToCart(1, 1, 'T-Shirt', 20);

// User adds two Jeans to the cart
addToCart(2, 2, 'Jeans', 50);

// User updates the quantity of Jeans to 5
updateQuantity(2, 5);

// User removes the Hat from the cart
removeFromCart(3);

// ------------------  Display the cart contents  ------------------

echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_name = $products[$product_id]['name'];
    $price = $products[$product_id]['price'];
    $quantity = $item['quantity'];

    echo "<li>" . $quantity . " x " . $product_name . " - $" . $price . "</li>";
  }
  echo "</ul>";
}

// Display the total price
$total_price = 0;
foreach ($_SESSION['cart'] as $product_id => $item) {
    $total_price += $item['quantity'] * $item['price'];
}
echo "<p><strong>Total: $" . number_format($total_price, 2) . "</strong></p>";
?>


<?php
session_start();

// Cart data - This could be coming from a database, a file, or user input
$cart = [
    ['id' => 1, 'name' => 'T-Shirt', 'price' => 20, 'quantity' => 2]
    ,['id' => 2, 'name' => 'Jeans', 'price' => 50, 'quantity' => 1]
];

// Function to add an item to the cart
function add_to_cart($item_id) {
    // Check if the item already exists in the cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            // Increment quantity if already in cart
            $item['quantity']++;
            // Break out of the loop - we found the item
            break;
        }
    }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
    foreach ($cart as $key => $item) {
        if ($item['id'] == $item_id) {
            unset($cart[$key]); // Remove the item from the array
            break;
        }
    }
}

// Function to get the cart contents
function get_cart_contents() {
    return $cart;
}

// Function to calculate the cart total
function calculate_total() {
    $total = 0;
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// Example Usage -  Simulating user interaction
// Let's say the user adds a T-Shirt to the cart
add_to_cart(1);

// Let's say the user removes the Jeans
remove_from_cart(2);

// Get the current cart contents
$cart_contents = get_cart_contents();
$total = calculate_total();

// Print the cart contents and total
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
foreach ($cart_contents as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}
echo "</ul>";

echo "<p><strong>Total: $" . $total . "</strong></p>";

?>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// Sample product data (replace with your actual product data)
$products = [
    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],
    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],
    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$productId])) {
        // Item already in cart, update quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it
        $_SESSION['cart'][$productId] = [
            'quantity' => $quantity,
            'price' => $products[$productId]['price']
        ];
    }
}

// Function to get the cart contents
function getCart()
{
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return [];
    }
}

// Function to remove an item from the cart
function removeItemFromCart($productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// ---  Example usage based on a hypothetical user interaction  ---

// 1. User adds a Laptop
addToCart(1);

// 2. User adds 2 Mice
addToCart(2, 2);

// 3. User updates the quantity of the Laptop to 3
updateQuantity(1, 3);

// 4. User removes the Mouse
removeItemFromCart(2);

// Get the cart contents
$cart = getCart();

// Display the cart contents (for demonstration)
echo "<h2>Your Cart:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $productId => $item) {
        echo "<li>" . $products[$productId]['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}


// ---  How to implement in a real application  ---

// In a real web application, the user interaction would come from:
// - A button click (e.g., "Add to Cart" button)
// - Form submission
// - AJAX request

// Example for a button click (simplified):
//  - When the user clicks the "Add to Cart" button for a product:
//    - Get the product ID.
//    - Call addToCart(productId, quantity);
//    - Possibly update the cart summary on the page.

?>


<?php

// Start a session (if it doesn't exist)
session_start();

//  This is a basic example. For real-world applications, 
//  you'd likely store this in a database instead of an array.

//  Simulated shopping cart
$cart = [];

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $cart[$product_id]['quantity'] += $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
}

// Function to update quantity of item in cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Example usage (simulated user actions)

// Add some items to the cart
addToCart(1, 'T-Shirt', 20.00, 2);
addToCart(2, 'Jeans', 50.00, 1);
addToCart(1, 'T-Shirt', 20.00, 1); // Adding another t-shirt

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
        echo "<form action='' method='post'>"; //  Placeholder form
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='submit' name='remove' value='Remove'> ";
        echo "</form>";
    }
    echo "</ul>";

    // Calculate total price
    $total_price = 0;
    foreach ($cart as $product_id => $product_details) {
      $total_price += $product_details['price'] * $product_details['quantity'];
    }

    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}


// Example of removing an item
// removeFromCart(2);

// Example of updating quantity
// updateQuantity(1, 3);


?>


<?php
session_start();

// --- Cart Session Variables ---

// Session to store the cart data (array of product IDs and quantities)
$cart = [];

// Session to store the total cart value
$_SESSION['cart_total'] = 0;

// Session to store the number of items in the cart
$_SESSION['cart_item_count'] = 0;



// --- Helper Functions ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1)
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Initialize the cart if it doesn't exist
    }

    if (isset($_SESSION['cart'][$product_id])) {
        // Product already in cart, increase quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product not in cart, add it
        $_SESSION['cart'][$product_id] = [
            'quantity' => $quantity,
            'price'    => 0 // You'll need to store the product price here (e.g., from a database)
        ];
    }

    // Update cart total
    $_SESSION['cart_total'] += $_SESSION['cart'][$product_id]['quantity'] * 0; // 0 price (for now, price comes from database)

    // Update item count
    $_SESSION['cart_item_count']++;
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id)
{
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }

    // Update cart total
    $_SESSION['cart_total'] -= $_SESSION['cart'][$product_id]['quantity'] * 0;

    // Update item count
    $_SESSION['cart_item_count']--;
}


/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateQuantity($product_id, $quantity)
{
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
    // Update cart total
    $_SESSION['cart_total'] -= $_SESSION['cart'][$product_id]['quantity'] * 0;
    $_SESSION['cart_total'] += $quantity * 0;  // Price is assumed to be 0 (for this example)
    // Update item count
    $_SESSION['cart_item_count'] = 0;
    foreach ($_SESSION['cart'] as $item) {
      $_SESSION['cart_item_count']++;
    }
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clearCart()
{
    unset($_SESSION['cart']);
    $_SESSION['cart_total'] = 0;
    $_SESSION['cart_item_count'] = 0;
}


// --- Example Usage (Illustrative -  This would normally be handled by your website's front-end) ---

// Add a product to the cart
addToCart(1, 2); // Add 2 of product with ID 1

// Add another product to the cart
addToCart(3, 1);

// Display the cart contents (for demonstration)
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Cart Total: $" . number_format($_SESSION['cart_total'], 2) . "</p>";
    echo "<p>Total Items in Cart: " . $_SESSION['cart_item_count'] . "</p>";
}

// Remove a product from the cart
removeFromCart(1);

// Update the quantity of a product
updateQuantity(3, 3);

// Clear the cart
//clearCart();
?>


<?php

// Start a session if it doesn't exist
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add the product to the cart with an initial quantity of 1
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// Example usage: Add a product to the cart
// Assume product IDs are 1, 2, 3...
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);


// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// Example of removing a product
//removeFromCart(1);  // Remove the T-Shirt

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example of updating the quantity
//updateQuantity(2, 3); // Change the Jeans quantity to 3

// Function to display the cart contents
function displayCart() {
  echo "<h2>Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total_item = $price * $quantity;
    $total += $total_item;

    echo "<tr>";
    echo "<td>" . $product_name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total_item, 2) . "</td>";
    echo "</tr>";
  }

  echo "</table><br>";
  echo "<strong>Total: $" . number_format($total, 2) . "</strong>";
}

// Call the function to display the cart
displayCart();

?>


<?php
session_start();

// Function to add item to cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update cart quantity
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove item from cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    $name = $item_details['name'];
    $price = $item_details['price'];
    $quantity = $item_details['quantity'];
    $total_item = $price * $quantity;
    $total += $total_item;

    echo "<tr>";
    echo "<td>" . $name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total_item, 2) . "</td>";
    echo "<td><a href='cart.php?action=remove&product_id=" . $product_id . "'>Remove</a></td>";
    echo "</tr>";
  }

  echo "</table>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</p>";
}

// Example Usage:

// Add a product to the cart
//addToCart(1, "Awesome T-Shirt", 25.00, 2);

// Update the quantity of a product
//updateCartQuantity(1, 3); // Change quantity of product ID 1 to 3

// Remove a product from the cart
//removeCartItem(1);


// Display the cart contents (This should be called on your cart.php page)
displayCart();

?>


<?php

// 1. Session Start
session_start();

// 2.  Define Cart Data (This will be stored in the session)
$cart = [];

// 3.  Functions for Cart Operations

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    // Increment quantity if product exists
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Get the cart contents
function get_cart_contents() {
  return $cart;
}

// Clear the cart
function clear_cart() {
    $cart = [];
}



// 4. Example Usage (Simulating User Interaction)

// Initial Cart State
// You could load this from a database or a file in a real application.
// For this example, we'll just start with an empty cart.

// Add some products to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(1, 'Laptop', 1200, 1); // Add another laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_items = get_cart_contents();
foreach ($cart_items as $product_id => $item) {
  echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}
echo "</ul>";

echo "<p><a href='cart.php?action=clear'>Clear Cart</a></p>"; // Example of calling a different page



// Example of updating quantity
// update_cart_quantity(2, 3); // Change the quantity of the mouse to 3
// echo "<h2>Updated Cart</h2>";
// $cart_items = get_cart_contents();
// foreach ($cart_items as $product_id => $item) {
//   echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
// }



// Example of clearing the cart
// clear_cart();
// echo "<h2>Empty Cart</h2>";
// echo "<ul>";
// $cart_items = get_cart_contents();
// foreach ($cart_items as $product_id => $item) {
//   echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
// }
// echo "</ul>";


?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example usage:  Let's say we have a product with ID 1, name 'T-Shirt', and price $20
addToCart(1, 'T-Shirt', 20);

// Add another T-Shirt
addToCart(1, 'T-Shirt', 20, 2);

// Another product, ID 2, name 'Jeans', and price $50
addToCart(2, 'Jeans', 50);


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example: Removing an item from the cart
// This is commented out to avoid accidental removal in a real application
// You'd likely have a deleteCartItem function to handle this.
/*
if (isset($_GET['remove'])) {
  $product_id = $_GET['remove'];

  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}
*/
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// ---  Add to Cart Function ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Add the product to the cart array
  $_SESSION['cart'][] = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // Optional:  Refresh the cart array to make it easier to manage
  // and to ensure the latest updates are reflected in the session.
  //  This is generally a good practice.  If you don't do this, 
  //  you might get unexpected results if multiple users are 
  //  simultaneously accessing the same session.
  $_SESSION['cart'] = $_SESSION['cart']; 
}


// ---  Remove from Cart Function ---
function removeFromCart($product_id) {
  // Check if the product is in the cart
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Remove from end of array to avoid shifting indices
        //  This is slightly more efficient than re-indexing
        //  and avoids the issue of re-indexing and potential lost data.
        if (!empty($_SESSION['cart'])) {
          $_SESSION['cart'] = array_values($_SESSION['cart']);
        }
        return true;
      }
    }
    return false; // Product not found
  }
  return false; // Cart is empty
}


// ---  Update Quantity Function ---
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['id'] == $product_id) {
        $item['quantity'] = $quantity;
        $_SESSION['cart'] = $_SESSION['cart']; // Update the session
        return true;
      }
    }
    return false; // Product not found
  }
  return false; // Cart is empty
}



// ---  View Cart Function ---
function viewCart() {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart'])) . "</p>";
  } else {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<p>Your cart is empty.</p>";
  }
}



// --- Example Usage (in your HTML, after the session start) ---
// <form method="post" action="">
//   <button type="button" onclick="addToCart(1, 'Product A', 20.00, 2)">Add to Cart</button>
//   <button type="button" onclick="addToCart(2, 'Product B', 30.00, 1)">Add to Cart</button>
// </form>

// <br>

// <form method="post" action="">
//  <button type="button" onclick="removeFromCart(1)">Remove from Cart</button>
// </form>

// <br>

// <form method="post" action="">
//   <label for="quantity">Quantity:</label>
//   <input type="number" id="quantity" name="quantity" value="1">
//   <button type="button" onclick="updateQuantity(1, parseInt(document.getElementById('quantity').value))">Update Quantity</button>
// </form>

// <br>

// <button type="button" onclick="viewCart()">View Cart</button>

?>


<?php

session_start();

// Initialize the cart as an array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity of the product to add.
 */
function add_to_cart($product_id, $name, $price, $quantity) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 */
function update_cart_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


// --- Example Usage (This would typically be part of a form submission or AJAX call) ---

// 1. Add a product to the cart
// Example: Add 2 of product ID 123
// add_to_cart(123, "T-Shirt", 20, 2);


// 2. Update the quantity of a product
// Example: Update the quantity of product ID 123 to 5
// update_cart_quantity(123, 5);


// 3. Remove a product from the cart
// Example: Remove product ID 123
// remove_from_cart(123);


// --- Display the Cart ---

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}
?>


<?php

// Start the session if it's not already started
session_start();

// Check if the cart is initialized
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Function to add an item to the cart ---
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it is, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it's not, add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// --- Example Usage (You'd typically get this data from a database or form) ---

// Add some items to the cart
add_to_cart(1, 'Laptop', 1200, 1); // Product ID 1, Laptop, $1200, Quantity 1
add_to_cart(2, 'Mouse', 25, 2);   // Product ID 2, Mouse, $25, Quantity 2
add_to_cart(1, 'Laptop', 1200, 1); // Adding another laptop

// --- Displaying the Cart Contents ---
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . number_format($product_details['price'], 2) . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . number_format($product_details['price'] * $product_details['quantity'], 2) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

?>


<?php

// Start a session (if it doesn't exist)
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  // Check if the cart already exists in the session
  if (isset($_SESSION['cart']) === false) {
    // If not, initialize it as an empty array
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart']) === false) {
    return false; // Cart doesn't exist
  }

  // Find the item in the cart
  foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['product_id'] == $product_id) {
      $_SESSION['cart'][$key]['quantity'] = $new_quantity;
      return true;
    }
  }
  return false; // Item not found
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart']) === false) {
        return false; // Cart doesn't exist
    }

    // Iterate through the cart and remove the item
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['product_id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }
    return false; // Item not found
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}


// --- Example Usage (Simulating a product/request) ---

// Let's say we have a product with ID 1, name "Shirt", and price 20
addToCart(1, "Shirt", 20, 2);

// Let's say another product with ID 2, name "Pants", and price 30
addToCart(2, "Pants", 30, 1);

// Update the quantity of the Shirt to 3
updateQuantity(1, 3);

// Get the cart contents
$cart = getCartContents();

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['product_name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}

// Example: Remove a product
// removeFromCart(2);

// Get cart contents again to see the updated cart
$cart = getCartContents();

echo "<h2>Your Shopping Cart (Updated)</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $item) {
        echo "<li>" . $item['product_name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// 1. Initialize the cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// 2. Handle Adding Items to the Cart

// Example: Adding an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If the product exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If the product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Example usage:
// addToCart(1, 'Laptop', 1200, 1);
// addToCart(2, 'Mouse', 25, 2);



// 3. Handle Removing Items from the Cart

function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example usage:
// removeCartItem(1);



// 4. Handle Updating Quantity of an Item in the Cart

function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Example usage:
// updateCartQuantity(1, 3);



// 5. Displaying the Cart Contents (for demonstration)

function displayCart() {
    echo "<h2>Your Shopping Cart</h2>";

    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
    } else {
        echo "<ul>";
        foreach ($_SESSION['cart'] as $product_id => $product_details) {
            echo "<li>";
            echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
            echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
            echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
            echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Call the display function to show the cart contents
displayCart();
?>


<?php
session_start();

// --- Functions for Cart Management ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  $_SESSION['cart'][$product_id] = [
    'quantity' => $quantity,
    'name' => "Product " . $product_id, //  Replace with actual product name
    'price' => 10.00, // Replace with actual product price
  ];
}

/**
 * Retrieves the contents of the cart.
 *
 * @return array The cart contents.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for safety
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateCartTotal() {
    $total = 0.00;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['quantity'] * $item['price'];
        }
    }
    return $total;
}



// --- Example Usage (Simulating a Cart Interaction) ---

// 1. Add an item to the cart
addToCart(123, 2);  // Add 2 units of product with ID 123
addToCart(456, 1);  // Add 1 unit of product with ID 456


// 2. Update the quantity of an item
updateCartQuantity(123, 5); // Increase the quantity of product 123 to 5

// 3.  Retrieve the cart contents
$cart = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
  }
  echo "</ul>";
}

// 4. Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total Cart Value: $" . number_format($total, 2) . "</strong></p>";

// 5. Remove an item from the cart
removeCartItem(456);

// Display cart contents after removing an item
$cart = getCart();
echo "<p><strong>Cart Contents after Removing Product 456:</strong></p>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Price: " . $item['price'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start(); // Start the session

// Check if the 'cart' session variable exists
if (!isset($_SESSION['cart'])) {
    // Initialize the cart array if it doesn't exist
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it's already in the cart, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Otherwise, add the product to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example usage -  Illustrative, you'll likely get product data from a database/API

// Add some items to the cart
addToCart('product1', 'Awesome T-Shirt', 20, 2);
addToCart('product2', 'Cool Mug', 10, 3);
addToCart('product1', 'Awesome T-Shirt', 20, 1); // Add more of the existing item


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
        echo "<button onclick='removeFromCart(" . $product_id . ")'>Remove</button>";  //Example of how you might display the remove button.  JavaScript would handle the call to removeFromCart.
    }
    echo "</ul>";
}



// Example of removing an item
// removeFromCart('product2');

// Example of updating quantity
// updateQuantity('product1', 5);

?>

<!-- JavaScript for removing items (simplified example) -->
<script>
    function removeFromCart(product_id) {
        // This is a placeholder.  In a real application, this function would
        // send a request to the server (e.g., using AJAX) to remove the item
        // from the session.

        // For demonstration purposes, we'll simply display a confirmation message.
        alert("Item " + product_id + " removed (simulated).");
    }
</script>


<?php
session_start();

// Function to add item to cart
function addToCart($product_id, $quantity) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array(); // Initialize the cart array
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to remove item from cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $newQuantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
    }
}

// Example Usage - This is where you'd handle form submissions, etc.

// Simulate a product ID
$productId = 123;
$quantityToAdd = 2;

// Add item to cart
addToCart($productId, $quantityToAdd);

// Display the cart contents
$cartContents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Example of removing an item
// removeFromCart($productId);


// Example of updating quantity
// updateQuantity($productId, 5);
?>


<?php
session_start();

// This script handles adding items to the cart

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity) {
    if (empty($_SESSION['cart'])) {
        // Cart is empty, initialize it with the first item
        $_SESSION['cart'] = array();
    }

    // Create an associative array for the item
    $_SESSION['cart'][$productId] = array(
        'product_name' => $productName,
        'price' => $price,
        'quantity' => $quantity
    );
}

// --- Example Usage (Simulating User Actions) ---

// Simulate a user adding a product to the cart
addItemToCart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, Price $1200, Quantity 1
addItemToCart(2, "Mouse", 25, 2);   // Product ID 2, Mouse, Price $25, Quantity 2

// --- Cart Display (For demonstration) ---

// Check if the cart is empty
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<h2>Your Cart:</h2>";
    echo "<ul>";

    foreach ($_SESSION['cart'] as $productId => $item) {
        echo "<li>";
        echo "Product: " . $item['product_name'] . "<br>";
        echo "Price: $" . $item['price'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . ($item['price'] * $item['quantity']) . "<br>";
        echo "</li>";
    }

    echo "</ul>";

    // Calculate the total cart value
    $total = 0;
    foreach ($_SESSION['cart'] as $productId => $item) {
        $total += ($item['price'] * $item['quantity']);
    }

    echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";
}
?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name) {
  // Check if the cart exists in the session
  if (isset($_SESSION['cart'])) {
    // If it exists, check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
      // Product exists, update the quantity
      $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
      // Product doesn't exist in the cart, add it
      $_SESSION['cart'][$product_id] = array(
        'name' => $product_name,
        'quantity' => $quantity
      );
    }
  } else {
    // Cart doesn't exist, create it with the first item
    $_SESSION['cart'] = array($product_id => array('name' => $product_name, 'quantity' => $quantity));
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage:

// Add some items to the cart
addToCart(1, 2, 'T-Shirt');
addToCart(2, 1, 'Jeans');
addToCart(1, 3, 'T-Shirt'); // Adding more of the first item

// Get the cart contents
$cart = getCartContents();
echo "Cart Contents: <br>";
print_r($cart); // Display the cart contents (for debugging)

// Remove an item from the cart
removeFromCart(2);
echo "<br>Cart after removing Jeans: <br>";
print_r($cart);

// Update the quantity of a product
updateCartQuantity(1, 5);
echo "<br>Cart after updating T-Shirt quantity: <br>";
print_r($cart);


// Example to display the cart contents in a more user-friendly way (HTML)
echo "<br><h2>Shopping Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start(); // Start the session

// Check if the session is already started
if (!isset($_SESSION['cart'])) {
  // Initialize the cart session array
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already in cart, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product not in cart, add it
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// Example usage -  You'd typically get this information from a form, database, etc.
// For demonstration, let's add some items:
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another Laptop
addToCart(3, "Keyboard", 75, 1);



// Display the contents of the cart
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    echo "<li>";
    echo "<strong>" . $item_details['name'] . "</strong> - $" . $item_details['price'] . " x " . $item_details['quantity'] . " = $" . ($item_details['price'] * $item_details['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example:  Remove an item from the cart
// echo "<br>";
// echo "<a href='cart.php?action=remove&id=2'>Remove Mouse</a>";  // Example URL - needs more context
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Functions for Cart Operations ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.  Defaults to 1.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array representing the cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function cart_total_items() {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $quantity) {
      $total = $total + $quantity;
    }
  }
  return $total;
}

/**
 * Calculates the total cost of the cart (assuming products have a price).
 *
 *  This assumes you have a function to get the price of a product based on its ID.
 *
 * @param callable $getPrice A function that takes a product ID and returns the price.
 * @return float The total cost of the cart.
 */
function cart_total_cost($getPrice) {
  $total = 0;
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $price = $getPrice($product_id);
      $total_for_item = $price * $quantity;
      $total = $total + $total_for_item;
    }
  }
  return $total;
}



// --- Example Usage (Illustrative) ---

//  Simulated Product Data (Replace with your actual database or data source)
$products = [
  1 => ['name' => 'Shirt', 'price' => 20],
  2 => ['name' => 'Pants', 'price' => 30],
  3 => ['name' => 'Shoes', 'price' => 50],
];


// Add a shirt to the cart
add_to_cart(1);

// Add 2 shirts to the cart
add_to_cart(1, 2);

// Add pants to the cart
add_to_cart(2);

// Remove shoes from the cart
remove_from_cart(3);

// Update the quantity of shirts to 3
update_cart_quantity(1, 3);


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
if (isset($_SESSION['cart'])) {
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];
    $item_total = $product_price * $quantity;

    echo "<li>Product: $product_name (Quantity: $quantity) - Price: $product_price - Total: $item_total</li>";
  }
} else {
  echo "<li>Cart is empty.</li>";
}
echo "</ul>";

echo "<p>Total items in cart: " . cart_total_items() . "</p>";
echo "<p>Total cart cost: " . number_format(cart_total_cost(function($id) {
    return $products[$id]['price'];
})) . "</p>";


?>


<?php

session_start();

// Initialize the cart (array) if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Function to Add Items to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}


// --- Example Usage (You would typically handle this from your product page or form) ---
// Example 1: Adding a single item
addToCart(1, "Laptop", 1200, 1);

// Example 2: Adding multiple items
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); // Add more of the Laptop

// --- Function to Display Cart Items ---
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total_item = $price * $quantity;
    $total += $total_item;

    echo "<tr>";
    echo "<td>" . $name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total_item, 2) . "</td>";
    echo "</tr>";
  }

  echo "</table><br>";
  echo "<p><b>Total:</b> $" . number_format($total, 2) . "</p>";
}


// ---  Call the display function to show the cart contents ---
displayCart();

?>


<?php
session_start();

// Example: Add a product to the cart

// Product details
$product_id = 123;
$product_name = "Awesome T-Shirt";
$product_price = 25.00;

// Check if the cart exists
if (!isset($_SESSION['cart'])) {
  // If the cart doesn't exist, initialize it as an empty array
  $_SESSION['cart'] = array();
}

// Check if the product is already in the cart
if (isset($_SESSION['cart'][$product_id])) {
  // Product is already in the cart - increment quantity
  $_SESSION['cart'][$product_id]['quantity']++;
} else {
  // Product is not in the cart - add it with quantity 1
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $product_price,
    'quantity' => 1
  );
}

// Output the contents of the cart
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    echo "<li>" . $item_details['name'] . " - $" . $item_details['price'] . " x " . $item_details['quantity'] . " = $" . ($item_details['price'] * $item_details['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total = 0;
  foreach ($_SESSION['cart'] as $item_id => $item_details) {
    $total += $item_details['price'] * $item_details['quantity'];
  }
  echo "<p><strong>Total Cart Value: $" . $total . "</strong></p>";
}
?>


<?php

session_start(); // Start the session

// Check if the cart is empty, if not, initialize it
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Example functions for adding and removing items
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Product is already in the cart - increment quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Product not in cart - add it
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

function getCartItems() {
    return $_SESSION['cart'];
}

function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// --- Example Usage (Simulating user interactions) ---

// Add some products to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3);  // Add more of the same product


// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Remove an item from the cart (example)
//removeFromCart(2);

// Update quantity of an item
//updateQuantity(1, 5);  // Change quantity of Laptop to 5

// Display updated cart contents after update
//echo "<h2>Your Cart After Update</h2>";
//if (empty($_SESSION['cart'])) {
//    echo "<p>Your cart is empty.</p>";
//} else {
//    echo "<ul>";
//    foreach ($_SESSION['cart'] as $product_id => $product_details) {
//        echo "<li>";
//        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
//        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
//        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
//        echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
//        echo "</li>";
//    }
//    echo "</ul>";
//}


?>


<?php
session_start();

// --- Cart Initialization ---
// If a cart doesn't exist, initialize it as an empty array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Remove an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Update the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Get the total number of items in the cart.
 *
 * @return int
 */
function get_cart_count() {
    $count = 0;
    foreach ($_SESSION['cart'] as $quantity) {
        $count += $quantity;
    }
    return $count;
}

/**
 * Get the cart contents (for display purposes).
 *
 * @return array
 */
function get_cart_items() {
    $items = array();
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // In a real application, you would fetch product details here
        // based on the $product_id
        // For demonstration, let's assume we have a dummy product data array
        $product = get_product_details($product_id); // Implement this function to fetch product details
        $items[] = array(
            'id' => $product_id,
            'name' => $product['name'],
            'quantity' => $quantity,
            'price' => $product['price'] // Assuming product has a 'price' attribute
        );
    }
    return $items;
}

// *** Dummy function for fetching product details (replace with your actual data source) ***
function get_product_details($product_id) {
    // In a real application, you'd fetch this from a database
    // Or a product data file.
    // This is just a mock for demonstration purposes.
    $product_data = array(
        1 => array('name' => 'T-Shirt', 'price' => 20),
        2 => array('name' => 'Jeans', 'price' => 50),
        3 => array('name' => 'Shoes', 'price' => 80)
    );
    if (isset($product_data[$product_id])) {
        return $product_data[$product_id];
    } else {
        return null; // Product not found
    }
}


// --- Example Usage (Illustrative - This would typically come from a form submission) ---

// Add a T-Shirt to the cart
add_to_cart(1); // Adds 1 T-Shirt to the cart

// Add 2 Jeans to the cart
add_to_cart(2, 2);

// Update the quantity of the T-Shirt to 3
update_cart_quantity(1, 3);

// Remove the Jeans from the cart
remove_from_cart(2);

// Display the cart contents
$cart_items = get_cart_items();

// Output the cart contents (for demonstration)
echo "<h2>Your Cart:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

echo "<p>Total Items in Cart: " . get_cart_count() . "</p>";

?>


<?php
session_start(); // Start the session

// ----------------------------------------------------------------
// Function to add an item to the cart
// ----------------------------------------------------------------
function addToCart($product_id, $quantity) {
  // Check if the cart already exists, create it if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// ----------------------------------------------------------------
// Example Usage -  Simulate a product list and a user action
// ----------------------------------------------------------------

// Assume this is your product list (you'd typically fetch this from a database)
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75)
);

// Simulate a user adding an item to the cart
// User wants to add 2 laptops and 3 mice
addToCart(1, 2);  // Product ID 1 (Laptop) - Quantity 2
addToCart(2, 3);  // Product ID 2 (Mouse) - Quantity 3


// ----------------------------------------------------------------
// Displaying the Cart Contents -  For Demonstration
// ----------------------------------------------------------------

echo "<h2>Your Shopping Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_name = '';
    foreach ($products as $id => $product) {
      if ($id == $product_id) {
        $product_name = $product['name'];
        break;
      }
    }

    echo "<li>" . $product_name . " - Quantity: " . $item['quantity'] . " - Price: $" . $products[$product_id]['price'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// ----------------------------------------------------------------
// Notes and Considerations:
// ----------------------------------------------------------------

// 1. Session Start:  Always start the session using `session_start()` at the beginning of your script.

// 2. Data Storage:  The cart data is stored in the `$_SESSION` array.  This is a global, session-specific storage.

// 3. Cart Structure:
//    - `$_SESSION['cart']`: This array holds the items in the cart.
//    - Each element in the array is a product ID (e.g., 1, 2, 3).
//    - For each product ID, there's an associative array with:
//      - `quantity`: The number of that product in the cart.

// 4. Incrementing Quantity:
//   - If a product already exists in the cart, the code increments its quantity.
//   - If it doesn't exist, it adds it to the cart with a quantity of 1.

// 5.  Database Integration: In a real application, you'd replace the `$products` array with a database query to retrieve product information. You'd likely use a database query to add items to the cart.

// 6. Error Handling:  Add error handling (e.g., checking if quantity is valid).

// 7. Security:  In a production environment, consider security best practices (e.g., input validation, preventing XSS).

// 8.  Session Management: Implement proper session management to prevent session hijacking.

?>


<?php
session_start();

// --- Cart Session Variables ---
// Define session variables to store cart data.
// These keys are just examples; you can adjust them as needed.
define('CART_KEY', 'shopping_cart');

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name = null) {
    if (!isset($_SESSION[CART_KEY])) {
        $_SESSION[CART_KEY] = []; // Initialize the cart array
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION[CART_KEY][$product_id])) {
        // If it exists, increase the quantity
        $_SESSION[CART_KEY][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add it to the cart
        $_SESSION[CART_KEY][$product_id] = [
            'quantity' => $quantity,
            'name' => $product_name ?? $product_id // Using product_name if available, otherwise product_id
        ];
    }
}

// Function to get the cart contents
function getCartContents() {
    if (isset($_SESSION[CART_KEY])) {
        return $_SESSION[CART_KEY];
    } else {
        return []; // Return an empty array if the cart is empty
    }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $new_quantity) {
    if (isset($_SESSION[CART_KEY][$product_id])) {
        $_SESSION[CART_KEY][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    if (isset($_SESSION[CART_KEY][$product_id])) {
        unset($_SESSION[CART_KEY][$product_id]);
    }
}

// Function to clear the entire cart
function clearCart() {
    unset($_SESSION[CART_KEY]);
}

// --- Example Usage (Demonstration) ---
// Add some items to the cart
addToCart(1, 2); // Product ID 1, Quantity 2
addToCart(2, 1); // Product ID 2, Quantity 1
addToCart(1, 3); // Product ID 1, Quantity 3

// Display the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['name'] . "</li>";
    }
    echo "</ul>";
}


// Example: Update the quantity of product 1 to 5
updateCartItemQuantity(1, 5);

echo "<hr>";
echo "<h2>Cart Contents After Update:</h2>";
$cart = getCartContents();
foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . ", Name: " . $item['name'] . "</li>";
}



// Example: Remove product 2 from the cart
removeItemFromCart(2);

// Example: Clear the entire cart
// clearCart();


?>


<?php
session_start();

// Array to hold cart items (you'd likely get this from a database or product catalog)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (empty($_SESSION['cart'])) {
    $cart = [
      $product_id => ['name' => $product_name, 'price' => $price, 'quantity' => $quantity]
    ];
  } else {
    // Check if the product already exists in the cart
    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] += $quantity;
    } else {
      $cart[$product_id] = ['name' => $product_name, 'price' => $price, 'quantity' => $quantity];
    }
  }
}

// Function to update quantity of an existing item in the cart
function update_cart_quantity($product_id, $quantity) {
    global $cart;

    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    }
}


// Function to remove an item from the cart
function remove_from_cart($product_id) {
    global $cart;

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
}


// Function to get the cart contents (returns an array)
function get_cart() {
    return $cart;
}


// Add a product to the cart (example)
add_to_cart(1, "Awesome T-Shirt", 20.00, 2);
add_to_cart(2, "Cool Mug", 10.00);

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example of updating the cart
update_cart_quantity(1, 5);
echo "<br>";

echo "<h2>Your Cart After Update</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
remove_from_cart(2);

// Example of getting the cart contents
echo "<br>";
echo "<h2>Cart After Removal</h2>";
echo "<ul>";
foreach ($cart as $id => $item) {
  echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
}
echo "</ul>";

//  End the session to properly save the cart data
session_write_close(); // Important:  Closes and writes the session, crucial for data persistence.
?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCart() {
  return $_SESSION['cart'];
}

// Function to clear the cart
function clearCart() {
  $_SESSION['cart'] = [];
}

// ---------------------  Example Usage (for demonstration)  ---------------------

// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . "  <button onclick=\"updateQuantity('" . $product_id . "', parseInt(document.querySelector('#quantity-' . $product_id).value))\">Update Quantity</button></li>";
  }
  echo "</ul>";

  // Add a form to update the quantity of an item
  echo "<form id='update-cart'>";
  foreach($_SESSION['cart'] as $product_id => $product_details){
    echo "<label for='quantity-" . $product_id . "'>Quantity for " . $product_details['name'] . ":</label>
             <input type='number' id='quantity-" . $product_id . "' value='" . $product_details['quantity'] . "' min='1' max='10' name='" . $product_id . "'>";
  }
  echo "<input type='submit' value='Update Cart'>";
  echo "</form>";


  // Add a button to remove an item
  echo "<br><br>";
  echo "<button onclick=\"removeCartItem(1)\">Remove Laptop</button>"; //Example removal

} else {
  echo "<p>Your cart is empty.</p>";
}

// ---------------------  End Example Usage  ---------------------

// You would typically display this cart information within your website's template or page.
//  Further functionality would include adding a 'checkout' button, etc.
?>


<?php
session_start(); // Start the session

// Initialize the cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add a new entry
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    return false; // Product not found in cart
  }

  if ($new_quantity <= 0) {
    // Remove the item if quantity is zero or negative
    unset($_SESSION['cart'][$product_id]);
    return true;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  return true;
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulating a user interaction) ---

// 1. Add an item to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);

// 2. Update the quantity of the mouse
update_cart_quantity(2, 5);

// 3. Remove a product
remove_from_cart(1);


// 4. Display the cart contents
$cart_contents = get_cart_contents();
echo "<h2>Your Cart:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it as an empty array
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart array
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use &$item to modify the original array
      if ($item['product_id'] == $product_id) {
        $item['quantity'] = $quantity;
        break;
      }
    }
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['product_id'] == $product_id) {
        unset($_SESSION['cart'][$key]);
        // Optionally, re-index the array if needed
        // reset($_SESSION['cart']); 
        break;
      }
    }
  }
}

// Function to get the cart contents
function get_cart_contents() {
  if (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return array(); // Return an empty array if the cart is empty
  }
}

// Example usage (simulating a product being added to the cart)
// This is just an example - in a real application, you'd get product data from a database

// Add a product to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);


// Display the contents of the cart
$cart_contents = get_cart_contents();

echo "<h2>Your Shopping Cart</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $item) {
    echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example update
update_cart_quantity(1, 2); // Increase the quantity of Laptop to 2
echo "<br>Updated Cart: ";
$cart_contents = get_cart_contents();
echo "<pre>"; print_r($cart_contents); echo "</pre>";


// Example removal
remove_from_cart(2);
echo "<br>Cart after removing mouse: ";
$cart_contents = get_cart_contents();
echo "<pre>"; print_r($cart_contents); echo "</pre>";
?>


<?php

// Include the session handling library (if needed, often built-in)
session_start();

// Define the session variables
$session_id = session_id(); // Get the current session ID
$cart = array(); // Initialize an empty cart array
$total_items = 0;


// --- Functions for Cart Management ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id  The ID of the product to add.
 * @param int $quantity The quantity of the product to add (default: 1).
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
    global $cart, $total_items;

    // Check if the product is already in the cart
    if (isset($cart[$product_id])) {
        $cart[$product_id] += $quantity; // Increment quantity if exists
    } else {
        $cart[$product_id] = $quantity; // Add to cart if it doesn't exist
    }
    $total_items = array_sum($cart);  // Recalculate total
}


/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
    global $cart;
    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
        $total_items = array_sum($cart); // Recalculate total
    }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity of the product.
 * @return void
 */
function update_quantity(int $product_id, int $new_quantity) {
    global $cart;

    if (isset($cart[$product_id])) {
        $cart[$product_id] = $new_quantity;
        $total_items = array_sum($cart); // Recalculate total
    }
}



/**
 * Clears the entire cart.
 * @return void
 */
function clear_cart() {
    global $cart;
    $cart = array();
    $total_items = 0;
}



// --- Example Usage (Demonstration) ---

// Simulate adding items to the cart
add_to_cart(101, 2); // Add 2 of product ID 101
add_to_cart(102, 1); // Add 1 of product ID 102
add_to_cart(101, 3); // Add 3 of product ID 101

// Display the current cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";
}


echo "<p>Total Items in Cart: " . $total_items . "</p>";

// Example of removing an item
//remove_from_cart(102);

// Example of updating quantity
//update_quantity(101, 5);

// Example of clearing the cart
//clear_cart();


?>


<?php

// Start the session
session_start();

// --- Cart Variables ---

// Initialize an empty cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

// Function to add an item to the cart
function addToCart($item_id, $item_name, $item_price, $quantity = 1) {
    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$item_id])) {
        // Item exists, increase the quantity
        $_SESSION['cart'][$item_id]['quantity'] += $quantity;
    } else {
        // Item doesn't exist, add a new entry
        $_SESSION['cart'][$item_id] = [
            'name' => $item_name,
            'price' => $item_price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeCartItem($item_id) {
    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($item_id, $new_quantity) {
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart total
function getCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// --- Example Usage / Actions (Simulated) ---

// 1. Adding an item to the cart
if (isset($_POST['add_to_cart'])) {
    $item_id = $_POST['item_id'];
    $item_name = $_POST['item_name'];
    $item_price = floatval($_POST['item_price']);  // Convert to float
    $quantity = intval($_POST['quantity']);  // Convert to integer

    addToCart($item_id, $item_name, $item_price, $quantity);
    $message = "Item added to cart!";
}

// 2. Removing an item from the cart
if (isset($_GET['remove_item'])) {
    $item_id = $_GET['remove_item'];
    removeCartItem($item_id);
    $message = "Item removed from cart!";
}

// 3. Updating the quantity of an item
if (isset($_GET['update_quantity'])) {
    $item_id = $_GET['update_quantity'];
    $new_quantity = intval($_GET['quantity']); // Convert to integer
    updateCartQuantity($item_id, $new_quantity);
    $message = "Quantity updated!";
}



// --- Displaying the Cart ---

// Output the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        // Add a remove link for each item
        echo "<a href='?remove_item=" . $item_id . "'>Remove</a>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . number_format(getCartTotal(), 2) . "</strong></p>";
}

?>


<?php
session_start();

// Cart data (in a real application, this would come from a database)
$cart = [];

// --- Helper Functions ---

// Add item to cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  }
}

// Remove item from cart
function remove_from_cart($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Calculate cart total
function calculate_cart_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Display Cart Contents
function display_cart() {
  global $cart;

  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    echo "<form method='post' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>";
    echo "<input type='hidden' name='product_id' value='" . htmlspecialchars($product_id) . "'>";
    echo "<input type='submit' value='Remove from Cart'>";
    echo "</form>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculate_cart_total() . "</strong></p>";
}



// --- Example Usage (Simulate User Actions) ---

// 1. Add an item to the cart
add_to_cart(1, "T-Shirt", 20.00, 2);
add_to_cart(2, "Jeans", 50.00, 1);

// 2. Update quantity of an item
update_quantity(1, 3); // Increase quantity of T-Shirt to 3

// 3. Remove an item
//remove_from_cart(2); // Remove Jeans

// 4. Display the cart
display_cart();

// --- Session Management ---

// You'd typically handle adding items to the cart based on user interaction
// (e.g., clicking a "Add to Cart" button).  The following is a placeholder
// for how you *might* do that within a real application:

// Example:  Simulating a user adding an item to the cart (e.g., on a product page)
/*
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $_POST['product_name'];
  $price = $_POST['price'];
  $quantity = $_POST['quantity'];

  add_to_cart($product_id, $product_name, $price, $quantity);
  // Optionally, redirect to the cart page
  // header("Location: cart.php");
  // exit;
}
*/


?>


<?php
session_start();

// Initialize the cart (empty array) if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Item exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Example Usage:

// Add an item to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_details['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total:</strong> $" . number_format(($product_details['price'] * $product_details['quantity']), 2) . "<br>";
    echo "<form action='' method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='submit' value='Remove from Cart'>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// removeItemFromCart(2);

// Example of updating quantity
// updateQuantity(1, 3);

// Display the updated cart contents (after update)
// echo "<h2>Updated Shopping Cart</h2>";
// if (empty($_SESSION['cart'])) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($_SESSION['cart'] as $product_id => $product_details) {
//     echo "<li>";
//     echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
//     echo "<strong>Price:</strong> $" . number_format($product_details['price'], 2) . "<br>";
//     echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
//     echo "<strong>Total:</strong> $" . number_format(($product_details['price'] * $product_details['quantity']), 2) . "<br>";
//     echo "</li>";
//   }
//   echo "</ul>";
// }
?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart array
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // Optionally, you can update the quantity if the item already exists
  update_cart_quantity($product_id, $quantity);
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) { // Use & to modify the original array
            if ($item['product_id'] == $product_id) {
                $item['quantity'] = $quantity;
                break;
            }
        }
    }
}



// Example usage (Simulating a product selection)
$product1_id = 1;
$product1_name = "Laptop";
$product1_price = 1200;

$product2_id = 2;
$product2_name = "Mouse";
$product2_price = 25;

// Add the first item to the cart (1 quantity)
add_to_cart($product1_id, $product1_name, $product1_price);

// Add the second item to the cart (2 quantities)
add_to_cart($product2_id, $product2_name, $product2_price, 2);


// Display the cart contents
if (isset($_SESSION['cart'])) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total_price = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total_price += $item['price'] * $item['quantity'];
  }

  echo "<p><strong>Total Price: $" . $total_price . "</strong></p>";

  // Clear the cart (Optional - for example, after purchase)
  // unset($_SESSION['cart']);
} else {
  echo "<p>Your cart is empty.</p>";
}

?>


<?php
session_start();

// This is a simplified example and focuses on the core concepts.
// In a real application, you'd likely use a database to store your cart data.

// Sample product data (replace with your actual product information)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Hat', 'price' => 15],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1)
{
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0;
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] + $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents()
{
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return []; // Return an empty array if the cart is empty
    }
}

// --- Example Usage ---

// 1. Add a T-Shirt to the cart (quantity 2)
addToCart(1, 2);

// 2. Add Jeans to the cart (quantity 1)
addToCart(2);

// 3.  Display the cart contents
$cartContents = getCartContents();
echo "<h2>Your Shopping Cart</h2>";

if (empty($cartContents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartContents as $productId => $quantity) {
        $product = $products[$productId];
        echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
    }
    echo "</ul>";

    // Calculate the total cost
    $totalCost = 0;
    foreach ($cartContents as $productId => $quantity) {
        $product = $products[$productId];
        $totalCost += $product['price'] * $quantity;
    }

    echo "<p><strong>Total Cost: $" . number_format($totalCost, 2) . "</strong></p>";

}


// You would typically add code here to handle checkout,
// payment processing, etc., which is beyond the scope of this simple example.
?>


<?php

session_start();

// --- Cart Data (In a real application, this would likely come from a database) ---
$cart = [];

// Helper function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($cart[$product_id])) {
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $cart[$product_id]['quantity'] += $quantity;
  }
}

// Helper function to remove an item from the cart
function removeFromCart($product_id) {
    unset($cart[$product_id]);
}

// Helper function to update the quantity of an item in the cart
function updateQuantity($product_id, $newQuantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $newQuantity;
    }
}

// --- Example Product Data (Replace with your actual data) ---
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];

// --- User Cart Session Management ---

// Add an item to the cart when a user adds an item (e.g., from a product page)
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default to 1 if quantity is not provided

  if (isset($products[$product_id])) {
    addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
  } else {
    // Handle the case where the product ID is not found
    echo "Product ID " . $product_id . " not found.";
  }
}

// Remove an item from the cart
if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
    $product_id = $_POST['product_id'];
    removeFromCart($product_id);
}

// Update quantity of an item
if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
    $product_id = $_POST['product_id'];
    $newQuantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
    updateQuantity($product_id, $newQuantity);
}


// --- Display the Cart Contents ---

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
  }
  echo "</ul>";

  // Calculate the total cost
  $total = 0;
  foreach ($cart as $product_id => $item) {
    $total += $item['price'] * $item['quantity'];
  }
  echo "<p><strong>Total: $" . $total . "</strong></p>";
}

?>


<?php
session_start();

// --- Functions to Handle Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id  The ID of the product to add.
 * @param int    $quantity   The quantity to add. Defaults to 1.
 * @return void
 */
function add_to_cart(string $product_id, int $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity  The new quantity.
 * @return void
 */
function update_cart_quantity(string $product_id, int $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(string $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Returns the contents of the cart.
 *
 * @return array The cart contents.
 */
function get_cart_contents() {
  return $_SESSION['cart'] ?? []; // Return an empty array if cart is empty.
}


// --- Example Usage (Demonstration) ---

// 1. Initializing the Cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// 2. Adding Items to the Cart
add_to_cart('product1', 2); // Add 2 of product1
add_to_cart('product2', 1); // Add 1 of product2
add_to_cart('product1', 3); // Add 3 more of product1

// 3. Updating the quantity of an item
update_cart_quantity('product2', 5);

// 4. Removing an item
remove_from_cart('product1');


// 5. Displaying the Cart Contents
echo "<h2>Your Cart:</h2>";
$cart_contents = get_cart_contents();

if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php

// Start a session (if it doesn't exist)
session_start();

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart contents as an array.
 */
function getCartContents() {
  return $_SESSION['cart'] ?? [];  // Use null coalescing operator for safety
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
  $total = 0;
  $cart = getCartContents();
  foreach ($cart as $product_id => $item) {
    // Assuming you have a database or other source to get the product price
    $productPrice = getProductPrice($product_id); // Replace with your actual function
    $totalForProduct = $productPrice * $item['quantity'];
    $totalForProduct = $totalForProduct; //No need to recalculate.
    $total += $totalForProduct;
  }
  return $total;
}

/**
 * Placeholder function to retrieve product price.  Replace with your actual logic.
 *
 * @param int $product_id The ID of the product.
 * @return float The product price.
 */
function getProductPrice($product_id) {
  // Replace this with your logic to fetch product prices from a database, etc.
  // This is just a placeholder.
  switch ($product_id) {
    case 1: return 10.00;
    case 2: return 25.50;
    case 3: return 5.00;
    default: return 0.00;
  }
}

// --- Example Usage (Demonstration) ---

// 1. Add some items to the cart
addToCart(1); // Add one of product 1
addToCart(2, 2); // Add two of product 2
addToCart(1, 3); // Add three of product 1


// 2. Display the cart contents
$cartContents = getCartContents();
echo "<h2>Your Cart</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 3. Update quantity of product 1 to 5
updateCartQuantity(1, 5);

// 4. Display the cart contents again after update
echo "<h2>Your Cart (Updated)</h2>";
$cartContents = getCartContents();
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// 5. Calculate and display the total
$total = calculateTotal();
echo "<p>Total Cart Value: $" . number_format($total, 2) . "</p>";


// 6. Remove a product
removeFromCart(2);
echo "<p>Product 2 has been removed from your cart.</p>";

// 7. Display the cart contents after removal.
echo "<p>Final Cart Contents</p>";
$cartContents = getCartContents();
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// --- Example Cart Logic ---

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it's already in the cart, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If not, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
  $total = 0;
  if (empty($_SESSION['cart'])) {
    return $total = 0;
  }
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage (simulating user interaction) ---

// Add an item to the cart
addToCart('product1', 'Awesome T-Shirt', 20, 2);
addToCart('product2', 'Cool Mug', 10, 1);

// Get the cart contents
$cart = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// Calculate and display the total
$total = calculateCartTotal();
echo "<p><strong>Total: $" . $total . "</strong></p>";

// Remove an item from the cart
removeFromCart('product1');

// Update the quantity of an item
updateQuantity('product2', 3);

// Display the cart contents after changes
$cart = getCartContents();
echo "<h2>Cart Contents After Changes:</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// --- Initialize the Cart (if it doesn't exist) ---
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = 0; // Initialize quantity if not already present
  }
  $_SESSION['cart'][$product_id] += $quantity;
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array An array containing the items in the cart.
 */
function get_cart_items() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cart_items  An array of cart items (product_id => price).
 * @return float The total price.
 */
function calculate_total_price($cart_items) {
    $total = 0;
    foreach ($cart_items as $product_id => $quantity) {
        //  Assume you have a database query or function to fetch the product price
        $price = get_product_price($product_id); //Replace with your actual function
        $total_for_item = $price * $quantity;
        $total += $total_for_item;
    }
    return $total;
}

//  Dummy function to simulate fetching product prices from a database
function get_product_price($product_id) {
    // Replace this with your actual database query or API call
    switch ($product_id) {
        case 1: return 10.00;
        case 2: return 25.00;
        case 3: return 5.50;
        default: return 0; //Handle unknown product ID
    }
}


// --- Example Usage (Handle Add to Cart Button) ---
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default to 1 if no quantity provided

    add_to_cart($product_id, $quantity);

    // Optionally, redirect to the cart page or display a success message
    header("Location: cart.php"); //Redirect to cart.php
    exit(); //Important to prevent further processing on this page
}

// --- Example Usage (Handle Update Quantity Button) ---
if (isset($_POST['update_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 0; // Allow setting to 0 to remove

    if ($quantity > 0) {
        update_cart_quantity($product_id, $quantity);
    } else {
        remove_from_cart($product_id);
    }

    header("Location: cart.php");
    exit();
}



//--- Display Cart Contents (for demonstration) ---
echo "<h2>Your Cart</h2>";
if (empty(get_cart_items())) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (get_cart_items() as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
    echo "</ul>";

    echo "<p>Total Price: " . number_format(calculate_total_price(get_cart_items())) . "</p>";
}
?>


<?php
session_start();

// ----------------------- Cart Functions -----------------------

/**
 * Adds an item to the cart.
 *
 * @param string $productId The ID of the product being added.
 * @param int    $quantity  The quantity of the product to add.
 * @return void
 */
function add_to_cart(string $productId, int $quantity = 1)
{
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart if it doesn't exist
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it's already in the cart, increase the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it's not in the cart, add it with the given quantity
    $_SESSION['cart'][$productId] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $productId The ID of the product to update.
 * @param int    $quantity  The new quantity of the product.
 * @return void
 */
function update_cart_quantity(string $productId, int $quantity)
{
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  }
}

/**
 * Removes an item from the cart.
 *
 * @param string $productId The ID of the product to remove.
 * @return void
 */
function remove_from_cart(string $productId)
{
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array  An array of product items in the cart.
 */
function get_cart_items()
{
  return $_SESSION['cart'] ?? []; // Return an empty array if cart is not initialized
}


/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart()
{
  unset($_SESSION['cart']);
}


// ----------------------- Example Usage (Simulated) -----------------------

// Example: Add some products to the cart
add_to_cart('product1', 2);
add_to_cart('product2', 1);
add_to_cart('product1', 1); // Adding more of product1

// Display the cart contents
echo "<h2>Cart Items:</h2>";
$cart_items = get_cart_items();

if (count($cart_items) > 0) {
  echo "<ul>";
  foreach ($cart_items as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


// Example: Update the quantity of product1 to 3
update_cart_quantity('product1', 3);

// Display the updated cart
echo "<h2>Updated Cart Items:</h2>";
$cart_items = get_cart_items();

if (count($cart_items) > 0) {
  echo "<ul>";
  foreach ($cart_items as $productId => $item) {
    echo "<li>Product ID: " . $productId . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

// Example: Remove product2 from the cart
remove_from_cart('product2');

// Example: Clear the cart
// clear_cart();
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  unset($_SESSION['cart'][$product_id]);
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// Example Usage:
// -----------------------------------

// 1. Add an item to the cart
addToCart(1, "Awesome T-Shirt", 25.00, 2); // Product ID 1, Name, Price, Quantity
addToCart(2, "Cool Mug", 10.00, 1); // Product ID 2

// 2. Update the quantity of an item
updateCartQuantity(1, 3); // Increase the quantity of product 1 to 3

// 3. Get the cart contents
$cart_contents = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart_contents);
echo "</pre>";

// 4. Remove an item from the cart
removeCartItem(2);

// Get cart contents again to see the change
$cart_contents = getCartContents();
echo "<h2>Cart Contents After Removal:</h2>";
echo "<pre>";
print_r($cart_contents);
echo "</pre>";


// --- Example HTML to display the cart contents (in a real application, this would be dynamically generated) ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  $cart_contents = getCartContents();

  if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $product_data) {
      echo "<li>";
      echo "<strong>Product Name:</strong> " . $product_data['name'] . "<br>";
      echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
      echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
      echo "</li>";
    }
    echo "</ul>";
  }
  ?>

</body>
</html>


<?php

session_start();

// Simulate a user adding items to the cart
$cart = [];

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$productId] = [
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example usage: Add some items to the cart
addItemToCart(1, 'T-Shirt', 20.00, 2);
addItemToCart(2, 'Jeans', 50.00, 1);
addItemToCart(1, 'T-Shirt', 20.00, 1); // Add more of the T-Shirt

// --- Displaying the Cart Content ---

// Function to display the cart content
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $item) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $item['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
    echo "<strong>Total for Item:</strong> $" . number_format(($item['price'] * $item['quantity']), 2) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Call the function to display the cart
displayCart();


// --- Example of Removing an Item ---
// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Example: Remove the 'Jeans'
// removeItemFromCart(2);

// --- Example of Updating Quantity ---
// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

// Example: Update the quantity of the T-Shirt to 3
// updateQuantity(1, 3);


?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    // Item already in the cart, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to display the cart contents
function displayCart() {
  echo "<h2>Your Cart</h2>";

  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_details['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<form action='update_cart.php' method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
    echo "<input type='number' name='quantity' value='" . $product_details['quantity'] . "' min='1' max='100'>"; // example max limit
    echo "<button type='submit'>Update Quantity</button>";
    echo "</form>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total += $product_details['price'] * $product_details['quantity'];
  }
  echo "<p><strong>Total:</strong> $" . number_format($total, 2) . "</p>";
}

// --- Example Usage (For demonstration) ---
// Add some items to the cart
addToCart(1, "T-Shirt", 20.00, 2);
addToCart(2, "Jeans", 50.00, 1);
addToCart(1, "T-Shirt", 20.00, 3); // Adding more of the same item

// Display the cart contents
displayCart();

// Example of removing an item
// removeCartItem(2);
// displayCart(); // Display the cart again after removing the item
?>


<?php

session_start(); // Start the session

// --- Function to add an item to the cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it as an array.
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product is not in the cart, add it with quantity 1
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// --- Example Usage ---

// Add a product to the cart
addToCart(1, "Awesome T-Shirt", 25.00, 2); // product_id, name, price, quantity

// Add another product to the cart
addToCart(2, "Cool Mug", 12.50, 1);

// --- Display the Cart ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $total += ($product_details['price'] * $product_details['quantity']);
  }
  echo "<p><strong>Total Cart Value:</strong> $" . $total . "</p>";
}
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the product to the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to update the quantity of a product in the cart
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // If the product isn't in the cart, it's an error.  Handle this differently if desired.
    echo "Error: Product ID $product_id not found in the cart.";
    // Or, you could add the product with the given quantity.
  }
}

// Function to remove a product from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCart() {
  return $_SESSION['cart'];
}

// Function to clear the cart
function clearCart() {
  unset($_SESSION['cart']);
}

// --- Example Usage (Simulating User Actions) ---

// 1. Add a product to the cart (User adds item 1 in quantity 2)
addToCart(1, 2);

// 2. Add another product to the cart (User adds item 2 in quantity 1)
addToCart(2, 1);

// 3. Update the quantity of item 1 to 5
updateCartQuantity(1, 5);

// 4. View the cart contents
$cartContents = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<pre>";
  print_r($cartContents);
  echo "</pre>";
}


// 5. Remove item 2 from the cart
removeCartItem(2);

// 6. View the cart contents again
$cartContents = getCart();
echo "<h2>Cart Contents After Removal:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<pre>";
  print_r($cartContents);
  echo "</pre>";
}

// 7. Clear the cart
clearCart();

// 8. View the cart contents after clearing
$cartContents = getCart();
echo "<h2>Cart Contents After Clearing:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<pre>";
  print_r($cartContents);
  echo "</pre>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart with quantity 1
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example usage:

// Add an item to the cart
add_to_cart(1, 'Laptop', 1200, 1); // Product ID 1, Laptop, Price $1200, Quantity 1
add_to_cart(2, 'Mouse', 25, 2); // Product ID 2, Mouse, Price $25, Quantity 2


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";

    // Add a button to remove this item
    echo "<a href='cart.php?remove=" . $product_id . "'>Remove</a><br>";

    echo "</li>";
  }
  echo "</ul>";
}

// Example of updating the quantity
// echo "<br>Update Quantity for Product 1: <input type='number' value='2'>";
// if (isset($_POST['update_quantity'])) {
//   $new_quantity = $_POST['update_quantity'];
//   update_quantity(1, $new_quantity);
//   echo "<p>Quantity updated to " . $new_quantity . "</p>";
// }

?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Functions for Cart Management ---

// Add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If the product exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If the product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Get the contents of the cart
function get_cart_contents() {
    return $_SESSION['cart'];
}


// --- Example Usage / Handling Cart Actions ---

// 1. Add a product to the cart (Example)
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $product_name = $_POST['product_name'];
    $price = floatval($_POST['price']); // Convert to float
    $quantity = intval($_POST['quantity']);  // Convert to integer

    add_to_cart($product_id, $product_name, $price, $quantity);
    $message = "Product '$product_name' added to cart.";
}

// 2. Remove an item (Example)
if (isset($_GET['remove'])) {
    $product_id = $_GET['remove'];
    remove_from_cart($product_id);
    $message = "Product removed from cart.";
}

// 3. Update quantity (Example)
if (isset($_GET['update'])) {
    $product_id = $_GET['update'];
    $new_quantity = intval($_GET['quantity']); // Ensure it's an integer
    update_cart_quantity($product_id, $new_quantity);
    $message = "Quantity updated for product.";
}


// --- Displaying the Cart Contents ---

// Get the cart contents
$cart_contents = get_cart_contents();

// Get the total cart value
$total = 0;
if (is_array($cart_contents)) {
    foreach ($cart_contents as $item) {
        $total += $item['price'] * $item['quantity'];
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<?php if (empty($cart_contents)): ?>
    <p>Your cart is empty.</p>
<?php else: ?>

    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($cart_contents as $item): ?>
                <tr>
                    <td><?php echo $item['name']; ?></td>
                    <td>$<?php echo number_format($item['price'], 2); ?></td>
                    <td><?php echo $item['quantity']; ?></td>
                    <td>
                        <a href="?update=<?php echo $item['product_id']; ?>">Update</a> |
                        <a href="?remove=<?php echo $item['product_id']; ?>">Remove</a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <p>Total: $<?php echo number_format($total, 2); ?></p>

<?php endif; ?>


</body>
</html>


<?php
session_start();

// --- Cart Functions ---

/**
 * Add an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity of the product to add (default: 1).
 */
function addToCart($product_id, $name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Initialize cart as an empty array if it doesn't exist
    }

    if (isset($_SESSION['cart'][$product_id])) {
        // Item already in cart, update quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add new item to cart
        $_SESSION['cart'][$product_id] = [
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

/**
 * Remove an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}


/**
 * Update the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Get the cart contents.
 *
 * @return array The cart contents array.
 */
function getCart() {
    return $_SESSION['cart'] ?? []; // Use null coalesce operator for safety
}

/**
 * Calculate the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
    $total = 0;
    $cart = getCart();
    foreach ($cart as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}



// --- Example Usage (Simulate adding items to the cart) ---

// Add a product to the cart
addToCart('product1', 'T-Shirt', 20, 2);

// Add another product
addToCart('product2', 'Jeans', 50, 1);

// Update the quantity of product1
updateQuantity('product1', 3);

// Get the cart contents
$cart = getCart();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cart);
echo "</pre>";

// Calculate and display the total
$total = calculateTotal();
echo "<p><strong>Total Cart Value: $" . number_format($total, 2) . "</strong></p>";

// Remove an item from the cart
removeFromCart('product2');

// Display the updated cart
echo "<p><strong>Updated Cart Contents:</strong></p>";
echo "<pre>";
print_r($cart);
echo "</pre>";
?>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  if (isset($_SESSION['cart'][$product_id])) {
    // Item already in cart, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'product_name' => $product_name,
      'price' => $price
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart items
function getCartItems() {
    return $_SESSION['cart'];
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage (Simulating a request)

// Adding items to the cart
addToCart(1, 2, "Laptop", 1200);
addToCart(2, 1, "Mouse", 25);
addToCart(1, 1, "Laptop", 1200); //Adding another laptop

// Displaying the cart items
$cart_items = getCartItems();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";

    // Calculate total price
    $total = 0;
    foreach ($cart_items as $product_id => $item) {
        $total += $item['quantity'] * $item['price'];
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";

    //Remove Item example
    // removeFromCart(2);
    // $cart_items = getCartItems();
    // echo "<p>Updated cart items: </p>";
    // foreach ($cart_items as $product_id => $item) {
    //     echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    // }
}

//Example update quantity
//updateQuantity(1, 3);
?>


<?php
session_start(); // Start the session

// --- Function to Add Items to Cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// --- Example Usage (Simulated Product Data) ---

// Sample products
$products = array(
  1 => array('name' => 'Laptop', 'price' => 1200),
  2 => array('name' => 'Mouse', 'price' => 25),
  3 => array('name' => 'Keyboard', 'price' => 75),
);

// --- Handle User Actions (Simulated) ---

// 1.  User Adds a Laptop
if (isset($_POST['add_laptop'])) {
  addToCart(1, $products[1]['name'], $products[1]['price']);
}

// 2. User Adds a Mouse
if (isset($_POST['add_mouse'])) {
  addToCart(2, $products[2]['name'], $products[2]['price']);
}

// 3. User Adds a Keyboard
if (isset($_POST['add_keyboard'])) {
  addToCart(3, $products[3]['name'], $products[3]['price']);
}



// --- Display Cart Contents ---

echo "<h1>Your Shopping Cart</h1>";

if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $product_name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total = $price * $quantity;

    echo "<tr>";
    echo "<td>" . $product_name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total, 2) . "</td>";
    echo "</tr>";
  }
  echo "</table>";
}
?>


<?php

// Session Handling
session_start();

// Initialize the cart (if it doesn't exist)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}


// Example Usage (Simulating a user adding items)
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 1); // Add another laptop

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example: Removing an item
//removeFromCart(2);

// Example: Updating the quantity
//updateQuantity(1, 3);

?>


<?php
// Example of how you might add an item to the cart from a form:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, "Product Name", 50.00, $quantity);  // Replace "Product Name" with the actual product name
  }
}
?>


<?php
session_start();

// --- Product Information (For demonstration purposes) ---
$products = [
    1 => ["name" => "Laptop", "price" => 1200],
    2 => ["name" => "Mouse", "price" => 25],
    3 => ["name" => "Keyboard", "price" => 75],
];

// --- Cart Functions ---

/**
 * Adds a product to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add. Defaults to 1.
 */
function addToCart(int $product_id, int $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($products[$product_id])) {
        $product = $products[$product_id];
        $_SESSION['cart'][$product_id] = [
            'name' => $product['name'],
            'price' => $product['price'],
            'quantity' => $quantity,
        ];

        // Optionally:  You might want to update the quantity if the item already exists in the cart
        // and the quantity is greater than 1.
        // if (isset($_SESSION['cart'][$product_id]['quantity'])) {
        //     $_SESSION['cart'][$product_id]['quantity'] += $quantity;
        // }
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
    $total = 0.00;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total_item = $item['price'] * $item['quantity'];
            $total += $total_item;
        }
    }
    return $total;
}

/**
 * Clears the cart.
 */
function clearCart() {
    unset($_SESSION['cart']);
}


// ---  Handling Add to Cart Request (if this is part of a web form) ---
if (isset($_POST['add_to_cart'])) {
    //Get the product ID from the form (assuming a hidden field named 'product_id')
    $product_id = isset($_POST['product_id']) ? intval($_POST['product_id']) : 0; // Sanitize input

    if($product_id > 0){
       addToCart($product_id);
    }
}

// --- Displaying the Cart ---

echo "<h1>Shopping Cart</h1>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $cart_item) {
        echo "<li>" . $cart_item['name'] . " - $" . number_format($cart_item['price'], 2) . " x " . $cart_item['quantity'] . " = $" . number_format($cart_item['price'] * $cart_item['quantity'], 2) . "</li>";
    }
    echo "</ul>";

    echo "<p><strong>Total: $" . number_format(calculateTotal(), 2) . "</strong></p>";

    echo "<button onclick='clearCart()''>Clear Cart</button>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart Example</title>
</head>
<body>

    <h2>Products</h2>
    <ul>
        <?php
        foreach ($products as $id => $product) {
            echo "<li>" . $product['name'] . " - $" . number_format($product['price'], 2) . "<button onclick='addToCart(" . $id . ", 1)'>Add to Cart</button></li>";
        }
        ?>
    </ul>

    <script>
        // This is a basic JavaScript function to simulate adding to cart.
        // In a real application, you would use AJAX to send the product ID
        // to the server.

        function addToCart(product_id) {
            // In a real application, you would use AJAX to send this product_id
            // to the server.
            // For this example, we'll just display a message.

            alert("Added product " + product_id + " to the cart!");
        }

        function clearCart() {
           // In a real application, you would clear the cart data from the server.
           alert("Cart cleared!");
        }
    </script>
</body>
</html>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add the product to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
    return $_SESSION['cart'];
}


// --- Example Usage (Simulated Product Data) ---

// Dummy product data (replace with your actual database/API calls)
$products = array(
    1 => array('name' => 'Laptop', 'price' => 1200),
    2 => array('name' => 'Mouse', 'price' => 25),
    3 => array('name' => 'Keyboard', 'price' => 75)
);


// --- Handling Add to Cart Request (Simulated) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default to 1 if not provided

    if (isset($products[$product_id])) {
        addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
    } else {
        // Handle the case where the product ID is not found
        echo "Product ID '$product_id' not found.";
    }
}

// --- Handling Remove from Cart Request (Simulated) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeCartItem($product_id);
}

// --- Handling Update Quantity Request (Simulated) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];
    updateCartQuantity($product_id, $new_quantity);
}

// --- Display the Cart Contents ---

$cart_contents = getCartContents();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " (Quantity: " . $item['quantity'] . ")</li>";
    }
    echo "</ul>";
}


?>

<!-- Example HTML to simulate adding to cart -->
<form method="post" action="">
  <label for="product_id">Product ID:</label>
  <select name="product_id" id="product_id">
    <?php
    foreach ($products as $id => $product) {
      echo "<option value='" . $id . "'>" . $id . "</option>";
    }
    ?>
  </select>
  <br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" name="quantity" value="1" min="1">
  <br><br>
  <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

<!-- Example HTML to simulate removing from cart -->
<form method="post" action="">
    <label for="product_id">Product ID to Remove:</label>
    <select name="product_id" id="product_id">
        <?php
        foreach ($products as $id => $product) {
            echo "<option value='" . $id . "'>" . $id . "</option>";
        }
        ?>
    </select>
    <br><br>
    <input type="submit" name="remove_from_cart" value="Remove from Cart">
</form>


<?php
session_start();

// --- Cart Logic ---

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity,
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// --- Example Usage (Simulating Cart Interaction) ---

// 1. Add an item to the cart
addToCart(1, "Shirt", 20.00, 2); // product_id, name, price, quantity
addToCart(2, "Pants", 35.00, 1);

// 2. Update the quantity of a product
updateQuantity(1, 3); // Increase quantity of Shirt to 3

// 3. Remove an item from the cart
//removeFromCart(2); // Remove Pants

// --- Display the Cart ---

// Function to display the cart contents
function displayCart() {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>";

  $total = 0;

  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    $name = $product_details['name'];
    $price = $product_details['price'];
    $quantity = $product_details['quantity'];
    $total_item = $price * $quantity;

    echo "<tr>";
    echo "<td>" . $name . "</td>";
    echo "<td>$" . number_format($price, 2) . "</td>";
    echo "<td>" . $quantity . "</td>";
    echo "<td>$" . number_format($total_item, 2) . "</td>";
    echo "</tr>";

    $total += $total_item;
  }

  echo "</table>";
  echo "<p><strong>Total: $" . number_format($total, 2) . "</p>";
}

// --- HTML for Displaying the Cart ---

?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart Example</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
    displayCart();
  ?>

  <a href="checkout.php">Checkout</a>  <!-- Example Checkout Page -->

</body>
</html>


<?php

session_start(); // Start the session

// Check if the session is empty, if so, initialize an empty cart
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'quantity' => $quantity,
      'price' => $price
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// --- Example Usage (simulating user actions) ---

// Add some items to the cart
addToCart(1, 2, 'T-Shirt', 20);
addToCart(2, 1, 'Jeans', 50);
addToCart(1, 1, 'T-Shirt', 20);  // Add another T-Shirt
updateCartQuantity(1, 3); // Update the quantity of T-Shirt to 3


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
echo "<ul>";
$cart_items = getCartContents();

if (empty($cart_items)) {
    echo "<li>Your cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Price per item: $" . $item['price'] . "<br>";
        echo "Total for this item: $" . ($item['quantity'] * $item['price']) . "<br>";
        echo "</li>";
    }
}
echo "</ul>";


// Remove an item
// removeCartItem(2); // Uncomment this line to remove the jeans from the cart
?>


<?php

// Initialize session if not already started
if (!session_id()) {
  session_start();
}

// Array to store cart items
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the item is already in the cart
  if (isset($cart[$product_id])) {
    // If it exists, increase the quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add a new entry
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  unset($cart[$product_id]);
}

// Function to get the cart contents
function getCartContents() {
  return $cart;
}

// Function to calculate the total cart value
function calculateTotal() {
  $total = 0;
  foreach ($cart as $item) {
    $totalItemValue = $item['price'] * $item['quantity'];
    $total += $totalItemValue;
  }
  return $total;
}

//  ------------------- Example Usage and Cart Manipulation -------------------

// 1. Add some items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 2); // Add more of the same item


// 2. Update the quantity of an item
updateQuantity(2, 5); // Change the quantity of the mouse to 5

// 3. Remove an item
removeCartItem(1); // Remove the laptop

// 4. Get the cart contents
$cartContents = getCartContents();
echo "<h2>Cart Contents:</h2>";
echo "<pre>";
print_r($cartContents);
echo "</pre>";

// 5. Calculate and display the total
$total = calculateTotal();
echo "<p>Total Cart Value: $" . number_format($total, 2) . "</p>";


//  ------------------- Session Management (Storing the Cart) -------------------

// Store the cart data in the session
session_start(); // Important:  Start the session if it hasn't been started already
$_SESSION['cart'] = $cart; // Store the cart array in the session

// Output the session data for debugging or demonstration
echo "<p>Cart data stored in session:</p>";
print_r($_SESSION['cart']);
?>


<?php
session_start();

// Example Product Data (replace with your actual product information)
$products = [
    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
    3 => ['id' => 3, 'name' => 'Sneakers', 'price' => 80],
];

// Function to add an item to the cart
function addToCart($productId, $quantity = 1) {
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$productId] = $_SESSION['cart'][$productId] ?? 0; // Initialize if not already present
        $_SESSION['cart'][$productId] = ($_SESSION['cart'][$productId] + $quantity);
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }
}

// Function to get the cart items
function getCartItems() {
    if (isset($_SESSION['cart'])) {
        return $_SESSION['cart'];
    } else {
        return [];
    }
}

// Function to remove an item from the cart
function removeFromCart($productId) {
    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
        // Also remove from the session for consistency. Important for future operations.
        unset($_SESSION['cart'][$productId]);
    }
}


// --- Example Usage (Demonstration - can be replaced with your UI logic) ---

// Example: Adding an item to the cart
if (isset($_POST['add_to_cart'])) {
    $productId = (int)$_POST['product_id']; // Convert to integer for safety
    $quantity = (int)$_POST['quantity'];

    if (isset($products[$productId])) {
        addToCart($productId, $quantity);
    }
}

// Example: Removing an item from the cart
if (isset($_POST['remove_from_cart'])) {
    $productId = (int)$_POST['product_id'];
    removeFromCart($productId);
}


// --- Displaying the Cart ---

// Get the cart items
$cartItems = getCartItems();

// Calculate the total price
$totalPrice = 0;
foreach ($cartItems as $productId => $quantity) {
    if (isset($products[$productId])) {
        $totalPrice += $products[$productId]['price'] * $quantity;
    }
}

echo "<h2>Your Cart</h2>";

if (empty($cartItems)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cartItems as $productId => $quantity) {
        if (isset($products[$productId])) {
            echo "<li>" . $products[$productId]['name'] . " - Quantity: " . $quantity . " - Price: $" . $products[$productId]['price'] . "</li>";
        }
    }
    echo "</ul>";
    echo "<p>Total: $" . number_format($totalPrice, 2) . "</p>";
}

?>


<?php
session_start();

// Simulate adding items to the cart
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already exists in the cart, increase quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Add a new item to the cart
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage:  Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 3); // Add more of the same item
addToCart(3, 'Keyboard', 75, 1);


// Display the cart contents
echo "<h2>Shopping Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item_details) {
    $name = $item_details['name'];
    $price = $item_details['price'];
    $quantity = $item_details['quantity'];
    $total_price = $price * $quantity;

    echo "<li>" . $name . " - Price: $" . $price . ", Quantity: " . $quantity . ", Total: $" . $total_price . "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total_value = 0;
  foreach ($cart as $item_id => $item_details) {
    $total_value += $item_details['price'] * $item_details['quantity'];
  }
  echo "<p><strong>Total Cart Value: $" . $total_value . "</strong></p>";
}
?>


<?php

// Session start (if not already started)
session_start();

// --- Cart Logic ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
  // Check if the cart exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, update the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // If not, add the product to the cart
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity(int $product_id, int $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    // Handle the case where the product is not in the cart
    // You might want to log an error or prevent the update.
    // For this example, we'll just return without doing anything.
    return;
  }
}


/**
 * Removes a product from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Gets all items in the cart.
 *
 * @return array  An array containing the items in the cart.  Returns an empty array if the cart is empty.
 */
function get_cart_items() {
  return $_SESSION['cart'] ?? []; // Use null coalescing operator for safe array retrieval.
}

/**
 * Gets the total number of items in the cart
 *
 * @return int
 */
function get_cart_total() {
  $total = 0;
  foreach(get_cart_items() as $quantity => $product_id) {
    $total = $total + $quantity;
  }
  return $total;
}


// --- Example Usage ---

// Add a product to the cart
add_to_cart(123, 2); // Add 2 of product ID 123

// Update the quantity of a product
update_cart_quantity(123, 5); // Update the quantity of product 123 to 5

// Get the cart items
$cart_items = get_cart_items();
echo "Cart Items: " . print_array($cart_items) . "<br>";


// Remove a product from the cart
remove_from_cart(456);

// Get the cart items again
$cart_items = get_cart_items();
echo "Cart Items: " . print_array($cart_items) . "<br>";

// Get the total
$total = get_cart_total();
echo "Cart Total: " . $total . "<br>";


/**
 * Helper function to print an array nicely.
 *
 * @param array $array The array to print.
 * @return string
 */
function print_array(array $array) {
    $output = "[";
    $count = 0;
    foreach ($array as $key => $value) {
      $output .= $value . ", ";
      $count++;

      if ($count < count($array)) {
          $output .= "  " . $key . ", ";
      } else {
          $output .= "  " . $key;
      }
    }
    $output .= "]";
    return $output;
}

?>


<?php

session_start();

// Define a function to add items to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the product to the cart
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  // You can optionally store the total of the cart here for display purposes
  // $_SESSION['cart_total'] = calculateCartTotal($_SESSION['cart']);
}

// Function to calculate the total cart value
function calculateCartTotal($cart) {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// --- Example Usage ---

// Simulate a product ID, name, and price
$product_id = 1;
$product_name = "Awesome T-Shirt";
$price = 25.00;

// Add the item to the cart
addToCart($product_id, $product_name, $price);

// Add another quantity of the same item
addToCart($product_id, $product_name, $price, 2);

// Display the contents of the cart
if (isset($_SESSION['cart'])) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $product_info) {
    echo "<li>";
    echo "<strong>" . $product_info['name'] . "</strong> - $" . $product_info['price'] . " x " . $product_info['quantity'] . " = $" . ($product_info['price'] * $product_info['quantity']) . "</li>";
  }
  echo "</ul>";

  // Display the total
  echo "<p><strong>Total: $" . calculateCartTotal($_SESSION['cart']) . "</strong></p>";
} else {
  echo "<p>Your cart is empty.</p>";
}
?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Example function to add an item to the cart
function addItemToCart($product_id, $product_name, $price, $quantity) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example function to remove an item from the cart
function removeItemFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Example function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// --- Example Usage (Demonstration) ---

// Add a few items to the cart
addItemToCart(1, "Laptop", 1200, 1);
addItemToCart(2, "Mouse", 25, 2);
addItemToCart(1, "Laptop", 1200, 1); // Adding another laptop - quantity will be updated

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Remove an item
// removeItemFromCart(2);

// Update Quantity
// updateQuantity(1, 3); // Update the quantity of Laptop to 3

// Display updated cart contents
// echo "<h2>Updated Shopping Cart</h2>";
// if (empty($_SESSION['cart'])) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($_SESSION['cart'] as $product_id => $product_details) {
//     echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
//   }
//   echo "</ul>";
// }


?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    // If the cart is empty, initialize it as an array
    $_SESSION['cart'] = [];
  }

  // Create an associative array for the item
  $item = [
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // Add the item to the cart array
  $_SESSION['cart'][] = $item;

  // Optionally, update the quantity if the item already exists
  // in the cart.  This is more complex and adds more overhead, so
  //  the simple approach of adding the item is generally preferred
  //  unless you need to precisely track quantities for complex scenarios.

  //  See the comments below for a more advanced version if needed.
}


// Example Usage:
// Assuming you have a product ID, name, and price from a form submission,
// or database retrieval, etc.

// Add one item to the cart
addToCart(1, "T-Shirt", 20.00);

// Add two items to the cart
addToCart(2, "Jeans", 50.00, 2);


// Display the cart contents (for demonstration purposes)
echo "<h2>Your Shopping Cart</h2>";

if (!empty($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}

// For debugging/development, you can print the session to see its contents.
// This should *not* be in production code.
// echo "<pre>";
// print_r($_SESSION['cart']);
// echo "</pre>";
?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists, update the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// Example Usage (Illustrative - Replace with your actual product data)

// Add some items to the cart
addToCart(1, "Shirt", 25.00, 2);
addToCart(2, "Pants", 50.00, 1);
addToCart(1, "Shirt", 25.00, 1); // Add another shirt

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cartContents = getCartContents();

if (empty($cartContents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cartContents as $product_id => $productData) {
    echo "<li>" . $productData['name'] . " - $" . $productData['price'] . " x " . $productData['quantity'] . " = $" . ($productData['price'] * $productData['quantity']) . "</li>";
  }
}
echo "</ul>";

// Example of removing an item
// removeFromCart(2);

// Example of updating quantity
// updateQuantity(1, 5);

// Display updated cart contents after update
// echo "<h2>Cart Contents After Update:</h2>";
// $cartContents = getCartContents();
// foreach ($cartContents as $product_id => $productData) {
//   echo "<li>" . $productData['name'] . " - $" . $productData['price'] . " x " . $productData['quantity'] . " = $" . ($productData['price'] * $productData['quantity']) . "</li>";
// }

?>


<?php

// Start a session (if not already started)
session_start();

// --- Cart Management Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id  The ID of the product to add.
 * @param int $quantity   The quantity of the product to add.
 * @return bool True if the item was added successfully, false otherwise.
 */
function addToCart(int $product_id, int $quantity) {
  // Check if the cart already exists.  If not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart.
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already in cart, update the quantity
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    // Product not in cart, add it with the given quantity
    $_SESSION['cart'][$product_id] = $quantity;
  }
  return true;
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity  The new quantity for the product.
 * @return bool True if the update was successful, false otherwise.
 */
function updateCartItem(int $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
        return true;
    }
    return false;
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return bool True if the item was removed successfully, false otherwise.
 */
function removeFromCart(int $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    return true;
  }
  return false;
}

/**
 * Gets all items in the cart.
 *
 * @return array An array containing the items in the cart.
 */
function getCart() {
  return $_SESSION['cart'];
}


/**
 * Clears the entire cart.
 */
function clearCart() {
  unset($_SESSION['cart']);
}

// --- Example Usage ---

// Add a product to the cart
addToCart(1, 2); // Add 2 of product ID 1 to the cart
addToCart(2, 1); // Add 1 of product ID 2 to the cart
addToCart(1, 3); // Add 3 of product ID 1 to the cart



// Display the cart contents
echo "<h2>Your Cart:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    //  You'd replace this with a database lookup to get the product name and details.
    //  This is just a placeholder.
    $product_name = "Product " . $product_id;
    echo "<li>$product_name: " . $quantity . "</li>";
  }
  echo "</ul>";
}


// Update the quantity of a product
updateCartItem(1, 5);

// Display the updated cart contents
echo "<h2>Your Cart (Updated):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    //  You'd replace this with a database lookup to get the product name and details.
    //  This is just a placeholder.
    $product_name = "Product " . $product_id;
    echo "<li>$product_name: " . $quantity . "</li>";
  }
  echo "</ul>";
}


// Remove an item from the cart
removeFromCart(2);

// Display the cart after removal
echo "<h2>Your Cart (After Removal):</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    //  You'd replace this with a database lookup to get the product name and details.
    //  This is just a placeholder.
    $product_name = "Product " . $product_id;
    echo "<li>$product_name: " . $quantity . "</li>";
  }
  echo "</ul>";
}



// Clear the cart (optional)
// clearCart();
?>


<?php

session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product being added.
 * @param string $product_name The name of the product.
 * @param int    $price       The price of the product.
 * @param int    $quantity   The quantity of the product to add (default: 1).
 */
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array(
      'name'     => $product_name,
      'price'    => $price,
      'quantity' => $quantity
    );
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $new_quantity The new quantity of the product.
 */
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

/**
 * Gets the cart contents.
 *
 * @return array The cart array.
 */
function getCart() {
  return $_SESSION['cart'];
}


// --- Example Usage (Simulating User Interaction) ---

// Add a product to the cart
addToCart('product1', 'Awesome T-Shirt', 20, 2);

// Add another product to the cart
addToCart('product2', 'Cool Mug', 10, 1);

// Update the quantity of product1
updateQuantity('product1', 5);

// Get the cart contents
$cart = getCart();

// Display the cart contents
echo "<h2>Your Cart:</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}


// ---  Demonstration of Removing an Item ---
// removeFromCart('product2');

// Get the cart contents again to see the change
// $cart = getCart();
// echo "<h2>Cart after removal:</h2>";
// if (empty($cart)) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($cart as $product_id => $product_data) {
//     echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
//   }
//   echo "</ul>";
// }


?>


<?php

session_start();

// Check if the cart is empty
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart as an empty array
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Item exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Example Usage:  (You would typically get this data from a form or database)
// Add an item to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);


// Remove an item from the cart
//removeItemFromCart(2);

// Update the quantity of an item
//updateQuantity(1, 3);

// Display the cart contents
echo "<h2>Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// Session variables for the cart
$cart = [];

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $item_price, $quantity = 1) {
  global $cart;

  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    $cart[$item_id] = [
      'name' => $item_name,
      'price' => $item_price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;

  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($item_id, $new_quantity) {
  global $cart;

  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $new_quantity;
  }
}


// Example usage -  Simulating a product listing

$products = [
  1 => ['name' => 'Shirt', 'price' => 25],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 75],
];


// Example Cart Interactions

// 1. Add an item to the cart
add_to_cart(1, 'Shirt', 25, 2);  // Add 2 shirts
add_to_cart(2, 'Jeans', 50, 1); // Add 1 pair of jeans
add_to_cart(3, 'Shoes', 75, 1); // Add 1 pair of shoes

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $item_id => $item_details) {
    $name = $item_details['name'];
    $price = $item_details['price'];
    $quantity = $item_details['quantity'];
    $total_item_price = $price * $quantity;

    echo "<li>" . $name . " - $" . $price . " x " . $quantity . " = $" . $total_item_price . "</li>";
  }
  echo "</ul>";

  // Calculate total cart value
  $total_cart_value = 0;
  foreach ($cart as $item_id => $item_details) {
    $total_item_price = $item_details['price'] * $item_details['quantity'];
    $total_cart_value += $total_item_price;
  }
  echo "<p><strong>Total Cart Value: $" . number_format($total_cart_value, 2) . "</strong></p>";
}


// 2. Remove an item from the cart (e.g., remove one pair of jeans)
//remove_from_cart(2);
//echo "<p>Jeans removed from cart.</p>";

// 3. Update the quantity of an item (e.g., increase the quantity of shirts to 3)
//update_quantity(1, 3);
//echo "<p>Shirt quantity updated to 3.</p>";


?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it is, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it isn't, add the product to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to get the cart contents
function get_cart_contents() {
    return $_SESSION['cart'];
}

// Example usage:  Simulating a product ID and adding to the cart
// $product_id = 1;
// $product_name = "Awesome T-Shirt";
// $price = 25.00;
// add_to_cart($product_id, $product_name, $price);

// Example usage:  Adding multiple items
// add_to_cart(1, "Awesome T-Shirt", 25.00, 2);
// add_to_cart(2, "Cool Mug", 10.00, 3);

// Example usage: Removing an item
// remove_from_cart(2);

// Example usage:  Updating quantity
// update_cart_quantity(1, 5);


// Display the cart contents
$cart_contents = get_cart_contents();

echo "<h2>Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'] . "<button onclick=\"removeItem('" . $product_id . "')\">Remove</button></li>";
    }
    echo "</ul>";
}


?>

<!-- JavaScript to handle removing items from the cart (this would be in a separate HTML file) -->
<script>
function removeItem(productId) {
    // You would likely send a request to the server to remove the item
    // from the session.  For this example, we'll just simulate it.
    alert("Removed product with ID: " + productId); //Replace with actual server-side removal
}
</script>


<?php
session_start();

// Initialize an empty cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Function to add an item to the cart ---
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Validate that quantity is a number
  if (!is_numeric($quantity) || $quantity <= 0) {
    return false; // Invalid quantity
  }

  // Add the item to the cart array
  $_SESSION['cart'][$product_id] = array(
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );

  return true;
}

// --- Example Usage (Simulated Product Data) ---
$products = array(
  1 => array('name' => 'T-Shirt', 'price' => 20),
  2 => array('name' => 'Jeans', 'price' => 50),
  3 => array('name' => 'Shoes', 'price' => 80)
);


// --- Handling User Actions (Simulated) ---

// 1. Add a T-Shirt to the cart (quantity = 2)
if (isset($_POST['add_tshirt'])) {
  addToCart(1, 'T-Shirt', 20, 2);
  $message = "T-Shirt added to cart!";
}

// 2. Add Jeans to the cart (quantity = 1)
if (isset($_POST['add_jeans'])) {
  addToCart(2, 'Jeans', 50, 1);
  $message = "Jeans added to cart!";
}


// --- Displaying the Cart ---

echo "<!DOCTYPE html>
<html>
<head>
<title>Shopping Cart</title>
</head>
<body>";

echo "<h1>Shopping Cart</h1>";

// Check if the cart is empty
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  // Loop through the cart and display the items
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_name = $item['name'];
    $price = $item['price'];
    $quantity = $item['quantity'];

    echo "<li>" . $product_name . " - $" . $price . " x " . $quantity . " = $" . ($price * $quantity) . "</li>";
  }
  echo "</ul>";
}

echo "<br>";

echo "<form method='post'>
        <label for='add_tshirt'>Add T-Shirt (Quantity):</label>
        <input type='number' name='add_tshirt' value='1' min='1' >
        <input type='submit' name='add_tshirt' value='Add to Cart'>
      </form>
      <br>
      <form method='post'>
        <label for='add_jeans'>Add Jeans (Quantity):</label>
        <input type='number' name='add_jeans' value='1' min='1'>
        <input type='submit' name='add_jeans' value='Add to Cart'>
      </form>";

echo "</body>
</html>";
?>


<?php
session_start();

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the item already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If it exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If it doesn't exist, add a new item to the cart
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    }
}


// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    return false; // Item not found in cart
  }

  if ($new_quantity <= 0) {
    // Remove the item if quantity is zero or negative
    unset($_SESSION['cart'][$product_id]);
    return true;
  }

  $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  return true;
}


// Function to remove an item from the cart
function removeItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
    return true;
}


// Function to display the cart contents
function displayCart() {
    echo "<h2>Shopping Cart</h2>";
    if (empty($_SESSION['cart'])) {
        echo "<p>Your cart is empty.</p>";
        return;
    }

    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_info) {
        echo "<li>";
        echo "<strong>" . $product_info['name'] . "</strong> - $" . $product_info['price'] . "</li>";
        echo "<form method='post' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>"; // Use htmlspecialchars for security
        echo "<label for='quantity_" . $product_id . "'>Quantity:</label>";
        echo "<input type='number' id='quantity_" . $product_id . "' value='" . $product_info['quantity'] . "' min='1' max='100' name='quantity_" . $product_id . "'/>"; // Added min/max attributes for validation
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<button type='submit'>Update</button>";
        echo "</form>";
    }
    echo "</ul>";
}


// Example Usage - You would typically get this data from a form or database
// For demonstration purposes, we'll add a few items to the cart.
addToCart(1, "Shirt", 20, 2);
addToCart(2, "Pants", 30, 1);
addToCart(1, "Shirt", 20, 3); //Add more of the shirt
addToCart(3, "Shoes", 50, 1);

// Display the cart contents
displayCart();

// Example of updating quantity
if (isset($_POST['quantity_1'])) {
    $newQuantity = intval($_POST['quantity_1']);
    if (updateQuantity(1, $newQuantity)) {
        echo "<p>Quantity of Shirt updated to " . $newQuantity . "</p>";
    } else {
        echo "<p>Error updating quantity for Shirt.</p>";
    }
}

//Example of removing an item
if (isset($_POST['remove_1'])) {
    removeItem(1);
    echo "<p>Shirt removed from cart.</p>";
}

// Display the cart contents after updates or removals
displayCart();

?>


<?php
session_start();

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id      The ID of the product to add.
 * @param string $product_name    The name of the product.
 * @param int    $quantity       The quantity to add (default: 1).
 * @param float  $price          The price of the product.
 *
 * @return bool True on success, false on failure (e.g., invalid quantity).
 */
function addToCart(string $product_id, string $product_name, int $quantity = 1, float $price) {
  // Validate quantity
  $quantity = max(1, (int)$quantity); // Ensure quantity is at least 1

  if ($quantity <= 0) {
    return false;
  }

  // Check if the cart exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add new product to cart
    $_SESSION['cart'][$product_id] = [
      'name'    => $product_name,
      'quantity' => $quantity,
      'price'   => $price
    ];
  }

  return true;
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity  The new quantity for the product.
 *
 * @return bool True on success, false on failure (e.g., product not found).
 */
function updateCartItem(string $product_id, int $quantity) {
    if (!isset($_SESSION['cart'][$product_id])) {
        return false;
    }

    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    return true;
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 *
 * @return bool True on success, false if the product is not in the cart.
 */
function removeFromCart(string $product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
    return true;
  }
  return false;
}

/**
 * Gets the items in the cart.
 *
 * @return array The cart contents as an associative array.
 */
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return empty array if cart doesn't exist
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateCartTotal() {
  $total = 0;
  $cart = getCartContents();
  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}


// --- Example Usage ---

// Add some items to the cart
addToCart('product1', 'Awesome T-Shirt', 2, 25.00);
addToCart('product2', 'Cool Mug', 1, 10.00);
addToCart('product3', 'Fancy Hat', 3, 15.00);

// Display the cart contents
$cartContents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}

echo "<p><strong>Total Cart Value:</strong> $" . calculateCartTotal() . "</p>";

// Update quantity
updateCartItem('product1', 3);

echo "<p><strong>Updated Cart Value:</strong> $" . calculateCartTotal() . "</p>";


// Remove an item
removeFromCart('product2');

echo "<p><strong>Updated Cart Value:</strong> $" . calculateCartTotal() . "</p>";

// Display the cart contents after removal
$cartContents = getCartContents();
echo "<h2>Cart Contents:</h2>";
if (empty($cartContents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartContents as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// --- Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id  The ID of the product being added.
 * @param int    $quantity   The quantity of the product to add.
 * @return void
 */
function add_to_cart(string $product_id, int $quantity) {
  // Check if the cart already exists.  If not, create it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart.
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart with a quantity of 1.
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int    $quantity The new quantity.
 * @return void
 */
function update_cart_quantity(string $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(string $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Clears the entire cart.
 *
 * @return void
 */
function clear_cart() {
    unset($_SESSION['cart']);
}


// --- Example Usage (Demonstration) ---

// Add some items to the cart
add_to_cart('product1', 2);
add_to_cart('product2', 1);
add_to_cart('product1', 3); // Add more of product1


// Display the contents of the cart
echo "<h2>Your Cart:</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['quantity'] . " x " . "<a href='details.php?product_id=$product_id'>$product_id</a> (Price: $5)</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}

// Update the quantity of product1 to 5
update_cart_quantity('product1', 5);

// Display the updated cart
echo "<h2>Your Cart (Updated):</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['quantity'] . " x " . "<a href='details.php?product_id=$product_id'>$product_id</a> (Price: $5)</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}

// Remove product2 from the cart
remove_from_cart('product2');

// Display the updated cart (after removing an item)
echo "<h2>Your Cart (After Removal):</h2>";
if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['quantity'] . " x " . "<a href='details.php?product_id=$product_id'>$product_id</a> (Price: $5)</li>";
    }
    echo "</ul>";
} else {
    echo "<p>Your cart is empty.</p>";
}


// Clear the cart
// clear_cart();

// Display the final empty cart
// echo "<h2>Your Cart (Empty):</h2>";
// if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
//     echo "<ul>";
//     foreach ($_SESSION['cart'] as $product_id => $item) {
//         echo "<li>" . $item['quantity'] . " x " . "<a href='details.php?product_id=$product_id'>$product_id</a> (Price: $5)</li>";
//     }
//     echo "</ul>";
// } else {
//     echo "<p>Your cart is empty.</p>";
// }

?>


<?php

// Start a session (if not already started)
session_start();

// --------------------------------------------------------------------
//  Function to add an item to the cart
// --------------------------------------------------------------------
function addToCart($product_id, $quantity = 1, $product_name = null) {
  // Check if the cart already exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];  // Initialize an empty cart array
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product already exists in the cart, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist in the cart, add it with the given quantity
    $_SESSION['cart'][$product_id] = [
      'quantity' => $quantity,
      'name' => $product_name ?? $product_id, // Use product name if provided, otherwise use ID
    ];
  }
}

// --------------------------------------------------------------------
//  Example Usage (for demonstration purposes)
// --------------------------------------------------------------------

// Add a product to the cart
addToCart(123, 2);  // Add 2 units of product with ID 123

// Add another product to the cart
addToCart(456, 1, "Awesome T-Shirt"); // Add 1 unit of product with ID 456 and name "Awesome T-Shirt"


// --------------------------------------------------------------------
//  Displaying the Cart Contents (for demonstration)
// --------------------------------------------------------------------

echo "<h2>Your Shopping Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "Product ID: " . $product_id . "<br>";
    echo "Product Name: " . $product_details['name'] . "<br>";
    echo "Quantity: " . $product_details['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
} else {
  echo "<p>Your cart is empty.</p>";
}


?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart already exists, create it if not
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Add the item to the cart
  $_SESSION['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as &$item) { // Use &$item for modification
      if ($item['product_id'] == $product_id) {
        $item['quantity'] = $new_quantity;
        break;
      }
    }
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
    $key = array_search(
      array('product_id' => $product_id),
      $cart
    );

    if ($key !== false) {
      unset($cart[$key]);
    }
  }
}

// Function to get the cart contents
function get_cart_contents() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return array(); // Return an empty array if the cart is empty
  }
}

// Example usage (Simulated product data - replace with your database or product list)

$products = array(
  1 => array('product_id' => 1, 'product_name' => 'Laptop', 'price' => 1200),
  2 => array('product_id' => 2, 'product_name' => 'Mouse', 'price' => 25),
  3 => array('product_id' => 3, 'product_name' => 'Keyboard', 'price' => 75)
);


// Simulate a user adding items to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);
add_to_cart(3, 'Keyboard', 75, 1);

// Simulate updating the quantity of the mouse
update_cart_quantity(2, 3);

// Get the cart contents
$cart_items = get_cart_contents();

// Display the cart items
echo "<h2>Cart Contents:</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $item) {
    echo "<li>" . $item['product_name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
  }
  echo "</ul>";

  // Calculate the total price
  $total_price = 0;
  foreach ($cart_items as $item) {
    $total_price += $item['price'] * $item['quantity'];
  }

  echo "<p><strong>Total Price: $" . number_format($total_price, 2) . "</strong></p>";
}


// Example of removing an item from the cart
// remove_from_cart(2); // Remove the mouse

// Get the cart contents after removal
// $cart_items = get_cart_contents();
// print_r($cart_items);

?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment the quantity if the product is already in the cart
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage (Demonstration - Replace with actual product data and form handling)
// Let's assume we have products with IDs 1, 2, and 3
// In a real application, you would retrieve this data from a database.

// Add a product to the cart
addToCart(1, 'Shirt', 20, 2);
addToCart(2, 'Shoes', 50, 1);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total:</strong> $" . $product_details['price'] * $product_details['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example: Remove an item
// removeCartItem(1);

// Example: Update quantity of product 2 to 3
// updateQuantity(2, 3);

?>


<?php

session_start();

// ---------------------------------------------------------------------
// Example Product Data (Replace with your actual product data)
// ---------------------------------------------------------------------

$products = [
  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],
  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],
  3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],
];


// ---------------------------------------------------------------------
// Add to Cart Function
// ---------------------------------------------------------------------

function addToCart($product_id, $quantity = 1)
{
  global $products;

  if (isset($products[$product_id])) {
    if (isset($_SESSION['cart'])) {
      $_SESSION['cart'][$product_id] += $quantity;
    } else {
      $_SESSION['cart'] = [
        $product_id => $quantity
      ];
    }
  } else {
    // Product not found - you might want to handle this differently
    echo "Product ID " . $product_id . " not found.";
  }
}


// ---------------------------------------------------------------------
// Example Usage:  Adding items to the cart
// ---------------------------------------------------------------------

// Add one T-shirt
addToCart(1);

// Add two pairs of Jeans
addToCart(2, 2);

// Add one pair of Shoes
addToCart(3);


// ---------------------------------------------------------------------
// Display Cart Contents
// ---------------------------------------------------------------------

echo "<h2>Your Shopping Cart</h2>";

if (isset($_SESSION['cart']) && count($_SESSION['cart']) > 0) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product = $products[$product_id];
    echo "<li>" . $product['name'] . " - Quantity: " . $quantity . " - Price: $" . $product['price'] . "</li>";
  }
  echo "</ul>";

  // Calculate total
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $product = $products[$product_id];
    $total += $product['price'] * $quantity;
  }
  echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";

} else {
  echo "<p>Your cart is empty.</p>";
}

// ---------------------------------------------------------------------
//  Example: Removing an item from the cart (optional)
// ---------------------------------------------------------------------
//
//  You would need a function like this:
//  function removeFromCart($product_id) {
//    if (isset($_SESSION['cart']) && isset($_SESSION['cart'][$product_id])) {
//      unset($_SESSION['cart'][$product_id]);
//      if (count($_SESSION['cart']) == 0) {
//        unset($_SESSION['cart']); // Clear the entire cart if it's empty
//      }
//    }
//  }
//
//  // Example: Remove one T-shirt
//  // removeFromCart(1);
//
?>


<?php

session_start();

// --- Cart Session Variables ---

// Define keys for cart items
$cartKeys = ['item_id', 'item_name', 'quantity', 'price'];

// Function to add an item to the cart
function add_to_cart($item_id, $item_name, $quantity, $price) {
  global $cartKeys;

  // Check if cart exists.  If not, initialize it.
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Add the item to the cart
  $_SESSION['cart'][] = [
    'item_id' => $item_id,
    'item_name' => $item_name,
    'quantity' => $quantity,
    'price' => $price
  ];

  // You might want to update quantity if the item already exists in the cart
  update_cart_item($item_id, $quantity);

}


// Function to update quantity of an item in the cart
function update_cart_item($item_id, $quantity) {
    if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) { // Use &$item for in-place modification
            if ($item['item_id'] == $item_id) {
                $item['quantity'] = $quantity;
                break; // Exit the loop once the item is updated
            }
        }
    }
}


// Function to remove an item from the cart
function remove_from_cart($item_id) {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $key => $item) {
      if ($item['item_id'] == $item_id) {
        unset($_SESSION['cart'][$key]);
        // Optional:  If you want to re-index the array after removing
        // $_SESSION['cart'] = array_values($_SESSION['cart']);
        return true; // Indicate successful removal
      }
    }
    return false; // Indicate item not found
  }
  return false; // Cart doesn't exist
}


// Function to get the cart total
function get_cart_total() {
  if (isset($_SESSION['cart']) && is_array($_SESSION['cart'])) {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
      $total += $item['quantity'] * $item['price'];
    }
    return $total;
  }
  return 0;
}

// Function to display the cart contents
function display_cart() {
  if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
    return;
  }

  echo "<h2>Your Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item Name</th><th>Quantity</th><th>Price</th><th>Total</th></tr>";

  $cart_total = get_cart_total();

  foreach ($_SESSION['cart'] as $item) {
    $item_total = $item['quantity'] * $item['price'];
    echo "<tr>";
    echo "<td>" . $item['item_name'] . "</td>";
    echo "<td>" . $item['quantity'] . "</td>";
    echo "<td>" . $item['price'] . "</td>";
    echo "<td>" . $item_total . "</td>";
    echo "</tr>";
  }

  echo "</table>";
  echo "<p><strong>Total: $" . $cart_total . "</strong></p>";
}

// --- Example Usage (Demonstration) ---

// Add some items to the cart
add_to_cart(1, 'Laptop', 1, 1200);
add_to_cart(2, 'Mouse', 1, 25);
add_to_cart(1, 'Laptop', 2, 1200); // Add another laptop

// Display the cart
display_cart();

// Remove an item
remove_from_cart(2);

// Display the cart again
display_cart();

?>


<?php

// Start the session (if it doesn't exist)
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    // Check if the item is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Item exists, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Item doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage:

// Add a product to the cart
addToCart(1, "T-Shirt", 20.00, 2); // Product ID 1, T-Shirt, price $20.00, quantity 2
addToCart(2, "Jeans", 50.00, 1);   // Product ID 2, Jeans, price $50.00, quantity 1

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total for Product:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example to remove an item from the cart
// removeFromCart(1);

// Example to update the quantity of an item
// updateQuantity(1, 3);

// After updating, display the cart contents again:
echo "<hr>";
echo "<h2>Shopping Cart (After Update)</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<strong>Total for Product:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

//  Example Usage (simulated product data - replace with your actual database)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75]
];

// Simulate a user adding items to the cart
addToCart(1, 'Laptop', $products[1]['price'], 1);
addToCart(2, 'Mouse', $products[2]['price']);
addToCart(1, 'Laptop', $products[1]['price'], 2); // Add more laptops
addToCart(3, 'Keyboard', $products[3]['price']);

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>";
        echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Example: Remove an item
// removeCartItem(2);

// Example: Update quantity
// updateCartItemQuantity(1, 3);


//  Simulated checkout (Just an example - integrate with your payment processing)
if (isset($_POST['checkout'])) {
    echo "<p>Thank you for your order!</p>";
    // Clear the cart after checkout
    $_SESSION['cart'] = array();
}
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if product already exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Example usage (add some items to the cart)
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 1); // Add another laptop to increase quantity


// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example usage (remove an item)
removeCartItem(2);

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

//Example Usage (Update the quantity of Laptop)
updateCartItemQuantity(1, 3); //Change the quantity of laptop to 3.

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_info) {
    echo "<li>";
    echo "<strong>" . $product_info['name'] . "</strong> - $" . $product_info['price'] . " x " . $product_info['quantity'] . " = $" . ($product_info['price'] * $product_info['quantity']) . "</li>";
  }
  echo "</ul>";
}

// You can also calculate the total cost of the cart here.
echo "<p><strong>Total Cost:</strong> $" . number_format(calculateTotal(), 2) . "</p>";

//Helper function to calculate total cost
function calculateTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $product_id => $product_info){
            $total += ($product_info['price'] * $product_info['quantity']);
        }
    }
    return $total;
}
?>


<?php
session_start();

// Array to hold the cart items
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  global $cart;

  // Check if the item is already in the cart
  if (isset($cart[$product_id])) {
    // Item exists, increment the quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Item doesn't exist, create a new entry
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an existing item
function updateQuantity($product_id, $new_quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  } else {
    // If the product doesn't exist, you might want to handle it,
    // such as adding it with the new quantity.  Alternatively, you could
    // return an error or do nothing.  This example adds it.
    addToCart($product_id, "Product - " . $product_id, 0, $new_quantity); // Use the add to cart function instead
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $cart;
}

// Function to clear the cart
function clearCart() {
  global $cart;
  $cart = array();
}

// --- Example Usage / Controller Part ---

// 1.  Add an item to the cart
$product_id = 1;
$product_name = "T-Shirt";
$price = 20.00;
$quantity = 2;

addToCart($product_id, $product_name, $price, $quantity);

// 2. Update the quantity of an item
updateQuantity($product_id, 5);

// 3.  Remove an item
//removeCartItem($product_id);

// 4.  Get cart contents
$cart_contents = getCartContents();
print_r($cart_contents);

// 5.  Clear the cart
//clearCart();
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array if it doesn't exist
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? []; // Return cart contents or an empty array if it doesn't exist
}


// Example Usage (Simulating adding items to the cart)

// Add an item to the cart
addToCart(1, 'T-Shirt', 20.00, 2);

// Add another item to the cart
addToCart(2, 'Jeans', 50.00, 1);

// Get the current cart contents
$cart = getCartContents();

// Display the cart contents
echo "<h2>Cart Contents</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_info) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_info['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_info['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_info['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example: Remove an item from the cart
removeFromCart(1);

// Get the cart contents after removing an item
$cart = getCartContents();

// Display the cart contents after removing an item
echo "<h2>Cart Contents After Removal</h2>";
if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $product_info) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_info['name'] . "<br>";
        echo "<strong>Price:</strong> $" . number_format($product_info['price'], 2) . "<br>";
        echo "<strong>Quantity:</strong> " . $product_info['quantity'] . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}

// Example: Update the quantity of an item
updateQuantity(2, 3);

//Get the cart contents after updating quantity
$cart = getCartContents();
echo "<h2>Cart Contents After Update</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_info) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_info['name'] . "<br>";
    echo "<strong>Price:</strong> $" . number_format($product_info['price'], 2) . "<br>";
    echo "<strong>Quantity:</strong> " . $product_info['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start();

// Session variables to store items in the cart
$cart = array(); 

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (isset($cart[$product_id])) {
    // Item already in cart, increase quantity
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    // Item not in cart, add it
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  global $cart;

  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function get_cart_contents() {
  return $cart;
}

// Example usage (simulated products)

// Add some items to the cart
add_to_cart(1, "Laptop", 1200, 1);
add_to_cart(2, "Mouse", 25, 2);
add_to_cart(1, "Laptop", 1200, 1);  // Add another laptop
add_to_cart(3, "Keyboard", 75, 1);

// Display the cart contents
$cart_items = get_cart_contents();

echo "<h2>Your Shopping Cart</h2>";
if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    echo "<li>" . $item['name'] . " - Price: $" . $item['price'] . " - Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

//Example of removing an item
//remove_from_cart(2);

//Example of updating the quantity of an item
//update_quantity(1, 3);


?>


<?php
session_start(); // Start the session

// --- Example Cart Logic ---

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param string $name The name of the product.
 * @param int $price The price of the product.
 * @param int $quantity The quantity to add (default: 1).
 */
function addToCart($product_id, $name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $newQuantity The new quantity.
 */
function updateQuantity($product_id, $newQuantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $newQuantity;
    }
}


/**
 * Gets the items in the cart.
 *
 * @return array An array of items in the cart.
 */
function getCartItems() {
    return $_SESSION['cart'];
}

/**
 * Calculates the total price of the items in the cart.
 *
 * @return float The total price.
 */
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total = $total + ($item['price'] * $item['quantity']);
    }
    return $total;
}

// --- Example Usage (Simulating a user adding items) ---

// Add some items to the cart
addToCart('product1', 'Laptop', 1200, 1);
addToCart('product2', 'Mouse', 25, 2);
addToCart('product3', 'Keyboard', 75, 1);

// Display the cart items
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach (getCartItems() as $product_id => $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
    }
    echo "</ul>";
    echo "<p>Total: $" . calculateTotal() . "</p>";
}

// --- Example Removing an Item ---
//removeFromCart('product2');

// --- Example Updating Quantity ---
//updateQuantity('product1', 3);
//echo "<p>Updated quantity of product1 to 3.</p>";

?>


<?php
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
  // Add the item to the cart array
  $_SESSION['cart'][] = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // Optional:  Update quantity if item already exists
  updateCartQuantity($product_id, $quantity);
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
  // Iterate through the cart array
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['id'] == $product_id) {
      $item['quantity'] = $quantity;
      return; // Exit the loop once the item is updated
    }
  }
}

// Function to remove an item from the cart
function removeItemFromCart($product_id) {
  foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);
      // Re-index the array after removing an element
      $_SESSION['cart'] = array_values($_SESSION['cart']);
      return;
    }
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}

// --- Example Usage (Illustrative - You'd likely integrate this into a larger application) ---

// 1. Add an item to the cart
// $productId = 123;
// $productName = "Awesome T-Shirt";
// $price = 25.00;
// $quantity = 2;
// addToCart($productId, $productName, $price, $quantity);

// 2. Display the cart contents
// $cartContents = getCartContents();
// if (!empty($cartContents)) {
//   echo "<h2>Your Shopping Cart</h2>";
//   echo "<ul>";
//   foreach ($cartContents as $item) {
//     echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
//   }
//   echo "</ul>";
// } else {
//   echo "<p>Your cart is empty.</p>";
// }

// 3. Remove an item from the cart
// removeItemFromCart(123);

// 4. Get Cart Contents again after removing
// $cartContents = getCartContents();
// if (!empty($cartContents)) {
//   echo "<h2>Your Shopping Cart</h2>";
//   echo "<ul>";
//   foreach ($cartContents as $item) {
//     echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
//   }
//   echo "</ul>";
// } else {
//   echo "<p>Your cart is empty.</p>";
// }


?>


<?php

session_start();

// Initialize an empty cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it is, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it's not, add a new entry to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to display the cart contents
function displayCart() {
  if (empty($_SESSION['cart'])) {
    echo "<h2>Your Cart is Empty</h2>";
  } else {
    echo "<h2>Your Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>";

    $total = 0;
    foreach ($_SESSION['cart'] as $item_id => $item_details) {
      $name = $item_details['name'];
      $price = $item_details['price'];
      $quantity = $item_details['quantity'];
      $total_item = $price * $quantity;
      $total += $total_item;

      echo "<tr>";
      echo "<td>" . $name . "</td>";
      echo "<td>$" . number_format($price, 2) . "</td>";
      echo "<td>" . $quantity . "</td>";
      echo "<td>$" . number_format($total_item, 2) . "</td>";
      echo "<td><a href='cart.php?action=remove&product_id=" . $product_id . "'>Remove</a></td>";
      echo "</tr>";
    }

    echo "</table>";
    echo "<p><strong>Total: $" . number_format($total, 2) . "</strong></p>";
  }
}

// --- Example Usage (Illustrative - Adapt to your application's needs) ---

// Adding items to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 2); // Adding another laptop

// Displaying the cart contents
displayCart();

// Removing an item
// removeCartItem(2); // Uncomment to remove the mouse
// displayCart(); // Display cart again to see the changes

// Updating the quantity of an item
// updateCartQuantity(1, 3); //Change Laptop quantity to 3
// displayCart();

?>


<?php
// product_list.php
session_start();

echo "<h2>Available Products</h2>";
echo "<form method='post' action='cart.php'>";
echo "<ul>";
// Replace these with your product details
echo "<li><input type='hidden' name='product_id' value='1'> <img src='laptop.jpg' width='100'><br> Laptop - $" . number_format(1200, 2) . "<br><input type='submit' value='Add to Cart'></li>";
echo "<li><input type='hidden' name='product_id' value='2'> <img src='mouse.jpg' width='100'><br> Mouse - $" . number_format(25, 2) . "<br><input type='submit' value='Add to Cart'></li>";

echo "</ul>";
echo "<input type='hidden' name='action' value='add'>";
echo "</form>";
?>


<?php
session_start();

// Session variables for the cart
$_SESSION['cart'] = array(); // Initialize the cart as an empty array

// Helper functions for cart operations (can be moved to a separate file)
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  $_SESSION['cart'][] = array(
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
}

function get_cart_items() {
  return $_SESSION['cart'];
}

function update_quantity($product_id, $quantity) {
  // Iterate through the cart items
  foreach ($_SESSION['cart'] as &$item) { // Use &$item for reference to modify the original array
    if ($item['id'] == $product_id) {
      $item['quantity'] = $quantity;
      return;
    }
  }
}

function remove_from_cart($product_id) {
  // Iterate through the cart and remove the item
  $keys = array_keys($_SESSION['cart']);
  foreach ($keys as $key) {
    if ($_SESSION['cart'][$key]['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);
      break;
    }
  }
}

function calculate_total() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Example Usage (demonstration - this would be part of a web form)

// Add a product to the cart
add_to_cart(1, 'T-Shirt', 20, 2); // Product ID 1, T-Shirt, price $20, quantity 2
add_to_cart(2, 'Jeans', 50, 1); // Product ID 2, Jeans, price $50, quantity 1

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculate_total() . "</strong></p>";
}


// Example of updating the quantity
update_quantity(1, 3); // Increase the quantity of T-Shirt to 3

// Display the updated cart
echo "<h2>Your Updated Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculate_total() . "</strong></p>";
}

// Example of removing an item
remove_from_cart(2);

//Display the cart after removing an item
echo "<h2>Your Updated Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculate_total() . "</strong></p>";
}
?>


<?php

session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the contents of the cart
function getCart() {
    return $_SESSION['cart'];
}

// Example Usage (Demonstration)

// Add some items to the cart
addToCart(1, 'Laptop', 1200, 1);
addToCart(2, 'Mouse', 25, 2);
addToCart(1, 'Laptop', 1200, 3); //Adding more of the same item

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = getCart();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . $item['price'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . ($item['price'] * $item['quantity']) . "<br>";
        echo "</li>";
    }
}
echo "</ul>";

// Example of updating a quantity
updateQuantity(2, 5);

// Display the updated cart contents
echo "<br><h2>Cart Contents (After Update):</h2>";
$cart_items = getCart();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . $item['price'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . ($item['price'] * $item['quantity']) . "<br>";
        echo "</li>";
    }
}
echo "</ul>";


// Example of removing an item from the cart
removeCartItem(2);
echo "<br><h2>Cart Contents (After Removal):</h2>";
$cart_items = getCart();
if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $item) {
        echo "<li>";
        echo "Product: " . $item['name'] . "<br>";
        echo "Price: $" . $item['price'] . "<br>";
        echo "Quantity: " . $item['quantity'] . "<br>";
        echo "Subtotal: $" . ($item['price'] * $item['quantity']) . "<br>";
        echo "</li>";
    }
}
echo "</ul>";


?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// ---------------------  Helper Functions ---------------------
/**
 * Adds an item to the shopping cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function add_to_cart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    } else {
        $_SESSION['cart'][$product_id] += $quantity;
    }
}

/**
 * Removes an item from the shopping cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function update_cart_item($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets the items in the shopping cart.
 *
 * @return array The shopping cart contents.
 */
function get_cart_items() {
    return $_SESSION['cart'];
}

/**
 * Calculates the total number of items in the cart.
 *
 * @return int
 */
function cart_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $quantity) {
        $total += $quantity;
    }
    return $total;
}


// ---------------------  Example Usage (Simulated Products) ---------------------

// Let's assume we have some products with IDs 1, 2, and 3.

// Add some items to the cart
add_to_cart(1, 2);  // Add 2 of product 1
add_to_cart(2, 1);  // Add 1 of product 2
add_to_cart(1, 3);  // Add 3 of product 1
add_to_cart(3, 1);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Simulate retrieving product details (replace with actual database lookup)
        $product_name = "Product " . $product_id;  // Dummy product name

        echo "<li>$product_name - Quantity: $quantity</li>";
    }
    echo "</ul>";
    echo "<p>Total items in cart: " . cart_total() . "</p>";
}


// Example of removing an item
//remove_from_cart(2);

//Example of updating an item
//update_cart_item(1, 5);

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If product exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// --- Example Usage ---

// 1. Add a product to the cart
addToCart(1, "Laptop", 1200, 1);
addToCart(2, "Mouse", 25, 2);
addToCart(1, "Laptop", 1200, 3); //Add to existing

// 2. Display the cart contents
$cart = getCartContents();
echo "<h2>Your Shopping Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_data) {
    echo "<li>" . $product_data['name'] . " - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// 3. Remove an item from the cart (example)
// removeCartItem(2);

// 4. Update quantity (example)
// updateCartQuantity(1, 5);


//  Example to show cart calculation:
$cart = getCartContents();

if(!empty($cart)){
  $total = 0;
  foreach($cart as $product_id => $product_data){
    $total += ($product_data['price'] * $product_data['quantity']);
  }
  echo "<p>Total Cart Value: $" . $total . "</p>";
}
?>


<?php
session_start(); // Start the session

// Cart array to store items
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $cart = array();
    }

    $cart[] = array(
        'id' => $product_id,
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
    );
    $_SESSION['cart'] = $cart;
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'])) {
        $cart = $_SESSION['cart'];
        foreach ($cart as $key => $item) {
            if ($item['id'] == $product_id) {
                unset($cart[$key]);
                break; // Stop after removing the item
            }
        }
        $_SESSION['cart'] = $cart;
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'])) {
        $cart = $_SESSION['cart'];
        foreach ($cart as $key => $item) {
            if ($item['id'] == $product_id) {
                $cart[$key]['quantity'] = $new_quantity;
                break;
            }
        }
        $_SESSION['cart'] = $cart;
    }
}


// Example Usage (Simulated form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $product_name = $_POST['product_name'];
        $price = $_POST['price'];
        $quantity = $_POST['quantity'];

        addToCart($product_id, $product_name, $price, $quantity);
    } elseif (isset($_POST['remove_item'])) {
        $product_id = $_POST['product_id_to_remove'];
        removeCartItem($product_id_to_remove);
    } elseif (isset($_POST['update_quantity'])) {
        $product_id = $_POST['product_id_to_update'];
        $new_quantity = $_POST['new_quantity'];
        updateCartQuantity($product_id_to_update, $new_quantity);
    }
}

// Display the cart contents
if (isset($_SESSION['cart'])) {
    echo "<h2>Your Cart</h2>";
    echo "<ul>";
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
        $total += ($item['price'] * $item['quantity']);
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . $total . "</strong></p>";
} else {
    echo "<p>Your cart is empty.</p>";
}

?>


<?php

// Start a session (if not already started)
session_start();

// Cart data (This would typically come from a database or file)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] += $quantity;
  } else {
    $cart[$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  unset($cart[$product_id]);
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity'] = $new_quantity;
    }
}


// Example usage (Simulating user interaction)

// Add some items to the cart
add_to_cart(1, 'T-Shirt', 20, 2);
add_to_cart(2, 'Jeans', 50, 1);
add_to_cart(1, 'T-Shirt', 20, 3); // Add more of the T-Shirt

// Display the cart contents
echo "<h2>Your Cart</h2>";
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// Example: Remove an item
// remove_from_cart(2);

// Example: Update quantity
// update_quantity(1, 5);

//  (You would typically have logic here to process the cart data,
//   e.g., calculate the total price, store the cart data in a session,
//   or pass it to a separate processing script.)


//  To persist the cart data across multiple pages, you'd need to:
//  1. Store the cart data in a session.
//  2. Pass the session ID to each page that needs to access the cart.
//  3.  On each page, use session_start() to start the session.
//     Then, use session_id() to get the session ID and session_start($session_id).
//     You can then access the cart data using session_get_cookie_params() and session_regenerate_id() to ensure security.
//   This is outside the scope of this basic example.

?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize empty cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increase quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'];
}


// *** Example Usage - Simulate adding an item to the cart ***
// Assuming we have product data (replace with your actual data source)

$products = [
  1 => ['name' => 'T-Shirt', 'price' => 20],
  2 => ['name' => 'Jeans', 'price' => 50],
  3 => ['name' => 'Shoes', 'price' => 80]
];

// Example 1: Add a T-Shirt to the cart
addToCart(1, $products[1]['name'], $products[1]['price'], 2);

// Example 2: Add Jeans to the cart
addToCart(2, $products[2]['name'], $products[2]['price']);

// Example 3: Update the quantity of the T-Shirt to 3
updateQuantity(1, 3);


// Display the cart contents
$cart = getCartContents();

echo "<h2>Your Cart</h2>";

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
}

?>


<?php
session_start(); // Start the session

// ---  Example Cart Logic ---

$cart = []; // Initialize an empty cart (array)

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $cart = [['id' => $product_id, 'name' => $product_name, 'price' => $price, 'quantity' => $quantity]];
    } else {
        // Check if the item already exists in the cart
        $item_exists = false;
        foreach ($cart as $index => $item) {
            if ($item['id'] == $product_id) {
                // Update quantity if item exists
                $cart[$index]['quantity'] += $quantity;
                $item_exists = true;
                break;
            }
        }
        // If the item doesn't exist, add it
        if (!$item_exists) {
            $cart[] = ['id' => $product_id, 'name' => $product_name, 'price' => $price, 'quantity' => $quantity];
        }
    }
}

// Function to remove an item from the cart by ID
function remove_from_cart($product_id) {
    global $cart; // Access the global $cart array

    foreach ($cart as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($cart[$key]);
            $cart = array_values($cart); // Re-index the array after deleting
            return true;
        }
    }
    return false;
}

// Function to get the cart contents
function get_cart_contents() {
    return $cart;
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $quantity) {
    global $cart;

    foreach ($cart as $key => $item) {
        if ($item['id'] == $product_id) {
            $cart[$key]['quantity'] = $quantity;
            return true;
        }
    }
    return false;
}



// ---  Example Usage (Adding items to the cart )---

// Example: Add a product to the cart
add_to_cart(1, "T-Shirt", 20.00, 2);
add_to_cart(2, "Jeans", 50.00, 1);

// Example: Remove an item from the cart
// remove_from_cart(2);

// Example: Update the quantity of a product
// update_quantity(1, 3); // Increase the quantity of T-Shirt to 3

// ---  Display the Cart Contents (for demonstration) ---

// Get the cart contents
$cart_contents = get_cart_contents();

// Display the cart
echo "<h2>Your Shopping Cart</h2>";

if (empty($cart_contents)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_contents as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}


?>


<?php
session_start();

// --- Session Management Functions ---

/**
 * Add an item to the cart.
 *
 * @param int $productId The ID of the product to add.
 * @param int $quantity The quantity to add.
 * @return void
 */
function addToCart(int $productId, int $quantity = 1)
{
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = []; // Initialize the cart if it doesn't exist
    }

    if (isset($_SESSION['cart'][$productId])) {
        // Item already in cart, increase quantity
        $_SESSION['cart'][$productId]['quantity'] += $quantity;
    } else {
        // Item not in cart, add it with quantity 1
        $_SESSION['cart'][$productId] = ['quantity' => $quantity];
    }
}

/**
 * Update the quantity of an item in the cart.
 *
 * @param int $productId The ID of the product to update.
 * @param int $newQuantity The new quantity for the product.
 * @return void
 */
function updateCartItem(int $productId, int $newQuantity)
{
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
    }
}

/**
 * Remove an item from the cart.
 *
 * @param int $productId The ID of the product to remove.
 * @return void
 */
function removeCartItem(int $productId)
{
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
    }
}

/**
 * Get the items in the cart.
 *
 * @return array An array representing the cart contents.
 */
function getCart()
{
    return $_SESSION['cart'] ?? []; // Return an empty array if cart isn't initialized
}

/**
 * Clear the entire cart.
 *
 * @return void
 */
function clearCart()
{
    unset($_SESSION['cart']);
}

// --- Example Usage (Illustrative - Replace with your actual logic) ---

// 1. Add an item to the cart:
addToCart(123); // Add product ID 123 to the cart with quantity 1
addToCart(456, 2); // Add product ID 456 to the cart with quantity 2

// 2. Update an item's quantity:
updateCartItem(123, 5); // Increase quantity of product 123 to 5

// 3. Get the cart contents:
$cart = getCart();
print_r($cart); // This will show you the contents of the cart (e.g., [123 => ['quantity' => 5], 456 => ['quantity' => 2]])

// 4. Remove an item:
removeCartItem(456);

// 5. Get the cart contents after removal:
$cart = getCart();
print_r($cart); // Now it should only contain [123 => ['quantity' => 5]]

// 6. Clear the cart:
clearCart();
print_r($cart); // It will be an empty array [].

?>


<?php

session_start();

// --- Cart Session Variables ---
$cart = array();
$cart_id = "shopping_cart";

// --- Helper Functions ---

/**
 * Add an item to the cart.
 *
 * @param string $product_id The unique ID of the product.
 * @param string $name The name of the product.
 * @param int    $price  The price of the product.
 * @param int    $quantity  The quantity to add.
 */
function add_to_cart(string $product_id, string $name, float $price, int $quantity = 1)
{
    if (!isset($_SESSION[$cart_id][$product_id])) {
        $_SESSION[$cart_id][$product_id] = array(
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity,
            'total' => $price * $quantity
        );
    } else {
        // Item already in cart, update quantity
        $_SESSION[$cart_id][$product_id]['quantity'] += $quantity;
        $_SESSION[$cart_id][$product_id]['total'] = $_SESSION[$cart_id][$product_id]['price'] * $_SESSION[$cart_id][$product_id]['quantity'];
    }
}


/**
 * Update the quantity of an item in the cart.
 *
 * @param string $product_id The unique ID of the product.
 * @param int    $new_quantity The new quantity for the product.
 */
function update_cart_quantity(string $product_id, int $new_quantity)
{
    if (isset($_SESSION[$cart_id][$product_id])) {
        $_SESSION[$cart_id][$product_id]['quantity'] = $new_quantity;
        $_SESSION[$cart_id][$product_id]['total'] = $_SESSION[$cart_id][$product_id]['price'] * $_SESSION[$cart_id][$product_id]['quantity'];
    }
}


/**
 * Remove an item from the cart.
 *
 * @param string $product_id The unique ID of the product to remove.
 */
function remove_from_cart(string $product_id)
{
    unset($_SESSION[$cart_id][$product_id]);
}

/**
 * Get the contents of the cart.
 *
 * @return array The cart array.
 */
function get_cart_contents()
{
    return $_SESSION[$cart_id];
}

/**
 * Calculate the total cost of the cart.
 *
 * @return float The total cost.
 */
function calculate_cart_total()
{
    $total = 0;
    if (isset($_SESSION[$cart_id])) {
        foreach ($_SESSION[$cart_id] as $item) {
            $total_item = $item['price'] * $item['quantity'];
            $total += $total_item;
        }
    }
    return $total;
}

/**
 * Clear the entire cart.
 */
function clear_cart() {
    unset($_SESSION[$cart_id]);
}

// --- Example Usage ---

// 1. Add some items to the cart
add_to_cart("product_1", "T-Shirt", 20.00, 2);
add_to_cart("product_2", "Jeans", 50.00);
add_to_cart("product_3", "Hat", 15.00, 1);

// 2. Update the quantity of an item
update_cart_quantity("product_1", 3);

// 3. Remove an item from the cart
// remove_from_cart("product_2");

// 4. Get the cart contents
$cart_contents = get_cart_contents();
print_r($cart_contents);

// 5. Calculate the total
$total = calculate_cart_total();
echo "Total cart value: $" . number_format($total, 2) . "<br>";

// 6. Clear the cart
// clear_cart();

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage (Simulated Product Data - Replace with your actual data)
$products = array(
    1 => array('name' => 'Laptop', 'price' => 1200),
    2 => array('name' => 'Mouse', 'price' => 25),
    3 => array('name' => 'Keyboard', 'price' => 75)
);

// Example: Adding products to the cart
add_to_cart(1, $products[1]['name'], $products[1]['price'], 1);
add_to_cart(2, $products[2]['name'], $products[2]['price'], 2);
add_to_cart(1, $products[1]['name'], $products[1]['price'], 2); // Adding more of the laptop

// Example: Removing an item
//remove_from_cart(2);

// Example: Updating the quantity
//update_quantity(1, 3);

// Display the Cart Contents
echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>" . $product_details['name'] . "</strong> - $" . $product_details['price'] . " x " . $product_details['quantity'];
        echo "</li>";
    }
    echo "</ul>";

    // Calculate the total price
    $total_price = 0;
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        $total_price += $product_details['price'] * $product_details['quantity'];
    }
    echo "<p><strong>Total: $" . $total_price . "</strong></p>";
}

?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// --- Example Function to Add Items to the Cart ---

function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, update quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// --- Example Usage (Simulate Adding Items) ---

// Add a product
addToCart(1, 'Laptop', 1200, 1);

// Add another item
addToCart(2, 'Mouse', 25, 2);

// Add yet another item
addToCart(1, 'Laptop', 1200, 3); //Adding more of the Laptop

// --- Display the Cart Contents ---

echo "<h2>Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
    echo "<strong>Total for Product:</strong> $" . ($product_details['price'] * $product_details['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// --- Example Function to Remove an Item from the Cart ---

function removeItemFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Example usage (Simulate removing an item)
// removeItemFromCart(2); // Remove the mouse

// --- Example Function to Update the Quantity of an Item in the Cart ---
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example usage
// updateQuantity(1, 5); //Update the quantity of the laptop to 5

// ---  Clear the Cart ---
//session_destroy(); //This will erase the entire session

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Helper Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  } else {
    $_SESSION['cart'][$product_id] += $quantity;
  }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Gets the items in the cart.
 *
 * @return array The cart contents.
 */
function getCartContents() {
  return $_SESSION['cart'];
}

/**
 * Calculates the total price of items in the cart.
 *
 * @return float The total price.
 */
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    // In a real application, you'd fetch the product price here.
    // This is just a placeholder.
    $product_price = 10;  // Example price
    $total_for_item = $product_price * $quantity;
    $total += $total_for_item;
  }
  return $total;
}



// --- Example Usage (Demonstration) ---

// Add a product to the cart
addToCart(123, 2); // Product ID 123, quantity 2
addToCart(456, 1); // Product ID 456, quantity 1

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
$cart_items = getCartContents();

if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
}
echo "</ul>";

// Calculate and display the total
$total = calculateTotal();
echo "<p>Total Price: $" . $total . "</p>";


// Remove an item from the cart
removeFromCart(456);

// Update the quantity of an item
updateQuantity(123, 3);

// Display the updated cart contents
echo "<p>Updated Cart Contents:</p>";
$cart_items = getCartContents();

if (empty($cart_items)) {
    echo "<li>Cart is empty.</li>";
} else {
    foreach ($cart_items as $product_id => $quantity) {
        echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
    }
}

echo "<p>Total Price: $" . calculateTotal() . "</p>";
?>


<?php

session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example usage:
// Add a product to the cart
addToCart(1, "Laptop", 1200, 1);  // Product ID 1, Laptop, price 1200, quantity 1
addToCart(2, "Mouse", 25, 2);    // Product ID 2, Mouse, price 25, quantity 2

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item_id => $item_data) {
    echo "<li>";
    echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Function to remove an item from the cart (optional)
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example of removing an item (optional)
// removeFromCart(2);

?>


<?php
session_start();

// ... (Rest of the code from the previous example) ...

// Display a form to add items to the cart
echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
echo "<label for='product_id'>Product ID:</label>";
echo "<select id='product_id' name='product_id'>";
echo "<option value='1'>Laptop</option>";
echo "<option value='2'>Mouse</option>";
echo "<option value='3'>Keyboard</option>";
echo "</select><br>";

echo "<label for='quantity'>Quantity:</label>";
echo "<input type='number' id='quantity' name='quantity' value='1' min='1'>";
echo "<br><br>";
echo "<input type='submit' value='Add to Cart'>";
echo "</form>";

// If the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $product_id = $_POST["product_id"];
  $quantity = $_POST["quantity"];
  addToCart($product_id, "Product Name", 0, $quantity); // Assuming price is dynamic
}
?>


<?php
session_start();

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addItemToCart($product_id, $product_name, $price, $quantity) {
  global $session; // Use global variable for session access
  $session = $_SESSION; // Access the session variable directly
  $session['cart'][] = array(
    'product_id' => $product_id,
    'product_name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  );
  // Optionally, you can sort the cart items after adding an item
  // sort($session['cart']);
}


// Example Usage:

// Simulate a product adding event (e.g., from a form submission)
//  Assuming this data comes from a form on your webpage

$product_id = 1;
$product_name = "Awesome T-Shirt";
$price = 25.00;
$quantity = 2;

// Add the item to the cart
addItemToCart($product_id, $product_name, $price, $quantity);

// Display the contents of the cart
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<li>" . $item['product_name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}

// Example of removing an item
// To remove an item, you can loop through the cart and find the product_id.
// Then, you would unset($_SESSION['cart'][$product_id]); // Remove by ID
// Or, you could build a remove action form.
?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (empty($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    // Check if the product is already in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // Increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // Add the product to the cart
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity
        ];
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}


// Example Usage (Simulating a product)
$product1_id = 1;
$product1_name = "T-Shirt";
$product1_price = 20.00;

$product2_id = 2;
$product2_name = "Jeans";
$product2_price = 50.00;

// --- Cart Operations ---

// 1. Add an item to the cart
addToCart($product1_id, $product1_name, $product1_price);
addToCart($product2_id, $product2_name, $product2_price, 2); // Add 2 pairs of Jeans

// 2. Display the cart contents (for demonstration)
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
    }
    echo "</ul>";
}



// 3. Remove an item
removeFromCart($product1_id);

// 4. Update quantity
updateQuantity($product2_id, 3);

// Display updated cart
echo "<h2>Shopping Cart (Updated)</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item_data) {
        echo "<li>";
        echo "<strong>" . $item_data['name'] . "</strong> - $" . $item_data['price'] . " x " . $item_data['quantity'] . " = $" . ($item_data['price'] * $item_data['quantity']) . "</li>";
    }
    echo "</ul>";
}

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart already exists in session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If product exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If product doesn't exist, add it to the cart with quantity 1
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to remove a product from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartItem($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to clear the cart
function clearCart() {
    unset($_SESSION['cart']);
}

// ------------------  Example Usage (Demonstration) ------------------

// Add some products to the cart
addToCart(1, 2); // Product ID 1, Quantity 2
addToCart(2, 1); // Product ID 2, Quantity 1
addToCart(1, 3); // Product ID 1, Quantity 3

// Display the cart contents
echo "<h2>Cart Contents:</h2>";
$cartItems = getCartItems();

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Example of updating a quantity
updateCartItem(1, 5); //Update quantity of Product 1 to 5

echo "<br>";
echo "<h2>Cart Contents After Update:</h2>";
$cartItems = getCartItems();

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Example of removing an item from the cart
removeCartItem(2);

echo "<br>";
echo "<h2>Cart Contents After Removal:</h2>";
$cartItems = getCartItems();

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}


// Example of clearing the cart
clearCart();

echo "<br>";
echo "<h2>Cart Contents After Clearing:</h2>";
$cartItems = getCartItems();

if (empty($cartItems)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cartItems as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}
?>


<?php
session_start(); // Start the session

// --- Example Cart Logic ---

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// -----------------------------------------------------

// 1. Add Item to Cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increase the quantity if the product already exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart with initial quantity of 1
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Example usage:
add_to_cart(1, 'Awesome T-Shirt', 25.00, 2); // Add 2 t-shirts
add_to_cart(2, 'Cool Mug', 10.00, 1); // Add 1 mug
add_to_cart(1, 'Awesome T-Shirt', 25.00, 1); // Add 1 more t-shirt


// 2. Update Quantity
function update_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  } else {
    // Handle the case where the product is not in the cart (e.g., remove it)
    // You might want to log this or display an error.
    // For example:
    // error_log("Product $product_id not in cart.");
  }
}

// Example usage:
update_quantity(1, 3); // Update quantity of Awesome T-Shirt to 3

// 3. Remove Item from Cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Example usage:
remove_from_cart(2); // Remove the Cool Mug

// 4. Display Cart Contents (for debugging/preview)
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $id => $item) {
    echo "<li>";
    echo "<strong>" . $item['name'] . "</strong> - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
  }
  echo "</ul>";
}


// 5. Calculate Total Cart Value (Example)
$total = 0;
foreach ($_SESSION['cart'] as $id => $item) {
    $total += $item['price'] * $item['quantity'];
}
echo "<p><strong>Total Cart Value: $" . number_format($total, 2) . "</strong></p>";


// --- End of Cart Logic ---

?>


<?php
session_start();

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
  if (empty($_SESSION['cart'])) {
    // Cart is empty, initialize it
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}


// Example Usage (Simulating a shopping cart interaction)

// Add a product to the cart
add_to_cart(1, 'Laptop', 1200, 1);
add_to_cart(2, 'Mouse', 25, 2);

// Display the cart contents
echo "<h2>Shopping Cart</h2>";
if (!empty($_SESSION['cart'])) {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_details) {
    echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart'])) . "</p>";
} else {
  echo "<p>Your cart is empty.</p>";
}

// Remove an item from the cart
remove_from_cart(2);

// Update the quantity of an item
update_cart_quantity(1, 3);

// Display the cart contents again
echo "<h2>Shopping Cart (Updated)</h2>";
if (!empty($_SESSION['cart'])) {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>" . $product_details['name'] . " - $" . $product_details['price'] . " x " . $product_details['quantity'] . " = $" . ($product_details['price'] * $product_details['quantity']) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total:</strong> $" . array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart'])) . "</p>";
} else {
  echo "<p>Your cart is empty.</p>";
}


?>


<?php

// Start a session
session_start();

// Array to store cart items (name, quantity, price)
$cart = [];

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity) {
  $item = [
    'id' => $product_id,
    'name' => $product_name,
    'price' => $price,
    'quantity' => $quantity
  ];

  // Check if the item is already in the cart
  foreach ($cart as &$item_in_cart) {
    if ($item_in_cart['id'] == $item['id']) {
      $item_in_cart['quantity'] += $item['quantity'];
      break;
    }
  }

  // If the item is not in the cart, add it
  else {
    $cart[] = $item;
  }
}

// Function to get the cart total
function get_cart_total() {
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Function to display the cart contents
function display_cart() {
  echo "<h2>Your Shopping Cart</h2>";
  if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
  } else {
    echo "<ul>";
    foreach ($cart as $index => $item) {
      echo "<li>" . $item['name'] . " - $" . number_format($item['price'], 2) . " x " . $item['quantity'] . " = $" . number_format($item['price'] * $item['quantity'], 2) . "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total: $" . number_format(get_cart_total(), 2) . "</strong></p>";
  }
}

// Example Usage:

// Add some items to the cart
add_to_cart(1, "T-Shirt", 20.00, 2);
add_to_cart(2, "Jeans", 50.00, 1);
add_to_cart(1, "T-Shirt", 20.00, 1); // Add another T-Shirt

// Display the cart contents
display_cart();

//  Simulate a user removing an item (Example) -  You would likely have a form for this
// $remove_item_id = 1;
// remove_from_cart($remove_item_id); //  Would need a remove_from_cart function (implementation not provided)

?>


<?php
session_start();

// Assuming you have a database connection established (e.g., $db)

// Function to add an item to the cart
function addToCart($product_id, $quantity, $product_name, $price) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }

    // Check if the product already exists in the cart
    if (isset($_SESSION['cart'][$product_id])) {
        // If the product exists, increment the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        // If the product doesn't exist, add it to the cart
        $_SESSION['cart'][$product_id] = array(
            'quantity' => $quantity,
            'name' => $product_name,
            'price' => $price
        );
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to get the cart items
function getCartItems() {
    return $_SESSION['cart'];
}

// Function to calculate the total cart value
function calculateCartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $item) {
            $total += $item['price'] * $item['quantity'];
        }
    }
    return $total;
}

// --- Example Usage (Simulating a product ID, quantity, etc.) ---

// Add a product to the cart
addToCart(123, 2, "Awesome T-Shirt", 20); // Product ID 123, quantity 2, name "Awesome T-Shirt", price 20

// Update the quantity of product 123 to 5
updateCartQuantity(123, 5);

// Get the cart items
$cart_items = getCartItems();
echo "<h2>Cart Items:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}

// Calculate and display the total cart value
$total = calculateCartTotal();
echo "<p>Total Cart Value: $" . $total . "</p>";

// Remove product 123
removeCartItem(123);

// Get and display cart items after removing an item
$cart_items = getCartItems();
echo "<h2>Cart Items After Removal:</h2>";
if (empty($cart_items)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart_items as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php
session_start();

// Function to add items to the cart
function addToCart($product_id, $quantity) {
  // Check if the cart already exists in the session
  if (isset($_SESSION['cart']) === false) {
    // If not, initialize an empty cart array
    $_SESSION['cart'] = array();
  }

  // Get the existing cart items
  $cartItems = $_SESSION['cart'];

  // Check if the product is already in the cart
  if (isset($cartItems[$product_id])) {
    // If it exists, increment the quantity
    $cartItems[$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart with quantity 1
    $cartItems[$product_id] = array('quantity' => $quantity);
  }

  // Update the cart in the session
  $_SESSION['cart'] = $cartItems;
}

// Function to update the quantity of a product in the cart
function updateQuantity($product_id, $quantity) {
    // Check if the cart exists
    if (isset($_SESSION['cart']) === false) {
        return false; // Cart doesn't exist, can't update
    }

    $cartItems = $_SESSION['cart'];

    if (isset($cartItems[$product_id])) {
        // Update the quantity
        $cartItems[$product_id]['quantity'] = $quantity;
        $_SESSION['cart'] = $cartItems;
        return true;
    } else {
        return false; // Product not found in cart
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  // Check if the cart exists
  if (isset($_SESSION['cart']) === false) {
    return false; // Cart doesn't exist, can't remove
  }

  $cartItems = $_SESSION['cart'];

  if (isset($cartItems[$product_id])) {
    unset($cartItems[$product_id]);
    $_SESSION['cart'] = $cartItems;
    return true;
  } else {
    return false; // Product not found in cart
  }
}

// Function to get the cart items
function getCartItems() {
  if (isset($_SESSION['cart']) === false) {
    return array();
  }

  return $_SESSION['cart'];
}

// Example Usage:

// 1. Add an item to the cart
// Suppose $product_id = 123 and $quantity = 2
// addToCart(123, 2);

// 2. Update the quantity of a product (e.g., increase the quantity of product 123 by 1)
// updateQuantity(123, 1);

// 3. Remove an item from the cart
// removeCartItem(123);

// 4. Get the current cart items
$cart = getCartItems();
echo "Cart Items: ";
print_r($cart);

// To display the cart items on a webpage (example):
// You'd typically loop through the $cart array and display the product name, image, quantity, and price.

?>


<?php
session_start(); // Start the session

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  // Check if the cart exists in the session
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];  // Initialize the cart array if it doesn't exist
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increase the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add the product to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove an item from the cart
function removeItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart contents
function getCartContents() {
  return $_SESSION['cart'] ?? [];  // Returns the cart array or an empty array if it doesn't exist
}

// Example Usage (Simulated Product Data)
$products = [
  1 => ['name' => 'Laptop', 'price' => 1200],
  2 => ['name' => 'Mouse', 'price' => 25],
  3 => ['name' => 'Keyboard', 'price' => 75]
];

// ---  Handling Add to Cart Request (Simulated) ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['product_id'])) {
  $product_id = (int)$_POST['product_id']; // Ensure it's an integer
  $quantity = (int)$_POST['quantity'] ?? 1; // Default quantity is 1

  if (isset($products[$product_id])) {
    addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
    echo "Item added to cart! (Product ID: " . $product_id . ")";
  } else {
    echo "Product not found.";
  }
}


// --- Displaying the Cart (for demonstration purposes) ---
if (isset($_SESSION['cart'])) {
  echo "<h2>Your Shopping Cart</h2>";
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    $product_name = $item['name'];
    $product_price = $item['price'];
    $quantity = $item['quantity'];

    echo "<li>" . $product_name . " - $" . $product_price . " x " . $quantity . " = $" . ($product_price * $quantity) . "</li>";
  }
  echo "</ul>";

  //  Example: Update quantity (simulated)
  if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_product_id']) && isset($_POST['new_quantity'])) {
    $product_id = (int)$_POST['update_product_id'];
    $new_quantity = (int)$_POST['new_quantity'];
    updateQuantity($product_id, $new_quantity);
    echo "<p>Quantity updated to: " . $new_quantity . "</p>";
  }

  // Example: Remove item from cart (simulated)
  if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_product_id'])) {
    $product_id = (int)$_POST['remove_product_id'];
    removeItem($product_id);
    echo "<p>Item removed from cart.</p>";
  }


} else {
  echo "<p>Your cart is empty.</p>";
}
?>


<?php

// Start a session if it doesn't exist
session_start();

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// --- Product Information (For Demonstration) ---
// In a real application, you would fetch this from a database.
$products = array(
    array('id' => 1, 'name' => 'Laptop', 'price' => 1200),
    array('id' => 2, 'name' => 'Mouse', 'price' => 25),
    array('id' => 3, 'name' => 'Keyboard', 'price' => 75),
);

// --- Functions to Handle Cart Operations ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add.
 */
function addToCart($product_id, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        // If the product isn't in the cart yet, add it with the specified quantity
        $_SESSION['cart'][$product_id] = array('quantity' => $quantity, 'price' => $product_id);  // Use product ID as the key, assuming prices are associated with the ID
    } else {
        // If the product is already in the cart, increase the quantity
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Calculates the total cart value.
 *
 * @return float The total cart value.
 */
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}

/**
 * Gets the items in the cart.
 *
 * @return array An array of items in the cart.
 */
function getCartItems() {
    return $_SESSION['cart'];
}

// --- Example Usage / Cart Interaction ---

// 1. Add a product to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addToCart($product_id, $quantity);
    // Optionally, display a success message
    echo "<p>Product added to cart.</p>";
}

// 2. Remove an item from the cart (e.g., via a delete button)
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    removeFromCart($product_id);
    // Optionally, display a success message
    echo "<p>Product removed from cart.</p>";
}

// 3. Display the cart contents
echo "<h2>Cart Items:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item_id => $item) {
        $product_name = 'Product ' . $item_id; // Replace with actual product name lookup

        echo "<li>" . $product_name . " - Quantity: " . $item['quantity'] . " - Price: $" . $item['price'] . "</li>";
    }
    echo "</ul>";
}


// 4. Calculate and display the total
echo "<p><strong>Total: $" . calculateTotal() . "</strong></p>";

?>


<?php
session_start();

// Array to store items in the cart
$cart = array();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  global $cart;

  if (empty($cart)) {
    $cart[$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  } else {
    // Check if the product already exists in the cart
    if (isset($cart[$product_id])) {
      $cart[$product_id]['quantity'] += $quantity;
    } else {
      $cart[$product_id] = array(
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
      );
    }
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    global $cart;

    if (isset($cart[$product_id])) {
        unset($cart[$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
  global $cart;

  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Example usage (Simulating product data)
$products = array(
  1 => array('name' => 'T-Shirt', 'price' => 20),
  2 => array('name' => 'Jeans', 'price' => 50),
  3 => array('name' => 'Hat', 'price' => 15)
);


//  Handling Add to Cart requests (e.g., from a form)
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $product_name = $products[$product_id]['name'];
  $price = $products[$product_id]['price'];
  $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default to 1 if not provided

  addToCart($product_id, $product_name, $price, $quantity);

  // Redirect to a cart page (or update the current page)
  header("Location: cart.php"); // Replace 'cart.php' with the appropriate URL
  exit();
}


// Handling Remove Cart Item requests
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];
    removeCartItem($product_id);

    header("Location: cart.php");
    exit();
}

// Handling Update Quantity requests
if (isset($_POST['update_quantity'])) {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateCartQuantity($product_id, $new_quantity);

  header("Location: cart.php");
  exit();
}

// Displaying the cart contents (only in a cart page, e.g., cart.php)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <h1>Shopping Cart</h1>

  <?php
  // Display Cart Items
  if (!empty($cart)) {
    echo "<h2>Cart Items:</h2>";
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
      echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Cart Total
    $total = 0;
    foreach ($cart as $product_id => $item) {
      $total += ($item['price'] * $item['quantity']);
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";
  } else {
    echo "<p>Your cart is empty.</p>";
  }
  ?>

  <form action="" method="post">
    <label for="product_id">Product ID:</label>
    <select name="product_id" id="product_id">
      <?php
      foreach ($products as $id => $product) {
        echo "<option value='" . $id . "'>" . $id . "</option>";
      }
      ?>
    </select><br><br>

    <input type="submit" name="add_to_cart" value="Add to Cart">
  </form>

  <a href="checkout.php">Checkout</a> <!-- Example checkout link -->

</body>
</html>


<?php
session_start();

// This is a basic example, suitable for small carts. 
// For production environments, use a database-backed solution for cart persistence.

// Initialize the cart session if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $product_name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Example usage (demonstration)
// Let's say we have the following products:
// Product ID: 1, Name: "Laptop", Price: 1200
// Product ID: 2, Name: "Mouse", Price: 25
// Product ID: 3, Name: "Keyboard", Price: 75

// Add a laptop to the cart
addToCart(1, 'Laptop', 1200);

// Add a mouse to the cart
addToCart(2, 'Mouse', 25, 2); // Add 2 of the mouse

// Update the quantity of the mouse
updateCartQuantity(2, 5); // Now we have 5 mice in the cart


// Display the cart contents
echo "<h2>Cart Contents:</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "<li>" . $item['name'] . " - Price: $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";
}

// Remove the mouse (example)
// removeCartItem(2);
// echo "<p>Mouse removed from cart.</p>";


// Example of how to clear the cart (for demonstration)
// session_destroy();  // Comment this out to keep the cart data
// session_unset(); // Clears all session variables
?>


<?php
session_start();

// Check if the session is already started
if (session_status() !== PHP_SESSION_ACTIVE) {
    session_start();
}

// --- Cart Functions ---

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.  Defaults to 1 if not provided.
 * @return void
 */
function add_to_cart(int $product_id, int $quantity = 1) {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
    }
}

/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function update_cart_quantity(int $product_id, int $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function remove_from_cart(int $product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Gets the current cart contents.
 *
 * @return array The cart contents array.
 */
function get_cart_contents() {
    return $_SESSION['cart'] ?? []; // Use ?? to return an empty array if 'cart' is not set.
}

/**
 * Calculates the total price of the cart.
 *
 * @param array $cart_items  The cart items (array of product IDs and quantities).
 * @param array $product_prices An associative array where keys are product IDs and values are prices.
 * @return float The total price.
 */
function calculate_total(array $cart_items, array $product_prices) {
    $total = 0;
    foreach ($cart_items as $product_id => $quantity) {
        if (isset($product_prices[$product_id])) {
            $total += $product_prices[$product_id] * $quantity;
        }
    }
    return $total;
}


// --- Example Usage ---

// 1. Add a product to the cart
add_to_cart(123, 2); // Add 2 of product ID 123

// 2. Add another product
add_to_cart(456, 1);

// 3. Update the quantity of product 123 to 5
update_cart_quantity(123, 5);

// 4. Get the cart contents
$cart = get_cart_contents();
print_r($cart); // Output the cart array (for debugging)

// 5. Calculate the total
$product_prices = [
    123 => 10.00,
    456 => 25.00
];
$total = calculate_total($cart, $product_prices);
echo "Total price: $" . number_format($total, 2) . "<br>"; // Output the total with formatting

// 6. Remove a product
remove_from_cart(456);

// 7. Get the cart contents after removing an item
$cart_after_removal = get_cart_contents();
print_r($cart_after_removal); // Verify that item 456 is no longer in the cart.

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity) {
    // Add item to the cart array
    $_SESSION['cart'][] = array(
        'id' => $product_id,
        'name' => $product_name,
        'price' => $price,
        'quantity' => $quantity
    );

    // You might want to update the cart quantity if the item already exists
    updateCartItemQuantity($product_id, $quantity);
}

// Function to update the quantity of an item in the cart
function updateCartItemQuantity($product_id, $quantity) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $quantity;
            return;
        }
    }
}

// Example usage:  Simulating a product being added to the cart.
//  Replace these with your actual product data and handling.

// Add an item to the cart
addToCart(1, "Awesome T-Shirt", 20.00, 2);
addToCart(2, "Cool Mug", 10.00, 1);


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . ($item['price'] * $item['quantity']) . "</li>";
    }
    echo "</ul>";

    // Calculate the total cost of the cart
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    echo "<p><strong>Total: $" . $total . "</strong></p>";
}


// Optional:  Function to remove an item from the cart
function removeItemFromCart($product_id) {
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            // Optionally, re-index the cart array if necessary
            // reset($_SESSION['cart']);
            return;
        }
    }
}


// Example: Remove a product from cart
// removeItemFromCart(2);
?>


<?php
session_start();

// Check if the session is empty, if so, initialize the cart
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// --- Example Functions for Cart Operations ---

// Function to add an item to the cart
function add_to_cart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Increment quantity if it exists
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Add the product to the cart
    $_SESSION['cart'][$product_id] = array(
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to update the quantity of an item in the cart
function update_cart_quantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $quantity;
  } else {
    // Handle case where the item is not in the cart
    // You could either:
    // 1.  Ignore the request (do nothing)
    // 2.  Throw an error (for debugging)
    // 3.  Add the item with the specified quantity (if it doesn't exist)
    // This example will ignore the request.
    // echo "Product ID $product_id not found in cart. Request ignored.
";
  }
}

// Function to remove an item from the cart
function remove_from_cart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


// --- Example Usage (Simulating User Interaction) ---

// 1. Adding an item
add_to_cart(1, "Laptop", 1200, 1); // Product ID 1, Laptop, $1200, Quantity 1
add_to_cart(2, "Mouse", 25, 2);   // Product ID 2, Mouse, $25, Quantity 2

// 2. Updating quantity
update_cart_quantity(1, 3); // Increase Laptop quantity to 3

// 3. Removing an item
remove_from_cart(2); // Remove Mouse from cart

// --- Displaying the Cart Contents ---
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>" . $product_data['name'] . "</strong> - $" . $product_data['price'] . " x " . $product_data['quantity'] . " = $" . ($product_data['price'] * $product_data['quantity']) . "</li>";
  }
  echo "</ul>";
}

// --- Important Notes ---

// 1. Session Start:  `session_start()` is crucial. It initializes the PHP session, 
//    allowing you to store and retrieve data across multiple pages.  It *must* be called 
//    before any output is sent to the browser (e.g., before `echo`, `print`, etc.).

// 2. Session Data:  The `$_SESSION` array is the PHP mechanism for storing session data.

// 3. Cart Structure: The example uses an associative array (`$_SESSION['cart']`) where the 
//    keys are product IDs and the values are associative arrays containing product details 
//    (name, price, quantity).  You can customize this structure to fit your specific needs.

// 4. Security:
//    - Always sanitize and validate user input to prevent security vulnerabilities (e.g., SQL injection, XSS).
//    - Implement proper authentication and authorization to protect your session data.

// 5. Persistence: Session data is stored on the server and persists until the session expires or is explicitly destroyed.  You can configure session lifetime (e.g., by setting the `session.gc_maxlifetime` in your php.ini file).  Consider using a database to store session data for more robust persistence.

?>


<?php
session_start();

// ---------------------  Cart Functions ---------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][] = $product_id;
  } else {
    $_SESSION['cart'] = [$product_id];
  }
}

/**
 * Retrieves the contents of the cart.
 *
 * @return array The array containing the product IDs in the cart.
 */
function getCart() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  } else {
    return []; // Return an empty array if the cart is empty
  }
}

/**
 * Removes an item from the cart by product ID.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'])) {
    unset($_SESSION['cart'][array_search($product_id, $_SESSION['cart'])]);
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $new_quantity The new quantity for the product.
 * @return void
 */
function updateCartQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'])) {
    // Find the index of the product in the cart
    $index = array_search($product_id, $_SESSION['cart']);

    // Check if the product exists in the cart
    if ($index !== false) {
      $_SESSION['cart'][$index] = $new_quantity;
    }
  }
}


// ---------------------  Example Usage (Simulated) ---------------------

// For demonstration purposes, let's simulate adding items to the cart.
// In a real application, you would typically do this based on user actions
// (e.g., clicking an "Add to Cart" button).

// Example 1: Add product 1 to cart with quantity 2
addToCart(1, 2);

// Example 2: Add product 2 to cart with default quantity (1)
addToCart(2);

// Example 3: Update quantity of product 1 to 3
updateCartQuantity(1, 3);

// ---------------------  Cart Contents (for Debugging) ---------------------

// Display the cart contents
$cart_contents = getCart();
echo "<h2>Cart Contents:</h2>";
if (empty($cart_contents)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_contents as $product_id) {
    echo "<li>Product ID: " . $product_id . "</li>";
  }
  echo "</ul>";
}

//  Example of removing a product
// removeFromCart(1);
// echo "<h2>Cart Contents after removing product 1:</h2>";
// $cart_contents = getCart();
// if (empty($cart_contents)) {
//   echo "<p>Your cart is empty.</p>";
// } else {
//   echo "<ul>";
//   foreach ($cart_contents as $product_id) {
//     echo "<li>Product ID: " . $product_id . "</li>";
//   }
//   echo "</ul>";
// }



?>


<?php
session_start();

// Initialize the cart (empty array if it doesn't exist)
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = ['name' => $product_name, 'price' => $price, 'quantity' => $quantity];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Example Usage (simulated product data - replace with your database or other source)
$products = [
    1 => ['name' => 'Laptop', 'price' => 1200],
    2 => ['name' => 'Mouse', 'price' => 25],
    3 => ['name' => 'Keyboard', 'price' => 75],
];

// Simulated form processing (e.g., from a form submission)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
        $product_id = $_POST['product_id'];
        $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1; // Default quantity is 1

        if (isset($products[$product_id])) {
            addToCart($product_id, $products[$product_id]['name'], $products[$product_id]['price'], $quantity);
        } else {
            // Handle invalid product ID (e.g., display an error message)
            echo "Invalid product ID: " . $product_id;
        }
    } elseif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
        $product_id = $_POST['product_id'];
        removeFromCart($product_id);
    } elseif (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
        $product_id = $_POST['product_id'];
        $new_quantity = (int)$_POST['quantity'];
        updateQuantity($product_id, $new_quantity);
    }
}

// Display the cart content
echo "<h2>Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($_SESSION['cart'] as $product_id => $product_details) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $product_details['name'] . "<br>";
        echo "<strong>Price:</strong> $" . $product_details['price'] . "<br>";
        echo "<strong>Quantity:</strong> " . $product_details['quantity'] . "<br>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='submit' name='action' value='Remove from Cart'>";
        echo "</form>";
        echo "<form method='post'>";
        echo "<input type='hidden' name='product_id' value='" . $product_id . "'>";
        echo "<input type='number' name='quantity' value='" . $product_details['quantity'] . "' min='1' max='10'>";
        echo "<input type='submit' name='action' value='Update Quantity'>";
        echo "</form>";
        echo "</li>";
    }
    echo "</ul>";
}

?>


<?php

session_start();

// --- Functions to manage the cart ---

/**
 * Add an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity The quantity to add.  Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] ?? 0;
    $_SESSION['cart'][$product_id] = $_SESSION['cart'][$product_id] + $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Remove an item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

/**
 * Update the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

/**
 * Get the contents of the cart.
 *
 * @return array  An array containing the product IDs and their quantities.
 */
function getCartContents() {
  return $_SESSION['cart'] ?? [];
}


// --- Example Usage (for demonstration) ---

// 1.  Initialization (If the cart doesn't exist, initialize it)
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// 2.  Adding items to the cart
addToCart(101, 2); // Add 2 of product ID 101
addToCart(102, 1); // Add 1 of product ID 102
addToCart(101, 3); // Add 3 of product ID 101 (overwriting previous quantity)


// 3. Displaying the cart contents
echo "<h2>Your Cart:</h2>";
echo "<ul>";
$cart_contents = getCartContents();

if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $product_id => $quantity) {
    //  In a real application, you'd likely fetch product details
    //  based on the $product_id from your database.
    //  For this example, we'll just display the product ID and quantity.
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
}
echo "</ul>";

// 4. Removing an item
removeFromCart(102); // Remove product ID 102

// 5. Updating the quantity
updateCartQuantity(101, 5); // Update the quantity of product ID 101 to 5

// Display the updated cart
echo "<h2>Your Cart (Updated):</h2>";
$cart_contents = getCartContents();

if (empty($cart_contents)) {
  echo "<li>Cart is empty.</li>";
} else {
  foreach ($cart_contents as $product_id => $quantity) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $quantity . "</li>";
  }
}
echo "</ul>";


?>


<?php
session_start();

// ------------------------------------------------------------------
//  Cart Implementation (Simplified - for demonstration)
// ------------------------------------------------------------------

// Function to add an item to the cart
function addToCart($product_id, $quantity) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to get the cart items
function getCartItems() {
  if (isset($_SESSION['cart'])) {
    return $_SESSION['cart'];
  }
  return array();
}

// ------------------------------------------------------------------
//  Example Usage (Simulated Products - Replace with your actual data)
// ------------------------------------------------------------------

// Dummy product data (replace with your database query)
$products = array(
  1 => array('name' => 'T-Shirt', 'price' => 20),
  2 => array('name' => 'Jeans', 'price' => 50),
  3 => array('name' => 'Hat', 'price' => 15)
);


// ------------------------------------------------------------------
//  Session Handling - Example Actions
// ------------------------------------------------------------------

// 1. Add an item to the cart (e.g., user adds a T-Shirt)
if (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  addToCart($product_id, $quantity);
  echo "<p>Item added to cart.</p>";
}

// 2. Remove an item from the cart (e.g., user removes Jeans)
if (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {
  $product_id = $_POST['product_id'];
  removeFromCart($product_id);
  echo "<p>Item removed from cart.</p>";
}

// 3. Update quantity (e.g., user changes the quantity of a T-Shirt)
if (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {
  $product_id = $_POST['product_id'];
  $new_quantity = $_POST['quantity'];
  updateQuantity($product_id, $new_quantity);
  echo "<p>Quantity updated in cart.</p>";
}


// ------------------------------------------------------------------
//  Displaying the Cart
// ------------------------------------------------------------------

// Get cart items
$cart_items = getCartItems();

echo "<h2>Your Cart</h2>";

if (empty($cart_items)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart_items as $product_id => $item) {
    $product_name = $products[$product_id]['name'];
    $product_price = $products[$product_id]['price'];
    $quantity = $item['quantity'];
    $total_price = $product_price * $quantity;

    echo "<li>" . $product_name . " - $" . $product_price . " x " . $quantity . " = $" . $total_price . "</li>";
  }
  echo "</ul>";

  // Calculate the total cart value
  $total_cart_value = 0;
  foreach ($cart_items as $product_id => $item) {
    $total_price = $products[$product_id]['price'] * $item['quantity'];
    $total_cart_value += $total_price;
  }

  echo "<p><strong>Total Cart Value: $" . $total_cart_value . "</strong></p>";
}

?>


<?php
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addItemToCart($productId, $productName, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if the item already exists in the cart
  if (isset($_SESSION['cart'][$productId])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$productId]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$productId] = array(
      'name' => $productName,
      'price' => $price,
      'quantity' => $quantity
    );
  }
}

// Function to remove an item from the cart
function removeItemFromCart($productId) {
  if (isset($_SESSION['cart'][$productId])) {
    unset($_SESSION['cart'][$productId]);
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $quantity) {
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId]['quantity'] = $quantity;
  }
}


// Example Usage (replace with your product data)

// Add an item to the cart
addItemToCart(1, 'Laptop', 1200, 1);
addItemToCart(2, 'Mouse', 25, 2);


// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $productId => $item) {
    echo "<li>";
    echo "Product: " . $item['name'] . "<br>";
    echo "Price: $" . $item['price'] . "<br>";
    echo "Quantity: " . $item['quantity'] . "<br>";
    echo "Subtotal: $" . $item['price'] * $item['quantity'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}

// Remove an item from the cart
//removeItemFromCart(2);

// Update quantity
//updateQuantity(1, 3);
?>


<?php

session_start();

// --------------------- Cart Functions ---------------------

/**
 * Adds an item to the cart.
 *
 * @param string $product_id The ID of the product to add.
 * @param int $quantity The quantity of the product to add. Defaults to 1.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  // Check if the cart already exists
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // If it exists, increment the quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // If it doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
  }
}

/**
 * Updates the quantity of a product in the cart.
 *
 * @param string $product_id The ID of the product to update.
 * @param int $quantity The new quantity of the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Removes an item from the cart.
 *
 * @param string $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Gets all items in the cart.
 *
 * @return array An array containing all items in the cart.
 */
function getCart() {
  return $_SESSION['cart'] ?? []; // Use null coalesce operator for empty array
}


/**
 * Calculates the total price of all items in the cart.
 *
 * @return float The total price.
 */
function calculateTotal() {
  $total = 0;
  $cart = getCart();

  foreach ($cart as $product_id => $item) {
    // Assuming you have a way to get the price of a product based on its ID.
    // This is just an example - you'll need to adapt this to your product data.
    $price = getProductPrice($product_id); // Implement this function
    $total_for_item = $price * $item['quantity'];
    $total = $total + $total_for_item;
  }

  return $total;
}



// --------------------- Helper Functions (Implement these) ---------------------

/**
 * Placeholder function to get the price of a product.  You need to replace this.
 * This is just an example.  You'll need to retrieve product prices from your database or other source.
 *
 * @param string $product_id The ID of the product.
 * @return float The price of the product.
 */
function getProductPrice($product_id) {
    // *** REPLACE THIS WITH YOUR ACTUAL LOGIC TO RETRIEVE THE PRODUCT PRICE ***
    // Example:
    if ($product_id == 'product1') {
        return 10.00;
    } elseif ($product_id == 'product2') {
        return 20.00;
    } else {
        return 0; // Or handle the error as appropriate.
    }
}

// --------------------- Example Usage ---------------------

// Add some products to the cart
addToCart('product1', 2);
addToCart('product2', 1);
addToCart('product1', 1); // Add more of product1

// Display the contents of the cart
echo "<h2>Cart Items</h2>";
$cart = getCart();
if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Price: $" . number_format(calculateTotal(), 2) . "</p>";

// Update the quantity of a product
updateCartQuantity('product1', 3);

// Remove an item from the cart
removeFromCart('product2');

// Display the updated cart
echo "<h2>Updated Cart Items</h2>";
$cart = getCart();

if (empty($cart)) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($cart as $product_id => $item) {
    echo "<li>Product ID: " . $product_id . ", Quantity: " . $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

echo "<p>Total Price: $" . number_format(calculateTotal(), 2) . "</p>";

?>


<?php
session_start(); // Start the session

// ---  Cart Initialization ---

// Initialize an empty cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --------------------- Helper Functions ---------------------

/**
 * Add an item to the cart.
 *
 * @param string $product_id The unique ID of the product to add.
 * @param string $name The name of the product.
 * @param float $price The price of the product.
 * @param int $quantity The quantity to add (default: 1).
 */
function addToCart($product_id, $name, $price, $quantity = 1) {
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = [
            'name' => $name,
            'price' => $price,
            'quantity' => $quantity,
        ];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

/**
 * Update the quantity of an item in the cart.
 *
 * @param string $product_id The unique ID of the product to update.
 * @param int $quantity The new quantity.
 */
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

/**
 * Remove an item from the cart.
 *
 * @param string $product_id The unique ID of the product to remove.
 */
function removeFromCart($product_id) {
    if (isset($_SESSION['cart'][$product_id])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

/**
 * Get all items in the cart.
 *
 * @return array The cart items.
 */
function getCartItems() {
    return $_SESSION['cart'];
}

/**
 * Calculate the total cart value.
 *
 * @return float The total value.
 */
function calculateTotal() {
    $total = 0;
    $cartItems = getCartItems();
    foreach ($cartItems as $item) {
        $totalItemValue = $item['price'] * $item['quantity'];
        $total += $totalItemValue;
    }
    return $total;
}

// --------------------- Example Usage (Simulated) ---------------------

// --- Add items to the cart based on user actions (e.g., button clicks) ---
// In a real application, this would come from form submissions or AJAX requests

// Example 1: Add a product to the cart
addToCart('product1', 'Awesome T-Shirt', 20.00, 2);

// Example 2:  Update the quantity of an existing product
updateQuantity('product1', 3); // Increase quantity of 'product1' to 3

// Example 3: Remove an item from the cart
// removeFromCart('product1');

// --------------------- Display the Cart ---------------------

// Get cart items
$cart = getCartItems();

// Calculate total
$total = calculateTotal();

echo "<h2>Your Shopping Cart</h2>";

if (empty($cart)) {
    echo "<p>Your cart is empty.</p>";
} else {
    echo "<ul>";
    foreach ($cart as $product_id => $item) {
        echo "<li>";
        echo "<strong>Product:</strong> " . $item['name'] . "<br>";
        echo "<strong>Price:</strong> $" . number_format($item['price'], 2) . "<br>";
        echo "<strong>Quantity:</strong> " . $item['quantity'] . "<br>";
        echo "<strong>Total for this item:</strong> $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
    echo "<p><strong>Total Cart Value:</strong> $" . number_format($total, 2) . "</p>";
}


?>


<?php

session_start();

// --- Cart Logic ---

// Initialize the cart as an empty array if it doesn't exist
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = [];
}

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  } else {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  }
}

// Function to update the quantity of an item in the cart
function updateQuantity($product_id, $quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
      $_SESSION['cart'][$product_id]['quantity'] = $quantity;
    }
}

// Function to remove an item from the cart
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to get the cart items
function getCartItems() {
  return $_SESSION['cart'];
}

// Function to calculate the cart total
function calculateCartTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}


// --- Example Usage (Illustrative - Replace with your actual product data) ---

// Add some items to the cart
addToCart(1, 'T-Shirt', 20, 2);
addToCart(2, 'Jeans', 50, 1);
addToCart(1, 'T-Shirt', 20, 3); // Add more of the T-Shirt

// Display the cart contents
echo "<h2>Your Shopping Cart</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}

// Example: Update quantity of product 1
updateQuantity(1, 5);

// Example: Remove product 2 from the cart
// removeFromCart(2);

// Display updated cart
echo "<h2>Your Shopping Cart (Updated)</h2>";
if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $item) {
    echo "<li>" . $item['name'] . " - $" . $item['price'] . " x " . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
  echo "<p><strong>Total: $" . calculateCartTotal() . "</strong></p>";
}

?>


<?php

session_start(); // Start the session

// ------------------ Cart Functions ------------------

/**
 * Adds an item to the cart.
 *
 * @param int $product_id The ID of the product to add.
 * @param int $quantity  The quantity of the product to add.
 * @return void
 */
function addToCart($product_id, $quantity = 1) {
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
  }

  // Check if the product is already in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}


/**
 * Removes a specific item from the cart.
 *
 * @param int $product_id The ID of the product to remove.
 * @return void
 */
function removeFromCart($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}


/**
 * Updates the quantity of an item in the cart.
 *
 * @param int $product_id The ID of the product to update.
 * @param int $quantity The new quantity for the product.
 * @return void
 */
function updateCartQuantity($product_id, $quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

/**
 * Gets the items in the cart.
 *
 * @return array An array representing the cart items.
 */
function getCartItems() {
  return $_SESSION['cart'];
}

/**
 * Returns the total number of items in the cart
 * @return int
 */
function cartTotal() {
    $total = 0;
    if (isset($_SESSION['cart'])) {
        foreach($_SESSION['cart'] as $product_id => $quantity) {
            $total += $quantity;
        }
    }
    return $total;
}

// ------------------ Example Usage (Demonstration) ------------------

// Add a product to the cart
addToCart(123);  // Add product with ID 123

// Add a second item to the cart
addToCart(456, 3); // Add product with ID 456 and quantity 3

// Update the quantity of the first item
updateCartQuantity(123, 5);

// Remove the second item
removeFromCart(456);

// Get the items in the cart
$cart = getCartItems();
print_r($cart); // Output: Array ( [123] => 5 )

echo "Cart Total: " . cartTotal();

// ------------------  Example HTML (for adding products to cart) ------------------

//  This is a simplified example.  In a real application, you'd likely
//  get product information (name, price, image, etc.) from a database.

// <form method="post" action="">
//   <input type="hidden" name="product_id" value="123">
//   <input type="number" name="quantity" value="1" min="1" max="10">
//   <input type="submit" value="Add to Cart">
// </form>

//  You'd need to handle the form submission to call the addToCart() function.
//  For example:

//  if ($_SERVER["REQUEST_METHOD"] == "POST") {
//      $product_id = $_POST['product_id'];
//      $quantity = $_POST['quantity'];
//      addToCart($product_id, $quantity);
//  }

?>


<?php
session_start();

// Function to add an item to the cart
function addToCart($product_id, $product_name, $price, $quantity = 1) {
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = []; // Initialize the cart array
  }

  // Check if the product already exists in the cart
  if (isset($_SESSION['cart'][$product_id])) {
    // Product exists, increment quantity
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    // Product doesn't exist, add it to the cart
    $_SESSION['cart'][$product_id] = [
      'name' => $product_name,
      'price' => $price,
      'quantity' => $quantity
    ];
  }
}

// Function to remove an item from the cart
function removeCartItem($product_id) {
  if (isset($_SESSION['cart'][$product_id])) {
    unset($_SESSION['cart'][$product_id]);
  }
}

// Function to update the quantity of an item in the cart
function updateCartQuantity($product_id, $new_quantity) {
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Example Usage (Simulating user actions - Replace with your actual logic)

// 1. Add an item to the cart
addToCart(1, "Awesome T-Shirt", 25.00, 2);  // product_id, product_name, price, quantity
addToCart(2, "Cool Mug", 12.50, 1);
// 2. Update the quantity of an item
updateCartQuantity(1, 5); // Increase the quantity of product ID 1 to 5

// 3. Remove an item from the cart
// removeCartItem(2);


// Displaying the cart contents (for demonstration)
echo "<h2>Your Shopping Cart</h2>";

if (empty($_SESSION['cart'])) {
  echo "<p>Your cart is empty.</p>";
} else {
  echo "<ul>";
  foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "<li>";
    echo "<strong>Product:</strong> " . $product_data['name'] . "<br>";
    echo "<strong>Price:</strong> $" . $product_data['price'] . "<br>";
    echo "<strong>Quantity:</strong> " . $product_data['quantity'] . "<br>";
    echo "<strong>Total for this item:</strong> $" . ($product_data['price'] * $product_data['quantity']) . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}


?>

