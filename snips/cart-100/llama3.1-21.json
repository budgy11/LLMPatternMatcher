{"prompt": "Create a user cart session using php", "llm_output": "**User Cart Session Example in PHP**\n=====================================\n\nThis example demonstrates how to create a user cart session using PHP, storing items and their quantities in the session.\n\n**Step 1: Initialize the Session**\n\nFirst, we need to initialize the session by calling `session_start()` at the beginning of our script.\n```php\n<?php\nsession_start();\n?>\n```\n**Step 2: Define the Cart Data Structure**\n\nWe will store the cart data as an associative array with the following structure:\n```php\n$cart = [\n    'items' => [], // list of items in the cart\n    'subtotal' => 0, // subtotal of all items\n    'total' => 0 // total cost including tax and shipping (if applicable)\n];\n```\n**Step 3: Add Items to the Cart**\n\nTo add an item to the cart, we will use a function that checks if the item is already in the cart, and update its quantity if it exists. Otherwise, we will add the item to the cart.\n```php\nfunction add_item_to_cart($item_id, $quantity) {\n    global $cart;\n\n    // Check if item is already in cart\n    $existing_item = array_filter($cart['items'], function ($i) use ($item_id) {\n        return $i['id'] == $item_id;\n    });\n\n    if (!empty($existing_item)) {\n        // Update quantity of existing item\n        $existing_item[0]['quantity'] += $quantity;\n    } else {\n        // Add new item to cart\n        $cart['items'][] = [\n            'id' => $item_id,\n            'name' => 'Item Name', // replace with actual item name\n            'price' => 9.99, // replace with actual price\n            'quantity' => $quantity\n        ];\n    }\n\n    update_cart_subtotal();\n}\n\n// Example usage:\nadd_item_to_cart(123, 2);\n```\n**Step 4: Update Cart Subtotal**\n\nAfter adding or updating an item in the cart, we need to recalculate the subtotal.\n```php\nfunction update_cart_subtotal() {\n    global $cart;\n\n    $cart['subtotal'] = array_reduce($cart['items'], function ($acc, $item) {\n        return $acc + $item['price'] * $item['quantity'];\n    }, 0);\n}\n```\n**Step 5: Display Cart Contents**\n\nTo display the cart contents, we can loop through the `items` array and print out each item's details.\n```php\nfunction display_cart() {\n    global $cart;\n\n    echo '<h2>Cart Contents:</h2>';\n    foreach ($cart['items'] as $item) {\n        echo \"<p>ID: {$item['id']} Name: {$item['name']} Price: \\${$item['price']} Quantity: {$item['quantity']}</p>\";\n    }\n}\n```\n**Example Use Case**\n\n```php\n<?php\nsession_start();\n\n// Initialize cart data structure\n$cart = [\n    'items' => [],\n    'subtotal' => 0,\n    'total' => 0\n];\n\n// Add items to cart\nadd_item_to_cart(123, 2);\nadd_item_to_cart(456, 1);\n\n// Display cart contents\ndisplay_cart();\n\n// Update cart subtotal and total (if applicable)\nupdate_cart_subtotal();\n```\nNote that this example is a simplified representation of a user cart session. In a real-world application, you would want to include additional functionality such as:\n\n* Handling item removal from the cart\n* Calculating tax and shipping costs\n* Displaying a summary of the order total\n* Saving the cart contents to a database or file system for persistent storage\n\nAlso, remember to replace the placeholder values (`Item Name`, `9.99`) with actual data from your database or another source.", "code_blocks": ["```php\n<?php\nsession_start();\n?>\n```", "```php\n$cart = [\n    'items' => [], // list of items in the cart\n    'subtotal' => 0, // subtotal of all items\n    'total' => 0 // total cost including tax and shipping (if applicable)\n];\n```", "```php\nfunction add_item_to_cart($item_id, $quantity) {\n    global $cart;\n\n    // Check if item is already in cart\n    $existing_item = array_filter($cart['items'], function ($i) use ($item_id) {\n        return $i['id'] == $item_id;\n    });\n\n    if (!empty($existing_item)) {\n        // Update quantity of existing item\n        $existing_item[0]['quantity'] += $quantity;\n    } else {\n        // Add new item to cart\n        $cart['items'][] = [\n            'id' => $item_id,\n            'name' => 'Item Name', // replace with actual item name\n            'price' => 9.99, // replace with actual price\n            'quantity' => $quantity\n        ];\n    }\n\n    update_cart_subtotal();\n}\n\n// Example usage:\nadd_item_to_cart(123, 2);\n```", "```php\nfunction update_cart_subtotal() {\n    global $cart;\n\n    $cart['subtotal'] = array_reduce($cart['items'], function ($acc, $item) {\n        return $acc + $item['price'] * $item['quantity'];\n    }, 0);\n}\n```", "```php\nfunction display_cart() {\n    global $cart;\n\n    echo '<h2>Cart Contents:</h2>';\n    foreach ($cart['items'] as $item) {\n        echo \"<p>ID: {$item['id']} Name: {$item['name']} Price: \\${$item['price']} Quantity: {$item['quantity']}</p>\";\n    }\n}\n```", "```php\n<?php\nsession_start();\n\n// Initialize cart data structure\n$cart = [\n    'items' => [],\n    'subtotal' => 0,\n    'total' => 0\n];\n\n// Add items to cart\nadd_item_to_cart(123, 2);\nadd_item_to_cart(456, 1);\n\n// Display cart contents\ndisplay_cart();\n\n// Update cart subtotal and total (if applicable)\nupdate_cart_subtotal();\n```"]}
