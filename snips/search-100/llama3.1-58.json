{"prompt": "Create a search bar using php", "llm_output": "Here is an example of how you can create a basic search bar using PHP:\n\n**index.php**\n```php\n<?php\n// Initialize variables\n$keyword = '';\n\nif (isset($_POST['search'])) {\n  $keyword = $_POST['search'];\n}\n\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Search Bar</title>\n  <style>\n    #search-bar {\n      width: 50%;\n      height: 30px;\n      padding: 10px;\n      font-size: 16px;\n      border: none;\n      border-radius: 5px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n  </style>\n</head>\n<body>\n  <h1>Search Bar</h1>\n  <form action=\"\" method=\"post\">\n    <input type=\"text\" id=\"search-bar\" name=\"search\" value=\"<?php echo $keyword; ?>\">\n    <button type=\"submit\">Search</button>\n  </form>\n  <?php\n  if ($keyword !== '') {\n    // Search logic goes here (e.g. query database, etc.)\n    $results = searchDatabase($keyword);\n\n    if ($results) {\n      ?>\n      <h2>Results:</h2>\n      <ul>\n        <?php foreach ($results as $result) { ?>\n          <li><?php echo $result['title']; ?></li>\n        <?php } ?>\n      </ul>\n      <?php\n    } else {\n      echo '<p>No results found.</p>';\n    }\n  }\n  ?>\n</body>\n</html>\n```\n**searchDatabase.php**\n```php\n<?php\nfunction searchDatabase($keyword) {\n  // Connect to database (e.g. MySQL)\n  $conn = new mysqli('localhost', 'username', 'password', 'database');\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Search query\n  $query = \"SELECT * FROM table_name WHERE title LIKE '%$keyword%'\";\n\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    return $result;\n  } else {\n    return false;\n  }\n}\n?>\n```\nIn this example, we have two PHP files: `index.php` and `searchDatabase.php`. The `index.php` file contains the search bar form and displays the results of the search. When the user submits the form, it sends a POST request to itself with the keyword in the `$_POST['search']` variable.\n\nThe `searchDatabase.php` file contains the logic for searching the database based on the keyword. It connects to the database using MySQLi, constructs a SQL query that searches for rows where the title column matches the keyword (case-insensitive), and returns the result of the query.\n\nNote that this is a very basic example and you should adapt it to your specific needs and database schema. Additionally, this code does not handle errors or security vulnerabilities well, so be sure to add proper error handling and validation to your production code.\n\nAlso note that this is an outdated example using MySQLi, in modern PHP you would use PDO (PHP Data Objects) for database interactions, which is more secure and efficient.\n\n**PDO Example**\n\nHere is the same example but with PDO:\n```php\n// index.php\n\n<?php\n$dsn = 'mysql:host=localhost;dbname=database';\n$username = 'username';\n$password = 'password';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n\n// ...\n\n$searchDatabase($keyword);\n\n// searchDatabase.php\n\n<?php\nfunction searchDatabase($keyword) {\n  global $pdo;\n\n  $query = 'SELECT * FROM table_name WHERE title LIKE :keyword';\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':keyword', $keyword, PDO::PARAM_STR);\n  $stmt->execute();\n\n  if ($stmt->rowCount() > 0) {\n    return $stmt;\n  } else {\n    return false;\n  }\n}\n?>\n```\nThis example uses the PDO extension to connect to the database and execute a prepared statement. This is more secure than the MySQLi example because it prevents SQL injection attacks.\n\nAlso, keep in mind that this is just an example, you should adapt it to your specific needs and use case.", "code_blocks": ["```php\n<?php\n// Initialize variables\n$keyword = '';\n\nif (isset($_POST['search'])) {\n  $keyword = $_POST['search'];\n}\n\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Search Bar</title>\n  <style>\n    #search-bar {\n      width: 50%;\n      height: 30px;\n      padding: 10px;\n      font-size: 16px;\n      border: none;\n      border-radius: 5px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n  </style>\n</head>\n<body>\n  <h1>Search Bar</h1>\n  <form action=\"\" method=\"post\">\n    <input type=\"text\" id=\"search-bar\" name=\"search\" value=\"<?php echo $keyword; ?>\">\n    <button type=\"submit\">Search</button>\n  </form>\n  <?php\n  if ($keyword !== '') {\n    // Search logic goes here (e.g. query database, etc.)\n    $results = searchDatabase($keyword);\n\n    if ($results) {\n      ?>\n      <h2>Results:</h2>\n      <ul>\n        <?php foreach ($results as $result) { ?>\n          <li><?php echo $result['title']; ?></li>\n        <?php } ?>\n      </ul>\n      <?php\n    } else {\n      echo '<p>No results found.</p>';\n    }\n  }\n  ?>\n</body>\n</html>\n```", "```php\n<?php\nfunction searchDatabase($keyword) {\n  // Connect to database (e.g. MySQL)\n  $conn = new mysqli('localhost', 'username', 'password', 'database');\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Search query\n  $query = \"SELECT * FROM table_name WHERE title LIKE '%$keyword%'\";\n\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    return $result;\n  } else {\n    return false;\n  }\n}\n?>\n```", "```php\n// index.php\n\n<?php\n$dsn = 'mysql:host=localhost;dbname=database';\n$username = 'username';\n$password = 'password';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n\n// ...\n\n$searchDatabase($keyword);\n\n// searchDatabase.php\n\n<?php\nfunction searchDatabase($keyword) {\n  global $pdo;\n\n  $query = 'SELECT * FROM table_name WHERE title LIKE :keyword';\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':keyword', $keyword, PDO::PARAM_STR);\n  $stmt->execute();\n\n  if ($stmt->rowCount() > 0) {\n    return $stmt;\n  } else {\n    return false;\n  }\n}\n?>\n```"]}
