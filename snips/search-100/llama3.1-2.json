{"prompt": "Create a search bar using php", "llm_output": "Here is an example of how you can create a basic search bar using PHP:\n\n**search.php**\n```php\n<?php\n// Connect to database (assuming MySQL)\n$conn = new mysqli('localhost', 'username', 'password', 'database');\n\n// Function to search database\nfunction searchDatabase($query) {\n    // SQL query to select data from table where name or description contains the search query\n    $sql = \"SELECT * FROM table_name WHERE name LIKE '%$query%' OR description LIKE '%$query%'\";\n    \n    // Execute query and return result\n    $result = $conn->query($sql);\n    return $result;\n}\n\n// Check if form has been submitted\nif (isset($_POST['search'])) {\n    // Get search query from form\n    $query = $_POST['search'];\n\n    // Call function to search database\n    $result = searchDatabase($query);\n\n    // Display results\n    echo '<h2>Search Results:</h2>';\n    while ($row = $result->fetch_assoc()) {\n        echo '<p>' . $row['name'] . ' - ' . $row['description'] . '</p>';\n    }\n}\n?>\n\n<!-- Search form -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"text\" name=\"search\" placeholder=\"Search...\">\n    <button type=\"submit\" name=\"search\">Search</button>\n</form>\n```\n**How it works:**\n\n1. The user submits the search form with a query in the `search` field.\n2. PHP checks if the form has been submitted (i.e., if the `search` variable is set).\n3. If the form has been submitted, PHP retrieves the search query from the `search` field and calls the `searchDatabase()` function to execute a SQL query on the database.\n4. The `searchDatabase()` function searches for rows in the table where either the `name` or `description` columns contain the search query (using the `LIKE` operator).\n5. The results are then displayed on the page.\n\n**Note:**\n\n* This is a basic example and you should adapt it to your specific database schema and needs.\n* For production use, consider using prepared statements to prevent SQL injection vulnerabilities.\n* Also, keep in mind that this is a simple search functionality, you may want to add more advanced features like pagination or sorting.\n\n**Example Use Case:**\n\n Suppose you have a table called `products` with columns `name`, `description`, and `price`. You can use this script as a starting point to create a search bar on your e-commerce website that allows users to search for products by name or description.", "code_blocks": ["```php\n<?php\n// Connect to database (assuming MySQL)\n$conn = new mysqli('localhost', 'username', 'password', 'database');\n\n// Function to search database\nfunction searchDatabase($query) {\n    // SQL query to select data from table where name or description contains the search query\n    $sql = \"SELECT * FROM table_name WHERE name LIKE '%$query%' OR description LIKE '%$query%'\";\n    \n    // Execute query and return result\n    $result = $conn->query($sql);\n    return $result;\n}\n\n// Check if form has been submitted\nif (isset($_POST['search'])) {\n    // Get search query from form\n    $query = $_POST['search'];\n\n    // Call function to search database\n    $result = searchDatabase($query);\n\n    // Display results\n    echo '<h2>Search Results:</h2>';\n    while ($row = $result->fetch_assoc()) {\n        echo '<p>' . $row['name'] . ' - ' . $row['description'] . '</p>';\n    }\n}\n?>\n\n<!-- Search form -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"text\" name=\"search\" placeholder=\"Search...\">\n    <button type=\"submit\" name=\"search\">Search</button>\n</form>\n```"]}
