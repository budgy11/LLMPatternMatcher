
<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling - Customize as needed */
    #search-container {
      margin: 20px;
      width: 300px;
    }

    #search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Ensures padding doesn't add to width */
    }

    #search-button {
      background-color: #4CAF50; /* Green */
      color: white;
      padding: 10px 20px;
      border: none;
      cursor: pointer;
      margin-left: 5px;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <script>
    // JavaScript to handle the search button click
    document.getElementById('search-button').addEventListener('click', function() {
      // Get the search term from the input field
      var searchTerm = document.getElementById('search-input').value;

      // Prevent the form from submitting (if there's a form)
      if (searchTerm) {
        // Do something with the search term.  This is where you'd
        // typically call a function to search your data.
        console.log("Searching for: " + searchTerm);

        // Example:  You might want to display the search term in a div.
        //  This is just for demonstration.
        var searchResultsDiv = document.getElementById("search-results");
        if (searchResultsDiv) {
          searchResultsDiv.innerHTML = "<p>You searched for: " + searchTerm + "</p>";
        }

        // You could also redirect the user to a results page, or AJAX the data.

      } else {
        // The search input is empty, so do nothing.
        alert("Please enter a search term.");
      }
    });
  </script>

</body>
</html>


<?php

// Sample data (replace this with your actual data source)
$items = [
    'apple',
    'banana',
    'orange',
    'grape',
    'strawberry',
    'watermelon',
    'pineapple',
    'mango',
];

// Check if the search term is provided
if (isset($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input!
    $results = [];

    // Loop through the items and check if they contain the search term (case-insensitive)
    foreach ($items as $item) {
        if (stripos($item, $searchTerm) !== false) { //stripos is case-insensitive
            $results[] = $item;
        }
    }

    // Display the results
    if (empty($results)) {
        echo "<p>No results found for '" . $searchTerm . "'</p>";
    } else {
        echo "<h2>Search Results for '" . $searchTerm . "'</h2>";
        echo "<ol>";
        foreach ($results as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ol>";
    }

} else {
    // Display the search bar if no search term is provided
    echo "<form method='get' action=''>"; //  'action' points to the same script
    echo "<label for='search'>Search:</label><br>";
    echo "<input type='text' id='search' name='search' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
}

?>


<?php

// Assuming you have a database connection established and stored in a variable like $conn

// Check if the search form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the search term
  $searchTerm = htmlspecialchars(trim($_POST["search"]));

  // Check if the search term is not empty
  if (!empty($searchTerm)) {
    // **Your Database Query Here**
    // Replace this with your actual database query to search your table.
    // This is a placeholder example, adjust it based on your database structure.
    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'"; 
    $result = mysqli_query($conn, $sql);

    // Check if the query was successful
    if ($result) {
      // Display the search results
      echo "<h2>Search Results for: " . $searchTerm . "</h2>";
      echo "<table border='1'>";
      echo "<thead><tr><th>Column 1</th><th>Column 2</th></tr></thead>"; // Replace with your column names
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        foreach ($row as $column => $value) {
          echo "<td>" . $value . "</td>";
        }
        echo "</tr>";
      }
      echo "</table>";

    } else {
      echo "Error executing query.";
    }
  } else {
    echo "<p>Please enter a search term.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search:</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


     // Using mysqli_stmt (Prepared Statements)
     $stmt = mysqli_prepare($conn, "SELECT * FROM your_table WHERE your_column LIKE ?");
     mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // "s" indicates a string
     mysqli_stmt_execute($stmt);
     $result = mysqli_stmt_get_result($stmt);

     // Important:  Always close the statement
     mysqli_stmt_close($stmt);
     

     -  Prepared statements separate the query structure from the data, preventing malicious code from being injected into the query.
     -  `mysqli_stmt_bind_param()`:  This function binds the `$searchTerm` to the query, and the database driver handles escaping the data automatically.
     - `mysqli_stmt_get_result()`:  Gets the result set from the prepared statement.
     - `mysqli_stmt_close()`:  Always close the statement to release resources.

4. **Database Setup:**

   -  You'll need a database connection established (e.g., using `mysqli_connect()` or `PDO`).  This example assumes you have a `$conn` variable that's already established and contains your database connection object.  Make sure the table `your_table` exists and has a column named `your_column`.

**How to Use:**

1. **Replace Placeholders:** Update the code with your actual database credentials, table name, column name, and the appropriate database connection setup.
2. **Adapt the Output:** Modify the HTML table output to match the structure of your table's columns.
3. **Test Thoroughly:** Test the search with various search terms, including those with special characters, to ensure it's working correctly and securely.
4. **Implement Prepared Statements:**  *Always* use prepared statements to prevent SQL injection.

**Example Database Table (MySQL):**



<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // You can add your search logic here.  This is just an example.
      // This example simply displays the search term in the console.
      console.log("Search term: " + searchTerm);

      // Example:  You could then use 'searchTerm' to query a database
      // or perform other search operations.

      // Reset the search box (optional)
      document.getElementById("searchInput").value = "";
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established ($conn)

function searchDatabase($searchTerm) {
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($conn, $sql);

  $products = [];
  while ($row = mysqli_fetch_assoc($result)) {
    $products[] = $row;
  }

  return $products;
}

// Example usage (in the search() function):
function search() {
    $searchTerm = document.getElementById("searchInput").value;
    $searchResults = searchDatabase($searchTerm);

    // Display results (example)
    let resultsDiv = document.getElementById("results");
    resultsDiv.innerHTML = ""; // Clear previous results

    for (let i = 0; i < $searchResults.length; i++) {
        let product = $searchResults[i];
        let productDiv = document.createElement("div");
        productDiv.appendChild(productDiv);
        productDiv.innerHTML = "Name: " + product.name + "<br>Description: " + product.description;
    }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    #search-input {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <script>
    // JavaScript to handle search functionality
    document.getElementById('search-button').addEventListener('click', function() {
      var searchTerm = document.getElementById('search-input').value;

      // Perform your search logic here.  This is a placeholder example.
      if (searchTerm) {
        alert("Searching for: " + searchTerm); // Replace with your actual search code
        // Example: Search through an array or database
        // var results = searchArray(searchTerm);
        // document.getElementById('search-container').innerHTML = "Results: " + results.join('<br>');
      } else {
        alert("Please enter a search term.");
      }
    });
  </script>

</body>
</html>


<?php

// Sample data - Replace with your actual data source (e.g., database query)
$data = [
    "apple", "banana", "cherry", "date", "elderberry",
    "fig", "grape", "honeydew", "kiwi", "lemon"
];

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search
$searchResults = [];
foreach ($data as $item) {
    $item = htmlspecialchars($item); //Sanitize each item too
    if (stripos($item, $searchTerm) !== false) {
        $searchResults[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search for Fruits</h1>

    <form method="get" action="">
        <input type="text" name="search" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for: <?php echo $searchTerm; ?></p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo $result; ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established
// This is a simplified example, replace with your actual database connection code

// Example database connection (replace with your actual connection)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
  // Set the PDO error mode to exception
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
  die(); // Stop execution if the connection fails
}


// Search term from the input field (e.g., from a form submission)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Optional: Sanitize the search term to prevent SQL injection
$searchTerm = $conn->quote($searchTerm); // Use the PDO quote() method for security

//  (Optional)  Database table name (replace with your actual table name)
$tableName = "products"; // Example: 'products'
$columnName = "product_name"; // Example: 'product_name'
$searchColumn = $columnName; // Keep this consistent with tableName

// Execute the database query
$stmt = $conn->prepare("SELECT * FROM $tableName WHERE $searchColumn LIKE :search");
$stmt->bindParam(':search', $searchTerm);
$stmt->execute();

// Fetch the results
$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results</h1>

  <form action="" method="get">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (count($results) > 0): ?>
    <ul>
      <?php foreach ($results as $row): ?>
        <li>
          <?php echo htmlspecialchars($row['product_name']); ?>  <!-- Use htmlspecialchars for safe output -->
        </li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found for <?php echo htmlspecialchars($searchTerm); ?>.</p>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the query string (e.g., from a GET request)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - important for security and preventing SQL injection
$searchTerm = htmlspecialchars(trim($searchTerm));

//  Example:  Let's assume you're searching a table named 'products'
//  and you want to search the 'name' and 'description' columns.

//  If you have a more complex query, you'll replace this with your actual SQL.

$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($db, $sql);  // Replace $db with your actual database connection

// Check if the query was successful
if ($result) {
    echo "<form method='get' action=''>";
    echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    // Display the search results
    if (mysqli_num_rows($result) > 0) {
        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No results found for '" . $searchTerm . "'</p>";
    }

} else {
    // Handle the error (e.g., log the error)
    echo "<p>Error executing query: " . mysqli_error($db) . "</p>";
}

mysqli_close($db); // Close the database connection
?>


<?php

// Assuming you have a database connection established (e.g., $db is your database connection)
//  For example:
//  $db = new mysqli("localhost", "username", "password", "database_name");
//  if ($db->connect_error) {
//    die("Connection failed: " . $db->connect_error);
//  }

// Form to capture search query
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust width as needed */
      box-sizing: border-box; /* Ensures padding doesn't add to width */
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php

  // Handle the search query
  if (isset($_GET['search_term']) && !empty($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']); // Sanitize the input

    // *** Example: Search in a database table named 'products' with a 'name' column ***
    //  Adjust this part to your specific database and table structure.

    // *** IMPORTANT: Replace this with your actual database query ***
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

    // Example using mysqli:
    $result = mysqli_query($db, $sql);  // Assuming $db is your database connection

    if (mysqli_num_rows($result) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . htmlspecialchars($row['name']) . " - " . htmlspecialchars($row['description']) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
    }

  }

  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
    }

    #search-input {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results">
  </ul>

  <script>
    // Get references to the search input and results list
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResultsList = document.getElementById('search-results');

    // Sample data (replace with your actual data source)
    const data = [
      { title: "PHP Tutorial", description: "Learn PHP basics." },
      { title: "JavaScript Guide", description: "A comprehensive JavaScript tutorial." },
      { title: "HTML5 Reference", description: "The latest HTML5 specifications." },
      { title: "CSS Styling", description: "Learn how to style your web pages." },
      { title: "React Framework", description: "Introduction to ReactJS." }
    ];

    // Function to handle the search
    function performSearch() {
      const searchTerm = searchInput.value.toLowerCase();
      const results = data.filter(item => {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the search results
      searchResultsList.innerHTML = ''; // Clear previous results
      if (results.length > 0) {
        results.forEach(result => {
          const listItem = document.createElement('li');
          listItem.textContent = `${result.title} - ${result.description}`;
          searchResultsList.appendChild(listItem);
        });
      } else {
        searchResultsList.innerHTML = 'No results found.';
      }
    }

    // Add event listeners to the input and button
    searchInput.addEventListener('keyup', performSearch); // Trigger on key release
    searchButton.addEventListener('click', performSearch); // Trigger on button click
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }

  input[type="text"] {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box; /* Important for consistent sizing */
  }

  .search-results {
    margin-top: 20px;
    border: 1px solid #ccc;
    padding: 10px;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <div id="searchResults" class="search-results" style="display: none;">
    <h2>Search Results:</h2>
    <ul id="resultsList"></ul>
  </div>


  <script>
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const resultsList = document.getElementById('resultsList');

    searchInput.addEventListener('keyup', function(event) {
      const searchTerm = searchTerm.toLowerCase(); //Convert to lowercase for case-insensitive search

      // Sample data (replace with your actual data source)
      const data = [
        { title: 'Apple iPhone 13', description: 'The latest iPhone with a great camera.' },
        { title: 'Samsung Galaxy S22', description: 'A powerful Android phone.' },
        { title: 'Google Pixel 6', description: 'The best camera phone.' },
        { title: 'MacBook Air M2', description: 'A lightweight and powerful laptop.' },
        { title: 'Microsoft Surface Pro 9', description: 'A versatile 2-in-1 tablet.' }
      ];

      // Filter the data based on the search term
      const filteredData = data.filter(item => {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the search results
      if (filteredData.length > 0) {
        searchResults.style.display = 'block';
        resultsList.innerHTML = ''; // Clear previous results

        filteredData.forEach(item => {
          const listItem = document.createElement('li');
          listItem.textContent = `${item.title} - ${item.description}`;
          resultsList.appendChild(listItem);
        });
      } else {
        searchResults.style.display = 'none'; // Hide if no results
      }
    });
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established as $conn

$searchTerm = $_GET['search']; // Get the search term from the URL

if ($searchTerm) {
    $sql = "SELECT * FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // Process the results and display them in HTML
        while($row = $result->fetch_assoc()) {
            // Display the row data (title, description, etc.)
            echo "<div>" . $row['title'] . " - " . $row['description'] . "</div>";
        }
    } else {
        echo "No results found.";
    }
}
?>


<?php

// This is a very basic example, meant to illustrate the core concepts.
// For a production application, you'd likely want a more robust and secure search system.

// 1.  Get the search term from the user.  This example uses $_GET for simplicity.
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize the search term (VERY IMPORTANT for security)
// This example uses simple trimming and stripping of HTML tags.  
// You *must* use a more robust sanitization method in a real-world application.
$searchTerm = trim($searchTerm);
$searchTerm = strip_tags($searchTerm, '<><a><b><i><script><img>'); // Remove HTML tags

// 3.  Set up some dummy data for demonstration. Replace this with your actual data source.
$items = [
    'apple',
    'banana',
    'orange',
    'grapefruit',
    'strawberry',
    'pineapple',
    'mango',
    'pear'
];

// 4.  Perform the search
$searchResults = [];
if ($searchTerm) {
    foreach ($items as $item) {
        // Case-insensitive search
        if (stripos($item, $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }
}

// 5.  Output the search form and results
echo '<form method="GET" action="search_results.php">';
echo 'Search: <input type="text" name="search" value="' . htmlspecialchars($searchTerm) . '">';
echo '<button type="submit">Search</button>';
echo '</form>';

if (empty($searchResults)) {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'</p>";
} else {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($searchResults as $result) {
        echo '<li>' . htmlspecialchars($result) . '</li>';
    }
    echo '</ul>';
}

?>


<?php
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];
} else {
  $searchTerm = ''; // Reset if not provided
}

//  Sanitize the search term (important - use a robust method!)
$searchTerm = trim($searchTerm);
$searchTerm = strip_tags($searchTerm, '<><a><b><i><script><img>');

// Your data source (replace with your actual data retrieval)
$items = [
    'apple',
    'banana',
    'orange',
    'grapefruit',
    'strawberry',
    'pineapple',
    'mango',
    'pear'
];

// Perform the search (same as before)
$searchResults = [];
if ($searchTerm) {
    foreach ($items as $item) {
        if (stripos($item, $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }
}

// Output the results
if (empty($searchResults)) {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'</p>";
} else {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($searchResults as $result) {
        echo '<li>' . htmlspecialchars($result) . '</li>';
    }
    echo '</ul>';
}
?>


<?php

// Assuming you're using a form to submit the search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="search_results.php" method="GET">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
  // Example of handling the search and displaying results (search_results.php)
  if (isset($_GET['search_term'])) {
    $search_term = $_GET['search_term'];

    // **IMPORTANT:** Replace this with your actual data source/database query
    // This is just an example using a hardcoded array.
    $data = [
      'apple', 'banana', 'orange', 'grape', 'kiwi', 'mango'
    ];

    $results = [];
    foreach ($data as $item) {
      if (stripos($item, $search_term) !== false) { // Case-insensitive search
        $results[] = $item;
      }
    }

    if (!empty($results)) {
      echo "<h2>Search Results for: " . $search_term . "</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for: " . $search_term . "</p>";
    }
  }
?>

</body>
</html>


       $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";
       $result = $mysqli->query($sql);
       
   * **Process the Query Results:**  Loop through the `$result` object (from the database query) and display the matching results.  *Always* use prepared statements to prevent SQL injection vulnerabilities.
5. **Add Styling (CSS):** Add CSS to style the search bar and results.

**Important Security Considerations (SQL Injection Prevention):**

* **Prepared Statements:** *Always* use prepared statements with placeholders when constructing SQL queries from user input. This is the *best* defense against SQL injection vulnerabilities.  Here's an example using `mysqli`:



<?php

// Function to handle the search bar
function handleSearch($searchTerm) {
  // Sanitize the search term - VERY IMPORTANT for security
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

  // Escape the search term - Also important for security
  $searchTerm = htmlspecialchars($searchTerm);

  //  Add the search term to your search logic here
  //  This is a placeholder, you'll need to replace it with your actual search logic.

  // Example:  Simple case-insensitive search within a string (replace with your database/array logic)
  $data = "This is some sample data.  Searching for 'example' will find 'example'.";
  $results = explode(" ", $data); // Split into an array of words

  $found = false;
  foreach ($results as $word) {
    if (stripos($word, $searchTerm) !== false) {
      $found = true;
      break;
    }
  }

  if ($found) {
    echo "<p>Found results for: " . $searchTerm . "</p>";
    //  Display the results here based on the $searchTerm
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h1>Search Bar</h1>

  <form method="GET">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  // Handle the search form submission
  if (isset($_GET['search'])) {
    handleSearch($_GET['search']);
  }
  ?>

</body>
</html>


<?php

// Assuming you have a search term from a form submission or some other input

// 1. Get the search term (Example from a form)
$searchTerm = isset($_POST['search_term']) ? $_POST['search_term'] : '';

// 2. Sanitize and Prepare the Search Term (IMPORTANT for security)
$searchTerm = htmlspecialchars(trim($searchTerm)); // Converts HTML entities and removes whitespace

// 3.  Build your database query (Example: Searching in a simple array)
$results = [];

//  Example database - Replace this with your actual database connection and query
$data = [
    'apple', 'banana', 'orange', 'grape', 'kiwi', 'mango',
    'pear', 'pineapple', 'strawberry', 'watermelon', 'blueberry'
];

//  Example query -  Adjust this to your database and search criteria
if (!empty($searchTerm)) {
  $searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive search
  foreach ($data as $item) {
    if (stristr($item, $searchTerm)) { // stristr is case-insensitive
      $results[] = $item;
    }
  }
}


// 4. Output the Search Results

echo '<form method="post" action="">
  <input type="text" name="search_term" placeholder="Search...">
  <button type="submit">Search</button>
</form>';

if (!empty($results)) {
  echo '<h2>Search Results:</h2>';
  echo '<ul>';
  foreach ($results as $result) {
    echo '<li>' . $result . '</li>';
  }
  echo '</ul>';
} else {
  echo '<p>No results found for: ' . $searchTerm . '</p>';
}

?>


<?php
// Assuming you have a database connection established in $conn

$searchTerm = isset($_POST['search_term']) ? $_POST['search_term'] : '';

$searchTerm = htmlspecialchars($searchTerm);

// Prepare the SQL query with a placeholder
$query = "SELECT * FROM your_table WHERE your_column LIKE ?";  // Replace with your actual table and column names

// Create a PDO statement
$stmt = $conn->prepare($query);

// Bind the parameter to the statement
$stmt->bindValue(':search_term', '%' . $searchTerm . '%'); // The '%' characters are for wildcard searches

// Execute the query
$stmt->execute();

// Fetch the results
$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Output (same as before)
// ...
?>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  .search-container {
    margin: 20px;
    border: 1px solid #ccc;
    padding: 10px;
    width: 300px;
  }

  input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Important for consistent sizing */
  }

  button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
  }

  button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <?php
    // Example data (replace with your actual data source)
    $items = [
      "Apple",
      "Banana",
      "Orange",
      "Grape",
      "Strawberry"
    ];

    if (isset($_GET['search_term']) && !empty($_GET['search_term'])) {
      $searchTerm = $_GET['search_term'];

      echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
      echo "<ul>";

      foreach ($items as $item) {
        if (strpos($item, $searchTerm) !== false) { // Case-sensitive search
          echo "<li>" . htmlspecialchars($item) . "</li>";
        }
      }

      echo "</ul>";

    } else {
      echo "<p>Enter a search term above.</p>";
    }
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      display: flex;
      align-items: center;
    }

    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-right: 10px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <div id="searchResults" style="margin-top: 20px; display: none;">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResultsDiv = document.getElementById("searchResults");

      // **Replace this with your actual search logic**
      // This is a placeholder example.  You'll need to adapt it to your data source.
      if (searchTerm.trim() === "") {
        searchResultsDiv.style.display = "none"; // Hide results if search is empty
        return;
      }

      // Example: Search through a simple array
      var data = [
        "Apple", "Banana", "Orange", "Grapes", "Mango", "Strawberry", "Pineapple"
      ];

      var results = data.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Clear previous results
      searchResultsDiv.innerHTML = "";

      // Display results
      if (results.length > 0) {
        results.forEach(function(item) {
          var resultDiv = document.createElement("p");
          resultDiv.textContent = item;
          searchResultsDiv.appendChild(resultDiv);
        });
      } else {
        searchResultsDiv.style.display = "none";
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="search-input" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value;

      // You can do something with the search term here.
      // For example, you could send it to a server-side script
      // to perform a database query.

      // This is a placeholder to demonstrate how you might process the search term.
      console.log("Searching for: " + searchTerm);

      // Example:  Redirect to another page with the search term in the URL
      // window.location.href = "search_results.php?query=" + searchTerm;
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., $conn)

if (isset($_GET['query'])) {
  $searchTerm = $_GET['query'];

  // SQL query -  IMPORTANT:  Use prepared statements for security!
  $sql = "SELECT * FROM products WHERE description LIKE '%" . $searchTerm . "%'";  //Replace with your table/column names

  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    while ($row = $result->fetch_assoc()) {
      echo "<p>Product Name: " . $row['product_name'] . "</p>";
      echo "<p>Description: " . $row['description'] . "</p>";
      // Add other product details here
    }
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
} else {
  echo "Error: No search term provided.";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin: 20px;
    }

    #search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      background-color: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search</h1>
    <input type="text" id="search-input" placeholder="Enter search term">
    <button id="search-button">Search</button>

    <ul id="search-results"></ul>
  </div>


  <script>
    constsearchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();

      if (searchTerm) {
        //  Replace this with your actual search logic (database query, etc.)
        const results = performSearch(searchTerm); 

        searchResults.innerHTML = ''; // Clear previous results

        if (results.length > 0) {
          results.forEach(result => {
            const listItem = document.createElement('li');
            listItem.textContent = result;
            searchResults.appendChild(listItem);
          });
        } else {
          searchResults.innerHTML = '<p>No results found.</p>';
        }
      } else {
        searchResults.innerHTML = '<p>Please enter a search term.</p>';
      }
    });

    // Example of performing a search (replace with your actual implementation)
    function performSearch(searchTerm) {
      //  This is a placeholder.  Replace with your actual search logic.
      const data = [
        'Apple',
        'Banana',
        'Orange',
        'Grape',
        'Strawberry'
      ];

      const results = data.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));
      return results;
    }
  </script>

</body>
</html>


// (Inside your JavaScript, after fetch or similar)
function performSearch(searchTerm) {
    // Connect to your database (assuming PDO)
    try {
        $dsn = 'mysql:host=localhost;dbname=your_database';
        $username = 'your_username';
        $password = 'your_password';

        $pdo = new PDO($dsn, $username, $password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions for easier error handling

        $query = "SELECT * FROM your_table WHERE title LIKE :searchTerm OR description LIKE :searchTerm"; // Example query
        $stmt = $pdo->prepare($query);
        $stmt->bindValue(':searchTerm', '%' . $searchTerm . '%'); // Use LIKE with wildcards
        $stmt->execute();

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $results;
    } catch (PDOException $e) {
        // Handle database errors here (e.g., log the error)
        echo "Database error: " . $e->getMessage();
        return []; // Return an empty array in case of error
    }
}


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const items = [
      { name: 'Apple', description: 'A delicious fruit.' },
      { name: 'Banana', description: 'A yellow fruit.' },
      { name: 'Orange', description: 'A citrus fruit.' },
      { name: 'Grape', description: 'Small and sweet.' },
      { name: 'Strawberry', description: 'Red and juicy.' }
    ];

    searchInput.addEventListener('keyup', function() {
      const searchTerm = searchTerm.toLowerCase(); //Convert to lowercase for case-insensitive search
      const results = items.filter(item => {
        return item.name.toLowerCase().includes(searchTerm);
      });

      //Clear previous results
      searchResults.innerHTML = '';

      //Display results
      if (results.length > 0) {
        results.forEach(result => {
          const listItem = document.createElement('div');
          listItem.innerHTML = `${result.name}: ${result.description}`;
          searchResults.appendChild(listItem);
        });
      } else {
        searchResults.innerHTML = 'No results found.';
      }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Sanitize the search term to prevent SQL injection
  $searchTerm = htmlspecialchars($searchTerm);

  // Perform your search query here.  This is just an example and needs to be adapted
  // to your specific database structure and needs.
  $query = "SELECT * FROM products WHERE name LIKE '%$searchTerm%' OR description LIKE '%$searchTerm%'"; 

  // Execute the query
  $result = mysqli_query($conn, $query);

  // Display the results
  if ($result) {
    echo "<h2>Search Results for: '$searchTerm'</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>ID</th><th>Name</th><th>Description</th></tr></thead>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      echo "<td>" . $row['id'] . "</td>";
      echo "<td>" . $row['name'] . "</td>";
      echo "<td>" . $row['description'] . "</td>";
      echo "</tr>";
    }
    echo "</table>";

    // Optional:  Link back to the search form
    echo "<br><a href='search.php'>Back to Search</a>";
  } else {
    echo "<p>No results found for: '$searchTerm'</p>";
  }
}

?>

<!-- HTML Form for the Search Bar -->
<form action="search.php" method="get">
  <input type="text" name="search" placeholder="Enter search term..." value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>" />
  <button type="submit">Search</button>
</form>


<?php

// Assuming you have a database connection established ($conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security!)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape the search term for use in the SQL query (prevent SQL injection)
$searchTerm = $conn->real_escape_string($searchTerm);


// Build the SQL query
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";  // Replace 'your_table_name' and 'your_column_name'

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results</h1>

  <form action="" method="GET">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<ul>";
    // Output the search results
    while($row = $result->fetch_assoc()) {
      echo "<li>" . $row["your_column_name"] . "</li>"; //Replace 'your_column_name'
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a data source (e.g., an array, a database)
$data = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pineapple",
    "strawberry",
    "kiwi",
    "mango",
    "pear"
];


// Function to perform the search
function searchData($searchTerm, $data) {
    $results = [];

    foreach ($data as $item) {
        if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
            $results[] = $item;
        }
    }

    return $results;
}

// Get the search term from the user (e.g., from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from URL parameters

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search for Fruits</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px; /* Adjust width as needed */
      margin: 20px auto; /* Center the search bar */
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Include padding and border in the element's total width */
    }

    button {
      padding: 10px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      // Get the value from the input field
      var searchTerm = document.getElementById("searchInput").value;

      // **Important:** Replace this with your actual search logic.
      // This is just a placeholder to demonstrate the process.

      // Example:  Simple console log to show the search term
      console.log("Searching for: " + searchTerm);

      // **Your Search Logic Here**
      // This is where you would:
      // 1.  Fetch data based on searchTerm (e.g., from a database).
      // 2.  Process the data.
      // 3.  Display the results.

      // For example, if you had a database of items:
      // let results = searchDatabase(searchTerm);
      // document.getElementById("resultsArea").innerHTML = results; // Assuming you have a <div id="resultsArea"></div>

    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established in your PHP code
// (e.g., $conn is your database connection object)

$searchTerm = $_POST['searchInput']; // Get the search term from the form

$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // Output the data of each row as a JSON array
    $output = array();
    while($row = $result->fetch_assoc()) {
        $output[] = $row;
    }
    echo json_encode($output);

} else {
    echo "No results found.";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      width: 80%;
      margin: 20px auto;
      text-align: center;
    }

    #search-input {
      width: 70%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #search-results {
      margin-top: 20px;
      display: none; /* Initially hide the results */
    }
  </style>
</head>
<body>

  <div id="search-container">
    <h1>Simple Search</h1>
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>

    <div id="search-results">
      <!-- Search results will be displayed here -->
    </div>
  </div>

  <script>
    // Get references to the elements
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    // Function to handle the search
    function performSearch() {
      const searchTerm = searchTerm.value.toLowerCase(); // Convert to lowercase for case-insensitive search

      // Clear existing results
      searchResults.innerHTML = '';

      // Example data (replace with your actual data source)
      const data = [
        { title: 'Apple iPhone 14', description: 'The latest iPhone.' },
        { title: 'Samsung Galaxy S23', description: 'A powerful Android phone.' },
        { title: 'Google Pixel 7', description: 'Google\'s flagship phone.' },
        { title: 'Red Hat Linux', description: 'A popular open-source operating system.' },
        { title: 'PHP Tutorial', description: 'Learn to code with PHP.' }
      ];

      // Filter the data based on the search term
      const filteredData = data.filter(item =>
        item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm)
      );

      // Display the results
      if (filteredData.length > 0) {
        filteredData.forEach(item => {
          const resultItem = document.createElement('div');
          resultItem.innerHTML = `<strong>${item.title}</strong><br>${item.description}`;
          searchResults.appendChild(resultItem);
        });
      } else {
        // No results found message
        const noResultsMessage = document.createElement('p');
        noResultsMessage.textContent = 'No results found.';
        searchResults.appendChild(noResultsMessage);
      }
    }

    // Add event listener to the search button
    searchButton.addEventListener('click', performSearch);

    // Add event listener to the input field (for hitting Enter key)
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        performSearch();
      }
    });
  </script>

</body>
</html>


<?php

// Configuration
$search_term = ""; // Default search term
$results = []; // Array to store search results

// This is just an example data source. Replace this with your actual data source.
$all_data = [
    "apple", "banana", "orange", "grapefruit", "kiwi",
    "red apple", "green apple", "yellow banana", "sweet grape",
    "apple pie", "banana bread", "orange juice"
];


// Function to handle the search
function searchData($searchTerm, $data) {
    $results = [];
    foreach ($data as $item) {
        // Case-insensitive comparison
        if (stripos($item, $searchTerm) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// Handle form submission (if any)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $search_term = trim($_POST["search_term"]);
    $results = searchData($search_term, $all_data);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($results)): ?>
        <p>No results found for <?php echo htmlspecialchars($search_term); ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($results as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume $db is a mysqli connection object.

// Example setup for demonstration purposes
// Replace with your actual database connection details
$db = mysqli_connect("localhost", "username", "password", "database_name");
if (!$db) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Escape the search term to prevent SQL injection
$searchTerm = mysqli_real_escape_string($db, $searchTerm);


// Prepare the search query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";  // Replace your_table_name and your_column_name with your actual names


// Execute the query
$result = mysqli_query($db, $query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php
    if (mysqli_num_rows($result) > 0) {
        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . htmlspecialchars($row['your_column_name']) . "</li>"; // Replace your_column_name
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a form to capture the search term

// 1. Get the search term from the form
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];
} else {
  $searchTerm = ''; // Handle the case where the search field is empty
}


// 2. Sanitize the search term (very important for security!)
$searchTerm = htmlspecialchars($searchTerm); // Escape for HTML output
//  You might want to add more robust sanitization depending on your needs, 
//  e.g., stripping out characters, lowercasing, etc.


// 3. Perform your search here
// Example: Search through a database
//  Replace this with your actual search logic.

//  For demonstration, let's just search a simple array.
$myArray = array(
  "apple",
  "banana",
  "cherry",
  "date",
  "grapefruit"
);

$searchResults = array();
foreach ($myArray as $item) {
  if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
    $searchResults[] = $item;
  }
}

// 4. Display the search results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="get" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <input type="submit" value="Search">
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
  <?php else: ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search query from the form
$search_query = $_GET['search'];

// Sanitize the input - VERY IMPORTANT!  This prevents SQL injection.
// Escape the search term to prevent malicious code execution.
$search_query = $conn->real_escape_string($search_query); 

//  Handle empty search query (optional - depending on your desired behavior)
if(empty($search_query)) {
    $results = []; // Or redirect to a default page
} else {

    //  Example query - adjust based on your database structure and needs.
    //  This example searches the 'products' table for a 'name' field.
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_query . "%'"; 

    // Execute the query
    $result = $conn->query($sql);

    // Check if there are any results
    if ($result->num_rows > 0) {
        // Output the results
        echo "<ul>";
        while($row = $result->fetch_assoc()) {
            echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";  // Adjust based on your table columns
        }
        echo "</ul>";
    } else {
        echo "No results found for '" . $search_query . "'.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

<h1>Search Products</h1>

<form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term...">
    <button type="submit">Search</button>
</form>

</body>
</html>


$search_query = $_GET['search'];

// Prepare the statement
$stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ?");

// Bind the parameter
$stmt->bind_param("s", "%" . $search_query . "%"); // "s" indicates a string parameter

// Execute the query
$stmt->execute();

// Get the result
$result = $stmt->get_result();

// Output results
if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
    }
}


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the user input
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (very important for security)
$search_term = htmlspecialchars(trim($search_term));

// Example: Search in a 'products' table
// (Replace 'products', 'name', and 'description' with your actual table and column names)

// SQL query (using prepared statements - BEST PRACTICE!)
$sql = "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?";

// Prepare the statement
$stmt = $db->prepare($sql);

// Bind the parameters
$stmt->bind_param("s", "%" . $search_term . "%"); // 's' for string, '%' for wildcard
$stmt->bind_param("s", "%" . $search_term . "%");

// Execute the query
$stmt->execute();

// Get the results
$results = $stmt->get_result();

// Output the search results
if ($results->num_rows > 0) {
  echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Name</th><th>Description</th></tr>";

  while ($row = $results->fetch_assoc()) {
    echo "<tr>";
    echo "<td>" . htmlspecialchars($row['name']) . "</td>";
    echo "<td>" . htmlspecialchars($row['description']) . "</td>";
    echo "</tr>";
  }

  echo "</table>";
} else {
  echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
}

// Close the statement
$stmt->close();

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace these with your actual database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Connect to the database
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = trim($_POST["search_term"]);

  // Sanitize the search term to prevent SQL injection
  $searchTerm = $conn->real_escape_string($searchTerm);

  // Perform the search (replace with your actual query)
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = $conn->query($query);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<table border='1'>";
    while($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row["your_column_name"] . "</td>"; // Replace with your column names
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "No results found for '" . $searchTerm . "'.";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <input type="submit" value="Search">
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and a table named 'products' with a 'name' column.

// Get the search term from the user (e.g., from a form input)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Example query (replace with your actual table and column names)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql); // Replace mysqli_query with your database library's equivalent

// Check for errors
if (mysqli_error($conn)) {
    echo "<p style='color: red;'>Error: " . mysqli_error($conn) . "</p>";
    exit;
}

// Display the search results
echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search Products'>";
echo "<button type='submit'>Search</button>";
echo "</form>";

echo "<h2>Search Results:</h2>";

if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<p>" . htmlspecialchars($row['name']) . "</p>";
        // You can display other columns from the 'products' table here
    }
} else {
    echo "<p>No products found matching your search.</p>";
}

// Close the database connection (important!)
mysqli_close($conn);

?>


<?php

// ... (Database Connection - Same as before)

// Get the search term
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (still important, but less critical with prepared statements)
$searchTerm = htmlspecialchars($searchTerm);


// Prepared statement (adapt to your database library)
$stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ?"); // Adapt for mysqli

if ($stmt) {
    mysqli_stmt_bind_param($stmt, "s", $searchTerm); // 's' indicates a string
    mysqli_stmt_execute($stmt);

    // Fetch the results
    $result = mysqli_stmt_get_result($stmt);

    while ($row = mysqli_fetch_assoc($result)) {
        echo "<p>" . htmlspecialchars($row['name']) . "</p>";
    }

    mysqli_stmt_close($stmt); // Close the statement
} else {
    echo "<p>Error preparing statement.</p>";
}

// ... (Close database connection)


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Our Website</h1>

  <form method="GET" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
    // This section processes the search term and performs a basic search
    if (isset($_GET['search_term'])) {
      $search_term = htmlspecialchars($_GET['search_term']); // Sanitize input

      // Basic example:  Search within a simple array of products
      $products = [
        "Red T-Shirt" => "Description for Red T-Shirt",
        "Blue Jeans" => "Description for Blue Jeans",
        "Leather Jacket" => "Description for Leather Jacket",
        "Black Shoes" => "Description for Black Shoes"
      ];

      $results = [];

      foreach ($products as $product_name => $description) {
        if (stripos($product_name, $search_term) !== false) {  //Case-insensitive search
          $results[$product_name] = $description;
        }
      }

      if (!empty($results)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($results as $product_name => $description) {
          echo "<li><strong>$product_name</strong>: $description</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for '$search_term'.</p>";
      }
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the GET request (or from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS attacks and SQL injection
$searchTerm = htmlspecialchars($searchTerm);  // Crucial for security

// Example:  If you're searching a database table named 'products' with a 'name' column
// You'd typically use a WHERE clause in your SQL query.
// This is a simplified example; adjust the SQL to match your table structure.

// Example SQL query (adapt to your specific database)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql); // Replace mysqli_query with your database query function

// Check for errors
if (mysqli_error($conn)) {
    echo "Database error: " . mysqli_error($conn);
    exit; // Stop execution if there's an error
}

// Display the search results
echo "<form method='get' action=''>";
echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>";
echo "<button type='submit'>Search</button>";
echo "</form>";

echo "<h2>Search Results:</h2>";
if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Replace with your actual column names
    }
    echo "</ul>";
} else {
    echo "<p>No results found.</p>";
}


// Important: Close the database connection when done
mysqli_close($conn);

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust width as needed */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value.toLowerCase();
      var resultsDiv = document.getElementById("results");

      // Replace this with your actual search logic.
      // This example just demonstrates how to display some placeholder results.

      if (searchTerm === "") {
        resultsDiv.innerHTML = "";
        return;
      }

      // Example:  Let's pretend we're searching a list of fruits.
      var fruits = ["apple", "banana", "orange", "grape", "kiwi"];

      var results = fruits.filter(function(fruit) {
        return fruit.toLowerCase().includes(searchTerm);
      });

      if (results.length > 0) {
        resultsDiv.innerHTML = "Search results:<br>";
        results.forEach(function(fruit) {
          resultsDiv.innerHTML += fruit + "<br>";
        });
      } else {
        resultsDiv.innerHTML = "No results found.";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you're serving this from a web server (like Apache)
// and you have a database connection established (e.g., using mysqli)

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the form (assuming a simple HTML form)
if (isset($_GET['search'])) {
  $searchTerm = $conn->real_escape_string($_GET['search']); // Escape to prevent SQL injection
} else {
  $searchTerm = ""; // Default to empty if no search term is provided
}


// Sanitize the search term (optional, but recommended for better user experience)
$searchTerm = trim($searchTerm); // Remove leading/trailing whitespace
$searchTerm = htmlspecialchars($searchTerm);  // Convert to HTML entities to prevent XSS


// Perform the search (example: searching a 'products' table)
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Adjust 'products' and 'name' to your table and column names
$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter product name..." value="<?php echo $searchTerm; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>"; // Adjust column names as needed
    }
    echo "</ul>";
  } else {
    echo "<p>No products found matching your search.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace 'database_connection' with your actual connection object.
// For demonstration purposes, we'll use a simple hardcoded array.
$items = [
    'apple',
    'banana',
    'orange',
    'grape',
    'watermelon',
    'pear',
    'mango',
];

// If you're using a database, you'd query here instead:
// $results = mysqli_query($connection, "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'");

// Get the search term from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent SQL injection and XSS)
$search_term = htmlspecialchars(trim($search_term));

// Perform the search
$results = [];
if ($search_term) {
    foreach ($items as $item) {
        if (stripos($item, $search_term)) { // Case-insensitive search
            $results[] = $item;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search for Fruits</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($search_term); ?>" />
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($results)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($results as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($search_term); ?></p>
    <?php endif; ?>

</body>
</html>


<?php

// Define the search term (this could come from a database or an external source)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (IMPORTANT for security - prevent XSS)
$searchTerm = htmlspecialchars($searchTerm);

// You can perform more complex sanitization here, depending on your use case.
// For example, if you're searching database fields, you might want to escape
// those specific fields individually.

//  Example:  Whitelist allowed characters (more restrictive)
//  $allowedChars = "/a-zA-Z0-9\s/";  //  Allows letters, numbers, and spaces.
//  $searchTerm = preg_replace("/[^" . $allowedChars . "]/", '', $searchTerm);

//  Alternatively, use a blacklisting approach (generally less secure)
//  $searchTerm = str_replace(['<', '>', ';', '"', ']', '[', '\\', '|', '`', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '!?', ':']); $searchTerm;

//  Or, use a more robust sanitization library.


// Perform the search (replace this with your actual search logic)
$searchResults = [];

// Simple example: Search in a hardcoded array
$items = [
    'apple',
    'banana',
    'orange',
    'grape',
    'pineapple'
];

$searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive search

foreach ($items as $item) {
    if (stristr($item, $searchTerm)) { // Case-insensitive search using stristr
        $searchResults[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php endif; ?>

</body>
</html>


<?php

// Assume you have a database connection established (e.g., mysqli)
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }

// Example data (replace with your database query)
$data = [
    ["id" => 1, "name" => "Apple", "description" => "A delicious fruit."],
    ["id" => 2, "name" => "Banana", "description" => "A yellow fruit."],
    ["id" => 3, "name" => "Orange", "description" => "A citrus fruit."],
    ["id" => 4, "name" => "Grape", "description" => "Small, sweet fruit."],
];


// Get the search term from the form (or URL)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm); // Sanitize for security


// Perform the search
$searchResults = [];
if ($searchTerm) {
    foreach ($data as $row) {
        // Case-insensitive search on name and description
        if (stripos($row["name"], $searchTerm) !== false || stripos($row["description"], $searchTerm) !== false) {
            $searchResults[] = $row;
        }
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for: <?php echo $searchTerm; ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong>Name:</strong> <?php echo $result["name"]; ?><br>
                    <?php echo "Description: " . $result["description"]; ?>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Sample search data (replace with your actual data source - database, array, etc.)
$products = [
  "apple", "banana", "orange", "grape", "kiwi",
  "red apple", "green apple", "sweet orange", "sour grape", "yellow kiwi"
];

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));  // Escape characters and remove leading/trailing whitespace

// Perform the search
$searchResults = [];
if ($searchTerm) {
  foreach ($products as $product) {
    // Case-insensitive comparison
    if (stripos($product, $searchTerm)) {
      $searchResults[] = $product;
      break; // Stop after the first match for efficiency
    }
  }
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET">
    <input type="text" name="search" placeholder="Enter product name" value="<?php echo htmlspecialchars($searchTerm); ?>" />
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No products found.</p>
  <?php else: ?>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<?php
// ... (HTML form as above) ...

// Assuming you have a database connection established
// (e.g., $conn = mysqli_connect("localhost", "username", "password", "database");)

$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars(trim($searchTerm));

// SQL query (always sanitize your inputs to prevent SQL injection!)
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $query);

$searchResults = [];
if ($result) {
  while ($row = mysqli_fetch_assoc($result)) {
    $searchResults[] = htmlspecialchars($row['name']); // Assuming 'name' is the column
  }
  mysqli_free_result($result); // Free up the result set
}

// ... (rest of the HTML output) ...
?>


<?php
// ... (HTML form as above) ...

// Assuming you have a database connection established
// $conn = mysqli_connect("localhost", "username", "password", "database");

$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars(trim($searchTerm));

// Prepare the statement
$stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ?");

// Bind the parameter
mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // "s" indicates a string parameter

// Execute the statement
mysqli_stmt_execute($stmt);

// Get the result
$result = mysqli_stmt_get_result($stmt);

$searchResults = [];
while ($row = mysqli_fetch_assoc($result)) {
    $searchResults[] = htmlspecialchars($row['name']);
}

// Close the statement
mysqli_stmt_close($stmt);
?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize and escape the search term to prevent SQL injection
  $searchTerm = $db->real_escape_string($searchTerm); 

  // Perform the database query (example - adapt to your database structure)
  $query = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'";
  $result = $db->query($query);

  // Check if the query was successful
  if ($result) {
    // Display the search results
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    echo "<table border='1'>";
    echo "<tr><th>ID</th><th>Title</th><th>Content</th></tr>"; // Example table headers

    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row["id"] . "</td>";  // Adjust column names
      echo "<td>" . htmlspecialchars($row["title"]) . "</td>";
      echo "<td>" . htmlspecialchars($row["content"]) . "</td>";
      echo "</tr>";
    }

    echo "</table>";

  } else {
    echo "<p>No results found.</p>";
    echo "<p>Error: " . $db->error . "</p>";  // Helpful for debugging
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="" method="post">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box; /* Ensures padding and border are included in the width */
  }
  button {
    padding: 8px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      if (searchTerm.trim() === "") {
        // Do nothing if the search term is empty
        return;
      }

      //  Replace this with your actual search logic
      //  This example just logs the search term to the console.
      console.log("Searching for: " + searchTerm);

      // Simulate getting results (replace with your actual database/array search)
      var results = getSearchResults(searchTerm);

      displaySearchResults(results);
    }

    function getSearchResults(searchTerm) {
      // This is a placeholder function.  Replace this with your search logic.
      // This example returns dummy results based on the search term.

      var results = [];
      if (searchTerm.toLowerCase().includes("apple")) {
        results.push("Apple iPhone 14 Pro");
        results.push("Apple MacBook Pro");
      } else if (searchTerm.toLowerCase().includes("laptop")) {
        results.push("Dell XPS 15");
        results.push("HP Spectre x360");
      } else {
        results.push("Generic Laptop");
        results.push("Generic Desktop");
      }
      return results;
    }

    function displaySearchResults(results) {
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = "<h3>Search Results:</h3><ul>";
      for (var i = 0; i < results.length; i++) {
        resultsDiv.innerHTML += "<li>" + results[i] + "</li>";
      }
      resultsDiv.innerHTML += "</ul>";
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

function searchProducts($searchTerm) {
    global $db; // Access the database connection

    $query = "SELECT product_name, description FROM products WHERE product_name LIKE ? OR description LIKE ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("s", "%" . $searchTerm . "%", "%" . $searchTerm . "%"); // Use prepared statements!
    $stmt->execute();
    $result = $stmt->get_result();

    $searchResults = [];
    while ($row = $result->fetch_assoc()) {
        $searchResults[] = $row['product_name'] . " - " . $row['description'];
    }
    $stmt->close();
    return $searchResults;
}

// Usage inside the JavaScript (after the button click):
var results = searchProducts(document.getElementById("searchInput").value);
displaySearchResults(results);

?>


<?php

// This is a simplified example.  For a production environment,
// you'd want to use a more robust solution like a database query.

// Assume $search_term is a variable that holds the user's search input.
// This could be from a form submission, URL parameter, etc.

// Example:
// $search_term = $_GET['search'];
// Or:
// $search_term = $_POST['search'];

$search_term = isset($_GET['search']) ? $_GET['search'] : ''; // Get from GET request, default to empty string

// Sanitize and prepare the search term (important for security)
$search_term = htmlspecialchars(trim($search_term));

// Handle empty search term
if (empty($search_term)) {
    echo "<p>Please enter a search term.</p>";
} else {
    // Perform your search logic here.  This is a placeholder.

    // Example: Case-insensitive search through an array of items
    $items = [
        'Apple iPhone 14 Pro',
        'Samsung Galaxy S23',
        'Google Pixel 7',
        'Sony Bravia TV',
        'Sony WH-1000XM5 Headphones'
    ];

    $results = [];
    foreach ($items as $item) {
        if (stripos($item, $search_term)) { // Use stripos for case-insensitive search
            $results[] = $item;
        }
    }

    if (empty($results)) {
        echo "<p>No results found for '$search_term'.</p>";
    } else {
        echo "<h2>Search Results for: '$search_term'</h2>";
        echo "<ul>";
        foreach ($results as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
    }
}
?>

<!-- HTML Form to submit the search -->
<form method="get" action="">
    <input type="text" name="search" placeholder="Search...">
    <button type="submit">Search</button>
</form>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

//  Example:  Search in a table called 'products' with a column named 'name'

//Option 1: Simple LIKE operator (case-insensitive)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Option 2: Case-sensitive search
// $sql = "SELECT * FROM products WHERE name = '" . $searchTerm . "'";


// Execute the query
$result = mysqli_query($db, $sql);

// Check for errors
if ($result) {
  // Display the search results
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";

  echo "<h2>Search Results:</h2>";

  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<p>" . $row['name'] . "</p>"; // Assuming 'name' is the column you want to display
      // You can display other columns from the row here as needed.
    }
  } else {
    echo "<p>No results found.</p>";
  }
} else {
  echo "<p>Error executing query: " . mysqli_error($db) . "</p>";
}

// Close the database connection (important!)
mysqli_close($db);
?>


<?php
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

$db = mysqli_connect($host, $username, $password, $database);

if (!$db) {
    die("Connection failed: " . mysqli_connect_error());
}

// Your other code here, including the search bar logic.
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchBox" placeholder="Search..." onkeyup="searchFunction()">
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchBox").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // Dummy data for demonstration - replace with your data source
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Kiwi",
        "Mango",
        "Pineapple",
        "Strawberry"
      ];

      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm) > -1) {
          var resultItem = document.createElement("p");
          resultItem.textContent = data[i];
          resultItem.style.borderBottom = "1px solid #eee";
          resultItem.style.paddingBottom = "10px";
          resultItem.style.paddingTop = "10px";
          resultItem.style.fontSize = "16px";
          resultItem.onclick = function() {
            // Handle click event here - e.g., navigate to a detail page
            alert("Clicked: " + this.textContent);
          };
          resultsDiv.appendChild(resultItem);
        }
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Function to handle the search query
function performSearch($searchTerm, $table_name, $searchable_columns) {
  global $conn; // Access the database connection

  $searchTerm = "%" . $searchTerm . "%"; // Add wildcards for partial matches

  $sql = "SELECT * FROM $table_name WHERE ";

  $whereClauses = [];
  foreach ($searchable_columns as $column) {
    $whereClauses[] = "$column LIKE '$searchTerm'";
  }

  $sql .= implode(" OR ", $whereClauses);

  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    return $result;
  } else {
    return false; // No results found
  }
}


// Example usage:  This part is how you'd integrate it into a form

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Define the table name and columns to search
  $table_name = "products"; // Replace with your table name
  $searchable_columns = ["name", "description", "category"]; // Replace with your searchable columns

  // Perform the search
  $searchResults = performSearch($searchTerm, $table_name, $searchable_columns);

  if ($searchResults) {
    // Display the search results
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    echo "<table border='1'>";
    echo "<tr><th>ID</th><th>Name</th><th>Description</th><th>Category</th></tr>";

    while ($row = $searchResults->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row["id"] . "</td>";
      echo "<td>" . htmlspecialchars($row["name"]) . "</td>";
      echo "<td>" . htmlspecialchars($row["description"]) . "</td>";
      echo "<td>" . htmlspecialchars($row["category"]) . "</td>";
      echo "</tr>";
    }
    echo "</table>";

  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" />
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-family: sans-serif;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      //  **Here's where you would typically perform your search.**
      //  This is a placeholder; replace this with your actual search logic.
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }
      
      // Example: Display the search term in an alert (for demonstration)
      alert("Searching for: " + searchTerm);
      
      //  You would typically make an AJAX request to your server here
      //  to send the search term to your server-side script for processing.
      //  Example using JavaScript's fetch API:
      // fetch('/search.php?query=' + encodeURIComponent(searchTerm))
      //   .then(response => response.json())
      //   .then(data => {
      //     // Process the search results
      //   })
      //   .catch(error => console.error('Error:', error));
    }
  </script>

</body>
</html>


<?php
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    $searchTerm = $_GET["query"];
    echo "<p>You searched for: " . htmlspecialchars($searchTerm) . "</p>";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // **Important: Replace this with your actual search logic.**
      // This is just a placeholder.  You'll need to adapt it to
      // your data source and how you want to filter it.

      if (searchTerm.trim() === "") {
        return; // Don't perform search if the input is empty
      }

      // Example:  Searching through a simple array of strings
      var data = ["apple", "banana", "orange", "grape", "watermelon"];

      var results = data.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the results (replace with your desired output)
      var resultsString = "";
      if (results.length > 0) {
        resultsString = "<ul>";
        for (var i = 0; i < results.length; i++) {
          resultsString += "<li>" + results[i] + "</li>";
        }
        resultsString += "</ul>";
      } else {
        resultsString = "No results found.";
      }

      // Display the results in a designated area (e.g., a div with id "searchResults")
      document.getElementById("searchResults").innerHTML = resultsString;
    }
  </script>

  <div id="searchResults" style="margin-top: 20px;">
  </div>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Function to handle the search
function searchData($search_term, $table_name, $column_name) {
  global $db; // Access the database connection

  $sql = "SELECT * FROM " . $table_name . " WHERE " . $column_name . " LIKE '%" . $db->real_escape_string($search_term) . "%'";

  $result = $db->query($sql);

  if ($result->num_rows > 0) {
    return $result;
  } else {
    return false; // No results found
  }
}

// Get the search term from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Example usage - Replace 'products' and 'name' with your actual table and column
if (isset($_GET['search'])) {
  $results = searchData($search_term, 'products', 'name');

  if ($results) {
    echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>";
    echo "<table border='1'>";
    while ($row = $results->fetch_assoc()) {
      echo "<tr>";
      foreach ($row as $key => $value) {
        echo "<td>" . htmlspecialchars($value) . "</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Escape the search term for the database query (important!)
$searchTerm = $conn->real_escape_string($searchTerm);


//  Example:  If you're searching through a table named 'products'
//  with a column named 'name'

// Simple search query (replace with your specific needs)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($sql);

// Output the search results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $searchTerm; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adapt to your table columns
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
  ?>

</body>
</html>


<?php

// Sample data - Replace this with your actual data source
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pineapple",
    "kiwi",
];

// Function to handle the search
function searchItems($searchTerm, $items) {
    $results = [];

    // Convert search term to lowercase for case-insensitive search
    $searchTerm = strtolower($searchTerm);

    foreach ($items as $item) {
        // Convert item to lowercase for case-insensitive search
        $itemLower = strtolower($item);

        if (strpos($itemLower, $searchTerm) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}


// Get the search term from the form (or URL parameter)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchItems($search_term, $items);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_term); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)) { ?>
        <p>No results found for: <?php echo htmlspecialchars($search_term); ?></p>
    <?php } else { ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php } ?>

</body>
</html>


<?php
// Assuming you have a database connection established

// Sample database connection (replace with your credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    // Set PDO error mode to exception
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

// ... (rest of the code, including the searchItems function) ...

// Example of fetching items from a database:
$items = [];
try {
    $stmt = $conn->prepare("SELECT item_name FROM items_table");
    $stmt->execute();
    $items = $stmt->fetchAll(PDO::FETCH_COLUMN);
} catch(PDOException $e) {
    die("Database error: " . $e->getMessage());
}

// ... (rest of the search logic) ...
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and a table named 'products' with a column named 'name' for searching.

// 1. Get the search term from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";
} else {
  $searchTerm = ""; // Initialize if no form submission yet
}

// 2. Sanitize and Escape the Search Term (IMPORTANT!)
// This prevents SQL injection vulnerabilities.
$searchTerm = mysqli_real_escape_string($connection, $searchTerm);  // Replace $connection with your database connection variable
$searchTerm = htmlspecialchars($searchTerm); // Escape for HTML output to prevent XSS

// 3. Perform the Search Query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 4. Execute the Query
$result = mysqli_query($connection, $sql);

// 5. Display the Results (Example - Adapt to your needs)
if (mysqli_num_rows($result) > 0) {
  echo "<h2>Search Results for: " . $searchTerm . "</h2>";
  echo "<table border='1'>";
  echo "<thead><tr><th>ID</th><th>Name</th><th>Price</th></tr></thead>";
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<tr>";
    echo "<td>" . $row["id"] . "</td>";
    echo "<td>" . $row["name"] . "</td>";
    echo "<td>" . $row["price"] . "</td>";
    echo "</tr>";
  }
  echo "</table>";
} else {
  echo "<p>No products found matching your search term.</p>";
}

?>

<!-- HTML Form for the Search Bar -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="search_term">Search Products:</label>
  <input type="text" id="search_term" name="search_term" value="<?php echo isset($_POST['search_term']) ? htmlspecialchars($searchTerm) : ''; ?>">
  <button type="submit">Search</button>
</form>


<?php

// Assuming you have a database connection established using PDO

// 1. Get the search term from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";
} else {
  $searchTerm = "";
}

// 2. Sanitize and Escape (though less critical with prepared statements)
$searchTerm = $searchTerm; // No need for mysqli_real_escape_string

// 3. Perform the Search Query using Prepared Statements
$sql = "SELECT * FROM products WHERE name LIKE :searchTerm";
$stmt = $pdo->prepare($sql); // Assuming $pdo is your PDO object
$stmt->bindValue(':searchTerm', $searchTerm, PDO::PARAM_STR);
$stmt->execute();

// 4. Execute the Query
$result = $stmt->fetchAll(PDO::FETCH_ASSOC);

// 5. Display the Results
if ($result) {
  echo "<h2>Search Results for: " . $searchTerm . "</h2>";
  echo "<table border='1'>";
  echo "<thead><tr><th>ID</th><th>Name</th><th>Price</th></tr></thead>";
  foreach ($result as $row) {
    echo "<tr>";
    echo "<td>" . $row["id"] . "</td>";
    echo "<td>" . $row["name"] . "</td>";
    echo "<td>" . $row["price"] . "</td>";
    echo "</tr>";
  }
  echo "</table>";
} else {
  echo "<p>No products found matching your search term.</p>";
}
?>


<?php

// Assuming you're using a form to submit the search query
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo htmlspecialchars($_GET["search_term"]); ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // Simulate a database search (replace with your actual database query)
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Example: Search in a simple array
    $items = array(
      "apple",
      "banana",
      "orange",
      "grapefruit",
      "kiwi"
    );

    $results = [];
    foreach ($items as $item) {
      if (stripos($item, $search_term) !== false) { // Case-insensitive search
        $results[] = $item;
      }
    }

    if (empty($results)) {
      echo "<p>No results found for: " . $search_term . "</p>";
    } else {
      echo "<h2>Search Results for: " . $search_term . "</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    }
  }

  ?>

</body>
</html>


<?php

// Sample data (replace this with your actual data source)
$items = [
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "kiwi",
    "strawberry",
    "watermelon",
    "pineapple",
    "mango",
    "pear",
];

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

    // Sanitize the search term to prevent XSS attacks
    $searchTerm = htmlspecialchars($searchTerm);

    // Perform the search
    if ($searchTerm != "") {
        $searchResults = [];
        foreach ($items as $item) {
            if (stripos($item, $searchTerm) !== false) {  // Use stripos for case-insensitive search
                $searchResults[] = $item;
            }
        }

        // Display the results
        if (count($searchResults) > 0) {
            echo "<h2>Search Results for: " . $searchTerm . "</h2>";
            echo "<ul>";
            foreach ($searchResults as $result) {
                echo "<li>" . $result . "</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No results found for: " . $searchTerm . "</p>";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

<h1>Search Fruit</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter fruit name">
    <button type="submit">Search</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume the connection variable is $conn

// Function to handle the search query
function performSearch($searchTerm, $table_name) {
  // Sanitize the search term to prevent SQL injection
  $searchTerm = $conn->real_escape_string($searchTerm);

  // Construct the SQL query
  $sql = "SELECT * FROM $table_name WHERE ";

  // Add the WHERE clause based on whether the search term is in any column
  $columns = array();
  $column_names = array();  // Store column names for dynamic WHERE clause

  // Dynamically detect columns with searchable fields.
  $result = $conn->query("SHOW COLUMNS FROM $table_name");
  while($row = $result->fetch_assoc()) {
    if (isset($row['Type'])) { // Check if column has a type
      $columns[] = $row['Field'];
      $column_names[] = $row['Field'];
    }
  }

  // Build the WHERE clause
  $whereClause = "";
  $whereParams = [];
  foreach ($columns as $column) {
    $whereClause .= "($column) LIKE '%" . $searchTerm . "%'";
    $whereParams[] = $column;
  }

  if ($whereClause != "") {
    $sql = $sql . $whereClause;
  } else {
    //  If no columns are found, return an empty result set.
    return [];
  }

  // Execute the query
  $result = $conn->query($sql);

  // Process the results
  if ($result->num_rows > 0) {
    $rows = [];
    while ($row = $result->fetch_assoc()) {
      $rows[] = $row;
    }
    return $rows;
  } else {
    return []; // No results found
  }
}


// Example usage (assuming you have a form with a search input)
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Specify the table name
  $table_name = 'your_table_name'; // Replace with your actual table name

  // Perform the search
  $searchResults = performSearch($searchTerm, $table_name);

  // Display the results
  if (count($searchResults) > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>Column 1</th><th>Column 2</th></tr></thead>"; // Adjust column names based on your table

    foreach ($searchResults as $row) {
      echo "<tr>";
      foreach ($row as $value) {
        echo "<td>" . htmlspecialchars($value) . "</td>"; // Escape for security
      }
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
  }
}

?>

<!-- HTML Form to Submit the Search Query -->
<form method="GET" action="">
  <input type="text" name="search" placeholder="Enter search term">
  <button type="submit">Search</button>
</form>


// Example of using prepared statements for search
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  $sql = "SELECT * FROM your_table_name WHERE ";
  $params = [];

  // Dynamically build the WHERE clause and parameters
  foreach ($columns as $column) {
    $sql .= "($column) LIKE ?";
    $params[] = "%" . $searchTerm . "%";
  }

  $stmt = $conn->prepare($sql);
  $stmt->execute($params);
  $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // ... rest of the code to display the results
}


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you're using a simple database table named 'products' with a 'name' column.

// **Important:** Replace these with your actual database credentials and table/column names.

$db_host = "localhost";
$db_user = "your_db_user";
$db_pass = "your_db_password";
$db_name = "your_db_name";

// Attempt to connect to the database
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search query from the user
$search_term = isset($_GET['search']) ? trim($_GET['search']) : '';

// Sanitize the search term to prevent SQL injection
$search_term = $conn->real_escape_string($search_term); //Essential for security


// Build the SQL query (Example: simple substring search)
//  This is a basic example; adjust it based on your database design
//  and desired search functionality.
//  For more complex searches, consider using prepared statements with placeholders
//  to avoid SQL injection vulnerabilities and improve performance.
$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";


// Execute the query
$result = $conn->query($sql);


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
  <style>
    /* Basic styling for the search bar and results */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
    }

    .results {
      margin-top: 20px;
    }

    .result-item {
      border: 1px solid #eee;
      margin-bottom: 10px;
      padding: 10px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" name="search" placeholder="Search products..." value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit" onclick="location.reload()">Search</button>
  </div>

  <?php
    if ($result->num_rows > 0) {
      echo "<div class='results'>";
      while ($row = $result->fetch_assoc()) {
        echo "<div class='result-item'>";
        echo "<p>" . htmlspecialchars($row['name']) . "</p>"; //Assuming 'name' is the product name column
        // Add other product details here as needed
        echo "</div>";
      }
      echo "</div>";
    } else {
      echo "<p>No products found matching your search term.</p>";
    }
  ?>

</body>
</html>


<?php
// ... (Database connection code - same as before) ...

$search_term = isset($_GET['search']) ? trim($_GET['search']) : '';

// Sanitize the search term (optional, but good practice)
$search_term = $conn->real_escape_string($search_term);

// Prepare the statement
$stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ?");

if ($stmt) {
  // Bind the parameter
  $stmt->bind_param("s", $search_term); // "s" indicates a string parameter

  // Execute the statement
  $stmt->execute();

  // Get the result set
  $result = $stmt->get_result();

  // Free the statement
  $stmt->close();
} else {
  // Handle the error if the statement preparation fails
  echo "Error preparing statement.";
}

// ... (Result display code - same as before) ...
?>


<?php

// Simple search bar implementation in PHP

// Get the search term from the GET request (e.g., from a URL like /search.php?q=keyword)
$searchTerm = isset($_GET['q']) ? $_GET['q'] : '';

// Sanitize the search term to prevent XSS attacks
$searchTerm = htmlspecialchars($searchTerm);

// ---  Example Data (replace this with your actual data source) ---
$data = [
    ['id' => 1, 'name' => 'Apple iPhone 15'],
    ['id' => 2, 'name' => 'Samsung Galaxy S23'],
    ['id' => 3, 'name' => 'Google Pixel 8'],
    ['id' => 4, 'name' => 'OnePlus 11'],
    ['id' => 5, 'name' => 'Xiaomi 14'],
];

// --- Search Logic ---
if ($searchTerm) {
    $searchResults = [];
    foreach ($data as $item) {
        // Convert both the item's name and the search term to lowercase for case-insensitive search
        $itemName = strtolower($item['name']);
        $searchTerm = strtolower($searchTerm);

        // Check if the search term is present in the item's name
        if (strpos($itemName, $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }
} else {
    $searchResults = []; // Empty array if no search term is provided
}

// --- Output HTML ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
        <input type="text" name="q" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong><?php echo $result['name']; ?></strong> (ID: <?php echo $result['id']; ?>)
                </li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <strong><?php echo htmlspecialchars($searchTerm); ?></strong>.</p>
    <?php endif; ?>

</body>
</html>


<?php
// (Database connection code here - establish connection)

// ... (rest of the code) ...

$searchTerm = htmlspecialchars($searchTerm);

// Sanitize the search term to prevent SQL injection
$safeSearchTerm = $mysqli->real_escape_string($searchTerm);

// Build the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $safeSearchTerm . "%'";  // Use LIKE for partial matches

$result = $mysqli->query($query);

// ... (rest of the code - process the query result) ...


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px; /* Adjust as needed */
      margin: 0 auto; /* Center the container */
      font-family: sans-serif;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Ensures padding and border are included in the element's total width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
  </div>

  <script>
    // JavaScript to handle the search functionality
    document.getElementById('search-input').addEventListener('keyup', function() {
      var searchTerm = this.value.toLowerCase();

      //  Example:  Replace this with your actual data source and search logic
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry"
      ];

      var results = [];
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().includes(searchTerm)) {
          results.push(data[i]);
        }
      }

      // Display the results (replace with your desired output method)
      document.getElementById('search-results').innerHTML = ""; // Clear previous results
      if (results.length > 0) {
        var resultsHTML = "<ul>";
        for (var i = 0; i < results.length; i++) {
          resultsHTML += "<li>" + results[i] + "</li>";
        }
        resultsHTML += "</ul>";
        document.getElementById('search-results').innerHTML = resultsHTML;
      } else {
        document.getElementById('search-results').innerHTML = "No results found.";
      }
    });
  </script>

  <!--  Area to display the search results -->
  <div id="search-results"></div>

</body>
</html>


<?php

//  Assume you have a database connection established in a separate part of your script
//  $db = mysqli_connect("your_host", "your_user", "your_password", "your_database");

// ... (Code to establish the database connection)

// Example database query (replace with your actual query)
$searchTerm = $_GET['search']; // Get the search term from the URL
$query = "SELECT * FROM your_table WHERE name LIKE '%" . $searchTerm . "%'"; // Simple LIKE query

$result = mysqli_query($db, $query);

if ($result) {
  // Process the result set (similar to the JavaScript part)
  $searchResults = [];
  while ($row = mysqli_fetch_assoc($result)) {
    $searchResults[] = $row['name']; // Or whatever the relevant column is
  }

  // Display the results
  echo "<ul>";
  if (count($searchResults) > 0) {
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
  } else {
    echo "<li>No results found.</li>";
  }
  echo "</ul>";

  // Close the database connection (important!)
  mysqli_close($db);

} else {
  echo "Error running query.";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// You'll need a database connection object here.  This is a placeholder.

// Example database connection (replace with your actual connection)
$db = mysqli_connect("localhost", "your_username", "your_password", "your_database");

if (mysqli_connect_errno($db)) {
  echo "Failed to connect to MySQL: " . mysqli_connect_error() . "
";
  exit; // Stop script execution if connection fails
}


// Get the search term from the GET request
$search_term = isset($_GET['search']) ? $_GET['search'] : '';
$search_term = trim($search_term); // Remove leading/trailing whitespace


// Sanitize the search term (important for security)
$search_term = mysqli_real_escape_string($db, $search_term);


//  Construct the SQL query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'"; // Replace 'your_table_name' and 'your_column_name'


// Execute the query
$result = mysqli_query($db, $query);


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results for: <?php echo htmlspecialchars($search_term); ?></h1>

  <?php
  if (mysqli_num_rows($result) > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr>"; // Adjust column names

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      // Access the column values from the $row array
      echo "<td>" . htmlspecialchars($row['column1']) . "</td>";
      echo "<td>" . htmlspecialchars($row['column2']) . "</td>";
      echo "<td>" . htmlspecialchars($row['column3']) . "</td>";
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
  }
  ?>

  <form action="" method="get">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" size="30">
    <input type="submit" value="Search">
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent width */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-left: 10px;
    }

    .search-container {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button id="searchButton">Search</button>
  </div>

  <!-- Example of how to process the search results (replace with your actual logic) -->
  <div id="searchResults">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    // Get references to the input and button elements
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const searchResults = document.getElementById('searchResults');

    // Add an event listener to the button
    searchButton.addEventListener('click', function() {
      // Get the search term from the input field
      const searchTerm = searchTerm.value.toLowerCase(); // Convert to lowercase for case-insensitive search

      // Perform your search logic here
      // Example:  Let's just display a placeholder for now
      if (searchTerm) {
        searchResults.innerHTML = `<p>Searching for: ${searchTerm}</p>`;
      } else {
        searchResults.innerHTML = ""; // Clear the results if the search term is empty
      }

      // Clear the input field after the search
      searchInput.value = "";
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px; /* Adjust as needed */
      margin: 20px auto;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      overflow: hidden;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <script>
    // JavaScript to handle the search functionality
    const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('keyup', function() {
      // Get the search term
      const searchTerm = this.value.toLowerCase();

      //  Example:  Replace this with your actual logic to search your data
      const items = [
        { name: "Apple", description: "A red fruit" },
        { name: "Banana", description: "A yellow fruit" },
        { name: "Orange", description: "A citrus fruit" },
        { name: "Grape", description: "Small, juicy fruit" }
      ];

      // Filter the items based on the search term
      const filteredItems = items.filter(item => {
        return item.name.toLowerCase().includes(searchTerm);
      });

      // Display the filtered items (example)
      const resultsContainer = document.createElement('div');
      resultsContainer.innerHTML = '<h3>Search Results:</h3>';

      if (filteredItems.length > 0) {
        filteredItems.forEach(item => {
          const listItem = document.createElement('li');
          listItem.textContent = `${item.name}: ${item.description}`;
          resultsContainer.appendChild(listItem);
        });
      } else {
        resultsContainer.innerHTML += '<p>No results found.</p>';
      }

      // Append the results to the document (example)
      document.getElementById('results').innerHTML = ''; // Clear previous results
      document.getElementById('results').appendChild(resultsContainer);
    });
  </script>

  <div id="results"></div>

</body>
</html>


<?php
// PHP code to fetch data from your database
$data = [
  ['name' => 'Apple', 'description' => 'A red fruit'],
  ['name' => 'Banana', 'description' => 'A yellow fruit'],
  ['name' => 'Orange', 'description' => 'A citrus fruit']
];

// Encode the data as JSON
$json_data = json_encode($data);

// Output the JSON data to the HTML
echo "<script>const items = " . $json_data . "</script>";
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is a basic example and needs adaptation for your specific database structure.

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the search term from the form
    $searchTerm = htmlspecialchars($_POST["search_term"]); // Sanitize input!

    // Validate the search term (optional, but recommended)
    if (empty($searchTerm)) {
        $error = "Please enter a search term.";
    }

    // Perform the search (replace with your database query)
    $searchResults = performSearch($searchTerm);

    // Display the search results or an error message
    if (empty($error)) {
        echo "<div class='search-results'>";
        if (empty($searchResults)) {
            echo "No results found for '" . $searchTerm . "'.";
        } else {
            foreach ($searchResults as $result) {
                echo "<p>" . $result . "</p>"; // Adjust based on your database fields
            }
        }
        echo "</div>";
    } else {
        echo "<div class='search-results'>";
        echo "<p style='color:red'>" . $error . "</p>";
        echo "</div>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
    <style>
        .search-results {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>

    <h1>Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term...">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Assuming you have a form to capture the search term.  Let's call it 'search_form'.
// This HTML will likely be in a separate file or within your page.

// HTML Form for the Search Bar
?>

<form action="search.php" method="GET">
  <input type="text" name="search_term" placeholder="Search..." style="width: 300px;">
  <button type="submit">Search</button>
</form>

<?php

// This is the PHP code that handles the search.
//  - 'search.php' is the file that will process the search term.
//  - We're using the 'GET' method, meaning the search term will be added to the URL.

// Example:  Getting the search term from the URL
if (isset($_GET['search_term'])) {
  $search_term = $_GET['search_term'];

  // ***  IMPORTANT: Sanitize the search term ***
  // This is crucial to prevent security vulnerabilities like SQL injection.
  $search_term = htmlspecialchars(trim($search_term));  //Convert to HTML entity and strip whitespace

  // ***  Now, you'll need to implement your search logic here. ***
  // This is just a placeholder example.  Replace this with your actual
  // search code (e.g., database query, array search, etc.).

  echo "<p>You searched for: " . $search_term . "</p>";

  // ***  Example Search (Array Search - for demonstration only) ***
  // This is a very basic search and should NOT be used in production
  // with user-provided input directly.  It's here to illustrate the idea.
  $data = array(
    'apple',
    'banana',
    'orange',
    'grape',
    'watermelon'
  );

  if (in_array($search_term, $data)) {
    echo "<p>Found: " . $search_term . "</p>";
  } else {
    echo "<p>No results found.</p>";
  }

} else {
  // If no search term was provided, you could display a default message.
  echo "<p>Please enter a search term.</p>";
}

?>


<?php
// Assuming you have a database connection established in a separate file/function
// For example: $db = mysqli_connect("localhost", "username", "password", "database_name");

// Check if the search term is set
if (isset($_GET['search_term'])) {
  $search_term = $_GET['search_term'];

  // Sanitize the search term (VERY IMPORTANT)
  $search_term = htmlspecialchars(trim($search_term));

  // *** Replace this with your actual database search query ***
  // Example (using a hypothetical 'products' table):
  $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

  // Example using mysqli_query (replace with your DB connection method)
  // $result = mysqli_query($db, $query);
  // If using a database connection object, make sure to use the connection object instead of the global mysqli connection.
  //  For instance: $result = $db->query($query);

  // Placeholder for demonstrating the search results
  $results = []; // Create an empty array to store the results.

  if ($result) {
      // Loop through the results and display them
      while ($row = $result->fetch_assoc()) {
          $results[] = $row;
      }
  }

  // Display the search results (adjust to your needs)
  if (!empty($results)) {
    echo "<p>Search Results for: " . $search_term . "</p>";
    foreach ($results as $result) {
      echo "<p>Product Name: " . $result['name'] . ", Price: " . $result['price'] . "</p>"; // Display the product data
    }
  } else {
    echo "<p>No results found for: " . $search_term . "</p>";
  }
}
?>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and you want to search within a table called 'products'

// Get the search term from the form input
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and escape the search term to prevent SQL injection
$searchTerm = htmlspecialchars(trim($searchTerm));

// Database connection (replace with your actual connection)
// $conn = new mysqli("localhost", "username", "password", "database");
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }


// Example:  Assuming the 'products' table has columns 'id', 'name', 'description'
// The following query demonstrates basic searching.  Adjust column names and
// the WHERE clause for your specific table structure.

$sql = "SELECT id, name, description FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>ID: " . $row['id'] . ", Name: " . $row['name'] . ", Description: " . $row['description'] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No products found matching your search.</p>";
  }
  ?>

</body>
</html>


<?php

// Include the necessary library for the search functionality.
// This is a basic example using a simple array.
// For a real application, you'd typically use a database query.

// Sample data to search through (replace with your actual data source)
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A delicious fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, juicy fruit'],
];


// Function to perform the search
function searchData($data, $searchTerm) {
  $searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive search
  $results = [];

  foreach ($data as $item) {
    $name = strtolower($item['name']);
    $description = strtolower($item['description']);

    if (strpos($name, $searchTerm) !== false || strpos($description, $searchTerm) !== false) {
      $results[] = $item;
    }
  }

  return $results;
}


// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  if (isset($searchTerm)) {
    $searchResults = searchData($data, $searchTerm);

    // Display the results
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    if (empty($searchResults)) {
      echo "<p>No results found.</p>";
    } else {
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>ID: " . $result['id'] . ", Name: " . htmlspecialchars($result['name']) . ", Description: " . htmlspecialchars($result['description']) . "</li>";
      }
      echo "</ul>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search</title>
</head>
<body>

  <h1>Search Fruit Database</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter a fruit name or description">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = htmlspecialchars($_POST["searchTerm"]);

  // Sanitize the search term (important for security)
  $searchTerm = trim($searchTerm);
  $searchTerm = strip_tags($searchTerm);


  // Basic validation (optional but recommended)
  if (empty($searchTerm)) {
    $message = "Please enter a search term.";
  } else {
    // Perform your search logic here.  
    // This is just an example, you'll need to adapt it to your data.
    //  Replace this with your actual database query or file search.

    // Example:  Searching an array of products (replace with your data source)
    $products = [
      "apple", "banana", "orange", "grape", "kiwi",
      "computer", "laptop", "tablet", "smartphone"
    ];

    $foundProducts = [];
    foreach ($products as $product) {
      if (stripos($product, $searchTerm) !== false) { // Case-insensitive search
        $foundProducts[] = $product;
      }
    }

    if (empty($foundProducts)) {
      $message = "No results found for '" . $searchTerm . "'.";
    } else {
      $message = "Found " . count($foundProducts) . " results for '" . $searchTerm . "': " . implode(", ", $foundProducts);
    }
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="searchTerm" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
    if (isset($message)) {
      echo "<p>" . $message . "</p>";
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term
$searchTerm = htmlspecialchars(trim($searchTerm));

// Build the SQL query (example for a 'products' table)
$tableName = 'products'; // Change this to your table name
$columnName = 'name'; // Change this to the column you want to search in

$sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%$searchTerm%'";

// Execute the query
$result = mysqli_query($db, $sql);

// Display the search results (example)
?>

<form method="get" action="">
  <input type="text" name="search" value="<?php echo $searchTerm; ?>">
  <input type="submit" value="Search">
</form>

<?php
if (mysqli_num_rows($result) > 0) {
  echo "<ul>";
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<li>" . $row[$columnName] . "</li>"; // Adjust based on your data
  }
  echo "</ul>";
} else {
  echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// Clean up - Close the database connection (important!)
mysqli_close($db);

?>


<?php

// Function to handle the search
function searchProducts($searchTerm, $products) {
  $results = [];

  foreach ($products as $product) {
    // Convert both the search term and product name to lowercase for case-insensitive search
    $searchTermLower = strtolower($searchTerm);
    $productNameLower = strtolower($product['name']);

    // Check if the search term is present in the product name
    if (strpos($productNameLower, $searchTermLower) !== false) {
      $results[] = $product;
    }
  }

  return $results;
}

// Example Product Data (Replace with your actual data source)
$products = [
  ['id' => 1, 'name' => 'Laptop - Dell XPS 13'],
  ['id' => 2, 'name' => 'Smartphone - Samsung Galaxy S23'],
  ['id' => 3, 'name' => 'Wireless Headphones - Sony WH-1000XM5'],
  ['id' => 4, 'name' => 'Gaming Mouse - Logitech G502'],
  ['id' => 5, 'name' => 'Smartwatch - Apple Watch Series 8']
];


// Get the search term from the form (or URL)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from URL
// OR:  $searchTerm = isset($_POST['search']) ? $_POST['search'] : '';  // Get from form

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Search products..." value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No products found matching your search.</p>
  <?php else: ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li>
          <strong><?php echo htmlspecialchars($result['name']); ?></strong> - ID: <?php echo htmlspecialchars($result['id']); ?>
        </li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
      text-align: center;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="performSearch()">Search</button>
  </div>

  <script>
    function performSearch() {
      // Get the value from the input field
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here.
      // This is just a placeholder example.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // For demonstration, let's just display the search term in an alert
      alert("Searching for: " + searchTerm);

      //  Replace this with your actual search implementation.
      //  You'll likely want to:
      //   1. Send the searchTerm to a server-side script (e.g., a PHP file)
      //   2.  The PHP script would query a database or other data source
      //   3.  The PHP script would return the results to the client-side
      //      (e.g., using JSON or HTML)
      //   4.  Display the results in the HTML.


      // Example of how to display results (replace with your actual data)
      //  const results = [
      //    { title: "Product A", description: "Description of Product A" },
      //    { title: "Product B", description: "Description of Product B" }
      //  ];
      //
      //  let resultHtml = "";
      //  for (let i = 0; i < results.length; i++) {
      //    resultHtml += "<li>" + results[i].title + " - " + results[i].description + "</li>";
      //  }
      //
      //  document.getElementById("searchResults").innerHTML = resultHtml;
    }
  </script>

  <!-- Optional:  A placeholder for the search results (you'd need to populate this with data) -->
  <!-- <div id="searchResults"></div> -->

</body>
</html>


<?php

// Define variables for the search bar and the data to search through
$search_term = isset($_GET['search']) ? $_GET['search'] : '';
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A red fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'A small, juicy fruit'],
];


// Sanitize the search term to prevent XSS attacks
$search_term = htmlspecialchars(trim($search_term));


// Perform the search
$results = [];
foreach ($data as $item) {
    $found = false;
    $search_term_lower = strtolower($search_term); // Convert search term to lowercase for case-insensitive search
    $name_lower = strtolower($item['name']);
    $description_lower = strtolower($item['description']);

    if (strpos($name_lower, $search_term_lower) !== false ||
        strpos($description_lower, $search_term_lower) !== false) {
        $found = true;
    }

    if ($found) {
        $results[] = $item;
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

<h1>Search Results</h1>

<form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $search_term; ?>">
    <button type="submit">Search</button>
</form>

<?php if (empty($results)): ?>
    <p>No results found for: <?php echo $search_term; ?></p>
<?php else: ?>
    <ul>
        <?php foreach ($results as $result): ?>
            <li>
                <strong>ID:</strong> <?php echo $result['id']; ?><br>
                <strong>Name:</strong> <?php echo $result['name']; ?><br>
                <strong>Description:</strong> <?php echo $result['description']; ?>
            </li>
        <?php endforeach; ?>
    </ul>
<?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// For demonstration, we'll simulate a database query.

// Simulated database connection (replace with your actual connection)
$conn = new mysqli("localhost", "username", "password", "database_name");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Simulate data (replace with your actual database query)
$data = [
    ["id" => 1, "name" => "Apple", "description" => "A red fruit."],
    ["id" => 2, "name" => "Banana", "description" => "A yellow fruit."],
    ["id" => 3, "name" => "Orange", "description" => "A citrus fruit."],
    ["id" => 4, "name" => "Grape", "description" => "Small, sweet fruit."]
];

//  Search term (from the input field)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Escape the search term to prevent SQL injection
$searchTerm = $conn->real_escape_string($searchTerm);


// Build the SQL query
$sql = "SELECT * FROM your_table_name WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term..." value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result->num_rows > 0) {
      echo "<table border='1'>";
      while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . htmlspecialchars($row['id']) . "</td>";
        echo "<td>" . htmlspecialchars($row['name']) . "</td>";
        echo "<td>" . htmlspecialchars($row['description']) . "</td>";
        echo "</tr>";
      }
      echo "</table>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'</p>";
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and XSS attacks
$searchTerm = htmlspecialchars(trim($searchTerm)); 

//  Option 1: Simple Search (Directly in the Database) - NOT RECOMMENDED for production
/*
if ($searchTerm) {
    $query = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<form method='get' style='margin-bottom: 10px;'>";
        echo "<input type='text' name='search' placeholder='Search...'>";
        echo "<button type='submit'>Search</button>";
        echo "</form>";

        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li><a href='details.php?id=" . $row['id'] . "'>" . $row['title'] . "</a></li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No results found for '" . $searchTerm . "'</p>";
    }
}
*/


// Option 2:  More Robust Search with Prepared Statements (Recommended)
// This prevents SQL injection vulnerabilities

if ($searchTerm) {
    $query = "SELECT * FROM your_table WHERE title LIKE ? OR description LIKE ?";
    $stmt = $conn->prepare($query);

    if ($stmt) {
        $searchTermEscaped = "%" . $searchTerm . "%"; // Add wildcards for LIKE
        $stmt->bind_param("ss", $searchTermEscaped, $searchTermEscaped);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            echo "<form method='get' style='margin-bottom: 10px;'>";
            echo "<input type='text' name='search' placeholder='Search...'>";
            echo "<button type='submit'>Search</button>";
            echo "</form>";

            echo "<ul>";
            while ($row = $result->fetch_assoc()) {
                echo "<li><a href='details.php?id=" . $row['id'] . "'>" . $row['title'] . "</a></li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No results found for '" . $searchTerm . "'</p>";
        }

        $stmt->close(); // Close the statement
    } else {
        echo "<p>Error preparing statement.</p>";
    }
} else {
    // If no search term is provided, display the form
    echo "<form method='get' style='margin-bottom: 10px;'>";
    echo "<input type='text' name='search' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
}
?>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// and you have a table named 'products' with a column named 'name'
// This example uses mysqli for database interaction. Replace with your own database connection details.

// Database connection details - Replace with your actual values
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the search term is provided
if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = $_GET['search'];

    // Sanitize the search term (important for security)
    $searchTerm = $conn->real_escape_string($searchTerm);

    // Build the SQL query
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // Execute the query
    $result = $conn->query($sql);

    // Display the search results
    if ($result->num_rows > 0) {
        echo "<h2>Search Results for: " . $searchTerm . "</h2>";
        echo "<form action="" method = "post">";
        echo "<input type = 'text' name = 'search' value = 'Search...'";
        echo ">";
        echo "<input type = 'submit' value = 'Search'>";
        echo "</form>";

        echo "<table border='1'>";
        echo "<tr><th>Name</th><th>Description</th><th>Price</th></tr>"; // Adjust column headers as needed

        while($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row["name"] . "</td>";
            echo "<td>" . $row["description"] . "</td>";
            echo "<td>" . $row["price"] . "</td>";
            echo "</tr>";
        }

        echo "</table>";

    } else {
        echo "<p>No products found matching '" . $searchTerm . "'.</p>";
    }
} else {
    // Display the search bar initially
    echo "<h2>Search Products</h2>";
    echo "<form action="" method = "post">";
    echo "<input type = 'text' name = 'search' value = 'Search...'";
    echo ">";
    echo "<input type = 'submit' value = 'Search'>";
    echo "</form>";
}

$conn->close();
?>


// Using prepared statements (more secure)
$stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ?");
$stmt->bind_param("s", "%" . $searchTerm . "%");  // "s" indicates a string
$stmt->execute();
$result = $stmt->get_result();
// ... process $result ...
$stmt->close();


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 90%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Replace this with your actual search logic.
      //  This is just a placeholder to demonstrate the concept.
      //  You'll likely want to fetch data from a database or array.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      //  Example:  If you have an array of data called 'data'
      //  you could do something like this:
      //  var results = data.filter(function(item) {
      //    return item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;
      //  });

      //  For demonstration, let's just display the search term in an alert.
      alert("Searching for: " + searchTerm);
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form (using GET or POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm); //Sanitize for security

// Optional: Sanitize the search term further to prevent injection attempts.
// You can add more specific validation based on your database structure.

//  Example:  Using a whitelist of allowed characters.
//  $allowedChars = ['a-z', 'A-Z', '0-9', '-'];
//  $searchTerm = preg_replace('/[^' . implode('|', $allowedChars) . ']/', '', $searchTerm);


// Perform the search in your database
//  This is a placeholder; replace with your actual database query logic
$results = searchDatabase($searchTerm);

// Function to simulate a database search
function searchDatabase($searchTerm) {
    // This is a placeholder - replace with your actual database query
    $filteredResults = [];
    $searchTerm = htmlspecialchars($searchTerm); // Sanitize again here for the function

    // Example: Simple string search (replace with your query)
    $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

    // Simulate fetching results (replace with your database query execution)
    $results = [];
    if ($searchTerm) {
        $results = [
            ['id' => 1, 'name' => 'Product A', 'description' => 'This is Product A'],
            ['id' => 2, 'name' => 'Product B', 'description' => 'This is Product B with ' . $searchTerm . ''],
            ['id' => 3, 'name' => 'Product C', 'description' => 'Another product'],
        ];
    }

    return $results;
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="get" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $row): ?>
        <li>
          <?php echo $row['name']; ?><br>
          <?php echo htmlspecialchars($row['description']); ?>
          <br>
          ID: <?php echo $row['id']; ?>
        </li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found for <?php echo $searchTerm; ?></p>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 0 auto;
      text-align: center;
    }

    input[type="text"] {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value;

      // Perform your search logic here.  For example,
      // you could filter a list of items based on the search term.

      // Example:
      if (searchTerm.length > 0) {
        alert("You searched for: " + searchTerm);
        // Replace this alert with your actual search implementation
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form (e.g., using $_GET or $_POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = $searchTerm; // Basic sanitization - more robust sanitization is recommended

// Build the SQL query
$tableName = 'your_table_name'; // Replace with your table name
$columnName = 'your_column_name'; // Replace with the column you want to search in

$sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

// Check for errors in the query
if (mysqli_error($conn)) {
    echo "Error executing query: " . mysqli_error($conn);
    exit;
}

// Display the search results (adjust this section as needed)
if (mysqli_num_rows($result) > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr></thead>"; // Adjust column names as needed
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        foreach ($row as $value) {
            echo "<td>" . htmlspecialchars($value) . "</td>"; // Important: Use htmlspecialchars() for security
        }
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
}


// Example HTML form for the search bar
echo "<form method='GET' action='your_script.php'>  <!-- Replace 'your_script.php' with the actual script filename -->
    <label for='search'>Search:</label>
    <input type='text' id='search' name='search' value='" . htmlspecialchars($searchTerm) . "'>
    <button type='submit'>Search</button>
</form>";
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Simple search bar HTML form
?>

<form action="search.php" method="GET">
  <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
  <button type="submit">Search</button>
</form>

<?php

// Example of how to perform a search (replace with your database query)
if (isset($_GET['search_term'])) {
  $search_term = htmlspecialchars($_GET['search_term']);

  // **Replace this with your actual database query**
  // This is just a placeholder to show how you would apply the search term
  $results = performSearch($search_term); 

  // Output the results (replace with your desired output method)
  if ($results) {
    echo "<h2>Search Results:</h2>";
    echo "<p>You searched for: " . $search_term . "</p>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
}

// **Placeholder function to simulate a database search**
// Replace this with your actual database query code.
function performSearch($search_term) {
  // This is just an example; it returns dummy data
  $dummy_results = ["Product A", "Product B - Search Term", "Product C"];
  return $dummy_results;
}

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's represent the connection as $conn

// Function to handle the search query
function performSearch($conn, $search_term) {
  // Sanitize the search term - very important for security
  $search_term = mysqli_real_escape_string($conn, $search_term); 

  // Build the SQL query (adjust table and column names accordingly)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'"; 

  // Execute the query
  $result = mysqli_query($conn, $sql);

  // Process the results
  if (mysqli_num_rows($result) > 0) {
    echo "<form method='get' action='search_results.php'>
          <input type='text' name='search_term' value='" . htmlspecialchars($search_term) . "' placeholder='Search...'>
          <button type='submit'>Search</button>
          </form>";

    echo "<br>";
    echo "<table border='1'>
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>  
                <!-- Add other columns from your database -->
              </tr>
            </thead>
            <tbody>";

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      echo "<td>" . $row['id'] . "</td>";
      echo "<td>" . $row['name'] . "</td>";
      echo "<td>" . $row['description'] . "</td>";
      echo "<td>" . $row['price'] . "</td>";
      echo "</tr>";
    }

    echo "</tbody>
          </table>";

  } else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'</p>";
  }

  mysqli_free_result($result); // Free the result set
}

// Example Usage:
//  Assuming you've received the search term from a form submission

// This would be called after a form submission or other event
// that triggers the search.
// Example of receiving the search term:
// $search_term = $_POST['search_term'];  // Or $_GET['search_term']

// Call the function:
// performSearch($conn, $search_term);


// Example HTML Form (for testing)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h2>Search Products</h2>

  <form method="get" action="search_results.php">
    <input type="text" name="search_term" value="" placeholder="Search..."/>
    <button type="submit">Search</button>
  </form>

  <br>

  <!-- This is where the search results would be displayed -->
  <!-- (The code from the performSearch function would be inserted here) -->


</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : '';

  // Sanitize the search term (important for security)
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $message = "Please enter a search term.";
  } else {
    // Perform the search here (replace this with your actual search logic)
    $searchResults = performSearch($searchTerm); 
  }

} else {
  // If the form hasn't been submitted, initialize the search term to an empty string
  $searchTerm = "";
  $searchResults = [];  // Initialize the results array.
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo $searchTerm; ?>" />
    <input type="submit" value="Search" />
  </form>

  <?php if (!empty($searchResults)): ?>
    <h2>Search Results:</h2>
    <?php if (!empty($message)): ?>
        <p style="color: red;"><?php echo $message; ?></p>
    <?php endif; ?>
    <ul>
      <?php
      foreach ($searchResults as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      ?>
    </ul>
  <?php else: ?>
    <p>No results found.</p>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the search bar
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and escape the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Handle empty search term
if (empty($searchTerm)) {
  $results = []; // Return an empty array if no search term is provided
} else {
  // Build the SQL query
  $sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($conn, $sql);

  if ($result) {
    // Process the results
    $results = [];
    while ($row = mysqli_fetch_assoc($result)) {
      $results[] = $row;
    }
  } else {
    // Handle query errors
    echo "Error executing query: " . mysqli_error($conn);
  }
}

?>

<!-- HTML Form for the Search Bar -->
<form method="GET" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
  <input type="text" name="search" placeholder="Search..." value="<?php echo $searchTerm; ?>">
  <button type="submit">Search</button>
</form>

<?php

// Display the results (replace with your desired display logic)
if (!empty($results)) {
  echo "<h2>Search Results:</h2>";
  echo "<table border='1'>";
  echo "<thead><tr><th>Column 1</th><th>Column 2</th><th>...</th></tr></thead>";
  echo "<tbody>";
  foreach ($results as $row) {
    echo "<tr>";
    foreach ($row as $column => $value) {
      echo "<td>" . $value . "</td>";
    }
    echo "</tr>";
  }
  echo "</tbody>";
  echo "</table>";
} else {
  echo "<p>No results found.</p>";
}

?>


<?php

// Assume you have a database connection established here.  For example:
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }


// Function to handle the search query
function searchDatabase($search_term, $table_name, $search_columns)
{
    global $conn; // Access the global database connection

    $sql = "SELECT * FROM " . $table_name . " WHERE ";

    $where_clauses = [];
    foreach ($search_columns as $column) {
        $where_clauses[] = "`" . $column . "`" . " LIKE '%" . $search_term . "%'";
    }

    $sql .= implode(" OR ", $where_clauses);

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        return false;
    }
}

// Get the search term from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Define the table and columns to search within
$table_name = 'products'; // Example: Change this to your table name
$search_columns = ['name', 'description', 'category']; // Example: Columns to search in

// Perform the search
$results = searchDatabase($search_term, $table_name, $search_columns);


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="get">
        <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

    <?php
    if ($results) {
        echo "<pre>"; // Use <pre> for better formatting of the results
        while ($row = $results->fetch_assoc()) {
            echo print_r($row, true); // For detailed output - remove 'true' for cleaner output
            echo "<br>";
        }
        echo "</pre>";
    } else {
        echo "<p>No results found for '" . htmlspecialchars($search_term) . "'</p>";
    }
    ?>

</body>
</html>


$table_name = 'products';
$search_columns = ['name', 'description', 'category'];


<?php

// Assuming you have a data source (e.g., an array, database)
$data = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pineapple",
    "strawberry",
];

// Function to handle the search
function searchData($searchTerm, $data) {
    $results = [];

    foreach ($data as $item) {
        if (stripos($item, $searchTerm) !== false) { // Use stripos for case-insensitive search
            $results[] = $item;
        }
    }

    return $results;
}

// Get the search term from the form (if submitted) or use a default
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';  // Get from GET request or empty string

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Sample data (replace with your actual data source)
$data = [
    "apple", "banana", "cherry", "date", "elderberry", "fig", "grape"
];

// Function to handle the search
function searchData($searchTerm, $data) {
  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Convert to lowercase for case-insensitive search
  $searchTerm = strtolower($searchTerm);

  $results = [];
  foreach ($data as $item) {
    $itemLower = strtolower($item);
    if (strpos($itemLower, $searchTerm) !== false) {  // strpos returns position or false if not found
      $results[] = $item;
      break; // Stop after the first match (optional - can remove for multiple results)
    }
  }

  return $results;
}

// Get the search term from the form (or URL if needed)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search:</h1>
  <form method="GET">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <input type="submit" value="Search">
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
  <?php else: ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<?php
// Connect to your database
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Example data from a database (replace with your query)
$data = $conn->query("SELECT fruit_name FROM fruits"); // Assuming you have a 'fruits' table

// ... (rest of the code from above) ...

// Close the connection
$conn->close();
?>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = htmlspecialchars($_POST["search_term"]);

    // Sanitize the search term (important for security)
    $searchTerm = trim($searchTerm);  // Remove leading/trailing whitespace

    //  You can add more validation and sanitization here if needed,
    //  depending on your specific requirements.  For example,
    //  you might want to limit the length of the search term.

    // Do something with the search term.  This is where you'd typically
    // connect to a database or perform a search on your data.
    // For this example, we'll just display it.

    // Example:  Assume you have a database connection established
    // $db = new mysqli("localhost", "username", "password", "database_name");

    // If the database connection is successful:
    // if ($db->connect_error) {
    //     die("Connection failed: " . $db->connect_error);
    // }

    // Example query (replace with your actual search logic)
    // $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    // $result = $db->query($sql);

    // if ($result->num_rows > 0) {
    //     echo "<ul>";
    //     while($row = $result->fetch_assoc()) {
    //         echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
    //     }
    //     echo "</ul>";
    // } else {
    //     echo "No results found for '" . $searchTerm . "'";
    // }

    // Close the database connection (very important!)
    // $db->close();

    echo "You searched for: " . $searchTerm;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = htmlspecialchars($_POST["search_term"]);

    // Sanitize the search term
    $searchTerm = trim($searchTerm);

    // Example:  Using prepared statements (replace with your database details)
    $db = new mysqli("localhost", "username", "password", "database_name");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the statement
    $sql = "SELECT * FROM products WHERE name LIKE ?";
    $stmt = $db->prepare($sql);

    if ($stmt) {
        $searchTerm = "%" . $searchTerm . "%"; // Add wildcards for LIKE
        $stmt->bind_param("s", $searchTerm); // "s" indicates a string parameter

        $result = $stmt->execute();

        if ($result) {
            // Fetch the results
            $rows = $stmt->fetch_all(MYSQLI_ASSOC);

            if ($rows) {
                echo "<ul>";
                foreach ($rows as $row) {
                    echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
                }
                echo "</ul>";
            } else {
                echo "No results found for '" . $searchTerm . "'";
            }
        } else {
            echo "Error executing query: " . $db->error;
        }

        $stmt->close();
    } else {
        echo "Error preparing statement.";
    }


    $db->close();

}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Simple styling for the search bar */
    #search-bar {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <h1>Search Example</h1>

  <input type="text" id="search-bar" placeholder="Search..." onkeyup="searchFunction()">

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var input, filter, results, target, div, i, txt, divResults, divItem;

      input = document.getElementById("search-bar");
      filter = input.value.toLowerCase();
      results = document.getElementById("results");
      divResults = results.getElementsByTagName("div");
      
      for (i = 0; i < divResults.length; i++) {
          divItem = divResults[i];
          txt = divItem.textContent;
          if (txt.toLowerCase() !== "" && txt.toLowerCase().indexOf(txt.toLowerCase()) > -1) {
            divItem.style.display = "";
          } else {
            divItem.style.display = "none";
          }
        }
    }
  </script>

</body>
</html>


<?php

// Function to handle the search bar
function displaySearchForm() {
  ?>
  <form method="GET" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>
  <?php
}


// Example data (replace with your actual data source)
$data = [
  "apple",
  "banana",
  "cherry",
  "date",
  "fig",
  "grape",
  "orange",
  "pineapple",
  "strawberry"
];


// Handle the search submission
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  $search_term = isset($_GET['search_term']) ? trim($_GET['search_term']) : '';

  if (!empty($search_term)) {
    // Perform the search
    $results = [];
    foreach ($data as $item) {
      if (stripos($item, $search_term) !== false) { // Case-insensitive search
        $results[] = $item;
      }
    }

    // Display the results
    if (!empty($results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
    }
  }
}
?>


<?php
// Assuming you have a database connection established and stored in $conn

// Function to handle the search bar (same as above)
function displaySearchForm() {
    ?>
    <form method="GET" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
        <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
        <button type="submit">Search</button>
    </form>
    <?php
}

// Handle the search submission
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    $search_term = isset($_GET['search_term']) ? trim($_GET['search_term']) : '';

    if (!empty($search_term)) {
        // SQL query (use prepared statements for security)
        $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";  // Use LIKE for partial matches
        $result = mysqli_query($conn, $query);

        if ($result) {
            echo "<h2>Search Results:</h2>";
            echo "<ul>";
            while ($row = mysqli_fetch_assoc($result)) {
                echo "<li>" . htmlspecialchars($row['name']) . "</li>"; // Replace 'name' with your column
            }
            echo "</ul>";
        } else {
            echo "<p>Error querying the database.</p>";
        }
    }
}
?>


<?php

// Sample data (replace with your actual data source)
$products = [
    'apple' => ['name' => 'Red Apple', 'price' => 1.00],
    'banana' => ['name' => 'Yellow Banana', 'price' => 0.50],
    'orange' => ['name' => 'Navel Orange', 'price' => 0.75],
    'grape' => ['name' => 'Green Grape', 'price' => 1.25],
    'pear' => ['name' => 'Green Pear', 'price' => 0.90],
];

// Search term (initially empty)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = [];

if ($searchTerm) {
    foreach ($products as $key => $product) {
        // Case-insensitive search
        if (stripos($product['name'], $searchTerm)) {
            $searchResults[$key] = $product;
        }
    }
}

// Output the search form and results
echo '<form method="get" action="' . htmlspecialchars($_SERVER['PHP_SELF']) . '">';
echo 'Search: <input type="text" name="search" value="' . htmlspecialchars($searchTerm) . '" /> ';
echo '<input type="submit" value="Search" />';
echo '</form>';

if (empty($searchTerm)) {
    echo '<p>No search term entered.</p>';
} else {
    if (empty($searchResults)) {
        echo '<p>No results found for "' . htmlspecialchars($searchTerm) . '".</p>';
    } else {
        echo '<h2>Search Results for "' . htmlspecialchars($searchTerm) . '"</h2>';
        echo '<ul>';
        foreach ($searchResults as $key => $product) {
            echo '<li>' . htmlspecialchars($product['name']) . ' - $' . htmlspecialchars($product['price']) . '</li>';
        }
        echo '</ul>';
    }
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      // Get the search term from the input field
      var searchTerm = document.getElementById("searchInput").value;

      // Basic search logic (replace with your actual search implementation)
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Convert to lowercase for case-insensitive search
      searchTerm = searchTerm.toLowerCase();

      // Simulate a search (replace with your database/array search)
      var results = simulateSearch(searchTerm);

      // Display the results (replace with your results display logic)
      displaySearchResults(results);
    }


    // Simulate a search function (replace with your actual search logic)
    function simulateSearch(searchTerm) {
      // Example:  Returns some dummy results
      var results = [
        { title: "PHP Tutorial", description: "Learn about PHP programming." },
        { title: "JavaScript Basics", description: "Introduction to JavaScript." },
        { title: "Database Search Example", description: "Searching using a database." },
        { title: "Web Development", description: "Everything you need to know about web development." }
      ];

      // Filter the results based on the search term
      var filteredResults = results.filter(function(result) {
        return result.title.toLowerCase().includes(searchTerm);
      });

      return filteredResults;
    }


    function displaySearchResults(results) {
      // This is where you'd display the results (e.g., in a table, list, etc.)
      // For now, just a simple console log
      console.log("Search Results:");
      results.forEach(function(result) {
        console.log(`- ${result.title} - ${result.description}`);
      });
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established
// ... (your database connection code) ...

// Get the search term
$searchTerm = $_GET["searchInput"]; // Get from the URL (e.g., ?searchInput=keyword)

// Sanitize and escape the search term
$searchTerm = $mysqli->real_escape_string($searchTerm);

// SQL query (example, adjust to your table and column names)
$sql = "SELECT * FROM products WHERE title LIKE '%" . $searchTerm . "%'";

$result = $mysqli->query($sql);

if ($result) {
  // Process the results
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      // Display the results
      echo "<div>" . $row["title"] . " - " . $row["description"] . "</div>";
    }
  } else {
    echo "<p>No results found.</p>";
  }

  $result->free(); // Free the result set
} else {
  echo "<p>Error executing query.</p>";
}

?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the search bar (assuming it's named "search")
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS attacks
$searchTerm = htmlspecialchars($searchTerm);  // IMPORTANT for security

// Database query (example using a hypothetical 'products' table)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term..." value="<?php echo htmlspecialchars($searchTerm); ?>" style="width: 300px;">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<ul>";
        while($row = $result->fetch_assoc()) {
            echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search term.</p>";
    }
    ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      margin-bottom: 10px;
    }

    #search-input {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    #results {
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <div id="results">
    <h2>Search Results:</h2>
    <?php
    // Example data - Replace this with your actual data source
    $data = [
      "apple", "banana", "orange", "grape", "watermelon", "pineapple"
    ];

    // Get the search term from the input field
    $searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
    $searchTerm = htmlspecialchars($searchTerm); // Sanitize input

    // Perform the search
    if ($searchTerm) {
      $foundItems = [];
      foreach ($data as $item) {
        if (strpos($item, $searchTerm) !== false) {
          $foundItems[] = $item;
        }
      }

      // Display the results
      if (count($foundItems)) {
        echo "<ul>";
        foreach ($foundItems as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for: " . $searchTerm . "</p>";
      }
    } else {
      echo "<p>Enter a search term.</p>";
    }
    ?>
  </div>

</body>
</html>


<?php
// Assume you have a database connection established
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ... (rest of the code from above, but replace the $data array)

// Example using MySQLi:
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm);

$sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // Process the results
    while($row = $result->fetch_assoc()) {
        //  $row is an associative array containing the data from the database row
        //  Process $row as needed to display the results
    }
} else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
}

$conn->close();
?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    box-sizing: border-box;
  }
  button {
    padding: 8px 12px;
    background-color: #4CAF50; /* Green */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
  <button onclick="search()">Search</button>
</div>

<script>
function search() {
  var searchTerm = document.getElementById("searchInput").value;

  // Perform your search logic here.  This is just a placeholder.
  // Replace this with your actual search implementation.
  if (searchTerm.trim() === "") {
    alert("Please enter a search term.");
    return;
  }

  console.log("Searching for: " + searchTerm);
  // Example:  Let's pretend we're searching an array of names
  var names = ["Alice Smith", "Bob Johnson", "Charlie Brown", "David Lee"];

  var results = names.filter(function(name) {
    return name.toLowerCase().includes(searchTerm.toLowerCase());
  });

  // Display the results (for demonstration)
  var resultsHTML = "<h2>Search Results:</h2><ul>";
  if (results.length > 0) {
    results.forEach(function(result) {
      resultsHTML += "<li>" + result + "</li>";
    });
  } else {
    resultsHTML += "<li>No results found.</li>";
  }
  resultsHTML += "</ul>";

  // Display the results in a container (replace this with your actual output)
  document.getElementById("resultsContainer").innerHTML = resultsHTML;  //Requires a <div id="resultsContainer"></div> in your HTML
}
</script>


<div id="resultsContainer">
</div>

</body>
</html>


<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["searchTerm"];

  // Example:  This is placeholder.  Replace with your actual database query.
  $results = array(
    "Product 1",
    "Product 2",
    "Product 3",
    "Product 4"
  );

  // Simulate a database search (replace with your actual query)
  $searchResults = [];
  foreach ($results as $result) {
    if (strtolower($result) == strtolower($searchTerm)) {
      $searchResults[] = $result;
    }
  }

  echo json_encode($searchResults);  // Returns JSON for easy JavaScript consumption
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (Important for security and to prevent XSS)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape characters for database query (important for SQL injection prevention)
$searchTerm = $db->real_escape_string($searchTerm); // Assuming $db is your database object

//  Example query (adjust to your database structure and needs)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $db->query($sql);

// Check if the query was successful
if ($result) {
    // Display the results
    if ($result->num_rows > 0) {
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
            // You can display other relevant fields here
        }
        echo "</ul>";
    } else {
        echo "No results found for '" . $searchTerm . "'.";
    }
} else {
    // Handle the error
    echo "Error executing query: " . $db->error;
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)
// and a table named 'products' with a column named 'name' for search.

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term to prevent SQL injection
  $searchTerm = $db->real_escape_string($searchTerm);  // Use your database library's escape function

  // Perform the search
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Using LIKE for partial matches
  $result = $db->query($sql);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<form method='post' action=''>";
    echo "<input type='text' name='search_term' value='" . $searchTerm . "' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<h2>Search Results:</h2>";
    while ($row = $result->fetch_assoc()) {
      echo "<p>" . $row["name"] . " - " . $row["description"] . "</p>";  // Display relevant product fields
    }
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }

} else {
  // Display the search form if no form has been submitted
  echo "<form method='post' action=''>";
  echo "<input type='text' name='search_term' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

?>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and a table named 'products' with a 'name' column.

// 1. Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize and Escape the search term
$searchTerm = htmlspecialchars($searchTerm); // Important for security

// 3. Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 4. Execute the query
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Search products...">
    <button type="submit">Search</button>
  </form>

  <?php
  // Display the results
  if (mysqli_num_rows($result) > 0) {
    echo "<table border='1'>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      echo "<td>" . $row['name'] . "</td>";
      // You can add other columns here if you want to display other product information
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No products found matching your search term.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$search_term = htmlspecialchars(trim($search_term));

// Escape characters for use in SQL (important for security)
$search_term = $db->real_escape_string($search_term);

// SQL query construction
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'";

// Execute the query
$result = $db->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results for: <?php echo htmlspecialchars($search_term); ?></h1>

  <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" />
    <input type="submit" value="Search" />
  </form>

  <?php
  if ($result) {
    if (mysql_num_rows($result) > 0) {
      echo "<ul>";
      while ($row = mysql_fetch_assoc($result)) {
        echo "<li>";
        // Display the data from each row
        echo "Name: " . htmlspecialchars($row['name']) . "<br>";
        echo "Description: " . htmlspecialchars($row['description']) . "<br>";
        echo "Link: <a href='" . htmlspecialchars($row['link']) . "'>Link</a><br><br>";
        echo "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }
  } else {
    echo "<p>An error occurred while executing the query.</p>";
  }
  ?>

</body>
</html>


<?php
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

$search_term = htmlspecialchars(trim($search_term));

// Establish the database connection (using mysqli)
$mysqli = new mysqli("localhost", "username", "password", "database_name");

if ($mysqli->connect_error) {
  die("Connection failed: " . $mysqli->connect_error);
}

// SQL query construction
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'";

// Execute the query
$result = $mysqli->query($sql);

// Close the connection
$mysqli->close();
?>

... (rest of the HTML and display code) ...


<?php

// Assuming you have a database connection established and $search_term is the value entered in the search bar.

// **Important:** This code assumes you have a database connection ($db) and a table named 'products' (or whatever your data table is called).  Replace these with your actual connection details and table name.

// Example database connection (replace with your actual credentials)
$db = new mysqli("localhost", "your_username", "your_password", "your_database");

// Check connection
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}

// Get the search term from the search bar (assuming it's in a hidden input field named 'search')
$search_term = $_POST['search'];

// Sanitize the search term to prevent SQL injection
$search_term = $db->real_escape_string($search_term);

// Construct the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";  // Case-insensitive search
//  OR  Use  `LOWER()` for case-insensitive comparison
//  $query = "SELECT * FROM products WHERE name LIKE '%" . mb_strtolower($search_term, 'UTF-8') . "%'";

// Execute the query
$result = $db->query($query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result->num_rows > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      while ($row = $result->fetch_assoc()) {
        echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>"; // Replace with your column names
      }
      echo "</ul>";
    } else {
      echo "<p>No products found matching your search term.</p>";
    }
  ?>

</body>
</html>


<?php

// Sample data (replace with your actual data source)
$data = [
    "apple",
    "banana",
    "orange",
    "grape",
    "pineapple",
    "strawberry",
    "watermelon",
    "mango",
    "kiwi",
    "pear"
];


// Function to handle the search
function searchData($searchTerm, $data) {
    $results = [];

    // Convert search term to lowercase for case-insensitive search
    $searchTerm = strtolower($searchTerm);

    foreach ($data as $item) {
        // Convert item to lowercase for case-insensitive search
        $itemLower = strtolower($item);

        // Check if the search term is present in the item
        if (strpos($itemLower, $searchTerm) !== false) {
            $results[] = $item; // Or $itemLower, if you want the lowercase version
        }
    }

    return $results;
}


// Get the search term from the form (if it exists)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';


// Perform the search
$searchResults = searchData($searchTerm, $data);


// Output the search bar and results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Data</title>
</head>
<body>

    <h1>Search Data</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php
// ... (previous code) ...

// Database connection details
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Connect to the database
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to search in the database
function searchDatabase($searchTerm, $conn) {
    $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'"; // Adjust your_table and your_column
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $rows = [];
        while ($row = $result->fetch_assoc()) {
            $rows[] = $row['your_column']; // Adjust your_column to the name of the column you want to return
        }
        return $rows;
    } else {
        return [];
    }
}

// Perform the search using the database
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchResults = searchDatabase($searchTerm, $conn);


// ... (rest of the HTML output) ...

// Close the database connection
$conn->close();
?>


<?php

// Simple Search Bar Implementation in PHP

// This example demonstrates a basic search bar on a page.
// You'll need to adapt it to your specific needs, such as database queries,
// security, and styling.

// **HTML Form for the Search Bar**
?>
<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="search">Search:</label>
    <input type="text" id="search" name="search" value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>">
    <button type="submit">Search</button>
</form>

<?php

// **PHP Code to Handle the Search**

// Check if the search form has been submitted
if (isset($_GET['search'])) {
    // Get the search term
    $searchTerm = $_GET['search'];

    // Sanitize the search term to prevent XSS attacks. IMPORTANT!
    $searchTerm = htmlspecialchars($searchTerm);

    //  Example: Search in an array of strings.  Replace this with your actual data source.
    $data = array(
        "apple",
        "banana",
        "orange",
        "grapefruit",
        "strawberry"
    );

    // Convert the search term to lowercase for case-insensitive search
    $searchTerm = strtolower($searchTerm);

    // Search the data
    $searchResults = [];
    foreach ($data as $item) {
        if (strpos(strtolower($item), $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }

    // Display the search results (or a "No results found" message)
    if (empty($searchResults)) {
        echo "<p>No results found for '" . $searchTerm . "'</p>";
    } else {
        echo "<h2>Search Results for '" . $searchTerm . "'</h2>";
        echo "<ul>";
        foreach ($searchResults as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
    }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      width: 300px;
    }
    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value;
      if (searchTerm) {
        // Perform your search logic here.
        // This is a placeholder.  Replace this with your actual search implementation.

        // Example:  Display the search term in an alert
        alert("You searched for: " + searchTerm);

        // Example:  You could filter an array of data here based on the searchTerm
        // This requires that you have an array of data, e.g.,  my_data = ["apple", "banana", "orange", "grape"];
        // and then:
        // var filteredData = my_data.filter(function(item) {
        //   return item.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;
        // });
        // console.log(filteredData);
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// Let's assume a mysqli connection for this example:
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Example data (replace with your actual data source - database query)
$data = [
    ["id" => 1, "name" => "Apple", "description" => "A sweet fruit."],
    ["id" => 2, "name" => "Banana", "description" => "A yellow fruit."],
    ["id" => 3, "name" => "Orange", "description" => "A citrus fruit."],
    ["id" => 4, "name" => "Grape", "description" => "Small, juicy fruit."],
];

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = trim($searchTerm); // Remove leading/trailing whitespace

// Escape the search term to prevent SQL injection
$searchTerm = $db->real_escape_string($searchTerm);

// Perform the search
$searchResults = [];

if ($searchTerm !== "") {
    foreach ($data as $item) {
        // Case-insensitive search
        $name = strtolower($item['name']);
        $description = strtolower($item['description']);

        if (str_contains($name, $searchTerm) || str_contains($description, $searchTerm)) {
            $searchResults[] = $item;
        }
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong><?php echo htmlspecialchars($result['name']); ?></strong> - <?php echo htmlspecialchars($result['description']); ?> (ID: <?php echo htmlspecialchars($result['id']); ?>)
                </li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'GET') {
  // Get the search term from the GET request
  $searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; // Use htmlspecialchars for security
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
  <style>
    .search-container {
      margin-bottom: 20px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById('searchInput').value;
      if (searchTerm.trim() !== "") { // Check if search term is not empty after trimming whitespace
        window.location.href = "?search=" + encodeURIComponent(searchTerm);
      }
    }
  </script>

</body>
</html>


$searchTerm = htmlspecialchars($_GET['search']);

$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);


<?php

// Assuming you have a database connection established (e.g., mysqli)
// $conn = mysqli_connect("your_host", "your_user", "your_password", "your_database");
// if (!$conn) {
//     die("Connection failed: " . mysqli_connect_error());
// }

//  Simulating a database table for demonstration.  Replace with your actual database table.
//  This is just for testing when you don't have a live database connection.
$data = [
    ['id' => 1, 'name' => 'Apple'],
    ['id' => 2, 'name' => 'Banana'],
    ['id' => 3, 'name' => 'Orange'],
    ['id' => 4, 'name' => 'Grapes'],
    ['id' => 5, 'name' => 'Strawberry']
];


// Function to search for items
function searchItems($searchTerm, $data) {
    $results = [];
    foreach ($data as $item) {
        // Convert both search term and item name to lowercase for case-insensitive search
        $searchTermLower = strtolower($searchTerm);
        $itemNameLower = strtolower($item['name']);

        // Check if the search term is present in the item name
        if (strpos($itemNameLower, $searchTermLower) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}


// Get the search term from the form (or URL if using GET)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from GET request, default to empty string

// Perform the search
$searchResults = searchItems($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)) {
        echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'</p>";
    } else {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($searchResults as $result) {
            echo "<li>ID: " . $result['id'] . ", Name: " . htmlspecialchars($result['name']) . "</li>";
        }
        echo "</ul>";
    } ?>

</body>
</html>


// Example SQL Query (adapt to your database table)
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  //Use LIKE for partial matches
$result = mysqli_query($conn, $query);
$data = [];
while ($row = mysqli_fetch_assoc($result)) {
    $data[] = $row;
}


<?php

// Assuming you have a form to capture the search input
// This example uses a simple HTML form, but you can adapt it 
// to your specific form structure.

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = htmlspecialchars($_POST["search_term"]);  // Use htmlspecialchars for security

    // Sanitize and validate the search term (important!)
    $searchTerm = trim($searchTerm);  // Remove leading/trailing whitespace
    if (empty($searchTerm)) {
        $searchResults = []; // Empty result set if search term is empty
    } else {
        // Perform your database query or other search logic here
        // Replace this placeholder with your actual search code
        $searchResults = performSearch($searchTerm);
    }


} else {
    // If the form hasn't been submitted, initialize the search term
    $searchTerm = "";
    $searchResults = [];
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Form</title>
</head>
<body>

    <h1>Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" value="<?php echo htmlspecialchars($searchTerm); ?>" />
        <input type="submit" value="Search" />
    </form>

    <?php
    // Display the search results
    if (!empty($searchResults)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($searchResults as $result) {
            echo "<li>" . htmlspecialchars($result) . "</li>"; //Escape for security
        }
        echo "</ul>";
    } else {
        echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a form to collect the search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search This Website</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo htmlspecialchars($_GET["search_term"]); ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // Handle the search request
  if (isset($_GET["search_term"]) && !empty($_GET["search_term"])) {
    $search_term = $_GET["search_term"];

    //  Your search logic goes here.  Replace this placeholder with your actual code.
    //  This example just echoes the search term back for demonstration.

    echo "<p>Searching for: " . htmlspecialchars($search_term) . "</p>";

    // Example: Searching through a simple array of titles. Replace with your data source.
    $titles = ["Apple", "Banana", "Orange", "Grapefruit"];
    if (in_array($search_term, $titles)) {
      echo "<p>Found: " . htmlspecialchars($search_term) . " in the list.</p>";
    } else {
      echo "<p>No results found.</p>";
    }


  }
  ?>

</body>
</html>


<?php
// Assuming you have a database connection established in a variable called $conn

if (isset($_GET["search_term"]) && !empty($_GET["search_term"])) {
  $search_term = $_GET["search_term"];

  // Sanitize the search term (important, but doesn't replace prepared statements)
  $search_term = $mysqli->real_escape_string($search_term);

  $sql = "SELECT * FROM my_table WHERE title LIKE '%" . $search_term . "%'";  // Use LIKE for partial matches
  $result = $mysqli->query($sql);

  if ($result) {
    // Process the results
    while ($row = $result->fetch_assoc()) {
      echo "<p>" . htmlspecialchars($row["title"]) . "</p>";
    }
    $result->free();
  } else {
    echo "<p>Error querying the database.</p>";
  }
}
?>


<?php

// Basic Search Bar Implementation

// Define variables
$searchTerm = "";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = isset($_POST["search"]) ? htmlspecialchars($_POST["search"]) : ""; 

  // You can now process the $searchTerm and perform your search logic
  // For example:
  if ($searchTerm != "") {
    echo "You searched for: " . $searchTerm . "<br>";

    // Placeholder for your search functionality (replace with your actual logic)
    // Example: Searching through an array
    $items = ["apple", "banana", "orange", "grape"];
    $results = array_filter($items, function($item) use ($searchTerm) {
        return stripos($item, $searchTerm) !== false; // Case-insensitive search
    });

    if (count($results) > 0) {
      echo "Search Results:<br>";
      foreach ($results as $result) {
        echo "- " . $result . "<br>";
      }
    } else {
      echo "No results found for '" . $searchTerm . "'.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search Bar</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a form where the user enters their search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php

  // Check if the search term is submitted
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Perform your search logic here
    // Example: Search in a database, an array, or a file

    $results = search($search_term); // Call your search function

    if (empty($results)) {
      echo "<p>No results found.</p>";
    } else {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    }
  }

  ?>

  <script>
    // Optional: Add some styling to the search bar
    document.querySelector("input[type='text']").placeholder = "Search...";
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; /* Ensures padding doesn't affect width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
  </div>


  <?php
  // Example: Search through an array of data (replace with your data source)
  $data = [
    "Apple",
    "Banana",
    "Orange",
    "Grapefruit",
    "Strawberry",
    "Kiwi",
    "Pineapple",
    "Mango"
  ];


  if (isset($_GET['search_term'])) {
    $searchTerm = htmlspecialchars($_GET['search_term']); // Sanitize input

    // Filter the data based on the search term
    $searchResults = array_filter($data, function ($item) use ($searchTerm) {
      return stripos($item, $searchTerm) !== false; // Case-insensitive search
    });

    // Display the results
    if (count($searchResults) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established and named $conn

// Get the search term from the search box
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security and preventing SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));

// SQL query to search in a table (replace 'your_table' and 'your_column' with your actual table and column names)
$query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $query);

?>

<!DOCTYPE html>
<html>
<head>
<title>Search Example</title>
</head>
<body>

<h1>Search Results</h1>

<form action="" method="get">  <!-- The form is reset on each submission -->
  <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
  <input type="submit" value="Search">
</form>

<?php
if (mysqli_num_rows($result) > 0) {
  // Output data of each row
  while($row = mysqli_fetch_assoc($result)) {
    echo "<p>ID: " . $row['id'] . " - " . $row['your_column'] . "</p>";  // Adjust 'id' and 'your_column'
  }
} else {
  echo "<p>No results found.</p>";
}
?>

</body>
</html>


$stmt = mysqli_prepare($conn, "SELECT * FROM your_table WHERE your_column LIKE ?");
mysqli_stmt_bind_param($stmt, "s", $searchTerm); // "s" indicates a string parameter
mysqli_stmt_execute($stmt);
$result = mysqli_stmt_get_result($stmt);
mysqli_stmt_close($stmt);


<?php

// Assuming you have a database connection established (e.g., $db)

// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important to prevent SQL injection)
  $searchTerm = htmlspecialchars(trim($searchTerm)); 

  // Perform the search
  $searchResults = performSearch($searchTerm); 

  // Display the search results
  echo "<form method='post' action='search.php'>
          <input type='text' name='search_term' value='" . $searchTerm . "' placeholder='Search...'>
          <button type='submit'>Search</button>
        </form>";
  
  if (!empty($searchResults)) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }
} else {
  // Display the search form if no form has been submitted
  echo "<form method='post' action='search.php'>
          <input type='text' name='search_term' placeholder='Search...'>
          <button type='submit'>Search</button>
        </form>";
}


// Function to perform the search (replace with your actual database query)
function performSearch($searchTerm) {
  // Replace this with your database query logic.  This is just a placeholder.

  // Example:  Assume you have a 'products' table with a 'name' column
  // and you want to search for products where the name contains the search term.

  //  This is just a sample; adjust it to your database and table structure
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); 

  $query = "SELECT name FROM products WHERE name LIKE '%" . $db->real_escape_string($searchTerm) . "%'";
  $result = $db->query($query);

  $searchResults = array();
  if ($result) {
    while ($row = $result->fetch(PDO::FETCH_COLUMN)) {
      $searchResults[] = $row;
    }
  }

  return $searchResults;
}

?>


<?php

// Sample data (replace with your actual data source)
$products = [
  "apple", "banana", "orange", "grape", "kiwi",
  "red apple", "green apple", "apple pie", "banana bread"
];

// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = trim($_POST["search_term"]);

  if (!empty($searchTerm)) {
    // Perform the search
    $searchResults = [];
    foreach ($products as $product) {
      if (stripos($product, $searchTerm) !== false) { // Case-insensitive search
        $searchResults[] = $product;
      }
    }

    // Display the results
    if (empty($searchResults)) {
      echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
    } else {
      echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      echo "</ul>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter product name">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Simple search bar implementation

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = isset($_POST["search_term"]) ? htmlspecialchars($_POST["search_term"]) : '';

    // Perform the search (replace with your actual search logic)
    if ($searchTerm) {
        $results = searchData($searchTerm); // Call your search function

        // Display the results
        echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
        if (empty($results)) {
            echo "<p>No results found.</p>";
        } else {
            echo "<ul>";
            foreach ($results as $result) {
                echo "<li>" . $result . "</li>";
            }
            echo "</ul>";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search Bar</title>
</head>
<body>

    <h1>Search</h1>

    <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php
// Assuming you have a database connection established ($db)

function searchData($searchTerm) {
  global $db; // Assuming $db is your database connection

  $query = "SELECT * FROM my_table WHERE title LIKE '%" . $searchTerm . "%'";
  $result = $db->query($query);

  $results = array();
  while ($row = $result->fetch_assoc()) {
    $results[] = $row['title']; // Or however your data is structured
  }
  return $results;
}
?>


<?php
// Example using prepared statements to prevent SQL injection

function searchData($searchTerm) {
  global $db;

  // Construct the prepared statement
  $stmt = $db->prepare("SELECT * FROM my_table WHERE title LIKE ?");
  $searchTermEscaped = $db->real_escape_string($searchTerm); // Escape the search term

  // Bind the parameters
  $stmt->bind_param("s", $searchTermEscaped);

  // Execute the statement
  $stmt->execute();

  // Get the results
  $results = array();
  while ($row = $stmt->fetch_assoc()) {
    $results[] = $row['title'];
  }

  // Close the statement
  $stmt->close();

  return $results;
}
?>


<?php

// Assuming you have a form to submit the search query

?>

<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
</head>
<body>

<h1>Search</h1>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
  <button type="submit">Search</button>
</form>

<?php

// Example:  Echo the search term if it exists (for demonstration)
if (isset($_GET['search_term'])) {
  echo "<p>You searched for: " . htmlspecialchars($_GET['search_term']) . "</p>";
}

// **IMPORTANT:  Replace this with your actual database query and logic**
// This is just a placeholder to show how to use the search term.

// Example:  (For illustrative purposes, assuming a simple database)
/*
$search_term = isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : '';

// Replace this with your database connection and query.
//  This is just a simplified example.

$results = [];
// Example data (replace with your database query)
$products = [
  "Red T-shirt",
  "Blue Jeans",
  "Black Shoes",
  "Green Hat"
];
foreach ($products as $product) {
    if (strpos($product, $search_term) !== false) {
        $results[] = $product;
    }
}

if (count($results)) {
    echo "<p>Search Results:</p>";
    echo "<ul>";
    foreach ($results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
}
*/

?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Include padding and border in the element's total width */
    }

    button {
      padding: 10px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 5px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const resultsDiv = document.getElementById('results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim(); // Get the value and remove leading/trailing whitespace

      if (searchTerm) { // Only perform the search if there is a search term
        // Simulate a search (replace with your actual search logic)
        const data = [
          "apple", "banana", "orange", "grape", "pear", "kiwi",
          "strawberry", "blueberry", "raspberry", "mango", "pineapple"
        ];

        const filteredData = data.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));

        // Display the results
        resultsDiv.innerHTML = ''; // Clear previous results

        if (filteredData.length > 0) {
          filteredData.forEach(item => {
            const resultItem = document.createElement('p');
            resultItem.textContent = item;
            resultsDiv.appendChild(resultItem);
          });
        } else {
          resultsDiv.textContent = 'No results found.';
        }
      } else {
        alert('Please enter a search term.');
      }
    });

    // Optional: Handle Enter key press
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchButton.click(); // Trigger the search button
      }
    });
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established ($conn)

// Get search term from request
$searchTerm = $_GET['search'];

// Sanitize the search term
$searchTerm = htmlspecialchars($searchTerm); // Prevent XSS

// Construct and execute the SQL query
$sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
$result = mysqli_query($conn, $sql);

// Process the results
if ($result) {
    echo '<ul>';
    while ($row = mysqli_fetch_assoc($result)) {
        echo '<li>' . $row['your_column_name'] . '</li>';  // Adjust column names
    }
    echo '</ul>';
} else {
    echo "Error executing query.";
}
?>


<?php

// Assuming you have a database connection established and $db is your database connection object.

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Define the table name you want to search
$tableName = 'your_table_name';  // Replace with your actual table name

// Build the SQL query
$sql = "SELECT * FROM $tableName WHERE ";

// Add the WHERE clause based on whether the search term is empty or not
if (!empty($searchTerm)) {
    $sql .= "`name` LIKE '%" . $searchTerm . "%'"; // Replace 'name' with the actual column name you want to search
} else {
    // If the search term is empty, you might want to show all records or a message
    echo "<p>Enter a search term.</p>";
    exit; // Stop execution
}


// Execute the query
$result = mysqli_query($db, $sql);

// Check for errors
if (mysqli_errno($db)) {
    echo "Error running query: " . mysqli_error($db);
    exit;
}

// Display the results
echo "<form method='get' action=''>";
echo "<input type='text' name='search' value='" . $searchTerm . "'><input type='submit' value='Search'>";
echo "</form>";

echo "<h2>Search Results:</h2>";

if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adjust column names accordingly
        // Add other relevant fields here
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// Close the database connection (important!)
mysqli_close($db);

?>


// Example of using prepared statements (requires mysqli extension)
$sql = "SELECT * FROM $tableName WHERE LOWER(`name`) LIKE ?";
$search = strtolower($searchTerm); // Make sure search term is lowercase
$stmt = mysqli_stmt_prepare($db, $sql);
if ($stmt) {
    if (mysqli_stmt_bind_param($stmt, 's', $search)) {
        $result = mysqli_stmt_execute($stmt);
        while ($row = mysqli_fetch_assoc($result)) {
            // ... display results
        }
        mysqli_stmt_close($stmt);
    } else {
        // Handle errors in mysqli_stmt_bind_param
        echo "Error binding parameters: " . mysqli_error($db);
    }
}


<?php

// Assuming you have a database connection established (e.g., $db_connection)

// Get the search term from the form submission
$searchTerm = isset($_POST['search_term']) ? $_POST['search_term'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Define the table name where you want to search
$table_name = 'products'; // Replace with your actual table name

// Escape the search term to prevent SQL injection
$escapedSearchTerm = mysqli_real_escape_string($db_connection, $searchTerm);

// Build the SQL query
$query = "SELECT * FROM $table_name WHERE name LIKE '%" . $escapedSearchTerm . "%'"; 

// Execute the query
$result = mysqli_query($db_connection, $query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result) {
      if (mysqli_num_rows($result) > 0) {
        echo "<h2>Search Results:</h2>";
        while ($row = mysqli_fetch_assoc($result)) {
          echo "<h3>" . $row['name'] . "</h3>";
          echo "<p>" . $row['description'] . "</p>";  // Adjust based on your table fields
          // Add other fields to display as needed
          echo "<hr>";
        }
      } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
      }
    } else {
      echo "<p>Error: " . mysqli_error($db_connection) . "</p>";
    }
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here.  This is just a placeholder example.
      // You'd replace this with your actual search code (e.g., searching a database,
      // an array, etc.)

      if (searchTerm) {
        // Example: Display the search term in an alert
        alert("You searched for: " + searchTerm);

        // Example:  Simulated search results (replace with your actual data)
        var results = ["Result 1 for " + searchTerm, "Result 2 for " + searchTerm, "Result 3 for " + searchTerm];

        // Display the results in an alert (for demo purposes)
        for (var i = 0; i < results.length; i++) {
          alert(results[i]);
        }
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established in your PHP code
$searchTerm = $_GET['search']; // Get the search term from the URL

if ($searchTerm) {
    $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($connection, $query);

    if ($result) {
        // Process the search results here
        while ($row = mysqli_fetch_assoc($result)) {
            echo "Product Name: " . $row['name'] . "<br>";
            echo "Price: " . $row['price'] . "<br>";
            echo "<br>";
        }
        mysqli_free_result($result); // Free the result set
    } else {
        echo "Error: " . mysqli_error($connection);
    }
} else {
    echo "Please enter a search term.";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic Styling - Customize as needed */
    .search-container {
      margin: 20px;
      padding: 10px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter your search term...">
    <button onclick="searchItems()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function searchItems() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResultsDiv = document.getElementById("searchResults");

      // Clear previous results
      searchResultsDiv.innerHTML = "";

      if (searchTerm.trim() === "") {
        return; // Don't perform the search if the input is empty
      }

      // *** Replace this with your actual data fetching logic ***
      // This is just a placeholder for demonstration.  You'll need to
      // adapt this part to retrieve data from a database, API, or other source.

      var data = [
        { title: "Apple iPhone 14", description: "The latest iPhone..." },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone..." },
        { title: "Google Pixel 7", description: "Google's flagship phone..." },
        { title: "Amazon Echo Dot (5th Gen)", description: "Smart speaker..." },
        { title: "Sony WH-1000XM5 Headphones", description: "Noise-canceling headphones..." }
      ];

      // Filter data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
               item.description.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item, index) {
          var resultDiv = document.createElement("div");
          resultDiv.innerHTML = "<strong>" + item.title + "</strong><br>" + item.description;
          resultDiv.style.marginBottom = "10px";  // Add some spacing
          resultDiv.onclick = function() {
            // Handle click event (e.g., display more details)
            alert("Clicked on: " + item.title);
          };
          searchResultsDiv.appendChild(resultDiv);
        });
      } else {
        var noResultsDiv = document.createElement("div");
        noResultsDiv.innerHTML = "<p>No results found for '" + searchTerm + "'</p>";
        searchResultsDiv.appendChild(noResultsDiv);
      }
    }


    // Add an event listener for the input field to trigger the search on each keypress
    document.getElementById("searchInput").addEventListener("keyup", function(event) {
      searchItems();
    });
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., mysqli)
// and you have a database table named 'products' with columns 'title' and 'description'

$searchTerm = $_GET['search']; // Get the search term from the URL

// Example using mysqli (replace with your actual database connection)
$conn = new mysqli("localhost", "username", "password", "database_name");
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Construct the SQL query
$sql = "SELECT title, description FROM products WHERE title LIKE '%" . $conn->real_escape_string($searchTerm) . "%' OR description LIKE '%" . $conn->real_escape_string($searchTerm) . "%'";

$result = $conn->query($sql);

$data = [];
if ($result->num_rows > 0) {
  while($row = $result->fetch_assoc()) {
    $data[] = $row;
  }
}

$conn->close();

// Pass the data to the HTML file
echo "<script>
  var data = " . json_encode($data) . ";
</script>";
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic Styling - Customize as needed */
    .search-container {
      margin: 20px;
      padding: 10px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
    }

    input[type=\"text\"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class=\"search-container\">
    <h2>Search:</h2>
    <input type=\"text\" id=\"searchInput\" placeholder=\"Enter your search term...\">
    <button onclick=\"searchItems()\">Search</button>
  </div>

  <div id=\"searchResults\">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function searchItems() {
      var searchTerm = document.getElementById('searchInput').value;
      var searchResultsDiv = document.getElementById('searchResults');

      searchResultsDiv.innerHTML = '';

      if (searchTerm.trim() === '') {
        return;
      }

      // Filter data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
               item.description.toLowerCase().includes(searchTerm.toLowerCase());
      });

      if (filteredData.length > 0) {
        filteredData.forEach(function(item, index) {
          var resultDiv = document.createElement('div');
          resultDiv.innerHTML = '<strong>' + item.title + '</strong><br>' + item.description;
          resultDiv.style.marginBottom = '10px';
          resultDiv.onclick = function() {
            alert('Clicked on: ' + item.title);
          };
          searchResultsDiv.appendChild(resultDiv);
        });
      } else {
        var noResultsDiv = document.createElement('div');
        noResultsDiv.innerHTML = '<p>No results found for \'' + searchTerm + '\'</p>';
        searchResultsDiv.appendChild(noResultsDiv);
      }
    }

    document.getElementById('searchInput').addEventListener('keyup', function(event) {
      searchItems();
    });
</script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)
// and you're using a database that supports SQL LIKE operator

// Get the search term from the request
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (VERY IMPORTANT to prevent SQL injection)
//  - Escape single quotes ('), double quotes ("), and backslashes (\)
//  - Consider using prepared statements for added security
$safe_search_term = $db->real_escape_string($search_term);  // Assuming $db is your database object

// Build the SQL query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $safe_search_term . "%'";
// Replace 'your_table_name' and 'your_column_name' with your actual table and column names
// The '%' wildcard allows partial matches

// Execute the query
$result = $db->query($query);

// Check if the query was successful
if ($result) {
    // Display the results
    echo "<form action=\"search.php\" method=\"get\">
            <input type=\"text\" name=\"search\" placeholder=\"Search...\" value=\"" . htmlspecialchars($search_term) . "\">
            <button type=\"submit\">Search</button>
          </form>";

    echo "<br>";
    echo "<table border=\"1\">
            <thead>
              <tr>
                <th>Column 1</th>
                <th>Column 2</th>
                <th>...</th>
              </tr>
            </thead>
            <tbody>";

    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        foreach ($row as $column_name => $value) {
            echo "<td>" . htmlspecialchars($value) . "</td>";  //Escape output to prevent XSS
        }
        echo "</tr>";
    }

    echo "</tbody>
          </table>";

} else {
    echo "No results found for '" . htmlspecialchars($search_term) . "'."; //Escape output
}

?>


<?php

// Assuming you have a search form in your HTML like this:
// <form method="GET" action="search.php">
//   <input type="text" name="search_term" placeholder="Search...">
//   <button type="submit">Search</button>
// </form>

// This PHP code handles the search submission.
$search_term = isset($_GET['search_term']) ? $_GET['search_term'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$search_term = htmlspecialchars($search_term);

//  Basic search logic.  Replace this with your actual search implementation.
// This example just checks if the search term is empty or contains a specific word.

if (!empty($search_term)) {
  if (strpos($search_term, 'example') !== false) {
    echo "You searched for: " . $search_term . "<br>";
    echo "<p>Found matches related to 'example'.</p>";
  } else {
    echo "You searched for: " . $search_term . "<br>";
    echo "<p>No results found for '" . $search_term . "'.</p>";
  }
} else {
  echo "<p>Enter your search term above.</p>";
}


?>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// Replace these with your actual database connection details
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

// Function to sanitize the search term
function sanitizeSearchTerm($term) {
  $term = trim($term);
  $term = stripslashes($term);
  $term = htmlspecialchars($term, ENT_QUOTES, 'UTF-8');
  return $term;
}

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = sanitizeSearchTerm($_POST["search_term"]);

  // Perform the database query
  $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";  // Replace your_table and your_column

  // Assuming you're using mysqli
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Display the search results (example)
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      foreach ($row as $key => $value) {
        echo "<td>" . $value . "</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }

  $conn->close();
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you have a table named 'products' with a column 'name'

// 1. Handle the Search Form Submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = trim($_POST["search_term"]);

  // Sanitize the search term to prevent SQL injection
  $searchTerm = mysqli_real_escape_string($conn, $searchTerm);

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    // Do nothing or display an error message (e.g., "Please enter a search term")
    echo "<p>Please enter a search term.</p>";
  } else {
    // 2.  Construct the SQL Query
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // 3. Execute the Query
    $result = mysqli_query($conn, $sql);

    // 4. Display the Results
    if (mysqli_num_rows($result) > 0) {
      echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
      echo "<table border='1'>";
      echo "<tr><th>ID</th><th>Name</th><th>Description</th></tr>"; // Example columns
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        echo "<td>" . $row["id"] . "</td>"; // Assuming 'id' is a column in your table
        echo "<td>" . htmlspecialchars($row["name"]) . "</td>";
        echo "<td>" . htmlspecialchars($row["description"]) . "</td>"; // Adjust based on your table structure
        echo "</tr>";
      }
      echo "</table>";
    } else {
      echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Replace with your actual database credentials
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// ... (rest of the code from above) ...
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling - adjust to your needs */
    #search-container {
      margin: 20px;
      width: 300px;
    }

    #search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results">
  </ul>

  <script>
    // Get references to the HTML elements
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    // Add an event listener to the search button
    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();

      // If the search term is empty, don't do anything
      if (searchTerm === "") {
        return;
      }

      //  Replace this with your actual search logic.
      //  This is just a placeholder example.
      const data = [
        { title: "Apple Pie Recipe", description: "A delicious apple pie recipe." },
        { title: "Chocolate Cake Recipe", description: "A rich chocolate cake recipe." },
        { title: "Strawberry Shortcake", description: "Classic strawberry shortcake recipe." },
        { title: "Banana Bread", description: "Easy banana bread recipe." }
      ];

      // Filter the data based on the search term
      const filteredData = data.filter(item => {
        return item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
               item.description.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the search results
      searchResults.innerHTML = ""; // Clear previous results
      if (filteredData.length > 0) {
        filteredData.forEach(item => {
          const listItem = document.createElement('li');
          listItem.textContent = `${item.title} - ${item.description}`;
          searchResults.appendChild(listItem);
        });
      } else {
        searchResults.innerHTML = "<p>No results found.</p>";
      }
    });

    // Add a keypress listener to the input field (for immediate search)
    searchInput.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            searchButton.click(); // Simulate a click
        }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established
// Replace 'your_database_connection' with your actual connection object

// Example connection (replace with your own)
// $db = new mysqli("localhost", "username", "password", "your_database");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Get the search term from the input field
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$search_term = htmlspecialchars(trim($search_term));


// SQL query construction (example - adjust to your database schema)
$table_name = 'your_table_name'; // Replace with your table name
$column_to_search = 'your_column_name'; // Replace with the column you want to search in
$sql = "SELECT * FROM $table_name WHERE $column_to_search LIKE '%$search_term%'";


// Execute the query
// $result = $db->query($sql);

// Example using mysqli_result (replace with your database's result object)
// if ($result) {
//     if ($result->num_rows > 0) {
//         // Output the results
//         echo '<ul>';
//         while($row = $result->fetch_assoc()) {
//           echo '<li>' . htmlspecialchars($row['your_column_name']) . '</li>'; // Replace 'your_column_name'
//         }
//         echo '</ul>';
//     } else {
//         echo "No results found.";
//     }
// } else {
//     echo "Query failed: " . $db->error;
// }



// ---  Simple HTML Output for the Search Bar ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>


  <?php
    //  Optional - display results here.  You would replace the above form with
    //  a database query and the following code to display results.
    //  The code above is just a placeholder.  Remember to adapt to your needs.
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin: 20px;
  }

  #search-input {
    width: 300px;
    padding: 10px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Important to include padding and border in width */
  }

  #results {
    margin-top: 20px;
  }
</style>
</head>
<body>

<div class="search-container">
  <h1>Simple Search Bar</h1>
  <input type="text" id="search-input" placeholder="Enter search term...">
  <button onclick="search()">Search</button>
</div>

<div id="results">
  <?php
    // Example data (replace with your database or data source)
    $items = [
      "apple", "banana", "cherry", "date", "elderberry", "fig", "grape"
    ];

    // Get the search term from the input field
    $searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

    // Perform the search
    if ($searchTerm) {
      $searchResults = [];
      foreach ($items as $item) {
        if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
          $searchResults[] = $item;
        }
      }

      // Display the results
      if (count($searchResults) > 0) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($searchResults as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
      }
    }
  ?>
</div>

<script>
  // Optional:  Add a button click to trigger the search.  Useful if you don't want to use the button.
  // document.getElementById('search-button').addEventListener('click', function() {
  //   document.getElementById('search-form').submit();
  // });
</script>

</body>
</html>


<?php
// ... (HTML and CSS) ...

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Establish database connection
$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ... (Get search term from $_GET['search']) ...

// Construct the SQL query (use prepared statements to prevent SQL injection)
$searchTerm = $_GET['search'];
$sql = "SELECT * FROM items WHERE name LIKE '%" . $conn->real_escape_string($searchTerm) . "%'";

// Execute the query
$result = $conn->query($sql);

// ... (Process the results and display them) ...

// Close the database connection
$conn->close();
?>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }

  input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    box-sizing: border-box;
  }

  button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value;
      var resultsDiv = document.getElementById("results");

      // Example:  Let's say we're searching through a simple array of data
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry",
        "Pineapple",
        "Mango"
      ];

      // Clean the search term (remove whitespace)
      searchTerm = searchTerm.trim();

      // Filter the data based on the search term
      var filteredData = data.filter(function(item) {
        return item.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
      });

      // Display the results
      if (filteredData.length > 0) {
        resultsDiv.innerHTML = "<b>Search Results:</b><br>";
        filteredData.forEach(function(item) {
          resultsDiv.innerHTML += item + "<br>";
        });
      } else {
        resultsDiv.innerHTML = "No results found for '" + searchTerm + "'.";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you have a table named 'products' with a column 'name'
// You need to replace these placeholders with your actual connection and table details.

// Database connection details (replace with your own)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get search term from the form (assuming a simple form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Escape the search term to prevent SQL injection
$searchTerm = $conn->real_escape_string($searchTerm);


// Prepare the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter product name..." value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Assuming 'description' column
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search.</p>";
    }
    ?>

</body>
</html>


<?php

// Include your database connection file (adjust path as needed)
require_once 'db_connection.php';

// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// SQL query to search in the specified table (replace 'your_table' and 'column_to_search' with your actual table and column names)
$query = "SELECT * FROM your_table WHERE column_to_search LIKE '%$searchTerm%'";

// Execute the query
$result = mysqli_query($connection, $query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" value="<?php echo $searchTerm; ?>" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php
    // Display the search results
    if (mysqli_num_rows($result) > 0) {
        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . htmlspecialchars($row['column_to_search']) . "</li>"; // Replace 'column_to_search' with the actual column name
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }

    // Close the database connection
    mysqli_close($connection);
    ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Ensures padding and border are included in the element's total width */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      // Clear previous results
      resultsDiv.innerHTML = "";

      if (searchTerm.trim() === "") {
        return; // Don't do anything if the search term is empty
      }

      // Example search logic (replace with your actual search logic)
      var data = [
        { title: "Apple Pie", description: "A delicious apple pie recipe." },
        { title: "Banana Bread", description: "Homemade banana bread recipe." },
        { title: "Chocolate Cake", description: "Rich and decadent chocolate cake." },
        { title: "Strawberry Shortcake", description: "Classic strawberry shortcake recipe." }
      ];

      data.forEach(function(item) {
        if (item.title.toLowerCase().includes(searchTerm.toLowerCase())) {
          var listItem = document.createElement("div");
          listItem.innerHTML = `<strong>${item.title}</strong><br>${item.description}`;
          resultsDiv.appendChild(listItem);
        }
      });
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin-bottom: 10px;
    }

    .search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
  </div>

  <?php
  // Example data (replace with your actual data source)
  $items = [
    ['id' => 1, 'name' => 'Apple'],
    ['id' => 2, 'name' => 'Banana'],
    ['id' => 3, 'name' => 'Orange'],
    ['id' => 4, 'name' => 'Grape'],
  ];

  if (isset($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input

    // Perform the search
    $searchResults = [];
    foreach ($items as $item) {
      $itemTitle = strtolower($item['name']); // Case-insensitive search
      $searchTermLower = strtolower($searchTerm);

      if (strpos($itemTitle, $searchTermLower) !== false) {
        $searchResults[] = $item;
      }
    }
  }
  ?>

  <?php if (isset($searchResults)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li>
          <strong><?php echo $result['name']; ?></strong> (ID: <?php echo $result['id']; ?>)
        </li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found.</p>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Function to handle the search query
function search_data($conn, $search_term) {
  // Sanitize the input to prevent SQL injection
  $search_term = $conn->real_escape_string($search_term); 

  // Construct the SQL query
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'";

  // Execute the query
  $result = $conn->query($query);

  // Prepare the results array
  $results = array();
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      $results[] = $row;
    }
  }

  return $results;
}

// Get the search term from the form (assuming a form with an input field named 'search')
if (isset($_POST['search']) && !empty($_POST['search'])) {
  $search_term = $_POST['search'];

  // Call the search function
  $results = search_data($conn, $search_term);

  // Output the results (e.g., display in a table)
  echo "<table border='1'>";
  echo "<thead><tr><th>" . "Column 1 Header" . "</th><th>" . "Column 2 Header" . "</th></tr></thead>"; // Replace with your actual column names
  echo "<tbody>";
  foreach ($results as $row) {
    echo "<tr>";
    foreach ($row as $value) {
      echo "<td>" . $value . "</td>";
    }
    echo "</tr>";
  }
  echo "</tbody></table>";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="post" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)

// Let's assume we're using mysqli for this example.
// Replace with your actual database connection details.
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm); // Sanitize input to prevent XSS

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 20px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <input type="text" name="search" placeholder="Search..." value="<?php echo $searchTerm; ?>">
      <button type="submit">Search</button>
    </form>
  </div>

  <?php
  // Example database query (replace with your actual query)
  if ($searchTerm) {
    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
      // Output each row of the result
      while($row = $result->fetch_assoc()) {
        echo "<div>";
        echo "<strong>" . $row["your_column"] . "</strong> - " . $row["another_column"] . "<br>";
        echo "</div>";
      }
    } else {
      echo "<p>No results found.</p>";
    }
  }
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      width: 300px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search:</h1>
    <input type="text" id="searchInput" placeholder="Enter search term...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // **IMPORTANT:  Replace this with your actual search logic**
      // This is a placeholder example.
      var results = performSearch(searchTerm);

      // Display the results (replace this with your desired display method)
      displaySearchResults(results);
    }

    // Placeholder function - Replace with your search implementation
    function performSearch(searchTerm) {
      // Example:  Return some dummy data based on the search term
      var results = [
        {title: "Apple Pie Recipe"},
        {title: "Banana Bread Recipe"},
        {title: "Chocolate Cake Recipe"}
      ];

      // Filter the results based on the search term
      var filteredResults = results.filter(function(item) {
        return item.title.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
      });

      return filteredResults;
    }

    function displaySearchResults(results) {
      // Clear any previous results
      document.getElementById("searchResults").innerHTML = "";

      // Display the results
      if (results.length > 0) {
        var resultsContainer = document.getElementById("searchResults");
        resultsContainer.innerHTML = "<h3>Search Results:</h3><ul>";
        results.forEach(function(item) {
          resultsContainer.innerHTML += "<li>" + item.title + "</li>";
        });
        resultsContainer.innerHTML += "</ul>";
      } else {
        resultsContainer.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

  <!--  Container for results (optional, but recommended) -->
  <div id="searchResults"></div>

</body>
</html>


<?php
// Assume you have a database connection established

function performSearch($searchTerm) {
  // Example: Search a simple array of products
  $products = [
    ['name' => 'Apple', 'description' => 'Red delicious apple'],
    ['name' => 'Banana', 'description' => 'Yellow banana fruit'],
    ['name' => 'Chocolate Cake', 'description' => 'Rich chocolate dessert']
  ];

  $results = [];
  for ($i = 0; $i < count($products); $i++) {
    $product = $products[$i];
    if (strToLower($product['name']) . ' ' . strToLower($product['description']) . ' ' . strToLower($searchTerm) !== "") {
      $results[] = $product;
    }
  }
  return $results;
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (IMPORTANT for security)
$search_term = htmlspecialchars(trim($search_term));

//  You'll need to replace this with your actual database query logic
//  This is just a placeholder example
function searchDatabase($search_term, $table_name) {
  // Replace this with your database connection and query logic
  // This example just returns some dummy data
  $results = [];

  // Example database connection (replace with your actual connection)
  // $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

  //  Dummy data
  $dummy_data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A red fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grapefruit', 'description' => 'A large citrus fruit']
  ];

  foreach ($dummy_data as $row) {
    // Check if the search term is in the name or description
    if (strpos($row['name'], $search_term) !== false || strpos($row['description'], $search_term) !== false) {
      $results[] = $row;
    }
  }

  return $results;
}


// Perform the search
$search_results = searchDatabase($search_term, 'your_table_name'); // Replace 'your_table_name'

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $search_term; ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($search_results)) { ?>
    <p>No results found for <?php echo $search_term; ?></p>
  <?php } else { ?>
    <ul>
      <?php foreach ($search_results as $result) { ?>
        <li>
          <strong><?php echo htmlspecialchars($result['name']); ?></strong> - <?php echo htmlspecialchars($result['description']); ?>
        </li>
      <?php } ?>
    </ul>
  <?php } ?>

</body>
</html>


function searchDatabase($search_term, $table_name) {
  // Example using PDO and prepared statements
  try {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

    $stmt = $db->prepare("SELECT * FROM $table_name WHERE name LIKE :search OR description LIKE :search");
    $stmt->bindParam(':search', '%' . $search_term . '%'); // Using LIKE with wildcard for partial matches
    $stmt->execute();

    $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $results;
  } catch (PDOException $e) {
    // Handle the database error (e.g., log the error, display an error message)
    error_log("Database error: " . $e->getMessage()); // Log the error
    return []; // Return an empty array in case of error
  }
}


<?php

// Sample data (replace with your actual data source - database, file, etc.)
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pear",
    "strawberry",
    "kiwi",
    "mango",
];

// Function to handle the search
function searchItems($search_term, $items) {
    $results = [];

    // Convert search term to lowercase for case-insensitive search
    $search_term = strtolower($search_term);

    foreach ($items as $item) {
        // Convert item to lowercase for case-insensitive search
        $item_lower = strtolower($item);

        // Check if the search term is a substring of the item
        if (strpos($item_lower, $search_term) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}

// Get the search term from the form (or URL parameter)
$search_term = isset($_GET['search']) ? $_GET['search'] : ''; 

// Perform the search
$search_results = searchItems($search_term, $items);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="GET">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo isset($search_term) ? htmlspecialchars($search_term) : ''; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($search_results)): ?>
        <p>No items found matching your search.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($search_results as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic Styling - Feel free to customize */
    .search-container {
      margin: 20px;
    }

    #search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      margin-bottom: 5px;
      padding: 10px;
      border: 1px solid #eee;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>

    <ul id="search-results"></ul>
  </div>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.toLowerCase(); // Case-insensitive search

      if (searchTerm === "") {
        searchResults.innerHTML = ""; // Clear results if input is empty
        return;
      }

      // Sample data - replace with your data source
      const data = [
        { title: "Apple iPhone 14", description: "The latest iPhone!" },
        { title: "Samsung Galaxy S23", description: "Powerful Android phone." },
        { title: "Google Pixel 7", description: "Great camera and AI features." },
        { title: "PHP Tutorial", description: "Learn PHP programming." },
        { title: "JavaScript Basics", description: "Introduction to JavaScript." }
      ];

      searchResults.innerHTML = ""; // Clear previous results

      data.forEach(item => {
        if (item.title.toLowerCase().includes(searchTerm)) {
          const listItem = document.createElement('li');
          listItem.textContent = `${item.title} - ${item.description}`;
          searchResults.appendChild(listItem);
        }
      });
    });
  </script>

</body>
</html>


<?php

// Assuming you have a form to input the search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Form</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term..." value="<?php echo htmlspecialchars($_GET['search_term']); ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  //  Example:  Displaying the search term (for demonstration)
  if (isset($_GET['search_term'])) {
    $searchTerm = $_GET['search_term'];
    echo "<p>You searched for: " . htmlspecialchars($searchTerm) . "</p>";
  }
  ?>

</body>
</html>


$searchTerm = $_GET['search_term'];
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";


<?php
// Database credentials (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

$searchTerm = $_GET['search_term'];
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Output data of each row
  while($row = $result->fetch_assoc()) {
    echo "Product Name: " . htmlspecialchars($row["name"]) . "<br>";
    echo "Description: " . htmlspecialchars($row["description"]) . "<br>";
    echo "<br>";
  }
} else {
  echo "No results found.";
}

$conn->close();
?>


<?php

// Assuming you have a search form with an input field named 'search_term'
// and want to search through a dataset (e.g., an array, database)

// 1. Get the Search Term from the Form
$search_term = isset($_POST['search_term']) ? $_POST['search_term'] : '';  // Check if the form is submitted and get the value

// 2. Data to Search Through (Example)
$data = [
    'apple',
    'banana',
    'orange',
    'grapefruit',
    'pineapple',
    'strawberry',
    'watermelon'
];

// 3. Search Function
function searchData($data, $search_term) {
    $results = [];
    $search_term = strtolower($search_term); // Convert to lowercase for case-insensitive search

    foreach ($data as $item) {
        $item_lower = strtolower($item);
        if (strpos($item_lower, $search_term) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// 4. Perform the Search
$search_results = searchData($data, $search_term);

// 5. Display the Results
echo "<form method='post' action=''>";
echo "<input type='text' name='search_term' value='" . htmlspecialchars($search_term) . "' placeholder='Enter search term'>";
echo "<button type='submit'>Search</button>";
echo "</form>";

if (!empty($search_results)) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($search_results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
}

?>


<?php
// Assume you have a database connection established and a variable $conn

// Get the search term
$search_term = isset($_POST['search_term']) ? $_POST['search_term'] : '';

// Search in the 'products' table
$query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
    echo "<h2>Search Results:</h2>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<div>";
        echo "<h3>" . htmlspecialchars($row['name']) . "</h3>";
        echo "<p>" . htmlspecialchars($row['description']) . "</p>";
        echo "</div>";
    }
} else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
}

// ... (rest of the HTML form and database connection setup) ...
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle the search query
function performSearch($searchTerm, $db) {
  // Sanitize the search term to prevent SQL injection
  $searchTerm = mysqli_real_escape_string($db, $searchTerm);

  // Example: Search in a table named 'products' with a column 'name'
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  $result = mysqli_query($db, $query);

  if (mysqli_num_rows($result) > 0) {
    // Display the results
    echo "<form method='get' action='search_results.php'>
          <input type='hidden' name='search_term' value='" . $searchTerm . "'>
          <input type='text' name='search_term' placeholder='Search...'>
          <button type='submit'>Search</button>
        </form>";

    echo "<br>";

    while ($row = mysqli_fetch_assoc($result)) {
      echo "Product Name: " . $row['name'] . "<br>";
      echo "Description: " . $row['description'] . "<br>";
      // Add other product fields as needed
      echo "<hr>";
    }
  } else {
    echo "<p>No results found for '" . $searchTerm . "'</p>";
  }
}

// Example Usage (assuming a form element with id 'search_input')
if (isset($_POST['search_term'])) {
  $searchTerm = $_POST['search_term'];
  performSearch($searchTerm, $db);
}

// If it's a GET request (e.g., user typed something directly into the URL)
if (isset($_GET['search_term'])) {
  $searchTerm = $_GET['search_term'];
  performSearch($searchTerm, $db);
}

// If the search form is being submitted
if (isset($_POST['search_term'])) {
    $searchTerm = $_POST['search_term'];
    // You can also handle the search here - for example, save the search term
    // to a session or database.
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="search.php">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// Let's assume you have a $db connection object

// Function to handle the search form submission
function handleSearch($searchTerm) {
  // Sanitize the search term to prevent SQL injection
  $searchTerm = htmlspecialchars($searchTerm);

  // Example: Search in a table called 'products' with a column called 'name'
  // Replace 'products' and 'name' with your actual table and column names.
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($db, $sql);

  // Check if any results were found
  if (mysqli_num_rows($result) > 0) {
    // Output the results
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      echo "<td>" . $row['name'] . "</td>"; // Assuming 'name' is the column you want to display
      // Add other columns as needed
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}


// Example usage:

// HTML form for the search bar
echo "<form method='GET' action='search.php'>";
echo "Search: <input type='text' name='search_term' style='width: 200px;'>";
echo "<button type='submit'>Search</button>";
echo "</form>";

// Call the function to handle the search submission
// This part is executed when the form is submitted (GET method)
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Get the search term from the form
  $searchTerm = isset($_GET["search_term"]) ? $_GET["search_term"] : "";

  // Handle the search
  handleSearch($searchTerm);
}

?>


<?php

// Assuming you have a form to collect the search query
// This example uses a simple form. You can adapt it to your needs.

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $errorMessage = "Please enter a search term.";
  } elseif (strlen($searchTerm) < 3) {
    $errorMessage = "Search term must be at least 3 characters long.";
  } else {
    // Perform the search (replace this with your actual search logic)
    $results = searchDatabase($searchTerm);
  }

} else {
  // If the form hasn't been submitted, initialize the search term
  $searchTerm = "";
  $results = []; // Initialize the results array
  $errorMessage = "";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo $searchTerm; ?>">
    <input type="submit" value="Search">
  </form>

  <?php if (!empty($errorMessage)) { ?>
    <p style="color: red;"><?php echo $errorMessage; ?></p>
  <?php } ?>

  <?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <ul>
      <?php
      foreach ($results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>"; // Use htmlspecialchars for output
      }
      ?>
    </ul>
  <?php } ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to search the database
function searchDatabase($searchTerm) {
  global $db;  // Access the database connection

  $query = "SELECT * FROM products WHERE name LIKE '%" . $db->real_escape_string($searchTerm) . "%'";  // Use real_escape_string for database safety
  $result = $db->query($query);

  $results = array();
  if ($result) {
    while ($row = $result->fetch_assoc()) {
      $results[] = $row['name'] . " - " . $row['description']; // Customize the output
    }
  }

  return $results;
}

// (The rest of the HTML form and PHP code from above goes here)
?>


<?php

// Assuming you're fetching data from a database or an array

// Example data (replace with your actual data source)
$data = [
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "pear",
    "pineapple",
    "strawberry",
    "watermelon"
];

// Get the search term from the search bar (assuming it's a form input)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - Important to prevent XSS and SQL injection
$searchTerm = htmlspecialchars($searchTerm);  // Escape HTML entities

// Perform the search
$searchResults = [];
foreach ($data as $item) {
    if (strpos($item, $searchTerm) !== false) {
        $searchResults[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found.</p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo $result; ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Check if the search term is present in the query string
  if (isset($_GET["search"]) && !empty($_GET["search"])) {
    $searchTerm = $_GET["search"];

    // Perform the database query
    $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";  // Replace your_table_name and your_column_name
    $result = mysqli_query($conn, $query);

    if ($result) {
      // Display the results
      echo "<h2>Search Results for: " . $searchTerm . "</h2>";
      echo "<table border='1'>";
      echo "<thead><tr><th>ID</th><th>Column1</th><th>Column2</th></tr></thead>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        echo "<td>" . $row["id"] . "</td>"; // Adjust column names
        echo "<td>" . $row["column1"] . "</td>"; // Adjust column names
        echo "<td>" . $row["column2"] . "</td>"; // Adjust column names
        echo "</tr>";
      }
      echo "</table>";
    } else {
      echo "<p>Error executing query.</p>";
    }
  } else {
    echo "<form method='GET'>";
    echo "<input type='text' name='search' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
  }
} else {
  // Handle other request methods (optional)
  echo "Invalid request method.";
}

?>


<!DOCTYPE html>
<html>
<head>
<title>PHP Search Bar</title>
<style>
  .search-container {
    margin: 20px;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
  }

  input[type="text"] {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  button {
    padding: 8px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
  <button onclick="search()">Search</button>
</div>

<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value;

    //  Basic example - replace this with your actual data retrieval logic
    //  This example just logs the search term.

    console.log("Searching for:", searchTerm);

    // **Important: Replace this with your data retrieval code.**
    // This code is just a placeholder.

    // Example: Retrieve data from an array (for demonstration)
    var data = [
      "Apple", "Banana", "Orange", "Grape", "Kiwi", "Mango"
    ];

    var results = data.filter(function(item) {
      return item.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
    });

    // Display results (replace with your desired display method)
    if (results.length > 0) {
      alert("Found results: " + results.join(", "));
    } else {
      alert("No results found.");
    }
  }
</script>

</body>
</html>


<?php
// Assume you have a database connection established: $conn

if (isset($_SERVER["REQUEST_METHOD"]) && "POST" == $_SERVER["REQUEST_METHOD"]) {
    $searchTerm = $_POST["searchInput"];

    // Prepare SQL query (important for security!)
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // Execute the query
    $result = mysqli_query($conn, $sql);

    $products = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $products[] = $row;
    }

    // Output (example - replace with your desired display method)
    if (count($products) > 0) {
      echo "<ul>";
      foreach ($products as $product) {
        echo "<li>" . $product['name'] . " - " . $product['price'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No products found.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
<title>PHP Search Bar with Database</title>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search Products...">
  <button onclick="search()">Search</button>
</div>

<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value;

    // AJAX (Asynchronous JavaScript and XML) -  Example (you'll need to adapt this to your setup)
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "search.php");  //  The URL of your PHP file
    xhr.send(JSON.stringify({searchInput: searchTerm}));

    xhr.onload = function() {
      if (xhr.status === 200) {
        var response = JSON.parse(xhr.responseText);
        if (response.products) {
          // Display the products (using response.products)
          console.log(response.products);
        } else {
          console.log("No products found");
        }
      } else {
        console.error("Error:", xhr.status);
      }
    }
  }
</script>
</body>
</html>


<?php

// Sample data (replace with your actual data source - e.g., database query)
$data = [
  "apple", "banana", "cherry", "date", "elderberry", "fig", "grape",
  "honeydew", "kiwi", "lemon", "mango", "nectarine", "orange", "papaya", "raspberry",
  "strawberry", "tangerine", "watermelon"
];

// Function to handle the search
function searchData($searchTerm, $data) {
  $results = [];
  $searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive search

  foreach ($data as $item) {
    if (stristr($item, $searchTerm)) { // Use stristr for case-insensitive comparison
      $results[] = $item;
      break; // Stop searching after finding the first match
    }
  }

  return $results;
}

// Get the search term from the form (if submitted) or use a default
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';


// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Fruits</h1>

  <form method="get" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Enter a fruit...">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
  <?php else: ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    #search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results"></ul>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();

      if (searchTerm === "") {
        searchResults.innerHTML = ""; // Clear results if search term is empty
        return;
      }

      // **Replace this with your actual data source and search logic**
      const data = [
        { title: "Apple iPhone 14", description: "The latest iPhone..." },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone..." },
        { title: "Google Pixel 7", description: "Google's flagship phone..." },
        { title: "Laptop", description: "A portable computer..." }
      ];

      const results = data.filter(item =>
        item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description.toLowerCase().includes(searchTerm.toLowerCase())
      );


      searchResults.innerHTML = ""; // Clear previous results

      if (results.length === 0) {
        searchResults.innerHTML = "<p>No results found.</p>";
        return;
      }

      results.forEach(item => {
        const listItem = document.createElement('li');
        listItem.textContent = `${item.title} - ${item.description}`;
        searchResults.appendChild(listItem);
      });
    });

    // Optionally:  Add event listener to the input field for "Enter" key press
    searchInput.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            searchButton.click(); // Simulate button click on Enter key
        }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'products' with a column 'name' that you want to search.
// This code provides a basic search bar implementation.

// Get the search term from the GET request (e.g., from a form submission)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));  // Escape HTML and remove whitespace

// Database connection details (replace with your actual credentials)
// $db = new mysqli("localhost", "username", "password", "database");
// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }


// Query to search in the 'name' column of the 'products' table
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
// $result = $db->query($sql);

// Example assuming you have a $db object already connected
// (This section is for demonstration purposes - adjust to your setup)
//  If you're using a database object (like PDO), you'd use its methods.

// Example using mysqli:
$result = mysqli_query($db, $sql);

if (mysqli_num_rows($result) > 0) {
  // Output the search results
  echo "<h2>Search Results for: " . $searchTerm . "</h2>";
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
  echo "<ul>";

  while ($row = mysqli_fetch_assoc($result)) {
    echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Assuming you have a 'description' column
  }

  echo "</ul>";
} else {
  echo "<p>No results found for '" . $searchTerm . "'</p>";
}

// Close the database connection (important!)
// $db->close();

?>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// Replace with your actual database connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_pass = "your_password";

// Database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Get the search term from the form
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

//  (Optional) Sanitize and prepare the search query to prevent SQL injection
//  This is crucial for security!  The following example uses prepared statements.

//  This is a more robust approach.  The exact syntax might vary slightly
//  depending on your database library.

// Example using prepared statements (using mysqli) - Adjust for your database library.
$sql = "SELECT * FROM your_table_name WHERE title LIKE :searchTerm OR description LIKE :searchTerm";  //Replace your_table_name
$stmt = $conn->prepare($sql);
$stmt->bind_param("s", $searchTerm);
$stmt->execute();
$results = $stmt->get_result();


// If no search term is provided, display all results (optional)
if (empty($searchTerm)) {
    $sql = "SELECT * FROM your_table_name";
    $result = $conn->query($sql);
}

// Display the search bar and results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
</head>
<body>

    <h1>Search</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <input type="submit" value="Search">
    </form>

    <?php
    if (!empty($searchTerm)) {
        if ($results && $results->num_rows > 0) {
            echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
            echo "<ul>";
            while ($row = $results->fetch_assoc()) {
                echo "<li>";
                echo "<strong>" . htmlspecialchars($row['title']) . "</strong> - " . htmlspecialchars($row['description']) . "</li>";
                echo "</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
        }
    } else {
        // Display all results (if no search term)
        if ($result->num_rows > 0) {
            echo "<h2>All Results</h2>";
            echo "<ul>";
            while ($row = $result->fetch_assoc()) {
                echo "<li>";
                echo "<strong>" . htmlspecialchars($row['title']) . "</strong> - " . htmlspecialchars($row['description']) . "</li>";
                echo "</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No results found.</p>";
        }
    }

    // Close the database connection
    $conn->close();
    ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchBox" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchBox").value;
      if (searchTerm === "") {
        alert("Please enter a search term.");
        return;
      }

      //  Replace this with your actual search logic
      //  For example, search through an array, database, or other data source
      var results = performSearch(searchTerm);

      // Display results (example:  display in a div)
      displaySearchResults(results);
    }

    function performSearch(searchTerm) {
      // **Replace this function with your actual search logic**
      // This is just a placeholder.  It returns a dummy array for demonstration.

      var dummyResults = [
        "Result 1: This is a result for " + searchTerm,
        "Result 2: Another result for " + searchTerm,
        "Result 3: More results containing " + searchTerm
      ];
      return dummyResults;
    }

    function displaySearchResults(results) {
      // **Replace this function with your actual logic to display the results**
      // This is just a placeholder.  It displays the results in a div.

      var resultsDiv = document.createElement('div');
      resultsDiv.innerHTML = "<h3>Search Results:</h3>";

      for (var i = 0; i < results.length; i++) {
        var resultItem = document.createElement('p');
        resultItem.innerHTML = results[i];
        resultsDiv.appendChild(resultItem);
      }

      //  Append the results div to the body
      document.body.appendChild(resultsDiv);
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and you want to search a table named 'products' with a column named 'name'

// 1. Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize the search term (very important for security)
//  - Remove leading/trailing whitespace
//  - Escape characters to prevent SQL injection
$searchTerm = trim($searchTerm);
$searchTerm = htmlspecialchars($searchTerm); // This is crucial!

// 3. Build the SQL query (using prepared statements is *strongly* recommended)
// Prepared statements prevent SQL injection vulnerabilities.
// This example uses a simple string concatenation, but you should *always* use prepared statements.

$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 4. Execute the query
$result = mysqli_query($conn, $sql); // Replace $conn with your database connection

// 5. Process the results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result) {
    if (mysqli_num_rows($result) > 0) {
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adjust based on your table's columns
      }
      echo "</ul>";
    } else {
      echo "<p>No products found matching your search.</p>";
    }
  } else {
    echo "<p>Error executing query.</p>";
  }

  // Close the database connection (important!)
  mysqli_close($conn);
  ?>

</body>
</html>


<?php

// Function to handle the search
function performSearch($searchTerm, $data) {
  // $data should be an array of arrays, where each inner array represents a row.
  // Example:
  // $data = [
  //   ['name' => 'Apple', 'description' => 'A red fruit'],
  //   ['name' => 'Banana', 'description' => 'A yellow fruit'],
  //   ['name' => 'Orange', 'description' => 'A citrus fruit']
  // ];

  $results = [];

  foreach ($data as $row) {
    // Convert both the search term and the data values to lowercase for case-insensitive search
    $searchTermLower = strtolower($searchTerm);
    $nameLower = strtolower($row['name'] ?? ''); // Handle missing 'name' key gracefully
    $descriptionLower = strtolower($row['description'] ?? '');

    // Check if the search term exists in either the name or description
    if (strpos($nameLower, $searchTermLower) !== false || strpos($descriptionLower, $searchTermLower) !== false) {
      $results[] = $row;
    }
  }

  return $results;
}


// Example usage:

// Sample data (replace this with your actual data)
$myData = [
  ['name' => 'Apple', 'description' => 'A red fruit that is sweet'],
  ['name' => 'Banana', 'description' => 'A yellow fruit'],
  ['name' => 'Orange', 'description' => 'A citrus fruit'],
  ['name' => 'Grape', 'description' => 'Small purple fruits'],
  ['name' => 'Strawberry', 'description' => 'A red fruit, small and juicy']
];

// Get the search term from the user (e.g., from an input field)
$searchTerm = $_GET['search'];  // Retrieve the search term from the URL query string
// OR, if you're getting it from a form:
// $searchTerm = $_POST['search'];

// Handle empty search term
if (empty($searchTerm)) {
  $results = $myData; // Show all data if the search term is empty.  Or you can return an empty array.
} else {
  // Perform the search
  $results = performSearch($searchTerm, $myData);
}


// Display the search results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="get" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($results)) {
    echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
  } else { ?>

    <ul>
      <?php foreach ($results as $row) { ?>
        <li>
          <strong><?php echo htmlspecialchars($row['name']); ?></strong>: <?php echo htmlspecialchars($row['description']); ?>
        </li>
      <?php } ?>
    </ul>

  <?php } ?>


</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's call the database connection $conn

// Example database setup (replace with your actual connection)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the form input
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

//  Handle the search submission
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Perform the search
  $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'"; // Replace your_table and your_column
  $result = $conn->query($sql);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    echo "<form method='get' action=''>";
    echo "<input type='text' name='search' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>" . $row["your_column"] . " - " . $row["your_other_column"] . "</li>"; // Replace with your actual column names
    }
    echo "</ul>";

  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'</p>";
  }

} else {
  // If the request method is not GET (e.g., a POST request)
  // Display the search form
  echo "<h2>Search</h2>";
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

// Close the database connection
$conn->close();

?>


<?php

// Assuming you have a form to capture the search query
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Form</title>
  <style>
    /* Basic styling for the form */
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      margin-bottom: 10px;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo $_SERVER['PHP_SELF']; ?>">  <!--  Using the current page as the action -->
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  // Handle the search query if the form was submitted
  if (isset($_GET['search_term'])) {
    $search_term = $_GET['search_term'];

    // Sanitize the search term (Important for security)
    $search_term = htmlspecialchars(trim($search_term));

    // ***  Replace this with your actual search logic  ***
    // Example:  Search through an array of products
    $products = [
      "Apple iPhone 14 Pro",
      "Samsung Galaxy S23",
      "Google Pixel 7",
      "OnePlus 11"
    ];

    $results = [];
    foreach ($products as $product) {
      if (strpos($product, $search_term) !== false) {
        $results[] = $product;
      }
    }

    // Display the search results
    if (!empty($results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $search_term . "'</p>";
    }
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established, for example:
// $db = new mysqli("localhost", "username", "password", "database_name");

// Check if the connection is successful
// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }

// --- Search Bar Implementation ---

// 1. Get the search term from the request
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';  // Use htmlspecialchars for security

// 2. Sanitize and Validate the Search Term (IMPORTANT!)
//    -  Remove whitespace, special characters, and possibly limit the length
$searchTerm = trim($searchTerm); // Remove leading/trailing whitespace
$searchTerm = preg_replace('/[^a-zA-Z0-9\s]/', '', $searchTerm); //Allow only letters, numbers, and spaces. Adjust as needed
$searchTerm = $searchTerm; // Keep trimmed value. You can further limit the length if needed.

// 3.  Query the Database
//    -  Replace this with your actual database query
//    -  This is a simplified example using a hypothetical 'products' table
$sql = "SELECT id, name, description, price FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

// 4. Execute the query
$result = $db->query($sql);

// 5. Display the results
if ($result->num_rows > 0) {
  echo "<ul>";
  while ($row = $result->fetch_assoc()) {
    echo "<li>" . $row['name'] . " - " . $row['description'] . " - " . $row['price'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "No results found for '" . $searchTerm . "'.";
}

// 6. Close the database connection (important!)
// $db->close();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      margin-bottom: 10px;
    }

    #search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 8px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <div id="search-results">
    <h2>Search Results:</h2>
    <?php
    // Example Data (Replace with your actual data source)
    $data = [
      ["item1", "description1"],
      ["item2", "description2"],
      ["item3", "description3"],
      ["item4", "description4"],
      ["item5", "description5"]
    ];

    // Get the search term from the input field
    $searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

    // Perform the search
    $searchResults = [];
    foreach ($data as $item) {
      if (strpos($item[0], $searchTerm) !== false) { //Case-sensitive search
          $searchResults[] = $item;
      }
    }

    // Display the results
    if (empty($searchResults)) {
      echo "<p>No results found.</p>";
    } else {
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>" . $result[0] . " - " . $result[1] . "</li>";
      }
      echo "</ul>";
    }
    ?>
  </div>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    width: 300px;
    margin: 0 auto; /* Center the container */
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: sans-serif;
  }

  input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box; /* Important for consistent sizing */
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
</div>

<div id="searchResults">
  <!-- Results will be displayed here -->
</div>


<script>
  const searchInput = document.getElementById('searchInput');
  const searchResultsDiv = document.getElementById('searchResults');
  const items = [
    { id: 1, name: "Apple", description: "A juicy fruit." },
    { id: 2, name: "Banana", description: "A yellow fruit." },
    { id: 3, name: "Orange", description: "A citrus fruit." },
    { id: 4, name: "Pineapple", description: "A tropical fruit." }
  ];

  searchInput.addEventListener('keyup', function() {
    const searchTerm = searchInput.value.toLowerCase();
    const results = items.filter(item => {
      return item.name.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
    });

    searchResultsDiv.innerHTML = ''; // Clear previous results

    if (results.length > 0) {
      results.forEach(result => {
        const resultDiv = document.createElement('div');
        resultDiv.innerHTML = `
          <h3>${result.name}</h3>
          <p>${result.description}</p>
        `;
        searchResultsDiv.appendChild(resultDiv);
      });
    } else {
      searchResultsDiv.innerHTML = '<p>No results found.</p>';
    }
  });
</script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and a database table named 'products' with a 'name' column.

//  **Important:** Replace these with your actual database connection details!
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

// Initialize the search term
$search_term = "";

// Handle the form submission (searching)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $search_term = $_POST["search_term"];
}

// Build the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

// Execute the query (using mysqli)
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter product name">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . htmlspecialchars($row["name"]) . " - " . htmlspecialchars($row["description"]) . "</li>";  // Customize what you display.
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search term.</p>";
    }
    ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("search-input").value;

      // Basic search logic (replace with your actual data retrieval)
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Simulate searching through an array
      var data = ["apple", "banana", "orange", "grape", "kiwi"];

      var results = data.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the results (replace with your desired output method)
      var resultsString = results.join(", ");
      alert("Search Results: " + resultsString);
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Database</title>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("search-input").value;

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Simulate a database query (replace with your actual query)
      var data = yourDatabaseQuery(searchTerm); // Assuming a function that returns data

      // Display the results (replace with your desired output method)
      var resultsString = data.join(", ");  // Convert the array to a string
      alert("Search Results: " + resultsString);
    }
  </script>

</body>
</html>


<?php

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = trim($_POST["search_term"]);

  // Validate the search term (optional but recommended)
  if (empty($searchTerm)) {
    echo "<p>Please enter a search term.</p>";
  } else {
    // Perform the search (replace this with your actual search logic)
    $searchResults = performSearch($searchTerm);

    // Display the results
    displaySearchResults($searchResults);
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Example</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
  // This is where you'd put your actual search logic
  //  For this example, we'll just display a placeholder
  ?>

</body>
</html>


<?php

// Example database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
  $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
} catch (PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}


function performSearch($searchTerm) {
  global $pdo;

  $stmt = $pdo->prepare("SELECT * FROM products WHERE name LIKE :searchTerm OR description LIKE :searchTerm");
  $searchTerm = "%" . $searchTerm . "%"; // Use % as wildcards for LIKE operator
  $stmt->bindParam(':searchTerm', $searchTerm, PDO::PARAM_STR);
  $stmt->execute();

  $results = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch results as an associative array

  return $results;
}

function displaySearchResults($searchResults) {
  echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
  if (empty($searchResults)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($searchResults as $row) {
      echo "<li>" . htmlspecialchars($row['name']) . " - " . htmlspecialchars($row['description']) . "</li>";
    }
    echo "</ul>";
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    .search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    .search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
    <button class="search-button" onclick="search()">Search</button>
  </div>

  <div id="searchResults" style="margin-top: 20px; display: none;">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("searchResults");

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Example data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 14", description: "The latest iPhone..." },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone..." },
        { title: "Google Pixel 7", description: "Google's flagship phone..." },
        { title: "Laptop - Dell XPS 15", description: "A high-performance laptop..." },
        { title: "Headphones - Sony WH-1000XM5", description: "Noise-canceling headphones..." }
      ];

      // Filter the data based on the search term
      for (var i = 0; i < data.length; i++) {
        if (data[i].title.toLowerCase().includes(searchTerm) ||
            data[i].description.toLowerCase().includes(searchTerm)) {
          var resultItem = document.createElement("div");
          resultItem.innerHTML = `
            <h3>${data[i].title}</h3>
            <p>${data[i].description}</p>
          `;
          resultItem.style.borderBottom = "1px solid #eee";
          resultItem.style.paddingBottom = "10px";
          resultItem.style.textAlign = "left";
          resultItem.style.marginBottom = "10px";
          resultItem.style.cursor = "pointer";

          // Add a click event to expand/collapse the result (optional)
          resultItem.addEventListener("click", function() {
            // Implement your desired action here, like expanding a detailed view
          });

          resultsDiv.appendChild(resultItem);
        }
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established as $conn

$searchTerm = $_GET['search']; // Get the search term from the URL

// Sanitize the input to prevent SQL injection
$searchTerm = $conn->real_escape_string($searchTerm);

// Example database query (replace with your actual query)
$sql = "SELECT title, description FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<div id='searchResults'>";
    while($row = $result->fetch_assoc()) {
        echo "<div class='result-item'>";
        echo "<h3>" . $row["title"] . "</h3>";
        echo "<p>" . $row["description"] . "</p>";
        echo "</div>";
    }
    echo "</div>";
} else {
    echo "<p>No results found.</p>";
}
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// $conn = new mysqli("localhost", "username", "password", "database_name");

// Check connection
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }

// **Basic Search Function (Simple String Search)**
function search_data($search_term, $data_source) {
    $results = [];
    foreach ($data_source as $item) {
        // Normalize input (lowercase and remove non-alphanumeric)
        $search_term = strtolower(preg_replace('/[^a-zA-Z0-9\s]/', '', $search_term));
        
        // Check if either the item or the search term is empty (to avoid errors)
        if ($search_term === "" || $item === "") {
          continue; // Skip to the next item
        }

        // If search term is a substring of the item, it's a match
        if (strpos($item, $search_term) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// Example Usage:  Let's assume $data_source is an array of strings.

// Simulate a database query result (replace with your actual query)
$data_source = [
    "apple",
    "banana",
    "orange juice",
    "grapefruit",
    "pineapple",
    "mango",
    "apricot"
];

// Get the search term from the form (or URL parameter)
$search_term = isset($_GET['search']) ? $_GET['search'] : ''; // Get from GET request

// Perform the search
$search_results = search_data($search_term, $data_source);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search</title>
</head>
<body>

<h1>Simple Search</h1>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit">Search</button>
</form>

<?php if (!empty($search_results)): ?>
    <h2>Search Results:</h2>
    <ul>
        <?php foreach ($search_results as $result): ?>
            <li><?php echo htmlspecialchars($result); ?></li>
        <?php endforeach; ?>
    </ul>
<?php else: ?>
    <p>No results found for "<?php echo htmlspecialchars($search_term); ?>"</p>
<?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Example</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
  // Example: Display results based on the search term (replace with your logic)
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Replace this with your actual search logic
    $results = searchDatabase($search_term); 

    if (count($results) > 0) {
      echo "<h2>Search Results for: " . $search_term . "</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $search_term . "'.</p>";
    }
  }
  ?>

  <script>
    // Optional: Add some basic styling for the search bar
    document.getElementById('search_term').placeholder = 'Search for products, articles, etc.';
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars(trim($searchTerm));

// SQL query construction
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Replace 'products' with your table name and 'name' with the column to search
// OR, if you want an exact match:
// $sql = "SELECT * FROM products WHERE name = '" . $searchTerm . "'";


// Execute the query
$result = mysqli_query($conn, $sql);

?>

<form action="" method="get">
  <input type="text" name="search" value="<?php echo $searchTerm; ?>" placeholder="Search products...">
  <button type="submit">Search</button>
</form>

<?php

// Display the search results
if (mysqli_num_rows($result) > 0) {
  echo "<h2>Search Results:</h2>";
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<div>";
    echo "<h3>" . htmlspecialchars($row['name']) . "</h3>"; // Use htmlspecialchars for security
    echo "<p>" . htmlspecialchars($row['description']) . "</p>";  // Display other relevant fields here
    echo "</div>";
  }
} else {
  echo "<p>No results found.</p>";
}

mysqli_close($conn);
?>


<?php

// Sample data (replace with your actual data source - database, array, etc.)
$data = [
    "apple", "banana", "cherry", "date", "elderberry",
    "fig", "grape", "honeydew", "indian plum", "jackfruit",
    "kiwi", "lemon", "mango", "nectarine", "orange", "papaya",
    "pear", "quince", "raspberry", "strawberry", "tangerine"
];


// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = trim($_POST["search_term"]);

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $results = []; // Or display an error message
  } else {
    $results = [];
    foreach ($data as $item) {
      if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
        $results[] = $item;
      }
    }
  }
} else {
  // Initialize results array (important if the form hasn't been submitted)
  $results = [];
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Fruits</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter fruit name">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $result) { ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php } ?>
    </ul>
  <?php } ?>

</body>
</html>


<?php
// Database credentials (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Create connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ... (rest of the code, including the form handling and search logic)

// Example database query (replace with your actual query)
$sql = "SELECT * FROM fruits"; // Assuming you have a table named "fruits"
$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Process the results
  $data = [];
  while ($row = $result->fetch_assoc()) {
    $data[] = $row['name']; // Assuming a 'name' column
  }
} else {
  $data = [];
}

// ... (close the database connection when finished)
$conn->close();

?>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  /* Basic styling - adjust as needed */
  #search-bar {
    width: 300px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
  }

  #search-button {
    padding: 8px 15px;
    background-color: #4CAF50; /* Green */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  #search-button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

<h1>Search Example</h1>

<input type="text" id="search-bar" placeholder="Enter search term">
<button id="search-button">Search</button>

<div id="search-results">
  <!-- Results will be displayed here -->
</div>

<script>
  // JavaScript to handle the search
  const searchBar = document.getElementById('search-bar');
  const searchButton = document.getElementById('search-button');
  const searchResults = document.getElementById('search-results');

  searchButton.addEventListener('click', function() {
    const searchTerm = searchBar.value.trim();

    if (searchTerm) {
      // Perform your search logic here
      // Example: Display all items with the search term in the results div.
      // Replace this with your actual data retrieval and filtering logic.
      searchResults.innerHTML = ""; // Clear previous results

      //Simulated Data - Replace with your real data source
      const items = [
          { id: 1, name: "Apple", description: "A red fruit." },
          { id: 2, name: "Banana", description: "A yellow fruit." },
          { id: 3, name: "Orange", description: "A citrus fruit." },
          { id: 4, name: "Grapes", description: "Small, sweet berries." },
        ];


      items.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.innerHTML = `
          <h3>${item.name}</h3>
          <p>${item.description}</p>
        `;
        searchResults.appendChild(itemElement);
      });


    } else {
      searchResults.innerHTML = "<p>Please enter a search term.</p>";
    }
  });
</script>

</body>
</html>


<?php
// Assuming you have a database connection established as $conn

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Your database query to search
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($conn, $sql);

  if (mysqli_num_rows($result) > 0) {
    $searchResults = "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      $searchResults .= "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
    }
    $searchResults .= "</ul>";
    echo $searchResults; // Display results in the search_results div
  } else {
    echo "<p>No results found.</p>";
  }
}
?>


<?php

// Sample data (replace with your actual data source - e.g., database, array)
$data = [
    "apple", "banana", "cherry", "date", "fig", "grape", "kiwi"
];

// Get the search term from the form (if submitted)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent XSS and SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Perform the search
$searchResults = [];
if ($searchTerm) {
    foreach ($data as $item) {
        if (stripos($item, $searchTerm) !== false) { // case-insensitive search
            $searchResults[] = $item;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the input to prevent XSS attacks
  $searchTerm = htmlspecialchars(trim($_POST["search"]));

  //  Validate the input (optional but recommended)
  if (empty($searchTerm)) {
    $errorMessage = "Please enter a search term.";
  } else {
    // Perform the search (replace this with your actual search logic)
    $results = performSearch($searchTerm);

    // Set a success message (optional)
    $successMessage = "Search results for: " . $searchTerm;
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  if (!empty($errorMessage)) {
    echo "<p style='color:red;'>" . $errorMessage . "</p>";
  }
  if (!empty($successMessage)) {
    echo "<p style='color:green;'>" . $successMessage . "</p>";
  }
  ?>

</body>
</html>


function performSearch($searchTerm) {
  // Example: Search through an array of products
  $products = [
    "Red T-Shirt" => "Description of Red T-Shirt",
    "Blue Jeans" => "Description of Blue Jeans",
    "Green Hat" => "Description of Green Hat"
  ];

  $results = [];
  foreach ($products as $key => $value) {
    if (stripos($key, $searchTerm) !== false) {  // Case-insensitive search
      $results[$key] = $value;
    }
  }
  return $results;
}


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("searchResults");

      // Clear previous results
      resultsDiv.innerHTML = "";

      if (searchTerm.trim() === "") {
        return; // Do nothing if the search term is empty
      }

      //  Simulated data (replace with your actual data source)
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grapefruit",
        "Strawberry",
        "Pineapple",
        "Mango",
        "Avocado",
        "Kiwi"
      ];

      // Search the data
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {
          // Create a list item for the result
          var listItem = document.createElement("li");
          listItem.textContent = data[i];
          listItem.style.marginBottom = "5px";
          resultsDiv.appendChild(listItem);
        }
      }

      if (resultsDiv.innerHTML === "") {
          var noResults = document.createElement("p");
          noResults.textContent = "No results found.";
          resultsDiv.appendChild(noResults);
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Example query (replace with your actual search query)
$searchTerm = $_GET["search"]; // Get the search term from the URL

$sql = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'";  // Replace 'title' and 'your_table'

$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Output data of each row
  while($row = $result->fetch_assoc()) {
    // Display the data
    echo "Title: " . $row["title"] . "<br>";
    echo "Description: " . $row["description"] . "<br>";
  }
} else {
  echo "No results found";
}

$conn->close();
?>


<?php

// Sample data - replace with your actual data source
$data = [
    "apple",
    "banana",
    "orange",
    "grape",
    "pineapple",
    "strawberry",
    "watermelon",
    "kiwi",
];

// Function to handle the search
function searchData($searchTerm, $data) {
  $results = [];

  // Convert the search term to lowercase for case-insensitive searching
  $searchTerm = strtolower($searchTerm);

  foreach ($data as $item) {
    // Convert the item to lowercase for case-insensitive searching
    $itemLower = strtolower($item);

    if (strpos($itemLower, $searchTerm) === 0) {  // Starts with the search term
      $results[] = $item;
      break; // Stop after finding the first match to improve performance
    }
  }

  return $results;
}

// Get the search term from the form (if submitted)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search for Fruits</h1>

  <form method="get" action="">
    <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found.</p>
  <?php else: ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established ($conn)

// Get the search query from the input field
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the input (important for security)
$search_term = htmlspecialchars(trim($search_term));

// Check if the search term is empty - don't perform the search
if (empty($search_term)) {
  echo "<p>Please enter a search term.</p>";
} else {
  // SQL query (adjust table and column names to match your database)
  $query = "SELECT * FROM products WHERE name LIKE '%$search_term%' OR description LIKE '%$search_term%'";

  // Execute the query
  $result = mysqli_query($conn, $query);

  // Check if the query was successful
  if (mysqli_num_rows($result) > 0) {
    // Display the results
    echo "<form method='get' action=''>"; // Form to allow reloading the search
    echo "<input type='text' name='search' value='$search_term' style='width:200px;'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<h2>Search Results for: $search_term</h2>";
    echo "<ul>";

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>";
      echo "<strong>" . $row['name'] . "</strong> - " . $row['description'] . "</li>";
      // You can add other fields from the database to display
    }

    echo "</ul>";

  } else {
    echo "<p>No results found for: $search_term</p>";
  }
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value.toLowerCase();
      var resultsDiv = document.getElementById("results");

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Example data (replace with your actual data source)
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Mango",
        "Pineapple",
        "Strawberry",
        "Watermelon"
      ];

      // Filter data based on search term
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().includes(searchTerm)) {
          var resultItem = document.createElement("p");
          resultItem.textContent = data[i];
          resultsDiv.appendChild(resultItem);
        }
      }

      // If no results are found
      if (resultsDiv.innerHTML === "") {
        var noResults = document.createElement("p");
        noResults.textContent = "No results found.";
        resultsDiv.appendChild(noResults);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established and named $conn

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and escape the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Check if the search term is empty
if (empty($searchTerm)) {
  // Display a message or do nothing if no search term is entered
  echo "<p>Please enter a search term.</p>";
} else {
  // Construct the SQL query
  $tableName = 'your_table_name'; // Replace with your table name
  $columnName = 'your_column_name'; // Replace with the column you want to search in
  $sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%$searchTerm%'";


  // Execute the query
  $result = mysqli_query($conn, $sql);  // or whatever method you're using to query

  // Check if the query was successful
  if ($result) {
    // Display the search results
    echo "<h2>Search Results for: '$searchTerm'</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Column 1</th><th>Column 2</th></tr>"; // Adjust based on your table columns

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      foreach ($row as $value) {
        echo "<td>" . htmlspecialchars($value) . "</td>"; // Escape for output as well
      }
      echo "</tr>";
    }

    echo "</table>";

  } else {
    // Handle the error
    echo "<p>Error executing the query: " . mysqli_error($conn) . "</p>";
  }
}

?>

<!-- HTML Form to Submit the Search Term -->
<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search" placeholder="Enter search term">
  <input type="submit" value="Search">
</form>


<?php

// ... (Database connection) ...

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

if (empty($searchTerm)) {
  echo "<p>Please enter a search term.</p>";
} else {
  // Construct the SQL query with placeholders
  $tableName = 'your_table_name';
  $columnName = 'your_column_name';
  $sql = "SELECT * FROM $tableName WHERE $columnName LIKE ?";

  // Prepare the statement
  $stmt = mysqli_prepare($conn, $sql);

  if ($stmt) {
    // Bind the parameter
    mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // "s" indicates a string

    // Execute the query
    mysqli_stmt_execute($stmt);

    // Get the result
    $result = mysqli_stmt_get_result($stmt);

    // Display the results
    if ($result) {
      echo "<h2>Search Results for: '$searchTerm'</h2>";
      echo "<table border='1'>";
      echo "<tr><th>Column 1</th><th>Column 2</th></tr>";

      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        foreach ($row as $value) {
          echo "<td>" . htmlspecialchars($value) . "</td>";
        }
        echo "</tr>";
      }

      echo "</table>";
    } else {
      echo "<p>Error executing the query: " . mysqli_error($conn) . "</p>";
    }

    // Close the statement
    mysqli_stmt_close($stmt);
  } else {
    echo "<p>Error preparing the statement: " . mysqli_error($conn) . "</p>";
  }
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Validate that the search term isn't empty
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return; // Exit the function
      }

      //  Here you would typically implement your search logic.
      //  This example just logs the search term to the console.

      console.log("Searching for: " + searchTerm);

      //  Replace this with your actual search implementation.
      //  This could involve:
      //  1.  Filtering data from a database.
      //  2.  Using a third-party search API.
      //  3.  Displaying search results on the page.

      // Example: Displaying results (replace with your actual data source)
      // let results = filterData(searchTerm);
      // displayResults(results);

    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established
// (using PHP's mysqli or PDO)

if (isset($_SERVER["REQUEST_METHOD"]) && "POST" == $_SERVER["REQUEST_METHOD"]) {
  $searchTerm = $_POST["search_term"];

  //  Escape the search term to prevent SQL injection
  $searchTerm = mysqli_real_escape_string($conn, $searchTerm);

  //  Construct your SQL query (example - adjust to your table/field names)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($conn, $sql);

  // Process the results (e.g., display them on the page)
  // ...  (Displaying the results would go here)
}
?>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  .search-container {
    margin: 20px;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    width: 300px; /* Adjust width as needed */
  }

  input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
</div>

<div id="results">
  <!-- Search results will be displayed here -->
</div>

<script>
  document.getElementById("searchInput").addEventListener("keyup", function() {
    var searchText = this.value.toLowerCase(); // Convert to lowercase for case-insensitive search

    // Example data (replace with your actual data source)
    var data = [
      { title: "Apple iPhone 13", description: "A powerful smartphone." },
      { title: "Samsung Galaxy S22", description: "Another great smartphone." },
      { title: "Google Pixel 6", description: "Google's flagship phone." },
      { title: "Best PHP Tutorial", description: "Learn PHP programming." },
      { title: "Learn PHP Online", description: "Find online PHP courses." }
    ];

    var results = [];

    for (var i = 0; i < data.length; i++) {
      if (data[i].title.toLowerCase().includes(searchText) ||
          data[i].description.toLowerCase().includes(searchText)) {
        results.push(data[i]);
      }
    }

    // Clear previous results
    document.getElementById("results").innerHTML = "";

    // Display results
    if (results.length > 0) {
      var resultsHtml = "<ul>";
      for (var j = 0; j < results.length; j++) {
        resultsHtml += "<li>" + results[j].title + " - " + results[j].description + "</li>";
      }
      resultsHtml += "</ul>";
      document.getElementById("results").innerHTML = resultsHtml;
    } else {
      document.getElementById("results").innerHTML = "No results found.";
    }
  });
</script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchBox" placeholder="Search..." onkeyup="searchFunction()">
    <button onclick="searchFunction()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    // Sample data for demonstration
    const data = [
      "Apple", "Banana", "Orange", "Grape", "Strawberry", "Mango", "Pineapple", "Watermelon"
    ];

    function searchFunction() {
      const searchTerm = document.getElementById("searchBox").value.toLowerCase();
      const resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      if (searchTerm === "") {
        return; // Don't do anything if the search box is empty
      }

      for (let i = 0; i < data.length; i++) {
        const item = data[i].toLowerCase();
        if (item.includes(data[i])) {
          const resultItem = document.createElement("p");
          resultItem.textContent = data[i];
          resultsDiv.appendChild(resultItem);
        }
      }
    }
  </script>

</body>
</html>


<?php

// Database connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Example search query (replace with your actual query)
$searchTerm = $_GET["search"];  // Get the search term from the URL
$sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // Output data of each row
    while($row = $result->fetch_assoc()) {
        // Do something with the row data
        echo "ID: " . $row["id"]. " - Name: " . $row["name"]. "<br>";
    }
} else {
    echo "No results found.";
}

$conn->close();
?>


<?php

// Assuming you have a database connection established and you're using a database that supports SQL queries.

// Example using MySQLi (you can adapt this to other database drivers)

// 1. Get the search term from the form (using a form or a GET request)

// Example with a simple form:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $search_term = htmlspecialchars(trim($_POST["search"])); // Sanitize input!
} else {
  $search_term = "";
}


// 2.  Construct the SQL Query
$search_term = "%" . $search_term . "%"; //  '%' is the wildcard for 'like' operator.  Makes the search case-insensitive

$query = "SELECT * FROM products WHERE name LIKE '" . $search_term . "'"; // Assuming your table is named 'products' and has a column named 'name'

// 3. Execute the Query (using MySQLi)
$conn = new MySQLi("localhost", "your_db_user", "your_db_password", "your_db_name"); // Replace with your database credentials
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$stmt = $conn->prepare($query); // Use prepared statements for security
if (!$stmt->execute()) {
    die("Query failed: " . $stmt->error);
}

$result = $stmt->get_result();

// 4. Display the Results

if ($result->num_rows > 0) {
  echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>";
  echo "<table border='1'>";
  echo "<thead><tr><th>ID</th><th>Name</th><th>Description</th></tr></thead>";
  while ($row = $result->fetch_assoc()) {
    echo "<tr>";
    echo "<td>" . $row["id"] . "</td>";
    echo "<td>" . $row["name"] . "</td>";
    echo "<td>" . $row["description"] . "</td>";
    echo "</tr>";
  }
  echo "</table>";

} else {
  echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
}

$stmt->close();
$conn->close();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $search_term; ?>" placeholder="Enter product name or keyword">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      margin: 20px;
      width: 300px;
    }
    #search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }
    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results">
    <!-- Search results will be added here dynamically -->
  </ul>

  <script>
    // Sample data (replace with your actual data source)
    const data = [
      { id: 1, title: "Product A", description: "This is product A." },
      { id: 2, title: "Product B", description: "This is product B." },
      { id: 3, title: "Product C", description: "This is product C." },
      { id: 4, title: "Another Item", description: "A different item." }
    ];

    const searchInput = document.getElementById("search-input");
    const searchButton = document.getElementById("search-button");
    const searchResults = document.getElementById("search-results");

    searchButton.addEventListener("click", function() {
      const searchTerm = searchInput.value.toLowerCase();  // Convert to lowercase for case-insensitive search
      const results = [];

      for (let i = 0; i < data.length; i++) {
        const item = data[i];
        if (item.title.toLowerCase().includes(searchTerm) ||
            item.description.toLowerCase().includes(searchTerm)) {
          results.push(item);
        }
      }

      // Display the results
      searchResults.innerHTML = ""; // Clear previous results
      if (results.length > 0) {
        results.forEach(item => {
          const listItem = document.createElement("li");
          listItem.textContent = `${item.title} - ${item.description}`;
          searchResults.appendChild(listItem);
        });
      } else {
        searchResults.textContent = "No results found.";
      }
    });

    // Handle Enter key press as search
    searchInput.addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            searchButton.click();
        }
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("searchResults");

      // Example Data (Replace with your actual data source)
      var data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry", "Pineapple"
      ];

      // Filter the data based on the search term
      var filteredData = data.filter(function(item) {
        return item.toLowerCase().includes(searchTerm);
      });

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Display the filtered results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var resultDiv = document.createElement("p");
          resultDiv.appendChild(resultDiv);
          resultDiv.textContent = item;
        });
      } else {
        resultDiv.textContent = "No results found.";
      }
    }
  </script>

</body>
</html>


<?php

// Sample Data (replace with your actual data source - e.g., database)
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pineapple",
    "strawberry"
];

// Function to handle the search
function searchItems($searchTerm, $items) {
    $results = [];

    // Convert search term to lowercase for case-insensitive search
    $searchTerm = strtolower($searchTerm);

    foreach ($items as $item) {
        // Convert item to lowercase for case-insensitive comparison
        $itemLower = strtolower($item);

        // Check if the search term is a substring of the item
        if (strpos($itemLower, $searchTerm) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}

// Get the search term from the form (if submitted) or directly from the URL
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';  // Get from URL or empty if not provided

// Perform the search
$searchResults = searchItems($searchTerm, $items);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search for Items</h1>

    <form action="" method="get">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 0 5px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      // Get the search term from the input field
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here
      // This is just a placeholder. Replace with your actual search code.

      // Example:  Display the search term in an alert
      //alert("You searched for: " + searchTerm);

      // Example:  (Simulated)  Search through an array (replace with your data source)
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Pineapple"
      ];
      var results = [];
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {
          results.push(data[i]);
        }
      }

      // Display the results (replace with your actual display logic)
      if (results.length > 0) {
        alert("Search results:
" + results.join("
"));
      } else {
        alert("No results found for: " + searchTerm);
      }


    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here.  For example, searching a database.
      // This is just a placeholder example.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Simulate a search result (replace with your actual search)
      var results = simulateSearchResults(searchTerm);

      // Display the search results
      displaySearchResults(results);
    }

    function simulateSearchResults(searchTerm) {
      //  Replace this with your real database query or search logic.
      var results = [
        "Result 1 for " + searchTerm,
        "Result 2 for " + searchTerm,
        "Result 3 for " + searchTerm
      ];
      return results;
    }

    function displaySearchResults(results) {
      var resultsContainer = document.getElementById("results");
      if (!resultsContainer) {
        resultsContainer = document.createElement("div");
        resultsContainer.id = "results";
        document.body.appendChild(resultsContainer);
      }

      // Clear previous results (optional)
      while (resultsContainer.firstChild) {
        resultsContainer.removeChild(resultsContainer.firstChild);
      }

      for (var i = 0; i < results.length; i++) {
        var resultItem = document.createElement("p");
        resultItem.textContent = results[i];
        resultsContainer.appendChild(resultItem);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the user
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars(trim($searchTerm));

// Optional: Add a default value if no search term is provided
if (empty($searchTerm)) {
  $searchTerm = '';
}

// SQL query -  This example assumes a table named 'products' with a 'name' column.
//  ADJUST THIS TO MATCH YOUR DATABASE SCHEMA
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

// Check if the query was successful
if ($result) {
  // Display the search results
  echo "<form action=\"search.php\" method=\"get\">
        <input type=\"text\" name=\"search\" placeholder=\"Search...\" value=\"" . htmlspecialchars($searchTerm) . "\">
        <button type=\"submit\">Search</button>
      </form>";

  echo "<h2>Search Results:</h2>";

  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<div>";
      echo "<h3>" . $row['name'] . "</h3>";
      // Display other product details here (e.g., price, description)
      echo "<p>Price: $" . $row['price'] . "</p>";
      echo "<p>Description: " . $row['description'] . "</p>";
      echo "</div>";
    }
  } else {
    echo "<p>No results found.</p>";
  }

} else {
  // Handle database error
  echo "<p>Error: " . mysqli_error($conn) . "</p>";
}

// Close the database connection (important!)
mysqli_close($conn);
?>


<?php

// Sample data (replace with your actual data source - database, array, etc.)
$data = [
    "apple", "banana", "orange", "grape", "watermelon", "kiwi",
    "strawberry", "blueberry", "raspberry", "pineapple"
];

// Function to handle the search
function searchData($searchTerm, $data) {
    $results = [];
    $searchTerm = strtolower($searchTerm); // Case-insensitive search

    foreach ($data as $item) {
        $itemLower = strtolower($item);
        if (strpos($itemLower, $searchTerm) !== false) {  //strpos returns the position of the substring
            $results[] = $item;
            break; // Stop searching after the first match
        }
    }

    return $results;
}

// Check if the search term is submitted
if (isset($_POST['search_term']) && !empty($_POST['search_term'])) {
    $searchTerm = $_POST['search_term'];
    $searchResults = searchData($searchTerm, $data);

    // Output the results
    if (empty($searchResults)) {
        echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
    } else {
        echo "<h2>Search Results:</h2>";
        echo "<ol>";
        foreach ($searchResults as $result) {
            echo "<li>" . htmlspecialchars($result) . "</li>";
        }
        echo "</ol>";
    }

} else {
    // Display the search bar if no search term is submitted
    echo "<form method='post'>";
    echo "Search: <input type='text' name='search_term' value=''>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
}

?>


<?php

// Assuming you have a database connection established (e.g., $db is your database object)

// Function to handle the search form and query the database
function handleSearch($searchTerm) {
  // Sanitize the search term to prevent SQL injection
  $searchTerm = mysqli_real_escape_string($db, $searchTerm);

  // Build the SQL query
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($db, $query);

  // Check for errors
  if (mysqli_errno($db)) {
    echo "Error: " . mysqli_error($db);
    return false;
  }

  // Display the results (or an empty message if no results are found)
  if (mysqli_num_rows($result) > 0) {
    echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
    echo "<input type='text' name='search' value='" . htmlspecialchars($searchTerm) . "' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . htmlspecialchars($row['your_column_name']) . "</li>"; // Replace 'your_column_name' with the actual column name
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
  }

  // Close the database connection (important!)
  mysqli_close($db);
}

// Example Usage (This is called when the form is submitted)
if (isset($_GET['search'])) {
  handleSearch($_GET['search']);
} else {
  // Show the search form if no search term is provided
  echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
  echo "<input type='text' name='search' value='' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db is your database object)

// Function to handle the search form and query the database using prepared statements
function handleSearch($searchTerm) {
  // Sanitize the search term (important, but prepared statements provide a base layer of defense)
  $searchTerm = mysqli_real_escape_string($db, $searchTerm);

  // Build the SQL query using a placeholder
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE ?";

  // Prepare the statement
  $stmt = mysqli_prepare($db, $query);

  if ($stmt === false) {
    echo "Error preparing statement: " . mysqli_error($db);
    return false;
  }

  // Bind the parameter
  mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // "s" indicates a string parameter

  // Execute the query
  mysqli_stmt_execute($stmt);

  // Get the result set
  $result = mysqli_stmt_get_result($stmt);

  // Close the statement
  mysqli_stmt_close($stmt);

  // Check for errors
  if (mysqli_errno($db)) {
    echo "Error: " . mysqli_error($db);
    return false;
  }

  // Display the results (or an empty message if no results are found)
  if (mysqli_num_rows($result) > 0) {
    echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
    echo "<input type='text' name='search' value='" . htmlspecialchars($searchTerm) . "' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . htmlspecialchars($row['your_column_name']) . "</li>"; // Replace 'your_column_name' with the actual column name
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
  }

}

// Example Usage (This is called when the form is submitted)
if (isset($_GET['search'])) {
  handleSearch($_GET['search']);
} else {
  // Show the search form if no search term is provided
  echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
  echo "<input type='text' name='search' value='' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}
?>


<?php

// Include the necessary libraries
require_once 'vendor/autoload.php'; // Assuming you're using Composer for dependencies

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\DomCrawler\Crawler;

// Sample data (replace with your actual data source - database, file, etc.)
$data = [
    'apple',
    'banana',
    'orange',
    'grape',
    'watermelon',
    'pineapple',
    'strawberry',
    'mango',
    'kiwi',
    'pear'
];

// Handle the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = trim($_POST["search_term"]); // Get the search term from the form

    if (empty($searchTerm)) {
        $results = []; // Empty results if search term is empty
    } else {
        $results = [];
        foreach ($data as $item) {
            if (stripos($item, $searchTerm) !== false) { // Case-insensitive search using stripos
                $results[] = $item;
            }
        }
    }
} else {
    // If not a post request, initialize empty results
    $results = [];
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
    <style>
        .search-container {
            width: 300px;
            margin: 20px auto;
        }
        input[type="text"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }
        .results {
            list-style: none;
            padding: 0;
        }
        .result-item {
            padding: 10px;
            border: 1px solid #eee;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>

    <div class="search-container">
        <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
            <input type="text" name="search_term" placeholder="Search...">
            <button type="submit">Search</button>
        </form>
    </div>

    <div class="results">
        <?php if (!empty($results)): ?>
            <ul>
                <?php foreach ($results as $result): ?>
                    <li class="result-item"><?php echo htmlspecialchars($result); ?></li>
                <?php endforeach; ?>
                <?php if(empty($results)){
                    echo "<li>No results found.</li>";
                } ?>
            </ul>
        <?php else:
            echo "<ul><li>No results found.</li></ul>";
        endif; ?>
    </div>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic Styling - Adjust as needed */
    #search-container {
      width: 80%;
      margin: 20px auto;
      text-align: center;
    }

    #search-input {
      width: 70%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #search-results {
      margin-top: 20px;
      display: none; /* Initially hidden */
    }
  </style>
</head>
<body>

  <div id="search-container">
    <h1>Search</h1>
    <input type="text" id="search-input" placeholder="Enter search term">
    <button id="search-button">Search</button>

    <div id="search-results">
      <!-- Search results will be displayed here -->
    </div>
  </div>

  <script>
    // Get references to the search input and search results div
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResultsDiv = document.getElementById('search-results');

    // Function to perform the search
    function performSearch() {
      const searchTerm = searchInput.value.toLowerCase(); // Case-insensitive search
      const data = [
        { title: "Apple iPhone 15", description: "The latest iPhone." },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone." },
        { title: "Google Pixel 8", description: "Google's flagship phone." },
        { title: "Banana", description: "A yellow fruit." },
        { title: "Orange", description: "Another delicious fruit." }
      ];

      // Filter the data based on the search term
      const results = data.filter(item => {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the search results
      searchResultsDiv.innerHTML = ''; // Clear previous results

      if (results.length > 0) {
        results.forEach(result => {
          const resultElement = document.createElement('div');
          resultElement.innerHTML = `<strong>${result.title}</strong><br>${result.description}`;
          searchResultsDiv.appendChild(resultElement);
        });
      } else {
        searchResultsDiv.innerHTML = '<p>No results found.</p>';
      }
    }

    // Add event listeners to the search input and button
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        performSearch();
      }
    });

    searchButton.addEventListener('click', performSearch);
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    document.getElementById("search-button").addEventListener("click", function() {
      var searchTerm = document.getElementById("search-input").value;

      if (searchTerm.trim() === "") {
        // Do nothing if the input is empty
        return;
      }

      //  Replace this with your actual search logic
      var results = search(searchTerm);

      displayResults(results);
    });

    // Example search function (replace with your real search)
    function search(searchTerm) {
      // This is just a placeholder.  Replace with your database or other search logic
      var results = [
        "Result 1 for " + searchTerm,
        "Result 2 for " + searchTerm,
        "Result 3 for " + searchTerm
      ];
      return results;
    }

    // Function to display search results
    function displayResults(results) {
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      if (results.length === 0) {
        resultsDiv.innerHTML = "<p>No results found.</p>";
        return;
      }

      for (var i = 0; i < results.length; i++) {
        var resultItem = document.createElement("p");
        resultItem.textContent = results[i];
        resultsDiv.appendChild(resultItem);
      }
    }
  </script>

</body>
</html>


<?php
// ... (HTML code from above) ...

  function search($searchTerm) {
    // Example database connection (replace with your actual connection)
    $host = 'localhost';
    $username = 'your_username';
    $password = 'your_password';
    $database = 'your_database';

    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Construct the query (sanitize inputs properly in a real application!)
    $query = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'"; // Assuming you have a "title" column
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      $results = [];
      while ($row = $result->fetch_assoc()) {
        $results[] = $row['title']; // Adjust this based on your table structure
      }
    } else {
      $results = [];
    }

    $conn->close();
    return $results;
  }
?>


<!DOCTYPE html>
<html>
<head>
<title>Search Example</title>
<style>
  /* Basic styling - customize as needed */
  #search-bar {
    width: 300px;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Ensures padding and border are included in width */
  }

  #search-button {
    padding: 8px 15px;
    background-color: #4CAF50; /* Green */
    color: white;
    border: none;
    cursor: pointer;
  }

  #search-button:hover {
    background-color: #3e8e41;
  }

  #results {
    margin-top: 20px;
  }

</style>
</head>
<body>

<h1>Search Example</h1>

<input type="text" id="search-bar" placeholder="Enter search term">
<button id="search-button">Search</button>

<div id="results">
  <!-- Search results will be displayed here -->
</div>

<script>
  // JavaScript code to handle the search
  document.getElementById('search-button').addEventListener('click', function() {
    var searchTerm = document.getElementById('search-bar').value.toLowerCase(); // Get the search term and convert to lowercase
    var resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = ''; // Clear previous results

    // *** Replace this with your actual search logic ***
    // This is just an example - you'll need to adapt it to your data source
    var data = [
      { title: "Apple iPhone 14", description: "The latest iPhone with amazing features." },
      { title: "Samsung Galaxy S23", description: "A powerful Android phone." },
      { title: "Google Pixel 7", description: "Google's flagship phone." },
      { title: "Amazon Echo Dot", description: "The popular smart speaker." },
      { title: "Sony WH-1000XM5", description: "Noise cancelling headphones." }
    ];

    if (searchTerm === "") {
      resultsDiv.innerHTML = "<p>Please enter a search term.</p>";
      return;
    }

    // Simple search - search by title or description
    data.forEach(function(item) {
      if (item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm)) {
        var listItem = document.createElement('div');
        listItem.innerHTML = '<strong>' + item.title + '</strong><br>' + item.description;
        listItem.style.margin = '5px 0'; // Add some spacing
        resultsDiv.appendChild(listItem);
      }
    });

    if (resultsDiv.innerHTML === "") {
      resultsDiv.innerHTML = "<p>No results found for '" + searchTerm + "'.</p>";
    }
  });
</script>

</body>
</html>


<?php

// Include your database connection file (assuming it's named 'db_connect.php')
// This file should contain the database connection details.
require_once 'db_connect.php';

// Get the search term from the form (if submitted)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$search_term = htmlspecialchars(trim($search_term));

// Escape the search term for the database query (prevents SQL injection)
$search_term = mysqli_real_escape_string($conn, $search_term);

//  Option 1: Search in a table named 'products'
//  This example assumes you have a table named 'products' with a column named 'name'

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <!-- Search Form -->
  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter product name" value="<?php echo $search_term; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    // Display search results
    if (mysqli_num_rows($result) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>Product Name: " . $row['name'] . ", ID: " . $row['id'] . "</li>"; //Adjust keys based on your table structure
      }
      echo "</ul>";
    } else {
      echo "<p>No products found matching your search term.</p>";
    }
  ?>

</body>
</html>


<?php

// Example search bar code - Basic implementation

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm)); 

  // Perform the search (replace with your actual search logic)
  $results = searchDatabase($searchTerm); // Example function

  // Display the results
  echo "<div class='search-results'>";
  if (empty($results)) {
    echo "No results found for: " . $searchTerm;
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
  echo "</div>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-results {
      margin-top: 20px;
      border: 1px solid #ccc;
      padding: 10px;
    }
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

  <h1>Search</h1>

  <form action="" method="post">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// Example using mysqli:
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }

// --- Example Data (replace with your actual database results) ---
// This simulates retrieving data from a table.
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A delicious red fruit.'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit, great for potassium.'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit, full of Vitamin C.'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, sweet berries.'],
    ['id' => 5, 'name' => 'Strawberry', 'description' => 'Red, juicy berries, popular for desserts.'],
];

// --- Search Bar HTML ---
?>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["REQUEST_URI"]); ?>">
  <input type="text" name="search" placeholder="Search..." value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>">
  <button type="submit">Search</button>
</form>

<?php

// --- Search Logic ---

if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']);

    // Perform the search
    $searchResults = [];
    foreach ($data as $item) {
        // Case-insensitive search on name AND description
        $name = strtolower($item['name']);
        $description = strtolower($item['description']);
        if (strpos($name, $searchTerm) !== false || strpos($description, $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }

    // Display the search results
    if (!empty($searchResults)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($searchResults as $result) {
            echo "<li>ID: " . $result['id'] . ", Name: " . $result['name'] . ", Description: " . $result['description'] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
    }
} else {
  // If no search term is provided, display the original data
  echo "<h2>Data:</h2>";
  echo "<ul>";
  foreach ($data as $item) {
      echo "<li>ID: " . $item['id'] . ", Name: " . $item['name'] . ", Description: " . $item['description'] . "</li>";
  }
  echo "</ul>";
}


?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you're using a variable called $conn

// Get the search term from the user (using GET method)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape the search term for use in the query
$searchTerm = $conn->real_escape_string($searchTerm); // Use real_escape_string for mysqli

//  Database table name (replace with your actual table name)
$tableName = 'your_table_name';

// Build the SQL query (example: searching in a column named 'name')
$sql = "SELECT * FROM $tableName WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<ul>";
        // Output the results
        while($row = $result->fetch_assoc()) {
            echo "<li>" . $row['name'] . "</li>";  // Replace 'name' with the actual column name
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }
    ?>

</body>
</html>


<?php
// ... (Database connection setup)

// Get the search term
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term
$searchTerm = htmlspecialchars(trim($searchTerm));

// Build the query using a prepared statement
$sql = "SELECT * FROM $tableName WHERE name LIKE ?";

// Prepare the statement
$stmt = $conn->prepare($sql);

// Bind the parameter
$stmt->bind_param("s", $searchTerm);  // "s" indicates a string

// Execute the query
$result = $stmt->execute();

// Get the results
$result = $stmt->get_result();

// Output the results
if ($result->num_rows > 0) {
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
        echo "<li>" . $row['name'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found.</p>";
}

// Close the statement
$stmt->close();
?>


<?php

// Basic Search Bar Implementation

// Get the search query from the form
$search_query = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the input (important for security - prevents XSS)
$search_query = htmlspecialchars(trim($search_query));

// Perform the search (replace this with your actual database query or logic)
$results = searchData($search_query); // Example function defined below

// Output the search bar form
echo '<form action="search_results.php" method="get">';
echo 'Search: <input type="text" name="search" value="' . $search_query . '">';
echo '<input type="submit" value="Search">';
echo '</form>';

// Display the search results (only if any results were found)
if (!empty($results)) {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($results as $result) {
        echo '<li>' . $result . '</li>';
    }
    echo '</ul>';
} else {
    echo '<p>No results found for: ' . $search_query . '</p>';
}

// Example function to simulate searching data
function searchData($query) {
    // Replace this with your actual database query logic
    // This is just an example to demonstrate the output.

    $data = [
        'Product 1',
        'Product 2 - Amazing Features',
        'Product 3 - Excellent Value',
        'Product 4 - Highly Recommended',
        'Product 5 - Great Price'
    ];

    $results = [];
    foreach ($data as $item) {
        if (strpos($item, $query) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}

?>


function searchData($query) {
    // *** DO NOT USE ECHO/SQL IN THIS FUNCTION - USE PARAMETERIZED QUERIES ***
    // This is for illustration only.

    $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    $stmt = $db->prepare("SELECT * FROM products WHERE name LIKE :search OR description LIKE :search");
    $stmt->execute(['search' => '%' . $query . '%']); // Use '%' for wildcard

    $results = [];
    foreach ($stmt->fetchAll(PDO::FETCH_COLUMN) as $row) {
        $results[] = $row;
    }

    return $results;
}


<?php

// Sample search data (replace with your actual data source - e.g., database)
$products = [
    ['id' => 1, 'name' => 'Laptop'],
    ['id' => 2, 'name' => 'Mouse'],
    ['id' => 3, 'name' => 'Keyboard'],
    ['id' => 4, 'name' => 'Monitor'],
    ['id' => 5, 'name' => 'Tablet'],
];

// Get the search term from the search bar (using $_GET)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent XSS)
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search
$searchResults = [];
foreach ($products as $product) {
    // Case-insensitive comparison
    if (stripos($product['name'], $searchTerm) !== false) {  //Use stripos for case-insensitive search
        $searchResults[] = $product;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

<h1>Search Products</h1>

<form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
</form>

<?php if (empty($searchResults)): ?>
    <p>No products found matching your search.</p>
<?php else: ?>
    <ul>
        <?php foreach ($searchResults as $product): ?>
            <li>
                <a href="product.php?id=<?php echo $product['id']; ?>"><?php echo $product['name']; ?></a>
            </li>
        <?php endforeach; ?>
    </ul>
<?php endif; ?>

</body>
</html>


<?php

// Function to display the search bar
function displaySearchForm($searchTerm = "") {
  ?>
  <form action="search.php" method="get">
    <input type="text" name="q" placeholder="Search..." value="<?php echo htmlspecialchars($searchTerm); ?>" />
    <button type="submit">Search</button>
  </form>
  <?php
}

// Example Usage (e.g., within your main page or a sidebar)
displaySearchForm();

//  If you want to handle the search results on the 'search.php' page:

// Example of processing the search query (search.php)
if (isset($_GET['q'])) {
  $searchTerm = $_GET['q'];

  // Sanitize the search term - IMPORTANT!  Prevent SQL injection or XSS.
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);  
  $searchTerm = htmlspecialchars($searchTerm);

  // Your search logic here.  This is just an example.
  echo "<p>You searched for: " . $searchTerm . "</p>";

  // Example: Searching a database (replace with your actual database code)
  // $results = searchDatabase($searchTerm);
  // echo "<ul>";
  // foreach ($results as $result) {
  //   echo "<li>" . $result . "</li>";
  // }
  // echo "</ul>";
}
?>


<?php
// Assuming you have a database connection established elsewhere (e.g., in a configuration file)

// Function to search the database
function searchDatabase($searchTerm) {
    // Replace with your database connection details
    $host = "localhost";
    $username = "your_username";
    $password = "your_password";
    $database = "your_database";

    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $query = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'";  // Use LIKE for partial matches
    $result = $conn->query($query);

    $rows = array();
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $rows[] = $row['title']; // Assuming 'title' is the column you want to display
        }
    }

    $conn->close();
    return $rows;
}


//  (The rest of the code from the first example - displaySearchForm,  etc.  should be here too)

if (isset($_GET['q'])) {
  $searchTerm = $_GET['q'];

  $results = searchDatabase($searchTerm);
  echo "<p>You searched for: " . $searchTerm . "</p>";
  echo "<ul>";
  foreach ($results as $result) {
    echo "<li>" . $result . "</li>";
  }
  echo "</ul>";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box;
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." onkeyup="search()" size="30">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // Example data (replace with your actual data source)
      var data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry", "Pineapple", "Mango"
      ];

      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm) > -1) {
          var listItem = document.createElement("p");
          listItem.textContent = data[i];
          resultsDiv.appendChild(listItem);
        }
      }
    }
  </script>

</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Basic validation - you can add more complex validation here
  if (empty($searchTerm)) {
    $message = "Please enter a search term.";
  } else {
    // Perform your search logic here.
    // This is just an example; you'll replace it with your database query,
    // array search, or other search method.
    $results = search($searchTerm); // Call a function to perform the search

    // Display the results
    if (is_array($results)) {
      echo "<p>Search results for: <strong>" . $searchTerm . "</strong></p>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for: <strong>" . $searchTerm . "</strong></p>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


function search($searchTerm) {
  // This is just a placeholder. Replace with your actual search logic.
  // Example:  Search through an array of strings
  $myArray = array(
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "apple pie"
  );

  $results = array();
  foreach ($myArray as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }
  return $results;
}


function search($searchTerm) {
  $conn = mysqli_connect("your_db_host", "your_db_user", "your_db_password", "your_db_name");
  if (mysqli_connect_errno($conn)) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    return false;
  }

  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // Using LIKE for partial matches

  $result = mysqli_query($conn, $sql);

  if ($result) {
    $results = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $results[] = $row['name'];  // Or any other relevant field
    }
    mysqli_free_result($result); // Free the result set
    return $results;
  } else {
    return false;
  }

  mysqli_close($conn);
}


function search($searchTerm) {
  $conn = mysqli_connect("your_db_host", "your_db_user", "your_db_password", "your_db_name");

  if (mysqli_connect_errno($conn)) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    return false;
  }

  $stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ?"); // Prepare the statement
  if ($stmt) {
    mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // Bind the parameter (type: string)
    mysqli_stmt_execute($stmt);                // Execute the statement

    $result = mysqli_stmt_get_result($stmt);
    $results = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $results[] = $row['name'];
    }
    mysqli_free_result($result);
    mysqli_stmt_close($stmt);
  } else {
    echo "Error preparing statement: " . mysqli_error($conn);
  }
  mysqli_close($conn);
  return $results;
}


<?php

// Assume you have a database connection established.
// This example uses a simplified database connection for demonstration.
// Replace this with your actual database connection code.
// For example:
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Sample Data (for demonstration purposes only - replace with your database query)
$data = [
    ["id" => 1, "name" => "Apple"],
    ["id" => 2, "name" => "Banana"],
    ["id" => 3, "name" => "Orange"],
    ["id" => 4, "name" => "Grape"],
];

// Get the search term from the request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));


// Perform the search
$searchResults = [];
foreach ($data as $item) {
    // Case-insensitive search
    if (stripos($item['name'], $searchTerm) !== false) {
        $searchResults[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>" />
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found.</p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>ID: <?php echo $result['id']; ?> - Name: <?php echo $result['name']; ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you want to search a table named 'products' with a column named 'name'

// Get the search term from the GET request (if provided)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and XSS attacks
$search_term = htmlspecialchars(trim($search_term));

// Validate the search term -  important for security and usability
if (empty($search_term)) {
    $results = []; // Return an empty array if no search term is provided
} else {
    // Prepare the SQL query -  VERY IMPORTANT for security
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

    // Execute the query
    $result = mysqli_query($db, $sql);

    if ($result) {
        $results = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row;
        }
    } else {
        // Handle query error
        echo "Error: " . mysqli_error($db);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="GET" action="">
        <input type="text" name="search" value="<?php echo $search_term; ?>" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

    <?php
    // Display the search results
    if (!empty($results)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($results as $product) {
            echo "<li>" . $product['name'] . " - " . $product['description'] . "</li>"; // Assuming 'name' and 'description' columns exist
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a form to collect the search query
// This example assumes the form is inside a simple HTML structure

// 1.  Form for the Search Query
?>
<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Your Content</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php

  // 2.  Handle the Search Query
  if ($_SERVER["REQUEST_METHOD"] == "GET") {
    $search_term = htmlspecialchars($_POST["search_term"]); // Sanitize the input

    // Your logic here to search through your data (e.g., database, array)
    //  This is a placeholder.  Replace with your actual search logic.

    if ($search_term != "") {
      echo "<p>You searched for: " . $search_term . "</p>";
      // Example: Search through an array (replace with your actual data source)
      $data = ["apple", "banana", "orange", "grapefruit", "kiwi"];
      $results = array_filter($data, function($item) use ($search_term) {
        return stripos($item, $search_term) !== false; // Case-insensitive search
      });

      if (count($results) > 0) {
        echo "<ul>";
        foreach ($results as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found.</p>";
      }
    }
  }

?>

</body>
</html>


<?php

// This is a basic example.  For production, you'll want a more robust solution
// that handles security, input sanitization, database queries, and potentially
// caching for performance.

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (VERY IMPORTANT!)
// This example uses a very basic sanitize function.  You should use a more robust
// sanitization function in a production environment.
$searchTerm = htmlspecialchars(trim($searchTerm));

// **Important:  Replace this with your database query logic!**
// This is just a placeholder.
function searchDatabase($term) {
    //  In a real application, you'd connect to your database here and 
    //  execute a SQL query.  This example just returns some dummy data.
    $results = [];
    if (empty($term)) {
        return $results;
    }

    // Simulate database results based on the search term
    $data = [
        ['id' => 1, 'name' => 'Apple'],
        ['id' => 2, 'name' => 'Banana'],
        ['id' => 3, 'name' => 'Orange'],
        ['id' => 4, 'name' => 'Grape'],
    ];

    foreach ($data as $item) {
        if (stripos($item['name'], $term)) {  // Case-insensitive search
            $results[] = $item;
        }
    }

    return $results;
}


// Perform the search
$searchResults = searchDatabase($searchTerm);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search Bar</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for <strong><?php echo htmlspecialchars($searchTerm); ?></strong></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <?php echo htmlspecialchars($result['name']); ?> (ID: <?php echo htmlspecialchars($result['id']); ?>)
                </li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// You'll need to replace this with your actual database connection

// Database connection (example - adapt to your setup)
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }

// Get the search term from the input field (using $_GET or $_POST)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';
// Alternatively, if you want to use $_POST:
// $search_term = isset($_POST['search']) ? $_POST['search'] : '';

// Sanitize the search term to prevent SQL injection
$search_term = htmlspecialchars(trim($search_term));

// Escape the search term for use in the query (important for security)
$search_term = $conn->real_escape_string($search_term);

// Get the table name to search (can be passed as a parameter or hardcoded)
$table_name = 'products'; // Replace with your table name

// Build the search query
$query = "SELECT * FROM " . $table_name . " WHERE ";

// Add the search clause based on the search term and the column to search
if (!empty($search_term)) {
  $query .= "`name` LIKE '%" . $search_term . "%'";  // Search in the 'name' column
  // You can modify this to search in other columns (e.g., `description`)
  // $query .= " OR `description` LIKE '%" . $search_term . "%'";
}


// Execute the query
$result = $conn->query($query);

// Display the results
echo "<form method='get' action='search_results.php'>
       <input type='text' name='search' value='" . $search_term . "' placeholder='Search...' >
       <button type='submit'>Search</button>
     </form>";

if ($result->num_rows > 0) {
  echo "<ul>";
  while($row = $result->fetch_assoc()) {
    echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adjust column names
  }
  echo "</ul>";
} else {
  echo "No results found for '" . $search_term . "'.";
}

// Close the database connection (optional, but good practice)
$conn->close();

?>


<?php
// ... (Database connection using PDO) ...

$search_term = isset($_GET['search']) ? $_GET['search'] : '';
$search_term = htmlspecialchars($search_term); // Still important for XSS

$stmt = $conn->prepare("SELECT * FROM " . $table_name . " WHERE `name` LIKE :search");
$stmt->bindValue(':search', '%' . $search_term . '%'); // Bind the value
$stmt->execute();

$result = $stmt->fetchAll(PDO::FETCH_ASSOC);

if ($result) {
  echo "<ul>";
  foreach ($result as $row) {
    echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
  }
  echo "</ul>";
} else {
  echo "No results found for '" . $search_term . "'.";
}

$conn->close();
?>


<?php

// Assuming you have a form with an input field named 'search_term'

if (isset($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Sanitize the input to prevent XSS and SQL injection
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // **Database Connection (Replace with your actual database credentials)**
  $servername = "localhost";
  $username = "your_username";
  $password = "your_password";
  $dbname = "your_database_name";

  try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    exit; // Stop execution if the database connection fails
  }

  // **Query Construction (Adjust based on your database schema)**
  $sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $stmt = $conn->prepare($sql);
  $stmt->execute();

  // Fetch the results
  $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // **Display Results (Customize based on your needs)**
  if (count($results) > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>ID</th><th>Column1</th><th>Column2</th></tr></thead>";  // Customize header based on your columns
    echo "<tbody>";
    foreach ($results as $row) {
      echo "<tr>";
      echo "<td>" . $row['id'] . "</td>"; // Assuming 'id' is your primary key
      echo "<td>" . $row['column1'] . "</td>"; // Replace with your actual column names
      echo "<td>" . $row['column2'] . "</td>";
      echo "</tr>";
    }
    echo "</tbody></table>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }

} else {
  // If no search term is provided, display a placeholder or a simple search box.
  echo "<form method='get' action=''>"; // Adjust 'action' to the correct URL
  echo "<input type='text' name='search' placeholder='Enter search term...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

// Close the database connection (important!)
$conn = null;
?>


<?php

// Assuming you have a database connection established and a table named 'products' with a 'name' column
// Example: $db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm); // Prevents XSS

// You can add more sanitization here based on your data and requirements.
// For example, you might want to strip out unwanted characters or limit the length.


// Query the database
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // Use LIKE for partial matches
$stmt = $db->prepare($sql);
$stmt->execute();

// Fetch the results
$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Display the search results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Search Products</h1>

  <form action="" method="GET">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (count($results) > 0) { ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $product) { ?>
        <li>
          <?php echo $product['name']; ?> - <?php echo $product['description']; ?> (ID: <?php echo $product['id']; ?>)
        </li>
      <?php } ?>
    </ul>
  <?php } else { ?>
    <p>No products found matching your search term.</p>
  <?php } ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar</title>
  <style>
    /* Basic Styling - Customize to your needs */
    #search-container {
      width: 80%;
      margin: 20px auto;
      text-align: center;
    }

    #search-input {
      width: 70%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #search-results {
      margin-top: 20px;
      display: none; /* Initially hidden */
    }

    .result-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <h1>Search</h1>
    <input type="text" id="search-input" placeholder="Enter search term...">
    <button id="search-button">Search</button>

    <div id="search-results">
      <!-- Search results will be displayed here -->
    </div>
  </div>


  <script>
    document.getElementById('search-button').addEventListener('click', function() {
      var searchTerm = document.getElementById('search-input').value.toLowerCase();
      var searchResultsDiv = document.getElementById('search-results');
      searchResultsDiv.style.display = 'block'; // Show results

      // *** Replace this with your actual search logic ***
      // This is just a placeholder for demonstration purposes.
      var data = [
        { title: "Example Title 1", description: "This is a description for example title 1." },
        { title: "Another Title", description: "A different description." },
        { title: "Search Term 1", description: "A description matching the search term." },
        { title: "Yet Another Title", description: "Something completely different." }
      ];

      var results = [];
      for (var i = 0; i < data.length; i++) {
        if (data[i].title.toLowerCase().includes(searchTerm) || data[i].description.toLowerCase().includes(searchTerm)) {
          results.push(data[i]);
        }
      }


      // Clear previous results
      searchResultsDiv.innerHTML = '';

      // Display the results
      if (results.length > 0) {
        results.forEach(function(result) {
          var resultDiv = document.createElement('div');
          resultDiv.className = 'result-item';
          resultDiv.innerHTML = '<h3>' + result.title + '</h3><p>' + result.description + '</p>';
          resultDiv.appendChild(resultDiv);
        });
      } else {
        searchResultsDiv.innerHTML = '<p>No results found.</p>';
      }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - Important for security!
$searchTerm = htmlspecialchars(trim($searchTerm));

// Validate the search term - (Optional, but recommended)
if (empty($searchTerm)) {
    $results = []; // Return an empty array if the search term is empty
} else {
    // Construct the SQL query
    $tableName = 'your_table_name';  // Replace with your table name
    $columnName = 'your_column_name'; // Replace with the column you want to search in
    $sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%$searchTerm%'";

    // Execute the query
    $result = mysqli_query($db, $sql); // Replace $db with your database connection

    if ($result) {
        $results = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row;
        }
    } else {
        // Handle query error
        echo "Error executing query: " . mysqli_error($db);
    }
}

?>

<!DOCTYPE html>
<html>
<head>
<title>Search Example</title>
</head>
<body>

<h1>Search Results</h1>

<form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <input type="submit" value="Search">
</form>

<?php if (!empty($results)): ?>

    <table>
        <thead>
            <tr>
                <th>Column 1</th>
                <th>Column 2</th>
                <!-- Add more columns as needed -->
            </tr>
        </thead>
        <tbody>
            <?php foreach ($results as $row): ?>
                <tr>
                    <td><?php echo $row['column1_name']; ?></td>
                    <td><?php echo $row['column2_name']; ?></td>
                    <!-- Add more columns as needed -->
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

<?php else: ?>
    <p>No results found for "<?php echo $searchTerm; ?>"</p>
<?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and a table named 'products' with a 'name' column.

// 1. Get the search term from the form
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];
} else {
  $searchTerm = ''; // Reset search term if not provided
}

// 2. Prepare the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 3. Execute the query
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Search products..." value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result) {
    if (mysqli_num_rows($result) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . htmlspecialchars($row['name']) . " - " . htmlspecialchars($row['price']) . "</li>"; // Adjust for other columns if needed
      }
      echo "</ul>";
    } else {
      echo "<p>No products found matching your search.</p>";
    }
  } else {
    echo "<p>Error executing query.</p>";
  }
  ?>

</body>
</html>


<?php
// ... (database connection)

// Get the search term
$searchTerm = $_GET['search'];

// Prepare the statement
$stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ?");

if ($stmt) {
    // Bind the parameter
    mysqli_stmt_bind_param($stmt, "s", "%" . $searchTerm . "%"); // "s" indicates a string parameter

    // Execute the query
    mysqli_stmt_execute($stmt);

    // Get the result
    $result = mysqli_stmt_get_result($stmt);

    if ($result) {
        // ... (Process the result like before)
    } else {
        echo "<p>Error executing prepared statement.</p>";
    }

    // Close the statement
    mysqli_stmt_close($stmt);
} else {
    echo "<p>Error preparing statement.</p>";
}
?>


<?php

// Simple search bar example

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (Important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));  // Prevents XSS

// Perform the search (example: case-insensitive search)
if ($searchTerm) {
  $results = [];
  // In a real application, you'd replace this with your database query
  // or other search logic.  This is just a demo.

  // Example: Search within an array of data
  $data = [
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "mango",
    "pineapple"
  ];

  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) {
      $results[] = $item;
    }
  }


  // Display the results
  if (count($results)) {
    echo "<h3>Search Results for: " . htmlspecialchars($searchTerm) . "</h3>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
  }
}
?>

<!-- HTML to display the search bar -->
<form action="" method="get">
  <input type="text" name="search" placeholder="Search..." value="<?php echo htmlspecialchars($searchTerm); ?>">
  <input type="submit" value="Search">
</form>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling - customize as needed */
    .search-container {
      width: 300px;
      margin: 0 auto;
    }
    .search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important to include padding and border in the element's total width */
    }
    .search-button {
      padding: 10px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    .results {
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" placeholder="Search...">
    <button class="search-button" onclick="performSearch()">Search</button>
  </div>

  <div id="results" class="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.querySelector('.search-input').value;

      //  Implement your search logic here.
      //  This is just a placeholder example - replace with your actual logic.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Placeholder example - Replace this with your actual search code.
      var resultsHTML = "<ul>";
      for (var i = 0; i < 5; i++) {
        resultsHTML += "<li>Result " + (i + 1) + "</li>";
      }
      resultsHTML += "</ul>";

      document.getElementById('results').innerHTML = resultsHTML;
    }
  </script>

</body>
</html>


<?php
// Example data (replace with your actual data source)
$data = [
  "apple", "banana", "cherry", "date", "elderberry"
];

function performSearch() {
  $searchTerm = $_POST['search_term']; // Get search term from the form

  if (empty($searchTerm)) {
    echo "<p>Please enter a search term.</p>";
    return;
  }

  $resultsHTML = "<ul>";
  foreach ($data as $item) {
    if (strtolower($item) === strtolower($searchTerm)) { // Case-insensitive search
      $resultsHTML .= "<li>" . $item . "</li>";
    }
  }
  $resultsHTML .= "</ul>";

  document.getElementById('results').innerHTML = resultsHTML;
}

// Code to handle the form submission and trigger the search
?>


<?php

// Example usage:  This is a basic example and needs to be adapted to your specific needs.

// 1. Get the search query from the search bar (using GET or POST)
//    Let's assume you're using GET method.  For POST, you would use $_POST['search_term'].

$search_term = isset($_GET['search']) ? $_GET['search'] : ''; // Get the search term from the GET request.  Empty string if no 'search' parameter is present.

// 2. Sanitize the search term (VERY IMPORTANT!)
//   This prevents SQL injection and other vulnerabilities.  This example uses simple trimming and escaping.  For production, use a robust escaping function.
$search_term = trim($search_term);  // Remove leading/trailing whitespace
$search_term = htmlspecialchars($search_term); // Escape HTML characters

// 3. Perform the search (replace this with your actual search logic)
$results = [];  // Array to store search results

if ($search_term) {
    // **IMPORTANT:** Replace this with your actual search logic
    // This is just a placeholder example.

    // Example 1:  Simple string search in a fixed list:
    $data = [
        "apple", "banana", "cherry", "date", "fig", "grape"
    ];

    $results = array_filter($data, function($item) use ($search_term) {
        return stripos($item, $search_term) !== false; // Case-insensitive search
    });
    
    // Example 2:  Search in a database (replace with your database connection and query)
    /*
    $conn = new mysqli("localhost", "username", "password", "database_name");
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $query = "SELECT * FROM your_table WHERE name LIKE '%" . $search_term . "%'"; // IMPORTANT: STILL Sanitize your query!
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $results[] = $row;
        }
    }

    $conn->close();
    */
}

// 4. Display the search bar and the results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="get" action="">  <!--  method="get" means the search term will be sent in the URL.  method="post" would send it as a POST request. -->
        <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

    <?php if (!empty($results)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($results as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>  <!-- Escape each result before displaying -->
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($search_term); ?></p>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and have a table named 'products' with a 'name' column.

// Get the search term from the search box
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and escape the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($db, $sql); // Replace $db with your database connection

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if (mysqli_num_rows($result) > 0) {
      // Display the search results
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No products found matching your search term.</p>";
    }
  ?>

</body>
</html>


  $db = mysqli_connect("localhost", "username", "password", "database_name");
  if (!$db) {
      die("Connection failed: " . mysqli_connect_error());
  }
  

* **Error Handling:**  The `if (!$db)` block now checks for a failed connection and prints an error message.  This is essential for debugging.

* **Dynamic Form Input:**  The `value="<?php echo $searchTerm; ?>"` in the input field automatically fills the search box with the last search term entered, which provides a better user experience.

* **Result Display:** The code now iterates through the `$result` and displays the product names in a list (`<ul>`).  Handles the case where no results are found.

* **Conciseness and Readability:** The code is formatted for better readability and uses more descriptive variable names.

* **Best Practices:** Uses `mysqli_fetch_assoc` which is the standard way to fetch a row as an associative array.

**How to Use This Code:**

1. **Set up your database:**  Create a database and a table named `products` (or whatever you choose).  Make sure the table has a `name` column.
2. **Connect to your database:**  Establish the database connection using `mysqli_connect()` as shown above, making sure to replace the placeholders with your database credentials.  **Never hardcode credentials in a production environment.**  Use environment variables or a configuration file.
3. **Copy the PHP code:** Copy the code into a `.php` file (e.g., `search.php`).
4. **Upload to your web server:**  Upload the file to your web server's directory (e.g., `htdocs`, `www`).
5. **Access the file in your browser:**  Open the file in your web browser (e.g., `http://localhost/search.php`).

**Important Security Considerations:**

* **Never store passwords directly in your code.** Use prepared statements or parameterized queries to prevent SQL injection. The example shows sanitization of the search term, but for production, using prepared statements is much more robust.
* **Limit search terms:**  Consider implementing rate limiting or using a search index (like Elasticsearch) for large datasets to improve performance and prevent abuse.
* **User Input Validation:**  While the `htmlspecialchars()` function handles HTML entities, you might want to add additional validation to check for expected characters or patterns in the search term to further enhance security and prevent unexpected behavior.

**Example with Prepared Statements (More Secure - Recommended for Production):**



<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust as needed */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchBox" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchBox").value;

      // Do something with the search term.  This is where you'd
      // implement your actual search logic.
      // For example, you might call a function to search a database.

      if (searchTerm) {
        alert("You searched for: " + searchTerm); // Replace with your search results
        // Example:  Call a function to perform the search
        // performSearch(searchTerm);
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established in a separate part of your code.
// $conn would be your database connection object.

function performSearch($searchTerm) {
  // Example database query (replace with your actual query)
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; //Use LIKE for partial matches

  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Process the results
    while ($row = $result->fetch_assoc()) {
      // Do something with the $row data (e.g., display in a table)
      echo "Product Name: " . $row["name"] . "<br>";
      echo "Price: " . $row["price"] . "<br>";
      echo "<br>";
    }
  } else {
    echo "No results found.";
  }
}

// Inside your search() function (adjust as needed)
function search() {
  var searchTerm = document.getElementById("searchBox").value;
  if (searchTerm) {
    performSearch(searchTerm);
  } else {
    alert("Please enter a search term.");
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic Styling - Customize as needed */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    .search-input {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    .search-button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    .search-button:hover {
      background-color: #3e8e41;
    }

    .results {
      margin-top: 20px;
      border: 1px solid #ddd;
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" class="search-input" placeholder="Search...">
    <button id="searchButton" class="search-button">Search</button>
  </div>

  <div id="results" class="results" style="display: none;">
    <!-- Results will be displayed here -->
  </div>

  <script>
    // Get references to the input and button elements
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const resultsDiv = document.getElementById('results');

    // Add an event listener to the button
    searchButton.addEventListener('click', function() {
      // Get the search term
      const searchTerm = searchTerm.trim();

      // Perform your search logic here
      // Example:  Search a simple array of strings
      const data = ["Apple", "Banana", "Orange", "Grape", "Strawberry"];

      // Filter the data based on the search term
      const filteredData = data.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));

      // Display the results
      if (filteredData.length > 0) {
        resultsDiv.innerHTML = `<h3>Search Results:</h3><ul>`;
        filteredData.forEach(item => {
          resultsDiv.innerHTML += `<li>${item}</li>`;
        });
        resultsDiv.innerHTML += `</ul>`;
        resultsDiv.style.display = 'block'; // Show the results
      } else {
        resultsDiv.innerHTML = '<p>No results found.</p>';
        resultsDiv.style.display = 'block';
      }
    });

    // Handle Enter key press (alternative to button click)
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        this.focus();  // Keep the input focused
        // You can also trigger the search logic here if desired
        //  (e.g., call the same function as the button click)
      }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db is your database connection)
// and you want to search through a table named 'products' with a column 'name'

// 1. Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize the search term (Important for security)
$searchTerm = htmlspecialchars(trim($searchTerm)); 

// 3. Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 4. Execute the query
$result = mysqli_query($db, $sql); // Assuming $db is your mysqli connection

// 5. Display the results (or an error message if no results are found)
echo "<form method='GET'>
      <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search products...'>
      <button type='submit'>Search</button>
    </form>";

if (mysqli_num_rows($result) > 0) {
  echo "<ul>";
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adjust based on your product table structure
  }
  echo "</ul>";
} else {
  echo "<p>No products found matching your search.</p>";
}


// Close the database connection when you're done.
mysqli_close($db);

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    const searchInput = document.getElementById('search-input');
    const resultsDiv = document.getElementById('results');
    const searchTerm = ""; // Default search term

    searchInput.addEventListener('keyup', function(event) {
      const searchTerm = searchInput.value.toLowerCase();

      // Clear previous results
      resultsDiv.innerHTML = '';

      // Check if there's a search term
      if (searchTerm !== "") {
        // Example data (replace with your actual data source)
        const data = [
          { text: "Apple", id: 1 },
          { text: "Banana", id: 2 },
          { text: "Orange", id: 3 },
          { text: "Grape", id: 4 },
          { text: "Mango", id: 5 }
        ];

        // Filter the data based on the search term
        const filteredData = data.filter(item => item.text.toLowerCase().includes(searchTerm));

        // Display the filtered results
        if (filteredData.length > 0) {
          filteredData.forEach(item => {
            const listItem = document.createElement('li');
            listItem.textContent = item.text + " (ID: " + item.id + ")";
            resultsDiv.appendChild(listItem);
          });
        } else {
          // No results found
          resultsDiv.innerHTML = "<p>No results found.</p>";
        }
      }
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("searchResults");

      //  Replace this with your actual search logic
      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = ""; // Clear previous results
        return;
      }

      // Example:  Just displaying the search term
      resultsDiv.innerHTML = "<p>You searched for: " + searchTerm + "</p>";

      //  More complex search logic here, e.g.,
      //  - Fetch data from a database
      //  - Filter data based on the search term
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic Styling - Adjust as needed */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; /* Ensures padding doesn't affect width */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="searchItems()">Search</button>
  </div>

  <script>
    function searchItems() {
      var searchTerm = document.getElementById("searchInput").value;
      if (searchTerm.trim() === "") {
        // Do nothing if search term is empty
        return;
      }

      // **Important: Replace this with your actual search logic**
      // This example just logs the search term to the console.
      console.log("Searching for: " + searchTerm);

      // **Example:  Search through an array**
      var items = ["Apple", "Banana", "Orange", "Grape", "Strawberry"];
      var results = items.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display results in a dropdown or elsewhere.
      if (results.length > 0) {
        alert("Search Results:
" + results.join("
"));
      } else {
        alert("No results found for: " + searchTerm);
      }
    }
  </script>

</body>
</html>


<?php
  $searchTerm = $_GET['search']; // Get search term from URL
  $escapedSearchTerm = htmlspecialchars($searchTerm, ENT_QUOTES, 'UTF-8'); //Escape the search term

  // Now you can safely use $escapedSearchTerm in your database query
  // Example (replace with your actual query)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $escapedSearchTerm . "%'";
?>


<?php

// Function to handle the search bar
function search_results($search_term) {
  // Sanitize the search term (important for security)
  $search_term = htmlspecialchars(strip_tags($search_term));

  //  Example:  Assume you have an array of data to search through
  $data = [
    ['name' => 'Apple iPhone 14', 'description' => 'A great phone!'],
    ['name' => 'Samsung Galaxy S23', 'description' => 'Powerful and stylish.'],
    ['name' => 'Google Pixel 7', 'description' => 'Excellent camera.'],
    ['name' => 'OnePlus 11', 'description' => 'Fast performance and great value.'],
  ];

  // Perform the search
  $results = [];
  foreach ($data as $item) {
    // Case-insensitive search
    if (stripos($item['name'], $search_term) !== false || stripos($item['description'], $search_term) !== false) {
      $results[] = $item;
    }
  }

  // Return the results
  return $results;
}

// ---  HTML for the search bar  ---
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term..." required>
    <button type="submit">Search</button>
  </form>

  <?php
  // --- Process the search (if a form submission)  ---
  if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Get the search term from the form
    $search_term = isset($_GET["search"]) ? $_GET["search"] : '';

    // Get the search results
    $results = search_results($search_term);

    // Display the results
    if (count($results) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result['name'] . " - " . $result['description'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
    }
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume $db is your database connection object

// Function to handle the search query
function performSearch($search_term, $table_name, $columns) {
  // Sanitize the search term to prevent SQL injection
  $search_term = mysqli_real_escape_string($db, $search_term);

  // Build the SQL query
  $sql = "SELECT * FROM " . $table_name . " WHERE ";

  // Add the search clause to all columns in the $columns array
  foreach ($columns as $column) {
    $sql .= "{$column} LIKE '%" . $search_term . "%'";

    // Add an "OR" operator if it's not the last column
    if (count($columns) > $column) {
      $sql .= " OR ";
    }
  }

  $result = mysqli_query($db, $sql);

  if ($result) {
    return $result;
  } else {
    return false; // Indicate an error
  }
}


// --- Example Usage ---

// 1. Get the search term from the form (e.g., using an HTML form)
$search_term = isset($_POST['search_term']) ? $_POST['search_term'] : '';

// 2. Define the table and columns to search
$table_name = 'products'; // Change this to your table name
$columns = ['name', 'description', 'category']; // Columns to search in

// 3. Perform the search
$search_result = performSearch($search_term, $table_name, $columns);


// 4. Display the results (or an empty message if no results)
if ($search_result) {
  echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>";
  echo "<table border='1'>";
  while ($row = mysqli_fetch_assoc($search_result)) {
    echo "<tr>";
    foreach ($row as $key => $value) {
      echo "<td>" . htmlspecialchars($value) . "</td>"; // Escape values for output
    }
    echo "</tr>";
  }
  echo "</table>";
} else {
  echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h2>Search Products</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <input type="text" name="search_term" value="<?php echo isset($search_term) ? htmlspecialchars($search_term) : ''; ?>">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and a table named 'products' with a 'name' column.

// Get the search query from the form
$search_term = isset($_POST['search']) ? $_POST['search'] : '';

// Sanitize the search term - VERY IMPORTANT!
$search_term = htmlspecialchars(trim($search_term)); //Escapes HTML and removes whitespace

// Basic search logic
if ($search_term != '') {
  // Construct the SQL query (Example using mysqli)
  $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

  // Execute the query
  $result = mysqli_query($connection, $query);

  // Display the results
  if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . $row['name'] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No products found matching your search.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="POST" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo isset($_POST['search']) ? htmlspecialchars($search_term) : ''; ?>">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 0 auto;
      margin-top: 20px;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 10px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 5px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchBox" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>


  <script>
    function search() {
      // Get the value from the search box
      var searchTerm = document.getElementById("searchBox").value;

      // Check if the search term is empty
      if (searchTerm === "") {
        alert("Please enter a search term.");
        return;
      }

      // **Replace this with your actual search logic**
      // This is just a placeholder example.  You'll likely want to
      // make an AJAX request to your server to perform the search
      // against your data.

      // Example:  Display a simple message
      alert("Searching for: " + searchTerm);

      // Simulate a search - you'd replace this with your data retrieval code.
      // For example, fetch data from a database or an array.

    }
  </script>

</body>
</html>


<?php
// Assuming you have a function called `searchData()` that performs the search
// and returns an array of results.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Replace this with your actual search logic
  $results = searchData($searchTerm);

  echo json_encode($results); // Send the results as JSON
}
?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin: 20px;
    border: 1px solid #ccc;
    padding: 10px;
  }
  .search-input {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Important for consistent sizing */
  }
  .search-button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
  }
  .results {
    margin-top: 20px;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" class="search-input" placeholder="Search..." id="searchInput">
  <button class="search-button" onclick="search()">Search</button>
</div>

<div class="results" id="results">
  <!-- Search results will be displayed here -->
</div>

<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value;
    var resultsDiv = document.getElementById("results");

    // **Replace this with your actual search logic**
    // This is just a placeholder example.
    if (searchTerm.trim() === "") {
      resultsDiv.innerHTML = ""; // Clear previous results
      return;
    }

    // Example:  Let's assume your data is in an array called 'items'
    var items = [
      "Apple",
      "Banana",
      "Orange",
      "Grape",
      "Strawberry"
    ];

    var results = [];
    for (var i = 0; i < items.length; i++) {
      if (items[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
        results.push(items[i]);
      }
    }

    if (results.length > 0) {
      var resultsHTML = "<ul>";
      for (var j = 0; j < results.length; j++) {
        resultsHTML += "<li>" + results[j] + "</li>";
      }
      resultsHTML += "</ul>";
      resultsDiv.innerHTML = resultsHTML;
    } else {
      resultsDiv.innerHTML = "No results found.";
    }
  }
</script>

</body>
</html>


<?php
// Assuming you have a database connection established
// (e.g., $conn = mysqli_connect("localhost", "user", "password", "database");)

function searchDatabase($searchTerm) {
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Example - Adjust the table/column names.
  $result = mysqli_query($conn, $query);

  $products = [];
  if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
      $products[] = $row;
    }
    mysqli_free_result($result); // Free the result set
  } else {
    // Handle database error
    error_log("Database error: " . mysqli_error($conn));
  }

  return $products;
}

// Call the function
$searchResults = searchDatabase($searchTerm);

// Display the results (similar to the previous example, but using $searchResults)
// ...
?>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the input to prevent XSS vulnerabilities
  $searchTerm = htmlspecialchars($searchTerm);

  //  You can perform further validation here (e.g., check length, allowed characters)
  //  For example:
  //  if (strlen($searchTerm) > 50) {
  //    $searchTerm = ''; // Or display an error message
  //  }

  //  Display the search term for demonstration.  In a real application,
  //  you would use this in your database query, etc.
  echo "<p>You searched for: <strong>" . $searchTerm . "</strong></p>";

  //  Example:  Simulating a database search (replace with your actual query)
  //  This is just for demonstration.  Do NOT use this directly in a real application
  //  without proper sanitization and security measures.
  //  $results = searchDatabase($searchTerm);
  //  if ($results) {
  //    echo "<p>Search Results:</p>";
  //    echo "<ul class='results'>";
  //    foreach ($results as $result) {
  //      echo "<li>" . $result . "</li>";
  //    }
  //    echo "</ul>";
  //  } else {
  //    echo "<p>No results found.</p>";
  //  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <input type="text" name="search_term" placeholder="Enter search term">
      <button type="submit">Search</button>
    </form>
  </div>

</body>
</html>


<?php
// Connect to your database (replace with your credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
  // Set the PDO error mode to exception
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  die("Connection failed: " . $e->getMessage());
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Sanitize (still important for other reasons, like preventing XSS)
  $searchTerm = htmlspecialchars($searchTerm);

  // Prepare the SQL statement
  $stmt = $conn->prepare("SELECT * FROM your_table WHERE your_column LIKE :search_term");  // Replace your_table and your_column

  // Bind the parameter
  $stmt->bindParam(':search_term', $searchTerm, PDO::PARAM_STR);

  // Execute the query
  $stmt->execute();

  // Fetch the results
  $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

  if ($results) {
    echo "<p>Search Results:</p>";
    echo "<ul class='results'>";
    foreach ($results as $row) {
      echo "<li>" . $row["your_column"] . "</li>";  // Replace your_column
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you want to search a table named 'products' with a column named 'name'

// 1. Get the search term from the search bar
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

// 2. Escape the search term for security (prevents SQL injection)
$searchTerm = $searchTerm; // The `htmlspecialchars()` above handles this.  No need to repeat.

// 3. Build the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// 4. Execute the query
$result = mysqli_query($db, $query); // Replace $db with your database connection variable

// 5. Display the results (or an empty message if no results)
if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// 6.  Clean up and prevent XSS (extra security layer, good practice)
mysqli_free_result($result); // Important to free memory
?>

<!DOCTYPE html>
<html>
<head>
<title>Search Products</title>
</head>
<body>

<h2>Search Products</h2>

<form method="GET">
  <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
  <input type="submit" value="Search">
</form>

</body>
</html>


<?php

// Assume $db is your established database connection

// Get the search term
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

// Prepare the statement
$stmt = mysqli_prepare($db, "SELECT * FROM products WHERE name LIKE ?");

// Bind the parameter
mysqli_stmt_bind_param($stmt, "s", $searchTerm); // "s" indicates a string

// Execute the statement
mysqli_stmt_execute($stmt);

// Get the result
$result = mysqli_stmt_get_result($stmt);

// Display the results
if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['name'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// Free the result set and close the statement
mysqli_free_result($result);
mysqli_stmt_close($stmt);

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
      margin-top: 20px;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <script>
    function performSearch() {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      const items = document.querySelectorAll('.search-item'); // Replace with your actual data source

      items.forEach(item => {
        if (item.textContent.toLowerCase().includes(searchTerm)) {
          item.style.display = 'block'; // Or however you want to highlight results
        } else {
          item.style.display = 'none';
        }
      });
    }
  </script>

  <!-- Example Data (Replace with your actual data) -->
  <div class="search-item">Item 1 - This is a test item.</div>
  <div class="search-item">Item 2 - Another item for testing.</div>
  <div class="search-item">Item 3 -  Testing with different keywords.</div>
  <div class="search-item">Item 4 -  This is completely unrelated.</div>

  <style>
    .search-item {
      margin-bottom: 10px;
      border: 1px solid #eee;
      padding: 10px;
      display: none; // Initially hide all items
    }
  </style>
</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }


// **Simplified Example - No Database Connection**
// This example demonstrates a basic search bar without connecting to a database.
// It's for demonstration purposes and will only search through a static array.

$search_terms = array(
    "apple",
    "banana",
    "orange",
    "grape",
    "mango",
    "pineapple",
    "strawberry"
);

if (isset($_GET["search"])) {
    $search_term = trim($_GET["search"]);
    if (empty($search_term)) {
        $results = []; // Clear results if the search term is empty
    } else {
        $results = [];
        foreach ($search_terms as $term) {
            if (stripos($term, $search_term) !== false) { // Case-insensitive search
                $results[] = $term;
            }
        }
    }
} else {
    $results = []; // No search term provided
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Fruit</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter fruit name">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($results)) { ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($results as $result) { ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php } ?>
        </ul>
    <?php } ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling - customize as needed */
    .search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 3px;
      box-sizing: border-box; /* Important for consistent sizing */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will appear here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = "Please enter a search term.";
        return;
      }

      // **Replace this with your actual search logic**
      // This is just a placeholder to demonstrate the concept
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry"
      ];

      var resultsHtml = "";
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
          resultsHtml += "<p>" + data[i] + "</p>";
        }
      }

      if (resultsHtml === "") {
        resultsDiv.innerHTML = "No results found.";
      } else {
        resultsDiv.innerHTML = resultsHtml;
      }
    }
  </script>

</body>
</html>


<?php
// Assume this is a PHP script that handles the search
// This is just a basic example - adapt to your database

$searchTerm = $_GET["search"]; // Get search term from the URL

// Database connection (replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPassword = "your_password";
$dbName = "your_database";

$conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Example SQL query (replace with your actual query)
$sql = "SELECT * FROM your_table WHERE name LIKE '%" . $searchTerm . "%'";  //Use LIKE for partial matches

$result = $conn->query($sql);

$resultsHtml = "";
if ($result->num_rows > 0) {
  while($row = $result->fetch_assoc()) {
    $resultsHtml .= "<p>" . $row["name"] . "</p>"; //Adjust column names as needed
  }
}

$conn->close();

echo $resultsHtml;
?>


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the search term
  $searchTerm = filter_input(INPUT_POST, "search", FILTER_SANITIZE_STRING);

  // Escape the search term to prevent XSS vulnerabilities
  $searchTerm = htmlspecialchars($searchTerm);

  // Store the search term in a session variable for persistence
  session_start();
  $_SESSION["search_term"] = $searchTerm;

  // Redirect to the results page (replace this with your actual logic)
  header("Location: search_results.php?search=" . urlencode($searchTerm));
  exit(); // Important to stop further script execution
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// Replace 'your_database_connection' with your actual database connection object.
// For example:
// $db = new mysqli("localhost", "username", "password", "database_name");

// Check for database connection errors
if (!$db) {
  die("Database connection failed");
}

// Get the search term from the form input
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = $db->real_escape_string($searchTerm);

// Escape special characters for use in SQL queries
$searchTerm = str_replace(["--", "/*", "//"], "", $searchTerm);

// Example: Search in a table named 'products' with a column named 'name'
// You'll need to adjust the query based on your specific table and column names.
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $db->query($query);

// Check for query errors
if (!$result) {
    die("Query failed: " . $db->error);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  // Display the search results
  if ($result->num_rows > 0) {
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row['name'] . "</td>"; // Replace 'name' with your actual column name
      // Add other columns here as needed
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No products found matching your search term.</p>";
  }
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Ensures padding doesn't affect width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>


  <?php
    // Example data - Replace with your actual data source
    $data = [
      "apple", "banana", "cherry", "date", "elderberry", "fig"
    ];


    if (isset($_GET['search']) && !empty($_GET['search'])) {
      $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input

      $results = [];
      foreach ($data as $item) {
        if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
          $results[] = $item;
        }
      }

      if (!empty($results)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($results as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
      }

    } else {
      echo "<p>Enter your search term above.</p>";
    }
  ?>

</body>
</html>


<?php
// Database connection details (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = htmlspecialchars($_GET['search']);

  // Example query (adjust to your table and column names)
  $sql = "SELECT * FROM items WHERE name LIKE '%" . $searchTerm . "%'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>" . $row["name"] . "</li>"; // Assuming 'name' is your column name
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }
} else {
  echo "<p>Enter your search term above.</p>";
}

$conn->close();
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you want to search through a table named 'products' with a column named 'name'

// Example database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Escape the search term to prevent SQL injection
$searchTerm = $conn->real_escape_string($searchTerm);

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
  <style>
    #search-bar {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
      margin-bottom: 10px;
    }

    #results {
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <h1>Search Products</h1>

  <input type="text" id="search-bar" placeholder="Enter search term">

  <div id="results">
    <?php
    if ($result->num_rows > 0) {
      echo "<ul>";
      while ($row = $result->fetch_assoc()) {
        echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "No results found.";
    }
    ?>
  </div>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar</title>
  <style>
    /* Basic Styling - Adjust as needed */
    #search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      overflow: hidden; /* Important for clip: rect() to work properly */
    }

    #search-input {
      width: 80%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box; /* Important for width calculation */
    }

    #search-button {
      background-color: #4CAF50; /* Green */
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-left: 5px;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }

  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <script>
    // JavaScript to handle the search button click
    document.getElementById('search-button').addEventListener('click', function() {
      var searchTerm = document.getElementById('search-input').value;

      // Perform your search logic here.  This is just an example.
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Echo the search term back to the page
      // You'd replace this with your actual search function
      alert("You searched for: " + searchTerm);

      // Example:  Sending the search term to a PHP script
      // fetch('your_php_script.php?search_term=' + encodeURIComponent(searchTerm))
      //   .then(response => response.json())
      //   .then(data => {
      //     // Process the data from your PHP script
      //     console.log(data);
      //   })
      //   .catch(error => console.error('Error:', error));
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume you have a connection variable called $conn

// Get the search term from the search bar
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (very important to prevent SQL injection)
$search_term = htmlspecialchars(trim($search_term));

// Escape the search term for use in the SQL query
$search_term = $conn->real_escape_string($search_term);  //  Use real_escape_string for mysqli

//  Alternatively,  use prepared statements for even better security:
//  $stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ? OR description LIKE ?");
//  $stmt->bind_param("s", $search_term, $search_term);
//  $stmt->execute();



//  Example:  Searching a table named 'products' with columns 'name' and 'description'

$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'";

$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Search..." value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result->num_rows > 0) {
      echo "<ul>";
      // Output each row as a list item
      while($row = $result->fetch_assoc()) {
        echo "<li>";
        echo "<strong>" . htmlspecialchars($row['name']) . "</strong> - " . htmlspecialchars($row['description']) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// Replace these with your actual connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search query from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
// You should use proper escaping for your database system here, 
// e.g., mysqli_real_escape_string() or PDO's prepare statements.
// This is a basic example and should be improved for security.
$search_term = $conn->real_escape_string($search_term);

// SQL query for searching
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'";

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<ul>";
        // Output each row of the result
        while ($row = $result->fetch_assoc()) {
            echo "<li>";
            // Display the columns you want to show. Replace with your table columns.
            echo "<strong>" . htmlspecialchars($row["your_column_name_1"]) . "</strong>: " . htmlspecialchars($row["your_column_name_2"]) . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// Replace these with your actual connection details
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search query from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important - even though prepared statements largely handle this)
$search_term = $conn->real_escape_string($search_term);

// SQL query for searching using prepared statements
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE ?";

// Prepare the statement
$stmt = $conn->prepare($sql);

// Bind the parameter
$stmt->bind_param("s", $search_term); // "s" indicates a string parameter

// Execute the query
$result = $stmt->execute();

// Fetch the results
if ($result) {
    while ($row = $stmt->fetch_assoc()) {
        echo "<li>";
        echo "<strong>" . htmlspecialchars($row["your_column_name_1"]) . "</strong>: " . htmlspecialchars($row["your_column_name_2"]) . "<br>";
        echo "</li>";
    }
} else {
    echo "<p>Error executing query.</p>";
}

$stmt->close();
$conn->close();
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent width */
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("searchResults");

      // Example data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 15", description: "The latest iPhone" },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone" },
        { title: "Google Pixel 8", description: "Google's flagship phone" },
        { title: "Amazon Echo Dot", description: "A smart speaker" },
        { title: "JavaScript Tutorial", description: "Learn JavaScript programming" }
      ];

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Filter the data based on the search term
      for (var i = 0; i < data.length; i++) {
        if (data[i].title.toLowerCase().includes(searchTerm) ||
            data[i].description.toLowerCase().includes(searchTerm)) {
          var listItem = document.createElement("div");
          listItem.innerHTML = `<p>${data[i].title}</p>
                                <p>${data[i].description}</p>`;
          resultsDiv.appendChild(listItem);
        }
      }

      // If no results are found
      if (resultsDiv.innerHTML === "") {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar in PHP</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box; /* Important for consistent sizing */
  }
</style>
</head>
<body>

<div class="search-container">
  <form method="GET" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>
</div>

<?php
// Example data (replace with your actual data source)
$data = [
  "apple", "banana", "cherry", "date", "elderberry",
  "fig", "grape", "honeydew", "kiwi", "lemon"
];

if (isset($_GET['search_term'])) {
  $searchTerm = htmlspecialchars($_GET['search_term']);
  $searchResults = [];

  foreach ($data as $item) {
    if (strpos($item, $searchTerm) !== false) {
      $searchResults[] = $item;
    }
  }

  if (!empty($searchResults)) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }
}
?>

</body>
</html>


<?php

// Simulate a database or data source (replace with your actual data source)
$products = [
    'Laptop - Dell XPS 13' => 'Dell XPS 13',
    'Gaming Mouse - Logitech G502' => 'Logitech G502',
    'Wireless Headphones - Sony WH-1000XM5' => 'Sony WH-1000XM5',
    'Smartphone - Samsung Galaxy S23' => 'Samsung Galaxy S23',
    'Tablet - Apple iPad Air' => 'Apple iPad Air',
    'Keyboard - Corsair K95 RGB' => 'Corsair K95 RGB',
];

// Function to search products
function searchProducts($searchTerm, $products) {
    $results = [];
    $searchTermLower = strtolower($searchTerm); // Convert search term to lowercase

    foreach ($products as $key => $productName) {
        $productNameLower = strtolower($productName);
        if (strpos($productNameLower, $searchTermLower) !== false) {
            $results[$key] = $productName;
        }
    }
    return $results;
}

// Get the search term from the form (using GET method - you can change this to POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
    <style>
        .search-container {
            margin: 20px;
        }
        .search-bar {
            width: 300px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }
        .search-results {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        .result-item {
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #eee;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <div class="search-container">
        <form action="" method="GET">
            <input type="text" class="search-bar" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Search products...">
            <button type="submit">Search</button>
        </form>

        <?php if (!empty($searchResults)) { ?>
            <div class="search-results">
                <h2>Search Results:</h2>
                <?php foreach ($searchResults as $key => $productName) { ?>
                    <div class="result-item">
                        <strong><?php echo htmlspecialchars($productName); ?></strong>
                    </div>
                <?php } ?>
            </div>
        <?php } else { ?>
            <p>No products found matching your search.</p>
        <?php } ?>
    </div>

</body>
</html>


<?php

// Basic Search Bar Implementation

// Get the search term from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = trim($_POST["searchTerm"]);

  // Sanitize the search term (important for security!)
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

  // Optional:  Further sanitize (e.g., remove special characters)
  // $searchTerm = preg_replace('/[^a-zA-Z0-9\s]/', '', $searchTerm);

  // Perform the search (replace with your actual search logic)
  $results = searchDatabase($searchTerm); // Call a function to do the search

  // Display the results
  echo "<form method='post' action=''>";
  echo "<input type='text' name='searchTerm' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";

  if (!empty($results)) {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
} else {
  // If not a POST request, display the search form
  echo "<form method='post' action=''>";
  echo "<input type='text' name='searchTerm' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}


//  Example Search Database Function (replace with your actual database logic)
function searchDatabase($searchTerm) {
  // This is a placeholder.  Replace this with your database query.
  // This example just returns some dummy data.

  $data = [
    "Product A",
    "Product B - New Version",
    "Product C - Old Version",
    "Document 1 - Important"
  ];

  $results = [];
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }
  return $results;
}

?>


<?php

// Function to handle the search bar
function search_results($search_term) {
  // Sanitize the search term - important for security
  $search_term = htmlspecialchars(trim($search_term)); 

  // Perform the search - this is where you'll connect to your data source

  // Example: Searching through an array of products
  $products = [
    "apple pie" => "Delicious apple pie recipe",
    "banana bread" => "Moist banana bread recipe",
    "chocolate cake" => "Rich chocolate cake recipe",
    "strawberry shortcake" => "Classic strawberry shortcake recipe",
    "blueberry muffin" => "Perfect blueberry muffin recipe",
  ];

  $results = [];
  foreach ($products as $key => $value) {
    if (stripos($key, $search_term) !== false) { // Case-insensitive search
      $results[] = [
        "name" => $key,
        "description" => $value,
      ];
    }
  }

  return $results;
}


// Get the search term from the form (if submitted)
$search_term = isset($_GET['search']) ? $_GET['search'] : ''; 

// Perform the search when the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    $results = search_results($search_term);
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <input type="text" name="search" value="<?php echo $search_term; ?>" placeholder="Search...">
      <button type="submit">Search</button>
    </form>
  </div>

  <?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <table border="1">
      <thead>
        <tr>
          <th>Name</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($results as $result) { ?>
          <tr>
            <td><?php echo htmlspecialchars($result["name"]); ?></td>
            <td><?php echo htmlspecialchars($result["description"]); ?></td>
          </tr>
        <?php } ?>
      </tbody>
    </table>
  <?php } else { ?>
    <p>No results found for <?php echo htmlspecialchars($search_term); ?></p>
  <?php } ?>

</body>
</html>


<?php

// Database credentials (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

try {
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
} catch (Exception $e) {
  die("Connection failed: " . $e->getMessage());
}


function search_results_db($search_term) {
  $search_term = htmlspecialchars(trim($search_term));

  $query = "SELECT name, description FROM products WHERE name LIKE '%" . $search_term . "%'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $results = [];
    while ($row = $result->fetch_assoc()) {
      $results[] = [
        "name" => $row["name"],
        "description" => $row["description"],
      ];
    }
    return $results;
  } else {
    return [];
  }
}

if ($_SERVER["REQUEST_METHOD"] == "GET") {
  $results = search_results_db($search_term);
}

// Close the database connection (important!)
$conn->close();

// ... (rest of the HTML code remains the same)
?>


<?php

// This is a simplified example. For a production environment,
// you would likely use a more robust search library or framework.

// Assume you have a database connection established
// $db = new mysqli("localhost", "username", "password", "database_name");
// if (!$db) {
//   die("Connection failed");
// }

// Function to search data (replace with your actual database query)
function searchData($searchTerm, $data) {
  $results = [];
  foreach ($data as $item) {
    // Assuming $item is an associative array with a 'title' field
    if (stripos($item['title'], $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }
  return $results;
}

// Example Data (replace with your data source)
$my_data = [
    ['id' => 1, 'title' => 'The Lord of the Rings'],
    ['id' => 2, 'title' => 'Pride and Prejudice'],
    ['id' => 3, 'title' => 'To Kill a Mockingbird'],
    ['id' => 4, 'title' => 'The Hitchhiker\'s Guide to the Galaxy'],
    ['id' => 5, 'title' => '1984']
];


// Handle Search Input
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Perform the search
  $searchResults = searchData($searchTerm, $my_data);

  // Display the results
  echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
  if (empty($searchResults)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . htmlspecialchars($result['title']) . " (ID: " . $result['id'] . ")</li>";
    }
    echo "</ul>";
  }
} else {
  // Display the search form
  echo "<h2>Search</h2>";
  echo "<form method='get'>";
  echo "<input type='text' name='search' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

?>


<?php

// (Previous code from the answer goes here)

// Example Data (replace with your data source)
$my_data = [
    ['id' => 1, 'title' => 'The Lord of the Rings'],
    ['id' => 2, 'title' => 'Pride and Prejudice'],
    ['id' => 3, 'title' => 'To Kill a Mockingbird'],
    ['id' => 4, 'title' => 'The Hitchhiker\'s Guide to the Galaxy'],
    ['id' => 5, 'title' => '1984']
];

// Function to search data (replace with your database query)
function searchData($searchTerm, $data) {
  $results = [];
  foreach ($data as $item) {
    // Assuming $item is an associative array with a 'title' field
    if (stripos($item['title'], $searchTerm) !== false) {
      $results[] = $item;
    }
  }
  return $results;
}

// Handle Search Input
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Perform the search
  $searchResults = searchData($searchTerm, $my_data);

  // Display the results
  echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
  if (empty($searchResults)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . htmlspecialchars($result['title']) . " (ID: " . $result['id'] . ")</li>";
    }
    echo "</ul>";
  }
} else {
  // Display the search form
  echo "<h2>Search</h2>";
  echo "<form method='get'>";
  echo "<input type='text' name='search' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px; /* Adjust width as needed */
      margin: 0 auto; /* Center the search bar */
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Include padding and border in the element's total width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
  </div>

  <script>
    const searchInput = document.getElementById('search-input');

    searchInput.addEventListener('keyup', function() {
      const searchTerm = searchInput.value.toLowerCase();
      //  Here you would implement your search logic
      //  Example:
      //  document.querySelectorAll('.search-item').forEach(item => {
      //     if (item.textContent.toLowerCase().includes(searchTerm)) {
      //        item.style.display = 'block';
      //     } else {
      //         item.style.display = 'none';
      //     }
      // });

      // Placeholder for demonstration - just prints the search term
      console.log(searchTerm);
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
  </div>

  <script>
    const searchInput = document.getElementById('search-input');

    searchInput.addEventListener('keyup', function() {
      const searchTerm = searchInput.value.toLowerCase();
      const items = [
        { name: "Apple", description: "A red fruit" },
        { name: "Banana", description: "A yellow fruit" },
        { name: "Orange", description: "A citrus fruit" }
      ];

      document.querySelectorAll('.search-item').forEach(item => {
        if (item.textContent.toLowerCase().includes(searchTerm)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  </script>

  <div class="search-item" style="display: none;">Item 1</div>
  <div class="search-item" style="display: none;">Item 2</div>
  <div class="search-item" style="display: none;">Item 3</div>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button id="searchButton">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    // JavaScript to handle the search functionality

    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const searchResultsDiv = document.getElementById('searchResults');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();

      if (searchTerm === '') {
        searchResultsDiv.innerHTML = ''; // Clear results if search term is empty
        return;
      }

      // Simulate a search (replace with your actual search logic)
      const results = simulateSearch(searchTerm);

      if (results.length === 0) {
        searchResultsDiv.innerHTML = '<p>No results found.</p>';
      } else {
        searchResultsDiv.innerHTML = '';
        for (let i = 0; i < results.length; i++) {
          const resultItem = document.createElement('div');
          resultItem.textContent = results[i];
          resultItem.style.marginBottom = '10px';  // Add spacing between results
          resultItem.style.borderBottom = '1px solid #eee';
          resultItem.addEventListener('click', function() {
            // Add click handling for each result (e.g., navigate to a page)
            alert('Clicked: ' + results[i]);
          });
          searchResultsDiv.appendChild(resultItem);
        }
      }
    });

    // Simulate a search function (replace with your database query or API call)
    function simulateSearch(searchTerm) {
      // This is just a placeholder.  Replace this with your actual search logic.
      const simulatedResults = [
        `Result 1 for ${searchTerm}`,
        `Result 2 for ${searchTerm}`,
        `Result 3 for ${searchTerm}`
      ];
      return simulatedResults;
    }
  </script>

</body>
</html>


<?php
// ... (HTML code from above) ...

// ... (JavaScript code from above) ...

// Simulate a search function (replace with your database query)
function simulateSearch($searchTerm) {
  //  DANGER:  This is just for demonstration and is vulnerable to SQL injection.
  //  DO NOT use this in production without proper sanitization and/or prepared statements.

  // Using a prepared statement is the correct approach, but for demonstration,
  // I'll show an example.  You *must* use prepared statements in production.

  $db = mysqli_connect("your_host", "your_user", "your_password", "your_database");
  if (mysqli_connect_errno($db)) {
      echo "Failed to connect to MySQL: " . mysqli_connect_error();
      return false;
  }

  $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $db->real_escape_string($searchTerm) . "%'"; // Correct escaping

  $result = mysqli_query($db, $query);
  $rows = mysqli_fetch_all($result, MYSQLI_ASSOC);
  mysqli_close($db);
  return $rows;
}

// ... (JavaScript code from above) ...
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// You'll need to replace 'db_connection' with your actual connection details

// Sample Database Setup (replace with your actual details)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_pass = "your_password";


// Create a database connection
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
        <input type="submit" value="Search">
    </form>

    <?php

    if (isset($_GET['search_term'])) {
        $search_term = htmlspecialchars($_GET['search_term']);

        // Example: Searching in a 'products' table
        // This is just a demonstration; adapt to your actual table and columns
        $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'";

        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            echo "<ul>";
            // Output data of each row
            while($row = $result->fetch_assoc()) {
                echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
            }
            echo "</ul>";
        } else {
            echo "No results found.";
        }
    }
    ?>

</body>
</html>


$stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ? OR description LIKE ?");
$stmt->bind_param("s", "%" . $search_term . "%", "%" . $search_term . "%");
$stmt->execute();
$result = $stmt->get_result();
// ... process $result ...
$stmt->close();


<?php

// Sample data (replace with your actual data source - database, array, etc.)
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "strawberry",
    "pineapple",
    "kiwi"
];

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? trim($_GET['search']) : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search
$searchResults = [];
if ($searchTerm) {
    foreach ($items as $item) {
        // Case-insensitive comparison
        if (stripos($item, $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="GET">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php endif; ?>

</body>
</html>


<?php
// Connect to your database (replace with your credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? trim($_GET['search']) : '';

// Sanitize the search term
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search
$searchResults = [];
if ($searchTerm) {
    // SQL query with LIKE operator for case-insensitive search
    $sql = "SELECT * FROM your_table WHERE item_name LIKE '%" . $searchTerm . "%'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $searchResults[] = htmlspecialchars($row['item_name']); // Escape the output
        }
    }
}

$conn->close();

// ... (HTML structure as in the previous example) ...
?>


<?php

// This is a basic example, you'll likely need to adapt it to your specific database and application.

// Assume you have a database connection established and a $data array containing the data you want to search.
// This data could be from a database, a file, or any other source.

// Example Data (Replace this with your actual data source)
$data = [
    ['id' => 1, 'name' => 'Alice Smith', 'email' => 'alice.smith@example.com'],
    ['id' => 2, 'name' => 'Bob Johnson', 'email' => 'bob.johnson@example.com'],
    ['id' => 3, 'name' => 'Charlie Brown', 'email' => 'charlie.brown@example.com'],
];

// Check if the search term is provided
if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = $_GET['search'];
    // Sanitize the search term to prevent XSS vulnerabilities
    $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

    // Perform the search
    $searchResults = [];
    foreach ($data as $item) {
        // Case-insensitive search
        $name = strtolower($item['name']);
        $email = strtolower($item['email']);
        $searchString = strtolower($searchTerm);

        if (strpos($name, $searchString) !== false || strpos($email, $searchString) !== false) {
            $searchResults[] = $item;
        }
    }
} else {
    $searchResults = []; // Empty array if no search term is provided.
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Bar Example</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong>ID:</strong> <?php echo $result['id']; ?><br>
                    <strong>Name:</strong> <?php echo $result['name']; ?><br>
                    <strong>Email:</strong> <?php echo $result['email']; ?>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found.</p>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you want to search through a table named 'products'
// with a column named 'name'

// Get the search term from the input form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (Important for security)
$searchTerm = htmlspecialchars($searchTerm);

// Escape the search term for SQL (Prevents SQL injection)
$searchTerm = $db->real_escape_string($searchTerm); // Assuming $db is your database connection object

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $db->query($sql);

// Check if the query was successful
if ($result) {
  // Display the search results
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search products...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";

  echo "<h2>Search Results:</h2>";
  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<p>" . $row['name'] . " - " . $row['description'] . "</p>"; // Adjust columns as needed
    }
  } else {
    echo "<p>No products found matching your search.</p>";
  }
} else {
  echo "<p>Error executing the query.</p>";
  // Log the error for debugging purposes
  error_log("Error: " . $db->error);
}

?>


$searchTerm = htmlspecialchars($_GET['search']);
$stmt = $db->prepare("SELECT * FROM products WHERE name LIKE ?");
$stmt->bind_param("s", $searchTerm); // "s" indicates a string parameter
$stmt->execute();
$result = $stmt->get_result();

// ... (process the result)


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form (if present)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Check if the search term is not empty
if (!empty($searchTerm)) {

  // --- Example: Search in a table named 'products' with a 'name' column ---
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($db, $query);

  if ($result) {
    echo "<form method='get' action='search_results.php'>
          <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search products...'>
          <button type='submit'>Search</button>
        </form>";

    echo "<br>";

    // Display search results
    if (mysqli_num_rows($result) > 0) {
      echo "<h3>Search Results for: " . $searchTerm . "</h3>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<div>";
        echo "<strong>" . $row['name'] . "</strong> - " . $row['description'] . "<br>";
        echo "<a href='product_details.php?id=" . $row['id'] . "'>View Details</a><br>";
        echo "</div>";
      }
    } else {
      echo "<p>No products found matching your search.</p>";
    }

    mysqli_free_result($result); // Free the result set
  } else {
    echo "<p>Error executing the query.</p>";
    echo mysqli_error($db); // Display the error for debugging
  }

} else {
  // Display the search form if no search term is provided.
  echo "<form method='get' action='search_results.php'>
        <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search products...'>
        <button type='submit'>Search</button>
      </form>";
}

?>


<?php
// Assuming $db is your established database connection
// This script will handle displaying search results

// Get the search term from the URL (query string)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

if (!empty($searchTerm)) {
    // Execute the search query (same query as the main search page)
    $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($db, $query);

    if ($result) {
        if (mysqli_num_rows($result) > 0) {
            echo "<h3>Search Results for: " . $searchTerm . "</h3>";
            while ($row = mysqli_fetch_assoc($result)) {
                echo "<div>";
                echo "<strong>" . $row['name'] . "</strong> - " . $row['description'] . "<br>";
                echo "<a href='product_details.php?id=" . $row['id'] . "'>View Details</a><br>";
                echo "</div>";
            }
        } else {
            echo "<p>No products found matching your search.</p>";
        }
        mysqli_free_result($result);
    } else {
        echo "<p>Error executing the query.</p>";
        echo mysqli_error($db);
    }
}
?>


<?php
// Assuming $db is your established database connection
// This script will display details for a specific product

// Get the product ID from the URL
$productId = isset($_GET['id']) ? $_GET['id'] : '';

if (!empty($productId)) {
    $query = "SELECT * FROM products WHERE id = " . $productId;
    $result = mysqli_query($db, $query);

    if ($result) {
        if (mysqli_num_rows($result) == 1) {
            $product = mysqli_fetch_assoc($result);
            echo "<h3>Product Details: " . $product['name'] . "</h3>";
            echo "<img src='images/" . $product['image'] . "' alt='" . $product['name'] . "'><br>";  // Assuming you have images in an 'images' folder
            echo "<p>" . $product['description'] . "</p>";
            echo "<p>Price: $" . $product['price'] . "</p>";
        } else {
            echo "<p>Product not found.</p>";
        }
        mysqli_free_result($result);
    } else {
        echo "<p>Error executing the query.</p>";
        echo mysqli_error($db);
    }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-bar {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 8px 12px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }

  </style>
</head>
<body>

  <h1>Simple Search</h1>

  <input type="text" id="search-bar" placeholder="Search...">
  <button id="search-button">Search</button>

  <?php
    // Sample data (replace with your database query or other data source)
    $items = [
      "apple", "banana", "cherry", "date", "elderberry", "fig"
    ];

    // Handle the search button click
    if (isset($_POST['search_term'])) {
      $searchTerm = htmlspecialchars($_POST['search_term']); // Sanitize input

      // Search logic - basic case-insensitive search
      $results = [];
      foreach ($items as $item) {
        if (stripos($item, $searchTerm) !== false) {
          $results[] = $item;
        }
      }

      // Display the results
      if (!empty($results)) {
        echo "<p>Search results for: " . $searchTerm . "</p>";
        echo "<ul>";
        foreach ($results as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for: " . $searchTerm . "</p>";
      }
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is just a basic example - adjust based on your database setup

// Get search term from GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term
$searchTerm = htmlspecialchars(trim($searchTerm));

// Handle empty search
if (empty($searchTerm)) {
    $results = []; // Or display a message like "Enter search term"
} else {
    // Replace with your database query - this is a placeholder
    $results = searchDatabase($searchTerm);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="" method="get">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
  <?php endif; ?>

</body>
</html>


function searchDatabase($searchTerm) {
  // Replace with your actual database connection code
  // Assuming you have a database connection called $db

  $db = new mysqli("localhost", "username", "password", "database_name");

  if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
  }

  // Example query - adjust based on your table structure
  $query = "SELECT * FROM products WHERE name LIKE '%" . $db->real_escape_string($searchTerm) . "%'"; // Use real_escape_string to prevent SQL injection
  // IMPORTANT: Use $db->real_escape_string() to sanitize the input to prevent SQL injection attacks.

  $result = $db->query($query);

  if ($result->num_rows > 0) {
    $results = [];
    while ($row = $result->fetch_assoc()) {
      $results[] = $row['name']; // Adjust based on your product's name column
    }
  }

  $result->close();
  return $results;
}


<?php

// Simulate a database or data source (replace with your actual data source)
$products = [
    "Laptop X1",
    "Gaming Mouse Y2",
    "Wireless Keyboard Z3",
    "Monitor ABC",
    "SSD 1TB",
    "Laptop X1 Pro",
    "Gaming Mouse Y2 Plus"
];

// Get the search query from the form (using GET method - you can change this to POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$searchTerm = htmlspecialchars($searchTerm); // Always sanitize user input!

// Perform the search
$searchResults = [];
foreach ($products as $product) {
    if (stripos($product, $searchTerm) !== false) { // Case-insensitive search
        $searchResults[] = $product;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term..." value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No products found matching your search term.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $product): ?>
                <li><?php echo htmlspecialchars($product); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., $conn)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

$searchTerm = htmlspecialchars($searchTerm);

$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
$result = mysqli_query($conn, $query);  // Use your database connection here

$products = array();
while ($row = mysqli_fetch_assoc($result)) {
    $products[] = $row;
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
  <style>
    .search-container {
      margin-bottom: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term...">
    <button onclick="search()">Search</button>
  </div>


  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>



  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResultsDiv = document.getElementById("searchResults");

      // Clear previous results
      searchResultsDiv.innerHTML = "";

      // Example Data (Replace with your actual data source)
      var data = [
        { id: 1, name: "Apple", description: "A delicious fruit" },
        { id: 2, name: "Banana", description: "Another great fruit" },
        { id: 3, name: "Orange", description: "A citrus fruit" },
        { id: 4, name: "Grape", description: "Small and sweet" }
      ];

      // Perform the search
      if (searchTerm.trim() === "") {
        // Do nothing if the search term is empty
        return;
      }

      var foundItems = data.filter(function(item) {
        return item.name.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1; //Case-insensitive search
      });

      // Display the results
      if (foundItems.length > 0) {
        foundItems.forEach(function(item) {
          var listItem = document.createElement("li");
          listItem.textContent = item.name + " - " + item.description;
          searchResultsDiv.appendChild(listItem);
        });
      } else {
        var noResultsMessage = document.createElement("p");
        noResultsMessage.textContent = "No results found for '" + searchTerm + "'.";
        searchResultsDiv.appendChild(noResultsMessage);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a form to capture the search term
// Example HTML form:
// <form action="search.php" method="GET">
//   <input type="text" name="search_term" placeholder="Search...">
//   <input type="submit" value="Search">
// </form>

// PHP code to handle the search:

if ($_SERVER["REQUEST_METHOD"] == "GET") {
  $search_term = isset($_GET["search_term"]) ? trim($_GET["search_term"]) : "";

  // Perform your search logic here.
  // This is just a placeholder.  Replace this with your actual search code.

  if ($search_term != "") {
    // Example: Case-insensitive search through an array of items
    $items = [
      "apple",
      "banana",
      "orange",
      "grape",
      "pineapple"
    ];

    $results = [];
    foreach ($items as $item) {
      if (stripos($item, $search_term) !== false) {  // Case-insensitive
        $results[] = $item;
      }
    }

    if (empty($results)) {
      echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
    } else {
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      echo "</ul>";
    }
  }
  // If no search term is provided, you can display a default message
  else {
    echo "<p>Enter a search term.</p>";
  }

}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Add your search logic here. This is just a placeholder.
      //  Replace this with your actual search functionality, e.g.,
      //  -  Query a database
      //  -  Filter an array of data

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example: Display the search term in an alert
      alert("You searched for: " + searchTerm);

      //  You could also perform a search operation here and update the
      //  content of your page based on the results.  For example:
      //  -  Update a div with an id of "searchResults"
      //  -  Change the URL (e.g., using JavaScript's location.href)
    }
  </script>

</body>
</html>


<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Replace with your actual database query
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // Simple LIKE query

  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    // Process the results and display them
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "No results found.";
  }
}
?>


<?php

// Simulate a database or data source (replace with your actual data source)
$products = [
    'apple',
    'banana',
    'orange',
    'grape',
    'kiwi',
    'mango',
    'pineapple',
    'strawberry'
];

// Function to handle the search
function searchProducts($searchTerm, $products) {
    $results = [];

    // Convert search term to lowercase for case-insensitive search
    $searchTerm = strtolower($searchTerm);

    foreach ($products as $product) {
        // Convert product name to lowercase for case-insensitive comparison
        $productLower = strtolower($product);

        if (strpos($productLower, $searchTerm) !== false) {  // strpos returns the position of the substring or false if not found
            $results[] = $product;
        }
    }

    return $results;
}

// Get the search term from the form (using GET or POST method)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from URL
// OR
// $searchTerm = isset($_POST['search']) ? $_POST['search'] : ''; // Get from form

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter product name" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No products found matching your search.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $product): ?>
                <li><?php echo htmlspecialchars($product); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// $db = new mysqli("localhost", "username", "password", "database_name");
// Check connection
// if ($db->connect_error) {
//  die("Connection failed: " . $db->connect_error);
// }

// Example database table structure (adjust to your actual table)
// CREATE TABLE products (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   name VARCHAR(255) NOT NULL,
//   description TEXT
// );

//  Search Bar HTML
echo '<input type="text" id="searchInput" placeholder="Search products...">';

// JavaScript to handle the search
echo '<script>';
echo 'document.getElementById("searchInput").addEventListener("keyup", function() {';
echo '  var searchTerm = this.value.toLowerCase();';
echo '  document.body.innerHTML = ""; // Clear previous results';
echo '  // Replace this with your actual search logic';
echo '  // Example: Filter products based on searchTerm';
echo '  // var results = filterProducts(searchTerm);';
echo '  //  If results is not empty, display them here';
echo '  //  Example: Display results in a div with id="searchResults"';
echo '});';
echo '</script>';


//  Example PHP function to filter products (replace with your logic)
function filterProducts($searchTerm) {
  // Replace this with your actual database query
  // This is just a placeholder for demonstration
  $products = [
    ['id' => 1, 'name' => 'Laptop', 'description' => 'High-performance laptop'],
    ['id' => 2, 'name' => 'Mouse', 'description' => 'Wireless mouse'],
    ['id' => 3, 'name' => 'Keyboard', 'description' => 'Ergonomic keyboard'],
    ['id' => 4, 'name' => 'Headphones', 'description' => 'Noise-cancelling headphones'],
  ];

  $results = [];
  foreach ($products as $product) {
    if (str_contains(strtolower($product['name']), $searchTerm) ||
        str_contains(strtolower($product['description']), $searchTerm)) {
      $results[] = $product;
    }
  }

  return $results;
}
?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Check if the search term is provided
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Sanitize the search term to prevent SQL injection
  $searchTerm = $conn->real_escape_string($searchTerm);

  //  Implement your search logic here.  This example searches a 'products' table
  //  and returns results.  Adapt this part to your specific needs.

  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    echo '<ul>';
    // Output the search results
    while($row = $result->fetch_assoc()) {
      echo '<li>' . $row['name'] . ' - ' . $row['description'] . '</li>';
    }
    echo '</ul>';
  } else {
    echo 'No results found for: ' . $searchTerm;
  }
}
?>

<form action="" method="get">
  <input type="text" name="search" placeholder="Search..." value="<?php echo isset($_GET['search']) ? $_GET['search'] : ''; ?>">
  <button type="submit">Search</button>
</form>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    font-size: 16px;
  }
  button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  }
  button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
  <button onclick="search()">Search</button>
</div>

<div id="searchResults">
  <!-- Search results will be displayed here -->
</div>


<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value.toLowerCase();
    var searchResultsDiv = document.getElementById("searchResults");
    searchResultsDiv.innerHTML = ""; // Clear previous results

    // **Replace this with your actual data source and search logic**
    // This is just a placeholder for demonstration
    var data = [
      "Apple",
      "Banana",
      "Orange",
      "Grape",
      "Strawberry",
      "Pineapple",
      "Mango",
      "Kiwi"
    ];

    for (var i = 0; i < data.length; i++) {
      if (data[i].toLowerCase().indexOf(searchTerm) > -1) {
        var resultItem = document.createElement("p");
        resultItem.textContent = data[i];
        resultItem.style.marginBottom = "5px"; // Add some spacing
        resultItem.style.border = "1px solid #ddd";
        resultItem.style.padding = "5px";
        resultItem.style.backgroundColor = "#f9f9f9";
        searchResultsDiv.appendChild(resultItem);
      }
    }

    if (searchResultsDiv.innerHTML === "") {
      searchResultsDiv.innerHTML = "<p>No results found.</p>";
    }
  }
</script>

</body>
</html>


<?php

// Assuming you have a form to input the search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php

  // Handle the search request
  if (isset($_GET['search_term']) && !empty($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']); // Sanitize input

    // Example: Search in a database (replace with your actual database query)
    // This is a simplified example - adjust the query to match your database schema
    $results = searchDatabase($search_term); 

    if (!empty($results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for: " . $search_term . "</p>";
    }
  }

  // Function to simulate searching a database (replace with your actual database query)
  function searchDatabase($term) {
    // This is just a placeholder.  Replace this with your database query logic.
    // This simulates retrieving results from a database.
    $results = [
      "Product A",
      "Product B - Contains " . $term,
      "Another Product - related to " . $term,
      "Product C",
    ];
    return $results;
  }

?>

</body>
</html>


function searchDatabase($term) {
  global $conn; // Assuming you have a database connection variable

  $query = "SELECT * FROM products WHERE name LIKE '%" . $conn->real_escape_string($term) . "%'"; // Use real_escape_string for security
  $result = $conn->query($query);

  $products = [];
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $products[] = $row['name']; // Or however you want to display the product name
    }
  }
  return $products;
}


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace these placeholders with your actual connection details

// $servername = "your_servername";
// $username = "your_username";
// $password = "your_password";
// $dbname = "your_database_name";

// $conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }


// Function to handle the search query
function searchDatabase($query) {
    // Replace this with your actual database query logic
    // This is just a placeholder example using a dummy database
    $results = [];

    // **Replace this with your database query logic**
    // This is a placeholder that returns dummy data based on the search term
    $searchTerm = trim($query);

    if (empty($searchTerm)) {
        return $results; // Return empty array if search term is empty
    }

    // Dummy data (replace with your database query)
    $data = [
        ['id' => 1, 'name' => 'Apple iPhone 15 Pro Max'],
        ['id' => 2, 'name' => 'Samsung Galaxy S23 Ultra'],
        ['id' => 3, 'name' => 'Google Pixel 8 Pro'],
        ['id' => 4, 'name' => 'OnePlus 12'],
        ['id' => 5, 'name' => 'Xiaomi 14 Pro'],
    ];

    foreach ($data as $item) {
        if (strpos($item['name'], $searchTerm) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}


// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchDatabase($searchTerm);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <?php if (empty($searchResults)): ?>
            <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
        <?php else: ?>
            <ul>
                <?php foreach ($searchResults as $result): ?>
                    <li>ID: <?php echo $result['id']; ?> - Name: <?php echo htmlspecialchars($result['name']); ?></li>
                <?php endforeach; ?>
                </ul>
        <?php endif; ?>
    <?php endif; ?>

</body>
</html>


$searchTerm = trim($query);

// Assuming your table is named 'products' and the search column is 'name'
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

$result = $conn->query($query);

if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        $results[] = $row;
    }
}

return $results;


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }
    .search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
    }
    .search-button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
    <button class="search-button" onclick="search()">Search</button>
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById('searchInput').value;

      //  Example:  You would replace this with your actual data processing logic.
      //  This is just a placeholder to demonstrate the search functionality.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Simulate searching through an array
      var data = ["apple", "banana", "orange", "grape", "kiwi", "mango"];

      var results = [];
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
          results.push(data[i]);
        }
      }

      // Display the results (replace this with your actual display method)
      if (results.length > 0) {
        alert("Search results: " + results.join(", "));
      } else {
        alert("No results found for '" + searchTerm + "'.");
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar with Results List</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }
    .search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    .search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    #resultsList {
      margin-top: 20px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
    <button class="search-button" onclick="search()">Search</button>
  </div>

  <ul id="resultsList"></ul>

  <script>
    function search() {
      var searchTerm = document.getElementById('searchInput').value;

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      var data = ["apple", "banana", "orange", "grape", "kiwi", "mango"];
      var results = [];

      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
          results.push(data[i]);
        }
      }

      if (results.length > 0) {
        var resultsHTML = "<ul>";
        for (var i = 0; i < results.length; i++) {
          resultsHTML += "<li>" + results[i] + "</li>";
        }
        resultsHTML += "</ul>";
        document.getElementById('resultsList').innerHTML = resultsHTML;
      } else {
        document.getElementById('resultsList').innerHTML = "<li>No results found.</li>";
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    width: 300px;
    margin: 0 auto;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    overflow: hidden;
  }

  #search-input {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: none;
    outline: none;
    border-radius: 5px;
  }

  #search-button {
    background-color: #4CAF50; /* Green */
    color: white;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
  }

  #search-button:hover {
    background-color: #3e8e41;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="search-input" placeholder="Search...">
  <button id="search-button">Search</button>
</div>

<script>
  // Get references to the input and button elements
  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('search-button');

  // Add an event listener to the button
  searchButton.addEventListener('click', function() {
    // Get the value entered in the input field
    const searchTerm = searchInput.value;

    // Prevent the form from submitting (which would refresh the page)
    event.preventDefault();

    // Check if the search term is empty
    if (searchTerm.trim() === "") {
      alert("Please enter a search term.");
      searchInput.focus(); // Set focus back to the input field
      return;
    }

    // Perform your search logic here
    // Example: Display the search term in an alert
    alert("You searched for: " + searchTerm);

    //  Replace this with your actual search function
    //  For example, you might call a function to filter your data
    //  based on the searchTerm.

    //  To avoid page reload, you should replace the alert() call
    //  with JavaScript to dynamically update your content.
  });

  // Add a "keydown" event listener to the input field
  // to trigger the search on Enter key press
  searchInput.addEventListener('keydown', function(event) {
    if (event.key === 'Enter') {
      // Perform the search
      //  Same search logic as above
      event.preventDefault(); // Prevent default form submission

      //  Example:  Call the search function here.
      alert("You searched for: " + searchTerm);
    }
  });

</script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db is your connection object)

// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and XSS attacks
$searchTerm = htmlspecialchars(trim($searchTerm)); // Trims whitespace and encodes HTML entities.

//  Escape the search term for SQL queries (important for security)
//  This depends on your database and how you construct your queries.
//  Example using prepared statements (recommended):
//  $stmt = $db->prepare("SELECT * FROM products WHERE name LIKE ? OR description LIKE ?");
//  $stmt->bind_param("s", "%" . $searchTerm . "%");  // s for string
//  $stmt->execute();

//  Alternative (less secure, avoid if possible):  Escaping is only as good as the code that generates the query
//  $searchTerm = str_replace("'", "''", $searchTerm); //  For escaping single quotes in MySQL.  Adapt as needed for your database.

// Perform the search (Example using a hypothetical 'products' table)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

$result = $db->query($sql);

// Check if the search returned any results
if ($result->num_rows > 0) {
  echo '<form action="" method="get">
        <input type="text" name="search" placeholder="Search... " value="' . $searchTerm . '" style="width:300px;">
        <button type="submit">Search</button>
      </form>';

  echo '<br>';

  echo '<ul>';
  // Output the search results
  while ($row = $result->fetch_assoc()) {
    echo '<li>' . $row['name'] . ' - ' . $row['description'] . '</li>';
  }
  echo '</ul>';
} else {
  echo '<p>No results found for "' . $searchTerm . '".</p>';
}

// Close the database connection (Important!)
$result->free();
$db->close();

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// $conn = mysqli_connect("localhost", "username", "password", "database_name");
// if (!$conn) {
//   die("Connection failed: " . mysqli_connect_error());
// }

// Get the search query from the form
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
//  IMPORTANT:  You MUST use proper escaping techniques here.
//  This is a basic example, and you should use prepared statements
//  for better security, especially if the search term is user-provided.
$search_term = htmlspecialchars($search_term);  // Escape special characters for HTML display


// Example query (replace with your actual database table and column names)
//  This is a very basic example.  Adapt it to your database schema.
$table_name = 'products'; // Example table name
$column_name = 'name';       // Example column to search in

$query = "SELECT * FROM $table_name WHERE $column_name LIKE '%$search_term%'";


// Execute the query
// $result = mysqli_query($conn, $query);
// or using prepared statements (recommended for security):
// $stmt = mysqli_prepare($conn, "SELECT * FROM $table_name WHERE $column_name LIKE ?");
// mysqli_stmt_bind_param($stmt, "s", $search_term);
// mysqli_stmt_execute($stmt);
// $result = mysqli_stmt_get_result($stmt);


// Process the results
$results = [];
if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        $results[] = $row;
    }
    mysqli_free_result($result); // Free the result set
}


// Display the search bar and the results
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($results)) {
    echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
  } else {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($results as $row) {
      echo "<li>" . htmlspecialchars($row['name']) . " - " . htmlspecialchars($row['description']) . "</li>"; // Adapt based on your database fields
    }
    echo "</ul>";
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume you have a variable $db is your database connection object

// Example database setup (replace with your actual details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$db = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}


// Function to handle the search query
function searchData($db, $searchTerm) {
  // Sanitize the search term to prevent SQL injection
  $searchTerm = $db->real_escape_string($searchTerm);

  // Build the SQL query
  $sql = "SELECT * FROM your_table_name WHERE column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = $db->query($sql);

  // Prepare the results
  $results = array();
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $results[] = $row;
    }
  }

  return $results;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Your Data</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php

  // Check if a search term was submitted
  if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = $_GET['search'];

    // Call the searchData function
    $searchResults = searchData($db, $searchTerm);

    // Display the search results
    if (count($searchResults) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($searchResults as $row) {
        echo "<li>" . $row['column_name'] . "</li>"; // Replace 'column_name' with the actual column you want to display
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $searchTerm . "'.</p>";
    }
  }
  ?>


</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      margin: 20px;
      width: 300px;
    }
    #search-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    #search-results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results"></ul>

  <script>
    // Get references to the elements
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    // Function to handle the search
    function performSearch() {
      const searchTerm = searchInput.value.toLowerCase(); // Convert to lowercase for case-insensitive search

      // Simulate a search (replace with your actual search logic)
      const data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry", "Pineapple", "Mango", "Watermelon"
      ];

      const results = data.filter(item => item.toLowerCase().includes(searchTerm));

      // Display the results
      searchResults.innerHTML = ''; // Clear previous results

      if (results.length > 0) {
        results.forEach(item => {
          const listItem = document.createElement('li');
          listItem.textContent = item;
          searchResults.appendChild(listItem);
        });
      } else {
        searchResults.innerHTML = '<p>No results found.</p>';
      }
    }

    // Add event listeners
    searchButton.addEventListener('click', performSearch);
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        performSearch();
      }
    });
  </script>

</body>
</html>


<?php
// ... (HTML code from above) ...

  // ... (JavaScript code from above) ...

  function performSearch() {
    const searchTerm = sanitize_input(searchInput.value.toLowerCase()); //Sanitize input
    // Assuming you have a database connection established
    $db = mysqli_connect("your_db_host", "your_db_user", "your_db_password", "your_db_name");
    if (!$db) {
      die('Connection failed: ' . mysqli_connect_error());
    }

    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($db, $sql);

    mysqli_close($db);

    // ... (rest of the search logic) ...
  }
  //Sanitize input
  function sanitize_input($data) {
      $data = trim($data);
      $data = stripslashes($data);
      $data = htmlspecialchars($data);
      return $data;
  }
?>


<?php

// Assuming you have a form to collect the search query
?>

<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
</head>
<body>

<h1>Search Example</h1>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search_term" placeholder="Enter search term..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
  <input type="submit" value="Search">
</form>

<?php

//  Example of how to handle the search term and process the data
if (isset($_GET['search_term'])) {
  $search_term = htmlspecialchars($_GET['search_term']);

  // *** IMPORTANT SECURITY CONSIDERATIONS ***
  // 1.  Input Validation and Sanitization:  This example shows basic sanitization.  
  //     You absolutely MUST add robust input validation and sanitization. 
  //     This is the most critical part of any search bar to prevent security vulnerabilities
  //     like SQL injection or cross-site scripting (XSS).  Use appropriate functions 
  //     like `filter_var()` or a dedicated sanitization library.

  // 2.  Escape for Different Output Contexts:  `htmlspecialchars()` is great for HTML output,
  //     but you might need to escape the search term differently depending on where you're 
  //     using it (e.g., in a database query).

  //  Example:  Let's assume you're searching through a database table called 'products'
  //          that has a 'name' column.

  //  ***  WARNING:  This is a VERY simplified example and MUST be adapted to your specific database and needs. ***
  //  It's vulnerable to SQL injection if not properly handled.

  //  $query = "SELECT * FROM products WHERE name LIKE '%" . $query . "%'";  //  This is dangerous.
  //  $result = mysqli_query($connection, $query); // Replace $connection with your database connection

  //  If you are using prepared statements (HIGHLY recommended for security):

  //  $query = "SELECT * FROM products WHERE name LIKE ?";
  //  $stmt = mysqli_prepare($connection, $query); // Replace $connection with your database connection
  //  mysqli_stmt_bind_param($stmt, "s", $query); // "s" for string
  //  mysqli_stmt_execute($stmt);
  //  $results = mysqli_stmt_get_result($stmt);
  //  // ... Process the $results ...


  // Example of simply displaying the search term (for demonstration)
  echo "<p>You searched for: " . htmlspecialchars($search_term) . "</p>";

}
?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust width as needed */
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Simple Search</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here
      // This is just a placeholder - replace with your actual search implementation
      if (searchTerm.length > 0) {
        alert("Searching for: " + searchTerm);  // Replace with your actual search code
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


     <?php
     $items = ["apple", "banana", "orange", "grape"];
     $searchTerm = $_GET["search"] ?? ""; // Get search term from URL (or empty if none)

     if ($searchTerm) {
       $results = [];
       foreach ($items as $item) {
         if (stripos($item, $searchTerm)) { // Case-insensitive search
           $results[] = $item;
         }
       }
       if (count($results) > 0) {
         echo "<ul>";
         foreach ($results as $result) {
           echo "<li>" . $result . "</li>";
         }
         echo "</ul>";
       } else {
         echo "<p>No results found.</p>";
       }
     } else {
       echo "<p>Please enter a search term.</p>";
     }
     ?>
     

   * **Searching a database:**  You would use a database query (e.g., `mysqli_query()` or `PDO`) to search your database tables.

   * **AJAX Search (Recommended for Better User Experience):**  Use JavaScript to send the search term to the server *without* reloading the entire page.  This provides a much smoother user experience.

   * **Using `$_GET`:**  The example above gets the search term from the URL using `$_GET["search"]`.  This is a simple way to pass the search term from the user's browser.  However, for security reasons, you should *always* validate and sanitize the input before using it in a search query.

4. **Security and Sanitization:**  *Crucially important!*  Always sanitize and validate user input to prevent security vulnerabilities (like SQL injection).  For database queries, use prepared statements or parameterized queries to avoid SQL injection.   Also, use input validation to ensure the search term is in a reasonable format.

Example of sanitization (using `mysqli` - adapt for your database):



<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the search bar
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Build the SQL query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($db, $query);

// Check for errors
if (mysqli_error($db)) {
    echo "<p style='color:red;'>Error: " . mysqli_error($db) . "</p>";
}

// Display the search results
echo "<form method='GET' action='search_results.php'>
       <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>
       <button type='submit'>Search</button>
     </form>

     <h2>Search Results:</h2>";

if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<div>";
        // Display the data from the row
        echo "<p>" . $row['your_column_name_1'] . ": " . $row['your_column_name_2'] . "</p>"; // Replace with your actual column names
        echo "</div>";
    }
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// Close the database connection (important!)
mysqli_close($db);

?>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and you're looking for data based on user input.

// 1. Get the search term from the user (from the search bar)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from GET request, default to empty string

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// 2. Prepare the SQL query
//    - Use prepared statements to prevent SQL injection attacks!
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE ?"; // Replace your_table_name and your_column_name

// Prepare the statement
$stmt = $conn->prepare($sql);

// Bind the search term to the parameter
$stmt->bind_param("s", $searchTerm); // "s" indicates a string parameter

// 3. Execute the query
$stmt->execute();

// 4. Fetch the results
$results = $stmt->get_result();

// 5. Display the results

if ($results->num_rows > 0) {
    echo "<form method='get' action='your_script.php'>  <!-- Replace your_script.php -->
        <input type='text' name='search' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>
        </form>";

    echo "<ul>";
    while ($row = $results->fetch_assoc()) {
        echo "<li>" . $row['your_column_name'] . "</li>"; // Replace your_column_name
    }
    echo "</ul>";

} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// 6. Close the statement and connection (important!)
$stmt->close();
$conn->close();

?>


<?php

// Assuming you have a database connection established and a database table named 'products'
// with a column named 'name' for the product names

// Example database connection (replace with your actual details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Check if the search term is submitted
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $conn->real_escape_string($_GET['search']); // Sanitize the input to prevent SQL injection

  // Build the SQL query
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = $conn->query($sql);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<form method='get' style='margin: 0;'>
          <input type='text' name='search' placeholder='Search products...' value='" . htmlspecialchars($searchTerm) . "'>
          <button type='submit'>Search</button>
          </form>";

    echo "<h3>Search Results:</h3>";
    while($row = $result->fetch_assoc()) {
      echo "<p>" . htmlspecialchars($row['name']) . "</p>";  // Escape to prevent XSS
    }
  } else {
    echo "<p>No products found matching your search term.</p>";
  }
} else {
  // Display the search bar if no search term is provided
  echo "<form method='get' style='margin: 0;'>
          <input type='text' name='search' placeholder='Search products...' value=''>
          <button type='submit'>Search</button>
          </form>";
}

// Close the connection
$conn->close();

?>


<?php

// Define the search term (you can also get this from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - VERY IMPORTANT to prevent XSS vulnerabilities
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search (this is a basic example; adapt for your data)
$searchResults = [];

// Example: Searching through an array of products
$products = [
    'Apple iPhone 14' => 'Red',
    'Samsung Galaxy S23' => 'Black',
    'Google Pixel 7' => 'Blue',
    'OnePlus 11' => 'White',
];

if ($searchTerm) {
    foreach ($products as $key => $value) {
        if (stripos($key, $searchTerm) !== false || stripos($value, $searchTerm) !== false) {
            $searchResults[$key] = $value;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form action="" method="get">
        <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $key => $value): ?>
                <li><?php echo htmlspecialchars($key); ?> - <?php echo htmlspecialchars($value); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Ensures padding doesn't affect width */
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // Sample data (replace with your actual data source)
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry",
        "Pineapple",
        "Mango",
        "Watermelon",
        "Kiwi",
        "Peach"
      ];

      // Filter data based on the search term
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm) !== -1) {
          var listItem = document.createElement("p");
          listItem.textContent = data[i];
          resultsDiv.appendChild(listItem);
        }
      }
    }
  </script>

</body>
</html>


<?php
  // Assuming you have a database connection established ($conn)

  $searchTerm = $_GET['search']; // Get search term from URL

  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    // Process the results here (e.g., display in a table)
    while ($row = mysqli_fetch_assoc($result)) {
      echo "Product Name: " . $row['name'] . "<br>";
      echo "Price: " . $row['price'] . "<br>";
      // ... other product details ...
    }
  } else {
    echo "No results found.";
  }
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term
$searchTerm = htmlspecialchars(trim($searchTerm));

// Check if the search term is empty
if (empty($searchTerm)) {
  // If empty, you can redirect to a default page or display a message
  // For example:
  // echo "Please enter a search term.";
  // header("Location: index.php"); // Redirect to your homepage
  // exit;
  $results = []; // Show empty results if nothing is searched
} else {
  // Perform the search query
  // Replace this with your actual database query
  $results = performSearch($searchTerm); 
}

// Function to perform the database search
function performSearch($searchTerm) {
  // This is a placeholder - replace with your actual query
  // Example using a hypothetical database connection:
  
  // Assuming you have a database connection $db
  
  $db = new mysqli("localhost", "username", "password", "database_name");

  if ($db->connect_error) {
      die("Connection failed: " . $db->connect_error);
  }

  $sql = "SELECT * FROM products WHERE name LIKE '%" . $db->real_escape_string($searchTerm) . "%'";  // Example using LIKE operator
  $result = $db->query($sql);

  $data = [];
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $data[] = $row;
    }
  }
  $db->close();

  return $data;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Price</th>
          <!-- Add other columns based on your table structure -->
        </tr>
      </thead>
      <tbody>
        <?php foreach ($results as $row) { ?>
          <tr>
            <td><?php echo $row['id']; ?></td>
            <td><?php echo $row['name']; ?></td>
            <td><?php echo $row['price']; ?></td>
            <!-- Add other data cells -->
          </tr>
        <?php } ?>
      </tbody>
    </table>
  <?php } else {
      echo "<p>No results found.</p>";
  } ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's call it $conn

// Function to handle the search query
function search_data($search_term, $table_name, $search_columns) {
  $query = "SELECT * FROM " . $table_name . " WHERE ";

  $conditions = [];
  foreach ($search_columns as $column) {
    $conditions[] = "`" . $column . "`" . " LIKE '%" . $search_term . "%'";
  }

  $query = implode(" OR ", $conditions);

  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    return $result;
  } else {
    return false;
  }
}

// Example Usage:

// 1. Get the search term from the user (e.g., from a form submission)
$search_term = $_POST['search_term'] ?? ''; // Get from POST, default to empty string

// 2. Define the table name to search in.  Replace 'products' with your table name.
$table_name = 'products';

// 3. Define the columns to search in. Replace with your column names.
$search_columns = ['name', 'description', 'category'];  // Columns you want to search

// 4. Perform the search
$results = search_data($search_term, $table_name, $search_columns);

// 5. Display the results (e.g., in a table)
if ($results) {
  echo "<h2>Search Results:</h2>";
  echo "<table border='1'>";
  echo "<thead><tr>";
  foreach ($search_columns as $column) {
    echo "<th>" . ucwords($column) . "</th>";
  }
  echo "</tr></thead>";
  echo "<tbody>";
  while ($row = $results->fetch_assoc()) {
    echo "<tr>";
    foreach ($search_columns as $column) {
      echo "<td>" . htmlspecialchars($row[$column]) . "</td>"; // Important: Use htmlspecialchars for security
    }
    echo "</tr>";
  }
  echo "</tbody>";
  echo "</table>";
} else {
  echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>"; // Securely output search term
}

?>

<!-- HTML Form to submit the search term -->
<form method="post" action="">
  <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_term); ?>">
  <input type="submit" value="Search">
</form>


// Example using a prepared statement - replace with your database library's function
$search_term = $_POST['search_term'] ?? '';

$query = "SELECT * FROM " . $table_name . " WHERE ";

$conditions = [];
foreach ($search_columns as $column) {
  $conditions[] = "`" . $column . "`" . " LIKE ?";
}

$query = implode(" OR ", $conditions);

// Assuming $conn->prepare() and $conn->execute() are your database library functions
$stmt = $conn->prepare($query);

if ($stmt) {
    $params = [];
    foreach ($search_columns as $column) {
        $params[] = "%" . $search_term . "%";
    }
    $stmt->execute($params);
} else {
    // Handle error if prepare() fails
    echo "Error preparing query.";
}

$results = $stmt->get_result();


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Example</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Search..." value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  // Example:  Search through a simple array
  $items = ["apple", "banana", "orange", "grapefruit", "kiwi"];

  if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = $_GET['search'];
    $searchResults = array_filter($items, function($item) use ($searchTerm) {
      return stripos($item, $searchTerm) !== false; //Case-insensitive search
    });

    if (!empty($searchResults)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($searchResults as $item) {
        echo "<li>" . htmlspecialchars($item) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
    }
  }
?>

</body>
</html>


<?php

// Simple Search Bar Implementation in PHP

// Initialize search term
$searchTerm = "";

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = isset($_POST["search"]) ? htmlspecialchars($_POST["search"]) : "";

  // Perform search (Replace this with your actual search logic)
  if ($searchTerm) {
    $results = performSearch($searchTerm);
    // Display the results (Replace with your desired output)
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
}

?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search" placeholder="Search..." value="<?php echo $searchTerm; ?>">
  <button type="submit">Search</button>
</form>


<?php

// This example demonstrates a basic search bar.
// You'll likely want to integrate this into a more robust application
// with database connections and proper error handling.

// Get the search term from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

  // Sanitize the search term - VERY IMPORTANT to prevent XSS
  $searchTerm = htmlspecialchars($searchTerm); 

  // Perform your search logic here.  This is just a placeholder.
  $searchResults = performSearch($searchTerm); 
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($searchTerm)) {
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    if (empty($searchResults)) {
      echo "<p>No results found.</p>";
    } else {
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      echo "</ul>";
    }
  } ?>

</body>
</html>


function performSearch($searchTerm) {
  $dbHost = "localhost";
  $dbName = "your_database_name";
  $dbUser = "your_username";
  $dbPassword = "your_password";

  $mysqli = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

  if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
  }

  $sql = "SELECT * FROM your_table WHERE title LIKE ? OR description LIKE ?";
  $stmt = $mysqli->prepare($sql);

  if ($stmt->prepare() === false) {
    die("Error preparing statement: " . $mysqli->error);
  }

  $searchTermEscaped = "%" . $mysqli->real_escape_string($searchTerm) . "%"; //Important for LIKE queries

  $stmt->bind_param("ss", $searchTermEscaped); // "ss" means two strings

  $stmt->execute();

  $results = $stmt->get_result();

  $stmt->close();
  $results->close();

  return $results; //Returns a mysqli_result object, which you'll loop through.
}


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search query from the search bar
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$search_term = htmlspecialchars($search_term);

// Build the SQL query
$table_name = 'your_table_name'; // Replace with your actual table name
$column_to_search = 'your_column_name'; // Replace with the column to search

// Escape special characters for the SQL query (important for security - prevents SQL injection)
$search_term_escaped = mysqli_real_escape_string($db, $search_term);

// Build the SQL query
$query = "SELECT * FROM $table_name WHERE $column_to_search LIKE '%$search_term_escaped%'";
//  '%': Wildcard that means "any characters"
//  'LIKE': Allows for partial matches.
//  '%' :  Matches any string of characters before the search term.
//  '$search_term_escaped':  The value of the search term, escaped for security.

// Execute the query
$result = mysqli_query($db, $query);

// Check if the query was successful
if ($result) {
    // Display the search results
    echo '<form method="get" action="' . htmlspecialchars($_SERVER['PHP_SELF']) . '">
            <input type="text" name="search" value="' . htmlspecialchars($search_term) . '" placeholder="Search...">
            <button type="submit">Search</button>
          </form>';

    echo '<table border="1">
            <thead>
                <tr>
                    <th>Column 1</th>
                    <th>Column 2</th>
                    <!-- Add more columns as needed -->
                </tr>
            </thead>
            <tbody>';

    while ($row = mysqli_fetch_assoc($result)) {
        echo '<tr>';
        foreach ($row as $column => $value) {
            echo '<td>' . htmlspecialchars($value) . '</td>';  // Escape each value
        }
        echo '</tr>';
    }

    echo '</tbody>
        </table>';

} else {
    // Handle the error (e.g., display an error message)
    echo '<p>Error: ' . mysqli_error($db) . '</p>';
}


// Close the database connection (important!)
mysqli_close($db);
?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    font-size: 16px;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchBox" placeholder="Search..." onkeyup="searchFunction()">
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchBox").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // Replace this with your actual data retrieval logic
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry",
        "Pineapple",
        "Mango",
        "Avocado"
      ];

      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm) > -1) {
          var listItem = document.createElement("p");
          listItem.textContent = data[i];
          resultsDiv.appendChild(listItem);
        }
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established
// e.g., $conn = mysqli_connect("host", "user", "password", "database");

// ... (HTML code as above) ...

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchBox").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = "";

      // SQL query (replace with your actual query and table name)
      $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
      $result = mysqli_query($conn, $sql);

      if ($result) {
        while ($row = mysqli_fetch_assoc($result)) {
          var listItem = document.createElement("p");
          listItem.textContent = $row['name'];  // Assuming 'name' is the column for product name
          resultsDiv.appendChild(listItem);
        }
        mysqli_free_result($result); // Free the result set
      } else {
        resultsDiv.innerHTML = "No results found.";
      }
    }
  </script>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search:</h1>
    <input type="text" id="search-input" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById('search-input').value;
      var resultsDiv = document.getElementById('results');

      //  Replace this with your actual search logic.  This is a basic example.
      if (searchTerm.trim() === "") {
          resultsDiv.innerHTML = "Please enter a search term.";
          return;
      }

      //  Example: Search through a simple array
      var data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry", "Mango", "Pineapple"
      ];

      var resultsHTML = "";
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {
          resultsHTML += "<p>" + data[i] + "</p>";
        }
      }

      if (resultsHTML === "") {
        resultsDiv.innerHTML = "No results found.";
      } else {
        resultsDiv.innerHTML = resultsHTML;
      }
    }
  </script>

</body>
</html>


<?php
//  Example - this is conceptual and needs database setup!

//  Assume you have a database connection established (e.g., $conn)

if (isset($_SERVER['HTTP_POST']) && $_SERVER['HTTP_POST']['_METHOD'] === 'POST') {
    $searchTerm = $_POST['search_term'];

    // Build your SQL query (sanitize this carefully!)
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // Execute the query
    $result = mysqli_query($conn, $sql);

    // Process the results
    $resultsHTML = "";
    if ($result) {
        while ($row = mysqli_fetch_assoc($result)) {
            $resultsHTML .= "<p>" . $row['name'] . " - " . $row['description'] . "</p>";
        }
    } else {
        $resultsHTML = "Error executing query.";
    }

    // Display the results
    if ($resultsHTML === "") {
      echo "No results found.";
    } else {
      echo $resultsHTML;
    }

    mysqli_close($conn); // Close the database connection
}
?>


<?php

// Example: Simple Search Bar Implementation

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm)); 

// Perform the search (replace with your actual search logic)
$searchResults = searchDatabase($searchTerm); // Function defined below

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search:</h1>

  <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $searchTerm; ?>">
    <input type="submit" value="Search">
  </form>

  <?php if (!empty($searchResults)): ?>
    <h2>Search Results:</h2>
    <?php foreach ($searchResults as $result): ?>
      <p><?php echo $result; ?></p>
    <?php endforeach; ?>
  <?php else: ?>
    <p>No results found for "<?php echo $searchTerm; ?>"</p>
  <?php endif; ?>

</body>
</html>


<?php

// Sample data - Replace this with your actual data source (e.g., database query)
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A crisp fruit.'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit.'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit.'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, juicy fruit.'],
    ['id' => 5, 'name' => 'Strawberry', 'description' => 'Red berry, delicious.'],
];

// Function to search the data
function searchData($searchTerm, $data) {
    $results = [];
    foreach ($data as $item) {
        // Case-insensitive search
        $nameSearch = stripos($item['name'], $searchTerm);
        $descriptionSearch = stripos($item['description'], $searchTerm);

        if ($nameSearch !== false || $descriptionSearch !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// Get the search term from the user (e.g., from a form submission)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; //  Get from GET request, default to empty string

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Data</title>
</head>
<body>

    <h1>Search Data</h1>

    <form action="" method="GET">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <?php foreach ($searchResults as $result): ?>
            <p>
                <strong>ID:</strong> <?php echo $result['id']; ?><br>
                <strong>Name:</strong> <?php echo htmlspecialchars($result['name']); ?><br>
                <strong>Description:</strong> <?php echo htmlspecialchars($result['description']); ?>
            </p>
            <hr>
        <?php endforeach; ?>
    <?php endif; ?>

</body>
</html>


<?php

// This example demonstrates a basic search bar with simple filtering.
// For more advanced search features (like full-text search, stemming, etc.), 
// you'll likely need a dedicated search library or a database with appropriate indexing.

// Sample Data (replace this with your actual data source - database, array, etc.)
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A sweet fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, sweet berries'],
    ['id' => 5, 'name' => 'Pineapple', 'description' => 'Tropical fruit with a crown'],
];

// Get the search term from the GET request (if provided)
$searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

// Perform the search
$searchResults = [];
foreach ($data as $item) {
    // Convert search term to lowercase for case-insensitive search
    $searchTermLower = strtolower($searchTerm);

    // Check if the search term is present in the name or description
    if (strpos($item['name'], $searchTermLower) !== false || strpos($item['description'], $searchTermLower) !== false) {
        $searchResults[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term..." value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong>ID:</strong> <?php echo $result['id']; ?><br>
                    <strong>Name:</strong> <?php echo htmlspecialchars($result['name']); ?><br>
                    <strong>Description:</strong> <?php echo htmlspecialchars($result['description']); ?>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic Styling - Feel free to customize! */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust as needed */
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("searchInput").value;

      // **IMPORTANT: Replace this with your actual search logic**
      // This is just a placeholder example.
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Display the search term in an alert
      alert("You searched for: " + searchTerm);


      // **Actual search implementation goes here**
      // You'll likely want to:
      // 1.  Make an AJAX request to your server.
      // 2.  Send the `searchTerm` to the server.
      // 3.  Receive the results from the server.
      // 4.  Display the results on the page.

      // Example of simulating a server response (for demonstration only):
      //  let results = ["Result 1", "Result 2", "Result 3"];
      //  displaySearchResults(results);
    }

    // Function to display search results (replace with your actual implementation)
    function displaySearchResults(results) {
      // This is a placeholder - you'll need to update the HTML based on the results.
      // For example, you could append the results to a <ul> element:
      // let resultsList = document.getElementById("searchResults");
      // resultsList.innerHTML = "<li>" + results[0] + "</li>";
      // etc.

      console.log("Search Results:", results);
    }
  </script>

</body>
</html>


<?php
  // Replace with your database credentials
  $servername = "localhost";
  $username = "your_username";
  $password = "your_password";
  $dbname = "your_database";

  // Check if the search term is provided via POST
  if (isset($_POST["search_term"])) {
    $searchTerm = $_POST["search_term"];

    // Connect to the database
    $conn = new mysqli($servername, $username, $password, $dbname);

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    // Build the SQL query
    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

    // Execute the query
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
      // Output the results (example)
      while($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"]. " - Name: " . $row["name"]. "<br>";
      }
    } else {
      echo "No results found.";
    }

    $conn->close();
  }
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here
      // Example:  Simple string comparison (replace with your actual search)
      if (searchTerm.length > 0) {
        alert("Searching for: " + searchTerm); // Replace this with your actual search results

        // Example:  Display search results (replace this placeholder)
        // document.getElementById("searchResults").innerHTML = "Search results for '" + searchTerm + "' would go here.";
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust as needed */
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Add your search logic here.  This example just logs to the console.
      console.log("Search term: " + searchTerm);

      //  Example:  You might want to:
      //  1.  Make an AJAX request to your server to search a database.
      //  2.  Display results on the page.

      //  For example, to trigger a JavaScript search:
      //  alert("Searching for: " + searchTerm);

      //  Or, if you were searching the current page's content:
      //  var content = document.body.innerHTML;
      //  if (content.indexOf(searchTerm) > -1) {
      //    alert("Found " + searchTerm + " on this page!");
      //  } else {
      //    alert("Not found on this page.");
      //  }
    }
  </script>

</body>
</html>


<?php

// Sample data (replace with your actual data source - database, array, etc.)
$products = [
    'apple' => 'Red delicious apple',
    'banana' => 'Yellow banana',
    'orange' => 'Juicy orange',
    'grape' => 'Purple grape',
    'pineapple' => 'Sweet pineapple',
];

// Function to perform the search
function searchProducts($searchTerm, $products) {
    $results = [];

    // Convert search term to lowercase for case-insensitive searching
    $searchTerm = strtolower($searchTerm);

    foreach ($products as $key => $value) {
        // Check if the search term is a substring of the product name
        if (strpos($value, $searchTerm) !== false) {
            $results[$key] = $value;
        }
    }

    return $results;
}

// Get the search term from the GET request (if available)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form action="" method="get">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchTerm)): ?>
        <p>Enter a search term above.</p>
    <?php else: ?>
        <?php if (empty($searchResults)): ?>
            <p>No products found matching your search term.</p>
        <?php else: ?>
            <h2>Search Results:</h2>
            <ul>
                <?php foreach ($searchResults as $key => $value): ?>
                    <li>
                        <?php echo htmlspecialchars($value); ?>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php endif; ?>
    <?php endif; ?>

</body>
</html>


<?php
// ... (HTML form as before) ...

// Perform the search
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Database connection (replace with your credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Prepare the SQL query
$sql = "SELECT product_name FROM products WHERE product_name LIKE ?";

// Prepare the statement
$stmt = $conn->prepare($sql);

// Bind the parameter
$stmt->bind_param("s", "%" . $searchTerm . "%"); // % is a wildcard for LIKE

// Execute the query
$stmt->execute();

// Get the results
$results = $stmt->get_result();

// Free the statement
$stmt->close();

// ... (Display results based on $results) ...
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 90%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults" style="margin-top: 20px;">
    <!-- Search results will appear here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("searchResults");

      // **Important:** Replace this with your actual search logic
      // This is just a placeholder to demonstrate how to display results.
      // You should replace it with your database query or other search method.

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = ""; // Clear results if search term is empty
        return;
      }


      // Example search logic (replace with your actual implementation)
      var results = [];
      if (searchTerm.toLowerCase() === "apple") {
          results = ["Apple iPhone", "Apple iPad", "Apple Watch"];
      } else if (searchTerm.toLowerCase() === "banana") {
          results = ["Banana Bunch", "Banana Bread"];
      }
      else {
          results = ["No results found", "Try a different search term"];
      }

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Display the results
      if (results.length > 0) {
          for (var i = 0; i < results.length; i++) {
              var resultItem = document.createElement("p");
              resultItem.textContent = results[i];
              resultsDiv.appendChild(resultItem);
          }
      }
      else{
          var noResultItem = document.createElement("p");
          noResultItem.textContent = "No results found";
          resultsDiv.appendChild(noResultItem);
      }

    }
  </script>

</body>
</html>


<?php

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($_POST["search_term"]));

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $searchResults = []; // Empty result set
  } else {
    // Perform your search logic here
    // Example: Search in a database or an array
    $searchResults = searchDatabase($searchTerm);
  }

} else {
  // Initialize the search term if the form hasn't been submitted
  $searchTerm = "";
  $searchResults = [];
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo $searchTerm; ?>" placeholder="Enter your search term...">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($searchResults)) { ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result) {
        echo "<li>" . $result . "</li>";
      } ?>
    </ul>
  <?php } ?>

</body>
</html>


<?php

// This is a basic example, customize it to your needs

// Get the search term from the input field (using $_GET for simplicity, you can use $_POST as well)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$search_term = htmlspecialchars($search_term); // Converts special characters to HTML entities

//  You'll need to replace this with your actual data source.
//  This example uses a simple array.
$data = [
  "apple",
  "banana",
  "orange",
  "grape",
  "kiwi",
  "strawberry",
  "mango",
];


// Perform the search
$results = [];
if ($search_term) {
  foreach ($data as $item) {
    if (stripos($item, $search_term)) { // case-insensitive search
      $results[] = $item;
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search:</h1>

  <form method="get">
    <input type="text" name="search" value="<?php echo $search_term; ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $result): ?>
        <li><?php echo $result; ?></li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found for: <?php echo $search_term; ?></p>
  <?php endif; ?>


</body>
</html>


<?php

// Assuming you have a search term from a form or some other source
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get the search term from the GET request
$searchTerm = htmlspecialchars($searchTerm); // Sanitize the input to prevent XSS attacks

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $searchTerm; ?>" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
  // Example:  Search through a simple array of data
  $data = [
    ['name' => 'Apple', 'description' => 'A delicious fruit'],
    ['name' => 'Banana', 'description' => 'A yellow fruit'],
    ['name' => 'Orange', 'description' => 'A citrus fruit'],
    ['name' => 'Grape', 'description' => 'Small and sweet fruit']
  ];

  if ($searchTerm) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<ul>";
    foreach ($data as $item) {
      // Search within name and description (case-insensitive)
      $nameMatch = stripos($item['name'], $searchTerm) !== false;
      $descriptionMatch = stripos($item['description'], $searchTerm) !== false;

      if ($nameMatch || $descriptionMatch) {
        echo "<li>";
        echo htmlspecialchars($item['name']); // Escape output for security
        if ($descriptionMatch) {
          echo "<br>". htmlspecialchars($item['description']);
        }
        echo "</li>";
      }
    }
    echo "</ul>";
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you want to search through a table named 'products'
// and a column named 'name'

// Get the search term from the form (or URL)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// If no search term is provided, redirect to the main page
if (empty($searchTerm)) {
  header("Location: index.php"); // Redirect to your main page
  exit;
}

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($db, $sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter product name..." value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
  if (mysqli_num_rows($result) > 0) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Assuming 'name' and 'description' columns
    }
    echo "</ul>";
  } else {
    echo "<p>No products found matching your search term.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// Replace these with your actual database connection details

// Example using mysqli:
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// Get the search term from the search input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);


// SQL query to search in a table (replace 'your_table_name' and 'your_column_name' with your actual values)
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search:</h1>
    <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<br><br>"; // Add a newline for better readability
        echo "<ul>";
        // Output each row as a list item
        while($row = $result->fetch_assoc()) {
            echo "<li>" . $row["your_column_name"] . "</li>"; // Adjust this based on your table structure
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }
    ?>

</body>
</html>


<?php

// Simple Search Bar Implementation in PHP

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the input (important for security)
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING); 

  // Escape the search term (to prevent XSS)
  $searchTerm = htmlspecialchars($searchTerm);

  // Perform the search (replace this with your actual search logic)
  $searchResults = performSearch($searchTerm); 

  // Store the search term and results in the session
  session_start();
  $_SESSION["search_term"] = $searchTerm;
  $_SESSION["search_results"] = $searchResults;
}

// If the form hasn't been submitted, get the search term from the session
if (!isset($_SESSION["search_term"]) || empty($_SESSION["search_term"])) {
  // If there's no search term in the session, initialize it to an empty string
  $_SESSION["search_term"] = "";
  $_SESSION["search_results"] = [];
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo htmlspecialchars($_SESSION["search_term"]); ?>" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
  // Display search results (if any)
  if (!empty($_SESSION["search_results"])) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
  ?>

</body>
</html>


function performSearch($searchTerm) {
  //  This is a placeholder - replace with your actual database query
  //  Prepared statements are crucial to prevent SQL injection
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // % is a wildcard
  // You should use prepared statements here instead of string concatenation
  // Example using PDO (illustrative):
  // $stmt = $pdo->prepare($sql);
  // $stmt->execute([$searchTerm]);
  // $searchResults = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // Example returning dummy data for demonstration:
  $searchResults = [
    "Product 1",
    "Product 2 with Search Term",
    "Another Product with Search Term"
  ];

  return $searchResults;
}


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace this with your actual database connection code

// Example database connection (replace with your details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the form (or URL, depending on your needs)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';  // Get from URL or set to empty if not provided
$searchTerm = htmlspecialchars($searchTerm); // Escape for security - prevents XSS

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Example</h1>

    <form method="GET" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
        <input type="text" name="search" placeholder="Enter search term..." value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php

    // Perform the search (example: searching in a table called 'products')
    if ($searchTerm != '') {
        $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            echo "<br><br><h2>Search Results:</h2>";
            while($row = $result->fetch_assoc()) {
                echo "<p>Product Name: " . $row["name"] . ", Price: " . $row["price"] . "</p>";
            }
        } else {
            echo "<p>No results found for '" . $searchTerm . "'.</p>";
        }
    }

    ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and that you've received the search query from a form.

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize the search query to prevent SQL injection and XSS attacks
  $search_query = htmlspecialchars(trim($_POST["search_term"]));

  // Example:  Filter search results based on the query (replace this with your database query)
  $results = [];

  // ********************************************************************
  //  Placeholder for your database query
  //  Replace this with your actual database query using your database connection.
  // ********************************************************************
  //  This example just demonstrates how to filter based on the query.
  if ($search_query) {
    // Placeholder for your database query
    //  Adjust this to your specific database table and columns.
    //  Assume you have a table named 'products' with columns 'name' and 'description'

    // Example using a placeholder SQL query - Replace this with your real query
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_query . "%' OR description LIKE '%" . $search_query . "%'";
    $result = mysqli_query($conn, $sql);  // Assuming $conn is your database connection
    
    if ($result) {
      while ($row = mysqli_fetch_assoc($result)) {
        $results[] = $row;
      }
      mysqli_free_result($result);
    } else {
      echo "Error running query: " . mysqli_error($conn);
    }
  }
  // ********************************************************************

  // Now you have the $results array, which contains your filtered search results.
  // Display the results in your HTML.
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($results)): ?>
    <p>No results found.</p>
  <?php else: ?>
    <ul>
      <?php foreach ($results as $row): ?>
        <li>
          <?php echo $row['name']; ?> - <?php echo $row['description']; ?>
        </li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 0 auto; /* Center the search bar */
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-family: sans-serif;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button id="searchButton">Search</button>
  </div>

  <script>
    // Get references to the search input and button
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');

    // Add an event listener for the search button click
    searchButton.addEventListener('click', function() {
      // Get the search term
      const searchTerm = searchInput.value.trim();

      // Prevent submission of the form if the search term is empty
      if (searchTerm === "") {
        alert("Please enter a search term.");
        return;
      }

      // Do something with the search term (e.g., make an AJAX request)
      console.log("Search term:", searchTerm);

      // Example:  Display the search term on the page
      document.getElementById('searchResults').innerHTML = "You searched for: " + searchTerm;

      //  More advanced:  Send data to a server-side script
      //  fetch('/your_server_script.php', {
      //    method: 'POST',
      //    headers: {
      //      'Content-Type': 'application/x-www-form-urlencoded'
      //    },
      //    body: 'term=' + encodeURIComponent(searchTerm)
      //  })
      //  .then(response => response.json())
      //  .then(data => {
      //    // Process the response from the server
      //    console.log("Server response:", data);
      //  })
      //  .catch(error => {
      //    console.error("Error:", error);
      //  });
    });
  </script>

  <!--  Optional:  A place to display search results  -->
  <div id="searchResults" style="margin-top: 10px;"></div>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// For simplicity, let's assume a database connection named $conn

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize and validate the search term (important!)
  $searchTerm = htmlspecialchars(trim($searchTerm)); // Prevents XSS

  // Prevent empty search terms
  if (empty($searchTerm)) {
    echo "<p>Please enter a search term.</p>";
  } else {
    // Perform the search (replace with your actual database query)
    // This is a placeholder example - adapt to your table and column names
    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'"; 

    // Execute the query (replace with your database interaction)
    // Example using mysqli
    $result = mysqli_query($conn, $sql);

    if ($result) {
      // Display the results
      echo "<h2>Search Results for: " . $searchTerm . "</h2>";
      echo "<table border='1'>";
      echo "<tr><th>ID</th><th>Column 1</th><th>Column 2</th></tr>"; // Adapt headers

      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        echo "<td>" . $row["id"] . "</td>"; // Replace with your actual column names
        echo "<td>" . $row["column1"] . "</td>";
        echo "<td>" . $row["column2"] . "</td>";
        echo "</tr>";
      }

      echo "</table>";

      // Close the database connection (good practice)
      mysqli_close($conn);
    } else {
      echo "<p>Error executing query: " . mysqli_error($conn) . "</p>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// This is a basic example.  You'll likely want to adapt this to your
// specific database and search needs.

// -------------------------------------------------------------------
// Configuration
// -------------------------------------------------------------------

$search_term = isset($_GET['search']) ? $_GET['search'] : '';
$results_per_page = 10; // Number of results to display per page
$page = isset($_GET['page']) ? intval($_GET['page']) : 1;

// -------------------------------------------------------------------
// Database Connection (Replace with your actual connection)
// -------------------------------------------------------------------

// Example using a dummy database (replace with your database details)
// $db_host = "localhost";
// $db_name = "your_database_name";
// $db_user = "your_username";
// $db_pass = "your_password";
// $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }



// -------------------------------------------------------------------
// Search Logic
// -------------------------------------------------------------------

// Sanitize the search term
$search_term = trim($search_term);
$search_term = htmlspecialchars($search_term);  //Important for security - prevents XSS

// SQL query (adjust this based on your database schema)
$query = "SELECT * FROM your_table_name WHERE title LIKE '%" . $search_term . "%'"; // Example:  searching in a 'title' column.  Use proper escaping for your database system.


// Execute the query
$result = $conn->query($query);

// -------------------------------------------------------------------
// Pagination
// -------------------------------------------------------------------
$start = ($page - 1) * $results_per_page;
$end = $start + $results_per_page;


// -------------------------------------------------------------------
// Display Results
// -------------------------------------------------------------------

echo "<form method='get' action=''>";
echo "<input type='text' name='search' value='" . $search_term . "' style='width: 300px;'>";
echo "<input type='submit' value='Search'>";
echo "</form>";

if ($result->num_rows > 0) {
    echo "<h2>Search Results for: " . $search_term . "</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>ID</th><th>Title</th><th>Description</th></tr></thead>";  // Adjust columns as needed
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['id'] . "</td>";  // Adjust column names
        echo "<td>" . $row['title'] . "</td>";
        echo "<td>" . $row['description'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "<p>No results found for: " . $search_term . "</p>";
}

// Pagination links
if ($page > 1) {
    echo "<br><a href='?search=" . $search_term . "&page=" . ($page - 1) . "'>Previous</a>";
}

for ($i = 1; $i <= max(1, ceil($page / $results_per_page)); $i++) {
    if ($i != $page) {
        echo "<a href='?search=" . $search_term . "&page=" . $i . "'>$i</a> ";
    }
}

if ($page < max(1, ceil($page / $results_per_page))) {
    echo "<a href='?search=" . $search_term . "&page=" . ($page + 1) . "'>Next</a>";
}
// -------------------------------------------------------------------
// Close Connection
// -------------------------------------------------------------------
// $conn->close(); // Important to close the database connection

?>


<?php

// ... (Configuration as before) ...

// SQL query with placeholders
$query = "SELECT * FROM your_table_name WHERE title LIKE :search_term";

// Prepare the statement
$stmt = $conn->prepare($query);

if ($stmt) {
    // Bind the parameter
    $stmt->bind_param("s", $search_term); // "s" indicates a string

    // Execute the statement
    $stmt->execute();

    // Fetch the results
    $result = $stmt->get_result();

    // Process the results (as before)
    // ... (Display Results section) ...

    // Close the statement
    $stmt->close();
} else {
    // Handle the error
    echo "Error preparing statement: " . $conn->error;
}

// ... (Close Connection) ...
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <div id="results-container">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("search-input").value;
      var resultsContainer = document.getElementById("results-container");

      // Clear previous results
      resultsContainer.innerHTML = "";

      // Example data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 14", description: "A great phone!" },
        { title: "Samsung Galaxy S23", description: "Another excellent phone." },
        { title: "Google Pixel 7", description: "Powerful and versatile." },
        { title: "Laptop Example", description: "A powerful laptop." }
      ];

      // Filter data based on search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm.toLowerCase()) || item.description.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the filtered data
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var listItem = document.createElement("div");
          listItem.innerHTML = `<strong>${item.title}</strong><br>${item.description}`;
          resultsContainer.appendChild(listItem);
        });
      } else {
        var noResultsMessage = document.createElement("p");
        noResultsMessage.textContent = "No results found.";
        resultsContainer.appendChild(noResultsMessage);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using MySQLi or PDO)
// and a table named 'products' with a 'name' column.

// Example using MySQLi:
$db = new MySQLi("localhost", "your_db_username", "your_db_password", "your_db_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}


// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm); // Sanitize for security


// Query the database
$query = "SELECT id, name FROM products WHERE name LIKE '%" . $searchTerm . "%'";
$result = $db->query($query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

    <?php
    if ($searchTerm) {
        if ($result->num_rows > 0) {
            echo "<h2>Search Results for: " . $searchTerm . "</h2>";
            echo "<ul>";
            while ($row = $result->fetch_assoc()) {
                echo "<li>" . $row['name'] . " (ID: " . $row['id'] . ")</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No products found matching '" . $searchTerm . "'</p>";
        }
    }
    ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and you're working with a table named 'products' with a column 'name'

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and escape the search term to prevent SQL injection
$searchTerm = htmlspecialchars($searchTerm);

// Query to search the products table
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
</head>
<body>

  <h1>Product Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term..." value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result) {
      if (mysqli_num_rows($result) > 0) {
        echo "<table border='1'><tr><th>ID</th><th>Name</th><th>Description</th></tr>";
        while ($row = mysqli_fetch_assoc($result)) {
          echo "<tr>";
          echo "<td>" . $row['id'] . "</td>";
          echo "<td>" . $row['name'] . "</td>";
          echo "<td>" . $row['description'] . "</td>";
          echo "</tr>";
        }
        echo "</table>";
      } else {
        echo "<p>No products found matching your search term.</p>";
      }
    } else {
      echo "<p>Error executing query.</p>";
    }
    mysqli_free_result($result); // Important: Free the result set
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      width: 80%;
      margin: 20px auto;
    }

    #search-input {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Important for consistent sizing */
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 16px;
    }

    #search-results {
      margin-top: 20px;
      border: 1px solid #ccc;
      padding: 10px;
    }

    .result-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <div id="search-results">
    <h2>Search Results:</h2>
    <?php
    // Placeholder data - replace with your database query
    $data = [
      "apple", "banana", "orange", "grape", "kiwi", "mango",
      "peach", "pear", "plum", "strawberry", "watermelon"
    ];

    if (isset($_GET['search_term'])) {
      $searchTerm = $_GET['search_term'];

      $searchResults = [];

      foreach ($data as $item) {
        if (strpos($item, $searchTerm) !== false) {
          $searchResults[] = $item;
        }
      }

      if (empty($searchResults)) {
        echo "<p>No results found.</p>";
      } else {
        echo "<ul>";
        foreach ($searchResults as $result) {
          echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
      }
    }
    ?>
  </div>

</body>
</html>


    echo htmlspecialchars($result, ENT_QUOTES, 'UTF-8');
    

    This function converts special characters (like `<`, `>`, `&`, `"`, `'`) into their HTML entities, effectively neutralizing them.

3.  **Input Validation:**  Validate the search term to ensure it meets your criteria (e.g., maximum length, allowed characters).

**Example of using Prepared Statements (Highly Recommended):**



<?php

// Assuming you have a database connection established (e.g., $conn)

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'POST') {
    // Get the search term from the POST request
    $searchTerm = htmlspecialchars(trim($_POST['search'])); 

    // Sanitize and escape the search term to prevent SQL injection
    $searchTerm = $conn->real_escape_string($searchTerm);  // Assuming $conn is your database connection object

    // Perform the search (replace with your actual query)
    $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'"; 

    // Execute the query
    $result = $conn->query($sql);

    // Display the results (you'll need to adjust this based on how you want to display the data)
    if ($result->num_rows > 0) {
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . htmlspecialchars($row['your_column']) . "</li>"; // Assuming your column is named 'your_column'
        }
        echo "</ul>";
    } else {
        echo "No results found for '" . htmlspecialchars($searchTerm) . "'.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar</title>
</head>
<body>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search" placeholder="Search...">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize the input
  $search_term = htmlspecialchars(trim($_POST["search"]));

  // Basic validation (optional, but recommended)
  if (empty($search_term)) {
    $results = []; // Or display an error message to the user
    $error_message = "Please enter a search term.";
  } else {
    // Your search logic here
    // Example: Searching through an array of products
    $products = [
      "Apple iPhone 13",
      "Samsung Galaxy S22",
      "Google Pixel 6",
      "OnePlus 9 Pro",
      "Apple iPad Air 5th Gen",
    ];

    $results = [];
    foreach ($products as $product) {
      if (stripos($product, $search_term) !== false) { // Case-insensitive search
        $results[] = $product;
      }
    }

    // Display the results
    if (empty($results)) {
      echo "<p>No results found for '$search_term'.</p>";
    } else {
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $search_term = htmlspecialchars(trim($_POST["search"]));

  // Basic SQL query (VERY basic - needs improvement for security and robustness)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>" . $row["name"] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }

  $conn->close();
}
?>


<?php

// Assuming you have a database connection established and available in a variable named $db

// Example database connection (replace with your actual connection details)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }

// Get the search term from the form (using $_GET or $_POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection
$searchTerm = $db->real_escape_string($searchTerm);

// --- Search Logic ---
// You can customize this section to implement your desired search logic.

// 1. Simple Keyword Search (in a single table)
if (empty($searchTerm)) {
  // Display a message or redirect if no search term is provided
  echo "<p>Enter a search term.</p>";
} else {
  // Assuming you have a table named 'products' with a 'name' or 'description' column
  $query = "SELECT * FROM products WHERE name LIKE '%$searchTerm%' OR description LIKE '%$searchTerm%'";

  $result = $db->query($query);

  if ($result->num_rows > 0) {
    echo "<form method='get' action='results.php'> <!--  'results.php' is a suggested page to display results -->
          <input type='text' name='search' value='$searchTerm'>
          <input type='submit' value='Search'>
        </form>";

    echo "<p>Search Results for: <b>$searchTerm</b></p>";

    // Display the search results (iterate through the result set)
    while ($row = $result->fetch_assoc()) {
      echo "<p>Product Name: " . htmlspecialchars($row['name']) . ", Description: " . htmlspecialchars($row['description']) . "</p>";
    }

  } else {
    echo "<p>No results found for <b>$searchTerm</b>.</p>";
  }
}

// --- Example for searching across multiple tables (more complex) ---
// This is just a placeholder - adapt it to your database schema
/*
$query = "SELECT p.name, c.category_name
          FROM products p
          JOIN categories c ON p.category_id = c.id
          WHERE p.name LIKE '%$searchTerm%' OR c.category_name LIKE '%$searchTerm%'";
*/

?>


<?php

// Sample data (replace with your actual data source)
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "strawberry",
    "pineapple",
    "watermelon",
    "mango",
];

// Function to handle the search
function searchItems($searchTerm, $items) {
    $results = [];
    $searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive search

    foreach ($items as $item) {
        $itemLower = strtolower($item);
        if (strpos($itemLower, $searchTerm) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}

// Get the search term from the form (using $_GET for demonstration)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Check if the search parameter is set

// Perform the search
$searchResults = searchItems($searchTerm, $items);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No items found.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = ""; // Clear results if input is empty
        return;
      }

      // **Replace this with your actual search logic**
      // This is just a placeholder that simulates searching.
      var data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry",
        "Cat", "Dog", "Bird", "Fish", "Elephant"
      ];

      var results = "";
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1) {
          results += "<p>" + data[i] + "</p>";
        }
      }

      if (results === "") {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      } else {
        resultsDiv.innerHTML = results;
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search with Database</title>
  <style> /* Same CSS as above */ </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = "";
        return;
      }

      // **Replace with your actual database connection and query**
      // This is just a placeholder example.
      var searchTermLower = searchTerm.toLowerCase(); // Convert for case-insensitive comparison

      //  Example:  Assume a database connection and a 'products' table with a 'name' column
      //  Adjust this to match your database schema.
      $.ajax({
          url: 'get_products.php?search_term=' + searchTermLower, // Call a separate PHP file
          method: 'GET',
          success: function(data) {
              var results = "";
              if (data) { // Check if data is returned from the server
                for (var i = 0; i < data.length; i++) {
                  results += "<p>" + data[i].name + "</p>";
                }
              }
              if (results === "") {
                resultsDiv.innerHTML = "<p>No results found.</p>";
              } else {
                resultsDiv.innerHTML = results;
              }
          },
          error: function(xhr, status, error) {
            console.error("Error fetching products: " + error);
            resultsDiv.innerHTML = "<p>An error occurred.</p>";
          }
      });
    }
  </script>
</body>
</html>


<?php

// **Option 1: Simple Search - Basic String Matching**

// This option performs a basic string search through an array of data.
// It's suitable for small datasets.

function searchData($searchTerm, $dataArray) {
  $results = [];
  foreach ($dataArray as $item) {
    if (strpos($item, $searchTerm) !== false) {
      $results[] = $item;
    }
  }
  return $results;
}

// Example Usage:
$searchTerms = array("apple", "banana", "orange", "grapefruit");
$data = array(
  "red apple",
  "yellow banana",
  "orange juice",
  "grapefruit",
  "green apple"
);

$searchResults = searchData("apple", $data);
print_r($searchResults); // Output: Array ( [0] => red apple [1] => green apple )


// **Option 2: Search with Input Sanitization & More Robust Logic**

// This option includes sanitization to prevent basic SQL injection (though it's not a substitute for proper database security!)
// and more flexible searching (e.g., case-insensitive).
//  It's better for interactive user forms.

function searchDataSanitized($searchTerm, $dataArray, $caseSensitive = false) {
  $searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive searching.

  $results = [];
  foreach ($dataArray as $item) {
    $itemLower = strtolower($item);
    if ($caseSensitive === false || strpos($itemLower, $searchTerm) !== false) {
      $results[] = $item;
    }
  }
  return $results;
}

// Example Usage (Case-insensitive):
$searchTerms = array("apple", "banana", "orange", "grapefruit");
$data = array(
  "red apple",
  "yellow banana",
  "orange juice",
  "grapefruit",
  "green apple"
);

$searchResults = searchDataSanitized("apple", $data);
print_r($searchResults); // Output: Array ( [0] => red apple [1] => green apple )

$searchResultsCaseSensitive = searchDataSanitized("apple", $data, true);
print_r($searchResultsCaseSensitive);  // Output: Array ( [0] => red apple )



// **Option 3: Search with Database (Recommended for Larger Datasets)**

// This is the best approach for large datasets.  It assumes you have a database connection established.

// (This section requires a database connection and table setup)
// Assuming a database connection called $db

//  First, you'd need to create a table (e.g., 'products') with a column to search.
//  Example:  CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(255), description TEXT)

//  Then, the search query would look like this:

//  $searchTerm = $_GET['search'];  // Get search term from GET request
//  $db->query("SELECT * FROM products WHERE name LIKE '%" . $db->escapeString($searchTerm) . "%' OR description LIKE '%" . $db->escapeString($searchTerm) . "%'");
//  $results = $db->fetchAll();

//  Note: $db->escapeString() is *essential* to prevent SQL injection.

//  Example:
/*
$searchTerm = $_GET['search'];
$query = "SELECT * FROM products WHERE name LIKE '%" . $db->escapeString($searchTerm) . "%' OR description LIKE '%" . $db->escapeString($searchTerm) . "%'";
$result = $db->query($query);

if ($result->num_rows > 0) {
  while($row = $result->fetch_assoc()) {
    $searchResults[] = $row;
  }
}

print_r($searchResults);
*/



// **Important Considerations & Best Practices**

// 1. **SQL Injection:**  *Always* use proper escaping functions (like $db->escapeString() if you're using a database) to prevent SQL injection vulnerabilities.  Never directly embed user input into SQL queries.

// 2. **Performance:**  For large datasets, use database indexes on the search columns to speed up queries.  Consider using full-text search capabilities offered by your database system.

// 3. **Case Sensitivity:**  Decide if your search should be case-sensitive or case-insensitive.  The examples above demonstrate case-insensitive searching using `strtolower()`.

// 4. **Partial Matching:** The `LIKE '%searchterm%'` syntax in the database examples allows for partial matching.  This is important for users who don't know the exact term.

// 5. **User Experience:**
//    * Implement auto-suggestions (using AJAX and a database) as the user types.
//    * Provide clear feedback to the user about the search results.
//    * If no results are found, display a helpful message.

// 6. **Frameworks/Libraries:**  In a real-world web application, consider using a framework (like Laravel, Symfony, CodeIgniter) that provides built-in search functionality.  These frameworks often handle much of the complexity for you.

// **To use this in your application:**

// 1. Choose the option that best fits your needs (simple string matching for small datasets, database search for larger ones).
// 2. Adapt the code to your specific data structure and database connection.
// 3.  Always prioritize security – especially when dealing with user input.


<?php

// Assuming you have a database connection established (e.g., $db_connection)

// Get the search term from the form
$search_term = isset($_POST['search_term']) ? htmlspecialchars($_POST['search_term']) : '';

// Perform the search
if ($search_term) {
  //  Example: Search through a database table named 'products'
  //  Replace this with your actual query and database setup.

  $results = [];

  // Example query (adapt to your database schema and needs)
  $sql = "SELECT * FROM products WHERE product_name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'";
  $result = mysqli_query($db_connection, $sql);

  if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
      $results[] = $row;
    }
  }

  // You can add error handling here to check if the query was successful.
  mysqli_free_result($result); // Free up the result set

} else {
  //  No search term entered, display all results or a default page.
  //  You can adjust this part to show all products or a "No search term" page.
  $results = []; // Reset the results array
  //  Example: Display all products
  //  $sql = "SELECT * FROM products";
  //  $result = mysqli_query($db_connection, $sql);
  //  $results = [];
  //  while ($row = mysqli_fetch_assoc($result)) {
  //    $results[] = $row;
  //  }
  //  mysqli_free_result($result);
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo $search_term; ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)): ?>
    <h2>Search Results:</h2>
    <?php if (empty($results)): ?>
      <p>No results found for "<?php echo htmlspecialchars($search_term); ?>"</p>
    <?php else: ?>
      <table>
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Description</th>
            <th>Other Columns...</th>
          </tr>
        </thead>
        <tbody>
          <?php foreach ($results as $row): ?>
            <tr>
              <td><?php echo htmlspecialchars($row['product_name']); ?></td>
              <td><?php echo htmlspecialchars($row['description']); ?></td>
              <td>...</td>
            </tr>
          <?php endforeach; ?>
        </tbody>
      </table>
    <?php endif; ?>

<?php  // Display all results (commented out - uncomment if needed)
//   if (empty($results)):
//     echo "<p>No results found for '" . htmlspecialchars($search_term) . "'</p>";
//   else:
//      echo "<p>No results found.</p>";
//   endif;
?>

</body>
</html>


<?php

// Sample data for demonstration purposes
$products = [
    'Laptop - Dell XPS 13' => 'Description for Dell XPS 13',
    'Mouse - Logitech MX Master 3' => 'Description for Logitech MX Master 3',
    'Keyboard - Corsair K95 RGB' => 'Description for Corsair K95 RGB',
    'Monitor - LG 27UL850-W' => 'Description for LG 27UL850-W',
    'Webcam - Logitech Brio 4K' => 'Description for Logitech Brio 4K',
];

// Get the search term from the GET request (if provided)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$searchTerm = htmlspecialchars($searchTerm, ENT_QUOTES, 'UTF-8');

// Perform the search
$searchResults = [];
foreach ($products as $key => $value) {
    // Case-insensitive search
    if (stripos($key, $searchTerm) !== false) {
        $searchResults[$key] = $value;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
    <style>
        .search-container {
            margin: 20px;
        }

        input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 300px;
        }

        .results {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
        }

        .result-item {
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #eee;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

    <div class="search-container">
        <h1>Product Search</h1>
        <input type="text" id="searchInput" placeholder="Enter search term...">
    </div>

    <div class="results" id="resultsContainer">
        <?php if (empty($searchResults)): ?>
            <p>No results found.</p>
        <?php else: ?>
            <?php foreach ($searchResults as $key => $value): ?>
                <div class="result-item">
                    <p><?php echo $key; ?></p>
                    <p><?php echo htmlspecialchars($value, ENT_QUOTES, 'UTF-8'); ?></p>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>
    </div>


    <script>
        // Get the search input element
        const searchInput = document.getElementById('searchInput');
        const resultsContainer = document.getElementById('resultsContainer');

        // Add an event listener for the 'keyup' event on the search input
        searchInput.addEventListener('keyup', function() {
            const searchTerm = searchInput.value.trim();

            // Clear the previous results
            resultsContainer.innerHTML = '';

            // If the search term is not empty, perform the search
            if (searchTerm !== '') {
                // Perform the search (same as in PHP)
                const products = [
                    'Laptop - Dell XPS 13',
                    'Mouse - Logitech MX Master 3',
                    'Keyboard - Corsair K95 RGB',
                    'Monitor - LG 27UL850-W',
                    'Webcam - Logitech Brio 4K',
                ];

                const searchResults = [];
                for (const product of products) {
                    if (product.toLowerCase().includes(searchTerm.toLowerCase())) {
                        searchResults.push(product);
                    }
                }

                // Display the results
                if (searchResults.length > 0) {
                    searchResults.forEach(product => {
                        const resultDiv = document.createElement('div');
                        resultDiv.className = 'result-item';
                        resultDiv.innerHTML = product;
                        resultsContainer.appendChild(resultDiv);
                    });
                } else {
                    resultsContainer.innerHTML = '<p>No results found.</p>';
                }
            }
        });
    </script>

</body>
</html>


<?php

// Function to handle the search bar
function search_results($search_term) {
  // Sanitize the search term - VERY IMPORTANT for security
  $search_term = htmlspecialchars(trim($search_term));

  //  You would normally fetch data from a database here,
  //  based on the $search_term.  This example uses an array
  //  for demonstration purposes.

  $data = [
    ['id' => 1, 'name' => 'Apple iPhone 14 Pro'],
    ['id' => 2, 'name' => 'Samsung Galaxy S23'],
    ['id' => 3, 'name' => 'Google Pixel 7 Pro'],
    ['id' => 4, 'name' => 'OnePlus 11'],
    ['id' => 5, 'name' => 'Apple Watch Series 8'],
  ];

  // Convert the search term to lowercase for case-insensitive search
  $search_term = strtolower($search_term);

  $results = [];

  foreach ($data as $item) {
    // Check if the search term is in the item's name (case-insensitive)
    if (strpos($item['name'], $search_term) !== false) {
      $results[] = $item;
    }
  }

  // Return the results or an empty array if no results are found
  return $results;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
    if (isset($_GET['search'])) {
      $search_term = $_GET['search'];
      $results = search_results($search_term);

      if (!empty($results)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($results as $result) {
          echo "<li>" . $result['name'] . " (ID: " . $result['id'] . ")</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No products found matching your search.</p>";
      }
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// and you've defined $db as your connection object.
// Replace this with your actual database connection setup.

// Example Database Connection (replace with your actual credentials)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if($db->connect_error){
//   die("Connection failed: " . $db->connect_error);
// }

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and prepare the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm); // Escape HTML special characters
// Ideally, you'd use prepared statements with parameterized queries
// to prevent SQL injection.  This example just demonstrates basic escaping.

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Adjust 'products' and 'name' to your table and column names

// Execute the query
$result = $db->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<h2>Search Results:</h2>";
    while ($row = $result->fetch_assoc()) {
      echo "<p>" . $row["name"] . " - " . $row["description"] . "</p>"; // Adjust column names
    }
  } else {
    echo "<p>No products found matching your search.</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a form where users can enter their search query.
// This example uses a simple HTML form for demonstration.

// Initialize a variable to hold the search query.
$search_query = "";

// Check if the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the input to prevent XSS and other vulnerabilities.
  $search_query = htmlspecialchars(trim($_POST["search_term"])); 

  // You can perform additional validation here, e.g., checking if the
  // query is empty or contains invalid characters.
  if (empty($search_query)) {
    echo "<p>Please enter a search term.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Form</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo $search_query; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  // Display the search results based on the query.  This is just a placeholder.
  if (!empty($search_query)) {
    echo "<p>You searched for: " . $search_query . "</p>";
    // In a real application, you would query a database or other data source
    // here and display the results.  Example:
    // $results = searchDatabase($search_query);
    // if ($results) {
    //   echo "<ul>";
    //   foreach ($results as $result) {
    //     echo "<li>" . $result . "</li>";
    //   }
    //   echo "</ul>";
    // } else {
    //   echo "<p>No results found.</p>";
    // }
  }
?>

</body>
</html>


<?php

// Simple Search Bar Implementation

// Initialize variables
$search_term = "";

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $search_term = trim($_POST["search_term"]); // Trim whitespace
}

// Search Logic (Example: Searching through an array)
$products = [
  "Laptop - 15 inch",
  "Wireless Mouse",
  "Keyboard - Mechanical",
  "Monitor - 27 inch",
  "USB Hub",
];

if (!empty($search_term)) {
  $results = [];
  foreach ($products as $product) {
    if (stripos($product, $search_term) !== false) { // Case-insensitive search
      $results[] = $product;
    }
  }

  if (!empty($results)) {
    echo "<p>Search Results for: " . htmlspecialchars($search_term) . "</p>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'</p>";
  }
}

// HTML Form for the Search Bar
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="search_term">Search:</label>
  <input type="text" id="search_term" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>">
  <button type="submit">Search</button>
</form>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search:</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>


  <script>
    // JavaScript function to handle the search
    function search() {
      // Get the value from the input field
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here
      // This is just a placeholder; replace with your actual search code.

      // Example:  Display the search term in an alert box.
      alert("You searched for: " + searchTerm);

      // Alternatively, you can submit a form to a server-side script
      // to perform the search on the server.  See example code below.
    }
  </script>

</body>
</html>


<?php

// Assume you have a database connection established (e.g., $db_connection)
// This is just a basic example; you'll need to adapt it to your database setup.

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize and validate the search term
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

  // Validate the search term - crucial for security
  if (empty($searchTerm)) {
    $error = "Please enter a search term.";
  } elseif (!is_string($searchTerm)) {
      $error = "Invalid Search Term.  Please enter text.";
  }
  // Perform the search (replace with your actual database query)
  $searchResults = performSearch($searchTerm); 

  // Store the search term for display in the results
  $searchTerm = $searchTerm;
} else {
  // If the form hasn't been submitted, initialize the search term to an empty string
  $searchTerm = "";
  $searchResults = []; // Initialize an empty array for results
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
  <style>
    .search-container {
      margin-bottom: 20px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
    }
    .results {
      margin-top: 20px;
    }
    .result-item {
      margin-bottom: 10px;
      border: 1px solid #eee;
      padding: 10px;
      background-color: #f9f9f9;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <input type="text" name="search_term" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Enter search term">
      <button type="submit">Search</button>
    </form>
  </div>

  <?php if (!empty($searchResults)): ?>
    <div class="results">
      <?php foreach ($searchResults as $result): ?>
        <div class="result-item">
          <p><?php echo htmlspecialchars($result); ?></p>
        </div>
      <?php endforeach; ?>
    </div>
  <?php endif; ?>

  <?php if (isset($error)): ?>
    <div style="color: red;">Error: <?php echo htmlspecialchars($error); ?></div>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    .search-input {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    .search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
    <button class="search-button" onclick="search()">Search</button>
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here.
      // This is just a placeholder example.

      //  Example:  Filtering a list of items
      var items = ["apple", "banana", "orange", "grape", "kiwi"];
      var results = items.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });


      // Display the results (Replace this with your actual result handling)
      var resultsString = "Search Results: " + results.join(", ");
      alert(resultsString); // For simplicity, show the results in an alert
      //  Or, more elegantly, update the content of an element on the page
      //  e.g., document.getElementById("searchResults").innerHTML = results.join("<br>");

    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form input
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security - prevents SQL injection)
$searchTerm = htmlspecialchars($searchTerm);

// Escape the search term for use in the SQL query
$searchTerm = $conn->real_escape_string($searchTerm);  // Use your database connection's escape function

// Example: Search in a table named 'products' with a column named 'name'
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; 

// Execute the query
$result = $conn->query($sql);

// Check if there are any results
if ($result->num_rows > 0) {
  // Output the search results
  echo "<form method='get' style='margin: 0;'>
        <input type='text' name='search' style='width: 300px; padding: 5px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px;' value='" . $searchTerm . "' placeholder='Search...' >
        <button type='submit' style='padding: 5px 10px; background-color: #4CAF50; color: white; border: none; border-radius: 4px;'>Search</button>
      </form>";

  echo "<table border='1'>
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <!-- Add other columns as needed -->
          </tr>
        </thead>
        <tbody>";

  // Output the results
  while ($row = $result->fetch_assoc()) {
    echo "<tr>
          <td>" . $row['id'] . "</td>
          <td>" . $row['name'] . "</td>
          <td>" . $row['description'] . "</td>
          <!-- Add other columns as needed -->
        </tr>";
  }

  echo "</tbody>
      </table>";

} else {
  echo "<p>No results found for '" . $searchTerm . "'.</p>";
}


// **Important Considerations and Improvements:**

// 1. **Database Connection:**  This code assumes you have a database connection established and assigned to the `$conn` variable.  You'll need to replace this placeholder with your actual database connection code.

// 2. **Security (SQL Injection):**  The most critical part is escaping the `$searchTerm` before using it in the SQL query.  *Never* directly concatenate user input into a SQL query. Use the proper escaping function provided by your database driver (e.g., `$conn->real_escape_string()` in this case, assuming you're using MySQLi).

// 3. **HTML Form:**
//   - The code creates a simple HTML form with an input field (`search`) and a submit button.
//   - `name='search'` is essential for the form data to be accessible via `$_GET['search']`.
//   - `value='` . $searchTerm . `'` automatically populates the input field with the search term, making it easier for the user to re-enter the search.
//   - `placeholder='Search...'` provides a helpful hint to the user.
//   - The styling is basic, but you can customize it further.

// 4. **Search Logic:**
//   - `LIKE '%` . $searchTerm . `%'` performs a partial string match.  This means that it will find results where the search term is *part* of the name, regardless of its position.
//   - The `%` characters are wildcards.  `%` matches zero or more characters, and `_` matches a single character.

// 5. **Error Handling:** Add error handling to check if the query was executed successfully and handle any errors.

// 6. **Performance:** For large datasets, consider using indexes on the database columns you're searching, and using more efficient search methods (e.g., full-text search).  The `LIKE` operator can be slow on large tables.

// 7. **Alternative Search Methods:**
//    - **Full-Text Search:** If you need more powerful and faster searching, consider implementing full-text search capabilities. Many database systems have built-in support for this.
//    - **Other Search Libraries:** If you're using a framework (e.g., Laravel, Symfony), they likely have built-in search functionality that you can utilize.


// Example Database Connection (MySQLi) - Replace with your actual connection details
/*
$conn = new mysqli("localhost", "your_username", "your_password", "your_database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
*/
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle the search query
function search($search_term, $table_name, $searchable_columns)
{
  global $db; // Access the global database connection

  $query = "SELECT * FROM " . $table_name . " WHERE ";

  $conditions = [];
  $params = [];

  foreach ($searchable_columns as $column)
  {
    // Sanitize the search term (important for security!)
    $search_term = $db->real_escape_string($search_term);

    // Add the condition to the query
    $conditions[] = "`" . $column . "`" . " LIKE '%" . $search_term . "%'";
    $params[] = $search_term; // Store the search term for parameter binding
  }

  $query .= implode(" OR ", $conditions);

  // Execute the query
  $result = $db->query($query);

  if ($result->num_rows > 0)
  {
    // Return the results as an array
    $rows = [];
    while ($row = $result->fetch_assoc())
    {
      $rows[] = $row;
    }
    return $rows;
  }
  else
  {
    return []; // Return an empty array if no results are found
  }
}


// Example Usage:

// 1.  Define the table and searchable columns
$table_name = 'products';
$searchable_columns = ['name', 'description', 'category']; // Columns to search in


// 2. Get the search term from the user (e.g., from an input field)
$search_term = $_GET['search'] ?? ''; // Use $_GET or $_POST, depending on where you're getting the input
//  $_POST['search']  //  If you're using POST instead of GET


// 3.  Call the search function
$results = search($search_term, $table_name, $searchable_columns);

// 4. Display the results
if (count($results) > 0)
{
  echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>"; // Sanitize output
  echo "<table border='1'>";
  echo "<thead><tr><th>" . $table_name . "</th></tr></thead>";
  echo "<tbody>";
  foreach ($results as $row)
  {
    echo "<tr>";
    foreach ($row as $key => $value)
    {
      echo "<td>" . htmlspecialchars($value) . "</td>"; // Sanitize output
    }
    echo "</tr>";
  }
  echo "</tbody>";
  echo "</table>";
}
else
{
  echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>"; // Sanitize output
}


?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape the search term for use in the query (prevents SQL injection)
$escapedSearchTerm = $conn->real_escape_string($searchTerm);


// Perform the search (example using a simple table called 'products')
$sql = "SELECT * FROM products WHERE name LIKE '%" . $escapedSearchTerm . "%'"; //Using LIKE for partial matches
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (still needed for HTML escaping in the output)
$searchTerm = htmlspecialchars($searchTerm);

// Escape the search term for the query - prepared statements handle the escaping
$sql = "SELECT * FROM products WHERE name LIKE :search";
$stmt = $conn->prepare($sql);  //Use prepare()
$stmt->bindValue(':search', $searchTerm, PDO::PARAM_STR); //Bind the parameter
$stmt->execute();

$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    width: 300px;
    padding: 10px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Important for consistent width */
  }
</style>
</head>
<body>

<div class="search-container">
  <form method="get" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>
</div>

<?php
// Example data to search through (replace with your actual data)
$data = [
  "apple", "banana", "orange", "grapefruit", "kiwi",
  "watermelon", "pineapple", "strawberry", "blueberry", "raspberry"
];

if (isset($_GET['search_term'])) {
  $searchTerm = htmlspecialchars($_GET['search_term']);
  $searchResults = [];

  foreach ($data as $item) {
    if (strpos($item, $searchTerm) !== false) {
      $searchResults[] = $item;
    }
  }

  if (!empty($searchResults)) {
    echo "<pre>"; // For better formatting of the results
    print_r($searchResults);
    echo "</pre>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the form (if submitted)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and XSS attacks
$searchTerm = htmlspecialchars(trim($searchTerm));

//  (Optional)  You can add more validation here, such as checking for empty search terms.
if (empty($searchTerm)) {
  $results = []; // Return an empty array if no search term is provided
} else {
  // Construct the SQL query
  //  *** IMPORTANT: This is a basic example.  In a real application, you MUST use prepared statements
  //  to prevent SQL injection.  I'm providing this for demonstration purposes.
  $tableName = 'your_table_name'; // Replace with your table name
  $columns = ['name', 'description']; // Replace with the columns you want to search

  $sql = "SELECT * FROM $tableName WHERE ";

  $conditions = [];
  foreach ($columns as $column) {
    $conditions[] = "$column LIKE '%$searchTerm%'";
  }

  $sql .= implode(' OR ', $conditions);

  // Execute the query
  $result = mysqli_query($db, $sql); // Replace $db with your database connection

  // Check for errors
  if (mysqli_error($db)) {
    $results = ['error' => mysqli_error($db)];
  } else {
    $results = $result;
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>" />
    <button type="submit">Search</button>
  </form>

  <?php if (isset($results) && isset($results['error'])) { ?>
    <p style="color: red;">Error: <?php echo htmlspecialchars($results['error']); ?></p>
  <?php } else if (count($results) > 0) { ?>
    <table>
      <thead>
        <tr>
          <?php foreach ($columns as $column) { ?>
            <th><?php echo htmlspecialchars($column); ?></th>
          <?php } ?>
        </tr>
      </thead>
      <tbody>
        <?php
        foreach ($results as $row) {
          echo "<tr>";
          foreach ($columns as $column) {
            echo "<td>" . htmlspecialchars($row[$column]) . "</td>";
          }
          echo "</tr>";
        }
        ?>
      </tbody>
    </table>
  <?php } else {
    echo "<p>No results found.</p>";
  } ?>

</body>
</html>


// (Assuming you've established $db and $stmt)
$searchTerm = htmlspecialchars($_GET['search']);

// Build the prepared statement
$sql = "SELECT * FROM $tableName WHERE ";

$columns = ['name', 'description'];
$conditions = [];

foreach ($columns as $column) {
  $conditions[] = "$column LIKE ?";
}

$sql .= implode(' OR ', $conditions);

// Prepare the statement
$stmt = $db->prepare($sql);
if ($stmt === false) {
    // Handle the error
    echo "Error preparing statement: " . $db->error;
    exit;
}

// Bind parameters
foreach ($columns as $column) {
  $stmt->bind_param($column, "%$searchTerm%"); // Use % to escape the variable
}

// Execute the query
$stmt->execute();

// Get results
$results = $stmt->get_result();

// Close statement
$stmt->close();


<?php

// Sample data (replace with your actual data source - e.g., database)
$data = [
  "apple", "banana", "cherry", "date", "elderberry",
  "fig", "grape", "honeydew", "kiwi", "lemon"
];

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);  // Prevents XSS

// Perform the search
$searchResults = [];
if (!empty($searchTerm)) {
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) {  // Case-insensitive search
      $searchResults[] = $item;
      break; // Stop searching after finding the first match
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="get">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
  <?php else: ?>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
      display: flex;
      align-items: center;
    }

    .search-input {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      flex: 1; /* Take up available space */
    }

    .search-button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-left: 10px;
    }

    .search-results {
      margin-top: 20px;
    }

    .result-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" class="search-input" id="searchInput" placeholder="Search...">
    <button class="search-button" onclick="search()">Search</button>
  </div>

  <div id="searchResults" class="search-results">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("searchResults");

      // Example data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 14", description: "The latest iPhone.", link: "https://example.com/iphone14" },
        { title: "Samsung Galaxy S23", description: "A powerful Android phone.", link: "https://example.com/s23" },
        { title: "Google Pixel 7", description: "Google's flagship phone.", link: "https://example.com/pixel7" },
        { title: "Laptop", description: "A portable computer.", link: "https://example.com/laptop" }
      ];

      // Clear previous results (optional)
      resultsDiv.innerHTML = "";

      // Filter the data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the filtered results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var resultItem = document.createElement("div");
          resultItem.classList.add("result-item");
          resultItem.innerHTML = `
            <h3><a href="${item.link}">${item.title}</a></h3>
            <p>${item.description}</p>
          `;
          resultsDiv.appendChild(resultItem);
        });
      } else {
        var noResultsMessage = document.createElement("p");
        noResultsMessage.innerHTML = "No results found.";
        resultsDiv.appendChild(noResultsMessage);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established, let's call it $db

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";
    
    if ($searchTerm) {
        // Perform your database search here
        // Example using a hypothetical "products" table
        $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
        
        // Execute the query
        // Example: $result = mysqli_query($db, $query);  // Use your database library's function
        
        //  Instead of mysqli_query, consider using PDO or another more secure and flexible method
        //  Here's an example using PDO:
        try {
            $stmt = $db->prepare($query);
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            //Handle the error gracefully (e.g., log it, display a user-friendly message)
            die(); //Stop execution if database error is critical
        }
        
        // Process the results and display them
        if ($results) {
            echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
            echo "<table border='1'>";
            echo "<thead><tr><th>ID</th><th>Name</th><th>Description</th></tr></thead>";
            echo "<tbody>";
            foreach ($results as $row) {
                echo "<tr>";
                echo "<td>" . $row["id"] . "</td>";
                echo "<td>" . htmlspecialchars($row["name"]) . "</td>";
                echo "<td>" . htmlspecialchars($row["description"]) . "</td>";
                echo "</tr>";
            }
            echo "</tbody>";
            echo "</table>";
        } else {
            echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
/* Basic styling for the search bar */
.search-container {
  width: 300px;
  margin: 0 auto;
  text-align: center;
}

.search-input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  box-sizing: border-box; /* Include padding and border in the element's total width */
}

.search-button {
  padding: 10px 20px;
  background-color: #4CAF50; /* Green */
  color: white;
  border: none;
  cursor: pointer;
  margin-left: 10px;
}

.search-button:hover {
  background-color: #3e8e41;
}
</style>
</head>
<body>

<div class="search-container">
  <input type="text" class="search-input" id="searchInput" placeholder="Search...">
  <button class="search-button" onclick="search()">Search</button>
</div>

<script>
function search() {
  var searchTerm = document.getElementById("searchInput").value;

  if (searchTerm.trim() === "") {
    // Handle empty search
    alert("Please enter a search term.");
    return;
  }

  //  Replace this with your actual search logic.  This is just a placeholder.
  console.log("Searching for: " + searchTerm);
  // Example:  You'd likely fetch data from an API or your database here.
  // For demonstration, we'll just display the search term in an alert.
  alert("Searching for: " + searchTerm);

  // Clear the input field after the search
  document.getElementById("searchInput").value = "";
}
</script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." onkeyup="searchFunction()">
    <button onclick="searchFunction()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // **Replace this with your actual data retrieval logic**
      var data = [
        { title: "Apple Pie", description: "Delicious apple pie recipe." },
        { title: "Banana Bread", description: "Classic banana bread recipe." },
        { title: "Chocolate Cake", description: "Rich chocolate cake recipe." },
        { title: "Strawberry Shortcake", description: "Sweet strawberry shortcake recipe." }
      ];

      // Iterate through the data and filter based on the search term
      for (var i = 0; i < data.length; i++) {
        if (data[i].title.toLowerCase().indexOf(searchTerm) > -1) {
          var listItem = document.createElement("div");
          listItem.innerHTML = "<b>" + data[i].title + "</b><br>" + data[i].description;
          listItem.style.borderBottom = "1px solid #eee";
          listItem.style.paddingBottom = "10px";
          listItem.style.marginBottom = "5px";
          listItem.style.textAlign = "left";
          resultsDiv.appendChild(listItem);
        }
      }

      // If no results are found
      if (resultsDiv.innerHTML === "") {
        resultsDiv.innerHTML = "<p>No results found for '" + searchTerm + "'</p>";
      }
    }
  </script>

</body>
</html>


<?php

// Simple search bar implementation using PHP

// 1. Get the search term from the form
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search"]) ? htmlspecialchars($_POST["search"]) : "";
}

// 2.  Data to search through (example - replace with your data source)
$data = [
    ["id" => 1, "name" => "Apple", "description" => "A sweet fruit."],
    ["id" => 2, "name" => "Banana", "description" => "A yellow fruit."],
    ["id" => 3, "name" => "Orange", "description" => "A citrus fruit."],
    ["id" => 4, "name" => "Grape", "description" => "Small, juicy fruit."]
];

// 3.  Search the data
if ($searchTerm) {
  $searchResults = [];
  foreach ($data as $item) {
    // Case-insensitive search
    $found = false;
    $searchTermLower = strtolower($searchTerm);
    $nameLower = strtolower($item["name"]);
    $descriptionLower = strtolower($item["description"]);

    if (strpos($nameLower, $searchTermLower) !== false ||
        strpos($descriptionLower, $searchTermLower) !== false) {
      $found = true;
    }

    if ($found) {
      $searchResults[] = $item;
    }
  }
} else {
  $searchResults = []; // Reset if search term is empty
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($searchResults)): ?>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li>
          <strong>ID:</strong> <?php echo $result["id"]; ?><br>
          <em>Name:</em> <?php echo $result["name"]; ?><br>
          <small>Description: <?php echo $result["description"]; ?></small>
        </li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found.</p>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    width: 300px;
    margin: 20px auto;
  }

  .search-input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    box-sizing: border-box; /* Important for consistent sizing */
  }

  .search-button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
  }

  .search-results {
    margin-top: 20px;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" class="search-input" placeholder="Search...">
  <button class="search-button" onclick="search()">Search</button>
</div>

<div class="search-results">
  <!-- Search results will be displayed here -->
</div>

<script>
  function search() {
    var searchTerm = document.querySelector('.search-input').value;
    var resultsDiv = document.querySelector('.search-results');

    if (searchTerm.trim() === "") {
      resultsDiv.innerHTML = ""; // Clear results if input is empty
      return;
    }

    // Simulate a search (replace with your actual search logic)
    var data = [
      "Apple", "Banana", "Orange", "Grape", "Strawberry",
      "Pineapple", "Mango", "Kiwi", "Watermelon", "Peach"
    ];

    var results = data.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));

    if (results.length === 0) {
      resultsDiv.innerHTML = "<p>No results found.</p>";
    } else {
      var resultHTML = "";
      results.forEach(item => {
        resultHTML += "<p>" + item + "</p>";
      });
      resultsDiv.innerHTML = resultHTML;
    }
  }
</script>

</body>
</html>


<?php

// Assuming you have a form to collect the search term.  This is just an example
// and you'll need to adapt it to your HTML form.

// Example Form (place this in your HTML)
// <form method="GET" action="search.php">
//   <input type="text" name="search_term" placeholder="Search...">
//   <button type="submit">Search</button>
// </form>

// This script (search.php) receives the search term from the form.

if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Get the search term from the form
  $search_term = isset($_GET["search_term"]) ? trim($_GET["search_term"]) : "";

  // Sanitize and validate the search term (important for security!)
  $search_term = htmlspecialchars(trim($search_term)); // Converts special chars to HTML entities
  //  Further validation:  check length, allow only alphanumeric, etc.  This is crucial.
  if (empty($search_term)) {
      // No search term entered, display a message or redirect
      echo "<p>Please enter a search term.</p>";
      // Or, redirect to the same page to prompt the user.
      // header("Location: search.php");
      exit;
  }

  // Perform the search (replace with your database query or logic)
  $results = performSearch($search_term); // Call a function to handle the search

  // Display the search results
  echo "<h2>Search Results for: " . $search_term . "</h2>";

  if (empty($results)) {
    echo "<p>No results found for '" . $search_term . "'.</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
} else {
  // Handle other request methods (e.g., POST) if needed
  echo "<p>Invalid request method.</p>";
}


// Helper function to perform the search (replace with your actual search logic)
function performSearch($term) {
  // This is a placeholder. Replace this with your database query or other search method.
  // Example:  Simulated search based on the search term.
  $results = [
    "Product 1 -  A great product!",
    "Product 2 -  Another amazing product.",
    "Service A -  Professional service.",
    "Service B -  Reliable service."
  ];

  return $results;
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust as needed */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Example:  Search within a hypothetical array of items
      //  Replace this with your actual data retrieval logic
      var items = ["apple", "banana", "cherry", "date", "elderberry"];

      if (searchTerm) {
        var results = items.filter(function(item) {
          return item.toLowerCase().includes(searchTerm.toLowerCase());
        });

        // Display the results (replace this with your desired display method)
        var resultsHTML = "<ul>";
        results.forEach(function(result) {
          resultsHTML += "<li>" + result + "</li>";
        });
        resultsHTML += "</ul>";

        document.getElementById("resultsContainer").innerHTML = resultsHTML; // Display results in a results container
      } else {
        // Clear results if the search box is empty
        document.getElementById("resultsContainer").innerHTML = "";
      }
    }
  </script>

  <!-- Container for displaying search results (optional) -->
  <div id="resultsContainer"></div>


</body>
</html>


<?php

// Simple search bar implementation using PHP

// Check if the search form has been submitted
if (isset($_SERVER["REQUEST_METHOD"]) && "POST" == $_SERVER["REQUEST_METHOD"]) {
  // Get the search term from the form
  $searchTerm = htmlspecialchars(trim($_POST["search"]));

  // Perform the search (replace with your actual search logic)
  $searchResults = performSearch($searchTerm); 

  // Display the search results
  echo "<div class='search-results'>";
  if (empty($searchResults)) {
    echo "No results found for: " . $searchTerm;
  } else {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<ul class='search-results-list'>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
  echo "</div>";
}

// Form for submitting the search term
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="search">Search:</label>
  <input type="text" id="search" name="search" placeholder="Enter search term">
  <button type="submit">Search</button>
</form>


function performSearch($searchTerm) {
  $data = [
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "pineapple"
  ];
  $results = [];
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }
  return $results;
}


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the search term from the form
    $searchTerm = $_POST["search_term"];

    // Sanitize the search term (important for security)
    $searchTerm = htmlspecialchars(trim($searchTerm)); 

    // You can do something with the search term here, such as:
    // 1.  Database query
    // 2.  File search
    // 3.  Simple string comparison within the current page

    // Example:  Display the search term in a simple alert
    echo "<script>alert('Searching for: " . $searchTerm . "');</script>";
    // or display in a div
    // echo "<div class='search-results'>You searched for: " . $searchTerm . "</div>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php
// Assuming you have a database connection established ($conn)
// and a table named 'products' with a 'name' column.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = htmlspecialchars($_POST["search_term"]);

    // Construct the SQL query (using a parameterized query for security)
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // Execute the query
    $result = mysqli_query($conn, $sql);

    // Display the results
    if (mysqli_num_rows($result) > 0) {
        echo "<ul>";
        while($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . $row["name"] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "No results found.";
    }

    mysqli_close($conn);
}
?>


<?php

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security!)
  $searchTerm = htmlspecialchars($searchTerm); // Prevents XSS

  // You can now use the $searchTerm for your search logic.
  // Example: Search through an array or database.

  // For demonstration purposes, let's display the search term:
  echo "<p>You searched for: " . $searchTerm . "</p>";

  // Add your search results here.  This is just a placeholder.
  // Example:
  // $results = searchDatabase($searchTerm);
  // echo "<pre>";
  // print_r($results);
  // echo "</pre>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's call this $db

// Example database connection setup (replace with your actual details)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Function to handle the search
function performSearch($search_term, $table_name, $columns = ['title', 'description']) {
  global $db; // Access the global database connection

  // Sanitize the search term to prevent SQL injection
  $search_term = $db->real_escape_string($search_term);

  // Build the SQL query
  $columns_str = implode(', ', $columns);
  $sql = "SELECT * FROM $table_name WHERE $columns_str LIKE '%" . $search_term . "%'";

  $result = $db->query($sql);

  if ($result->num_rows > 0) {
    // Output the results (adjust this part based on your desired output format)
    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>";
      foreach ($columns as $column) {
        echo htmlspecialchars($row[$column]); // Use htmlspecialchars to prevent XSS
        if ($column != $columns[count($columns) - 1]) {
          echo ", ";
        }
      }
      echo "</li>";
    }
    echo "</ul>";
  } else {
    echo "No results found.";
  }
}


// Example usage:  (This part will be in your HTML page)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="" method="GET">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php

  // Check if the search term is submitted
  if (isset($_GET['search_term'])) {
    $search_term = $_GET['search_term'];
    // Perform the search
    performSearch($search_term, 'products'); // Assuming your table is named 'products'
  }

  ?>

</body>
</html>


// Example with prepared statements (much more secure)
$stmt = $db->prepare("SELECT * FROM products WHERE title LIKE ? OR description LIKE ?");
$stmt->bind_param("s", "%" . $search_term . "%", "%" . $search_term . "%"); // String types
$stmt->execute();
$result = $stmt->get_result();

// ... (Output the results as before)


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you want to search through a table named 'products'
// with a column named 'name'

// Example database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent SQL injection)
$searchTerm = $conn->real_escape_string($searchTerm);


// Perform the search
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter product name" value="<?php echo $searchTerm; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<table border='1'><tr><th>ID</th><th>Name</th><th>Description</th></tr>";
    // Output data of each row.
    while($row = $result->fetch_assoc()) {
      echo "<tr><td>" . $row["id"] . "</td><td>" . $row["name"] . "</td><td>" . $row["description"] . "</td></tr>";
    }
    echo "</table>";
  } else {
    echo "No results found.";
  }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape special characters to prevent SQL injection
$searchTerm = $db->real_escape_string($searchTerm);

// SQL query for searching (example - adjust to your database schema)
$query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $db->query($query);

// Check if the query was successful
if ($result) {
  // Display the search results
  echo '<form method="GET" action="your_script.php">
          <input type="text" name="search" placeholder="Search..." value="' . $searchTerm . '">
          <button type="submit">Search</button>
        </form>';

  echo '<table border="1">';
  echo '<thead><tr><th>ID</th><th>Column 1</th><th>Column 2</th></tr></thead>';

  while ($row = $result->fetch_assoc()) {
    echo '<tr>';
    echo '<td>' . $row['id'] . '</td>';
    echo '<td>' . $row['your_column_1'] . '</td>';
    echo '<td>' . $row['your_column_2'] . '</td>';
    echo '</tr>';
  }

  echo '</table>';

} else {
  // Display an error message if the query failed
  echo '<p>Error: ' . $db->error . '</p>';
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust width as needed */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      // Clear previous results (optional)
      resultsDiv.innerHTML = "";

      // Perform your search logic here.
      // This is a placeholder example. Replace with your actual data source and search algorithm.
      if (searchTerm.trim() === "") {
        // Handle empty search term - display a message or do nothing
        resultsDiv.innerHTML = "<p>Please enter a search term.</p>";
        return;
      }

      // Example: Simple search through an array of items
      var items = ["apple", "banana", "orange", "grape", "watermelon"];
      var foundItems = items.filter(function(item) {
        return item.toLowerCase().includes(searchTerm.toLowerCase());
      });

      if (foundItems.length > 0) {
        var resultsHTML = "<ul>";
        foundItems.forEach(function(item) {
          resultsHTML += "<li>" + item + "</li>";
        });
        resultsHTML += "</ul>";
        resultsDiv.innerHTML = resultsHTML;
      } else {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a form to collect the search term
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <input type="submit" value="Search">
  </form>

  <?php

  // Handle the search term when the form is submitted
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Perform your search logic here.  This is just an example.
    //  Replace this with your actual database query or other search implementation.
    $results = performSearch($search_term); // Assuming you have a function named performSearch

    // Display the results.
    if (empty($results)) {
      echo "<p>No results found for: " . $search_term . "</p>";
    } else {
      echo "<h2>Search Results for: " . $search_term . "</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    }
  }
  ?>

  <script>
    // Optional: Add some basic styling and validation
    //  This is just an example; customize as needed.
    document.getElementById("search_term").placeholder = "Enter search term";
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established and assigned to $conn

$search_term = htmlspecialchars($_GET['search_term']);

// Example query - replace with your actual query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

$stmt = $conn->prepare($sql);
$stmt->execute();

$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

// ... (rest of your code to display the results)
?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// 1. Get the search term from the search bar
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize the search term (IMPORTANT for security!)
$searchTerm = htmlspecialchars($searchTerm); // Escapes HTML entities
$searchTerm = trim($searchTerm); // Removes leading/trailing whitespace

// 3. Query the database
if ($searchTerm) {
    $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($conn, $query);

    // 4. Display the results (or a message if no results)
    if ($result) {
        echo '<ul>';
        while ($row = mysqli_fetch_assoc($result)) {
            echo '<li>' . $row['your_column_name'] . '</li>'; // Replace 'your_column_name' with the actual column name
        }
        echo '</ul>';
    } else {
        echo 'No results found for: ' . $searchTerm;
    }

    // Close the database connection (recommended)
    mysqli_close($conn);
} else {
    // If no search term is provided, you can display all the data or a default message
    echo '<h3>Search for:</h3>';
    echo '<input type="text" name="search" placeholder="Enter search term">';
}

?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 300px;
    font-size: 16px;
  }
  button {
    padding: 8px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
</style>
</head>
<body>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search...">
  <button onclick="search()">Search</button>
</div>

<div id="searchResults">
  <!-- Results will be displayed here -->
</div>

<script>
function search() {
  var searchTerm = document.getElementById("searchInput").value;
  var searchResultsDiv = document.getElementById("searchResults");

  // Clear previous results
  searchResultsDiv.innerHTML = "";

  // Perform your search logic here
  // This is a placeholder - replace with your actual search code
  if (searchTerm.trim() === "") {
    return; // Don't display results if search term is empty
  }

  // Example:  Simulated search - replace with your database query
  var data = [
    { title: "Apple iPhone 13", description: "The latest iPhone" },
    { title: "Samsung Galaxy S22", description: "A great Android phone" },
    { title: "Google Pixel 6", description: "Google's flagship phone" },
    { title: "Red Hat Linux", description: "A popular Linux distribution" },
  ];

  // Filter the data based on the search term
  var filteredData = data.filter(function(item) {
    return item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
           item.description.toLowerCase().includes(searchTerm.toLowerCase());
  });

  // Display the results
  if (filteredData.length > 0) {
    filteredData.forEach(function(item) {
      var resultDiv = document.createElement("div");
      resultDiv.innerHTML = `<strong>${item.title}</strong><br>${item.description}`;
      resultDiv.appendChild(resultDiv);
    });
    searchResultsDiv.appendChild(resultDiv);
  } else {
    var noResultsDiv = document.createElement("div");
    noResultsDiv.innerHTML = "No results found.";
    searchResultsDiv.appendChild(noResultsDiv);
  }
}
</script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli or PDO)
// Let's use mysqli for demonstration
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the search bar (using $_GET for simplicity)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm); // Sanitize to prevent XSS

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // Perform the search query (adjust this to your specific database structure)
  if ($searchTerm) {
    $sql = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'"; // Example: search in a 'title' column
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
      // Output each row of the search result
      while($row = $result->fetch_assoc()) {
        echo "<div>";
        echo "Title: " . htmlspecialchars($row["title"]) . "<br>"; // Sanitize output too!
        echo "Description: " . htmlspecialchars($row["description"]) . "<br>";
        // Add other fields as needed
        echo "</div>";
      }
    } else {
      echo "<p>No results found.</p>";
    }
  }

  ?>

</body>
</html>


<?php
// ... (Database connection as before) ...

// Get the search term from the search bar
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';
$searchTerm = htmlspecialchars($searchTerm);

if ($searchTerm) {
    // Prepared statement -  This is the key for security
    $stmt = $conn->prepare("SELECT * FROM your_table WHERE title LIKE %s", "%");
    $stmt->bind_param("s", $searchTerm); // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<div>";
            echo "Title: " . htmlspecialchars($row["title"]) . "<br>";
            echo "Description: " . htmlspecialchars($row["description"]) . "<br>";
            echo "</div>";
        }
    } else {
        echo "<p>No results found.</p>";
    }

    $stmt->close(); // Close the statement
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .results {
      margin-top: 20px;
    }
    .result-item {
      padding: 10px;
      border: 1px solid #eee;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search</h2>
    <input type="text" id="search-input" placeholder="Enter search term">
    <button onclick="performSearch()">Search</button>
  </div>

  <div class="results" id="results-container">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function performSearch() {
      const searchTerm = document.getElementById('search-input').value.toLowerCase();
      const resultsContainer = document.getElementById('results-container');

      // **Important:  Replace this with your actual data source and logic**
      const data = [
        { title: 'Apple iPhone 14', description: 'The latest iPhone with a fantastic camera.' },
        { title: 'Samsung Galaxy S23', description: 'A powerful Android phone.' },
        { title: 'Google Pixel 7', description: 'Google\'s flagship phone.' },
        { title: 'Laptop - Dell XPS 13', description: 'A sleek and powerful laptop.' },
        { title: 'Gaming PC - Corsair', description: 'A high-performance gaming PC.' },
      ];

      // Clear previous results
      resultsContainer.innerHTML = '';

      // Loop through the data and display matching results
      data.forEach(item => {
        const title = item.title.toLowerCase();
        const description = item.description.toLowerCase();

        if (title.includes(searchTerm) || description.includes(searchTerm)) {
          const resultItem = document.createElement('div');
          resultItem.classList.add('result-item');
          resultItem.innerHTML = `
            <h3>${item.title}</h3>
            <p>${item.description}</p>
          `;
          resultsContainer.appendChild(resultItem);
        }
      });
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established
$searchTerm = $_GET['search']; // Get the search term from the query string

// Database connection details (replace with your details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Construct the SQL query (case-insensitive search)
$sql = "SELECT title, description FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Output data of each row
  while($row = $result->fetch_assoc()) {
    echo "<div class='result-item'>" .
         "<h3>" . $row["title"] . "</h3>" .
         "<p>" . $row["description"] . "</p>" .
         "</div>";
  }
} else {
  echo "<p>No results found.</p>";
}

$conn->close();
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you want to search through a table named 'products' with a 'name' column.

// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

  // Sanitize the search term to prevent XSS vulnerabilities
  $searchTerm = htmlspecialchars($searchTerm);

  // Perform the search
  if ($searchTerm) {
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // Use LIKE for partial matches
    $result = mysqli_query($db, $sql);

    if ($result) {
      echo "<form method='post' action='search_results.php'>
              <input type='text' name='search_term' value='" . $searchTerm . "' placeholder='Search products...'>
              <button type='submit'>Search</button>
            </form>";

      echo "<br>";

      echo "<h2>Search Results for: " . $searchTerm . "</h2>";

      if (mysqli_num_rows($result) > 0) {
        while ($row = mysqli_fetch_assoc($result)) {
          echo "<p>" . $row["name"] . " - " . $row["description"] . "</p>";
        }
      } else {
        echo "<p>No products found matching your search criteria.</p>";
      }

      mysqli_free_result($result);
    } else {
      echo "<p>Error executing query: " . mysqli_error($db) . "</p>";
    }
  }
?>

<!--  Example of the HTML form to submit the search  -->
<form method="post" action="search_results.php">
  <input type="text" name="search_term" placeholder="Search products...">
  <button type="submit">Search</button>
</form>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = htmlspecialchars($_POST["search_term"]);

  // Sanitize the input -  Important for security!
  $searchTerm = trim($searchTerm); // Remove leading/trailing whitespace
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING); // Remove HTML tags and potentially other characters

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $message = "Please enter a search term.";
  } else {
    // Perform the search (replace with your actual search logic)
    // Example:  Searching through an array of products
    $products = [
      "Red T-shirt" => "Description of Red T-shirt",
      "Blue Jeans" => "Description of Blue Jeans",
      "Black Shoes" => "Description of Black Shoes",
    ];

    $results = [];
    foreach ($products as $key => $value) {
      if (stripos($key, $searchTerm) !== false) { // Case-insensitive search
        $results[] = [
          "name" => $key,
          "description" => $value
        ];
      }
    }

    // Display the search results
    if (empty($results)) {
      $message = "No results found for '" . $searchTerm . "'.";
    } else {
      echo "<h2>Search Results for: " . $searchTerm . "</h2>";
      echo "<table border='1'>";
      echo "<tr><th>Name</th><th>Description</th></tr>";
      foreach ($results as $result) {
        echo "<tr>";
        echo "<td>" . $result["name"] . "</td>";
        echo "<td>" . $result["description"] . "</td>";
        echo "</tr>";
      }
      echo "</table>";
    }

  }

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h2>Search Products</h2>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <input type="submit" value="Search">
  </form>

  <?php
  // Display any error or message
  if (isset($message)) {
    echo "<p style='color: red;'>" . $message . "</p>";
  }
  ?>

</body>
</html>


<?php

// Sample data (replace this with your actual data source)
$products = [
    "Laptop - 15 inch",
    "Smartphone - Galaxy S23",
    "Tablet - iPad Air",
    "Headphones - Sony WH-1000XM5",
    "Gaming Mouse - Logitech G502",
    "Wireless Keyboard - Keychron K2",
];

// Function to search for products
function searchProducts($query, $products) {
    $results = [];
    $query = strtolower($query); // Convert to lowercase for case-insensitive search

    foreach ($products as $product) {
        if (strpos($product, $query) !== false) {  // Use strpos for efficiency
            $results[] = $product;
        }
    }

    return $results;
}

// Get the search query from the user (e.g., from a form submission)
$searchQuery = isset($_GET['search']) ? $_GET['search'] : '';  // Get from GET request, default to empty string

// Perform the search
$searchResults = searchProducts($searchQuery, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchQuery); ?>" />
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No products found matching your search term.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $product): ?>
                <li><?php echo htmlspecialchars($product); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$searchTerm = htmlspecialchars($searchTerm);

//  Optional: Escape the search term for SQL queries (recommended)
//  This example uses a simple escaping, but a more robust escaping method
//  should be used based on your database system.
// $searchTerm = $db->escapeString($searchTerm);

// Prepare the SQL query - *IMPORTANT* to prevent SQL injection
//  This example demonstrates using prepared statements with PDO.
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE :searchTerm";
$stmt = $db->prepare($sql); // Replace $db with your database connection object
$stmt->bindValue(':searchTerm', '%' . $searchTerm . '%'); //  Use LIKE with wildcards
$stmt->execute();

// Fetch the results
$results = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Display the search results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
</head>
<body>

    <h1>Search Results for: <?php echo htmlspecialchars($searchTerm); ?></h1>

    <form action="" method="get">
        <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (count($results) > 0): ?>
        <ul>
            <?php foreach ($results as $row): ?>
                <li><a href="your_link_to_row_details"><?php echo htmlspecialchars($row['your_column_name']); ?></a></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
  <style>
    /* Basic styling - feel free to customize */
    #search-container {
      margin-bottom: 10px;
    }
    #search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box; /* Ensures padding doesn't add to the width */
    }
    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    #search-results li {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results"></ul>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim(); // Get the value and remove leading/trailing whitespace

      if (searchTerm) { // Only perform the search if there's something to search for

        //  Replace this with your actual search logic
        const data = [
          { title: 'Apple iPhone 15', description: 'The latest iPhone' },
          { title: 'Samsung Galaxy S23', description: 'A powerful Android phone' },
          { title: 'Google Pixel 8', description: 'Google\'s flagship phone' },
          { title: 'Amazon Echo Dot', description: 'Smart speaker' }
        ];

        const results = data.filter(item =>
          item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||  // Search in the title
          item.description.toLowerCase().includes(searchTerm.toLowerCase()) // Also search in description
        );

        searchResults.innerHTML = ''; // Clear previous results

        if (results.length > 0) {
          results.forEach(result => {
            const listItem = document.createElement('li');
            listItem.textContent = `${result.title} - ${result.description}`;
            searchResults.appendChild(listItem);
          });
        } else {
          searchResults.innerHTML = '<p>No results found.</p>';
        }
      } else {
        searchResults.innerHTML = ''; // Clear if the input is empty
      }
    });

    // Add a keypress event listener to trigger the search when the user presses Enter
    searchInput.addEventListener('keypress', function(event) {
      if (event.key === 'Enter') {
        searchButton.click(); // Simulate a button click
      }
    });
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// This example uses mysqli, but you can adapt it to other database connections.
// Make sure you have a database connection object assigned to $conn.

// Example Database Connection (Replace with your actual connection details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the search term from the form (e.g., a GET or POST request)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent SQL injection)
$searchTerm = $conn->real_escape_string($searchTerm);

// Example: Search in a table named 'products' with a column named 'name'
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>" />
    <input type="submit" value="Search" />
  </form>

  <?php
    if ($result->num_rows > 0) {
      echo "<ul>";
      while ($row = $result->fetch_assoc()) {
        echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "No results found for '" . $searchTerm . "'.";
    }
  ?>

</body>
</html>


<?php

// Include the necessary library for database connection (e.g., mysqli)
require_once 'mysqli.php'; // Assuming you have a mysqli.php file

// Define the database connection details
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Create a database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check the connection
if ($conn->connect_error) {
  die('Connection failed: ' . $conn->connect_error);
}

// Get the search term from the form
$search_term = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

//  Escape the search term to prevent SQL injection
$search_term = $conn->real_escape_string($search_term);


// Perform the database query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'"; // Replace your_table_name and your_column_name with your actual table and column names.  Use LIKE for partial matches.

$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo $search_term; ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result->num_rows > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      // Output each row of the result
      while ($row = $result->fetch_assoc()) {
        echo "<li>";
        // Display the relevant data from the row
        echo htmlspecialchars($row['your_column_name']); // Replace 'your_column_name' with the actual column name you want to display
        echo "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }
  ?>

</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the input
  $search_term = trim($_POST["search_term"]);

  // Escape the search term to prevent XSS attacks
  $search_term = htmlspecialchars($search_term);

  // Perform your search logic here
  // Example: Searching through an array of products
  $products = [
    "Apple iPhone 13",
    "Samsung Galaxy S22",
    "Google Pixel 6",
    "OnePlus 10 Pro",
    "Sony Bravia TV 65 inch"
  ];

  $results = [];
  foreach ($products as $product) {
    if (strpos($product, $search_term) !== false) {
      $results[] = $product;
    }
  }

  // Display the results
  if (empty($results)) {
    echo "<p>No results found for: " . $search_term . "</p>";
  } else {
    echo "<h2>Search Results for: " . $search_term . "</h2>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search Products</h2>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

</body>
</html>


// Assuming you have a database connection established as $conn

$search_term = trim($_POST["search_term"]);
$search_term = htmlspecialchars($search_term);

// Example SQL query (adapt to your table and column names)
$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Output data of each row
  while($row = $result->fetch_assoc()) {
    // Display product details
    echo "Product Name: " . htmlspecialchars($row["name"]) . "<br>";
    echo "Description: " . htmlspecialchars($row["description"]) . "<br>";
    echo "<br>";
  }
} else {
  echo "<p>No results found for: " . $search_term . "</p>";
}


<?php

// Sample data (replace with your actual data source)
$products = [
    'Laptop 1' => 'Dell XPS 13',
    'Laptop 2' => 'MacBook Air',
    'Keyboard' => 'Logitech K380',
    'Mouse' => 'Logitech MX Master 3',
    'Monitor' => 'LG 27UL850',
];


// Function to handle the search
function searchProducts($search_term, $products) {
    $results = [];

    // Normalize the search term (lowercase and remove whitespace)
    $search_term = strtolower(trim($search_term));

    foreach ($products as $key => $value) {
        // Normalize the product name as well (for case-insensitive search)
        $product_name = strtolower(trim($value));

        // Check if the search term is present in the product name
        if (strpos($product_name, $search_term) !== false) {
            $results[$key] = $value;
        }
    }

    return $results;
}

// Get the search term from the form (or URL parameter)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';  // Check if the 'search' parameter is set


// Perform the search
$search_results = searchProducts($search_term, $products);


?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo isset($search_term) ? htmlspecialchars($search_term) : ''; ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (empty($search_results)): ?>
        <p>No products found.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($search_results as $key => $value): ?>
                <li><?php echo htmlspecialchars($value); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assume you have a database connection established (e.g., $conn)
// In a real application, you'd handle this connection appropriately.
// For this example, we'll just use a placeholder.

// Example Database Connection (Replace with your actual connection)
// $conn = mysqli_connect("localhost", "username", "password", "database_name");
// if (!$conn) {
//     die("Connection failed: " . mysqli_connect_error());
// }

// Check if the search term is provided
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Sanitize the search term to prevent SQL injection
  $searchTerm = mysqli_real_escape_string($conn, $searchTerm);

  // You can customize the search logic here.  This example demonstrates
  // a basic search against a 'products' table.
  // You'd likely have a more complex search in a real application.

  //  Example Search Query (Adjust to your table and columns)
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($conn, $query);

  // Check if any results were found
  if (mysqli_num_rows($result) > 0) {
    // Display the search results
    echo "<form method='get' action=''>"; // Form for submitting the search term
    echo "<input type='text' name='search' value='" . htmlspecialchars($searchTerm) . "' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<p><strong>" . htmlspecialchars($row['name']) . "</strong> - " . htmlspecialchars($row['description']) . "</p>";
      // Add more details as needed from the row
    }

  } else {
    echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
  }

} else {
  // Display the search form if no search term is provided
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' value='' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

mysqli_close($conn); // Close the database connection

?>


<?php

// Assuming you're working in a web environment (e.g., Apache with PHP)

// Initialize an empty array to hold the search results (for demonstration)
$searchResults = [];

// Function to handle the search submission
function handleSearch($searchTerm) {
  // Sanitize the search term to prevent XSS vulnerabilities
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Basic example: Search in a simple array of products
  $products = [
    "Laptop X1",
    "Tablet Z2",
    "Smartphone Y5",
    "Wireless Mouse",
    "Keyboard K3",
  ];

  // Convert search term to lowercase for case-insensitive search
  $searchTermLower = strtolower($searchTerm);

  $searchResults = []; // Reset results for each search

  foreach ($products as $product) {
    $productLower = strtolower($product);
    if (strpos($productLower, $searchTermLower) !== false) { // strpos returns position or false if not found
      $searchResults[] = $product;
    }
  }
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Handle the search
  handleSearch($searchTerm);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } ?>

</body>
</html>


<?php
// ... (previous code) ...

// Assuming you have a database connection established
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}

// Function to handle the search
function handleSearch($searchTerm) {
  $searchTerm = htmlspecialchars(trim($searchTerm));
  $searchTermLower = strtolower($searchTerm);

  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTermLower . "%'";  // Use LIKE for partial matches
  $result = $db->query($sql);

  if ($result->num_rows > 0) {
    $searchResults = [];
    while($row = $result->fetch_assoc()) {
      $searchResults[] = $row['name']; // Adjust column name if needed
    }
  } else {
    $searchResults = []; // No results
  }
}

// ... (rest of the code - form, display) ...

// Close the database connection when done
$db->close();
?>


<?php

// Basic search bar implementation with simple string comparison

// --- Configuration ---
$search_term = isset($_GET['search']) ? $_GET['search'] : ''; // Get the search term from the GET request
$results = []; // Initialize an empty array to hold the search results (replace with your actual data source)

// --- Data (Example Data - Replace with your database or other data source) ---
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A sweet fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, juicy fruit'],
];

// --- Search Logic ---
if ($search_term) {
    $search_term = trim($search_term); // Remove leading/trailing whitespace
    foreach ($data as $item) {
        $name = trim($item['name']);
        $description = trim($item['description']);

        if (strpos(strtolower($name), $search_term) !== false || strpos(strtolower($description), $search_term) !== false) {
            $results[] = $item;
        }
    }
}

// --- HTML Output ---
echo '<form method="get" action="">
        <input type="text" name="search" value="' . htmlspecialchars($search_term) . '" placeholder="Search...">
        <button type="submit">Search</button>
    </form>';

if (!empty($results)) {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($results as $result) {
        echo '<li>ID: ' . $result['id'] . ' - ' . $result['name'] . ' - ' . $result['description'] . '</li>';
    }
    echo '</ul>';
} else {
    echo '<p>No results found for "' . htmlspecialchars($search_term) . '".</p>';
}

?>


<?php

// Assuming you have a form to receive the search query

// Define the search term
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the input (IMPORTANT - prevents XSS)
$sanitized_search_term = htmlspecialchars(trim($search_term));

// Perform the search - This is just a placeholder.  Replace this with your actual search logic.
// For example, you might search a database, a file, or an array.
// This example demonstrates searching through an array.
$data = [
    'apple',
    'banana',
    'orange',
    'grape',
    'pear',
    'pineapple'
];

$results = [];
foreach ($data as $item) {
    if (stripos($item, $sanitized_search_term) !== false) { // Case-insensitive search
        $results[] = $item;
    }
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo $sanitized_search_term; ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($results as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found.</p>
  <?php endif; ?>

</body>
</html>


<?php

// Simple search bar implementation with basic functionality

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (optional, but recommended)
$searchTerm = htmlspecialchars(trim($searchTerm)); // Remove whitespace and escape HTML

// Handle the search action
if ($searchTerm) {
  //  You can do something with the search term here,
  //  e.g., query a database, search a string, etc.

  // Example: Display the search term
  echo "<p>Searching for: " . $searchTerm . "</p>";

  // Example:  Search within a simple array
  $data = ["apple", "banana", "orange", "grapefruit", "kiwi"];
  $results = array_filter($data, function ($item) use ($searchTerm) {
    return stripos($item, $searchTerm) !== false; // Case-insensitive search
  });

  if (!empty($results)) {
    echo "<p>Results:</p>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }

} else {
  // If the search term is empty, display a placeholder message
  echo "<p>Enter search term...</p>";
}

?>

<!-- HTML for the search bar -->
<form method="get" action="">
  <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
  <button type="submit">Search</button>
</form>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }


// Example: Assuming you're searching in a table called "products" with a column "name"
// and you've received the search term from a form input named "search_term"

// Get the search term from the form (e.g., a form field named "search_term")
$search_term = isset($_POST['search_term']) ? $_POST['search_term'] : ''; // Check if the form has been submitted
$search_term = htmlspecialchars(trim($search_term)); // Sanitize the input - essential!


//  Escape the search term for SQL queries.  This prevents SQL injection vulnerabilities.
//  This example uses mysqli_real_escape_string, but use prepared statements if possible.
//  Prepared statements are the safest option.
//  Use the appropriate escaping method for your database system (e.g., PDO, etc.)
// $search_term = $db->real_escape_string($search_term);


// Build the SQL query with the search term
$sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

// Execute the query
// $result = $db->query($sql);  // Uncomment when using mysqli
//  or
//  if(version_compare($db->version, "5.0.3", '>=')) {
//    $result = $db->query($sql);
//  } else {
//    $result = $db->query($sql);
//  }



// Display the search bar and results

echo "<form method='post' action=''>";  //  'action' should point to the same script
echo "Search: <input type='text' name='search_term' value='" . $search_term . "'><input type='submit' value='Search'>";
echo "</form>";

echo "<br>";

if ($result) {
    if ($result->num_rows > 0) {
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {  // Or $row = $result->fetch_object() if you prefer objects
            echo "<li>" . $row["name"] . " - " . $row["description"] . "</li>"; // Replace with your actual column names
        }
        echo "</ul>";
    } else {
        echo "No results found.";
    }
} else {
    echo "Error executing query.";
}


// Close the database connection (important!)
// $db->close();
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Ensures padding doesn't increase the width */
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." onkeyup="searchFunction()" >
    <button onclick="searchFunction()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Sample data for demonstration
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Kiwi",
        "Strawberry",
        "Blueberry"
      ];

      // Loop through the data and display matches
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().includes(searchTerm)) {
          var resultItem = document.createElement("p");
          resultItem.textContent = data[i];
          resultsDiv.appendChild(resultItem);
        }
      }
    }
  </script>

</body>
</html>


<?php

$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Example data (replace with your database query)
$data = [
    "Apple",
    "Banana",
    "Orange",
    "Grape",
    "Kiwi",
    "Strawberry",
    "Blueberry"
];

if (isset($_GET["search"])) {
    $searchTerm = $_GET["search"];
} else {
    $searchTerm = "";
}

// Search the data array (replace with your database query)
$results = [];
foreach ($data as $item) {
    if (strtolower($item) === strtolower($searchTerm)) {
        $results[] = $item;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar</title>
  <style>
    /* CSS styles as before */
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button onclick="searchFunction()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");

      resultsDiv.innerHTML = "";

      // Now use the search term
      var results = [];
      for (var i = 0; i < data.length; i++) {
          if (data[i].toLowerCase().includes(searchTerm)) {
              var resultItem = document.createElement("p");
              resultItem.textContent = data[i];
              resultsDiv.appendChild(resultItem);
          }
      }

    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you're searching within a table called 'products' with a column named 'name'

// 1. Get the Search Term
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security!)
$search_term = htmlspecialchars(trim($search_term));

// 2. Build the SQL Query
$query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

// 3. Execute the Query
// IMPORTANT:  Use prepared statements to prevent SQL injection!
//  This example uses a simple example, but in a real application, you *must* use prepared statements.
//  This is just for illustrative purposes.

// Example with a prepared statement (recommended):
// $stmt = $db->prepare("SELECT * FROM products WHERE name LIKE ?");
// $stmt->bind_param("s", "%" . $search_term . "%");
// $stmt->execute();
// $results = $stmt->get_result();


// 4. Display the Results
$results = $db->query($query); // Replace $db with your database connection object

if ($results->num_rows > 0) {
    echo "<h2>Search Results for: " . htmlspecialchars($search_term) . "</h2>";
    echo "<table border='1'>";
    echo "<tr><th>ID</th><th>Name</th><th>Description</th></tr>";

    while ($row = $results->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['id'] . "</td>";
        echo "<td>" . $row['name'] . "</td>";
        echo "<td>" . $row['description'] . "</td>";
        echo "</tr>";
    }

    echo "</table>";

} else {
    echo "<p>No products found matching your search.</p>";
}

?>


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = htmlspecialchars($_POST["search_term"]); // Sanitize the input

  // Validate the search term (optional, but recommended)
  if (empty($searchTerm)) {
    $errorMessage = "Please enter a search term.";
  }

  // Perform your search logic here
  // Example:  Database query
  // Assuming you have a database connection established as $conn

  // $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  // $result = $conn->query($sql);

  // If you don't have a database, you can just display the search term
  echo "<p>Searching for: " . $searchTerm . "</p>";

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <input type="submit" value="Search">
  </form>

</body>
</html>


<?php
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #results li {
      margin-bottom: 10px;
      padding: 10px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <h1>Simple Search Bar</h1>

  <input type="text" id="searchInput" placeholder="Search...">
  <button id="searchButton">Search</button>

  <ul id="results">
    <!-- Search results will be displayed here -->
  </ul>

  <script>
    // Sample data for demonstration purposes
    const data = [
      "Apple", "Banana", "Orange", "Grape", "Strawberry", "Kiwi", "Mango"
    ];

    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const resultsList = document.getElementById("results");

    searchButton.addEventListener("click", function() {
      const searchTerm = searchInput.value.toLowerCase(); // Convert to lowercase for case-insensitive search

      // Clear previous results
      resultsList.innerHTML = "";

      // Filter the data based on the search term
      const filteredData = data.filter(item => item.toLowerCase().includes(searchTerm));

      // Display the results
      if (filteredData.length > 0) {
        filteredData.forEach(item => {
          const listItem = document.createElement("li");
          listItem.textContent = item;
          resultsList.appendChild(listItem);
        });
      } else {
        const noResults = document.createElement("li");
        noResults.textContent = "No results found.";
        resultsList.appendChild(noResults);
      }
    });

    // Add a keypress event listener for auto-search
    searchInput.addEventListener("keypress", function(event) {
      if (event.key === "Enter") {
        this.focus(); // Keep the focus on the input field
        this.blur(); // Remove the focus after pressing Enter
        searchButton.click(); // Simulate button click
      }
    });
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }
    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .search-results {
      margin-top: 20px;
    }
    .search-result {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div class="search-results" id="searchResults" style="display: none;">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResults = document.getElementById("searchResults");

      // Clear previous results
      searchResults.innerHTML = "";

      if (searchTerm.trim() === "") {
        return; // Don't perform search if the input is empty
      }

      // Simulate data (replace with your actual data retrieval)
      var data = [
        { title: "Apple iPhone 15", description: "The latest iPhone...", link: "#iphone15" },
        { title: "Samsung Galaxy S23", description: "Amazing camera and performance...", link: "#s23" },
        { title: "Google Pixel 8", description: "Best camera in its class...", link: "#pixel8" },
        { title: "Laptop", description: "Powerful laptop for work and play.", link: "#laptop" },
        { title: "Headphones", description: "High-quality noise-canceling headphones.", link: "#headphones" }
      ];

      // Filter data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
               item.description.toLowerCase().includes(searchTerm.toLowerCase());
      });

      // Display the search results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var resultDiv = document.createElement("div");
          resultDiv.className = "search-result";
          resultDiv.innerHTML = `
            <h3>${item.title}</h3>
            <p>${item.description}</p>
            <a href="${item.link}" target="_blank">More Info</a>
          `;
          searchResults.appendChild(resultDiv);
        });
      } else {
        // Display a "No results found" message
        var noResultsDiv = document.createElement("p");
        noResultsDiv.innerHTML = "No results found for: " + searchTerm;
        searchResults.appendChild(noResultsDiv);
      }
    }
  </script>

</body>
</html>


<?php
// Assume you have a database connection established
$searchTerm = $_GET['search']; // Get the search term from the URL

// Replace with your actual database query
$result = mysqli_query($conn, "SELECT * FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'");

$data = [];
while ($row = mysqli_fetch_assoc($result)) {
  $data[] = $row;
}

// ... (rest of the JavaScript code, using $data instead of the array)
?>


<?php

// Assuming you have a database connection established and named $conn

if (isset($_SERVER["REQUEST_METHOD"]) && "POST" == $_SERVER["REQUEST_METHOD"]) {
  // Get the search term from the form data
  $searchTerm = htmlspecialchars(trim($_POST["search_term"])); // Escape for security, trim whitespace

  // Validation -  Important!  Don't just blindly use user input.
  if (empty($searchTerm)) {
    // Handle empty search term (e.g., display a message)
    $results = [];
    echo "<p>Please enter a search term.</p>";
    return;
  }

  // **Database Query (Replace with your actual database setup)**
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($conn, $query); // Or your database library's query function

  if (mysqli_num_rows($result) > 0) {
    // Display the results
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . htmlspecialchars($row['your_column_name']) . "</li>"; // Adapt to your table structure
    }
    echo "</ul>";
  } else {
    // Handle no results found
    echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";
  }

  // Close the database connection (important!)
  mysqli_close($conn);
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h2>Search</h2>

  <form method="post" action="">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Simple search bar HTML form
echo '<form action="search_results.php" method="GET">';
echo '  <input type="text" name="search_term" placeholder="Search..."';
echo '      value="' . htmlspecialchars($_GET['search_term']) . '" />';
echo '  <button type="submit">Search</button>';
echo '</form>';


// Example of how to search in a database (assuming a table called 'products' with a 'name' column)
// This is just an example; adjust the query and column names to match your database
if (isset($_GET['search_term'])) {
  $searchTerm = htmlspecialchars($_GET['search_term']);

  // Escape the search term to prevent SQL injection
  $searchTermEscaped = $conn->real_escape_string($searchTerm);  // Use real_escape_string for mysqli

  //  A basic search query
  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTermEscaped . "%'";

  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo '<h2>Search Results for: ' . htmlspecialchars($searchTerm) . '</h2>';
    echo '<ul>';
    while ($row = $result->fetch_assoc()) {
      echo '<li>' . htmlspecialchars($row['name']) . ' - ' . htmlspecialchars($row['description']) . '</li>';  // Assuming you have a 'description' column
    }
    echo '</ul>';
  } else {
    echo '<p>No results found for: ' . htmlspecialchars($searchTerm) . '</p>';
  }
}

?>


<?php
// Assuming you're already in a session where the search term is available
session_start();

if (isset($_GET['search_term'])) {
    $searchTerm = htmlspecialchars($_GET['search_term']);

    // Your database query logic (as in the main page)
    // ...

    // Display the search results here
    // ...
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      width: 300px;
      margin: 0 auto; /* Center the search bar */
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 5px;
      box-sizing: border-box; /* Important for consistent width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." onkeyup="searchFunction()">
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var input, filter, ul, li, r, i;
      input = document.getElementById("searchInput");
      filter = input.value.toLowerCase();
      ul = document.getElementById("searchResults");
      li = ul.getElementsByTagName("li");

      // Clear previous results
      for (i = 0; i < ul.children.length; i++) {
        ul.removeChild(ul.children[i]);
      }

      // Loop through each list item and check if it matches the search term
      for (i = 0; i < ul.children.length; i++) {
        r = ul.children[i].innerHTML.toLowerCase();
        if (r != "") { // Avoid showing empty results
          ul.innerHTML += '<li class="result">'+r+'</li>';
        }
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established ($db)

// Replace this with your actual query
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchInput->value . "%'";
$result = mysqli_query($db, $query); // Or your database query function

// ... (rest of the code - display results in list form)
?>


<?php

// Assuming you have a form with an input field named "search_term"
// and you want to search this input against a database or other source.

// 1. HTML Form for the Search Bar
?>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
  <input type="submit" value="Search">
</form>

<?php

// 2. PHP Code to Handle the Search
if (isset($_GET['search_term'])) {
  $search_term = htmlspecialchars($_GET['search_term']);  // Sanitize input
  $search_term = trim($search_term); //Remove whitespace

  // *** Replace this with your actual search logic ***

  // Example 1: Simple string search against a string
  // $results = array("apple", "banana", "orange");
  // $results = array_filter($results, function($item) use ($search_term) {
  //   return stripos($item, $search_term) !== false; // Case-insensitive search
  // });

  // Example 2: Search in a database (using MySQLi - preferred)
  // require_once 'config.php';  // Assuming you have your database credentials in config.php
  // $mysqli = new mysqli($host, $user, $password, $database);
  // if ($mysqli->connect_error) {
  //   die("Connection failed: " . $mysqli->connect_error);
  // }

  // $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";
  // $result = $mysqli->query($query);

  // if ($result->num_rows > 0) {
  //   echo "<h2>Search Results for: " . $search_term . "</h2>";
  //   while($row = $result->fetch_assoc()) {
  //     echo "<p>" . $row['name'] . " - " . $row['description'] . "</p>";
  //   }
  // } else {
  //   echo "<p>No results found for: " . $search_term . "</p>";
  // }
  // $mysqli->close();



  // Example 3: Placeholder for your search implementation
  echo "<p>Searching for: " . $search_term . "</p>";
  echo "<p>Your search logic goes here.</p>";  // Implement your actual search
}

?>


<?php

// Assuming you have a data source (e.g., a database, an array, or a file)
// This example uses a simple array for demonstration.

$data = [
    'apple', 'banana', 'cherry', 'date', 'elderberry',
    'fig', 'grape', 'honeydew', 'kiwi', 'lemon'
];

// Check if the search term is provided
if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input

    // Perform the search
    $searchResults = [];
    foreach ($data as $item) {
        if (stripos($item, $searchTerm) !== false) { // Use stripos for case-insensitive search
            $searchResults[] = $item;
        }
    }
} else {
    $searchResults = []; // Reset if no search term is provided
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Fruit Names</h1>

    <form method="get">
        <input type="text" name="search" placeholder="Enter fruit name to search" value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>" />
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo $result; ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php if (isset($_GET['search'])) { echo htmlspecialchars($_GET['search']); } ?>.</p>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db is a mysqli object)
// and you're retrieving data from a table called 'products' with a column 'name'

// Example database connection (replace with your actual connection)
$db = mysqli_connect("localhost", "username", "password", "database_name");

if (mysqli_connect_errno($db)) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}


// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = $_POST["search_term"];

    // Sanitize the search term (important for security)
    $searchTerm = mysqli_real_escape_string($db, $searchTerm);

    // Perform the search
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($db, $sql);

    // Output the search results
    if (mysqli_num_rows($result) > 0) {
        echo "<h3>Search Results:</h3>";
        echo "<form method='post' action=''>";
        echo "<input type='text' name='search_term' value='" . htmlspecialchars($searchTerm) . "'><button type='submit'>Search</button>";
        echo "</form>";

        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . htmlspecialchars($row["name"]) . " - " . htmlspecialchars($row["description"]) . "</li>"; // Or display other relevant fields
        }
        echo "</ul>";

    } else {
        echo "<p>No results found for '" . htmlspecialchars($searchTerm) . "'.</p>";
    }
} else {
    // Display the search form
    echo "<h3>Search Products:</h3>";
    echo "<form method='post' action=''>";
    echo "<input type='text' name='search_term' placeholder='Enter search term'><button type='submit'>Search</button>";
    echo "</form>";
}

// Close the database connection (important!)
mysqli_close($db);
?>


<?php

// Assuming you have a database connection established (e.g., $db_connection)

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get the search term from the form
  $searchTerm = isset($_POST['search_term']) ? trim($_POST['search_term']) : '';

  // Validate the search term (optional but recommended)
  if (empty($searchTerm)) {
    // Do nothing, or display a message indicating no search term was entered.
    echo "<p>Please enter a search term.</p>";
    exit; // Stop further execution
  }

  // Escape the search term to prevent SQL injection
  $searchTerm = $db_connection->real_escape_string($searchTerm); 

  //  This part would ideally be replaced with your actual database query.
  //  This is a placeholder example.  Adjust based on your table/column names.
  $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = $db_connection->query($query);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . $row['your_column'] . "</li>";  // Display the relevant column
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }
}
?>

<!-- HTML Form for the Search Bar -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search_term" placeholder="Enter search term">
  <input type="submit" value="Search">
</form>


<?php
// Assume $db_connection is your database connection

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'POST') {
  $searchTerm = isset($_POST['search_term']) ? trim($_POST['search_term']) : '';

  if (empty($searchTerm)) {
    echo "<p>Please enter a search term.</p>";
    exit;
  }

  // Prepared statement (using mysqli):
  $query = "SELECT * FROM your_table WHERE your_column LIKE ?";
  $searchTermEscaped = $db_connection->real_escape_string($searchTerm); // still necessary, but less risky

  $stmt = $db_connection->prepare($query);
  if ($stmt) {
    $stmt->bind_param("s", $searchTermEscaped); // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
      echo "<ul>";
      while ($row = $result->fetch_assoc()) {
        echo "<li>" . $row['your_column'] . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $searchTerm . "'.</p>";
    }
    $stmt->close();
  } else {
    echo "<p>Error preparing statement.</p>";
    // Handle the error (e.g., log it)
  }
}
?>


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = htmlspecialchars($_POST["search_term"]);

    // Sanitize the search term (important for security)
    $searchTerm = trim($searchTerm);

    // Perform the search (example: simple string search)
    if ($searchTerm != "") {
        $results = array();
        // Example:  Search through an array of items
        $items = array(
            "apple", "banana", "cherry", "date", "elderberry", "fig", "grape"
        );

        foreach ($items as $item) {
            if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
                $results[] = $item;
            }
        }


        // Display the results
        echo "<ul>";
        foreach ($results as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ul>";

    } else {
        echo "<p>Please enter a search term.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>PHP Search Bar</title>
</head>
<body>

    <h1>Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <input type="submit" value="Search">
    </form>

</body>
</html>


<?php

// Sample data (replace with your actual data source)
$products = [
    "Laptop" => "Apple MacBook Pro 16\"",
    "Smartphone" => "Samsung Galaxy S23 Ultra",
    "Headphones" => "Sony WH-1000XM5",
    "Keyboard" => "Logitech MX Keys",
    "Mouse" => "Logitech MX Master 3"
];

// Function to handle the search
function searchProducts($searchTerm, $products) {
    $results = [];

    foreach ($products as $key => $value) {
        if (strtolower($key) == strtolower($searchTerm)) {
            $results[$key] = $value;
        } elseif (strpos($value, strtolower($searchTerm)) !== false) {
            $results[$key] = $value;
        }
    }

    return $results;
}

// Get the search term from the user (e.g., from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from URL

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>" />
        <input type="submit" value="Search">
    </form>

    <?php if (empty($searchTerm)): ?>
        <p>Enter a search term above.</p>
    <?php else: ?>
        <?php if (empty($searchResults)): ?>
            <p>No products found matching your search term.</p>
        <?php else: ?>
            <h2>Search Results:</h2>
            <ul>
                <?php foreach ($searchResults as $key => $value): ?>
                    <li>
                        <strong><?php echo htmlspecialchars($key); ?></strong> - <?php echo htmlspecialchars($value); ?>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php endif; ?>
    <?php endif; ?>

</body>
</html>


<?php

//Example of connecting to a database.
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

//Get the search term from the user (e.g., from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
$result = $conn->query($sql);

$searchResults = [];
if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        $searchResults[$row['id']] = $row['name'] . " - " . $row['description'];
    }
}

// Close the connection
$conn->close();

?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search query from the form
$search_query = $_GET['search'];

// Sanitize and prepare the query to prevent SQL injection
if (empty($search_query)) {
    $search_query = ''; // Or handle the empty case differently (e.g., display no results)
}

// Escape the search query for use in the query (important for security)
$safe_query = mysqli_real_escape_string($db, $search_query); // Replace $db with your actual database connection

// Build the SQL query
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $safe_query . "%'";

// Execute the query
$result = mysqli_query($db, $sql);

// Display the results (simplified example - adapt to your needs)
if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['your_column_name'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "No results found for '" . $search_query . "'.";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h2>Search</h2>

    <form action="" method="get">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., $db)

// Get the search query from the form
$search_query = $_GET['search'];

// Sanitize the query (important, but not sufficient on its own)
$safe_query = $db->real_escape_string($search_query); // Use your database object's escape function

// Build the SQL query using a placeholder
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $safe_query . "%'";

// Prepare the statement
$stmt = $db->prepare($sql);

// Bind the parameter
$stmt->bind_param("s", $safe_query); // "s" indicates a string parameter

// Execute the statement
$result = $stmt->execute();

// Fetch the results
if ($result) {
    // ... (Display the results as before)
} else {
    // Handle errors
}

// Close the statement
$stmt->close();
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Ensures padding doesn't add to width */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button id="searchButton" onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("searchResults");

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = "Please enter a search term.";
        return;
      }

      // Replace this with your actual search logic
      // This example just displays the search term as a placeholder result.

      var resultsHTML = "<h3>Search Results:</h3>";
      resultsHTML += resultsHTML + "<p>" + searchTerm + "</p>";

      resultsDiv.innerHTML = resultsHTML;
    }
  </script>

</body>
</html>


<?php
// ... (HTML code from above) ...

$searchTerm = $_GET['search']; // Get search term from URL
$dbHost = 'your_db_host';
$dbName = 'your_db_name';
$dbUser = 'your_db_user';
$dbPass = 'your_db_password';

// Connect to the database
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Prepared statement (recommended)
$stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE ?");  // Use LIKE for partial matches
$stmt->bind_param("s", "%" . $searchTerm . "%"); // "s" indicates a string parameter.  % is a wildcard.

// Execute the query
$stmt->execute();

// Get the results
$result = $stmt->get_result();

// Display the results
$searchResultsDiv = document.getElementById("searchResults");
$searchResultsDiv.innerHTML = "";

if ($result->num_rows > 0) {
  while ($row = $result->fetch_assoc()) {
    $searchResultsDiv.innerHTML += "<p>" . $row["name"] . " - " . $row["description"] . "</p>";
  }
} else {
  $searchResultsDiv.innerHTML = "<p>No results found.</p>";
}

$stmt->close();
$conn->close();
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// You'll need to replace these placeholders with your actual connection details.
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_user";
$db_pass = "your_database_password";

// $connection = mysqli_connect($db_host, $db_user, $db_pass, $db_name);
// if (!$connection) {
//   die("Connection failed: " . mysqli_connect_error());
// }

//  Simulate database connection for demonstration purposes if you don't have one.
$data = [
    ["id" => 1, "name" => "Apple"],
    ["id" => 2, "name" => "Banana"],
    ["id" => 3, "name" => "Orange"],
    ["id" => 4, "name" => "Grape"],
];

// Function to perform the search
function searchData($searchTerm, $data) {
  $results = [];
  foreach ($data as $row) {
    if (strtolower($row["name"]) == strtolower($searchTerm)) {
      $results[] = $row;
    }
  }
  return $results;
}


// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchData($searchTerm, $data);


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search for Fruits</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchTerm)): ?>
    <p>Enter a fruit name to search for.</p>
  <?php else: ?>
    <?php if (empty($searchResults)): ?>
      <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
    <?php else: ?>
      <h2>Search Results:</h2>
      <ul>
        <?php foreach ($searchResults as $result): ?>
          <li>ID: <?php echo $result['id']; ?> - Name: <?php echo htmlspecialchars($result['name']); ?></li>
        <?php endforeach; ?>
      </ul>
    <?php endif; ?>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle the search query
function performSearch($search_term, $table_name, $search_columns) {
  global $db; // Access the database connection

  // Sanitize and escape the search term
  $search_term = $db->real_escape_string($search_term);

  // Build the SQL query
  $sql = "SELECT * FROM " . $table_name . " WHERE ";

  // Build the WHERE clause dynamically based on the search_columns
  $where_clause = "";
  $conditions = [];
  foreach ($search_columns as $column) {
    // Add the condition only if the column is not empty
    if (!empty($column)) {
      $where_clause .= " (" . $column . ") LIKE '%" . $search_term . "%' OR ";
      $conditions[] = "($column) LIKE '%" . $search_term . "%'";
    }
  }

  // Remove the trailing "OR"
  $where_clause = rtrim($where_clause, 'OR');

  // Add the WHERE clause to the SQL query
  $sql .= $where_clause . " LIMIT 10"; // Limit results for better performance - adjust as needed

  // Execute the query
  $result = $db->query($sql);

  // Process the results
  if ($result) {
    echo "<form method='get' action='search_results.php'>
            <input type='text' name='search' placeholder='Search...' value='" . htmlspecialchars($search_term) . "'/>
            <button type='submit'>Search</button>
          </form>";

    if ($result->num_rows > 0) {
      echo "<ul>";
      while ($row = $result->fetch_assoc()) {
        echo "<li>" . htmlspecialchars($row['id']) . ": " . htmlspecialchars($row['name']) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }

  } else {
    echo "<p>Error executing query: " . $db->error . "</p>";
  }
}

// Example usage:
// Assuming you have a table named 'products' with columns 'id', 'name', and 'description'
// and you want to search across 'name' and 'description'
$table_name = 'products';
$search_columns = ['name', 'description'];
performSearch("laptop", $table_name, $search_columns);
?>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = trim($_POST["search_term"]);

  // Sanitize the search term to prevent XSS attacks
  $searchTerm = htmlspecialchars($searchTerm);

  // You can now use the $searchTerm for your search logic

  // Example:  Print the search term
  echo "<p>You searched for: " . $searchTerm . "</p>";

  // Example:  Perform a search on a dataset (replace with your actual data)
  // Let's assume you have an array called $data
  // $data = array(
  //   "item1", "item2", "item3", "item4", "item5"
  // );
  // $searchResults = array_filter($data, function($item) use ($searchTerm) {
  //   return stripos($item, $searchTerm) !== false; // Case-insensitive search
  // }, STR_ICALUE_IGNORE);
  //
  // if (empty($searchResults)) {
  //   echo "<p>No results found for: " . $searchTerm . "</p>";
  // } else {
  //   echo "<ul>";
  //   foreach ($searchResults as $result) {
  //     echo "<li>" . $result . "</li>";
  //   }
  //   echo "</ul>";
  // }



}
?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Example search bar code
?>

<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
</head>
<body>

  <div class="search-container">
    <form method="get" action="<?php echo $_SERVER['PHP_SELF']; ?>">
      <input type="text" name="search_term" placeholder="Search..." class="search-input">
      <button type="submit" class="search-button">Search</button>
    </form>
  </div>

  <?php
  //  Here you would add your code to process the search_term and display results.
  //  This is just a placeholder to show where the search logic would go.

  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']); // Sanitize input

    // Example:  Searching through an array of products (replace with your actual data source)
    $products = [
      "Laptop",
      "Smartphone",
      "Tablet",
      "Wireless Mouse",
      "Keyboard"
    ];

    $results = [];
    foreach ($products as $product) {
      if (strpos(strtolower($product), strtolower($search_term)) !== false) {
        $results[] = $product;
      }
    }

    if (!empty($results)) {
      echo "<p>Search Results: " . implode(", ", $results) . "</p>";
    } else {
      echo "<p>No results found for '" . $search_term . "'.</p>";
    }
  }
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and prepare the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm); // Escape HTML entities
$searchTerm = trim($searchTerm); // Remove leading/trailing whitespace

// Basic search logic (replace with your database query)
if ($searchTerm) {
    //  Example:  Simple LIKE query - adjust to your database structure
    $sql = "SELECT * FROM your_table WHERE title LIKE '%" . $searchTerm . "%'";  // Replace 'your_table' with your table name
    $result = mysqli_query($conn, $sql);  // Replace $conn with your database connection

    if ($result) {
        // Display the search results
        echo "<form method='get' action=''>";
        echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>";
        echo "<button type='submit'>Search</button>";
        echo "</form>";

        echo "<h2>Search Results:</h2>";
        echo "<table border='1'>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<tr>";
            echo "<td>" . $row['title'] . "</td>"; // Adjust column names as needed
            echo "</tr>";
        }
        echo "</table>";

    } else {
        echo "<p>Error executing query.</p>";
    }
} else {
    // Display the search form if no search term is provided
    echo "<form method='get' action=''>";
    echo "<input type='text' name='search' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
}

mysqli_close($conn); // Close the database connection

?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and prepare the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);
$searchTerm = trim($searchTerm);

// Parameterized query (prepared statement) - MUCH more secure
$sql = "SELECT * FROM your_table WHERE title LIKE ?"; // Question mark is a placeholder

$stmt = mysqli_stmt_prepare($conn, $sql);  // Prepare the statement

if ($stmt) {
    mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // Bind the search term
    mysqli_stmt_execute($stmt);

    // Get the results
    $result = mysqli_stmt_get_result($stmt);

    if ($result) {
        echo "<form method='get' action=''>";
        echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>";
        echo "<button type='submit'>Search</button>";
        echo "</form>";

        echo "<h2>Search Results:</h2>";
        echo "<table border='1'>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<tr>";
            echo "<td>" . $row['title'] . "</td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "<p>Error executing query.</p>";
    }

    mysqli_stmt_close($stmt); // Close the statement
} else {
    echo "<p>Error preparing statement.</p>";
}

mysqli_close($conn);

?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form (if submitted)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - VERY IMPORTANT!
$searchTerm = htmlspecialchars(trim($searchTerm));  //  This prevents XSS vulnerabilities

// Prepare the SQL query (using prepared statements - best practice)
// This is the key part for security - it prevents SQL injection
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql); // Replace $conn with your database connection

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

  <?php
    if ($result) {
      // Display the results
      echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
      echo "<table border='1'>";
      echo "<tr><th>Column 1</th><th>Column 2</th><th>...</th></tr>"; // Adjust column names
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>";
        foreach ($row as $column => $value) {
          echo "<td>" . htmlspecialchars($value) . "</td>";  // Escape again for display
        }
        echo "</tr>";
      }
      echo "</table>";

    } else {
      echo "<p>No results found.</p>";
    }
  ?>

</body>
</html>


ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);


<?php

// Assuming you have a database connection established and named $conn

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm)); 

//  Optional: Validate the search term (e.g., character length, allowed characters)

// Example:  Restrict to alphanumeric characters
// $searchTerm = preg_replace('/[^a-zA-Z0-9\s]/', '', $searchTerm);


// Perform the search (replace this with your actual database query)
$results = searchDatabase($searchTerm);  // Calling a function to handle the query

// Display the search bar and the results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <input type="submit" value="Search">
    </form>

    <h2>Search Results:</h2>
    <?php if (empty($results)): ?>
        <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php else: ?>
        <ul>
            <?php foreach ($results as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>

<?php

/**
 *  A placeholder function for the database search.
 *
 *  Replace this with your actual database query logic.
 *
 * @param string $searchTerm The search term to use in the query.
 * @return array  An array of results or an empty array if no results are found.
 */
function searchDatabase($searchTerm) {
    //  Replace this with your database query.
    //  This is just an example.

    // For demonstration purposes, let's just return some dummy data.
    $dummyData = [
        "Product A",
        "Product B",
        "Product C",
        "Another Product",
        "Search Term Example",
    ];

    $results = [];
    foreach ($dummyData as $item) {
        if (strpos($item, $searchTerm) !== false) { // Case-sensitive search
            $results[] = $item;
        }
    }

    return $results;
}

?>


function searchDatabase($searchTerm) {
    // Case-insensitive search using stripos()
    $results = [];
    $searchTerm = strtolower($searchTerm); // Convert to lowercase for consistency

    // Assuming your database column is called "name"
    // You'd need to adjust this to your actual field name
    $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    //  ... execute the query ...

    // ... (rest of the function remains the same)
}


<?php

// Sample data (replace with your actual data source)
$items = [
  "apple",
  "banana",
  "orange",
  "grape",
  "mango",
  "strawberry",
  "pineapple",
  "watermelon"
];

// Function to handle the search
function performSearch($search_term, $items) {
  $results = [];

  // Convert search term to lowercase for case-insensitive search
  $search_term = strtolower($search_term);

  foreach ($items as $item) {
    // Convert item to lowercase for case-insensitive comparison
    $item_lower = strtolower($item);

    // Check if the search term is a substring of the item
    if (strpos($item_lower, $search_term) !== false) {
      $results[] = $item; // Add the original item to the results
    }
  }

  return $results;
}

// Get the search term from the form (if submitted)
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $search_term = $_GET['search'];
  $results = performSearch($search_term, $items);

  // Display the results
  echo "<h3>Search Results:</h3>";
  if (empty($results)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
} else {
  // Display the search form
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}
?>


   echo htmlspecialchars($result, ENT_QUOTES, 'UTF-8');
   

   This converts special characters (like `<` and `>`) into their HTML entities, preventing them from being interpreted as HTML tags.  The `ENT_QUOTES` flag ensures that both single and double quotes are escaped.
* **Parameterization:** When querying a database, *always* use parameterized queries to prevent SQL injection.  Do not concatenate user input directly into your SQL queries.

Example with `htmlspecialchars()`:



<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 3px;
      font-size: 16px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // **Important:** Replace this with your actual search logic.
      // This is just a placeholder for demonstration.

      if (searchTerm.trim() === "") {
        return; // Do nothing if the search term is empty
      }

      // **Example search logic (replace with your data source):**
      var results = performSearch(searchTerm);

      // Display the results (replace with your desired display method)
      displaySearchResults(results);
    }

    // Placeholder function for your search logic
    function performSearch(searchTerm) {
      // This is just a placeholder. Replace with your database query,
      // API call, or whatever you need to perform the search.
      // For example:
      //   - Query a database:  mysqli_query(...);
      //   - Make an API request:  fetch(...);

      // Mock data for testing:
      var results = [
        "Result 1 for " + searchTerm,
        "Result 2 for " + searchTerm,
        "Result 3 for " + searchTerm
      ];
      return results;
    }


    function displaySearchResults(results) {
      // This function displays the search results.
      // Replace this with your desired way to display the results,
      // such as:
      // - Creating an HTML list:  <ul></ul>
      // - Updating the contents of a specific element in the page.

      var resultsDiv = document.getElementById("results");
      if (!resultsDiv) {
          resultsDiv = document.createElement("div");
          resultsDiv.id = "results";
          document.body.appendChild(resultsDiv); // or insert before an existing element
      }

      resultsDiv.innerHTML = ""; // Clear previous results

      for (var i = 0; i < results.length; i++) {
        var resultItem = document.createElement("p");
        resultItem.textContent = results[i];
        resultsDiv.appendChild(resultItem);
      }
    }
  </script>

</body>
</html>


<?php
  // Assuming you have a database connection established (e.g., $conn)

  function performSearch($searchTerm) {
    $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
    $result = mysqli_query($conn, $query);

    $products = array();
    if ($result) {
      while ($row = mysqli_fetch_assoc($result)) {
        $products[] = $row['name'] . ' - ' . $row['description'];
      }
    }

    mysqli_free_result($result);
    return $products;
  }
?>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and you want to search within a table named 'products'
// with a column named 'name' that contains the search term.

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security - prevent SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Prepare the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form action="" method="GET">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result) {
        if (mysqli_num_rows($result) > 0) {
            echo "<table border='1'><tr><th>ID</th><th>Name</th><th>Price</th></tr>";
            while ($row = mysqli_fetch_assoc($result)) {
                echo "<tr><td>" . $row['id'] . "</td><td>" . $row['name'] . "</td><td>" . $row['price'] . "</td></tr>";
            }
            echo "</table>";
        } else {
            echo "<p>No products found matching your search.</p>";
        }
    } else {
        echo "<p>Error executing the query.</p>";
    }
    ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Implement your search logic here.
      //  This is just a placeholder.  Replace this with your actual search code.
      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Search through a simple array of items
      var items = ["apple", "banana", "orange", "grape", "kiwi"];

      var results = [];
      for (var i = 0; i < items.length; i++) {
        if (items[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
          results.push(items[i]);
        }
      }

      if (results.length > 0) {
        alert("Found matches: " + results.join(", "));
      } else {
        alert("No matches found.");
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form (or URL parameters)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm); // Prevents XSS attacks
$searchTerm = trim($searchTerm); // Remove leading/trailing whitespace

// Database query (replace with your actual database credentials and table/column names)
$sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = mysqli_query($conn, $sql);

// Display the search results
echo "<form method='get' action='your_script.php'>
        <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...' >
        <button type='submit'>Search</button>
      </form>";

if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['your_column'] . "</li>"; // Display the data from your column
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}

// Close the database connection (important for resource management)
mysqli_close($conn);

?>


<?php

// Example PHP code for a simple search bar

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (very important to prevent XSS attacks)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Perform your search logic here (e.g., database query, array search, etc.)
  //  For this example, we'll just display the search term
  echo "<p>You searched for: " . $searchTerm . "</p>";

  // Optional:  Redirect to a results page or display results
  // echo "<a href='results.php?search=" . $searchTerm . "'>View Results</a>";

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Simple Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Simulate a database or data source (replace with your actual data source)
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A red fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, sweet fruit'],
];

// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = $_POST["search_term"];

    // Perform the search
    $searchResults = [];
    foreach ($data as $item) {
        // Case-insensitive search
        $found = false;
        if (stripos($item['name'], $searchTerm) !== false ||
            stripos($item['description'], $searchTerm) !== false) {
            $found = true;
        }

        if ($found) {
            $searchResults[] = $item;
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)) {
        echo "<p>No results found.</p>";
    } else {
        echo "<ul>";
        foreach ($searchResults as $result) {
            echo "<li>ID: " . $result['id'] . ", Name: " . $result['name'] . ", Description: " . $result['description'] . "</li>";
        }
        echo "</ul>";
    }
?>

</body>
</html>


<?php

// Simple Search Bar Implementation

// Initialize variables
$search_term = ""; // Holds the search term entered by the user
$results = []; // Array to store search results (replace with your actual data source)

// Handle the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $search_term = isset($_POST["search_term"]) ? htmlspecialchars($_POST["search_term"]) : "";
    // You'll likely want to sanitize and validate the $search_term here.
    // This is a basic example; use a more robust solution for production.

    // Example:  Check if the search term is empty
    if (empty($search_term)) {
        $results = []; // Clear results if search term is empty
    } else {
        // *** Replace this with your actual search logic ***
        // This is a placeholder example.  Your implementation will depend
        // on where your data is stored and how you want to search it.

        //  Example:  Search through an array of strings
        $data = ["apple", "banana", "orange", "grapefruit", "watermelon"];
        $results = [];
        foreach ($data as $item) {
            if (stripos($item, $search_term)) { // Case-insensitive search
                $results[] = $item;
            }
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search Bar</title>
    <style>
        /* Basic styling - improve as needed */
        input[type="text"] {
            width: 300px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>
</head>
<body>

<h1>Search</h1>

<form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit">Search</button>
</form>

<?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <ul>
        <?php foreach ($results as $result) { ?>
            <li><?php echo htmlspecialchars($result); ?></li>
        <?php } ?>
    </ul>
<?php } ?>

</body>
</html>


<?php
// Assuming you have a database connection established
// (e.g., using mysqli_connect())

// ... (rest of the code)

// Example: Search through a database table
$search_term = isset($_POST["search_term"]) ? htmlspecialchars($_POST["search_term"]) : "";

if (empty($search_term)) {
    $results = [];
} else {
    $results = [];
    $query = "SELECT * FROM my_table WHERE name LIKE '%" . $search_term . "%'";  // Example query
    $result = mysqli_query($connection, $query);

    if ($result) {
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row['name']; // Assuming 'name' is the column you want to display
        }
        mysqli_free_result($result);
    }
}

?>


<!DOCTYPE html>
<html>
<head>
<title>Simple Search Bar</title>
<style>
  .search-container {
    margin: 20px;
  }
  input[type="text"] {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 300px;
    box-sizing: border-box;
  }
  button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
</style>
</head>
<body>

<div class="search-container">
  <h2>Search:</h2>
  <input type="text" id="searchInput" placeholder="Enter search term">
  <button onclick="search()">Search</button>
</div>

<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value;

    // **Important: Replace this with your actual search logic**
    // This example just logs the search term to the console.  You
    // need to replace it with your own database query or other
    // search implementation.

    if (searchTerm) {
      console.log("Search term:", searchTerm);
      // Example:  Display the search term on the page.
      // document.getElementById("searchResults").innerHTML = "You searched for: " + searchTerm;
    } else {
      console.log("Please enter a search term.");
    }
  }
</script>

</body>
</html>


<?php
// ... (HTML above) ...

<script>
  function search() {
    var searchTerm = document.getElementById("searchInput").value;

    if (searchTerm) {
      // **Important: Sanitize the input to prevent SQL injection!**
      $safeSearchTerm = mysqli_real_escape_string($conn, $searchTerm); // Assuming $conn is your database connection

      // Build the SQL query (adapt to your database schema)
      $sql = "SELECT * FROM products WHERE name LIKE '%" . $safeSearchTerm . "%'";

      // Execute the query (replace this with your database connection)
      $result = mysqli_query($conn, $sql);

      // Process the results (display them, etc.)
      if (mysqli_num_rows($result) > 0) {
        // Display the results (example - adapt to your needs)
        //  for ($row = 0; $row < mysqli_num_rows($result); $row++) {
        //    $row = mysqli_fetch_assoc($result);
        //    console.log("Product Name:", $row['name']);
        //  }
        console.log("Search results for:", searchTerm);
      } else {
        console.log("No results found for:", searchTerm);
      }
    } else {
      console.log("Please enter a search term.");
    }
  }
</script>

<?php
// Your PHP code for database connection and query execution would go here.
// For example:
// $conn = mysqli_connect("localhost", "username", "password", "database_name");
// if (!$conn) {
//   die("Connection failed: " . mysqli_connect_error());
// }
?>


<?php

// Sample data (replace with your actual data source - e.g., database)
$items = [
  "apple",
  "banana",
  "cherry",
  "date",
  "elderberry",
  "fig",
  "grape",
  "honeydew",
  "kiwi",
  "lemon",
  "mango",
  "nectarine",
  "orange",
  "pear",
  "quince",
  "raspberry",
  "strawberry",
  "tangerine",
  "watermelon"
];

// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);

// Perform the search
$searchResults = [];
foreach ($items as $item) {
  if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
    $searchResults[] = $item;
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Items</title>
</head>
<body>

  <h1>Search Items</h1>

  <form method="get" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (empty($searchResults)): ?>
    <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
  <?php else: ?>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    #search-bar {
      width: 300px;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-bottom: 10px;
    }

    #search-button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <h2>Search</h2>

  <input type="text" id="search-bar" placeholder="Enter search term...">
  <button id="search-button">Search</button>

  <?php
    // Handle the search form submission
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
      // Get the search term
      $searchTerm = $_POST["search_term"];

      // Sanitize and validate the search term (IMPORTANT!)
      $searchTerm = htmlspecialchars(trim($searchTerm)); // Remove HTML tags and whitespace

      if (empty($searchTerm)) {
        echo "<p>Please enter a search term.</p>";
      } else {
        // Example: Search through a simple array (replace with your actual data source)
        $myArray = array(
          "apple",
          "banana",
          "orange",
          "grape",
          "mango"
        );

        $searchResults = array();
        foreach ($myArray as $item) {
          if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
            $searchResults[] = $item;
          }
        }

        if (empty($searchResults)) {
          echo "<p>No results found for: " . $searchTerm . "</p>";
        } else {
          echo "<h3>Search Results:</h3>";
          echo "<ul>";
          foreach ($searchResults as $result) {
            echo "<li>" . $result . "</li>";
          }
          echo "</ul>";
        }
      }
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and you want to search through a table called 'products'
// with a column called 'name' that you want to search.

// 1. Get the search term from the form input
if (isset($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Escape the search term to prevent SQL injection
  $searchTerm = $mysqli->real_escape_string($searchTerm); 

  // 2. Build the SQL query
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; 

  // 3. Execute the query
  $result = $mysqli->query($sql);

  // 4. Display the results
  if ($result) {
    echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>
          <input type='text' name='search' placeholder='Search products...' value='" . $searchTerm . "'>
          <button type='submit'>Search</button>
        </form>";

    echo "<table border='1'>
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Price</th>
              <!-- Add other columns from your 'products' table here -->
            </tr>
          </thead>
          <tbody>";

    while ($row = $result->fetch_assoc()) {
      echo "<tr>
              <td>" . $row['id'] . "</td>
              <td>" . $row['name'] . "</td>
              <td>" . $row['price'] . "</td>
              <!-- Add other columns from your 'products' table here -->
            </tr>";
    }

    echo "</tbody>
          </table>";

  } else {
    echo "No results found for '" . $searchTerm . "'.";
  }
} else {
  // If no search term is provided, display the default form
  echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>
          <input type='text' name='search' placeholder='Search products...' value=''>
          <button type='submit'>Search</button>
        </form>
        <table border='1'>
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Price</th>
              <!-- Add other columns from your 'products' table here -->
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td>Laptop</td>
              <td>1200</td>
            </tr>
            <tr>
              <td>2</td>
              <td>Mouse</td>
              <td>25</td>
            </tr>
            <tr>
              <td>3</td>
              <td>Keyboard</td>
              <td>75</td>
            </tr>
          </tbody>
        </table>";
}

// Close the database connection (Important!)
$mysqli->close();

?>


<?php
// Assuming you have a database connection established (e.g., PDO)

if (isset($_GET['search'])) {
  $searchTerm = $_GET['search'];
  $searchTerm = $pdo->prepare("SELECT * FROM products WHERE name LIKE ?");
  $searchTerm->bindValue(1, '%' . $searchTerm . '%');
  $searchTerm->execute();

  // ... Display the results ...
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Example:  Display the search term in an alert (replace with your logic)
      if (searchTerm) {
        alert("You searched for: " + searchTerm);

        //  Replace this with your actual search logic here
        //  This is just a placeholder for how you would
        //  search your data (e.g., database, array, etc.)
        //  Example:
        //  fetch(`/search.php?query=${searchTerm}`)
        //    .then(response => response.json())
        //    .then(data => {
        //      // Process the search results
        //      console.log(data);
        //    });
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
//  $conn = new mysqli("host", "username", "password", "database");
//  if ($conn->connect_error) {
//    die("Connection failed: " . $conn->connect_error);
//  }

//  // Example data (replace with your actual database data)
//  $data = [
//      ["id" => 1, "name" => "Apple"],
//      ["id" => 2, "name" => "Banana"],
//      ["id" => 3, "name" => "Orange"],
//      ["id" => 4, "name" => "Grape"],
//  ];


// Function to handle the search query
function searchData($searchTerm, $data) {
    $results = [];
    foreach ($data as $item) {
        // Case-insensitive search (you can adjust this)
        if (stripos($item["name"], $searchTerm) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// Get the search term from the form (assuming a simple HTML form)
if (isset($_GET["search"])) {
    $searchTerm = $_GET["search"];
} else {
    $searchTerm = ""; //  Start with an empty search term if none is provided
}


// Perform the search
$searchResults = searchData($searchTerm, $data);  // Replace $data with your actual data source

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="">
        <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" />
        <input type="submit" value="Search" />
    </form>

    <?php if (count($searchResults) > 0) { ?>
        <ul>
            <?php foreach ($searchResults as $result) { ?>
                <li>ID: <?php echo $result["id"]; ?> - Name: <?php echo htmlspecialchars($result["name"]); ?></li>
            <?php } ?>
        </ul>
    <?php } else { ?>
        <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
    <?php } ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      // Get the value from the search input
      var searchTerm = document.getElementById("searchInput").value;

      //  Basic Search (Replace with your actual search logic)
      if (searchTerm.trim() === "") {
        return; // Do nothing if the input is empty
      }

      //  Example: Display the search term in an alert
      alert("You searched for: " + searchTerm);

      //  Replace this with your actual search implementation.
      //  For example, you could:
      //  1.  Send the searchTerm to a PHP script for processing.
      //  2.  Filter a database or array based on the searchTerm.
      //  3.  Display the results on the page.
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established and named $conn

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get the search term from the POST request
  $searchTerm = $_POST['search_term'];

  // Sanitize the search term (very important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm)); //Remove whitespace and convert to HTML entities

  //  Database Query (Example using MySQL)
  $sql = "SELECT * FROM products WHERE name LIKE '%$searchTerm%' OR description LIKE '%$searchTerm%'";  //Adjust table and column names as needed
  $result = mysqli_query($conn, $sql);

  // Display the results (Adjust this part based on how you want to display the search results)
  if (mysqli_num_rows($result) > 0) {
    echo "<h3>Search Results:</h3>";
    echo "<form method='post' action=''>"; //Form for easy re-searching
    echo "<input type='text' name='search_term' value='" . $searchTerm . "' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>Product Name: " . $row['name'] . " - Description: " . $row['description'] . "</li>";
    }
    echo "</ul>";

  } else {
    echo "<p>No results found for '" . $searchTerm . "'</p>";
  }
} else {
  // If the request method is not POST, display the search form
  echo "<h3>Search Products:</h3>";
  echo "<form method='post' action=''>";
  echo "<input type='text' name='search_term' placeholder='Enter search term'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

?>


// Using prepared statements
$stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ? OR description LIKE ?");
mysqli_stmt_bind_param($stmt, "s", $searchTerm, "s");  // "s" indicates a string parameter
mysqli_stmt_execute($stmt);
$result = mysqli_stmt_get_result($stmt);

// ... Process the result as before


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    button {
      padding: 10px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchTermEncoded = encodeURIComponent(searchTerm); //Crucial for URL safety

      // You would typically make an AJAX request here to your server
      // to send the searchTerm to your server for searching.

      // For demonstration purposes, we'll just display a basic message.
      // In a real application, you would replace this with your server-side logic.

      var resultsDiv = document.getElementById("searchResults");
      resultsDiv.innerHTML = "<p>Searching for: " + searchTermEncoded + "</p>";
      //  For a real app, you would replace the above with a JSON response
      //  and do more than just display a message.  Also, you would handle
      //  the response gracefully (e.g., show empty results if no results are found).

      // Example JSON response (replace with your actual data):
      /*
      var response = {
          "results": [
              {"title": "Example 1", "description": "This is an example."},
              {"title": "Example 2", "description": "Another example."},
              {"title": "Example 3", "description": "Yet another example."}
          ]
      };

      //  Parse the JSON and display the results
      //  (You'll need to use JSON.parse() here).

      */
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established in a separate file or session
// For demonstration purposes, using a simplified simulation:

$searchTerm = $_GET['searchTerm']; // Get the search term from the URL (GET method)

// Simulate a database search (replace with your actual database query)
$results = [
    ['title' => 'Example 1', 'description' => 'This is an example.'],
    ['title' => 'Example 2', 'description' => 'Another example.'],
    ['title' => 'Example 3', 'description' => 'Yet another example.'],
];

// Filter results based on the search term
$filteredResults = [];
foreach ($results as $result) {
    $title = strtolower($result['title']); // Convert to lowercase for case-insensitive search
    $description = strtolower($result['description']);
    if (strpos(strtolower($title), strtolower($searchTerm)) !== false || strpos(strtolower($description), strtolower($searchTerm)) !== false) {
        $filteredResults[] = $result;
    }
}


// Convert the results to JSON
$json_results = json_encode($filteredResults);

// Set the content type to JSON
header('Content-Type: application/json');

// Send the JSON response
echo $json_results;
?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById('searchInput').value;
      var resultsDiv = document.getElementById('results');

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Perform your search logic here
      // Example:  You would typically query a database or search an array.
      // This is just a placeholder.

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = "<p>Please enter a search term.</p>";
        return;
      }

      // Placeholder:  Replace this with your actual search logic
      var items = ["apple", "banana", "orange", "grape", "mango"];

      // Simple search:  Convert to lowercase for case-insensitive matching
      var foundItems = items.filter(function(item) {
        return item.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
      });

      if (foundItems.length > 0) {
        foundItems.forEach(function(item) {
          var listItem = document.createElement("li");
          listItem.textContent = item;
          resultsDiv.appendChild(listItem);
        });
      } else {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a search form with an input field named "search_term"
// and a button to submit the search.

// 1. Handle the Form Submission

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $search_term = $_POST["search_term"];

  // Sanitize and validate the search term (VERY IMPORTANT!)
  $search_term = htmlspecialchars(trim($search_term)); // Remove HTML tags and whitespace

  // Perform your search logic here
  $results = performSearch($search_term); // Call a function to actually search.

  //  Display the search results
  echo "<div class='search-results'>";
  if (empty($results)) {
    echo "<p>No results found for: " . htmlspecialchars($search_term) . "</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
  }
  echo "</div>";
}

// 2.  Example Search Function (replace with your actual database query)
function performSearch($search_term) {
  // This is a placeholder.  Replace this with your actual database query.
  // This example just returns a simple array for demonstration.

  $keywords = array(
    "apple",
    "banana",
    "orange",
    "grape",
    "strawberry"
  );

  $results = [];
  foreach ($keywords as $keyword) {
    if (stripos($keyword, $search_term)) { // Case-insensitive search
      $results[] = $keyword;
    }
  }
  return $results;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search</title>
  <style>
    .search-results {
      border: 1px solid #ccc;
      padding: 10px;
      margin-top: 10px;
    }
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

  <h1>Simple Search Example</h1>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Database credentials (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Establish the database connection
$conn = new mysqli($host, $username, $password, $database);

// Check the connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ... (rest of the code from the previous example) ...

function performSearch($search_term) {
  $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $search_term . "%'"; // Use LIKE for partial matches
  $result = $conn->query($query);

  $results = [];
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $results[] = $row['your_column']; // Replace 'your_column' with the actual column name
    }
  }
  return $results;
}

// ... (Rest of the code) ...

$conn->close(); // Close the database connection
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 10px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }
    .search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    .search-results li {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div class="search-results" id="searchResults">
    <!-- Search results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsContainer = document.getElementById("searchResults");
      resultsContainer.innerHTML = ""; // Clear previous results

      // Sample data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 13", description: "The latest iPhone." },
        { title: "Samsung Galaxy S22", description: "A powerful Android phone." },
        { title: "Google Pixel 6", description: "Google's flagship phone." },
        { title: "Amazon Echo Dot", description: "A voice-controlled smart speaker." },
        { title: "Sony WH-1000XM5", description: "Noise-canceling headphones." }
      ];

      // Filter the data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the filtered results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var listItem = document.createElement("li");
          listItem.innerHTML = item.title + "<br>" + item.description;
          resultsContainer.appendChild(listItem);
        });
      } else {
        var noResultsMessage = document.createElement("p");
        noResultsMessage.innerHTML = "No results found.";
        resultsContainer.appendChild(noResultsMessage);
      }
    }
  </script>

</body>
</html>


<?php
// Assume you have a database connection established (e.g., $conn)

$searchTerm = $_GET['search']; // Get the search term from the URL

if (empty($searchTerm)) {
    // Handle empty search (e.g., display all data)
    $results = mysqli_query($conn, "SELECT * FROM products"); // Example
} else {
    $sql = "SELECT * FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";
    $results = mysqli_query($conn, $sql);
}

// Output the results (simplified for example)
if (mysqli_num_rows($results) > 0) {
    echo "<ul>";
    while($row = mysqli_fetch_assoc($results)) {
        echo "<li>" . $row['title'] . " - " . $row['description'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found.</p>";
}
?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Example: Searching in a table called 'products' with a column 'name'
// You'll likely need to adapt this query to your specific database structure and needs

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $conn->query($sql);

// Display the results (or a message if no results are found)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Search</title>
  <style>
    /* Basic styling for the search bar and results */
    #search-bar {
      width: 300px;
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    #results {
      margin-top: 20px;
    }

    .result {
      padding: 10px;
      border: 1px solid #eee;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

  <h1>Product Search</h1>

  <input type="text" id="search-bar" placeholder="Search products...">

  <div id="results">
    <?php
      if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
          echo '<div class="result">';
          echo 'Product Name: ' . $row["name"] . '<br>';
          echo 'Price: ' . $row["price"] . '<br>';
          echo 'Description: ' . $row["description"] . '<br>';
          echo '</div>';
        }
      } else {
        echo '<p>No products found matching your search.</p>';
      }
    ?>
  </div>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Simple Search Bar Example
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .results {
      margin-top: 20px;
      border: 1px solid #ccc;
      padding: 10px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results" class="results" style="display: none;">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("results");

      if (searchTerm.trim() === "") {
        resultsDiv.style.display = "none";  // Hide results if search term is empty
        return;
      }

      // Replace this with your actual database query and logic
      // This is just a placeholder example
      var results = [];
      if (searchTerm === "example") {
        results = ["Result 1 for example", "Result 2 for example"];
      } else if (searchTerm === "another") {
        results = ["Result 1 for another", "Result 2 for another"];
      } else {
          results = ["No results found for '" + searchTerm + "'"];
      }

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Display the results
      if (results.length > 0) {
        resultsDiv.style.display = "block";
        for (var i = 0; i < results.length; i++) {
          var p = document.createElement("p");
          p.textContent = results[i];
          resultsDiv.appendChild(p);
        }
      } else {
        resultsDiv.style.display = "none";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// For demonstration purposes, let's use a simple array instead.
$data = [
    ['id' => 1, 'name' => 'Apple'],
    ['id' => 2, 'name' => 'Banana'],
    ['id' => 3, 'name' => 'Orange'],
    ['id' => 4, 'name' => 'Grape'],
    ['id' => 5, 'name' => 'Strawberry']
];


// Function to search data
function searchData($searchTerm, $data) {
    $results = [];

    foreach ($data as $item) {
        // Case-insensitive search
        $name = strtolower($item['name']);  
        $searchTerm = strtolower($searchTerm);

        if (strpos($name, $searchTerm) !== false) {
            $results[] = $item;
        }
    }

    return $results;
}


// Get the search term from the form (e.g., using a GET request)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search for Fruits</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchTerm)): ?>
        <p>Enter a fruit name to search.</p>
    <?php else: ?>
        <?php if (empty($searchResults)): ?>
            <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
        <?php else: ?>
            <h2>Search Results:</h2>
            <ul>
                <?php foreach ($searchResults as $result): ?>
                    <li>
                        ID: <?php echo $result['id']; ?> - Name: <?php echo htmlspecialchars($result['name']); ?>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php endif; ?>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume you have a $db connection object.

// Example:
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Let's also assume you have a table named 'products' with a 'name' column.

// Form for the search bar
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter product name..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // Handle the search request
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // SQL query -  IMPORTANT:  Sanitize and escape your inputs properly!
    $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

    // Execute the query
    $result = $db->query($query);

    // Display the search results
    if ($result->num_rows > 0) {
      echo "<h2>Search Results:</h2>";
      while ($row = $result->fetch_assoc()) {
        echo "<p>Product Name: " . $row['name'] . "</p>";
        // You can display other product details here (e.g., price, description)
      }
    } else {
      echo "<p>No products found matching your search term.</p>";
    }
  }

  ?>

</body>
</html>


<?php

// Simple search bar implementation using PHP

// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Perform the search (replace with your actual search logic)
  $results = searchResults($searchTerm);

  // Display the results
  echo "<div class='search-results'>";
  if (empty($results)) {
    echo "<p>No results found for '$searchTerm'.</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
  echo "</div>";
}
?>

<!-- HTML form for the search bar -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_POST['search_term']) ? htmlspecialchars($_POST['search_term']) : ''; ?>">
  <button type="submit">Search</button>
</form>


function searchResults($searchTerm) {
  // Assuming you have a data source (e.g., an array of strings)
  $data = ["apple", "banana", "orange", "grape"];

  $results = [];
  foreach ($data as $item) {
    if (strpos($item, $searchTerm) !== false) {
      $results[] = $item;
    }
  }
  return $results;
}


function searchResults($searchTerm) {
  // Replace this with your database connection and query logic
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

  $query = "SELECT * FROM your_table WHERE title LIKE :searchTerm OR description LIKE :searchTerm";
  $stmt = $db->prepare($query);
  $stmt->bindValue(':searchTerm', '%' . $searchTerm . '%', PDO::PARAM_STR);
  $stmt->execute();

  $results = array();
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $results[] = $row['title']; // Or whatever fields you want
  }

  return $results;
}


<?php

// Assuming you have a form to capture the search query.
// This example demonstrates a simple HTML form and PHP to process the search.

// Define the search term (default value)
$search_term = "";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $search_term = isset($_POST["search"]) ? $_POST["search"] : "";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search" value="<?php echo htmlspecialchars($search_term); ?>">
    <input type="submit" value="Search">
  </form>

  <?php

  //  Example:  Searching through an array of data (replace with your data source)
  $data = [
    "apple", "banana", "cherry", "date", "elderberry", "fig",
    "grape", "honeydew", "kiwi", "lemon", "mango", "nectarine",
    "orange", "pear", "raspberry", "strawberry", "tangerine", "watermelon"
  ];

  if ($search_term != "") {
    $found_results = [];
    foreach ($data as $item) {
      if (stripos($item, $search_term) !== false) { // Case-insensitive search
        $found_results[] = $item;
      }
    }

    if (!empty($found_results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($found_results as $result) {
        echo "<li>" . htmlspecialchars($result) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
    }
  } else {
    echo "<p>Enter your search term above.</p>";
  }

  ?>

</body>
</html>


<?php

// Basic Search Bar Implementation in PHP

// 1. Get the Search Term from the Form
if (isset($_GET['search'])) {
  $searchTerm = $_GET['search'];
} else {
  $searchTerm = ''; // Or initialize to an empty string if you prefer
}


// 2. Sanitize the Search Term (IMPORTANT for security)
//    - Remove HTML tags to prevent XSS attacks
//    - You might want to also trim whitespace
$searchTerm = htmlspecialchars($searchTerm, ENT_QUOTES, 'UTF-8');



// 3.  Search Logic (Example - Searching a Simple Array)
//    -  Replace this with your actual search logic based on your data
$data = [
  'apple', 'banana', 'orange', 'grape', 'mango', 'pineapple'
];

$searchResults = [];

if ($searchTerm) {
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $searchResults[] = $item;
    }
  }
}

// 4. Output the Form and Results
echo '<form method="GET" action="search_results.php">  <!-- Redirect to a results page -->
      <input type="text" name="search" value="' . htmlspecialchars($searchTerm, ENT_QUOTES, 'UTF-8') . '"  placeholder="Search...">
      <button type="submit">Search</button>
    </form>';

if (!empty($searchResults)) {
  echo '<h2>Search Results:</h2>';
  echo '<ul>';
  foreach ($searchResults as $result) {
    echo '<li>' . $result . '</li>';
  }
  echo '</ul>';
} else {
  echo '<p>No results found for "' . $searchTerm . '".</p>';
}

?>


<?php

// Assuming you have a database connection established (e.g., $db is your connection object)

// Get the search term from the input field
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security and preventing SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Escape the search term for use in the database query
$searchTerm = $db->real_escape_string($searchTerm); // Assuming $db is your database connection object


// You can add more filtering/validation here if needed,
// such as allowing only alphanumeric characters or limiting the search
// to specific fields.

// SQL Query (Example - Adjust based on your database schema)
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

// Execute the query
$result = $db->query($sql);

// Check if the query was successful
if ($result) {
  // Display the search results
  echo "<form method='get' action='your_script.php'>
         <input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>
         <button type='submit'>Search</button>
       </form>";
  echo "<br>";
  echo "<h2>Search Results:</h2>";

  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      echo "<div>";
      // Display the data from each row
      echo "<p>" . htmlspecialchars($row['your_column_name']) . "</p>";  // Escape the output as well
      echo "</div>";
    }
  } else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  }

} else {
  // Handle query errors
  echo "<p>Error executing query: " . $db->error . "</p>";
}

?>


<?php

// Sample data (replace with your actual data source)
$items = [
    "apple",
    "banana",
    "orange",
    "grape",
    "watermelon",
    "pineapple",
    "strawberry",
    "blueberry",
    "cherry",
    "mango",
];

// Get the search term from the form submission
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Perform the search
$searchResults = [];
foreach ($items as $item) {
    if (stripos($item, $searchTerm) !== false) {
        $searchResults[] = $item;
    }
}

// Output the search bar and results
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Items</title>
</head>
<body>

    <h1>Search Items</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
        <input type="text" name="search" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for "<?php echo htmlspecialchars($searchTerm); ?>"</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // Perform your search logic here
      // This is just an example:
      if (searchTerm.length > 0) {
        alert("Searching for: " + searchTerm); // Replace with your actual search implementation
        // Example:  you could fetch data from a database or array based on searchTerm
      } else {
        alert("Please enter a search term.");
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the form submission
$search_term = isset($_POST['search']) ? $_POST['search'] : '';

// Sanitize the search term (very important for security)
$search_term = htmlspecialchars(trim($search_term)); 

//  Escape characters to prevent SQL injection.  This is critical.
//  Using prepared statements is generally preferred for production environments.
$search_term = $db->real_escape_string($search_term);


// Perform the search
if ($search_term) {
  // Replace this with your actual database query.  This is just an example.
  // Adjust table name, column names, and search condition as needed.
  $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'"; 
  $result = $db->query($query);

  if ($result) {
    echo '<form method="post" action="" style="margin-bottom: 20px;">
          <input type="text" name="search" placeholder="Search..." value="' . $search_term . '">
          <button type="submit">Search</button>
        </form>';

    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        echo '<div class="search-result">
              <strong>' . htmlspecialchars($row['name']) . '</strong> - ' . htmlspecialchars($row['description']) . '
              <a href="product.php?id=' . $row['id'] . '">View Details</a>
            </div>';
      }
    } else {
      echo '<p>No results found for "' . $search_term . '".</p>';
    }
  } else {
    echo '<p>Error executing query: ' . $db->error . '</p>';
  }
} else {
  // If no search term is provided, display the initial search form
  echo '<form method="post" action="" style="margin-bottom: 20px;">
          <input type="text" name="search" placeholder="Search..." value="">
          <button type="submit">Search</button>
        </form>';
}

?>


// Using prepared statements (the best practice for security)
$stmt = $db->prepare("SELECT * FROM products WHERE name LIKE ?");
$stmt->bind_param("s", "%" . $search_term . "%"); // 's' indicates a string
$stmt->execute();
$result = $stmt->get_result();
$stmt->close();


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// Replace these with your actual connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

// Function to handle the search query
function searchDatabase($search_term, $db_host, $db_name, $db_user, $db_password) {
  // Establish database connection
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Sanitize the search term to prevent SQL injection
  $search_term = $conn->real_escape_string(trim($search_term)); 

  // Build the SQL query
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_term . "%'"; 
  // Replace 'your_table_name' and 'your_column_name' with your actual table and column names.
  // The '%' wildcards allow for partial matches.

  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Output the results
    echo "<form method='get' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>
          <input type='text' name='search' value='" . htmlspecialchars($search_term) . "' placeholder='Search...'>
          <button type='submit'>Search</button>
          </form>";

    echo "<br>";
    echo "<ul>";
    // Output each row of the result
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . htmlspecialchars($row["your_column_name"]) . "</li>"; // Display the data from your column
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
  }

  $conn->close();
}

// Call the function to execute the search
searchDatabase("", $db_host, $db_name, $db_user, $db_password); //  Empty string as initial search term

?>


function searchDatabase($search_term, $db_host, $db_name, $db_user, $db_password) {
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Prepare the statement
    $stmt = $conn->prepare("SELECT * FROM your_table_name WHERE your_column_name LIKE ?");
    $stmt->bind_param("s", '%' . $search_term . '%'); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Output results
        echo "<form method='get' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>
              <input type='text' name='search' value='" . htmlspecialchars($search_term) . "' placeholder='Search...'>
              <button type='submit'>Search</button>
              </form>";
        echo "<br>";
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . htmlspecialchars($row["your_column_name"]) . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No results found for '" . htmlspecialchars($search_term) . "'.</p>";
    }

    $stmt->close();
    $conn->close();
}


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Example:
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }

// Set up the search bar form
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
  <style>
    /* Basic Styling - Adjust as needed */
    form {
      margin-bottom: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <h1>Search</h1>

  <form action="search_results.php" method="GET">  <!--  'GET' is typical for searches -->
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>


  <?php
    // Example - Search results (replace with your actual query)
    if (isset($_GET['search_term'])) {
      $search_term = htmlspecialchars($_GET['search_term']); // Sanitize input

      // Example search query - adjust this based on your database schema
      $query = "SELECT * FROM your_table_name WHERE title LIKE '%" . $search_term . "%'";

      // Execute the query (example with mysqli)
      // $result = $conn->query($query);

      //  *** Replace this section with your database query logic ***
      // Example using a placeholder for demo purposes:
      if ($search_term != "") {
          echo "<p>You searched for: " . $search_term . "</p>";
          echo "<p>This is just a placeholder for the actual search results.</p>";
      } else {
        echo "<p>Please enter a search term.</p>";
      }


    } else {
      echo "<p>Please enter a search term.</p>";
    }
  ?>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., mysqli)
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }

// Get the search term from the GET request
if (isset($_GET['search_term'])) {
  $search_term = htmlspecialchars($_GET['search_term']);

  // Example search query - adjust this based on your database schema
  $query = "SELECT * FROM your_table_name WHERE title LIKE '%" . $search_term . "%'";

  // Execute the query
  // $result = $conn->query($query);

  // Example using a placeholder:
  if ($search_term != "") {
    echo "<p>Search Results for: " . $search_term . "</p>";

    //  *** Replace this with your database result handling ***
    // Example:
    // while ($row = $result->fetch_assoc()) {
    //   echo "<p>" . $row['title'] . "</p>";
    // }
  } else {
    echo "<p>Please enter a search term.</p>";
  }

} else {
  echo "<p>No search term provided.</p>";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Get the search term from the GET request
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - Important for security!
$searchTerm = htmlspecialchars(trim($searchTerm)); // Prevents XSS attacks

// Prevent empty searches from running a query
if (empty($searchTerm)) {
    $results = []; // Return an empty array if no search term
    echo '<p>Please enter a search term.</p>';
} else {
    //  Construct your SQL query.  This is an example and you'll need to
    //  adjust it to match your database schema and desired search behavior.
    $tableName = 'your_table_name'; // Replace with your table name
    $columnName = 'your_column_name'; // Replace with the column you want to search
    $sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%$searchTerm%'";


    // Execute the query
    $result = mysqli_query($db, $sql);  // Replace $db with your database connection

    // Check if the query was successful
    if ($result) {
        $results = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row;
        }

        // Display the results (example)
        if (count($results) > 0) {
            echo '<h2>Search Results for: "' . $searchTerm . '"</h2>';
            echo '<table border="1">';
            echo '<thead><tr><th>ID</th><th>Column 1</th><th>Column 2</th></tr></thead>';  // Adjust headers
            echo '<tbody>';
            foreach ($results as $row) {
                echo '<tr>';
                echo '<td>' . $row['id'] . '</td>'; // Adjust based on your table columns
                echo '<td>' . $row['column1'] . '</td>'; // Adjust based on your table columns
                echo '<td>' . $row['column2'] . '</td>'; // Adjust based on your table columns
                echo '</tr>';
            }
            echo '</tbody>';
            echo '</table>';
        } else {
            echo '<p>No results found for: "' . $searchTerm . '"</p>';
        }
    } else {
        // Handle the error
        echo '<p>Error executing query: ' . mysqli_error($db) . '</p>';
    }
}
?>

<form action="" method="get">
    <input type="text" name="search" placeholder="Enter search term">
    <button type="submit">Search</button>
</form>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
      font-size: 16px;
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search</h2>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      // Get the search term from the input field
      var searchTerm = document.getElementById("searchInput").value;

      //  Example:  Replace this with your actual search logic.
      //  This example just displays the search term in an alert.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      alert("Searching for: " + searchTerm);

      //  **Important:  Replace this placeholder with your actual search code.**
      //  You'll likely want to:
      //  1. Send the 'searchTerm' to a server-side script (e.g., a PHP file).
      //  2. Receive the results from the server.
      //  3. Display the results on the page.
    }
  </script>

</body>
</html>


<?php
  // Assuming you have a connection to your database
  $searchTerm = $_POST['searchTerm'];  // Get the search term from the form

  // Check if the search term is empty
  if (empty($searchTerm)) {
    echo json_encode(array('results' => ''));  // Return an empty result
    exit;
  }

  // Example SQL query (adapt to your database schema)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  $result = mysqli_query($conn, $sql); // Replace $conn with your database connection

  $results = [];
  while ($row = mysqli_fetch_assoc($result)) {
    $results[] = $row;
  }

  mysqli_close($conn);

  // Convert the results to JSON for easy use in JavaScript
  echo json_encode($results);
?>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Sanitize the input
  $search_term = htmlspecialchars(trim($_POST["search_term"]));

  // You can add more validation here, such as checking for empty strings,
  // or limiting the length of the search term.

  // Perform the search (replace this with your actual search logic)
  $results = performSearch($search_term);

  // Display the results
  echo "<div class='search-results'>";
  if (empty($results)) {
    echo "<p>No results found for: " . $search_term . "</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
  echo "</div>";

}
?>

<!-- HTML Form -->
<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
  <input type="text" name="search_term" placeholder="Enter search term...">
  <button type="submit">Search</button>
</form>


function performSearch($search_term) {
    $items = array(
        "apple",
        "banana",
        "orange",
        "grapefruit",
        "mango"
    );

    $results = array();
    foreach ($items as $item) {
        if (stripos($item, $search_term)) {  // Case-insensitive search
            $results[] = $item;
        }
    }
    return $results;
}


// Assuming you have a database connection established in $db

function performSearch($search_term) {
  $query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'"; // Use LIKE for partial matches
  $result = $db->query($query);

  $results = array();
  while ($row = $result->fetch_assoc()) {
    $results[] = $row['name']; // Or whatever column you want to display
  }
  return $results;
}


<?php

// Simple search bar implementation in PHP

// --- Configuration ---
$search_term = ""; // Default search term
$results = [];       // Array to store search results
$data = [  // Sample data - Replace with your actual data source
    ['name' => 'Apple', 'category' => 'Fruit', 'description' => 'A red fruit'],
    ['name' => 'Banana', 'category' => 'Fruit', 'description' => 'A yellow fruit'],
    ['name' => 'Computer', 'category' => 'Electronics', 'description' => 'A device for processing data'],
    ['name' => 'Laptop', 'category' => 'Electronics', 'description' => 'A portable computer'],
    ['name' => 'Book', 'category' => 'Books', 'description' => 'A written or printed work'],
];

// --- Search Function ---
function search_data($searchTerm, $data) {
    $results = [];
    foreach ($data as $item) {
        // Case-insensitive search
        $title = strtolower($item['name']);
        $description = strtolower($item['description']);

        // Check if the search term is in the title or description
        if (strpos($title, $searchTerm) !== false || strpos($description, $searchTerm) !== false) {
            $results[] = $item;
        }
    }
    return $results;
}

// --- Handle Search Input (Example - Simple form submission) ---
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Check if a search term was submitted
    if (isset($_GET["search_term"])) {
        $search_term = htmlspecialchars($_GET["search_term"]);  // Sanitize input
    }
}

// --- Execute Search ---
$results = search_data($search_term, $data);

// --- Display Search Bar and Results ---
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" value="<?php echo $search_term; ?>" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($results)) { ?>
        <p>No results found for <strong><?php echo htmlspecialchars($search_term); ?></strong></p>
    <?php } else { ?>
        <ul>
            <?php foreach ($results as $result) { ?>
                <li>
                    <strong><?php echo htmlspecialchars($result['name']); ?></strong> - 
                    <?php echo htmlspecialchars($result['category']); ?> - 
                    <?php echo htmlspecialchars($result['description']); ?>
                </li>
            <?php } ?>
        </ul>
    <?php } ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the search bar (using $_GET or $_POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and other issues
$searchTerm = htmlspecialchars(trim($searchTerm));

// Basic input validation (optional, but recommended)
if (empty($searchTerm)) {
  //  You can display a message here if the search bar is empty.
  echo "<p>Please enter a search term.</p>";
}
else {
  // Prepare the SQL query
  $sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($db, $sql); // Replace $db with your actual database connection.
  
  // Check if the query was successful
  if ($result) {
    // Display the search results
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    echo "<tr><th>ID</th><th>Your Column 1</th><th>Your Column 2</th></tr>"; // Adjust column names to match your table

    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      echo "<td>" . $row['id'] . "</td>";  // Adjust column names
      echo "<td>" . $row['your_column_1'] . "</td>"; // Adjust column names
      echo "<td>" . $row['your_column_2'] . "</td>"; // Adjust column names
      echo "</tr>";
    }

    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}

?>

<!--  HTML for the search bar -->
<form method="get" action="">
  <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
  <button type="submit">Search</button>
</form>


<?php

//... (Database connection - $db)

$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize (still recommended, but less critical with prepared statements)
$searchTerm = htmlspecialchars(trim($searchTerm));

if (empty($searchTerm)) {
    echo "<p>Please enter a search term.</p>";
} else {
    // Prepare the statement
    $sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE ?";
    $stmt = mysqli_prepare($db, $sql);  // Use mysqli_prepare

    if ($stmt) {
        // Bind the parameter
        mysqli_stmt_bind_param($stmt, "s", $searchTerm); // "s" indicates a string

        // Execute the statement
        mysqli_stmt_execute($stmt);

        // Get the result
        $result = mysqli_stmt_get_result($stmt);

        if ($result) {
          //... (Display the search results - same as before)
        } else {
          echo "<p>Error executing query.</p>";
        }
        mysqli_stmt_close($stmt); // Close the statement
    } else {
        echo "<p>Error preparing statement.</p>";
    }
}
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// and a table named 'products' with a column named 'name'

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars($searchTerm);  // Escape HTML entities

  // Perform the search
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

  // Example using mysqli
  $conn = new mysqli("your_db_host", "your_db_user", "your_db_password", "your_db_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    // Output the search results
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    echo "<tr><th>ID</th><th>Name</th><th>Description</th></tr>"; // Example headers
    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row["id"] . "</td>";
      echo "<td>" . $row["name"] . "</td>";
      echo "<td>" . $row["description"] . "</td>"; // Adapt to your table schema
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }

  $conn->close(); // Close the database connection
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// ... (Database connection setup - same as before)

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (still recommended for other reasons)
  $searchTerm = htmlspecialchars($searchTerm);

  // Use a prepared statement to prevent SQL injection
  $sql = "SELECT * FROM products WHERE name LIKE ?"; // Use a placeholder '?'

  // Example using mysqli
  $conn = new mysqli("your_db_host", "your_db_user", "your_db_password", "your_db_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $searchTerm); // "s" indicates a string parameter

  $result = $stmt->execute();

  if ($result) {
    $rows = $stmt->fetch_all(MYSQLI_ASSOC); // Fetch all results as an array
    if (!empty($rows)) {
      echo "<h2>Search Results for: " . $searchTerm . "</h2>";
      echo "<table border='1'>";
      echo "<tr><th>ID</th><th>Name</th><th>Description</th></tr>";
      foreach ($rows as $row) {
        echo "<tr>";
        echo "<td>" . $row["id"] . "</td>";
        echo "<td>" . $row["name"] . "</td>";
        echo "<td>" . $row["description"] . "</td>";
        echo "</tr>";
      }
      echo "</table>";
    } else {
      echo "<p>No results found for: " . $searchTerm . "</p>";
    }
  } else {
    echo "<p>Error executing query: " . $conn->error . "</p>";
  }

  $stmt->close();
  $conn->close();
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      font-size: 16px;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    .result-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div class="results" id="searchResults">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsContainer = document.getElementById("searchResults");

      // Replace this with your actual data fetching logic.
      // This is just a dummy example using an array.
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry",
        "Pineapple",
        "Mango",
        "Watermelon"
      ];

      // Clear previous results
      resultsContainer.innerHTML = "";

      // Filter the data based on the search term
      var filteredData = data.filter(function(item) {
        return item.toLowerCase().includes(searchTerm);
      });

      // Display the results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var resultItem = document.createElement("div");
          resultItem.classList.add("result-item");
          resultItem.textContent = item;
          resultsContainer.appendChild(resultItem);
        });
      } else {
        var noResults = document.createElement("div");
        noResults.textContent = "No results found.";
        resultsContainer.appendChild(noResults);
      }
    }
  </script>

</body>
</html>


<?php

// Configuration (adjust as needed)
$search_term = ""; // Default empty search term
$results_source = "your_database_table"; // Replace with your database table name
$results_limit = 5; // Limit the number of search results shown

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $search_term = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";
}

// Database connection (replace with your database credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

try {
  $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
  // Set the PDO error mode to exception
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
  die(); // Stop execution if the connection fails
}

// Prepare the search query
$sql = "SELECT * FROM " . $results_source . " WHERE ";
$where_clause = "";
$params = [];

if ($search_term) {
  $where_clause = "LOWER(name) LIKE :search_term OR LOWER(description) LIKE :search_term"; // Adjust fields (name, description)
  $params = ["search_term" => "%" . $search_term . "%"];  // Use '%' for wildcard matching
}


// Execute the query
if ($where_clause) {
  $stmt = $conn->prepare($where_clause);
  $stmt->execute($params);
  $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
} else {
  $results = []; // No search term, return an empty array
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Results</title>
  <style>
    .search-container {
      margin-bottom: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
      <input type="text" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>" placeholder="Enter search term">
      <button type="submit">Search</button>
    </form>
  </div>

  <?php if (count($results)) { ?>
    <h2>Search Results for "<?php echo htmlspecialchars($search_term); ?>"</h2>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Description</th>
          <!-- Add more columns based on your table structure -->
        </tr>
      </thead>
      <tbody>
        <?php foreach ($results as $row) { ?>
          <tr>
            <td><?php echo $row['id']; ?></td>  <!-- Adjust 'id' based on your table -->
            <td><?php echo $row['name']; ?></td> <!-- Adjust 'name' based on your table -->
            <td><?php echo $row['description']; ?></td>  <!-- Adjust 'description' based on your table -->
          </tr>
        <?php } ?>
      </tbody>
    </table>
  <?php } else { ?>
    <p>No results found for "<?php echo htmlspecialchars($search_term); ?>"</p>
  <?php } ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px; /* Adjust as needed */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="performSearch()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function performSearch() {
      var searchTerm = document.getElementById("search-input").value;

      if (searchTerm.trim() === "") {
        // Handle empty search
        return;
      }

      // Simulate a search (replace with your actual search logic)
      var results = simulateSearch(searchTerm);

      // Display the search results
      displaySearchResults(results);
    }

    function simulateSearch(searchTerm) {
      // Replace this with your actual search logic.
      // This is just a placeholder to demonstrate the functionality.
      var results = [
        "Result 1 for " + searchTerm,
        "Result 2 for " + searchTerm,
        "Result 3 for " + searchTerm,
        "Another result for " + searchTerm
      ];
      return results;
    }

    function displaySearchResults(results) {
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = "<h3>Search Results:</h3>";
      if (results.length === 0) {
        resultsDiv.innerHTML += "<p>No results found.</p>";
      } else {
        resultsDiv.innerHTML += "<ul>";
        for (var i = 0; i < results.length; i++) {
          resultsDiv.innerHTML += "<li>" + results.charAt(i) + "</li>";
        }
        resultsDiv.innerHTML += "</ul>";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace 'your_db_connection' with your actual connection object.
//  You'll need to properly configure your database connection.

$db = new mysqli('localhost', 'username', 'password', 'database_name');

// Check for connection errors
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Get the search term from the query string (e.g., from a form submission)
$search_term = isset($_GET['search']) ? $_GET['search'] : '';
$search_term = htmlspecialchars($search_term); // Sanitize for security

// Validate the search term (optional, but recommended)
if (empty($search_term)) {
    $results = []; // Or return a message like "Please enter a search term."
} else {
    // Perform the database query
    $query = "SELECT * FROM your_table_name WHERE column_to_search LIKE '%" . $search_term . "%'";

    $result = $db->query($query);

    if ($result->num_rows > 0) {
        $results = [];
        while ($row = $result->fetch_assoc()) {
            $results[] = $row;
        }
    } else {
        $results = [];  // No results found
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($results)): ?>
        <ul>
            <?php foreach ($results as $row): ?>
                <li>
                    <?php
                        // Customize how you display the data from $row
                        echo htmlspecialchars($row['column_name1']) . " - " . htmlspecialchars($row['column_name2']); // Replace with your actual column names and how you want to display them.
                    ?>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for "<?php echo htmlspecialchars($search_term); ?>"</p>
    <?php endif; ?>


</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the search term from the form
    $searchTerm = $_POST["search_term"];

    // Sanitize the search term (important for security!)
    $searchTerm = htmlspecialchars($searchTerm); // Prevents XSS vulnerabilities

    // Perform the search (replace with your database query or logic)
    $results = performSearch($searchTerm); 

    // Display the results
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    if (empty($results)) {
        echo "<p>No results found.</p>";
    } else {
        echo "<ul>";
        foreach ($results as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar</title>
</head>
<body>

    <h1>Search</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term...">
        <button type="submit">Search</button>
    </form>

</body>
</html>


function performSearch($searchTerm) {
  $data = [
    "Apple",
    "Banana",
    "Orange",
    "Grapefruit"
  ];
  $results = [];
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }
  return $results;
}


<?php

// Assuming you have a database connection established and $db is your database connection object.
//  For simplicity, let's assume you have a database with a table named 'products' with a 'name' column.

// Example Database Connection (Replace with your actual connection details)
// $db = new mysqli("localhost", "username", "password", "database_name");

// Check connection
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Get search term from the search box (assuming it's named 'search_input')
$search_term = isset($_POST['search_input']) ? $_POST['search_input'] : '';

// Sanitize the search term to prevent SQL injection and XSS
$search_term = htmlspecialchars(trim($search_term)); // Important for security and clean input

// If no search term, don't perform the query
if (empty($search_term)) {
    echo "<p>Please enter a search term.</p>";
} else {

    // Build the SQL query
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

    // Execute the query
    $result = $db->query($sql);

    // Display the results
    if ($result->num_rows > 0) {
        echo "<table border='1'>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
                <!-- Add more columns as needed -->
              </tr>";

        while ($row = $result->fetch_assoc()) {
            echo "<tr>
                  <td>" . $row["id"] . "</td>
                  <td>" . $row["name"] . "</td>
                  <td>" . $row["price"] . "</td>
                  <!-- Add more cells based on your database columns -->
                </tr>";
        }
        echo "</table>";
    } else {
        echo "<p>No results found for '" . $search_term . "'.</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="post" action="">
        <input type="text" name="search_input" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php
// ... (Database connection and setup as before)

// Get search term from the search box
$search_term = isset($_POST['search_input']) ? $_POST['search_input'] : '';

if (empty($search_term)) {
    echo "<p>Please enter a search term.</p>";
} else {

    // Build the SQL query with placeholders
    $sql = "SELECT * FROM products WHERE name LIKE ?"; // Use '?' as a placeholder

    // Prepare the statement
    $stmt = $db->prepare($sql);

    // Bind the parameter (user input)
    $stmt->bind_param("s", $search_term);  // "s" indicates a string

    // Execute the query
    $stmt->execute();

    // Get the result set
    $result = $stmt->get_result();

    // Display the results
    if ($result->num_rows > 0) {
        echo "<table border='1'>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
              </tr>";

        while ($row = $result->fetch_assoc()) {
            echo "<tr>
                  <td>" . $row["id"] . "</td>
                  <td>" . $row["name"] . "</td>
                  <td>" . $row["price"] . "</td>
                </tr>";
        }
        echo "</table>";
    } else {
        echo "<p>No results found for '" . $search_term . "'.</p>";
    }

    // Close the statement
    $stmt->close();
}

?>


<?php

// This code creates a simple search bar and handles the search functionality.

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the search term from the form
    $searchTerm = $_POST["search_term"];

    // Sanitize the search term (important for security)
    $searchTerm = htmlspecialchars(trim($searchTerm));

    // Perform the search (replace with your actual search logic)
    $searchResults = searchDatabase($searchTerm); // See function definition below

    // If a search was performed, display the results
    if ($searchResults) {
        echo "<h2>Search Results for: " . $searchTerm . "</h2>";
        echo "<table border='1'>";
        echo "<tr><th>Title</th><th>Description</th></tr>";
        foreach ($searchResults as $result) {
            echo "<tr>";
            echo "<td>" . $result["title"] . "</td>";
            echo "<td>" . $result["description"] . "</td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Search Bar</title>
</head>
<body>

    <h1>Simple Search Bar</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term...">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

function searchDatabase($searchTerm) {
    // Replace this with your actual database connection and query logic.
    // This is just a placeholder example.

    // Assuming you have a database connection established (e.g., $db_connection)

    $db_connection = mysqli_connect("localhost", "your_username", "your_password", "your_database");

    if (mysqli_connect_errno()) {
        echo "Failed to connect to MySQL: " . mysqli_connect_error();
        return false;
    }

    $query = "SELECT title, description FROM products WHERE title LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

    $result = mysqli_query($db_connection, $query);

    if ($result) {
        $searchResults = array();
        while ($row = mysqli_fetch_assoc($result)) {
            $searchResults[] = $row;
        }
        mysqli_free_result($result);
        return $searchResults;
    } else {
        return false;
    }

    mysqli_close($db_connection);
}
?>


<?php

// Sample data (replace with your actual data source - database, array, etc.)
$data = [
    "apple",
    "banana",
    "orange",
    "grapefruit",
    "melon",
    "pear",
    "strawberry",
    "mango",
    "pineapple",
    "cherry"
];

// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = trim($_POST["search_term"]);

    if (!empty($searchTerm)) {
        $results = [];
        foreach ($data as $item) {
            if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
                $results[] = $item;
            }
        }

        if (!empty($results)) {
            echo "<ul>";
            foreach ($results as $result) {
                echo "<li>" . $result . "</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>No results found for '" . $searchTerm . "'.</p>";
        }
    } else {
        echo "<p>Please enter a search term.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Fruits</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter a fruit name">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php
// Assuming you have a database connection established ($conn)
// ... your database connection code ...

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = trim($_POST["search_term"]);

    if (!empty($searchTerm)) {
        $sql = "SELECT * FROM fruits WHERE name LIKE '%" . $searchTerm . "%'";
        $result = mysqli_query($conn, $sql);  // Adjust for your database library

        if ($result) {
            echo "<ul>";
            while ($row = mysqli_fetch_assoc($result)) {
                echo "<li>" . $row["name"] . "</li>";
            }
            echo "</ul>";
        } else {
            echo "<p>Error executing query.</p>";
        }
    } else {
        echo "<p>Please enter a search term.</p>";
    }
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'products' with a 'name' column

// Function to handle the search query
function searchProducts($query) {
  global $db; // Assuming $db is your database connection object

  // Sanitize and escape the query to prevent SQL injection
  $query = $db->real_escape_string($query);

  // Build the SQL query
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $query . "%'";

  // Execute the query
  $result = $db->query($sql);

  // Check if the query was successful
  if ($result) {
    // Build the output HTML
    echo '<form method="GET" action="' . htmlspecialchars($_SERVER['PHP_SELF']) . '">';
    echo '<input type="text" name="search" value="' . htmlspecialchars($query) . '" placeholder="Search Products">';
    echo '<button type="submit">Search</button>';
    echo '</form>';

    // Display the search results
    echo '<ul>';
    while ($row = $result->fetch_assoc()) {
      echo '<li>' . htmlspecialchars($row['name']) . ' - ' . htmlspecialchars($row['description']) . '</li>'; // Adjust 'description' based on your table
    }
    echo '</ul>';
  } else {
    echo '<p>No products found matching your search.</p>';
  }
}


// Example usage:
// Call the function to handle the search
searchProducts($_GET['search']);
?>


<?php

// Assuming you have a database connection established (e.g., $db) using PDO

// Function to handle the search query
function searchProducts($query) {
    global $db;

    try {
        $query = "%" . $db->real_escape_string($query) . "%"; // Still need to escape the query for full-text search.

        $sql = "SELECT * FROM products WHERE name LIKE :query";

        $stmt = $db->prepare($sql);
        $stmt->bindValue(':query', $query, PDO::PARAM_STR);
        $stmt->execute();

        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ($result) {
            echo '<form method="GET" action="' . htmlspecialchars($_SERVER['PHP_SELF']) . '">';
            echo '<input type="text" name="search" value="' . htmlspecialchars($query) . '" placeholder="Search Products">';
            echo '<button type="submit">Search</button>';
            echo '</form>';

            echo '<ul>';
            foreach ($result as $row) {
                echo '<li>' . htmlspecialchars($row['name']) . ' - ' . htmlspecialchars($row['description']) . '</li>';
            }
            echo '</ul>';
        } else {
            echo '<p>No products found matching your search.</p>';
        }
    } catch (PDOException $e) {
        echo '<p>Error: ' . $e->getMessage() . '</p>';
    }
}

// Example usage:
searchProducts($_GET['search']);
?>


<?php

// Assuming you have a database connection established
// (e.g., $conn = mysqli_connect("localhost", "username", "password", "database_name");)

// Example data (replace with your actual database query)
$data = [
    ["id" => 1, "name" => "Apple", "description" => "A delicious fruit."],
    ["id" => 2, "name" => "Banana", "description" => "A yellow fruit."],
    ["id" => 3, "name" => "Orange", "description" => "A citrus fruit."],
    ["id" => 4, "name" => "Grape", "description" => "Small, sweet fruit."],
];


// Get the search term from the search bar (assuming it's in a form field named "search")
$searchTerm = isset($_GET["search"]) ? $_GET["search"] : "";

// Sanitize the search term (important to prevent XSS)
$searchTerm = htmlspecialchars($searchTerm, ENT_QUOTES, "UTF-8");

// Case-insensitive search
$searchTerm = strtolower($searchTerm);


// Build the SQL query (Use prepared statements for security!)
$sql = "SELECT * FROM your_table_name WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

// Prepare and execute the query (RECOMMENDED for security)
// $stmt = mysqli_prepare($conn, $sql);
// mysqli_stmt_bind_string($stmt, "name", $searchTerm); // More efficient for string binding
// mysqli_stmt_execute($stmt);
// $result = mysqli_stmt_get_result($stmt);

// Alternative: Simple query (less secure - avoid in production)
$result = mysqli_query($conn, $sql);

// Display the search bar
echo '<form method="GET" action="" style="margin-bottom: 10px;">
        <input type="text" name="search" placeholder="Search..." value="' . $searchTerm . '">
        <button type="submit">Search</button>
    </form>';

// Display the results
if ($result) {
    echo '<h2>Search Results:</h2>';
    if (mysqli_num_rows($result) > 0) {
        echo '<ul>';
        while ($row = mysqli_fetch_assoc($result)) {
            echo '<li>ID: ' . $row["id"] . ' - ' . $row["name"] . ' - ' . $row["description"] . '</li>';
        }
        echo '</ul>';
    } else {
        echo '<p>No results found for "' . $searchTerm . '".</p>';
    }

    // Close the result set
    mysqli_free_result($result);
} else {
    echo '<p>Error executing the query: ' . mysqli_error($conn) . '</p>';
}

// Close the database connection
mysqli_close($conn);

?>


<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
<style>
  .search-container {
    margin-bottom: 10px;
  }
  input[type="text"] {
    width: 300px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
  }
</style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search..." onkeyup="searchFunction()">
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function searchFunction() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");
      resultsDiv.innerHTML = ""; // Clear previous results

      // Example data (replace with your actual data source)
      var data = [
        { name: "Apple", description: "A delicious fruit." },
        { name: "Banana", description: "A yellow fruit." },
        { name: "Orange", description: "A citrus fruit." },
        { name: "Grape", description: "Small and juicy." },
        { name: "Mango", description: "Tropical fruit." }
      ];


      // Loop through the data and display matching results
      for (var i = 0; i < data.length; i++) {
        if (data[i].name.toLowerCase().includes(searchTerm) || data[i].description.toLowerCase().includes(searchTerm)) {
          var listItem = document.createElement("p");
          listItem.textContent = data[i].name + " - " + data[i].description;
          resultsDiv.appendChild(listItem);
        }
      }

      // If no results are found, display a message
      if (resultsDiv.innerHTML === "") {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace this with your actual database connection setup

// Example database connection (replace with your details)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the search form has been submitted
if (isset($_SERVER["REQUEST_METHOD"]) && $_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the search term from the form
    $searchTerm = $_POST["search_term"];

    // Sanitize the search term (very important to prevent SQL injection)
    $searchTerm = $conn->real_escape_string($searchTerm);

    //  You can customize the query based on your needs
    //  Example: Searching in a table named "products" with a column named "name"
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; 
    
    // OR, if you want a more exact match (case-insensitive)
    // $sql = "SELECT * FROM products WHERE name LIKE '%" . $conn->real_escape_string($searchTerm) . "%'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // Output the results
        echo "<h2>Search Results for: " . $searchTerm . "</h2>";
        echo "<table border='1'>";
        echo "<tr><th>ID</th><th>Name</th><th>Description</th></tr>"; // Adjust column names as needed

        while($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row["id"] . "</td>";
            echo "<td>" . $row["name"] . "</td>";
            echo "<td>" . $row["description"] . "</td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "<p>No results found for: " . $searchTerm . "</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <input type="text" name="search_term" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Simple search bar implementation in PHP

// Get the search term from the form (assuming a simple form)
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Sanitize the search term - IMPORTANT for security
  $searchTerm = filter_var($searchTerm, FILTER_SANITIZE_STRING);

  // Escape special characters to prevent XSS vulnerabilities
  $searchTerm = htmlspecialchars($searchTerm);

  // Perform the search (replace this with your actual search logic)
  $searchResults = performSearch($searchTerm);

  // Display the search bar and results
  echo '<form action="" method="get">';
  echo 'Search: <input type="text" name="search" value="' . $searchTerm . '">';
  echo '<button type="submit">Search</button>';
  echo '</form>';

  if (!empty($searchResults)) {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($searchResults as $result) {
      echo '<li>' . $result . '</li>';
    }
    echo '</ul>';
  } else {
    echo '<p>No results found for: ' . $searchTerm . '</p>';
  }
} else {
  // If no search term is provided, display the search bar
  echo '<form action="" method="get">';
  echo 'Search: <input type="text" name="search">';
  echo '<button type="submit">Search</button>';
  echo '</form>';
}

// --- Helper function for performing the search (replace with your logic) ---
function performSearch($searchTerm) {
  // Example:  Check if the search term exists in a database or array.
  // This is a placeholder - adapt to your needs.

  $data = [
    'apple',
    'banana',
    'orange',
    'grapefruit',
    'strawberry'
  ];

  $results = [];
  foreach ($data as $item) {
    if (stripos($item, $searchTerm) !== false) { // Case-insensitive search
      $results[] = $item;
    }
  }

  return $results;
}

?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important to prevent XSS)
$searchTerm = htmlspecialchars($searchTerm);

// Handle the search request
if ($searchTerm) {
  // Build the query (replace with your actual database query)
  $query = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($db, $query);  // Replace $db with your database connection

  // Display the search results
  if (mysqli_num_rows($result) > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr>";
      foreach ($row as $key => $value) {
        echo "<td>" . $value . "</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
    <button type="submit">Search</button>
  </form>

</body>
</html>


   $query = "SELECT * FROM your_table WHERE your_column LIKE ?";
   $searchTerm = "%" . $searchTerm . "%"; // Add wildcards for LIKE
   $result = mysqli_query($db, $query, array($searchTerm));
   

   * **Input Validation and Sanitization:** Even with prepared statements, it's good practice to validate and sanitize the input.

5. **Pagination:** If your table contains a large number of rows, you'll need to implement pagination to display the results in smaller chunks.

6. **Search Term Handling:** Consider handling things like:
   * Case-insensitive searches (using `LOWER()` in the SQL query).
   * Special characters (e.g., escaping characters that have special meaning in SQL).

7. **CSS Styling:**  Add CSS to style the search bar and the search results table for a better user experience.

**Example of Prepared Statements:**



<?php

// Example using a basic form and simple search functionality.
// This is a simplified example; for production, you'd likely
// integrate with a database and use more robust search techniques.

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // Basic search logic (replace with your desired search method)
  if (!empty($searchTerm)) {
    echo "<p>You searched for: <strong>" . $searchTerm . "</strong></p>";

    // Example: Simple string matching within a list
    $data = ["apple", "banana", "orange", "grape"];
    $results = [];
    foreach ($data as $item) {
      if (stripos($item, $searchTerm) !== false) {
        $results[] = $item;
      }
    }

    if (!empty($results)) {
      echo "<p>Results:</p>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for: <strong>" . $searchTerm . "</strong></p>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Simple Search</h1>

  <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Example HTML for the search bar
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="search_results.php" method="GET">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php

  //  Example of handling the search in a separate file (search_results.php)
  //  This is just a demonstration; you'll likely want to integrate this
  //  with a database or other data source.

  //  If you uncomment this, you will need to adjust the search_results.php
  //  file to actually do something with the search term.  This is just
  //  illustrative.

  // if(isset($_GET['search_term'])) {
  //   $search_term = $_GET['search_term'];

  //   echo "<p>You searched for: " . htmlspecialchars($search_term) . "</p>";
  //   // Add your search logic here to filter data based on $search_term
  // }

  ?>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db

// Get the search term from the search bar (using GET or POST)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Using GET method
// Alternatively, if you prefer POST:
// $searchTerm = isset($_POST['search']) ? $_POST['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars(trim($searchTerm));

//  You can add more sanitization here depending on your database and expected input
//  e.g., escaping special characters for SQL queries.

// *** Database Query ***

// Example: Searching in a table named 'products' with a column named 'name'
$query = "SELECT * FROM products WHERE name LIKE '%$searchTerm%'";

//  Adapt this query based on your table and column names,
//  and the desired search method (LIKE, LIKE '%...%', etc.)

// Execute the query
$result = mysqli_query($db, $query);  // Replace $db with your database connection

// Check if the query executed successfully
if ($result) {
    // Display the search results
    echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>";
    echo "<input type='text' name='search' value='" . htmlspecialchars($searchTerm) . "' placeholder='Search...'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<h2>Search Results:</h2>";

    if (mysqli_num_rows($result) > 0) {
        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . htmlspecialchars($row['name']) . " - " . htmlspecialchars($row['description']) . "</li>"; // Adjust column names
        }
        echo "</ul>";
    } else {
        echo "<p>No results found.</p>";
    }
} else {
    // Handle the error if the query failed
    echo "<p>Error executing query: " . mysqli_error($db) . "</p>";
}

// Close the database connection (important!)
mysqli_close($db);

?>


   $stmt = mysqli_prepare($db, "SELECT * FROM products WHERE name LIKE ?"); // Use a placeholder (?)
   mysqli_stmt_bind_string($stmt, 1, $searchTerm);  // Bind the search term
   mysqli_stmt_execute($stmt);
   mysqli_stmt_bind_result($stmt, $id, $name, $description);
   $result = mysqli_fetch_assoc($stmt);

   mysqli_stmt_close($stmt);
   

2. **Full-Text Search:**  For larger datasets or more complex searches, consider using full-text search capabilities provided by your database system (e.g., MySQL's `MATCH...AGAINST` or other full-text indexes). These are *significantly* faster and more efficient than using `LIKE` for many scenarios.

3. **Database Indexing:**  Make sure you have an index on the column you're searching (e.g., `name` in this example). This dramatically speeds up the search.

4. **Search Term Handling:**  You might want to add features like:
   - **Case-insensitive search:** Use `strtolower()` or `ucfirst()` to convert both the search term and the column to the same case before comparing.
   - **Limit the number of results:** Use `LIMIT` in your SQL query to return only a certain number of results.
   - **Pagination:** If you have a very large number of results, implement pagination to display them in smaller chunks.

5. **User Experience:**
   - Provide clear feedback to the user (e.g., a "Searching..." message while the query is running).
   - Handle errors gracefully and display informative messages to the user.

6. **Database Choice:** Consider using a more robust database system (like PostgreSQL, MySQL, or MariaDB) for production environments.

**Example using Prepared Statements (Recommended):**



<?php

// Assuming you're using a simple array of data for demonstration
$data = [
  "apple", "banana", "orange", "grape", "watermelon"
];

// Function to handle the search bar
function searchData($searchTerm, $data) {
  // Convert search term to lowercase for case-insensitive search
  $searchTerm = strtolower($searchTerm);

  // Filter the data array using array_filter
  $results = array_filter($data, function ($item) use ($searchTerm) {
    // Convert the data item to lowercase for case-insensitive comparison
    return strtolower($item) === $searchTerm;
  });

  // Return the filtered array
  return $results;
}

// Get the search term from the form (example)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get from GET request

// Perform the search
$searchResults = searchData($searchTerm, $data);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search:</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Enter search term">
    <input type="submit" value="Search">
  </form>

  <?php if (!empty($searchResults)): ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result): ?>
        <li><?php echo htmlspecialchars($result); ?></li>
      <?php endforeach; ?>
    </ul>
  <?php else: ?>
    <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
  <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// Let's call it $conn

// Get the search query from the form
$search_query = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the input to prevent SQL injection
$search_query = htmlspecialchars(trim($search_query));

// ---  Database Query ---

// This is a basic example. Adapt this query to your database schema and needs.
// Replace 'table_name' with the actual name of your table.
// Replace 'column_name' with the column you want to search in.
//  Also replace the database connection details.


$sql = "SELECT * FROM table_name WHERE column_name LIKE '%" . $search_query . "%'";

// Execute the query
$result = mysqli_query($conn, $sql); 

// ---  Output the Results ---

if (mysqli_num_rows($result) > 0) {
    echo "<form method='get' action='" . htmlspecialchars($_SERVER['PHP_SELF']) . "'>
          <input type='text' name='search' value='" . htmlspecialchars($search_query) . "' placeholder='Search...'>
          <button type='submit'>Search</button>
        </form>";

    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . htmlspecialchars($row['column_name']) . "</li>"; // Adjust this line to display the appropriate columns
    }
    echo "</ul>";
} else {
    echo "<p>No results found.</p>";
}

// Close the database connection (important!)
mysqli_close($conn);

?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Important for consistent sizing */
    }

    button {
      padding: 8px 12px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResultsDiv = document.getElementById("searchResults");

      // Clear previous results
      searchResultsDiv.innerHTML = "";

      // Example: Search a simple array (replace with your data source)
      var data = [
        "Apple",
        "Banana",
        "Cherry",
        "Date",
        "Elderberry",
        "Fig",
        "Grape",
        "Honeydew",
        "Jackfruit",
        "Kiwi"
      ];

      if (searchTerm.trim() === "") {
        return; // Do nothing if search term is empty
      }

      var results = data.filter(function(item) {
        return item.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
      });

      if (results.length > 0) {
        results.forEach(function(result) {
          var resultElement = document.createElement("p");
          resultElement.textContent = result;
          searchResultsDiv.appendChild(resultElement);
        });
      } else {
        var noResultsElement = document.createElement("p");
        noResultsElement.textContent = "No results found.";
        searchResultsDiv.appendChild(noResultsElement);
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example (Database)</title>
  <style>
    /* ... (CSS Styling) ... */
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var searchResultsDiv = document.getElementById("searchResults");

      searchResultsDiv.innerHTML = "";

      // **Replace with your actual database connection and query**
      // This is just an example - adapt to your database system (MySQL, PostgreSQL, etc.)
      // Assume you have a database connection established in a separate script or object
      // (e.g., $db)
      //  $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
      //  $result = mysqli_query($db, $query);

      //  Example using placeholder data
      var data = [
        "Apple",
        "Banana",
        "Cherry",
        "Date",
        "Elderberry",
        "Fig",
        "Grape",
        "Honeydew",
        "Jackfruit",
        "Kiwi"
      ];

      if (searchTerm.trim() === "") {
        return;
      }

      var results = data.filter(function(item) {
        return item.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1;
      });

      if (results.length > 0) {
        results.forEach(function(result) {
          var resultElement = document.createElement("p");
          resultElement.textContent = result;
          searchResultsDiv.appendChild(resultElement);
        });
      } else {
        var noResultsElement = document.createElement("p");
        noResultsElement.textContent = "No results found.";
        searchResultsDiv.appendChild(noResultsElement);
      }
    }
  </script>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 0 auto;
      margin-top: 20px;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("search-input").value;

      // Add your search logic here
      // For example, you could display results based on the searchTerm

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      //  Example:  Display the search term in an alert box
      alert("You searched for: " + searchTerm);
    }
  </script>

</body>
</html>


   $searchTerm = $_GET["search"]; // Get the search term from the URL
   $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";
   
   * **Important Security Note:** *Never* directly include user input (like `$searchTerm`) into your SQL query without proper sanitization and escaping. This is extremely vulnerable to SQL injection attacks.  Use prepared statements (with PDO or mysqli) to prevent SQL injection.  If you're using `LIKE` with `%`,  make sure your database is properly indexed for the `your_column` column to improve search performance.
5. **Display Results:** After executing the SQL query, you'll need to fetch the results and display them on the page (e.g., in a table).

Example of using PDO and prepared statements (much more secure):



<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px;
      margin: 20px auto;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    const searchInput = document.getElementById('searchInput');
    const resultsDiv = document.getElementById('results');

    searchInput.addEventListener('keyup', function() {
      const searchTerm = searchTerm.trim(); // Trim whitespace
      let resultsHTML = '';

      // Simulate a data source (replace with your actual data source)
      const data = [
        { title: 'Apple iPhone 14', description: 'The latest iPhone...' },
        { title: 'Samsung Galaxy S23', description: 'A powerful Android phone...' },
        { title: 'Sony WH-1000XM5 Headphones', description: 'Noise-canceling headphones...' },
        { title: 'Google Pixel 7 Pro', description: 'Google\'s flagship phone...' },
        { title: 'Amazon Echo Dot (5th Gen)', description: 'A smart speaker...' }
      ];

      if (searchTerm) {
        data.forEach(item => {
          const title = item.title.toLowerCase();
          const description = item.description.toLowerCase();

          if (title.includes(searchTerm.toLowerCase()) || description.includes(searchTerm.toLowerCase())) {
            resultsHTML += `
              <div class="search-result">
                <h3>${item.title}</h3>
                <p>${item.description}</p>
              </div>
            `;
          }
        });
      }

      if (resultsHTML) {
        resultsDiv.innerHTML = resultsHTML;
      } else {
        resultsDiv.innerHTML = '<p>No results found.</p>';
      }
    });
  </script>

</body>
</html>


<?php
// Example PHP code to return search results
// Replace this with your actual database query

$searchTerm = $_GET['search']; // Get the search term from the URL
if (!$searchTerm) {
  $results = [];
} else {
  $results = [
    ['title' => 'Apple iPhone 14', 'description' => 'The latest iPhone...'],
    ['title' => 'Samsung Galaxy S23', 'description' => 'A powerful Android phone...'],
    ['title' => 'Sony WH-1000XM5 Headphones', 'description' => 'Noise-canceling headphones...'],
    ['title' => 'Google Pixel 7 Pro', 'description' => 'Google\'s flagship phone...'],
    ['title' => 'Amazon Echo Dot (5th Gen)', 'description' => 'A smart speaker...']
  ];
}

// Output the results as JSON
header('Content-Type: application/json');
echo json_encode($results);
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// For demonstration purposes, we'll use a placeholder array instead of a real database.
$data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A sweet fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, juicy fruit'],
];

// Get the search term from the GET request (e.g., from a URL like ?search=apple)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection (IMPORTANT!)
$searchTerm = htmlspecialchars(trim($searchTerm)); 

// Handle empty search term
if (empty($searchTerm)) {
    $searchResults = $data; // Show all results if nothing is searched
} else {
    $searchResults = [];
    foreach ($data as $item) {
        // Case-insensitive search
        if (stripos($item['name'], $searchTerm) !== false ||
            stripos($item['description'], $searchTerm) !== false) {
            $searchResults[] = $item;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search for Fruits</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter fruit name" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($searchResults)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li>
                    <strong>Name:</strong> <?php echo $result['name']; ?><br>
                    <strong>Description:</strong> <?php echo $result['description']; ?><br>
                    <strong>ID:</strong> <?php echo $result['id']; ?>
                </li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($searchTerm); ?></p>
    <?php endif; ?>

</body>
</html>


// Using mysqli
$conn = mysqli_connect("localhost", "your_username", "your_password", "your_database");
if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}

$searchTerm = htmlspecialchars(trim($_GET['search']));

$sql = "SELECT id, name, description FROM fruits WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'";

$result = mysqli_query($conn, $sql);

// Process the results
// ... (Display the results as in the HTML example)

mysqli_close($conn);


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 300px;
      font-size: 16px;
    }
    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("searchResults");

      // Clear previous results
      resultsDiv.innerHTML = "";

      // **Replace this with your actual data retrieval logic**
      // This is just a placeholder example
      var data = [
        { title: "Apple", description: "A delicious fruit" },
        { title: "Banana", description: "Another tasty fruit" },
        { title: "Orange", description: "A citrus fruit" },
        { title: "Grape", description: "Small and sweet" }
      ];

      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        if (item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm)) {
          var resultDiv = document.createElement("div");
          resultDiv.innerHTML = "<strong>" + item.title + "</strong>: " + item.description;
          resultsDiv.appendChild(resultDiv);
        }
      }

      if (resultsDiv.innerHTML === "") {
        resultsDiv.innerHTML = "<p>No results found.</p>";
      }
    }
  </script>

</body>
</html>


<?php
// Assuming you've retrieved data from a database
$results = [
    ['title' => 'Apple', 'description' => 'A delicious fruit'],
    ['title' => 'Banana', 'description' => 'A tasty fruit'],
    // ... more results ...
];

// (Inside your JavaScript, where you initialize the data)
var data = <?php echo json_encode($results); ?>;
?>


<?php

// Example HTML for the search bar
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="GET">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  // Example: Processing the search term (replace with your actual logic)
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);
    echo "<p>You searched for: " . $search_term . "</p>";

    // Example:  Simple string matching (replace with your actual search logic)
    if (strpos($search_term, 'example') !== false) {
      echo "<p>Found a match for 'example'!</p>";
    } else {
      echo "<p>No results found.</p>";
    }
  }
  ?>

</body>
</html>


<?php

// Assuming you're working in a web environment (e.g., using HTML to display the form)

// 1. HTML Form for the Search Bar

?>
<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form action="search_results.php" method="GET">
    <input type="text" name="search_term" placeholder="Enter search term" style="width: 300px;">
    <button type="submit">Search</button>
  </form>

</body>
</html>

<?php

// 2. PHP Code to Process the Search Query (search_results.php - This is just an example)

// Check if the search term is set in the GET request
if (isset($_GET['search_term'])) {

  // Sanitize the input to prevent SQL injection and other security vulnerabilities
  $search_term = htmlspecialchars(trim($_GET['search_term'])); 

  //  You can now use the $search_term in your search logic.
  //  Example:  Search through a database, array, or other data source.

  //  IMPORTANT:  Replace this with your actual search logic!
  $results = searchDatabase($search_term);  //  Example function - replace with yours

  // Display the results.  This is just a placeholder.
  echo "<h2>Search Results for: " . $search_term . "</h2>";
  if (empty($results)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
} else {
  echo "<p>No search term provided.</p>";
}


// Example function to simulate a database search (Replace this!)
function searchDatabase($term) {
    // In a real application, you would connect to your database here.
    // This is just a placeholder for demonstration.
    $data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Strawberry",
        "Pineapple"
    ];
    $results = [];
    foreach ($data as $item) {
      if (stripos($item, $term) !== false) { // Case-insensitive search
        $results[] = $item;
      }
    }
    return $results;
}

?>


<?php

// Assuming you have a form to capture the search input
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <input type="submit" value="Search">
  </form>

  <?php
  // Example of processing the search term and displaying results
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Replace this with your actual search logic
    $results = searchDatabase($search_term);

    if (!empty($results)) {
      echo "<h2>Search Results for: " . $search_term . "</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for: " . $search_term . "</p>";
    }
  }
  ?>

  <script>
    // Optional: Add a little styling or behavior to the search bar
    // Example:  Hide the submit button when the input is focused
    document.getElementById('search_term').addEventListener('focus', function() {
      document.getElementById('search_submit').style.display = 'none';
    });

    document.getElementById('search_term').addEventListener('blur', function() {
      document.getElementById('search_submit').style.display = 'block';
    });
  </script>

</body>
</html>


function searchDatabase($search_term) {
    // Sanitize the search term (add more sanitization as needed)
    $search_term = mysqli_real_escape_string($GLOBALS['conn'], $search_term);

    // Construct the SQL query (using prepared statement)
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

    // Execute the query
    $result = mysqli_query($GLOBALS['conn'], $sql);

    if ($result) {
        $results = array();
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row['name']; // Adjust this based on your table structure
        }
        mysqli_free_result($result);
        return $results;
    } else {
        return false; // Handle the error
    }
}


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      width: 300px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; /* Ensures padding and border are included in width */
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      const searchTerm = document.getElementById("searchInput").value;
      const resultsDiv = document.getElementById("results");

      // **Replace this with your actual search logic**
      // This is a placeholder for demonstration purposes.
      const data = [
        { title: "Apple Pie Recipe", description: "A classic apple pie recipe." },
        { title: "Chocolate Cake", description: "Delicious chocolate cake recipe." },
        { title: "PHP Tutorial", description: "Learn PHP programming." },
        { title: "Search Bar Example", description: "This is a demonstration of a search bar." }
      ];

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = "Please enter a search term.";
        return;
      }

      const resultsHtml = data
        .filter(item => item.title.toLowerCase().includes(searchTerm.toLowerCase()) || item.description.toLowerCase().includes(searchTerm.toLowerCase()))
        .map(item => `
          <div>
            <h3>${item.title}</h3>
            <p>${item.description}</p>
          </div>
        `)
        .join('');

      resultsDiv.innerHTML = resultsHtml;
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's assume you've connected to a database named 'mydatabase'
// and have a table named 'products' with a column 'name'

// Example database connection (replace with your actual credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "mydatabase";

try {
    $conn = new mysqli($servername, $username, $password, $dbname);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
} catch (Exception $e) {
    die("Connection error: " . $e->getMessage());
}


// Get the search term from the search bar (e.g., from a POST request)
$searchTerm = isset($_POST['searchTerm']) ? $_POST['searchTerm'] : '';


// Sanitize the search term to prevent SQL injection
$searchTerm = $conn->real_escape_string($searchTerm);


// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Use LIKE for partial matches


// Execute the query
$result = $conn->query($sql);


?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Products</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="post" action="">
        <input type="text" name="searchTerm" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

    <?php
    if ($result->num_rows > 0) {
        echo "<ul>";
        while ($row = $result->fetch_assoc()) {
            echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Assuming you have a 'description' column
        }
        echo "</ul>";
    } else {
        echo "<p>No products found.</p>";
    }
    ?>

</body>
</html>


<?php

// Assuming you have a form to collect the search query
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term" value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // Handle the search query
  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);

    // Example: Search through a simple array of products
    $products = [
      'Laptop' => 'High-performance laptop',
      'Mouse' => 'Wireless mouse',
      'Keyboard' => 'Mechanical keyboard',
      'Monitor' => '27-inch monitor',
      'Headphones' => 'Noise-canceling headphones'
    ];

    $results = [];

    foreach ($products as $product => $description) {
      if (strpos($description, $search_term) !== false) { // Case-insensitive search
        $results[$product] = $description;
      }
    }

    if (!empty($results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $product => $description) {
        echo "<li>" . $product . ": " . $description . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $search_term . "'.</p>";
    }
  }

  ?>

</body>
</html>


<?php

// This code creates a basic search bar with a simple text field and a button.
// It then searches the text in the field for the entered term.
// This is a basic example; you'll likely want to customize it for your specific needs
// (e.g., database queries, more complex search logic, HTML styling, etc.).

// HTML form for the search bar
?>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="search">Search:</label>
  <input type="text" id="search" name="search" value="<?php echo isset($_GET['search']) ? htmlspecialchars($_GET['search']) : ''; ?>">
  <button type="submit">Search</button>
</form>

<?php

// Process the search form submission
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Get the search term from the form
  $searchTerm = isset($_GET['search']) ? htmlspecialchars($_GET['search']) : '';

  // Perform the search (replace with your actual search logic)
  if ($searchTerm != "") {
    // Example: Search through a simple array
    $items = ["apple", "banana", "orange", "grape", "kiwi"];
    $results = [];

    foreach ($items as $item) {
      if (stripos($item, $searchTerm) !== false) { // Use stripos for case-insensitive searching
        $results[] = $item;
      }
    }

    // Display the results
    if (count($results) > 0) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found for '" . $searchTerm . "'.</p>";
    }
  }
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      width: 300px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; /* Ensures padding doesn't add to width */
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }
    .results li {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
      background-color: #f9f9f9;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Simple Search</h1>
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="results" class="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsDiv = document.getElementById("results");

      // Example data - replace this with your actual data source
      var data = [
        { title: "Apple iPhone 13", description: "Latest iPhone model." },
        { title: "Samsung Galaxy S22", description: "Premium Android phone." },
        { title: "Google Pixel 6", description: "Best camera phone." },
        { title: "Laptop - Dell XPS 13", description: "Powerful laptop for work." },
        { title: "Keyboard - Logitech MX Keys", description: "Ergonomic wireless keyboard." }
      ];

      // Clear previous results
      resultsDiv.innerHTML = "";

      // Filter data based on search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var listItem = document.createElement("li");
          listItem.innerHTML = "<b>" + item.title + "</b><br>" + item.description;
          resultsDiv.appendChild(listItem);
        });
      } else {
        var noResults = document.createElement("p");
        noResults.innerHTML = "No results found.";
        resultsDiv.appendChild(noResults);
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db is your PDO connection)
// and you're working with a database table named 'products' (adjust as needed)

// 1. Get the Search Term
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// 2. Sanitize the Search Term (Crucial for Security)
$searchTerm = htmlspecialchars($searchTerm); // Prevents XSS attacks
//  Consider adding further sanitization if needed, depending on your database and input handling.

// 3. Build the SQL Query
$tableName = 'products'; // Replace with your table name
$columnName = 'name';   // Replace with the column you want to search in
$sql = "SELECT * FROM $tableName WHERE $columnName LIKE '%$searchTerm%'";

// 4. Execute the Query
try {
  $stmt = $db->prepare($sql);
  $stmt->execute();

  $results = $stmt->fetchAll(PDO::FETCH_ASSOC);  // Fetch results as an associative array

  // 5. Display the Results (Example - Adapt to your needs)
  if ($results) {
    echo "<form action='search.php' method='get'>";
    echo "<input type='text' name='search' value='$searchTerm'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<h2>Search Results:</h2>";
    echo "<table border='1'>";
    echo "<thead><tr><th>ID</th><th>Name</th><th>Description</th><th>Price</th></tr></thead>";
    echo "<tbody>";
    foreach ($results as $row) {
      echo "<tr>";
      echo "<td>" . $row['id'] . "</td>";
      echo "<td>" . $row['name'] . "</td>";
      echo "<td>" . $row['description'] . "</td>";
      echo "<td>" . $row['price'] . "</td>";
      echo "</tr>";
    }
    echo "</tbody>";
    echo "</table>";
  } else {
    echo "<p>No results found for '$searchTerm'.</p>";
  }

} catch (PDOException $e) {
  echo "<p style='color:red;'>Error: " . $e->getMessage() . "</p>";
}

?>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if (!$db->connect_error) {
//   // Handle connection error
// }

// Function to handle search queries
function searchData($search_term, $data) {
  $results = [];

  foreach ($data as $item) {
    // Normalize the search term to lowercase for case-insensitive search
    $search_term = strtolower($search_term);

    // Check if the search term exists in any of the item's fields.
    // Modify this section based on the fields you want to search in.
    if (strpos(strtolower($item['title']), $search_term) !== false ||  // Check title
        strpos(strtolower($item['description']), $search_term) !== false || // Check description
        strpos(strtolower($item['name']), $search_term) !== false) { // Check name
      $results[] = $item;
    }
  }

  return $results;
}


// Example Data (replace with your actual data from the database)
$items = [
  ['id' => 1, 'title' => 'Awesome Product', 'description' => 'A great product to buy.', 'name' => 'Product A'],
  ['id' => 2, 'title' => 'Another Product', 'description' => 'A product with a unique feature.', 'name' => 'Product B'],
  ['id' => 3, 'title' => 'Cool Gadget', 'description' => 'A very cool gadget!', 'name' => 'Product C'],
];

// Get the search term from the input field (assuming you have an input field with id="search")
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$search_results = searchData($search_term, $items);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Results</h1>

  <form method="get" action="">
    <input type="text" id="search" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_term); ?>">
    <input type="submit" value="Search">
  </form>

  <?php if (empty($search_results)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($search_results as $result) {
      echo "<li>ID: " . $result['id'] . ", " . $result['title'] . "</li>";
    }
    echo "</ul>";
  } ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    /* Basic styling for the search bar */
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Include padding and border in the element's total width and height */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h1>Search</h1>
    <input type="text" id="searchInput" placeholder="Enter search term">
    <button onclick="performSearch()">Search</button>
  </div>


  <script>
    function performSearch() {
      var searchTerm = document.getElementById("searchInput").value;

      //  You'll replace this with your actual search logic
      //  This is just a placeholder to demonstrate the functionality.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Echo the search term back to the page
      document.getElementById("results").innerHTML = "<p>Searching for: " + searchTerm + "</p>";

      //  Implement your actual search logic here:
      //  - Fetch data from a database or other source
      //  - Filter the data based on the searchTerm
      //  - Display the results on the page.


    }
  </script>

  <div id="results">
    <!-- Search results will be displayed here -->
  </div>

</body>
</html>


$searchTerm = $_GET['search'];  // Example: getting search term from a URL parameter

$stmt = $pdo->prepare("SELECT * FROM products WHERE name LIKE :searchTerm OR description LIKE :searchTerm");
$searchTerm = "%" . $searchTerm . "%"; // Add wildcards for partial matches

$stmt->bindParam(':searchTerm', $searchTerm, PDO::PARAM_STR);
$stmt->execute();

$results = $stmt->fetchAll(PDO::FETCH_ASSOC);
// Display $results


<?php

// Sample data (replace this with your actual data source)
$products = [
    "Red T-Shirt",
    "Blue Jeans",
    "Black Leather Jacket",
    "Gray Wool Sweater",
    "Black Boots",
    "Red Hat",
    "Blue Scarf",
    "Black Gloves",
];

// Function to perform the search
function searchProducts($searchTerm, $products) {
    $results = [];

    foreach ($products as $product) {
        if (stripos($product, $searchTerm) !== false) { // Case-insensitive search
            $results[] = $product;
        }
    }

    return $results;
}

// Get the search term from the form submission (or directly from URL if needed)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Perform the search
$searchResults = searchProducts($searchTerm, $products);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Search</title>
</head>
<body>

    <h1>Product Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($searchTerm); ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No products found matching your search.</p>
    <?php else: ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($searchResults as $product): ?>
                <li><?php echo htmlspecialchars($product); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// and a table named 'products' with a 'name' column.

// Get the search term from the form.
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security).
$searchTerm = htmlspecialchars($searchTerm);

// Prepare the SQL query.  This is crucial for preventing SQL injection.
// Use prepared statements with placeholders.  This is the safest method.
$query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

// Execute the query.
// $result = mysqli_query($conn, $query); // Assuming mysqli

// Example using PDO (more modern and often recommended):
try {
  $stmt = $conn->prepare("SELECT * FROM products WHERE name LIKE :search");
  $stmt->bindValue(':search', $searchTerm, PDO::PARAM_STR);
  $stmt->execute();
  $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
  // Handle database errors.  Display an error message to the user.
  echo "Error: " . $e->getMessage();
  //  Or, for a more user-friendly experience:
  //  echo "An error occurred while searching: " . $e->getMessage();
  exit(); // Stop execution if a critical error occurs
}


// Output the search form
echo '<form method="GET" action="' . htmlspecialchars($_SERVER['PHP_SELF']) . '">
      <input type="text" name="search" placeholder="Search products...">
      <button type="submit">Search</button>
    </form>';

// Display the search results.
if (count($result) > 0) {
  echo '<h2>Search Results:</h2>';
  echo '<ul>';
  foreach ($result as $row) {
    echo '<li>' . $row['name'] . ' - ' . $row['description'] . '</li>'; // Assuming 'description' column
  }
  echo '</ul>';
} else {
  echo '<p>No products found matching your search.</p>';
}

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's use a placeholder for the database connection

// Example:
// $db = mysqli_connect("localhost", "username", "password", "database_name");
// if (!$db) {
//     die("Connection failed: " . mysqli_connect_error());
// }


// **Basic Search Function**
function searchDatabase($search_term, $table_name, $column_to_search = 'name') {
  //  Replace this with your actual database connection and query
  //  This is a simplified example using a hardcoded array of data.
  //  You should replace this with your database query.

  $data = [
    ['id' => 1, 'name' => 'Apple', 'description' => 'A red fruit'],
    ['id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'],
    ['id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'],
    ['id' => 4, 'name' => 'Grape', 'description' => 'Small, sweet fruit']
  ];


  $results = [];

  foreach ($data as $row) {
    // Perform case-insensitive search
    if (stripos($row[$column_to_search], $search_term) !== false) {
      $results[] = $row;
    }
  }

  return $results;
}


// **Search Bar HTML Form**
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  // **Process the Search Form**

  if (isset($_GET['search_term'])) {
    $search_term = htmlspecialchars($_GET['search_term']);  // Sanitize input
    $results = searchDatabase($search_term, 'name');  // Call your search function

    if (!empty($results)) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($results as $result) {
        echo "<li>" . htmlspecialchars($result['name']) . " - " . htmlspecialchars($result['description']) . "</li>";
      }
      echo "</ul>";
    } else {
      echo "<p>No results found.</p>";
    }
  }
  ?>

</body>
</html>


<?php

// Assuming you have a data source (e.g., an array, a database query result)
// called $data
//  $data = [
//      "apple", "banana", "orange", "grape", "watermelon"
//  ]; 

// Example data (replace with your actual data)
$data = [
    "apple", "banana", "orange", "grape", "watermelon",
    "pineapple", "kiwi", "mango", "pear"
];

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security - prevent XSS)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Case-insensitive search
$searchTerm = strtolower($searchTerm); // Convert to lowercase for case-insensitive matching

// Search the data
$results = [];
foreach ($data as $item) {
    $itemLower = strtolower($item);
    if (strpos($itemLower, $searchTerm) !== false) {
        $results[] = $item; // Return the original item (case-preserved)
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar</title>
</head>
<body>

    <h1>Search</h1>

    <form method="GET" action="">
        <input type="text" name="search" value="<?php echo $searchTerm; ?>">
        <button type="submit">Search</button>
    </form>

    <?php if (empty($results)) {
        echo "<p>No results found for '" . $searchTerm . "'</p>";
    } else {
        echo "<ul>";
        foreach ($results as $result) {
            echo "<li>" . $result . "</li>";
        }
        echo "</ul>";
    } ?>

</body>
</html>


<?php

// Assuming you have a form with an input field named 'search_term'
// and you want to search through a data source (e.g., a database, an array, etc.).
// This example demonstrates searching through a simple array.

// **1. Get the Search Term from the Form**

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $search_term = htmlspecialchars($_POST["search_term"]); // Sanitize input

  // **2. Define Your Data Source (Example: Array)**
  $data = [
    "apple", "banana", "cherry", "date", "elderberry",
    "fig", "grape", "honeydew", "kiwi", "lemon"
  ];

  // **3. Perform the Search**

  $results = [];
  foreach ($data as $item) {
    // Convert both the item and the search term to lowercase for case-insensitive search
    if (stristr($item, $search_term)) { // stristr is case-insensitive
      $results[] = $item;
    }
  }

  // **4. Display the Results**
  echo "<form method='post' action=''>"; // Simple form to allow refreshing the search
  echo "Search: <input type='text' name='search_term'>";
  echo "<input type='submit' value='Search'>";
  echo "</form>";

  if (empty($results)) {
    echo "<p>No results found for '" . htmlspecialchars($search_term) . "'</p>";
  } else {
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . htmlspecialchars($result) . "</li>";
    }
    echo "</ul>";
  }
} else {
  // If the form hasn't been submitted, display a basic form
  echo "<form method='post' action=''>";
  echo "Search: <input type='text' name='search_term'>";
  echo "<input type='submit' value='Search'>";
  echo "</form>";
}

?>


<?php

// Example: Simple Search Bar in PHP

// Check if the search term is submitted
if (isset($_GET['search']) && isset($_GET['submit'])) {
  // Get the search term from the GET variable 'search'
  $searchTerm = $_GET['search'];

  // Sanitize the search term (Important for security!)
  $searchTerm = htmlspecialchars(trim($searchTerm));

  // You can add your logic here to search through data (e.g., a database, array, etc.)
  // For this example, we'll just display the search term.

  // Example:  Search through an array of products
  $products = [
    'Laptop - 15 inch' => 'https://example.com/laptop1',
    'Smartphone - Latest Model' => 'https://example.com/smartphone',
    'Wireless Mouse' => 'https://example.com/mouse',
    'Gaming Keyboard' => 'https://example.com/keyboard',
  ];

  $searchResults = [];
  foreach ($products as $key => $value) {
    if (strpos($key, $searchTerm) !== false || strpos($value, $searchTerm) !== false) {
      $searchResults[$key] = $value;
    }
  }

  $resultsHtml = '';
  if (!empty($searchResults)) {
    $resultsHtml = '<ul>';
    foreach ($searchResults as $key => $value) {
      $resultsHtml .= '<li><a href="' . $value . '">' . $key . '</a></li>';
    }
    $resultsHtml .= '</ul>';
  }

  // Display the search bar and results
  echo '<form method="get" action="">
          <input type="text" name="search" placeholder="Search..." value="' . $searchTerm . '">
          <input type="submit" name="submit" value="Search">
        </form>
        ' . $resultsHtml;


} else {
  // If no search term is submitted, display the search bar
  echo '<form method="get" action="">
          <input type="text" name="search" placeholder="Search..." value="">
          <input type="submit" name="submit" value="Search">
        </form>';
}

?>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    #search-input {
      width: 300px;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    #search-results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    #search-results li {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <ul id="search-results"></ul>

  <script>
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');

    searchButton.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();

      if (searchTerm) {
        // Simulate searching (replace with your actual search logic)
        const results = simulateSearch(searchTerm);

        searchResults.innerHTML = ''; // Clear previous results

        if (results.length > 0) {
          results.forEach(result => {
            const listItem = document.createElement('li');
            listItem.textContent = result;
            searchResults.appendChild(listItem);
          });
        } else {
          searchResults.innerHTML = '<p>No results found.</p>';
        }
      }
    });

    // Example simulateSearch function (replace with your actual search logic)
    function simulateSearch(searchTerm) {
      // In a real application, you'd query a database or search through an array.
      const allData = ['Apple', 'Banana', 'Orange', 'Grape', 'Pineapple', 'Strawberry'];
      const filteredData = allData.filter(item => item.toLowerCase().includes(searchTerm.toLowerCase()));
      return filteredData;
    }
  </script>

</body>
</html>


<?php
// Assuming you have a database connection established (e.g., $db)

// ... (HTML & CSS from above)

// JavaScript
const searchInput = document.getElementById('search-input');
const searchButton = document.getElementById('search-button');
const searchResults = document.getElementById('search-results');

searchButton.addEventListener('click', function() {
  const searchTerm = searchInput.value.trim();

  if (searchTerm) {
    // Assuming a 'products' table with a 'name' column
    $sql = "SELECT name FROM products WHERE name LIKE '%" . $db->real_escape_string($searchTerm) . "%'";
    $result = $db->query($sql);

    searchResults.innerHTML = '';

    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        const listItem = document.createElement('li');
        listItem.textContent = $row['name'];
        searchResults.appendChild(listItem);
      }
    } else {
      searchResults.innerHTML = '<p>No results found.</p>';
    }
  }
});
?>


<?php

// Assuming you have a database connection established (e.g., $conn)
// This is a basic example, you'll need to adapt it to your database structure and query.

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security - prevents SQL injection)
$searchTerm = htmlspecialchars($searchTerm);

// Check if the search term is empty
if (empty($searchTerm)) {
  // Display a message or show results for all items if you prefer
  echo "Please enter a search term.";
  // Or, if you want to display all items without filtering
  // $results = get_all_items(); // Replace with your function
  // echo $results;
} else {
  // Build the SQL query (adapt this to your database structure)
  $sql = "SELECT * FROM items WHERE name LIKE '%" . $searchTerm . "%'"; 

  // Execute the query
  $result = mysqli_query($conn, $sql);  // Replace $conn with your actual database connection

  if ($result) {
    echo "<form method='get' action='search_results.php'>
          <input type='text' name='search' value='" . $searchTerm . "'><button type='submit'>Search</button>
          </form>";

    echo "<h2>Search Results for: " . $searchTerm . "</h2>";

    // Display the search results
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<p>" . $row['name'] . " - " . $row['description'] . "</p>"; // Adapt to your column names
    }

    // Close the database connection (important!)
    mysqli_free_result($result);
    mysqli_close($conn);
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}
?>


<?php

// Define the search term
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (important for security)
$searchTerm = htmlspecialchars($searchTerm);

// Handle the search action -  This is where the searching logic would go.
// For now, we'll just display the search term for demonstration.

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search:</h1>

  <form method="GET">
    <input type="text" name="search" value="<?php echo $searchTerm; ?>" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
    // Example of how to search in a simple array
    $items = array(
      "apple", "banana", "cherry", "date", "elderberry", "fig"
    );

    if ($searchTerm) {
      echo "<h2>Search Results:</h2>";
      echo "<ul>";
      foreach ($items as $item) {
        $lowerCaseItem = strtolower($item);
        $lowerCaseSearchTerm = strtolower($searchTerm);
        if (strpos($lowerCaseItem, $lowerCaseSearchTerm) !== false) {
          echo "<li>" . $item . "</li>";
        }
      }
      echo "</ul>";
    }

  ?>

</body>
</html>


<?php
// Assuming you're using MySQLi
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// ... (rest of your search code) ...

$conn->close(); // Close the connection when you're done
?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search query from the form
$search_query = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search query (important to prevent XSS)
$search_query = htmlspecialchars($search_query);

// Escape the search query for the database (to prevent SQL injection)
$search_query = $conn->real_escape_string($search_query);


// Build the SQL query
$sql = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_query . "%'";

// Execute the query
$result = $conn->query($sql);

?>

<form method="GET" action="">
  <input type="text" name="search" placeholder="Search..." value="<?php echo htmlspecialchars($search_query); ?>" style="width:300px;">
  <button type="submit">Search</button>
</form>

<?php

if ($result->num_rows > 0) {
  echo "<ul>";
  while($row = $result->fetch_assoc()) {
    echo "<li>" . $row["your_column_name"] . "</li>"; // Replace with actual column name
  }
  echo "</ul>";
} else {
  echo "No results found.";
}

?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Let's call it $conn

// Check if the search form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important to prevent SQL injection)
  $searchTerm = $conn->real_escape_string($searchTerm);

  // Perform the search (replace with your actual database query)
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'"; // Example for a 'name' column
  $result = $conn->query($sql);

  // Display the search results
  if ($result->num_rows > 0) {
    echo "<h3>Search Results:</h3>";
    echo "<form method='post' action=''>";
    echo "<input type='text' name='search_term' value='" . htmlspecialchars($searchTerm) . "' placeholder='Enter search term'>";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . htmlspecialchars($row["name"]) . " - " . htmlspecialchars($row["description"]) . "</li>"; // Adjust based on your table columns
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter product name">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar</title>
  <style>
    /* Basic styling for the search bar */
    #search-container {
      width: 300px;
      margin: 20px auto;
      text-align: center;
    }

    #search-input {
      width: 80%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    #search-button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    #search-button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div id="search-container">
    <input type="text" id="search-input" placeholder="Search...">
    <button id="search-button">Search</button>
  </div>

  <?php
    // Example data (replace with your actual data source)
    $data = [
      ["name" => "Apple", "description" => "A red fruit"],
      ["name" => "Banana", "description" => "A yellow fruit"],
      ["name" => "Orange", "description" => "A citrus fruit"],
      ["name" => "Grape", "description" => "Small, juicy fruit"]
    ];

    // Handle the search button click
    if (isset($_GET['search_term']) && !empty($_GET['search_term'])) {
      $searchTerm = $_GET['search_term'];

      // Perform the search
      $results = [];
      foreach ($data as $item) {
        // Case-insensitive search
        $name = strtolower($item['name']);
        $description = strtolower($item['description']);
        $searchTermLower = strtolower($searchTerm);

        if (strpos($name, $searchTermLower) !== false || strpos($description, $searchTermLower) !== false) {
          $results[] = $item;
        }
      }

      // Display the search results
      if (!empty($results)) {
        echo "<h2>Search Results:</h2>";
        echo "<ul>";
        foreach ($results as $result) {
          echo "<li>Name: " . $result['name'] . ", Description: " . $result['description'] . "</li>";
        }
        echo "</ul>";
      } else {
        echo "<p>No results found for '" . $searchTerm . "'.</p>";
      }
    }
  ?>

</body>
</html>


<?php
// Assuming you have a database connection established in a separate file (e.g., $db)
// and that you've executed a query to fetch the data.

// Example:
// $data = $db->query("SELECT name, description FROM products WHERE name LIKE '%" . $searchTerm . "%'")->fetchAll(PDO::FETCH_ASSOC);

$searchTerm = isset($_GET['search_term']) ? $_GET['search_term'] : '';

// Perform the search (similar logic as before, but using the fetched data)
$results = [];
if (!empty($searchTerm)) {
    // Replace this with your database query to fetch the results
    $results = $db->query("SELECT name, description FROM products WHERE name LIKE '%" . $searchTerm . "%' OR description LIKE '%" . $searchTerm . "%'")->fetchAll(PDO::FETCH_ASSOC);
}

// Display the results
if (!empty($results)) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    foreach ($results as $result) {
        echo "<li>Name: " . $result['name'] . ", Description: " . $result['description'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
}
?>


<?php

// Assuming you're in a web environment (e.g., using a web server like Apache)

// 1. Get the Search Query from the Form
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $search_term = $_GET['search'];
} else {
  $search_term = ''; // Reset if nothing is entered
}

// 2. Sanitize the Search Term (Important for Security!)
$search_term = htmlspecialchars($search_term); // Prevents XSS attacks.  This is crucial.
// You can add more sanitization here, depending on where the data comes from.

// 3.  Search Logic (Replace this with your actual search implementation)
// This is a simple example.  You'll likely want to use a database or other data source.

$results = [];
if ($search_term != '') {
    // Replace this with your database query or data source search logic
    // This is just a placeholder that simulates a search based on the term.
    // Example:
    if (strpos($search_term, 'apple') !== false) {
      $results[] = 'Found apple!';
    }
    if (strpos($search_term, 'banana') !== false) {
      $results[] = 'Found banana!';
    }
}

// 4.  Display the Search Form and Results

echo '<form action="" method="get">'; // Empty action means it will automatically redirect
echo 'Search: <input type="text" name="search" value="' . htmlspecialchars($search_term) . '" />';
echo '<input type="submit" value="Search">';
echo '</form>';

if (!empty($results)) {
    echo '<h2>Search Results:</h2>';
    echo '<ul>';
    foreach ($results as $result) {
        echo '<li>' . $result . '</li>';
    }
    echo '</ul>';
} else {
    echo '<p>No results found for "' . htmlspecialchars($search_term) . '"</p>';
}

?>


<?php
// Database credentials (replace with your actual values)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Create a database connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
  die('Connection failed: ' . $conn->connect_error);
}

// Get the search term
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Construct the SQL query
$query = "SELECT * FROM products WHERE name LIKE '%" . $search_term . "%'";

// Execute the query
$result = $conn->query($query);

// Display the search form and results
echo '<form action="" method="get">';
echo 'Search: <input type="text" name="search" value="' . htmlspecialchars($search_term) . '" />';
echo '<input type="submit" value="Search">';
echo '</form>';

if ($result->num_rows > 0) {
  echo '<h2>Search Results:</h2>';
  echo '<ul>';
  while ($row = $result->fetch_assoc()) {
    echo '<li>' . $row['name'] . ' - ' . $row['description'] . '</li>';
  }
  echo '</ul>';
} else {
  echo '<p>No products found for "' . htmlspecialchars($search_term) . '"</p>';
}

$conn->close(); // Close the database connection
?>


<?php

// Basic Search Bar Example

// Check if the search term is submitted
if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // Perform the search (replace with your logic)
  $searchResults = searchDatabase($searchTerm); // Assuming you have a searchDatabase function
} else {
  $searchTerm = ""; // Reset the search term if not submitted
  $searchResults = []; // Reset search results
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="GET" action="">
    <input type="text" name="search" value="<?php echo htmlspecialchars($searchTerm); ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($searchResults)) { ?>
    <h2>Search Results:</h2>
    <ul>
      <?php foreach ($searchResults as $result) {
        echo "<li>" . $result . "</li>";
      } ?>
    </ul>
  <?php } else { ?>
    <p>No results found for: <?php echo htmlspecialchars($searchTerm); ?></p>
  <?php } ?>

</body>
</html>


   function searchDatabase($searchTerm) {
     // Replace this with your actual database query logic
     // This is just a placeholder
     $results = [
       "Product A - This is awesome!",
       "Product B - Another great product.",
       "Product C - Not found",
     ];
     return $results;
   }
   
   * **Database Connection:**  You'll need to establish a connection to your database using your database driver (e.g., `mysqli`, `PDO`).
   * **SQL Query:** Construct a SQL query to search your database.  Use `LIKE` for partial matches (e.g., `WHERE name LIKE '%$searchTerm%'`).  **Important:**  *Always* use prepared statements (with `mysqli_stmt` or PDO's prepared statements) to prevent SQL injection attacks.  Don't directly concatenate user input into your SQL query string.
   * **Return Results:**  Return the results of your database query as an array of strings, or an array of objects if you're using objects.

**Example with Prepared Statements (MySQLi):**



<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px; /* Adjust as needed */
      margin: 20px auto;
      text-align: center;
    }

    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Ensures padding and border are included in width */
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    .results {
      margin-top: 20px;
      list-style: none;
      padding: 0;
    }

    .result-item {
      margin-bottom: 10px;
      padding: 10px;
      border: 1px solid #eee;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div class="results" id="searchResults">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var resultsContainer = document.getElementById("searchResults");

      // Example data (replace with your actual data source)
      var data = [
        { title: "Apple iPhone 15", description: "The latest iPhone..." },
        { title: "Samsung Galaxy S23", description: "A great Android phone..." },
        { title: "Google Pixel 7", description: "Powerful camera and AI..." },
        { title: "OnePlus 11", description: "Fast charging and smooth performance..." },
        { title: "Amazon Echo Dot", description: "Voice control and smart home integration..." }
      ];

      // Clear previous results
      resultsContainer.innerHTML = "";

      // Filter data based on the search term
      var filteredData = data.filter(function(item) {
        return item.title.toLowerCase().includes(searchTerm) || item.description.toLowerCase().includes(searchTerm);
      });

      // Display the filtered results
      if (filteredData.length > 0) {
        filteredData.forEach(function(item) {
          var resultItem = document.createElement("div");
          resultItem.classList.add("result-item");
          resultItem.innerHTML = `<strong>${item.title}</strong><br>${item.description}`;
          resultsContainer.appendChild(resultItem);
        });
      } else {
        var noResultsMessage = document.createElement("p");
        noResultsMessage.textContent = "No results found.";
        resultsContainer.appendChild(noResultsMessage);
      }
    }
  </script>

</body>
</html>


<?php

// Basic Search Bar with Simple Text Matching

// Get the search term from the query string
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS attacks
$search_term = htmlspecialchars($search_term);

// Example data to search through (replace with your actual data)
$products = [
    'Apple iPhone 13' => 'A great smartphone',
    'Samsung Galaxy S22' => 'Another excellent smartphone',
    'Google Pixel 6' => 'A powerful camera phone',
    'Laptop Dell XPS 13' => 'A lightweight and powerful laptop',
    'Gaming PC RTX 3070' => 'Ideal for gaming',
];


// Perform the search
$results = [];
foreach ($products as $key => $value) {
    // Case-insensitive search
    if (stripos($key, $search_term) !== false || stripos($value, $search_term) !== false) {
        $results[$key] = $value;
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="GET" action="">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_term); ?>" />
        <button type="submit">Search</button>
    </form>

    <?php if (!empty($results)): ?>
        <h2>Search Results:</h2>
        <ul>
            <?php foreach ($results as $key => $value): ?>
                <li><?php echo htmlspecialchars($key) ?> - <?php echo htmlspecialchars($value) ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else: ?>
        <p>No results found for <?php echo htmlspecialchars($search_term); ?></p>
    <?php endif; ?>

</body>
</html>


<?php
// Assuming you have a database connection established as $conn

// Get the search term from the query string
$search_term = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term
$search_term = htmlspecialchars($search_term);

// Construct the database query
$query = "SELECT product_name, description FROM products WHERE product_name LIKE '%" . $search_term . "%' OR description LIKE '%" . $search_term . "%'";

// Execute the query
$result = mysqli_query($conn, $query);

$results = [];
if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        $results[$row['product_name']] = $row['description'];
    }
    mysqli_free_result($result); // Important: Free the result set
} else {
    // Handle database error
    echo "Error: " . mysqli_error($conn);
}

// ... (rest of the HTML code as above) ...
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }

    input[type="text"] {
      padding: 10px;
      border: 1px solid #ccc;
      width: 300px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <h2>Search:</h2>
    <input type="text" id="searchInput" placeholder="Enter search term...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      //  Replace this with your actual search logic.
      //  This is a placeholder for demonstration purposes.

      if (searchTerm.trim() === "") {
        alert("Please enter a search term.");
        return;
      }

      // Example:  Display the search term in an alert
      alert("You searched for: " + searchTerm);

      //  More sophisticated search logic would go here, 
      //  e.g., searching a database, a list, etc.
    }
  </script>

</body>
</html>


<?php

// Check if the search form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

  // Sanitize the search term - IMPORTANT for security
  $searchTerm = htmlspecialchars($searchTerm);

  // Perform your search logic here.  This is just a basic example.
  // You'll likely replace this with your actual database query or search algorithm.
  $searchResults = [];

  if ($searchTerm) {
    // Example:  Assume you have an array of data to search through
    $data = [
      "apple", "banana", "cherry", "date", "elderberry",
      "fig", "grape", "honeydew", "kiwi", "lemon"
    ];

    foreach ($data as $item) {
      if (strpos($item, $searchTerm) !== false) { // Case-sensitive search
        $searchResults[] = $item;
      }
    }
  }

  // Display the results
  if (empty($searchResults)) {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  } else {
    echo "<p>Search Results for: " . $searchTerm . "</p>";
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
// For this example, we'll use a placeholder connection.  Replace with your actual connection.
$db = new mysqli("localhost", "username", "password", "database_name");

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize and prepare the search term for the database query
$searchTerm = $db->real_escape_string($searchTerm); // Escape for SQL injection

// Build the SQL query
$query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $searchTerm . "%'";
// Replace 'your_table_name' and 'your_column_name' with your actual table and column names.
// 'LIKE' with '%' allows for partial matches.


// Execute the query
$result = $db->query($query);

?>

<!DOCTYPE html>
<html>
<head>
<title>Search Bar</title>
</head>
<body>

<h2>Search</h2>

<form method="GET" action="">
  <input type="text" name="search" value="<?php echo $searchTerm; ?>">
  <button type="submit">Search</button>
</form>

<?php

if ($result) {
  if ($result->num_rows > 0) {
    echo "<br>";
    echo "<ul>";
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . htmlspecialchars($row['your_column_name']) . "</li>"; //Escape for XSS
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }
} else {
  echo "<p>Error executing query.</p>";
}

$db->close(); // Close the database connection
?>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)
// This is a simplified example and you'll need to adapt it to your specific database and setup.

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize and validate the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm)); // Escape HTML entities and remove whitespace

  // Example query (replace with your database query)
  $sql = "SELECT * FROM your_table WHERE your_column LIKE '%" . $searchTerm . "%'";

  // Execute the query
  $result = mysqli_query($conn, $sql); // Replace $conn with your database connection variable

  // Display the results
  if (mysqli_num_rows($result) > 0) {
    echo "<ul>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<li>" . $row['your_column'] . "</li>"; // Replace 'your_column' with the actual column name
    }
    echo "</ul>";
  } else {
    echo "No results found for '" . $searchTerm . "'.";
  }

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// ... (Database connection setup as before) ...

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];
  $searchTerm = htmlspecialchars($searchTerm);

  // Prepare the statement (this is the key for security)
  $stmt = mysqli_prepare($conn, "SELECT * FROM your_table WHERE your_column LIKE '%s%'");  // 's' indicates a string parameter

  if ($stmt) {
    // Bind the parameter
    mysqli_stmt_bind_param($stmt, "s", $searchTerm);  // 's' means string

    // Execute the statement
    mysqli_stmt_execute($stmt);

    // Get the result
    $result = mysqli_stmt_get_result($stmt);

    // Process the results (same as before)
    if ($result) {
      echo "<ul>";
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<li>" . $row['your_column'] . "</li>";
      }
      echo "</ul>";
      mysqli_free_result($result); // Important to free the result set
      mysqli_stmt_close($stmt);
    } else {
      // Handle errors
      echo "Error executing query.";
    }

  } else {
    // Handle errors preparing the statement
    echo "Error preparing statement.";
  }

}
?>


<?php

// Assuming you have a database connection established
// Replace 'your_database_connection' with your actual database connection
// and adjust the query accordingly.

if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'GET') {
  // Check if the search term is provided
  if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input to prevent XSS
    
    // Build your database query based on the search term
    $query = "SELECT * FROM your_table WHERE column1 LIKE '%" . $searchTerm . "%' OR column2 LIKE '%" . $searchTerm . "%'"; 
    // Replace 'your_table' and 'column1', 'column2' with your actual table and column names.
    //  'column1', 'column2' are just examples.  Use the columns that make sense for your search.
    //  The '%' wildcard allows for partial matches.

    // Example:
    // $query = "SELECT * FROM products WHERE product_name LIKE '%" . $searchTerm . "%'";
    
    // You would typically execute the query here using your database connection.
    // Example:
    // $result = mysqli_query($your_database_connection, $query); // Assuming mysqli
    
    // ... (Your code to process the query results) ...
    
    // Display the search term for demonstration purposes:
    echo "<p>Searching for: " . $searchTerm . "</p>";
    
    // Example: Displaying the search results
    // while ($row = mysqli_fetch_assoc($result)) {
    //     echo "<p>" . $row['column1'] . "</p>";
    // }
    
    // After the search, you'll usually reset the search term in your session or other storage.
    unset($searchTerm);  // Optional: Clear the search term from the session.
    
  } else {
    // If no search term is provided, display a default message
    echo "<p>Please enter a search term.</p>";
  }
} else {
  // Handle other request methods (e.g., POST) if needed.  This is a basic GET example.
  echo "<p>Invalid request method.</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search</h1>

    <form method="get" action="">
        <input type="text" name="search" placeholder="Enter search term">
        <button type="submit">Search</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search term from the form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term (Important for security - prevents SQL injection)
$searchTerm = htmlspecialchars(trim($searchTerm));


// --- Example 1: Simple Search Across a Table (e.g., 'products') ---
// This example searches all columns in a table named 'products'

// Check if the search term is empty
if (empty($searchTerm)) {
    // No search term, display all products or a default message
    echo "<p>Enter a search term.</p>";
    // Or, display all products
    // $sql = "SELECT * FROM products";
    // $result = mysqli_query($conn, $sql);
    // if ($result) {
    //     echo "<ul>";
    //     while ($row = mysqli_fetch_assoc($result)) {
    //         echo "<li>" . htmlspecialchars($row['name']) . "</li>"; // Adjust 'name' to the actual column
    //     }
    //     echo "</ul>";
    // } else {
    //     echo "Error querying the database.";
    // }
} else {
    // Perform the search
    $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  // 'LIKE' is used for partial matches
    $result = mysqli_query($conn, $sql);

    if ($result) {
        echo "<ul>";
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<li>" . htmlspecialchars($row['name']) . "</li>"; // Adjust 'name' to the actual column
        }
        echo "</ul>";
    } else {
        echo "<p>No products found matching your search.</p>";
    }
}

// --- Example 2:  Searching a Specific Column (e.g., 'name') ---
// This is generally better for performance, especially with large datasets.

// if (empty($searchTerm)) {
//     echo "<p>Enter a search term.</p>";
// } else {
//     $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
//     $result = mysqli_query($conn, $sql);

//     if ($result) {
//         echo "<ul>";
//         while ($row = mysqli_fetch_assoc($result)) {
//             echo "<li>" . htmlspecialchars($row['name']) . "</li>";
//         }
//         echo "</ul>";
//     } else {
//         echo "<p>No products found matching your search.</p>";
//     }
// }



?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Bar Example</title>
</head>
<body>

    <h1>Search Products</h1>

    <form method="get" action="">  <!-- Form action should be the same as the PHP script's file name (e.g., search_script.php) -->
        <input type="text" name="search" value="<?php echo $searchTerm; ?>">
        <input type="submit" value="Search">
    </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      width: 300px; /* Adjust width as needed */
    }

    input[type="text"] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 3px;
      box-sizing: border-box; /* Important for width calculations */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <?php
  // Example search logic (replace with your database query)
  if (isset($_GET['search']) && !empty($_GET['search'])) {
    $searchTerm = htmlspecialchars($_GET['search']); // Sanitize input

    // Replace this with your actual database query
    $searchResults = array(
      "apple" => "A delicious fruit!",
      "banana" => "A yellow tropical fruit.",
      "orange" => "A juicy citrus fruit.",
      "example" => "This is an example result."
    );

    if (isset($searchResults[$searchTerm])) {
      echo "<p>You searched for: " . $searchTerm . "<br>" . $searchResults[$searchTerm] . "</p>";
    } else {
      echo "<p>No results found for: " . $searchTerm . "</p>";
    }
  }
  ?>

</body>
</html>


<?php
// Assuming you have a database connection established in $conn

if (isset($_GET['search']) && !empty($_GET['search'])) {
  $searchTerm = htmlspecialchars($_GET['search']);

  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = mysqli_query($conn, $sql);

  if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<p>Product: " . $row['name'] . ", Description: " . $row['description'] . "</p>";
    }
    mysqli_free_result($result); // Free the result set
  } else {
    echo "<p>Error executing query.</p>";
  }
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }

    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box; /* Include padding and border in the element's total width and height */
    }

    button {
      padding: 8px 15px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #3e8e41;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults">
    <!-- Results will be displayed here -->
  </div>


  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value.toLowerCase();
      var searchResultsDiv = document.getElementById("searchResults");
      searchResultsDiv.innerHTML = ""; // Clear previous results

      // Replace this with your actual data source (e.g., database query)
      var data = [
        "Apple",
        "Banana",
        "Orange",
        "Grape",
        "Pineapple",
        "Strawberry",
        "Cherry"
      ];

      for (var i = 0; i < data.length; i++) {
        var term = data[i].toLowerCase();
        if (term.indexOf(searchTerm) !== -1) {
          var resultItem = document.createElement("p");
          resultItem.textContent = data[i];
          searchResultsDiv.appendChild(resultItem);
        }
      }
    }
  </script>

</body>
</html>


<?php

// Assuming you have a database connection established and a database table named 'products'
// with a column named 'name' for searching.  Replace these with your actual details.

// Example database connection (replace with your actual credentials)
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Check if the search form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important to prevent SQL injection)
  $searchTerm = $db->real_escape_string($searchTerm);

  // Perform the search in the database
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
  $result = $db->query($sql);

  // Display the search results
  if ($result->num_rows > 0) {
    echo "<h2>Search Results for: " . $searchTerm . "</h2>";
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
      echo "<tr>";
      echo "<td>" . $row["name"] . "</td>";
      // Add other columns from the 'products' table here
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <input type="submit" value="Search">
  </form>

</body>
</html>


<?php

// Define the search term (for demonstration purposes - ideally, this would come from a form)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent XSS vulnerabilities
$searchTerm = htmlspecialchars($searchTerm);

// Handle the search request
if ($searchTerm) {
    // Perform your search logic here. This is just a placeholder.
    // You would likely query a database or search through an array.
    $searchResults = ['apple', 'banana', 'orange', 'grape', 'watermelon'];

    // Filter the results based on the search term
    $filteredResults = array_filter($searchResults, function($item) use ($searchTerm) {
        return stripos($item, $searchTerm) !== false; // case-insensitive search
    });

    // Display the results
    echo '<h2>Search Results for: ' . $searchTerm . '</h2>';
    if (empty($filteredResults)) {
        echo '<p>No results found for: ' . $searchTerm . '</p>';
    } else {
        echo '<ul>';
        foreach ($filteredResults as $result) {
            echo '<li>' . $result . '</li>';
        }
        echo '</ul>';
    }

} else {
    // Display a form to enter the search term
    echo '<form action="" method="get">';
    echo '<input type="text" name="search" value="' . htmlspecialchars($searchTerm) . '" placeholder="Enter search term">';
    echo '<button type="submit">Search</button>';
    echo '</form>';
}
?>


<?php

// Assuming you have a database connection established
// (e.g., mysqli, PDO) - Replace with your actual connection details
// For this example, we'll use a simplified placeholder:
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }


// Function to handle the search
function performSearch($search_term, $table_name, $search_columns = null) {
  // $db is assumed to be your database connection object.

  $sql = "SELECT * FROM " . $table_name . " WHERE ";

  if ($search_columns) {
    $conditions = [];
    foreach ($search_columns as $column) {
      $conditions[] = "`" . $column . "`" . " LIKE '%" . $search_term . "%'";
    }
    $sql .= implode(" OR ", $conditions);
  } else {
    // Search across all columns.  Be cautious about this in a production environment
    // as it can be very slow and vulnerable to SQL injection.
    $columns = array_keys($db->query("SHOW COLUMNS FROM " . $table_name));
    $conditions = [];
    foreach ($columns as $column) {
        $conditions[] = "`" . $column . "`" . " LIKE '%" . $search_term . "%'";
    }
    $sql .= implode(" OR ", $conditions);
  }


  $result = $db->query($sql);

  if ($result->num_rows > 0) {
    return $result; // Return the result set
  } else {
    return false; // No results found
  }
}



// ---  Example Usage  ---

// Placeholder for your database connection
// $db = new mysqli("localhost", "username", "password", "database_name");

// Example table name
$table_name = "products"; // Replace with your actual table name

// Example search term
$search_term = "laptop";

// You can optionally specify the columns to search within
// $search_columns = ["name", "description"];

// Perform the search
$results = performSearch($search_term, $table_name);

// Display the results
if ($results) {
  echo "<form action=\"search.php\" method=\"get\">
        <input type=\"text\" name=\"search\" placeholder=\"Enter search term\" value=\"" . htmlspecialchars($search_term) . "\">
        <input type=\"submit\" value=\"Search\">
      </form>";

  echo "<br><br>Search Results:<br>";
  if ($results->num_rows > 0) {
    while ($row = $results->fetch_assoc()) {
      echo "Product Name: " . htmlspecialchars($row["name"]) . "<br>";
      echo "Description: " . htmlspecialchars($row["description"]) . "<br>";
      echo "<br>";
    }
  } else {
    echo "No results found for '" . htmlspecialchars($search_term) . "'.";
  }

} else {
  echo "Search failed. Check your database connection and table name.";
}

// Close the database connection (important!)
// $db->close();
?>


<?php

// Assuming you have a database connection established (e.g., $conn)

// Get the search query from the user (e.g., from a form submission)
$search_query = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search query (important to prevent SQL injection)
$search_query = htmlspecialchars(trim($search_query));

// You'll need to replace this with your actual database query logic
// This is a basic example assuming you have a 'products' table with a 'name' column
//  that you want to search.  Adjust the query to match your database schema.

// Check if the search query is empty to avoid unnecessary queries
if (empty($search_query)) {
  $results = []; // Or display a message "No search term provided"
} else {
  $sql = "SELECT * FROM products WHERE name LIKE '%" . $search_query . "%'";
  $result = mysqli_query($conn, $sql);

  if ($result) {
    $results = [];
    while ($row = mysqli_fetch_assoc($result)) {
      $results[] = $row;
    }
  } else {
    // Handle the error - important for debugging
    echo "Error: " . mysqli_error($conn);
  }
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET" action="">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo htmlspecialchars($search_query); ?>">
    <button type="submit">Search</button>
  </form>

  <?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Price</th>
          <!-- Add other columns as needed -->
        </tr>
      </thead>
      <tbody>
        <?php foreach ($results as $row) { ?>
          <tr>
            <td><?php echo $row['id']; ?></td>
            <td><?php echo $row['name']; ?></td>
            <td><?php echo $row['price']; ?></td>
            <!-- Add more cells based on your table structure -->
          </tr>
        <?php } ?>
      </tbody>
    </table>
  <?php } else {
    echo "<p>No products found matching your search.</p>";
  } ?>

</body>
</html>


<?php
// ... (Database connection, etc.)

$search_query = isset($_GET['search']) ? $_GET['search'] : '';

// Use prepared statement
$stmt = mysqli_prepare($conn, "SELECT * FROM products WHERE name LIKE ?");

if ($stmt) {
    mysqli_stmt_bind_param($stmt, "s", $search_query); // 's' indicates a string parameter
    mysqli_stmt_execute($stmt);
    $result = mysqli_stmt_get_result($stmt);

    if ($result) {
        $results = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $results[] = $row;
        }
    } else {
        echo "Error: " . mysqli_error($conn);
    }

    mysqli_stmt_close($stmt);
} else {
    echo "Error preparing statement: " . mysqli_error($conn);
}
?>


<?php

// Example PHP code to create a simple search bar

// Handle the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm)); 

  // Perform the search (example: searching through a simple array)
  $searchResults = searchArray($searchResults, $searchTerm);
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term...">
    <button type="submit">Search</button>
  </form>

  <?php
  // Display the search results (if any)
  if (isset($searchResults)) {
    echo "<h2>Search Results:</h2>";
    if (empty($searchResults)) {
      echo "<p>No results found.</p>";
    } else {
      echo "<ul>";
      foreach ($searchResults as $result) {
        echo "<li>" . $result . "</li>";
      }
      echo "</ul>";
    }
  }
  ?>

</body>
</html>


<?php

$searchResults = [
  "Apple iPhone 13",
  "Samsung Galaxy S22",
  "Google Pixel 6",
  "OnePlus 10 Pro",
  "Sony WH-1000XM5 Headphones",
];

// ... (rest of the code from above)
?>


<?php

// Function to handle the search bar
function handleSearch($searchTerm) {
  // Sanitize the search term to prevent XSS attacks.  This is CRUCIAL.
  $searchTerm = htmlspecialchars($searchTerm); 

  // Implement your search logic here.  This is just a basic example.
  // You'll likely want to replace this with a database query or 
  // more sophisticated logic.

  $results = []; // Array to store the search results

  // Basic search - replace this with your actual search implementation
  if ($searchTerm != "") {
    $results = array(
      "message" => "Search results for: " . $searchTerm,
      "items" => array(
        "Item 1" => "Description of Item 1 matching " . $searchTerm,
        "Item 2" => "Description of Item 2 matching " . $searchTerm,
        "Item 3" => "Description of Item 3 matching " . $searchTerm,
      )
    );
  }


  return $results;
}


// Get the search term from the form (assuming it's submitted)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"]; // Assuming the form has a field named "search_term"
  $results = handleSearch($searchTerm);

  // Display the search results
  echo "<h1>Search Results</h1>";
  if (isset($results["message"])) {
    echo "<p>" . $results["message"] . "</p>";
  }

  if (isset($results["items"])) {
    echo "<ul>";
    foreach ($results["items"] as $key => $value) {
      echo "<li>" . $key . ": " . $value . "</li>";
    }
    echo "</ul>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a form for the search bar
?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Search..." value="<?php echo isset($_GET['search_term']) ? htmlspecialchars($_GET['search_term']) : ''; ?>">
    <button type="submit">Search</button>
  </form>

  <?php

  // This part handles the search logic.
  // It's just a basic example. You'll likely want to replace this
  // with your actual database query or search logic.

  if (isset($_GET['search_term']) && !empty($_GET['search_term'])) {
    $search_term = $_GET['search_term'];

    // *** Replace this with your actual search logic ***
    // Example:  If you have a database table called "products" with a "name" column
    // $results = searchDatabase($search_term, "products", "name");

    // Simple example:  Just displaying the search term
    echo "<p>You searched for: " . htmlspecialchars($search_term) . "</p>";
  }
  ?>

</body>
</html>


<?php

// Assuming you're in a web environment (like a web server)
// This example demonstrates a basic search bar with some simple filtering.

// Handle the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

    // Perform your search logic here
    $searchResults = searchDatabase($searchTerm);  // Replace with your actual search function

    // Display the search results
    echo "<form method='post' action=''>";  // Close the form tag if necessary.
    echo "Search: <input type='text' name='search_term' value='" . htmlspecialchars($searchTerm) . "' />";
    echo "<button type='submit'>Search</button>";
    echo "</form>";

    if ($searchTerm) {
        echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
        if (empty($searchResults)) {
            echo "<p>No results found.</p>";
        } else {
            echo "<ul>";
            foreach ($searchResults as $result) {
                echo "<li>" . htmlspecialchars($result) . "</li>";
            }
            echo "</ul>";
        }
    }
} else {
    // If the form is not submitted, display an empty search bar
    echo "<form method='post' action=''>";
    echo "Search: <input type='text' name='search_term' />";
    echo "<button type='submit'>Search</button>";
    echo "</form>";
}

// Example searchDatabase function (replace with your actual implementation)
function searchDatabase($searchTerm) {
    // This is just a placeholder.  You would connect to your database here,
    // build a query, and retrieve the results.  For example:

    $results = [];
    // Example using a dummy array:
    if ($searchTerm == "apple") {
        $results = ["Red Apple", "Green Apple"];
    } elseif ($searchTerm == "banana") {
        $results = ["Cavendish Banana", "Plantain"];
    } else {
        // You'll need to replace this with your database query here.
        // Example using mysqli (assuming you have a database connection)
        // $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";
        // $result = $this->mysqli->query($query);
        // while($row = $result->fetch_assoc()) {
        //     $results[] = $row['name'];
        // }
    }

    return $results;
}

?>


<?php
// Assuming you have a $conn mysqli object
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $searchTerm = isset($_POST["search_term"]) ? trim($_POST["search_term"]) : "";

    $query = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";

    // Example using prepared statements to prevent SQL injection
    // $stmt = $this->mysqli->prepare($query);
    // $stmt->bind_param("s", $searchTerm);  // "s" indicates a string parameter
    // $stmt->execute();
    // $result = $stmt->get_result();


    // ... (rest of the code for displaying results)

}
?>


<?php

// Assuming you have a database connection established (e.g., mysqli)
// Replace 'your_db_connection' with your actual connection variable
// Example: $conn = mysqli_connect("localhost", "username", "password", "database_name");

// Get the search term from the GET request (e.g., if you have a URL like: ?search=keyword)
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term - Important for security!
$searchTerm = htmlspecialchars(trim($searchTerm));

// Database connection (replace with your connection details)
// Example: $conn = mysqli_connect("localhost", "username", "password", "database_name");

// Table name to search in (replace with your actual table name)
$tableName = 'your_table_name';

// Column to search in (replace with the column you want to search)
$searchColumn = 'your_column_name';

// Prepare the SQL query
$query = "SELECT * FROM $tableName WHERE $searchColumn LIKE '%$searchTerm%'";

// Execute the query
// Example using mysqli
// $result = mysqli_query($conn, $query);

// **Important Security Considerations:**

// 1. **Prepared Statements (Strongly Recommended):**  The above code is vulnerable to SQL injection. Always use prepared statements to prevent this.  Prepared statements separate the SQL code from the user-supplied data, preventing malicious code from being executed.  I'll provide a complete example using prepared statements below.

// 2. **Sanitization:**  `htmlspecialchars()` is used to escape characters that could be interpreted as HTML or SQL code.  This is a good practice but doesn't fully protect against all injection attacks.

// 3. **Case Sensitivity:** `LIKE '%$searchTerm%'` is case-insensitive in many databases. If you need case-sensitive searching, use `BINARY LIKE` (MySQL) or equivalent for your database.

// **Example using Prepared Statements (Highly Recommended):**

// Assuming a $conn mysqli connection variable exists.
// If not, you must establish a connection using mysqli_connect().

// Prepare the statement
// $stmt = mysqli_prepare($conn, "SELECT * FROM $tableName WHERE $searchColumn LIKE ?");

// Bind the parameter (the search term)
// mysqli_stmt_bind_param($stmt, "s", $searchTerm);

// Execute the statement
// mysqli_stmt_execute($stmt);

// Get the results
// $result = mysqli_stmt_get_result($stmt); // or mysqli_stmt_use_result($stmt);

// Output the search results
// while ($row = mysqli_fetch_assoc($result)) {
//   echo "ID: " . $row['id'] . "<br>"; // Assuming your table has an 'id' column
//   echo "Name: " . $row['name'] . "<br>";
//   // ... other columns ...
//   echo "<br>";
// }

// Close the result set
// mysqli_free_result($result);

// Close the statement
// mysqli_close($stmt);



// **Complete Example with Prepared Statements and HTML Output:**

?>

<!DOCTYPE html>
<html>
<head>
<title>Search Bar Example</title>
</head>
<body>

<h1>Search Results</h1>

<form method="GET" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <input type="text" name="search" value="<?php echo $searchTerm; ?>" />
  <input type="submit" value="Search" />
</form>

<?php

// Assume a $conn mysqli connection variable exists.
// If not, you must establish a connection using mysqli_connect().

//  Example Connection (replace with your actual details)
// $conn = mysqli_connect("localhost", "username", "password", "database_name");

//  Check if the connection was successful
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// $searchTerm = isset($_GET['search']) ? $_GET['search'] : '';  // Get the search term

// Sanitize the search term - Important for security!
$searchTerm = htmlspecialchars(trim($searchTerm));

// Table name to search in (replace with your actual table name)
$tableName = 'your_table_name';

// Column to search in (replace with the column you want to search)
$searchColumn = 'your_column_name';

// Prepare the SQL query
$query = "SELECT * FROM $tableName WHERE $searchColumn LIKE '%$searchTerm%'";

// Execute the query
// $result = mysqli_query($conn, $query);

// Assume a $conn mysqli connection variable exists.
// If not, you must establish a connection using mysqli_connect().

// Prepare the statement
// $stmt = mysqli_prepare($conn, "SELECT * FROM $tableName WHERE $searchColumn LIKE ?");

// Bind the parameter (the search term)
// mysqli_stmt_bind_param($stmt, "s", $searchTerm);

// Execute the statement
// mysqli_stmt_execute($stmt);

// Get the results
// $result = mysqli_stmt_get_result($stmt); // or mysqli_stmt_use_result($stmt);


// Example with hardcoded data (replace with your table structure)
$data = array(
    array('id' => 1, 'name' => 'Apple', 'description' => 'A delicious fruit'),
    array('id' => 2, 'name' => 'Banana', 'description' => 'A yellow fruit'),
    array('id' => 3, 'name' => 'Orange', 'description' => 'A citrus fruit'),
);

// Output the search results
if ($searchTerm) {
  echo "<h3>Search Results for: " . htmlspecialchars($searchTerm) . "</h3>";
  echo "<ul>";
  foreach ($data as $row) {
    if (strpos(strtolower($row['name']), strtolower($searchTerm)) !== false ||
        strpos(strtolower($row['description']), strtolower($searchTerm)) !== false) {
      echo "<li>ID: " . $row['id'] . ", Name: " . $row['name'] . ", Description: " . $row['description'] . "</li>";
    }
  }
  echo "</ul>";
} else {
  echo "<p>Enter a search term above.</p>";
}



// Close the result set
// mysqli_free_result($result);

// Close the statement
// mysqli_close($stmt);

?>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO) -  Replace this placeholder with your actual connection

// Example using mysqli:
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//   die("Connection failed: " . $conn->connect_error);
// }

// Placeholder connection - Remove this and use your actual connection
$conn = null; // Initialize to null

// Search query
$searchTerm = isset($_GET['search']) ? $_GET['search'] : ''; // Get search term from URL

// Sanitize the search term (IMPORTANT for security)
$searchTerm = htmlspecialchars($searchTerm);

// Build the SQL query
$sql = "SELECT * FROM products WHERE name LIKE '%" . $searchTerm . "%'";  //  Adjust 'products' table name and 'name' column

// Execute the query
$result = $conn->query($sql);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
</head>
<body>

  <h1>Search Products</h1>

  <form method="GET">
    <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>" />
    <button type="submit">Search</button>
  </form>

  <?php
  if ($result->num_rows > 0) {
    echo "<h2>Search Results:</h2>";
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>" . $row['name'] . " - " . $row['description'] . "</li>"; // Adjust column names as needed
    }
    echo "</ul>";
  } else {
    echo "<p>No products found matching your search.</p>";
  }
  ?>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      width: 300px; /* Adjust as needed */
      margin: 0 auto;
      text-align: center;
    }
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      box-sizing: border-box; /* Include padding and border in the element's total width */
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <script>
    document.getElementById('searchInput').addEventListener('keyup', function() {
      // Get the value of the input field
      var searchTerm = document.getElementById('searchInput').value.toLowerCase();

      // Perform your search logic here
      // This is a basic example that just alerts the search term
      alert("Searching for: " + searchTerm);

      // Example of filtering an array (replace with your actual data)
      // var data = ["apple", "banana", "orange", "grape", "avocado"];
      // var filteredData = data.filter(function(item) {
      //   return item.toLowerCase().indexOf(searchTerm) > -1;
      // });
      // console.log(filteredData); // Output to the console
    });
  </script>

</body>
</html>


// Assuming you have an array of strings called $data
var data = ["apple", "banana", "orange", "grape", "avocado"];
var searchTerm = document.getElementById('searchInput').value.toLowerCase();

var filteredData = data.filter(function(item) {
  return item.toLowerCase().indexOf(searchTerm) > -1;
});


<?php

// Configuration
$search_term = ""; // Default search term
$results = [];      // Array to store search results (replace with your data source)

// Function to handle the search
function search($search_term, $data) {
    global $results;

    $results = []; // Clear previous results

    if (empty($search_term)) {
        return $results; // Return empty results if no search term
    }

    $search_term = trim($search_term); // Remove leading/trailing whitespace

    foreach ($data as $item) {
        // Adapt this logic based on your data structure.
        // This example assumes your data is an array of associative arrays:
        // e.g., ['title' => 'Product A', 'description' => '...', 'id' => 123]

        if (
            strpos($item['title'], $search_term) !== false ||  // Check title
            strpos($item['description'], $search_term) !== false // Check description
        ) {
            $results[] = $item;
        }
    }
    return $results;
}


// Example Data (Replace with your actual data source)
$products = [
    ['title' => 'Laptop X1', 'description' => 'Powerful laptop for work and gaming.', 'id' => 1],
    ['title' => 'Wireless Mouse', 'description' => 'Ergonomic wireless mouse.', 'id' => 2],
    ['title' => 'Keyboard Pro', 'description' => 'Mechanical keyboard with RGB lighting.', 'id' => 3],
    ['title' => 'Monitor 27"', 'description' => '27-inch LED monitor for crisp visuals.', 'id' => 4],
    ['title' => 'Headphones Z900', 'description' => 'Noise-cancelling headphones with excellent sound quality.', 'id' => 5]
];


// Handle the search form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $search_term = isset($_POST['search_term']) ? trim($_POST['search_term']) : "";
    search($search_term, $products); // Call the search function
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

<h1>Search Products</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo htmlspecialchars($search_term); ?>">
    <button type="submit">Search</button>
</form>

<?php if (!empty($results)) { ?>
    <h2>Search Results:</h2>
    <ul>
        <?php foreach ($results as $result) { ?>
            <li>ID: <?php echo htmlspecialchars($result['id']); ?> - <?php echo htmlspecialchars($result['title']); ?></li>
        <?php } ?>
    </ul>
<?php } else { ?>
    <p>No results found for "<?php echo htmlspecialchars($search_term); ?>"</p>
<?php } ?>

</body>
</html>


if (
    stripos($item['title'], $search_term) !== false ||
    stripos($item['description'], $search_term) !== false
) {
    $results[] = $item;
}


<?php

// Example: Simple Search Bar

// 1. Get Input from the Form
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = isset($_POST["search_term"]) ? htmlspecialchars($_POST["search_term"]) : ""; // Sanitize input
} else {
  $searchTerm = "";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" value="<?php echo $searchTerm; ?>" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

  <?php
  // Example Search Logic (Replace with your actual search logic)
  if ($searchTerm != "") {
    echo "<h2>Search Results for: " . htmlspecialchars($searchTerm) . "</h2>";
    echo "<p>No results found for: " . htmlspecialchars($searchTerm) . "</p>";

    //  Example:  Dummy Search through an array
    $items = ["apple", "banana", "orange", "grapefruit", "watermelon"];

    if (strpos($searchTerm, "apple") !== false) {
      echo "<p>You might like apples!</p>";
    }

    if (strpos($searchTerm, "banana") !== false) {
      echo "<p>Bananas are a great choice!</p>";
    }

    //  More robust search would use LIKE operator in a database query
  }
?>

</body>
</html>


<?php

// Assuming you're in a web environment where you can handle user input

// 1. Get the search term from the input field
if (isset($_GET['search'])) {
  $searchTerm = $_GET['search'];

  // 2. Sanitize the input (very important!)
  $searchTerm = htmlspecialchars($searchTerm); // Protect against XSS
  $searchTerm = trim($searchTerm); // Remove leading/trailing whitespace

  // 3. Perform your search logic here
  // This is where you'd typically query a database,
  // search a file, or perform another operation based on
  // the search term.

  // Example:  (Illustrative - Replace with your actual search)
  $searchResults = searchDatabase($searchTerm); //Function call to handle your search

  // 4. Display the results
  echo "<form method='get' action=''>"; // Form to allow re-searching
  echo "<input type='text' name='search' value='" . $searchTerm . "' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";


  if (empty($searchResults)) {
    echo "<p>No results found for '" . $searchTerm . "'.</p>";
  } else {
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  }
} else {
  // If no search term is provided, display a default form
  echo "<form method='get' action=''>";
  echo "<input type='text' name='search' value='' placeholder='Search...'>";
  echo "<button type='submit'>Search</button>";
  echo "</form>";
}

// --- Placeholder Function:  Replace with your actual search logic ---
function searchDatabase($term) {
  // This is a placeholder - replace with your real search implementation
  // Example:  Query a database based on the search term
  // You'll likely need to connect to a database (MySQL, PostgreSQL, etc.)
  // and construct a query.

  // For demonstration, return some dummy results
  $results = ["Result 1", "Result 2", "Result 3", "Another result"];
  return $results;
}

?>


<?php

// Assuming you have a form to capture the search term
// This is a basic example, you might want to adapt it to your specific needs.

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (important to prevent XSS vulnerabilities)
  $searchTerm = htmlspecialchars($searchTerm);

  //  You can now use $searchTerm for your search logic

  // Example: Display the search term
  echo "<p>You searched for: " . $searchTerm . "</p>";

  //  Example:  Search through an array (replace with your actual data source)
  $myArray = array(
    "apple", "banana", "orange", "grapefruit", "watermelon"
  );

  $results = array_filter($myArray, function($item) use ($searchTerm) {
    return stripos($item, $searchTerm) !== false; // Case-insensitive search
  });

  if (!empty($results)) {
    echo "<p>Search Results:</p>";
    echo "<ul>";
    foreach ($results as $result) {
      echo "<li>" . $result . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found for: " . $searchTerm . "</p>";
  }

}
?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., using mysqli)
//  $db = new mysqli("localhost", "username", "password", "database_name");
//  if (!$db) {
//    die("Connection failed!");
//  }

// Initialize a variable to hold the search query
$search_query = "";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Sanitize the input to prevent SQL injection
  $search_query = $db->real_escape_string($_POST["search_term"]);

  // Perform the search
  $query = "SELECT * FROM your_table_name WHERE your_column_name LIKE '%" . $search_query . "%'";
  $result = $db->query($query);

  // Display the results
  if ($result->num_rows > 0) {
    echo "<h2>Search Results:</h2>";
    while ($row = $result->fetch_assoc()) {
      echo "<div>";
      // Display the data from your table here.  Example:
      echo "<p>Name: " . htmlspecialchars($row["name"]) . "</p>";
      echo "<p>Description: " . htmlspecialchars($row["description"]) . "</p>";
      echo "</div>";
    }
  } else {
    echo "<p>No results found.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Search Example</title>
</head>
<body>

  <h1>Search Your Data</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Bar Example</title>
  <style>
    .search-container {
      margin-bottom: 10px;
    }
    input[type="text"] {
      padding: 5px;
      border: 1px solid #ccc;
      width: 300px;
      box-sizing: border-box;
    }
    button {
      padding: 5px 10px;
      background-color: #4CAF50; /* Green */
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 5px;
    }
    .results {
      margin-top: 20px;
      border: 1px solid #ccc;
      padding: 10px;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <div id="searchResults" class="results">
    <!-- Search results will be displayed here -->
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;
      var resultsDiv = document.getElementById("searchResults");

      if (searchTerm.trim() === "") {
        resultsDiv.innerHTML = ""; // Clear previous results
        return;
      }

      // *** Replace this with your actual search logic ***
      // This is just a placeholder to demonstrate the search function.
      // Replace this with your database query or other search implementation.
      var results = [
        "Result 1: Example Item 1",
        "Result 2: Example Item 2",
        "Result 3: Example Item 3",
        "Result 4: Another item"
      ];

      //  Display the results
      resultsDiv.innerHTML = "<h3>Search Results:</h3>";
      resultsDiv.innerHTML += results.map(function(result) {
        return "<div>" + result + "</div>";
      }).join("");
    }
  </script>

</body>
</html>


<?php

// Assuming you have a search term variable passed from a form
$searchTerm = isset($_GET['search']) ? $_GET['search'] : '';

// Sanitize the search term to prevent SQL injection and cross-site scripting (XSS)
$searchTerm = htmlspecialchars(trim($searchTerm));

// Example: Search through a simple array of items
$items = [
    'Apple',
    'Banana',
    'Orange',
    'Grapefruit',
    'Strawberry',
];

// Search logic
$searchResults = [];
if ($searchTerm) {
    foreach ($items as $item) {
        if (stripos($item, $searchTerm) !== false) { // Use stripos for case-insensitive search
            $searchResults[] = $item;
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Search Example</title>
</head>
<body>

    <h1>Search Results</h1>

    <form method="get" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
        <input type="text" name="search" placeholder="Enter search term" value="<?php echo $searchTerm; ?>">
        <input type="submit" value="Search">
    </form>

    <?php if (empty($searchResults)): ?>
        <p>No results found for <strong><?php echo htmlspecialchars($searchTerm); ?></strong></p>
    <?php else: ?>
        <ul>
            <?php foreach ($searchResults as $result): ?>
                <li><?php echo htmlspecialchars($result); ?></li>
            <?php endforeach; ?>
        </ul>
    <?php endif; ?>

</body>
</html>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the search term from the form
  $searchTerm = $_POST["search_term"];

  // Sanitize and validate the search term (important for security)
  $searchTerm = htmlspecialchars(trim($searchTerm)); // Prevents XSS, removes whitespace

  //  You can add more validation here, e.g., character limits, allowed characters
  //  if ($searchTerm == "") {
  //    $results = [];  // Empty results if nothing is searched.
  //    echo "<p>Please enter a search term.</p>";
  //    $displayResults = false;
  //  } else {
  //     $displayResults = true;
  //  }



  // Here, you would typically query a database or search through an array of data
  // based on the $searchTerm.
  //  For demonstration, let's create a simple array of data.
  $data = [
    ["id" => 1, "name" => "Apple"],
    ["id" => 2, "name" => "Banana"],
    ["id" => 3, "name" => "Orange"],
    ["id" => 4, "name" => "Grape"],
  ];

  // Search through the data array
  $searchResults = [];
  foreach ($data as $item) {
    if (strpos(strtolower($item["name"]), strtolower($searchTerm)) !== false) {
      $searchResults[] = $item;
    }
  }

  // Display the results
  echo "<h2>Search Results for: " . $searchTerm . "</h2>";
  if (empty($searchResults)) {
    echo "<p>No results found.</p>";
  } else {
    echo "<ul>";
    foreach ($searchResults as $result) {
      echo "<li>ID: " . $result["id"] . ", Name: " . $result["name"] . "</li>";
    }
    echo "</ul>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>PHP Search Bar</title>
</head>
<body>

  <h1>Search</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <input type="text" name="search_term" placeholder="Enter search term">
    <button type="submit">Search</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your credentials)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $searchTerm = $_POST["search_term"];

  // Sanitize the search term (CRUCIAL - use prepared statements instead)
  $searchTerm = $conn->real_escape_string($searchTerm); //minimal sanitization, for demonstration

  // Build the SQL query (USE PREPARED STATEMENTS FOR REAL APPLICATIONS)
  $sql = "SELECT * FROM your_table WHERE name LIKE '%" . $searchTerm . "%'";

  // Execute the query (USE PREPARED STATEMENTS)
  $result = $conn->query($sql);

  // Display the results
  echo "<h2>Search Results for: " . $searchTerm . "</h2>";
  if ($result->num_rows > 0) {
    echo "<ul>";
    while($row = $result->fetch_assoc()) {
      echo "<li>ID: " . $row["id"] . ", Name: " . $row["name"] . "</li>";
    }
    echo "</ul>";
  } else {
    echo "<p>No results found.</p>";
  }

  $conn->close();
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Simple Search Bar</title>
  <style>
    .search-container {
      margin: 20px;
    }
    input[type="text"] {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 300px;
      box-sizing: border-box;
    }
    button {
      padding: 8px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
    <button onclick="search()">Search</button>
  </div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // **Important: Replace this with your actual search logic**
      // This is just a placeholder to demonstrate how you might filter data.
      var data = [
        "Apple", "Banana", "Orange", "Grape", "Strawberry",
        "Kiwi", "Mango", "Pineapple", "Watermelon"
      ];

      var results = [];
      for (var i = 0; i < data.length; i++) {
        if (data[i].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
          results.push(data[i]);
        }
      }

      // Display the results (e.g., in a list)
      var resultsList = document.createElement("ul");
      for (var j = 0; j < results.length; j++) {
        var listItem = document.createElement("li");
        listItem.appendChild(document.createTextNode(results[j]));
        resultsList.appendChild(listItem);
      }

      // You can display the resultsList anywhere on the page (e.g., below the search bar)
      document.getElementById("resultsContainer").innerHTML = resultsList; // Add a resultsContainer element to your HTML
    }
  </script>

  <!-- Add a container for the results -->
  <div id="resultsContainer"></div>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Search Products</title>
  <style> /* ... (same CSS as above) ... */ </style>
</head>
<body>

  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search Products...">
    <button onclick="search()">Search</button>
  </div>

  <div id="resultsContainer"></div>

  <script>
    function search() {
      var searchTerm = document.getElementById("searchInput").value;

      // **Important: Replace this with your actual database connection and query**
      // This is just a placeholder.

      // Example Database Connection (replace with your credentials)
      $servername = "localhost";
      $username = "your_username";
      $password = "your_password";
      $dbname = "your_database";

      // Construct the SQL query (using LIKE for partial matching)
      var query = "SELECT * FROM products WHERE name LIKE '%" + searchTerm + "%'";  // Use LIKE operator

      // Create a MySQLi connection
      $conn = new mysqli($servername, $username, $password, $dbname);

      // Check connection
      if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
      }

      // Execute the query
      $result = $conn->query($query);

      // Display the results
      var resultsList = document.createElement("ul");
      if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
          var listItem = document.createElement("li");
          listItem.appendChild(document.createTextNode(JSON.stringify($row))); // Convert to string for display
          resultsList.appendChild(listItem);
        }
      }

      document.getElementById("resultsContainer").innerHTML = resultsList;

      $conn->close();
    }
  </script>

</body>
</html>

