{"prompt": "Create a user review function using php", "llm_output": "Here is an example of how you can create a simple user review system in PHP:\n\n**Database Schema:**\n\nFirst, let's assume we have a MySQL database with the following schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  username VARCHAR(255),\n  email VARCHAR(255)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating TINYINT(1) CHECK (rating >= 1 AND rating <= 5),\n  review TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n**PHP Code:**\n\nWe'll create a class called `ReviewSystem` that will handle user reviews.\n```php\nclass ReviewSystem {\n  private $db;\n\n  public function __construct() {\n    // Connect to database\n    $this->db = new mysqli('localhost', 'username', 'password', 'database');\n    if ($this->db->connect_error) {\n      die(\"Connection failed: \" . $this->db->connect_error);\n    }\n  }\n\n  /**\n   * Add a new review\n   *\n   * @param int $user_id ID of the user making the review\n   * @param int $product_id ID of the product being reviewed\n   * @param string $review Text of the review\n   * @param int $rating Rating (1-5)\n   */\n  public function addReview($user_id, $product_id, $review, $rating) {\n    // Check if user and product exist in database\n    $result = $this->db->query(\"SELECT * FROM users WHERE id = '$user_id'\");\n    if (!$result || !$result->num_rows) {\n      return false; // User not found\n    }\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if (!$result || !$result->num_rows) {\n      return false; // Product not found\n    }\n\n    // Insert review into database\n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')\";\n    $this->db->query($sql);\n  }\n\n  /**\n   * Get all reviews for a specific user or product\n   *\n   * @param int $user_id ID of the user (optional)\n   * @param int $product_id ID of the product (optional)\n   */\n  public function getReviews($user_id = null, $product_id = null) {\n    if ($user_id && !$product_id) {\n      // Get reviews for specific user\n      $sql = \"SELECT * FROM reviews WHERE user_id = '$user_id'\";\n    } elseif (!$user_id && $product_id) {\n      // Get reviews for specific product\n      $sql = \"SELECT * FROM reviews WHERE product_id = '$product_id'\";\n    } else {\n      // Get all reviews\n      $sql = \"SELECT * FROM reviews\";\n    }\n\n    $result = $this->db->query($sql);\n    if (!$result) {\n      return false; // Error getting reviews\n    }\n    return $result;\n  }\n\n  /**\n   * Get average rating for a specific product\n   *\n   * @param int $product_id ID of the product\n   */\n  public function getAverageRating($product_id) {\n    $sql = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'\";\n    $result = $this->db->query($sql);\n    if (!$result || !$result->num_rows) {\n      return false; // No ratings found\n    }\n    return $result->fetch_assoc()['average_rating'];\n  }\n\n  /**\n   * Get user's reviews\n   *\n   * @param int $user_id ID of the user\n   */\n  public function getUserReviews($user_id) {\n    $sql = \"SELECT * FROM reviews WHERE user_id = '$user_id'\";\n    $result = $this->db->query($sql);\n    if (!$result) {\n      return false; // Error getting reviews\n    }\n    return $result;\n  }\n}\n```\n**Example Usage:**\n\n```php\n$reviewSystem = new ReviewSystem();\n\n// Add a review\n$reviewSystem->addReview(1, 1, 'Great product!', 5);\n\n// Get all reviews for user with ID 1\n$reviews = $reviewSystem->getReviews(1);\nprint_r($reviews);\n\n// Get average rating for product with ID 1\n$averageRating = $reviewSystem->getAverageRating(1);\necho \"Average rating: $averageRating\";\n\n// Get user's reviews\n$userReviews = $reviewSystem->getUserReviews(1);\nprint_r($userReviews);\n```\nThis is a basic example of how you can create a user review system in PHP. Note that this code does not handle errors or edge cases, and you should add additional functionality and security measures as needed for your specific application.", "code_blocks": [null, "```php\nclass ReviewSystem {\n  private $db;\n\n  public function __construct() {\n    // Connect to database\n    $this->db = new mysqli('localhost', 'username', 'password', 'database');\n    if ($this->db->connect_error) {\n      die(\"Connection failed: \" . $this->db->connect_error);\n    }\n  }\n\n  /**\n   * Add a new review\n   *\n   * @param int $user_id ID of the user making the review\n   * @param int $product_id ID of the product being reviewed\n   * @param string $review Text of the review\n   * @param int $rating Rating (1-5)\n   */\n  public function addReview($user_id, $product_id, $review, $rating) {\n    // Check if user and product exist in database\n    $result = $this->db->query(\"SELECT * FROM users WHERE id = '$user_id'\");\n    if (!$result || !$result->num_rows) {\n      return false; // User not found\n    }\n    $result = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\");\n    if (!$result || !$result->num_rows) {\n      return false; // Product not found\n    }\n\n    // Insert review into database\n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')\";\n    $this->db->query($sql);\n  }\n\n  /**\n   * Get all reviews for a specific user or product\n   *\n   * @param int $user_id ID of the user (optional)\n   * @param int $product_id ID of the product (optional)\n   */\n  public function getReviews($user_id = null, $product_id = null) {\n    if ($user_id && !$product_id) {\n      // Get reviews for specific user\n      $sql = \"SELECT * FROM reviews WHERE user_id = '$user_id'\";\n    } elseif (!$user_id && $product_id) {\n      // Get reviews for specific product\n      $sql = \"SELECT * FROM reviews WHERE product_id = '$product_id'\";\n    } else {\n      // Get all reviews\n      $sql = \"SELECT * FROM reviews\";\n    }\n\n    $result = $this->db->query($sql);\n    if (!$result) {\n      return false; // Error getting reviews\n    }\n    return $result;\n  }\n\n  /**\n   * Get average rating for a specific product\n   *\n   * @param int $product_id ID of the product\n   */\n  public function getAverageRating($product_id) {\n    $sql = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'\";\n    $result = $this->db->query($sql);\n    if (!$result || !$result->num_rows) {\n      return false; // No ratings found\n    }\n    return $result->fetch_assoc()['average_rating'];\n  }\n\n  /**\n   * Get user's reviews\n   *\n   * @param int $user_id ID of the user\n   */\n  public function getUserReviews($user_id) {\n    $sql = \"SELECT * FROM reviews WHERE user_id = '$user_id'\";\n    $result = $this->db->query($sql);\n    if (!$result) {\n      return false; // Error getting reviews\n    }\n    return $result;\n  }\n}\n```", "```php\n$reviewSystem = new ReviewSystem();\n\n// Add a review\n$reviewSystem->addReview(1, 1, 'Great product!', 5);\n\n// Get all reviews for user with ID 1\n$reviews = $reviewSystem->getReviews(1);\nprint_r($reviews);\n\n// Get average rating for product with ID 1\n$averageRating = $reviewSystem->getAverageRating(1);\necho \"Average rating: $averageRating\";\n\n// Get user's reviews\n$userReviews = $reviewSystem->getUserReviews(1);\nprint_r($userReviews);\n```"]}
