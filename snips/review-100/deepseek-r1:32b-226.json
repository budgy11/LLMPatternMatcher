{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, so the user wants to create a user review function using PHP. I need to figure out how to approach this.\n\nFirst, I should consider what a review system typically includes. It usually allows users to submit reviews, displays existing ones, calculates an average rating, and maybe handles errors if something goes wrong.\n\nI'll start by outlining the main components. There should be a form for submitting reviews\u2014users need to input their name, email, rating, and comments. Then, I'll need to handle the submission with PHP, insert the data into a database, display the reviews, calculate the average rating, and show any error messages if there are issues.\n\nNext, I'll think about the database structure. A table named 'reviews' seems appropriate. It should have fields like id, user_name, user_email, rating, comments, and submission_date. Using MySQL is a common choice, so I'll use that for the example.\n\nFor the PHP script, I'll need to connect to the database. I'll include placeholders for the host, username, password, and database name, which the user will replace with their actual credentials.\n\nNow, handling form submission: when the form is submitted, I'll check if the POST data is set. Then, I'll validate the inputs\u2014ensuring that name, email, rating, and comments are provided. For the email, using a regex pattern makes sense to validate its format.\n\nIf there are any errors during validation or database insertion, I'll store an error message in a session so it can be displayed on the next page load. This way, users know what went wrong if their submission failed.\n\nDisplaying the reviews involves fetching all entries from the 'reviews' table and looping through them to display each review. I'll format the date using PHP's DateTime class for readability.\n\nCalculating the average rating requires querying the database for the sum of ratings and counting the number of reviews. Then, divide the sum by the count, handling the case where there are no reviews to avoid division by zero.\n\nI should also consider security aspects, like preventing SQL injection. Using mysqli_real_escape_string is a basic step, but for a more robust solution, prepared statements would be better, though I'll stick with escaping for simplicity in this example.\n\nPutting it all together, the PHP script will handle form submission, database operations, error handling, and display of reviews. The HTML part includes the review form and displays any stored errors.\n\nI should note that in a real-world application, using prepared statements would be safer to prevent SQL injection. Also, including CSS can improve the user interface, but I'll keep the example simple without external dependencies.\n\nFinally, I'll provide instructions on how to use the code\u2014setting up the database, replacing placeholders with actual credentials, and testing the form submission.\n</think>\n\nHere's an example of a user review system using PHP. This will include:\n\n1. A function to submit reviews\n2. Display existing reviews\n3. Calculate average rating\n4. Error handling for invalid submissions\n\n```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$database = 'reviews_db';\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $database);\n\n// Create table if not exists\n$sql = \"CREATE TABLE IF NOT EXISTS reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_email VARCHAR(255),\n    rating INT,\n    comments TEXT,\n    submission_date DATETIME\n)\";\n\nmysqli_query($conn, $sql);\n\n// Handle review submission\nif (isset($_POST['submit'])) {\n    // Sanitize input\n    $name = mysqli_real_escape_string($conn, $_POST['name']);\n    $email = mysqli_real_escape_string($conn, $_POST['email']);\n    $rating = intval($_POST['rating']);\n    $comments = mysqli_real_escape_string($conn, $_POST['comments']);\n\n    // Validate input\n    $errors = [];\n    if (empty($name) || empty($email) || empty($rating) || empty($comments)) {\n        $errors[] = \"All fields are required!\";\n    }\n    \n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Please enter a valid email address!\";\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        $errors[] = \"Rating must be between 1 and 5!\";\n    }\n\n    // Display errors or insert into database\n    if (!empty($errors)) {\n        $_SESSION['error'] = implode('<br>', $errors);\n    } else {\n        $submission_date = date('Y-m-d H:i:s');\n        \n        $sql = \"INSERT INTO reviews (user_name, user_email, rating, comments, submission_date)\n                VALUES ('$name', '$email', $rating, '$comments', '$submission_date')\";\n                \n        if (!mysqli_query($conn, $sql)) {\n            $_SESSION['error'] = \"There was an error submitting your review. Please try again!\";\n        }\n    }\n\n    // Redirect to avoid form resubmission\n    header('Location: ' . $_SERVER['PHP_SELF']);\n    exit();\n}\n\n// Get all reviews from database\n$sql = \"SELECT * FROM reviews ORDER BY submission_date DESC\";\n$result = mysqli_query($conn, $sql);\n$reviews = $result->fetch_all(MYSQLI_ASSOC);\n\n// Calculate average rating\n$sql_avg = \"SELECT AVG(rating) as avg_rating FROM reviews\";\n$result_avg = mysqli_query($conn, $sql_avg);\n$avg_rating = $result_avg ? $result_avg->fetch_assoc()['avg_rating'] : 0;\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Review System</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .review-form { margin-bottom: 30px; }\n        .error { color: red; margin-bottom: 10px; }\n        .review { border: 1px solid #ddd; padding: 15px; margin-bottom: 15px; }\n    </style>\n</head>\n<body>\n    <?php if (!empty($_SESSION['error'])) { ?>\n        <div class=\"error\"><?php echo $_SESSION['error']; unset($_SESSION['error']); ?></div>\n    <?php } ?>\n\n    <!-- Review Form -->\n    <h2>Submit Your Review</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\" class=\"review-form\">\n        <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required><br>\n        <select name=\"rating\" required>\n            <option value=\"\">Select Rating</option>\n            <option value=\"1\">1 Star</option>\n            <option value=\"2\">2 Stars</option>\n            <option value=\"3\">3 Stars</option>\n            <option value=\"4\">4 Stars</option>\n            <option value=\"5\">5 Stars</option>\n        </select><br>\n        <textarea name=\"comments\" placeholder=\"Your Review\" required></textarea><br>\n        <input type=\"submit\" name=\"submit\" value=\"Submit Review\">\n    </form>\n\n    <!-- Display Reviews -->\n    <h2>Customer Reviews</h2>\n    <?php if (empty($reviews)) { ?>\n        <p>No reviews available yet!</p>\n    <?php } else { ?>\n        <?php foreach ($reviews as $review) { ?>\n            <div class=\"review\">\n                <h3><?php echo $review['user_name']; ?></h3>\n                <p>Rating: <?php echo str_repeat('\u2605', $review['rating']); ?> (<?php echo $review['rating']; ?>/5)</p>\n                <p><?php echo nl2br($review['comments']); ?></p>\n                <small>Submitted on: <?php \n                    $date = new DateTime($review['submission_date']);\n                    echo $date->format('F j, Y g:i a');\n                ?></small>\n            </div>\n        <?php } ?>\n    <?php } ?>\n\n    <!-- Display Average Rating -->\n    <h3>Average Rating: <?php echo number_format($avg_rating, 1); ?> / 5</h3>\n\n</body>\n</html>\n```\n\nThis code creates a complete review system with the following features:\n\n1. Review submission form\n2. Basic input validation\n3. Error handling and display\n4. Display of all submitted reviews\n5. Average rating calculation\n6. Timestamp for each review\n7. Simple star rating visualization\n\nTo use this code:\n\n1. Set up a database named `reviews_db` with appropriate credentials\n2. Replace the database connection details (`$host`, `$username`, etc.) with your actual database credentials\n3. Save this as an PHP file (e.g., `review.php`)\n4. Run it on a web server\n\nThe system includes:\n- Frontend form for submitting reviews\n- Backend processing of review submissions\n- Display of all reviews in chronological order\n- Error handling and user feedback\n- Basic security measures to prevent SQL injection\n- Simple styling for better presentation\n\nNote: For production use, you should consider adding more security features like prepared statements or parameterized queries to prevent SQL injection. You might also want to add CAPTCHA verification to prevent spam submissions.", "code_blocks": ["```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$database = 'reviews_db';\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $database);\n\n// Create table if not exists\n$sql = \"CREATE TABLE IF NOT EXISTS reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255),\n    user_email VARCHAR(255),\n    rating INT,\n    comments TEXT,\n    submission_date DATETIME\n)\";\n\nmysqli_query($conn, $sql);\n\n// Handle review submission\nif (isset($_POST['submit'])) {\n    // Sanitize input\n    $name = mysqli_real_escape_string($conn, $_POST['name']);\n    $email = mysqli_real_escape_string($conn, $_POST['email']);\n    $rating = intval($_POST['rating']);\n    $comments = mysqli_real_escape_string($conn, $_POST['comments']);\n\n    // Validate input\n    $errors = [];\n    if (empty($name) || empty($email) || empty($rating) || empty($comments)) {\n        $errors[] = \"All fields are required!\";\n    }\n    \n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Please enter a valid email address!\";\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        $errors[] = \"Rating must be between 1 and 5!\";\n    }\n\n    // Display errors or insert into database\n    if (!empty($errors)) {\n        $_SESSION['error'] = implode('<br>', $errors);\n    } else {\n        $submission_date = date('Y-m-d H:i:s');\n        \n        $sql = \"INSERT INTO reviews (user_name, user_email, rating, comments, submission_date)\n                VALUES ('$name', '$email', $rating, '$comments', '$submission_date')\";\n                \n        if (!mysqli_query($conn, $sql)) {\n            $_SESSION['error'] = \"There was an error submitting your review. Please try again!\";\n        }\n    }\n\n    // Redirect to avoid form resubmission\n    header('Location: ' . $_SERVER['PHP_SELF']);\n    exit();\n}\n\n// Get all reviews from database\n$sql = \"SELECT * FROM reviews ORDER BY submission_date DESC\";\n$result = mysqli_query($conn, $sql);\n$reviews = $result->fetch_all(MYSQLI_ASSOC);\n\n// Calculate average rating\n$sql_avg = \"SELECT AVG(rating) as avg_rating FROM reviews\";\n$result_avg = mysqli_query($conn, $sql_avg);\n$avg_rating = $result_avg ? $result_avg->fetch_assoc()['avg_rating'] : 0;\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Review System</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .review-form { margin-bottom: 30px; }\n        .error { color: red; margin-bottom: 10px; }\n        .review { border: 1px solid #ddd; padding: 15px; margin-bottom: 15px; }\n    </style>\n</head>\n<body>\n    <?php if (!empty($_SESSION['error'])) { ?>\n        <div class=\"error\"><?php echo $_SESSION['error']; unset($_SESSION['error']); ?></div>\n    <?php } ?>\n\n    <!-- Review Form -->\n    <h2>Submit Your Review</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\" class=\"review-form\">\n        <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required><br>\n        <select name=\"rating\" required>\n            <option value=\"\">Select Rating</option>\n            <option value=\"1\">1 Star</option>\n            <option value=\"2\">2 Stars</option>\n            <option value=\"3\">3 Stars</option>\n            <option value=\"4\">4 Stars</option>\n            <option value=\"5\">5 Stars</option>\n        </select><br>\n        <textarea name=\"comments\" placeholder=\"Your Review\" required></textarea><br>\n        <input type=\"submit\" name=\"submit\" value=\"Submit Review\">\n    </form>\n\n    <!-- Display Reviews -->\n    <h2>Customer Reviews</h2>\n    <?php if (empty($reviews)) { ?>\n        <p>No reviews available yet!</p>\n    <?php } else { ?>\n        <?php foreach ($reviews as $review) { ?>\n            <div class=\"review\">\n                <h3><?php echo $review['user_name']; ?></h3>\n                <p>Rating: <?php echo str_repeat('\u2605', $review['rating']); ?> (<?php echo $review['rating']; ?>/5)</p>\n                <p><?php echo nl2br($review['comments']); ?></p>\n                <small>Submitted on: <?php \n                    $date = new DateTime($review['submission_date']);\n                    echo $date->format('F j, Y g:i a');\n                ?></small>\n            </div>\n        <?php } ?>\n    <?php } ?>\n\n    <!-- Display Average Rating -->\n    <h3>Average Rating: <?php echo number_format($avg_rating, 1); ?> / 5</h3>\n\n</body>\n</html>\n```"]}
