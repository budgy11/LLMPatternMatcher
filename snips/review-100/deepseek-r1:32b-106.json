{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, the user asked how to create a user review function using PHP. I need to provide a clear and functional example.\n\nFirst, I should outline what such a function would typically include. It needs to handle displaying reviews, adding new ones, editing existing reviews, and deleting them. Also, it's important to manage the stars for each review since that's a common feature in review systems.\n\nI'll start by considering the database structure. Reviews usually have an ID, user ID, product or service ID, rating, comment, and timestamp. So, I'll set up a table like 'reviews' with these fields.\n\nNext, connecting to the database is essential. Using PDO is a good choice because it's secure and supports prepared statements, which help prevent SQL injection attacks. I'll write a function to connect to the database using PDO.\n\nFor displaying reviews, I need a function that fetches all reviews for a specific product or service. This function should also calculate the average rating. I'll join the 'users' table to get the user's name and retrieve the necessary columns. Then, loop through each review to display details like username, rating stars, comment, date, and an edit button if the user is logged in.\n\nAdding a new review requires inserting into the database. The function should check if all required fields are filled and use prepared statements to insert the data safely. After insertion, it should redirect back to the reviews page to show the new review.\n\nEditing a review involves fetching the existing review details and populating a form for the user to make changes. I'll write a function that selects the review by its ID and checks if it exists. If not, return an error message.\n\nUpdating the edited review is similar to adding but uses an UPDATE statement instead. It should validate input and update only specific fields to prevent any unintended data changes.\n\nDeleting a review requires an authenticated user, so I'll include a check for the user's session. The function will use a DELETE statement with a WHERE clause to ensure only the intended review is removed.\n\nDisplaying stars is a helper function that converts the rating number into HTML star elements. This makes it easy to display ratings consistently across the application.\n\nFinally, I'll include notes on how to implement additional functionalities like user authentication, form handling, CSS styling for stars and forms, and protecting against CSRF attacks. These are important considerations to make the system robust and user-friendly.\n\nThroughout this process, I made sure each function is modular, uses secure practices, and handles potential errors gracefully. The code provided is a solid foundation that can be expanded upon based on specific project needs.\n</think>\n\nHere's an example of a user review function using PHP. This includes functions to add, display, edit, and delete reviews:\n\n```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$db_name = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to display all reviews\nfunction displayReviews($product_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r \n                                JOIN users u ON r.user_id = u.id \n                                WHERE product_id = :product_id \n                                ORDER BY review_date DESC\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        // Calculate average rating\n        $average_rating = 0;\n        $total_ratings = count($reviews);\n        \n        foreach ($reviews as $review) {\n            $average_rating += $review['rating'];\n        }\n        \n        if ($total_ratings > 0) {\n            $average_rating /= $total_ratings;\n        } else {\n            $average_rating = 0;\n        }\n        \n        echo \"<div class='average-rating'>\";\n        echo \"Average Rating: \" . number_format($average_rating, 1) . \"/5\";\n        echo \"</div>\";\n        \n        foreach ($reviews as $review) {\n            $stars_html = getStarsHTML($review['rating']);\n            \n            echo \"<div class='review'>\";\n            echo \"<h3>Reviewed by \" . htmlspecialchars($review['username']) . \"</h3>\";\n            echo \"<div class='stars'>$stars_html</div>\";\n            echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n            echo \"<small>Posted on: \" . $review['review_date'] . \"</small><br>\";\n            \n            // Show edit button if user is logged in\n            if (isset($_SESSION['user_id']) && $_SESSION['user_id'] == $review['user_id']) {\n                echo \"<a href='edit_review.php?review_id=\" . $review['id'] . \"' class='edit-btn'>Edit Review</a>\";\n            }\n            \n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to add a new review\nfunction addReview($product_id, $user_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Validate input\n        if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {\n            throw new Exception(\"All fields are required\");\n        }\n        \n        $stmt = $conn->prepare(\"INSERT INTO reviews SET \n                                product_id = :product_id,\n                                user_id = :user_id,\n                                rating = :rating,\n                                comment = :comment,\n                                review_date = NOW()\");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$product_id\");\n            exit();\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Error adding review: \" . $e->getMessage());\n    }\n}\n\n// Function to edit a review\nfunction getReviewById($review_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE id = :review_id\");\n        $stmt->bindParam(':review_id', $review_id);\n        $stmt->execute();\n        \n        if ($stmt->rowCount() == 1) {\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } else {\n            throw new Exception(\"Review not found\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error fetching review: \" . $e->getMessage());\n    }\n}\n\n// Function to update edited review\nfunction updateReview($review_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Validate input\n        if (empty($rating) || empty($comment)) {\n            throw new Exception(\"All fields are required\");\n        }\n        \n        $stmt = $conn->prepare(\"UPDATE reviews SET \n                                rating = :rating,\n                                comment = :comment\n                              WHERE id = :review_id\");\n        \n        $stmt->bindParam(':review_id', $review_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$_GET[product_id]\");\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Error updating review: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($review_id, $user_id) {\n    global $conn;\n    \n    try {\n        // Verify user ownership of the review\n        if ($user_id != $_SESSION['user_id']) {\n            throw new Exception(\"You are not authorized to delete this review\");\n        }\n        \n        $stmt = $conn->prepare(\"DELETE FROM reviews WHERE id = :review_id\");\n        $stmt->bindParam(':review_id', $review_id);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$_GET[product_id]\");\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n// Helper function to display stars\nfunction getStarsHTML($rating) {\n    $stars = '';\n    \n    for ($i = 1; $i <= 5; $i++) {\n        if ($i <= $rating) {\n            $stars .= '<span class=\"star filled\">\u2605</span>';\n        } else {\n            $stars .= '<span class=\"star empty\">\u2606</span>';\n        }\n    }\n    \n    return $stars;\n}\n\n// Close database connection\n$conn = null;\n?>\n```\n\nThis code provides the following functionalities:\n\n1. Displaying all reviews for a product with user information and average rating\n2. Adding new reviews with validation\n3. Editing existing reviews\n4. Deleting reviews (only by the author)\n5. Helper function to display star ratings\n\nTo use this code, you'll need to:\n\n1. Create a database table called `reviews` with columns: id, product_id, user_id, rating, comment, review_date\n2. Create a database table called `users` for storing user information\n3. Set up proper user authentication and authorization\n4. Add appropriate HTML forms for adding/editing reviews\n5. Include CSS styling for the stars and other elements\n\nAdditional considerations:\n\n- Error handling is included, but you should add more robust error messages and logging\n- You'll need to implement a user registration/login system\n- Add CSRF protection for form submissions\n- Implement proper validation and sanitization of input data\n- Add more security measures like SQL injection prevention (though PDO with prepared statements helps)\n- Consider adding review moderation features\n\nRemember to:\n- Protect sensitive information in your database connection settings\n- Use appropriate session management\n- Keep your application secure by following best practices\n- Test thoroughly before deploying to production", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$db_name = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to display all reviews\nfunction displayReviews($product_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r \n                                JOIN users u ON r.user_id = u.id \n                                WHERE product_id = :product_id \n                                ORDER BY review_date DESC\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        // Calculate average rating\n        $average_rating = 0;\n        $total_ratings = count($reviews);\n        \n        foreach ($reviews as $review) {\n            $average_rating += $review['rating'];\n        }\n        \n        if ($total_ratings > 0) {\n            $average_rating /= $total_ratings;\n        } else {\n            $average_rating = 0;\n        }\n        \n        echo \"<div class='average-rating'>\";\n        echo \"Average Rating: \" . number_format($average_rating, 1) . \"/5\";\n        echo \"</div>\";\n        \n        foreach ($reviews as $review) {\n            $stars_html = getStarsHTML($review['rating']);\n            \n            echo \"<div class='review'>\";\n            echo \"<h3>Reviewed by \" . htmlspecialchars($review['username']) . \"</h3>\";\n            echo \"<div class='stars'>$stars_html</div>\";\n            echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n            echo \"<small>Posted on: \" . $review['review_date'] . \"</small><br>\";\n            \n            // Show edit button if user is logged in\n            if (isset($_SESSION['user_id']) && $_SESSION['user_id'] == $review['user_id']) {\n                echo \"<a href='edit_review.php?review_id=\" . $review['id'] . \"' class='edit-btn'>Edit Review</a>\";\n            }\n            \n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to add a new review\nfunction addReview($product_id, $user_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Validate input\n        if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {\n            throw new Exception(\"All fields are required\");\n        }\n        \n        $stmt = $conn->prepare(\"INSERT INTO reviews SET \n                                product_id = :product_id,\n                                user_id = :user_id,\n                                rating = :rating,\n                                comment = :comment,\n                                review_date = NOW()\");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$product_id\");\n            exit();\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Error adding review: \" . $e->getMessage());\n    }\n}\n\n// Function to edit a review\nfunction getReviewById($review_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE id = :review_id\");\n        $stmt->bindParam(':review_id', $review_id);\n        $stmt->execute();\n        \n        if ($stmt->rowCount() == 1) {\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } else {\n            throw new Exception(\"Review not found\");\n        }\n    } catch (PDOException $e) {\n        die(\"Error fetching review: \" . $e->getMessage());\n    }\n}\n\n// Function to update edited review\nfunction updateReview($review_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Validate input\n        if (empty($rating) || empty($comment)) {\n            throw new Exception(\"All fields are required\");\n        }\n        \n        $stmt = $conn->prepare(\"UPDATE reviews SET \n                                rating = :rating,\n                                comment = :comment\n                              WHERE id = :review_id\");\n        \n        $stmt->bindParam(':review_id', $review_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$_GET[product_id]\");\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Error updating review: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($review_id, $user_id) {\n    global $conn;\n    \n    try {\n        // Verify user ownership of the review\n        if ($user_id != $_SESSION['user_id']) {\n            throw new Exception(\"You are not authorized to delete this review\");\n        }\n        \n        $stmt = $conn->prepare(\"DELETE FROM reviews WHERE id = :review_id\");\n        $stmt->bindParam(':review_id', $review_id);\n        \n        if ($stmt->execute()) {\n            header(\"Location: reviews.php?product_id=$_GET[product_id]\");\n            exit();\n        }\n    } catch (PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n// Helper function to display stars\nfunction getStarsHTML($rating) {\n    $stars = '';\n    \n    for ($i = 1; $i <= 5; $i++) {\n        if ($i <= $rating) {\n            $stars .= '<span class=\"star filled\">\u2605</span>';\n        } else {\n            $stars .= '<span class=\"star empty\">\u2606</span>';\n        }\n    }\n    \n    return $stars;\n}\n\n// Close database connection\n$conn = null;\n?>\n```"]}
