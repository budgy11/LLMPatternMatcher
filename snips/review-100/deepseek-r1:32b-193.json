{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should consider what the function needs to do. It should allow users to submit reviews, store them in a database, display them, and calculate an average rating. Also, preventing SQL injection is important, so I'll use prepared statements with mysqli.\n\nI'll start by setting up the database connection. I'll need to include the necessary files or set up the connection within the function. Using constants for the database credentials might be a good idea for security and ease of maintenance.\n\nNext, handling review submissions. The form should have fields for rating (maybe 1-5 stars) and comments. When the form is submitted, I'll validate the input to ensure the rating is an integer within the allowed range and that the comment isn't empty or too long.\n\nStoring the reviews in a database table makes sense. The table should include fields like review_id, user_id (if users are logged in), product_id (assuming this is for a product), rating, comment, and submission date. Using prepared statements will help prevent SQL injection attacks.\n\nDisplaying the reviews is another key part. I'll need to fetch all reviews from the database where product_id matches the current product. Then, loop through each review and display the user's name (or username if logged in), their rating as stars, comment, and submission date. Formatting dates nicely using PHP functions like date() will improve readability.\n\nCalculating the average rating is straightforward with SQL's AVG function. I'll write a query to get the average rating for the specific product_id and display it prominently on the page.\n\nFor styling, I can use CSS to make the reviews look clean. Rating stars can be represented with emojis or icons from a library like Font Awesome. Adding some conditional formatting based on ratings (e.g., different colors for higher or lower ratings) could enhance user experience.\n\nTesting each part is important. I'll test submitting a review, checking if it appears correctly, ensuring the average rating updates, and verifying that all inputs are properly sanitized to prevent any security issues.\n\nI should also think about error handling. If there's an issue with database queries, I need to display meaningful errors or log them for debugging. Handling cases where no reviews exist yet is important too\u2014displaying a message like \"No reviews yet\" instead of leaving the section blank.\n\nPutting it all together, I'll structure the code into functions: one for submitting reviews and another for displaying them. This keeps the code organized and reusable across different parts of the application.\n\nFinally, I'll make sure to include proper security measures, such as checking if the user is authenticated before allowing them to submit a review (if that's a requirement). Also, sanitizing outputs to prevent XSS attacks by using functions like htmlspecialchars() when displaying user-submitted content.\n</think>\n\nHere's an example of a PHP function for handling and displaying user reviews. This code includes submission, storage, and display functionality:\n\n```php\n<?php\n// Database connection configuration\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"review_db\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n\n// Check connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\nfunction submit_review($product_id, $rating, $comment, $conn) {\n    // Sanitize and validate inputs\n    $rating = intval($rating);\n    $comment = htmlspecialchars($comment);\n    \n    // Check if the rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return \"Invalid rating. Please choose a rating from 1 to 5.\";\n    }\n    \n    // Check if comment is not empty and has less than 200 characters\n    if (strlen(trim($comment)) == 0 || strlen($comment) > 200) {\n        return \"Comment must be between 1 and 200 characters long.\";\n    }\n\n    // Prepare and bind the statement to prevent SQL injection\n    $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, rating, comment, submission_date) VALUES (?, ?, ?, NOW())\");\n    $stmt->bind_param(\"iis\", $product_id, $rating, $comment);\n\n    if ($stmt->execute()) {\n        return \"Review submitted successfully!\";\n    } else {\n        return \"Error: \" . $stmt->error;\n    }\n\n    // Close the statement\n    $stmt->close();\n}\n\nfunction display_reviews($product_id, $conn) {\n    // Get all reviews for the specified product\n    $query = \"SELECT rating, comment, submission_date FROM reviews WHERE product_id = ?\";\n    \n    try {\n        $stmt = $conn->prepare($query);\n        $stmt->bind_param(\"i\", $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            echo \"<div class='reviews'>\";\n            \n            // Calculate average rating\n            $avg_query = \"SELECT AVG(rating) as avg_rating FROM reviews WHERE product_id = ?\";\n            $avg_stmt = $conn->prepare($avg_query);\n            $avg_stmt->bind_param(\"i\", $product_id);\n            $avg_stmt->execute();\n            $avg_result = $avg_stmt->get_result();\n            $row = $avg_result->fetch_assoc();\n            \n            echo \"<div class='average-rating'>\";\n                echo \"Average Rating: <span>\" . number_format($row['avg_rating'], 1) . \"</span>\";\n            echo \"</div>\";\n\n            // Display each review\n            while ($review = $result->fetch_assoc()) {\n                echo \"<div class='review'>\";\n                    echo \"<div class='rating'>Rating: \";\n                    for ($i = 0; $i < $review['rating']; $i++) {\n                        echo \"\u2605\";\n                    }\n                    echo \"</div>\";\n                    echo \"<div class='comment'>\" . $review['comment'] . \"</div>\";\n                    echo \"<div class='date'>\" . date(\"j M Y\", strtotime($review['submission_date'])) . \"</div>\";\n                echo \"</div>\";\n            }\n\n            echo \"</div>\";\n        } else {\n            echo \"No reviews yet.\";\n        }\n    } catch (mysqli_sql_exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['submit_review'])) {\n        // Sanitize user inputs\n        $product_id = intval($_POST['product_id']);\n        $rating = $_POST['rating'];\n        $comment = $_POST['comment'];\n\n        // Call submit_review function\n        $result = submit_review($product_id, $rating, $comment, $conn);\n        echo $result;\n    }\n}\n\n// Display reviews for product with ID 1\ndisplay_reviews(1, $conn);\n\n// Close the database connection\nmysqli_close($conn);\n?>\n```\n\nThis code includes the following features:\n\n1. **Database Connection**: Establishes a secure connection to the MySQL database.\n\n2. `submit_review()` Function:\n   - Validates and sanitizes user inputs.\n   - Checks for valid rating (1-5).\n   - Ensures comment is within acceptable length.\n   - Uses prepared statements to prevent SQL injection.\n   - Stores review data in the database along with submission date.\n\n3. `display_reviews()` Function:\n   - Retrieves reviews from the database for a specific product.\n   - Displays each review with rating, comment, and submission date.\n   - Calculates and displays average rating.\n   - Uses proper error handling and exception catching.\n\n4. **Security Measures**:\n   - Prepared statements to prevent SQL injection.\n   - `htmlspecialchars()` function to sanitize output.\n   - Input validation for ratings and comments.\n\n5. **Styling**: You can add CSS styles to make the reviews look better:\n\n```css\n.reviews {\n    max-width: 800px;\n    margin: 20px auto;\n    padding: 20px;\n}\n\n.review {\n    border-bottom: 1px solid #ddd;\n    padding: 15px 0;\n}\n\n.rating {\n    font-size: 1.2em;\n    color: #ff6b35;\n}\n\n.comment {\n    margin-top: 10px;\n    line-height: 1.4;\n}\n\n.date {\n    font-size: 0.9em;\n    color: #666;\n    margin-top: 10px;\n}\n\n.average-rating {\n    font-weight: bold;\n    margin-bottom: 20px;\n}\n```\n\nTo use this code:\n\n1. Replace the database connection details with your own.\n2. Create a table named `reviews` in your database with columns:\n   - review_id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - product_id (INT)\n   - rating (INT)\n   - comment (TEXT)\n   - submission_date (DATETIME)\n\n3. Add a form for submitting reviews:\n\n```html\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    \n    <div class=\"rating-stars\">\n        <label>Rating:</label>\n        <select name=\"rating\">\n            <option value=\"\">Select Rating</option>\n            <option value=\"5\">\u2605 \u2605 \u2605 \u2605 \u2605</option>\n            <option value=\"4\">\u2605 \u2605 \u2605 \u2605</option>\n            <option value=\"3\">\u2605 \u2605 \u2605</option>\n            <option value=\"2\">\u2605 \u2605</option>\n            <option value=\"1\">\u2605</option>\n        </select>\n    </div>\n\n    <div class=\"comment-box\">\n        <label for=\"comment\">Comment:</label>\n        <textarea id=\"comment\" name=\"comment\" rows=\"4\"></textarea>\n    </div>\n\n    <button type=\"submit\" name=\"submit_review\">Submit Review</button>\n</form>\n```\n\nThis code provides a basic implementation that you can customize further based on your needs. You may want to add user authentication, more error handling, or additional fields depending on your requirements.", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"review_db\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n\n// Check connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\nfunction submit_review($product_id, $rating, $comment, $conn) {\n    // Sanitize and validate inputs\n    $rating = intval($rating);\n    $comment = htmlspecialchars($comment);\n    \n    // Check if the rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return \"Invalid rating. Please choose a rating from 1 to 5.\";\n    }\n    \n    // Check if comment is not empty and has less than 200 characters\n    if (strlen(trim($comment)) == 0 || strlen($comment) > 200) {\n        return \"Comment must be between 1 and 200 characters long.\";\n    }\n\n    // Prepare and bind the statement to prevent SQL injection\n    $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, rating, comment, submission_date) VALUES (?, ?, ?, NOW())\");\n    $stmt->bind_param(\"iis\", $product_id, $rating, $comment);\n\n    if ($stmt->execute()) {\n        return \"Review submitted successfully!\";\n    } else {\n        return \"Error: \" . $stmt->error;\n    }\n\n    // Close the statement\n    $stmt->close();\n}\n\nfunction display_reviews($product_id, $conn) {\n    // Get all reviews for the specified product\n    $query = \"SELECT rating, comment, submission_date FROM reviews WHERE product_id = ?\";\n    \n    try {\n        $stmt = $conn->prepare($query);\n        $stmt->bind_param(\"i\", $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            echo \"<div class='reviews'>\";\n            \n            // Calculate average rating\n            $avg_query = \"SELECT AVG(rating) as avg_rating FROM reviews WHERE product_id = ?\";\n            $avg_stmt = $conn->prepare($avg_query);\n            $avg_stmt->bind_param(\"i\", $product_id);\n            $avg_stmt->execute();\n            $avg_result = $avg_stmt->get_result();\n            $row = $avg_result->fetch_assoc();\n            \n            echo \"<div class='average-rating'>\";\n                echo \"Average Rating: <span>\" . number_format($row['avg_rating'], 1) . \"</span>\";\n            echo \"</div>\";\n\n            // Display each review\n            while ($review = $result->fetch_assoc()) {\n                echo \"<div class='review'>\";\n                    echo \"<div class='rating'>Rating: \";\n                    for ($i = 0; $i < $review['rating']; $i++) {\n                        echo \"\u2605\";\n                    }\n                    echo \"</div>\";\n                    echo \"<div class='comment'>\" . $review['comment'] . \"</div>\";\n                    echo \"<div class='date'>\" . date(\"j M Y\", strtotime($review['submission_date'])) . \"</div>\";\n                echo \"</div>\";\n            }\n\n            echo \"</div>\";\n        } else {\n            echo \"No reviews yet.\";\n        }\n    } catch (mysqli_sql_exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['submit_review'])) {\n        // Sanitize user inputs\n        $product_id = intval($_POST['product_id']);\n        $rating = $_POST['rating'];\n        $comment = $_POST['comment'];\n\n        // Call submit_review function\n        $result = submit_review($product_id, $rating, $comment, $conn);\n        echo $result;\n    }\n}\n\n// Display reviews for product with ID 1\ndisplay_reviews(1, $conn);\n\n// Close the database connection\nmysqli_close($conn);\n?>\n```", null, null]}
