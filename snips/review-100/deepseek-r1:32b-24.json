{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, the user wants to create a PHP function for handling user reviews. Let me break down what I need to do.\n\nFirst, I'll outline the main functionalities required. The function should allow users to submit reviews, display them, calculate an average rating, and let other users vote on these reviews. Plus, it needs to handle errors gracefully and be secure against SQL injection.\n\nI'll start by considering the database setup. I need two tables: one for the reviews themselves, which includes fields like review ID, user ID, product ID, rating, comment, timestamp, and status. Another table will track votes on each review, so users can upvote or downvote.\n\nNext, I'll think about how to structure the function. It should handle different actions based on what's requested\u2014submitting a review, fetching reviews for display, voting on a review, getting the average rating, or handling errors. Using a switch-case statement makes sense here because it allows me to neatly organize each action.\n\nFor submitting a review, I'll need to collect user input, validate it to ensure all required fields are present and within acceptable ranges (like ratings between 1 and 5), then insert this into the reviews table. Sanitizing inputs is crucial to prevent SQL injection, so using mysqli_real_escape_string will help there.\n\nWhen displaying reviews, I should fetch them from the database, maybe order them by submission time or votes. Each review should display the user's name, their rating as stars, their comment, and some engagement buttons for voting. Including pagination would be good to prevent overwhelming users with too many reviews at once, but that might be beyond the initial scope.\n\nThe voting mechanism requires checking if a user has already voted on a specific review. If they have, I should inform them they've already voted. Otherwise, update both the votes table and increment/decrement the vote count for that review. This ensures each vote is recorded accurately without duplication.\n\nCalculating the average rating involves querying the database to get the total sum of ratings divided by the number of reviews for a particular product. This will give a quick overview of how the product is rated overall.\n\nI also need to handle errors. If any part of the process fails\u2014like missing inputs, invalid data types, or database connection issues\u2014the function should return an error message. Using try-catch blocks can help manage exceptions and provide meaningful feedback.\n\nSecurity is a priority, so using prepared statements with mysqli would be better than regular queries, but since I'm using mysqli_real_escape_string, it's still secure against basic injection attempts. However, switching to prepared statements might offer even more protection.\n\nI should also consider user sessions or authentication to track who has voted, preventing multiple votes from the same user. But for simplicity, maybe just tracking by IP address could work as a starting point, though that's not foolproof.\n\nThinking about the output, when displaying reviews, each review entry should be wrapped in HTML elements like divs and paragraphs. Ratings can be shown using star icons, which might require CSS styling to make them visually appealing.\n\nTesting each part step by step is important. I'll need to test submitting a review, ensuring it's stored correctly, then fetching and displaying it. Testing the voting system to make sure votes are recorded and reflected accurately is also crucial. Checking for error conditions will help ensure the function handles unexpected cases without crashing.\n\nFinally, I should document the function thoroughly so that anyone using it understands how each parameter works and what actions they can trigger. This includes explaining the database structure, required inputs, possible outputs, and any dependencies or setup steps needed.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'reviews_db';\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction user_review($action, $product_id = 0, $user_id = 0, $rating = 0, $comment = '') {\n    global $conn;\n\n    try {\n        switch ($action) {\n            // Submit a new review\n            case 'submit':\n                if (empty($product_id) || empty($user_id) || empty($rating)) {\n                    throw new Exception(\"Missing required parameters\");\n                }\n\n                // Validate rating between 1 and 5 stars\n                if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n                    throw new Exception(\"Rating must be between 1 and 5\");\n                }\n\n                // Sanitize input\n                $product_id = (int)$conn->real_escape_string($product_id);\n                $user_id = (int)$conn->real_escape_string($user_id);\n                $rating = (int)$conn->real_escape_string($rating);\n                $comment = $conn->real_escape_string($comment);\n\n                // Insert review into database\n                $sql = \"INSERT INTO reviews (product_id, user_id, rating, comment, created_at) \n                        VALUES ($product_id, $user_id, $rating, '$comment', NOW())\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error submitting review: \" . $conn->error);\n                }\n\n                return \"Review submitted successfully!\";\n                break;\n\n            // Get all reviews for a product\n            case 'get_reviews':\n                if (empty($product_id)) {\n                    throw new Exception(\"Product ID is required\");\n                }\n\n                $sql = \"SELECT * FROM reviews \n                        WHERE product_id = $product_id \n                        ORDER BY created_at DESC\";\n                \n                $result = $conn->query($sql);\n\n                if (!$result) {\n                    throw new Exception(\"Error fetching reviews: \" . $conn->error);\n                }\n\n                // Return reviews as an array\n                $reviews = array();\n                while ($row = $result->fetch_assoc()) {\n                    $reviews[] = $row;\n                }\n\n                return $reviews;\n                break;\n\n            // Get average rating for a product\n            case 'get_average_rating':\n                if (empty($product_id)) {\n                    throw new Exception(\"Product ID is required\");\n                }\n\n                $sql = \"SELECT AVG(rating) as average FROM reviews WHERE product_id = $product_id\";\n                \n                $result = $conn->query($sql);\n\n                if (!$result) {\n                    throw new Exception(\"Error calculating average rating: \" . $conn->error);\n                }\n\n                $row = $result->fetch_assoc();\n                return round($row['average'], 1); // Round to one decimal place\n                break;\n\n            // Submit a vote for a review\n            case 'vote':\n                if (empty($review_id) || empty($user_id) || empty($vote)) {\n                    throw new Exception(\"Missing required parameters\");\n                }\n\n                $vote = intval($vote);\n\n                // Check if user has already voted on this review\n                $sql = \"SELECT * FROM votes WHERE review_id = $review_id AND user_id = $user_id\";\n                \n                $result = $conn->query($sql);\n                \n                if ($result->num_rows > 0) {\n                    throw new Exception(\"You have already voted for this review\");\n                }\n\n                // Insert vote into database\n                $sql = \"INSERT INTO votes (review_id, user_id, vote) \n                        VALUES ($review_id, $user_id, $vote)\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error submitting vote: \" . $conn->error);\n                }\n\n                // Update review vote count\n                $vote_change = ($vote == 1) ? 'votes_up' : 'votes_down';\n                $sql = \"UPDATE reviews SET $vote_change = $vote_change + 1 WHERE id = $review_id\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error updating vote count: \" . $conn->error);\n                }\n\n                return \"Vote submitted successfully!\";\n                break;\n\n            default:\n                throw new Exception(\"Invalid action\");\n        }\n    } catch (Exception $e) {\n        return array('error' => $e->getMessage());\n    }\n}\n\n// Example usage:\n\n// Submit a review\n$submit_review = user_review(\n    'submit',\n    product_id: 1,\n    user_id: 1,\n    rating: 4,\n    comment: \"Great product, highly recommend!\"\n);\n\n// Get all reviews for product ID 1\n$get_reviews = user_review('get_reviews', product_id: 1);\n\n// Get average rating for product ID 1\n$average_rating = user_review('get_average_rating', product_id: 1);\n\n// Submit a vote (1 = upvote, -1 = downvote)\nsubmit_vote = user_review(\n    'vote',\n    review_id: 1,\n    user_id: 1,\n    vote: 1\n);\n\n?>\n```\n\nThis PHP function provides several features:\n\n1. Submitting new reviews with product ID, user ID, rating (1-5 stars), and comment.\n\n2. Retrieving all reviews for a specific product.\n\n3. Calculating the average rating for a product.\n\n4. Allowing users to vote on reviews (upvote/downvote).\n\nThe function uses a database connection and requires two tables:\n\n```sql\n-- Reviews table\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    user_id INT NOT NULL,\n    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),\n    comment TEXT NOT NULL,\n    votes_up INT DEFAULT 0,\n    votes_down INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Votes table to track individual votes\nCREATE TABLE votes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    review_id INT NOT NULL,\n    user_id INT NOT NULL,\n    vote TINYINT NOT NULL CHECK (vote IN (-1, 1)),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\nKey features of this implementation:\n\n1. Error handling with try-catch blocks.\n\n2. Input validation and sanitization.\n\n3. Prevention of duplicate votes using the votes table.\n\n4. Rounded average ratings to one decimal place.\n\n5. Return structured error messages when something goes wrong.\n\n6. Secure database operations using mysqli_real_escape_string.\n\nTo use this function:\n\n1. Replace the database connection details with your actual database information.\n\n2. Create the required database tables if they don't exist.\n\n3. Call the appropriate methods based on your needs.\n\n4. Handle the returned data in your application (success messages, review lists, error messages, etc.).\n\nNote: In a real-world application, you would probably want to add:\n\n- User authentication/authorization\n- More comprehensive validation\n- CSRF protection for forms\n- Pagination for large numbers of reviews\n- Rate limiting\n- Moderation features\n- Email notifications for new reviews/votes\n- IP tracking for anonymous voting\n\nYou might also want to consider using prepared statements instead of direct SQL queries for better security.", "code_blocks": ["```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'reviews_db';\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction user_review($action, $product_id = 0, $user_id = 0, $rating = 0, $comment = '') {\n    global $conn;\n\n    try {\n        switch ($action) {\n            // Submit a new review\n            case 'submit':\n                if (empty($product_id) || empty($user_id) || empty($rating)) {\n                    throw new Exception(\"Missing required parameters\");\n                }\n\n                // Validate rating between 1 and 5 stars\n                if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n                    throw new Exception(\"Rating must be between 1 and 5\");\n                }\n\n                // Sanitize input\n                $product_id = (int)$conn->real_escape_string($product_id);\n                $user_id = (int)$conn->real_escape_string($user_id);\n                $rating = (int)$conn->real_escape_string($rating);\n                $comment = $conn->real_escape_string($comment);\n\n                // Insert review into database\n                $sql = \"INSERT INTO reviews (product_id, user_id, rating, comment, created_at) \n                        VALUES ($product_id, $user_id, $rating, '$comment', NOW())\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error submitting review: \" . $conn->error);\n                }\n\n                return \"Review submitted successfully!\";\n                break;\n\n            // Get all reviews for a product\n            case 'get_reviews':\n                if (empty($product_id)) {\n                    throw new Exception(\"Product ID is required\");\n                }\n\n                $sql = \"SELECT * FROM reviews \n                        WHERE product_id = $product_id \n                        ORDER BY created_at DESC\";\n                \n                $result = $conn->query($sql);\n\n                if (!$result) {\n                    throw new Exception(\"Error fetching reviews: \" . $conn->error);\n                }\n\n                // Return reviews as an array\n                $reviews = array();\n                while ($row = $result->fetch_assoc()) {\n                    $reviews[] = $row;\n                }\n\n                return $reviews;\n                break;\n\n            // Get average rating for a product\n            case 'get_average_rating':\n                if (empty($product_id)) {\n                    throw new Exception(\"Product ID is required\");\n                }\n\n                $sql = \"SELECT AVG(rating) as average FROM reviews WHERE product_id = $product_id\";\n                \n                $result = $conn->query($sql);\n\n                if (!$result) {\n                    throw new Exception(\"Error calculating average rating: \" . $conn->error);\n                }\n\n                $row = $result->fetch_assoc();\n                return round($row['average'], 1); // Round to one decimal place\n                break;\n\n            // Submit a vote for a review\n            case 'vote':\n                if (empty($review_id) || empty($user_id) || empty($vote)) {\n                    throw new Exception(\"Missing required parameters\");\n                }\n\n                $vote = intval($vote);\n\n                // Check if user has already voted on this review\n                $sql = \"SELECT * FROM votes WHERE review_id = $review_id AND user_id = $user_id\";\n                \n                $result = $conn->query($sql);\n                \n                if ($result->num_rows > 0) {\n                    throw new Exception(\"You have already voted for this review\");\n                }\n\n                // Insert vote into database\n                $sql = \"INSERT INTO votes (review_id, user_id, vote) \n                        VALUES ($review_id, $user_id, $vote)\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error submitting vote: \" . $conn->error);\n                }\n\n                // Update review vote count\n                $vote_change = ($vote == 1) ? 'votes_up' : 'votes_down';\n                $sql = \"UPDATE reviews SET $vote_change = $vote_change + 1 WHERE id = $review_id\";\n                \n                if (!$conn->query($sql)) {\n                    throw new Exception(\"Error updating vote count: \" . $conn->error);\n                }\n\n                return \"Vote submitted successfully!\";\n                break;\n\n            default:\n                throw new Exception(\"Invalid action\");\n        }\n    } catch (Exception $e) {\n        return array('error' => $e->getMessage());\n    }\n}\n\n// Example usage:\n\n// Submit a review\n$submit_review = user_review(\n    'submit',\n    product_id: 1,\n    user_id: 1,\n    rating: 4,\n    comment: \"Great product, highly recommend!\"\n);\n\n// Get all reviews for product ID 1\n$get_reviews = user_review('get_reviews', product_id: 1);\n\n// Get average rating for product ID 1\n$average_rating = user_review('get_average_rating', product_id: 1);\n\n// Submit a vote (1 = upvote, -1 = downvote)\nsubmit_vote = user_review(\n    'vote',\n    review_id: 1,\n    user_id: 1,\n    vote: 1\n);\n\n?>\n```", null]}
