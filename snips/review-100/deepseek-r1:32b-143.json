{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to help the user create a PHP function for handling user reviews. Let me break down what they might need.\n\nFirst, I should figure out the purpose of the function. It's about processing user reviews, so it probably involves collecting data from a form submission. The function needs to handle both adding new reviews and editing existing ones.\n\nI'll start by checking if the form has been submitted. That means looking for a POST request. If it's not set, maybe the function can return early or do something else, but in this case, I think we just proceed normally.\n\nNext, I need to collect all the necessary data from the form fields. This includes the review text, rating, and reviewer name. Sanitizing these inputs is crucial to prevent SQL injection and other security issues. Using htmlspecialchars can help with that.\n\nThen, determine if it's an edit or a new submission. If there's an 'id' in the POST data, we're editing an existing review; otherwise, we're adding a new one. For editing, I need to update the specific review using its ID. For new submissions, insert a new record into the database.\n\nNow, connecting to the database is essential. I'll use mysqli_connect with the appropriate credentials. Error handling here is important\u2014if the connection fails, the function should exit and log the error.\n\nAfter processing the data, execute the SQL query. Use prepared statements or parameterized queries to avoid SQL injection. In this example, since we're using mysqli, I'll construct the query string directly but ensure that user inputs are properly escaped.\n\nOnce the query is executed, check for any errors. If there's an error, return a message indicating failure; otherwise, return success along with the new or updated review data.\n\nI should also consider returning JSON responses to make it easy for the frontend to handle the result. This includes status codes and messages for success or failure.\n\nFinally, I'll outline some considerations like database configuration, form setup, and error logging that the user needs to implement separately.\n</think>\n\nHere's a PHP function to handle user reviews:\n\n```php\n<?php\nfunction process_review($connection) {\n    // Check if form is submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        $review_id = isset($_POST['review_id']) ? $_POST['review_id'] : '';\n        $review_text = htmlspecialchars(trim($_POST['review_text']));\n        $rating = intval($_POST['rating']);\n        $reviewer_name = htmlspecialchars(trim($_POST['reviewer_name']));\n\n        // Determine if we're adding a new review or editing an existing one\n        if ($review_id == '') {\n            // Insert new review\n            $sql = \"INSERT INTO reviews (review_text, rating, reviewer_name) \n                    VALUES ('$review_text', '$rating', '$reviewer_name')\";\n        } else {\n            // Update existing review\n            $sql = \"UPDATE reviews SET review_text='$review_text', rating='$rating', reviewer_name='$reviewer_name' \n                    WHERE id='$review_id'\";\n        }\n\n        // Execute query\n        if ($connection->query($sql) === TRUE) {\n            $response = array(\n                'status' => 'success',\n                'message' => 'Review processed successfully!'\n            );\n            if ($review_id == '') {\n                // Get the last inserted ID for new reviews\n                $last_id = $connection->insert_id;\n                $response['review_id'] = $last_id;\n            } else {\n                $response['review_id'] = $review_id;\n            }\n            return json_encode($response);\n        } else {\n            return json_encode(array(\n                'status' => 'error',\n                'message' => 'Error processing review: ' . $connection->error\n            ));\n        }\n    } else {\n        // Return error if form not submitted\n        return json_encode(array(\n            'status' => 'error',\n            'message' => 'No review data submitted.'\n        ));\n    }\n}\n\n// Example usage:\n// 1. Connect to database\n$connection = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n\n// Check connection\nif ($connection->connect_error) {\n    die(\"Connection failed: \" . $connection->connect_error);\n}\n\n// 2. Process review\n$result = process_review($connection);\n\n// 3. Output result\necho $result;\n\n// Close connection\n$connection->close();\n?>\n```\n\nThis function handles both adding new reviews and editing existing ones. Here's what it does:\n\n1. Checks if the form has been submitted via POST request\n2. Sanitizes input data using htmlspecialchars() and intval()\n3. Determines if we're adding a new review or updating an existing one based on the presence of a review_id\n4. Connects to the database\n5. Executes either an INSERT (new review) or UPDATE (edit review) SQL query\n6. Returns a JSON response indicating success or failure\n\nTo use this function:\n\n1. Replace the database connection details (username, password, database)\n2. Create a corresponding HTML form with fields for review_text, rating, and reviewer_name\n3. If editing an existing review, include a hidden input field with the review_id\n\nConsiderations:\n- Add proper error handling and validation for production use\n- Use prepared statements or parameterized queries to prevent SQL injection\n- Implement CSRF protection in production environments\n- Sanitize and validate all user inputs\n- Add proper database connection error handling\n\nYou'll need to create a reviews table in your database with columns: id, review_text, rating, reviewer_name", "code_blocks": ["```php\n<?php\nfunction process_review($connection) {\n    // Check if form is submitted\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        $review_id = isset($_POST['review_id']) ? $_POST['review_id'] : '';\n        $review_text = htmlspecialchars(trim($_POST['review_text']));\n        $rating = intval($_POST['rating']);\n        $reviewer_name = htmlspecialchars(trim($_POST['reviewer_name']));\n\n        // Determine if we're adding a new review or editing an existing one\n        if ($review_id == '') {\n            // Insert new review\n            $sql = \"INSERT INTO reviews (review_text, rating, reviewer_name) \n                    VALUES ('$review_text', '$rating', '$reviewer_name')\";\n        } else {\n            // Update existing review\n            $sql = \"UPDATE reviews SET review_text='$review_text', rating='$rating', reviewer_name='$reviewer_name' \n                    WHERE id='$review_id'\";\n        }\n\n        // Execute query\n        if ($connection->query($sql) === TRUE) {\n            $response = array(\n                'status' => 'success',\n                'message' => 'Review processed successfully!'\n            );\n            if ($review_id == '') {\n                // Get the last inserted ID for new reviews\n                $last_id = $connection->insert_id;\n                $response['review_id'] = $last_id;\n            } else {\n                $response['review_id'] = $review_id;\n            }\n            return json_encode($response);\n        } else {\n            return json_encode(array(\n                'status' => 'error',\n                'message' => 'Error processing review: ' . $connection->error\n            ));\n        }\n    } else {\n        // Return error if form not submitted\n        return json_encode(array(\n            'status' => 'error',\n            'message' => 'No review data submitted.'\n        ));\n    }\n}\n\n// Example usage:\n// 1. Connect to database\n$connection = new mysqli(\"localhost\", \"username\", \"password\", \"database\");\n\n// Check connection\nif ($connection->connect_error) {\n    die(\"Connection failed: \" . $connection->connect_error);\n}\n\n// 2. Process review\n$result = process_review($connection);\n\n// 3. Output result\necho $result;\n\n// Close connection\n$connection->close();\n?>\n```"]}
