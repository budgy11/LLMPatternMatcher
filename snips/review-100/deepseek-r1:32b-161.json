{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, the user asked to create a user review function using PHP. I need to figure out what exactly they're looking for. They might be building a website where users can leave reviews, so I should consider both displaying and submitting reviews.\n\nFirst, I'll outline the basic components. The function needs to retrieve reviews from a database, display them, and handle user submissions. So, I'll start by setting up a connection to the database using mysqli since it's secure and commonly used.\n\nNext, I need functions for displaying reviews. I'll fetch all reviews related to a specific item or service. Then, calculate the average rating to show an overall score. Displaying each review with user details like name, rating, comment, and date makes sense.\n\nFor submitting new reviews, I should validate the input to prevent SQL injection and handle errors gracefully. Sanitizing inputs is crucial here. Also, handling cases where a user might try to submit multiple reviews by checking their IP address could be an added security measure, though it's optional.\n\nI'll structure the code into functions: one for fetching all reviews, another for the average rating, and another for inserting new reviews. Each function will connect to the database, perform its task, and handle any errors.\n\nIn the HTML part, I'll include a form where users can input their ratings and comments. Using radio buttons for ratings makes it user-friendly. The form should post to a PHP script that handles submission, which in this case is the same file with an action parameter.\n\nI also need to ensure the code is clean and well-commented so others can understand it easily. Including placeholders for database credentials reminds the user to replace them with actual values.\n\nTesting the functions is important. For example, after inserting a review, checking if it appears on the page ensures everything works as expected. I should remind the user about implementing security measures like sessions or tokens to prevent multiple submissions from the same user.\n\nFinally, I'll present the code in a structured way, making sure each part is clear and functions independently. This approach helps in scalability and maintenance of the code.\n</think>\n\nHere's an example of a user review system using PHP:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'username';\n$password = 'password';\n$db_name = 'reviews_db';\n\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to get all reviews\nfunction get_reviews($item_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews WHERE item_id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $item_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    $reviews = array();\n    while ($row = mysqli_fetch_assoc($result)) {\n        $reviews[] = $row;\n    }\n    \n    return $reviews;\n}\n\n// Function to display average rating\nfunction get_average_rating($item_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews WHERE item_id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $item_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    $row = mysqli_fetch_assoc($result);\n    return number_format($row['average'], 1, '.', '');\n}\n\n// Function to submit new review\nfunction submit_review($user_name, $email, $rating, $comment, $item_id) {\n    global $conn;\n    \n    // Sanitize inputs\n    $user_name = mysqli_real_escape_string($conn, $user_name);\n    $email = mysqli_real_escape_string($conn, $email);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    $sql = \"INSERT INTO reviews (user_name, email, rating, comment, item_id) \n            VALUES (?, ?, ?, ?, ?)\";\n            \n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'ssisi', $user_name, $email, $rating, $comment, $item_id);\n    \n    if (mysqli_stmt_execute($stmt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_GET['action']) && $_GET['action'] == 'submit_review') {\n    $user_name = $_POST['name'];\n    $email = $_POST['email'];\n    $rating = intval($_POST['rating']);\n    $comment = $_POST['comment'];\n    $item_id = 1; // Set your item ID\n    \n    if (submit_review($user_name, $email, $rating, $comment, $item_id)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Example usage\n$item_id = 1;\n$reviews = get_reviews($item_id);\n$average_rating = get_average_rating($item_id);\n\necho \"<h2>Item Reviews</h2>\";\necho \"<p>Average Rating: $average_rating stars</p>\";\n\nif (!empty($reviews)) {\n    echo \"<div class='reviews'>\";\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>\" . $review['user_name'] . \"</h3>\";\n        echo \"<p>Rating: \" . $review['rating'] . \" stars</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>Posted on: \" . $review['date'] . \"</small>\";\n        echo \"</div>\";\n    }\n    echo \"</div>\";\n} else {\n    echo \"<p>No reviews available.</p>\";\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n\n<!-- Review Submission Form -->\n<form method=\"post\" action=\"?action=submit_review\">\n    <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\" required>\n    \n    <div class=\"rating\">\n        <label>Rating:</label>\n        <input type=\"radio\" name=\"rating\" value=\"5\"> 5\n        <input type=\"radio\" name=\"rating\" value=\"4\"> 4\n        <input type=\"radio\" name=\"rating\" value=\"3\"> 3\n        <input type=\"radio\" name=\"rating\" value=\"2\"> 2\n        <input type=\"radio\" name=\"rating\" value=\"1\"> 1\n    </div>\n    \n    <textarea name=\"comment\" placeholder=\"Write your review here...\" required></textarea>\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\nThis code provides:\n\n1. A database connection setup\n2. Functions to:\n   - Get all reviews for an item\n   - Calculate and display average rating\n   - Submit new reviews\n\n3. Error handling for database operations\n4. Input sanitization\n5. Display of existing reviews\n6. A form for submitting new reviews\n\nFeatures:\n\n- Secure database connection using mysqli\n- Prepared statements to prevent SQL injection\n- Input validation and sanitization\n- Easy-to-use functions\n- Clean and organized code structure\n\nTo use this code:\n\n1. Set up your database with a table named `reviews` containing columns:\n   - id (INT, AUTO_INCREMENT)\n   - user_name (VARCHAR)\n   - email (VARCHAR)\n   - rating (INT)\n   - comment (TEXT)\n   - item_id (INT)\n   - date (DATETIME)\n\n2. Replace the database connection details (`$host`, `$username`, `$password`, `$db_name`) with your actual database credentials\n\n3. Modify the `item_id` value as needed for different items/products\n\n4. Customize the HTML and CSS to match your website's design\n\nRemember to:\n- Add proper error handling\n- Implement a rating display system (stars, numbers, etc.)\n- Add CAPTCHA or other security measures to prevent spam reviews\n- Use sessions or tokens to prevent multiple submissions from the same user\n\nThis is a basic implementation that you can build upon based on your specific needs.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'username';\n$password = 'password';\n$db_name = 'reviews_db';\n\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to get all reviews\nfunction get_reviews($item_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews WHERE item_id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $item_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    $reviews = array();\n    while ($row = mysqli_fetch_assoc($result)) {\n        $reviews[] = $row;\n    }\n    \n    return $reviews;\n}\n\n// Function to display average rating\nfunction get_average_rating($item_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews WHERE item_id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $item_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n    \n    $row = mysqli_fetch_assoc($result);\n    return number_format($row['average'], 1, '.', '');\n}\n\n// Function to submit new review\nfunction submit_review($user_name, $email, $rating, $comment, $item_id) {\n    global $conn;\n    \n    // Sanitize inputs\n    $user_name = mysqli_real_escape_string($conn, $user_name);\n    $email = mysqli_real_escape_string($conn, $email);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    $sql = \"INSERT INTO reviews (user_name, email, rating, comment, item_id) \n            VALUES (?, ?, ?, ?, ?)\";\n            \n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'ssisi', $user_name, $email, $rating, $comment, $item_id);\n    \n    if (mysqli_stmt_execute($stmt)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_GET['action']) && $_GET['action'] == 'submit_review') {\n    $user_name = $_POST['name'];\n    $email = $_POST['email'];\n    $rating = intval($_POST['rating']);\n    $comment = $_POST['comment'];\n    $item_id = 1; // Set your item ID\n    \n    if (submit_review($user_name, $email, $rating, $comment, $item_id)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Example usage\n$item_id = 1;\n$reviews = get_reviews($item_id);\n$average_rating = get_average_rating($item_id);\n\necho \"<h2>Item Reviews</h2>\";\necho \"<p>Average Rating: $average_rating stars</p>\";\n\nif (!empty($reviews)) {\n    echo \"<div class='reviews'>\";\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>\" . $review['user_name'] . \"</h3>\";\n        echo \"<p>Rating: \" . $review['rating'] . \" stars</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>Posted on: \" . $review['date'] . \"</small>\";\n        echo \"</div>\";\n    }\n    echo \"</div>\";\n} else {\n    echo \"<p>No reviews available.</p>\";\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n\n<!-- Review Submission Form -->\n<form method=\"post\" action=\"?action=submit_review\">\n    <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\" required>\n    \n    <div class=\"rating\">\n        <label>Rating:</label>\n        <input type=\"radio\" name=\"rating\" value=\"5\"> 5\n        <input type=\"radio\" name=\"rating\" value=\"4\"> 4\n        <input type=\"radio\" name=\"rating\" value=\"3\"> 3\n        <input type=\"radio\" name=\"rating\" value=\"2\"> 2\n        <input type=\"radio\" name=\"rating\" value=\"1\"> 1\n    </div>\n    \n    <textarea name=\"comment\" placeholder=\"Write your review here...\" required></textarea>\n    <button type=\"submit\">Submit Review</button>\n</form>\n```"]}
