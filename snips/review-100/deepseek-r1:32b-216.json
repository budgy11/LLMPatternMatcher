{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, the function needs to accept user input. So it should take parameters like review text, rating, and maybe some optional fields like title or review ID if we're updating an existing review.\n\nNext, validation is important. I should check that the review isn't empty, the rating is a number between 1 and 5, and any other optional fields are properly sanitized to prevent SQL injection.\n\nThen, connecting to the database. I'll need to include a configuration file that has the database connection details. Using PDO with prepared statements will help avoid SQL injection.\n\nNow, inserting or updating the review into the database. If a review ID is provided, it's an update; otherwise, it's a new insertion. For updates, I should make sure to handle cases where only certain fields change without affecting others.\n\nGenerating feedback for the user is also necessary\u2014like success messages or error messages if something goes wrong during validation or database operations.\n\nLastly, redirecting the user after submission makes sense so they don't resubmit data by refreshing the page. But I should note that the redirect location might need to be adjusted based on the application's structure.\n\nPutting it all together, I'll write a function called submitReview with these steps: validate input, connect to the database, perform insert or update, handle feedback, and redirect.\n</think>\n\nHere's an example of a PHP function for handling user reviews:\n\n```php\n<?php\n// Function to create/submit a review\nfunction submitReview($reviewText, $rating, $userId = null, $productId = null, $reviewId = null) {\n    // Configuration file\n    include 'config.php';\n\n    try {\n        // Validate input\n        if (empty($reviewText)) {\n            throw new Exception(\"Review text cannot be empty.\");\n        }\n        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n            throw new Exception(\"Rating must be a number between 1 and 5.\");\n        }\n\n        // Sanitize inputs\n        $reviewText = htmlspecialchars(trim($reviewText));\n        $rating = intval($rating);\n        if ($userId !== null) {\n            $userId = intval($userId);\n        }\n        if ($productId !== null) {\n            $productId = intval($productId);\n        }\n\n        // Database connection\n        $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        if ($reviewId === null) {\n            // Insert new review\n            $sql = \"INSERT INTO reviews (user_id, product_id, rating, review_text, created_at) \n                    VALUES (:userId, :productId, :rating, :reviewText, NOW())\";\n            \n            $stmt = $pdo->prepare($sql);\n            $stmt->bindParam(':userId', $userId, PDO::PARAM_INT);\n            $stmt->bindParam(':productId', $productId, PDO::PARAM_INT);\n            $stmt->bindParam(':rating', $rating, PDO::PARAM_INT);\n            $stmt->bindParam(':reviewText', $reviewText);\n\n            if ($stmt->execute()) {\n                return ['status' => 'success', 'message' => 'Review submitted successfully!'];\n            } else {\n                throw new Exception(\"Error submitting review.\");\n            }\n        } else {\n            // Update existing review\n            $sql = \"UPDATE reviews \n                    SET rating = :rating, \n                        review_text = :reviewText,\n                        updated_at = NOW()\n                    WHERE id = :reviewId\";\n\n            $stmt = $pdo->prepare($sql);\n            $stmt->bindParam(':rating', $rating, PDO::PARAM_INT);\n            $stmt->bindParam(':reviewText', $reviewText);\n            $stmt->bindParam(':reviewId', $reviewId, PDO::PARAM_INT);\n\n            if ($stmt->execute()) {\n                return ['status' => 'success', 'message' => 'Review updated successfully!'];\n            } else {\n                throw new Exception(\"Error updating review.\");\n            }\n        }\n    } catch (Exception $e) {\n        // Return error message\n        return ['status' => 'error', 'message' => $e->getMessage()];\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Get form data\n        $reviewText = $_POST['review_text'];\n        $rating = $_POST['rating'];\n        $userId = isset($_POST['user_id']) ? $_POST['user_id'] : null;\n        $productId = isset($_POST['product_id']) ? $_POST['product_id'] : null;\n        $reviewId = isset($_POST['review_id']) ? $_POST['review_id'] : null;\n\n        // Submit review\n        $result = submitReview($reviewText, $rating, $userId, $productId, $reviewId);\n\n        if ($result['status'] == 'success') {\n            header(\"Location: thank_you.php?message=\" . urlencode($result['message']));\n            exit();\n        } else {\n            // Display error message\n            echo '<script>alert(\"' . $result['message'] . '\"); window.location.href = \"submit_review.php\";</script>';\n        }\n    } catch (Exception $e) {\n        // Handle unexpected errors\n        echo '<script>alert(\"An unexpected error occurred. Please try again later.\"); window.location.href = \"submit_review.php\";</script>';\n    }\n}\n?>\n```\n\nThis function includes:\n\n1. **Input Validation**: Checks for required fields and validates the rating to be between 1-5.\n\n2. **Sanitization**: Uses `htmlspecialchars()` to sanitize user input and prevent XSS attacks.\n\n3. **Database Connection**: Uses PDO with prepared statements to prevent SQL injection.\n\n4. **Insert/Update Functionality**:\n   - Inserts a new review if `$reviewId` is not provided.\n   - Updates an existing review if `$reviewId` is provided.\n\n5. **Error Handling**: Catches exceptions and returns meaningful error messages.\n\n6. **Feedback Mechanism**: Returns success or error messages that can be displayed to the user.\n\nTo use this function:\n\n1. Create a form where users can submit their reviews.\n2. Make sure your database has a `reviews` table with appropriate columns (id, user_id, product_id, rating, review_text, created_at, updated_at).\n3. Adjust the configuration file (`config.php`) to match your database settings.\n\nFeatures:\n\n- Handles both new and existing reviews\n- Includes input validation and sanitization\n- Uses secure database operations\n- Provides meaningful feedback\n- Prevents common security issues (XSS, SQL Injection)\n\nNote: Make sure to adjust the redirect URLs (`thank_you.php` and `submit_review.php`) according to your application's structure.", "code_blocks": ["```php\n<?php\n// Function to create/submit a review\nfunction submitReview($reviewText, $rating, $userId = null, $productId = null, $reviewId = null) {\n    // Configuration file\n    include 'config.php';\n\n    try {\n        // Validate input\n        if (empty($reviewText)) {\n            throw new Exception(\"Review text cannot be empty.\");\n        }\n        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n            throw new Exception(\"Rating must be a number between 1 and 5.\");\n        }\n\n        // Sanitize inputs\n        $reviewText = htmlspecialchars(trim($reviewText));\n        $rating = intval($rating);\n        if ($userId !== null) {\n            $userId = intval($userId);\n        }\n        if ($productId !== null) {\n            $productId = intval($productId);\n        }\n\n        // Database connection\n        $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUser, $dbPass);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        if ($reviewId === null) {\n            // Insert new review\n            $sql = \"INSERT INTO reviews (user_id, product_id, rating, review_text, created_at) \n                    VALUES (:userId, :productId, :rating, :reviewText, NOW())\";\n            \n            $stmt = $pdo->prepare($sql);\n            $stmt->bindParam(':userId', $userId, PDO::PARAM_INT);\n            $stmt->bindParam(':productId', $productId, PDO::PARAM_INT);\n            $stmt->bindParam(':rating', $rating, PDO::PARAM_INT);\n            $stmt->bindParam(':reviewText', $reviewText);\n\n            if ($stmt->execute()) {\n                return ['status' => 'success', 'message' => 'Review submitted successfully!'];\n            } else {\n                throw new Exception(\"Error submitting review.\");\n            }\n        } else {\n            // Update existing review\n            $sql = \"UPDATE reviews \n                    SET rating = :rating, \n                        review_text = :reviewText,\n                        updated_at = NOW()\n                    WHERE id = :reviewId\";\n\n            $stmt = $pdo->prepare($sql);\n            $stmt->bindParam(':rating', $rating, PDO::PARAM_INT);\n            $stmt->bindParam(':reviewText', $reviewText);\n            $stmt->bindParam(':reviewId', $reviewId, PDO::PARAM_INT);\n\n            if ($stmt->execute()) {\n                return ['status' => 'success', 'message' => 'Review updated successfully!'];\n            } else {\n                throw new Exception(\"Error updating review.\");\n            }\n        }\n    } catch (Exception $e) {\n        // Return error message\n        return ['status' => 'error', 'message' => $e->getMessage()];\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        // Get form data\n        $reviewText = $_POST['review_text'];\n        $rating = $_POST['rating'];\n        $userId = isset($_POST['user_id']) ? $_POST['user_id'] : null;\n        $productId = isset($_POST['product_id']) ? $_POST['product_id'] : null;\n        $reviewId = isset($_POST['review_id']) ? $_POST['review_id'] : null;\n\n        // Submit review\n        $result = submitReview($reviewText, $rating, $userId, $productId, $reviewId);\n\n        if ($result['status'] == 'success') {\n            header(\"Location: thank_you.php?message=\" . urlencode($result['message']));\n            exit();\n        } else {\n            // Display error message\n            echo '<script>alert(\"' . $result['message'] . '\"); window.location.href = \"submit_review.php\";</script>';\n        }\n    } catch (Exception $e) {\n        // Handle unexpected errors\n        echo '<script>alert(\"An unexpected error occurred. Please try again later.\"); window.location.href = \"submit_review.php\";</script>';\n    }\n}\n?>\n```"]}
