{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can create a simple user review system in PHP. This example includes features to create, read, update and delete reviews.\n\n**Database schema**\n\nLet's assume we have the following database tables for users and reviews:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL UNIQUE\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  content TEXT NOT NULL,\n  rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**PHP Code**\n\nFirst, create a `Review` class to handle review-related functionality:\n\n```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all reviews for a user\n    public function getReviewsForUser($userId) {\n        $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE user_id = ?\");\n        $stmt->execute([$userId]);\n        return $stmt->fetchAll();\n    }\n\n    // Create a new review\n    public function createReview($data) {\n        $stmt = $this->db->prepare(\"INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)\");\n        $stmt->execute([$data['user_id'], $data['content'], $data['rating']]);\n        return $this->db->lastInsertId();\n    }\n\n    // Update a review\n    public function updateReview($id, $data) {\n        $stmt = $this->db->prepare(\"UPDATE reviews SET content = ?, rating = ? WHERE id = ?\");\n        $stmt->execute([$data['content'], $data['rating'], $id]);\n        return true;\n    }\n\n    // Delete a review\n    public function deleteReview($id) {\n        $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n        $stmt->execute([$id]);\n        return true;\n    }\n}\n```\n\nNext, create a `User` class to handle user-related functionality:\n\n```php\nclass User {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all users\n    public function getAllUsers() {\n        $stmt = $this->db->prepare(\"SELECT * FROM users\");\n        return $stmt->fetchAll();\n    }\n}\n```\n\nFinally, create a `ReviewController` class to handle user reviews:\n\n```php\nclass ReviewController {\n    private $review;\n\n    public function __construct($db) {\n        $this->review = new Review($db);\n    }\n\n    // Create a review\n    public function create() {\n        if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n            $data = $_POST;\n            $userId = $data['user_id'];\n            $content = $data['content'];\n            $rating = $data['rating'];\n\n            $newReviewId = $this->review->createReview([\n                'user_id' => $userId,\n                'content' => $content,\n                'rating' => $rating\n            ]);\n\n            http_response_code(201);\n            echo json_encode(['message' => 'Review created successfully', 'id' => $newReviewId]);\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Get reviews for a user\n    public function getReviews() {\n        if ($_SERVER['REQUEST_METHOD'] === 'GET') {\n            $userId = $_GET['user_id'];\n\n            $reviews = $this->review->getReviewsForUser($userId);\n\n            http_response_code(200);\n            echo json_encode($reviews);\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Update a review\n    public function update() {\n        if ($_SERVER['REQUEST_METHOD'] === 'PUT') {\n            $id = $_GET['id'];\n            $data = $_POST;\n\n            $updatedReview = $this->review->updateReview($id, [\n                'content' => $data['content'],\n                'rating' => $data['rating']\n            ]);\n\n            if ($updatedReview) {\n                http_response_code(200);\n                echo json_encode(['message' => 'Review updated successfully']);\n            } else {\n                http_response_code(404);\n                echo json_encode(['error' => 'Review not found']);\n            }\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Delete a review\n    public function delete() {\n        if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {\n            $id = $_GET['id'];\n\n            $deletedReviewId = $this->review->deleteReview($id);\n\n            if ($deletedReviewId) {\n                http_response_code(200);\n                echo json_encode(['message' => 'Review deleted successfully']);\n            } else {\n                http_response_code(404);\n                echo json_encode(['error' => 'Review not found']);\n            }\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n}\n```\n\n**Example Usage**\n\nTo create a new review, send a POST request to `/review/create` with the user ID and content in the request body:\n\n```bash\ncurl -X POST \\\n  http://example.com/review/create \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"user_id\": 1, \"content\": \"This is a great product!\", \"rating\": 5}'\n```\n\nTo get reviews for a user, send a GET request to `/review/getReviews` with the user ID as a query parameter:\n\n```bash\ncurl http://example.com/review/getReviews?user_id=1\n```\n\nTo update a review, send a PUT request to `/review/update` with the review ID and updated content in the request body:\n\n```bash\ncurl -X PUT \\\n  http://example.com/review/update \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"id\": 1, \"content\": \"This is an even better product!\", \"rating\": 5}'\n```\n\nTo delete a review, send a DELETE request to `/review/delete` with the review ID as a query parameter:\n\n```bash\ncurl -X DELETE http://example.com/review/delete?id=1\n```\n\nNote that this example assumes you have a database setup and are using PDO for database interactions. You'll need to modify the code to fit your specific use case and database schema.", "code_blocks": [null, "```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all reviews for a user\n    public function getReviewsForUser($userId) {\n        $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE user_id = ?\");\n        $stmt->execute([$userId]);\n        return $stmt->fetchAll();\n    }\n\n    // Create a new review\n    public function createReview($data) {\n        $stmt = $this->db->prepare(\"INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)\");\n        $stmt->execute([$data['user_id'], $data['content'], $data['rating']]);\n        return $this->db->lastInsertId();\n    }\n\n    // Update a review\n    public function updateReview($id, $data) {\n        $stmt = $this->db->prepare(\"UPDATE reviews SET content = ?, rating = ? WHERE id = ?\");\n        $stmt->execute([$data['content'], $data['rating'], $id]);\n        return true;\n    }\n\n    // Delete a review\n    public function deleteReview($id) {\n        $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n        $stmt->execute([$id]);\n        return true;\n    }\n}\n```", "```php\nclass User {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all users\n    public function getAllUsers() {\n        $stmt = $this->db->prepare(\"SELECT * FROM users\");\n        return $stmt->fetchAll();\n    }\n}\n```", "```php\nclass ReviewController {\n    private $review;\n\n    public function __construct($db) {\n        $this->review = new Review($db);\n    }\n\n    // Create a review\n    public function create() {\n        if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n            $data = $_POST;\n            $userId = $data['user_id'];\n            $content = $data['content'];\n            $rating = $data['rating'];\n\n            $newReviewId = $this->review->createReview([\n                'user_id' => $userId,\n                'content' => $content,\n                'rating' => $rating\n            ]);\n\n            http_response_code(201);\n            echo json_encode(['message' => 'Review created successfully', 'id' => $newReviewId]);\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Get reviews for a user\n    public function getReviews() {\n        if ($_SERVER['REQUEST_METHOD'] === 'GET') {\n            $userId = $_GET['user_id'];\n\n            $reviews = $this->review->getReviewsForUser($userId);\n\n            http_response_code(200);\n            echo json_encode($reviews);\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Update a review\n    public function update() {\n        if ($_SERVER['REQUEST_METHOD'] === 'PUT') {\n            $id = $_GET['id'];\n            $data = $_POST;\n\n            $updatedReview = $this->review->updateReview($id, [\n                'content' => $data['content'],\n                'rating' => $data['rating']\n            ]);\n\n            if ($updatedReview) {\n                http_response_code(200);\n                echo json_encode(['message' => 'Review updated successfully']);\n            } else {\n                http_response_code(404);\n                echo json_encode(['error' => 'Review not found']);\n            }\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n\n    // Delete a review\n    public function delete() {\n        if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {\n            $id = $_GET['id'];\n\n            $deletedReviewId = $this->review->deleteReview($id);\n\n            if ($deletedReviewId) {\n                http_response_code(200);\n                echo json_encode(['message' => 'Review deleted successfully']);\n            } else {\n                http_response_code(404);\n                echo json_encode(['error' => 'Review not found']);\n            }\n        } else {\n            http_response_code(405);\n            echo json_encode(['error' => 'Invalid request method']);\n        }\n    }\n}\n```", null, null, null, null]}
