{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should consider the purpose of the function. It's for users to leave reviews on a website, so it needs to handle form submission and store the data somewhere. Since databases are common for storing dynamic data, I'll use MySQL with PDO for secure database interactions.\n\nI'll start by setting up a form that collects the user's name, email, rating, and review text. The form should have input fields for each of these, including a dropdown or stars for the rating. Using HTML forms makes sense here.\n\nNext, I need to handle the form submission. When the user submits the form, PHP will process the data. I'll use $_POST to get the submitted values and validate them. Validation is crucial to ensure all required fields are filled and that the email is correctly formatted.\n\nSanitization is also important to prevent SQL injection and XSS attacks. I'll use htmlspecialchars for inputs like name and review text, and filter_var for the email address to check its validity.\n\nConnecting to the database using PDO will allow me to prepare statements securely. I'll write an INSERT query to add the new review into a 'reviews' table. The table should have columns for each piece of data: user_id (maybe optional if users aren't authenticated), name, email, rating, review_text, and timestamps like created_at.\n\nAfter inserting the data, providing feedback is important. I'll display success or error messages to inform the user whether their review was submitted successfully or if there were issues.\n\nI should also include a display section to show existing reviews. Fetching all reviews from the database and looping through them to present each one on the page makes sense. Each review can display the user's name, email (maybe masked for privacy), rating stars, review text, and date posted.\n\nSecurity considerations are paramount. Using prepared statements with placeholders prevents SQL injection. Additionally, ensuring that any user-generated content is sanitized before displaying helps prevent XSS attacks.\n\nTesting each part as I go is important. I'll check form submission handling, data validation, database insertion, and the display of reviews to make sure everything works smoothly.\n\nFinally, I'll outline how this function can be extended or modified in the future, such as adding user authentication, allowing review editing or deletion, implementing a rating system, or including more fields like categories or images.\n</think>\n\nHere's an example of a user review function using PHP:\n\nThis example includes form handling, database storage, and display of reviews.\n\n```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Handle form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Validate and sanitize input data\n    $name = htmlspecialchars(trim($_POST['name']));\n    $email = filter_var(trim($_POST['email']), FILTER_VALIDATE_EMAIL);\n    $rating = (int)trim($_POST['rating']);\n    $review_text = htmlspecialchars(trim($_POST['review_text']));\n\n    if ($name && $email && $rating && $review_text) {\n        // Insert review into database\n        try {\n            $stmt = $conn->prepare(\"INSERT INTO reviews (user_name, user_email, rating, review_text, created_at) VALUES (?, ?, ?, ?, NOW())\");\n            $stmt->execute([$name, $email, $rating, $review_text]);\n\n            echo \"<p class='success'>Thank you for your review!</p>\";\n        } catch(PDOException $e) {\n            die(\"Error: \" . $e->getMessage());\n        }\n    } else {\n        echo \"<p class='error'>Please fill in all required fields.</p>\";\n    }\n}\n\n// Display existing reviews\ntry {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY created_at DESC\");\n    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n} catch(PDOException $e) {\n    die(\"Error: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Reviews</title>\n    <style>\n        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .review-form { margin-bottom: 30px; }\n        .success, .error { color: #fff; padding: 10px; border-radius: 5px; display: block; margin-bottom: 20px; }\n        .success { background-color: #4CAF50; }\n        .error { background-color: #f44336; }\n        .review-item { border-bottom: 1px solid #ddd; padding: 15px 0; }\n        .rating-stars span { color: #ffd700; }\n    </style>\n</head>\n<body>\n\n<h2>Leave a Review</h2>\n<div class=\"review-form\">\n    <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <div>\n            <label for=\"name\">Name:</label><br>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n        </div>\n\n        <div>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div>\n            <label for=\"rating\">Rating:</label><br>\n            <select id=\"rating\" name=\"rating\">\n                <option value=\"\">Select rating</option>\n                <option value=\"1\">1 Star</option>\n                <option value=\"2\">2 Stars</option>\n                <option value=\"3\">3 Stars</option>\n                <option value=\"4\">4 Stars</option>\n                <option value=\"5\">5 Stars</option>\n            </select>\n        </div>\n\n        <div>\n            <label for=\"review_text\">Review:</label><br>\n            <textarea id=\"review_text\" name=\"review_text\" rows=\"4\" required></textarea>\n        </div>\n\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</div>\n\n<h2>Reviews</h2>\n<?php foreach ($reviews as $review): ?>\n<div class=\"review-item\">\n    <div><strong><?php echo htmlspecialchars($review['user_name']); ?></strong> - <?php echo substr($review['user_email'], 0, strpos($review['user_email'], '@')) . '@...'; ?></div>\n    <div class=\"rating-stars\">\n        <?php \n        $stars = str_repeat(\"<span>&#9733;</span>\", (int)$review['rating']);\n        echo $stars; \n        ?>\n    </div>\n    <div><?php echo htmlspecialchars($review['review_text']); ?></div>\n    <div>Posted on: <?php echo date('M j, Y g:i a', strtotime($review['created_at'])); ?></div>\n</div>\n<?php endforeach; ?>\n\n</body>\n</html>\n```\n\nThis code includes:\n\n1. A form for users to submit their reviews\n2. Form validation and sanitization\n3. Database connection using PDO\n4. Secure SQL queries with prepared statements\n5. Display of existing reviews\n\nFeatures:\n- Users can leave a name, email, rating (1-5 stars), and review text\n- Reviews are stored in a database\n- Reviews display with user info and timestamp\n- Error handling for form submission\n- Basic styling to make it look clean\n\nTo use this code:\n\n1. Create a 'reviews' table in your MySQL database:\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255) NOT NULL,\n    user_email VARCHAR(255) NOT NULL,\n    rating TINYINT NOT NULL CHECK (rating >= 0 AND rating <=5),\n    review_text TEXT NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n2. Update the database connection details ($host, $dbname, $username, $password) with your own database information\n\n3. Save this as a PHP file and run it on a web server\n\n4. The form will allow users to submit reviews which are then stored in the database and displayed below the form\n\nNote: For security purposes:\n- Never store passwords or sensitive user data in plain text\n- Use proper input validation and sanitization\n- Consider adding CSRF protection in production environments\n- Use HTTPS for secure data transmission\n\nYou might want to extend this basic implementation by:\n- Adding user authentication before allowing reviews\n- Implementing review moderation\n- Adding reply functionality\n- Including more fields like categories or images\n- Adding sorting and filtering options\n- Implementing pagination for long lists of reviews", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Handle form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Validate and sanitize input data\n    $name = htmlspecialchars(trim($_POST['name']));\n    $email = filter_var(trim($_POST['email']), FILTER_VALIDATE_EMAIL);\n    $rating = (int)trim($_POST['rating']);\n    $review_text = htmlspecialchars(trim($_POST['review_text']));\n\n    if ($name && $email && $rating && $review_text) {\n        // Insert review into database\n        try {\n            $stmt = $conn->prepare(\"INSERT INTO reviews (user_name, user_email, rating, review_text, created_at) VALUES (?, ?, ?, ?, NOW())\");\n            $stmt->execute([$name, $email, $rating, $review_text]);\n\n            echo \"<p class='success'>Thank you for your review!</p>\";\n        } catch(PDOException $e) {\n            die(\"Error: \" . $e->getMessage());\n        }\n    } else {\n        echo \"<p class='error'>Please fill in all required fields.</p>\";\n    }\n}\n\n// Display existing reviews\ntry {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY created_at DESC\");\n    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n} catch(PDOException $e) {\n    die(\"Error: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Reviews</title>\n    <style>\n        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }\n        .review-form { margin-bottom: 30px; }\n        .success, .error { color: #fff; padding: 10px; border-radius: 5px; display: block; margin-bottom: 20px; }\n        .success { background-color: #4CAF50; }\n        .error { background-color: #f44336; }\n        .review-item { border-bottom: 1px solid #ddd; padding: 15px 0; }\n        .rating-stars span { color: #ffd700; }\n    </style>\n</head>\n<body>\n\n<h2>Leave a Review</h2>\n<div class=\"review-form\">\n    <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <div>\n            <label for=\"name\">Name:</label><br>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n        </div>\n\n        <div>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div>\n            <label for=\"rating\">Rating:</label><br>\n            <select id=\"rating\" name=\"rating\">\n                <option value=\"\">Select rating</option>\n                <option value=\"1\">1 Star</option>\n                <option value=\"2\">2 Stars</option>\n                <option value=\"3\">3 Stars</option>\n                <option value=\"4\">4 Stars</option>\n                <option value=\"5\">5 Stars</option>\n            </select>\n        </div>\n\n        <div>\n            <label for=\"review_text\">Review:</label><br>\n            <textarea id=\"review_text\" name=\"review_text\" rows=\"4\" required></textarea>\n        </div>\n\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</div>\n\n<h2>Reviews</h2>\n<?php foreach ($reviews as $review): ?>\n<div class=\"review-item\">\n    <div><strong><?php echo htmlspecialchars($review['user_name']); ?></strong> - <?php echo substr($review['user_email'], 0, strpos($review['user_email'], '@')) . '@...'; ?></div>\n    <div class=\"rating-stars\">\n        <?php \n        $stars = str_repeat(\"<span>&#9733;</span>\", (int)$review['rating']);\n        echo $stars; \n        ?>\n    </div>\n    <div><?php echo htmlspecialchars($review['review_text']); ?></div>\n    <div>Posted on: <?php echo date('M j, Y g:i a', strtotime($review['created_at'])); ?></div>\n</div>\n<?php endforeach; ?>\n\n</body>\n</html>\n```", null]}
