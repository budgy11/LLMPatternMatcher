{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, I need to help the user create a PHP function for a user review system. Let me break down what they're asking for.\n\nFirst, I should outline the main components of such a system. It needs to allow users to submit reviews with ratings and comments. Then, it should display these reviews along with some statistics like average rating and total reviews.\n\nI'll start by thinking about the database structure. The function will probably interact with a MySQL database, so I'll need tables for reviews. Maybe one table for individual reviews that include user details, submission date, etc., and another to store aggregated stats like average rating and total count. This separation makes sense because it keeps the data organized and allows for efficient updates.\n\nNext, I'll consider the functions needed. There should be a function to submit a review, which inserts into the reviews table and updates the stats table. Then, functions to retrieve the average rating and the total number of reviews. Additionally, displaying all reviews with user details would be useful.\n\nI'll need to handle security concerns, like preventing SQL injection. Using prepared statements in PDO is a good approach for that. Also, validating inputs is important\u2014ensuring ratings are within 1-5 stars and comments aren't too long or empty.\n\nNow, putting it all together. The submit_review function will take user_id, rating, comment, dbh (database handle), and the review ID. It checks if a review already exists for that user to prevent multiple submissions. Then, it inserts the new review into the reviews table. After that, it updates the stats table by calculating the new average and incrementing the total.\n\nFor retrieving data, get_average_rating will fetch the current average from the stats table. Similarly, get_total_reviews gets the count. Display_reviews will query all reviews, join with users to get names, and return formatted HTML for display.\n\nI should also handle cases where there are no reviews yet, returning appropriate messages instead of errors.\n\nFinally, I'll provide example usage to show how these functions integrate into a webpage, including connecting to the database, displaying submission forms, and showing results.\n\nThroughout this process, I'm making sure the code is clean, secure, and well-commented so that it's easy for the user to understand and implement.\n</think>\n\nHere's an example of a PHP function for a user review system. This includes functions to submit reviews, display reviews, calculate average ratings, and validate inputs.\n\n```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"reviews_db\";\n\n// Create database connection\ntry {\n    $dbh = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to create review table if not exists\nfunction create_review_table($dbh) {\n    $sql = \"\n        CREATE TABLE IF NOT EXISTS reviews (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            user_id INT NOT NULL,\n            rating INT NOT NULL,\n            comment TEXT NOT NULL,\n            submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users(id)\n        );\n        \n        CREATE TABLE IF NOT EXISTS review_stats (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            average_rating FLOAT(2,1),\n            total_reviews INT\n        );\n    \";\n    \n    try {\n        $dbh->exec($sql);\n    } catch (PDOException $e) {\n        echo \"Error creating tables: \" . $e->getMessage();\n    }\n}\n\n// Function to submit a review\nfunction submit_review($user_id, $rating, $comment, $dbh, $review_id = null) {\n    // Validate inputs\n    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n        return \"Invalid rating. Please choose between 1 and 5 stars.\";\n    }\n    \n    if (strlen(trim($comment)) == 0) {\n        return \"Comment cannot be empty.\";\n    }\n    \n    if (strlen(trim($comment)) > 500) {\n        return \"Comment is too long. Maximum length is 500 characters.\";\n    }\n\n    // Check if user has already submitted a review\n    $stmt = $dbh->prepare(\"SELECT id FROM reviews WHERE user_id = ?\");\n    $stmt->execute([$user_id]);\n    \n    if ($stmt->rowCount() > 0) {\n        return \"You have already submitted a review.\";\n    }\n\n    // Insert new review\n    try {\n        $sql = \"INSERT INTO reviews (user_id, rating, comment) VALUES (?, ?, ?)\";\n        $stmt = $dbh->prepare($sql);\n        $stmt->execute([$user_id, $rating, trim($comment)]);\n        \n        // Update average rating and total reviews in review_stats table\n        $total_reviews = get_total_reviews($dbh);\n        $average_rating = get_average_rating($dbh);\n        \n        if ($total_reviews == 0) {\n            $new_average = $rating;\n        } else {\n            $new_average = ($average_rating * $total_reviews + $rating) / ($total_reviews + 1);\n        }\n        \n        $sql_update = \"UPDATE review_stats SET average_rating = ?, total_reviews = ?\";\n        $stmt_update = $dbh->prepare($sql_update);\n        $stmt_update->execute([$new_average, $total_reviews + 1]);\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get average rating\nfunction get_average_rating($dbh) {\n    try {\n        $sql = \"SELECT average_rating FROM review_stats ORDER BY id DESC LIMIT 1\";\n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return 0;\n        }\n        \n        return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n        echo \"Error fetching average rating: \" . $e->getMessage();\n        return 0;\n    }\n}\n\n// Function to get total reviews\nfunction get_total_reviews($dbh) {\n    try {\n        $sql = \"SELECT total_reviews FROM review_stats ORDER BY id DESC LIMIT 1\";\n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return 0;\n        }\n        \n        return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n        echo \"Error fetching total reviews: \" . $e->getMessage();\n        return 0;\n    }\n}\n\n// Function to display all reviews\nfunction display_reviews($dbh) {\n    try {\n        $sql = \"\n            SELECT r.*, u.username \n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            ORDER BY submission_date DESC\n        \";\n        \n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return \"No reviews available.\";\n        }\n        \n        $reviews_html = \"<div class='reviews'>\";\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $reviews_html .= \"\n                <div class='review'>\n                    <h3>Rating: {$row['rating']} stars</h3>\n                    <p>{$row['comment']}</p>\n                    <small>Submitted by {$row['username']} on \" . date('F j, Y', strtotime($row['submission_date'])) . \"</small>\n                </div>\n            \";\n        }\n        $reviews_html .= \"</div>\";\n        \n        return $reviews_html;\n    } catch (PDOException $e) {\n        echo \"Error displaying reviews: \" . $e->getMessage();\n        return \"\";\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (!empty($_POST['rating']) && !empty($_POST['comment'])) {\n        $result = submit_review($_POST['user_id'], $_POST['rating'], $_POST['comment'], $dbh);\n        \n        if ($result === true) {\n            echo \"Review submitted successfully!\";\n        } else {\n            echo $result;\n        }\n    }\n}\n\n// Display average rating and total reviews\necho \"<p>Current Average Rating: \" . get_average_rating($dbh) . \" stars</p>\";\necho \"<p>Total Reviews: \" . get_total_reviews($dbh) . \"</p>\";\n\n// Display all reviews\necho display_reviews($dbh);\n?>\n```\n\nThis code provides the following features:\n\n1. A review submission system that validates user input\n2. Storing reviews in a database\n3. Calculating and storing average ratings\n4. Displaying all reviews with user information\n5. Input validation and error handling\n6. Security measures against SQL injection\n\nTo use this code:\n\n1. Replace the database connection details (host, username, password, dbname)\n2. Make sure you have a users table created for user authentication\n3. Create the review tables using create_review_table() function\n4. Use the submit_review() function to handle new reviews\n5. Display the average rating and total reviews using get_average_rating() and get_total_reviews()\n6. Show all reviews with display_reviews()\n\nThe system includes:\n\n- Input validation for ratings (1-5 stars) and comments (length restrictions)\n- Prevention of multiple reviews from the same user\n- Secure database queries using PDO prepared statements\n- Error handling for database operations\n- Clean separation of concerns between data storage and presentation\n\nTo implement this in your project, you'll need to:\n\n1. Create a users table for user authentication\n2. Set up proper session management\n3. Add appropriate HTML forms for review submission\n4. Style the output using CSS\n5. Implement proper error handling and user feedback\n\nRemember to secure your application by:\n- Sanitizing all inputs\n- Using prepared statements\n- Validating user sessions\n- Protecting against CSRF attacks\n- Encrypting sensitive data", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"reviews_db\";\n\n// Create database connection\ntry {\n    $dbh = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to create review table if not exists\nfunction create_review_table($dbh) {\n    $sql = \"\n        CREATE TABLE IF NOT EXISTS reviews (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            user_id INT NOT NULL,\n            rating INT NOT NULL,\n            comment TEXT NOT NULL,\n            submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (user_id) REFERENCES users(id)\n        );\n        \n        CREATE TABLE IF NOT EXISTS review_stats (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            average_rating FLOAT(2,1),\n            total_reviews INT\n        );\n    \";\n    \n    try {\n        $dbh->exec($sql);\n    } catch (PDOException $e) {\n        echo \"Error creating tables: \" . $e->getMessage();\n    }\n}\n\n// Function to submit a review\nfunction submit_review($user_id, $rating, $comment, $dbh, $review_id = null) {\n    // Validate inputs\n    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n        return \"Invalid rating. Please choose between 1 and 5 stars.\";\n    }\n    \n    if (strlen(trim($comment)) == 0) {\n        return \"Comment cannot be empty.\";\n    }\n    \n    if (strlen(trim($comment)) > 500) {\n        return \"Comment is too long. Maximum length is 500 characters.\";\n    }\n\n    // Check if user has already submitted a review\n    $stmt = $dbh->prepare(\"SELECT id FROM reviews WHERE user_id = ?\");\n    $stmt->execute([$user_id]);\n    \n    if ($stmt->rowCount() > 0) {\n        return \"You have already submitted a review.\";\n    }\n\n    // Insert new review\n    try {\n        $sql = \"INSERT INTO reviews (user_id, rating, comment) VALUES (?, ?, ?)\";\n        $stmt = $dbh->prepare($sql);\n        $stmt->execute([$user_id, $rating, trim($comment)]);\n        \n        // Update average rating and total reviews in review_stats table\n        $total_reviews = get_total_reviews($dbh);\n        $average_rating = get_average_rating($dbh);\n        \n        if ($total_reviews == 0) {\n            $new_average = $rating;\n        } else {\n            $new_average = ($average_rating * $total_reviews + $rating) / ($total_reviews + 1);\n        }\n        \n        $sql_update = \"UPDATE review_stats SET average_rating = ?, total_reviews = ?\";\n        $stmt_update = $dbh->prepare($sql_update);\n        $stmt_update->execute([$new_average, $total_reviews + 1]);\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get average rating\nfunction get_average_rating($dbh) {\n    try {\n        $sql = \"SELECT average_rating FROM review_stats ORDER BY id DESC LIMIT 1\";\n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return 0;\n        }\n        \n        return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n        echo \"Error fetching average rating: \" . $e->getMessage();\n        return 0;\n    }\n}\n\n// Function to get total reviews\nfunction get_total_reviews($dbh) {\n    try {\n        $sql = \"SELECT total_reviews FROM review_stats ORDER BY id DESC LIMIT 1\";\n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return 0;\n        }\n        \n        return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n        echo \"Error fetching total reviews: \" . $e->getMessage();\n        return 0;\n    }\n}\n\n// Function to display all reviews\nfunction display_reviews($dbh) {\n    try {\n        $sql = \"\n            SELECT r.*, u.username \n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            ORDER BY submission_date DESC\n        \";\n        \n        $stmt = $dbh->query($sql);\n        \n        if ($stmt->rowCount() == 0) {\n            return \"No reviews available.\";\n        }\n        \n        $reviews_html = \"<div class='reviews'>\";\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $reviews_html .= \"\n                <div class='review'>\n                    <h3>Rating: {$row['rating']} stars</h3>\n                    <p>{$row['comment']}</p>\n                    <small>Submitted by {$row['username']} on \" . date('F j, Y', strtotime($row['submission_date'])) . \"</small>\n                </div>\n            \";\n        }\n        $reviews_html .= \"</div>\";\n        \n        return $reviews_html;\n    } catch (PDOException $e) {\n        echo \"Error displaying reviews: \" . $e->getMessage();\n        return \"\";\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (!empty($_POST['rating']) && !empty($_POST['comment'])) {\n        $result = submit_review($_POST['user_id'], $_POST['rating'], $_POST['comment'], $dbh);\n        \n        if ($result === true) {\n            echo \"Review submitted successfully!\";\n        } else {\n            echo $result;\n        }\n    }\n}\n\n// Display average rating and total reviews\necho \"<p>Current Average Rating: \" . get_average_rating($dbh) . \" stars</p>\";\necho \"<p>Total Reviews: \" . get_total_reviews($dbh) . \"</p>\";\n\n// Display all reviews\necho display_reviews($dbh);\n?>\n```"]}
