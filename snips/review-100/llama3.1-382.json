{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can create a simple user review system in PHP. This example includes functionality for users to leave reviews, view all reviews, and calculate the average rating.\n\n```php\n<?php\n\n// Review class\nclass Review {\n    public $id;\n    public $product_id;\n    public $user_id;\n    public $rating;\n    public $review;\n\n    function __construct($id, $product_id, $user_id, $rating, $review) {\n        $this->id = $id;\n        $this->product_id = $product_id;\n        $this->user_id = $user_id;\n        $this->rating = $rating;\n        $this->review = $review;\n    }\n}\n\n// User class\nclass User {\n    public $id;\n    public $name;\n\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n\n// Product class (simple example)\nclass Product {\n    public $id;\n    public $name;\n\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n\n// Review system functions\nfunction add_review($product_id, $user_id, $rating, $review) {\n    // Simulating database insertion (replace with actual database code)\n    global $reviews;\n    array_push($reviews, new Review(count($reviews), $product_id, $user_id, $rating, $review));\n}\n\nfunction get_reviews($product_id) {\n    // Filter reviews by product id\n    global $reviews;\n    return array_filter($reviews, function ($review) use ($product_id) {\n        return $review->product_id == $product_id;\n    });\n}\n\nfunction calculate_average_rating($reviews) {\n    if (count($reviews) == 0) {\n        return 0;\n    }\n    return array_sum(array_column($reviews, 'rating')) / count($reviews);\n}\n\n// Example usage\n$products = [\n    new Product(1, \"Product A\"),\n    new Product(2, \"Product B\")\n];\n\n$users = [\n    new User(1, \"John Doe\"),\n    new User(2, \"Jane Doe\")\n];\n\n$reviews = [];\n\nadd_review(1, 1, 5, \"Great product!\");\nadd_review(1, 2, 4, \"Good but not great.\");\nadd_review(2, 1, 3, \"Not my favorite.\");\n\necho \"Reviews for Product A:\\n\";\nforeach (get_reviews(1) as $review) {\n    echo \"User: \" . $users[$review->user_id - 1]->name . \"\\n\";\n    echo \"Rating: \" . $review->rating . \"/5\\n\";\n    echo \"Review: \" . $review->review . \"\\n\\n\";\n}\n\necho \"Average rating for Product A: \" . calculate_average_rating(get_reviews(1)) . \"\\n\";\n\n?>\n```\n\nThis code uses three classes (`Review`, `User`, and `Product`) to represent user reviews, users, and products respectively. The review system functions include adding a new review to the database (simulated with an array), retrieving all reviews for a specific product, calculating the average rating of a product's reviews.\n\nNote that this example uses global variables to store the reviews. In a real-world application you would likely use a database to persist data across requests.", "code_blocks": ["```php\n<?php\n\n// Review class\nclass Review {\n    public $id;\n    public $product_id;\n    public $user_id;\n    public $rating;\n    public $review;\n\n    function __construct($id, $product_id, $user_id, $rating, $review) {\n        $this->id = $id;\n        $this->product_id = $product_id;\n        $this->user_id = $user_id;\n        $this->rating = $rating;\n        $this->review = $review;\n    }\n}\n\n// User class\nclass User {\n    public $id;\n    public $name;\n\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n\n// Product class (simple example)\nclass Product {\n    public $id;\n    public $name;\n\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n\n// Review system functions\nfunction add_review($product_id, $user_id, $rating, $review) {\n    // Simulating database insertion (replace with actual database code)\n    global $reviews;\n    array_push($reviews, new Review(count($reviews), $product_id, $user_id, $rating, $review));\n}\n\nfunction get_reviews($product_id) {\n    // Filter reviews by product id\n    global $reviews;\n    return array_filter($reviews, function ($review) use ($product_id) {\n        return $review->product_id == $product_id;\n    });\n}\n\nfunction calculate_average_rating($reviews) {\n    if (count($reviews) == 0) {\n        return 0;\n    }\n    return array_sum(array_column($reviews, 'rating')) / count($reviews);\n}\n\n// Example usage\n$products = [\n    new Product(1, \"Product A\"),\n    new Product(2, \"Product B\")\n];\n\n$users = [\n    new User(1, \"John Doe\"),\n    new User(2, \"Jane Doe\")\n];\n\n$reviews = [];\n\nadd_review(1, 1, 5, \"Great product!\");\nadd_review(1, 2, 4, \"Good but not great.\");\nadd_review(2, 1, 3, \"Not my favorite.\");\n\necho \"Reviews for Product A:\\n\";\nforeach (get_reviews(1) as $review) {\n    echo \"User: \" . $users[$review->user_id - 1]->name . \"\\n\";\n    echo \"Rating: \" . $review->rating . \"/5\\n\";\n    echo \"Review: \" . $review->review . \"\\n\\n\";\n}\n\necho \"Average rating for Product A: \" . calculate_average_rating(get_reviews(1)) . \"\\n\";\n\n?>\n```"]}
