{"prompt": "Create a user review function using php", "llm_output": "**User Review Function in PHP**\n=====================================\n\nBelow is an example implementation of a user review system in PHP. This includes functions for creating, reading, updating, and deleting (CRUD) reviews.\n\n### Database Setup\n\nBefore we dive into the code, ensure you have a `reviews` table set up with the following structure:\n```sql\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  product_id INT NOT NULL,\n  rating TINYINT(1) NOT NULL CHECK (rating BETWEEN 1 AND 5),\n  review_text TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n### PHP Code\n\n```php\n<?php\n\nclass Review {\n  private $db;\n\n  public function __construct($db) {\n    $this->db = $db;\n  }\n\n  /**\n   * Create a new review\n   *\n   * @param int $user_id\n   * @param int $product_id\n   * @param int $rating\n   * @param string $review_text\n   */\n  public function createReview($user_id, $product_id, $rating, $review_text) {\n    $stmt = $this->db->prepare(\"INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)\");\n    $stmt->execute([$user_id, $product_id, $rating, $review_text]);\n    return $this->db->lastInsertId();\n  }\n\n  /**\n   * Get all reviews for a product\n   *\n   * @param int $product_id\n   */\n  public function getReviewsForProduct($product_id) {\n    $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n    $stmt->execute([$product_id]);\n    return $stmt->fetchAll();\n  }\n\n  /**\n   * Get a single review by ID\n   *\n   * @param int $review_id\n   */\n  public function getReview($review_id) {\n    $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE id = ?\");\n    $stmt->execute([$review_id]);\n    return $stmt->fetch();\n  }\n\n  /**\n   * Update a review\n   *\n   * @param int $review_id\n   * @param int $rating\n   * @param string $review_text\n   */\n  public function updateReview($review_id, $rating, $review_text) {\n    $stmt = $this->db->prepare(\"UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?\");\n    $stmt->execute([$rating, $review_text, $review_id]);\n  }\n\n  /**\n   * Delete a review\n   *\n   * @param int $review_id\n   */\n  public function deleteReview($review_id) {\n    $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n    $stmt->execute([$review_id]);\n  }\n}\n```\n\n### Example Usage\n\n```php\n$db = new PDO('sqlite:reviews.db');\n\n$review = new Review($db);\n\n// Create a new review\n$user_id = 1;\n$product_id = 1;\n$rating = 4;\n$review_text = \"Great product!\";\n$review_id = $review->createReview($user_id, $product_id, $rating, $review_text);\n\n// Get all reviews for a product\n$reviews = $review->getReviewsForProduct($product_id);\nprint_r($reviews);\n\n// Get a single review by ID\n$single_review = $review->getReview($review_id);\nprint_r($single_review);\n\n// Update a review\n$rating = 5;\n$review_text = \"Even better!\";\n$review->updateReview($review_id, $rating, $review_text);\n\n// Delete a review\n$review->deleteReview($review_id);\n```\n\nThis implementation uses PDO (PHP Data Objects) for database interactions. Make sure to replace `reviews.db` with your actual database file or adjust the connection settings according to your needs.\n\nNote that this is a basic example and you may want to add additional functionality, such as user authentication, validation, and error handling.", "code_blocks": [null, "```php\n<?php\n\nclass Review {\n  private $db;\n\n  public function __construct($db) {\n    $this->db = $db;\n  }\n\n  /**\n   * Create a new review\n   *\n   * @param int $user_id\n   * @param int $product_id\n   * @param int $rating\n   * @param string $review_text\n   */\n  public function createReview($user_id, $product_id, $rating, $review_text) {\n    $stmt = $this->db->prepare(\"INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)\");\n    $stmt->execute([$user_id, $product_id, $rating, $review_text]);\n    return $this->db->lastInsertId();\n  }\n\n  /**\n   * Get all reviews for a product\n   *\n   * @param int $product_id\n   */\n  public function getReviewsForProduct($product_id) {\n    $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n    $stmt->execute([$product_id]);\n    return $stmt->fetchAll();\n  }\n\n  /**\n   * Get a single review by ID\n   *\n   * @param int $review_id\n   */\n  public function getReview($review_id) {\n    $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE id = ?\");\n    $stmt->execute([$review_id]);\n    return $stmt->fetch();\n  }\n\n  /**\n   * Update a review\n   *\n   * @param int $review_id\n   * @param int $rating\n   * @param string $review_text\n   */\n  public function updateReview($review_id, $rating, $review_text) {\n    $stmt = $this->db->prepare(\"UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?\");\n    $stmt->execute([$rating, $review_text, $review_id]);\n  }\n\n  /**\n   * Delete a review\n   *\n   * @param int $review_id\n   */\n  public function deleteReview($review_id) {\n    $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n    $stmt->execute([$review_id]);\n  }\n}\n```", "```php\n$db = new PDO('sqlite:reviews.db');\n\n$review = new Review($db);\n\n// Create a new review\n$user_id = 1;\n$product_id = 1;\n$rating = 4;\n$review_text = \"Great product!\";\n$review_id = $review->createReview($user_id, $product_id, $rating, $review_text);\n\n// Get all reviews for a product\n$reviews = $review->getReviewsForProduct($product_id);\nprint_r($reviews);\n\n// Get a single review by ID\n$single_review = $review->getReview($review_id);\nprint_r($single_review);\n\n// Update a review\n$rating = 5;\n$review_text = \"Even better!\";\n$review->updateReview($review_id, $rating, $review_text);\n\n// Delete a review\n$review->deleteReview($review_id);\n```"]}
