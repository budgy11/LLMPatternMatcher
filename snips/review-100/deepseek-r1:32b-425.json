{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, the user asked to create a user review function using PHP. I need to figure out what they really need. Maybe they're building a website where users can leave reviews on products or services.\n\nFirst, I should outline the basic requirements. The function should allow submitting reviews, display them, and maybe handle deleting or editing. But for simplicity, I'll start with submission and display.\n\nI think about the database structure. A table like 'reviews' with fields: id, user_id, product_id, rating, comment, and timestamp. That makes sense because each review is linked to a user and a product.\n\nNext, I need a function to submit reviews. It should take user input\u2014rating and comment\u2014and insert it into the database. I should make sure to sanitize inputs to prevent SQL injection and XSS attacks.\n\nDisplaying the reviews is next. The function should retrieve all reviews for a specific product, order them by date, and display each with user info, rating stars, comment, and date. Formatting the ratings as stars would make it more user-friendly.\n\nI also consider validation\u2014checking if the rating is between 1 and 5, ensuring comments aren't too long or empty. Error handling is important here to provide feedback if something goes wrong.\n\nSecurity is a big concern. Using prepared statements with PDO can prevent SQL injection. Sanitizing outputs will help avoid XSS issues. I should also hash any user data stored in the database for security.\n\nLooking ahead, maybe adding features like editing or deleting reviews would be useful, but I'll keep it simple for now. The user might want to expand later.\n\nTesting is essential. I'll need to check if submissions work correctly, display properly, and handle errors as expected. Also, ensuring that the design looks good on different devices with responsive styling.\n\nFinally, I structure the code step by step: connecting to the database, creating the table if needed, writing the submission function, displaying reviews, handling errors, and securing everything properly. Then, I provide an example usage so the user can see how it all fits together.\n\nI think that covers the basics. Now, I'll present this in a clear way, making sure each part is explained so the user understands how to implement and customize it.\n</think>\n\nHere's an example of a user review function using PHP. This will include functions for submitting reviews, displaying reviews, and managing them:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to submit a review\nfunction submitReview($productId, $userId, $rating, $comment) {\n    global $conn;\n    \n    // Validate inputs\n    if (!isset($productId, $userId, $rating, $comment)) {\n        return false;\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    if (strlen($comment) > 500) {\n        return false;\n    }\n    \n    // Sanitize inputs\n    $productId = intval($productId);\n    $userId = intval($userId);\n    $rating = intval($rating);\n    $comment = htmlspecialchars(trim($comment), ENT_QUOTES, 'UTF-8');\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_id, rating, comment, created_at) \n                              VALUES (:productId, :userId, :rating, :comment, NOW())\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $result = $stmt->execute();\n        \n        if ($result) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch(PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Function to get reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.id, u.username, r.rating, r.comment, r.created_at \n                              FROM reviews r \n                              JOIN users u ON r.user_id = u.id \n                              WHERE r.product_id = :productId \n                              ORDER BY r.created_at DESC\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        die(\"Error fetching reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"DELETE FROM reviews WHERE id = :reviewId\");\n        $stmt->bindParam(':reviewId', $reviewId);\n        $result = $stmt->execute();\n        \n        return $result ? true : false;\n    } catch(PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) as average \n                              FROM reviews \n                              WHERE product_id = :productId\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return round($result['average'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        die(\"Error calculating average rating: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $productId = $_POST['product_id'];\n    $userId = $_SESSION['user_id']; // Assuming user is logged in\n    $rating = intval($_POST['rating']);\n    $comment = $_POST['comment'];\n    \n    if (submitReview($productId, $userId, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Display reviews\n$reviews = getReviews(1); // Get reviews for product ID 1\n\nforeach ($reviews as $review) {\n    echo \"<div class='review'>\";\n    echo \"<h4>By: {$review['username']}</h4>\";\n    echo \"<p>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</p>\";\n    echo \"<p>{$review['comment']}</p>\";\n    echo \"<small>Posted on: {$review['created_at']}</small>\";\n    echo \"</div>\";\n}\n\n// Display average rating\necho \"Average Rating: \" . getAverageRating(1) . \"/5\";\n?>\n```\n\nThis code includes:\n\n1. A database connection setup using PDO\n2. Functions for:\n   - Submitting reviews (`submitReview()`)\n   - Getting reviews for a product (`getReviews()`)\n   - Deleting reviews (`deleteReview()`)\n   - Calculating average ratings (`getAverageRating()`)\n\nFeatures:\n- Input validation and sanitization\n- Error handling\n- Security measures ( PDO prepared statements, htmlspecialchars())\n- Easy to customize and extend\n\nTo use this code:\n\n1. Create a database table for reviews with the following structure:\n\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    user_id INT NOT NULL,\n    rating INT NOT NULL,\n    comment TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n2. Create a users table if you don't have one:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n```\n\n3. Customize the database configuration at the top of the file\n\n4. Include this file in your project where you need review functionality\n\nTo submit a review, users should have a form like this:\n\n```html\n<form method=\"post\" action=\"\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <label>Rating:</label>\n    <select name=\"rating\">\n        <option value=\"5\">5 stars</option>\n        <option value=\"4\">4 stars</option>\n        <option value=\"3\">3 stars</option>\n        <option value=\"2\">2 stars</option>\n        <option value=\"1\">1 star</option>\n    </select>\n    \n    <label>Comment:</label>\n    <textarea name=\"comment\" rows=\"5\"></textarea>\n    \n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\nYou can customize the styling and functionality further based on your needs.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to submit a review\nfunction submitReview($productId, $userId, $rating, $comment) {\n    global $conn;\n    \n    // Validate inputs\n    if (!isset($productId, $userId, $rating, $comment)) {\n        return false;\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    if (strlen($comment) > 500) {\n        return false;\n    }\n    \n    // Sanitize inputs\n    $productId = intval($productId);\n    $userId = intval($userId);\n    $rating = intval($rating);\n    $comment = htmlspecialchars(trim($comment), ENT_QUOTES, 'UTF-8');\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_id, rating, comment, created_at) \n                              VALUES (:productId, :userId, :rating, :comment, NOW())\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $result = $stmt->execute();\n        \n        if ($result) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch(PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Function to get reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.id, u.username, r.rating, r.comment, r.created_at \n                              FROM reviews r \n                              JOIN users u ON r.user_id = u.id \n                              WHERE r.product_id = :productId \n                              ORDER BY r.created_at DESC\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        die(\"Error fetching reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"DELETE FROM reviews WHERE id = :reviewId\");\n        $stmt->bindParam(':reviewId', $reviewId);\n        $result = $stmt->execute();\n        \n        return $result ? true : false;\n    } catch(PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) as average \n                              FROM reviews \n                              WHERE product_id = :productId\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return round($result['average'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        die(\"Error calculating average rating: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $productId = $_POST['product_id'];\n    $userId = $_SESSION['user_id']; // Assuming user is logged in\n    $rating = intval($_POST['rating']);\n    $comment = $_POST['comment'];\n    \n    if (submitReview($productId, $userId, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Display reviews\n$reviews = getReviews(1); // Get reviews for product ID 1\n\nforeach ($reviews as $review) {\n    echo \"<div class='review'>\";\n    echo \"<h4>By: {$review['username']}</h4>\";\n    echo \"<p>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</p>\";\n    echo \"<p>{$review['comment']}</p>\";\n    echo \"<small>Posted on: {$review['created_at']}</small>\";\n    echo \"</div>\";\n}\n\n// Display average rating\necho \"Average Rating: \" . getAverageRating(1) . \"/5\";\n?>\n```", null, null, null]}
