{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, the function should handle both displaying reviews and processing new submissions. So, maybe it has parameters for whether it's submitting or displaying.\n\nI'll start by connecting to the database. Using mysqli is better than mysql because it's more secure and up-to-date. I'll set up a class with methods for connection, fetching reviews, adding a review, and displaying them.\n\nFor displaying reviews, I need to fetch all from the reviews table, order by date. Then loop through each review and output HTML elements like stars based on rating. I'll create a helper method getStars to convert the rating into star emojis.\n\nWhen submitting a review, I should validate inputs: name can't be empty, rating must be between 1-5, content also required. If any validation fails, return an error message.\n\nSecurity is important, so I'll use prepared statements when inserting into the database to prevent SQL injection. After insertion, it's good practice to close the statement and connection.\n\nIn the display method, each review should show name, stars, content, date. Formatting the date as Y-m-d H:i:s makes it user-friendly.\n\nI also need to handle errors gracefully. If there's a database error or input issue, the function should return an appropriate message so the frontend can display it.\n\nTesting is essential. I should check both submission and display functionalities to ensure everything works smoothly without SQL injection vulnerabilities.\n\nFinally, I'll structure the code with OOP principles for better maintainability. The class will have private properties for DB details and methods to handle different operations.\n</think>\n\nHere's an example of a user review function using PHP that allows users to submit reviews and displays existing reviews:\n\n```php\n<?php\nclass ReviewSystem {\n    private $dbHost = 'localhost';\n    private $dbName = 'reviews_db';\n    private $dbUser = 'root';\n    private $dbPass = '';\n\n    private $connection;\n\n    public function __construct() {\n        $this->connectDB();\n    }\n\n    // Database connection\n    private function connectDB() {\n        try {\n            $this->connection = new mysqli($this->dbHost, $this->dbUser, $this->dbPass, $this->dbName);\n        } catch (mysqli_sql_exception $e) {\n            die(\"Connection failed: \" . $e->getMessage());\n        }\n    }\n\n    // Get all reviews\n    public function getReviews() {\n        $reviews = array();\n        \n        if ($result = $this->connection->query(\"SELECT * FROM reviews ORDER BY review_date DESC\")) {\n            while ($row = $result->fetch_assoc()) {\n                $reviews[] = array(\n                    'id' => $row['id'],\n                    'name' => $row['name'],\n                    'rating' => $row['rating'],\n                    'content' => $row['content'],\n                    'date' => date('Y-m-d H:i:s', strtotime($row['review_date']))\n                );\n            }\n            $result->close();\n        }\n\n        return $reviews;\n    }\n\n    // Add new review\n    public function addReview($name, $rating, $content) {\n        if (empty($name)) {\n            return \"Name is required!\";\n        }\n        if (!isset($rating) || $rating < 1 || $rating > 5) {\n            return \"Please select a valid rating!\";\n        }\n        if (empty($content)) {\n            return \"Review content cannot be empty!\";\n        }\n\n        try {\n            $stmt = $this->connection->prepare(\"INSERT INTO reviews (name, rating, content, review_date) VALUES (?, ?, ?, NOW())\");\n            $stmt->bind_param(\"sii\", $name, $rating, $content);\n            if ($stmt->execute()) {\n                return \"Review added successfully!\";\n            }\n            return \"Error adding review!\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        } finally {\n            $stmt->close();\n        }\n    }\n\n    // Display reviews\n    public function displayReviews() {\n        $reviews = $this->getReviews();\n\n        if (!empty($reviews)) {\n            foreach ($reviews as $review) {\n                echo \"<div class='review'>\";\n                echo \"<h3>\" . htmlspecialchars($review['name']) . \"</h3>\";\n                echo \"<div class='rating'>\" . $this->getStars($review['rating']) . \"</div>\";\n                echo \"<p>\" . nl2br(htmlspecialchars($review['content'])) . \"</p>\";\n                echo \"<small>Posted on: \" . $review['date'] . \"</small>\";\n                echo \"</div><hr>\";\n            }\n        } else {\n            echo \"No reviews yet!\";\n        }\n    }\n\n    // Helper function to display stars\n    private function getStars($rating) {\n        $stars = '';\n        for ($i = 1; $i <= 5; $i++) {\n            if ($i <= $rating) {\n                $stars .= \"<span class='star'>\u2605</span>\";\n            } else {\n                $stars .= \"<span class='star'>\u2606</span>\";\n            }\n        }\n        return $stars;\n    }\n\n    // Close database connection\n    public function __destruct() {\n        if ($this->connection != null) {\n            $this->connection->close();\n        }\n    }\n}\n\n// Usage example:\n$reviewSystem = new ReviewSystem();\n\n// Check if form is submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = $reviewSystem->addReview($_POST['name'], $_POST['rating'], $_POST['content']);\n    echo \"<script>alert('{$result}');</script>\";\n}\n\n$reviewSystem->displayReviews();\n?>\n```\n\nThis code includes the following features:\n\n1. **Database Connection**: Establishes a connection to a MySQL database using mysqli.\n\n2. **Review Submission**:\n   - Validates input fields\n   - Prevents SQL injection through prepared statements\n   - Stores reviews in the database along with submission date\n\n3. **Review Display**:\n   - Retrieves all reviews from the database\n   - Displays them in descending order of submission\n   - Shows user name, rating (as stars), review content, and submission date\n\n4. **Error Handling**: Proper error handling for both database operations and input validation.\n\n5. **Security Measures**:\n   - Input sanitization using htmlspecialchars()\n   - SQL injection prevention through prepared statements\n   - Validation of all required fields\n\n6. **Helper Methods**:\n   - getStars() method to display rating stars visually\n   - Proper object-oriented structure\n\nTo use this code:\n\n1. Create a MySQL database named `reviews_db` (or modify the connection parameters as needed)\n2. Create a table called `reviews` with the following columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - name (VARCHAR(255))\n   - rating (TINYINT)\n   - content (TEXT)\n   - review_date (DATETIME)\n\n3. Include this code in your PHP file and use the following HTML form to submit reviews:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Review System</title>\n    <style>\n        .star { margin: 0 2px; }\n        .review { padding: 10px; border: 1px solid #ddd; margin-bottom: 10px; }\n    </style>\n</head>\n<body>\n    <h1>Submit a Review</h1>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\"><br>\n\n        <label for=\"rating\">Rating:</label><br>\n        <select id=\"rating\" name=\"rating\">\n            <option value=\"\">Select Rating</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n        </select><br>\n\n        <label for=\"content\">Review:</label><br>\n        <textarea id=\"content\" name=\"content\"></textarea><br>\n\n        <input type=\"submit\" value=\"Submit Review\">\n    </form>\n\n    <?php\n    $reviewSystem->displayReviews();\n    ?>\n</body>\n</html>\n```\n\nThis implementation provides a basic review system that can be enhanced with additional features like:\n- User authentication\n- Editing/Deleting reviews\n- Sorting and filtering reviews\n- More detailed error messages\n- CSS styling for better appearance\n- Responsive design\n- Comment moderation\n\nRemember to replace the database connection details (`$dbHost`, `$dbName`, `$dbUser`, `$dbPass`) with your actual database credentials.", "code_blocks": ["```php\n<?php\nclass ReviewSystem {\n    private $dbHost = 'localhost';\n    private $dbName = 'reviews_db';\n    private $dbUser = 'root';\n    private $dbPass = '';\n\n    private $connection;\n\n    public function __construct() {\n        $this->connectDB();\n    }\n\n    // Database connection\n    private function connectDB() {\n        try {\n            $this->connection = new mysqli($this->dbHost, $this->dbUser, $this->dbPass, $this->dbName);\n        } catch (mysqli_sql_exception $e) {\n            die(\"Connection failed: \" . $e->getMessage());\n        }\n    }\n\n    // Get all reviews\n    public function getReviews() {\n        $reviews = array();\n        \n        if ($result = $this->connection->query(\"SELECT * FROM reviews ORDER BY review_date DESC\")) {\n            while ($row = $result->fetch_assoc()) {\n                $reviews[] = array(\n                    'id' => $row['id'],\n                    'name' => $row['name'],\n                    'rating' => $row['rating'],\n                    'content' => $row['content'],\n                    'date' => date('Y-m-d H:i:s', strtotime($row['review_date']))\n                );\n            }\n            $result->close();\n        }\n\n        return $reviews;\n    }\n\n    // Add new review\n    public function addReview($name, $rating, $content) {\n        if (empty($name)) {\n            return \"Name is required!\";\n        }\n        if (!isset($rating) || $rating < 1 || $rating > 5) {\n            return \"Please select a valid rating!\";\n        }\n        if (empty($content)) {\n            return \"Review content cannot be empty!\";\n        }\n\n        try {\n            $stmt = $this->connection->prepare(\"INSERT INTO reviews (name, rating, content, review_date) VALUES (?, ?, ?, NOW())\");\n            $stmt->bind_param(\"sii\", $name, $rating, $content);\n            if ($stmt->execute()) {\n                return \"Review added successfully!\";\n            }\n            return \"Error adding review!\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        } finally {\n            $stmt->close();\n        }\n    }\n\n    // Display reviews\n    public function displayReviews() {\n        $reviews = $this->getReviews();\n\n        if (!empty($reviews)) {\n            foreach ($reviews as $review) {\n                echo \"<div class='review'>\";\n                echo \"<h3>\" . htmlspecialchars($review['name']) . \"</h3>\";\n                echo \"<div class='rating'>\" . $this->getStars($review['rating']) . \"</div>\";\n                echo \"<p>\" . nl2br(htmlspecialchars($review['content'])) . \"</p>\";\n                echo \"<small>Posted on: \" . $review['date'] . \"</small>\";\n                echo \"</div><hr>\";\n            }\n        } else {\n            echo \"No reviews yet!\";\n        }\n    }\n\n    // Helper function to display stars\n    private function getStars($rating) {\n        $stars = '';\n        for ($i = 1; $i <= 5; $i++) {\n            if ($i <= $rating) {\n                $stars .= \"<span class='star'>\u2605</span>\";\n            } else {\n                $stars .= \"<span class='star'>\u2606</span>\";\n            }\n        }\n        return $stars;\n    }\n\n    // Close database connection\n    public function __destruct() {\n        if ($this->connection != null) {\n            $this->connection->close();\n        }\n    }\n}\n\n// Usage example:\n$reviewSystem = new ReviewSystem();\n\n// Check if form is submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = $reviewSystem->addReview($_POST['name'], $_POST['rating'], $_POST['content']);\n    echo \"<script>alert('{$result}');</script>\";\n}\n\n$reviewSystem->displayReviews();\n?>\n```", null]}
