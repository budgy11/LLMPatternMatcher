{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for user reviews. Let me think about what this function should do.\n\nFirst, the function needs to handle adding a new review. So, it should take inputs like user ID, product ID, rating, and comment. Then, it should insert these into a database table.\n\nWait, but before inserting, I should check if the user has already reviewed the product. Maybe there's a constraint in the database, but it's better to handle it here too. So, I'll include a step to verify that the user hasn't submitted a review for this product before.\n\nNext, after adding the review, the function should also update the product's average rating. How? Well, every time a new rating is added, I need to calculate the new average by summing all ratings and dividing by the total number of reviews. That makes sense.\n\nI'll structure the function with parameters: $user_id, $product_id, $rating, and $comment. All these are essential for storing the review.\n\nFor the database connection, I'll assume there's a global variable or a function that provides it. Maybe using mysqli for better security against SQL injection. So, I'll use prepared statements to prevent any potential attacks.\n\nFirst, I'll check if the user has already reviewed the product by querying the reviews table where user_id and product_id match. If the result is more than zero, return an error message.\n\nIf not, proceed to insert the new review into the reviews table with the provided data and the current timestamp.\n\nThen, calculate the average rating for the product. I'll get all ratings for that product, sum them up, count how many there are, and then compute the average. Update the product's average_rating field with this value.\n\nI should handle any potential database errors, so wrapping each query in try-catch blocks would be good. If something goes wrong during insertion or updating, throw an exception and return an appropriate error message.\n\nWait, maybe I should also check if the user ID and product ID exist in their respective tables to prevent invalid data from being inserted. That adds another layer of validation.\n\nSo, steps are:\n1. Validate inputs: ensure all required fields are present.\n2. Check if the user exists in the users table.\n3. Check if the product exists in the products table.\n4. Verify no existing review by this user for the product.\n5. Insert the new review into reviews table.\n6. Calculate and update the average rating for the product.\n\nI should also consider handling edge cases, like when a product has no reviews yet. The average would be zero or handle division by zero.\n\nTesting is important. I'll need to test scenarios where:\n- A user tries to review a product they've already reviewed.\n- Inserting a valid review and checking if the average updates correctly.\n- Handling invalid user or product IDs.\n- Security aspects, like SQL injection attempts.\n\nIn the example usage provided, the function returns messages based on success or failure. Maybe adding more detailed error messages would help in debugging.\n\nI think that covers the main points. Now, I'll structure the code accordingly, making sure to include proper error handling and database operations.\n</think>\n\nHere's an example of a user review function using PHP:\n\n```php\n<?php\n// Function to handle user reviews\nfunction submit_review($user_id, $product_id, $rating, $comment) {\n    // Database connection\n    global $conn;\n\n    try {\n        // Check if the user has already reviewed this product\n        $check_query = \"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\";\n        $stmt = $conn->prepare($check_query);\n        $stmt->bind_param(\"ii\", $user_id, $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            return \"You have already reviewed this product!\";\n        }\n\n        // Insert the new review\n        $insert_query = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n                        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\";\n        $stmt = $conn->prepare($insert_query);\n        $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n        $stmt->execute();\n\n        // Update the product's average rating\n        $update_avg_rating = \"UPDATE products SET average_rating = \n                            (SELECT AVG(rating) FROM reviews WHERE product_id = ?)\n                            WHERE id = ?\";\n        $stmt = $conn->prepare($update_avg_rating);\n        $stmt->bind_param(\"ii\", $product_id, $product_id);\n        $stmt->execute();\n\n        return \"Review submitted successfully!\";\n\n    } catch (Exception $e) {\n        return \"Error submitting review: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\n$review_result = submit_review(1, 5, 4, \"Great product!\");\necho $review_result;\n?>\n```\n\nThis function:\n\n1. Takes user input for a review (user ID, product ID, rating, and comment)\n2. Checks if the user has already reviewed the product\n3. Inserts a new review into the database\n4. Updates the product's average rating based on all reviews\n\nKey features:\n- Uses prepared statements to prevent SQL injection\n- Handles errors gracefully\n- Maintains data integrity by updating product averages\n- Returns meaningful feedback messages\n\nTo use this function:\n\n1. Make sure you have a valid database connection\n2. Ensure your database has tables for `reviews` and `products`\n3. The `reviews` table should include fields like:\n   - id (primary key)\n   - user_id (foreign key)\n   - product_id (foreign key)\n   - rating (integer)\n   - comment (text)\n   - review_date (timestamp)\n\n4. The `products` table should have an `average_rating` field to store the computed average\n\nThis is a basic implementation and can be extended with additional features like:\n- Review validation\n- Comment moderation\n- Rating distribution tracking\n- Review helpfulness votes\n- Sorting and filtering reviews", "code_blocks": ["```php\n<?php\n// Function to handle user reviews\nfunction submit_review($user_id, $product_id, $rating, $comment) {\n    // Database connection\n    global $conn;\n\n    try {\n        // Check if the user has already reviewed this product\n        $check_query = \"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\";\n        $stmt = $conn->prepare($check_query);\n        $stmt->bind_param(\"ii\", $user_id, $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            return \"You have already reviewed this product!\";\n        }\n\n        // Insert the new review\n        $insert_query = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n                        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\";\n        $stmt = $conn->prepare($insert_query);\n        $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n        $stmt->execute();\n\n        // Update the product's average rating\n        $update_avg_rating = \"UPDATE products SET average_rating = \n                            (SELECT AVG(rating) FROM reviews WHERE product_id = ?)\n                            WHERE id = ?\";\n        $stmt = $conn->prepare($update_avg_rating);\n        $stmt->bind_param(\"ii\", $product_id, $product_id);\n        $stmt->execute();\n\n        return \"Review submitted successfully!\";\n\n    } catch (Exception $e) {\n        return \"Error submitting review: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\n$review_result = submit_review(1, 5, 4, \"Great product!\");\necho $review_result;\n?>\n```"]}
