{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to help the user create a PHP function for handling user reviews. Let me break down what they might need.\n\nFirst, I should consider where to store the reviews. Using a database makes sense because it's scalable and allows easy management of data. So, I'll probably use MySQL with PDO for secure database access.\n\nNext, the function needs to add a new review. That means inserting into the database table when a user submits their name, rating, comment, and the product ID they're reviewing. I should make sure to handle any potential errors during this insertion, like connection issues or SQL errors.\n\nThen, fetching all reviews for a specific product is essential. This will allow displaying them on a webpage. I'll write a query that selects all entries where the product_id matches, maybe ordering them by submission date so they appear in chronological order.\n\nDisplaying the average rating is another key feature. Calculating this on the fly each time could be inefficient, especially for products with many reviews. So, I'll create a function to calculate and store the average in the database whenever a new review is added. That way, fetching it is quick and efficient.\n\nModeration is important too. Users might post inappropriate content, so allowing admin users to delete reviews will help maintain quality. I'll include a function that deletes a specific review by its ID after checking that the user requesting the deletion has the right permissions.\n\nI should also think about security. Using prepared statements with PDO helps prevent SQL injection. Validating inputs is crucial\u2014checking that ratings are within 1-5, and sanitizing comments to remove any harmful code or tags.\n\nHandling cases where there are no reviews yet is something to consider. The average rating function should gracefully handle zero entries, perhaps returning a default value like N/A.\n\nFor the frontend, displaying each review with user details, star ratings, and the comment makes it user-friendly. I'll create functions that format these outputs, maybe using emojis or stars for visual appeal.\n\nPutting it all together, I'll structure the code with clear functions for adding, fetching, averaging, and deleting reviews. Including an example usage at the end will help the user understand how to integrate this into their application.\n\nFinally, I'll remind them about necessary configurations like database connections and security practices, ensuring they're aware of what else needs setup before using the functions.\n</think>\n\nHere's an example of a PHP function for handling user reviews. This implementation includes adding reviews, displaying reviews, and calculating average ratings:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Function to add a new review\nfunction addReview($productId, $userName, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement with placeholders\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            (product_id, user_name, rating, comment, submission_date)\n            VALUES (:product_id, :user_name, :rating, :comment, NOW())\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->bindParam(':user_name', $userName);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to fetch all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT * \n            FROM reviews \n            WHERE product_id = :product_id \n            ORDER BY submission_date DESC\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate and display average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT \n                COUNT(rating) AS total_reviews,\n                AVG(rating) AS average_rating \n            FROM reviews \n            WHERE product_id = :product_id\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($result['total_reviews'] > 0) {\n            return number_format($result['average_rating'], 1, '.', '');\n        } else {\n            return 'No ratings yet';\n        }\n    } catch (PDOException $e) {\n        echo \"Error calculating average rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to moderate reviews (delete a review)\nfunction deleteReview($reviewId, $isAdmin = false) {\n    global $conn;\n    \n    // Only admins can delete reviews\n    if (!$isAdmin) {\n        return false;\n    }\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            DELETE FROM reviews \n            WHERE review_id = :review_id\n        \");\n        \n        $stmt->bindParam(':review_id', $reviewId);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error deleting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Add a new review\n    if (isset($_POST['submit_review'])) {\n        $productId = $_POST['product_id'];\n        $userName = htmlspecialchars($_POST['user_name']);\n        $rating = intval($_POST['rating']);\n        $comment = htmlspecialchars($_POST['comment']);\n        \n        // Validate input\n        if ($rating < 1 || $rating > 5) {\n            die(\"Invalid rating. Please select a rating between 1 and 5.\");\n        }\n        \n        addReview($productId, $userName, $rating, $comment);\n    }\n}\n\n// Display reviews for product ID 1\n$reviews = getReviews(1);\n\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h3>\";\n        echo \"<p><strong>\" . htmlspecialchars($review['user_name']) . \"</strong></p>\";\n        echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"<small>Submitted on: \" . $review['submission_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\necho \"<h4>Average Rating: \" . getAverageRating(1) . \"/5</h4>\";\n\n?>\n```\n\nThis implementation includes:\n\n1. **Database Connection**: Uses PDO for secure database access.\n\n2. **addReview() Function**:\n   - Adds a new review to the database\n   - Includes user validation and input sanitization\n\n3. **getReviews() Function**:\n   - Fetches all reviews for a specific product\n   - Orders reviews by submission date\n\n4. **getAverageRating() Function**:\n   - Calculates and returns the average rating for a product\n   - Returns formatted average with one decimal place\n\n5. **deleteReview() Function**:\n   - Allows admins to delete reviews\n   - Includes admin verification check\n\nTo use this code:\n\n1. Set up your database connection details at the top of the file.\n\n2. Create a `reviews` table in your database with these columns:\n   - review_id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - product_id (INT)\n   - user_name (VARCHAR)\n   - rating (TINYINT)\n   - comment (TEXT)\n   - submission_date (DATETIME)\n\n3. Use the functions in your application to handle reviews.\n\nFeatures:\n\n- Input validation and sanitization\n- SQL injection prevention using PDO prepared statements\n- Average rating calculation\n- Review moderation capabilities\n- Easy integration with frontend display\n\nRemember to:\n- Set appropriate permissions for database access\n- Sanitize user input\n- Handle errors appropriately in production code\n- Use HTTPS for secure data transmission", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Function to add a new review\nfunction addReview($productId, $userName, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement with placeholders\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            (product_id, user_name, rating, comment, submission_date)\n            VALUES (:product_id, :user_name, :rating, :comment, NOW())\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->bindParam(':user_name', $userName);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to fetch all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT * \n            FROM reviews \n            WHERE product_id = :product_id \n            ORDER BY submission_date DESC\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate and display average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT \n                COUNT(rating) AS total_reviews,\n                AVG(rating) AS average_rating \n            FROM reviews \n            WHERE product_id = :product_id\n        \");\n        \n        $stmt->bindParam(':product_id', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($result['total_reviews'] > 0) {\n            return number_format($result['average_rating'], 1, '.', '');\n        } else {\n            return 'No ratings yet';\n        }\n    } catch (PDOException $e) {\n        echo \"Error calculating average rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to moderate reviews (delete a review)\nfunction deleteReview($reviewId, $isAdmin = false) {\n    global $conn;\n    \n    // Only admins can delete reviews\n    if (!$isAdmin) {\n        return false;\n    }\n    \n    try {\n        // Prepare and execute the SQL statement\n        $stmt = $conn->prepare(\"\n            DELETE FROM reviews \n            WHERE review_id = :review_id\n        \");\n        \n        $stmt->bindParam(':review_id', $reviewId);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo \"Error deleting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Add a new review\n    if (isset($_POST['submit_review'])) {\n        $productId = $_POST['product_id'];\n        $userName = htmlspecialchars($_POST['user_name']);\n        $rating = intval($_POST['rating']);\n        $comment = htmlspecialchars($_POST['comment']);\n        \n        // Validate input\n        if ($rating < 1 || $rating > 5) {\n            die(\"Invalid rating. Please select a rating between 1 and 5.\");\n        }\n        \n        addReview($productId, $userName, $rating, $comment);\n    }\n}\n\n// Display reviews for product ID 1\n$reviews = getReviews(1);\n\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h3>\";\n        echo \"<p><strong>\" . htmlspecialchars($review['user_name']) . \"</strong></p>\";\n        echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"<small>Submitted on: \" . $review['submission_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\necho \"<h4>Average Rating: \" . getAverageRating(1) . \"/5</h4>\";\n\n?>\n```"]}
