{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, the function needs to accept parameters like review ID, user ID, rating, and comments. So I'll define the function with these as optional parameters, defaulting to null if not provided.\n\nNext, I have to connect to the database. I remember using mysqli_connect for that. I'll need to include the database credentials, so I should replace placeholders with actual values later.\n\nOnce connected, I'll check if the review ID is set. If it's not, this means we're adding a new review. So I'll prepare an INSERT query. I'll make sure to use prepared statements to prevent SQL injection. Bind the parameters and execute the statement.\n\nIf the review ID is provided, then it's an update scenario. I'll construct an UPDATE query, again using prepared statements for safety. I'll bind the new rating and comments, along with the review ID.\n\nI should handle any errors that might occur during database operations. Using mysqli_error will help catch issues, and I'll throw exceptions if something goes wrong.\n\nAfter executing the query, whether it's an insert or update, I'll return a success message indicating how many rows were affected. This helps in knowing if the operation was successful.\n\nI also need to ensure that the function is secure, so prepared statements are a must. They help prevent SQL injection by separating the SQL logic from the data.\n\nTesting is important. After writing the function, I should test it with different scenarios: adding a new review, updating an existing one, and handling cases where parameters might be missing or incorrect.\n\nI think that covers the main points. Now, putting this all together into the function structure.\n</think>\n\nHere's an example of a user review function using PHP:\n\n```php\n<?php\nfunction handleUserReview($review_id = null, $user_id = null, $rating = null, $comments = null) {\n    // Database connection details\n    $servername = \"localhost\";\n    $username = \"username\";\n    $password = \"password\";\n    $dbname = \"reviews_db\";\n\n    // Create connection\n    $conn = new mysqli($servername, $username, $password, $dbname);\n\n    // Check connection\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    try {\n        // If review_id is provided, update the existing review\n        if ($review_id !== null) {\n            $stmt = $conn->prepare(\"UPDATE reviews SET rating=?, comments=? WHERE id=?\");\n            $stmt->bind_param(\"sii\", $rating, $comments, $review_id);\n        } \n        // Otherwise, insert a new review\n        else {\n            $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, rating, comments) VALUES (?, ?, ?)\");\n            $stmt->bind_param(\"isi\", $user_id, $rating, $comments);\n        }\n\n        // Execute the statement\n        if ($stmt->execute()) {\n            return \"Review \" . ($review_id ? \"updated\" : \"added\") . \" successfully. Affected rows: \" . $stmt->affected_rows;\n        } else {\n            throw new Exception(\"Error executing database query: \" . $conn->error);\n        }\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    } finally {\n        // Close the statement and connection\n        if ($stmt) $stmt->close();\n        $conn->close();\n    }\n}\n?>\n```\n\nThis function:\n\n1. Creates a database connection using mysqli\n2. Checks if a review_id is provided to determine whether to insert a new review or update an existing one\n3. Uses prepared statements to prevent SQL injection\n4. Handles errors and exceptions gracefully\n5. Returns success or error messages\n\nTo use this function:\n\n- To add a new review:\n  ```php\n  $result = handleUserReview(null, 1, 5, \"Great product!\");\n  ```\n\n- To update an existing review:\n  ```php\n  $result = handleUserReview(1, null, 4, \"Good product but could be better.\");\n  ```\n\nNote: You'll need to:\n\n1. Replace the database connection details (servername, username, password, dbname) with your actual database credentials\n2. Ensure that your database table (`reviews`) has appropriate columns:\n   - `id` (PRIMARY KEY)\n   - `user_id`\n   - `rating`\n   - `comments`\n\n3. Add proper error handling and validation for your specific use case\n\nThis is a basic example and might need to be modified based on your specific requirements, such as:\n\n- Input validation\n- Additional fields in the reviews table\n- User authentication\n- Review approval system\n- Displaying reviews on a webpage\n- Handling duplicate reviews from the same user\n- Adding timestamps for when reviews were created or updated", "code_blocks": ["```php\n<?php\nfunction handleUserReview($review_id = null, $user_id = null, $rating = null, $comments = null) {\n    // Database connection details\n    $servername = \"localhost\";\n    $username = \"username\";\n    $password = \"password\";\n    $dbname = \"reviews_db\";\n\n    // Create connection\n    $conn = new mysqli($servername, $username, $password, $dbname);\n\n    // Check connection\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    try {\n        // If review_id is provided, update the existing review\n        if ($review_id !== null) {\n            $stmt = $conn->prepare(\"UPDATE reviews SET rating=?, comments=? WHERE id=?\");\n            $stmt->bind_param(\"sii\", $rating, $comments, $review_id);\n        } \n        // Otherwise, insert a new review\n        else {\n            $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, rating, comments) VALUES (?, ?, ?)\");\n            $stmt->bind_param(\"isi\", $user_id, $rating, $comments);\n        }\n\n        // Execute the statement\n        if ($stmt->execute()) {\n            return \"Review \" . ($review_id ? \"updated\" : \"added\") . \" successfully. Affected rows: \" . $stmt->affected_rows;\n        } else {\n            throw new Exception(\"Error executing database query: \" . $conn->error);\n        }\n    } catch (Exception $e) {\n        return \"Error: \" . $e->getMessage();\n    } finally {\n        // Close the statement and connection\n        if ($stmt) $stmt->close();\n        $conn->close();\n    }\n}\n?>\n```"]}
