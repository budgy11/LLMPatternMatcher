{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about what this function should do.\n\nFirst, the function needs to handle both displaying reviews and allowing users to submit new ones. So, maybe it has two main modes: display and submission.\n\nFor displaying, I'll need to connect to a database. I'll use PDO because it's secure and supports multiple databases. The function should fetch all reviews from a table, order them by the most recent. Each review will show the user's name, their rating, the comment, and the date.\n\nWhen a user submits a review, the function should handle that data. It needs to validate inputs\u2014like ensuring the rating is between 1 and 5, not empty strings, and maybe limit the comment length. Then, it should insert this into the database. I'll have to make sure to escape or use prepared statements to prevent SQL injection.\n\nI should include a form for submission, which appears after displaying existing reviews. The form will have fields for name, rating (maybe radio buttons), and comment. After submission, the function should redirect back to show the updated list without showing the form again immediately.\n\nWait, maybe I should separate concerns: one part handles displaying, another handles submitting. So in the display mode, it shows all reviews and the form. When a review is submitted, it's processed and then redirects back to the display page. But since this is a single function, perhaps using GET parameters to determine the action.\n\nAlso, I need to handle errors gracefully. If submission fails (like invalid data), show an error message instead of redirecting immediately. Maybe use sessions or just display messages on the same page.\n\nI should structure the code: first check if it's a POST request for submission; process that, then redirect. Otherwise, display existing reviews and the form.\n\nLet me outline the steps:\n\n1. Database connection setup using PDO.\n2. Check if the request method is POST to handle submission.\n   - Validate inputs: name not empty, rating between 1-5, comment within limits.\n   - If valid, insert into database.\n   - Redirect to display page or show success message.\n3. If GET, fetch all reviews and display them.\n4. Create a form for submitting reviews with appropriate fields.\n\nI should also consider security: using prepared statements in PDO to prevent SQL injection, sanitizing inputs if necessary.\n\nTesting is important. I'll need test cases where the form is submitted correctly and incorrectly to ensure validation works.\n\nMaybe add some HTML structure around the displayed reviews to make it user-friendly, like stars for ratings or timestamps.\n\nI think that's a solid plan. Now, time to write the code accordingly.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction userReview($action) {\n    global $conn;\n\n    switch ($action) {\n        case 'display':\n            displayReviews();\n            break;\n        case 'submit':\n            submitReview();\n            break;\n        default:\n            displayReviews();\n            break;\n    }\n}\n\n// Display existing reviews\nfunction displayReviews() {\n    global $conn;\n\n    try {\n        // Fetch all reviews from database\n        $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY review_date DESC\");\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        // Display each review\n        echo \"<div class='review-container'>\";\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n                echo \"<h3>Reviewer: \" . htmlspecialchars($review['reviewer_name']) . \"</h3>\";\n                echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"/5</p>\";\n                echo \"<p><strong>Comment:</strong> \" . nl2br(htmlspecialchars($review['comment'])) . \"</p>\";\n                echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['review_date'])) . \"</small>\";\n            echo \"</div>\";\n        }\n        echo \"</div>\";\n    } catch(PDOException $e) {\n        echo \"Error displaying reviews: \" . $e->getMessage();\n    }\n\n    // Display review submission form\n    displayReviewForm();\n}\n\n// Submit a new review\nfunction submitReview() {\n    global $conn;\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        try {\n            // Sanitize and validate inputs\n            $reviewerName = htmlspecialchars(trim($_POST['reviewer_name']));\n            $rating = intval($_POST['rating']);\n            $comment = htmlspecialchars(trim($_POST['comment']));\n\n            if (empty($reviewerName) || empty($comment)) {\n                throw new Exception(\"Please fill in all required fields.\");\n            }\n            \n            if ($rating < 1 || $rating > 5) {\n                throw new Exception(\"Rating must be between 1 and 5.\");\n            }\n\n            // Insert into database\n            $stmt = $conn->prepare(\"\n                INSERT INTO reviews \n                    (reviewer_name, rating, comment, review_date)\n                VALUES (:name, :rating, :comment, NOW())\n            \");\n            $stmt->bindParam(':name', $reviewerName);\n            $stmt->bindParam(':rating', $rating);\n            $stmt->bindParam(':comment', $comment);\n\n            if ($stmt->execute()) {\n                header(\"Location: review.php?action=display\");\n                exit();\n            } else {\n                throw new Exception(\"Error submitting your review.\");\n            }\n        } catch(PDOException $e) {\n            echo \"Database error: \" . $e->getMessage();\n        } catch(Exception $e) {\n            echo $e->getMessage();\n        }\n    }\n}\n\n// Display the review submission form\nfunction displayReviewForm() {\n    // Check if user is logged in or authenticated before showing form\n    if (isset($_SESSION['logged_in'])) {\n        echo \"<div class='review-form'>\";\n            echo \"<h2>Submit Your Review</h2>\";\n            echo \"<form action='?action=submit' method='post'>\";\n                echo \"<p><strong>Name:</strong></p>\";\n                echo \"<input type='text' name='reviewer_name' required />\";\n                \n                echo \"<p><strong>Rating (1-5):</strong></p>\";\n                for ($i = 1; $i <= 5; $i++) {\n                    echo \"<label>\";\n                        echo \"<input type='radio' name='rating' value='$i'\";\n                        if (!isset($_POST['rating'])) {\n                            if ($i == 3) echo \" checked\";\n                        } else if ($_POST['rating'] == $i) {\n                            echo \" checked\";\n                        }\n                        echo \"> $i</label> \";\n                    }\n                echo \"<br/>\";\n                \n                echo \"<p><strong>Your Review:</strong></p>\";\n                echo \"<textarea name='comment' rows='5' cols='40' required></textarea>\";\n                \n                echo \"<input type='submit' value='Submit Review'>\";\n            echo \"</form>\";\n        echo \"</div>\";\n    } else {\n        echo \"<p>Please <a href='login.php'>log in</a> to submit a review.</p>\";\n    }\n}\n\n// Example usage:\nif (isset($_GET['action'])) {\n    userReview($_GET['action']);\n} else {\n    userReview('display');\n}\n?>\n```\n\nThis code provides:\n\n1. A function `userReview()` that can display existing reviews or handle new submissions\n2. Secure database connections using PDO\n3. Input validation and sanitization\n4. Protection against SQL injection\n5. Error handling\n6. Review submission form with basic validation\n7. Display of reviews in a user-friendly format\n\nFeatures:\n\n- Displays all reviews ordered by most recent\n- Requires users to log in before submitting reviews\n- Validates input fields (name, rating, comment)\n- Prevents SQL injection using prepared statements\n- Escapes output data for display\n- Shows formatted dates for each review\n- Includes basic error handling and messages\n\nTo use this code:\n\n1. Replace the database connection details (`$host`, `$dbname`, `$username`, `$password`) with your actual database information\n2. Create a `reviews` table in your database:\n   ```sql\n   CREATE TABLE reviews (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       reviewer_name VARCHAR(100) NOT NULL,\n       rating TINYINT NOT NULL CHECK (rating >= 1 AND rating <=5),\n       comment TEXT NOT NULL,\n       review_date DATETIME DEFAULT CURRENT_TIMESTAMP\n   );\n   ```\n3. Include this code in your project and call the `userReview()` function with either 'display' or 'submit' as the action parameter\n\nNote: This is a basic implementation and should be customized according to your specific needs. You might want to add features like:\n\n- Review editing/deletion\n- User authentication integration\n- Displaying reviews in different formats (JSON, XML)\n- Adding stars for visual rating display\n- Implementing comment moderation\n- Allowing users to sort reviews by various criteria\n\nRemember to always sanitize and validate inputs when working with user data, and secure your database connections properly.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction userReview($action) {\n    global $conn;\n\n    switch ($action) {\n        case 'display':\n            displayReviews();\n            break;\n        case 'submit':\n            submitReview();\n            break;\n        default:\n            displayReviews();\n            break;\n    }\n}\n\n// Display existing reviews\nfunction displayReviews() {\n    global $conn;\n\n    try {\n        // Fetch all reviews from database\n        $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY review_date DESC\");\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        // Display each review\n        echo \"<div class='review-container'>\";\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n                echo \"<h3>Reviewer: \" . htmlspecialchars($review['reviewer_name']) . \"</h3>\";\n                echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"/5</p>\";\n                echo \"<p><strong>Comment:</strong> \" . nl2br(htmlspecialchars($review['comment'])) . \"</p>\";\n                echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['review_date'])) . \"</small>\";\n            echo \"</div>\";\n        }\n        echo \"</div>\";\n    } catch(PDOException $e) {\n        echo \"Error displaying reviews: \" . $e->getMessage();\n    }\n\n    // Display review submission form\n    displayReviewForm();\n}\n\n// Submit a new review\nfunction submitReview() {\n    global $conn;\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        try {\n            // Sanitize and validate inputs\n            $reviewerName = htmlspecialchars(trim($_POST['reviewer_name']));\n            $rating = intval($_POST['rating']);\n            $comment = htmlspecialchars(trim($_POST['comment']));\n\n            if (empty($reviewerName) || empty($comment)) {\n                throw new Exception(\"Please fill in all required fields.\");\n            }\n            \n            if ($rating < 1 || $rating > 5) {\n                throw new Exception(\"Rating must be between 1 and 5.\");\n            }\n\n            // Insert into database\n            $stmt = $conn->prepare(\"\n                INSERT INTO reviews \n                    (reviewer_name, rating, comment, review_date)\n                VALUES (:name, :rating, :comment, NOW())\n            \");\n            $stmt->bindParam(':name', $reviewerName);\n            $stmt->bindParam(':rating', $rating);\n            $stmt->bindParam(':comment', $comment);\n\n            if ($stmt->execute()) {\n                header(\"Location: review.php?action=display\");\n                exit();\n            } else {\n                throw new Exception(\"Error submitting your review.\");\n            }\n        } catch(PDOException $e) {\n            echo \"Database error: \" . $e->getMessage();\n        } catch(Exception $e) {\n            echo $e->getMessage();\n        }\n    }\n}\n\n// Display the review submission form\nfunction displayReviewForm() {\n    // Check if user is logged in or authenticated before showing form\n    if (isset($_SESSION['logged_in'])) {\n        echo \"<div class='review-form'>\";\n            echo \"<h2>Submit Your Review</h2>\";\n            echo \"<form action='?action=submit' method='post'>\";\n                echo \"<p><strong>Name:</strong></p>\";\n                echo \"<input type='text' name='reviewer_name' required />\";\n                \n                echo \"<p><strong>Rating (1-5):</strong></p>\";\n                for ($i = 1; $i <= 5; $i++) {\n                    echo \"<label>\";\n                        echo \"<input type='radio' name='rating' value='$i'\";\n                        if (!isset($_POST['rating'])) {\n                            if ($i == 3) echo \" checked\";\n                        } else if ($_POST['rating'] == $i) {\n                            echo \" checked\";\n                        }\n                        echo \"> $i</label> \";\n                    }\n                echo \"<br/>\";\n                \n                echo \"<p><strong>Your Review:</strong></p>\";\n                echo \"<textarea name='comment' rows='5' cols='40' required></textarea>\";\n                \n                echo \"<input type='submit' value='Submit Review'>\";\n            echo \"</form>\";\n        echo \"</div>\";\n    } else {\n        echo \"<p>Please <a href='login.php'>log in</a> to submit a review.</p>\";\n    }\n}\n\n// Example usage:\nif (isset($_GET['action'])) {\n    userReview($_GET['action']);\n} else {\n    userReview('display');\n}\n?>\n```"]}
