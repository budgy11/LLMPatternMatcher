{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function in PHP. Let me think about how to approach this.\n\nFirst, the function should take a rating and comments as inputs. So, I'll define a function called submit_review that accepts these two parameters: $rating and $comments.\n\nNext, I should validate the input data. For ratings, they must be integers between 1 and 5. If someone passes a string or a number outside this range, I need to handle that. Maybe throw an exception with an appropriate message. Also, for comments, although it's optional, if provided, it shouldn't exceed 500 characters.\n\nNow, connecting to the database is essential. I'll use mysqli since it's more secure and efficient than mysql. I'll include a try-catch block to handle any exceptions that might occur during the database connection or query execution.\n\nI should check if the review already exists for the user on this item. So, I'll run a SELECT query to see if there's an existing entry in the reviews table where the user_id and item_id match. If it does, I need to update the rating and comments instead of inserting a new record. Otherwise, insert a new review.\n\nFor updating, I'll use an UPDATE statement with SET to modify the rating and comments where the user_id and item_id are the same as before. For inserting, I'll use INSERT INTO with the provided values, making sure to handle the comments if they exist or set them to NULL otherwise.\n\nI should also ensure that all database queries use prepared statements with placeholders to prevent SQL injection attacks. This makes the function safer and more secure.\n\nAfter successfully executing the query, whether it's an update or insert, I'll return a success message indicating whether it was added or updated.\n\nFinally, outside the function, I need to connect to the database by providing the hostname, username, password, and database name. Then, call the submit_review function with sample data to test it out. If there are any errors, they should be caught and displayed appropriately.\n\nI think that covers the main points: input validation, database connection handling, checking for existing reviews, using prepared statements, error handling, and testing the function.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Function to submit user reviews\nfunction submit_review($rating, $comments) {\n    // Validate input\n    if (!is_int($rating)) {\n        throw new InvalidArgumentException('Rating must be an integer.');\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new InvalidArgumentException('Rating must be between 1 and 5.');\n    }\n\n    if (isset($comments) && !is_string($comments)) {\n        throw new InvalidArgumentException('Comments must be a string.');\n    }\n\n    // Database connection details\n    $host = 'localhost';\n    $username = 'root';\n    $password = '';\n    $database = 'reviews_db';\n\n    try {\n        // Connect to database\n        $conn = new mysqli($host, $username, $password, $database);\n\n        if ($conn->connect_error) {\n            throw new Exception('Database connection failed: ' . $conn->connect_error);\n        }\n\n        // Check if the review exists for this user and item\n        $checkQuery = \"SELECT * FROM reviews WHERE user_id = ? AND item_id = ?\";\n        $stmt = $conn->prepare($checkQuery);\n        $stmt->bind_param(\"ss\", $_SESSION['user_id'], $_GET['item_id']);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            // Update existing review\n            $updateQuery = \"UPDATE reviews SET rating = ?, comments = ? WHERE user_id = ? AND item_id = ?\";\n            $stmt = $conn->prepare($updateQuery);\n            $stmt->bind_param(\"isss\", $rating, $comments, $_SESSION['user_id'], $_GET['item_id']);\n        } else {\n            // Insert new review\n            $insertQuery = \"INSERT INTO reviews (user_id, item_id, rating, comments) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($insertQuery);\n            $stmt->bind_param(\"ssis\", $_SESSION['user_id'], $_GET['item_id'], $rating, $comments);\n        }\n\n        if ($stmt->execute()) {\n            return \"Review submitted successfully!\";\n        } else {\n            throw new Exception('Error submitting review: ' . $stmt->error);\n        }\n    } catch (Exception $e) {\n        die('Error: ' . $e->getMessage());\n    } finally {\n        // Close database connection\n        if ($conn) {\n            $conn->close();\n        }\n    }\n}\n\n// Example usage:\ntry {\n    // Make sure to set user_id in session and item_id from GET request or another source\n    $_SESSION['user_id'] = '1';\n    $_GET['item_id'] = '1';\n\n    $rating = 5;\n    $comments = \"This product is amazing!\";\n\n    echo submit_review($rating, $comments);\n} catch (Exception $e) {\n    die('Error: ' . $e->getMessage());\n}\n?>\n```\n\nThis example includes:\n\n1. Input validation for the rating and comments\n2. Database connection handling with mysqli\n3. Checking if a review already exists for this user and item\n4. Updating or inserting reviews based on existence\n5. Error handling using try-catch blocks\n6. Secure database queries using prepared statements\n\nKey features:\n\n- Validates that the rating is an integer between 1 and 5\n- Ensures comments are optional but must be a string if provided\n- Uses mysqli for secure database access\n- Prevents SQL injection through prepared statements\n- Handles both insertion of new reviews and updates to existing ones\n- Returns appropriate success or error messages\n\nBefore using this code:\n\n1. Replace the database connection details (host, username, password, database)\n2. Ensure that you have a `reviews` table with columns for user_id, item_id, rating, and comments\n3. Set up proper session management for storing the current user's ID\n4. Make sure to set the item_id from your application's context\n\nTo use this function:\n\n1. Call the `submit_review()` function with a rating (1-5) and optional comments\n2. The function will either insert or update the review in the database\n3. Handle any exceptions that might be thrown during execution\n\nRemember to implement proper user authentication and authorization before allowing users to submit reviews.", "code_blocks": ["```php\n<?php\n// Function to submit user reviews\nfunction submit_review($rating, $comments) {\n    // Validate input\n    if (!is_int($rating)) {\n        throw new InvalidArgumentException('Rating must be an integer.');\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new InvalidArgumentException('Rating must be between 1 and 5.');\n    }\n\n    if (isset($comments) && !is_string($comments)) {\n        throw new InvalidArgumentException('Comments must be a string.');\n    }\n\n    // Database connection details\n    $host = 'localhost';\n    $username = 'root';\n    $password = '';\n    $database = 'reviews_db';\n\n    try {\n        // Connect to database\n        $conn = new mysqli($host, $username, $password, $database);\n\n        if ($conn->connect_error) {\n            throw new Exception('Database connection failed: ' . $conn->connect_error);\n        }\n\n        // Check if the review exists for this user and item\n        $checkQuery = \"SELECT * FROM reviews WHERE user_id = ? AND item_id = ?\";\n        $stmt = $conn->prepare($checkQuery);\n        $stmt->bind_param(\"ss\", $_SESSION['user_id'], $_GET['item_id']);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            // Update existing review\n            $updateQuery = \"UPDATE reviews SET rating = ?, comments = ? WHERE user_id = ? AND item_id = ?\";\n            $stmt = $conn->prepare($updateQuery);\n            $stmt->bind_param(\"isss\", $rating, $comments, $_SESSION['user_id'], $_GET['item_id']);\n        } else {\n            // Insert new review\n            $insertQuery = \"INSERT INTO reviews (user_id, item_id, rating, comments) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($insertQuery);\n            $stmt->bind_param(\"ssis\", $_SESSION['user_id'], $_GET['item_id'], $rating, $comments);\n        }\n\n        if ($stmt->execute()) {\n            return \"Review submitted successfully!\";\n        } else {\n            throw new Exception('Error submitting review: ' . $stmt->error);\n        }\n    } catch (Exception $e) {\n        die('Error: ' . $e->getMessage());\n    } finally {\n        // Close database connection\n        if ($conn) {\n            $conn->close();\n        }\n    }\n}\n\n// Example usage:\ntry {\n    // Make sure to set user_id in session and item_id from GET request or another source\n    $_SESSION['user_id'] = '1';\n    $_GET['item_id'] = '1';\n\n    $rating = 5;\n    $comments = \"This product is amazing!\";\n\n    echo submit_review($rating, $comments);\n} catch (Exception $e) {\n    die('Error: ' . $e->getMessage());\n}\n?>\n```"]}
