{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can create a user review system in PHP. This system will allow users to submit reviews for products, and the average rating for each product will be displayed.\n\n**Database Setup**\n\nFirstly, let's set up our database with two tables: `products` and `reviews`. We'll use MySQL as our database management system.\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    product_id INT,\n    user_name VARCHAR(255),\n    rating TINYINT,\n    comment TEXT,\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\n```php\n// Review class\nclass Review {\n    private $db;\n\n    public function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n    }\n\n    // Add a review\n    public function addReview($product_id, $user_name, $rating, $comment) {\n        try {\n            $query = \"INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (:product_id, :user_name, :rating, :comment)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([\n                'product_id' => $product_id,\n                'user_name' => $user_name,\n                'rating' => $rating,\n                'comment' => $comment\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get reviews for a product\n    public function getReviews($product_id) {\n        try {\n            $query = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute(['product_id' => $product_id]);\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return array();\n        }\n    }\n\n    // Calculate average rating for a product\n    public function getAverageRating($product_id) {\n        try {\n            $query = \"SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute(['product_id' => $product_id]);\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return 0;\n        }\n    }\n}\n\n// Example usage\n$review = new Review();\n\n// Add a review for product with id=1\nif ($review->addReview(1, 'John Doe', 5, 'Great product!')) {\n    echo 'Review added successfully!';\n} else {\n    echo 'Error adding review.';\n}\n\n// Get reviews for product with id=1\n$reviews = $review->getReviews(1);\necho 'Reviews for product with id=1:';\nforeach ($reviews as $review) {\n    echo '<br>' . $review['user_name'] . ': ' . $review['rating'] . '/5 - ' . $review['comment'];\n}\n\n// Calculate average rating for product with id=1\n$averageRating = $review->getAverageRating(1);\necho '<br>Average rating: ' . $averageRating;\n```\n\nIn this example, we have a `Review` class that encapsulates the database operations. The `addReview`, `getReviews`, and `getAverageRating` methods are used to add reviews for products, retrieve reviews for products, and calculate the average rating for products respectively.\n\nNote: This is just an example code snippet, please replace the placeholders (`localhost`, `username`, `password`) with your actual database credentials.", "code_blocks": [null, "```php\n// Review class\nclass Review {\n    private $db;\n\n    public function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n    }\n\n    // Add a review\n    public function addReview($product_id, $user_name, $rating, $comment) {\n        try {\n            $query = \"INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (:product_id, :user_name, :rating, :comment)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([\n                'product_id' => $product_id,\n                'user_name' => $user_name,\n                'rating' => $rating,\n                'comment' => $comment\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get reviews for a product\n    public function getReviews($product_id) {\n        try {\n            $query = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute(['product_id' => $product_id]);\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return array();\n        }\n    }\n\n    // Calculate average rating for a product\n    public function getAverageRating($product_id) {\n        try {\n            $query = \"SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute(['product_id' => $product_id]);\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return 0;\n        }\n    }\n}\n\n// Example usage\n$review = new Review();\n\n// Add a review for product with id=1\nif ($review->addReview(1, 'John Doe', 5, 'Great product!')) {\n    echo 'Review added successfully!';\n} else {\n    echo 'Error adding review.';\n}\n\n// Get reviews for product with id=1\n$reviews = $review->getReviews(1);\necho 'Reviews for product with id=1:';\nforeach ($reviews as $review) {\n    echo '<br>' . $review['user_name'] . ': ' . $review['rating'] . '/5 - ' . $review['comment'];\n}\n\n// Calculate average rating for product with id=1\n$averageRating = $review->getAverageRating(1);\necho '<br>Average rating: ' . $averageRating;\n```"]}
