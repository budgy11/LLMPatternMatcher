{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user wants to create a user review function using PHP. I need to figure out what that entails. From my understanding, this likely involves allowing users to submit reviews and then displaying them on a webpage.\n\nFirst, I should consider the structure of the data. Reviews typically have an ID, user name, rating, comment, and a timestamp. So, I'll create a SQL table with these fields. Using PHP, I can connect to a MySQL database and perform CRUD operations.\n\nNext, I need functions for adding reviews and displaying them. For adding, I'll write a function that takes user input\u2014name, rating, and comment\u2014and inserts it into the database. I should remember to escape the inputs to prevent SQL injection, maybe using mysqli_real_escape_string since we're using mysqli.\n\nThen, for displaying the reviews, another function will fetch all entries from the table. It should order them by date so the newest appears first. Each review will be converted into an associative array and returned as a list.\n\nI also need to handle user input on the frontend. I'll create a simple HTML form with fields for name, rating (using radio buttons), and comment. The form will submit to a PHP script that processes the submission by calling the add_review function. If there's an error, it should display a message; otherwise, redirect back to the reviews page.\n\nSecurity is important. I'll make sure to use prepared statements or at least escape strings to prevent SQL injection. Also, validating user inputs on both client and server sides would be good practice, but maybe that's beyond the initial scope.\n\nI should include examples of how to use these functions in a PHP script. That means showing how to connect to the database, call add_review upon form submission, and then display the reviews using show_reviews.\n\nPutting it all together, I'll structure the code with the necessary includes, function definitions, and example usage. Testing each part step by step would help catch any issues early on.\n\nI think that covers the main points. Now, I can draft the PHP code with these considerations in mind.\n</think>\n\nHere's an example of a user review system using PHP:\n\nThis implementation will include functions to:\n1. Add new reviews\n2. Display all reviews\n3. Calculate average rating\n4. Validate user input\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Table structure\n// CREATE TABLE reviews (\n//     id INT AUTO_INCREMENT PRIMARY KEY,\n//     user_name VARCHAR(100),\n//     rating INT CHECK (rating >= 1 AND rating <=5),\n//     comment TEXT,\n//     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n// );\n\nfunction add_review($user_name, $rating, $comment) {\n    global $conn;\n    \n    // Sanitize inputs\n    $user_name = mysqli_real_escape_string($conn, $user_name);\n    $rating = intval($rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Validate inputs\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    $sql = \"INSERT INTO reviews (user_name, rating, comment) VALUES ('$user_name', $rating, '$comment')\";\n    \n    if ($conn->query($sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction show_reviews() {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews ORDER BY created_at DESC\";\n    $result = $conn->query($sql);\n    \n    $reviews = array();\n    while ($row = $result->fetch_assoc()) {\n        $reviews[] = $row;\n    }\n    \n    return $reviews;\n}\n\nfunction calculate_average_rating() {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($sql);\n    $row = $result->fetch_assoc();\n    \n    return number_format((float)$row['average'], 1, '.', '');\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['submit_review'])) {\n        $user_name = $_POST['user_name'];\n        $rating = $_POST['rating'];\n        $comment = $_POST['comment'];\n        \n        if (add_review($user_name, $rating, $comment)) {\n            header(\"Location: reviews.php\");\n            exit();\n        } else {\n            echo \"Error adding review!\";\n        }\n    }\n}\n\n// Get all reviews\n$reviews = show_reviews();\n\n// Get average rating\n$average_rating = calculate_average_rating();\n\n$conn->close();\n?>\n```\n\nTo use this code, you'll need to:\n\n1. Create a MySQL database named `reviews_db`\n2. Create the `reviews` table with the specified structure\n3. Update the database credentials in the configuration section\n\nHere's an example of how to display the review form and show reviews:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Reviews System</title>\n</head>\n<body>\n    <!-- Review Form -->\n    <h2>Add a Review</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <input type=\"text\" name=\"user_name\" placeholder=\"Your Name\" required><br>\n        <select name=\"rating\" required>\n            <option value=\"\">Choose Rating</option>\n            <option value=\"5\">5 Stars</option>\n            <option value=\"4\">4 Stars</option>\n            <option value=\"3\">3 Stars</option>\n            <option value=\"2\">2 Stars</option>\n            <option value=\"1\">1 Star</option>\n        </select><br>\n        <textarea name=\"comment\" placeholder=\"Your Review\" required></textarea><br>\n        <input type=\"submit\" name=\"submit_review\" value=\"Submit Review\">\n    </form>\n\n    <!-- Display Reviews -->\n    <h2>Reviews (Average: <?php echo $average_rating; ?>)</h2>\n    <?php foreach ($reviews as $review): ?>\n        <div style=\"border-bottom: 1px solid #ccc; padding-bottom: 10px;\">\n            <strong><?php echo $review['user_name']; ?></strong> - <?php echo str_repeat('\u2605', $review['rating']); ?><br>\n            <p><?php echo $review['comment']; ?></p>\n            <small>Posted on <?php echo date('F j, Y, g:i a', strtotime($review['created_at'])); ?></small>\n        </div>\n    <?php endforeach; ?>\n\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        form input[type=\"text\"], form select, form textarea {\n            width: 100%;\n            margin-bottom: 10px;\n            padding: 8px;\n            box-sizing: border-box;\n        }\n        form textarea {\n            height: 150px;\n        }\n        form input[type=\"submit\"] {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n        }\n        form input[type=\"submit\"]:hover {\n            background-color: #45a049;\n        }\n    </style>\n</body>\n</html>\n```\n\nThis implementation includes:\n\n1. A review submission form\n2. Input validation and sanitization\n3. Display of all reviews with user name, rating, comment, and timestamp\n4. Average rating calculation\n5. Basic styling for better presentation\n\nFeatures:\n- Users can submit reviews with ratings from 1 to 5 stars\n- Reviews are displayed in reverse chronological order (newest first)\n- Each review shows the user's name, star rating, comment, and posting date\n- The average rating is calculated and displayed\n- Simple and clean UI\n\nTo use this code:\n1. Save it as `reviews.php`\n2. Make sure your database is set up correctly\n3. Open in a web browser\n4. Submit reviews through the form\n\nNote: This is a basic implementation and you might want to add additional features like:\n- User authentication\n- Review editing/deletion\n- Validation using JavaScript on the client side\n- More sophisticated error handling\n- Pagination for long lists of reviews\n- Spam prevention measures", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Table structure\n// CREATE TABLE reviews (\n//     id INT AUTO_INCREMENT PRIMARY KEY,\n//     user_name VARCHAR(100),\n//     rating INT CHECK (rating >= 1 AND rating <=5),\n//     comment TEXT,\n//     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n// );\n\nfunction add_review($user_name, $rating, $comment) {\n    global $conn;\n    \n    // Sanitize inputs\n    $user_name = mysqli_real_escape_string($conn, $user_name);\n    $rating = intval($rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Validate inputs\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    $sql = \"INSERT INTO reviews (user_name, rating, comment) VALUES ('$user_name', $rating, '$comment')\";\n    \n    if ($conn->query($sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction show_reviews() {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews ORDER BY created_at DESC\";\n    $result = $conn->query($sql);\n    \n    $reviews = array();\n    while ($row = $result->fetch_assoc()) {\n        $reviews[] = $row;\n    }\n    \n    return $reviews;\n}\n\nfunction calculate_average_rating() {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($sql);\n    $row = $result->fetch_assoc();\n    \n    return number_format((float)$row['average'], 1, '.', '');\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['submit_review'])) {\n        $user_name = $_POST['user_name'];\n        $rating = $_POST['rating'];\n        $comment = $_POST['comment'];\n        \n        if (add_review($user_name, $rating, $comment)) {\n            header(\"Location: reviews.php\");\n            exit();\n        } else {\n            echo \"Error adding review!\";\n        }\n    }\n}\n\n// Get all reviews\n$reviews = show_reviews();\n\n// Get average rating\n$average_rating = calculate_average_rating();\n\n$conn->close();\n?>\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Reviews System</title>\n</head>\n<body>\n    <!-- Review Form -->\n    <h2>Add a Review</h2>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <input type=\"text\" name=\"user_name\" placeholder=\"Your Name\" required><br>\n        <select name=\"rating\" required>\n            <option value=\"\">Choose Rating</option>\n            <option value=\"5\">5 Stars</option>\n            <option value=\"4\">4 Stars</option>\n            <option value=\"3\">3 Stars</option>\n            <option value=\"2\">2 Stars</option>\n            <option value=\"1\">1 Star</option>\n        </select><br>\n        <textarea name=\"comment\" placeholder=\"Your Review\" required></textarea><br>\n        <input type=\"submit\" name=\"submit_review\" value=\"Submit Review\">\n    </form>\n\n    <!-- Display Reviews -->\n    <h2>Reviews (Average: <?php echo $average_rating; ?>)</h2>\n    <?php foreach ($reviews as $review): ?>\n        <div style=\"border-bottom: 1px solid #ccc; padding-bottom: 10px;\">\n            <strong><?php echo $review['user_name']; ?></strong> - <?php echo str_repeat('\u2605', $review['rating']); ?><br>\n            <p><?php echo $review['comment']; ?></p>\n            <small>Posted on <?php echo date('F j, Y, g:i a', strtotime($review['created_at'])); ?></small>\n        </div>\n    <?php endforeach; ?>\n\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        form input[type=\"text\"], form select, form textarea {\n            width: 100%;\n            margin-bottom: 10px;\n            padding: 8px;\n            box-sizing: border-box;\n        }\n        form textarea {\n            height: 150px;\n        }\n        form input[type=\"submit\"] {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n        }\n        form input[type=\"submit\"]:hover {\n            background-color: #45a049;\n        }\n    </style>\n</body>\n</html>\n```"]}
