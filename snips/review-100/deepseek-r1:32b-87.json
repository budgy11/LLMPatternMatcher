{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should consider the purpose of the function. It's for displaying user reviews on a website, so it needs to fetch data from a database and present it in an HTML format. \n\nI'll start by outlining the necessary components. The function will need a database connection because it has to retrieve review data. I remember that using PDO is good practice for database interactions in PHP because it supports multiple databases and helps prevent SQL injection.\n\nNext, I should structure the function. It should probably take parameters like the product ID or service ID since reviews are usually tied to specific items. That way, when someone calls the function, they can specify which product's reviews to display.\n\nThe function will execute a SELECT query to fetch all reviews related to the given product ID. I'll make sure to order them by the review date so that the newest ones appear first. \n\nOnce the data is fetched, it needs to be displayed. Each review should have the user's name, their review text, and the date they submitted it. Including a star rating would add more value, so I'll need to generate stars based on the rating score.\n\nI'll create a helper function called get_stars to handle the star display. It will take the rating as input and return HTML for full stars, half stars, or an empty star if there's no rating. This keeps the main function clean and separates concerns.\n\nSecurity is important, so I'll make sure all user inputs are escaped using htmlspecialchars() to prevent any XSS attacks. Also, validating the product ID before querying will ensure it's a number, which adds another layer of security against SQL injection.\n\nI should handle cases where there are no reviews yet by displaying a friendly message instead of leaving the section empty or causing an error.\n\nFinally, I'll test the function with sample data to make sure everything works as expected. I'll check if all parts are correctly displayed and that edge cases, like when there's no rating or no reviews, are handled properly.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\nfunction display_reviews($product_id) {\n    global $conn;\n    \n    // SQL query to fetch reviews\n    $sql = \"SELECT review_id, user_name, review_text, rating, review_date \n            FROM reviews \n            WHERE product_id = :product_id \n            ORDER BY review_date DESC\";\n            \n    try {\n        // Prepare and execute the statement\n        $stmt = $conn->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id, PDO::PARAM_INT);\n        $stmt->execute();\n        \n        // Check if there are any reviews\n        if ($stmt->rowCount() == 0) {\n            echo \"<div class='no-reviews'>No reviews yet!</div>\";\n            return;\n        }\n        \n        // Display each review\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $user_name = htmlspecialchars($row['user_name']);\n            $review_text = htmlspecialchars($row['review_text']);\n            $rating = $row['rating'];\n            $review_date = date('F j, Y', strtotime($row['review_date']));\n            \n            echo \"<div class='review'>\";\n                echo \"<h3>$user_name</h3>\";\n                echo \"<p>Rating: \" . get_stars($rating) . \"</p>\";\n                echo \"<p>$review_text</p>\";\n                echo \"<small>Posted on $review_date</small>\";\n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Query failed: \" . $e->getMessage());\n    }\n}\n\nfunction get_stars($rating = 0) {\n    // Maximum rating\n    $max_rating = 5;\n    \n    $full_star = \"<span class='star'>\u2605</span>\";\n    $half_star = \"<span class='star'>\u2be8</span>\"; // Half star\n    $empty_star = \"<span class='star'>\u2606</span>\";\n    \n    $stars_html = '';\n    \n    if ($rating > 0 && $rating <= $max_rating) {\n        for ($i = 1; $i <= $max_rating; $i++) {\n            if ($rating >= $i + 0.5) {\n                $stars_html .= $full_star;\n            } elseif ($rating >= $i - 0.5) {\n                $stars_html .= $half_star;\n            } else {\n                $stars_html .= $empty_star;\n            }\n        }\n    } else {\n        // Show empty stars if no rating\n        for ($i = 1; $i <= $max_rating; $i++) {\n            $stars_html .= $empty_star;\n        }\n    }\n    \n    return $stars_html;\n}\n\n// Example usage:\nif (isset($_GET['product_id']) && is_numeric($_GET['product_id'])) {\n    display_reviews($_GET['product_id']);\n} else {\n    echo \"Invalid product ID.\";\n}\n?>\n```\n\nThis code includes:\n\n1. Database connection setup using PDO\n2. A `display_reviews()` function that takes a product ID and retrieves reviews from the database\n3. A helper function `get_stars()` to display rating stars visually\n4. Proper escaping of user input data to prevent XSS attacks\n5. Error handling for database queries\n\nFeatures:\n\n- Displays reviews with user names, ratings (as stars), review text, and date\n- Handles cases where there are no reviews yet\n- Shows empty stars when no rating is provided\n- Uses prepared statements to prevent SQL injection\n- Proper error handling for database connections and queries\n\nTo use this code:\n\n1. Replace the database configuration details (`host`, `dbname`, `username`, `password`) with your actual database credentials\n2. Make sure you have a table named 'reviews' with columns:\n   - review_id (INT)\n   - product_id (INT)\n   - user_name (VARCHAR)\n   - review_text (TEXT)\n   - rating (FLOAT)\n   - review_date (DATE)\n\n3. Call the `display_reviews()` function with a valid product ID to display reviews for that product\n\nYou can customize the HTML output by modifying the echo statements in the `display_reviews()` function.\n\nTo improve this code, you could:\n\n1. Add pagination for products with many reviews\n2. Implement sorting options (e.g., newest first or highest rated)\n3. Add validation for user input data before storing it in the database\n4. Include a form to submit new reviews\n5. Add CSS styling for better visual presentation\n\nRemember to:\n- Always sanitize and validate user input data\n- Use prepared statements to prevent SQL injection\n- Keep your database credentials secure\n- Regularly back up your database\n- Test with different scenarios (no reviews, invalid product IDs, etc.)", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\nfunction display_reviews($product_id) {\n    global $conn;\n    \n    // SQL query to fetch reviews\n    $sql = \"SELECT review_id, user_name, review_text, rating, review_date \n            FROM reviews \n            WHERE product_id = :product_id \n            ORDER BY review_date DESC\";\n            \n    try {\n        // Prepare and execute the statement\n        $stmt = $conn->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id, PDO::PARAM_INT);\n        $stmt->execute();\n        \n        // Check if there are any reviews\n        if ($stmt->rowCount() == 0) {\n            echo \"<div class='no-reviews'>No reviews yet!</div>\";\n            return;\n        }\n        \n        // Display each review\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $user_name = htmlspecialchars($row['user_name']);\n            $review_text = htmlspecialchars($row['review_text']);\n            $rating = $row['rating'];\n            $review_date = date('F j, Y', strtotime($row['review_date']));\n            \n            echo \"<div class='review'>\";\n                echo \"<h3>$user_name</h3>\";\n                echo \"<p>Rating: \" . get_stars($rating) . \"</p>\";\n                echo \"<p>$review_text</p>\";\n                echo \"<small>Posted on $review_date</small>\";\n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        die(\"Query failed: \" . $e->getMessage());\n    }\n}\n\nfunction get_stars($rating = 0) {\n    // Maximum rating\n    $max_rating = 5;\n    \n    $full_star = \"<span class='star'>\u2605</span>\";\n    $half_star = \"<span class='star'>\u2be8</span>\"; // Half star\n    $empty_star = \"<span class='star'>\u2606</span>\";\n    \n    $stars_html = '';\n    \n    if ($rating > 0 && $rating <= $max_rating) {\n        for ($i = 1; $i <= $max_rating; $i++) {\n            if ($rating >= $i + 0.5) {\n                $stars_html .= $full_star;\n            } elseif ($rating >= $i - 0.5) {\n                $stars_html .= $half_star;\n            } else {\n                $stars_html .= $empty_star;\n            }\n        }\n    } else {\n        // Show empty stars if no rating\n        for ($i = 1; $i <= $max_rating; $i++) {\n            $stars_html .= $empty_star;\n        }\n    }\n    \n    return $stars_html;\n}\n\n// Example usage:\nif (isset($_GET['product_id']) && is_numeric($_GET['product_id'])) {\n    display_reviews($_GET['product_id']);\n} else {\n    echo \"Invalid product ID.\";\n}\n?>\n```"]}
