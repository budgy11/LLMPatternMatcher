{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, the main purpose is to allow users to submit reviews and display them on a webpage. So, I'll need both the submission form and the display functionality.\n\nI should start by setting up a database connection because the reviews will be stored there. I remember that using mysqli is better than the older mysql functions for security and performance. Maybe I'll create a helper function to connect to the database, like db_connect(), which returns the mysqli object after connecting with the credentials.\n\nNext, I need an HTML form where users can input their name and review. The form should use POST method so that data is sent securely. Also, including some basic validation here would be good\u2014like checking if both fields are filled out before submitting. Maybe using JavaScript for client-side validation to prevent empty submissions. Oh, but the PHP code will handle server-side validation as well.\n\nFor inserting reviews into the database, I'll write a function called insert_review(). It should take user_id, name, and review as parameters. Wait, where does the user_id come from? Maybe I should assume that users are logged in and their ID is stored in a session variable. So, in the PHP code, I can retrieve it using $_SESSION['user_id'], but I need to ensure sessions are started properly.\n\nNow, after inserting the review into the database, redirecting back to the same page makes sense so that the user doesn't resubmit by refreshing. Using header(\"Location: ...\") with a refresh message would work.\n\nThen, displaying the reviews requires fetching them from the database. The get_reviews() function can handle this by selecting all entries from the reviews table. I'll order them by date to show the latest first. Each review should display the user's name, their review text, and the date it was posted. Maybe I'll format the date using PHP's date() function for readability.\n\nAlso, each review should have a delete button. But wait, users shouldn't be able to delete others' reviews. So, the delete functionality needs proper authorization. Perhaps adding an 'admin' column in the users table would allow admins to delete any review, while regular users can only delete their own. This requires checking the current user's role before allowing deletion.\n\nThe delete_review() function will handle removing a specific review based on its ID. Again, it should check if the current user is authorized\u2014either an admin or the owner of the review.\n\nSecurity considerations are important here. I need to use prepared statements with mysqli to prevent SQL injection attacks, especially when inserting and deleting reviews. This means using bind_param() for the variables in the queries.\n\nAdditionally, sanitizing input data before storing it can help prevent XSS attacks. Using htmlspecialchars() on the output will ensure that any HTML or scripts in the reviews are displayed safely.\n\nI should also think about error handling. For example, if inserting a review fails, displaying an error message would be helpful. Similarly, if there's no internet connection or database issues, the user should receive a meaningful response instead of seeing a blank page or errors.\n\nTesting is crucial. I'll need to check each part: form submission, database insertion, display, deletion by owners and admins, and ensure that unauthorized users can't delete others' reviews.\n\nFinally, organizing the code into functions makes it cleaner and more maintainable. Including these functions in the main PHP file or separating them into different files based on functionality could be considered for scalability.\n\nI think I've covered the main points. Now, putting it all together step by step, making sure each part works before moving on to the next.\n</think>\n\nCreating a user review function involves handling form submissions, storing reviews in a database, displaying reviews, and allowing users to delete their own reviews (and admins to delete any). Here's how you can implement this:\n\n**Step 1: Create the HTML Form**\n\n```html\n<!-- Review Submission Form -->\n<form action=\"submit_review.php\" method=\"POST\">\n    <input type=\"hidden\" name=\"user_id\" value=\"<?php echo $current_user_id; ?>\">\n    <div class=\"form-group\">\n        <label for=\"review_name\">Name:</label>\n        <input type=\"text\" id=\"review_name\" name=\"review_name\" required>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"review_text\">Review:</label>\n        <textarea id=\"review_text\" name=\"review_text\" rows=\"4\" required></textarea>\n    </div>\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\n**Step 2: Insert Reviews into the Database (submit_review.php)**\n\n```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $current_user_id = $_SESSION['user_id'];\n    $review_name = mysqli_real_escape_string($conn, $_POST['review_name']);\n    $review_text = mysqli_real_escape_string($conn, $_POST['review_text']);\n\n    if (!empty($review_name) && !empty($review_text)) {\n        $sql = \"INSERT INTO reviews (user_id, name, review_text) VALUES (?, ?, ?)\";\n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, 'iss', $current_user_id, $review_name, $review_text);\n\n        if (mysqli_stmt_execute($stmt)) {\n            echo \"Review submitted successfully!\";\n            header(\"Location: reviews.php?refresh=true\");\n            exit();\n        } else {\n            die(\"Error submitting review: \" . mysqli_error($conn));\n        }\n    } else {\n        die(\"Please fill in all fields.\");\n    }\n}\n?>\n```\n\n**Step 3: Display Reviews (reviews.php)**\n\n```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nfunction get_reviews() {\n    global $conn;\n    $sql = \"SELECT r.*, u.role FROM reviews r LEFT JOIN users u ON r.user_id = u.id ORDER BY date_posted DESC\";\n    $result = mysqli_query($conn, $sql);\n    return $result ? mysqli_fetch_all($result, MYSQLI_ASSOC) : [];\n}\n\n$reviews = get_reviews();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Reviews</title>\n</head>\n<body>\n    <?php foreach ($reviews as $review): ?>\n        <div class=\"review-box\">\n            <h3><?php echo htmlspecialchars($review['name']); ?></h3>\n            <p><?php echo nl2br(htmlspecialchars($review['review_text'])); ?></p>\n            <small>Posted on: <?php echo date('F j, Y', strtotime($review['date_posted'])); ?></small>\n            \n            <!-- Delete Review Button -->\n            <?php if ($_SESSION['user_id'] == $review['user_id'] || $_SESSION['role'] == 'admin'): ?>\n                <form action=\"delete_review.php\" method=\"POST\">\n                    <input type=\"hidden\" name=\"review_id\" value=\"<?php echo $review['id']; ?>\">\n                    <button type=\"submit\">Delete</button>\n                </form>\n            <?php endif; ?>\n        </div>\n    <?php endforeach; ?>\n\n    <!-- Review Form -->\n    <?php include 'review_form.php'; ?>\n</body>\n</html>\n```\n\n**Step 4: Delete Reviews (delete_review.php)**\n\n```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $current_user_id = $_SESSION['user_id'];\n    $review_id = intval($_POST['review_id']);\n\n    // Check if user is admin or owner of the review\n    $sql = \"SELECT user_id FROM reviews WHERE id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $review_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n\n    if ($row = mysqli_fetch_assoc($result)) {\n        if ($row['user_id'] == $current_user_id || $_SESSION['role'] == 'admin') {\n            // Delete the review\n            $delete_sql = \"DELETE FROM reviews WHERE id = ?\";\n            $delete_stmt = mysqli_prepare($conn, $delete_sql);\n            mysqli_stmt_bind_param($delete_stmt, 'i', $review_id);\n\n            if (mysqli_stmt_execute($delete_stmt)) {\n                header(\"Location: reviews.php?refresh=true\");\n                exit();\n            } else {\n                die(\"Error deleting review: \" . mysqli_error($conn));\n            }\n        } else {\n            die(\"You are not authorized to delete this review.\");\n        }\n    } else {\n        die(\"Review not found.\");\n    }\n}\n?>\n```\n\n**Step 5: Database Connection (db_connection.php)**\n\n```php\n<?php\n$host = 'localhost';\n$db_name = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new mysqli($host, $username, $password, $db_name);\n} catch (Exception $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n?>\n```\n\n**Security Notes:**\n\n1. **Prepared Statements:** Use prepared statements with `mysqli_stmt_bind_param()` to prevent SQL injection.\n2. **Input Sanitization:** Escape user input data using `mysqli_real_escape_string()`.\n3. **Output Sanitization:** Use `htmlspecialchars()` when displaying user-generated content to prevent XSS attacks.\n4. **Authorization Checks:** Ensure that only the review owner or admins can delete reviews.\n\n**Additional Features:**\n\n- Add validation for empty fields and proper error messages.\n- Implement a rating system (1-5 stars) by adding a `<select>` element in the form and storing the rating value.\n- Add pagination if there are many reviews to display.\n- Include user avatars or photos next to each review.\n\n**Remember:**\n\n- Always validate user input on both the client-side (JavaScript) and server-side (PHP).\n- Use HTTPS to encrypt data transmission between the browser and your server.\n- Regularly back up your database and test your functions thoroughly.", "code_blocks": [null, "```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $current_user_id = $_SESSION['user_id'];\n    $review_name = mysqli_real_escape_string($conn, $_POST['review_name']);\n    $review_text = mysqli_real_escape_string($conn, $_POST['review_text']);\n\n    if (!empty($review_name) && !empty($review_text)) {\n        $sql = \"INSERT INTO reviews (user_id, name, review_text) VALUES (?, ?, ?)\";\n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, 'iss', $current_user_id, $review_name, $review_text);\n\n        if (mysqli_stmt_execute($stmt)) {\n            echo \"Review submitted successfully!\";\n            header(\"Location: reviews.php?refresh=true\");\n            exit();\n        } else {\n            die(\"Error submitting review: \" . mysqli_error($conn));\n        }\n    } else {\n        die(\"Please fill in all fields.\");\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nfunction get_reviews() {\n    global $conn;\n    $sql = \"SELECT r.*, u.role FROM reviews r LEFT JOIN users u ON r.user_id = u.id ORDER BY date_posted DESC\";\n    $result = mysqli_query($conn, $sql);\n    return $result ? mysqli_fetch_all($result, MYSQLI_ASSOC) : [];\n}\n\n$reviews = get_reviews();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Reviews</title>\n</head>\n<body>\n    <?php foreach ($reviews as $review): ?>\n        <div class=\"review-box\">\n            <h3><?php echo htmlspecialchars($review['name']); ?></h3>\n            <p><?php echo nl2br(htmlspecialchars($review['review_text'])); ?></p>\n            <small>Posted on: <?php echo date('F j, Y', strtotime($review['date_posted'])); ?></small>\n            \n            <!-- Delete Review Button -->\n            <?php if ($_SESSION['user_id'] == $review['user_id'] || $_SESSION['role'] == 'admin'): ?>\n                <form action=\"delete_review.php\" method=\"POST\">\n                    <input type=\"hidden\" name=\"review_id\" value=\"<?php echo $review['id']; ?>\">\n                    <button type=\"submit\">Delete</button>\n                </form>\n            <?php endif; ?>\n        </div>\n    <?php endforeach; ?>\n\n    <!-- Review Form -->\n    <?php include 'review_form.php'; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $current_user_id = $_SESSION['user_id'];\n    $review_id = intval($_POST['review_id']);\n\n    // Check if user is admin or owner of the review\n    $sql = \"SELECT user_id FROM reviews WHERE id = ?\";\n    $stmt = mysqli_prepare($conn, $sql);\n    mysqli_stmt_bind_param($stmt, 'i', $review_id);\n    mysqli_stmt_execute($stmt);\n    $result = mysqli_stmt_get_result($stmt);\n\n    if ($row = mysqli_fetch_assoc($result)) {\n        if ($row['user_id'] == $current_user_id || $_SESSION['role'] == 'admin') {\n            // Delete the review\n            $delete_sql = \"DELETE FROM reviews WHERE id = ?\";\n            $delete_stmt = mysqli_prepare($conn, $delete_sql);\n            mysqli_stmt_bind_param($delete_stmt, 'i', $review_id);\n\n            if (mysqli_stmt_execute($delete_stmt)) {\n                header(\"Location: reviews.php?refresh=true\");\n                exit();\n            } else {\n                die(\"Error deleting review: \" . mysqli_error($conn));\n            }\n        } else {\n            die(\"You are not authorized to delete this review.\");\n        }\n    } else {\n        die(\"Review not found.\");\n    }\n}\n?>\n```", "```php\n<?php\n$host = 'localhost';\n$db_name = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new mysqli($host, $username, $password, $db_name);\n} catch (Exception $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n?>\n```"]}
