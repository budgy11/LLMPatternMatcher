{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to help the user create a PHP function for handling user reviews. Let me break down what's needed.\n\nFirst, the function should accept parameters like user ID and rating. That makes sense because each review is tied to a specific user and their rating.\n\nNext, I should validate these inputs. The user ID must be an integer, so I'll check if it's not numeric and throw an error if it isn't. For the rating, it should be between 1 and 5. If it's outside that range, another exception is thrown.\n\nThen, I need to connect to the database. Using mysqli for a secure connection. I'll require the host, username, password, and database name from the configuration file.\n\nAfter connecting, I should check if the user has already reviewed. A SELECT query on the reviews table where user_id matches will tell me that. If there's a result, an exception is thrown to prevent multiple submissions.\n\nIf it's a new review, I'll insert the data into the reviews table with current timestamp and default votes. That way, each review is recorded properly.\n\nCalculating the average rating is next. I'll fetch all ratings from the database, sum them up, count the number of reviews, and compute the average. If there are no reviews yet, the average is 0 to avoid division by zero.\n\nFinally, I'll display a success message with the new average rating formatted to two decimal places. This provides immediate feedback to the user.\n\nI also need to include error handling for database connection issues and query failures. Using try-catch blocks will help manage exceptions gracefully and display appropriate messages to the user.\n\nPutting it all together, the function should handle input validation, database operations, average calculation, and provide user feedback, ensuring a smooth review submission process.\n</think>\n\nHere's an example of a user review function in PHP that handles adding reviews, calculating average ratings, and displaying results:\n\n```php\n<?php\nfunction submitReview($userId, $rating) {\n    // Validate inputs\n    if (!is_numeric($userId)) {\n        throw new Exception(\"Invalid user ID\");\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new Exception(\"Rating must be between 1 and 5\");\n    }\n\n    try {\n        // Database connection details\n        require_once('db_config.php');\n\n        // Connect to database\n        $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n        \n        if ($conn->connect_error) {\n            throw new Exception(\"Database connection failed: \" . $conn->connect_error);\n        }\n\n        // Check if user has already submitted a review\n        $checkQuery = \"SELECT * FROM reviews WHERE user_id = ?\";\n        $stmt = $conn->prepare($checkQuery);\n        $stmt->bind_param('i', $userId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            throw new Exception(\"User has already submitted a review\");\n        }\n\n        // Insert the new review\n        $insertQuery = \"INSERT INTO reviews (user_id, rating, review_date) \n                       VALUES (?, ?, CURRENT_TIMESTAMP)\";\n        $stmt = $conn->prepare($insertQuery);\n        $stmt->bind_param('ii', $userId, $rating);\n        $stmt->execute();\n\n        // Calculate average rating\n        $averageRating = calculateAverageRating($conn);\n\n        // Close database connection\n        $conn->close();\n\n        return \"Review submitted successfully! Current average rating: \" . number_format($averageRating, 2);\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\nfunction calculateAverageRating($conn) {\n    $query = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($query);\n    \n    if ($result === false) {\n        throw new Exception(\"Error calculating average rating: \" . $conn->error);\n    }\n\n    $row = $result->fetch_assoc();\n    return $row['average'];\n}\n?>\n```\n\nThis code includes:\n\n1. A `submitReview()` function that:\n   - Validates user input\n   - Connects to the database\n   - Checks if the user has already submitted a review\n   - Inserts a new review record\n   - Calculates and returns the average rating\n\n2. A helper function `calculateAverageRating()` that computes the current average rating from all reviews.\n\nKey features:\n\n- Input validation for user ID and rating\n- Error handling with exceptions\n- Database connection management\n- Prevention of duplicate reviews\n- Average rating calculation\n- Clean separation of concerns\n\nTo use this code:\n\n1. Create a `db_config.php` file with your database credentials:\n```php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n?>\n```\n\n2. Ensure you have a `reviews` table in your database with the following structure:\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    rating INT NOT NULL,\n    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n3. Call the function when submitting a review:\n```php\ntry {\n    $result = submitReview($_POST['user_id'], $_POST['rating']);\n    echo $result;\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\nThis implementation provides:\n- Security through prepared statements and input validation\n- Error handling for database operations\n- Clear feedback to users\n- Easy maintenance and extension\n\nYou can extend this further by adding features like:\n- Review comments\n- Timestamp tracking\n- Review editing/deletion\n- User verification before submission", "code_blocks": ["```php\n<?php\nfunction submitReview($userId, $rating) {\n    // Validate inputs\n    if (!is_numeric($userId)) {\n        throw new Exception(\"Invalid user ID\");\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new Exception(\"Rating must be between 1 and 5\");\n    }\n\n    try {\n        // Database connection details\n        require_once('db_config.php');\n\n        // Connect to database\n        $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n        \n        if ($conn->connect_error) {\n            throw new Exception(\"Database connection failed: \" . $conn->connect_error);\n        }\n\n        // Check if user has already submitted a review\n        $checkQuery = \"SELECT * FROM reviews WHERE user_id = ?\";\n        $stmt = $conn->prepare($checkQuery);\n        $stmt->bind_param('i', $userId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows > 0) {\n            throw new Exception(\"User has already submitted a review\");\n        }\n\n        // Insert the new review\n        $insertQuery = \"INSERT INTO reviews (user_id, rating, review_date) \n                       VALUES (?, ?, CURRENT_TIMESTAMP)\";\n        $stmt = $conn->prepare($insertQuery);\n        $stmt->bind_param('ii', $userId, $rating);\n        $stmt->execute();\n\n        // Calculate average rating\n        $averageRating = calculateAverageRating($conn);\n\n        // Close database connection\n        $conn->close();\n\n        return \"Review submitted successfully! Current average rating: \" . number_format($averageRating, 2);\n\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\nfunction calculateAverageRating($conn) {\n    $query = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($query);\n    \n    if ($result === false) {\n        throw new Exception(\"Error calculating average rating: \" . $conn->error);\n    }\n\n    $row = $result->fetch_assoc();\n    return $row['average'];\n}\n?>\n```", "```php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n?>\n```", null, "```php\ntry {\n    $result = submitReview($_POST['user_id'], $_POST['rating']);\n    echo $result;\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
