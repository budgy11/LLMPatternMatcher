{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user wants to create a user review function using PHP. I need to figure out how to approach this.\n\nFirst, I should outline what a review system typically includes. It usually involves allowing users to leave reviews and ratings for something, like a product or service. So, the function needs to handle storing these reviews in a database.\n\nI'll start by thinking about the database structure. A table called 'reviews' makes sense, with fields like id, user_id, product_id, rating, comment, and timestamp. This captures all necessary information for each review.\n\nNext, I need functions to add reviews, retrieve them, calculate average ratings, count reviews, and display them. Let me break this down into steps.\n\n1. **Adding a Review**: The function should take user input\u2014user ID, product ID, rating, and comment\u2014and insert it into the database. I'll write a PHP function called add_review that uses prepared statements to prevent SQL injection.\n\n2. **Retrieving Reviews**: Another function, get_reviews, will fetch all reviews for a specific product. It should order them by the most recent first, so I'll include an ORDER BY clause in the SQL query.\n\n3. **Average Rating Calculation**: To find the average rating, I'll create a function called calculate_average_rating. This function will compute the average from all ratings stored in the database for a given product.\n\n4. **Review Count**: The count_reviews function is straightforward; it just counts how many reviews exist for a particular product.\n\n5. **Displaying Reviews**: Finally, display_reviews will loop through each review retrieved and format them into HTML elements like divs or paragraphs. This makes the reviews user-friendly on a webpage.\n\nI should also consider security measures, such as using prepared statements to prevent SQL injection attacks. Additionally, ensuring that only authenticated users can submit reviews is important, but for simplicity, I'll assume that's handled elsewhere.\n\nTesting each function is crucial. For example, after adding a review, checking if it appears in the get_reviews output and verifying that the average rating updates correctly.\n\nPotential improvements could include pagination for long lists of reviews, validation to ensure ratings are between 1-5, or allowing users to edit their reviews. But for now, I'll stick to the basic functionality as per the user's request.\n\nPutting it all together, the code will connect to a MySQL database and use these functions to manage and display user reviews effectively.\n</think>\n\nHere's an example of a user review function in PHP that allows users to submit reviews, store them in a database, and display them:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'reviews_db';\n\n$conn = new mysqli($host, $username, $password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction add_review($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Escape special characters and sanitize input\n    $user_id = mysqli_real_escape_string($conn, $user_id);\n    $product_id = mysqli_real_escape_string($conn, $product_id);\n    $rating = intval($rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Check if rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (?, ?, ?, ?, NOW())\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews WHERE product_id = ? ORDER BY review_date DESC\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to calculate average rating\nfunction calculate_average_rating($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result()->fetch_assoc();\n    \n    return number_format($result['average'], 1, '.', '');\n}\n\n// Function to count reviews\nfunction count_reviews($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT COUNT(*) as total FROM reviews WHERE product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result()->fetch_assoc();\n    \n    return $result['total'];\n}\n\n// Function to display reviews\nfunction display_reviews($product_id) {\n    $reviews = get_reviews($product_id);\n    $average_rating = calculate_average_rating($product_id);\n    $review_count = count_reviews($product_id);\n    \n    echo \"<div class='review-container'>\";\n    echo \"<h3>\" . $review_count . \" Reviews</h3>\";\n    echo \"<p>Average Rating: \" . $average_rating . \"/5</p>\";\n    \n    if (empty($reviews)) {\n        echo \"<p>No reviews yet!</p>\";\n    } else {\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n            echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"/5</p>\";\n            echo \"<p><strong>Review:</strong> \" . $review['comment'] . \"</p>\";\n            echo \"<p><em>\" . date('M j, Y', strtotime($review['review_date'])) . \"</em></p>\";\n            echo \"</div>\";\n        }\n    }\n    echo \"</div>\";\n}\n\n// Example usage:\nif (isset($_POST['submit_review'])) {\n    $user_id = $_SESSION['user_id']; // Assuming user is logged in\n    $product_id = 1; // Set your product ID here\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (add_review($user_id, $product_id, $rating, $comment)) {\n        echo \"Review submitted successfully!\";\n    } else {\n        echo \"Error submitting review.\";\n    }\n}\n\n// Display reviews for product ID 1\ndisplay_reviews(1);\n\n$conn->close();\n?>\n```\n\nThis code provides the following functionality:\n\n1. `add_review()`: Adds a new review to the database with user details, rating, and comment.\n\n2. `get_reviews()`: Retrieves all reviews for a specific product from the database.\n\n3. `calculate_average_rating()`: Calculates the average rating for a product.\n\n4. `count_reviews()`: Counts the number of reviews for a product.\n\n5. `display_reviews()`: Displays all reviews for a product, including average rating and review count.\n\nTo use this code:\n\n1. Create a MySQL database named 'reviews_db' with a table called 'reviews' containing:\n   - id (INT AUTO_INCREMENT PRIMARY KEY)\n   - user_id (INT)\n   - product_id (INT)\n   - rating (INT)\n   - comment (TEXT)\n   - review_date (DATETIME)\n\n2. Update the database connection details in the code.\n\n3. Use the `display_reviews()` function to show reviews on your webpage.\n\n4. Use the `add_review()` function when submitting new reviews through a form.\n\nExample HTML form to submit reviews:\n\n```html\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <div>\n        <label for=\"rating\">Rating:</label>\n        <select id=\"rating\" name=\"rating\">\n            <option value=\"5\">5 stars</option>\n            <option value=\"4\">4 stars</option>\n            <option value=\"3\">3 stars</option>\n            <option value=\"2\">2 stars</option>\n            <option value=\"1\">1 star</option>\n        </select>\n    </div>\n    <div>\n        <label for=\"comment\">Review:</label>\n        <textarea id=\"comment\" name=\"comment\"></textarea>\n    </div>\n    <button type=\"submit\" name=\"submit_review\">Submit Review</button>\n</form>\n```\n\nFeatures of this implementation:\n\n- Security: Uses prepared statements to prevent SQL injection\n- Input validation: Ensures rating is between 1 and 5\n- Organized structure: Separates different functionalities into distinct functions\n- Easy to integrate: Can be modified for different products or services\n\nRemember to:\n- Add proper error handling as needed\n- Implement user authentication before allowing reviews\n- Add CSS styling to make the review display more visually appealing\n- Modify the database schema and queries based on your specific needs", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'reviews_db';\n\n$conn = new mysqli($host, $username, $password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction add_review($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Escape special characters and sanitize input\n    $user_id = mysqli_real_escape_string($conn, $user_id);\n    $product_id = mysqli_real_escape_string($conn, $product_id);\n    $rating = intval($rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Check if rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (?, ?, ?, ?, NOW())\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews WHERE product_id = ? ORDER BY review_date DESC\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to calculate average rating\nfunction calculate_average_rating($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result()->fetch_assoc();\n    \n    return number_format($result['average'], 1, '.', '');\n}\n\n// Function to count reviews\nfunction count_reviews($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT COUNT(*) as total FROM reviews WHERE product_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result()->fetch_assoc();\n    \n    return $result['total'];\n}\n\n// Function to display reviews\nfunction display_reviews($product_id) {\n    $reviews = get_reviews($product_id);\n    $average_rating = calculate_average_rating($product_id);\n    $review_count = count_reviews($product_id);\n    \n    echo \"<div class='review-container'>\";\n    echo \"<h3>\" . $review_count . \" Reviews</h3>\";\n    echo \"<p>Average Rating: \" . $average_rating . \"/5</p>\";\n    \n    if (empty($reviews)) {\n        echo \"<p>No reviews yet!</p>\";\n    } else {\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n            echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"/5</p>\";\n            echo \"<p><strong>Review:</strong> \" . $review['comment'] . \"</p>\";\n            echo \"<p><em>\" . date('M j, Y', strtotime($review['review_date'])) . \"</em></p>\";\n            echo \"</div>\";\n        }\n    }\n    echo \"</div>\";\n}\n\n// Example usage:\nif (isset($_POST['submit_review'])) {\n    $user_id = $_SESSION['user_id']; // Assuming user is logged in\n    $product_id = 1; // Set your product ID here\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (add_review($user_id, $product_id, $rating, $comment)) {\n        echo \"Review submitted successfully!\";\n    } else {\n        echo \"Error submitting review.\";\n    }\n}\n\n// Display reviews for product ID 1\ndisplay_reviews(1);\n\n$conn->close();\n?>\n```", null]}
