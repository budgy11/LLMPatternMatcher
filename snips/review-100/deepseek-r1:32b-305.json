{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user asked me to create a user review function using PHP. Hmm, I need to figure out what exactly they're looking for. They probably want a way to allow users to leave reviews on their website and then display those reviews somewhere.\n\nFirst, I should consider the database part because without storing the reviews, there's not much point. So, I'll need a table in MySQL that holds the review details. Let me think about the necessary fields: review ID, user ID (so each user can have multiple reviews), product or service ID they're reviewing, the comment itself, rating on a scale of 1 to 5, and a timestamp for when it was submitted.\n\nNext, I need functions to add a new review. That means inserting into the database with all those fields. But wait, security is important here. I should use prepared statements with PDO to prevent SQL injection attacks. That way, user inputs are handled safely.\n\nAfter adding reviews, displaying them is essential. So another function to fetch reviews from the database, maybe ordered by when they were added so the latest ones show up first. This function will return all the necessary details like username, comment, rating, and date.\n\nCalculating the average rating is another key part. Users might want to see an overall score for a product or service. So I'll write a function that averages all ratings where the product ID matches, ensuring it returns zero if there are no reviews yet.\n\nBut wait, how do I handle cases where the user hasn't reviewed a specific product? Oh right, checking if the review exists before allowing them to submit another one is important. That way, each user can only leave one review per product or service.\n\nPutting it all together, I'll outline an example usage in the code comments. This shows how someone might integrate these functions into their site\u2014allowing users to submit reviews and then displaying those reviews along with the average rating.\n\nI should also consider error handling. For instance, if there's a problem inserting a review, the function should return false so the calling code can handle it gracefully. Similarly, checking for existing reviews before insertion prevents duplicates.\n\nOverall, I think covering these aspects\u2014database setup, secure data handling, fetching and displaying reviews, calculating averages, and preventing duplicate submissions\u2014should provide a comprehensive solution for the user.\n</think>\n\nHere's an example of a user review function in PHP that allows users to submit and display product/service reviews:\n\n```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'review_system';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a new review\nfunction addReview($userId, $productId, $comment, $rating) {\n    global $conn;\n    \n    try {\n        // Check if the user has already reviewed this product\n        $checkStmt = $conn->prepare(\"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\");\n        $checkStmt->execute([$userId, $productId]);\n        \n        if ($checkStmt->rowCount() > 0) {\n            return false; // User already reviewed this product\n        }\n        \n        // Insert new review into the database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, comment, rating, created_at) \n                              VALUES (?, ?, ?, ?, NOW())\");\n        $result = $stmt->execute([$userId, $productId, $comment, $rating]);\n        \n        return $result;\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        // Get reviews and user details\n        $stmt = $conn->prepare(\"SELECT r.id, u.username, r.comment, r.rating, \n                                DATE_FORMAT(r.created_at, '%M %d, %Y') AS created_date\n                              FROM reviews r\n                              JOIN users u ON r.user_id = u.id\n                              WHERE r.product_id = ?\n                              ORDER BY r.created_at DESC\");\n        $stmt->execute([$productId]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?\");\n        $stmt->execute([$productId]);\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return $result['average_rating'] ? number_format($result['average_rating'], 1, '.', '') : 0;\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Assuming user is logged in and we have their ID\n    $userId = 1; // Replace with actual user ID\n    $productId = 1; // Replace with actual product ID\n    $comment = $_POST['comment'];\n    $rating = intval($_POST['rating']);\n    \n    if ($rating < 1 || $rating > 5) {\n        die(\"Invalid rating value\");\n    }\n    \n    addReview($userId, $productId, $comment, $rating);\n}\n\n// Display reviews\n$productId = 1; // Replace with actual product ID\n$reviews = getReviews($productId);\n\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>By \" . $review['username'] . \"</h3>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<div class='rating'>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . str_repeat(\"\u2606\", 5 - $review['rating']) . \"</div>\";\n        echo \"<small>Posted on \" . $review['created_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\n$averageRating = getAverageRating($productId);\necho \"<div class='average-rating'>Average Rating: \" . str_repeat(\"\u2605\", intval($averageRating)) . str_repeat(\"\u2606\", 5 - intval($averageRating)) . \" ($averageRating)</div>\";\n?>\n```\n\nThis code includes the following features:\n\n1. A database connection setup using PDO\n\n2. Three main functions:\n   - `addReview()`: Adds a new review to the database\n   - `getReviews()`: Retrieves all reviews for a specific product\n   - `getAverageRating()`: Calculates and returns the average rating for a product\n\n3. Error handling with try-catch blocks\n\n4. Security measures like:\n   - Prepared statements to prevent SQL injection\n   - Input validation for ratings\n   - Checking if user has already reviewed the product\n\n5. Example usage showing how to:\n   - Add a new review when the form is submitted\n   - Display all reviews for a product\n   - Show average rating with stars\n\nTo use this code:\n\n1. Set up your database connection details\n2. Create a table named `reviews` with columns: id, user_id, product_id, comment, rating, created_at\n3. Ensure you have a users table with at least id and username columns\n4. Modify the example usage to fit your actual application (e.g., get user ID from session)\n\nTo add ratings functionality:\n\n1. Users can submit ratings using a 5-star system\n2. The average rating is calculated and displayed\n3. Reviews are only allowed once per user per product\n\nRemember to:\n- Add proper form validation on the frontend\n- Implement CSRF protection for security\n- Store user sessions properly\n- Add appropriate error messages for users\n- Sanitize all user inputs\n\nYou can customize the review display by modifying the HTML structure in the example usage section.", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'review_system';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a new review\nfunction addReview($userId, $productId, $comment, $rating) {\n    global $conn;\n    \n    try {\n        // Check if the user has already reviewed this product\n        $checkStmt = $conn->prepare(\"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\");\n        $checkStmt->execute([$userId, $productId]);\n        \n        if ($checkStmt->rowCount() > 0) {\n            return false; // User already reviewed this product\n        }\n        \n        // Insert new review into the database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, comment, rating, created_at) \n                              VALUES (?, ?, ?, ?, NOW())\");\n        $result = $stmt->execute([$userId, $productId, $comment, $rating]);\n        \n        return $result;\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        // Get reviews and user details\n        $stmt = $conn->prepare(\"SELECT r.id, u.username, r.comment, r.rating, \n                                DATE_FORMAT(r.created_at, '%M %d, %Y') AS created_date\n                              FROM reviews r\n                              JOIN users u ON r.user_id = u.id\n                              WHERE r.product_id = ?\n                              ORDER BY r.created_at DESC\");\n        $stmt->execute([$productId]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?\");\n        $stmt->execute([$productId]);\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return $result['average_rating'] ? number_format($result['average_rating'], 1, '.', '') : 0;\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Assuming user is logged in and we have their ID\n    $userId = 1; // Replace with actual user ID\n    $productId = 1; // Replace with actual product ID\n    $comment = $_POST['comment'];\n    $rating = intval($_POST['rating']);\n    \n    if ($rating < 1 || $rating > 5) {\n        die(\"Invalid rating value\");\n    }\n    \n    addReview($userId, $productId, $comment, $rating);\n}\n\n// Display reviews\n$productId = 1; // Replace with actual product ID\n$reviews = getReviews($productId);\n\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h3>By \" . $review['username'] . \"</h3>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<div class='rating'>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . str_repeat(\"\u2606\", 5 - $review['rating']) . \"</div>\";\n        echo \"<small>Posted on \" . $review['created_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\n$averageRating = getAverageRating($productId);\necho \"<div class='average-rating'>Average Rating: \" . str_repeat(\"\u2605\", intval($averageRating)) . str_repeat(\"\u2606\", 5 - intval($averageRating)) . \" ($averageRating)</div>\";\n?>\n```"]}
