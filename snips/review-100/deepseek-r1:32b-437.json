{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user asked to create a user review function using PHP. I need to figure out what exactly they're looking for. Maybe they want a system where users can leave reviews on their website. So, I should outline the main components needed for such a system.\n\nFirst, I'll consider the functionalities required: allowing users to submit reviews with ratings and comments, displaying these reviews, calculating an average rating, handling voting on reviews, and ensuring security against SQL injection and XSS attacks. These points seem essential.\n\nNext, I'll think about how to structure the PHP code. It should connect to a MySQL database since that's common for web apps. I'll need functions for adding a review, fetching them, displaying with stars, calculating averages, and handling votes.\n\nFor security, using prepared statements is crucial to prevent SQL injection. Also, sanitizing user input will help avoid XSS issues. I should include examples of these practices in the code.\n\nI'll outline each function step by step. For example, add_review needs to take user_id, product_id, rating, and comment, then insert into the database. Fetch_reviews retrieves all reviews for a product, including average ratings and votes. Display functions will show stars based on ratings and format comments safely.\n\nVoting functionality requires updating the vote count when users upvote or downvote. I'll include a function for that and mention how to handle it with AJAX later.\n\nFinally, I'll provide an example usage in HTML, showing form elements for submitting reviews and displaying them. Also, hint at using AJAX for real-time voting without page refreshes.\n\nI should make sure the code is clear and well-commented so the user can understand each part. Including explanations after the code will help them grasp how everything works together.\n</think>\n\nHere's an example of a user review function in PHP that allows users to submit, display, and rate reviews:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews_db';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a new review\nfunction add_review($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Sanitize input\n    $rating = intval($rating);\n    $comment = htmlspecialchars(stripslashes(trim($comment)));\n    \n    // Check if rating is valid (1-5)\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    // Insert review into database\n    $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, created_at) VALUES (?, ?, ?, ?, NOW())\");\n    $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to fetch reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = ? ORDER BY r.created_at DESC\");\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to display reviews\nfunction display_reviews($reviews) {\n    if (empty($reviews)) {\n        echo \"<p>No reviews yet.</p>\";\n        return;\n    }\n    \n    foreach ($reviews as $review) {\n        // Display user information and review content\n        echo \"<div class='review'>\";\n        echo \"<div class='user-info'>\";\n        echo \"<span class='username'>\" . htmlspecialchars($review['username']) . \"</span>\";\n        echo \"<div class='rating'>\";\n        \n        // Display stars for rating\n        for ($i = 1; $i <= 5; $i++) {\n            if ($i <= $review['rating']) {\n                echo \"<span class='star'>\u2605</span>\";\n            } else {\n                echo \"<span class='star'>\u2606</span>\";\n            }\n        }\n        \n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"<p class='comment'>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n\n// Function to calculate average rating\nfunction get_average_rating($product_id) {\n    global $conn;\n    \n    $stmt = $conn->prepare(\"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\");\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    $result = $stmt->get_result()->fetch_assoc();\n    return round($result['average'], 1);\n}\n\n// Function to handle review voting\nfunction vote_review($review_id, $vote_type) {\n    global $conn;\n    \n    // Update votes based on type (upvote/downvote)\n    if ($vote_type == 'up') {\n        $stmt = $conn->prepare(\"UPDATE reviews SET upvotes = upvotes + 1 WHERE id = ?\");\n    } else {\n        $stmt = $conn->prepare(\"UPDATE reviews SET downvotes = downvotes + 1 WHERE id = ?\");\n    }\n    \n    $stmt->bind_param(\"i\", $review_id);\n    return $stmt->execute();\n}\n\n// Example usage:\n$product_id = 1; // Replace with actual product ID\n$reviews = get_reviews($product_id);\n\necho \"<h2>Product Reviews</h2>\";\necho \"<p>Rating: \" . get_average_rating($product_id) . \"/5</p>\";\n\nif (!empty($_POST['submit_review'])) {\n    $user_id = 1; // Replace with actual user ID\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (add_review($user_id, $product_id, $rating, $comment)) {\n        echo \"<div class='success'>Review submitted successfully!</div>\";\n    } else {\n        echo \"<div class='error'>Error submitting review.</div>\";\n    }\n}\n\n// Display review form\necho \"<form method='post'>\";\necho \"<input type='number' name='rating' min='1' max='5' required placeholder='Rating (1-5)'>\";\necho \"<textarea name='comment' required placeholder='Write your review...'></textarea>\";\necho \"<button type='submit' name='submit_review'>Submit Review</button>\";\necho \"</form>\";\n\ndisplay_reviews($reviews);\n\n// Close database connection\n$conn->close();\n?>\n```\n\nThis code provides the following features:\n\n1. A review submission form where users can rate products (1-5 stars) and leave comments.\n\n2. Secure database operations using prepared statements to prevent SQL injection.\n\n3. Input validation and sanitization for user inputs.\n\n4. Display of reviews with user information, ratings, and comments.\n\n5. Average rating calculation.\n\n6. Voting system for reviews (upvotes/downvotes).\n\n7. Error handling and success messages for review submissions.\n\nTo use this code:\n\n1. Set up your database connection details at the top of the file.\n2. Create a `reviews` table with the following columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - user_id (INT)\n   - product_id (INT)\n   - rating (INT)\n   - comment (TEXT)\n   - upvotes (INT, DEFAULT 0)\n   - downvotes (INT, DEFAULT 0)\n   - created_at (DATETIME)\n\n3. Create a `users` table with at least an id and username column.\n\n4. Modify the code to match your database schema and product IDs.\n\n5. Use CSS to style the review display as needed.\n\nYou can extend this functionality by:\n\n1. Adding user authentication before submitting reviews.\n2. ImplementingAJAX for voting without page refreshes.\n3. Adding more validation rules for comments.\n4. Including user avatars or other profile information.\n5. Adding pagination for long lists of reviews.\n6. Implementing a reporting system for inappropriate content.\n\nRemember to secure your application by:\n\n1. Using proper authentication and authorization mechanisms.\n2. Validating all user inputs.\n3. Sanitizing output to prevent XSS attacks.\n4. Using prepared statements or query parameterization to prevent SQL injection.\n5. Implementing rate limiting to prevent abuse.\n\nThis is a basic implementation that you can customize based on your specific needs.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews_db';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a new review\nfunction add_review($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Sanitize input\n    $rating = intval($rating);\n    $comment = htmlspecialchars(stripslashes(trim($comment)));\n    \n    // Check if rating is valid (1-5)\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    // Insert review into database\n    $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, created_at) VALUES (?, ?, ?, ?, NOW())\");\n    $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to fetch reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = ? ORDER BY r.created_at DESC\");\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to display reviews\nfunction display_reviews($reviews) {\n    if (empty($reviews)) {\n        echo \"<p>No reviews yet.</p>\";\n        return;\n    }\n    \n    foreach ($reviews as $review) {\n        // Display user information and review content\n        echo \"<div class='review'>\";\n        echo \"<div class='user-info'>\";\n        echo \"<span class='username'>\" . htmlspecialchars($review['username']) . \"</span>\";\n        echo \"<div class='rating'>\";\n        \n        // Display stars for rating\n        for ($i = 1; $i <= 5; $i++) {\n            if ($i <= $review['rating']) {\n                echo \"<span class='star'>\u2605</span>\";\n            } else {\n                echo \"<span class='star'>\u2606</span>\";\n            }\n        }\n        \n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"<p class='comment'>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"</div>\";\n    }\n}\n\n// Function to calculate average rating\nfunction get_average_rating($product_id) {\n    global $conn;\n    \n    $stmt = $conn->prepare(\"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\");\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    \n    $result = $stmt->get_result()->fetch_assoc();\n    return round($result['average'], 1);\n}\n\n// Function to handle review voting\nfunction vote_review($review_id, $vote_type) {\n    global $conn;\n    \n    // Update votes based on type (upvote/downvote)\n    if ($vote_type == 'up') {\n        $stmt = $conn->prepare(\"UPDATE reviews SET upvotes = upvotes + 1 WHERE id = ?\");\n    } else {\n        $stmt = $conn->prepare(\"UPDATE reviews SET downvotes = downvotes + 1 WHERE id = ?\");\n    }\n    \n    $stmt->bind_param(\"i\", $review_id);\n    return $stmt->execute();\n}\n\n// Example usage:\n$product_id = 1; // Replace with actual product ID\n$reviews = get_reviews($product_id);\n\necho \"<h2>Product Reviews</h2>\";\necho \"<p>Rating: \" . get_average_rating($product_id) . \"/5</p>\";\n\nif (!empty($_POST['submit_review'])) {\n    $user_id = 1; // Replace with actual user ID\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (add_review($user_id, $product_id, $rating, $comment)) {\n        echo \"<div class='success'>Review submitted successfully!</div>\";\n    } else {\n        echo \"<div class='error'>Error submitting review.</div>\";\n    }\n}\n\n// Display review form\necho \"<form method='post'>\";\necho \"<input type='number' name='rating' min='1' max='5' required placeholder='Rating (1-5)'>\";\necho \"<textarea name='comment' required placeholder='Write your review...'></textarea>\";\necho \"<button type='submit' name='submit_review'>Submit Review</button>\";\necho \"</form>\";\n\ndisplay_reviews($reviews);\n\n// Close database connection\n$conn->close();\n?>\n```"]}
