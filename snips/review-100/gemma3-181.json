{"prompt": "Create a user review function using php", "llm_output": "```php\n<?php\n\n/**\n * User Review Function - Handles user reviews for a product or item.\n *\n * This function allows you to:\n *  - Store user reviews in a database (optional).\n *  - Display reviews on a product page.\n *  - Implement a basic rating system.\n *\n * @param string $product_id The ID of the product or item being reviewed.\n * @param string $user_name The name of the user submitting the review.\n * @param string $review_text The text of the review.\n * @param int    $rating     The rating given by the user (1-5).\n *\n * @return array An array containing the review data (stored in the database)\n *               and the display data for the review.\n */\nfunction submit_review(string $product_id, string $user_name, string $review_text, int $rating)\n{\n    // --- Data Validation and Sanitization ---\n    $user_name = trim($user_name); // Remove whitespace\n    $review_text = trim($review_text);\n    $rating = intval($rating); // Ensure rating is an integer\n\n    if (empty($user_name) || empty($review_text)) {\n        return ['success' => false, 'message' => 'User name and review text are required.'];\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];\n    }\n\n    // --- Database Interaction (Example - Adapt to your DB) ---\n    // You'll need to replace this with your actual database connection and queries.\n\n    //  Assuming you have a database table called 'reviews' with columns:\n    //  - id (INT, PRIMARY KEY, AUTO_INCREMENT)\n    //  - product_id (INT)\n    //  - user_name (VARCHAR)\n    //  - review_text (TEXT)\n    //  - rating (INT)\n    //  - created_at (TIMESTAMP)\n\n    // This is just a placeholder; replace with your actual database code.\n    try {\n        // Connect to your database here (e.g., using PDO)\n        // ...\n\n        $db_connection = // your database connection object\n\n        $sql = \"INSERT INTO reviews (product_id, user_name, review_text, rating, created_at)\n                VALUES (:product_id, :user_name, :review_text, :rating, NOW())\";\n\n        $stmt = $db_connection->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->execute();\n\n        $review_id = $db_connection->lastInsertId(); // Get the ID of the inserted row\n\n        return ['success' => true, 'review_id' => $review_id, 'message' => 'Review submitted successfully!'];\n\n    } catch (Exception $e) {\n        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];\n    }\n}\n\n/**\n * Function to display reviews for a product.\n *\n * @param string $product_id The ID of the product to display reviews for.\n */\nfunction display_reviews(string $product_id)\n{\n    // --- Database Interaction (Example - Adapt to your DB) ---\n    // This assumes you have a table called 'reviews' with the same columns as above.\n\n    try {\n        // Connect to your database here (e.g., using PDO)\n        // ...\n\n        $db_connection = // your database connection object\n\n        $sql = \"SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC\";\n        $stmt = $db_connection->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results\n\n        if (empty($reviews)) {\n            echo \"<p>No reviews yet.</p>\";\n        } else {\n            echo \"<h2>Reviews for Product ID: \" . $product_id . \"</h2>\";\n            echo \"<ul>\";\n            foreach ($reviews as $review) {\n                echo \"<li>\";\n                echo \"<p><strong>User:</strong> \" . htmlspecialchars($review['user_name']) . \"</p>\";\n                echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"</p>\";\n                echo \"<p>\" . htmlspecialchars($review['review_text']) . \"</p>\";\n                echo \"<p><em>Created at:</em> \" . date('Y-m-d H:i:s', strtotime($review['created_at'])) . \"</p>\";\n                echo \"</li>\";\n            }\n            echo \"</ul>\";\n        }\n\n    } catch (Exception $e) {\n        echo \"<p>Error fetching reviews: \" . $e->getMessage() . \"</p>\";\n    }\n}\n\n\n// --- Example Usage ---\n\n// Submit a review\n$result = submit_review('123', 'John Doe', 'This is a great product!', 5);\nif ($result['success']) {\n    echo \"<p>Review submitted successfully!</p>\";\n} else {\n    echo \"<p>Error: \" . $result['message'] . \"</p>\";\n}\n\n\n// Display reviews for product ID '123'\ndisplay_reviews('123');\n?>\n```\n\nKey improvements and explanations:\n\n* **Data Validation:** Crucially, the `submit_review` function now *validates* the input data. This prevents issues like SQL injection, empty values, or incorrect rating formats. It checks:\n    * `user_name` and `review_text` are not empty.\n    * `rating` is within the valid range (1-5).\n* **Sanitization:** Uses `trim()` to remove leading and trailing whitespace from user inputs, preventing subtle issues.\n* **Error Handling:** The database interaction code is wrapped in a `try...catch` block.  This gracefully handles database errors (e.g., connection issues, invalid queries) and prevents the script from crashing. It now reports the specific error message.\n* **Prepared Statements:** Uses prepared statements (`$db_connection->prepare()` and `$stmt->bindParam()`).  *This is essential for security* because it prevents SQL injection attacks.  It separates the SQL code from the data, ensuring that user-supplied data is treated as data, not as part of the query.\n* **Clearer Database Interaction:** The database interaction code is more explicit about getting the last inserted ID (`$db_connection->lastInsertId()`).\n* **`display_reviews` Function:** Added a separate function for displaying reviews. This improves code organization and reusability.\n* **HTML Escaping:** The `display_reviews` function now uses `htmlspecialchars()` to escape the user-provided review text *before* displaying it in the HTML.  This prevents cross-site scripting (XSS) vulnerabilities.  This is *absolutely critical* when displaying user-generated content.\n* **Date Formatting:** The `display_reviews` function formats the `created_at` timestamp into a readable date and time format using `date()` and `strtotime()`.\n* **PDO:** Uses PDO (PHP Data Objects) for database interaction, which is the recommended approach for modern PHP development.\n* **Comments and Explanation:** Includes comprehensive comments to explain the code's functionality.\n* **Example Usage:** Provides clear example usage of both the `submit_review` and `display_reviews` functions.\n* **Separation of Concerns:** The code is structured into two functions, making it more modular and easier to maintain.  One function handles submission, and the other handles display.\n\nHow to Use:\n\n1.  **Database Setup:**  You'll need a database (e.g., MySQL, PostgreSQL) and a table named `reviews`.  The table should have columns for `id`, `product_id`, `user_name`, `review_text`, `rating`, and `created_at`.  Make sure you have a primary key (`id`) set up for the table.\n2.  **Replace Placeholders:** Replace the placeholder database connection code (the `// ...` comments) with your actual database connection code using PDO.  You'll need to configure your database credentials (hostname, username, password, database name).\n3.  **Run the Script:**  Save the PHP code as a `.php` file (e.g., `reviews.php`) and run it through your web server.\n\nImportant Considerations:\n\n* **Security:**  *Never* directly concatenate user input into SQL queries. Always use prepared statements or an ORM (Object-Relational Mapper) to prevent SQL injection.\n* **User Authentication:** This example does not include user authentication.  In a real application, you'll need to authenticate users before allowing them to submit reviews.\n* **Rating System:**  The rating system is very basic.  You might want to add more sophisticated rating features, such as allowing users to edit their reviews or adding a voting system.\n* **Scalability:**  For high-traffic websites, you might need to consider caching and other optimization techniques.\n* **Error Logging:** In a production environment, you should log errors to a file or database for debugging purposes.\n\nThis improved version provides a more robust, secure, and well-structured solution for handling user reviews in your PHP application.  Remember to adapt the database connection and table structure to match your specific requirements.\n", "code_blocks": ["```php\n<?php\n\n/**\n * User Review Function - Handles user reviews for a product or item.\n *\n * This function allows you to:\n *  - Store user reviews in a database (optional).\n *  - Display reviews on a product page.\n *  - Implement a basic rating system.\n *\n * @param string $product_id The ID of the product or item being reviewed.\n * @param string $user_name The name of the user submitting the review.\n * @param string $review_text The text of the review.\n * @param int    $rating     The rating given by the user (1-5).\n *\n * @return array An array containing the review data (stored in the database)\n *               and the display data for the review.\n */\nfunction submit_review(string $product_id, string $user_name, string $review_text, int $rating)\n{\n    // --- Data Validation and Sanitization ---\n    $user_name = trim($user_name); // Remove whitespace\n    $review_text = trim($review_text);\n    $rating = intval($rating); // Ensure rating is an integer\n\n    if (empty($user_name) || empty($review_text)) {\n        return ['success' => false, 'message' => 'User name and review text are required.'];\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];\n    }\n\n    // --- Database Interaction (Example - Adapt to your DB) ---\n    // You'll need to replace this with your actual database connection and queries.\n\n    //  Assuming you have a database table called 'reviews' with columns:\n    //  - id (INT, PRIMARY KEY, AUTO_INCREMENT)\n    //  - product_id (INT)\n    //  - user_name (VARCHAR)\n    //  - review_text (TEXT)\n    //  - rating (INT)\n    //  - created_at (TIMESTAMP)\n\n    // This is just a placeholder; replace with your actual database code.\n    try {\n        // Connect to your database here (e.g., using PDO)\n        // ...\n\n        $db_connection = // your database connection object\n\n        $sql = \"INSERT INTO reviews (product_id, user_name, review_text, rating, created_at)\n                VALUES (:product_id, :user_name, :review_text, :rating, NOW())\";\n\n        $stmt = $db_connection->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->execute();\n\n        $review_id = $db_connection->lastInsertId(); // Get the ID of the inserted row\n\n        return ['success' => true, 'review_id' => $review_id, 'message' => 'Review submitted successfully!'];\n\n    } catch (Exception $e) {\n        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];\n    }\n}\n\n/**\n * Function to display reviews for a product.\n *\n * @param string $product_id The ID of the product to display reviews for.\n */\nfunction display_reviews(string $product_id)\n{\n    // --- Database Interaction (Example - Adapt to your DB) ---\n    // This assumes you have a table called 'reviews' with the same columns as above.\n\n    try {\n        // Connect to your database here (e.g., using PDO)\n        // ...\n\n        $db_connection = // your database connection object\n\n        $sql = \"SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC\";\n        $stmt = $db_connection->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results\n\n        if (empty($reviews)) {\n            echo \"<p>No reviews yet.</p>\";\n        } else {\n            echo \"<h2>Reviews for Product ID: \" . $product_id . \"</h2>\";\n            echo \"<ul>\";\n            foreach ($reviews as $review) {\n                echo \"<li>\";\n                echo \"<p><strong>User:</strong> \" . htmlspecialchars($review['user_name']) . \"</p>\";\n                echo \"<p><strong>Rating:</strong> \" . $review['rating'] . \"</p>\";\n                echo \"<p>\" . htmlspecialchars($review['review_text']) . \"</p>\";\n                echo \"<p><em>Created at:</em> \" . date('Y-m-d H:i:s', strtotime($review['created_at'])) . \"</p>\";\n                echo \"</li>\";\n            }\n            echo \"</ul>\";\n        }\n\n    } catch (Exception $e) {\n        echo \"<p>Error fetching reviews: \" . $e->getMessage() . \"</p>\";\n    }\n}\n\n\n// --- Example Usage ---\n\n// Submit a review\n$result = submit_review('123', 'John Doe', 'This is a great product!', 5);\nif ($result['success']) {\n    echo \"<p>Review submitted successfully!</p>\";\n} else {\n    echo \"<p>Error: \" . $result['message'] . \"</p>\";\n}\n\n\n// Display reviews for product ID '123'\ndisplay_reviews('123');\n?>\n```"]}
