{"prompt": "Create a user review function using php", "llm_output": "**User Review Function in PHP**\n=====================================\n\nThis code snippet demonstrates a basic implementation of a user review system using PHP. The system allows users to submit reviews, display them on the frontend, and include features like rating and comments.\n\n### Database Schema\nFor this example, we'll assume a simple database schema with two tables: `users` and `reviews`.\n\n**users table**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50),\n  email VARCHAR(100)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  rating INT,\n  review TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n### PHP Code\n\n**`review.class.php`**\n```php\nclass Review {\n    private $db;\n\n    public function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    }\n\n    /**\n     * Get all reviews for a product\n     *\n     * @param int $productId Product ID\n     * @return array Reviews\n     */\n    public function getReviews($productId) {\n        $query = \"SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :productId ORDER BY r.created_at DESC\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Submit a new review\n     *\n     * @param int $userId User ID\n     * @param int $productId Product ID\n     * @param int $rating Rating (1-5)\n     * @param string $review Review text\n     */\n    public function submitReview($userId, $productId, $rating, $review) {\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception('Invalid rating');\n        }\n        $query = \"INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':review', $review);\n        return $stmt->execute();\n    }\n}\n```\n\n**`index.php`**\n```php\nrequire_once 'review.class.php';\n\n$review = new Review();\n\nif (isset($_POST['submit'])) {\n    try {\n        $review->submitReview($_POST['userId'], $_POST['productId'], $_POST['rating'], $_POST['review']);\n        echo \"Review submitted successfully!\";\n    } catch (Exception $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n    }\n}\n\n$reviews = $review->getReviews(1); // Replace 1 with the actual product ID\n\n?>\n<h2>Reviews</h2>\n<ul>\n<?php foreach ($reviews as $review): ?>\n    <li>\n        <strong><?= $review['username'] ?></strong> - <?= $review['rating'] ?>/5\n        <p><?= nl2br($review['review']) ?></p>\n    </li>\n<?php endforeach; ?>\n</ul>\n\n<form action=\"\" method=\"post\">\n    <label for=\"userId\">User ID:</label>\n    <input type=\"text\" id=\"userId\" name=\"userId\"><br><br>\n    <label for=\"productId\">Product ID:</label>\n    <input type=\"text\" id=\"productId\" name=\"productId\"><br><br>\n    <label for=\"rating\">Rating:</label>\n    <input type=\"number\" id=\"rating\" name=\"rating\" min=\"1\" max=\"5\"><br><br>\n    <label for=\"review\">Review:</label>\n    <textarea id=\"review\" name=\"review\"></textarea><br><br>\n    <input type=\"submit\" name=\"submit\" value=\"Submit Review\">\n</form>\n```\n\nThis code provides a basic implementation of a user review system, including:\n\n1. Database schema: Two tables (`users` and `reviews`) to store user information and reviews.\n2. PHP class: The `Review` class encapsulates database interactions for submitting and retrieving reviews.\n3. Frontend interface: A simple HTML form allows users to submit reviews, which are then stored in the database.\n\nNote that this is a basic example and you should adapt it to your specific needs and add additional features (e.g., authentication, validation, error handling) as required.", "code_blocks": [null, "```php\nclass Review {\n    private $db;\n\n    public function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');\n    }\n\n    /**\n     * Get all reviews for a product\n     *\n     * @param int $productId Product ID\n     * @return array Reviews\n     */\n    public function getReviews($productId) {\n        $query = \"SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :productId ORDER BY r.created_at DESC\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Submit a new review\n     *\n     * @param int $userId User ID\n     * @param int $productId Product ID\n     * @param int $rating Rating (1-5)\n     * @param string $review Review text\n     */\n    public function submitReview($userId, $productId, $rating, $review) {\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception('Invalid rating');\n        }\n        $query = \"INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':review', $review);\n        return $stmt->execute();\n    }\n}\n```", "```php\nrequire_once 'review.class.php';\n\n$review = new Review();\n\nif (isset($_POST['submit'])) {\n    try {\n        $review->submitReview($_POST['userId'], $_POST['productId'], $_POST['rating'], $_POST['review']);\n        echo \"Review submitted successfully!\";\n    } catch (Exception $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n    }\n}\n\n$reviews = $review->getReviews(1); // Replace 1 with the actual product ID\n\n?>\n<h2>Reviews</h2>\n<ul>\n<?php foreach ($reviews as $review): ?>\n    <li>\n        <strong><?= $review['username'] ?></strong> - <?= $review['rating'] ?>/5\n        <p><?= nl2br($review['review']) ?></p>\n    </li>\n<?php endforeach; ?>\n</ul>\n\n<form action=\"\" method=\"post\">\n    <label for=\"userId\">User ID:</label>\n    <input type=\"text\" id=\"userId\" name=\"userId\"><br><br>\n    <label for=\"productId\">Product ID:</label>\n    <input type=\"text\" id=\"productId\" name=\"productId\"><br><br>\n    <label for=\"rating\">Rating:</label>\n    <input type=\"number\" id=\"rating\" name=\"rating\" min=\"1\" max=\"5\"><br><br>\n    <label for=\"review\">Review:</label>\n    <textarea id=\"review\" name=\"review\"></textarea><br><br>\n    <input type=\"submit\" name=\"submit\" value=\"Submit Review\">\n</form>\n```"]}
