{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, the function needs to accept parameters like review ID, user ID, rating, comment, and maybe the date. So I'll define the function with these parameters, but some can be optional.\n\nNext, the function should validate the inputs. For example, the rating should be between 1 and 5. If it's not, throw an error. Also, make sure that user ID is provided and isn't empty.\n\nThen, I need to connect to a database. Using mysqli for PHP, so I'll set up a connection with host, username, password, and database name.\n\nAfter connecting, I should check if the review ID exists. If it does, I'll update the existing review. Otherwise, insert a new one into the reviews table.\n\nI need to write SQL queries for both cases: an INSERT for adding a new review and an UPDATE for modifying an existing one.\n\nAlso, error handling is important. Using try-catch blocks around database operations will help catch any exceptions and display appropriate messages.\n\nFinally, if everything goes well, I'll return a success message indicating whether it was an update or insertion.\n\nI should test this function with sample data to make sure it works as expected.\n</think>\n\nHere's an example of a PHP function that handles user reviews. This function can create new reviews or update existing ones:\n\n```php\n<?php\n// Function to handle user reviews\nfunction handleUserReview($reviewId = null, $userId, $rating, $comment = \"\", $date = null) {\n    // Validate inputs\n    if (!isset($userId) || empty($userId)) {\n        throw new InvalidArgumentException(\"User ID is required.\");\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new InvalidArgumentException(\"Rating must be between 1 and 5.\");\n    }\n\n    try {\n        // Database connection parameters\n        $host = \"localhost\";\n        $dbUsername = \"username\";\n        $dbPassword = \"password\";\n        $dbName = \"reviews_db\";\n\n        // Connect to database\n        $conn = new mysqli($host, $dbUsername, $dbPassword, $dbName);\n\n        if ($conn->connect_error) {\n            throw new Exception(\"Database connection failed: \" . $conn->connect_error);\n        }\n\n        // Set default date if not provided\n        if (!$date) {\n            $date = date('Y-m-d H:i:s');\n        }\n\n        // Check if review exists and update or insert\n        if ($reviewId) {\n            $sql = \"\n                UPDATE reviews \n                SET rating = ?, comment = ?, last_updated_date = ?\n                WHERE id = ?\n            \";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"siss\", $rating, $comment, $date, $reviewId);\n        } else {\n            $sql = \"\n                INSERT INTO reviews (user_id, rating, comment, creation_date)\n                VALUES (?, ?, ?, ?)\n            \";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"isss\", $userId, $rating, $comment, $date);\n        }\n\n        // Execute the query\n        if ($stmt->execute()) {\n            $response = [\n                \"status\" => \"success\",\n                \"message\" => $reviewId ? \"Review updated successfully.\" : \"Review created successfully.\",\n                \"insert_id\" => !$reviewId ? $conn->insert_id : null,\n                \"affected_rows\" => $stmt->affected_rows\n            ];\n        } else {\n            throw new Exception(\"Query failed: \" . $stmt->error);\n        }\n\n    } catch (Exception $e) {\n        return [\n            \"status\" => \"error\",\n            \"message\" => $e->getMessage()\n        ];\n    } finally {\n        // Close statements and connection\n        if ($stmt) {\n            $stmt->close();\n        }\n        if ($conn) {\n            $conn->close();\n        }\n    }\n\n    return $response;\n}\n\n// Example usage:\ntry {\n    // Create a new review\n    $newReview = handleUserReview(\n        null, \n        12345,\n        4,\n        \"This product is great!\",\n        date('Y-m-d H:i:s')\n    );\n    \n    print_r($newReview);\n\n    // Update an existing review\n    $updateReview = handleUserReview(\n        67890,\n        12345,\n        5,\n        \"The best product ever! \u2605\u2605\u2605\u2605\u2605\",\n        date('Y-m-d H:i:s')\n    );\n    \n    print_r($updateReview);\n\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n?>\n```\n\nThis function:\n\n1. Accepts parameters for:\n   - Review ID (optional, used for updates)\n   - User ID (required)\n   - Rating (required, must be between 1 and 5)\n   - Comment (optional)\n   - Date (optional)\n\n2. Validates the inputs to ensure required fields are present\n\n3. Connects to a MySQL database using mysqli\n\n4. Can either:\n   - Create a new review if no review ID is provided\n   - Update an existing review if a review ID is provided\n\n5. Returns success/failure status and messages\n\n6. Handles errors gracefully and closes database connections properly\n\n7. Uses prepared statements to prevent SQL injection\n\nTo use this function:\n\n1. Replace the database connection parameters (host, username, password, dbname)\n2. Ensure your database has a table named `reviews` with appropriate columns\n3. Call the function either:\n   - With all required fields for creating a new review\n   - With an existing review ID to update an existing review\n\nThe reviews table should have these columns:\n- id (primary key, auto-increment)\n- user_id (foreign key referencing your users table)\n- rating (integer between 1 and 5)\n- comment (text)\n- creation_date (datetime)\n- last_updated_date (datetime)\n\nYou can modify the SQL schema and function parameters as needed for your specific use case.", "code_blocks": ["```php\n<?php\n// Function to handle user reviews\nfunction handleUserReview($reviewId = null, $userId, $rating, $comment = \"\", $date = null) {\n    // Validate inputs\n    if (!isset($userId) || empty($userId)) {\n        throw new InvalidArgumentException(\"User ID is required.\");\n    }\n    \n    if ($rating < 1 || $rating > 5) {\n        throw new InvalidArgumentException(\"Rating must be between 1 and 5.\");\n    }\n\n    try {\n        // Database connection parameters\n        $host = \"localhost\";\n        $dbUsername = \"username\";\n        $dbPassword = \"password\";\n        $dbName = \"reviews_db\";\n\n        // Connect to database\n        $conn = new mysqli($host, $dbUsername, $dbPassword, $dbName);\n\n        if ($conn->connect_error) {\n            throw new Exception(\"Database connection failed: \" . $conn->connect_error);\n        }\n\n        // Set default date if not provided\n        if (!$date) {\n            $date = date('Y-m-d H:i:s');\n        }\n\n        // Check if review exists and update or insert\n        if ($reviewId) {\n            $sql = \"\n                UPDATE reviews \n                SET rating = ?, comment = ?, last_updated_date = ?\n                WHERE id = ?\n            \";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"siss\", $rating, $comment, $date, $reviewId);\n        } else {\n            $sql = \"\n                INSERT INTO reviews (user_id, rating, comment, creation_date)\n                VALUES (?, ?, ?, ?)\n            \";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"isss\", $userId, $rating, $comment, $date);\n        }\n\n        // Execute the query\n        if ($stmt->execute()) {\n            $response = [\n                \"status\" => \"success\",\n                \"message\" => $reviewId ? \"Review updated successfully.\" : \"Review created successfully.\",\n                \"insert_id\" => !$reviewId ? $conn->insert_id : null,\n                \"affected_rows\" => $stmt->affected_rows\n            ];\n        } else {\n            throw new Exception(\"Query failed: \" . $stmt->error);\n        }\n\n    } catch (Exception $e) {\n        return [\n            \"status\" => \"error\",\n            \"message\" => $e->getMessage()\n        ];\n    } finally {\n        // Close statements and connection\n        if ($stmt) {\n            $stmt->close();\n        }\n        if ($conn) {\n            $conn->close();\n        }\n    }\n\n    return $response;\n}\n\n// Example usage:\ntry {\n    // Create a new review\n    $newReview = handleUserReview(\n        null, \n        12345,\n        4,\n        \"This product is great!\",\n        date('Y-m-d H:i:s')\n    );\n    \n    print_r($newReview);\n\n    // Update an existing review\n    $updateReview = handleUserReview(\n        67890,\n        12345,\n        5,\n        \"The best product ever! \u2605\u2605\u2605\u2605\u2605\",\n        date('Y-m-d H:i:s')\n    );\n    \n    print_r($updateReview);\n\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n?>\n```"]}
