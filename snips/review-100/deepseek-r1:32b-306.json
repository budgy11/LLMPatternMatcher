{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, the function needs to add a new review to the database. So it should take parameters like the user's ID, product ID, rating, and comment. Then, it will insert these into the reviews table.\n\nWait, but before inserting, I should probably check if the user has already reviewed this product. Otherwise, they could submit multiple reviews for the same product. That makes sense. So I'll write a query to see if there's an existing review from that user for the product. If it exists, maybe return an error message.\n\nIf there's no existing review, proceed to insert the new one. After inserting, I should handle any errors, like database insertion issues. On success, return a success message; on failure, an error message.\n\nNext, the function needs to retrieve all reviews for a specific product. That means another query that selects from the reviews table where the product ID matches and the status is active. Ordering them by date descending would make sense so the latest reviews appear first.\n\nFor each review retrieved, I should also get the user's name to display who wrote the review. So joining the users table in the SQL query would help here.\n\nAlso, calculating the average rating for the product is important. This can be done with an AVG function in SQL. But if there are no reviews yet, it should return 0 to avoid division by zero or errors.\n\nI should structure the function to handle both adding and retrieving reviews based on parameters. Maybe using a mode parameter to determine which action to take\u2014add, fetch, or get average rating.\n\nLet me outline the steps:\n\n1. Check if the user has already reviewed the product when adding.\n2. Insert the review if no existing one is found.\n3. Handle errors during insertion and return appropriate messages.\n4. For fetching reviews, retrieve all active ones for a product, including user names.\n5. Calculate the average rating by querying the database.\n\nI should also ensure proper use of placeholders in SQL to prevent SQL injection. Using prepared statements or parameterized queries is essential here.\n\nTesting each part separately would help catch issues early. Like testing if adding a review works, then checking if duplicates are prevented, and ensuring that fetching reviews displays correctly with user info.\n\nI think I've covered the main points. Now, let me put this into code, making sure to include all these steps and handle edge cases like no existing reviews when calculating the average.\n</think>\n\nHere's an example of a PHP function for handling user reviews:\n\n```php\n<?php\nfunction handleUserReview($userId, $productId, $rating, $comment, $db) {\n    // Check if the user has already reviewed this product\n    $checkQuery = \"SELECT review_id FROM reviews WHERE user_id = ? AND product_id = ?\";\n    $stmt = $db->prepare($checkQuery);\n    $stmt->execute([$userId, $productId]);\n    \n    if ($stmt->rowCount() > 0) {\n        return [\"status\" => \"error\", \"message\" => \"You have already reviewed this product.\"];\n    }\n\n    // Insert the new review\n    $insertQuery = \"\n        INSERT INTO reviews (user_id, product_id, rating, comment, created_at)\n        VALUES (?, ?, ?, ?, NOW())\n    \";\n    \n    $stmt = $db->prepare($insertQuery);\n    try {\n        $stmt->execute([$userId, $productId, $rating, $comment]);\n        return [\"status\" => \"success\", \"message\" => \"Review added successfully.\"];\n    } catch (PDOException $e) {\n        return [\"status\" => \"error\", \"message\" => \"Error adding review: \" . $e->getMessage()];\n    }\n}\n\nfunction fetchProductReviews($productId, $db) {\n    // Fetch all reviews for a product\n    $reviewsQuery = \"\n        SELECT \n            r.review_id,\n            u.user_name,\n            r.rating,\n            r.comment,\n            r.created_at\n        FROM reviews r\n        JOIN users u ON r.user_id = u.user_id\n        WHERE r.product_id = ? AND r.status = 'active'\n        ORDER BY r.created_at DESC\n    \";\n    \n    $stmt = $db->prepare($reviewsQuery);\n    $stmt->execute([$productId]);\n    \n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction calculateAverageRating($productId, $db) {\n    // Calculate average rating for a product\n    $avgQuery = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ? AND status = 'active'\";\n    $stmt = $db->prepare($avgQuery);\n    $stmt->execute([$productId]);\n    \n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    return $result['average_rating'] ?: 0;\n}\n\n// Example usage:\n$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n// Add a review\n$reviewResult = handleUserReview(1, 5, 4, \"Great product!\", $db);\necho \"<pre>\";\nprint_r($reviewResult);\necho \"</pre>\";\n\n// Fetch reviews for product ID 5\n$reviews = fetchProductReviews(5, $db);\necho \"<pre>\";\nprint_r($reviews);\necho \"</pre>\";\n\n// Get average rating for product ID 5\n$averageRating = calculateAverageRating(5, $db);\necho \"Average Rating: $averageRating\";\n?>\n```\n\nThis code includes three main functions:\n\n1. `handleUserReview()`: Adds a new review to the database.\n2. `fetchProductReviews()`: Retrieves all reviews for a specific product.\n3. `calculateAverageRating()`: Calculates and returns the average rating for a product.\n\n**Key Features:**\n\n- **Validation:** Checks if the user has already reviewed the product before allowing a new review.\n- **Error Handling:** Proper error handling with try-catch blocks and meaningful error messages.\n- **Security:** Uses prepared statements to prevent SQL injection.\n- **Joining Tables:** Fetches user information along with reviews for better context.\n- **Rating Calculation:** Computes average ratings using SQL's AVG() function.\n\n**Requirements:**\n\n1. Ensure your database connection is properly configured.\n2. The `reviews` table should have the following columns:\n   - review_id (Primary Key)\n   - user_id\n   - product_id\n   - rating\n   - comment\n   - created_at\n   - status\n3. The `users` table should include a `user_name` column.\n\n**To Use:**\n\n1. Replace the database connection details (`host`, `dbname`, `username`, `password`) with your actual database credentials.\n2. Call the functions as needed in your application:\n   - To add a review, use `handleUserReview()`.\n   - To fetch reviews, use `fetchProductReviews()`.\n   - To get average ratings, use `calculateAverageRating()`.\n\n**Example Output:**\n\nWhen adding a review:\n```php\nArray\n(\n    [status] => success\n    [message] => Review added successfully.\n)\n```\n\nWhen fetching reviews:\n```php\nArray\n(\n    [0] => Array\n        (\n            [review_id] => 1\n            [user_name] => JohnDoe\n            [rating] => 4\n            [comment] => Great product!\n            [created_at] => 2023-07-05 12:34:56\n        )\n    // ... more reviews ...\n)\n```\n\nWhen calculating average rating:\n```php\nAverage Rating: 4.2\n```\n\nThis function set provides a comprehensive solution for handling user reviews in a PHP application, including validation, error handling, and database operations.", "code_blocks": ["```php\n<?php\nfunction handleUserReview($userId, $productId, $rating, $comment, $db) {\n    // Check if the user has already reviewed this product\n    $checkQuery = \"SELECT review_id FROM reviews WHERE user_id = ? AND product_id = ?\";\n    $stmt = $db->prepare($checkQuery);\n    $stmt->execute([$userId, $productId]);\n    \n    if ($stmt->rowCount() > 0) {\n        return [\"status\" => \"error\", \"message\" => \"You have already reviewed this product.\"];\n    }\n\n    // Insert the new review\n    $insertQuery = \"\n        INSERT INTO reviews (user_id, product_id, rating, comment, created_at)\n        VALUES (?, ?, ?, ?, NOW())\n    \";\n    \n    $stmt = $db->prepare($insertQuery);\n    try {\n        $stmt->execute([$userId, $productId, $rating, $comment]);\n        return [\"status\" => \"success\", \"message\" => \"Review added successfully.\"];\n    } catch (PDOException $e) {\n        return [\"status\" => \"error\", \"message\" => \"Error adding review: \" . $e->getMessage()];\n    }\n}\n\nfunction fetchProductReviews($productId, $db) {\n    // Fetch all reviews for a product\n    $reviewsQuery = \"\n        SELECT \n            r.review_id,\n            u.user_name,\n            r.rating,\n            r.comment,\n            r.created_at\n        FROM reviews r\n        JOIN users u ON r.user_id = u.user_id\n        WHERE r.product_id = ? AND r.status = 'active'\n        ORDER BY r.created_at DESC\n    \";\n    \n    $stmt = $db->prepare($reviewsQuery);\n    $stmt->execute([$productId]);\n    \n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction calculateAverageRating($productId, $db) {\n    // Calculate average rating for a product\n    $avgQuery = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ? AND status = 'active'\";\n    $stmt = $db->prepare($avgQuery);\n    $stmt->execute([$productId]);\n    \n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    return $result['average_rating'] ?: 0;\n}\n\n// Example usage:\n$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n// Add a review\n$reviewResult = handleUserReview(1, 5, 4, \"Great product!\", $db);\necho \"<pre>\";\nprint_r($reviewResult);\necho \"</pre>\";\n\n// Fetch reviews for product ID 5\n$reviews = fetchProductReviews(5, $db);\necho \"<pre>\";\nprint_r($reviews);\necho \"</pre>\";\n\n// Get average rating for product ID 5\n$averageRating = calculateAverageRating(5, $db);\necho \"Average Rating: $averageRating\";\n?>\n```", "```php\nArray\n(\n    [status] => success\n    [message] => Review added successfully.\n)\n```", "```php\nArray\n(\n    [0] => Array\n        (\n            [review_id] => 1\n            [user_name] => JohnDoe\n            [rating] => 4\n            [comment] => Great product!\n            [created_at] => 2023-07-05 12:34:56\n        )\n    // ... more reviews ...\n)\n```", "```php\nAverage Rating: 4.2\n```"]}
