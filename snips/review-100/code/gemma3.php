
<?php

/**
 * This class provides functionality to store and manage user reviews.
 */
class ReviewManager
{
    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user who wrote the review.
     * @param string $reviewText The text of the review.
     * @param int $rating The rating given for the product (e.g., 1-5).
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating): bool
    {
        if (!is_int($productId) || $productId <= 0) {
            return false; // Invalid product ID
        }
        if (!is_string($userName) || empty($userName)) {
            return false; // Invalid user name
        }
        if (!is_string($reviewText) || empty($reviewText)) {
            return false; // Invalid review text
        }
        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[$productId][] = [
            'user' => $userName,
            'text' => $reviewText,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for when the review was added
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects for the product, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array
    {
        if (!is_int($productId) || $productId <= 0) {
            return []; // Invalid product ID
        }

        return $this->reviews[$productId] ?? [];  // Use null coalesce operator for concise handling.
    }

    /**
     * Retrieves all reviews.
     *
     * @return array All reviews stored in the system.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Deletes a specific review by product ID and user.
     *  This is a more complex operation, as we need to identify the *exact* review to delete.
     *  Since we only store the review as an array in the reviews array, a more robust solution
     *  might involve storing a unique ID for each review.  However, this implementation provides
     *  a basic approach.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user who wrote the review.
     * @return bool True if the review was deleted, false otherwise.
     */
    public function deleteReview(int $productId, string $userName): bool
    {
        if (!is_int($productId) || $productId <= 0) {
            return false; // Invalid product ID
        }
        if (!is_string($userName) || empty($userName)) {
            return false; // Invalid user name
        }

        $productReviews = $this->getReviewsForProduct($productId);
        if (empty($productReviews)) {
            return false;
        }

        foreach ($productReviews as $key => $review) {
            if ($review['user'] === $userName) {
                unset($productReviews[$key]); // Remove the review
                return true; // Review found and deleted
            }
        }

        return false; // Review not found
    }

    /**
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float
    {
        $reviews = $this->getReviewsForProduct($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($reviews);
    }
}



// Example Usage:
$reviewManager = new ReviewManager();

// Add reviews
$reviewManager->addReview(123, 'John Doe', 'Great product!', 5);
$reviewManager->addReview(123, 'Jane Smith', 'Could be better', 3);
$reviewManager->addReview(456, 'Peter Jones', 'Excellent value', 4);

// Get reviews for product 123
$reviews123 = $reviewManager->getReviewsForProduct(123);
print_r($reviews123);

// Get average rating for product 123
$averageRating = $reviewManager->getAverageRatingForProduct(123);
echo "Average rating for product 123: " . ($averageRating !== null ? $averageRating : "No reviews") . "
";

// Delete a review
$reviewManager->deleteReview(123, 'John Doe');

// Get reviews for product 123 again after deletion
$reviews123 = $reviewManager->getReviewsForProduct(123);
print_r($reviews123);


<?php

/**
 * Reviews function to handle user reviews.
 *
 * Allows adding, retrieving, and deleting reviews.
 */
class ReviewSystem
{
    private $reviews = [];
    private $reviewIdCounter = 1; // Used to generate unique IDs

    /**
     * Adds a new review.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $comment The review text.
     * @return int|bool The ID of the newly created review on success, or false on failure (e.g., empty comment).
     */
    public function addReview(string $userId, string $comment)
    {
        if (empty($comment)) {
            return false; //  Don't allow empty comments
        }

        $reviewId = $this->generateReviewId();
        $this->reviews[$reviewId] = [
            'userId' => $userId,
            'comment' => $comment,
            'createdAt' => time() //Timestamp of when review was created
        ];

        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }

        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if the review doesn't exist.
     */
    public function deleteReview(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }

        return false;
    }

    /**
     * Generates a unique review ID.
     *
     * @return int A unique integer.
     */
    private function generateReviewId(): int
    {
        return $this->reviewIdCounter++;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewId1 = $reviewSystem->addReview('user123', 'Great product!  Highly recommended.');
$reviewId2 = $reviewSystem->addReview('user456', 'Could be better, needs some improvements.');

if ($reviewId1) {
    echo "Review ID 1: " . $reviewId1 . "<br>";
}

if ($reviewId2) {
    echo "Review ID 2: " . $reviewId2 . "<br>";
}


// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:<br>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";


// Get a specific review
$review = $reviewSystem->getReviewById($reviewId1);
if ($review) {
    echo "Review ID " . $reviewId1 . ":<br>";
    echo "User: " . $review['userId'] . "<br>";
    echo "Comment: " . $review['comment'] . "<br>";
    echo "Created At: " . date("Y-m-d H:i:s", $review['createdAt']) . "<br>";
} else {
    echo "Review not found.";
}

// Delete a review
$deleted = $reviewSystem->deleteReview($reviewId2);
if ($deleted) {
    echo "<br>Review ID 2 deleted successfully.";
} else {
    echo "<br>Failed to delete review.";
}

// Check for the deleted review
$remainingReviews = $reviewSystem->getAllReviews();
echo "<br>Remaining Reviews:<br>";
echo "<pre>";
print_r($remainingReviews);
echo "</pre>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 * It takes user input and stores it in a database (or another storage mechanism).
 *
 * @param string $productId The unique identifier of the product/item being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating A numeric rating from 1 to 5 (or a similar range).
 * @param string $comment The user's written review.
 * @param string $storageMethod  Method to store the review: 'db', 'file', 'memory' (default)
 * @return bool True if the review was successfully stored, false otherwise.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, string $storageMethod = 'memory') {
    // Input validation (basic) - Enhance this for production
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Invalid review data. Missing required fields.");
        return false;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating. Rating must be a number between 1 and 5.");
        return false;
    }

    // Data sanitization (Very important to prevent XSS and SQL Injection)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);


    // ----- Storage Logic -----
    switch ($storageMethod) {
        case 'db':
            // Replace with your database connection and query logic
            // Example (Conceptual - Adapt to your DB setup)
            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
            $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
            $stmt->execute([$productId, $username, $rating, $comment]);
            return true;

        case 'file':
            // Write the review to a file.  Requires careful security considerations.
            $filename = "reviews_" . $productId . ".txt";
            $reviewData = "Product ID: " . $productId . "
Username: " . $username . "
Rating: " . $rating . "
Comment: " . $comment . "
---
";
            file_put_contents($filename, $reviewData, FILE_APPEND); // Append to file
            return true;

        case 'memory':
            // Store the review in a simple array (for demonstration only).
            // In a real application, you'd likely store this in a session or cache.
            $reviews = [];
            $reviews[$productId][] = [
                'productId' => $productId,
                'username' => $username,
                'rating' => $rating,
                'comment' => $comment,
            ];
            return true;

        default:
            error_log("Unsupported storage method: " . $storageMethod);
            return false;
    }
}


// ----- Example Usage -----

// Store a review in memory
if (storeUserReview('product123', 'john_doe', 4, 'Great product, highly recommend!', 'memory')) {
    echo "Review stored in memory successfully!
";
} else {
    echo "Failed to store review in memory.
";
}

// Store a review in a file
if (storeUserReview('product456', 'jane_smith', 5, 'Excellent service!', 'file')) {
    echo "Review stored in file successfully!
";
} else {
    echo "Failed to store review in file.
";
}


//  Example using the database -  (Remember to adapt to your database)
// storeUserReview('product789', 'peter_jones', 3, 'It was okay.', 'db');
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The user's review text.
 * @param int   $rating       The rating given by the user (1-5).
 * @return array  An array containing a success/error message.
 */
function submit_review(string $productName, string $reviewText, int $rating): array
{
  // Input Validation
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
  }

  // Sanitize input (basic -  consider more robust sanitization for production)
  $productName = trim($productName);
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText); // Prevents XSS attacks

  // Here you would typically save the review to a database.
  //  For this example, we'll just simulate a save.

  // Example database save (replace with your actual database logic)
  $review_data = [
    'product_name' => $productName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'submission_timestamp' => time()
  ];

  // In a real application, you'd insert this data into your database.
  // For example:
  // $db->insert('reviews', $review_data);

  // Simulate a successful save
  return ['success' => true, 'message' => 'Review submitted successfully!'];
}


// --- Example Usage ---
// Simulate getting data from a form submission.
$product = $_POST['product_name'];
$comment = $_POST['review_text'];
$stars = $_POST['rating'];

// Validate and process the form data
$result = submit_review($product, $comment, $stars);

// Display the result
if ($result['success']) {
  echo "<p style='color: green;'>$result[message]</p>";
} else {
  echo "<p style='color: red;'>Error: $result[message]</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 * It includes input validation and handles potential errors.
 */
class UserReview {

  private $productId;
  private $userId;
  private $rating;
  private $comment;

  /**
   * Constructor
   *
   * @param int $productId The ID of the product or item being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's comment about the product.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    if ($productId <= 0) {
      throw new InvalidArgumentException("Product ID must be a positive integer.");
    }
    if ($userId <= 0) {
      throw new InvalidArgumentException("User ID must be a positive integer.");
    }
    if ($rating < 1 || $rating > 5) {
      throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }
    if (empty($comment)) {
      throw new InvalidArgumentException("Comment cannot be empty.");
    }

    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  /**
   * Save the review to the database (example implementation - replace with your DB logic)
   *
   * @return bool True if the review was saved successfully, false otherwise.
   */
  public function saveReview() {
    // Placeholder - Replace with your database saving logic.
    // This is just an example to show how to use the data.
    $db = new DatabaseConnection(); // Assuming you have a database connection class
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
            VALUES ('" . $this->productId . "', '" . $this->userId . "', '" . $this->rating . "', '" . $this->comment . "')";
    
    return $db->execute($sql);
  }

  /**
   * Get Review Details
   *
   * @return array An array containing the review details.
   */
  public function getReviewDetails() {
    return [
      'product_id' => $this->productId,
      'user_id' => $this->userId,
      'rating' => $this->rating,
      'comment' => $this->comment
    ];
  }
}

// Example Usage:
try {
  $review = new UserReview(123, 45, 4, "Great product! I love it.");
  if ($review->saveReview()) {
    echo "Review saved successfully!
";
    $details = $review->getReviewDetails();
    print_r($details);
  } else {
    echo "Failed to save review.
";
  }
} catch (InvalidArgumentException $e) {
  echo "Error: " . $e->getMessage() . "
";
}

//  Example of Validation Error
try {
    $review = new UserReview(123, -45, 3, "Bad review"); // Invalid user ID
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
"; // Output: Error: User ID must be a positive integer.
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  An existing database connection object.
 * @return array|false  An array of reviews or false on error.
 */
function add_user_review(string $productId, string $username, string $rating, string $comment, array $dbConnection) {
  // Input Validation (Very Important!)
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return false; // Invalid input
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return false; // Invalid username (only alphanumeric and underscore allowed)
  }

  if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
    return false; // Rating must be between 1 and 5
  }

  // Sanitize inputs (Prevent SQL Injection - KEY STEP!)
  $productId = $dbConnection->real_escape_string($productId);
  $username = $dbConnection->real_escape_string($username);
  $rating = $dbConnection->real_escape_string($rating);
  $comment = $dbConnection->real_escape_string($comment);

  // Construct the SQL query
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute the query
  if ($dbConnection->query($sql) === TRUE) {
    return true; // Success
  } else {
    // Handle error
    error_log("Error adding review: " . $dbConnection->error);
    return false;
  }
}


/**
 * Get all user reviews for a product.
 *
 * @param string $productId The unique identifier of the product.
 * @param array $dbConnection  An existing database connection object.
 * @return array|false An array of reviews or false on error.
 */
function get_user_reviews(string $productId, array $dbConnection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
    $result = $dbConnection->query($sql);

    if ($result === FALSE) {
        error_log("Error querying reviews: " . $dbConnection->error);
        return false;
    }

    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    return $reviews;
}

/**
 * Display User Reviews (for demonstration purposes)
 *
 * This is a helper function to display reviews.  In a real application,
 * this would be handled by your template engine.
 *
 * @param array $reviews An array of review objects.
 */
function display_user_reviews(array $reviews) {
  echo "<h2>User Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<div>";
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . " stars<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "</div>";
  }
}

// Example Usage (Demonstration)
// *** IMPORTANT: Replace these with your actual database connection ***
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

$dbConnection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($dbConnection->connect_error) {
    die("Connection failed: " . $dbConnection->connect_error);
}

// Add a review (replace with actual product ID and user)
$review_result = add_user_review('product_123', 'john_doe', '4', 'Great product, highly recommended!', $dbConnection);

if ($review_result) {
  echo "<p>Review added successfully!</p>";
} else {
  echo "<p>Error adding review.</p>";
}

// Get all reviews for product_123
$all_reviews = get_user_reviews('product_123', $dbConnection);

if ($all_reviews) {
    display_user_reviews($all_reviews, $dbConnection);
} else {
    echo "<p>Error retrieving reviews.</p>";
}


// Close the database connection
$dbConnection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product or service.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating given by the reviewer (1-5). Defaults to 0.
 * @return array|string  Returns an array with the review data if successful, or an error message string.
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {

  // Input Validation - Important for security and data integrity
  if (empty($productId)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($reviewerName)) {
    return "Error: Reviewer Name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review Text cannot be empty.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Data Sanitization -  Prevent XSS and SQL Injection (Basic)
  $reviewerName = htmlspecialchars($reviewerName); // Escape HTML entities
  $reviewText = htmlspecialchars($reviewText);

  // In a real application, you'd store this data in a database.
  // This example simulates storing it in an array for simplicity.
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for tracking
  ];

  // Store the review.  In a real app, this would insert into a database.
  // For demonstration, we'll just print the review data.
  echo "<pre>";
  print_r($review);
  echo "</pre>";

  return $review; // Returns the review data for processing (e.g., display)
}


// --- Example Usage ---

// Submit a review
$reviewResult = submitReview("product123", "John Doe", "Great product!  I love it!", 5);

if (is_array($reviewResult)) {
  echo "<p>Review submitted successfully: " . $reviewResult['reviewerName'] . " gave a rating of " . $reviewResult['rating'] . ".</p>";
} else {
  echo "<p>" . $reviewResult . "</p>"; // Display the error message
}


// Submit another review with a different rating
$reviewResult2 = submitReview("product456", "Jane Smith", "It's okay.", 3);

if (is_array($reviewResult2)) {
  echo "<p>Review submitted successfully: " . $reviewResult2['reviewerName'] . " gave a rating of " . $reviewResult2['rating'] . ".</p>";
} else {
  echo "<p>" . $reviewResult2 . "</p>";
}


// Example showing error handling
$errorResult = submitReview("", "Error Test", "Bad Input");
echo "<p>" . $errorResult . "</p>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review submitted by the user.
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 * @param array $dbConnection  (Optional) Database connection object. If not provided, uses a default one.
 *
 * @return array  An array containing the review ID, product name, user ID, review text, and rating.
 *                Returns an empty array if the review fails to save.
 */
function saveReview(string $productName, string $userId, string $reviewText, int $rating, $dbConnection = null) {

  // Validate input (very basic - you'd want to add more robust validation)
  if (empty($productName) || empty($reviewText) || $rating < 1 || $rating > 5) {
    error_log("Invalid review data submitted."); // Log the error (important for debugging)
    return [];
  }

  // If no database connection is provided, create a default one.  
  // Replace with your actual database credentials.  This is just for demonstration.
  if ($dbConnection === null) {
    $dbConnection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  try {
    // Prepare the SQL statement
    $stmt = $dbConnection->prepare(
      "INSERT INTO reviews (product_name, user_id, review_text, rating) VALUES (?, ?, ?, ?)"
    );

    // Bind parameters to prevent SQL injection
    $stmt->execute([$productName, $userId, $reviewText, $rating]);

    // Get the ID of the newly inserted review
    $reviewId = $dbConnection->lastInsertId();

    return [
      'review_id' => $reviewId,
      'product_name' => $productName,
      'user_id' => $userId,
      'review_text' => $reviewText,
      'rating' => $rating
    ];

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage()); // Log the error
    // Handle the error appropriately (e.g., display a user-friendly error message)
    return [];
  }
}

/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productName The name of the product to retrieve reviews for.
 * @param array $dbConnection  Database connection object.
 *
 * @return array An array containing an empty array if no reviews are found,
 *               or an array of review objects.
 */
function displayReviews(string $productName, $dbConnection) {

  try {
    $stmt = $dbConnection->prepare("SELECT * FROM reviews WHERE product_name = ?");
    $stmt->execute([$productName]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return [];
  }
}

// Example Usage (Illustrative - Replace with your actual database and data)
// Note: This requires a database set up with a 'reviews' table.

// Example 1: Saving a review
$review = saveReview('Awesome Gadget', 'user123', 'Great product! I love it.', 5);

if (!empty($review)) {
  echo "Review saved successfully! Review ID: " . $review['review_id'] . "<br>";
} else {
  echo "Failed to save review.";
}

// Example 2: Displaying reviews for 'Awesome Gadget'
$reviews = displayReviews('Awesome Gadget', $dbConnection); // Use your actual database connection

if (empty($reviews)) {
  echo "No reviews found for 'Awesome Gadget'.";
} else {
  echo "<h2>Reviews for 'Awesome Gadget':</h2>";
  foreach ($reviews as $review) {
    echo "<p><strong>User:</strong> " . $review['user_id'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Review:</strong> " . $review['review_text'] . "</p>";
  }
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and retrieve user reviews.
 * It includes basic validation and database interaction (assuming a database is set up).
 */

class ReviewManager {

    private $db; // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Submits a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True if the review was submitted successfully, false otherwise.
     */
    public function submitReview($username, $rating, $comment) {
        // Input validation - Important for security and data integrity
        if (empty($username) || empty($rating) || empty($comment)) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare the SQL statement (using prepared statements to prevent SQL injection)
        $sql = "INSERT INTO reviews (username, rating, comment) VALUES (?, ?, ?)";

        // Execute the query with the parameters
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("sii", $username, $rating, $comment);
        $stmt->execute();

        return ($stmt->affected_rows > 0); // Check if the insert was successful
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $sql = "SELECT id, username, rating, comment, created_at FROM reviews";
        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $reviews[] = $row;
            }
        }

        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $id The ID of the review to retrieve.
     *
     * @return array|null An array representing the review, or null if not found.
     */
    public function getReviewById($id) {
        $sql = "SELECT id, username, rating, comment, created_at FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();

        if ($stmt->num_rows > 0) {
            return $result = $stmt->fetch_assoc();
        }

        return null;
    }
}


// --- Example Usage (assuming you have a database connection called $db) ---
//  (You'll need to replace this with your actual database connection details)

// Sample Database Connection - Replace with your actual connection
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }



// Create a ReviewManager instance
$reviewManager = new ReviewManager($db);

// Submit a review
if ($reviewManager->submitReview("JohnDoe", 4, "Great product!")) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<br><h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
    echo "<br>";
}

// Get a single review
$review = $reviewManager->getReviewById(1);

if ($review) {
    echo "<h2>Review ID 1:</h2>";
    echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
} else {
    echo "<p>Review not found.</p>";
}


// Close the database connection (Important!)
$db->close();
?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, a user's review, and a rating,
 * and saves them to a database.
 *
 * @param int $product_id The ID of the product being reviewed.
 * @param string $review The user's review text.
 * @param int $rating The user's rating (e.g., 1-5).
 * @param string $db_connection A database connection object.
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function save_user_review(int $product_id, string $review, int $rating, PDO $db_connection) {

  // Input validation - crucial for security and data integrity
  if (!is_int($product_id) || $product_id <= 0) {
    error_log("Invalid product_id: " . $product_id); // Log for debugging
    return false;
  }

  if (empty($review)) {
    error_log("Review cannot be empty.");
    return false;
  }

  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating: " . $rating);
    return false;
  }

  // Sanitize data to prevent SQL injection
  $review = $db_connection->quote($review);  // Use PDO's quote() function for secure escaping

  // Construct the SQL query
  $sql = "INSERT INTO reviews (product_id, review, rating) VALUES (:product_id, :review, :rating)";

  // Prepare the statement
  $stmt = $db_connection->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':rating', $rating);

  // Execute the query
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    error_log("Error saving review: " . $e->getMessage());
    return false;
  }
}


/**
 * Example Usage (Illustrative - Adapt to your database setup)
 */

// Example Database Connection (Replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_database_user';
$password = 'your_database_password';

try {
    $db_connection = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Example review
$product_id = 123;
$review_text = "This product is fantastic!";
$rating = 5;

if (save_user_review($product_id, $review_text, $rating, $db_connection)) {
  echo "Review saved successfully!";
} else {
  echo "Failed to save review.";
}
?>


<?php

/**
 * This function creates a user review object and handles basic validation.
 *
 * @param string $name The reviewer's name.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $comment The reviewer's comment.
 *
 * @return array|false An associative array representing the review if valid,
 *                     false otherwise.
 */
function createReview(string $name, string $rating, string $comment): array|false
{
    // Validate input
    if (empty($name)) {
        error_log("Review: Empty name provided.");  // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Review: Invalid rating provided.  Must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Review: Empty comment provided.");
        return false;
    }


    // Create the review object
    $review = [
        'name' => $name,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s') // Add the date/time of the review.
    ];

    return $review;
}


/**
 * Example Usage
 */

// Valid review
$review1 = createReview("Alice Smith", 4, "Great product!  Highly recommend.");
if ($review1) {
    echo "Review 1:
";
    print_r($review1);
    echo "
";
} else {
    echo "Review 1 creation failed.
";
}

// Invalid review - empty name
$review2 = createReview("", 5, "Good!");
if ($review2) {
    echo "Review 2:
";
    print_r($review2);
    echo "
";
} else {
    echo "Review 2 creation failed.
";
}

// Invalid review - invalid rating
$review3 = createReview("Bob Johnson", 6, "Okay.");
if ($review3) {
    echo "Review 3:
";
    print_r($review3);
    echo "
";
} else {
    echo "Review 3 creation failed.
";
}

// Valid review with no comment
$review4 = createReview("Charlie Brown", 3, "");
if ($review4) {
    echo "Review 4:
";
    print_r($review4);
    echo "
";
} else {
    echo "Review 4 creation failed.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, update, and delete user reviews.
 * It utilizes a simple database interaction for demonstration purposes.
 *  Replace the database connection details with your actual credentials.
 */

class ReviewManager {

    private $db;

    public function __construct($dbConfig) {
        // Assuming $dbConfig is an array containing:
        // ['host'] => 'localhost'
        // ['user'] => 'your_db_user'
        // ['password'] => 'your_db_password'
        // ['dbname'] => 'your_database_name'
        try {
            $this->db = new PDO($dbConfig['driver'] . ':host=' . $dbConfig['host'] . ';dbname=' . $dbConfig['dbname'], $dbConfig['user'], $dbConfig['password']);
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * Adds a new review.
     *
     * @param string $user_id The ID of the user who wrote the review.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview(string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, rating, comment) VALUES (?, ?, ?)");
            $stmt->execute([$user_id, $rating, $comment]);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Retrieves a review by ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|false An array containing the review data, or false if not found.
     */
    public function getReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review ? $review : false;
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $rating The new rating.
     * @param string $comment The new review text.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $review_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
            $stmt->execute([$rating, $comment, $review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $stmt = $this->db->query("SELECT * FROM reviews");
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $reviews;
    }
}

// Example usage (replace with your actual database configuration)
$dbConfig = [
    'driver' => 'mysql', // or pdo_mysql, etc.
    'host' => 'localhost',
    'user' => 'your_db_user',
    'password' => 'your_db_password',
    'dbname' => 'your_database_name'
];

$reviewManager = new ReviewManager($dbConfig);

// Add a review
$newReviewId = $reviewManager->addReview(1, 5, "This is a fantastic product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to add review.
";
}

// Get a review
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Update a review
$updateSuccess = $reviewManager->updateReview($newReviewId, 4, "Updated review text");
if ($updateSuccess) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteSuccess = $reviewManager->deleteReview($newReviewId);
if ($deleteSuccess) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes validation, sanitization, and basic data handling.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $author     The name or username of the reviewer.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The reviewer's comment/feedback.
 * @param array $dbConnection Database connection object.  This is crucial!
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $productId, string $author, string $rating, string $comment, array $dbConnection) {

  // Validation
  $errors = [];

  // Check if product ID is provided
  if (empty($productId)) {
    $errors[] = "Product ID is required.";
  }

  // Check if author is provided
  if (empty($author)) {
    $errors[] = "Author is required.";
  }

  // Check if rating is a valid number between 1 and 5
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    $errors[] = "Rating must be a number between 1 and 5.";
  }

  // Check if comment is provided
  if (empty($comment)) {
    $errors[] = "Comment is required.";
  }

  // Sanitize input (basic - you might want more robust sanitization)
  $productId = trim($productId);
  $author = trim($author);
  $rating = (int)$rating; // Ensure rating is an integer
  $comment = trim($comment);

  // If there are errors, return false
  if (!empty($errors)) {
    return false;
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (product_id, author, rating, comment) 
          VALUES (:product_id, :author, :rating, :comment)";

  // Prepare the statement
  $stmt = $dbConnection->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':author', $author);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  // Execute the statement
  if ($stmt->execute()) {
    return true;
  } else {
    // Handle errors (logging, database errors, etc.)
    error_log("Error saving review: " . $stmt->error);
    return false;
  }
}


// Example usage (assuming you have a database connection object $conn)
/*
$product_id = "123";
$author = "John Doe";
$rating = 4;
$comment = "Great product, would recommend!";

if (saveReview($product_id, $author, $rating, $comment, $conn)) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.  Check the error logs.";
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (1-5).
 * @param int    $userId    The unique identifier of the user.  (Optional - for more robust tracking)
 *
 * @return array An array containing the review data or an error message if the review couldn't be saved.
 */
function saveReview(string $productId, string $userName, string $reviewText, int $rating, int $userId = null) {
  // Input Validation - Add more robust validation as needed
  if (empty($productId)) {
    return ["error" => "Product ID cannot be empty."];
  }
  if (empty($userName)) {
    return ["error" => "User name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if ($rating < 1 || $rating > 5) {
    return ["error" => "Rating must be between 1 and 5."];
  }
  if ($userId === null || empty($userId)) {
    // Optionally, generate a unique ID or use a database-generated ID
    $userId = generateUniqueUserId(); // Implement this function as needed.
  }


  // **Data Storage -  Replace this with your database logic**
  // In a real application, you would save this data to a database.
  // This is a placeholder for demonstration purposes.

  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'userId' => $userId,
    'timestamp' => time() // Add timestamp for ordering/filtering
  ];

  // Save the review (replace with your database saving logic)
  // Example:
  // $result = saveToDatabase($review);

  // Mock save to a simple array (for demonstration)
  $reviews =  getReviewsForProduct($productId); // Assume this function exists
  $reviews[] = $review;

  //Return the review
  return $review;
}



/**
 * Placeholder function to retrieve reviews for a product.
 * Replace with your actual database query.
 *
 * @param string $productId
 * @return array
 */
function getReviewsForProduct(string $productId)
{
  // This is just a placeholder - replace with your actual database query
  $reviews = [
    ['productId' => '123', 'userName' => 'John Doe', 'reviewText' => 'Great product!', 'rating' => 5],
    ['productId' => '123', 'userName' => 'Jane Smith', 'reviewText' => 'Could be better.', 'rating' => 3]
  ];
  return $reviews;
}

/**
 * Placeholder function to generate a unique user ID.
 * Replace with your actual user ID generation logic.
 *
 * @return int
 */
function generateUniqueUserId() {
  // This is a placeholder - replace with your actual user ID generation logic
  return uniqid();
}



/**
 * Displays a review.
 *
 * @param array $review  The review data.
 */
function displayReview(array $review) {
  if (empty($review)) {
    echo "No review available.";
    return;
  }

  echo "<h3>Review for Product ID: " . $review['productId'] . "</h3>";
  echo "<p><strong>User:</strong> " . htmlspecialchars($review['userName']) . "</p>";
  echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
  echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
  echo "<p><em>Timestamp:</em> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
}


// Example Usage:
$productId = "123";
$userName = "Alice";
$reviewText = "This product is amazing!  I highly recommend it.";
$rating = 5;

$reviewResult = saveReview($productId, $userName, $reviewText, $rating);

if (isset($reviewResult['error'])) {
  echo "<p style='color:red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
  displayReview($reviewResult);
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique ID of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating    The rating (e.g., 1-5 stars).
 * @param string $db_connection (Optional) - A database connection object. If not provided, 
 *                             a default connection is used.
 *
 * @return bool True on success, false on failure.
 */
function add_user_review(
    string $product_id,
    string $user_name,
    string $review_text,
    int    $rating,
    $db_connection = null
) {

    // Default database connection
    if (!$db_connection) {
        // Replace with your actual database connection setup here.
        // This is just a placeholder.  You'll need to connect to your database.
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); 
    }

    try {
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_id, user_name, review_text, rating) 
             VALUES (:product_id, :user_name, :review_text, :rating)"
        );

        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();
        return true; // Success
    } catch (PDOException $e) {
        // Handle database errors appropriately (logging, display error message to user)
        error_log("Error adding review: " . $e->getMessage());  
        return false; // Failure
    }
}


/**
 * Get User Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param $db_connection (Optional) - A database connection object.  If not provided, a default connection is used.
 *
 * @return array An array of review objects.  Each object will have properties like:
 *               - product_id
 *               - user_name
 *               - review_text
 *               - rating
 *               - timestamp (automatically generated)
 */
function get_user_reviews(string $product_id, $db_connection = null) {

    // Default database connection
    if (!$db_connection) {
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    try {
        $stmt = $db_connection->prepare(
            "SELECT product_id, user_name, review_text, rating, id FROM reviews WHERE product_id = :product_id"
        );
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results as an associative array
        return $reviews;
    } catch (PDOException $e) {
        error_log("Error getting reviews: " . $e->getMessage());
        return []; // Return an empty array on error.
    }
}



// Example Usage (replace with your actual values and database setup)
$product_id = "123";
$user_name = "John Doe";
$review_text = "This product is amazing!";
$rating = 5;

if (add_user_review($product_id, $user_name, $review_text, $rating)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

$reviews = get_user_reviews($product_id);

if ($reviews) {
    echo "Reviews for product " . $product_id . ":
";
    foreach ($reviews as $review) {
        echo "- " . $review['user_name'] . ": " . $review['review_text'] . " (" . $review['rating'] . " stars)
";
    }
} else {
    echo "No reviews found for product " . $product_id . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text, rating, and optionally, user information)
 * and stores the review in a database or returns it as a structured object.
 *
 * @param string $reviewText - The text of the review.
 * @param int $rating - The rating given by the user (e.g., 1-5 stars).
 * @param array $userData - (Optional) An array containing user information (e.g., user_id, username).
 * @param string $dbConnection - (Optional)  A database connection object.
 * @return array|object - Returns an array with review data, or a custom object if configured.
 *                        Returns null on error.
 */
function create_review(string $reviewText, int $rating, array $userData = [], string $dbConnection = null)
{
  // **Input Validation - IMPORTANT!**
  if (empty($reviewText)) {
    error_log("Review text cannot be empty."); // Log the error for debugging.  Don't display to the user directly.
    return null;
  }

  if ($rating < 1 || $rating > 5) { // Adjust rating range as needed
    error_log("Rating must be between 1 and 5.");
    return null;
  }

  if (empty($userData['user_id'])) {
    error_log("User ID cannot be empty.");
    return null;
  }


  // **Database Interaction (Example - SQLite)**
  // Replace with your database connection and query logic.
  try {
    $db = $dbConnection ?: new SQLite3('reviews.db'); // Use provided connection or create a new one
    $stmt = $db->prepare('INSERT INTO reviews (user_id, review_text, rating, created_at) VALUES (:user_id, :review_text, :rating, :created_at)');
    $stmt->bindValue(':user_id', $userData['user_id']);
    $stmt->bindValue(':review_text', $reviewText);
    $stmt->bindValue(':rating', $rating);
    $stmt->bindValue(':created_at', date('Y-m-d H:i:s')); // Set the timestamp

    $result = $stmt->execute();

    $review_id = $db->lastInsertId(); // Get the ID of the newly created review.

    $db->close();

    return [
      'review_id' => $review_id,
      'user_id' => $userData['user_id'],
      'review_text' => $reviewText,
      'rating' => $rating,
      'created_at' => date('Y-m-d H:i:s'), // Return timestamp as a string
    ];

  } catch (Exception $e) {
    error_log("Database error: " . $e->getMessage()); // Log the full error message for debugging.
    return null; // Handle database errors gracefully.
  }
}

// **Example Usage:**
// Assume you have a database connection object named $conn

// Sample Data
$user_id = 123;
$review = "This product is amazing!  I highly recommend it.";
$rating = 5;

// Create the review
$new_review = create_review($review, $rating, ['user_id' => $user_id]);

if ($new_review) {
  echo "Review created successfully! Review ID: " . $new_review['review_id'] . "<br>";
} else {
  echo "Failed to create review.<br>";
}

// Example of a failed usage (empty review text)
$empty_review = create_review("", 3);
if ($empty_review === null) {
  echo "Review creation failed (empty review).<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $productName The name of the product.
 * @param array $reviews  An array of review data.  Each item in this array should be an associative array
 *                      with the keys 'user', 'rating' (1-5), and 'comment'.
 * @return array|string  A string containing the review display or an error message.
 */
function displayReviews(string $productId, string $productName, array $reviews)
{
  // Input Validation - Essential for security and data integrity
  if (empty($productId) || empty($productName) || empty($reviews)) {
    return "Error: Product ID, Product Name, and Reviews are required.";
  }

  // Validate review data -  Example of data validation. You can expand this.
  foreach ($reviews as $review) {
    if (!isset($review['user'], $review['rating'], $review['comment'])) {
      return "Error: Review data must contain 'user', 'rating', and 'comment' keys.";
    }

    if (!is_numeric($review['rating']) || $review['rating'] < 1 || $review['rating'] > 5) {
      return "Error: Rating must be a number between 1 and 5.";
    }
  }


  // Build the review display string
  $reviewDisplay = "<h2>Reviews for {$productName} (ID: {$productId})</h2>";
  $reviewDisplay .= "<ul class='reviews'>";
  foreach ($reviews as $review) {
    $reviewDisplay .= "<li>";
    $reviewDisplay .= "<div class='review-user'>" . htmlspecialchars($review['user']) . "</div>"; // Escape for security
    $reviewDisplay .= "<div class='review-rating'>Rating: " . $review['rating'] . "</div>";
    $reviewDisplay .= "<div class='review-comment'>" . htmlspecialchars($review['comment']) . "</div>";
    $reviewDisplay .= "</li>";
  }
  $reviewDisplay .= "</ul>";

  return $reviewDisplay;
}



// Example Usage:
$productId = "123";
$productName = "Awesome Gadget";

// Sample Reviews
$reviews = [
  [
    'user' => "John Doe",
    'rating' => 5,
    'comment' => "This product is amazing!  Highly recommended."
  ],
  [
    'user' => "Jane Smith",
    'rating' => 4,
    'comment' => "Great product, but could be a little cheaper."
  ],
  [
    'user' => "Peter Jones",
    'rating' => 3,
    'comment' => "It's okay, does the job."
  ]
];


// Display the reviews
$reviewOutput = displayReviews($productId, $productName, $reviews);
echo $reviewOutput;

// Example of an error case
$errorOutput = displayReviews("", "Bad Product", []);
echo "<br><br>Error Output:<br>" . $errorOutput;
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * @param int $reviewId (optional)
     * @param int $userId
     * @param int $productId
     * @param int $rating
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date("Y-m-d H:i:s"); // Use current timestamp for date
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }


    /**
     * Setters (optional - for update functionality)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     * Display Review Information (for testing or display)
     */
    public function displayReview() {
        echo "<p>Review ID: " . $this->getReviewId() . "</p>";
        echo "<p>User ID: " . $this->getUserId() . "</p>";
        echo "<p>Product ID: " . $this->getProductId() . "</p>";
        echo "<p>Rating: " . $this->getRating() . "</p>";
        echo "<p>Comment: " . $this->getComment() . "</p>";
        echo "<p>Review Date: " . $this->getReviewDate() . "</p>";
    }
}


/**
 * User Review Function (Class to handle reviews)
 */
class UserReviewManager {

    private $reviews = [];

    /**
     * Add a review
     *
     * @param UserReview $review
     */
    public function addReview(UserReview $review) {
        $this->reviews[] = $review;
    }

    /**
     * Get all reviews
     *
     * @return array
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews for a specific product ID
     *
     * @param int $productId
     * @return array
     */
    public function getReviewsByProduct($productId) {
        $productReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review->getProductId() == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }


    /**
     * Calculate Average Rating
     *
     * @return float|null
     */
    public function calculateAverageRating() {
        if (empty($this->getAllReviews())) {
            return null; // No reviews to calculate from
        }

        $totalRating = 0;
        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review->getRating();
        }

        return $totalRating / count($this->getAllReviews());
    }
}


// --- Example Usage ---
// Create a Review Manager
$reviewManager = new UserReviewManager();

// Create some reviews
$review1 = new UserReview(null, 123, 456, 5, "Great product!");
$reviewManager->addReview($review1);

$review2 = new UserReview(null, 456, 456, 4, "Good, but could be better.");
$reviewManager->addReview($review2);

$review3 = new UserReview(null, 789, 456, 3, "Not what I expected.");
$reviewManager->addReview($review3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    $review->displayReview();
    echo "<br>";
}

// Get reviews for product 456
$product456Reviews = $reviewManager->getReviewsByProduct(456);
echo "<h2>Reviews for Product 456:</h2>";
foreach ($product456Reviews as $review) {
    $review->displayReview();
    echo "<br>";
}

// Calculate average rating
$averageRating = $reviewManager->calculateAverageRating();
echo "<h2>Average Rating: " . ($averageRating === null ? "No reviews to calculate from" : $averageRating) . "</h2>";
?>


<?php

/**
 * Class Review
 *
 * Handles creating, retrieving, updating, and deleting reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db Database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param string $product_id  The ID of the product the review is for.
     * @param string $user_id     The ID of the user who wrote the review.
     * @param string $rating      The rating given (e.g., 1-5).
     * @param string $comment     The review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function createReview(string $product_id, string $user_id, string $rating, string $comment) {
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        if ($stmt->execute()) {
            return $this->db->lastInsertId();
        } else {
            return null;
        }
    }


    /**
     * Retrieve a review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReview(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);

        if ($stmt->execute()) {
            return $stmt->fetch(PDO::FETCH_ASSOC); // Return as associative array
        } else {
            return null;
        }
    }

    /**
     * Retrieve all reviews for a product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of associative arrays, each representing a review.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        $reviews = [];
        if ($stmt->execute()) {
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }
        }
        return $reviews;
    }


    /**
     * Update an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $product_id  The ID of the product the review is for.
     * @param string $user_id     The ID of the user who wrote the review.
     * @param string $rating      The new rating.
     * @param string $comment     The new comment.
     * @return bool True on successful update, false on failure.
     */
    public function updateReview(int $review_id, string $product_id, string $user_id, string $rating, string $comment) {
        $sql = "UPDATE reviews
                SET product_id = :product_id,
                    user_id = :user_id,
                    rating = :rating,
                    comment = :comment
                WHERE id = :id";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        return $stmt->execute();
    }


    /**
     * Delete a review by its ID.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True on successful deletion, false on failure.
     */
    public function deleteReview(int $review_id) {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);

        return $stmt->execute();
    }
}

// Example usage (requires a database connection):
// Assuming you have a database connection object $db
// ...
// $reviews = new Review($db);
// $newReviewId = $reviews->createReview(123, 456, 5, "This product is amazing!");
// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId;
// } else {
//     echo "Error creating review.";
// }

// To get reviews for product ID 123:
// $reviews = $reviews->getReviewsByProduct(123);
// print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes basic functionality for creating, reading, updating, and deleting reviews.
 * 
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The content of the review.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param int $userId (Optional) The ID of the user submitting the review.  Used for updates.
 *
 * @return array An array containing the result of the operation.  
 *               Returns an error message on failure.
 */
function create_review(string $productName, string $reviewText, string $userEmail, string $rating, int $userId = null) {
    // Input Validation - Basic example, expand as needed
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if ($userId <= 0) {
        return ['error' => 'User ID must be a positive integer.'];
    }

    // In a real application, you'd store this in a database.  This is a simplified example.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'user_email' => $userEmail,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s'),
        'user_id' => $userId // Store the user ID for updating later
    ];

    // Simulate saving to a database (replace with your database connection code)
    // In this example, we store in an array called $reviews
    global $reviews; // Accessing the global $reviews array
    if (isset($reviews[$userId])) {
        //Update existing review
        $reviews[$userId] = $review;
    } else {
        $reviews[$userId] = $review;
    }



    return ['success' => true, 'review' => $review];
}


// Example Usage:

// Initialize an array to hold reviews
$reviews = [];  // Important: Create the global $reviews array

// Create a new review
$result = create_review('Awesome Product', 'Great product!', 'user@example.com', 5);

if ($result['success']) {
    echo "Review created successfully!
";
    print_r($result['review']); // Display the created review
} else {
    echo "Error creating review: " . $result['error'] . "
";
}


//Create another review
$result = create_review('Another Product', 'Pretty good!', 'another@example.com', 4, 1);

if ($result['success']) {
    echo "Review created successfully!
";
    print_r($result['review']); // Display the created review
} else {
    echo "Error creating review: " . $result['error'] . "
";
}

//Example update review
$result = create_review('Awesome Product', 'Updated review text!', 'user@example.com', 3, 1);
if ($result['success']) {
    echo "Review updated successfully!
";
    print_r($result['review']);
} else {
    echo "Error updating review: " . $result['error'] . "
";
}

// Display all reviews (simulated database retrieval)
echo "
All Reviews:
";
foreach ($reviews as $userId => $review) {
    echo "User ID: " . $userId . "
";
    print_r($review);
    echo "
---";
}

?>


// Example (using PDO - conceptual):
try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");
    $stmt = $pdo->prepare("INSERT INTO reviews (product_name, review_text, user_email, rating, user_id) VALUES (?, ?, ?, ?, ?)");
    $stmt->execute([$review['product_name'], $review['review_text'], $review['user_email'], $review['rating'], $review['user_id']]);
    // ... handle success or error
} catch (PDOException $e) {
    // Handle database errors
}


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple database (simulated for demonstration) and provides basic
 * functionality.  For production environments, consider a more robust database
 * and security measures.
 */

class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;
  private $created_at;
  private $updated_at;

  public function __construct($productId, $userId, $rating, $comment = '') {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->created_at = date('Y-m-d H:i:s');
    $this->updated_at = $this->created_at;
  }

  public function toArray() {
    return [
      'id' => $this->id,
      'productId' => $this->productId,
      'userId' => $this->userId,
      'rating' => $this->rating,
      'comment' => $this->comment,
      'createdAt' => $this->created_at,
      'updatedAt' => $this->updated_at,
    ];
  }

  public function getId() {
    return $this->id;
  }

  public function setId($id) {
    $this->id = $id;
  }
}



class ReviewManager {
  private $reviews = [];

  public function createReview($productId, $userId, $rating, $comment = '') {
    $review = new Review($productId, $userId, $rating, $comment);
    $this->reviews[] = $review;
    return $review;
  }

  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review = $this->reviews[$id]) {
        return $review;
      }
    }
    return null;
  }

  public function getAllReviewsForProduct($productId) {
    $reviews = [];
    foreach ($this->reviews as $review) {
      if ($review->getProductId() == $productId) {
        $reviews[] = $review;
      }
    }
    return $reviews;
  }

  // Implement update, delete methods if needed
}


// --- Example Usage ---

// Initialize the review manager
$reviewManager = new ReviewManager();

// Create some reviews
$review1 = $reviewManager->createReview(1, 1, 5, 'Excellent product!');
$review2 = $reviewManager->createReview(2, 2, 4, 'Good value for money.');
$review3 = $reviewManager->createReview(1, 3, 3, 'It\'s okay.');

// Get a review by ID
$review = $reviewManager->getReviewById(1);
if ($review) {
  echo "Review ID 1: ";
  print_r($review->toArray());
} else {
  echo "Review not found.";
}

// Get all reviews for product ID 1
$reviewsForProduct1 = $reviewManager->getAllReviewsForProduct(1);
echo "
Reviews for Product 1:
";
print_r($reviewsForProduct1);


//  --- Further Development Ideas ---
//  * **Database Integration:**  Use a database (MySQL, PostgreSQL, etc.) to store reviews.
//  * **Input Validation:**  Validate user input (e.g., rating must be between 1 and 5).
//  * **Error Handling:**  Implement proper error handling (e.g., handling database errors).
//  * **Authentication/Authorization:**  Add security measures to control who can create, update, or delete reviews.
//  * **Pagination:**  If you have a large number of reviews, implement pagination to improve performance.
//  * **Object-Relational Mapper (ORM):**  Consider using an ORM like Doctrine or Eloquent to simplify database interactions.
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 * It's a basic implementation and can be expanded with more features
 * (e.g., moderation, rating scales, image uploads).
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userID The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given for the product (1-5).
 *
 * @return array An array containing the review ID, or an error message if the review could not be saved.
 */
function createReview(string $productName, string $userID, string $reviewText, int $rating = 1) {
    // --- Input Validation ---
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($userID)) {
        return ['error' => 'User ID cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // --- Data Sanitization & Escaping (IMPORTANT!) ---
    $productName = htmlspecialchars($productName);  // Escape HTML tags
    $reviewText = htmlspecialchars($reviewText);   // Escape HTML tags
    $userID = htmlspecialchars($userID);

    // --- Data Storage (Simplified - Replace with Database Logic) ---
    // In a real application, you would save this data to a database.
    // This example uses an in-memory array for demonstration purposes.
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Load from session or initialize

    $reviewID = count($reviews) + 1; // Simple ID generation
    $review = [
        'reviewID' => $reviewID,
        'productName' => $productName,
        'userID' => $userID,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => time()
    ];

    $reviews[$reviewID] = $review;
    $_SESSION['reviews'] = $reviews; // Save back to session

    return [
        'success' => true,
        'reviewID' => $reviewID
    ];
}

/**
 * Display a Single Review
 *
 * Displays a single review's details.
 *
 * @param array $review The review data.
 */
function displayReview(array $review) {
    echo "<h3>Review for: " . $review['productName'] . "</h3>";
    echo "<p><strong>User:</strong> " . $review['userID'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
    echo "<p>" . $review['reviewText'] . "</p>";
}

/**
 * Display All Reviews for a Product
 *
 * Displays all reviews for a specific product.
 *
 * @param string $productName The product name.
 */
function displayProductReviews(string $productName) {
    // --- Retrieve Reviews (Replace with Database Query) ---
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : [];

    $productReviews = [];
    foreach ($reviews as $review) {
        if ($review['productName'] == $productName) {
            $productReviews[] = $review;
        }
    }

    // --- Display Reviews ---
    if (empty($productReviews)) {
        echo "<p>No reviews found for this product.</p>";
    } else {
        echo "<h3>Reviews for " . $productName . "</h3>";
        foreach ($productReviews as $review) {
            displayReview($review);
        }
    }
}

// --- Example Usage (Demonstration) ---
// 1. Create a Review
session_start(); // Start the session

$reviewResult = createReview('Awesome Gadget', 'user123', 'This is a fantastic gadget!');
if (isset($reviewResult['error'])) {
    echo "<p style='color:red;'>Error creating review: " . $reviewResult['error'] . "</p>";
} else {
    echo "<p style='color:green;'>Review created successfully. Review ID: " . $reviewResult['reviewID'] . "</p>";
}

// 2. Display Reviews for the Product
displayProductReviews('Awesome Gadget');
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current date and time
    }

    /**
     * Getters and Setters (Encapsulation)
     */

    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCommentLength() {
        return strlen($this->comment);
    }


    public function getDate() {
        return $this->date;
    }


    /**
     *  A simple method for representing the review as a string. Useful for debugging or display.
     *
     * @return string
     */
    public function __toString() {
        return "Review ID: " . $this->reviewId . ", Product ID: " . $this->productId . ", User ID: " . $this->userId . ", Rating: " . $this->rating . ", Comment: " . $this->comment . ", Date: " . $this->date;
    }
}

/**
 * User Review Function (Example Usage)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>" . $review . "</li>"; // Uses the __toString() method
    }
    echo "</ul>";
}

// Example Usage
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(456, 789, 4, "It's okay, but could be better.");
$review3 = new UserReview(789, 123, 3, "Not bad, but pricey.");

$allReviews = [$review1, $review2, $review3];

displayUserReviews($allReviews);

// Example of using the length method
echo "<p>Review 1 Length: " . $review1->getCommentLength() . "</p>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $product_id The unique ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5).
 * @param string $db_connection (Optional) - A database connection object. If not provided,
 *                                     the function will create a temporary connection.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully saved, False otherwise.
 *              - 'message': A message describing the outcome of the operation.
 *              - 'review_id': The ID of the newly created review, or the ID of the updated review.
 */
function saveReview(
    string $product_id,
    string $user_name,
    string $review_text,
    int    $rating,
    string $db_connection = null
): array {

    // Validate inputs (simple example, add more robust validation as needed)
    if (empty($product_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid review data. Please check your input values.',
        ];
    }

    // Database connection (if not provided, create a temporary one)
    if ($db_connection === null) {
        // Replace with your actual database connection setup here
        $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    }


    try {
        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
                VALUES (:product_id, :user_name, :review_text, :rating)";

        $stmt = $db_connection->prepare($sql);

        // Bind parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        // Get the ID of the newly inserted review
        $review_id = $db_connection->lastInsertId();

        return [
            'success' => true,
            'message' => 'Review saved successfully.',
            'review_id' => $review_id,
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Error saving review: ' . $e->getMessage(),
        ];
    }
}


// Example Usage:
// Assuming you have a database table named 'reviews' with columns:
// - id (INT, PRIMARY KEY, AUTO_INCREMENT)
// - product_id (VARCHAR)
// - user_name (VARCHAR)
// - review_text (TEXT)
// - rating (INT)

// $result = saveReview('123', 'John Doe', 'Great product!', 5);
// print_r($result);

// Example output:
// Array
// (
//     [success] => true
//     [message] => Review saved successfully.
//     [review_id] => 1
// )


//  To display the review (fetch from the database):
/*
$sql = "SELECT * FROM reviews WHERE product_id = '123' ORDER BY rating DESC LIMIT 1";
$stmt = $db_connection->prepare($sql);
$stmt->execute();
$review = $stmt->fetch(PDO::FETCH_ASSOC);

if ($review) {
    echo "Product ID: " . $review['product_id'] . "<br>";
    echo "User: " . $review['user_name'] . "<br>";
    echo "Review: " . $review['review_text'] . "<br>";
    echo "Rating: " . $review['rating'] . "<br>";
} else {
    echo "No reviews found for this product.";
}
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $userId (Optional) The ID of the user submitting the review.  Used for tracking and potentially moderation.
 * @param array  $reviews  (Optional) An array of existing reviews to display. Defaults to an empty array.
 *
 * @return array An array containing:
 *   - 'reviews': An array of all reviews (existing and new).
 *   - 'newReview': The new review submitted by the user (if any).
 *
 * Example Usage:
 * $reviews = getReview($productName, $reviewText, $userId);
 * print_r($reviews);
 */
function getReview(string $productName, string $reviewText, string $userId = '', array $reviews = []): array
{
  // Sanitize input (Basic - enhance with more robust validation as needed)
  $productName = trim($productName);
  $reviewText = trim($reviewText);

  //  Check for empty review text.  It's good practice to require at least some content.
  if (empty($reviewText)) {
    return ['reviews' => $reviews, 'newReview' => null];
  }

  // Create a new review object.  This allows you to store additional data later if needed.
  $newReview = [
    'userId' => $userId,
    'text' => $reviewText,
    'date' => date('Y-m-d H:i:s') // Add a timestamp
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  return ['reviews' => $reviews, 'newReview' => $newReview];
}


//  Example Usage (Demonstration)
$product = "Awesome Gadget X";
$review1 = "This gadget is fantastic!  I love it!";
$review2 = "It's okay, but a bit overpriced.";

// Get the first review
$reviews1 = getReview($product, $review1, "user123");
print_r($reviews1);
echo "<br>";

// Get the second review
$reviews2 = getReview($product, $review2, "user456");
print_r($reviews2);
echo "<br>";

//  Example with empty review (to show handling)
$reviews3 = getReview($product, "", "user789");
print_r($reviews3);
echo "<br>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $rating  The user's rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $db_connection  A connection object to your database (e.g., MySQLi).
 *
 * @return array An array containing the success status and any error messages.
 */
function saveUserReview(string $product_id, string $user_name, string $rating, string $comment, array $db_connection) {
  // Validate input (basic example - expand for more robust validation)
  if (empty($product_id) || empty($user_name) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }


  // Sanitize input to prevent SQL injection (VERY IMPORTANT!)
  $product_id = $db_connection->real_escape_string($product_id);
  $user_name = $db_connection->real_escape_string($user_name);
  $rating = (int)$rating; //Convert to integer
  $comment = $db_connection->real_escape_string($comment);

  // SQL Query
  $sql = "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES ('$product_id', '$user_name', '$rating', '$comment')";

  if ($db_connection->query($sql) === TRUE) {
    return ['success' => true, 'message' => 'Review submitted successfully!'];
  } else {
    return ['success' => false, 'message' => 'Error submitting review: ' . $db_connection->error];
  }
}


/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param array $db_connection A connection object to your database.
 *
 * @return array An array of reviews.  Returns an empty array if no reviews.
 */
function getProductReviews(string $product_id, array $db_connection) {
  $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = $db_connection->query($sql);

  if ($result->num_rows > 0) {
    $reviews = [];
    while($row = $result->fetch_assoc()) {
      $reviews[] = $row;
    }
    return $reviews;
  } else {
    return [];
  }
}


// Example Usage (Illustrative - Adapt to your database setup)

//  Dummy Database Connection (Replace with your actual connection)
$db_connection = new mysqli("localhost", "username", "password", "database_name");
if ($db_connection->connect_error) {
  die("Connection failed: " . $db_connection->connect_error);
}

// Example 1: Save a review
$review_result = saveUserReview("123", "John Doe", 4, "Great product!  Highly recommend.", $db_connection);
if ($review_result['success']) {
  echo "Review saved successfully: " . $review_result['message'] . "
";
} else {
  echo "Error saving review: " . $review_result['message'] . "
";
}


// Example 2: Get reviews for product ID "123"
$reviews = getProductReviews("123", $db_connection);

if (!empty($reviews)) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}


// Close the database connection (important!)
$db_connection->close();
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a given product or item.
 * It provides basic input validation and stores the review in a simple file.
 *
 * @param string $product_id  The unique identifier for the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param string $review_file Path to the file to store reviews in.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, string $review_file): bool
{
    // Input Validation
    if (empty($product_id)) {
        error_log("Invalid product ID: Product ID cannot be empty.");
        return false;
    }
    if (empty($user_name)) {
        error_log("Invalid user name: User name cannot be empty.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Invalid review text: Review text cannot be empty.");
        return false;
    }

    // Sanitize input to prevent XSS attacks
    $review_text = htmlspecialchars($review_text);

    // Create a review entry
    $review_entry = "Product ID: $product_id
";
    $review_entry .= "User: $user_name
";
    $review_entry .= "Review: $review_entry
";

    // Append the review to the file
    if (file_put_contents($review_file, $review_entry, FILE_APPEND)) {
        return true;
    } else {
        error_log("Failed to write review to file: $review_file");
        return false;
    }
}

// Example Usage:
$product_id = "P123";
$user_name = "John Doe";
$review_text = "This product is amazing!  I really enjoyed it.";
$review_file = "reviews.txt";

if (save_user_review($product_id, $user_name, $review_text, $review_file)) {
    echo "Review saved successfully!
";
} else {
    echo "Failed to save review.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, display, and potentially manage user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product or item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Should be validated.
 * @param string $comment The user's review comment.
 * @param array $dbConnection  (Optional) Database connection object.  If not provided, assumes a connection exists.
 *
 * @return array|false  Returns an array with the review ID and success status.  Returns false on error.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, $dbConnection = null) {
    // Input Validation - Very important!
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty."); // Log for debugging
        return false;
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Invalid Username.  Only alphanumeric characters and underscores are allowed.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Invalid Rating.  Must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    if (strlen($comment) > 1000) {
        error_log("Error: Comment exceeds maximum length of 1000 characters.");
        return false;
    }



    // --- Database Interaction ---
    $reviewId = null;
    try {
        if ($dbConnection === null) {
            // Assume a connection is already established (e.g., in a global scope)
            $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
        } else {
            $db = $dbConnection;
        }


        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        $reviewId = $db->lastInsertId();

        return ['review_id' => $reviewId, 'success' => true];

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Handle database errors appropriately (e.g., display an error message)
    }
}



// Example Usage (Illustrative)
// Assuming you have a database connection object named $db
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");


// $reviewResult = storeUserReview("123", "john_doe", 4, "Great product!  Highly recommended.", $db);

// if ($reviewResult) {
//     echo "Review submitted successfully! Review ID: " . $reviewResult['review_id'];
// } else {
//     echo "Error submitting review.";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic validation and data storage (using a file for simplicity).
 * 
 * @param string $productName The name of the product or service being reviewed.
 * @param string $userRating A rating from 1 to 5.
 * @param string $userComment The user's written review.
 * @param string $username The username of the reviewer.
 * 
 * @return array  An array containing the result of the review submission.
 *                 Returns an empty array on error.
 */
function submit_review(string $productName, string $userRating, string $userComment, string $username): array
{
    // Validate inputs - Basic, can be expanded for more robust validation
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (!preg_match('/^[1-5][0-9]*$/', $userRating)) {
        return ['error' => 'Invalid rating.  Please enter a number between 1 and 5.'];
    }
    if (empty($userComment)) {
        return ['error' => 'Review comment cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    
    // Sanitize inputs (Important for security - add more sanitization as needed)
    $productName = trim($productName);
    $userRating = (int) $userRating; // Convert to integer for easier manipulation
    $userComment = trim($userComment);
    $username = trim($username);
    
    // Create the review data
    $reviewData = [
        'product_name' => $productName,
        'user_rating' => $userRating,
        'user_comment' => $userComment,
        'username' => $username,
        'timestamp' => time() // Add a timestamp
    ];

    // Store the review in a file (for demonstration purposes - use a database for production)
    $filepath = "reviews.txt";
    $reviewString = json_encode($reviewData) . "
"; 
    
    if (file_put_contents($filepath, $reviewString, FILE_APPEND)) {
        return ['success' => 'Review submitted successfully!'];
    } else {
        return ['error' => 'Failed to save review to file.'];
    }
}



// Example Usage:
$product = "Amazing Coffee Maker";
$rating = 5;
$comment = "This coffee maker is fantastic! It brews the perfect cup every time.";
$user = "JohnDoe";

$result = submit_review($product, $rating, $comment, $user);

if (isset($result['success'])) {
    echo "<p>Review submitted successfully: " . $result['success'] . "</p>";
} elseif (isset($result['error'])) {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
} else {
    echo "<p>Unknown error occurred.</p>";
}


//  Example to retrieve and display the reviews (Demonstration)
function display_reviews(string $filepath) {
    $reviews = file($filepath, FILE_IGNORE_NEW_LINES);
    if (count($reviews) == 0) {
        echo "<p>No reviews found.</p>";
        return;
    }
    echo "<h2>Reviews:</h2>";
    foreach ($reviews as $review) {
        echo "<div class='review'>";
        echo "<strong>Product:</strong> " . json_decode($review, true)['product_name'] . "<br>";
        echo "<strong>Rating:</strong> " . json_decode($review, true)['user_rating'] . "<br>";
        echo "<strong>User:</strong> " . json_decode($review, true)['username'] . "<br>";
        echo "<strong>Comment:</strong> " . json_decode($review, true)['user_comment'] . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", json_decode($review, true)['timestamp']) . "<br>";
        echo "</div>";
    }
}

//  Call display_reviews() after submitting reviews.
// display_reviews("reviews.txt"); //Uncomment to see displayed reviews.  Ensure reviews.txt exists.
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view user reviews for a specific product or item.
 *
 * @param string $productId The unique identifier of the product or item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews An optional array of existing reviews to display.
 *
 * @return array An associative array containing the new review (if submitted) 
 *              and all existing reviews.
 */
function createAndDisplayReviews(string $productId, string $username, string $reviewText, array $reviews = []) {
  // Validation - Basic Input Validation (Expand as needed)
  if (empty($username)) {
    return ['error' => 'Username cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }

  // Add the new review
  $newReview = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'),
  ];
  $reviews[] = $newReview;

  // Sort reviews by timestamp (newest first) -  Useful for displaying recent reviews
  usort($reviews, function($a, $b) {
    return $b['timestamp'] <=> $a['timestamp'];
  });

  return $reviews;
}


// Example Usage:
$product_id = 'product123';

// Submit a new review
$reviews = createAndDisplayReviews($product_id, 'JohnDoe', 'This product is amazing!  I highly recommend it.');

if (isset($reviews['error'])) {
  echo "Error: " . $reviews['error'] . "<br>";
} else {
  echo "<h2>Reviews for Product: " . $product_id . "</h2>";
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li><strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . " (" . $review['timestamp'] . ")</li>";
  }
  echo "</ul>";
}


// Example with an empty review
$reviews = createAndDisplayReviews($product_id, 'JaneSmith', "");
if (isset($reviews['error'])) {
    echo "Error: " . $reviews['error'] . "<br>";
}

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db_connection = null; // Database connection (optional)

    /**
     * Constructor
     *
     * Initializes the UserReview object.  Optionally connects to a database.
     *
     * @param PDO $dbConnection  (Optional)  A PDO object for database connections.
     *                           If not provided, the class will not interact with a database.
     */
    public function __construct(PDO $dbConnection = null)
    {
        $this->reviews = [];
        $this->db_connection = $dbConnection;
    }

    /**
     * Add a new review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $userName The name of the user writing the review.
     * @param string $reviewText The text of the review.
     * @param int $rating The rating (e.g., 1-5).
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating)
    {
        // Validation (basic - expand as needed)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $reviewId = $this->generateReviewId();

        $review = [
            'reviewId' => $reviewId,
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'rating' => $rating,
            'timestamp' => time()
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Generate a unique review ID.  A simple counter for demonstration.  
     * In a real application, you'd use a database-generated ID.
     *
     * @return int A unique review ID.
     */
    private function generateReviewId(): int
    {
        static $reviewIdCounter = 1;
        return $reviewIdCounter++;
    }


    /**
     * Get all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }


    /**
     * Update a review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newReviewText The new text of the review.
     * @return bool True on success, false on failure (e.g., review not found).
     */
    public function updateReview(int $reviewId, string $newReviewText): bool
    {
        $review = $this->getReviewById($reviewId);
        if ($review === null) {
            return false;
        }

        $review['reviewText'] = $newReviewText;
        return true;
    }


    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if review not found.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['reviewId'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Clear all reviews.  Use with caution!
     */
    public function clearAllReviews(): void
    {
        $this->reviews = [];
    }

    // Example method to output reviews (for demonstration purposes)
    public function displayReviews()
    {
        echo "<pre>";
        foreach ($this->reviews as $review) {
            echo "Review ID: " . $review['reviewId'] . "
";
            echo "Product ID: " . $review['productId'] . "
";
            echo "User: " . $review['userName'] . "
";
            echo "Review: " . $review['reviewText'] . "
";
            echo "Rating: " . $review['rating'] . "
";
            echo "Timestamp: " . $review['timestamp'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}

// Example Usage
// Create an instance of the UserReview class
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(1, "John Doe", "Great product!", 5);
$reviewSystem->addReview(1, "Jane Smith", "Could be better.", 3);
$reviewSystem->addReview(2, "Peter Jones", "Amazing!", 5);

// Display all reviews
$reviewSystem->displayReviews();

// Get reviews for product 1
$product1Reviews = $reviewSystem->getReviewsForProduct(1);
echo "<br>Reviews for product 1:<br>";
echo "<pre>";
print_r($product1Reviews);
echo "</pre>";

// Update a review
if ($reviewSystem->updateReview(1, "Fantastic product - highly recommended!") ) {
    echo "<br>Review for product 1 updated.<br>";
} else {
    echo "<br>Failed to update review.<br>";
}

// Delete a review
if ($reviewSystem->deleteReview(2)) {
    echo "<br>Review deleted.<br>";
} else {
    echo "<br>Failed to delete review.<br>";
}

// Display all reviews again
$reviewSystem->displayReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It provides basic data sanitization and validation.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array  $db_connection  Database connection object (optional, for external connection)
 *
 * @return array An array containing:
 *   - 'success': True if the operation was successful, False otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review (if creation was successful).
 *   - 'review': The review object (if creation or update was successful).
 */
function create_user_review(
    string $productId,
    string $user_id,
    string $rating,
    string $comment,
    array $db_connection = null // Optional database connection
) {
    // Validation and Sanitization (Important for security!)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    if (empty($productId) || empty($user_id) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
            'review_id' => null,
            'review' => null,
        ];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        return [
            'success' => false,
            'message' => 'Error preparing statement.',
            'review_id' => null,
            'review' => null,
        ];
    }

    // Bind parameters
    $stmt->bind_param("sii", $productId, $user_id, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        return [
            'success' => false,
            'message' => 'Error executing query: ' . $stmt->error,
            'review_id' => null,
            'review' => null,
        ];
    }

    // Get the last inserted ID
    $review_id = $db_connection->insert_id;

    // Get the newly created review (optional - can be returned separately if needed)
    $review = [
        'review_id' => $review_id,
        'product_id' => $productId,
        'user_id' => $user_id,
        'rating' => $rating,
        'comment' => $comment,
    ];

    // Close the statement
    $stmt->close();

    return [
        'success' => true,
        'message' => 'Review created successfully.',
        'review_id' => $review_id,
        'review' => $review,
    ];
}


/**
 * Example Usage (Illustrative - assumes a database connection is already established)
 */
// Example Database Connection (Replace with your actual connection details)
$db_connection = new mysqli("localhost", "username", "password", "database_name");

if ($db_connection->connect_error) {
    die("Connection failed: " . $db_connection->connect_error);
}

// Create a review
$review_result = create_user_review(
    "123", // Product ID
    "user123", // User ID
    3,       // Rating
    "Great product!", // Comment
);

if ($review_result['success']) {
    echo "Review created successfully! ID: " . $review_result['review_id'] . "<br>";
} else {
    echo "Error creating review: " . $review_result['message'] . "<br>";
}
// Close the connection (Important!)
$db_connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the user submitting the review.
 * @param int $rating (Optional)  A rating from 1-5. Defaults to 0.
 *
 * @return array  An array containing the review data, or an error message if the review fails.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName, int $rating = 0) {

  // Input validation - basic checks
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }
  if (empty($reviewerName)) {
    return ['status' => 'error', 'message' => 'Reviewer name cannot be empty.'];
  }

  // Validation for rating if provided
  if ($rating < 1 || $rating > 5) {
    return ['status' => 'error', 'message' => 'Rating must be between 1 and 5.'];
  }


  // Store the review (Simulating a database insert - replace with your database logic)
  $review = [
    'product_id' => $productId,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp
  ];

  //Simulate database insertion. In a real application, use a database query.
  //This example just returns the review.
  return $review;

}

/**
 * Display Reviews Function
 *
 * This function takes an array of reviews and displays them in a user-friendly format.
 *
 * @param array $reviews An array of review data (as returned by submitReview).
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Assuming product ID is in the first element of the array.

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer_name']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
    }
    echo "</ul>";
}

// Example Usage:
$product_id = "123";

// Submit a review
$review_data = submitReview($product_id, "This is a fantastic product!", "John Doe", 5);

if ($review_data['status'] === 'success') {
    echo "<h2>Review Submitted Successfully!</h2>";
    echo "<p>Review ID: " . $review_data['id'] . "</p>";  // Assuming you've added a unique ID
} else {
    echo "<p style='color: red;'>Error submitting review: " . $review_data['message'] . "</p>";
}

// Display the review
displayReviews($review_data);

// Example of submitting an invalid review
$invalid_review = submitReview($product_id, "", "Jane Smith");
if ($invalid_review['status'] === 'error') {
    echo "<p style='color: red;'>Error submitting review: " . $invalid_review['message'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, sanitizes the input,
 * stores it in a database (or an array for testing),
 * and potentially performs some basic validation.
 *
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param string $rating A numeric rating (e.g., 1-5).
 * @param string $email The user's email address (optional, for confirmation).
 * @param string $db_connection (optional) - Connection to your database.
 * @return array|string  Returns an array of review data or an error message string.
 */
function process_user_review(string $name, string $comment, string $rating, string $email = null, $db_connection = null)
{
    // Sanitize Input - IMPORTANT for security!
    $name = htmlspecialchars(trim($name));
    $comment = htmlspecialchars(trim($comment));
    $rating = (int) $rating; // Cast to integer for validation.  Handles invalid input gracefully.

    // Validation - Basic examples
    if (empty($name) || empty($comment)) {
        return "Error: Name and comment cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Create Review Data (for database storage or temporary storage)
    $review_data = [
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s'), // Add a timestamp for each review
        'email' => $email,
    ];

    // --- Database Interaction (Example - Adjust to your database setup) ---
    if ($db_connection) {
        try {
            // Assuming you have a database connection object called $db_connection
            //  This is a very basic example - adapt to your database schema.
            //  Error handling is crucial in a production environment.

            // Example using prepared statements (highly recommended)
            $sql = "INSERT INTO reviews (name, comment, rating, date, email) VALUES (?, ?, ?, ?, ?)";
            $stmt = $db_connection->prepare($sql);
            $stmt->execute([$name, $comment, $rating, date('Y-m-d H:i:s'), $email]);

            return ['success' => true, 'review_id' => $db_connection->lastInsertId()];  // Return review ID

        } catch (Exception $e) {
            return "Error: Database error - " . $e->getMessage();
        }

    } else {
        // Store in an array (for testing without a database)
        // You could also use a file, cache, etc.
        //  Example:
        //  $reviews[] = $review_data;
        return $review_data; // Return review data directly
    }
}



// --- Example Usage ---

// 1. Testing without a database:
$review = process_user_review("John Doe", "Great product!", 5);
print_r($review);

// 2.  With a database connection (replace with your actual connection details)
//  This assumes a database connection named `$db_connection`
//  You'll need to establish the connection first.
// $db_connection = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// $review = process_user_review("Jane Smith", "Could be better.", 3, "jane.smith@example.com");

// if ($review === ['success' => true]) {
//     echo "Review submitted successfully! Review ID: " . $review['review_id'] . "
";
// } else {
//     echo "Error: " . $review;
// }


?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for creating, storing, and displaying user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId; // Assuming a product ID is associated with the review
    private $rating;
    private $comment;
    private $createdAt;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating   The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->createdAt = date('Y-m-d H:i:s'); // Timestamp of review creation
    }

    /**
     * Getters and Setters (for data access)
     *
     * Public methods to access and modify the review's properties.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getCreatedAt() {
        return $this->createdAt;
    }

    /**
     * Display the review in a user-friendly format.
     *
     * @return string The review as a formatted string.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Created At: " . $this->getCreatedAt();
    }
}


/**
 * User Review Function Example
 */

// Create a new review object
$review = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");

// Display the review
echo $review->displayReview() . "
";

// Demonstrating setting properties after creation
$review->setRating(4);
echo "
Updated Review:
";
echo $review->displayReview() . "
";

// ---  Simulated Database Interaction (Replace with your actual database code) ---
// In a real application, you would save this to a database.
// For example:
// $db = new DatabaseConnection();
// $db->insertReview($review);

// --- End of Simulated Database Interaction ---
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It includes basic validation and error handling.
 *
 * @param string $product_id  The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $review_text The text of the review.
 * @return array  An array containing:
 *                - 'success':  True if the review was submitted successfully, False otherwise.
 *                - 'message':   A message indicating the result of the operation.
 *                - 'review':    The submitted review (if successful).
 */
function submit_review(string $product_id, string $username, string $review_text) {
    // Basic validation -  Important for security and data integrity
    if (empty($product_id) || empty($username) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Error: All fields are required.',
            'review' => null
        ];
    }

    if (strlen($review_text) > 1000) {
        return [
            'success' => false,
            'message' => 'Error: Review text exceeds maximum length (1000 characters).',
            'review' => null
        ];
    }

    // Simulate saving the review to a database (replace with your database logic)
    // In a real application, you would connect to your database and insert the data.
    // This is just a placeholder.
    $review = [
        'product_id' => $product_id,
        'username' => $username,
        'review_text' => $review_text,
        'timestamp' => time()
    ];

    //  Simulate successful save
    $success = true;
    $message = 'Review submitted successfully!';

    return [
        'success' => $success,
        'message' => $message,
        'review' => $review
    ];
}



/**
 * Displays reviews for a given product.
 *
 * @param array $reviews An array of review objects, as returned by submit_review.
 */
function display_reviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Assuming the product ID is always the first element.

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>"; // Sanitize output
            echo "<p><strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "</p>";
            echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:

// Submit a review
$review_result = submit_review("123", "John Doe", "This is a fantastic product! I highly recommend it.");

if ($review_result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review Data: " . print_r($review_result['review'], true) . "</p>";  // Display review data
} else {
    echo "<p>Error submitting review: " . $review_result['message'] . "</p>";
}

// Display the reviews
$reviews = [];
$review_result = submit_review("123", "Jane Smith", "Excellent value for money.");
if ($review_result['success']) {
    $reviews[] = $review_result['review'];
}

$review_result = submit_review("123", "Peter Jones", "Could be better...");
if ($review_result['success']) {
    $reviews[] = $review_result['review'];
}
display_reviews($reviews);



?>


<?php

/**
 * User Review Class - Handles user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (optional, auto-generated)
     * @param int $productId
     * @param int $userId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $productId, $userId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters and Setters for the properties.
     */

    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            // Handle invalid rating (e.g., throw an exception or set to default)
            throw new InvalidArgumentException("Rating must be between 1 and 5.");
        }
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Method to display the review information (for review display)
     *
     * @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() . "
" .
               "Product ID: " . $this->getProductId() . "
" .
               "User ID: " . $this->getUserId() . "
" .
               "Rating: " . $this->getRating() . "
" .
               "Comment: " . $this->getComment() . "
" .
               "Date: " . $this->getDate();
    }
}


/**
 * User Review Review Function (Simplified Review System)
 */
function displayReviewFunction($reviews) {
    echo "<br><h2>User Reviews</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    foreach ($reviews as $review) {
        echo "<br><h3>Review by User ID: " . $review->getUserId() . "</h3>";
        echo $review->displayReview();
        echo "<br>";
    }
}

// Example Usage:

// Create some review objects
$review1 = new UserReview(null, 123, 1, 5, "Great product! Highly recommended.");
$review2 = new UserReview(null, 456, 2, 4, "Good value for money.");
$review3 = new UserReview(null, 123, 3, 3, "It's okay.");


// Store the reviews in an array
$reviews = [$review1, $review2, $review3];


// Call the displayReviewFunction
displayReviewFunction($reviews);

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a given item.
 *
 *  @param string $item_id - The unique identifier for the item being reviewed.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the review.
 *  @param int $rating - The rating given by the user (e.g., 1-5).
 *  @param string $db_connection -  A database connection object (e.g., mysqli or PDO).
 *
 *  @return void
 */
function storeUserReview(string $item_id, string $user_name, string $review_text, int $rating, $db_connection)
{
    // Sanitize and validate inputs (VERY IMPORTANT)
    $item_id = mysqli_real_escape_string($db_connection, $item_id); // or your appropriate escape function
    $user_name = mysqli_real_escape_string($db_connection, $user_name);
    $review_text = mysqli_real_escape_string($db_connection, $review_text);
    $rating = (int)$rating;  // Cast to integer for database storage

    // Ensure rating is within valid range (1-5 in this example)
    if ($rating < 1 || $rating > 5) {
        // Handle invalid rating (e.g., display error, log error, default to 1)
        error_log("Invalid rating provided: " . $rating);
        $rating = 1; // Default to 1 if invalid
    }


    // SQL Query - Use parameterized queries to prevent SQL injection
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES ('$item_id', '$user_name', '$review_text', $rating)";

    if (mysqli_query($db_connection, $sql)) {
        // Review successfully added
        echo "Review submitted successfully!
";
    } else {
        // Handle error (e.g., log the error, display an error message)
        error_log("Error adding review: " . mysqli_error($db_connection));
        echo "Error adding review. Please try again later.
";
    }
}



// Example Usage (assuming you have a database connection)
// In a real application, you'd get these values from a form
// $item_id = 'product123';
// $user_name = 'John Doe';
// $review_text = 'This product is amazing!';
// $rating = 5;

// //  Establish database connection (replace with your database credentials)
// $db_connection = mysqli_connect("localhost", "your_username", "your_password", "your_database");

// // Check connection
// if (mysqli_connect_errno($db_connection)) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error($db_connection);
// } else {
//     storeUserReview('product123', 'John Doe', 'This product is amazing!', 5, $db_connection);
// }
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews for a given product.
 *
 * @param string $productId The ID of the product for which to display reviews.
 * @param string $username The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array of existing reviews for the product (optional).  If not provided, a new array is created.
 *
 * @return array An array containing all reviews for the product.  Returns an empty array if the product
 *              doesn't exist or if an error occurs during saving.
 */
function createAndDisplayUserReview(string $productId, string $username, string $reviewText, array $reviews = []): array
{
    // Validate input (add more validation as needed)
    if (empty($productId) || empty($username) || empty($reviewText)) {
        return []; // Return empty array for invalid input
    }

    // Add the new review to the array
    $reviews[] = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => date('Y-m-d H:i:s') // Add timestamp for better ordering and tracking
    ];

    // Sort the reviews by timestamp (newest first)
    usort($reviews, function ($a, $b) {
        return $b['timestamp'] <=> $a['timestamp'];
    });

    // Display the reviews (optional - can be moved to a separate function)
    echo "<p><b>New Review:</b> " . htmlspecialchars($reviewText) . "</p>";
    echo "<p><b>Posted by:</b> " . htmlspecialchars($username) . "</p>";
    echo "<p><b>Timestamp:</b> " . htmlspecialchars($reviews[count($reviews) - 1]['timestamp']) . "</p>";
    echo "<hr>";

    return $reviews;
}



// Example Usage (Demonstration)
$productID = '123';  // Replace with a real product ID

// Create some initial reviews for demonstration
$reviews = [
    ['productId' => '123', 'username' => 'John Doe', 'reviewText' => 'Great product!', 'timestamp' => date('Y-m-d H:i:s')],
    ['productId' => '123', 'username' => 'Jane Smith', 'reviewText' => 'Excellent value for money.', 'timestamp' => date('Y-m-d H:i:s')],
];

// Create a new review
$newReview = createAndDisplayUserReview($productID, 'Peter Jones', 'This is fantastic!  I highly recommend it.');

// Add another review
$newReview2 = createAndDisplayUserReview($productID, 'Alice Brown', 'It works perfectly!');

// Display all reviews
echo "<h2>All Reviews for Product " . $productID . ":</h2>";
echo "<ul>";
foreach ($reviews as $review) {
    echo "<li>" . htmlspecialchars($review['username']) . ": " . htmlspecialchars($review['reviewText']) . " - " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";



?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $review_id (Optional) - Unique ID for the review. If not provided, auto-generated.
     * @param int $user_id   The ID of the user who wrote the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating     The rating (e.g., 1-5).
     * @param string $comment The review comment.
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->review_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review (for demonstration)
     */
    public function displayReview() {
        echo "<p><strong>Review ID:</strong> " . $this->getReviewId() . "</p>";
        echo "<p><strong>User ID:</strong> " . $this->getUserID() . "</p>";
        echo "<p><strong>Product ID:</strong> " . $this->getProductID() . "</p>";
        echo "<p><strong>Rating:</strong> " . $this->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $this->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $this->getDate() . "</p>";
    }
}

/**
 * User Review Function (Demonstration)
 */
function createReview($review_id = null, $user_id, $product_id, $rating, $comment) {
    // Validate inputs (Example - improve as needed)
    if (!$user_id || !$product_id || $rating < 1 || $rating > 5 || !$comment) {
        return false; // Indicate failure
    }

    $review = new UserReview($review_id, $user_id, $product_id, $rating, $comment);
    return $review;
}

// Example Usage
$review1 = createReview(null, 123, 456, 4, "Great product!  I loved it.");
$review1->displayReview();

$review2 = createReview(101, 456, 789, 5, "Excellent value for money.");
$review2->displayReview();

$review3 = createReview(null, 789, 101, 3, "It was okay, nothing special.");
$review3->displayReview();

// Example with invalid input
$review_invalid = createReview(null, 101, 112, 6, "Invalid Review");
if (!$review_invalid) {
    echo "<p>Review creation failed.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewerName The name of the user who wrote the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  (Optional)  The rating given by the user (e.g., 1-5). Defaults to 0.
 * @param int $userId (Optional) The unique ID of the user.  Used for database integration.
 *
 * @return bool|string Returns true on success, or an error message string on failure.
 */
function createReview(string $productName, string $reviewerName, string $reviewText, int $rating = 0, int $userId = 0)
{
    // Input validation -  Important for security and data integrity
    if (empty($productName) || empty($reviewerName) || empty($reviewText)) {
        return "Error: Product Name, Reviewer Name, and Review Text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }
    if ($userId <= 0) {
        return "Error: User ID must be a positive integer.";
    }
    // ---------------------------------------------------------------------
    //  Here, you would typically interact with a database
    //  to store the review data.  This is a simplified example
    //  for demonstration purposes.
    // ---------------------------------------------------------------------

    // Example:  Store the review in a simple array (Replace with database interaction)
    $reviews = [];
    if (isset($_SESSION['reviews'])) {
        $reviews = $_SESSION['reviews']; // Use session storage if available.  Better than global variables.
    }


    $newReview = [
        'product' => $productName,
        'reviewer' => $reviewerName,
        'text' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking.
        'userId' => $userId
    ];
    $reviews[] = $newReview;
    $_SESSION['reviews'] = $reviews; // Store in session
    return true;

    // ---------------------------------------------------------------------
    //  Example Database Interaction (Conceptual - requires database setup)
    //  This is commented out because it needs database credentials and setup.
    //  Uncomment and modify to use a database.
    /*
    try {
        // Connect to the database (replace with your database credentials)
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

        // Prepare and execute the SQL query
        $stmt = $db->prepare("INSERT INTO reviews (product_name, reviewer_name, review_text, rating, timestamp, userId) 
                               VALUES (:product_name, :reviewer_name, :review_text, :rating, :timestamp, :userId)");
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':reviewer_name', $reviewerName);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':timestamp', $timestamp);
        $stmt->bindParam(':userId', $userId);

        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database Error: " . $e->getMessage());  //Log the error for debugging
        return "Error: Could not save review to database.  " . $e->getMessage();
    }
    */
}


// Example Usage:
// Create a review
$result = createReview("Awesome Widget", "John Doe", "This widget is fantastic!", 5);

if ($result === true) {
    echo "Review created successfully!";
} else {
    echo $result; // Display the error message
}

// Another example
$result2 = createReview("Another Product", "Jane Smith", "Good but could be better", 3, 123);
if ($result2 === true) {
    echo "<br> Review created successfully!";
} else {
    echo "<br>" . $result2;
}

?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic system for storing and displaying user reviews.
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $rating;
    private $comment;
    private $date_created;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $user_id The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($user_id, $rating, $comment) {
        $this->review_id = null; // Will be assigned by the database
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_created = date("Y-m-d H:i:s"); // Current timestamp
    }

    /**
     * Getters and Setters (for encapsulation)
     */

    public function getReviewId() {
        return $this->review_id;
    }

    public function setReviewId($review_id) {
        $this->review_id = $review_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCommentLength() {
        return strlen($this->comment);
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     * Display the review as a formatted string.
     *
     * @return string The formatted review string.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserID() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date Created: " . $this->date_created;
    }
}



/**
 * User Review Review Function - Example Usage
 */

function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>" . $review->displayReview() . "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Create some review objects
$review1 = new UserReview(123, 5, "Great product!  Highly recommended.");
$review1->setReviewId(1);

$review2 = new UserReview(456, 3, "It was okay, but could be better.");
$review2->setReviewId(2);


$review3 = new UserReview(789, 4, "Excellent value for the money!");
$review3->setReviewId(3);



// Store the reviews (this would typically involve database interaction)
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic data validation and sanitization.
 *
 * @param string $review_text The user's review text.
 * @param int $product_id The ID of the product the review is for.
 * @param int $user_id  (Optional) The ID of the user making the review.  If not provided, a new user is created.
 * @param int $rating The rating given for the product (e.g., 1-5).
 * @return array|string Returns an array on success, or an error message string on failure.
 */
function create_user_review(string $review_text, int $product_id, int $rating, int $user_id = null)
{
    // --- Validation and Sanitization ---
    $review_text = trim($review_text); // Remove leading/trailing whitespace
    if (empty($review_text)) {
        return "Error: Review text cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // --- Database Interaction (Simulated for this example) ---
    // In a real application, you would replace this with actual database queries.

    // Simulate a user object if the user_id is not provided
    $user = $user_id ? get_user_by_id($user_id) : create_new_user();

    // Example data for the review (in a real implementation, you'd use a proper database connection)
    $review_data = [
        'user_id' => $user ? $user['id'] : null, // User ID from the user object
        'product_id' => $product_id,
        'review_text' => $review_text,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Timestamp
    ];


    // --- Save the Review ---
    $review_id = save_review($review_data);

    if ($review_id === null) {
        return "Error: Could not save review.";
    }

    return [
        'success' => true,
        'review_id' => $review_id
    ];
}


/**
 *  Simulated Database Functions (Replace with your actual database logic)
 */

/**
 *  Simulates getting a user by ID
 */
function get_user_by_id(int $user_id)
{
    // In a real application, query the database.
    // This is just a placeholder.
    // Returns a dummy user object.
    return [
        'id' => $user_id,
        'username' => 'user' . $user_id,
        'email' => 'user' . $user_id . '@example.com'
    ];
}


/**
 * Simulates creating a new user.
 */
function create_new_user()
{
    // In a real application, you'd insert the new user into the database.
    // This returns a dummy user object.
    return [
        'id' => 123,
        'username' => 'newuser',
        'email' => 'newuser@example.com'
    ];
}


/**
 *  Simulates saving a review to a database.  Returns the review id.
 */
function save_review(array $review_data)
{
  // In a real implementation, this would execute a SQL query to insert the review.
  // This is a placeholder.
    // Simulate a successful save.
    return 42; // Return a valid review ID (could be the primary key from the database).
}


/**
 *  Example usage:
 */
// Example 1: Successful review creation
$result = create_user_review("This product is amazing!", 1, 5);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}


// Example 2: Invalid rating
$result = create_user_review("Good product.", 2, 6);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}

// Example 3: Empty review text
$result = create_user_review("", 3, 4);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a given product or item.
 * It includes input validation, sanitization, and basic display functionality.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param array $reviews An array of user review objects.
 *                     Each review object should have 'user' and 'comment' properties.
 * @return string HTML formatted display of user reviews.  Returns an error message if input is invalid.
 */
function displayUserReviews(string $productName, array $reviews)
{
    // Input Validation and Sanitization (Crucial for Security!)
    if (empty($productName)) {
        return "<p style='color:red;'>Error: Product name cannot be empty.</p>";
    }

    if (!is_array($reviews)) {
        return "<p style='color:red;'>Error: Reviews must be an array.</p>";
    }

    foreach ($reviews as $review) {
        if (!is_object($review) || !isset($review->user) || !isset($review->comment)) {
            return "<p style='color:red;'>Error: Each review must be an object with 'user' and 'comment' properties.</p>";
        }
    }

    // HTML Formatting
    $html = "<div class='user-reviews'>";
    $html .= "<h2>Reviews for {$productName}</h2>";

    if (empty($reviews)) {
        $html .= "<p>No reviews yet. Be the first to review!</p>";
    } else {
        foreach ($reviews as $review) {
            $html .= "<div class='review'>";
            $html .= "<p class='review-user'><strong>User:</strong> {$review->user}</p>";
            $html .= "<p class='review-comment'><em>{$review->comment}</em></p>";
            $html .= "</div>";
        }
    }

    $html .= "</div>";

    return $html;
}


// Example Usage:

// Sample Reviews (Replace with actual data)
$reviews = [
    (object) [
        'user' => 'John Doe',
        'comment' => 'Great product!  Easy to use and works perfectly.'
    ],
    (object) [
        'user' => 'Jane Smith',
        'comment' => 'I love this!  Highly recommend.'
    ],
    (object) [
        'user' => 'Peter Jones',
        'comment' => 'Could be better, but overall a good value.'
    ]
];

// Call the function
$reviewHtml = displayUserReviews("Awesome Widget", $reviews);

// Output the HTML (for demonstration - you'd typically display this in a web page)
echo $reviewHtml;


// Example of an error case:
$errorHtml = displayUserReviews("", $reviews);
echo "<br><br>Error Example:<br>" . $errorHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  An established database connection object.
 *
 * @return array  An array containing success status and potentially the ID of the new review.
 */
function createReview(string $productId, string $username, string $rating, string $comment, array $dbConnection) {
  // Input validation (basic) - enhance this for production
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.'];
  }


  // Prepare the SQL query - IMPORTANT: Use prepared statements to prevent SQL injection!
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
           VALUES (?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $dbConnection->prepare($sql);

  if ($stmt === false) {
    return ['success' => false, 'message' => 'Database error preparing statement.'];
  }

  // Bind the parameters
  $stmt->bind_param("ssis", $productId, $username, $rating, $comment);  // s = string, i = integer, s = string

  // Execute the query
  if ($stmt->execute() === false) {
    return ['success' => false, 'message' => 'Database error executing query: ' . $stmt->error];
  }

  // Get the last inserted ID (if supported by your database)
  $reviewId = $dbConnection->insert_id; //  This might not work on all databases
  
  // Close the statement
  $stmt->close();

  return ['success' => true, 'review_id' => $reviewId];
}



/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $productId The product ID.
 * @param array $dbConnection An established database connection.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $productId, array $dbConnection) {
    $sql = "SELECT id, product_id, username, rating, comment, created_at
            FROM reviews
            WHERE product_id = ?
            ORDER BY created_at DESC"; //  Order by date for the most recent reviews

    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['reviews' => []]; // Return empty array in case of error.
    }

    $stmt->bind_param("s", $productId);

    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();

    return $reviews;
}

// Example Usage (Illustrative - Adapt to your setup)
// Assuming you have a database connection object named $conn

// Create a review
//$review_data = createReview("product_123", "JohnDoe", 4, "Great product!", $conn);
//print_r($review_data);

// Retrieve reviews for a product
//$reviews = getReviewsForProduct("product_123", $conn);
//print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function takes user review data and stores it in a database.
 * It also handles basic validation and error reporting.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The content of the review.
 * @param int $product_id The ID of the product the review is for.
 * @param int $rating  The rating provided by the user (1-5).
 * @return bool True on successful submission, false on failure.
 */
function submit_review(string $username, string $reviewText, int $product_id, int $rating) {
  // **Validation** -  Crucial for security and data integrity
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");  // Log the error for admin review
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  // **Database Interaction -  Replace with your actual database connection**
  try {
    // Connect to your database (replace with your database connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (user_name, review_text, product_id, rating) VALUES (:username, :review, :prod_id, :rate)");

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review', $reviewText);
    $stmt->bindParam(':prod_id', $product_id);
    $stmt->bindParam(':rate', $rating);

    // Execute the statement
    $stmt->execute();

    // Return success
    return true;

  } catch (PDOException $e) {
    // Handle database errors - Log for debugging
    error_log("Database Error: " . $e->getMessage());
    return false;
  }
}

// **Example Usage**
$username = "John Doe";
$reviewText = "This product is amazing! I highly recommend it.";
$product_id = 123;
$rating = 5;

if (submit_review($username, $reviewText, $product_id, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}


?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to process and store user reviews.
 * It handles input validation, sanitization, and basic formatting.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating A numeric rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $product_id The ID of the product being reviewed.
 * 
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function processReview(string $username, string $rating, string $comment, int $product_id) {
    // Input Validation and Sanitization
    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }
    if (empty($comment)) {
        return "Error: Comment cannot be empty.";
    }
    if (!is_int($product_id) || $product_id <= 0) {
        return "Error: Product ID must be a positive integer.";
    }

    // Sanitize input (more robust sanitization would be needed in a real application)
    $username = trim($username);
    $comment = trim($comment);

    // Format the review (example - you can customize this)
    $formatted_review = "Review by: " . $username . "<br>" .
                         "Rating: " . $rating . "<br>" .
                         "Comment: " . $comment . "<br>";

    // Save the review to a database (example)
    // Replace this with your actual database code
    try {
        // Assuming you have a database connection established
        // (e.g., using PDO or mysqli)
        // $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        // $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
        // $stmt->execute([$product_id, $username, $rating, $comment]);

        // Example placeholder -  Replace this with your database interaction
        $reviews = json_encode([
          "username" => $username,
          "rating" => $rating,
          "comment" => $comment,
          "product_id" => $product_id
        ]);
        
        return true; // Indicate success
    } catch (Exception $e) {
        return "Error saving review: " . $e->getMessage();
    }
}


// Example usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  I really enjoyed it.";
$product_id = 123;

$result = processReview($username, $rating, $comment, $product_id);

if ($result === true) {
    echo "Review submitted successfully!";
} else {
    echo "Error: " . $result;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $userName  The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating   The rating given by the user (e.g., 1-5).
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing success/failure status and optionally the review ID.
 */
function createReview(
    string $productId,
    string $userName,
    string $reviewText,
    int $rating,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Validation (You can customize this based on your requirements)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID is required.'];
    }
    if (empty($userName)) {
        return ['success' => false, 'message' => 'User name is required.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text is required.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    try {
        // Database connection (using PDO - a recommended practice)
        $dsn = "mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4";
        $options = [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Return results as associative arrays
        ];
        $pdo = new PDO($dsn, $dbUser, $dbPassword, $options);

        // Prepare the SQL statement
        $stmt = $pdo->prepare(
            "INSERT INTO reviews (productId, userName, reviewText, rating) VALUES (?, ?, ?, ?)"
        );

        // Bind the parameters
        $stmt->execute([$productId, $userName, $reviewText, $rating]);

        // Get the last inserted ID
        $reviewId = $pdo->lastInsertId();

        return ['success' => true, 'reviewId' => $reviewId, 'message' => 'Review created successfully.'];

    } catch (PDOException $e) {
        // Handle database errors (important!)
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


// Example Usage:
// Replace with your actual database credentials
$productId = 'product123';
$userName = 'John Doe';
$reviewText = 'This product is amazing!  I highly recommend it.';
$rating = 5;
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPassword = 'your_database_password';



$result = createReview($productId, $userName, $reviewText, $rating, $dbHost, $dbName, $dbUser, $dbPassword);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It handles input validation, sanitization, and basic data storage.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $author The name of the reviewer.
 * @param string $rating  A rating from 1 to 5.
 * @param string $comment The reviewer's comments.
 * @param string $db_connection  A database connection object.  (You'll need to establish this connection elsewhere)
 *
 * @return bool True on success, false on failure.
 */
function submit_review(string $product_id, string $author, string $rating, string $comment, $db_connection) {

    // Input Validation
    if (empty($product_id) || empty($author) || empty($rating) || empty($comment)) {
        error_log("Empty field(s) submitted for review ID: " . $product_id);
        return false;
    }

    if (!preg_match('/^[0-5][0-9]*$/', $rating)) { // Check if rating is a number between 1 and 5
        error_log("Invalid rating format: " . $rating);
        return false;
    }

    // Sanitize Input (Prevent SQL Injection) - IMPORTANT!
    $product_id = $db_connection->real_escape_string($product_id); // Use your database connection's escape function
    $author = $db_connection->real_escape_string($author);
    $comment = $db_connection->real_escape_string($comment);


    // Prepare and Execute the SQL Query
    $query = "INSERT INTO reviews (product_id, author, rating, comment) VALUES (" .
             "'$product_id', '$author', '$rating', '$comment')";

    $result = $db_connection->query($query);

    if (!$result) {
        error_log("Error submitting review: " . $db_connection->error);
        return false;
    }

    return true;
}



// Example Usage (Illustrative - requires database setup)
//  This is NOT a complete, executable example.  It demonstrates how you'd use the function.
//  You'll need a database connection, a 'reviews' table with the appropriate columns, and error handling.
/*
$db = new mysqli("localhost", "username", "password", "database_name"); // Replace with your DB details

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$product_id = "123";
$author = "John Doe";
$rating = "4";
$comment = "Great product! Would recommend.";

if (submit_review($product_id, $author, $rating, $comment, $db)) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

$db->close(); // Close the database connection
*/



// Example Review Table Structure (MySQL)
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic data validation and sanitization.
 *
 * @param string $product_id The unique identifier of the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param int   $rating      (Optional) The rating given by the user (1-5).  Defaults to 0.
 *
 * @return bool|string Returns true on successful saving, or an error message string if saving fails.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating = 0) {
    // **Data Validation & Sanitization** - Crucial for security and data integrity

    // Check if the product ID is valid
    if (!preg_match('/^[a-zA-Z0-9_-]+$/', $product_id)) {
        return "Invalid product ID.  Must contain only letters, numbers, underscores, and hyphens.";
    }

    // Sanitize the user name and review text to prevent XSS attacks
    $user_name = htmlspecialchars($user_name);
    $review_text = htmlspecialchars($review_text);

    // Sanitize the rating
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    if ($rating === false) {
        return "Invalid rating. Please enter a number between 1 and 5.";
    }


    // **Database Interaction (Example - Adapt to your DB setup)**
    // This is a placeholder.  Replace with your actual database connection and query logic.
    try {
        // Connect to your database (using PDO is recommended)
        // Example:
        // $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)";

        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the query
        $stmt->execute();

        return true;  // Success!

    } catch (PDOException $e) {
        // Handle database errors
        return "Error saving review: " . $e->getMessage();
    }
}


/**
 * Function to display user reviews for a given product.
 *
 * @param string $product_id The unique identifier of the product.
 * @return array|string Returns an array of review data if successful, or an error message.
 */
function display_user_reviews(string $product_id) {
    // **Database Interaction (Example - Adapt to your DB setup)**
    // This is a placeholder.  Replace with your actual database connection and query logic.

    try {
        // Connect to your database
        // Example:
        // $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $reviews;

    } catch (PDOException $e) {
        return "Error retrieving reviews: " . $e->getMessage();
    }
}


// **Example Usage (Illustrative - Replace with your actual code)**
//  For demonstration purposes only.  Don't run this directly without a database setup.

// Create a dummy database connection (replace with your actual connection)
// $db = new PDO("mysql:host=localhost;dbname=test_db", "user", "password");  // Example connection

//  Save a review
$review_result = save_user_review("product123", "John Doe", "This is a fantastic product!");
if ($review_result == true) {
    echo "Review saved successfully!<br>";
} else {
    echo "Error saving review: " . $review_result . "<br>";
}

// Retrieve and display reviews
$reviews = display_user_reviews("product123");

if ($reviews) {
    echo "<h3>Reviews for Product 123:</h3>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><b>User:</b> " . $review['user_name'] . "<br>";
        echo "<b>Rating:</b> " . $review['rating'] . "<br>";
        echo "<b>Review:</b> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "No reviews found for product 123.";
}


?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function takes user input and outputs a formatted user review.
 * It's a simplified example and can be expanded to include
 * more features like database storage, rating systems, etc.
 *
 * @param string $username      The name of the user.
 * @param string $reviewText    The text of the user's review.
 * @param int    $rating        (Optional) The rating given by the user (1-5). Defaults to 0.
 *
 * @return string Formatted review string.
 */
function generateUserReview(string $username, string $reviewText, int $rating = 0) {
  // Input validation - Basic, can be expanded
  if (empty($username)) {
    return "Error: Username cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review text cannot be empty.";
  }

  // Create the review string
  $review = "Review by: " . $username . "
";
  $review .= "Rating: " . $rating . " stars
";
  $review .= "Review: " . $reviewText . "
";

  return $review;
}

// Example Usage:
$username = "John Doe";
$review = "This product is amazing! I highly recommend it.";
$rating = 5;

$formattedReview = generateUserReview($username, $review, $rating);
echo $formattedReview . PHP_EOL;

// Another example with default rating:
$username = "Jane Smith";
$review = "The product was okay, but could be better.";
$formattedReview = generateUserReview($username, $review);
echo $formattedReview . PHP_EOL;

// Example with error handling (empty username):
$username = "";
$review = "This is a review.";
$formattedReview = generateUserReview($username, $review);
echo $formattedReview . PHP_EOL;

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes validation, data sanitization, and basic formatting.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param string $rating The rating (e.g., 1-5).
 *
 * @return array An array containing:
 *               - 'success': true if the review was created successfully, false otherwise.
 *               - 'message': A message indicating the status of the review.
 *               - 'review': The newly created review data if successful.
 */
function createAndDisplayReview(string $productId, string $reviewerName, string $reviewText, string $rating)
{
    // Validate inputs -  Important for security!
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
    }
    if (empty($reviewerName)) {
        return ['success' => false, 'message' => 'Reviewer Name cannot be empty.', 'review' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review Text cannot be empty.', 'review' => null];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => null];
    }

    // Sanitize Inputs (Crucial for security - prevent XSS)
    $reviewerName = htmlspecialchars($reviewerName);
    $reviewText = htmlspecialchars($reviewText);
    $rating = (int)$rating; // Cast to integer for database operations

    //  Simulate storing the review in a database (replace with your actual database logic)
    //  In a real application, you'd use a database query.
    $review = [
        'product_id' => $productId,
        'reviewer_name' => $reviewerName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp
    ];

    // Store the review (simulated)
    // Example:  $db->insert('reviews', $review);


    return ['success' => true, 'message' => 'Review created successfully!', 'review' => $review];
}



/**
 * Display Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing:
 *               - 'reviews': An array of review objects.
 *               - 'totalReviews': The total number of reviews.
 *               - 'noReviews':  true if no reviews exist for the product.
 */
function displayReviews(string $productId)
{
    // Simulate fetching reviews from a database
    // In a real application, you would execute a database query.

    $reviews = [
        ['product_id' => 1, 'reviewer_name' => 'Alice', 'review_text' => 'Great product!', 'rating' => 5, 'created_at' => '2023-10-27 10:00:00'],
        ['product_id' => 1, 'reviewer_name' => 'Bob', 'review_text' => 'Good value for money.', 'rating' => 4, 'created_at' => '2023-10-26 14:30:00'],
        ['product_id' => 2, 'reviewer_name' => 'Charlie', 'review_text' => 'Excellent!', 'rating' => 5, 'created_at' => '2023-10-25 09:15:00']
    ];

    $totalReviews = count($reviews);
    $noReviews = $totalReviews == 0;

    return ['reviews' => $reviews, 'totalReviews' => $totalReviews, 'noReviews' => $noReviews];
}


// Example Usage:

// 1. Create a Review
$reviewResult = createAndDisplayReview(1, 'David Smith', 'This product is amazing!', 5);

if ($reviewResult['success']) {
    echo "Review created successfully!<br>";
    echo "Review Details: " . print_r($reviewResult['review'], true) . "<br>";
} else {
    echo "Error creating review: " . $reviewResult['message'] . "<br>";
}


// 2. Display Reviews for Product 1
$reviewsData = displayReviews(1);

if ($reviewsData['noReviews']) {
    echo "No reviews found for product 1.<br>";
} else {
    echo "Reviews for Product 1:<br>";
    echo "Total Reviews: " . $reviewsData['totalReviews'] . "<br>";
    foreach ($reviewsData['reviews'] as $review) {
        echo "Reviewer: " . $review['reviewer_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "<br>";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For a production environment,
 * you would likely use a database.
 */

class ReviewManager {

    private $reviews = [];
    private $reviewIdCounter = 1; // To ensure unique IDs

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return int The ID of the newly created review.
     * @throws InvalidArgumentException if any required input is missing or invalid.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment): int
    {
        // Input validation
        if (!$productId || !$username || !$rating || !$comment) {
            throw new InvalidArgumentException("Missing required input.");
        }
        if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
            throw new InvalidArgumentException("Invalid rating. Rating must be a number between 1 and 5.");
        }

        $reviewId = $this->reviewIdCounter++;
        $this->reviews[$reviewId] = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];

        return $reviewId;
    }


    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array The review data if found, or null if not found.
     */
    public function getReview(int $reviewId): ?array
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }


    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new ID of the product (optional).
     * @param string $username The new username (optional).
     * @param string $rating The new rating (optional).
     * @param string $comment The new comment (optional).
     *
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $productId = null, string $username = null, string $rating = null, string $comment = null): bool
    {
        if (!isset($this->reviews[$reviewId])) {
            return false; // Review not found
        }

        $originalReview = $this->reviews[$reviewId];
        $updatedReview = [];

        if ($productId !== null) {
            $updatedReview['productId'] = $productId;
        }
        if ($username !== null) {
            $updatedReview['username'] = $username;
        }
        if ($rating !== null) {
            if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
                return false;  // Invalid rating
            }
            $updatedReview['rating'] = $rating;
        }
        if ($comment !== null) {
            $updatedReview['comment'] = $comment;
        }

        $this->reviews[$reviewId] = $updatedReview;
        return true;
    }


    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId): bool
    {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }
        return false;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of all review data.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }
}

// Example Usage:
$reviewManager = new ReviewManager();

// Create a review
$reviewId = $reviewManager->createReview(123, 'JohnDoe', 4, 'Great product, would recommend!');

// Get the review
$review = $reviewManager->getReview($reviewId);
if ($review) {
    echo "Review ID: " . $review['productId'] . "
";
    echo "Username: " . $review['username'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Comment: " . $review['comment'] . "
";
}

// Update the review
$reviewManager->updateReview($reviewId, 124, 'JaneSmith', 5, 'Excellent value!');

// Get the updated review
$updatedReview = $reviewManager->getReview($reviewId);
if ($updatedReview) {
    echo "
Updated Review:
";
    echo "Username: " . $updatedReview['username'] . "
";
    echo "Rating: " . $updatedReview['rating'] . "
";
    echo "Comment: " . $updatedReview['comment'] . "
";
}

// Delete the review
$reviewManager->deleteReview($reviewId);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "
All Reviews:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes basic validation and error handling.
 */

class UserReview
{
    private $db_connection = null;

    /**
     * Constructor
     *
     * Establishes a database connection (you'll need to replace this 
     * with your actual database connection logic).
     */
    public function __construct($db_config) {
        // Example using PDO - Adapt this to your database system
        try {
            $this->db_connection = new PDO("mysql:host=" . $db_config['host'] . ";dbname=" . $db_config['dbname'] . ";charset=utf8", $db_config['user'], $db_config['password']);
            $this->db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            // Handle the connection error appropriately.  Logging is a good idea.
            die("Database connection failed: " . $e->getMessage());
        }
    }


    /**
     * Create a New Review
     *
     * Accepts review data via POST.
     *
     * @param array $reviewData Array containing review data (title, rating, comment).
     * @return int|string The ID of the new review if successful, or an error message string if not.
     */
    public function createReview(array $reviewData) {
        // Validation - Very important to prevent bad data
        if (empty($reviewData['title'])) {
            return "Title cannot be empty.";
        }
        if (empty($reviewData['rating'])) {
            return "Rating cannot be empty.";
        }
        if (!is_numeric($reviewData['rating'])) {
            return "Rating must be a number.";
        }
        if (empty($reviewData['comment'])) {
            return "Comment cannot be empty.";
        }

        // Sanitize data (important for security) - adapt to your needs
        $title = htmlspecialchars($reviewData['title']);
        $rating = (int)$reviewData['rating']; // Convert rating to an integer
        $comment = htmlspecialchars($reviewData['comment']);


        // Prepare SQL statement
        $sql = "INSERT INTO reviews (title, rating, comment) VALUES (:title, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db_connection->prepare($sql);

        // Set the parameters
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        try {
            $stmt->execute();
            return $this->db_connection->lastInsertId(); // Return the ID of the newly created review
        } catch (PDOException $e) {
            return "Error creating review: " . $e->getMessage();
        }
    }

    /**
     * Get Reviews
     *
     * Retrieves all reviews, or reviews based on criteria.
     *
     * @param array $criteria  (Optional) Array of criteria for filtering reviews.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviews(array $criteria = []) {
        $sql = "SELECT * FROM reviews";

        if (!empty($criteria)) {
            $whereClauses = [];
            foreach ($criteria as $column => $value) {
                $whereClauses[] = "$column = :{$column}";
            }
            $whereClause = implode(" AND ", $whereClauses);
            $sql .= " WHERE " . $whereClause;
        }


        $stmt = $this->db_connection->prepare($sql);
        if (!empty($criteria)) {
            $stmt->execute($criteria);
        } else {
            $stmt->execute();
        }

        $reviews = [];
        $stmt->fetch(PDO::FETCH_CLASS, 'Review'); // Fetch as Review objects (you'll need to define Review class)
        while ($review = $stmt->fetch()) {
            $reviews[] = $review;
        }

        return $reviews;
    }



    /**
     * Delete a Review
     *
     * Deletes a review based on its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':id', $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }
}


// Example Usage (replace with your database details)
$db_config = [
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_username',
    'password' => 'your_password'
];

$review_function = new UserReview($db_config);


// Create a review
$new_review_id = $review_function->createReview(['title' => 'Great Product!', 'rating' => 5, 'comment' => 'Highly recommended.']);
if ($new_review_id) {
    echo "New review created with ID: " . $new_review_id . "<br>";
} else {
    echo "Failed to create review.<br>";
    echo $review_function->createReview(['title' => 'Great Product!', 'rating' => 5, 'comment' => 'Highly recommended.']) . "<br>";
}

// Get all reviews
$all_reviews = $review_function->getReviews();

echo "<h3>All Reviews:</h3>";
foreach ($all_reviews as $review) {
    echo "<b>Title:</b> " . $review->title . "<br>";
    echo "<b>Rating:</b> " . $review->rating . "<br>";
    echo "<b>Comment:</b> " . $review->comment . "<br><br>";
}

// Example: Get reviews with rating greater than 4
$high_rated_reviews = $review_function->getReviews(['rating' => '>=' , 'rating' => 4]);

echo "<h3>Reviews with rating >= 4:</h3>";
foreach ($high_rated_reviews as $review) {
    echo "<b>Title:</b> " . $review->title . "<br>";
    echo "<b>Rating:</b> " . $review->rating . "<br>";
    echo "<b>Comment:</b> " . $review->comment . "<br><br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (optional) A rating from 1 to 5 (default: null).
 * @param int $timestamp (optional) Unix timestamp of when the review was created (default: current timestamp).
 * @return array|string  Returns an array on success, or an error message string on failure.
 */
function storeUserReview(string $product_id, string $user_name, string $review_text, ?int $rating = null, ?int $timestamp = null) {
    // Validation - basic checks to prevent malicious input.  Expand as needed.
    if (empty($product_id) || empty($user_name) || empty($review_text)) {
        return "Error: Product ID, User Name, and Review Text cannot be empty.";
    }
    if ($rating === null) {
        $rating = null; // Allow null rating.
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    //  Database interaction -  This is a placeholder.  Replace with your actual database logic.
    //  This example demonstrates how to store the data in an array (simulating a database).

    $review = [
        'product_id' => $product_id,
        'user_name' => $user_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp ?? time() // Use current time if timestamp is not provided.
    ];

    //  In a real application, you'd insert this data into a database.

    // Example database storage (replace with your actual database code)
    //  e.g.,  $db->insert('reviews', $review);

    // Successful Storage
    return $review;
}


/**
 *  Example function to retrieve reviews for a product.  This is just an example; 
 *  adapt it to your database design and retrieval method.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @return array|string Returns an array of reviews or an error message.
 */
function getProductReviews(string $product_id) {
    //  Example:  Retrieve reviews from a database table called 'reviews'
    //  Assuming the table has columns: product_id, user_name, review_text, rating, timestamp

    //  This is just an example; adapt it to your database design and retrieval method.

    $reviews = [];

    //  Replace this with your database query
    // Example using a simulated database (replace with actual query)
    // $result = $db->query("SELECT * FROM reviews WHERE product_id = ?", $product_id);
    // while ($row = $result->fetch_assoc()) {
    //     $reviews[] = $row;
    // }

    // Simulate a database result
    if ($product_id === '123') {
        $reviews = [
            ['product_id' => '123', 'user_name' => 'John Doe', 'review_text' => 'Great product!', 'rating' => 5, 'timestamp' => time()],
            ['product_id' => '123', 'user_name' => 'Jane Smith', 'review_text' => 'Good value for money.', 'rating' => 4, 'timestamp' => time() - 3600], // A review from an hour ago
        ];
    } else {
        $reviews = []; // No reviews found for this product ID
    }

    return $reviews;
}


// --- Example Usage ---

// Store a review
$review_data = storeUserReview('123', 'Alice', 'This is an amazing product!', 5);
if (is_array($review_data)) {
    echo "Review stored successfully: " . json_encode($review_data) . "
";
} else {
    echo "Error storing review: " . $review_data . "
";
}


// Get reviews for product '123'
$product_reviews = getProductReviews('123');
if (is_array($product_reviews)) {
    echo "Product Reviews:
";
    foreach ($product_reviews as $review) {
        echo "  - " . json_encode($review) . "
";
    }
} else {
    echo "No reviews found for product '123'
";
}


// Store another review with a timestamp
$review_data2 = storeUserReview('456', 'Bob', 'Okay product, could be better.', 4, time() - 7200); // Review from 2 hours ago.
if (is_array($review_data2)) {
    echo "Review stored successfully: " . json_encode($review_data2) . "
";
} else {
    echo "Error storing review: " . $review_data2 . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations for a simple review system.
 *
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given for the review (e.g., 1-5).
 * @param int    $item_id    The ID of the item being reviewed (e.g., product ID, restaurant ID).
 * @param int    $user_id    The ID of the user submitting the review.
 *
 * @return array An array containing:
 *              - 'success': True if the operation was successful, False otherwise.
 *              - 'message': A message indicating the outcome (e.g., 'Review created', 'Review updated').
 *              - 'review_id': The ID of the newly created review, if applicable.
 *
 *  Database interaction is simulated for demonstration purposes.
 */
function create_review(string $review_text, int $rating, int $item_id, int $user_id)
{
    // Simulate database interaction (replace with your actual database code)
    $review_id = generate_unique_id();  // Placeholder - implement your unique ID generation.
    $review = [
        'review_text' => $review_text,
        'rating' => $rating,
        'item_id' => $item_id,
        'user_id' => $user_id,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    // Validate input (example - enhance this for production)
    if (empty($review_text) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid review data.',
        ];
    }

    // Store the review (replace with your database insert)
    //  For example:
    //  $result = mysqli_query($conn, "INSERT INTO reviews (review_text, rating, item_id, user_id, created_at) VALUES ('$review_text', $rating, $item_id, $user_id, NOW())");
    //  if (!$result) {
    //      return [
    //          'success' => false,
    //          'message' => 'Database error: ' . mysqli_error($conn),
    //      ];
    //  }

    return [
        'success' => true,
        'message' => 'Review created',
        'review_id' => $review_id,
    ];
}


function get_review(int $review_id)
{
    // Simulate database retrieval
    //  Replace this with your actual database query
    // Example (using a hypothetical 'reviews' table):
    // $result = mysqli_query($conn, "SELECT * FROM reviews WHERE id = $review_id");
    // $review = mysqli_fetch_assoc($result);
    // if (!$result || !$review) {
    //     return null; // Or handle the error appropriately
    // }

    // Example dummy data
    if ($review_id == 1) {
        return [
            'review_id' => $review_id,
            'review_text' => 'This is a great product!',
            'rating' => 5,
            'item_id' => 101,
            'user_id' => 2,
            'created_at' => date('Y-m-d H:i:s')
        ];
    } else {
        return null;
    }
}



function update_review(int $review_id, string $new_review_text, int $new_rating)
{
    // Simulate database update
    // Replace with your actual database query
    // Example:
    // $result = mysqli_query($conn, "UPDATE reviews SET review_text = '$new_review_text', rating = $new_rating WHERE id = $review_id");

    if ($review_id == 1) {
        return [
            'success' => true,
            'message' => 'Review updated',
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Review not found',
        ];
    }
}


function delete_review(int $review_id)
{
    // Simulate database deletion
    // Replace with your actual database query
    // Example:
    // $result = mysqli_query($conn, "DELETE FROM reviews WHERE id = $review_id");

    if ($review_id == 1) {
        return [
            'success' => true,
            'message' => 'Review deleted',
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Review not found',
        ];
    }
}


// Example usage:
// Create a review
$result = create_review('Excellent product!', 5, 101, 2);
print_r($result);

// Get a review
$review = get_review(1);
print_r($review);

// Update a review
$result = update_review(1, 'Even better!', 6);
print_r($result);

// Delete a review
$result = delete_review(1);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with a basic rating system.
 *
 * @param string $user_id The unique ID of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $item_id The ID of the item being reviewed.
 * @param array $database_connection  (Optional)  Database connection object. Defaults to null.
 * 
 * @return bool True on success, false on failure.
 */
function save_user_review(
    string $user_id,
    string $review_text,
    int $rating,
    string $item_id,
    array $database_connection = null
) {
    // Input Validation - IMPORTANT!  Don't skip this.
    if (empty($user_id) || empty($review_text) || $rating < 1 || $rating > 5 || empty($item_id)) {
        error_log("Invalid review data received. user_id: " . $user_id . ", review_text: " . $review_text . ", rating: " . $rating . ", item_id: " . $item_id); // Log the error
        return false;
    }


    //  Use prepared statements to prevent SQL Injection - CRITICAL SECURITY
    $sql = "INSERT INTO reviews (user_id, item_id, review_text, rating) 
            VALUES (?, ?, ?, ?)";

    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing statement.  Error: " . print_r($database_connection->error, true));
        return false;
    }

    // Bind parameters
    $stmt->bind_param("siss", $user_id, $review_text, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        error_log("Error executing query.  Error: " . print_r($stmt->error, true));
        return false;
    }

    // Close the statement
    $stmt->close();

    return true;
}

/**
 * Example Usage (Illustrative - Adapt to your specific setup)
 */

//  Assume you have a database connection object called $db

// Example 1: Successful Save
$user_id = "user123";
$review_text = "This product is fantastic!";
$rating = 5;
$item_id = "product456";

if (save_user_review($user_id, $review_text, $rating, $item_id, $db)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Example 2:  Illustrative example of invalid input
if (save_user_review("", "Review", 6, "item789")) { // Empty user_id
  echo "Should not reach here";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews.
 * It handles data validation, saving reviews to a database,
 * and retrieving reviews.
 */
class UserReview
{
    private $db;

    public function __construct($db)
    {
        $this->db = $db; // Database connection object
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The user's name.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview($productId, $user, $rating, $comment)
    {
        // Input validation (important!)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }
        if (empty($user) || empty($comment)) {
            return false; // Empty fields are not allowed.
        }

        // Prepare the SQL statement (using prepared statements for security)
        $sql = "INSERT INTO reviews (product_id, user, rating, comment)
                VALUES (:product_id, :user, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        return $stmt->execute();
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new Review($row['product_id'], $row['user'], $row['rating'], $row['comment']); //  Create Review Objects
        }

        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     *
     * @return Review|null A Review object, or null if not found.
     */
    public function getReviewById($reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            return new Review($row['product_id'], $row['user'], $row['rating'], $row['comment']);
        }

        return null;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure (e.g., review not found).
     */
    public function deleteReview($reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    }

}


/**
 * Review Object (Data Object)
 */
class Review
{
    public $productId;
    public $user;
    public $rating;
    public $comment;

    public function __construct($productId, $user, $rating, $comment)
    {
        $this->productId = $productId;
        $this->user = $user;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}



// Example Usage (Illustrative - Requires a Database Connection)
// Replace with your actual database setup

// Dummy Database Connection (Replace with your real connection)
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_user', 'your_password');

// Create an instance of the Review class
$reviewManager = new UserReview($db);

// Create a review
$reviewManager->createReview(123, 'John Doe', 4, 'Great product! Highly recommended.');

// Get reviews for product 123
$reviews = $reviewManager->getReviewsByProduct(123);

foreach ($reviews as $review) {
    echo "Product ID: " . $review->productId . "<br>";
    echo "User: " . $review->user . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br>";
    echo "<hr>";
}

// Get a specific review
$review = $reviewManager->getReviewById(1); // Replace 1 with the actual review ID

if ($review) {
    echo "Review details: <br>";
    echo "Product ID: " . $review->productId . "<br>";
    echo "User: " . $review->user . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br>";
} else {
    echo "Review not found.";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating     The rating given by the reviewer (e.g., 1-5).
 * @param string $comment    The reviewer's comment/feedback.
 * @param array $dbConnection  A database connection object (e.g., mysqli).
 *
 * @return array|string  Returns an array on success, or an error message string on failure.
 */
function create_user_review(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    $dbConnection
) {
    // Validate input (important for security and data integrity)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return "Error: All fields are required.";
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // Sanitize input to prevent SQL injection
    $productId = mysqli_real_escape_string($dbConnection, $productId);
    $username = mysqli_real_escape_string($dbConnection, $username);
    $rating = mysqli_real_escape_string($dbConnection, $rating);
    $comment = mysqli_real_escape_string($dbConnection, $comment);

    // SQL query -  IMPORTANT: Use prepared statements for real applications!
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES ('$productId', '$username', '$rating', '$comment')";

    if (mysqli_query($dbConnection, $sql)) {
        return "Review created successfully!";
    } else {
        return "Error creating review: " . mysqli_error($dbConnection);
    }
}

/**
 * Function to display all reviews for a product.
 *
 * @param array $dbConnection  A database connection object.
 * @param string $productId  The ID of the product.
 *
 * @return array|string  Returns an array of reviews, or an error message.
 */
function display_reviews(string $productId, $dbConnection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = mysqli_query($dbConnection, $sql);

    if ($result) {
        $reviews = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return "Error: Unable to retrieve reviews: " . mysqli_error($dbConnection);
    }
}



// Example Usage (This part is just for demonstration - you'll need to adapt to your database setup)

// Assuming you have a database connection object named $conn

// Create a Review
//$review_result = create_user_review("123", "JohnDoe", "5", "Excellent product!", $conn);
//echo $review_result; // Output: Review created successfully!

// Get all reviews for product 123
//$reviews = display_reviews("123", $conn);

//if (is_array($reviews)) {
//   echo "<h2>Reviews for Product 123:</h2>";
//   foreach ($reviews as $review) {
//       echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
//       echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//       echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
//       echo "<hr>";
//   }
//} else {
//   echo $reviews; // Output the error message if retrieval failed
//}


// IMPORTANT NOTES:

// 1. Database Setup: This code assumes you have a database set up with a table named "reviews" 
//    with columns: product_id (INT), username (VARCHAR), rating (INT), comment (TEXT).

// 2. Prepared Statements:  The `create_user_review` function uses simple string concatenation to build the SQL query.  **THIS IS VULNERABLE TO SQL INJECTION ATTACKS.**  For production code, ALWAYS use prepared statements to prevent this. Prepared statements separate the SQL code from the data, preventing malicious data from being interpreted as SQL commands.

// Example of using prepared statements (using mysqli):

//    $stmt = mysqli_prepare($dbConnection, "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
//    mysqli_stmt_bind_param($stmt, "s", $productId, $username, $rating, $comment);  // 's' indicates a string parameter
//    mysqli_stmt_execute($stmt);
//    mysqli_stmt_close($stmt);

// 3. Error Handling: This code includes basic error handling, but you should implement more robust error logging and handling in a production environment.

// 4. Input Validation: The code validates the rating, but you should add more comprehensive input validation to prevent invalid data from being stored.  Consider using a validation library.

// 5. Security:  Always sanitize and validate user input to prevent security vulnerabilities.  Prepared statements are essential.

// 6.  Data Types: Adjust data types in your SQL table schema to match your requirements.  For example, you might use `INT` for `product_id`, `VARCHAR` for `username`, `FLOAT` or `DECIMAL` for `rating` (if you need decimal precision), and `TEXT` for `comment`.

?>


<?php

/**
 * User Review Function
 *
 * This function creates a new user review, saves it to a database, and returns
 * the review details.
 *
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param int $item_id     The ID of the item being reviewed.
 * @return array|false Returns an array containing the review details on success,
 *                     or false on failure.
 */
function createReview(string $username, string $rating, string $comment, int $item_id)
{
    // Input Validation - Important for security and data integrity
    if (empty($username) || empty($rating) || empty($comment) || $item_id <= 0) {
        return false; // Invalid input
    }

    // Validate rating (e.g., between 1 and 5)
    $rating = (int) $rating; // Convert to integer
    if ($rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    // Connect to the database (replace with your database credentials)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Prepare the SQL query to prevent SQL injection
        $stmt = $db->prepare(
            "INSERT INTO reviews (username, rating, comment, item_id) 
             VALUES (:username, :rating, :comment, :item_id)"
        );

        // Bind parameters to the query
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        $stmt->bindParam(':item_id', $item_id);

        // Execute the query
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db->lastInsertId();

        // Return the review details
        return [
            'id' => $review_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'item_id' => $item_id,
            'timestamp' => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

    } catch (PDOException $e) {
        // Handle database errors (e.g., logging, display an error message)
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false; // Indicate failure
    }
}


// Example Usage (replace with your actual values)
$review = createReview("JohnDoe", 4, "Great product!", 123);

if ($review !== false) {
    echo "Review created successfully with ID: " . $review['id'] . "<br>";
    print_r($review); // Display review details
} else {
    echo "Review creation failed. Please check your input and database connection.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic CRUD operations and provides a simple interface
 * for managing reviews.
 *
 * Note: This is a simplified example for illustrative purposes.  In a real-world
 * application, you'd want to handle database connections, error handling,
 * input validation, and potentially more complex features.
 */

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $created_at;

    /**
     * Constructor
     *
     * Initializes a new Review object.
     *
     * @param int $user_id
     * @param int $product_id
     * @param int $rating
     * @param string $comment
     */
    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->created_at = date('Y-m-d H:i:s');
    }

    /**
     * Getters
     *
     *  Provides access to the properties of the Review object.
     *
     * @return mixed
     */
    public function getId() {
        return $this->id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function getProduct_id() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCreated_at() {
        return $this->created_at;
    }

    /**
     * Setters
     *
     * Allows updating properties of the Review object.
     *
     * @param mixed $id
     * @param mixed $rating
     * @param string $comment
     */
    public function setId($id) {
        $this->id = $id;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }
}


/**
 * Review Management Functions
 */
class ReviewManager {
    private $reviews = [];

    public function addReview($user_id, $product_id, $rating, $comment) {
        $review = new Review($user_id, $product_id, $rating, $comment);
        $this->reviews[] = $review;
        return $review; // Return the newly created review
    }

    public function getReviewsByProductId($product_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getProduct_id() == $product_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    public function getReviewsByUser($user_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getUser_id() == $user_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    // You could add update and delete functions here too
}


// Example Usage
$reviewManager = new ReviewManager();

// Create a review
$review1 = $reviewManager->addReview(1, 101, 5, "Great product!  Highly recommend.");
$review2 = $reviewManager->addReview(2, 101, 4, "Good value for the money.");
$review3 = $reviewManager->addReview(1, 102, 3, "Okay product, nothing special.");

// Get reviews for product 101
$reviewsForProduct101 = $reviewManager->getReviewsByProductId(101);
echo "Reviews for Product 101:
";
foreach ($reviewsForProduct101 as $review) {
    echo "- " . $review->getCreated_at() . " - User ID: " . $review->getUser_id() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment() . "
";
}

// Get reviews for user 1
$reviewsByUser1 = $reviewManager->getReviewsByUser(1);
echo "
Reviews for User 1:
";
foreach ($reviewsByUser1 as $review) {
    echo "- " . $review->getCreated_at() . " - User ID: " . $review->getUser_id() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment() . "
";
}
?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to create, store, and retrieve user reviews.
 */
class Review
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * @param PDO $db  Database connection object.  It's best practice to pass this in.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview(int $product_id, string $user_name, string $rating, string $comment)
    {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_name', $user_name);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $product_id The ID of the product.
     *
     * @return array An array of Review objects, or an empty array if none found.
     */
    public function getReviewsByProduct(int $product_id)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new Review($row); // Create a new Review object for each row
        }

        return $reviews;
    }

    /**
     * Review class constructor.  Used internally by the Review class
     * to create individual review objects.
     *
     * @param array $data An associative array containing the review data
     */
    private function __construct(array $data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user_name = $data['user_name'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
    }


    /**
     *  Get a single review by its ID.
     *
     * @param int $id The ID of the review to retrieve.
     * @return Review|null A Review object if found, null otherwise.
     */
    public static function getReviewById(int $id) {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            return new Review($row);
        }

        return null;
    }
}


// Example Usage (assuming you have a PDO database connection $db)

// Create a database connection (replace with your database credentials)
try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Create a Review object and use it
$review = new Review($db);

// Create a review
$review->createReview(123, "John Doe", 5, "Great product, highly recommend!");

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

foreach ($reviews as $review) {
    echo "Product ID: " . $review->product_id . "<br>";
    echo "User: " . $review->user_name . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br><br>";
}

// Get a specific review
$specific_review = Review::getReviewById(1); // Assuming ID 1 exists
if ($specific_review) {
    echo "Specific Review: <br>";
    echo "Product ID: " . $specific_review->product_id . "<br>";
    echo "User: " . $specific_review->user_name . "<br>";
    echo "Rating: " . $specific_review->rating . "<br>";
    echo "Comment: " . $specific_review->comment . "<br>";
} else {
    echo "Review not found.";
}

?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for managing and displaying user reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The name of the user who submitted the review.
     * @param string $comment The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user, string $comment) {
        if (empty($user) || empty($comment)) {
            return false; // Validation: User and comment must be provided.
        }
        $this->reviews[] = ['user' => $user, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by ID.  (Simulated with index for simplicity)
     *
     * @param int $reviewId The ID of the review to retrieve.  (This is a simulated index,
     *                     should be managed with a proper database or array key)
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }
        return false;
    }

    /**
     * Calculates the average rating for a product (simulated).
     *
     * @param string $productName  The name of the product being reviewed.
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function calculateAverageRating(string $productName) {
        $ratings = [];
        foreach ($this->reviews as $review) {
            if ($review['comment'] === strtolower($productName)) {
                $ratings[] = $review['rating']; // Assuming a 'rating' field exists in the review
            }
        }

        if (empty($ratings)) {
            return null;
        }

        return array_sum($ratings) / count($ratings);
    }
}


// Example Usage:
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('Alice', 'Great product, highly recommended!');
$reviewManager->addReview('Bob', 'It\'s okay, could be better.');
$reviewManager->addReview('Charlie', 'Excellent value for the money.');
$reviewManager->addReview('David', 'Poor quality, would not buy again.');

// Retrieve all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviewManager->getReviewById(1);
if ($specificReview) {
    echo "
Review ID 1:
";
    print_r($specificReview);
} else {
    echo "
Review not found.";
}

// Calculate average rating for a product
$averageRating = $reviewManager->calculateAverageRating('product name');
if ($averageRating !== null) {
    echo "
Average rating for 'product name': " . $averageRating . "
";
} else {
    echo "
No reviews found for 'product name'.
";
}

//Delete a review
$reviewManager->deleteReview(2);
echo "
After deleting review 2:
";
print_r($reviewManager->getAllReviews());
?>


<?php

/**
 * This function creates a user review object and handles basic validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment about the reviewed item.
 * @return array|false  An associative array containing the review data on success, or false on failure.
 */
function createReview(string $username, string $rating, string $comment)
{
    // Validate input
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");  // Log the error
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating'   => (int)$rating, // Convert rating to integer
        'comment'  => $comment,
        'date'     => date("Y-m-d H:i:s"), // Add timestamp for review creation
        'status'   => 'pending' // Default status
    ];

    return $review;
}


// Example Usage:

// Create a valid review
$reviewData = createReview("JohnDoe", 4, "Great product!  Highly recommend.");

if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed.
";
}

// Create an invalid review (empty username)
$reviewData = createReview("", 3, "Okay product.");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}


// Create an invalid review (invalid rating)
$reviewData = createReview("JaneSmith", 6, "Good, but could be better.");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}

// Create an invalid review (empty comment)
$reviewData = createReview("PeterJones", 5, "");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic input validation and sanitization.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $dbConnection  A database connection object.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully saved, false otherwise.
 *              - 'message':  A message indicating the status of the review.
 *              - 'review': The review data if successful.
 */
function saveReview(string $productId, string $username, string $reviewText, array $dbConnection)
{
    // Input Validation and Sanitization -  IMPORTANT
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
    }

    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'review' => null];
    }

    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => null];
    }

    // Sanitize input -  Consider more robust sanitization based on your needs
    $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
    //You could add further sanitization here, for example, escaping HTML tags
    //if you were allowing users to input HTML content.  Don't do this for simple text.

    // SQL Injection Prevention -  Using Prepared Statements
    $sql = "INSERT INTO reviews (product_id, username, review_text) VALUES (?, ?, ?)";
    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => 'Error preparing statement.  Check database connection.', 'review' => null];
    }

    $stmt->bind_param("ss", $productId, $username, $reviewText); // "ss" specifies string parameters

    if (!$stmt->execute()) {
        return ['success' => false, 'message' => 'Error executing query: ' . $stmt->error, 'review' => null];
    }

    $stmt->close();

    // Get the last inserted ID (if your database generates an auto-increment ID)
    $lastProductId = $dbConnection->lastInsertId();


    return ['success' => true, 'message' => 'Review saved successfully.', 'review' => ['product_id' => $lastProductId, 'username' => $username, 'review_text' => $reviewText]];
}


/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param int $productId The ID of the product.
 * @param array $dbConnection A database connection object.
 *
 * @return array An array containing:
 *              - 'reviews': An array of review objects, or an empty array if no reviews exist.
 *              - 'success': True if reviews were successfully retrieved, false otherwise.
 */
function getReviewsForProduct(int $productId, array $dbConnection)
{
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['reviews' => [], 'success' => false, 'message' => 'Error preparing statement. Check database connection.'];
    }

    $stmt->bind_param("i", $productId); // "i" specifies an integer parameter

    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    }

    $stmt->close();

    return ['reviews' => $reviews, 'success' => true];
}



// Example Usage (Illustrative - Requires Database Setup)
// Replace with your actual database connection
$dbConnection = new mysqli("localhost", "your_username", "your_password", "your_database");
if ($dbConnection->connect_error) {
    die("Connection failed: " . $dbConnection->connect_error);
}

// Save a review
$reviewResult = saveReview(123, "John Doe", "This is a great product!", $dbConnection);
print_r($reviewResult);


// Get reviews for product 123
$reviewsResult = getReviewsForProduct(123, $dbConnection);
print_r($reviewsResult);

// Close the connection (Important!)
$dbConnection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|false Returns an array containing the review ID, or false if the review could not be saved.
 */
function saveUserReview(string $product_id, string $user_name, string $review_text, int $rating = 0) {
  // Validate inputs (you can expand this validation)
  if (empty($product_id) || empty($user_name) || empty($review_text)) {
    return false; // Return false for invalid input
  }

  if ($rating < 1 || $rating > 5) {
    $rating = 0; //  Or handle this differently, e.g., throw an exception.
  }

  //  Database connection (replace with your database setup)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (product_id, user_name, review_text, rating) 
       VALUES (:product_id, :user_name, :review_text, :rating)"
    );

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    // Get the last inserted ID
    $review_id = $db->lastInsertId();

    return ['id' => $review_id]; // Return the review ID
  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage());  // Log for debugging
    return false; // Return false on error
  }
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @return array|false Returns an array of reviews or false if no reviews are found.
 */
function displayUserReviews(string $product_id) {
  // Database connection
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, user_name, review_text, rating FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $reviews[] = [
        'id' => $row['id'],
        'user_name' => $row['user_name'],
        'review_text' => $row['review_text'],
        'rating' => $row['rating']
      ];
    }

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage:
// 1. Save a Review
$review_data = saveUserReview('product123', 'John Doe', 'This is a great product!', 5);

if ($review_data) {
  echo "Review saved successfully!  Review ID: " . $review_data['id'] . "
";
} else {
  echo "Failed to save review.
";
}

// 2. Display Reviews for a Product
$reviews = displayUserReviews('product123');

if ($reviews) {
  echo "Reviews for product123:
";
  foreach ($reviews as $review) {
    echo "  User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
  }
} else {
  echo "No reviews found for product123.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, review text, and optionally a rating,
 * and saves the review to a database.  It handles input validation and
 * error logging.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating (Optional) The rating given for the review (1-5). Defaults to null.
 * @return bool True on success, false on failure.
 */
function saveUserReview(int $userId, string $reviewText, int $rating = null) {
  // Input Validation -  Crucial for security and data integrity
  if ($userId <= 0) {
    error_log("Invalid user ID: " . $userId);
    return false;
  }

  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }

  if ($rating > 5 || $rating < 1) {
    error_log("Invalid rating. Rating must be between 1 and 5.");
    return false;
  }

  // Database connection (replace with your actual database credentials)
  $dbHost = 'localhost';
  $dbName = 'your_database_name';
  $dbUser = 'your_username';
  $dbPassword = 'your_password';

  try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage());
    return false;
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:userId, :reviewText, :rating)";
  $stmt = $pdo->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':reviewText', $reviewText);
  $stmt->bindParam(':rating', $rating);

  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    error_log("Error executing SQL query: " . print_r($stmt->errorInfo(), true)); // Log the error details
    return false;
  }
}


// Example usage:
$userId = 123;
$review = "This is a great product!";
$rating = 5;

if (saveUserReview($userId, $review, $rating)) {
  echo "Review saved successfully!";
} else {
  echo "Failed to save review.";
}


// Example with only user ID and review text:
$userId = 456;
$review = "The service was excellent.";

if (saveUserReview($userId, $review)) {
  echo "
Review saved successfully!";
} else {
  echo "
Failed to save review.";
}


?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function creates a basic user review object and saves it to a file.
 *  It's a starting point and can be expanded with database integration,
 *  more validation, and more sophisticated data handling.
 */

class Review {
    public $user_id;
    public $product_id;
    public $rating;
    public $comment;
    public $date;

    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Add timestamp
    }

    public function getReviewData() {
        return [
            'user_id' => $this->user_id,
            'product_id' => $this->product_id,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'date' => $this->date
        ];
    }
}

/**
 * Function to create a new user review
 *
 * @param int $userId The ID of the user writing the review.
 * @param int $productId The ID of the product being reviewed.
 * @param int $rating The rating (e.g., 1-5).
 * @param string $comment The user's comment.
 *
 * @return Review|null Returns a Review object on success, or null on error.
 */
function createReview($userId, $productId, $rating, $comment) {

    // **Input Validation - CRITICAL!**  Always validate user input.
    if (!is_numeric($userId) || $userId <= 0) {
        error_log("Invalid userId: " . $userId); // Log for debugging
        return null;
    }
    if (!is_numeric($productId) || $productId <= 0) {
        error_log("Invalid productId: " . $productId);
        return null;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating: " . $rating);
        return null;
    }
    if (empty($comment)) {
        error_log("Comment cannot be empty.");
        return null;
    }

    $review = new Review($userId, $productId, $rating, $comment);

    // **File Saving (Replace with Database Integration)**
    $filename = "reviews.txt";  // Simple file storage - use database in production
    $reviewData = $review->getReviewData();
    $reviewString = json_encode($reviewString);
    $result = file_put_contents($filename, $reviewString . "
", FILE_APPEND); // Append to file

    if ($result === false) {
        error_log("Error writing to file: " . $filename);
        return null;
    }

    return $review;
}


// **Example Usage:**
$newReview = createReview(123, 456, 4, "Great product!");

if ($newReview) {
    echo "Review created successfully!  User ID: " . $newReview->user_id . "
";
    echo "Review: " . json_encode($newReview->getReviewData()) . "
";
} else {
    echo "Review creation failed.
";
}


?>


<?php

/**
 * Function to process user reviews and display them.
 *
 * @param array $reviews An array of review objects (see example below).
 * @return void
 */
function displayUserReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet. Be the first to leave one!</p>";
    return;
  }

  echo "<h2>User Reviews</h2>";

  foreach ($reviews as $review) {
    echo "<div class='review'>";
    echo "<p><strong>Author:</strong> " . htmlspecialchars($review['author']) . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
    echo "<p>" . nl2br(htmlspecialchars($review['comment'])) . "</p>"; // Use nl2br for line breaks
    echo "<div class='timestamp'>Posted: " . date("F d, Y g:i:s", strtotime($review['timestamp'])) . "</div>";
    echo "</div>";
  }
}


/**
 * Example Review Object
 *
 * @param string $author
 * @param int $rating
 * @param string $comment
 * @param string $timestamp
 *
 * @return array
 */
function createReviewObject(string $author, int $rating, string $comment, string $timestamp = time()) {
  return [
    'author' => $author,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => $timestamp,
  ];
}


// Example Usage (for testing)
$review1 = createReviewObject("Alice Smith", 4, "Great product!  I love it!", time() - 3600); // Review posted 1 hour ago
$review2 = createReviewObject("Bob Johnson", 5, "Excellent value for the money.", time() - 7200); // Review posted 2 hours ago
$review3 = createReviewObject("Charlie Brown", 3, "It's okay, but could be better.", time() - 14400); // Review posted 4 hours ago

$allReviews = [$review1, $review2, $review3];

displayUserReviews($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review details and the HTML for display.
 */
function createReview(string $productName, string $reviewText, int $rating = 0) {
    // Validation - Basic checks.  Expand these as needed for production.
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // Validate rating (if provided)
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }


    // Create the review data.
    $reviewData = [
        'productName' => $productName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => date('Y-m-d H:i:s'),  // Add a timestamp
    ];

    // Format the review for HTML display.
    $reviewHtml = '<div class="review">';
    $reviewHtml .= '<p class="review-title">Review for: ' . htmlspecialchars($productName) . '</p>'; //Escape to prevent XSS
    $reviewHtml .= '<p class="review-text">' . htmlspecialchars($reviewText) . '</p>'; // Escape to prevent XSS
    $reviewHtml .= '<p class="review-rating">Rating: ' . htmlspecialchars($rating) . '</p>'; // Escape to prevent XSS
    $reviewHtml .= '<p class="review-timestamp">Submitted on: ' . htmlspecialchars(date('Y-m-d H:i:s', strtotime($reviewData['timestamp']))) . '</p>'; //Escape to prevent XSS
    $reviewHtml .= '</div>';

    return [
        'data' => $reviewData,
        'html' => $reviewHtml,
    ];
}



// Example Usage:

// 1. Create a review and display it.
$reviewResult = createReview("Awesome Widget", "This widget is fantastic!  It's exactly what I needed.");

if (isset($reviewResult['error'])) {
    echo "Error creating review: " . $reviewResult['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult['html'];
}


// 2. Create another review with a rating.
$reviewResult2 = createReview("Super Gadget", "Great product, would recommend!", 5);

if (isset($reviewResult2['error'])) {
    echo "Error creating review: " . $reviewResult2['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult2['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult2['html'];
}



// 3.  Demonstrate an error case.
$reviewResult3 = createReview("", "Bad review");
if (isset($reviewResult3['error'])) {
    echo "Error creating review: " . $reviewResult3['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult3['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult3['html'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a given item (e.g., product, movie, etc.).
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_id The unique identifier of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's comment or review text.
 * @param string $db_connection  (Optional) -  Database connection object. If not provided, attempts to create one.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function add_user_review(string $item_id, string $user_id, string $rating, string $comment, $db_connection = null) {

  // Validate inputs (you can expand this with more rigorous validation)
  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return false;
  }
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) { // Check for valid rating
    return false;
  }


  // Use provided database connection, or create one if none is provided
  if ($db_connection === null) {
    // Attempt to connect to a database (adjust connection details)
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
  }


  try {
    // Prepare the SQL statement
    $stmt = $db_connection->prepare(
      "INSERT INTO reviews (item_id, user_id, rating, comment)
       VALUES (:item_id, :user_id, :rating, :comment)"
    );

    // Bind parameters (safer than string concatenation)
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check for success
    return $result;

  } catch (PDOException $e) {
    // Handle database errors (e.g., log the error, display a generic message)
    error_log("Error adding review: " . $e->getMessage()); // Log the error
    return false;
  }
}


// Example Usage:
$item_id = "product123";
$user_id = "user456";
$rating = 4;
$comment = "Great product!  Works as expected.";

if (add_user_review($item_id, $user_id, $rating, $comment)) {
  echo "Review successfully added!
";
} else {
  echo "Failed to add review.
";
}


// Example with a database connection already established (for testing/demo)
// (In a real application, this would come from your application's setup)
$db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

if (add_user_review($item_id, $user_id, $rating, $comment, $db)) {
  echo "Review successfully added (using existing connection)!
";
} else {
  echo "Failed to add review (using existing connection).
";
}


?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a given product.
 *
 *  @param string $product_id - The unique identifier of the product.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the user's review.
 *  @param int $rating - The rating given by the user (e.g., 1-5).
 *  @return bool - True if the review was successfully saved, false otherwise.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating)
{
    // **Important:** Replace this with your actual database connection code.
    // This is a placeholder for demonstration purposes.

    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage()); // Log the error
        return false;
    }

    // Sanitize inputs to prevent SQL injection
    $product_id = $pdo->quote($product_id);
    $user_name = $pdo->quote($user_name);
    $review_text = $pdo->quote($review_text);

    // Construct the SQL query
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
            VALUES (:product_id, :user_name, :review_text, :rating)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the query
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Database query error: " . $e->getMessage()); // Log the error
        return false;
    }
}


/**
 *  Get User Reviews for a Product
 *
 *  This function retrieves all reviews for a given product.
 *
 *  @param string $product_id - The unique identifier of the product.
 *  @return array - An array of review objects, or an empty array if no reviews are found.
 */
function get_user_reviews(string $product_id)
{
    // **Important:** Replace this with your actual database query code.
    // This is a placeholder for demonstration purposes.

    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return [];
    }

    // Construct the SQL query
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the query
    $stmt->execute();

    // Fetch all the results as an array of objects
    $reviews = $stmt->fetchAll(PDO::FETCH_OBJ);

    return $reviews;
}

/**
 * Displaying the Reviews (Example)
 */
function display_reviews(array $reviews) {
    echo "<h2>User Reviews for Product ID: " . $product_id . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review->user_name . ":</strong> " . $review->review_text . " (Rating: " . $review->rating . ")";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:

// Dummy data for demonstration.  Replace this with real data.
$product_id = "123";

// Save a review
$review_saved = save_user_review($product_id, "John Doe", "This product is amazing!", 5);
if ($review_saved) {
    echo "<p>Review saved successfully!</p>";
} else {
    echo "<p>Failed to save review.</p>";
}

// Get reviews
$reviews = get_user_reviews($product_id);
display_reviews($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review.
 * @param string $userId (Optional) The ID of the user submitting the review.  Used for tracking and potentially preventing duplicates.
 * @return array An array containing the review details or an error message.
 */
function createReview(string $productName, string $reviewText, string $userId = "") {
  // Input validation - Basic example.  Expand this for more robust validation.
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }

  // In a real application, you'd store this in a database.
  // This is a placeholder for demonstration purposes.
  $review = [
    "product_name" => $productName,
    "review_text" => $reviewText,
    "user_id" => $userId,
    "date_created" => date("Y-m-d H:i:s")
  ];

  return $review;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productName The name of the product.
 * @return string HTML markup for displaying the reviews or a message if no reviews exist.
 */
function displayReviews(string $productName) {
  // Placeholder for retrieving reviews from a database.
  // In a real application, you'd query your database.

  $reviews = [
    ["product_name" => "Awesome Gadget", "review_text" => "This gadget is amazing! Highly recommended.", "user_id" => "user123", "date_created" => "2023-10-26 10:00:00"],
    ["product_name" => "Awesome Gadget", "review_text" => "Great value for the price.", "user_id" => "user456", "date_created" => "2023-10-27 14:30:00"],
    ["product_name" => "Basic Widget", "review_text" => "It does the job, but nothing special.", "user_id" => "user789", "date_created" => "2023-10-28 09:15:00"]
  ];


  if (empty($reviews)) {
    return "<p>No reviews yet for this product.</p>";
  }

  $html = "<h2>Reviews for " . $productName . "</h2>";
  $html .= "<ul>";
  foreach ($reviews as $review) {
    $html .= "<li><strong>" . $review['product_name'] . "</strong> - " . $review['review_text'] . " (by " . $review['user_id'] . ") - " . $review['date_created'] . "</li>";
  }
  $html .= "</ul>";
  return $html;
}



// Example Usage:

// Create a review
$newReview = createReview("Awesome Gadget", "This is the best gadget I've ever bought!");

if (isset($newReview["error"])) {
  echo "<p style='color: red;'>Error creating review: " . $newReview["error"] . "</p>";
} else {
  // Display the review
  echo displayReviews("Awesome Gadget");
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It handles input validation, sanitization, and displays the review.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $review_text The text of the review submitted by the user.
 * @param string $username The username of the reviewer (for display).
 * @param array $reviews An array to store reviews (optional, for persistent storage).
 * @return array|string  Returns an array containing review data, or an error message as a string.
 */
function create_review(string $product_id, string $review_text, string $username, array &$reviews = []) {

  // Input Validation & Sanitization
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  $review_text = trim($review_text); // Remove leading/trailing whitespace
  $review_text = htmlspecialchars($review_text); // Protect against XSS attacks
  $review_id = time(); // Generate a unique ID for the review

  // Review Data
  $review = [
    'id' => $review_id,
    'product_id' => $product_id,
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Store the Review (Example: using an array - can be adapted to a database)
  $reviews[$review_id] = $review;

  return $review; // Return the created review data
}


// Example Usage:

// Simulate a product ID
$product_id = '123';

// User Input (Replace with actual form input)
$review_text = $_POST['review_text']; // Assuming the review text is submitted via a form
$username = $_POST['username'];

// Create the review
$review_data = create_review($product_id, $review_text, $username);

// Handle the result
if (is_array($review_data)) {
  // Review was successfully created
  echo "<h2>Review Submitted!</h2>";
  echo "<p><strong>Username:</strong> " . htmlspecialchars($username) . "</p>";
  echo "<p><strong>Review:</strong> " . htmlspecialchars($review_data['review_text']) . "</p>";
  echo "<p><strong>Timestamp:</strong> " . $review_data['timestamp'] . "</p>";
  // Add the review to a display (e.g., echo $review_data['id'] to get the review ID)
} else {
  // An error occurred
  echo "<p>Error: " . $review_data . "</p>";
}



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $userId (Optional) The ID of the user submitting the review.  Useful for tracking.
 * @param array $reviews (Optional) An existing array of reviews to append to.
 *
 * @return array An updated array of reviews, with the new review added.
 */
function addReview(string $productName, string $reviewText, string $userId = '', array &$reviews = []): array
{
    // Sanitize and Validate Input (Crucial for security!)
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    if (empty($reviewText)) {
        return $reviews; // Don't add empty reviews
    }
    //  You would typically add more robust validation here
    //  e.g., check length, prevent malicious code, etc.

    // Create a new review object (or just an array - depending on your needs)
    $review = [
        'user_id' => $userId,
        'review_text' => $reviewText,
        'date' => date('Y-m-d H:i:s') // Add a timestamp for organization
    ];

    // Add the review to the array.  The "&" makes $reviews passed by reference.
    $reviews[] = $review;

    return $reviews;
}



/**
 * Function to Display Reviews
 *
 * Displays reviews for a product.  This is a helper function
 * to simplify the output.
 *
 * @param string $productName The name of the product.
 * @param array $reviews An array of reviews for the product.
 */
function displayReviews(string $productName, array $reviews) : void
{
    echo "<h2>Reviews for " . $productName . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li><strong>" . htmlspecialchars($review['user_id']) . ":</strong> " . htmlspecialchars($review['review_text']) . " - " . htmlspecialchars($review['date']) . "</li>";
        }
        echo "</ul>";
    }
}



// Example Usage:
$product = "Awesome Widget";

// Initial Reviews (can come from a database, for example)
$reviews = [
    ['user_id' => 'user1', 'review_text' => 'Great product!', 'date' => '2023-10-26'],
    ['user_id' => 'user2', 'review_text' => 'Works as expected.', 'date' => '2023-10-27']
];


// Add a new review
$newReview = addReview($product, "This is fantastic!", "user3");
$reviews = addReview($product, "Amazing!", "user4"); //Using the array reference for updates.

// Display the reviews
displayReviews($product, $reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input and returns a formatted review string.
 * It includes basic sanitization to prevent common vulnerabilities.
 *
 * @param string $user_name The user's name.
 * @param string $review_text The user's review text.
 * @param string $rating  The rating (e.g., 1-5).
 * @return string A formatted review string.  Returns an error message if input is invalid.
 */
function generateUserReview(string $user_name, string $review_text, string $rating) {
  // Input Validation - VERY IMPORTANT!
  if (empty($user_name)) {
    return "Error: User name cannot be empty.";
  }
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  // Basic Sanitization -  More robust sanitization is recommended for production.
  $user_name = trim($user_name);  // Remove leading/trailing whitespace
  $review_text = trim($review_text);
  $rating = filter_var($rating, FILTER_VALIDATE_INT); // Ensure rating is an integer

  if ($rating === false || $rating < 1 || $rating > 5) {
    return "Error: Invalid rating.  Please enter a number between 1 and 5.";
  }
  // Formatting the review
  $formatted_review = "Review by: " . htmlspecialchars($user_name) . "
";
  $formatted_review .= "Rating: " . $rating . " stars
";
  $formatted_review .= "Review: " . $review_text . "
";
  $formatted_review .= "---";

  return $formatted_review;
}

// --- Example Usage ---

// Get user input (e.g., from a form)
$userName = $_POST['user_name'] ?? ''; // Use null coalescing operator for safety
$reviewText = $_POST['review_text'] ?? '';
$rating = $_POST['rating'] ?? '';

// Generate the review
$review = generateUserReview($userName, $reviewText, $rating);

// Display the review
echo $review;


// --- Example Input (for testing) ---
/*
//Simulated form data
$name = "John Doe";
$comment = "This product is amazing!";
$stars = 5;

$review = generateUserReview($name, $comment, $stars);
echo $review;

//Another example with error handling
$review = generateUserReview("", "A review", 3); //Empty name
echo $review;
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations with a simplified database interaction.
 *
 * NOTE: This is a simplified example.  In a real-world application, you'd
 *       use prepared statements and proper error handling for security
 *       and robustness.  Also, consider using an ORM (Object-Relational Mapper)
 *       for easier database interactions.
 */

class Review {

    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $created_at;

    public function __construct($user_id, $product_id, $rating, $comment = "") {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->created_at = date("Y-m-d H:i:s"); // Set timestamp
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function setProduct_id($product_id) {
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCreated_at() {
        return $this->created_at;
    }

    public function __toString() {
        return "ID: {$this->id}, User ID: {$this->user_id}, Product ID: {$this->product_id}, Rating: {$this->rating}, Comment: {$this->comment}, Created At: {$this->created_at}";
    }
}


// --- Example Usage (Demonstration) ---

// 1. Create a new review
$review1 = new Review(123, 456, 5, "Great product!");
echo "Created Review: " . $review1 . "
";

// 2. Retrieve a review by ID (Assume we have a database query to get the review)
// (This part would be replaced by your database query logic)
// For demonstration, we'll just return a mock review ID.
$reviewId = 1;
$review2 = new Review($user_id = 123, $product_id = 456, $rating = 4, $comment = "Good but could be better");
$review2->setId($reviewId);

echo "Retrieved Review ID: " . $review2 . "
";


// 3. Update a review (Simplified - in a real app, you'd likely have a more robust update process)
$review2->setComment("Amazing product - highly recommended!");
echo "Updated Review: " . $review2 . "
";

// 4. Delete a review (Simplified)
//  (In a real app, you'd delete from the database)
//  echo "Deleted Review (Simulated): " . $review2 . "
";


// ---  Simulated Database Interaction (Replace with your actual DB query) ---

//  This is a placeholder.  In a real application, you would use a database connector
//  (e.g., MySQLi, PDO) to interact with your database.

// Example of a simple create function:
/*
function createReview($user_id, $product_id, $rating, $comment) {
    // Your database connection code here (e.g., mysqli_connect)
    // ...
    // Example SQL:
    // "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)"
    // $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    // $stmt->bind_param("isss", $user_id, $product_id, $rating, $comment);
    // $stmt->execute();
    // ...
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating     The rating given by the reviewer (e.g., 1-5).
 * @param string $comment    The review comment.
 * @param string $db_connection  Database connection object.
 *
 * @return array An array containing the result of the operation (success/failure and message).
 *               Returns ['success' => true, 'message' => 'Review created successfully'] on success.
 *               Returns ['success' => false, 'message' => 'Error message'] on failure.
 */
function create_review(string $productId, string $username, string $rating, string $comment, $db_connection) {
  // Input Validation
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['success' => false, 'message' => 'Username must contain only letters, numbers, and underscores.'];
  }

  if (!preg_match('/^[1-5]$/', $rating)) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  // Sanitize Inputs - Best practice to prevent SQL injection
  $productId = $db_connection->real_escape_string($productId);
  $username = $db_connection->real_escape_string($username);
  $rating = $db_connection->real_escape_string($rating);
  $comment = $db_connection->real_escape_string($comment);

  // SQL Query
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute Query
  if ($db_connection->query($sql) === TRUE) {
    return ['success' => true, 'message' => 'Review created successfully.'];
  } else {
    return ['success' => false, 'message' => 'Error creating review: ' . $db_connection->error];
  }
}


/**
 * Example Usage (For demonstration purposes - replace with your database connection)
 */

//Simulated Database Connection (replace with your actual database connection)
$db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

// Example 1: Successful creation
$result1 = create_review('123', 'JohnDoe', '5', 'Great product!  Highly recommended.', $db_connection);
print_r($result1);

// Example 2:  Validation error
$result2 = create_review('', 'JaneSmith', '3', 'Good value.', $db_connection);
print_r($result2);

// Example 3:  Error (Simulated database error)
$db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
try {
  $db_connection->query("INSERT INTO products (name) VALUES ('Invalid Product Name')");
} catch(PDOException $e) {
  echo "Error: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $item_id  The ID of the item being reviewed.  Used to identify the review.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review submitted by the user.
 * @param int    $rating   The rating given by the user (e.g., 1-5 stars).
 * @param int    $db_connection  An established database connection object.
 *
 * @return array An array containing the success status and a message.
 */
function storeUserReview(
    string $item_id,
    string $user_name,
    string $review_text,
    int    $rating,
    $db_connection
) {
    // Input validation - important for security and data integrity
    if (empty($item_id)) {
        return ['success' => false, 'message' => 'Item ID cannot be empty.'];
    }
    if (empty($user_name)) {
        return ['success' => false, 'message' => 'User name cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        // Handle database error - crucial for debugging
        return ['success' => false, 'message' => 'Database error preparing statement: ' . $db_connection->errorInfo()[2]];
    }

    // Bind the parameters
    $stmt->bind_param("ssis", $item_id, $user_name, $review_text, $rating);

    // Execute the statement
    if (!$stmt->execute()) {
        // Handle database error
        return ['success' => false, 'message' => 'Error executing statement: ' . $db_connection->errorInfo()[2]];
    }

    // Close the statement
    $stmt->close();

    return ['success' => true, 'message' => 'Review submitted successfully!'];
}

/**
 * Example usage:
 */

// Assuming you have a database connection named $conn

// Example 1: Successful Submission
$review_result = storeUserReview(
    'product_123',
    'John Doe',
    'Great product! I highly recommend it.',
    4,
    $conn
);
echo "<pre>";
print_r($review_result);
echo "</pre>";

// Example 2:  Failed due to empty review text
$review_result = storeUserReview(
    'product_456',
    'Jane Smith',
    '',
    3,
    $conn
);
echo "<pre>";
print_r($review_result);
echo "</pre>";


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $username The name of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review text.
 * @param string $db_connection (Optional) - A database connection object. Defaults to null.
 *
 * @return array|false An array containing the review ID, success status, and a message.
 *                     Returns false on error.
 */
function create_user_review(string $product_id, string $username, string $rating, string $comment, $db_connection = null)
{
  // Input Validation (Basic - Enhance as needed)
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    return false; // Return false for empty inputs
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return false; // Invalid rating
  }

  // Database connection - Use a real connection in a production environment
  if ($db_connection === null) {
    // Placeholder for database connection - Implement your database connection logic here
    // This example uses a fake connection object
    $db_connection = new stdClass();
    $db_connection->connect = function() use ($db_connection) {
      // Simulate a successful connection
      return true;
    };
  }

  try {
    // Connect to the database (using the fake connection here)
    $db_connection->connect();

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)";

    // Prepare the statement (more secure than using echo/print)
    $stmt = $db_connection->prepare($sql); // Assumes $db_connection has a prepare() method

    // Bind the parameters
    $stmt->bind_param("siss", $product_id, $username, $rating, $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check for errors
    if ($result === false) {
      // Handle database errors (e.g., log errors)
      error_log("Database error: " . $stmt->error);
      return false;
    }

    // Get the ID of the newly inserted row
    $review_id = $db_connection->lastInsertId();

    // Close the statement
    $stmt->close();

    return ['review_id' => $review_id, 'success' => true, 'message' => "Review submitted successfully!"];

  } catch (Exception $e) {
    // Handle exceptions (e.g., connection errors)
    error_log("Exception: " . $e->getMessage());
    return false;
  } finally {
    // Close the database connection - Important to release resources
    if (isset($db_connection) && $db_connection->close) {
        $db_connection->close();
    }
  }
}



// Example Usage (Illustrative - Requires database setup)
// Assuming you have a 'reviews' table in your database with columns:
// product_id (string), username (string), rating (int), comment (text)

// Create a sample review
$review = create_user_review("prod123", "John Doe", 4, "Great product, highly recommended!", null);

if ($review) {
  echo "Review created successfully. Review ID: " . $review['review_id'] . "<br>";
  echo "Status: " . ($review['success'] ? "Success" : "Failed") . "<br>";
  echo "Message: " . $review['message'] . "<br>";
} else {
  echo "Error creating review. Check logs for details.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It includes basic validation, sanitization, and storage.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $rating The user's rating (1-5).
 * @param string $userEmail The user's email address.
 * @param string $storageMethod 'database' or 'file' -  determines how reviews are stored.
 *
 * @return array|string Returns an array of reviews or a success/error message.
 */
function createAndStoreUserReview(
    string $productName,
    string $reviewText,
    int $rating,
    string $userEmail,
    string $storageMethod = 'database' // Default to database
) {
    // Input Validation & Sanitization - IMPORTANT!
    if (empty($productName)) {
        return ['status' => 'error', 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['status' => 'error', 'message' => 'Rating must be between 1 and 5.'];
    }
    if (empty($userEmail)) {
        return ['status' => 'error', 'message' => 'User email cannot be empty.'];
    }

    // Prepare review data -  Important to prevent SQL injection if using database
    $reviewData = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'user_email' => $userEmail,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
    ];

    // --- Database Storage (Example) ---
    if ($storageMethod === 'database') {
        // Replace with your database connection details
        $dbHost = 'localhost';
        $dbName = 'your_database_name';
        $dbUser = 'your_database_user';
        $dbPassword = 'your_database_password';

        try {
            // Establish database connection
            $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

            // Check connection
            if ($conn->connect_error) {
                throw new Exception("Connection failed: " . $conn->connect_error);
            }

            // Prepare SQL statement to prevent SQL injection
            $sql = "INSERT INTO reviews (product_name, review_text, rating, user_email, created_at) VALUES (?, ?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("ssiii", $productName, $reviewText, $rating, $userEmail);
                if ($stmt->execute()) {
                    $stmt->close();
                    $conn->close();
                    return ['status' => 'success', 'message' => 'Review submitted successfully!'];
                } else {
                    $stmt->close();
                    $conn->close();
                    return ['status' => 'error', 'message' => 'Error submitting review: ' . $stmt->error];
                }
            } else {
                $conn->close();
                return ['status' => 'error', 'message' => 'Failed to prepare statement.'];
            }

        } catch (Exception $e) {
            return ['status' => 'error', 'message' => 'Database error: ' . $e->getMessage()];
        }

    }
    // --- File Storage (Example - Simpler) ---
    // In a real application, you'd use a more robust file handling system.
    else if ($storageMethod === 'file') {
        $file = 'reviews.txt'; // or a better name and location
        $data = $reviewData['review_text'] . ', Rating: ' . $reviewData['rating'] . ' - ' . $reviewData['user_email'] . ' - ' . $reviewData['created_at'] . "
";
        file_put_contents($file, $data, FILE_APPEND);
        return ['status' => 'success', 'message' => 'Review submitted to file.'];
    }
    else {
      return ['status' => 'error', 'message' => 'Invalid storage method specified.  Choose "database" or "file"'];
    }
}


// Example Usage:
$reviewResult = createAndStoreUserReview(
    'Awesome Product',
    'This product is amazing! I highly recommend it.',
    4,
    'user@example.com',
    'database' // or 'file'
);

print_r($reviewResult);

// Example File Storage Usage:
$reviewResultFile = createAndStoreUserReview(
    'Another Product',
    'Good value for the money.',
    5,
    'anotheruser@example.com',
    'file'
);

print_r($reviewResultFile);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects. Each review object should have:
 *                         - $author: The name of the reviewer.
 *                         - $rating: The rating given by the reviewer (e.g., 1-5).
 *                         - $comment: The user's written review.
 * @return string HTML formatted review section.
 */
function displayUserReviews(string $productName, array $reviews)
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class=\"review-container\">";
    $html .= "<h3>Reviews for {$productName}</h3>";
    $html .= "<ul class=\"review-list\">";

    foreach ($reviews as $review) {
        $html .= "<li class=\"review-item\">";
        $html .= "<p><strong>Author:</strong> {$review['author']}</p>";
        $html .= "<p><strong>Rating:</strong> {$review['rating']}/5</p>";
        $html .= "<p><strong>Comment:</strong> {$review['comment']}</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


// Example Usage:
$productName = "Awesome Widget";

$reviews = [
    [
        'author' => 'John Doe',
        'rating' => 5,
        'comment' => 'This widget is amazing!  It does exactly what I need and it's very well-built.',
    ],
    [
        'author' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Great product.  Easy to use and the support team was very helpful.',
    ],
    [
        'author' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It\'s okay.  Could be better but for the price, it\'s decent.',
    ],
];


// Get the HTML output
$reviewHTML = displayUserReviews($productName, $reviews);

// Output the HTML (you would typically display this in your HTML page)
echo $reviewHTML;

?>


// Example of sanitization (replace with your chosen method):
$safeComment = htmlspecialchars($review['comment'], ENT_QUOTES, 'UTF-8');


<?php

/**
 * Class Review
 *
 * This class provides functionality for creating, saving, and retrieving user reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * @param int $product_id The ID of the product being reviewed.
     * @param string $user_name The name of the user submitting the review.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $product_id, string $user_name, string $rating, string $comment) {
        // Validate inputs (important for security and data integrity)
        if (!$this->validateReviewData($product_id, $user_name, $rating, $comment)) {
            return false;
        }

        // Sanitize inputs (crucial for security - prevents SQL injection)
        $product_id = $this->db->quote($product_id);
        $user_name = $this->db->quote($user_name);
        $rating = $this->db->quote($rating);
        $comment = $this->db->quote($comment);

        // SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                VALUES (:product_id, :user_name, :rating, :comment)";

        // Prepare and execute the query
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        if ($stmt->execute()) {
            return $this->db->lastInsertId();
        } else {
            // Handle errors (logging recommended)
            error_log("Error creating review: " . $stmt->errorInfo()[2]);
            return false;
        }
    }


    /**
     * Get a review by ID
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|false An associative array containing review details, or false on failure.
     */
    public function getReview(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE id = :review_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':review_id', $review_id);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);

        return $review ?: false; // Return false if no review found
    }

    /**
     * Get reviews for a product
     *
     * @param int $product_id The ID of the product to retrieve reviews for.
     * @return array An array of associative arrays, each representing a review for the product.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

     /**
      * Validate review data
      *
      * @param int $product_id The ID of the product being reviewed.
      * @param string $user_name The name of the user submitting the review.
      * @param string $rating The rating given by the user (e.g., 1-5).
      * @param string $comment The user's comment about the product.
      * @return bool True if the data is valid, false otherwise.
      */
    private function validateReviewData(int $product_id, string $user_name, string $rating, string $comment) {
        // Add more validation rules here, such as:
        // - Check if rating is a valid number (e.g., 1-5)
        // - Check if user_name is not empty
        // - Check if comment length is within acceptable bounds.

        // Example:
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }
        if (empty($user_name)) {
            return false;
        }
        return true;
    }
}

// Example Usage (assuming you have a PDO database connection)
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
// $review = new Review($db);

// $review_id = $review->createReview(123, "John Doe", 4, "Great product!");
// if ($review_id) {
//     echo "New review created with ID: " . $review_id . "<br>";
// } else {
//     echo "Failed to create review.";
// }

// $review = $review->getReview($review_id);
// if ($review) {
//     echo "Review details: " . print_r($review, true) . "<br>";
// } else {
//     echo "Review not found.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a given product or item.
 *
 * @param string $productId The ID of the product/item being reviewed.
 * @param string $productName The name of the product/item.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param int $rating (optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review data or an error message.
 */
function createReview(string $productId, string $productName, string $reviewText, string $username, int $rating = 0) {
  // Input validation - crucial for security and data integrity
  if (empty($productId) || empty($productName) || empty($reviewText) || empty($username)) {
    return ['error' => 'All fields are required.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['error' => 'Rating must be a number between 1 and 5.'];
  }

  // **Important:  Sanitization and Data Sanitization**
  //  You MUST sanitize user input to prevent XSS and SQL injection vulnerabilities.
  //  This is a simplified example; you'll need to adapt this to your database setup.
  $reviewText = htmlspecialchars($reviewText); // Escape HTML entities
  //  Consider using a database query with prepared statements to protect against SQL injection.

  // **Simulated Database Storage (Replace with your actual database interaction)**
  // In a real application, you'd use a database.
  $review = [
    'productId' => $productId,
    'productName' => $productName,
    'reviewText' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for sorting/display
  ];

  // Add the review to an array (simulating a database insertion)
  $reviews = getReviewsForProduct($productId); //  Retrieve existing reviews
  $reviews[] = $review; 

  return $reviews;
}



/**
 * Retrieves all reviews for a specific product.
 * 
 * @param string $productId The ID of the product.
 * @return array An array of review objects.  Empty array if no reviews found.
 */
function getReviewsForProduct(string $productId) {
  //Simulated retrieval from database
  // In a real scenario, this would query your database.
  $reviews = [
    ['productId' => '123', 'productName' => 'Awesome Widget', 'reviewText' => 'Great product!', 'username' => 'john_doe', 'rating' => 5, 'date' => '2023-10-27 10:00:00'],
    ['productId' => '123', 'productName' => 'Awesome Widget', 'reviewText' => 'Works as expected.', 'username' => 'jane_smith', 'rating' => 4, 'date' => '2023-10-26 14:30:00'],
    ['productId' => '456', 'productName' => 'Basic Gadget', 'reviewText' => 'Okay, but overpriced.', 'username' => 'peter_jones', 'rating' => 2, 'date' => '2023-10-25 09:15:00']
  ];
  
  // Filter reviews for the given product ID
  $filteredReviews = [];
  foreach($reviews as $review){
    if ($review['productId'] == $productId) {
      $filteredReviews[] = $review;
    }
  }
  
  return $filteredReviews;
}


/**
 * Displays a list of reviews for a product.
 * 
 * @param array $reviews An array of review objects.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<h2>Reviews for " . $reviews[0]['productName'] . "</h2>"; // Assume first product is the relevant one
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<p><strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . "</p>";
    echo "<p>Rating: " . $review['rating'] . " stars</p>";
    echo "<p>Date: " . $review['date'] . "</p>";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:
$productId = '123';
$productName = 'Awesome Widget';

// Create a review
$reviewResult = createReview($productId, $productName, "This is an amazing product!", "john_doe", 5);

if (isset($reviewResult['error'])) {
    echo "<p style='color: red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
  // Display the reviews
  displayReviews($reviewResult);
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product being reviewed.
 * @param string $user_id  The unique identifier for the user submitting the review.
 * @param string $review_text The text of the user's review.
 * @param int    $rating    The rating given by the user (e.g., 1-5 stars).
 * @param int    $timestamp Unix timestamp for the review creation.
 *
 * @return bool  True on successful submission, false on error.
 */
function submit_review(string $product_id, string $user_id, string $review_text, int $rating, int $timestamp = time()) {
  // Validate inputs - VERY IMPORTANT!
  if (empty($product_id) || empty($user_id) || empty($review_text) || $rating < 1 || $rating > 5) {
    error_log("Invalid review data submitted: product_id=$product_id, user_id=$user_id, review_text=$review_text, rating=$rating");
    return false;
  }

  // Sanitize inputs (Crucial for security!)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

  // Add data to a database (replace this with your actual database code)
  // This is a simplified example - use prepared statements for security!
  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_database_user";
  $db_password = "your_database_password";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare the SQL statement using prepared statements - HIGHLY RECOMMENDED!
    $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
    $stmt->execute([$product_id, $user_id, $review_text, $rating, $timestamp]);

    return true;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}



/**
 * Retrieve User Reviews
 *
 * Retrieves reviews for a specific product.
 *
 * @param string $product_id The product ID to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews(string $product_id) {
  // Implement your database query here to fetch reviews for the product.
  // Example (replace with your actual query):
  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_database_user";
  $db_password = "your_database_password";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = ? ORDER BY timestamp DESC");  //Order by latest reviews
    $stmt->execute([$product_id]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); //Fetch as an associative array

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return []; // Return empty array on error
  }
}


// Example Usage (Demonstration)
//  $product_id = "product123";
//  $user_id = "user456";
//  $review_text = "This is a great product!";
//  $rating = 5;
//  $timestamp = time();
//
// if (submit_review($product_id, $user_id, $review_text, $rating, $timestamp)) {
//   echo "Review submitted successfully!
";
// } else {
//   echo "Error submitting review.
";
// }

// Example to get reviews:
//$reviews = get_reviews($product_id);
//if (!empty($reviews)) {
//  echo "Reviews for product " . $product_id . ":
";
//  foreach ($reviews as $review) {
//    echo "  - User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
//  }
//} else {
//  echo "No reviews found for product " . $product_id . "
";
//}

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to handle user reviews.
 * It allows adding, retrieving, and deleting reviews.
 */
class Review {

    private $db; // Database connection object (implementation not defined here)

    /**
     * Constructor
     *
     * Initializes the Review object.  Requires a database connection object.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $productID The ID of the product the review is for.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's written review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $userId, string $productID, string $rating, string $comment) {
        try {
            // Sanitize inputs (basic - improve for production)
            $userId = filter_var($userId, FILTER_SANITIZE_STRING);
            $productID = filter_var($productID, FILTER_SANITIZE_STRING);
            $rating = filter_var($rating, FILTER_VALIDATE_INT);
            $comment = filter_var($comment, FILTER_SANITIZE_STRING);

            if (!$rating || $rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }

            // SQL query - Use prepared statements to prevent SQL injection
            $stmt = $this->db->prepare(
                "INSERT INTO reviews (user_id, product_id, rating, comment)
                 VALUES (:user_id, :product_id, :rating, :comment)"
            );

            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':product_id', $productID);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param string $productID The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProduct(string $productID) {
        try {
            $stmt = $this->db->prepare(
                "SELECT * FROM reviews WHERE product_id = :product_id"
            );
            $stmt->bindParam(':product_id', $productID);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }


    /**
     * Delete a review.
     *
     * @param int $reviewID The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewID) {
        try {
            $stmt = $this->db->prepare(
                "DELETE FROM reviews WHERE id = :review_id"
            );
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


// Example usage (assuming you have a database connection $db)
// Create a database connection (replace with your actual connection details)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$dbname = 'your_db_name';

try {
    $db = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $review = new Review($db);

    // Add a review
    $review->addReview('user123', 'product456', 4, 'Great product!');

    // Get reviews for product456
    $reviews = $review->getReviewsByProduct('product456');
    echo "Reviews for product456:<br>";
    foreach ($reviews as $review) {
        echo "- User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
    }

    // Delete a review (example)
    if($review->deleteReview(1)) {
        echo "<br>Review with ID 1 deleted successfully.";
    } else {
        echo "<br>Failed to delete review.";
    }


} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input for a review and generates a formatted review string.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating A numeric rating from 1 to 5.
 * @param string $comment The user's review comment.
 *
 * @return string A formatted review string.
 */
function generateReview(string $username, int $rating, string $comment): string
{
  // Input validation -  Important for security and data integrity
  if (!is_string($username) || empty($username)) {
    return "Error: Username cannot be empty.";
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }
  if (empty($comment)) {
    return "Error: Comment cannot be empty.";
  }


  // Build the review string
  $review = "Review by: " . htmlspecialchars($username) . "
";
  $review .= "Rating: " . $rating . "/5
";
  $review .= "Comment: " . htmlspecialchars($comment) . "
";
  $review .= "---";

  return $review;
}

// Example Usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

$review = generateReview($username, $rating, $comment);
echo $review . "
";

// Example with invalid input:
$invalidReview = generateReview("", 3, "This is a review.");
echo $invalidReview . "
";

$anotherInvalid = generateReview("Jane", 6, "Awesome!");
echo $anotherInvalid . "
";


?>


<?php
// ... (generateReview function from above) ...

// Get user input (e.g., from a form)
$username = $_POST['username'];
$rating = (int)$_POST['rating']; // Cast to integer
$comment = $_POST['comment'];

// Generate the review
$review = generateReview($username, $rating, $comment);

// Display the review on the page
echo "<h2>Review:</h2>";
echo $review;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes features for saving reviews, retrieving reviews,
 * and displaying them.
 */

class UserReview {

    private $db_host = "localhost"; // Replace with your database connection details
    private $db_name = "your_database_name";
    private $db_user = "your_username";
    private $db_password = "your_password";

    public function __construct() {
        // Establish database connection
        $this->conn = new mysqli($this->db_host, $this->db_user, $this->db_password, $this->db_name);

        // Check connection
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    /**
     * Saves a new user review.
     *
     * @param string $username   The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on success, false on failure.
     */
    public function saveReview($username, $reviewText) {
        $reviewText = $this->conn->real_escape_string($reviewText); // Sanitize input

        $sql = "INSERT INTO reviews (username, review_text) VALUES ('$username', '$reviewText')";

        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews are found.
     */
    public function getReviews() {
        $sql = "SELECT id, username, review_text, created_at FROM reviews ORDER BY created_at DESC";
        $result = $this->conn->query($sql);

        $reviews = [];
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $reviews[] = new ReviewObject($row);  // Pass the row data to the ReviewObject
            }
        }
        return $reviews;
    }


    /**
     *  Review Object -  A simple class to represent a review.
     */
    private function __construct(){} //Prevent instantiation


    // Nested class -  Allows instantiation of the review object.
    private static $instance = null; // Singleton pattern.

    public static function getInstance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

}


/**
 * Review Object -  A simple class to represent a review.
 */
class ReviewObject {
    public $id;
    public $username;
    public $review_text;
    public $created_at;

    public function __construct($row) {
        $this->id = $row["id"];
        $this->username = $row["username"];
        $this->review_text = $row["review_text"];
        $this->created_at = $row["created_at"];
    }
}



// Example usage (after creating the database table 'reviews')

// Create an instance of the Review class
$review = UserReview::getInstance();

// Save a review
if ($review->saveReview("JohnDoe", "This is a great product!")) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Retrieve all reviews
$allReviews = $review->getReviews();

// Display reviews
echo "<br><br><h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>Username:</strong> " . $review->username . "<br>";
    echo "<strong>Review:</strong> " . $review->review_text . "<br>";
    echo "<strong>Date:</strong> " . $review->created_at . "<br><br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews for a given item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_id The unique identifier of the user submitting the review.
 * @param string $rating The user's rating (e.g., 1-5 stars).
 * @param string $comment The user's written comment about the item.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $item_id, string $user_id, string $rating, string $comment)
{
    // Validate inputs (important for security and data integrity)
    if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Missing required fields for review submission.");
        return false;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating provided.");
        return false;
    }

    // In a real application, you would typically interact with a database here.
    // This example simulates database interaction for demonstration purposes.

    // Data for demonstration
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your database credentials
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    try {
        // Prepare the SQL statement
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (item_id, user_id, rating, comment)
             VALUES (:item_id, :user_id, :rating, :comment)"
        );

        // Bind parameters
        $stmt->bindParam(':item_id', $item_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Return true if successful
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        // Handle database errors appropriately (logging, displaying an error message to the user)
        return false;
    }
}


// Example Usage:

// Simulate user data
$item_id = "product123";
$user_id = "user456";
$rating = 4;
$comment = "Great product, highly recommend!";

// Save the review
$success = saveReview($item_id, $user_id, $rating, $comment);

if ($success) {
    echo "Review successfully saved!";
} else {
    echo "Failed to save review.  Check the logs for details.";
}


?>


<?php

/**
 * User Review Function - Handles user reviews for a product or item.
 *
 * This function allows you to:
 *  - Store user reviews in a database (optional).
 *  - Display reviews on a product page.
 *  - Implement a basic rating system.
 *
 * @param string $product_id The ID of the product or item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (1-5).
 *
 * @return array An array containing the review data (stored in the database)
 *               and the display data for the review.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating)
{
    // --- Data Validation and Sanitization ---
    $user_name = trim($user_name); // Remove whitespace
    $review_text = trim($review_text);
    $rating = intval($rating); // Ensure rating is an integer

    if (empty($user_name) || empty($review_text)) {
        return ['success' => false, 'message' => 'User name and review text are required.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // --- Database Interaction (Example - Adapt to your DB) ---
    // You'll need to replace this with your actual database connection and queries.

    //  Assuming you have a database table called 'reviews' with columns:
    //  - id (INT, PRIMARY KEY, AUTO_INCREMENT)
    //  - product_id (INT)
    //  - user_name (VARCHAR)
    //  - review_text (TEXT)
    //  - rating (INT)
    //  - created_at (TIMESTAMP)

    // This is just a placeholder; replace with your actual database code.
    try {
        // Connect to your database here (e.g., using PDO)
        // ...

        $db_connection = // your database connection object

        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating, created_at)
                VALUES (:product_id, :user_name, :review_text, :rating, NOW())";

        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->execute();

        $review_id = $db_connection->lastInsertId(); // Get the ID of the inserted row

        return ['success' => true, 'review_id' => $review_id, 'message' => 'Review submitted successfully!'];

    } catch (Exception $e) {
        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];
    }
}

/**
 * Function to display reviews for a product.
 *
 * @param string $product_id The ID of the product to display reviews for.
 */
function display_reviews(string $product_id)
{
    // --- Database Interaction (Example - Adapt to your DB) ---
    // This assumes you have a table called 'reviews' with the same columns as above.

    try {
        // Connect to your database here (e.g., using PDO)
        // ...

        $db_connection = // your database connection object

        $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results

        if (empty($reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<p><strong>User:</strong> " . htmlspecialchars($review['user_name']) . "</p>";
                echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
                echo "<p>" . htmlspecialchars($review['review_text']) . "</p>";
                echo "<p><em>Created at:</em> " . date('Y-m-d H:i:s', strtotime($review['created_at'])) . "</p>";
                echo "</li>";
            }
            echo "</ul>";
        }

    } catch (Exception $e) {
        echo "<p>Error fetching reviews: " . $e->getMessage() . "</p>";
    }
}


// --- Example Usage ---

// Submit a review
$result = submit_review('123', 'John Doe', 'This is a great product!', 5);
if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Error: " . $result['message'] . "</p>";
}


// Display reviews for product ID '123'
display_reviews('123');
?>


<?php

/**
 * This function generates a user review based on input data.
 *
 * @param string $name The name of the user.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $comment An optional comment from the user.
 *
 * @return string A formatted user review string.
 */
function generateUserReview(string $name, int $rating, string $comment = "") {
    // Input Validation (Important for security and robustness)
    if (!is_string($name)) {
        return "Error: User name must be a string.";
    }
    if (!is_int($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be an integer between 1 and 5.";
    }


    $review = "Review by: " . $name . "
";
    $review .= "Rating: " . $rating . "/5
";
    if (!empty($comment)) {
        $review .= "Comment: " . $comment . "
";
    }
    return $review;
}



// Example Usage:
$user1Review = generateUserReview("Alice", 4, "Great product!  I love it.");
echo $user1Review . "

";

$user2Review = generateUserReview("Bob", 3);
echo $user2Review . "

";

$user3Review = generateUserReview("Charlie", 5, "Excellent value for money!");
echo $user3Review . "

";


// Example of handling invalid input:
$invalidReview = generateUserReview(123, 2, "This is bad"); // Invalid user name
echo $invalidReview . "

";

$invalidRatingReview = generateUserReview("David", 7, "Too high!"); // Invalid rating
echo $invalidRatingReview . "

";


?>


<?php

/**
 * User Review Class - Allows users to submit and view reviews.
 */
class UserReview {

  private $reviews = [];

  /**
   * Adds a new review.
   *
   * @param string $username The username of the reviewer.
   * @param string $comment The review comment.
   * @return bool True if the review was successfully added, false otherwise.
   */
  public function addReview(string $username, string $comment) {
    if (empty($username) || empty($comment)) {
      return false; // Or throw an exception for better error handling
    }

    $this->reviews[] = [
      'username' => $username,
      'comment' => $comment,
      'date' => date('Y-m-d H:i:s') // Add timestamp for sorting
    ];
    return true;
  }

  /**
   * Retrieves all reviews.
   *
   * @return array An array of review objects.
   */
  public function getAllReviews() {
    return $this->reviews;
  }

  /**
   * Retrieves reviews based on a specified criteria (e.g., most recent).
   *
   * @param string $sortCriteria (optional) 'recent' or 'oldest'. Defaults to 'recent'.
   * @return array An array of review objects, sorted based on the criteria.
   */
  public function getReviews($sortCriteria = 'recent') {
    if ($sortCriteria !== 'recent' && $sortCriteria !== 'oldest') {
      //  Optionally throw an exception for invalid criteria
      //throw new InvalidArgumentException("Invalid sort criteria.  Must be 'recent' or 'oldest'.");
      $sortCriteria = 'recent';
    }

    // Sort the reviews based on the criteria.  'recent' sorts by date descending
    usort($this->reviews, function ($review1, $review2) {
      return $review2['date'] <=> $review1['date'];
    });

    return $this->reviews;
  }


  /**
   * Removes a review by username.
   *
   * @param string $username The username of the review to remove.
   * @return bool True if the review was successfully removed, false otherwise.
   */
  public function removeReview(string $username) {
    global $reviews; // Access the global reviews array
    foreach ($reviews as $key => $review) {
      if ($review['username'] === $username) {
        unset($reviews[$key]);
        return true;
      }
    }
    return false;
  }
}



// --- Example Usage ---

// Create a Review object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product, highly recommend!');
$reviewSystem->addReview('JaneSmith', 'Could be better, needs more features.');
$reviewSystem->addReview('PeterJones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";

// Get reviews sorted by recent date
$recentReviews = $reviewSystem->getReviews();
echo "<h2>Recent Reviews:</h2>";
echo "<pre>";
print_r($recentReviews);
echo "</pre>";

// Get reviews sorted by oldest date
$oldestReviews = $reviewSystem->getReviews('oldest');
echo "<h2>Oldest Reviews:</h2>";
echo "<pre>";
print_r($oldestReviews);
echo "</pre>";

// Remove a review
$reviewSystem->removeReview('JaneSmith');

// Verify removal
echo "<h2>Reviews After Removing JaneSmith:</h2>";
echo "<pre>";
print_r($reviewSystem->getAllReviews());
echo "</pre>";

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review, rating, and optionally, their ID,
 * and stores it in a database.
 *
 * @param string $review The user's review text.
 * @param int $rating The user's rating (e.g., 1-5 stars).
 * @param int|null $userId The user's ID (optional). If null, a new user is assumed.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $review, int $rating, ?int $userId = null): bool
{
    // **Database Connection & Configuration**
    // Replace these with your actual database credentials.
    $host = 'localhost';
    $username = 'your_db_username';
    $password = 'your_db_password';
    $database = 'your_db_name';

    // **Error Handling and Validation**
    if (empty($review)) {
        error_log("Error: Review cannot be empty.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // **Database Interaction**
    try {
        // Establish connection
        $conn = new PDO("mysql:host=$host;dbname=$database", $username, $password);
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable error reporting

        // Prepare the SQL statement
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, review, rating) VALUES (:userId, :review, :rating)");

        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        // Close the connection
        $conn = null;

        return true;

    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage()); // Log the error for debugging
        return false;
    }
}


// **Example Usage:**

// Save a review from a logged-in user (assuming user ID is 123):
$reviewResult = saveUserReview("This product is amazing!", 5, 123);
if ($reviewResult) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}


// Save a review from a guest user (will create a new user):
$reviewResult = saveUserReview("Great service!", 4);
if ($reviewResult) {
    echo "Review saved successfully (new user)!";
} else {
    echo "Failed to save review (new user).";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and formatting for improved readability.
 */

class UserReview {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product or item being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating   The rating given by the user (e.g., 1-5 stars).
     * @param string $comment The user's comment/feedback.
     */
    public function __construct(int $productId, int $userId, int $rating, string $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Set review date to current timestamp
    }

    /**
     * Getters
     *
     * Provides methods to access the review's attributes.
     *
     * @return array An associative array containing the review's data.
     */
    public function getReviewData(): array {
        return [
            'product_id' => $this->productId,
            'user_id' => $this->userId,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'review_date' => $this->reviewDate,
        ];
    }

    /**
     * Format Review for Display
     *
     * Formats the review data for display in a user-friendly format.
     *
     * @return string  A formatted string representing the review.
     */
    public function formatReview(): string {
        return sprintf(
            "<b>Product ID:</b> %d<br>
             <b>User ID:</b> %d<br>
             <b>Rating:</b> %d stars<br>
             <b>Comment:</b> %s<br>
             <b>Review Date:</b> %s",
            $this->productId,
            $this->userId,
            $this->rating,
            $this->comment,
            $this->reviewDate
        );
    }
}

// --- Example Usage ---

// Create a new review
$review = new UserReview(123, 456, 5, "Excellent product!  Highly recommended.");

// Get the review data
$reviewData = $review->getReviewData();
print_r($reviewData);  // Output:  Associative array

// Format and display the review
echo $review->formatReview() . "<br>"; // Output:  Formatted string

// ---  Example of Saving to a Database (Illustrative - requires database setup) ---
// This section is a placeholder and needs adaptation for your specific database.

/*
// Example using mysqli (adjust for your database library)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Prepare the SQL statement
$sql = "INSERT INTO reviews (product_id, user_id, rating, comment, review_date)
        VALUES (?, ?, ?, ?, ?)";

// Prepare statement
$stmt = $conn->prepare($sql);

// Bind parameters
$stmt->bind_param("isss", $review->productId, $review->userId, $review->rating, $review->comment);

// Execute statement
if ($stmt->execute()) {
    echo "New record created successfully";
} else {
    echo "Error: " . $stmt->error;
}

$stmt->close();
$conn->close();
*/
?>


<?php

/**
 * User Review Class - Allows users to submit and view reviews for a product.
 */
class UserReview {

    private $db;  // Database connection (implementation details hidden)

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Submits a new user review.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return bool True on success, false on failure.
     */
    public function submitReview(int $product_id, string $user_name, string $review_text) {
        // Basic input validation (improve this in a real application)
        if (!$product_id || !$user_name || !$review_text) {
            return false;
        }

        // Construct the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, review_date)
                VALUES (:product_id, :user_name, :review_text, NOW())";

        // Prepare the statement
        $stmt = $this->db->prepare($sql); // Assume $this->db has a prepare method

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);

        // Execute the query
        return $stmt->execute();
    }


    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC); // Adapt this based on your database library

        $reviews = [];
        foreach ($results as $row) {
            $reviews[] = (object) [
                'review_id' => $row['review_id'],
                'product_id' => $row['product_id'],
                'user_name' => $row['user_name'],
                'review_text' => $row['review_text'],
                'review_date' => $row['review_date']
            ];
        }
        return $reviews;
    }


    /**
     * Retrieves a single review by ID.
     *
     * @param int $review_id The ID of the review.
     * @return object|null  A review object if found, null otherwise.
     */
    public function getReviewById(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE review_id = :review_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':review_id', $review_id);

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($result) {
            return (object) [
                'review_id' => $result['review_id'],
                'product_id' => $result['product_id'],
                'user_name' => $result['user_name'],
                'review_text' => $result['review_text'],
                'review_date' => $result['review_date']
            ];
        }
        return null;
    }
}


// Example usage (assuming you have a database connection established)

// Sample database connection - replace with your actual database connection
$db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");



// Create an instance of the UserReview class
$review = new UserReview($db);

// Submit a review
if ($review->submitReview(1, "John Doe", "Great product!  Highly recommended.")) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

// Get reviews for product ID 1
$reviews = $review->getReviewsByProduct(1);

if ($reviews) {
    echo "<br><h2>Reviews for Product 1:</h2>";
    foreach ($reviews as $review) {
        echo "<p><strong>User:</strong> " . $review->user_name . "<br>";
        echo "<strong>Review:</strong> " . $review->review_text . "<br>";
        echo "<strong>Date:</strong> " . $review->review_date . "</p>";
    }
} else {
    echo "<p>No reviews found for product 1.</p>";
}

// Get review by ID
$singleReview = $review->getReviewById(1);

if ($singleReview) {
    echo "<br><h2>Single Review:</h2>";
    echo "<p><strong>User:</strong> " . $singleReview->user_name . "<br>";
    echo "<strong>Review:</strong> " . $singleReview->review_text . "<br>";
    echo "<strong>Date:</strong> " . $singleReview->review_date . "</p>";
} else {
    echo "<p>Review not found.</p>";
}
?>


<?php

/**
 * User Review Class
 * 
 * This class allows you to manage and display user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productID;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (Optional) The unique ID for the review. Defaults to null.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productID The ID of the product the review is for.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @param string $date The date of the review submission (e.g., 'YYYY-MM-DD').
     */
    public function __construct($reviewId = null, $userId, $productID, $rating, $comment, $date) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productID = $productID;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductID() {
        return $this->productID;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     * Display Review (Simple Formatting)
     *
     * Formats and displays the review details.
     *
     * @return string  The formatted review string.
     */
    public function displayReview() {
        return "Review ID: " . ($this->reviewId ? $this->reviewId : "N/A") .
               "
User ID: " . $this->userId .
               "
Product ID: " . $this->productID .
               "
Rating: " . $this->rating .
               "
Comment: " . $this->comment .
               "
Date: " . $this->date;
    }
}



/**
 *  Example Usage
 */

// Create a review object
$review = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.", '2023-10-27');

// Display the review
echo $review->displayReview() . "
";

//Another example
$review2 = new UserReview(1, 456, 789, 4, "It's okay.", '2023-10-26');
echo $review2->displayReview() . "
";

//  Example of managing reviews in an array (Illustrative - you'd likely use a database)
$reviews = [];
$reviews[] = new UserReview(1, 101, 102, 3, "Good value", '2023-10-25');
$reviews[] = new UserReview(2, 102, 101, 5, "Excellent!", '2023-10-27');


// Display all reviews
echo "--- All Reviews ---
";
foreach ($reviews as $review) {
    echo $review->displayReview() . "

";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It utilizes a simple database (you'll need to adapt this to your specific database setup).
 *
 * @param string $productName The name of the product the review is for.
 * @param string $user_name The name of the user writing the review.
 * @param string $review_text The content of the review.
 * @param int $rating (Optional)  A rating from 1-5. Defaults to 0.
 *
 * @return array An array containing the result of the operation:
 *              - 'success': true if the review was created/updated successfully, false otherwise.
 *              - 'message': A success/error message.
 *              - 'review_id': The ID of the newly created review (if successful).
 *              - 'review': The review data (name, text, rating) if successful.
 */
function create_user_review(string $productName, string $user_name, string $review_text, int $rating = 0): array
{
    // **IMPORTANT:**  Replace this with your actual database connection code.
    // This is just a placeholder.
    $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // --- Data Sanitization and Validation ---
        // Add more validation rules as needed.  For example, length limits on text,
        //  rating restrictions, etc.

        // Escape user input to prevent SQL injection
        $user_name = $db_connection->quote($user_name);
        $review_text = $db_connection->quote($review_text);

        // --- Insert into Database ---
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_name, user_name, review_text, rating) VALUES (?, ?, ?, ?)"
        );
        $stmt->execute([$productName, $user_name, $review_text, $rating]);

        $review_id = $db_connection->lastInsertId();

        return [
            'success' => true,
            'message' => "Review created successfully!",
            'review_id' => $review_id,
            'review' => [
                'product_name' => $productName,
                'user_name' => $user_name,
                'review_text' => $review_text,
                'rating' => $rating
            ]
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => "Error creating review: " . $e->getMessage()
        ];
    }
}


/**
 * Example usage:
 */

// Create a review
$result = create_user_review('Awesome Product', 'John Doe', 'This product is fantastic!');
print_r($result);

// Update a review (assuming you have an update function - see below)
// ...

// Delete a review (assuming you have a delete function - see below)
// ...

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a product or item.
 * It provides basic functionality like adding reviews, displaying them, and potentially
 * handling ratings.
 *
 * @param string $productId The unique identifier for the product or item being reviewed.
 * @param string $productName The name of the product/item being reviewed.
 * @param array $reviews An array of review data.  Each element should be an associative array with:
 *                       - 'userId': The unique identifier for the user.
 *                       - 'rating': The rating given by the user (e.g., 1-5).
 *                       - 'comment': The user's comment on the product.
 *
 * @return array An array containing the generated review HTML and any potential errors.
 */
function generateUserReviews(string $productId, string $productName, array $reviews = [])
{
    // Input Validation (Basic - expand for more robust validation)
    if (empty($productId) || empty($productName)) {
        return ['error' => 'Product ID and Product Name are required.'];
    }
    if (empty($reviews)) {
        return ['reviewHTML' => 'No reviews yet.'];
    }

    // Build the review HTML
    $reviewHTML = '<h2>Reviews for ' . $productName . '</h2>';
    $reviewHTML .= $reviewHTML; // Add the introductory heading

    // Loop through reviews and add them to the HTML
    foreach ($reviews as $review) {
        $reviewHTML .= '<div>';
        $reviewHTML .= '<p><strong>User:</strong> ' . $review['userId'] . '</p>';
        $reviewHTML .= '<p><strong>Rating:</strong> ' . $review['rating'] . ' / 5</p>';
        $reviewHTML .= '<p>' . $review['comment'] . '</p>';
        $reviewHTML .= '</div>';
    }

    return ['reviewHTML' => $reviewHTML, 'error' => null];
}

// Example Usage:
$productId = 'product123';
$productName = 'Awesome Widget';

// Sample Review Data (Simulated database results)
$reviews = [
    ['userId' => 'user1', 'rating' => 4, 'comment' => 'Great product!  Very useful.'],
    ['userId' => 'user2', 'rating' => 5, 'comment' => 'Exactly what I needed. Highly recommended.'],
    ['userId' => 'user3', 'rating' => 3, 'comment' => 'It's okay, but could be better.'],
];

$result = generateUserReviews($productId, $productName, $reviews);

if ($result['error'] !== null) {
    echo "Error: " . $result['error'] . "<br>";
} else {
    echo $result['reviewHTML'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, validates them, and stores them
 * (in this example, just prints them to the console).  It can be easily adapted
 * to store the reviews in a database or other persistent storage.
 *
 * @param array $reviews An array of user review objects.
 *                      Each review object should have 'user', 'rating', and 'comment' properties.
 * @return bool True if reviews were processed successfully, false otherwise.
 */
function processUserReviews(array $reviews)
{
    $success = true;

    foreach ($reviews as $review) {
        // Validate the review
        if (!$review) {
            $success = false;
            error_log("Invalid review object encountered.  Review is empty.");
            continue;
        }

        if (!is_object($review)) {
            $success = false;
            error_log("Review is not an object. Review: " . print_r($review, true));
            continue;
        }

        // Check required properties
        $required_properties = ['user', 'rating', 'comment'];
        foreach ($required_properties as $prop) {
            if (!property_exists($review, $prop)) {
                $success = false;
                error_log("Missing property '$prop' in review object.");
                break;
            }
        }

        // Validate rating (numeric)
        if (!is_numeric($review->rating)) {
            $success = false;
            error_log("Rating must be a number.  Received: " . $review->rating);
        }

        // Validate rating range (e.g., 1-5) - You can customize this
        if ($review->rating < 1 || $review->rating > 5) {
            $success = false;
            error_log("Rating must be between 1 and 5. Received: " . $review->rating);
        }

        // Validate comment (optional, you can add more complex validation here)
        if (empty($review->comment)) {
            //  You could allow empty comments or require them.  Here, we allow
            //  and log a message.
            error_log("Comment is empty for review: " . $review->user);
        }

        // Process the review (e.g., store it)
        // In a real application, you would do something here like:
        // $this->storeReview($review);  // Assuming you have a storeReview() method
        echo "Review processed: User: " . $review->user . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }

    return $success;
}

// Example Usage:

// Create some sample review objects (simulate getting reviews from a form or API)
$reviews = [
    (object) ['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product!'],
    (object) ['user' => 'Bob', 'rating' => 2, 'comment' => 'Could be better.'],
    (object) ['user' => 'Charlie', 'rating' => 5, 'comment' => 'Excellent value.'],
    (object) ['user' => 'David', 'rating' => 1, 'comment' => 'Very disappointing.'],
    (object) ['user' => 'Eve', 'rating' => 3, 'comment' => 'Okay.'],
    // Example of an invalid review (missing property)
    // (object) ['user' => 'Frank', 'rating' => 4],
    // Example of an invalid review (non-numeric rating)
    // (object) ['user' => 'George', 'rating' => 'bad', 'comment' => 'Terrible!']
];

$result = processUserReviews($reviews);

if ($result) {
    echo "All reviews processed successfully.
";
} else {
    echo "There were errors processing some reviews.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to handle user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A numerical rating (e.g., 1-5) for the product/service.
 * @param string $comment The user's written review comment.
 * @param array $reviews An existing array of reviews to append to.  If null, creates a new array.
 *
 * @return array An array of reviews, with the new review added.
 */
function addReview(string $productId, string $username, int $rating, string $comment, array $reviews = []): array
{
    // Input Validation (Important for security and data integrity)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    // Create a review object (for easier management)
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date("Y-m-d H:i:s") // Add a timestamp for tracking.
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


// ------------------- Example Usage -------------------
//  To use this, you'd typically store this function in a file (e.g., review_handler.php)
//  and then include it in your application file: require_once 'review_handler.php';

// Example 1:  Adding a new review
try {
    $reviews = addReview('product123', 'JohnDoe', 4, 'Great product, works as expected!', []);
    print_r($reviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}


// Example 2: Adding to an existing reviews list
try {
    $reviews = addReview('product456', 'JaneSmith', 5, 'Excellent service, highly recommended!', $reviews);
    print_r($reviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}


// Example 3: Error Handling - Invalid Rating
try {
    addReview('product789', 'PeterPan', 6, 'Too expensive', []);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
"; // Expected output: "Error: Rating must be between 1 and 5."
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 * It includes methods for adding, retrieving, and displaying reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($username, $rating, $comment) {
        if (!empty($username) && is_numeric($rating) && !empty($comment)) {
            $this->reviews[] = [
                'username' => $username,
                'rating' => (int)$rating, // Cast to integer for consistent data type
                'comment' => $comment
            ];
            return true;
        }
        return false;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews by a specific user.
     *
     * @param string $username The username of the user.
     * @return array An array of reviews by the user, or an empty array if no reviews by that user exist.
     */
    public function getReviewsByUser($username) {
        $userReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }

    /**
     * Get average rating.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return round(($totalRating / $reviewCount), 2); // Round to 2 decimal places.
    }

    /**
     * Display reviews formatted for output (e.g., HTML).
     * This is just an example; you can customize the output format.
     *
     * @return string HTML markup for displaying reviews.
     */
    public function displayReviews() {
        $reviews = $this->getAllReviews();
        if (empty($reviews)) {
            return '<p>No reviews yet.</p>';
        }

        $output = '<ul>';
        foreach ($reviews as $review) {
            $output .= '<li><strong>' . $review['username'] . ':</strong> ' .
                       $review['rating'] . ' - ' . $review['comment'] . '</li>';
        }
        $output .= '</ul>';
        return $output;
    }

}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 5, 'Great product!  I highly recommend it.');
$reviewSystem->addReview('JaneSmith', 4, 'Good value for money.');
$reviewSystem->addReview('JohnDoe', 3, 'It\'s okay, could be better.');
$reviewSystem->addReview('PeterPan', 5, 'Absolutely fantastic!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>
";
echo $reviewSystem->displayReviews();

// Get reviews by JohnDoe
$johnReviews = $reviewSystem->getReviewsByUser('JohnDoe');
echo "<h2>JohnDoe Reviews:</h2>
";
echo $reviewSystem->displayReviews($johnReviews);

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<h2>Average Rating:</h2> " . ($averageRating === null ? "No reviews" : $averageRating);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param int $rating (Optional) A rating from 1 to 5. Defaults to 0.
 *
 * @return array An array containing the review data (success/failure message, review data if successful)
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {
  // Input validation - add more robust validation as needed for production
  if (empty($productId)) {
    return array('success' => false, 'message' => 'Product ID cannot be empty.');
  }
  if (empty($reviewerName)) {
    return array('success' => false, 'message' => 'Reviewer Name cannot be empty.');
  }
  if (empty($reviewText)) {
    return array('success' => false, 'message' => 'Review Text cannot be empty.');
  }

  // Validate the rating
  if ($rating < 1 || $rating > 5) {
    return array('success' => false, 'message' => 'Rating must be between 1 and 5.');
  }


  //  Here you would typically save the review data to a database.
  //  This is a placeholder for demonstration.

  $reviewData = array(
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'submissionTime' => date('Y-m-d H:i:s')  // Add timestamp
  );

  //  For demonstration, we'll just store the review data in an array.
  //  In a real application, you would save this to a database.

  //  Simulate saving to a database (replace this with actual database code)
  //  $db = new DatabaseConnection(); // Assuming you have a database connection class
  //  $db->insertReview($reviewData);

  return array('success' => true, 'reviewData' => $reviewData);
}


/**
 * Display Reviews - Example Function
 *
 *  This is an example function to display reviews.
 *
 * @param array $reviews  An array of reviews (returned by submitReview).
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>";  // Display the product ID

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['reviewerName'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . $review['submissionTime'] . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
$productID = "P123";

// Submit a review
$reviewResult = submitReview($productID, "John Doe", "Great product!  I love it!", 5);

if ($reviewResult['success']) {
  echo "<p>Review submitted successfully!</p>";
  $reviewData = $reviewResult['reviewData'];
  echo "<p>Review ID: " . $reviewData['reviewId'] . " (Generated by system)</p>";
  displayReviews([$reviewData]); // Pass the review data to displayReviews
} else {
  echo "<p>Error submitting review: " . $reviewResult['message'] . "</p>";
}


// Example of submitting an invalid review:
$invalidReviewResult = submitReview("", "Jane Smith", "Terrible!", 1);

if (!$invalidReviewResult['success']) {
    echo "<p>Invalid Review Submission Result: " . $invalidReviewResult['message'] . "</p>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to manage user reviews for a product.
 * It allows adding reviews, retrieving all reviews, and retrieving individual reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new user review.
     *
     * @param string $username The name of the user submitting the review.
     * @param string $comment The user's review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment): bool
    {
        // Basic validation - you can expand this with more robust validation
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single user review by username.
     *
     * @param string $username The username of the review to retrieve.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewByUsername(string $username): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['username'] === $username) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Deletes a review by username.
     *
     * @param string $username The username of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(string $username): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['username'] === $username) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}


/**
 *  Example Usage and User Review Function
 */

// Create a new review object
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!  Highly recommended.');
$reviewManager->addReview('JaneSmith', 'Excellent value for money.');
$reviewManager->addReview('PeterJones', 'Could be better, but decent.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$johnDoeReview = $reviewManager->getReviewByUsername('JohnDoe');
echo "
John Doe's Review:
";
print_r($johnDoeReview);

// Delete a review
$reviewManager->deleteReview('PeterJones');

// Get all reviews again to see the change
$allReviewsAfterDeletion = $reviewManager->getAllReviews();
echo "
All Reviews After Deletion:
";
print_r($allReviewsAfterDeletion);

?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, sanitizes input, and stores them in a database.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $product_id The ID of the product being reviewed.
 * @param PDO $pdo A PDO database connection object.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $username, string $reviewText, int $product_id, PDO $pdo): bool
{
    // Sanitize and validate inputs
    $username = trim($username);
    $reviewText = trim($reviewText);

    // Check if username and review text are empty
    if (empty($username) || empty($reviewText)) {
        error_log("Invalid review: Username and/or review text are empty.");
        return false;
    }

    // Escape strings for SQL query to prevent SQL injection
    $username = $pdo->quote($username);
    $reviewText = $pdo->quote($reviewText);

    // Prepare and execute the SQL query
    $sql = "INSERT INTO reviews (product_id, username, review_text, created_at) VALUES (:product_id, :username, :review_text, NOW())";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->execute();

    return true;
}


/**
 * Retrieves Reviews for a Specific Product
 *
 * Fetches all reviews for a given product ID from the database.
 *
 * @param int $product_id The ID of the product to retrieve reviews for.
 * @param PDO $pdo A PDO database connection object.
 * @return array An array of review objects, each with an 'id', 'product_id', 'username', 'review_text', and 'created_at' properties.
 */
function getReviewsForProduct(int $product_id, PDO $pdo): array
{
    $sql = "SELECT id, product_id, username, review_text, created_at FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    return $reviews;
}


// Example usage (Illustrative - Adapt to your database setup)

//  Assume you have a database connection object $pdo

// Create a sample database connection (replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage() . "
";
    exit; // Or handle the error appropriately
}

// Example review submission
$product_id = 1;
$username = 'JohnDoe';
$reviewText = 'This product is amazing! I highly recommend it.';

if (saveUserReview($username, $reviewText, $product_id, $pdo)) {
    echo "Review successfully saved!
";
} else {
    echo "Error saving review.
";
}

// Retrieve reviews for the product
$reviews = getReviewsForProduct($product_id, $pdo);

echo "Reviews for product $product_id:
";
foreach ($reviews as $review) {
    echo "  ID: " . $review['id'] . ", Username: " . $review['username'] . ", Review: " . $review['review_text'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, review text, rating, and optionally a date,
 * and stores the review in a database.
 *
 * @param int    $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review.
 * @param int    $rating      The rating given by the user (e.g., 1-5 stars).
 * @param string|null $date     Optional: The date of the review. If null, the current date is used.
 * @return bool  True if the review was successfully saved, false otherwise.
 */
function saveReview($userId, $reviewText, $rating, $date = null) {
  // Input validation - crucial for security and data integrity
  if (!is_numeric($userId)) {
    error_log("Invalid user ID: " . $userId);
    return false;
  }
  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }
  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating: " . $rating);
    return false;
  }

  // Prepare the database query
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials
  $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  $date_str = $date ?? date('Y-m-d H:i:s'); // Use current date if $date is null

  $stmt = $db->prepare("INSERT INTO reviews (user_id, review_text, rating, review_date) VALUES (:user_id, :review_text, :rating, :review_date)");

  // Bind the parameters to prevent SQL injection
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_date', $date_str);

  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage (Illustrative - Replace with your form handling)
// This is just to demonstrate how you might call this function.
// You'd typically get the data from a form submission.
/*
$userId = 123;
$review = "This is a fantastic product!";
$starRating = 5;
$reviewDate = date('Y-m-d');

if (saveReview($userId, $review, $starRating, $reviewDate)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}
*/


//  A simple example of a basic form to submit the review.
//  This is a very basic HTML form and needs to be integrated with your backend.
?>
<!DOCTYPE html>
<html>
<head>
  <title>User Review Form</title>
</head>
<body>

  <h1>Submit a Review</h1>

  <form action="process_review.php" method="post">
    <label for="userId">User ID:</label>
    <input type="number" id="userId" name="userId" required><br><br>

    <label for="reviewText">Review Text:</label><br>
    <textarea id="reviewText" name="reviewText" rows="4" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select><br><br>

    <input type="submit" value="Submit Review">
  </form>

</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $reviewId (Optional) The ID of the review to update.  If null, a new review is created.
 *
 * @return array  An array containing:
 *                - 'success': true if the operation was successful, false otherwise.
 *                - 'message': A message describing the outcome.
 *                - 'reviewId': (Optional) The ID of the newly created or updated review.
 *
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, ?string $reviewId = null): array {
  // Validate inputs (basic - can be expanded for more robust validation)
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }

  if (empty($username) || empty($comment)) {
    return ['success' => false, 'message' => 'Username and comment are required fields.'];
  }

  //  Simulate a database interaction (replace with your actual database code)
  //  This is just an example - you'll need to connect to your database.

  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'createdAt' => date('Y-m-d H:i:s'), // Example: timestamp
  ];

  if ($reviewId) {
    // Update existing review
    // Assume you have a way to look up the review by ID in your database
    // This is a simplified example - replace with your database query.
    // Example:
    // $existingReview = getReviewById($reviewId);
    // if ($existingReview) {
    //     // Update the existing review data
    // }
    // else {
    //   return ['success' => false, 'message' => 'Review not found.'];
    // }
    return ['success' => true, 'message' => 'Review updated successfully.', 'reviewId' => $reviewId];

  } else {
    // Create new review
    // Example:
    // $newReviewId = insertReviewIntoDatabase($review);
    // return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $newReviewId];
    return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => uniqid()]; // Generate a unique ID
  }
}

// Example Usage:
// Create a new review
$result = createOrUpdateReview('product123', 'JohnDoe', 4, 'Great product, highly recommended!');
print_r($result);

// Update an existing review (assuming reviewId 'review456')
$result = createOrUpdateReview('product123', 'JaneSmith', 5, 'Excellent value for money', 'review456');
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).  Must be an integer.
 * @param string $comment The review comment.
 * @param string $dbConnection  (Optional) - Database connection object.  If not provided, it will attempt to connect.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully saved, false otherwise.
 *   - 'message': A message indicating the success or failure of the operation.
 */
function saveUserReview(string $productId, string $username, int $rating, string $comment, $dbConnection = null)
{
  $success = false;
  $message = "Error saving review.";

  // Attempt to connect to the database if no connection is provided.
  if ($dbConnection === null) {
    // Replace with your database connection details
    $dbHost = "localhost";
    $dbName = "your_database_name";
    $dbUser = "your_database_user";
    $dbPassword = "your_database_password";

    try {
      $dbConnection = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);
      $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      error_log("Database connection error: " . $e->getMessage()); // Log the error for debugging
      $message = "Failed to connect to the database.  Check your database credentials.";
    }
  }


  if ($dbConnection) {
    try {
      // Construct the SQL query
      $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
              VALUES (:product_id, :user_name, :rating, :comment)";

      // Prepare the statement
      $stmt = $dbConnection->prepare($sql);

      // Bind the parameters
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':user_name', $username);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':comment', $comment);

      // Execute the query
      $stmt->execute();

      $success = true;
      $message = "Review saved successfully!";

    } catch (PDOException $e) {
      error_log("Database error: " . $e->getMessage());
      $message = "Failed to save review.  Check your database schema and data.";
    }
  }

  return ['success' => $success, 'message' => $message];
}

// Example Usage:

// Assuming you have a database connection object called $conn
//$conn = new PDO("mysql:host=localhost;dbname=your_database_name;charset=utf8mb4", "your_database_user", "your_database_password");
//$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// Example 1: Saving a review with a database connection
//$reviewResult = saveUserReview("123", "JohnDoe", 5, "Great product!", $conn);
//print_r($reviewResult);


// Example 2:  Saving a review without explicitly creating a connection
//$reviewResult = saveUserReview("456", "JaneSmith", 3, "It was okay.", null); //Uses default database connection
//print_r($reviewResult);

?>


<?php

/**
 * User Review Function
 *
 * This function creates a simple user review system, allowing users to submit reviews
 * and displaying them.
 */

class UserReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on success, false on failure (e.g., invalid input).
     */
    public function addReview(string $username, string $reviewText): bool {
        if (empty($username) || empty($reviewText)) {
            return false; // Invalid input
        }

        $this->reviews[] = ['username' => $username, 'review' => $reviewText];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Displays all reviews in a formatted manner.
     */
    public function displayReviews(): void {
        echo "<h2>All Reviews:</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->getAllReviews() as $review) {
                echo "<h3>" . htmlspecialchars($review['username']) . ":</h3>";
                echo "<p>" . htmlspecialchars($review['review']) . "</p>";
            }
        }
    }
}


// Example Usage:
$reviewSystem = new UserReviewSystem();

// Add some reviews
$reviewSystem->addReview('Alice', 'This product is amazing!  I highly recommend it.');
$reviewSystem->addReview('Bob', 'It was okay, but could be better.');
$reviewSystem->addReview('Charlie', 'Excellent value for money.');


// Display the reviews
$reviewSystem->displayReviews();


//  Demonstration of input validation
$reviewSystem->addReview("", "This is a test review");  // Will return false
echo "<br>";
echo "Last addition failed due to empty username.";
?>


<?php

/**
 *  User Review Function - A basic implementation.
 *
 *  This function allows users to submit and view reviews for a product or item.
 *  It includes basic input validation and output formatting.
 *
 *  Future improvements could include:
 *      - Secure database storage
 *      - Image uploading
 *      - More robust validation and sanitization
 *      - Rating system
 *      - Moderation features
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @return array An array containing:
 *               - 'success': True if the review was submitted successfully.
 *               - 'message': A message indicating the status of the review.
 *               - 'review': The submitted review text.
 */
function submitReview(string $productName, string $reviewText) {
    // Basic input validation -  ensure review is not empty
    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => $reviewText // Return the input to show what was entered.
        ];
    }

    // Add your database interaction here.  This is just a placeholder.
    // In a real application, you would connect to a database and insert the review.
    // For demonstration purposes, we'll just store it in a session variable.

    if (session_status() === 'closed') {
        session_start();
    }

    $review = $reviewText;
    $_SESSION['reviews'][$productName] = $review;


    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $reviewText
    ];
}



/**
 * Displays existing reviews for a given product.
 *
 * @param string $productName The name of the product to display reviews for.
 */
function displayReviews(string $productName)
{
    if (session_status() === 'closed') {
        session_start();
    }

    // Check if reviews exist for this product
    if (isset($_SESSION['reviews'][$productName])) {
        echo "<h2>Reviews for " . $productName . "</h2>";
        echo "<ul>";
        foreach ($_SESSION['reviews'][$productName] as $review) {
            echo "<li>" . $review . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No reviews yet for " . $productName . ".</p>";
    }
}

// Example Usage (Demonstration)

// 1. Submit a review
$reviewResult = submitReview('Awesome Widget', 'This widget is amazing!  It does exactly what I need.');

if ($reviewResult['success']) {
    echo '<p>' . $reviewResult['message'] . '</p>';
    echo '<p>Review: ' . $reviewResult['review'] . '</p>';
} else {
    echo '<p>' . $reviewResult['message'] . '</p>';
}

// 2. Display the reviews
displayReviews('Awesome Widget');

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviewData (Optional) An associative array containing review data
 *                         (e.g., ['rating' => 5, 'timestamp' => time()])
 *
 * @return array An array containing the result of the operation.  Returns an error message
 *               on failure.  Returns a success message and review ID on success.
 */
function create_review(string $productName, string $userEmail, string $reviewText, array $reviewData = [])
{
  // Validate inputs (Basic Example - Expand for more robust validation)
  if (empty($productName)) {
    return ['status' => 'error', 'message' => 'Product name cannot be empty.'];
  }
  if (empty($userEmail)) {
    return ['status' => 'error', 'message' => 'User email cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  // Sanitize inputs -  IMPORTANT:  Always sanitize user inputs!
  $productName = filter_var($productName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  // Simulate a database insert.  Replace with your actual database logic.
  // This is just a placeholder example.
  $reviewId = generate_unique_id();  // Replace with your unique ID generation
  $timestamp = time();

  $review = [
    'product_name' => $productName,
    'user_email' => $userEmail,
    'review_text' => $reviewText,
    'rating' => isset($reviewData['rating']) ? $reviewData['rating'] : null,
    'timestamp' => $timestamp,
    'review_id' => $reviewId,
  ];

  // In a real application, you would save this data to a database.
  // For this example, we just log the review.
  log_review($review);

  return ['status' => 'success', 'message' => 'Review created successfully.', 'review_id' => $reviewId];
}


/**
 * Simulates generating a unique ID.
 *  Replace with your actual unique ID generation logic.
 * @return string
 */
function generate_unique_id() {
    return bin2hex(random_bytes(16)); // A simple way to generate a unique ID
}


/**
 * Simulates logging a review to a file.
 *  Replace this with your actual logging mechanism.
 * @param array $review
 */
function log_review(array $review) {
    // This is just a placeholder.  Replace with your logging code.
    file_put_contents('review_log.txt', "New Review: " . json_encode($review) . "
", FILE_APPEND);
}

// --- Example Usage ---
// Example 1: Create a review
$result = create_review('Awesome Gadget', 'test@example.com', 'Great product!');
print_r($result);

// Example 2: Create a review with a rating
$result = create_review('Another Product', 'user@email.net', 'Good but could be better.', ['rating' => 4]);
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_id The unique ID of the item being reviewed.
 * @param string $reviewer_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param array $reviews (optional) An array of existing reviews to store and display.
 *
 * @return array An updated array of reviews, including the new review if successful.
 */
function create_and_display_review(string $item_id, string $reviewer_name, string $review_text, array &$reviews = []): array
{
  // Validation (basic - you might want more robust validation)
  if (empty($reviewer_name)) {
    return $reviews; // Return existing reviews if no name provided
  }
  if (empty($review_text)) {
    return $reviews; // Return existing reviews if no text provided
  }

  // Create a new review
  $new_review = [
    'item_id' => $item_id,
    'reviewer_name' => $reviewer_name,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Add the new review to the array
  $reviews[] = $new_review;

  // Sort reviews by timestamp (optional -  can be useful for display)
  usort($reviews, function($a, $b) {
    return $a['timestamp'] <=> $b['timestamp'];
  });

  return $reviews;
}


/**
 * Display Reviews Function (for demonstration purposes)
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews The array of reviews to display.
 */
function display_reviews(array $reviews) {
  echo "<h2>Reviews for Item ID: " . $reviews[0]['item_id'] . "</h2>"; // Access the first item's ID
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer_name']) . "<br>";
    echo "<strong>Date:</strong> " . $review['timestamp'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['review_text'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:

// Initialize an empty array of reviews.  Pass by reference (&) so the function can modify it.
$reviews = [];

// Create a review
$reviews = create_and_display_review('product123', 'John Doe', 'Great product!  I highly recommend it.');

// Create another review
$reviews = create_and_display_review('product456', 'Jane Smith', 'It was okay, nothing special.');

// Display the reviews
display_reviews($reviews);

// Show the final reviews array (for demonstration)
echo "<hr>";
echo "<h3>Final Reviews Array:</h3>";
print_r($reviews); // Output the array to see the results.
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (Optional) Unique ID for the review. Defaults to null.
     * @param int $userId The ID of the user leaving the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (e.g., 1-5).
     * @param string $comment The user's comment.
     * @param string $date The date of the review (e.g., 'YYYY-MM-DD').
     */
    public function __construct(
        $reviewId = null,
        $userId,
        $productId,
        $rating,
        $comment = '',
        $date = date('Y-m-d') // Default to current date
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters for the review attributes.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setsters (for demonstration purposes - consider validation)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     *  Returns a string representation of the review
     *  Useful for debugging or output.
     *
     * @return string
     */
    public function __toString() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}


/**
 * User Review Review Function (Illustrative)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
    // Basic validation - improve this in a real application.
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Invalid rating. Rating must be a number between 1 and 5.";
    }

    // Create a new review object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // Process the review (e.g., store in a database)
    // For this example, we just return the review as a string.

    return (string)$review; // Convert the review object to a string.

    //  In a real application, you would:
    //  1.  Validate the input data more thoroughly (e.g., using a form).
    //  2.  Connect to your database.
    //  3.  Insert the review data into the database.
    //  4.  Handle any errors that may occur.

}



// Example usage:
$reviewText = reviewProduct(123, 456, 4, "Great product! Highly recommend.");
echo $reviewText . "
";


// Another example
$reviewText = reviewProduct(789, 101, 5, "Excellent value for money.");
echo $reviewText . "
";

//Example with invalid rating
$reviewText = reviewProduct(1011, 1111, 6, "Awesome!");
echo $reviewText . "
"; // This will print the error message.
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes input validation, sanitization, and basic formatting.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|string Returns an array on success or an error message string.
 */
function create_user_review(string $product_id, string $username, string $rating, string $comment)
{
    // Input Validation & Sanitization
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        return "Error: All fields are required.";
    }

    if (!preg_match('/^[a-zA-Z0-9 ]+$/', $username)) {
        return "Error: Username must contain only letters and spaces.";
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    if (strlen($comment) > 1000) {
        return "Error: Comment must be less than 1000 characters.";
    }

    // Sanitize input (optional, but recommended) -  This is a basic example
    $username = trim($username);
    $comment = trim($comment);


    //  Database interaction (Replace with your actual database connection)
    //  This is a simplified example; you'll need to adapt it to your database setup.
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        return "Error: Database connection failed: " . $e->getMessage();
    }


    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if ($stmt->execute()) {
        return "Review successfully created!";
    } else {
        return "Error: Review creation failed. " . print_r($stmt->errorInfo(), true);
    }
}


// Example Usage:
$product_id = '123';
$username = 'JohnDoe';
$rating = '4';
$comment = "This product is amazing!  I highly recommend it.  It's fantastic!";


$result = create_user_review($product_id, $username, $rating, $comment);

if (is_string($result)) {
    echo $result . "<br>";
} else {
    echo "Review created successfully!";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text) and stores it in a database.
 * It includes basic validation and error handling.
 *
 * @param string $reviewText The user-submitted review text.
 * @param string $username  The username of the user submitting the review.
 * @param string $productId The ID of the product being reviewed.
 * @param PDO $pdo  A PDO database connection object.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $reviewText, string $username, string $productId, PDO $pdo)
{
    // Input Validation
    if (empty($reviewText)) {
        error_log("Empty review text submitted.");  // Log for admin/debugging
        return false;
    }

    if (empty($username)) {
        error_log("Empty username submitted.");
        return false;
    }

    if (empty($productId)) {
        error_log("Empty product ID submitted.");
        return false;
    }

    // Sanitize Input (Basic - Extend for Robustness)
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); // Prevent XSS
    $username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

    //  Potentially add more validation here, like length limits on the review text.

    // Prepare SQL Query
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, review_date)
            VALUES (:product_id, :user_name, :review_text, NOW())";

    try {
        // Execute the query
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_name', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  //Log the error for debugging
        return false;
    }
}


// Example Usage (assuming you have a database connection)
//  This is just for demonstration.  Replace with your actual database details.
/*
try {
    // Establish database connection (replace with your credentials)
    $host = 'localhost';
    $dbname = 'your_database_name';
    $user = 'your_db_user';
    $password = 'your_db_password';

    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $user, $password);

    // Example Usage
    $reviewText = "This product is fantastic!  I highly recommend it.";
    $username = "JohnDoe";
    $productId = "123";

    if (saveUserReview($reviewText, $username, $productId, $pdo)) {
        echo "Review saved successfully!";
    } else {
        echo "Error saving review.";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product or item.
 *
 * @param string $productId The ID of the product/item being reviewed.
 * @param string $productName The name of the product/item (for display).
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array to store reviews (passed by reference).
 * @return void
 */
function addReview(string $productId, string $productName, string $reviewerName, string $reviewText, &$reviews) {

  // Sanitize input (very important to prevent XSS and SQL Injection)
  $reviewerName = htmlspecialchars($reviewerName);
  $reviewText = htmlspecialchars($reviewText);

  // Create a review object (or you can just use an array)
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'), // Add timestamp for ordering
  ];

  // Add the review to the array.  Since reviews is passed by reference,
  // the array is modified directly.
  $reviews[] = $review;
}

/**
 * Display Reviews Function
 *
 * This function displays the reviews for a given product/item.
 *
 * @param array $reviews Array of reviews (passed by reference).
 * @param string $productName The name of the product/item (for display).
 */
function displayReviews(array &$reviews, string $productName) {
  echo "<h2>Reviews for " . $productName . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['reviewerName'] . ":</strong> " . $review['reviewText'] . "<br>";
      echo "Date: " . $review['timestamp'];
      echo "</li>";
    }
    echo "</ul>";
  }
}


// Example Usage:
// Initialize an empty array to store reviews
$reviews = [];

// Add some reviews
addReview('product123', 'Awesome Gadget', 'John Doe', 'This gadget is fantastic!  I highly recommend it.', $reviews);
addReview('product123', 'Awesome Gadget', 'Jane Smith', 'Great value for money.', $reviews);
addReview('product456', 'Cool Device', 'Peter Jones', 'A bit buggy, but generally good.', $reviews);

// Display the reviews
displayReviews($reviews, 'Awesome Gadget');


// Example of how to add a review via form submission (simplified)
//  This requires a form that submits the data to this PHP script.
//  You'll need to implement the HTML form and handle the form submission appropriately.
//  This is just an illustration.

/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $reviewerName = $_POST["reviewer_name"];
    $reviewText = $_POST["review_text"];

    addReview($productId, $productName, $reviewerName, $reviewText, $reviews);
    // Redirect to display the reviews
    header("Location: display_reviews.php"); // Redirect to a page displaying the reviews
    exit();
}
*/
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and display reviews for a given item.
 *
 *  @param string $item_name The name of the item being reviewed.
 *  @param string $item_description  A short description of the item (optional).
 *  @param array $reviews An array of review objects. Each review object should have:
 *                       - 'user' => string - The name of the user who wrote the review.
 *                       - 'rating' => int  -  The rating given by the user (e.g., 1-5).
 *                       - 'comment' => string - The user's comment.
 *
 *  @return string  HTML output displaying the reviews.  Returns a message if no reviews exist.
 */
function display_reviews(string $item_name, string $item_description = '', array $reviews = [])
{
    if (empty($reviews)) {
        return "<p>No reviews yet.  Be the first to review!</p>";
    }

    $html = "<h2>Reviews for " . htmlspecialchars($item_name) . "</h2>";
    if (!empty($item_description)) {
        $html .= "<p>" . htmlspecialchars($item_description) . "</p>";
    }

    $html .= "<ul>";
    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . " (Rating: " . htmlspecialchars($review['rating']) . ")";
        $html .= "</li>";
    }
    $html .= "</ul>";

    return $html;
}


// Example Usage (Illustrative)
// Simulate a database retrieval for reviews
$reviews_data = [
    [
        'user' => 'Alice',
        'rating' => 5,
        'comment' => 'Amazing product!  Exactly what I was looking for.',
    ],
    [
        'user' => 'Bob',
        'rating' => 4,
        'comment' => 'Good quality for the price.  Could be a little better.',
    ],
    [
        'user' => 'Charlie',
        'rating' => 3,
        'comment' => 'It was okay.  Not amazing, but not bad either.',
    ],
];

// Display the reviews
echo display_reviews('Awesome Widget', 'A fantastic widget for all your needs!');
echo display_reviews('Basic Gadget'); //Demonstrating no reviews case
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The review text.
 *
 * @return array  An array containing the review data if successful, or an error message if not.
 */
function create_review(string $productId, string $username, string $rating, string $comment)
{
    // Input validation - crucial for security and data integrity
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }

    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        return ['error' => 'Username must contain only alphanumeric characters and underscores.'];
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    if (empty($comment)) {
        return ['error' => 'Comment cannot be empty.'];
    }

    if (!preg_match('/^\S+\s+.*$/', $comment)) {
        return ['error' => 'Comment must contain at least one non-whitespace character.'];
    }

    // In a real application, you would save this data to a database.
    // This is a placeholder for demonstration purposes.
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => (int)$rating, // Convert rating to integer
        'comment' => $comment,
        'timestamp' => time()
    ];

    // For demonstration, we just echo the review
    echo "Review submitted by: " . $username . " for product ID: " . $productId . "
";
    echo "Rating: " . $rating . "
";
    echo "Comment: " . $comment . "
";
    echo "Timestamp: " . date("Y-m-d H:i:s", $timestamp) . "
";


    return $review;
}

// Example Usage:
$review_data = create_review('product123', 'john_doe', 5, 'Great product, highly recommended!');
if (isset($review_data['error'])) {
    echo "Error: " . $review_data['error'] . "
";
} else {
    echo "Review successfully created.
";
}

$review_data = create_review('product456', 'jane_smith', 3, 'It was okay, but could be better.');
if (isset($review_data['error'])) {
    echo "Error: " . $review_data['error'] . "
";
} else {
    echo "Review successfully created.
";
}

// Example with invalid input
$invalid_review = create_review('', 'testuser', 1, 'Test');
if (isset($invalid_review['error'])) {
    echo "Error: " . $invalid_review['error'] . "
";
} else {
    echo "Review successfully created.
";
}


?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to store and manage user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional) - Unique identifier for the review.  If not provided, will be auto-generated.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     *
     * @return int
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    /**
     * Get User ID
     *
     * @return int
     */
    public function getUserId() {
        return $this->userId;
    }

    /**
     * Get Product ID
     *
     * @return int
     */
    public function getProductId() {
        return $this->productId;
    }

    /**
     * Get Rating
     *
     * @return int
     */
    public function getRating() {
        return $this->rating;
    }

    /**
     * Get Comment
     *
     * @return string
     */
    public function getComment() {
        return $this->comment;
    }

    /**
     * Get Date
     *
     * @return string
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review
     *
     * A simple method to display the review information.
     */
    public function displayReview() {
        echo "<p><strong>Review ID:</strong> " . $this->getReviewId() . "</p>";
        echo "<p><strong>User ID:</strong> " . $this->getUserId() . "</p>";
        echo "<p><strong>Product ID:</strong> " . $this->getProductId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $this->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $this->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $this->getDate() . "</p>";
    }
}



/**
 * User Review Review Function (Example Usage)
 */
function createReview($reviewId, $userId, $productId, $rating, $comment) {
    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);
    return $review;
}

function displayAllReviews($reviews) {
    echo "<h2>All Reviews:</h2>";
    foreach ($reviews as $review) {
        $review->displayReview();
        echo "<hr>";
    }
}



// Example Usage:
$review1 = createReview(1, 123, 456, 5, "Great product! Highly recommended.");
$review2 = createReview(2, 456, 456, 4, "Good value for money.");
$review3 = createReview(3, 789, 456, 3, "Could be better.");


$allReviews = [$review1, $review2, $review3];
displayAllReviews($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It utilizes a database (simulated here for demonstration) to store the reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete.  If null, creates a new review.
 *
 * @return array An array containing the review ID if successful, or an error message.
 */
function createOrUpdateReview(string $productId, string $username, int $rating, string $comment, ?int $reviewId = null)
{
    // Simulate a database connection (replace with your actual database connection)
    $db = [
        'reviews' => [
            123 => [
                'username' => 'JohnDoe',
                'rating' => 4,
                'comment' => 'Great product, highly recommended!',
                'created_at' => time()
            ],
            456 => [
                'username' => 'JaneSmith',
                'rating' => 5,
                'comment' => 'Excellent!  Just what I needed.',
                'created_at' => time()
            ]
        ]
    ];

    // Input validation
    if (!$productId || !$username || $rating < 1 || $rating > 5 || !$comment) {
        return ['error' => 'Invalid input.  Please provide a valid product ID, username, rating (1-5), and comment.'];
    }

    // Check if review with the same ID exists
    if ($reviewId !== null) {
        if (!isset($db['reviews'][$reviewId])) {
            return ['error' => 'Review with ID ' . $reviewId . ' not found.'];
        }
    }

    // Create a new review
    if ($reviewId === null) {
        $newReview = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()
        ];
        $reviewId = count($db['reviews']) + 1; // Simple ID generation - use a proper strategy in a real app.
        $db['reviews'][$reviewId] = $newReview;
    } else {
        // Update existing review
        $db['reviews'][$reviewId] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()
        ];
    }

    return ['success' => $reviewId];
}

/**
 * Get all reviews for a product
 *
 * @param int $productId
 * @return array
 */
function getReviewsForProduct(int $productId): array {
    $reviews = [];
    if(isset($db['reviews'][$productId])) {
        $reviews = $db['reviews'][$productId];
    }
    return $reviews;
}

/**
 * Delete a review by its ID.
 *
 * @param int $reviewId
 * @return array  An array with success or error message.
 */
function deleteReview(int $reviewId): array {
    if (!isset($db['reviews'][$reviewId])) {
        return ['error' => 'Review with ID ' . $reviewId . ' not found.'];
    }

    unset($db['reviews'][$reviewId]);
    return ['success' => true];
}



// Example Usage:

// Create a new review
$result = createOrUpdateReview(123, 'NewUser', 5, 'Amazing product!');
print_r($result);

// Get reviews for product 123
$reviews = getReviewsForProduct(123);
print_r($reviews);

// Update a review
$result = createOrUpdateReview(123, 'JohnDoe', 4, 'Updated comment', 1);
print_r($result);

//Delete a review
$result = deleteReview(1);
print_r($result);

// Get reviews for product 123
$reviews = getReviewsForProduct(123);
print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic validation and sanitization.
 *
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message': A message indicating the status of the review submission.
 *   - 'review':  The submitted review data if successful, or an empty array if not.
 */
function submit_review(string $user_name, string $review_text) {
  // Input validation - basic checks
  if (empty($user_name)) {
    return ['success' => false, 'message' => 'User name cannot be empty.', 'review' => []];
  }

  if (empty($review_text)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }

  // Sanitize input -  Important for security
  $user_name = htmlspecialchars($user_name);
  $review_text = htmlspecialchars($review_text);

  //  You might want to add more sophisticated sanitization here,
  //  such as stripping HTML tags or limiting review length.

  // Store the review (in this example, we'll just return it directly)
  //  In a real application, you would save this to a database.
  $review = [
    'user_name' => $user_name,
    'review_text' => $review_text,
    'timestamp' => time() // Add a timestamp for tracking
  ];

  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $review];
}



/**
 * Display Reviews (Example)
 * This function demonstrates how to display the reviews.
 *
 * @param array $reviews An array of review data (as returned by submit_review).
 */
function display_reviews(array $reviews) {
  echo "<h2>Reviews:</h2>";

  if (empty($reviews['review'])) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews['review'] as $review) {
    echo "<div class='review'>";
    echo "<strong>" . $review['user_name'] . "</strong> - ";
    echo "<p>" . $review['review_text'] . "</p>";
    echo "<p><em>Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "</em></p>";
    echo "</div>";
  }
}


// Example Usage:
$user_name = "John Doe";
$review_text = "This product is amazing!  I highly recommend it.";

$result = submit_review($user_name, $review_text);

if ($result['success']) {
  echo "<p>Review submitted successfully!</p>";
  display_reviews($result);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For production, 
 * you'd typically use a database.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating  The rating (e.g., 1-5 stars).
 * @param string $comment The user's review text.
 * 
 * @return array An array of reviews for the given product, or an empty array if no reviews exist.
 */
function create_user_review(string $productName, string $user_id, string $rating, string $comment) {
  // Sanitize input - VERY IMPORTANT for security!
  $productName = trim($productName);
  $user_id = trim($user_id);
  $rating = trim($rating);
  $comment = trim($comment);

  // Basic validation - Add more robust validation as needed
  if (empty($productName) || empty($user_id) || empty($rating) || empty($comment)) {
    return []; // Return empty array for invalid input
  }
  
  //  You'd typically validate $rating to ensure it's a valid number or a supported range
  //  For this simple example, we'll allow any string, but consider using a regex or numeric check
  
  // Create the review object
  $review = [
    'product_name' => $productName,
    'user_id' => $user_id,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp for sorting/filtering
  ];

  // Store the review -  In a real application, this would be a database insertion
  // For this example, we're using a simple array.
  $reviews[$productName][$user_id] = $review; 

  return $reviews;
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productName The name of the product.
 *
 * @return array An array of reviews for the product, or an empty array if no reviews exist.
 */
function get_reviews(string $productName) {
  $reviews = []; // Initialize an empty array

  // Get all reviews for the given product
  if (isset($reviews[$productName])) {
    $reviews[$productName] = array_map('unserialize', array_values($reviews[$productName]));
    return $reviews[$productName];
  } else {
    return [];
  }
}

/**
 * Updates an existing review
 *
 * @param string $productName The name of the product.
 * @param string $user_id The ID of the user.
 * @param string $rating  The new rating.
 * @param string $comment The new comment.
 *
 * @return bool True if the review was updated, false otherwise.
 */
function update_user_review(string $productName, string $user_id, string $rating, string $comment) {
    $reviews = get_reviews($productName); // Get the reviews
    if (empty($reviews)) {
        return false;
    }

    $review_to_update = null;
    foreach ($reviews as $key => $review) {
        if ($key == $user_id) {
            $review_to_update = $review;
            break;
        }
    }

    if ($review_to_update) {
        $review_to_update['rating'] = $rating;
        $review_to_update['comment'] = $comment;

        // Update in the in-memory array.  Again, use a database in a real application.
        $reviews[$productName][$user_id] = $review_to_update;

        return true;
    }
    return false;
}


/**
 * Deletes a user review.
 *
 * @param string $productName The name of the product.
 * @param string $user_id The ID of the user.
 *
 * @return bool True if the review was deleted, false otherwise.
 */
function delete_user_review(string $productName, string $user_id) {
    $reviews = get_reviews($productName);
    if (isset($reviews[$productName][$user_id])) {
        unset($reviews[$productName][$user_id]);
        return true;
    }
    return false;
}


// Example Usage:
// Initialize the reviews array
$reviews = [];

// Create a review
$new_review = create_user_review("Laptop X1", "user123", 5, "Great laptop! Fast and reliable.");
print_r($new_review);

// Get all reviews for "Laptop X1"
$all_reviews = get_reviews("Laptop X1");
print_r($all_reviews);

// Update the review
$update_success = update_user_review("Laptop X1", "user123", 4, "Still good, but battery could be better.");
if ($update_success) {
  echo "Review updated successfully.
";
} else {
  echo "Failed to update review.
";
}

// Get the updated reviews
$updated_reviews = get_reviews("Laptop X1");
print_r($updated_reviews);

// Delete the review
$delete_success = delete_user_review("Laptop X1", "user123");
if ($delete_success) {
  echo "Review deleted successfully.
";
} else {
  echo "Failed to delete review.
";
}

// Get the reviews after deletion
$reviews_after_delete = get_reviews("Laptop X1");
print_r($reviews_after_delete);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a formatted HTML list of user reviews.
 *
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - author: The name of the reviewer.
 *                       - rating: An integer representing the rating (e.g., 1-5).
 *                       - comment: The text of the review.
 * @param array $options (optional) An array of options to customize the output.
 *                       - maxRating:  The maximum rating value to display (default: 5).
 *                       - ratingDisplay: How to display the rating (e.g., 'stars', 'text').
 *                       - starIcon:  Path to the star icon image.
 *
 * @return string HTML string of the user reviews.
 */
function generateUserReviews(array $reviews, array $options = []) {
    // Default options
    $maxRating = $options['maxRating'] ?? 5;
    $ratingDisplay = $options['ratingDisplay'] ?? 'stars';
    $starIcon = $options['starIcon'] ?? '';

    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = '<ul>';
    foreach ($reviews as $review) {
        $html .= '<li>';
        $html .= '<div class="review">';

        $html .= '<div class="review-author">' . htmlspecialchars($review['author']) . '</div>';

        if ($ratingDisplay === 'stars') {
            $html .= '<div class="review-rating">';
            for ($i = 1; $i <= $maxRating; $i++) {
                if ($i <= $review['rating']) {
                    $html .= '<img src="' . $starIcon . '" alt="Star" width="20" height="20">';
                } else {
                    $html .= '&nbsp;'; // Add space for empty stars
                }
            }
            $html .= '</div>';
        } else {
            $html .= '<div class="review-rating">' . $review['rating'] . '/' . $maxRating . '</div>';
        }

        $html .= '<div class="review-comment">' . htmlspecialchars($review['comment']) . '</div>';
        $html .= '</div>';
        $html .= '</li>';
    }
    $html .= '</ul>';

    return $html;
}

// Example usage:
$reviews = [
    ['author' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!  Highly recommended.'],
    ['author' => 'Jane Smith', 'rating' => 5, 'comment' => 'Excellent value for money.'],
    ['author' => 'Peter Jones', 'rating' => 3, 'comment' => 'It was okay, but could be better.'],
];

// With default options
$reviewsHTML = generateUserReviews($reviews);
echo $reviewsHTML;

// With custom options
$customOptions = [
    'maxRating' => 10,
    'ratingDisplay' => 'text',
    'starIcon' => 'star.png' // Replace with the path to your star icon image
];
$customReviewsHTML = generateUserReviews($reviews, $customOptions);
echo "<hr>";
echo $customReviewsHTML;

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing review data (ID, product name, user, review, rating, date).
 *               Returns an empty array if an error occurs.
 */
function createReview(string $productName, string $reviewText, string $username, int $rating = 0) {
    // Input validation - Essential for security and data integrity
    if (empty($productName)) {
        error_log("Error: Product name cannot be empty.");
        return [];
    }

    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return [];
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return [];
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return [];
    }

    // Sanitize inputs to prevent XSS vulnerabilities.  Important!
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);
    $username = htmlspecialchars($username);

    // Generate a unique review ID (consider using a more robust method in production)
    $reviewId = uniqid();


    // Store the review (This would typically involve a database operation)
    // This is a placeholder for demonstration purposes.
    $review = [
        'id' => $reviewId,
        'product' => $productName,
        'user' => $username,
        'review' => $reviewText,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s')  // Get the current date and time
    ];

    // In a real application, you would save the $review array to a database.
    // Example:
    //  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
    //  $db->insertReview($review);


    return $review;
}


/**
 * Display Reviews (Example -  Should be adapted to your display method)
 *
 *  This is just an example function to show how to display the reviews.
 *  Adapt this to your specific display needs (e.g., HTML, JSON, API response)
 *
 * @param array $reviews An array of review objects.
 */
function displayReviews(array $reviews) {
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<h2>Reviews for " . end(array_keys($reviews)) . "</h2>"; //Display the product name from the key of the array.
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['user'] . ":</strong> " . $review['review'] . " (Rating: " . $review['rating'] . ") - " . $review['date'];
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Create a review
$newReview = createReview("Awesome Widget", "This widget is fantastic! I love it.", "JohnDoe", 5);

if (!empty($newReview)) {
    echo "<h2>New Review Created:</h2>";
    print_r($newReview); // For debugging - remove in production
}


// Create another review
$anotherReview = createReview("Great Service", "Excellent customer support.", "JaneSmith", 4);

if (!empty($anotherReview)) {
    displayReviews([$anotherReview]); //Pass the review to display.
}


?>


<?php

/**
 * User Review Function - PHP
 * 
 * This function allows you to store and retrieve user reviews for a given product.
 * It uses a simple file-based storage for demonstration purposes.  
 * 
 * **Important:** In a real-world application, you would likely use a 
 * database (MySQL, PostgreSQL, etc.) for storing data, 
 * rather than files.  This is purely for illustrative purposes.
 */

class ReviewManager {

  private $reviewsFile;

  public function __construct($reviewsFile) {
    $this->reviewsFile = $reviewsFile;
  }

  /**
   * Adds a new review to the database.
   *
   * @param int $productId The ID of the product the review is for.
   * @param string $username The username of the reviewer.
   * @param string $comment The review comment.
   * @return bool True if the review was added successfully, false otherwise.
   */
  public function addReview(int $productId, string $username, string $comment) {
    // Sanitize input (important!) -  Validate for security.
    $productId = (int)$productId;  //Cast to integer
    $username = trim($username);
    $comment = trim($comment);

    // Check if username and comment are empty.
    if (empty($username) || empty($comment)) {
      return false;
    }

    // Format the review data
    $reviewData = "{$productId}: {$username}: {$comment}
";

    // Check if the file exists. If not, create it.
    if (!file_exists($this->reviewsFile)) {
      if (!touch($this->reviewsFile)) {
        error_log("Failed to create reviews file: $this->reviewsFile"); //Log an error.
        return false;
      }
    }

    // Append the review to the file
    $result = file_put_contents($this->reviewsFile, $reviewData, FILE_APPEND);

    if ($result === false) {
      error_log("Failed to add review to file: $this->reviewsFile");
      return false;
    }

    return true;
  }


  /**
   * Retrieves all reviews for a product.
   *
   * @param int $productId The ID of the product to retrieve reviews for.
   * @return array An array of review strings, or an empty array if no reviews are found.
   */
  public function getReviews(int $productId) {
    $reviews = [];
    $productId = (int)$productId; //Cast to integer

    if (!file_exists($this->reviewsFile)) {
      return $reviews; // Return empty array if file doesn't exist
    }

    $contents = file($this->reviewsFile, FILE_IGNORE_NEW_LINES);

    if ($contents === false) {
      error_log("Failed to read reviews file: $this->reviewsFile");
      return $reviews;
    }

    foreach ($contents as $review) {
      if (strpos($review, ": {$productId}:") === 0) {
        $reviews[] = $review;
      }
    }

    return $reviews;
  }

  /**
   * Deletes all reviews for a product.
   *
   * @param int $productId The ID of the product to delete reviews for.
   */
  public function deleteReviews(int $productId) {
      $productId = (int)$productId;

      if (!file_exists($this->reviewsFile)) {
          return; // Nothing to delete
      }

      $reviews = $this->getReviews($productId);
      if ($reviews) {
          $deletedCount = 0;
          foreach ($reviews as $review) {
            $deleted = unlink($this->reviewsFile);  //Unlink each review.
            if ($deleted) {
                $deletedCount++;
            }
          }
          if($deletedCount > 0){
            // Re-create file after deleting
            touch($this->reviewsFile);
          }
      }
  }
}


// Example Usage:
$reviewsManager = new ReviewManager('reviews.txt');

// Add some reviews
$reviewsManager->addReview(123, 'John Doe', 'Great product! Highly recommended.');
$reviewsManager->addReview(123, 'Jane Smith', 'Excellent value for money.');
$reviewsManager->addReview(456, 'Peter Jones', 'Could be better.');


// Get reviews for product ID 123
$reviews = $reviewsManager->getReviews(123);

if (!empty($reviews)) {
  echo "Reviews for Product 123:
";
  foreach ($reviews as $review) {
    echo $review . "
";
  }
} else {
  echo "No reviews found for product 123.
";
}


// Delete reviews for product 123
$reviewsManager->deleteReviews(123);

//Try getting reviews for the product again.
$reviews = $reviewsManager->getReviews(123);
if (!empty($reviews)) {
  echo "Reviews for Product 123:
";
  foreach ($reviews as $review) {
    echo $review . "
";
  }
} else {
  echo "No reviews found for product 123.
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId    The ID of the user leaving the review.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Example method to display review info
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Date: " . $this->getDate() . "<br>";
    }
}


/**
 * User Review Review Function (Simple Example)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";

    foreach ($reviews as $review) {
        echo "<div class='review'>";
        $review->displayReview(); // Display the review information
        echo "</div><hr>";
    }
}



// Example Usage:

// Create some sample reviews
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(123, 789, 4, "Good value for the price.");
$review3 = new UserReview(456, 101, 3, "It was okay, but could be better.");

// Create an array of reviews
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and data sanitization.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $author The name of the reviewer.
 * @param string $comment The review text.
 * @param int $rating  (Optional) The rating given by the user (1-5).  Defaults to 0 if missing.
 * @return array|string  Returns an array on success (with review ID) or a string on failure.
 */
function storeUserReview(string $productId, string $author, string $comment, int $rating = 0) {
  // **Validation**
  if (empty($productId)) {
    return "Error: Product ID is required.";
  }
  if (empty($author)) {
    return "Error: Author name is required.";
  }
  if (empty($comment)) {
    return "Error: Review comment is required.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // **Sanitization (Basic - Enhance for Production)**
  $author = htmlspecialchars(trim($author)); // Protect against XSS
  $comment = htmlspecialchars(trim($comment));

  // **Data Handling -  Replace with Database Interaction in Production**
  // For this example, we'll use an array to simulate a database.
  $reviews = [
    "product123" => [
      "author" => "John Doe",
      "comment" => "Great product!",
      "rating" => 5,
      "review_id" => uniqid()  // Generate a unique review ID
    ],
    "product456" => [
      "author" => "Jane Smith",
      "comment" => "Could be better.",
      "rating" => 3,
      "review_id" => uniqid()
    ]
  ];

  // **Check if product exists in reviews array.**
  if (!isset($reviews[$productId])) {
    return "Error: Product not found or review already exists.";
  }


  // **Store the review (simulated database insertion)**
  $reviews[$productId]["author"] = $author;
  $reviews[$productId]["comment"] = $comment;
  $reviews[$productId]["rating"] = $rating;
  $reviews[$productId]["review_id"] = uniqid(); // Regenerate to avoid collisions

  return $reviews[$productId]["review_id"];
}

// **Example Usage**
$reviewId1 = storeUserReview("product123", "Alice Brown", "This is amazing!", 5);
echo "Review ID 1: " . $reviewId1 . "<br>";  // Output: Review ID 1: abcdefg...

$reviewId2 = storeUserReview("product456", "Bob Miller", "It's okay.", 3);
echo "Review ID 2: " . $reviewId2 . "<br>";

$reviewId3 = storeUserReview("product123", "Charlie Green", "Very good.", 4);
echo "Review ID 3: " . $reviewId3 . "<br>";

// Example of an error
$errorResult = storeUserReview("", "David Lee", "Invalid review", 2);
echo $errorResult . "<br>"; // Output: Error: Product ID is required.

$errorResult2 = storeUserReview("product123", "", "Invalid review", 2);
echo $errorResult2 . "<br>"; // Output: Error: Author name is required.
?>


<?php

/**
 * User Review Function
 * 
 * This function takes user input for a review and returns a formatted HTML string 
 * displaying the review with user information.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional)  The rating (1-5).  Defaults to 0.
 * @param string $timestamp (Optional)  The timestamp for the review. Defaults to current time.
 * @return string HTML formatted review
 */
function generateReviewHTML(string $username, string $reviewText, int $rating = 0, string $timestamp = null) {
  // Validate input (basic example, you can expand on this)
  if (empty($username) || empty($reviewText)) {
    return "<p>Error: Username and review text are required.</p>";
  }

  if ($rating < 1 || $rating > 5) {
    $rating = 0; // Default to 0 if invalid
  }

  // Format timestamp if provided
  $formattedTimestamp = $timestamp ? date('Y-m-d H:i:s') : date('Y-m-d H:i:s');

  // Build the HTML
  $html = "<div class='review'>";
  $html .= "<p><strong>User:</strong> " . htmlspecialchars($username) . "</p>";
  $html .= "<p><strong>Rating:</strong> " . $rating . " / 5</p>";
  $html .= "<p><strong>Review:</strong> " . htmlspecialchars($reviewText) . "</p>";
  $html .= "<p><strong>Timestamp:</strong> " . $formattedTimestamp . "</p>";
  $html .= "</div>";

  return $html;
}

// Example Usage:
$username = "JohnDoe";
$review = "This product is amazing!  I highly recommend it!";
$rating = 5;
$timestamp = time();  // Use current timestamp

$reviewHTML = generateReviewHTML($username, $review, $rating, $timestamp);
echo $reviewHTML;

// Another Example (without timestamp):
$username = "JaneSmith";
$review = "The product was okay, but could be better.";
$reviewHTML = generateReviewHTML($username, $review);
echo $reviewHTML;

?>


<?php

/**
 * User Review Function
 *
 * This function creates a user review object, validating the input
 * and providing a simple way to store review data.
 *
 * @param string $username  The name of the user leaving the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 *
 * @return array|false  An array containing the review data (username, rating, comment)
 *                     on success, or false on failure (e.g., invalid rating).
 */
function createReview(string $username, string $rating, string $comment): array|false
{
    // Input validation
    $rating = (int) $rating; // Convert rating to integer

    if ($rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    if (empty($username) || empty($comment)) {
        return false; // Username and comment are required
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment
    ];

    return $review;
}


// Example Usage:

// Successful review
$review1 = createReview("John Doe", 4, "Great product!  I highly recommend it.");
if ($review1) {
    echo "Review 1: " . json_encode($review1) . "
";
} else {
    echo "Review 1 failed to create.
";
}

// Failed review - Invalid rating
$review2 = createReview("Jane Smith", 6, "Good product.");
if ($review2) {
    echo "Review 2: " . json_encode($review2) . "
";
} else {
    echo "Review 2 failed to create (invalid rating).
";
}

// Failed review - Missing comment
$review3 = createReview("Peter Jones", 3, "");
if ($review3) {
    echo "Review 3: " . json_encode($review3) . "
";
} else {
    echo "Review 3 failed to create (missing comment).
";
}

// Successfully created review
$review4 = createReview("Alice Brown", 5, "Excellent service and fast delivery!");
if ($review4) {
    echo "Review 4: " . json_encode($review4) . "
";
} else {
    echo "Review 4 failed to create.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $username The user's name.
 * @return array An array containing all reviews, or an empty array if no reviews exist.
 */
function createAndDisplayReviews(string $productName, string $rating, string $comment, string $username): array
{
  // Input validation - Basic example, expand as needed
  if (empty($productName)) {
    return [];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return []; // Invalid rating
  }
  if (empty($comment)) {
    return [];
  }

  // Store reviews (In a real application, you'd use a database)
  $reviews = [];

  // Add the review to the array
  $reviews[] = [
    'product' => $productName,
    'rating' => (int)$rating, // Ensure rating is an integer
    'comment' => $comment,
    'username' => $username,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Return all reviews
  return $reviews;
}


/**
 * Displays existing reviews
 *
 *  This function takes an array of reviews and formats them for display.
 *
 *  @param array $reviews An array of reviews.
 *  @return string  HTML formatted output for displaying reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet!</p>";
    }

    $html = "<ul>";
    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . htmlspecialchars($review['username']) . ":</strong> "; //Use htmlspecialchars for safety
        $html .= "Rating: " . $review['rating'] . " - ";
        $html .= htmlspecialchars($review['comment']) . "<br>";
        $html .= "<em>" . date('Y-m-d H:i:s', strtotime($review['timestamp'])) . "</em>";
        $html .= "</li>";
    }
    $html .= "</ul>";

    return $html;
}


// Example Usage:

// Get the product name and review details
$product = "Awesome Widget";
$rate = 4;
$commentText = "This widget is amazing!  Highly recommended.";
$user = "John Doe";

// Create a review
$allReviews = createAndDisplayReviews($product, $rate, $commentText, $user);

// Display all reviews
echo displayReviews($allReviews);



?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality to store and display user reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment) {
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by a specific username.
     *
     * @param string $username The username to filter reviews by.
     * @return array An array of review objects for the specified username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void Displays reviews to the browser.
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->reviews as $review) {
            echo "<li><strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . "</li>";
        }
        echo "</ul>";
    }

}

// Example Usage:

// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("John Doe", "Great product, highly recommended!");
$reviewSystem->addReview("Jane Smith", "Could be better, some issues with the interface.");
$reviewSystem->addReview("Peter Jones", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific user
echo "<hr>";
echo "<h2>Reviews by John Doe:</h2>";
$johnReviews = $reviewSystem->getReviewsByUsername("John Doe");
if (!empty($johnReviews)) {
    foreach ($johnReviews as $review) {
        echo "<strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . "<br>";
    }
} else {
    echo "<p>No reviews found for John Doe.</p>";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function takes user input for a review and returns a formatted review string.
 *
 *  @param string $reviewerName - The name of the reviewer.
 *  @param string $rating - The rating given by the reviewer (e.g., 1-5).
 *  @param string $comment - The user's written comment for the review.
 *
 *  @return string - A formatted review string.  Returns an error message if input is invalid.
 */
function createReview(string $reviewerName, string $rating, string $comment)
{
  // Input validation - Basic example.  You should expand this.
  if (empty($reviewerName)) {
    return "Error: Reviewer name cannot be empty.";
  }
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }
  if (empty($comment)) {
    return "Error: Review comment cannot be empty.";
  }

  // Create the formatted review string
  $review = "Review by: " . $reviewerName . "
";
  $review .= "Rating: " . $rating . "/5
";
  $review .= "Comment: " . $comment . "
";
  $review .= "--- End of Review ---
";

  return $review;
}


// Example Usage:
$reviewer = "John Doe";
$rate = 4;
$feedback = "This product is amazing!  I highly recommend it.";

$review_text = createReview($reviewer, $rate, $feedback);
echo $review_text . "
";

// Example with invalid input:
$invalidReview = createReview("", 6, "Bad review!");
echo $invalidReview . "
";

$anotherInvalid = createReview("Jane", "2", "");
echo $anotherInvalid . "
";


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews     (Optional) An array to store all reviews.
 * @return array           The updated reviews array.
 */
function addOrDisplayReview(string $productId, string $username, string $reviewText, array &$reviews = []) {
  // Validation (Simple - could be expanded for more robust validation)
  if (empty($username) || empty($reviewText)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time() // Optional: add timestamp for ordering
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Display Reviews
 *
 * This function displays a list of reviews for a given product ID.
 *
 * @param array $reviews An array of review objects.
 * @param string $productId The ID of the product to display reviews for.
 *
 */
function displayReviews(array $reviews, string $productId) {
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; // Escape for security
    echo "<strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "<br>";
    echo "<strong>Date:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
// Initialize the reviews array (optional, but good for demonstration)
$productReviews = [];

// Add some reviews
$productReviews = addOrDisplayReview("product123", "John Doe", "Great product!  Highly recommended.", $productReviews);
$productReviews = addOrDisplayReview("product123", "Jane Smith", "Good value for money.", $productReviews);
$productReviews = addOrDisplayReview("product456", "Peter Jones", "Disappointed with the quality.", $productReviews);

// Display the reviews
displayReviews($productReviews, "product123");

// Display the reviews for a different product
displayReviews($productReviews, "product456");

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and error handling.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $reviewerName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating (e.g., 1-5). Defaults to 0.
 * @param string $dbConnection (optional)  A connection object to your database.  If not provided, a default is used.
 * @return array An array containing:
 *   - 'success': True if the review was saved successfully, false otherwise.
 *   - 'message':  A message indicating the result of the operation.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 */
function saveUserReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0, $dbConnection = null)
{
    $success = false;
    $message = '';
    $reviewId = null;

    // Database connection - Use a default if not provided
    if ($dbConnection === null) {
        // Replace this with your actual database connection setup
        $dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    try {
        // Validate inputs (Important!)
        if (empty($reviewerName)) {
            return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'reviewId' => null];
        }
        if (empty($reviewText)) {
            return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
        }

        // Sanitize inputs (important to prevent SQL injection!)
        $reviewerName = trim($reviewerName);
        $reviewText = trim($reviewText);

        // Escape data for safe database insertion
        $stmt = $dbConnection->prepare("INSERT INTO reviews (productId, reviewerName, reviewText, rating) VALUES (:productId, :reviewerName, :reviewText, :rating)");
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewerName', $reviewerName);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();

        $reviewId = $dbConnection->lastInsertId();  // Get the ID of the newly inserted row

        $success = true;
        $message = 'Review saved successfully.';

    } catch (PDOException $e) {
        $message = 'Error saving review: ' . $e->getMessage();
        error_log($e->getMessage()); // Log the error for debugging
    }

    return ['success' => $success, 'message' => $message, 'reviewId' => $reviewId];
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @param PDO $dbConnection  A PDO database connection object.
 */
function displayUserReviews(string $productId, PDO $dbConnection)
{
    // Retrieve reviews for the product
    $stmt = $dbConnection->prepare("SELECT id, reviewerName, reviewText, rating FROM reviews WHERE productId = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<h2>Reviews for Product: " . $productId . "</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['reviewerName'] . ":</strong> " . htmlspecialchars($review['reviewText']) . " (Rating: " . $review['rating'] . ")";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example usage (in a web environment, you would typically call these functions
// in response to a form submission and then render the results)

// Simulate a database connection (replace with your actual connection)
$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");


// Example 1: Save a review
$result = saveUserReview("product123", "John Doe", "This is a great product!", 5);
if ($result['success']) {
    echo "<p>Review saved successfully. Review ID: " . $result['reviewId'] . "</p>";
} else {
    echo "<p>Error saving review: " . $result['message'] . "</p>";
}


// Example 2: Display reviews for a product
displayUserReviews("product123", $dbConnection);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the user writing the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete.  If not provided, a new review is created.
 *
 * @return array An array containing:
 *   - 'success':  True if the operation was successful, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review': (Only on successful creation or update) The newly created or updated review object.
 *   - 'errors': An array of errors encountered during the operation.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, int $reviewId = 0) {
    $success = false;
    $message = '';
    $review = null;
    $errors = [];

    // Validate input (basic example - add more robust validation as needed)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        $errors['error'] = 'All fields are required.';
        return ['success' => false, 'message' => 'Invalid input data.', 'errors' => $errors];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        $errors['error'] = 'Rating must be a number between 1 and 5.';
    }


    // 1. Create a new review
    if ($reviewId === 0) {
        // Simulate a database insertion
        $newReview = [
            'product_id' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => date('Y-m-d H:i:s')
        ];

        //Simulate database insertion
        // $dbResult = insertReviewIntoDatabase($newReview);
        // if ($dbResult === true) {
        //    $reviewId = $dbResult; // Get the ID from the database
        //    $success = true;
        //    $review = $newReview;
        // } else {
        //    $errors['error'] = 'Failed to create review in database.';
        // }

        $reviewId = time(); //Simulate generating a review ID
        $success = true;
        $review = $newReview;
    }
    // 2. Update an existing review
    else {
        //Simulate database update
        // $dbResult = updateReviewInDatabase($reviewId, $newReview);
        // if ($dbResult === true) {
        //     $success = true;
        //     $review = $newReview;
        // } else {
        //    $errors['error'] = 'Failed to update review in database.';
        // }

    }

    return ['success' => $success, 'message' => $message, 'review' => $review, 'errors' => $errors];
}


/**
 * Dummy Functions (Replace with actual database interaction)
 */
function insertReviewIntoDatabase(array $review) {
    // Replace this with your actual database insertion logic.
    // This is just a placeholder for demonstration.
    return true; // Simulate a successful insertion
}

function updateReviewInDatabase(int $reviewId, array $review) {
    // Replace this with your actual database update logic.
    // This is just a placeholder for demonstration.
    return true; // Simulate a successful update
}

// Example Usage:
// Create a new review
$result = createOrUpdateReview('product123', 'JohnDoe', '4', 'Great product!');
print_r($result);

// Update an existing review (assuming $reviewId is valid)
$result = createOrUpdateReview('product123', 'JaneSmith', '5', 'Excellent value!', 1);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $user_id The unique identifier of the user.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Ensure validation.
 * @param string $comment The user's comment/review.
 * @param string $db_connection  A connection object to your database.
 *
 * @return bool True on successful save, false on failure.
 */
function saveUserReview(string $product_id, string $user_id, string $rating, string $comment, $db_connection) {
    // Validate input - VERY IMPORTANT!
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Error: Missing required review fields.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Invalid rating format.  Must be a number between 1 and 5.");
        return false;
    }


    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:product_id, :user_id, :rating, :comment)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing statement: " . $db_connection->error);
        return false;
    }


    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


// Example Usage (Illustrative - Replace with your actual database setup)
// -----------------------------------------------------------------

// Assuming you have a database connection established as $db_connection

// Example review data
$product_id = "P123";
$user_id = "U456";
$rating = 4;
$comment = "Great product!  Works as advertised.";

// Save the review
$success = saveUserReview($product_id, $user_id, $rating, $comment, $db_connection);

if ($success) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews for a product or item.
 *
 * @param string $productId The ID of the product or item the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating  The rating given for the product (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, an ID will be generated.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, False otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 */
function createReview(string $productId, string $userEmail, string $reviewText, int $rating, int $userId = null): array
{
    // Validation (Example - you should expand this)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($userEmail)) {
        return ['success' => false, 'message' => 'User email cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviewId' => null];
    }

    // Database interaction (Replace with your actual database connection)
    try {
        // Simulate database connection and insertion
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your credentials
        $stmt = $db->prepare("INSERT INTO reviews (productId, userEmail, reviewText, rating, userId) VALUES (?, ?, ?, ?, ?)");
        $stmt->execute([$productId, $userEmail, $reviewText, $rating, $userId]);
        $reviewId = $db->lastInsertId();

        return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'reviewId' => null];
    }
}


// Example Usage:
$productId = '123';
$userEmail = 'test@example.com';
$reviewText = 'This is a fantastic product!';
$rating = 4;

$result = createReview($productId, $userEmail, $reviewText, $rating);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview {

    /**
     * @var array  An array to store the review data.
     */
    private $review = [];

    /**
     * Sets the review data.
     *
     * @param int   $userId     The ID of the user submitting the review.
     * @param int   $productId The ID of the product being reviewed.
     * @param string $rating    The rating given (e.g., 1-5).
     * @param string $comment   The user's comments.
     * @return bool True on success, false on failure.
     */
    public function setReview(int $userId, int $productId, string $rating, string $comment) {
        // Validate input - crucial for security!
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        if (empty($comment)) {
            return false; // Require a comment
        }

        $this->review = [
            'userId'    => $userId,
            'productId' => $productId,
            'rating'    => $rating,
            'comment'   => $comment,
            'date'      => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

        return true;
    }

    /**
     * Retrieves a review based on the product ID.
     *
     * @param int $productId The ID of the product.
     * @return array|null The review data if found, null otherwise.
     */
    public function getReviewByProductId(int $productId) {
        // Placeholder - In a real application, you'd query a database
        //  or use other persistent storage. This simulates a lookup.
        $reviews = [
            [
                'userId'    => 123,
                'productId' => 456,
                'rating'    => 4,
                'comment'   => 'Great product!',
                'date'      => date('Y-m-d H:i:s')
            ],
            [
                'userId'    => 456,
                'productId' => 456,
                'rating'    => 5,
                'comment'   => 'Excellent value for money.',
                'date'      => date('Y-m-d H:i:s')
            ]
        ];

        foreach ($reviews as $review) {
            if ($review['productId'] === $productId) {
                return $review;
            }
        }

        return null;
    }


    /**
     * Displays the review data.  Useful for debugging or showing reviews to the user.
     *
     * @return void
     */
    public function displayReview() {
        echo "<pre>";
        print_r($this->review);
        echo "</pre>";
    }
}

// Example Usage:

// Create a new review object
$review = new UserReview();

// Set a review
if ($review->setReview(123, 456, 4, 'This is a fantastic product!')) {
    echo "Review submitted successfully!
";
    $review->displayReview();

    // Get the review for product ID 456
    $review_data = $review->getReviewByProductId(456);

    if ($review_data) {
        echo "Review for product 456:
";
        $review->displayReview();
    } else {
        echo "No review found for product 456.
";
    }
} else {
    echo "Failed to submit review.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with basic details.
 *
 * @param string $user_id  The ID of the user submitting the review.
 * @param string $product_id The ID of the product the review is for.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $user_id, string $product_id, string $rating, string $comment)
{
  // Validate inputs - Important for security and data integrity
  if (empty($user_id) || empty($product_id) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required review fields."); // Log for debugging
    return false;
  }

  // Validate rating (ensure it's a number and within a reasonable range)
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating provided.");
    return false;
  }

  //  *** Database Interaction - Replace with your actual database code ***
  try {
    // Example using a (simplified) database connection
    //  (This is illustrative, adapt to your database setup!)
    $db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $result = $stmt->execute();

    if ($result) {
      //  You might want to return the ID of the newly inserted review
      return true;
    } else {
      // Log errors to help debug database issues
      error_log("Error: Failed to insert review into database: " . print_r($stmt->errorInfo(), true));
      return false;
    }

  } catch (PDOException $e) {
    // Handle database connection errors gracefully
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}


// *** Example Usage ***
//  (For demonstration purposes only - don't execute this directly in a web environment)
$userId = "user123";
$productId = "product456";
$rating = 4;
$comment = "Great product, highly recommended!";

if (storeUserReview($userId, $productId, $rating, $comment)) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews
 * for a specific item (e.g., a product, movie, restaurant).
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $item_id The unique ID of the item.
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - 'user': User's name or ID.
 *                       - 'rating':  Integer (1-5).
 *                       - 'comment':  User's review comment.
 * @return array  An array of review objects to display.
 */
function create_review_function(string $item_name, string $item_id, array $reviews = []) {

  // Validation (Simple example - can be expanded)
  if (empty($item_name) || empty($item_id)) {
    return ['error' => 'Item name and ID are required.'];
  }

  // Add the new review (example - you'll need to adapt this to your database)
  $new_review = [
    'user' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Works as expected.',
    'item_id' => $item_id // Important: Link the review to the item
  ];

  $reviews[] = $new_review;

  return $reviews;
}

// --- Example Usage ---

// 1. Create a new review
$item_name = 'Awesome Gadget';
$item_id = 'GADGET001';
$reviews = create_review_function($item_name, $item_id);

if (isset($reviews['error'])) {
    echo "<p style='color:red;'>Error: " . $reviews['error'] . "</p>";
} else {
    // 2. Display the reviews
    echo "<h2>Reviews for " . $item_name . " (ID: " . $item_id . ")</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>User:</strong> " . $review['user'] . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . $review['comment'] . "</li>";
        }
        echo "</ul>";
    }
}


// ---  More Advanced Features to Consider ---

// 1. Database Integration:
//    - Replace the simple review creation with code to insert the review
//      into a database table (e.g., 'reviews').
//    - Use prepared statements to prevent SQL injection.

// 2. Sorting/Filtering:
//    - Add options to sort reviews by rating, date, etc.
//    - Allow filtering reviews based on rating ranges or keywords.

// 3. User Authentication:
//    -  Require users to be logged in before submitting a review.  This is crucial
//       for security and to track who wrote which review.

// 4. Validation:
//   - More robust validation (e.g., checking the rating is within the 1-5 range,
//     validating the comment for offensive content).

// 5.  Pagination: If you have many reviews, implement pagination to
//     display them in manageable chunks.

// 6.  Error Handling: Improve error handling (e.g., logging errors instead of just
//     displaying them to the user).
?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to manage user reviews for a product.
 */
class Review
{
    /**
     * @var array Reviews stored for a product.
     */
    private $reviews = [];

    /**
     * Adds a new review to the review list.
     *
     * @param string $user  The username of the reviewer.
     * @param string $rating The rating provided by the user (e.g., 1-5 stars).
     * @param string $comment The user's comment about the product.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user, string $rating, string $comment)
    {
        // Validation (you can expand this with more validation)
        if (!preg_match('/^[a-zA-Z0-9 ]+$/', $user)) {
            return false; // Invalid username
        }
        if (!preg_match('/^[1-5]$/', $rating)) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'user' => $user,
            'rating' => (int)$rating, // Convert rating to integer
            'comment' => $comment
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single review by user.
     *
     * @param string $user The username of the reviewer.
     * @return array|null An array representing the review, or null if not found.
     */
    public function getReviewByUser(string $user)
    {
        foreach ($this->reviews as $review) {
            if ($review['user'] === $user) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Calculates the average rating of all reviews.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float
    {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return (float)($totalRating / count($this->reviews));
    }
}


// Example Usage:
$reviewManager = new Review();

// Add some reviews
$reviewManager->addReview('John Doe', 5, 'Excellent product, highly recommended!');
$reviewManager->addReview('Jane Smith', 4, 'Good product, works as expected.');
$reviewManager->addReview('Peter Jones', 3, 'Average product, could be better.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a single review
$johnsReview = $reviewManager->getReviewByUser('John Doe');
echo "
John's Review:
";
print_r($johnsReview);

// Get the average rating
$averageRating = $reviewManager->getAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews yet') . "
";
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $review_id (Optional) - Unique identifier for the review.
     * @param int $user_id   The ID of the user submitting the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating     The rating (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @param string $date     The date of the review (YYYY-MM-DD format recommended).
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment, $date) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->review_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (For updating reviews - use with caution!)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }
}

/**
 * User Review Review Function
 */
/**
 *  This function takes a UserReview object and provides a basic review string.
 *  You can customize this to generate more sophisticated output.
 *
 * @param UserReview $review The UserReview object to review.
 * @return string A formatted review string.
 */
function reviewUserReview(UserReview $review) {
    $userId = $review->getUserId();
    $productId = $review->getProductId();
    $rating = $review->getRating();
    $comment = $review->getComment();
    $date = $review->getDate();

    return "Review ID: " . ($review->getReviewId() ? $review->getReviewId() : "N/A") .
           "
User ID: " . $userId .
           "
Product ID: " . $productId .
           "
Rating: " . $rating .
           "
Comment: " . $comment .
           "
Date: " . $date;
}

// Example Usage:
$review1 = new UserReview(123, 101, 202, 5, "Great product!", "2023-10-27");
$review2 = new UserReview(456, 102, 201, 3, "It's okay.", "2023-10-26");

echo reviewUserReview($review1) . "

";
echo reviewUserReview($review2) . "

";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It's a simplified example and doesn't include full database interaction or
 * robust error handling.  You'll need to adapt it to your specific database
 * and security requirements.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param int    $rating  The rating given by the user (e.g., 1-5).
 * @param int    $userId  (Optional) The ID of the user. If not provided, a new user is created.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was created/updated successfully, false otherwise.
 *               - 'message':  A message indicating the status of the operation.
 *               - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(string $productId, string $name, string $comment, int $rating, int $userId = null): array
{
    // Validate input (Basic - enhance this for production)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID is required.', 'review' => null];
    }
    if (empty($name)) {
        return ['success' => false, 'message' => 'User name is required.', 'review' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Review comment is required.', 'review' => null];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'review' => null];
    }
    if (!is_numeric($userId)) {
        $userId = null; // Fallback to create a new user
    }
    // ------------------ Database Interaction (Simulated for this example) ------------------
    // In a real application, you'd replace this with your actual database queries.

    // Simulate a user ID (if not provided)
    if ($userId == null) {
        $userId = uniqid(); // Generate a unique ID
    }


    // Simulate a review object
    $review = [
        'productId' => $productId,
        'userId' => $userId,
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'dateCreated' => date('Y-m-d H:i:s')
    ];

    // Simulate successful operation
    return ['success' => true, 'message' => 'Review created/updated successfully.', 'review' => $review];
}


// ------------------ Example Usage ------------------

// Create a new review
$result = createOrUpdateReview('product123', 'John Doe', 'Great product!', 5);
print_r($result);

// Update an existing review (simulated)
$result = createOrUpdateReview('product123', 'Jane Smith', 'Improved version!', 4, 123);
print_r($result);


// Test cases - Demonstrate error handling
$result = createOrUpdateReview('', 'User', 'Review', 3);
print_r($result);

$result = createOrUpdateReview('product456', 'User', '', 2);
print_r($result);

$result = createOrUpdateReview('product789', 'User', 'Review', 6);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations with error handling and validation.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The review comment.
 * @param int $reviewId (optional) The ID of the review to update. If not provided, a new review is created.
 * @return array Returns an array containing the response data (success/failure message, updated review data, or error message).
 */
function create_review(string $productId, string $username, string $rating, string $comment, int $reviewId = 0)
{
    // Validate inputs
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.'];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.'];
    }
    if (empty($rating)) {
        return ['success' => false, 'message' => 'Rating cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.'];
    }

    // ---  Simulated Database Interaction (Replace with your actual database logic) ---
    // For demonstration purposes, we'll use an in-memory array.
    $reviews = [];  // Initialize the reviews array

    // Check if the review with the given ID already exists
    if ($reviewId > 0) {
        if (isset($reviews[$reviewId])) {
            // Update existing review
            $reviews[$reviewId] = [
                'product_id' => $productId,
                'username' => $username,
                'rating' => $rating,
                'comment' => $comment,
                'created_at' => time() // Add timestamp for creation
            ];
        } else {
            return ['success' => false, 'message' => 'Review not found with ID: ' . $reviewId];
        }
    } else {
        // Create a new review
        $new_review_id = count($reviews) + 1;
        $review = [
            'product_id' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()  // Add timestamp for creation
        ];
        $reviews[$new_review_id] = $review;
    }

    // --- End Simulated Database Interaction ---

    return ['success' => true, 'message' => 'Review created successfully.', 'review' => $reviews[$new_review_id] ];
}


// Example Usage:
$response = create_review('123', 'JohnDoe', 4, 'Great product!', 1);
print_r($response);
echo "<br>";

$response = create_review('456', 'JaneSmith', 5, 'Excellent value!', 2);
print_r($response);
echo "<br>";

$response = create_review('789', 'PeterJones', 3, 'Okay', 3);
print_r($response);
echo "<br>";

$response = create_review('101', 'AliceBrown', 2, 'Not impressed', 4); // Simulate updating a review
print_r($response);
echo "<br>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array $dbConnection  A database connection object. (Optional, for database interaction)
 *
 * @return array An array containing the results:
 *   - 'success': True if the operation was successful, False otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'data': The review data (if successful).
 */
function createReview(
    string $productId,
    string $userEmail,
    string $rating,
    string $comment,
    array $dbConnection = null // Allow passing in a database connection
) {
    // Basic Validation
    if (empty($productId) || empty($userEmail) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'All fields are required.',
            'data' => null,
        ];
    }

    if (!filter_var($userEmail, FILTER_VALIDATE_EMAIL)) {
        return [
            'success' => false,
            'message' => 'Invalid email format.',
            'data' => null,
        ];
    }

    if (!preg_match('/^[1-5]+$/', $rating)) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'data' => null,
        ];
    }

    // Example: Storing in a database (adjust to your database schema)
    try {
        $stmt = $dbConnection->prepare(
            "INSERT INTO reviews (product_id, user_email, rating, comment, created_at)
             VALUES (:product_id, :user_email, :rating, :comment, NOW())"
        );

        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_email', $userEmail);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();
        $reviewId = $stmt->lastInsertId();

        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'data' => [
                'review_id' => $reviewId,
                'product_id' => $productId,
                'user_email' => $userEmail,
                'rating' => $rating,
                'comment' => $comment,
                'created_at' => date('Y-m-d H:i:s'), //format for display
            ],
        ];

    } catch (Exception $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage(),
            'data' => null,
        ];
    }
}


// Example Usage (Simulated Database Connection)
// This example assumes you have a database connection object named $dbConnection
// In a real application, you would obtain this connection from your framework or connection library.

//Simulated database connection for testing
//$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

// Example 1: Successful Review Creation
$reviewData = createReview(
    '123',
    'test@example.com',
    '4',
    'Great product!',
    $dbConnection // Pass the database connection
);

print_r($reviewData);

// Example 2: Error - Invalid Email Format
$reviewData = createReview(
    '456',
    'invalid-email',
    '3',
    'Bad review',
    $dbConnection
);

print_r($reviewData);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides a simple interface for storing and managing user feedback.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's comment/feedback.
 *
 * @return array An array containing the result of the operation:
 *               - 'success': true if the review was created/updated successfully, false otherwise.
 *               - 'message': A descriptive message about the result.
 *               - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment) {
    // Validate input -  Important for security and data integrity
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
            'review' => null,
        ];
    }

    // Validate rating to ensure it's numeric and within a valid range
    if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
            'review' => null,
        ];
    }


    // ***  Simulating Database Interaction - Replace with your actual database code ***
    // This section simulates creating a review in a database.
    // In a real application, you'd use a database query (e.g., using PDO, MySQLi).
    $review = [
        'product_id' => $productId,
        'user_id' => $userId,
        'rating' => intval($rating), // Ensure integer rating
        'comment' => $comment,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    // **  Store the review (simulated)  **
    // In a real app, you'd save this to a database.
    // For example:
    // $db->insert('reviews', $review);

    // **  Simulated Success  **
    return [
        'success' => true,
        'message' => 'Review created successfully!',
        'review' => $review,
    ];
}


// --- Example Usage ---
// $result = createOrUpdateReview('product123', 'user456', 4, 'Great product, highly recommended!');
//
// if ($result['success']) {
//     echo "Review created: " . json_encode($result['review']) . "
";
// } else {
//     echo "Error creating review: " . $result['message'] . "
";
// }

// Example with invalid rating:
// $result = createOrUpdateReview('product123', 'user456', 6, 'Excellent!');
// if ($result['success']) {
//     echo "Review created: " . json_encode($result['review']) . "
";
// } else {
//     echo "Error creating review: " . $result['message'] . "
";
// }

?>


<?php

try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $result = createOrUpdateReview('product123', 'user456', 4, 'Great product!');

    if ($result['success']) {
        echo "Review created: " . json_encode($result['review']) . "
";
    } else {
        echo "Error creating review: " . $result['message'] . "
";
    }

} catch (PDOException $e) {
    echo "Database error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    /**
     * @var int  The ID of the reviewed item (e.g., product, movie, etc.)
     */
    private $itemId;

    /**
     * @var string The user's review text
     */
    private $reviewText;

    /**
     * @var int  The rating given (e.g., 1-5 stars)
     */
    private $rating;

    /**
     * @var string The user's name
     */
    private $userName;

    /**
     * @var DateTime  Timestamp of when the review was created.
     */
    private $createdAt;

    /**
     * Constructor
     *
     * @param int $itemId The ID of the reviewed item.
     * @param string $reviewText The user's review text.
     * @param int $rating The rating given (1-5).
     * @param string $userName The user's name.
     */
    public function __construct(int $itemId, string $reviewText, int $rating, string $userName) {
        $this->itemId = $itemId;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
        $this->userName = $userName;
        $this->createdAt = new DateTime(); // Use DateTime class for accurate timestamps
    }

    /**
     * Getters
     *
     * @return int
     */
    public function getItemId(): int {
        return $this->itemId;
    }

    /**
     * Get the review text.
     *
     * @return string
     */
    public function getReviewText(): string {
        return $this->reviewText;
    }

    /**
     * Get the rating.
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get the user's name.
     *
     * @return string
     */
    public function getUserName(): string {
        return $this->userName;
    }

    /**
     * Get the creation timestamp.
     *
     * @return DateTime
     */
    public function getCreatedAt(): DateTime {
        return $this->createdAt;
    }

    /**
     * Display the review as a formatted string.
     *
     * @return string
     */
    public function __toString(): string {
        return sprintf(
            "Review by: %s
" .
            "Item ID: %d
" .
            "Rating: %d
" .
            "Review: %s
" .
            "Created at: %s",
            $this->userName,
            $this->itemId,
            $this->rating,
            $this->reviewText,
            $this->createdAt->format('Y-m-d H:i:s') // Format the timestamp
        );
    }
}


/**
 * User Review Review Function (Example)
 */
function reviewUser(UserReview $review) {
    echo $review . "
";
}


// Example Usage:
$productReview = new UserReview(123, "Great product!  I love it!", 5, "John Doe");
reviewUser($productReview);


$movieReview = new UserReview(456, "A fantastic movie, highly recommended!", 4, "Jane Smith");
reviewUser($movieReview);


// Demonstrating Getters
echo "
Item ID: " . $productReview->getItemId() . "
";
echo "Rating: " . $productReview->getRating() . "
";


?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and display reviews for a product or service.
 *
 *  @param string $productName The name of the product or service being reviewed.
 *  @param string $reviewText The text of the review submitted by the user.
 *  @param string $username The username of the user submitting the review.
 *  @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 *  @return array An array containing the review data or an error message if the input is invalid.
 */
function createReview(string $productName, string $reviewText, string $username, int $rating = 0) {
    // Input validation - essential for security and data integrity
    if (empty($productName)) {
        return ["error" => "Product name cannot be empty."];
    }
    if (empty($reviewText)) {
        return ["error" => "Review text cannot be empty."];
    }
    if (empty($username)) {
        return ["error" => "Username cannot be empty."];
    }
    if ($rating < 1 || $rating > 5) {
        return ["error" => "Rating must be between 1 and 5."];
    }

    //  Construct the review data - you would typically store this in a database
    $reviewData = [
        "product_name" => $productName,
        "review_text" => $reviewText,
        "username" => $username,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s") // Add a timestamp for tracking
    ];

    return $reviewData;
}

/**
 *  Display Reviews Function
 *
 *  This function takes an array of review data and displays them in an HTML format.
 *
 *  @param array $reviews An array of review data (as returned by createReview).
 *
 *  @return string  HTML string to display the reviews, or a message if no reviews exist.
 */
function displayReviews(array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for " . $reviews[0]["product_name"] . "</h2>"; // Display product name
    $html .= "<ul>";

    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . $review["username"] . ":</strong> " . $review["review_text"] . " (" . $review["rating"] . "/5)";
        $html .= "<br>";
        $html .= "<small><em>" . $review["timestamp"] . "</em></small>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    return $html;
}


// Example Usage:
// 1. Create a review:
$reviewData = createReview("Awesome Widget", "This widget is fantastic! It does everything I need.", "john_doe", 5);

if (isset($reviewData["error"])) {
    echo "<p>Error: " . $reviewData["error"] . "</p>";
} else {
    // 2. Display the review:
    $reviews = [
        $reviewData,
        ["product_name" => "Another Product", "review_text" => "Good product!", "username" => "jane_doe", "rating" => 4, "timestamp" => date("Y-m-d H:i:s")],
        ["product_name" => "Yet Another Product", "review_text" => "Not bad.", "username" => "peter_pan", "rating" => 3, "timestamp" => date("Y-m-d H:i:s")]
    ];

    echo displayReviews($reviews);
}

?>


<?php

/**
 * User Review Function - Allows storing and retrieving user reviews.
 */
class UserReview {

  private $db_host = 'localhost';
  private $db_name = 'your_database_name'; // Replace with your database name
  private $db_user = 'your_username'; // Replace with your username
  private $db_password = 'your_password'; // Replace with your password

  private $conn = null;

  /**
   * Constructor: Establishes the database connection.
   */
  public function __construct() {
    try {
      $this->conn = new PDO("mysql:host=$this->db_host;dbname=$this->db_name", $this->db_user, $this->db_password);
      $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      echo "Database connection failed: " . $e->getMessage();
      die(); // Stop execution if the connection fails
    }
  }

  /**
   * Adds a new review to the database.
   *
   * @param string $user_id The ID of the user submitting the review.
   * @param string $review_text The text of the review.
   * @return bool True on success, false on failure.
   */
  public function addReview(string $user_id, string $review_text) {
    try {
      $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, review_text) VALUES (:user_id, :review_text)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':review_text', $review_text);
      $result = $stmt->execute();
      return $result;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Retrieves all reviews from the database.
   *
   * @return array An array of review objects, or an empty array if none are found.
   */
  public function getAllReviews() {
    $reviews = [];
    try {
      $stmt = $this->conn->prepare("SELECT id, user_id, review_text, created_at FROM reviews");
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

      if ($result) {
        foreach ($result as $row) {
          $reviews[] = new ReviewObject($row['id'], $row['user_id'], $row['review_text'], $row['created_at']);
        }
      }
      return $reviews;
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return [];
    }
  }

  /**
   * Retrieves a specific review by ID.
   *
   * @param int $id The ID of the review to retrieve.
   * @return ReviewObject|null A ReviewObject if found, null otherwise.
   */
  public function getReviewById(int $id) {
    try {
      $stmt = $this->conn->prepare("SELECT id, user_id, review_text, created_at FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      $result = $stmt->fetch(PDO::FETCH_ASSOC);

      if ($result) {
        return new ReviewObject($result['id'], $result['user_id'], $result['review_text'], $result['created_at']);
      } else {
        return null;
      }
    } catch (PDOException $e) {
      echo "Error retrieving review by ID: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Deletes a review from the database.
   *
   * @param int $id The ID of the review to delete.
   * @return bool True on success, false on failure.
   */
  public function deleteReview(int $id) {
    try {
      $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $result = $stmt->execute();
      return $result;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}

// Custom Review Object (to represent a review)
class ReviewObject {
  public int $id;
  public string $user_id;
  public string $review_text;
  public string $created_at; // Timestamp for when the review was created

  public function __construct(int $id, string $user_id, string $review_text, string $created_at) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->review_text = $review_text;
    $this->created_at = $created_at;
  }
}


// Example Usage:
// Create an instance of the Review class
$reviewSystem = new UserReview();

// Add a review
$reviewSystem->addReview('user123', 'This is a fantastic product!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
  echo "User ID: " . $review->user_id . "<br>";
  echo "Review: " . $review->review_text . "<br>";
  echo "Created At: " . $review->created_at . "<br><br>";
}

// Get a specific review
$specificReview = $reviewSystem->getReviewById(1);  // Assuming ID 1 exists

if ($specificReview) {
    echo "Specific Review: " . $specificReview->review_text . "<br>";
} else {
    echo "Review not found.";
}

// Delete a review (assuming ID 1 exists)
$reviewSystem->deleteReview(1);
?>


<?php

/**
 * Function to add, display, and manage user reviews.
 *
 * This function provides a basic framework for handling user reviews.
 * It includes functions for:
 *   - Adding a new review.
 *   - Displaying all reviews.
 *   - Displaying a single review.
 *   - Potentially adding more sophisticated features like rating, etc.
 *
 * NOTE: This is a simplified example and does not include database integration.
 *       You'll need to adapt it to your specific database and application needs.
 */

class ReviewManager {

    private $reviews = [];
    private $reviewIdCounter = 1; // For generating unique IDs

    /**
     * Adds a new review to the system.
     *
     * @param string $reviewerName The name of the reviewer.
     * @param string $reviewText The content of the review.
     *
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview($reviewerName, $reviewText) {
        $reviewId = $this->reviewIdCounter++;
        $review = [
            'id' => $reviewId,
            'reviewerName' => $reviewerName,
            'reviewText' => $reviewText,
            'dateCreated' => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

        $this->reviews[] = $review;
        return $reviewId;
    }

    /**
     * Displays all reviews.
     */
    public function displayAllReviews() {
        echo "<h2>All Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->reviews as $review) {
                echo "<h3>Review ID: " . $review['id'] . "</h3>";
                echo "<p><strong>Reviewer:</strong> " . $review['reviewerName'] . "</p>";
                echo "<p>" . $review['reviewText'] . "</p>";
                echo "<p><strong>Date Created:</strong> " . $review['dateCreated'] . "</p>";
                echo "<hr>";
            }
        }
    }

    /**
     * Displays a single review by ID.
     *
     * @param int $reviewId The ID of the review to display.
     *
     * @return bool True if the review was found and displayed, false otherwise.
     */
    public function displayReviewById($reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                echo "<h2>Review ID: " . $review['id'] . "</h2>";
                echo "<p><strong>Reviewer:</strong> " . $review['reviewerName'] . "</p>";
                echo "<p>" . $review['reviewText'] . "</p>";
                echo "<p><strong>Date Created:</strong> " . $review['dateCreated'] . "</p>";
                return true;
            }
        }
        return false;
    }
}

// Example Usage:

// Create a ReviewManager instance
$reviewManager = new ReviewManager();

// Add some reviews
$reviewId1 = $reviewManager->addReview("John Doe", "This product is amazing!");
$reviewId2 = $reviewManager->addReview("Jane Smith", "I'm a bit disappointed with the shipping time.");

// Display all reviews
echo "<h2>Reviews</h2>";
$reviewManager->displayAllReviews();

// Display a specific review
echo "<hr>";
$reviewManager->displayReviewById($reviewId1);
$reviewManager->displayReviewById($reviewId2);
?>


<?php
// ... (ReviewManager class definition remains the same) ...

//Example usage with PDO:

try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); //Throw exceptions on errors

    $reviewManager = new ReviewManager();
    $reviewManager->setPDO($pdo); //Set the PDO object

    //Add reviews to the database
    $reviewId1 = $reviewManager->addReview("John Doe", "This product is amazing!");
    $reviewId2 = $reviewManager->addReview("Jane Smith", "I'm a bit disappointed with the shipping time.");

    //Display reviews from the database
    echo "<h2>Reviews from Database</h2>";
    $reviewManager->displayAllReviews();
} catch(PDOException $e) {
    echo "Database error: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 */

class ReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $reviewText) {
        if (empty($username) || empty($reviewText)) {
            return false; // Invalid input
        }
        $this->reviews[] = ['username' => $username, 'review' => $reviewText, 'date' => date('Y-m-d H:i:s')];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID. (Assumes IDs are sequential)
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        if ($reviewId < 0 || !is_numeric($reviewId)) {
            return null; // Invalid ID
        }

        // Sequential ID assumption.  This is a *very* basic implementation.
        // Consider using a database and proper ID generation for a real application.
        $index = $reviewId - 1; 

        if ($index >= 0 && $index < count($this->reviews)) {
            return $this->reviews[$index];
        }

        return null;
    }


    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        if ($reviewId < 0 || !is_numeric($reviewId)) {
            return false; // Invalid ID
        }

        $index = $reviewId - 1;

        if ($index >= 0 && $index < count($this->reviews)) {
            unset($this->reviews[$index]);
            return true;
        }

        return false;
    }

    /**
     * Gets all reviews sorted by date (most recent first).
     *
     * @return array An array of review objects, sorted by date.
     */
    public function getReviewsSortedByDate() {
        return $this->sortByDate($this->getAllReviews());
    }


    /**
     * Helper function to sort reviews by date.
     *
     * @param array $reviews  The array of review objects.
     * @return array The sorted array of review objects.
     */
    private function sortByDate(array $reviews) {
        usort($reviews, function($a, $b) {
            return strtotime($b['date']) - strtotime($a['date']);
        });
        return $reviews;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product! Highly recommended.');
$reviewSystem->addReview('JaneSmith', 'Could be better, but decent.');
$reviewSystem->addReview('PeterJones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviewSystem->getReviewById(2);
echo "
Review ID 2:
";
print_r($specificReview);

// Get reviews sorted by date
$sortedReviews = $reviewSystem->getReviewsSortedByDate();
echo "
Sorted Reviews by Date:
";
print_r($sortedReviews);

// Delete a review
$reviewSystem->deleteReview(1);

// Verify deletion
$allReviewsAfterDeletion = $reviewSystem->getAllReviews();
echo "
Reviews after deleting ID 1:
";
print_r($allReviewsAfterDeletion);
?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to collect and display user reviews for a given item (e.g., product, movie, etc.).
 * It uses a simple form to collect the review and then displays it.
 *
 * @param string $itemName The name of the item being reviewed.
 * @return array An array containing the review text, rating, and timestamp.
 *               Returns an empty array if there's an error.
 */
function collectUserReview(string $itemName) {
  // Sanitize input - crucial for security!  This prevents XSS attacks.
  $reviewText = htmlspecialchars(trim($_POST['reviewText']));
  $rating = (int) $_POST['rating']; // Cast to integer to ensure numeric rating

  // Validate input - Add more validation as needed (e.g., min/max rating, review length)
  if (empty($reviewText)) {
    return []; // Return empty array for empty review
  }
  if ($rating < 1 || $rating > 5) {
    return []; // Return empty array for invalid rating
  }

  // Store the review (in a real application, you'd likely use a database)
  // For demonstration, we'll just store it in an array.
  $review = [
    'itemName' => $itemName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time()
  ];

  return $review;
}

// Example Usage (Demonstration -  Replace with your database interaction)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $review = collectUserReview($_POST['itemName']);

  if (!empty($review)) {
    echo "<h2>Review submitted for " . htmlspecialchars($review['itemName']) . "</h2>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
    echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
  } else {
    echo "<p style='color:red;'>Please fill out the form correctly and ensure valid input.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>User Review Form</title>
</head>
<body>

  <h1>Submit a Review</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="itemName">Item Name:</label>
    <input type="text" id="itemName" name="itemName" required><br><br>

    <label for="reviewText">Your Review:</label><br>
    <textarea id="reviewText" name="reviewText" rows="5" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating" required>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select><br><br>

    <button type="submit">Submit Review</button>
  </form>

</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 * It includes input validation, data sanitization, and basic display formatting.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - `user`:  The username of the reviewer.
 *                       - `rating`:  The rating given (e.g., 1-5).
 *                       - `comment`: The user's comment/review text.
 * @return string HTML representation of the reviews.
 */
function displayUserReviews(string $productName, array $reviews)
{
  // Input Validation (Basic - expand for more robust validation)
  if (empty($productName)) {
    return "<p>Error: Product name cannot be empty.</p>";
  }

  if (!is_array($reviews)) {
    return "<p>Error: Reviews must be an array.</p>";
  }

  // Sanitize input (Important for security - escape HTML)
  $productName = htmlspecialchars($productName);

  $reviewOutput = "<div class='reviews-container'><h2>Reviews for {$productName}</h2>";

  if (empty($reviews)) {
    $reviewOutput .= "<p>No reviews yet.</p>";
  } else {
    foreach ($reviews as $review) {
      //Sanitize data before display
      $user = htmlspecialchars($review['user']);
      $rating = htmlspecialchars($review['rating']);
      $comment = htmlspecialchars($review['comment']);

      $reviewOutput .= "<div class='review'>";
      $reviewOutput .= "<p><strong>User:</strong> {$user}</p>";
      $reviewOutput .= "<p><strong>Rating:</strong> {$rating}</p>";
      $reviewOutput .= "<p>{$comment}</p>";
      $reviewOutput .= "</div>";
    }
  }

  $reviewOutput .= "</div>"; // Close reviews-container

  return $reviewOutput;
}


// Example Usage:
// Sample Reviews Data (replace with your database or other data source)
$product = "Awesome Gadget";
$reviewsData = [
  [
    'user' => 'Alice',
    'rating' => 5,
    'comment' => 'This gadget is amazing!  I love it.'
  ],
  [
    'user' => 'Bob',
    'rating' => 4,
    'comment' => 'Pretty good, but the battery life could be better.'
  ],
  [
    'user' => 'Charlie',
    'rating' => 3,
    'comment' => 'It's okay.  Not as impressive as I hoped.'
  ]
];

// Call the function to generate the HTML output
$reviewHtml = displayUserReviews($product, $reviewsData);

// Output the HTML to the browser or display it in a PHP file
echo $reviewHtml;

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the reviewer.
 * @return array An array containing the review data and a success/failure status.
 */
function createAndDisplayReview(string $productName, string $reviewText, string $reviewerName) {
    // Input Validation - This is crucial for security and data integrity
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => null];
    }
    if (empty($reviewerName)) {
        return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'review' => null];
    }

    //  You'll typically store reviews in a database here, but for this example, we'll
    //  simulate storing them in an array.
    $reviews = []; //  This is a placeholder -  in a real application, you'd use a database.

    // Create the review data
    $review = [
        'product_name' => $productName,
        'reviewer_name' => $reviewerName,
        'review_text' => $reviewText,
        'created_at' => date('Y-m-d H:i:s') // Add a timestamp for organization
    ];

    // Add the review to the array (simulating database insertion)
    $reviews[] = $review;


    // Return the review data and a success status
    return ['success' => true, 'review' => $review, 'message' => 'Review submitted successfully!'];
}


/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product or service.
 *
 * @param string $productName The name of the product or service for which to display reviews.
 * @return array An array containing the reviews and a success/failure status.
 */
function displayReviews(string $productName) {
    // Simulate retrieving reviews from a database.  Replace this with your database query.
    // For demonstration, we'll return some pre-defined reviews.

    if ($productName === 'Awesome Product') {
        $reviews = [
            ['product_name' => 'Awesome Product', 'reviewer_name' => 'John Doe', 'review_text' => 'This product is amazing!  I highly recommend it.', 'created_at' => '2023-10-27 10:00:00'],
            ['product_name' => 'Awesome Product', 'reviewer_name' => 'Jane Smith', 'review_text' => 'Great value for the price.', 'created_at' => '2023-10-26 14:30:00'],
        ];
    } else {
        $reviews = [];  // No reviews for this product.
    }

    return ['success' => true, 'reviews' => $reviews, 'message' => 'Reviews loaded successfully!'];
}



// --- Example Usage ---

// 1. Create a Review
$reviewResult = createAndDisplayReview('Awesome Product', 'This is a fantastic product!', 'Alice Brown');

if ($reviewResult['success']) {
    echo "Review created successfully: " . $reviewResult['message'] . PHP_EOL;
    print_r($reviewResult['review']); // Display the newly created review
} else {
    echo "Error creating review: " . $reviewResult['message'] . PHP_EOL;
}


// 2. Display Reviews for the same product
$displayResult = displayReviews('Awesome Product');

if ($displayResult['success']) {
    echo "Reviews for Awesome Product:" . PHP_EOL;
    print_r($displayResult['reviews']);
} else {
    echo "Error loading reviews: " . $displayResult['message'] . PHP_EOL;
}



?>


<?php

/**
 * User Review Function - A simple example.
 *
 * This function takes a user's review, rating, and optionally, their ID.
 * It validates the inputs and returns a formatted review string.
 *
 * @param string $review The user's review text.
 * @param int    $rating The user's rating (e.g., 1-5).
 * @param string|int $userId The user's ID (optional).  Defaults to a generic ID.
 *
 * @return string A formatted review string, or an error message if validation fails.
 */
function create_review(string $review, int $rating, $userId = null) {
    // Input validation - Essential for security and data integrity
    if (empty($review)) {
        return "Error: Review cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Optional user ID handling
    if ($userId === null) {
        $userId = "Anonymous User";
    } elseif (!is_numeric($userId)) {
        return "Error: User ID must be a number or a valid user ID.";
    }

    // Build the review string
    $review_string = "Review by: " . $userId . "
";
    $review_string .= "Rating: " . $rating . "/5
";
    $review_string .= $review . "
";
    $review_string .= "---"; // Separator

    return $review_string;
}

// --- Example Usage ---

// Example 1:  Basic review
$review1 = create_review("This product is amazing!  I highly recommend it.", 5, 123);
echo $review1 . "

";

// Example 2: Review with a different user ID
$review2 = create_review("Great value for the money.", 4, "user456");
echo $review2 . "

";

// Example 3:  Invalid rating
$review3 = create_review("It could be better...", 0);
echo $review3 . "

";

// Example 4: Empty review
$review4 = create_review("", 3);
echo $review4 . "

";

// Example 5:  Using a numeric user ID
$review5 = create_review("The instructions were unclear.", 2, 9876543);
echo $review5 . "

";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic input validation and error handling.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param string $db_connection A valid database connection object.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $product_id, string $username, string $rating, string $comment, PDO $db_connection) {
  // Input Validation -  Crucial for security and data integrity
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review."); // Log for debugging - prevent info display
    return false;
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    error_log("Error: Invalid username - only alphanumeric characters and underscores allowed.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating - must be between 1 and 5.");
    return false;
  }
  
  // Sanitize inputs -  Important!  Prevent SQL injection
  $product_id = $db_connection->quote($product_id);
  $username = $db_connection->quote($username);
  $rating = (int)$rating;  //Cast to integer to ensure proper storage
  $comment = $db_connection->quote($comment);

  // SQL Query -  Use prepared statements to prevent SQL injection
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
  $stmt = $db_connection->prepare($sql);

  if ($stmt->execute([
    ':product_id' => $product_id,
    ':username' => $username,
    ':rating' => $rating,
    ':comment' => $comment
  ]) === false) {
    error_log("Error: Failed to insert review: " . print_r($stmt->errorInfo(), true)); //Detailed error logging
    return false;
  }

  return true; // Success
}



/**
 * Displays a list of user reviews for a product.
 *
 * @param PDO $db_connection A valid database connection object.
 * @param int $product_id The ID of the product to retrieve reviews for.
 */
function displayUserReviews(PDO $db_connection, int $product_id) {
  // Query to get reviews for a product
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db_connection->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
    echo "<table>";
    echo "<thead><tr><th>Username</th><th>Rating</th><th>Comment</th></tr></thead>";
    echo "<tbody>";
    foreach ($reviews as $review) {
      echo "<tr>";
      echo "<td>" . htmlspecialchars($review['username']) . "</td>";  // Escape output for security
      echo "<td>" . $review['rating'] . "</td>";
      echo "<td>" . htmlspecialchars($review['comment']) . "</td>";
      echo "</tr>";
    }
    echo "</tbody>";
    echo "</table>";
  }
}

// Example Usage (Illustrative - Replace with your database setup)

// Create a dummy PDO connection (replace with your actual connection)
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example Product ID
$product_id = 123;

// Simulate a user review submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $username = $_POST["username"];
  $rating = $_POST["rating"];
  $comment = $_POST["comment"];

  if (storeUserReview($product_id, $username, $rating, $comment, $db_connection)) {
    echo "<p>Review submitted successfully!</p>";
  } else {
    echo "<p>Error submitting review.</p>";
  }
}

//Display reviews for the product
displayUserReviews($db_connection, $product_id);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic CRUD (Create, Read, Update, Delete) operations 
 * for a simple review system.
 *
 * Assumptions:
 * - You'll likely want to store these reviews in a database.  This example uses a simple
 *   array for demonstration purposes.
 * - This is a simplified example and doesn't include full error handling, validation,
 *   or security measures (e.g., preventing SQL injection).  You should implement
 *   robust error handling and security in a production environment.
 *
 * @param string $reviewText - The text of the review.
 * @param int    $rating     - The rating given for the review (e.g., 1-5).
 * @param int    $productId  - The ID of the product this review is for.
 * @param int    $userId     - The ID of the user who wrote the review (optional, for tracking).
 *
 * @return array|false - Returns an array containing the review ID, timestamp, text, rating, 
 *                       and user ID if successful.  Returns false on failure.
 */
function createReview(string $reviewText, int $rating, int $productId, int $userId = null) {
    // Basic validation (add more robust validation in a real application)
    if (empty($reviewText) || $rating < 1 || $rating > 5) {
        return false;
    }

    // Generate a unique ID (consider a better method for real applications)
    $reviewId = time();

    // Store the review (replace with database insertion in a real application)
    $review = [
        'id' => $reviewId,
        'timestamp' => time(),
        'text' => $reviewText,
        'rating' => $rating,
        'userId' => $userId,
    ];

    // Simulate storing in a database.  This is just for example.
    // In a real application, you'd use a database query.
    // $result = db_insert('reviews', $review); 

    //Simulate database insertion success.
    return $review;
}

/**
 * Reads a review by its ID.
 *
 * @param int $reviewId - The ID of the review to retrieve.
 *
 * @return array|null - Returns the review data if found, otherwise null.
 */
function readReview(int $reviewId) {
    // Example data (replace with database query)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    foreach ($reviews as $review) {
        if ($review['id'] == $reviewId) {
            return $review;
        }
    }

    return null; // Review not found
}


/**
 * Updates a review by its ID.
 *
 * @param int $reviewId - The ID of the review to update.
 * @param string $newReviewText - The new text of the review.
 * @param int    $newRating     - The new rating for the review.
 *
 * @return bool - True if the update was successful, false otherwise.
 */
function updateReview(int $reviewId, string $newReviewText, int $newRating) {
    //Basic validation -  add more specific validation based on your needs.
    if (empty($newReviewText) || $newRating < 1 || $newRating > 5) {
        return false;
    }
    
    // In a real application, you would retrieve the existing review from the database
    // and then update it.  This example simulates the update.
    
    // Find the review (simulate database lookup)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    $index = -1;
    for ($i = 0; $i < count($reviews); $i++) {
        if ($reviews[$i]['id'] == $reviewId) {
            $index = $i;
            break;
        }
    }

    if ($index === -1) {
        return false; // Review not found
    }
    
    $reviews[$index]['text'] = $newReviewText;
    $reviews[$index]['rating'] = $newRating;

    return true;
}


/**
 * Deletes a review by its ID.
 *
 * @param int $reviewId - The ID of the review to delete.
 *
 * @return bool - True if the delete was successful, false otherwise.
 */
function deleteReview(int $reviewId) {
    // In a real application, you would query the database to delete the review.
    // This example simulates the delete.

    // Find the review (simulate database lookup)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    $index = -1;
    for ($i = 0; $i < count($reviews); $i++) {
        if ($reviews[$i]['id'] == $reviewId) {
            $index = $i;
            break;
        }
    }

    if ($index === -1) {
        return false; // Review not found
    }

    unset($reviews[$index]);

    return true;
}



// Example Usage:
// Create a review
$newReview = createReview("This is an amazing product!", 5, 1);
if ($newReview) {
    echo "Review created with ID: " . $newReview['id'] . "
";
} else {
    echo "Failed to create review.
";
}

// Read the review
$review = readReview(1);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Update the review
if (updateReview(1, "This is even better!", 6)) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Read the updated review
$updatedReview = readReview(1);
if ($updatedReview) {
    echo "Updated Review:
";
    print_r($updatedReview);
}

// Delete the review
if (deleteReview(1)) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

//Try to read a deleted review
$deletedReview = readReview(1);
if ($deletedReview) {
    echo "Deleted Review:
";
    print_r($deletedReview);
}
else {
    echo "Review not found (as expected). 
";
}
?>


<?php

/**
 * This function creates a user review object based on input data.
 * 
 * @param string $username The name of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's written comment.
 * 
 * @return Review|null A Review object if the input is valid, null otherwise.
 */
class Review
{
    public string $username;
    public int $rating;
    public string $comment;

    public function __construct(string $username, int $rating, string $comment)
    {
        // Validate input - crucial for security and data integrity
        if (empty($username)) {
            throw new InvalidArgumentException("Username cannot be empty.");
        }
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
        }
        if (empty($comment)) {
            throw new InvalidArgumentException("Comment cannot be empty.");
        }

        $this->username = $username;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}


/**
 *  Creates a user review using the Review class.
 *
 * @param array $reviewData An associative array containing the review data.
 *  - 'username' => 'User Name'
 *  - 'rating'  => 'Rating (1-5)'
 *  - 'comment' => 'Review Comment'
 *
 * @return Review|null  A Review object if the data is valid, null otherwise.
 */
function createReview(array $reviewData)
{
    try {
        // Validate that required keys are present
        if (!isset($reviewData['username'], $reviewData['rating'], $reviewData['comment'])) {
            throw new InvalidArgumentException("Missing required review data.");
        }

        //  Type validation and data casting
        $username = trim($reviewData['username']);
        $rating = (int) $reviewData['rating']; // Cast to integer
        $comment = trim($reviewData['comment']); //Trim whitespace

        return new Review($username, $rating, $comment);

    } catch (InvalidArgumentException $e) {
        // Handle exceptions (e.g., log the error, return null, display an error message)
        error_log("Review creation failed: " . $e->getMessage()); // Log the error.  Important for debugging.
        return null;
    }
}

// Example Usage:

// Valid Review
$reviewData = [
    'username' => 'JohnDoe',
    'rating' => 4,
    'comment' => 'Great product!  Easy to use.'
];

$review = createReview($reviewData);

if ($review) {
    echo "Review created successfully:
";
    echo "Username: " . $review->username . "
";
    echo "Rating: " . $review->rating . "
";
    echo "Comment: " . $review->comment . "
";
} else {
    echo "Review creation failed.
";
}


// Invalid Review Examples:
$invalidData1 = [
    'username' => '',
    'rating' => 6,
    'comment' => 'This is a test.'
];

$review2 = createReview($invalidData1);
if (!$review2) {
    echo "Invalid review data detected (example 1).
";
}

$invalidData2 = [
    'username' => 'JaneSmith',
    'rating' => '5', // String instead of integer
    'comment' => ''
];

$review3 = createReview($invalidData2);
if (!$review3) {
    echo "Invalid review data detected (example 2).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $username The user's name.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects.
 *   - 'totalReviews': The total number of reviews.
 *   - 'success': True if the review was added successfully, false otherwise.
 *   - 'message':  A message describing the outcome of the operation.
 */
function addReview(string $productId, string $rating, string $comment, string $username): array
{
    // Validate input (important for security and data integrity)
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'reviews' => [],
            'totalReviews' => 0,
            'success' => false,
            'message' => "Invalid rating. Rating must be a number between 1 and 5."
        ];
    }

    if (empty($comment)) {
        return [
            'reviews' => [],
            'totalReviews' => 0,
            'success' => false,
            'message' => "Comment cannot be empty."
        ];
    }


    // In a real application, you'd save this data to a database.
    // This is a placeholder for demonstration purposes.

    $review = [
        'productId' => $productId,
        'rating' => $rating,
        'comment' => $comment,
        'username' => $username,
        'timestamp' => time() // Add timestamp for tracking
    ];

    // Add the review to a simple array (replace with database insertion)
    $reviews = getReviewsByProduct($productId);  // Placeholder function to get existing reviews
    $reviews[] = $review;

    //  In a real application, you would sanitize and validate $review data before saving it.

    return [
        'reviews' => $reviews,
        'totalReviews' => count($reviews),
        'success' => true,
        'message' => "Review submitted successfully!"
    ];
}

/**
 * Placeholder function to get reviews by product ID
 * Replace this with actual database retrieval
 *
 * @param string $productId The product ID.
 * @return array An array of review objects.
 */
function getReviewsByProduct(string $productId): array
{
    // In a real implementation, this would fetch data from a database.
    // For demonstration, let's return a static array.
    if ($productId === '123') {
        return [
            [
                'productId' => '123',
                'rating' => 4,
                'comment' => 'Great product!',
                'username' => 'JohnDoe',
                'timestamp' => time()
            ],
            [
                'productId' => '123',
                'rating' => 5,
                'comment' => 'Excellent value for money.',
                'username' => 'JaneSmith',
                'timestamp' => time()
            ]
        ];
    }
    return [];
}


// Example Usage:
$product_id = '123';
$rating = 4;
$comment = 'This is a fantastic product!';
$username = 'TestUser';

$result = addReview($product_id, $rating, $comment, $username);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    echo "Total Reviews: " . $result['totalReviews'] . "<br>";
    echo "Reviews: ";
    foreach ($result['reviews'] as $review) {
        echo "- " . $review['username'] . ": " . $review['comment'] . " (Rating: " . $review['rating'] . ")" . "<br>";
    }
} else {
    echo "Error: " . $result['message'] . "<br>";
}

// Example of invalid input:
$result = addReview($product_id, 6, 'Bad rating', 'Invalid User');

if (!$result['success']) {
    echo "Error: " . $result['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier of the product or item.
 * @param string $reviewText The review text submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a default user ID will be used.
 * @return array An array containing:
 *   - 'success': True if the review was successfully added, False otherwise.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 *   - 'message': A user-friendly message indicating the outcome.
 */
function createAndDisplayReview(string $productId, string $reviewText, int $userId = null): array
{
    // Validate input (add more validation as needed)
    if (empty($productId)) {
        return [
            'success' => false,
            'reviewId' => null,
            'message' => 'Product ID cannot be empty.'
        ];
    }
    if (empty($reviewText)) {
        return [
            'success' => false,
            'reviewId' => null,
            'message' => 'Review text cannot be empty.'
        ];
    }


    //  Simulate database insertion (replace with your actual database interaction)
    $reviewId = generateUniqueId(); //  Function to generate a unique ID (see below)

    //  Simulate saving the review to a database
    $reviewData = [
        'product_id' => $productId,
        'user_id' => $userId,
        'review_text' => $reviewText,
        'created_at' => date('Y-m-d H:i:s')
    ];

    //  For demonstration, let's store it in an array.  Replace this with your database operation
    $reviews =  isset($_SESSION['reviews']) ? $_SESSION['reviews'] : [];
    $reviews[$reviewId] = $reviewData;
    $_SESSION['reviews'] = $reviews;  // Use session storage for demonstration

    return [
        'success' => true,
        'reviewId' => $reviewId,
        'message' => 'Review submitted successfully!'
    ];
}


/**
 * Function to generate a unique ID.
 * (Replace with a more robust ID generation method in a real application)
 * @return string A unique string ID.
 */
function generateUniqueId(): string
{
    return bin2hex(random_bytes(16)); // Creates a cryptographically secure random string.
}


//  Example Usage (Simulated)
/*
$result = createAndDisplayReview('product_123', 'This is a fantastic product!');

if ($result['success']) {
    echo "Review submitted successfully!  Review ID: " . $result['reviewId'] . "<br>";
    echo "Message: " . $result['message'] . "<br>";
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}
*/



// Example HTML form to submit a review (Illustrative - needs adaptation)
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review Form</title>
</head>
<body>

    <h1>Submit a Review</h1>

    <form method="POST" action="">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id" required><br><br>

        <label for="review_text">Review Text:</label><br>
        <textarea id="review_text" name="review_text" rows="4" cols="50" required></textarea><br><br>

        <button type="submit">Submit Review</button>
    </form>

    <?php
    if(isset($_POST['product_id']) && isset($_POST['review_text'])) {
        $productId = $_POST['product_id'];
        $reviewText = $_POST['review_text'];

        $result = createAndDisplayReview($productId, $reviewText);

        if ($result['success']) {
            echo "<p>Review submitted successfully!  Review ID: " . $result['reviewId'] . "</p>";
        } else {
            echo "<p>Error submitting review: " . $result['message'] . "</p>";
        }
    }

    ?>

</body>
</html>


<?php

/**
 * Function to process and display user reviews.
 *
 * @param array $reviews An array of review objects. Each object should have:
 *                       - id (int): Unique identifier for the review.
 *                       - user (string):  Username of the reviewer.
 *                       - rating (int):  Rating from 1 to 5.
 *                       - comment (string):  The text of the review.
 *                       - date (string):  Date of the review in a format you choose (e.g., 'Y-m-d').
 *
 * @return void Displays the reviews in an HTML table.  Optionally, you can
 *              customize the output (e.g., save to database, send email).
 */
function displayUserReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews found.</p>";
    return;
  }

  echo "<table border='1'>";
  echo "<thead><tr><th>ID</th><th>User</th><th>Rating</th><th>Comment</th><th>Date</th></tr></thead>";
  echo "<tbody>";

  foreach ($reviews as $review) {
    echo "<tr>";
    echo "<td>" . $review['id'] . "</td>";
    echo "<td>" . $review['user'] . "</td>";
    echo "<td>" . $review['rating'] . "</td>";
    echo "<td>" . $review['comment'] . "</td>";
    echo "<td>" . $review['date'] . "</td>";
    echo "</tr>";
  }

  echo "</tbody></table>";
}


/**
 * Example usage (demonstration purposes)
 */

// Sample Review Data (replace with your actual data source)
$reviews = [
  [
    'id' => 1,
    'user' => 'JohnDoe',
    'rating' => 5,
    'comment' => 'Excellent product!  Highly recommend.',
    'date' => '2023-10-27'
  ],
  [
    'id' => 2,
    'user' => 'JaneSmith',
    'rating' => 4,
    'comment' => 'Good quality, a bit pricey.',
    'date' => '2023-10-26'
  ],
  [
    'id' => 3,
    'user' => 'PeterJones',
    'rating' => 3,
    'comment' => 'It was okay.  Could be better.',
    'date' => '2023-10-25'
  ]
];

// Call the function to display the reviews
displayUserReviews($reviews);



/**
 *  Further Development Ideas:
 *
 *  - **Data Source:**  Connect to a database (MySQL, PostgreSQL, etc.) to store reviews persistently.
 *  - **Input Validation:**  Add input validation to ensure that the 'rating' is within the expected range (1-5).
 *  - **Error Handling:** Implement robust error handling to catch potential issues (e.g., database connection errors).
 *  - **Sorting/Filtering:** Add functionality to sort reviews by date, rating, or user.  Allow filtering by rating range.
 *  - **Pagination:** If you have many reviews, implement pagination to display them in chunks.
 *  - **Security:**  Sanitize user input to prevent cross-site scripting (XSS) vulnerabilities.  Use prepared statements to prevent SQL injection.
 *  - **User Interface:**  Create a user-friendly web interface for submitting reviews.
 */
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (e.g., 1-5).
 * @param string $db_connection A database connection object.  This is crucial!
 *
 * @return bool True on success, false on failure (e.g., database connection error).
 */
function store_user_review(string $item_id, string $user_name, string $review_text, int $rating, object $db_connection) {
    // Sanitize and validate inputs -  VERY IMPORTANT!
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING); // Remove potentially harmful characters
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);
    $rating = intval($rating); // Ensure rating is an integer.  Important for database safety.

    if (empty($item_id) || empty($user_name) || empty($review_text)) {
        error_log("Missing review data.  item_id: " . $item_id . ", user_name: " . $user_name . ", review_text: " . $review_text);
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating provided. Rating: " . $rating);
        return false;
    }


    // Prepare the SQL statement - Use prepared statements to prevent SQL injection!
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sss", $item_id, $user_name, $review_text);

    // Execute the statement
    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error inserting review: " . $stmt->error);
        return false;
    }

    // Close the statement and connection (good practice)
    $stmt->close();
    // $db_connection->close(); // Don't close the connection here.  Keep it open for other requests.
}


/**
 * Function to display all reviews for a given item
 *
 * @param string $item_id The item ID.
 * @param object $db_connection  A database connection object.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews(string $item_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db_connection->prepare($sql);
    $stmt->bind_param("s", $item_id);
    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}



// --- Example Usage (replace with your actual database connection) ---
// Create a dummy database connection (for demonstration only)
class MockDBConnection {
    public function __construct() {}

    public function prepare(string $sql) {
        // Simulate prepare function.  In a real application, this would use PDO or MySQLi.
        // In this example, we don't actually prepare the query; just return a dummy object.
        return new MockStatement();
    }

    public function execute() {
        return new MockResult();
    }

    public function __destruct() {}
}

class MockStatement {
  public function __construct() {}
}

class MockResult {
  public function get_result() {
      return new MockRow();
  }
}

class MockRow {
    public $data = [
        'item_id' => 'item123',
        'user_name' => 'John Doe',
        'review_text' => 'Great product!',
        'rating' => 5
    ];

    public function fetch_assoc() {
        return $this;
    }
}

$db_connection = new MockDBConnection();

// Store a review
$item_id = 'item123';
$user_name = 'Jane Smith';
$review_text = 'Excellent value for money.';
$rating = 4;

if (store_user_review($item_id, $user_name, $review_text, $rating, $db_connection)) {
    echo "Review submitted successfully!
";
} else {
    echo "Failed to submit review.
";
}

// Get and display reviews
$reviews = get_reviews($item_id, $db_connection);

if (!empty($reviews)) {
    echo "Reviews for " . $item_id . ":
";
    foreach ($reviews as $review) {
        echo "  User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review_text'] . "
";
    }
} else {
    echo "No reviews found for " . $item_id . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to handle user reviews, including saving them to a database
 * or other storage method.  It includes basic validation and error handling.
 *
 * @param string $username       The name of the user submitting the review.
 * @param string $review_text    The text of the review.
 * @param string $product_id     The ID of the product the review is for.
 * @param string $rating         The rating (e.g., 1-5).
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $username, string $review_text, string $product_id, string $rating): bool
{
    // **Input Validation (Important!)**
    if (empty($username)) {
        error_log("Invalid username provided.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Review text cannot be empty.");
        return false;
    }
    if (empty($product_id)) {
        error_log("Product ID cannot be empty.");
        return false;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating.  Please enter a number between 1 and 5.");
        return false;
    }

    // **Here's where you would connect to your database and save the review.**
    // This is a simplified example using a hypothetical 'reviews' table.
    // Adapt this to your database schema and technology.

    try {
        // Database connection (replace with your actual connection details)
        // $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

        // Assuming you have a 'reviews' table with columns:
        // - id (INT, PRIMARY KEY, AUTO_INCREMENT)
        // - username (VARCHAR)
        // - product_id (INT)
        // - review_text (TEXT)
        // - rating (INT)
        // - created_at (TIMESTAMP)

        $db = new PDO("mysql:host=localhost;dbname=reviews_db", "user", "password");

        // Prepare the SQL statement
        $stmt = $db->prepare(
            "INSERT INTO reviews (username, product_id, review_text, rating, created_at)
             VALUES (:username, :product_id, :review_text, :rating, NOW())"
        );

        // Bind the parameters
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        return true; // Review saved successfully

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Error saving review
    }
}


// **Example Usage:**
$username = "JohnDoe";
$reviewText = "This product is amazing!  I highly recommend it.";
$productId = 123;
$rating = 5;

if (saveUserReview($username, $reviewText, $productId, $rating)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

?>


<?php

/**
 * Function to create and display a user review.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return string The HTML for the review.
 */
function createReview(string $username, string $rating, string $comment)
{
    // Input Validation (Basic - Expand this for production)
    if (empty($username) || empty($rating) || empty($comment)) {
        return "<p class='error'>Please fill in all fields.</p>";
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "<p class='error'>Rating must be a number between 1 and 5.</p>";
    }

    // Create the review HTML
    $review_html = "<div class='review'>";
    $review_html .= "<div class='review-header'>";
    $review_html .= "<span class='review-username'>" . htmlspecialchars($username) . "</span>";  // Escape for security
    $review_html .= "<span class='review-rating'> - " . $rating . "</span>";
    $review_html .= "</div>";
    $review_html .= "<div class='review-content'>" . htmlspecialchars($comment) . "</div>";
    $review_html .= "</div>";

    return $review_html;
}


/**
 * Example usage and demonstrating how to use the function
 *
 */

// Example data
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

// Create the review
$review = createReview($username, $rating, $comment);

// Output the review (for demonstration)
echo $review;


// Example with invalid input:
$invalid_rating = 0;
$invalid_comment = "";

$invalid_review = createReview("JaneSmith", $invalid_rating, $invalid_comment);
echo $invalid_review;
?>


<?php

/**
 * Class ReviewManager
 *
 * Manages user reviews for a product or item.
 *
 * Attributes:
 *   - $reviews:  An array to store the reviews.
 *   - $productId: The ID of the product being reviewed.
 */
class ReviewManager
{
    private $reviews = [];
    private $productId;

    /**
     * Constructor
     *
     * Initializes the ReviewManager with a product ID.
     *
     * @param int $productId The ID of the product being reviewed.
     */
    public function __construct(int $productId)
    {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $reviewerName, string $comment): bool
    {
        $reviewId = count($this->reviews) + 1; // Simple review ID generation
        $this->reviews[$reviewId] = [
            'reviewer' => $reviewerName,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];
        return true;
    }

    /**
     * Get all reviews for the product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId): ?array
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Calculate the average rating for the product.
     *
     * @return float|null The average rating, or null if there are no reviews.
     */
    public function calculateAverageRating(): ?float
    {
        $totalRating = 0;
        $reviewCount = count($this->reviews);

        if ($reviewCount > 0) {
            foreach ($this->reviews as $review) {
                // Assume a rating scale from 1 to 5.  Adapt as needed.
                $totalRating += 3; // Example rating: 1-5
            }
            return (float) ($totalRating / $reviewCount);
        }
        return null;
    }
}

// --- Example Usage ---

// Create a ReviewManager for a product with ID 123
$reviewManager = new ReviewManager(123);

// Add some reviews
$reviewManager->addReview('Alice', 'Great product!  I loved it.');
$reviewManager->addReview('Bob', 'Could be better, but overall good.');
$reviewManager->addReview('Charlie', 'Excellent value for the price.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$review1 = $reviewManager->getReviewById(2);
echo "
Review 2:
";
print_r($review1);

// Calculate the average rating
$averageRating = $reviewManager->calculateAverageRating();
echo "
Average Rating: " . ($averageRating === null ? 'N/A' : $averageRating) . "
";


// Example with no reviews
$noReviewsManager = new ReviewManager(456);
$averageRatingNoReviews = $noReviewsManager->calculateAverageRating();
echo "
Average Rating (no reviews): " . ($averageRatingNoReviews === null ? 'N/A' : $averageRatingNoReviews) . "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the user submitting the review.
 * @param array  $reviews An array to store reviews. If not provided, an empty array will be created.
 *
 * @return array An array containing all collected reviews.  Returns an empty array on error.
 */
function create_review(string $productName, string $reviewText, string $reviewerName, array &$reviews = []) {

  // Input validation - basic checks
  if (empty($productName) || empty($reviewText) || empty($reviewerName)) {
    error_log("Error: Product name, review text, and reviewer name cannot be empty."); // Log the error for debugging.
    return []; // Return an empty array to indicate an error
  }

  // Create the review object
  $review = [
    'product' => $productName,
    'reviewer' => $reviewerName,
    'date' => date('Y-m-d H:i:s'), // Add a timestamp for reference
    'text' => $reviewText
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display a single review
 *
 * @param array $review A single review object.
 */
function display_review(array $review) {
  echo "<p><strong>Product:</strong> " . htmlspecialchars($review['product']) . "</p>";
  echo "<p><strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer']) . "</p>";
  echo "<p><strong>Date:</strong> " . htmlspecialchars($review['date']) . "</p>";
  echo "<p><strong>Review Text:</strong> " . htmlspecialchars($review['text']) . "</p>";
  echo "<hr>";
}


/**
 * Function to display all reviews
 *
 * @param array $reviews An array of review objects.
 */
function display_all_reviews(array $reviews) {
  echo "<h2>User Reviews for " . htmlspecialchars($reviews[0]['product']) . "</h2>"; // Display the product name.
  foreach ($reviews as $review) {
    display_review($review);
  }
}

// --- Example Usage ---

// Initialize the reviews array
$reviews = [];

// Create some reviews
$reviews = create_review("Awesome Widget", "This widget is fantastic! It does everything I need and more.", "John Doe");
$reviews = create_review("Super Gadget", "The gadget is amazing and so easy to use.", "Jane Smith");
$reviews = create_review("Mega Device", "Great value for money. Highly recommended!", "Peter Jones");

// Display all reviews
display_all_reviews($reviews);

?>


<?php

/**
 * Reviews Class - Handles user reviews.
 */
class Reviews {

  private $reviews = []; // Stores all reviews
  private $dbConnection = null; // Connection to the database (for persistence)

  /**
   * Constructor
   *
   * Establishes the database connection (if available).
   */
  public function __construct($dbConfig = null) {
    // Attempt to connect to the database (e.g., MySQL, PostgreSQL)
    // You'll need to adapt this part to your specific database setup.
    if ($dbConfig) {
      $this->dbConnection = new PDO(
        "mysql:host=" . $dbConfig['host'] . ";dbname=" . $dbConfig['dbname'] . ";charset=utf8",
        $dbConfig['user'],
        $dbConfig['password']
      );
    }
  }


  /**
   * Add a new review
   *
   * @param int $productId The ID of the product the review is for.
   * @param string $userName The name of the user who wrote the review.
   * @param string $reviewText The text of the review.
   * @param int $rating The rating (e.g., 1-5).
   *
   * @return bool True on success, false on failure.
   */
  public function addReview(int $productId, string $userName, string $reviewText, int $rating) {
    // Basic validation
    if (!$productId || !$userName || !$reviewText || $rating < 1 || $rating > 5) {
      return false;
    }

    $review = [
      'productId' => $productId,
      'userName' => $userName,
      'reviewText' => $reviewText,
      'rating' => $rating,
      'createdAt' => date('Y-m-d H:i:s') // Timestamp for creation
    ];

    $this->reviews[] = $review;

    // Optionally save to database here
    if ($this->dbConnection) {
      $this->saveReviewToDatabase($review);
    }
    return true;
  }

  /**
   * Get all reviews for a product
   *
   * @param int $productId The ID of the product.
   *
   * @return array An array of reviews, or an empty array if none found.
   */
  public function getReviewsByProduct(int $productId) {
    $productReviews = [];
    foreach ($this->reviews as $review) {
      if ($review['productId'] == $productId) {
        $productReviews[] = $review;
      }
    }
    return $productReviews;
  }

  /**
   * Save review to database (using PDO)
   */
  private function saveReviewToDatabase(array $review) {
    $sql = "INSERT INTO reviews (productId, userName, reviewText, rating, createdAt)
            VALUES (:productId, :userName, :reviewText, :rating, :createdAt)";

    $stmt = $this->dbConnection->prepare($sql);
    $stmt->bindParam(':productId', $review['productId']);
    $stmt->bindParam(':userName', $review['userName']);
    $stmt->bindParam(':reviewText', $review['reviewText']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':createdAt', $review['createdAt']);

    try {
      $stmt->execute();
    } catch (PDOException $e) {
      // Handle database errors appropriately (logging, display error message)
      error_log("Database error saving review: " . $e->getMessage()); //Log for debugging
      // Optionally display an error message to the user (if appropriate)
    }
  }
}


// Example Usage:
// Assuming you have a database setup and a table named 'reviews'
// with columns: productId (int), userName (string), reviewText (text), rating (int), createdAt (datetime)

// Initialize Reviews object (replace with your database config)
$reviews = new Reviews([
  'host' => 'localhost',
  'dbname' => 'your_database_name',
  'user' => 'your_database_user',
  'password' => 'your_database_password'
]);

// Add a review
if ($reviews->addReview(123, "John Doe", "Great product!", 5)) {
  echo "Review added successfully!";
} else {
  echo "Failed to add review.";
}

// Get reviews for product 123
$reviewsForProduct123 = $reviews->getReviewsByProduct(123);

// Display the reviews
echo "<pre>";
print_r($reviewsForProduct123);
echo "</pre>";


?>


<?php

/**
 * User Review Function - A simplified example
 *
 * This function allows you to add a new user review to a product.
 * It includes basic validation and saves the review to a file.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param string $filename  The name of the file to save the review in.  Default is 'reviews.txt'
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function addReview(string $productId, string $userName, string $reviewText, string $filename = 'reviews.txt'): bool
{
  // **Input Validation** - VERY IMPORTANT!
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); //Log the error - useful for debugging
    return false;
  }

  if (empty($userName)) {
    error_log("Error: User name cannot be empty.");
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return false;
  }

  // Sanitize input to prevent basic attacks.  This is a basic example,
  // more robust sanitization might be needed for production.
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText); // Protects against XSS attacks

  // **Save the Review**
  $reviewData = "Product ID: " . $productId . "
";
  $reviewData .= "User: " . $userName . "
";
  $reviewData .= "Review: " . $reviewData . "
";

  $file = fopen($filename, 'a'); // 'a' for append mode

  if ($file) {
    fwrite($file, $reviewData);
    fclose($file);
    return true;
  } else {
    error_log("Error: Could not open file for writing.");
    return false;
  }
}


// **Example Usage**

// Add a review
$productID = "123";
$userName = "John Doe";
$reviewText = "This product is amazing! I highly recommend it.";

if (addReview($productID, $userName, $reviewText)) {
  echo "Review added successfully!
";
} else {
  echo "Failed to add review.
";
}


// Another example:
$productID = "456";
$userName = "Jane Smith";
$reviewText = "Good product, but could be improved.";

if (addReview($productID, $userName, $reviewText, 'product_reviews.txt')) {
  echo "Review added successfully to product_reviews.txt!
";
} else {
  echo "Failed to add review.
";
}

?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows you to process user reviews, storing them in a database
 * or an array for later use.  It handles data validation and basic formatting.
 *
 * @param string $username  The username of the user submitting the review.
 * @param string $rating  The rating provided by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param string $review_id (Optional)  Unique identifier for the review.
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function process_review(string $username, string $rating, string $comment, string $review_id = "") {
  // 1. Validation
  if (empty($username)) {
    return "Error: Username cannot be empty.";
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  if (empty($comment)) {
    return "Error: Comment cannot be empty.";
  }

  // 2. Data Formatting (Optional - Adapt to your needs)
  $formatted_rating = (int)$rating;  // Convert rating to integer
  $formatted_comment = trim($comment); // Remove leading/trailing whitespace

  // 3. Data Storage (Example:  Storing in an array - Adapt to your database logic)
  $review = [
    'username' => $username,
    'rating' => $formatted_rating,
    'comment' => $formatted_comment,
    'timestamp' => time(), // Add a timestamp for tracking
    'review_id' => $review_id
  ];

  //  Store the review data (example:  print to the console for demonstration)
  //  In a real application, you would insert this into a database
  //  using a database query.
  echo "Review received from: " . $username . "
";
  echo "Rating: " . $formatted_rating . "
";
  echo "Comment: " . $formatted_comment . "
";
  echo "Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "
";

  return true; // Indicate success
}

// Example Usage:
$result = process_review("JohnDoe", 4, "Great product!  I really liked it.", "review_123");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
"; // Display the error message
}


$result = process_review("JaneSmith", 2, "Okay, but could be better.", "review_456");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
";
}

$result = process_review("TestUser", 6, "Invalid rating", "review_789");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
";
}
?>


<?php

// ... (process_review function - as above) ...

try {
  $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling

  $review = [
    'username' => $username,
    'rating' => $formatted_rating,
    'comment' => $formatted_comment,
    'timestamp' => time(),
    'review_id' => $review_id
  ];

  $sql = "INSERT INTO reviews (username, rating, comment, timestamp, review_id) VALUES (:username, :rating, :comment, :timestamp, :review_id)";
  $stmt = $pdo->prepare($sql);
  $stmt->execute($review);

  return true;

} catch (PDOException $e) {
  // Handle database error (e.g., log the error, display an error message)
  echo "Database error: " . $e->getMessage() . "
";
  return false;
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a product or item.
 *
 *  @param string $product_id  The unique identifier for the product.
 *  @param string $user_name   The name of the user submitting the review.
 *  @param string $review_text The text content of the review.
 *  @param int   $rating      The rating given by the user (e.g., 1-5).
 *  @param string $connection  (Optional) Database connection object. If not provided, 
 *                           the function will attempt to create one.
 *
 *  @return bool True on successful insertion, false on failure.
 */
function create_user_review(string $product_id, string $user_name, string $review_text, int $rating, $connection = null) {
    // Create database connection if none is provided
    if ($connection === null) {
        //  Replace with your database connection details
        $db_host = 'localhost';
        $db_name = 'your_database_name';
        $db_user = 'your_database_user';
        $db_password = 'your_database_password';

        $connection = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($connection->connect_error) {
            die("Connection failed: " . $connection->connect_error);
        }
    }

    // Sanitize inputs to prevent SQL injection
    $product_id = $connection->real_escape_string($product_id);
    $user_name = $connection->real_escape_string($user_name);
    $review_text = $connection->real_escape_string($review_text);
    $rating = $connection->real_escape_string($rating);


    // SQL query
    $query = "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES 
              ('$product_id', '$user_name', '$review_text', '$rating')";

    if ($connection->query($query) === TRUE) {
        return true;
    } else {
        echo "Error: " . $query . "<br>" . $connection->error;  // Log or display the error
        return false;
    }
}


/**
 * Retrieves reviews for a product.
 *
 * @param string $product_id The product ID.
 * @param $connection (Optional) Database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_product_reviews(string $product_id, $connection = null) {
    if ($connection === null) {
        //  Replace with your database connection details
        $db_host = 'localhost';
        $db_name = 'your_database_name';
        $db_user = 'your_database_user';
        $db_password = 'your_database_password';

        $connection = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($connection->connect_error) {
            die("Connection failed: " . $connection->connect_error);
        }
    }

    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $connection->query($query);

    if ($result->num_rows > 0) {
        $reviews = [];
        while($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return []; // Return an empty array if no reviews are found
    }
}


/**
 * Displays a single review
 * @param array $review
 */
function display_review(array $review) {
    echo "<b>User:</b> " . $review['user_name'] . "<br>";
    echo "<b>Rating:</b> " . $review['rating'] . " / 5<br>";
    echo "<b>Review:</b> " . $review['review_text'] . "<br><br>";
}


// --- Example Usage (Simulated Data for demonstration) ---
// In a real application, these reviews would come from a form submission.

// Simulate a database connection (for demonstration only)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';
$connection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}



// Create some sample reviews
$review1 = create_user_review('product_123', 'John Doe', 'Great product! Highly recommended.', 5, $connection);
$review2 = create_user_review('product_123', 'Jane Smith', 'Could be better, but overall good.', 4, $connection);
$review3 = create_user_review('product_456', 'Peter Jones', 'This is amazing!', 5, $connection);



// Get reviews for product_123
$reviews = get_product_reviews('product_123', $connection);

// Display the reviews
echo "<h2>Reviews for Product 123:</h2>";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        display_review($review);
    }
} else {
    echo "<p>No reviews found for this product.</p>";
}


// Close the database connection
$connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  Defaults to 0 for anonymous submissions.
 * @param string $timestamp (Optional)  Timestamp for the review - defaults to current time.
 * @return array An array containing the review details, or an error message if validation fails.
 */
function createReview(string $productName, string $reviewText, int $userId = 0, string $timestamp = null) {

  // Input Validation - Very Important!
  if (empty($productName)) {
    return ['error' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }
  if (!is_numeric($userId)) {
      $userId = 0;  // If invalid ID, default to anonymous.
  }


  //  You would likely store this in a database here
  //  For demonstration purposes, we'll just return an array
  //  representing the review details.


  $review = [
    'productName' => $productName,
    'reviewText' => $reviewText,
    'userId' => $userId,
    'timestamp' => $timestamp ?? time() // Use current time if timestamp is not provided
  ];

  return $review;
}


/**
 * Displays a single review.
 *
 * @param array $review A review array (as returned by createReview).
 * @return string HTML output of the review, or an error message if the review is not valid.
 */
function displayReview(array $review) {
  if (empty($review) || !isset($review['productName']) || !isset($review['reviewText'])) {
    return "<p style='color: red;'>Invalid Review Data</p>";
  }

  return "<div style='border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;'>";
  return "<p><strong>Product:</strong> " . htmlspecialchars($review['productName']) . "</p>";
  return "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
  return "<p><strong>User:</strong> " . ($review['userId'] > 0 ? "User #" . $review['userId'] : "Anonymous") . "</p>";
  return "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>"; // Format timestamp
  return "</div>";
}



// --- Example Usage ---

// 1. Create a Review
$reviewData = createReview("Awesome Widget", "This widget is fantastic! It does everything I need and more.", 123);

if (isset($reviewData['error'])) {
  echo "<p style='color: red;'>Error: " . $reviewData['error'] . "</p>";
} else {
  // 2. Display the Review
  $reviewOutput = displayReview($reviewData);
  echo $reviewOutput;
}


// Example of creating an invalid review:
$invalidReview = createReview("", "This is a bad review.");
if (isset($invalidReview['error'])) {
    echo "<p style='color: red;'>Error: " . $invalidReview['error'] . "</p>";
}
?>


<?php

/**
 * This function handles user reviews for a product.
 *
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of review objects. Each review object should have:
 *                       - $rating: An integer representing the rating (1-5).
 *                       - $comment: A string containing the review text.
 * @return array An array of formatted review strings for display.
 */
function formatUserReviews(string $productName, array $reviews): array {
    $formattedReviews = [];

    if (empty($reviews)) {
        $formattedReviews[] = "No reviews yet for $productName.";
        return $formattedReviews;
    }

    foreach ($reviews as $review) {
        $rating = $review['rating'];
        $comment = $review['comment'];

        // Validate rating (optional but recommended)
        if ($rating < 1 || $rating > 5) {
            continue; // Skip invalid reviews
        }

        $formattedReview = "Rating: $rating - Comment: $comment";
        $formattedReviews[] = $formattedReview;
    }

    return $formattedReviews;
}


// Example usage:
$product = "Awesome Widget";
$reviews = [
    ['rating' => 5, 'comment' => "This widget is fantastic! It does everything I need."],
    ['rating' => 4, 'comment' => "Great product, but could be a bit cheaper."],
    ['rating' => 3, 'comment' => "It's okay, nothing special."],
    ['rating' => 1, 'comment' => "Terrible! Don't buy this."],
];

$formatted = formatUserReviews($product, $reviews);

// Print the formatted reviews
echo "Reviews for $product:<br>";
foreach ($formatted as $review) {
    echo $review . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_id The unique identifier for the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5 stars).  Must be a valid integer.
 * @param string $comment The user's written review.
 * @param array $db_connection A database connection object.  (You'll need to establish this separately)
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $item_id, string $user_id, string $rating, string $comment, array $db_connection) {

  // Input validation - VERY IMPORTANT!
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    error_log("Invalid rating provided: " . $rating);
    return false;
  }

  if (empty($comment)) {
    error_log("Review comment is empty.");
    return false; // Or you could allow empty comments, but you'd need to handle them differently in your display.
  }
    
  // SQL query -  **IMPORTANT: Use prepared statements to prevent SQL injection!**
  $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) 
          VALUES (?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Failed to prepare statement: " . $db_connection->error);
    return false;
  }

  // Bind the parameters
  $stmt->bind_param("siss", $item_id, $user_id, $rating, $comment);

  // Execute the statement
  if (!$stmt->execute()) {
    error_log("Failed to execute statement: " . $stmt->error);
    return false;
  }

  // Close the statement
  $stmt->close();

  return true;
}


/**
 * Display User Reviews
 *
 * Retrieves and displays user reviews for a given item.
 *
 * @param string $item_id The ID of the item to retrieve reviews for.
 * @param array $db_connection A database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.  Each review object
 *              will have 'id', 'item_id', 'user_id', 'rating', 'comment', 'date_added'
 */
function displayUserReviews(string $item_id, array $db_connection) {
  $sql = "SELECT id, item_id, user_id, rating, comment, date_added
          FROM reviews
          WHERE item_id = ?
          ORDER BY date_added DESC"; // Show most recent reviews first

  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Failed to prepare statement: " . $db_connection->error);
    return [];
  }

  $stmt->bind_param("s", $item_id);

  $stmt->execute();

  $reviews = [];
  $result = $stmt->get_result();

  if ($result === false) {
    error_log("Failed to get result: " . $db_connection->error);
    return [];
  }


  while ($row = $result->fetch_assoc()) {
    $reviews[] = $row;
  }

  $stmt->close();

  return $reviews;
}

// Example Usage (Illustrative - requires a database connection to be established)

// Assume you have a database connection object $conn

// 1. Save a review
$item_id = "product_123";
$user_id = "user_456";
$rating = 4;
$comment = "Great product! Highly recommended.";

if (saveUserReview($item_id, $user_id, $rating, $comment, $conn)) {
  echo "Review saved successfully!";
} else {
  echo "Error saving review.";
}


// 2. Display the reviews for that item
$reviews = displayUserReviews($item_id, $conn);

if (empty($reviews)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<h2>Reviews for " . $item_id . "</h2>";
  foreach ($reviews as $review) {
    echo "<p><strong>User:</strong> " . $review['user_id'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "</p>";
  }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId  The ID of the product the review is for.
 * @param string $username   The username of the reviewer.
 * @param string $rating    The rating (e.g., 1-5).
 * @param string $comment    The review text.
 * @param int $id (Optional) The ID of the review to update. If not provided, a new review is created.
 *
 * @return array An array containing the result of the operation:
 *              - 'success': True if the operation was successful.
 *              - 'message': A message describing the result (e.g., 'Review created', 'Review updated', 'Error: ...').
 *              - 'review': The newly created or updated review object.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, int $id = 0) {
  // Basic validation
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Error: Product ID cannot be empty.', 'review' => null];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Error: Username cannot be empty.', 'review' => null];
  }
  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['success' => false, 'message' => 'Error: Username must contain only alphanumeric characters and underscores.', 'review' => null];
  }
  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Error: Rating must be a number between 1 and 5.', 'review' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Error: Comment cannot be empty.', 'review' => null];
  }
  if (!is_numeric($id)) {
    $id = 0; // Default to 0 for new reviews
  }
  
  // Create the review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => (int)$rating,
    'comment' => $comment,
    'dateCreated' => date('Y-m-d H:i:s')
  ];

  // Save the review (Simulated database interaction - Replace with your actual database logic)
  // This part simulates saving the review to a database.  Adapt this to your database connection and schema.
  // Example using a hypothetical database table named 'reviews':
  // $db = new DatabaseConnection();  // Instantiate your database connection
  // $sql = "INSERT INTO reviews (productId, username, rating, comment, dateCreated) VALUES (?, ?, ?, ?, ?)";
  // $stmt = $db->prepare($sql);
  // $stmt->bind_param("ssisss", $productId, $username, $rating, $comment);
  // $stmt->execute();
  // $reviewId = $db->lastInsertId();

  // Placeholder - assume successful saving
  // In a real application, you'd return the review ID.
  $reviewId = 123; // Replace with actual review ID if you were saving to a database.
  
  return ['success' => true, 'message' => 'Review created successfully', 'review' => $review];
}


// Example Usage:
// 1. Create a new review:
$result = createOrUpdateReview('P123', 'john.doe', 4, 'Great product! I highly recommend it.', 0);
print_r($result);

// 2. Update an existing review (assuming review ID 123 exists):
$result = createOrUpdateReview('P456', 'jane.smith', 5, 'Excellent value for money.', 123);
print_r($result);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and saves reviews to a database.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True on success, false on failure (e.g., invalid input).
 */
function create_review(string $product_id, string $user_id, string $rating, string $comment) {
  // Validation: Basic input validation
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    error_log("Invalid review input: Missing product ID, user ID, rating, or comment.");  // Log for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating provided. Rating must be a number between 1 and 5.");
    return false;
  }

  // Database connection (Replace with your actual database connection details)
  $db_host = "localhost";
  $db_user = "your_db_user";
  $db_pass = "your_db_password";
  $db_name = "your_db_name";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage());
    return false;
  }

  // Prepare SQL statement
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $pdo->prepare($sql);

  // Bind parameters
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  // Execute the query
  try {
    $stmt->execute();
    return true; // Success!
  } catch (PDOException $e) {
    error_log("Database error during review creation: " . $e->getMessage());
    return false;
  } finally {
    $pdo = null; // Close the database connection
  }
}

// Example Usage:
// $product_id = "123";
// $user_id = "456";
// $rating = 4;
// $comment = "This product is great!";

// if (create_review($product_id, $user_id, $rating, $comment)) {
//   echo "Review created successfully!";
// } else {
//   echo "Failed to create review.";
// }
?>


<?php

/**
 * Reviews class to handle user reviews.
 */
class Review
{
    /**
     * @var array Reviews data (id, author, rating, comment)
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param int $reviewId The unique ID of the review.
     * @param string $author The name of the user who wrote the review.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment about the item.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $reviewId, string $author, int $rating, string $comment): bool
    {
        // Validate input
        if (!is_int($reviewId) || $reviewId <= 0) {
            return false;
        }
        if (!is_string($author) || empty($author)) {
            return false;
        }
        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false;
        }
        if (!is_string($comment) || empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'id' => $reviewId,
            'author' => $author,
            'rating' => $rating,
            'comment' => $comment,
        ];

        return true;
    }


    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null The review data if found, null otherwise.
     */
    public function getReview(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] === $reviewId) {
                return $review;
            }
        }

        return null;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false if the review isn't found.
     */
    public function deleteReview(int $reviewId): bool
    {
        $reviewIndex = -1;
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] === $reviewId) {
                $reviewIndex = $key;
                break;
            }
        }

        if ($reviewIndex !== -1) {
            unset($this->reviews[$reviewIndex]);
            return true;
        }

        return false;
    }

    /**
     * Updates a review by ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newAuthor The new author name.
     * @param int $newRating The new rating.
     * @param string $newComment The new comment.
     *
     * @return bool True on success, false if the review isn't found or if any validation fails.
     */
    public function updateReview(int $reviewId, string $newAuthor, int $newRating, string $newComment): bool
    {
        $review = $this->getReview($reviewId);
        if (!$review) {
            return false;
        }

        // Validate new inputs
        if (!is_string($newAuthor) || empty($newAuthor)) {
            return false;
        }
        if (!is_int($newRating) || $newRating < 1 || $newRating > 5) {
            return false;
        }
        if (!is_string($newComment) || empty($newComment)) {
            return false;
        }

        $review['author'] = $newAuthor;
        $review['rating'] = $newRating;
        $review['comment'] = $newComment;

        return true;
    }
}



// Example usage:
$reviewSystem = new Review();

// Add reviews
$reviewSystem->addReview(1, "John Doe", 4, "Great product!");
$reviewSystem->addReview(2, "Jane Smith", 5, "Excellent value for money.");
$reviewSystem->addReview(3, "Peter Jones", 3, "Could be better.");

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get a specific review
$review = $reviewSystem->getReview(2);
print_r($review);

// Update a review
$updateResult = $reviewSystem->updateReview(2, "Alice Brown", 5, "Fantastic!");
if ($updateResult) {
    print_r($review); // The review will have been updated.
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteResult = $reviewSystem->deleteReview(1);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

//Try to get deleted review
$deletedReview = $reviewSystem->getReview(1);
if (!$deletedReview) {
    echo "Review with ID 1 no longer exists.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_connection  A database connection object.
 *
 * @return array An array containing the response data:
 *              - 'success': true if the operation was successful, false otherwise.
 *              - 'message': A message describing the result.
 *              - 'review_id': The ID of the newly created review (if successful).
 *              - 'review': The full review data (if successful).
 */
function create_user_review(
    string $product_id,
    string $username,
    string $rating,
    string $comment,
    $db_connection
) {
    // Validate input (add more validation as needed)
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
        ];
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES ('$product_id', '$username', '$rating', '$comment')";

    // Execute the query
    $result = $db_connection->query($sql);

    if ($result) {
        // Get the ID of the newly created review
        $review_id = $db_connection->insert_id;

        // Get the full review data
        $review = [
            'review_id' => $review_id,
            'product_id' => $product_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
        ];

        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'review_id' => $review_id,
            'review' => $review,
        ];
    } else {
        // Handle the error
        $error_message = $db_connection->error;
        return [
            'success' => false,
            'message' => 'Error creating review: ' . $error_message,
        ];
    }
}

// Example usage (replace with your actual database connection)
// Assuming you have a database connection named $conn
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }


// $review_data = create_user_review(
//     '123',  // Product ID
//     'john.doe', // Username
//     '4',   // Rating
//     'This is a great product!', // Comment
//     $conn
// );

// print_r($review_data);


// Example: Reading Reviews
/**
 * Read Reviews
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param $db_connection Database connection object.
 *
 * @return array An array containing the review data, or an empty array if no reviews are found.
 */
function read_user_reviews(string $product_id, $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $db_connection->query($sql);

    if ($result->num_rows > 0) {
        $reviews = [];
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return []; // Return an empty array if no reviews are found.
    }
}


// Example of reading reviews:
// $product_id = '123';
// $reviews = read_user_reviews($product_id, $conn);
// print_r($reviews);
?>


<?php

/**
 * User Review Function - Basic Implementation
 *
 * This function takes a user's review text, a rating (1-5), and an optional user ID.
 * It stores the review in a simple array (for demonstration purposes).
 *
 * In a real application, you'd integrate this with a database.
 *
 * @param string $reviewText The text of the user's review.
 * @param int $rating The rating given by the user (1-5).
 * @param string|null $userId The ID of the user submitting the review.
 *
 * @return array An array containing the review details.
 */
function createReview(string $reviewText, int $rating, ?string $userId = null): array
{
    // Basic validation - important for security and data integrity.
    if (empty($reviewText)) {
        throw new InvalidArgumentException("Review text cannot be empty.");
    }

    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    $review = [
        'text' => $reviewText,
        'rating' => $rating,
        'userId' => $userId, // Store user ID for later use
        'date' => date('Y-m-d H:i:s'), // Add a timestamp for review creation
    ];

    return $review;
}

// --- Example Usage ---

try {
    $review1 = createReview("This product is amazing! I highly recommend it.", 5, "user123");
    echo "Review 1:
";
    print_r($review1);
    echo "

";

    $review2 = createReview("It was okay, nothing special.", 3);
    echo "Review 2:
";
    print_r($review2);
    echo "

";

    // Example of error handling - Invalid rating
    try {
        $invalidReview = createReview("Bad review", 6);
    } catch (InvalidArgumentException $e) {
        echo "Error creating review: " . $e->getMessage() . "
";
    }

} catch (InvalidArgumentException $e) {
    // Catch any errors that might be thrown by createReview()
    echo "An error occurred: " . $e->getMessage() . "
";
}
?>


<?php
// Example of sanitization (important for security)
$sanitizedReviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

// ... (Database query using prepared statements to prevent SQL injection)
?>


<?php

/**
 * Reviews class to handle user reviews for a product or service.
 */
class Review {

  private $productId;
  private $userId;
  private $rating;
  private $comment;
  private $timestamp;


  /**
   * Constructor for the Review class.
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($productId, $userId, $rating, $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->timestamp = time(); // Record the current timestamp
  }

  /**
   * Getters for the review properties.
   *
   * @return mixed
   */
  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getTimestamp() {
    return $this->timestamp;
  }

  /**
   *  Returns a string representation of the review object.  Useful for debugging.
   *
   * @return string
   */
  public function __toString() {
    return "Review ID: " . $this->getId() . ", User ID: " . $this->getUserId() . ", Rating: " . $this->getRating() . ", Comment: " . $this->getComment() . ", Timestamp: " . $this->getTimestamp();
  }

  /**
   * Gets the review ID. This is a simple internal ID.
   *
   * @return int
   */
  private function getId() {
    return mt_rand(1000, 9999); //Generate a random ID for each review.  In a real application, you'd use an auto-incrementing database column.
  }


}



/**
 * Example Usage and Basic Review Function
 */

/**
 *  This function takes a review object and returns a user-friendly review string.
 *  It could be expanded to handle validation, sanitization, etc.
 *
 * @param Review $review The Review object to format.
 * @return string  A formatted string representing the review.
 */
function formatReview(Review $review) {
  return "User ID: " . $review->getUserId() . ", Rating: " . $review->getRating() . ", Comment: \"" . htmlspecialchars($review->getComment()) . "\".";
}


// Example Usage:
$review1 = new Review(123, 456, 5, "Excellent product!  Highly recommended.");
$review2 = new Review(456, 789, 4, "Good product, but could be better.");

echo "Review 1: " . formatReview($review1) . "
";
echo "Review 2: " . formatReview($review2) . "
";



//Example of storing reviews (This is just a basic example; a database is preferable in a real application)
$reviews = [];
$reviews[] = $review1;
$reviews[] = $review2;

//Printing out the reviews stored in the array:
echo "Reviews stored in the array:
";
foreach ($reviews as $review) {
    echo formatReview($review) . "
";
}



?>


<?php

/**
 * Class Review
 *
 * This class provides a simple function to store and retrieve user reviews.
 * It uses a file to persist the reviews, allowing for basic persistence.
 *
 * Note: This is a simplified example for demonstration purposes.  For production
 *       applications, consider using a database.
 */
class Review {

    private $filename = 'reviews.txt'; // File to store reviews

    /**
     * Adds a new review to the database.
     *
     * @param string $username The username of the reviewer.
     * @param string $review The review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $review): bool {
        $data = file_get_contents($this->filename);
        if ($data === false) {
            // Handle file not found or other read errors
            return false;
        }

        $review_entry = "User: $username - $review";
        if (strpos($data, $review_entry) === false) { // Check if review already exists
            $data .= "
$review_entry";
            if (file_put_contents($this->filename, $data) === false) {
                // Handle write errors
                return false;
            }
            return true;
        } else {
            // Review already exists - return false to prevent duplicates
            return false;
        }
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review strings.
     */
    public function getAllReviews(): array {
        $data = file_get_contents($this->filename);
        if ($data === false) {
            return []; // Return empty array on error
        }

        $reviews = explode("
", $data);
        return array_slice($reviews, 0); //Return only the actual reviews, removing empty elements.
    }

    /**
     * Clears all reviews.  Use with caution!
     */
    public function clearReviews(): void {
        if (file_put_contents($this->filename, '') === false) {
            // Handle write errors
            // Log error or throw exception instead of just returning false
            error_log("Failed to clear reviews file.");
        }
    }
}



// Example usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("JohnDoe", "This product is amazing!");
$reviewSystem->addReview("JaneSmith", "Great value for money.");
$reviewSystem->addReview("JohnDoe", "I had a problem with the delivery."); // Duplicate - should not be added


// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo $review . "
";
}

// Clear reviews (demonstration)
// $reviewSystem->clearReviews();
// echo "
Reviews after clearing:
";
// foreach ($reviewSystem->getAllReviews() as $review) {
//     echo $review . "
";
// }


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product being reviewed.
 * @param string $productName (Optional) The name of the product for display.
 * @param string $reviewText The text of the review submitted by the user.
 * @param int $userId (Optional)  The ID of the user submitting the review.  Useful for moderation/tracking.
 * @return array  An array containing the review data, including the review text and user ID.
 *                Returns an empty array if the review submission fails.
 */
function submitReview(string $productId, string $productName = '', string $reviewText, int $userId = 0)
{
    // **INPUT VALIDATION - IMPORTANT!**
    if (empty($productId)) {
        error_log("Error: Product ID is required."); // Log the error - crucial for debugging
        return [];
    }
    if (empty($reviewText)) {
        error_log("Error: Review text is required.");
        return [];
    }


    // **Data Sanitization & Security - CRITICAL!**
    $reviewText = htmlspecialchars($reviewText); // Protect against XSS attacks

    // **Store the review in a database (Example - you'd replace this with your actual DB code)**
    // This is just a demonstration; adapt to your database setup.
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database credentials

    $stmt = $db->prepare("INSERT INTO reviews (productId, productName, reviewText, userId) VALUES (?, ?, ?, ?)");
    $stmt->execute([$productId, $productName, $reviewText, $userId]);

    // **Success Response**
    return [
        'reviewId' => $db->lastInsertId(), // Get the ID of the newly created review
        'productId' => $productId,
        'productName' => $productName,
        'reviewText' => $reviewText,
        'userId' => $userId,
        'success' => true,
        'message' => "Review submitted successfully!"
    ];
}


/**
 * Display Reviews Function
 *
 * This function retrieves reviews for a given product ID and displays them.
 *
 * @param string $productId The ID of the product for which to retrieve reviews.
 * @return array  An array containing the review data. Returns an empty array if no reviews are found.
 */
function displayReviews(string $productId)
{
    // **Retrieve reviews from the database (Example - you'd replace this with your actual DB code)**
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database credentials
    $stmt = $db->prepare("SELECT reviewId, reviewText, userId, productName FROM reviews WHERE productId = ?");
    $stmt->execute([$productId]);

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = [
            'reviewId' => $row['reviewId'],
            'reviewText' => $row['reviewText'],
            'userId' => $row['userId'],
            'productName' => $row['productName']
        ];
    }

    return $reviews;
}



// **Example Usage (Demonstration)**

// 1. Submit a review:
$reviewData = submitReview('123', 'Awesome Widget', 'This is the best widget ever!');
if ($reviewData) {
    echo "Review submitted successfully! Review ID: " . $reviewData['reviewId'] . "<br>";
} else {
    echo "Review submission failed. Check the error logs for details.<br>";
}


// 2. Display the reviews for product '123':
$reviews = displayReviews('123');
if (!empty($reviews)) {
    echo "<h3>Reviews for Product 123:</h3>";
    foreach ($reviews as $review) {
        echo "<p><strong>User:</strong> " . ($review['userId'] > 0 ? "User ID: " . $review['userId'] : "Anonymous") . "</p>";
        echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
    }
} else {
    echo "<p>No reviews found for product 123.</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $reviewText The user's review text.
 * @param int    $rating     The rating (1-5).
 * @param string $username   The user's username.  Optional.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully submitted, false otherwise.
 *              - 'message': A success or error message.
 *              - 'review': The submitted review data (for display or saving).
 */
function submitReview(string $productId, string $reviewText, int $rating, string $username = null)
{
    // Input validation
    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => null
        ];
    }

    if ($rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be between 1 and 5.',
            'review' => null
        ];
    }

    // Simulate saving to a database (replace with your database logic)
    // In a real application, you would insert this data into a database table.
    $review = [
        'product_id' => $productId,
        'review_text' => $reviewText,
        'rating' => $rating,
        'username' => $username,
        'timestamp' => time()
    ];

    // Simulate success
    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $review
    ];
}


/**
 * Displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return string HTML markup for displaying the reviews.
 */
function displayReviews(string $productId)
{
    // Simulate fetching reviews from a database.  Replace this with your data access code.
    $reviews = [
        'product123' => [
            ['username' => 'Alice', 'review_text' => 'Great product!', 'rating' => 5, 'timestamp' => time() - 86400 * 30], // 30 days ago
            ['username' => 'Bob', 'review_text' => 'Good value.', 'rating' => 4, 'timestamp' => time() - 86400 * 15], // 15 days ago
            ['username' => 'Charlie', 'review_text' => 'Could be better.', 'rating' => 3, 'timestamp' => time() - 86400 * 60]  // 60 days ago
        ],
        'product456' => [
            ['username' => 'David', 'review_text' => 'Excellent quality!', 'rating' => 5, 'timestamp' => time() - 86400 * 72]
        ]
    ];

    if (isset($reviews[$productId])) {
        $review_html = '<ul>';
        foreach ($reviews[$productId] as $review) {
            $username = isset($review['username']) ? $review['username'] : 'Anonymous';
            $review_html .= '<li><strong>' . $username . ':</strong> ' . htmlspecialchars($review['review_text']) . ' (' . $review['rating'] . '/5) - ' . date('Y-m-d H:i:s', $review['timestamp']) . '</li>';
        }
        $review_html .= '</ul>';
        return $review_html;
    } else {
        return '<p>No reviews yet.</p>';
    }
}



// Example Usage:

// 1. Submitting a review:
$result = submitReview('product123', 'This is a fantastic product!', 5, 'Eve');
if ($result['success']) {
    echo '<p>' . $result['message'] . '</p>';
    print_r($result['review']); // Display the submitted review data.
} else {
    echo '<p>Error: ' . $result['message'] . '</p>';
}

// 2. Displaying reviews for product 'product123':
$reviews_html = displayReviews('product123');
echo $reviews_html;

// 3.  Displaying reviews for product 'product456':
$reviews_html = displayReviews('product456');
echo $reviews_html;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, display, and manage user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5).
 * @param array $dbConnection Database connection object.  (Important: Use PDO for security!)
 *
 * @return bool True on success, false on failure.
 */
function addReview(string $productId, string $userEmail, string $reviewText, int $rating, PDO $dbConnection) {
  // Input validation - CRITICAL for security and data integrity
  if (empty($productId)) {
    error_log("Invalid product ID provided.");
    return false;
  }
  if (empty($userEmail)) {
    error_log("Invalid user email provided.");
    return false;
  }
  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Invalid rating provided. Rating must be between 1 and 5.");
    return false;
  }

  // SQL Injection Prevention - IMPORTANT!  Use prepared statements.
  $sql = "INSERT INTO reviews (product_id, user_email, review_text, rating)
          VALUES (:product_id, :user_email, :review_text, :rating)";

  try {
    $stmt = $dbConnection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_email', $userEmail);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);

    $result = $stmt->execute();

    if ($result) {
      return true;
    } else {
      error_log("Error executing review insert: " . print_r($stmt->errorInfo(), true)); //Log the error
      return false;
    }

  } catch (PDOException $e) {
    error_log("PDOException: " . $e->getMessage()); // Log the PDO exception
    return false;
  }
}

/**
 *  Example Retrieval Function (for demonstration - would likely be much more complex in a real application)
 *
 * @param int $productId The product ID to retrieve reviews for.
 * @param PDO $dbConnection Database connection object.
 *
 * @return array An array of review objects (or an empty array if none are found).
 */
function getReviewsForProduct(int $productId, PDO $dbConnection) {
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";

  try {
    $stmt = $dbConnection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all rows as associative arrays

    return $reviews;

  } catch (PDOException $e) {
    error_log("PDOException: " . $e->getMessage());
    return [];
  }
}

// --- Example Usage (Illustrative - replace with your actual database connection) ---
// **IMPORTANT:  Replace the following with your actual database configuration!**
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

try {
    $dbConnection = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPass);
    $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Important for error handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}



// Add a review
$product_id = 123;
$user_email = 'test@example.com';
$review_text = 'Great product! I highly recommend it.';
$rating = 5;

if (addReview($product_id, $user_email, $review_text, $rating, $dbConnection)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Retrieve reviews for product 123
$reviews = getReviewsForProduct($product_id, $dbConnection);

echo "Reviews for product " . $product_id . ":
";
if (empty($reviews)) {
    echo "No reviews found.
";
} else {
    foreach ($reviews as $review) {
        echo "  Product ID: " . $review['product_id'] . "
";
        echo "  User Email: " . $review['user_email'] . "
";
        echo "  Review Text: " . $review['review_text'] . "
";
        echo "  Rating: " . $review['rating'] . "
";
        echo "  --- Separator ---
";
    }
}

// Close the database connection (Good practice)
$dbConnection = null;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews with basic details.
 * It includes validation to ensure data integrity and handles errors.
 *
 * @param string $username      The user's name or identifier.
 * @param string $rating        The rating (e.g., 1-5 stars).
 * @param string $comment       The user's comment or feedback.
 * @param string $review_id  (Optional) Unique ID for the review.  If not provided, one will be generated.
 *
 * @return array  An array containing:
 *                - 'success' => true if the review was saved successfully.
 *                - 'message' => A message describing the outcome.
 *                - 'review_id' => The ID of the newly created review (if applicable).
 *
 * @return array  Returns an empty array on failure with an error message.
 */
function saveUserReview(string $username, string $rating, string $comment, string $review_id = null) {
  // Input Validation
  if (empty($username)) {
    return array('success' => false, 'message' => 'Username cannot be empty.', 'review_id' => null);
  }

  if (empty($rating)) {
    return array('success' => false, 'message' => 'Rating cannot be empty.', 'review_id' => null);
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return array('success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review_id' => null);
  }

  if (empty($comment)) {
    return array('success' => false, 'message' => 'Comment cannot be empty.', 'review_id' => null);
  }

  //  Database connection (Replace with your actual database credentials)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (username, rating, comment, created_at) VALUES (:username, :rating, :comment, NOW())"
    );

    // Bind parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $stmt->execute();

    // Get the ID of the newly created review
    $review_id = $db->lastInsertId();

    return array('success' => true, 'message' => 'Review saved successfully.', 'review_id' => $review_id);

  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage()); // Log the error for debugging
    return array('success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'review_id' => null);
  }
}


// Example Usage:

// Save a review with a provided ID
$review_data = saveUserReview('John Doe', 4, 'Great product!', '123');
print_r($review_data);

// Save a review without a provided ID (ID will be auto-generated)
$review_data = saveUserReview('Jane Smith', 5, 'Excellent service!', null);
print_r($review_data);

// Example demonstrating error handling:
$review_data = saveUserReview('', 3, 'Invalid review', null);
print_r($review_data);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It handles validation, sanitization, and storage (simplified for demonstration).
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username  The username of the user submitting the review (optional).
 * @param string $rating   The rating (1-5) submitted by the user (optional).
 * @param string $storageMethod  'file' or 'database'.  Determines how reviews are stored.
 *
 * @return array An array containing the review data (success or error messages).
 */
function submitReview(string $productId, string $reviewText, string $username = null, int $rating = null, string $storageMethod = 'file')
{
    // Validation and Sanitization
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating === null || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating.  Please enter a number between 1 and 5.'];
    }

    // Sanitize input (Basic - improve for production)
    $reviewText = htmlspecialchars(trim($reviewText));  // Sanitize for HTML output

    // Store the review
    $reviewData = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'username' => $username,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for ordering
    ];

    if ($storageMethod === 'file') {
        // Save to a file (basic example - adapt to your needs)
        $filename = "reviews_" . $productId . ".txt";
        file_put_contents($filename, json_encode($reviewData));
        return ['success' => true, 'message' => 'Review submitted successfully.'];
    } elseif ($storageMethod === 'database') {
        // Save to a database (example using a placeholder)
        // You'll need to connect to your database and perform the insert query here
        // Example:
        // $db = new DatabaseConnection();
        // $stmt = $db->prepare("INSERT INTO reviews (productId, reviewText, username, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
        // $stmt->bind_param("ssisii", $productId, $reviewText, $username, $rating, $timestamp);
        // $stmt->execute();
        // $stmt->close();
        return ['success' => true, 'message' => 'Review submitted successfully (to database - placeholder).'];
    } else {
        return ['success' => false, 'message' => 'Invalid storage method.  Choose "file" or "database".'];
    }
}


/**
 * Display Reviews Function
 *
 * Displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @param string $storageMethod 'file' or 'database'.
 */
function displayReviews(string $productId, string $storageMethod = 'file')
{
    // Fetch reviews based on the storage method
    $reviews = [];

    if ($storageMethod === 'file') {
        $filename = "reviews_" . $productId . ".txt";
        if (file_exists($filename)) {
            $fileContent = file_get_contents($filename);
            $reviews = json_decode($fileContent, true); // Decode as an associative array
            if ($reviews === null) {
                echo "<p>Error reading reviews from file.</p>";
            }
        } else {
            echo "<p>No reviews found for this product.</p>";
        }

    } elseif ($storageMethod === 'database') {
        // Replace with your database query logic
        // Example:
        // $db = new DatabaseConnection();
        // $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = ? ORDER BY timestamp DESC");
        // $stmt->bind_param("s", $productId);
        // $stmt->execute();
        // $result = $stmt->get_result();

        // while ($row = $result->fetch_assoc()) {
        //     $reviews[] = $row;
        // }
        // $stmt->close();

        echo "<p>Database review display placeholder - implement your query here.</p>";
    } else {
        echo "<p>Invalid storage method.</p>";
    }

    // Display the reviews
    echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['username'] . "</strong> - " . $review['reviewText'] . " (" . $review['rating'] . "/5) - " . date("Y-m-d H:i:s", strtotime($review['timestamp']));
            echo "</li>";
        }
        echo "</ul>";
    }
}



// --- Example Usage ---
//Submit a review:
$result = submitReview('123', 'This is a great product!');
if ($result['success']) {
    echo "<p>Review submitted successfully: " . $result['message'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

// Display the reviews
displayReviews('123');

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It utilizes a simple database to store reviews.  For a production environment, 
 * you'd want a more robust database and potentially input validation and sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The review text.
 * @return array          An array containing the review ID, success status, and optional error message.
 */
function createReview(string $product_id, string $user_id, string $rating, string $comment)
{
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    // Input Validation (Basic example - enhance for production)
    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        return ['id' => null, 'success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['id' => null, 'success' => false, 'message' => 'Comment cannot be empty.'];
    }

    try {
        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind parameters to prevent SQL injection
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the statement
        $stmt->execute();

        // Get the ID of the inserted row
        $review_id = $db->lastInsertId();

        return ['id' => $review_id, 'success' => true, 'message' => 'Review created successfully.'];

    } catch (PDOException $e) {
        // Handle database errors
        return ['id' => null, 'success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Retrieve a single review
 *
 * @param int $review_id The ID of the review to retrieve.
 * @return array An array containing the review data or an empty array if not found.
 */
function getReview(int $review_id) {
  // Database connection (Replace with your actual database connection)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE id = ?");
    $stmt->bindParam(1, $review_id);
    $stmt->execute();

    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    return $review ?: []; // Return empty array if no review found
  } catch (PDOException $e) {
    return ['id' => null, 'success' => false, 'message' => 'Database error: ' . $e->getMessage()];
  }
}


/**
 * Update a review
 *
 * @param int $review_id The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 * @return array An array containing the updated review data or an error message.
 */
function updateReview(int $review_id, string $rating, string $comment) {
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    // Input Validation (Basic - enhance for production)
    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.'];
    }

    try {
        $stmt = $db->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
        $stmt->bindParam(1, $rating);
        $stmt->bindParam(2, $comment);
        $stmt->bindParam(3, $review_id);

        $stmt->execute();

        return ['success' => true, 'message' => 'Review updated successfully.'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Delete a review
 *
 * @param int $review_id The ID of the review to delete.
 * @return array An array indicating success or failure.
 */
function deleteReview(int $review_id) {
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->bindParam(1, $review_id);
        $stmt->execute();

        return ['success' => true, 'message' => 'Review deleted successfully.'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


// Example Usage (After creating the 'reviews' table)
// $newReview = createReview(1, 123, 4, 'This is a great product!');
// print_r($newReview);

// $review = getReview(1);
// print_r($review);

// $updatedReview = updateReview(1, 5, 'Excellent product, highly recommended.');
// print_r($updatedReview);

// $deletedReview = deleteReview(1);
// print_r($deletedReview);
?>


<?php

/**
 * User Review Class
 *
 * Allows users to submit and view reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $name The name of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($name, $rating, $comment)
    {
        if (!is_string($name) || !is_string($comment)) {
            return false; // Invalid input
        }

        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'name' => $name,
            'rating' => $rating,
            'comment' => $comment,
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews based on a rating range.
     *
     * @param int $minRating The minimum rating (inclusive).
     * @param int $maxRating The maximum rating (inclusive).
     *
     * @return array An array of review objects within the specified rating range.
     */
    public function getReviewsByRange($minRating, $maxRating)
    {
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['rating'] >= $minRating && $review['rating'] <= $maxRating) {
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Calculates the average rating.
     *
     * @return float|null The average rating, or null if no reviews have been submitted.
     */
    public function getAverageRating()
    {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($this->getAllReviews());
    }

    /**
     * Clears all reviews.
     *
     * @return void
     */
    public function clearReviews()
    {
        $this->reviews = [];
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('Alice', 5, 'Great product!  Highly recommended.');
$reviewSystem->addReview('Bob', 4, 'Good, but could be better.');
$reviewSystem->addReview('Charlie', 3, 'Okay, nothing special.');
$reviewSystem->addReview('David', 5, 'Excellent value for money!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get reviews with a rating of 4 or 5
$highRatedReviews = $reviewSystem->getReviewsByRange(4, 5);
print_r($highRatedReviews);

// Get the average rating
$averageRating = $reviewSystem->getAverageRating();
echo "Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews yet') . "
";

// Clear the reviews
$reviewSystem->clearReviews();
print_r($reviewSystem->getAllReviews());  // Should be empty
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews
 * for a given product or item.
 *
 * @param string $product_id The ID of the product or item the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment   The user's review comment.
 * @param array  $db_connection  Database connection object (optional, if not provided, creates a dummy one).
 *
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, False otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review, if successful.
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, $db_connection = null)
{
    $success = false;
    $message = '';
    $review_id = null;

    // Database connection (create dummy if not provided)
    if ($db_connection === null) {
        $db_connection = new stdClass(); // Dummy database object
        $db_connection->connection = "localhost";
        $db_connection->username = "your_username";
        $db_connection->password = "your_password";
        $db_connection->database = "your_database";
    }


    try {
        // Validate inputs (basic validation - expand as needed)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            throw new Exception("Invalid rating. Rating must be a number between 1 and 5.");
        }

        if (empty($comment)) {
            throw new Exception("Comment cannot be empty.");
        }

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";

        // Prepare the statement
        $stmt = $db_connection->connection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query
        $stmt->execute();

        // Get the ID of the newly created review
        $review_id = $db_connection->connection->lastInsertId();


        $success = true;
        $message = "Review created successfully!";

    } catch (Exception $e) {
        $message = "Error creating review: " . $e->getMessage();
        error_log($e->getMessage()); // Log the error for debugging
    }

    return ['success' => $success, 'message' => $message, 'review_id' => $review_id];
}


// Example Usage:
//  This is just for demonstration, replace with your actual database connection details.

// Sample database setup (for demonstration)
//  In a real application, you would connect to your actual database.
// $db_connection = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

$review_data = create_user_review(
    'product123',
    'user456',
    3,
    'Great product!  Highly recommended.',
    $db_connection // Pass your database connection object
);

if ($review_data['success']) {
    echo "Review created with ID: " . $review_data['review_id'] . "<br>";
    echo "Message: " . $review_data['message'] . "<br>";
} else {
    echo "Failed to create review. Message: " . $review_data['message'] . "<br>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and display user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId  (Optional)  The unique ID for the review.  If not provided, auto-generated.
     * @param int $userId   The ID of the user who wrote the review.
     * @param int $rating   The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product/item.
     */
    public function __construct($reviewId = null, $userId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp for date
    }

    /**
     * Getters for each property.
     *
     * @return mixed  The value of the property.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display the review in a formatted string.
     *
     * @return string  A string containing the review details.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() . "
" .
               "User ID: " . $this->getUserId() . "
" .
               "Rating: " . $this->getRating() . "
" .
               "Comment: " . $this->getComment() . "
" .
               "Date: " . $this->getDate();
    }
}

/**
 * User Review Function (Example Usage)
 */
function processUserReview($userId, $rating, $comment) {
    // Create a new UserReview object
    $review = new UserReview($userId, $userId, $rating, $comment);

    // Display the review
    echo $review->displayReview() . "
";

    // Optionally, you could save this review to a database here...
    // This is just a demonstration.
}


// Example Usage:
processUserReview(123, 5, "Excellent product! Highly recommended.");
processUserReview(456, 3, "It's okay, but could be better.");
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or service.
 * It includes validation, sanitization, and basic formatting.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given (1-5). Defaults to 0.
 * @return array|string  Returns an array of reviews or a single review string.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {
    // **Input Validation & Sanitization** - CRITICAL for security!
    $reviewerName = trim($reviewerName); // Remove leading/trailing whitespace
    $reviewText = trim($reviewText);
    $rating = intval($rating); // Ensure rating is an integer

    if (empty($reviewerName)) {
        return "Error: Reviewer name cannot be empty.";
    }

    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // **Data Preparation & Formatting**
    $formattedReview = "Reviewer: " . $reviewerName . "<br>";
    $formattedReview .= "Rating: " . $rating . " stars<br>";
    $formattedReview .= "Review: " . $reviewText . "<br>";

    return $formattedReview;
}



/**
 * Example Usage:
 */

// Single Review Creation
$review = createReview("product_123", "Alice Smith", "Great product!  I highly recommend it.", 5);
echo $review;

echo "<br><br>";

// Multiple Reviews (example - you'd likely store these in a database)
$reviews = [
    ["productId" => "product_123", "reviewerName" => "Bob Johnson", "reviewText" => "Good value for the price.", 4],
    ["productId" => "product_456", "reviewerName" => "Charlie Brown", "reviewText" => "Could be better.", 2],
];

// Displaying the reviews (example - you'd likely loop through a database)
foreach ($reviews as $reviewData) {
    echo createReview($reviewData["productId"], $reviewData["reviewerName"], $reviewData["reviewText"], $reviewData["rating"]);
    echo "<br><br>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, saves them to a database,
 * and optionally displays a summary of the reviews.
 *
 * @param string $name The name of the user submitting the review.
 * @param string $rating A rating (e.g., 1-5).
 * @param string $comment The user's review text.
 * @param string $db_connection A database connection object (e.g., mysqli or PDO).
 * @param string $table_name The name of the table to store reviews in.
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $name, string $rating, string $comment, $db_connection, string $table_name) {
  // Validate input (basic example - you should add more robust validation)
  if (empty($name) || empty($rating) || empty($comment)) {
    error_log("Missing required data in review submission."); // Log the error
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating provided: " . $rating);
    return false;
  }

  // Prepare the SQL query
  $sql = "INSERT INTO `$table_name` (name, rating, comment) 
          VALUES ('$name', '$rating', '$comment')";

  // Execute the query
  try {
    $stmt = $db_connection->prepare($sql);
    $stmt->execute();
    return true;
  } catch (Exception $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage (This is just for demonstration)
// Assuming you have a database connection object $conn and a table named 'reviews'
// with columns: id (int, auto-increment), name (varchar), rating (int), comment (text)


// Example Database Connection (Replace with your actual connection)
//$conn = new mysqli("localhost", "username", "password", "database_name");
//$conn->query("SET NAMES utf8mb4"); // Important for proper character encoding

// $review_success = saveUserReview("John Doe", 4, "Great product!", $conn, "reviews");

// if ($review_success) {
//   echo "Review saved successfully!";
// } else {
//   echo "Failed to save review.";
// }


// Example:  Displaying reviews (This part is optional and depends on your needs)
/**
 *  Example function to fetch and display reviews from a database.
 *
 * @param string $db_connection A database connection object.
 * @param string $table_name The name of the table to fetch reviews from.
 * @param int $limit The number of reviews to display (optional).
 */
function displayReviews( $db_connection, string $table_name, $limit = 10) {
    $sql = "SELECT id, name, rating, comment FROM `$table_name` ORDER BY id DESC LIMIT $limit";

    try {
        $stmt = $db_connection->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ($result) {
            echo "<h2>User Reviews</h2>";
            echo "<ul>";
            foreach ($result as $review) {
                echo "<li><strong>Name:</strong> " . htmlspecialchars($review['name']) . "<br>";
                echo "   <strong>Rating:</strong> " . $review['rating'] . "<br>";
                echo "   <strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "</li>";
            }
            echo "</ul>";
        } else {
            echo "No reviews found.";
        }
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a product or item.
 * It includes validation and basic sanitization.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param array $allowedTags  (Optional) An array of allowed HTML tags.  Defaults to an empty array,
 *                            preventing most HTML tags from being allowed.  
 * @return array An array containing:
 *   - 'success' (bool): True if the review was successfully submitted, false otherwise.
 *   - 'message' (string):  A message indicating the outcome (success or error).
 *   - 'review' (string): The submitted review if successful, or an empty string.
 */
function submitReview($productName, $reviewText, $allowedTags = []) {
    // Input Validation and Sanitization
    if (empty($productName)) {
        return array('success' => false, 'message' => 'Product name cannot be empty.', 'review' => '');
    }
    if (empty($reviewText)) {
        return array('success' => false, 'message' => 'Review text cannot be empty.', 'review' => '');
    }
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace

    // Sanitize HTML tags -  Important for security
    $reviewText = strip_tags($reviewText, $allowedTags);

    // You could add more robust sanitization here, such as:
    // - Escaping HTML entities
    // - Filtering out unsafe characters

    // Store the review (This is a simplified example -  in a real application,
    // you'd use a database or other persistent storage)
    $storedReview = $reviewText;

    return array('success' => true, 'message' => 'Review submitted successfully.', 'review' => $storedReview);
}


/**
 * Display User Reviews
 *
 * This function takes an array of reviews and displays them in an unordered list.
 *
 * @param array $reviews An array of reviews, each review being an associative array
 *                      with keys 'success', 'message', and 'review'.
 */
function displayReviews(array $reviews) {
    echo "<h2>User Reviews for " . htmlspecialchars($reviews[0]['message']) . "</h2>"; // Display the product name.  htmlspecialchars escapes characters for HTML output.

    if (count($reviews) === 0) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        if ($review['success']) {
            echo "<li>";
            echo htmlspecialchars($review['review']); // Escape the review text for HTML output.
            echo " - " . htmlspecialchars(getReviewAuthorName()); // Add the author name.
            echo "</li>";
        } else {
            echo "<li>Error: " . htmlspecialchars($review['message']) . "</li>";
        }
    }
    echo "</ul>";
}


// Example Usage (Illustrative -  You'd integrate this into a form and display)

// Simulate a review submission
$reviewResult = submitReview("Awesome Widget", "This widget is fantastic!  It does everything I need.");

// Display the result
displayReviews($reviewResult);


// Example with allowed tags
$allowedTags = ['b', 'i', 'u']; // Allow bold, italics, and underline
$reviewResult2 = submitReview("Another Product", "This is a <b style='color:red;'>bold</b> and *italic* review.");
displayReviews($reviewResult2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and handles database interactions.
 *
 * @param string $product_id The ID of the product to review.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 *
 * @return bool True if the review was successfully submitted, false otherwise.
 */
function submitUserReview(
    $product_id,
    $username,
    $rating,
    $comment,
    $db_host,
    $db_name,
    $db_user,
    $db_password
) {
    // Validate inputs (Add more sophisticated validation as needed)
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required fields for review submission."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating value.");
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES ('$product_id', '$username', '$rating', '$comment')";

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Connection failed: " . $conn->connect_error); // Log the error
        return false;
    }

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        error_log("Query failed: " . $conn->error); // Log the error
        return false;
    }

    // Close the connection
    $conn->close();
}



/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 */
function displayUserReviews(
    $product_id,
    $db_host,
    $db_name,
    $db_user,
    $db_password
) {
    // Prepare the SQL query
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Connection failed: " . $conn->connect_error);
        echo "<p>Error: Unable to connect to the database.</p>";
        return;
    }

    // Execute the query
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>User Reviews for Product ID: " . $product_id . "</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<div class='review'>";
            echo "<strong>Username:</strong> " . $row["username"] . "<br>";
            echo "<strong>Rating:</strong> " . $row["rating"] . "<br>";
            echo "<strong>Comment:</strong> " . $row["comment"] . "<br>";
            echo "</div>";
        }
    } else {
        echo "<p>No reviews found for this product.</p>";
    }

    // Close the connection
    $conn->close();
}


// Example Usage (Simulate a database setup and some reviews)

// Create a dummy database and table if it doesn't exist
$sql_create_db = "CREATE DATABASE IF NOT EXISTS my_reviews_db";
$conn = new mysqli("localhost", "root", "", "my_reviews_db");
if ($conn) {
    $conn->query($sql_create_db);
    $conn->close();
}


$sql_create_table = "CREATE TABLE IF NOT EXISTS reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT
)";

$conn = new mysqli("localhost", "root", "", "my_reviews_db");
if ($conn) {
    $conn->query($sql_create_table);
    $conn->close();
}



// Example Review Submission
$product_id = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  Easy to use.";
$success = submitUserReview($product_id, $username, $rating, $comment, "localhost", "my_reviews_db", "root", "");

if ($success) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Error submitting review.</p>";
}


// Example Review Display (After submitting a review)
displayUserReviews($product_id, "localhost", "my_reviews_db", "root", "");


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates a basic CRUD (Create, Read, Update, Delete) operation
 * using a simple array to store reviews.  For a production environment,
 * you'd typically use a database.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews (Optional) An array of existing reviews.  If not provided, starts empty.
 *
 * @return array  The updated array of reviews.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment, array &$reviews = []): array
{
    // Validate input (basic example - expand for production)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return $reviews; // Return existing reviews if input is invalid
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return $reviews; // Return existing reviews for invalid rating
    }

    // Create the review
    $review = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


// --- Example Usage ---

// Initial reviews (empty array)
$product_reviews = [];

// Create a few reviews
$product_reviews = create_user_review('product123', 'john_doe', 4, 'Great product!', $product_reviews);
$product_reviews = create_user_review('product123', 'jane_smith', 5, 'Excellent value!', $product_reviews);
$product_reviews = create_user_review('product123', 'peter_jones', 3, 'Could be better', $product_reviews);

// Display the reviews
echo "<h2>Reviews for Product 123</h2>";
echo "<ul>";
foreach ($product_reviews as $review) {
    echo "<li><strong>Product ID:</strong> " . $review['product_id'] . "<br>";
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
}
echo "</ul>";


// --- Example of Updating a Review (Basic - more robust logic needed in real applications) ---
// Assuming you have a function to get a review by ID.  This is a simplified example.

/**
 *  Gets a review by its ID (simplified - replace with database query in production)
 * @param int $reviewId The ID of the review to retrieve.
 * @return array|null The review object if found, null otherwise.
 */
function get_review_by_id(array $reviews, int $reviewId) {
  foreach ($reviews as $review) {
    if ($review['id'] == $reviewId) {
      return $review;
    }
  }
  return null;
}


$review_to_update = get_review_by_id($product_reviews, 1); // Assuming review 1 exists
if ($review_to_update) {
    $review_to_update['comment'] = "This is an updated comment!";
    $product_reviews = $review_to_update; // Update the array
    echo "<br><h2>Updated Review:</h2>";
    echo "<pre>";
    print_r($review_to_update);
    echo "</pre>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function creates a basic user review system that allows users to submit reviews
 * and displays them in a simple format.
 *
 *  Note:  This is a simplified example and doesn't include robust security measures, 
 *        database integration, or complex features.  For a production environment, 
 *        you would need to add proper database connections, security checks (like 
 *        input validation and sanitization), and potentially more sophisticated 
 *        review management capabilities.
 */

class ReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $user_name  The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user_name, string $review_text) {
        // Basic validation - you'd want more robust validation in a real application.
        if (empty($user_name) || empty($review_text)) {
            return false;
        }

        $this->reviews[] = ['user' => $user_name, 'text' => $review_text];
        return true;
    }

    /**
     * Displays all reviews.
     *
     * @return void
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->reviews as $review) {
                echo "<h3>" . $review['user'] . "</h3>";
                echo "<p>" . $review['text'] . "</p>";
                echo "<hr>";
            }
        }
    }

    /**
     *  (Optional)  Could add methods for editing or deleting reviews here.
     */
}


// Example Usage:

// Create a review system instance
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewSystem->addReview("John Doe", "This was a great product! I highly recommend it.");
$reviewSystem->addReview("Jane Smith", "The service was excellent and the staff were friendly.");
$reviewSystem->addReview("Peter Jones", "It was okay, but a little overpriced.");

// Display the reviews
$reviewSystem->displayReviews();


// Example of handling invalid input:
$reviewSystem->addReview("", "This is a review."); // Will return false because user_name is empty
echo "<br>Adding review failed (empty username).<br>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and manage user reviews for a given product/item.
 * It includes basic validation, saving the review to a database, and
 * generates a unique ID for the review.
 *
 * @param string $product_id  The ID of the product/item the review is for.
 * @param string $user_name   The name of the user submitting the review.
 * @string $rating         The rating given by the user (e.g., 1-5 stars).
 * @string $comment        The user's review comment.
 * @return int|false  The ID of the newly created review, or false on failure.
 */
function create_review(string $product_id, string $user_name, string $rating, string $comment) {

  // Validation: Simple checks to ensure data integrity.  Expand as needed.
  if (empty($product_id) || empty($user_name) || empty($rating) || empty($comment)) {
    return false; // Return false for invalid input
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return false; // Ensure rating is within a valid range
  }

  // ***  Database Interaction (Replace with your actual database connection details) ***
  // Assuming you have a database connection established named $dbConnection
  // and a 'reviews' table with columns: id (INT, PRIMARY KEY), product_id (INT), user_name (VARCHAR), rating (INT), comment (TEXT)

  try {
    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
            VALUES (:product_id, :user_name, :rating, :comment)";

    // Prepare the statement
    $stmt = $dbConnection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Get the last inserted ID
    $review_id = $dbConnection->lastInsertId();

    // Close the statement
    $stmt->close();

    return $review_id;

  } catch (PDOException $e) {
    // Handle database errors (e.g., connection issues, SQL syntax errors)
    error_log("Database Error: " . $e->getMessage()); // Log the error for debugging
    return false;
  }
}


// Example Usage (Assuming you have a $dbConnection object)
// In a real application, $dbConnection would be established elsewhere (e.g., through a configuration file).

//  Create a dummy database connection for demonstration purposes
//$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example review creation
$product_id = "123";
$user_name = "John Doe";
$rating = 4;
$comment = "Great product, highly recommended!";

$review_id = create_review($product_id, $user_name, $rating, $comment);

if ($review_id) {
  echo "Review created successfully! Review ID: " . $review_id . "
";
} else {
  echo "Failed to create review.
";
}


?>


<?php

/**
 * This function processes user reviews, validates the data, and stores
 * them in a database (or an array for a simpler implementation).
 *
 * @param array $reviewData  An associative array containing review data:
 *                           - 'user': User's name or ID
 *                           - 'rating': Integer from 1 to 5
 *                           - 'comment': User's comment (optional)
 * @param string $dbConnection  (Optional) Database connection object.
 *                               If not provided, the function will store
 *                               the review in an in-memory array.
 *
 * @return bool  True if the review was successfully processed, false otherwise.
 */
function processUserReview(array $reviewData, string $dbConnection = null)
{
    // 1. Input Validation
    $errors = [];

    if (!isset($reviewData['user']) || empty($reviewData['user'])) {
        $errors[] = 'User name/ID is required.';
    }

    if (!isset($reviewData['rating']) || !is_int($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        $errors[] = 'Rating must be an integer between 1 and 5.';
    }

    if (!isset($reviewData['comment']) || empty($reviewData['comment'])) {
        // Comment is optional, so we don't require it.
    }


    // 2. Data Sanitization (IMPORTANT: Sanitize to prevent SQL Injection)
    $user = trim($reviewData['user']);
    $rating = $reviewData['rating'];
    $comment = trim($reviewData['comment'] ?? '');  // Use null coalesce operator

    // 3. Store the Review

    if (empty($errors)) {
        // Store in Database (Example using PDO)
        try {
            $stmt = $dbConnection->prepare(
                "INSERT INTO reviews (user, rating, comment) VALUES (:user, :rating, :comment)"
            );
            $stmt->bindParam(':user', $user);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            // Handle database errors (logging is highly recommended)
            error_log("Error processing review: " . $e->getMessage());
            return false;
        }

    } else {
        // Return false if there were errors
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual database connection)
// Create a dummy database connection for demonstration
$db = new PDO('mysql:host=localhost;dbname=my_database', 'username', 'password');


// Sample review data
$review1 = ['user' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!'];
$review2 = ['user' => 'Jane Smith', 'rating' => 5];
$review3 = ['user' => 'Peter Jones', 'rating' => 2, 'comment' => 'Not so great...'];


// Process the reviews
$result1 = processUserReview($review1, $db);
$result2 = processUserReview($review2, $db);
$result3 = processUserReview($review3, $db);

if ($result1) {
    echo "Review 1 processed successfully!
";
} else {
    echo "Review 1 processing failed.
";
}

if ($result2) {
    echo "Review 2 processed successfully!
";
} else {
    echo "Review 2 processing failed.
";
}

if ($result3) {
    echo "Review 3 processed successfully!
";
} else {
    echo "Review 3 processing failed.
";
}


// Example storing in an array (for a simpler version)
$reviews = [];

$result4 = processUserReview(['user' => 'Alice', 'rating' => 3], null); // No DB connection

if ($result4) {
    $reviews[] = ['user' => 'Alice', 'rating' => 3];
    echo "Review 4 processed and added to array.
";
} else {
    echo "Review 4 processing failed.
";
}

print_r($reviews);  // Output the array of reviews
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product or service being reviewed.
 * @param string $productName The name of the product or service.
 * @param string $reviewText The review text entered by the user.
 * @param int $rating The rating given by the user (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  Useful for tracking.
 * @return array  An array containing the review data and an error message (if any).
 */
function submitReview(
    string $productId,
    string $productName,
    string $reviewText,
    int $rating,
    int $userId = null  // Optional: User ID
) {

    // Input Validation - Crucial for security and data integrity
    if (empty($reviewText)) {
        return ['success' => false, 'message' => "Review text cannot be empty."];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => "Rating must be between 1 and 5."];
    }


    //  **IMPORTANT SECURITY MEASURE: Sanitize and Validate Input**
    //  This is extremely important to prevent XSS and SQL injection attacks.
    //  This example uses basic sanitization - for production, use a robust library.
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');  // Escape HTML special chars
    //  Add more sanitization/validation here depending on your requirements,
    //  e.g., length checks, character restrictions, etc.


    // **Data Storage (Simulated for demonstration)**
    // In a real application, you would save this data to a database.
    $review = [
        'productId' => $productId,
        'productName' => $productName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'userId' => $userId,
        'submissionDate' => date('Y-m-d H:i:s') // Add timestamp
    ];

    // **Logging (Good Practice)** - For debugging and analysis.
    // error_log("New review submitted: " . json_encode($review));

    return ['success' => true, 'review' => $review, 'message' => "Review submitted successfully!"];
}



/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @return array An array containing the reviews (if any) and a message.
 */
function displayReviews(string $productId) {
    // **Simulated Data Retrieval (Replace with database query)**
    //  In a real application, you would query a database to get reviews.
    $reviews = [
        'review1' => [
            'productId' => 'prod123',
            'productName' => 'Awesome Widget',
            'reviewText' => 'This widget is amazing!  Great value.',
            'rating' => 5,
            'userId' => 1,
            'submissionDate' => '2023-10-27 10:00:00'
        ],
        'review2' => [
            'productId' => 'prod123',
            'productName' => 'Awesome Widget',
            'reviewText' => 'It\'s okay, but could be better.',
            'rating' => 3,
            'userId' => 2,
            'submissionDate' => '2023-10-26 14:30:00'
        ],
    ];

    // Filter reviews for the given product ID
    $productReviews = [];
    foreach ($reviews as $key => $review) {
        if ($review['productId'] == $productId) {
            $productReviews[$key] = $review;
        }
    }


    return ['reviews' => $productReviews, 'message' => "Reviews for " . $productId . " loaded."];
}


// ------------------- Example Usage -------------------

// Submit a review
$result = submitReview('prod123', 'Awesome Widget', 'This is the best widget ever!', 5, 1);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    print_r($result['review']);
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}


// Display reviews for the product
$reviewResults = displayReviews('prod123');

if ($reviewResults['success']) {
    echo "<h3>Reviews for Awesome Widget:</h3><br>";
    if (empty($reviewResults['reviews'])) {
        echo "No reviews yet.";
    } else {
        echo "<ul>";
        foreach ($reviewResults['reviews'] as $review) {
            echo "<li>";
            echo "<strong>Product:</strong> " . $review['productName'] . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . "/5<br>";
            echo "<strong>Review:</strong> " . $review['reviewText'] . "<br>";
            echo "<strong>Submitted by:</strong> User " . $review['userId'] . "<br>";
            echo "<strong>Date:</strong> " . $review['submissionDate'] . "</li>";
        }
        echo "</ul>";
    }
} else {
    echo "Error loading reviews: " . $reviewResults['message'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating    The rating (e.g., 1-5).
 * @param string $comment   The review text.
 *
 * @return array|string  An array containing the review data, or a string if an error occurred.
 */
function createReview(string $productId, string $username, string $rating, string $comment) {
  // Input validation - Basic example, expand as needed
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return "Error: All fields are required.";
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  // Data sanitization - Use proper escaping for database safety
  $productId = filter_var($productId, FILTER_SANITIZE_STRING); // Escape special chars
  $username = filter_var($username, FILTER_SANITIZE_STRING);
  $rating = (int)$rating; // Convert to integer
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);


  // --- Database interaction -  Replace with your database connection and query
  // This is a placeholder, and you need to adapt it to your setup.

  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_username";
  $db_password = "your_password";


  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    return "Error connecting to database: " . $e->getMessage();
  }


  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':username', $username);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  if ($stmt->execute()) {
    return "Review submitted successfully!";
  } else {
    return "Error submitting review: " . $stmt->errorInfo()[2];
  }

  // --- End Database Interaction ---
}

// Example Usage (for demonstration - not integrated with a database)
// $reviewResult = createReview("123", "JohnDoe", 4, "Great product!");
// echo $reviewResult; // Output:  "Review submitted successfully!"  (if successful)

// OR

// $reviewResult = createReview("456", "JaneSmith", "Two", "Okay, but could be better.");
// echo $reviewResult; // Output: "Error: Rating must be a number between 1 and 5."
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user writing the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  The rating given by the user (1-5).
 *
 * @return array An array containing success/failure status and optionally the review ID.
 */
function createReview(string $productId, string $userName, string $reviewText, int $rating): array
{
    // Sanitize inputs - Important for security!
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $userName = filter_var($userName, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $rating = intval($rating);  // Ensure rating is an integer

    // Validate rating
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be between 1 and 5.'];
    }

    // **In a real application, you would connect to a database here.**
    // This is a placeholder for demonstration.

    // Simulate storing the review (replace with your database logic)
    $reviewId = generateUniqueId(); // Use a function to generate a unique ID
    $reviewData = [
        'product_id' => $productId,
        'user_name' => $userName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
    ];


    // Store the review in a data structure (replace with database insertion)
    // Example: $reviews[$productId][] = $reviewData;


    return ['success' => true, 'review_id' => $reviewId];
}

/**
 * Generate a unique ID for a review
 *  (Replace with a more robust solution like UUID)
 * @return string
 */
function generateUniqueId(): string
{
    return uniqid();
}



// -------------------- Example Usage --------------------

// 1. Create a review
$productId = 'product123';
$userName = 'John Doe';
$reviewText = 'This is a great product! I highly recommend it.';
$rating = 5;

$result = createReview($productId, $userName, $reviewText, $rating);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}


// 2. Example with invalid rating
$result = createReview($productId, $userName, $reviewText, 0);
if ($result['success']) {
   echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
   echo "Error creating review: " . $result['message'] . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews An array to store existing reviews.
 *
 * @return array An updated array of reviews with the new review added.
 */
function createAndDisplayReview(string $productName, string $userId, string $reviewText, array &$reviews) {
  // Validate inputs (basic example - expand this for more robust validation)
  if (empty($reviewText)) {
    return $reviews; // Don't add empty reviews
  }

  // Create the review object (could be an object or array, this is just an example)
  $review = [
    'id' => count($reviews) + 1,
    'userId' => $userId,
    'productName' => $productName,
    'reviewText' => $reviewText,
    'timestamp' => time()
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Optionally, you could sort the reviews by timestamp
  usort($reviews, function($a, $b) {
    return $a['timestamp'] - $b['timestamp'];
  });

  return $reviews;
}


/**
 * Display Reviews
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for " . $GLOBALS['productName'] . "</h2>"; // Assuming $productName is globally defined

  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<h3>Review by User ID: " . $review['userId'] . "</h3>";
    echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>"; // Sanitize HTML output
    echo "<p>Timestamp: " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
  }
}


// --- Example Usage ---

// Initialize reviews (an array to store the reviews)
$reviews = [];

//  For demonstration, let's set a global product name
$GLOBALS['productName'] = "Awesome Widget";

// Create some reviews
$reviews = createAndDisplayReview("Awesome Widget", "user123", "This widget is amazing! I highly recommend it.", $reviews);
$reviews = createAndDisplayReview("Awesome Widget", "user456", "Great product, works as advertised.", $reviews);
$reviews = createAndDisplayReview("Awesome Widget", "user123", "Could be better, but not bad.", $reviews);

// Display the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic input validation and sanitization.  For a production environment,
 * you'd want to use a more robust validation and sanitization system and a database connection.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $rating The rating provided by the user (1-5).
 * @param string $comment The user's written review.
 * @param string $username The username of the user submitting the review.
 * @return array An array containing the review data or an error message.
 */
function submit_review(string $productId, string $rating, string $comment, string $username): array
{
  // Input Validation
  if (empty($productId)) {
    return ['error' => 'Product ID cannot be empty.'];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['error' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['error' => 'Comment cannot be empty.'];
  }
  if (empty($username)) {
    return ['error' => 'Username cannot be empty.'];
  }

  // Sanitize input -  Important for security!
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);
  $username = filter_var($username, FILTER_SANITIZE_STRING);

  // Create review data
  $reviewData = [
    'productId' => $productId,
    'rating' => $rating,
    'comment' => $comment,
    'username' => $username,
    'timestamp' => time() // Add timestamp for ordering
  ];

  // For demonstration purposes, we'll just return the data.
  // In a real application, you would save this data to a database.
  return $reviewData;
}

/**
 * Display a Single Review
 *
 * Displays a single review from a list of reviews.
 *
 * @param array $review A single review object.
 * @return string HTML representation of the review.
 */
function display_review(array $review): string
{
    $timestamp = date('Y-m-d H:i:s', strtotime($review['timestamp']));

    return "<div class='review'>
                <strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>
                <strong>Rating:</strong> " . $review['rating'] . " / 5<br>
                <strong>Timestamp:</strong> " . $timestamp . "<br>
                <strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "
             </div>";
}

/**
 * Display All Reviews for a Product
 *
 *  Displays all reviews for a given product.
 *  Uses the 'display_review' function to render each review.
 *  Sorts the reviews by timestamp (newest first).
 *
 * @param array $reviews An array of review objects.
 * @return string HTML representation of all the reviews.
 */
function display_all_reviews(array $reviews): string
{
    // Sort reviews by timestamp (newest first)
    usort($reviews, function ($a, $b) {
        return $b['timestamp'] - $a['timestamp'];
    });

    $html = '';
    foreach ($reviews as $review) {
        $html .= display_review($review);
    }

    return $html;
}


// Example Usage:
$productId = '123';
$rating = 4;
$comment = 'This product is great!';
$username = 'john.doe';

$reviewData = submit_review($productId, $rating, $comment, $username);

if (isset($reviewData['error'])) {
    echo "<p>Error: " . $reviewData['error'] . "</p>";
} else {
    echo "Review submitted successfully!";
    echo "<br><br>";

    // Example of displaying reviews for a product (Simulated data for demonstration)
    $reviews = [
        ['productId' => '123', 'rating' => 5, 'comment' => 'Excellent product!', 'username' => 'jane.smith', 'timestamp' => time() - 3600),  // 1 hour ago
        ['productId' => '123', 'rating' => 3, 'comment' => 'Good, but could be better.', 'username' => 'peter.jones', 'timestamp' => time() - 7200), // 2 hours ago
        ['productId' => '123', 'rating' => 4, 'comment' => 'Very happy with this purchase.', 'username' => 'mary.brown', 'timestamp' => time() - 10800),  // 3 hours ago
    ];

    echo "<h2>Reviews for Product " . $productId . "</h2>";
    echo display_all_reviews($reviews);

}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $productName The name of the product. (Optional, used for display)
 * @param string $reviewText The user-submitted review text.
 * @param array $userCredentials (Optional) An array containing user information for authentication. 
 *                                 If not provided, assumes review is anonymous.
 *
 * @return array An array containing the result of the operation:
 *   - 'success': True if the review was created successfully.
 *   - 'message': A message indicating the outcome (e.g., success or error).
 *   - 'reviewId': The ID of the newly created review (if successful).
 */
function createReview(string $productId, string $productName, string $reviewText, array $userCredentials = []): array
{
    // Basic input validation - add more robust validation as needed
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }

    //  Simulate database interaction - replace with your actual database code
    $reviewId = generateUniqueId(); // Use a function to generate unique IDs

    //  Optional:  Store user credentials (if provided) - not shown here,
    //  but you'd typically check user existence and authorization.

    //  Simulate saving the review to the database
    $saved = simulateSaveReview($reviewId, $productId, $reviewText, $userCredentials);

    if ($saved) {
        return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];
    } else {
        return ['success' => false, 'message' => 'Failed to save review.', 'reviewId' => null];
    }
}


/**
 *  Simulates generating a unique ID.  Replace with your unique ID generation method.
 * @return string
 */
function generateUniqueId(): string {
    return uniqid();
}


/**
 * Simulates saving the review to a database. Replace with your database logic.
 * @param string $reviewId
 * @param string $productId
 * @param string $reviewText
 * @param array $userCredentials
 * @return bool
 */
function simulateSaveReview(string $reviewId, string $productId, string $reviewText, array $userCredentials) {
    // Simulate success - replace with your database interaction
    echo "Saving review ID: " . $reviewId . " for product: " . $productId . " with text: " . $reviewText . "
";
    return true;
}


// --------------------- Example Usage ---------------------
// Simulate a product
$productId = '12345';
$productName = 'Awesome Widget';

// Example 1: Anonymous Review
$reviewResult = createReview($productId, $productName, 'This is a fantastic widget!');
print_r($reviewResult);

// Example 2:  With User Credentials (This is just a placeholder)
$userCredentials = ['username' => 'john.doe', 'password' => 'secretpassword'];
$reviewResult2 = createReview($productId, $productName, 'Excellent product!', $userCredentials);
print_r($reviewResult2);

?>


<?php

/**
 * User Review Function - Processes and displays user reviews.
 */
class UserReviewFunction
{
    /**
     * Processes a single user review.
     *
     * @param string $reviewText  The review text provided by the user.
     * @param int    $user_id     The ID of the user submitting the review.
     * @param int    $product_id  The ID of the product being reviewed.
     * @return array  An array containing the processed review data.
     */
    public function processReview(string $reviewText, int $user_id, int $product_id)
    {
        // Sanitize input (important for security)
        $reviewText = htmlspecialchars($reviewText);
        $reviewText = trim($reviewText); // Remove leading/trailing whitespace

        // Basic validation (you'd likely want more robust validation in a real application)
        if (empty($reviewText)) {
            return [
                'success' => false,
                'message' => 'Review cannot be empty.',
                'review' => null,
                'errors' => ['review' => 'Review cannot be empty.']
            ];
        }

        // Create a review object (could be more sophisticated if needed)
        $review = [
            'user_id' => $user_id,
            'product_id' => $product_id,
            'review_text' => $reviewText,
            'date_created' => date('Y-m-d H:i:s') // Add timestamp
        ];

        return [
            'success' => true,
            'message' => 'Review submitted successfully!',
            'review' => $review,
            'errors' => []
        ];
    }

    /**
     * Displays a list of reviews for a product.
     *
     * @param array $reviews  An array of review data.
     * @return string        HTML representation of the reviews.
     */
    public function displayReviews(array $reviews)
    {
        if (empty($reviews)) {
            return "<p>No reviews yet.</p>";
        }

        $html = '<ul>';
        foreach ($reviews as $review) {
            if ($review['success']) {
                $html .= '<li>';
                $html .= '<strong>' . htmlspecialchars($review['review_text']) . '</strong>' .  //Escape for HTML output
                         '<br>'.
                         'By User ID: ' . $review['user_id']; // Include user ID
                $html .= '</li>';
            } else {
                $html .= '<li>Error processing review: ' . htmlspecialchars($review['message']) . '</li>';
            }
        }
        $html .= '</ul>';
        return $html;
    }
}

// Example Usage (for testing)
$reviewFunction = new UserReviewFunction();

// Test 1: Successful Review
$reviewResult1 = $reviewFunction->processReview('This product is amazing!', 123, 456);
echo $reviewFunction->displayReviews($reviewResult1['review']); // Prints the HTML of the review

// Test 2: Empty Review
$reviewResult2 = $reviewFunction->processReview('', 789, 101);
echo $reviewFunction->displayReviews($reviewResult2['review']); // Shows "No reviews yet." or error message

// Test 3:  Error handling
$reviewResult3 = $reviewFunction->processReview('Invalid review', 999, 111);
echo $reviewFunction->displayReviews($reviewResult3['review']);  //Shows an error message.
?>


<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $reviews = []; // Array to store reviews (simplified for this example)

    /**
     * Adds a new review to the database (simulated).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $name The reviewer's name.
     * @param string $comment The review comment.
     * @param int $rating The rating (1-5).
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $name, string $comment, int $rating): bool
    {
        // Basic input validation - improve this in a real application!
        if (!$productId || !$name || !$comment || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'productId' => $productId,
            'name' => $name,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of reviews for the product, or an empty array if none are found.
     */
    public function getReviewsByProduct(int $productId): array
    {
        return array_filter($this->reviews, function($review) => $review['productId'] === $productId);
    }

    /**
     * Retrieves a single review by its ID (simulated).  In a real database, you'd use a unique ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review if found, null otherwise.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $reviewId) {  //  Consider using a real unique ID
                return $review;
            }
        }
        return null;
    }


    /**
     * Displays reviews for a product.
     *
     * @param int $productId The ID of the product.
     */
    public function displayReviews(int $productId)
    {
        $reviews = $this->getReviewsByProduct($productId);

        if (empty($reviews)) {
            echo "<p>No reviews found for this product.</p>";
        } else {
            echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<strong>Name:</strong> " . htmlspecialchars($review['name']) . "<br>";
                echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
                echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
                echo "<strong>Date:</strong> " . $review['date'] . "</li>";
            }
            echo "</ul>";
        }
    }
}


// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview(123, "John Doe", "Great product!", 5);
$reviewSystem->addReview(123, "Jane Smith", "Could be better.", 3);
$reviewSystem->addReview(456, "Peter Jones", "Excellent value!", 4);

// Display reviews for product 123
$reviewSystem->displayReviews(123);

// Display reviews for product 456
$reviewSystem->displayReviews(456);

//Get a review by ID (simulated)
$review = $reviewSystem->getReviewById(1);
if ($review) {
    echo "<p>Found Review: " . htmlspecialchars($review['name']) . " - " . htmlspecialchars($review['comment']) . "</p>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * Reviews Class - Manages user reviews for a product or item.
 */
class Reviews {

    private $reviews = []; // Store the reviews in an array
    private $productId; // The ID of the product/item this reviews are for

    /**
     * Constructor - Initializes the Reviews object with a product ID.
     *
     * @param int $productId The ID of the product/item.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $name The reviewer's name.
     * @param string $rating The rating given (e.g., 1-5 stars).
     * @param string $comment The reviewer's comments.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $rating, string $comment): bool {
        if (empty($name) || empty($rating) || empty($comment)) {
            return false; // Validation: Ensure all fields are filled.
        }

        // Validation:  More robust validation could be added here.
        $rating = (int) $rating; // Convert rating to integer.
        if ($rating < 1 || $rating > 5) {
            return false; // Rating must be between 1 and 5.
        }

        $review = [
            'name' => $name,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date.
        ];
        $this->reviews[] = $review;
        return true;
    }

    /**
     * Get all reviews for the product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get average rating for the product.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }
        return $totalRating / count($this->reviews);
    }
}

// Example Usage:

// Create a Reviews object for a product with ID 123
$reviews = new Reviews(123);

// Add some reviews
$reviews->addReview("Alice", 5, "Great product! Highly recommended.");
$reviews->addReview("Bob", 4, "Good value for money.");
$reviews->addReview("Charlie", 3, "It's okay, could be better.");

// Get all reviews
$allReviews = $reviews->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get the average rating
$averageRating = $reviews->getAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews yet.") ;

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or service.
 */
class UserReview {

    /**
     * @var int Product ID
     */
    private $productId;

    /**
     * @var string User's Name
     */
    private $userName;

    /**
     * @var string User's Review Text
     */
    private $reviewText;

    /**
     * @var int Rating (1-5)
     */
    private $rating;

    /**
     * @var DateTime Timestamp of review submission
     */
    private $timestamp;

    /**
     * Constructor
     *
     * @param int $productId
     * @param string $userName
     * @param string $reviewText
     * @param int $rating
     */
    public function __construct(int $productId, string $userName, string $reviewText, int $rating) {
        $this->productId = $productId;
        $this->userName = $userName;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
        $this->timestamp = new DateTime(); // Automatically set the timestamp
    }

    /**
     * Get Product ID
     *
     * @return int
     */
    public function getProductId(): int {
        return $this->productId;
    }

    /**
     * Get User Name
     *
     * @return string
     */
    public function getUserName(): string {
        return $this->userName;
    }

    /**
     * Get Review Text
     *
     * @return string
     */
    public function getReviewText(): string {
        return $this->reviewText;
    }

    /**
     * Get Rating
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get Timestamp
     *
     * @return DateTime
     */
    public function getTimestamp(): DateTime {
        return $this->timestamp;
    }

    /**
     * Display Review
     *  This method formats the review data into a user-friendly string.
     *
     * @return string
     */
    public function displayReview(): string {
        return sprintf(
            "Review by: %s
" .
            "Rating: %d
" .
            "Review: %s
" .
            "Submitted on: %s",
            $this->userName,
            $this->rating,
            $this->reviewText,
            $this->timestamp->format('Y-m-d H:i:s') // Formatted timestamp
        );
    }
}


/**
 * User Review Function (Demonstration)
 */
function processUserReview(
    int $productId,
    string $userName,
    string $reviewText,
    int $rating
): UserReview|null {
    // Validation - Add your own validation logic here.
    if (empty($userName)) {
        error_log("Invalid review: User name cannot be empty.");  // Log the error
        return null;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid review: Rating must be between 1 and 5.");
        return null;
    }

    // Create the review object
    $review = new UserReview($productId, $userName, $reviewText, $rating);

    // Return the review object
    return $review;
}


// Example Usage:
$productId = 123;
$userName = "John Doe";
$reviewText = "Great product!  I highly recommend it.";
$rating = 5;

$review = processUserReview($productId, $userName, $reviewText, $rating);

if ($review) {
    echo "--- Review ---";
    echo $review->displayReview();
    echo "
";
} else {
    echo "Review processing failed.  Check the logs for details.";
}

// Example with invalid input:
$invalidReview = processUserReview(456, "", "Some text", 3);  // Empty name
if (!$invalidReview) {
    echo "Invalid review example failed as expected.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating The rating given for the product (e.g., 1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a new user is created.
 *
 * @return array Returns an array with the following keys:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message describing the result of the operation.
 *   - 'reviewId': The ID of the newly created review (if success).
 *   - 'review': The review data (if success).
 */
function create_user_review(
    string $productId,
    string $userEmail,
    string $reviewText,
    int $rating,
    int $userId = null // Optional: User ID
) {
    // Input validation (Example - adjust as needed)
    if (empty($productId)) {
        return [
            'success' => false,
            'message' => 'Product ID cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (empty($userEmail)) {
        return [
            'success' => false,
            'message' => 'User email cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'reviewId' => null,
            'review' => null,
        ];
    }


    // ---  Database Interaction - Replace with your actual database logic ---
    // This is a simplified example using placeholders.  You should
    // use prepared statements and proper error handling in a real application.

    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Check if the user already exists
        $userExists = $db->prepare("SELECT id FROM users WHERE email = :email");
        $userExists->bindParam(':email', $userEmail);
        $userExists->execute();
        $userRow = $userRow->fetch(PDO::FETCH_ASSOC);

        if ($userRow) {
            $userId = $userRow['id']; // Use existing user ID
        } else {
            // Create a new user
            $stmt = $db->prepare("INSERT INTO users (email) VALUES (:email)");
            $stmt->bindParam(':email', $userEmail);
            $stmt->execute();
            $userId = $db->lastInsertId(); // Get the ID of the newly inserted user
        }


        // Create the review
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating) VALUES (:product_id, :user_id, :review_text, :rating)");
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);
        $stmt->execute();
        $reviewId = $db->lastInsertId();


        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'reviewId' => $reviewId,
            'review' => [
                'id' => $reviewId,
                'product_id' => $productId,
                'user_id' => $userId,
                'review_text' => $reviewText,
                'rating' => $rating,
                'user_email' => $userEmail, // Include email for easy retrieval
            ],
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage(),
            'reviewId' => null,
            'review' => null,
        ];
    }
}


// Example Usage:
// $result = create_user_review('123', 'test@example.com', 'This is a great product!', 5);
// print_r($result);

?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, including storing them, retrieving them, and displaying them.
 */
class Review {

    private $db; // Database connection (implementation depends on your database)

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review to the database.
     *
     * @param string $userId    The ID of the user submitting the review.
     * @param string $productID The ID of the product being reviewed.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment  The user's review comment.
     * @return bool          True on success, false on failure.
     */
    public function addReview(string $userId, string $productID, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                    VALUES (:user_id, :product_id, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':product_id', $productID);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $result = $stmt->execute();
            return $result;

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }


    /**
     * Get all reviews for a given product.
     *
     * @param string $productID The ID of the product to retrieve reviews for.
     * @return array|false An array of review objects, or false if no reviews are found.
     */
    public function getReviewsByProduct(string $productID) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productID);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
                $reviews[] = $row;
            }
            return $reviews;

        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Get a single review by ID.
     *
     * @param int $reviewID The ID of the review to retrieve.
     * @return object|false A review object, or false if the review is not found.
     */
    public function getReviewById(int $reviewID) {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_OBJ);
            return $row;

        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return false;
        }
    }



    /**
     *  (Optional)  Example function to update a review.  Not essential for basic review functionality.
     *
     * @param int $reviewID The ID of the review to update.
     * @param string $newRating The new rating.
     * @param string $newComment The new comment.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewID, string $newRating, string $newComment) {
        try {
            $sql = "UPDATE reviews SET rating = :new_rating, comment = :new_comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->bindParam(':new_rating', $newRating);
            $stmt->bindParam(':new_comment', $newComment);

            $result = $stmt->execute();
            return $result;

        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * (Optional) Example function to delete a review.
     *
     * @param int $reviewID The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewID) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }


}


// Example usage (assuming you have a database connection named $db)
// $review = new Review($db);

// // Add a review
// $review->addReview(123, 456, 5, "Great product!");

// // Get reviews for a product
// $reviews = $review->getReviewsByProduct(456);
// if ($reviews) {
//     foreach ($reviews as $review) {
//         echo "User ID: " . $review->user_id . "<br>";
//         echo "Rating: " . $review->rating . "<br>";
//         echo "Comment: " . $review->comment . "<br><br>";
//     }
// } else {
//     echo "No reviews found for this product.";
// }
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create and manage user reviews for a product or item.
 *
 *  @param string $productId  The unique identifier for the product being reviewed.
 *  @param string $productName The name of the product. (Used for display)
 *  @param string $reviewerName The name of the user submitting the review.
 *  @param string $reviewText The text content of the review.
 *  @param int $rating      The rating given by the user (1-5).
 *  @param string $timestamp  (Optional) A timestamp for the review.  If not provided, it will be generated.
 *
 *  @return bool  True if the review was successfully created, false otherwise.
 */
function createReview(string $productId, string $productName, string $reviewerName, string $reviewText, int $rating, string $timestamp = null) {
    // --- Validation ---
    if (empty($productId) || empty($productName) || empty($reviewerName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return false; // Invalid input
    }

    // --- Data Sanitization (Important!) ---
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);


    // --- Store the review (Simulated Database Interaction) ---
    // In a real application, you would connect to a database here.

    // Create a review object (just for demonstration)
    $review = [
        'productId' => $productId,
        'productName' => $productName,
        'reviewerName' => $reviewerName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => $timestamp ?: time() // Use current time if timestamp is not provided
    ];

    // Simulate saving to a database (replace with actual database code)
    // echo "Saving review: " . print_r($review, true) . "
"; // For debugging
    //  For example, you might use a database connection and prepare a statement:
    //  $db = new DatabaseConnection();  // Assuming you have a DatabaseConnection class
    //  $stmt = $db->prepare("INSERT INTO reviews (productId, productName, reviewerName, reviewText, rating, timestamp) VALUES (?, ?, ?, ?, ?, ?)");
    //  $stmt->execute([$productId, $productName, $reviewerName, $reviewText, $rating, $timestamp ?: time()]);
    //  $reviewId = $db->lastInsertId();


    // Mock successful save
    return true;  // Indicate successful creation
}


// --- Example Usage ---

// Create a review
$product_id = "123";
$product_name = "Awesome Gadget";
$reviewer = "John Doe";
$review = "This gadget is amazing!  I love it.";
$rating = 4;

$success = createReview($product_id, $product_name, $reviewer, $review, $rating);

if ($success) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}

// Example with timestamp
$success = createReview($product_id, $product_name, $reviewer, $review, $rating, date("Y-m-d H:i:s"));
if($success){
    echo "Review created with timestamp.
";
}
else{
    echo "Error creating review with timestamp.
";
}
?>


<?php

/**
 * This function creates a user review object with basic information.
 *
 * @param string $username  The name of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment   The user's written comment about the item/service.
 *
 * @return array An array containing the user review data.
 */
function createReview(string $username, string $rating, string $comment): array
{
  // Validate input (add more validation as needed for your application)
  if (empty($username)) {
    throw new InvalidArgumentException("Username cannot be empty.");
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
  }

  if (empty($comment)) {
    throw new InvalidArgumentException("Comment cannot be empty.");
  }


  return [
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => date('Y-m-d H:i:s'), // Add timestamp for tracking
  ];
}


// Example Usage:
try {
  $review1 = createReview("JohnDoe", 4, "Great product!  Works exactly as advertised.");
  echo "Review 1: " . print_r($review1, true) . PHP_EOL;

  $review2 = createReview("JaneSmith", 5, "Excellent service, highly recommend!");
  echo "Review 2: " . print_r($review2, true) . PHP_EOL;

  // Example of an invalid review (to demonstrate validation)
  // $invalidReview = createReview("", 3, "This is a comment.");  // Throws an exception

} catch (InvalidArgumentException $e) {
  echo "Error creating review: " . $e->getMessage() . PHP_EOL;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 * It includes functionality for adding new reviews, displaying existing reviews,
 * updating reviews, and deleting reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $dbConnection A database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the operation was successful, false otherwise.
 *   - 'message': A message describing the outcome of the operation.
 *   - 'reviews':  An array of review objects (or an empty array if no reviews exist).
 */
function create_manage_reviews(string $productId, string $username, string $rating, string $comment, array $dbConnection)
{
    $success = false;
    $message = '';
    $reviews = [];

    // 1. Retrieve Existing Reviews
    $query = "SELECT * FROM reviews WHERE productId = ?";
    $stmt = $dbConnection->prepare($query);
    $stmt->bind_param("s", $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    }

    // 2. Create New Review
    if (empty($reviews)) {
        // If no reviews exist, create a new one
        $query = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
        $stmt = $dbConnection->prepare($query);
        $stmt->bind_param("sss", $productId, $username, $comment);
        $result = $stmt->execute();

        if ($result) {
            $success = true;
            $message = "Review added successfully!";
        } else {
            $success = false;
            $message = "Error adding review: " . $stmt->error;
        }
    } else {
        // If reviews exist, check for duplicate usernames
        $usernameExists = false;
        foreach ($reviews as $review) {
            if ($review['username'] === $username) {
                $usernameExists = true;
                break;
            }
        }

        if (!$usernameExists) {
            // Create new review
            $query = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
            $stmt = $dbConnection->prepare($query);
            $stmt->bind_param("sss", $productId, $username, $comment);
            $result = $stmt->execute();

            if ($result) {
                $success = true;
                $message = "Review added successfully!";
            } else {
                $success = false;
                $message = "Error adding review: " . $stmt->error;
            }
        } else {
            $success = false;
            $message = "Error: User already reviewed this product.";
        }
    }

    // 3. Return Results
    return [
        'success' => $success,
        'message' => $message,
        'reviews' => $reviews
    ];
}

// Example Usage (Illustrative - requires database setup)
// Assuming you have a database connection object $dbConnection
/*
$productId = "123";
$username = "JohnDoe";
$rating = 5;
$comment = "Great product, highly recommended!";

$result = create_manage_reviews($productId, $username, $rating, $comment, $dbConnection);

if ($result['success']) {
    echo "Message: " . $result['message'] . "<br>";
    echo "Reviews: ";
    foreach ($result['reviews'] as $review) {
        echo "Product ID: " . $review['productId'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
    }
} else {
    echo "Error: " . $result['message'];
}
*/

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and basic manipulation of user reviews.
 */
class UserReview {

    private $reviews = [];
    private $reviewIdCounter = 1;

    /**
     * Creates a new user review.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param string $productName The name of the product the review is for.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     *
     * @return int The ID of the newly created review.
     * @throws InvalidArgumentException If the rating is invalid.
     */
    public function createReview(int $userId, string $productName, string $rating, string $comment): int
    {
        // Validate the rating
        $rating = (int)$rating;
        if ($rating < 1 || $rating > 5) {
            throw new InvalidArgumentException("Invalid rating. Rating must be between 1 and 5.");
        }

        $review = [
            'reviewId' => $this->reviewIdCounter++,
            'userId' => $userId,
            'productName' => $productName,
            'rating' => $rating,
            'comment' => $comment,
            'dateCreated' => date('Y-m-d H:i:s') // Add timestamp for date creation
        ];

        $this->reviews[] = $review;
        return $review['reviewId'];
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null The review object if found, null otherwise.
     */
    public function getReview(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] === $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param string $productName The name of the product to filter by.
     *
     * @return array An array of review objects for the specified product.
     */
    public function getReviewsByProduct(string $productName): array
    {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productName'] === $productName) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $userId The new user ID (optional, if changing user).
     * @param string $productName The new product name (optional, if changing product).
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $userId = null, string $productName = null, string $rating = null, string $comment = null): bool
    {
        $review = $this->getReview($reviewId);
        if (!$review) {
            return false;
        }

        $review['userId'] = $userId !== null ? $userId : $review['userId'];
        $review['productName'] = $productName !== null ? $productName : $review['productName'];
        $review['rating'] = $rating !== null ? $rating : $review['rating'];
        $review['comment'] = $comment !== null ? $comment : $review['comment'];
        $review['dateCreated'] = date('Y-m-d H:i:s');  //Re-set the date on update

        return true;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['reviewId'] === $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Returns all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    // Add other methods as needed, like sorting, filtering, etc.
}


// Example Usage:
try {
    $reviews = new UserReview();

    // Create a review
    $reviewId = $reviews->createReview(1, 'Laptop X1', 4, 'Great laptop, fast and reliable!');

    // Retrieve the review
    $review = $reviews->getReview($reviewId);
    print_r($review);

    // Get reviews for a specific product
    $laptopReviews = $reviews->getReviewsByProduct('Laptop X1');
    print_r($laptopReviews);

    //Update a review
    $reviews->updateReview($reviewId, 2, 'Laptop X1', 5, 'Absolutely amazing!');

    // Get the updated review
    $updatedReview = $reviews->getReview($reviewId);
    print_r($updatedReview);

    //Delete a review
    $reviews->deleteReview($reviewId);

    // Get all reviews
    $allReviews = $reviews->getAllReviews();
    print_r($allReviews);


} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality to store and retrieve user reviews.
 * It's a simplified example and can be extended with features like
 * rating systems, moderation, and more.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($username, $reviewText) {
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'review' => $reviewText,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for when the review was created
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific item (e.g., product, service).
     *  This is a placeholder - you'd likely store item IDs linked to reviews.
     *
     * @param int $itemId The ID of the item.
     * @return array An array of review objects for the item.
     */
    public function getReviewsForItem($itemId) {
        // In a real application, you'd likely query a database here
        // to get reviews associated with this item ID.
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            // Example: Assume reviews are associated with item ID 1
            if ($review['itemId'] == 1) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     *  Adds a simple "helpful" count (can be extended for more sophisticated rating systems).
     *
     * @param int $itemId The ID of the item.
     * @return void
     */
    public function markAsHelpful($itemId) {
        //In a real implementation, you'd likely update a database record
        //to increment the 'helpful' count.
        //This is just a placeholder.
    }
}


/**
 * User Review Review Function (Example usage & testing)
 */
function reviewUserFunction($review_text, $user_name) {

    // 1. Create a Review object
    $review = new UserReview();

    // 2. Add the review
    $success = $review->addReview($user_name, $review_text);

    // 3. Handle the result
    if ($success) {
        echo "Review added successfully for user: " . $user_name . "
";
    } else {
        echo "Error adding review. Please ensure both username and review text are provided.
";
    }

    // 4. Example - Retrieving all reviews
    $all_reviews = $review->getAllReviews();
    echo "All reviews:
";
    foreach ($all_reviews as $review) {
        echo "- " . $review['username'] . ": " . $review['review'] . "
";
    }
}


// Example Usage:
$review_text = "This product is amazing!  I highly recommend it.";
$user_name = "JohnDoe";

reviewUserFunction($review_text, $user_name);

$review_text2 = "Not so great. Needs improvement.";
$user_name2 = "JaneSmith";

reviewUserFunction($review_text2, $user_name2);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes data sanitization, validation, and display logic.
 *
 * @param string $user_name   The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param array  $reviews    (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *   - 'reviews':  An updated array of reviews (including the new one).
 *   - 'success':  True if the review was submitted successfully, false otherwise.
 *   - 'error':    Error message if there was an error, null otherwise.
 */
function submitReview(string $user_name, string $review_text, array &$reviews = [])
{
    // Sanitize input to prevent XSS and SQL injection
    $user_name = htmlspecialchars($user_name);
    $review_text = htmlspecialchars($review_text);

    // Validate input
    if (empty($user_name) || empty($review_text)) {
        return ['success' => false, 'error' => 'User name and review text cannot be empty.', 'reviews' => $reviews];
    }

    // Add the new review to the array
    $reviews[] = ['user' => $user_name, 'text' => $review_text, 'date' => date('Y-m-d H:i:s')];

    return ['success' => true, 'error' => null, 'reviews' => $reviews];
}


// Example Usage:

// Simulate a simple database (for demonstration)
$stored_reviews = [];

// Simulate a user submitting a review
$user_name = 'John Doe';
$review_text = 'This product is amazing! I highly recommend it.';
$result = submitReview($user_name, $review_text, $stored_reviews);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review:</p>";
    echo "<p>" . $result['reviews'][count($result['reviews']) - 1]['text'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
}

// Submit another review
$user_name = 'Jane Smith';
$review_text = 'It could be better.  A few things need improvement.';
$result = submitReview($user_name, $review_text, $stored_reviews);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review:</p>";
    echo "<p>" . $result['reviews'][count($result['reviews']) - 1]['text'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic database interactions and data sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment.
 * @param string $db_connection A database connection object.
 *
 * @return array An array containing the result of the operation (e.g., success/failure message).
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection)
{
    // Validate and sanitize inputs (important for security!)
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT); // Ensure rating is an integer
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // Check if validation passed
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        return ['success' => false, 'message' => 'All fields are required.'];
    }

    // Validate rating range (example: 1-5)
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Data preparation for SQL query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $db_connection->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the query
    if ($stmt->execute()) {
        return ['success' => true, 'message' => 'Review created successfully!'];
    } else {
        return ['success' => false, 'message' => 'Error creating review: ' . print_r($stmt->errorInfo(), true)];
    }
}


// Example usage (assuming you have a database connection established)
// This is just an example; you'll need to replace with your actual database connection.
//  and the table setup.

/*
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example: Creating a review
$review_result = create_user_review('123', '456', 4, 'Great product!', $db_connection);
print_r($review_result);

// Example: Error handling
$review_result = create_user_review('', '456', 4, 'Great product!', $db_connection);
print_r($review_result);
*/

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and view reviews for a product.
 *
 * It includes functionalities for:
 * - Creating a new review
 * - Displaying existing reviews
 * - Basic validation (to prevent spam/invalid input)
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The review comment.
 * @param array $reviews (Optional) An array of existing reviews to be passed for display.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects.
 *   - 'new_review_success': True if the new review was successfully added, false otherwise.
 *   - 'error': An error message if something went wrong, or null if no error.
 */
function create_and_display_reviews(string $product_id, string $name, string $comment, array &$reviews = []) {

    // Input validation (basic - you should enhance this for a real application)
    if (empty($name)) {
        return ['reviews' => $reviews, 'new_review_success' => false, 'error' => 'Name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['reviews' => $reviews, 'new_review_success' => false, 'error' => 'Comment cannot be empty.'];
    }

    // Create the review object (you can expand this with more details like date, rating, etc.)
    $review = [
        'product_id' => $product_id,
        'name' => $name,
        'comment' => $comment,
        'timestamp' => time()
    ];

    // Add the new review to the array
    $reviews[] = $review;

    return ['reviews' => $reviews, 'new_review_success' => true, 'error' => null];
}


// Example Usage:

// Initialize an empty array of reviews
$reviews = [];

// Create a new review
$result = create_and_display_reviews('product_123', 'John Doe', 'Great product!  I highly recommend it.');

if ($result['new_review_success']) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review: " . $result['error'] . "
";
}

// Display all reviews
echo "<h2>All Reviews for Product 123:</h2>
";
foreach ($result['reviews'] as $review) {
    echo "<b>Name:</b> " . $review['name'] . "<br>";
    echo "<b>Comment:</b> " . $review['comment'] . "<br>";
    echo "<b>Date:</b> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
    echo "<hr>
";
}


// Another example creating a review with error handling
$result2 = create_and_display_reviews('product_456', '', 'Another review.');

if ($result2['new_review_success']) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review: " . $result2['error'] . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and stores it in a database (or other storage)
 * and also returns a user-friendly response.
 *
 * @param string $review The user's review text.
 * @param int $productId The ID of the product being reviewed.
 * @param int $userId The ID of the user submitting the review.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return string A user-friendly response indicating success or failure.
 */
function storeUserReview(string $review, int $productId, int $userId, string $dbHost, string $dbName, string $dbUser, string $dbPassword)
{
    // Sanitize input (basic example - improve for production)
    $review = trim($review);
    if (empty($review)) {
        return "Error: Review cannot be empty.";
    }

    //  Database connection (Replace with your actual database connection logic)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return "Error: Could not connect to database: " . $conn->connect_error;
    }

    // Prepare the SQL query (Use prepared statements to prevent SQL injection)
    $sql = "INSERT INTO reviews (productId, userId, reviewText) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return "Error: Could not prepare SQL statement.";
    }

    $stmt->bind_param("sii", $productId, $userId, $review); // 's' for string, 'i' for integer

    if (!$stmt->execute()) {
        return "Error: Could not execute SQL query: " . $stmt->error;
    }

    $stmt->close();
    $conn->close();

    return "Review submitted successfully!";
}


// Example Usage:
//  You would replace these with your actual database credentials
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_db_user";
$dbPassword = "your_db_password";

$reviewText = "This product is amazing! I highly recommend it.";
$productId = 123;
$userId = 456;

$response = storeUserReview($reviewText, $productId, $userId, $dbHost, $dbName, $dbUser, $dbPassword);
echo $response . "
"; // Output the response
?>


<?php

/**
 * User Review Function
 *
 * This function takes a set of user reviews and generates a formatted summary.
 * It calculates average rating and provides a list of reviews.
 *
 * @param array $reviews An array of review objects. Each object should have:
 *                       - `user`: The user's name.
 *                       - `rating`: The rating (e.g., 1-5).
 *                       - `comment`:  The review comment (optional).
 * @return string A formatted summary of the reviews.
 */
function generateReviewSummary(array $reviews)
{
    if (empty($reviews)) {
        return "No reviews available.";
    }

    $totalRating = 0;
    $reviewCount = count($reviews);
    $validReviews = 0; // Keep track of valid reviews (rating between 1 and 5)

    foreach ($reviews as $review) {
        if (isset($review['rating']) && is_numeric($review['rating']) &&
            $review['rating'] >= 1 && $review['rating'] <= 5) {
            $totalRating += $review['rating'];
            $validReviews++;
        } else {
            // Handle invalid reviews (optional: log, discard, etc.)
            // You could also skip invalid reviews and continue calculation
            // or display a warning message.
            // Example:
            // error_log("Invalid review from " . $review['user'] . ": " . $review['rating']);
        }
    }

    $averageRating = ($validReviews > 0) ? round($totalRating / $validReviews, 2) : 0;

    $summary = "<h2>Review Summary</h2>";
    $summary .= "<h3>Average Rating: " . $averageRating . "</h3>";
    $summary .= "<ul>";

    foreach ($reviews as $review) {
        $summary .= "<li>";
        $summary .= "<strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
        $summary .= "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        $summary .= "<strong>Comment:</strong> " . htmlspecialchars($review['comment'] ?? "No comment provided.") . "<br>"; // Handle missing comments
        $summary .= "</li>";
    }

    $summary .= "</ul>";

    return $summary;
}

// Example Usage:

// Sample Reviews
$reviews = [
    ['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product!'],
    ['user' => 'Bob', 'rating' => 5, 'comment' => 'Excellent value for money.'],
    ['user' => 'Charlie', 'rating' => 3, 'comment' => 'It\'s okay, could be better.'],
    ['user' => 'David', 'rating' => 1, 'comment' => 'Not happy with this.'], // Invalid review
    ['user' => 'Eve', 'rating' => 2.5, 'comment' => 'Could use some improvement.'],
];

// Generate the summary
$summary = generateReviewSummary($reviews);

// Output the summary
echo $summary;


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It provides a basic framework and can be expanded upon to include features
 * like rating systems, authentication, and database integration.
 *
 * @param string $review_text  The review text entered by the user.
 * @param int    $user_id       The ID of the user submitting the review (optional, use session/cookie for authentication).
 * @param int    $product_id    The ID of the product the review is for.
 * @param int    $rating        The rating given for the product (e.g., 1-5).  Optional.
 *
 * @return array|string An array of review data or an error message if something went wrong.
 */
function create_review(string $review_text, int $user_id, int $product_id, int $rating = 0) {
  // Input validation - VERY IMPORTANT
  if (empty($review_text)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  if ($user_id <= 0) {
    return ['status' => 'error', 'message' => 'Invalid user ID. User ID must be greater than zero.'];
  }

  if ($product_id <= 0) {
    return ['status' => 'error', 'message' => 'Invalid product ID. Product ID must be greater than zero.'];
  }

  // Add more validation here, such as checking rating range if applicable.


  // In a real application, you'd connect to a database here.
  // For demonstration purposes, we'll just store the review in an array.

  // Create a review object (simulating a database record)
  $review = [
    'review_text' => $review_text,
    'user_id'     => $user_id,
    'product_id'  => $product_id,
    'rating'      => $rating,
    'created_at'  => time() // Timestamp of when the review was created
  ];

  //Return the review data
  return $review;
}



/**
 * Example Usage (for demonstration)
 */

// Example 1: Create a review
$review_data = create_review("This product is amazing!", 123, 456, 5);

if ($review_data['status'] === 'error') {
  echo "Error creating review: " . $review_data['message'] . "
";
} else {
  echo "Review created successfully:
";
  print_r($review_data); // Display the created review
}


// Example 2: Create a review with default rating
$review_data2 = create_review("Good product!", 456, 789);
if ($review_data2['status'] === 'error') {
  echo "Error creating review: " . $review_data2['message'] . "
";
} else {
  echo "Review created successfully:
";
  print_r($review_data2);
}


// Example 3: Demonstrating error handling (empty review text)
$review_data3 = create_review("", 789, 123);
if ($review_data3['status'] === 'error') {
  echo "Error creating review: " . $review_data3['message'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item.
 *
 * @param string $product_id The ID of the product or item the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating    The rating (e.g., 1-5 stars).
 * @param string $comment   The review comment.
 * @param int    $review_id (Optional) The ID of the review to update or delete.
 * 
 * @return array An array containing the result of the operation (success/failure, message, and data).
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, int $review_id = 0) {
  // Input validation - crucial for security and data integrity
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.', 'data' => []];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'data' => []];
  }

  // **Replace this with your database interaction logic**
  // This is a placeholder - you'll need to adapt this to your database setup.
  // This example demonstrates how to create a new review.

  // Example using a hypothetical database connection ($db)
  // $db->query("INSERT INTO reviews (product_id, user_id, rating, comment)
  //            VALUES ('$product_id', '$user_id', '$rating', '$comment')");
  // $last_review_id = $db->lastInsertId();


  // Simulate a review insertion and return a review ID
  $last_review_id = 99; // Dummy ID for this example


  if($last_review_id == 0){
      return ['success' => false, 'message' => 'Error creating review.', 'data' => []];
  }

  return ['success' => true, 'message' => 'Review created successfully.', 'data' => ['review_id' => $last_review_id]];
}


// Example Usage:

// Create a new review
$result = create_user_review('product123', 'user456', '4', 'Great product, highly recommended!');
print_r($result); // Output: (checks if it's an array, shows the result)

// Update an existing review (assuming you have an update function)
//  function update_user_review(int $review_id, string $rating, string $comment) {
//    // ... database update logic ...
//  }

// Delete a review (assuming you have a delete function)
// function delete_user_review(int $review_id) {
//   // ... database delete logic ...
// }

?>


<?php

/**
 * Reviews class to handle user reviews for a product or service.
 */
class Review {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;
    private $reviewId;  // Unique identifier for the review.

    /**
     * Constructor
     * 
     * @param int $productId The ID of the product or service being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment/feedback.
     */
    public function __construct(int $productId, int $userId, int $rating, string $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Timestamp of the review.
        $this->reviewId = uniqid(); // Generate a unique ID for the review.
    }

    /**
     * Getters for each review attribute.
     * 
     * @return mixed
     */
    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    public function getReviewId() {
        return $this->reviewId;
    }

    /**
     *  Display the review in a user-friendly format.
     *
     * @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->reviewId . "
" .
               "Product ID: " . $this->productId . "
" .
               "User ID: " . $this->userId . "
" .
               "Rating: " . $this->rating . "
" .
               "Comment: " . $this->comment . "
" .
               "Date: " . $this->date;
    }
}

/**
 * Function to process user reviews (example usage)
 */
function processReview(Review $review) {
    echo "New Review Received:
";
    echo $review->displayReview() . "
";

    // In a real application, you'd likely save this review to a database.
    //  This is a placeholder for that functionality.
    echo "Review processed (placeholder - saving to database would happen here).
";
}


// --- Example Usage ---

// Create some reviews
$review1 = new Review(123, 45, 5, "Excellent product!  Highly recommended.");
$review2 = new Review(456, 78, 4, "Good value for the money.");
$review3 = new Review(123, 90, 3, "It's okay, but could be better.");

// Process the reviews
processReview($review1);
processReview($review2);
processReview($review3);

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a review text, and an optional rating,
 * and saves the review to a database.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given for the review (e.g., 1-5).
 *                    Defaults to 0 if not provided.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveReview(int $userId, string $reviewText, int $rating = 0) {
  // **Important:  Replace this with your actual database connection code.**
  // This is a placeholder for demonstration.
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  // Sanitize and validate inputs to prevent SQL injection and data issues.
  $reviewText = trim($reviewText); // Remove leading/trailing whitespace.
  if (empty($reviewText)) {
    return false; // Don't save empty reviews.
  }
  $rating = intval($rating); // Ensure rating is an integer.  Handles cases where $rating is a string.
  if ($rating < 1 || $rating > 5) {
    $rating = 0; // Default to 0 if rating is outside the valid range.
  }


  try {
    $stmt = $db->prepare("INSERT INTO reviews (user_id, review_text, rating) VALUES (?, ?, ?)");
    $stmt->execute([$userId, $reviewText, $rating]);
    return true;
  } catch (PDOException $e) {
    // Handle database errors gracefully.  Log the error for debugging.
    error_log("Error saving review: " . $e->getMessage());
    return false;
  }
}


// Example Usage:
//  This is just example data - replace with your actual application logic.

$userId = 123;
$review = "This product is fantastic!  Highly recommended.";
$rating = 5;

if (saveReview($userId, $review, $rating)) {
  echo "Review saved successfully!
";
} else {
  echo "Error saving review.
";
}

// Example with no rating
$userId = 456;
$review = "Okay product.";
if (saveReview($userId, $review)) {
  echo "Review saved without rating.
";
} else {
    echo "Error saving review without rating.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $product_id  The ID of the product or service being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $review_text  The text of the review.
 * @param array $reviews   (Optional) An array of existing reviews to be displayed.
 *
 * @return array An array containing:
 *   - 'reviews':  An array of reviews (including the new one).
 *   - 'new_review_added':  Boolean - True if a new review was added, false otherwise.
 */
function add_user_review(string $product_id, string $username, string $review_text, array &$reviews = []): array
{
  // Sanitize and validate input (important for security)
  $username = trim($username); // Remove whitespace
  $review_text = trim($review_text);

  if (empty($username) || empty($review_text)) {
    return ['reviews' => $reviews, 'new_review_added' => false]; // Return if no review text
  }

  //  Add the new review
  $new_review = [
    'id' => count($reviews) + 1, // Simple ID - consider using database IDs for production
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp for context
  ];
  $reviews[] = $new_review;

  return ['reviews' => $reviews, 'new_review_added' => true];
}


/**
 *  Example Usage and Demonstration
 */

// Initialize some existing reviews (for demonstration)
$existing_reviews = [
  ['id' => 1, 'username' => 'JohnDoe', 'review_text' => 'Great product!', 'timestamp' => '2023-10-26 10:00:00'],
  ['id' => 2, 'username' => 'JaneSmith', 'review_text' => 'Could be better.', 'timestamp' => '2023-10-26 11:30:00']
];


// Add a new review
$new_review_data = add_user_review('product123', 'PeterJones', 'Excellent value for money!');

// Display the updated reviews
echo "<h2>Reviews for Product: product123</h2>";
echo "<ul>";
foreach ($new_review_data['reviews'] as $review) {
    echo "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; // Use htmlspecialchars for security
    echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
    echo "<strong>Timestamp:</strong> " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";


// Another example - adding multiple reviews
$new_reviews = [];
for ($i = 0; $i < 3; $i++) {
    $new_reviews = add_user_review('product123', 'User' . $i, 'Review ' . $i);
}

echo "<h2>Reviews for Product: product123 (Multiple Reviews)</h2>";
echo "<ul>";
foreach ($new_reviews['reviews'] as $review) {
    echo "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
    echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
    echo "<strong>Timestamp:</strong> " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";
?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic structure for managing user reviews.
 */
class UserReview {

  /**
   * @var int User ID
   */
  private $userId;

  /**
   * @var string Review Text
   */
  private $reviewText;

  /**
   * @var int Rating (e.g., 1-5 stars)
   */
  private $rating;

  /**
   * @var DateTime Timestamp of review creation
   */
  private $timestamp;

  /**
   * Constructor
   *
   * @param int $userId
   * @param string $reviewText
   * @param int $rating
   */
  public function __construct(int $userId, string $reviewText, int $rating) {
    $this->userId = $userId;
    $this->reviewText = $reviewText;
    $this->rating = $rating;
    $this->timestamp = new DateTime(); // Automatically timestamp creation
  }

  /**
   * Get User ID
   *
   * @return int
   */
  public function getUserId(): int {
    return $this->userId;
  }

  /**
   * Get Review Text
   *
   * @return string
   */
  public function getReviewText(): string {
    return $this->reviewText;
  }

  /**
   * Get Rating
   *
   * @return int
   */
  public function getRating(): int {
    return $this->rating;
  }

  /**
   * Get Timestamp
   *
   * @return DateTime
   */
  public function getTimestamp(): DateTime {
    return $this->timestamp;
  }

  /**
   * Display Review (Simple Formatting)
   *
   * @return string
   */
  public function displayReview(): string {
    return "User ID: " . $this->userId . "
" .
           "Review: " . $this->reviewText . "
" .
           "Rating: " . $this->rating . "
" .
           "Timestamp: " . $this->timestamp->format('Y-m-d H:i:s');
  }
}


/**
 * User Review Review Function
 *
 * This function allows you to create and display user reviews.
 *
 * @param array $reviews An array of UserReview objects.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews</h2>
";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>
";
    return;
  }

  foreach ($reviews as $review) {
    echo "<h3>Review:</h3>
";
    echo $review->displayReview() . "

";
  }
}


// Example Usage:
// Create some reviews
$review1 = new UserReview(123, "Great product! Highly recommended.", 5);
$review2 = new UserReview(456, "Could be better, but decent.", 3);
$review3 = new UserReview(789, "Amazing!  I love it!", 5);

// Store the reviews in an array
$reviews = [$review1, $review2, $review3];

// Display the reviews
displayReviews($reviews);


//---  Another Example:  Creating Reviews from Input (Illustrative)---
// This part demonstrates how you'd integrate this with a form.
//  For simplicity, we'll use a simplified form with hardcoded values.
//  In a real application, you'd use $_POST or $_GET to collect the data.

//  Create a form (for example, in an HTML file)
/*
<form method="post">
  <label for="userId">User ID:</label>
  <input type="number" id="userId" name="userId" value="123"><br><br>

  <label for="reviewText">Review Text:</label><br>
  <textarea id="reviewText" name="reviewText" rows="4" cols="50"></textarea><br><br>

  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select><br><br>

  <input type="submit" value="Submit Review">
</form>
*/

// Simulate form submission (replace with actual $_POST data in a real app)
/*
if (isset($_POST['userId']) && isset($_POST['reviewText']) && isset($_POST['rating'])) {
  $userId = (int)$_POST['userId'];
  $reviewText = $_POST['reviewText'];
  $rating = (int)$_POST['rating'];

  $newReview = new UserReview($userId, $reviewText, $rating);
  // Add the new review to the $reviews array (or store it in a database).
  $reviews[] = $newReview;
}
*/

// Then call displayReviews($reviews); to display the new review(s).
?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for creating, storing, and displaying user reviews.
 */
class UserReview {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the UserReview object with a database connection.
     *
     * @param PDO $db  The PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * Creates a new review in the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The comment made by the reviewer.
     *
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_name', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Get a review by ID
     *
     * Retrieves a review from the database based on its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null An array containing the review data, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review;
        } catch (PDOException $e) {
            error_log("Error getting review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Get all reviews for a product
     *
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects.
     */
    public function getReviewsByProduct(int $productId) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews for product: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Update a review
     *
     * Updates an existing review in the database.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $rating, string $comment) {
        try {
            $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete a review
     *
     * Deletes a review from the database.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


// Example Usage (assuming you have a database connection $db)
//
// $review = new UserReview($db);
//
// // Create a new review
// $newReviewId = $review->createReview(123, 'john_doe', 5, 'Great product!');
//
// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId . "
";
// } else {
//     echo "Error creating review.
";
// }
//
// // Get a review by ID
// $review = $review->getReviewById($newReviewId);
// if ($review) {
//     echo "Review details:
";
//     print_r($review);
// } else {
//     echo "Review not found.
";
// }
//
// // Get reviews for product 123
// $reviews = $review->getReviewsByProduct(123);
// if ($reviews) {
//     echo "Reviews for product 123:
";
//     print_r($reviews);
// } else {
//     echo "No reviews found for product 123.
";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  Useful for tracking and moderation.
 * @param string $reviewerName (Optional)  The name of the reviewer, if not provided, uses $userId.
 *
 * @return array An array containing the review details and a success/failure message.
 */
function submitReview(string $productName, string $reviewText, int $userId = 0, string $reviewerName = '') {

  // Input Validation - VERY IMPORTANT
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  // Sanitize input - Protect against XSS and other vulnerabilities
  $productName = htmlspecialchars($productName);
  $reviewText = htmlspecialchars($reviewText);

  // Determine Reviewer Name
  if (empty($reviewerName)) {
    $reviewerName = $userId > 0 ?  "User ID: " . $userId : 'Anonymous';
  }

  // Store the Review - In a real application, this would likely involve database interaction
  //  This is just a placeholder for demonstration
  $review = [
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_id' => $userId,
    'reviewer_name' => $reviewerName,
    'submission_timestamp' => time() // Add a timestamp for tracking
  ];

  // Simulate saving to a file or database
  file_put_contents('reviews.txt', $review . PHP_EOL, FILE_APPEND);  // Append to a file

  return ['success' => true, 'review' => $review, 'message' => 'Review submitted successfully!'];
}

/**
 * Displays a list of reviews.
 *
 * @param array $reviews An array of review data.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " .  $reviews[0]['product_name'] . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['reviewer_name'] . ":</strong> " . $review['review_text'] . "<br>";
        echo "<strong>Date:</strong> " . date('Y-m-d H:i:s', $review['submission_timestamp']);
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Simulate a form submission (replace this with your actual form handling)
$product = "Awesome Gadget X";
$reviewText = "This gadget is amazing!  It does everything I need, and it's super easy to use.";
$userId = 123; // Example user ID

$result = submitReview($product, $reviewText, $userId);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    displayReviews($result); //  Display the submitted review
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}


// Example for anonymous user:
$resultAnon = submitReview("Another Product", "Great product!", 0, "");
if ($resultAnon['success']) {
  displayReviews($resultAnon);
}
?>


<?php

/**
 * User Review Function
 *
 * This function handles the process of adding, retrieving, and displaying user reviews.
 *
 * @param string $productId - The ID of the product the review is for.
 * @param string $userEmail - The email address of the user submitting the review.
 * @param string $reviewText - The text of the review.
 * @param string $dbFilePath - Path to the database file (e.g., 'reviews.txt', 'reviews.json', etc.).
 * @param bool $allowAnonymous - Whether to allow anonymous reviews.
 *
 * @return array|string - Returns an array of reviews if successful, or an error message if not.
 */
function add_review(string $productId, string $userEmail, string $reviewText, string $dbFilePath, bool $allowAnonymous = false) {
    // Input Validation (basic example - enhance for production)
    if (empty($productId) || empty($reviewText)) {
        return "Error: Product ID and Review Text cannot be empty.";
    }

    // Sanitize Input (Basic - improve for production)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

    // Check if anonymous review is allowed
    if (!$allowAnonymous && !isset($userEmail)) {
        return "Error: Anonymous reviews are not allowed.";
    }

    // Construct the review data
    $reviewData = [
        'product_id' => $productId,
        'user_email' => $userEmail,
        'review' => $reviewText,
        'timestamp' => date("Y-m-d H:i:s")
    ];

    // Save the review to the database file
    $filename = $dbFilePath;
    $reviewString = json_encode($reviewData); // Use JSON for structured data

    if (file_put_contents($filename, $reviewString) === false) {
        return "Error: Failed to save review to database.";
    }

    return "Review added successfully!";
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productId - The ID of the product.
 * @param string $dbFilePath - Path to the database file.
 * @return array|string - Returns an array of reviews or an error message.
 */
function get_reviews(string $productId, string $dbFilePath) {
    $filename = $dbFilePath;
    if (!file_exists($filename)) {
        return "Error: No reviews found for product ID: " . $productId . ".  Database file not found.";
    }

    $reviews = [];
    if (($handle = fopen($filename, "r")) !== false) {
        while (($data = fgetcsv($handle, 1000, ",")) !== false) { // Adjust delimiter if needed
            if (count($data) == 4 && isset($data[0]) && isset($data[1]) && isset($data[2]) && isset($data[3])) {
                $review = [
                    'product_id' => $data[0],
                    'user_email' => $data[1],
                    'review' => $data[2],
                    'timestamp' => $data[3]
                ];
                $reviews[] = $review;
            }
        }
        fclose($handle);
    } else {
        return "Error: Could not open database file.";
    }

    if (empty($reviews)) {
        return "No reviews found for product ID: " . $productId;
    }

    return $reviews;
}


/**
 * Example Usage
 */

// Configuration
$dbFilePath = 'reviews.json'; // Replace with your actual file path
$productId = 'P123';

// Add a review
$reviewResult = add_review($productId, 'user@example.com', 'Great product!  Highly recommended.', $dbFilePath);
echo "Add Review Result: " . $reviewResult . "
";

// Get reviews for the product
$reviews = get_reviews($productId, $dbFilePath);
echo "Reviews:
";
print_r($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and display user reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the user's review.
 * @param string $username The name of the user submitting the review.
 * @param array $reviews (Optional) An existing array of reviews to add to. Defaults to an empty array.
 *
 * @return array An array of reviews, updated with the new review.
 */
function addReview(string $productName, string $reviewText, string $username, array $reviews = []) {
  // Sanitize input (basic, expand as needed for production)
  $productName = trim($productName);
  $reviewText = trim($reviewText);
  $username = trim($username);

  // Validate input (you can enhance this with more robust validation)
  if (empty($productName) || empty($reviewText) || empty($username)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create a new review object.  Could be an object or an associative array.
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for better organization
  ];

  // Add the new review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display the reviews
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " .  implode(",",array_column($reviews, 'username')) . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet!</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['username'] . ":</strong> " . $review['review'] . " - " . $review['date'];
        echo "</li>";
    }
    echo "</ul>";
}



// Example Usage:
$product = "Awesome Gadget X";

// Add some initial reviews
$reviews = addReview($product, "This gadget is fantastic!  It's easy to use and does everything I need.", "John Doe");
$reviews = addReview($product, "Great product, but a little pricey.", "Jane Smith", $reviews);
$reviews = addReview($product, "Works as described.", "Peter Jones", $reviews);


// Display the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function handles adding, retrieving, and displaying user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  Database connection object (optional - defaults to null)
 *
 * @return array An array containing:
 *               - 'success': True if the review was successfully added, false otherwise.
 *               - 'message': A message indicating the status of the review operation.
 *               - 'review': The newly created review object (if successful).
 */
function create_user_review(string $productId, string $userId, string $rating, string $comment, ?array $dbConnection = null) {
  // Input validation -  Essential for security and data integrity
  if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'All fields are required.',
      'review' => null
    ];
  }

  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be a number between 1 and 5.',
      'review' => null
    ];
  }


  // Data Sanitization - VERY IMPORTANT to prevent SQL injection and XSS attacks
  $productId = $dbConnection ? $dbConnection->real_escape_string($productId) : htmlspecialchars($productId);
  $userId = $dbConnection ? $dbConnection->real_escape_string($userId) : htmlspecialchars($userId);
  $rating = (int)$rating; // Cast to integer for database usage
  $comment = $dbConnection ? $dbConnection->real_escape_string($comment) : htmlspecialchars($comment);


  // Database interaction - Example using a simple database setup
  $review = [
    'product_id' => $productId,
    'user_id' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'created_at' => date('Y-m-d H:i:s') // Timestamp for record creation
  ];

  //  Replace this with your actual database query
  $result = mysqli_query($dbConnection, "INSERT INTO reviews (product_id, user_id, rating, comment, created_at) VALUES ('$productId', '$userId', '$rating', '$comment', '$review[created_at]')");

  if (mysqli_query($dbConnection, "INSERT INTO reviews (product_id, user_id, rating, comment, created_at) VALUES ('$productId', '$userId', '$rating', '$comment', '$review[created_at]')")) {  // Example query, adapt to your schema
    return [
      'success' => true,
      'message' => 'Review added successfully.',
      'review' => $review
    ];
  } else {
    return [
      'success' => false,
      'message' => 'Error adding review: ' . mysqli_error($dbConnection),
      'review' => null
    ];
  }
}


// Example Usage (replace with your actual database connection)
// Create a dummy database connection for this example
$dbConnection = mysqli_connect("localhost", "username", "password", "database_name");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}

// Example 1: Successful Review
$review_data = create_user_review("123", "user123", 4, "Great product!", $dbConnection);
print_r($review_data);

// Example 2:  Invalid Rating
$review_data = create_user_review("456", "user456", 6, "Awesome!", $dbConnection);
print_r($review_data);

// Example 3: Empty Fields
$review_data = create_user_review("", "user789", 3, "Okay.", $dbConnection);
print_r($review_data);


mysqli_close($dbConnection); // Close the database connection
?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to store and manage user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (Optional) - The unique ID of the review.  If not provided, auto-generated.
     * @param int $userId   The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct(
        $reviewId = null,
        $userId,
        $productId,
        $rating,
        $comment
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Use current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }

    /**
     *  Setters (optional - you could make these private and only allow modification
     *  in specific cases, for example, through a moderation system)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }


    /**
     *  Method to display review details
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Date: " . $this->getReviewDate() . "<br>";
    }
}


/**
 * User Review Review Function (Demonstration)
 */
function displayReviews($reviews) {
    echo "<h2>User Reviews:</h2>";

    foreach ($reviews as $review) {
        echo "<div class='review'>";
        $review->displayReview();
        echo "</div><hr>";
    }
}



// Example Usage:

// Create some reviews
$review1 = new UserReview(null, 123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(null, 456, 456, 4, "Good product, but could be better.");
$review3 = new UserReview(null, 789, 456, 3, "Average product.");


// Store the reviews (in a real application, this would likely be a database)
$allReviews = array($review1, $review2, $review3);


// Display the reviews
displayReviews($allReviews);


// **Demonstration of Adding Reviews to a Database (Conceptual)**

/*
//  Assume you have a database connection established
//  and a table named "reviews" with columns:
//  - review_id (INT, PRIMARY KEY, AUTO_INCREMENT)
//  - user_id (INT)
//  - product_id (INT)
//  - rating (INT)
//  - comment (TEXT)
//  - review_date (TIMESTAMP)

//  Here's a conceptual example (adapt to your database library):
/*
$db = new DatabaseConnection(); // Replace with your actual database connection

foreach ($allReviews as $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES (" . $db->escapeString($review->getUserId()) . ", " . $db->escapeString($review->getProductId()) . ", " . $db->escapeString($review->getRating()) . ", " . $db->escapeString($review->getComment()) . ")";

    $result = $db->execute($sql);
    if ($result) {
        // Successfully inserted the review
        $reviewId = $db->lastInsertId(); // Get the ID of the newly inserted review
        $review->setReviewId($reviewId); // Set the review ID
        echo "Review added to database with ID: " . $review->getReviewId() . "<br>";
    } else {
        echo "Error adding review to database.<br>";
    }
}
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 *
 * @param string $reviewText The text of the user's review.
 * @param string $username The username of the user who submitted the review.
 * @param int   $rating    The rating given by the user (e.g., 1-5).  Optional, defaults to 0.
 * @param int   $itemId     The ID of the item being reviewed (e.g., product ID). Required.
 * @param PDO  $db         A PDO database connection object. Required.
 *
 * @return array An array containing the review ID, or an empty array on failure.
 */
function create_user_review(string $reviewText, string $username, int $rating = 0, int $itemId, PDO $db)
{
    // Input validation - very important!
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (!is_numeric($itemId)) {
        return ['error' => 'Item ID must be a number.'];
    }

    try {
        // SQL Query
        $sql = "INSERT INTO reviews (item_id, username, review_text, rating)
                VALUES (:item_id, :username, :review_text, :rating)";

        // Prepare and execute the query
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':item_id', $itemId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $result = $stmt->execute();

        // Get the last inserted ID
        $reviewId = $db->lastInsertId();

        return ['success' => true, 'review_id' => $reviewId];

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error for debugging
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Function to display a single user review.
 *
 * @param int $reviewId The ID of the review to display.
 * @param PDO $db      A PDO database connection object.
 *
 * @return array An array containing the review data, or an empty array on failure.
 */
function display_user_review(int $reviewId, PDO $db) {
    try {
        $sql = "SELECT * FROM reviews WHERE id = :review_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':review_id', $reviewId);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);

        return $review;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}

// Example Usage (Illustrative - requires database setup)
/*
// Assume you have a database connection named $db
// Example using SQLite (replace with your database connection)
$db = new PDO('sqlite:/path/to/your/database.db'); //  Replace with your database details

$reviewData = create_user_review("This is a fantastic product!", "JohnDoe", 5, 123);

if ($reviewData['success']) {
    echo "Review created successfully!  Review ID: " . $reviewData['review_id'];
} else {
    echo "Error creating review: " . $reviewData['error'];
}

$displayReview = display_user_review($reviewData['review_id'], $db);
if ($displayReview['success']) {
  echo "<br>Review Details:<br>";
  echo "Username: " . $displayReview['username'] . "<br>";
  echo "Review: " . $displayReview['review_text'] . "<br>";
  echo "Rating: " . $displayReview['rating'] . "<br>";
} else {
  echo "Error displaying review: " . $displayReview['error'];
}

*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or item.
 * It includes input validation, sanitization, and storage of the review.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The user's comment about the product.
 * @param string $user_id    (Optional) The ID of the user submitting the review.  If not provided, a default ID is generated.
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function submit_review(string $product_id, string $rating, string $comment, string $user_id = null): bool|string
{
  // --- Input Validation & Sanitization ---

  // Check if rating is a valid number between 1 and 5
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  // Trim whitespace from the comment
  $comment = trim($comment);

  // Sanitize the comment (prevent SQL injection) - IMPORTANT!
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);  //Remove HTML tags and potentially other unwanted characters
  // Consider using prepared statements for more robust security.


  // Check if user ID is provided
  if ($user_id === null) {
    $user_id = generate_unique_user_id();  //Implement this function - see example below
  }

  // --- Database Interaction (Example using a simple array - replace with your database logic) ---

  // In a real application, you'd connect to your database here.
  $reviews = load_reviews($product_id);  // Implement this function - see example below
  
  //Create a review object, you can define more properties as needed
  $review = [
      'product_id' => $product_id,
      'rating' => $rating,
      'comment' => $comment,
      'user_id' => $user_id,
      'timestamp' => time()  // Add a timestamp
  ];
  
  // Add the review to the reviews array.
  $reviews[] = $review;
    
  if (count($reviews) > 0) {
        return true;
  } else {
        return "Error: Failed to save review.";
  }
  
}


// --- Helper Functions (Implement these based on your needs) ---

/**
 * Generates a unique user ID (Replace with a more robust solution if needed)
 *
 * @return string A unique user ID.
 */
function generate_unique_user_id(): string
{
    return uniqid();  //A simple and effective way to generate unique IDs.
}


/**
 * Loads reviews for a given product ID from a storage (e.g., database, array).
 *
 * @param string $product_id The ID of the product.
 * @return array An array of reviews for the product.
 */
function load_reviews(string $product_id): array
{
    // --- Replace this with your database query ---
    // Example:
    // $conn = new mysqli("localhost", "username", "password", "database");
    // $result = $conn->query("SELECT * FROM reviews WHERE product_id = '$product_id'");
    // $reviews = $result->fetch_all(MYSQLI_ASSOC);
    // $conn->close();

    // Simple example using a static array:
    static $reviews = [];
    return $reviews;
}


// --- Example Usage ---
$product = "electronics_123";

// Successful submission
$result = submit_review($product, 4, "Great product!  Works as expected.");
if ($result) {
  echo "Review submitted successfully: " . $result . "
";
} else {
  echo "Error submitting review.
";
}

// Submission with error (invalid rating)
$result = submit_review($product, 6, "Too expensive!");
if ($result) {
  echo "Review submitted successfully: " . $result . "
";
} else {
  echo "Error submitting review: " . $result . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @param string $rating (optional) A rating from 1 to 5 (default 5).
 *
 * @return array An array containing:
 *   - 'success': true if the review was successfully submitted, false otherwise.
 *   - 'message': A message to display to the user (e.g., success or error message).
 *   - 'review': The submitted review data (product, username, rating, review text).
 */
function submitReview(string $productName, string $reviewText, string $username, string $rating = '5'): array
{
  // Basic input validation - This is CRUCIAL in a real application
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => []];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => []];
  }

  //  In a real application, you would:
  //  1. Save the review to a database.
  //  2. Generate a unique ID for the review.
  //  3.  Store the ID, product name, username, rating, and review text in the database.

  // Simulate database saving for demonstration purposes
  $reviewId = generateUniqueId(); // Replace with your actual ID generation function
  $reviewData = [
    'product_name' => $productName,
    'username' => $username,
    'rating' => $rating,
    'review_text' => $reviewText,
    'id' => $reviewId
  ];

  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $reviewData];
}


/**
 * Generates a unique ID (Placeholder - Replace with a robust ID generation mechanism)
 *
 * This is a very simple example.  In a production environment, use something like UUIDs.
 */
function generateUniqueId(): string
{
    return uniqid(); // Returns a unique ID based on timestamp and random data
}

// ------------------- Example Usage -------------------
// Example 1: Successful submission
$reviewResult = submitReview('Awesome Widget', 'This widget is amazing!', 'JohnDoe', '4');
print_r($reviewResult);

// Example 2: Invalid rating
$reviewResult = submitReview('Another Product', 'Good product.', 'JaneSmith', '6');
print_r($reviewResult);

// Example 3: Empty review text
$reviewResult = submitReview('Something', '', 'PeterPan');
print_r($reviewResult);
?>


<?php

/**
 * Function to display user reviews for a product or service.
 *
 * @param array $reviews An array of review objects.
 *                       Each review object should have properties like:
 *                       - 'user': User's name or ID
 *                       - 'rating': Integer rating (e.g., 1-5)
 *                       - 'comment': User's review text
 * @param string $productName (Optional) The name of the product/service being reviewed.
 * @return string HTML formatted review display.
 */
function displayUserReviews(array $reviews, string $productName = '') {
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $html = "<div class='reviews'><h2>Reviews for {$productName}</h2>";
  $html .= "<ul>";

  foreach ($reviews as $review) {
    $html .= "<li class='review'>";
    $html .= "<p><strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
    $html .= "<p>Rating: " . $review['rating'] . "</p>";
    $html .= "</li>";
  }

  $html .= "</ul></div>";
  return $html;
}

// Example Usage:
// Sample Reviews
$reviews = [
  [
    'user' => 'John Doe',
    'rating' => 5,
    'comment' => 'Great product!  Works exactly as advertised.',
  ],
  [
    'user' => 'Jane Smith',
    'rating' => 4,
    'comment' => 'Good value for money.  Could be a little more durable.',
  ],
  [
    'user' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It\'s okay.  Not amazing, but not bad either.',
  ],
];

// Display the reviews for "Awesome Gadget"
$reviewHtml = displayUserReviews($reviews, 'Awesome Gadget');
echo $reviewHtml;


//Example using an empty array to show the "No reviews yet" message.
$emptyReviews = [];
$emptyHtml = displayUserReviews($emptyReviews, 'Another Product');
echo $emptyHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic input validation and sanitization to prevent common security vulnerabilities.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the reviewer.
 * @return array An array containing the review details (success, message, review) or an error message.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName): array
{
    // Input Validation and Sanitization
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);

    // Validate required fields
    if (empty($productId) || empty($reviewText) || empty($reviewerName)) {
        return ['success' => false, 'message' => 'All fields are required.', 'review' => null];
    }

    // Basic Review Sanitization (more sophisticated sanitization might be needed)
    $reviewText = strip_tags($reviewText); // Remove HTML tags

    // **Important:**  In a real application, you would typically:
    // 1. Store the review in a database.
    // 2. Implement user authentication to track who submitted the review.
    // 3. Add more robust security measures like escaping data before displaying it.

    // Simulate storing the review (replace with database interaction)
    $review = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'reviewerName' => $reviewerName,
        'submissionTime' => date('Y-m-d H:i:s')
    ];

    return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $review];
}

/**
 * Displays Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product ID.
 *
 * @param string $productId The ID of the product for which to display reviews.
 * @return string HTML representation of the reviews.  Returns an error message if no reviews are found.
 */
function displayReviews(string $productId): string
{
    // Simulate retrieving reviews from a database or other data source.
    // Replace this with your actual data retrieval logic.
    $reviews = [
        'product123' => [
            ['reviewerName' => 'John Doe', 'reviewText' => 'Great product! Highly recommended.', 'submissionTime' => '2023-10-27 10:00:00'],
            ['reviewerName' => 'Jane Smith', 'reviewText' => 'Good value for money.', 'submissionTime' => '2023-10-26 14:30:00'],
        ],
        'product456' => [
            ['reviewerName' => 'Peter Jones', 'reviewText' => 'Could be better.', 'submissionTime' => '2023-10-25 09:15:00'],
        ],
    ];

    if (isset($reviews[$productId])) {
        $html = '<ul>';
        foreach ($reviews[$productId] as $review) {
            $html .= '<li><strong>' . htmlspecialchars($review['reviewerName']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . ' (' . $review['submissionTime'] . ')</li>';
        }
        $html .= '</ul>';
        return $html;
    } else {
        return "<p>No reviews found for this product.</p>";
    }
}


// Example Usage:
$productId = 'product123';

// Submit a review
$reviewResult = submitReview($productId, "This is a fantastic product! I highly recommend it.", "Alice Brown");

if ($reviewResult['success']) {
    echo "<h3>Review submitted:</h3>";
    echo "<pre>";
    print_r($reviewResult['review']); // Display the submitted review details.
    echo "</pre>";
} else {
    echo "<p style='color:red;'>Error submitting review: " . $reviewResult['message'] . "</p>";
}

// Display the reviews
echo "<h3>Reviews for " . htmlspecialchars($productId) . ":</h3>";
echo displayReviews($productId);



?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating   The rating given by the user (e.g., 1-5).
 * @param string $dbHost  The database hostname.
 * @param string $dbName  The name of the database.
 * @param string $dbUser  The database username.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing:
 *              - 'success': True if the review was added successfully, false otherwise.
 *              - 'message': A message describing the outcome (e.g., 'Review added', 'Error saving review').
 */
function add_user_review(
    string $productId,
    string $userName,
    string $reviewText,
    int    $rating,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {

    // Validate inputs (Basic example - more robust validation is recommended)
    if (empty($productId) || empty($userName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid input.  Product ID, User Name, Review Text, and Rating must be provided and Rating must be between 1 and 5.'
        ];
    }

    try {
        // Establish database connection
        $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception('Connection failed: ' . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (productId, userName, reviewText, rating) VALUES (?, ?, ?, ?)";

        // Prepare the statement
        $stmt = $conn->prepare($sql);

        // Bind parameters
        $stmt->bind_param("sss", $productId, $userName, $reviewText);

        // Execute the statement
        if ($stmt->execute()) {
            $stmt->close();
            $conn->close();
            return [
                'success' => true,
                'message' => 'Review added successfully.'
            ];
        } else {
            $stmt->close();
            $conn->close();
            return [
                'success' => false,
                'message' => 'Error saving review: ' . $stmt->error
            ];
        }
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => 'An error occurred: ' . $e->getMessage()
        ];
    }
}


// Example Usage (Remember to adapt this to your specific database setup)
// $result = add_user_review(
//     'product123',
//     'John Doe',
//     'Great product!  Highly recommended.',
//     5,
//     'localhost',
//     'my_database',
//     'my_user',
//     'my_password'
// );

// print_r($result);
?>


<?php

/**
 * Class UserReview
 *
 * This class handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user writing the review.
     * @param string $reviewText The text of the review.
     * @param int $rating   The rating (1-5).
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating): bool
    {
        if (!isset($productId, $userName, $reviewText)) {
            return false; // Required parameters are missing
        }

        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for sorting/display
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProductId(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array  An array of all reviews
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }


    /**
     * Displays reviews for a product ID.
     *
     * @param int $productId The ID of the product.
     */
    public function displayReviews(int $productId)
    {
        $reviews = $this->getReviewsByProductId($productId);

        if (empty($reviews)) {
            echo "<p>No reviews found for this product.</p>";
            return;
        }

        echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['userName'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "John Doe", "Great product!  Highly recommended.", 5);
$reviewSystem->addReview(123, "Jane Smith", "Good value for money.", 4);
$reviewSystem->addReview(456, "Peter Jones", "Disappointed with the quality.", 2);

// Display reviews for product 123
$reviewSystem->displayReviews(123);

// Display all reviews
// echo "<h2>All Reviews</h2>";
// echo $reviewSystem->getAllReviews();


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text entered by the user.
 * @param int $userId The ID of the user writing the review.  Defaults to 0 (anonymous user).
 * @param int $productId The ID of the product being reviewed.  Defaults to 0 (for general reviews).
 * @return array An array containing the review data (ID, product ID, user ID, review text, date),
 *               or an array with an error message if the review creation fails.
 */
function createReview(string $productName, string $reviewText, int $userId = 0, int $productId = 0) {
  // Sanitize input (basic - improve for production environments)
  $productName = trim($productName);
  $reviewText = trim($reviewText);

  if (empty($productName) || empty($reviewText)) {
    return ['error' => 'Product name and review text cannot be empty.'];
  }

  // Generate a unique ID (for demonstration purposes - use a database sequence for production)
  $reviewId = time();

  // Get the current timestamp
  $date = date('Y-m-d H:i:s');

  // Store the review data (in a real application, this would go to a database)
  // This is just a placeholder for demonstration.
  $reviewData = [
    'id' => $reviewId,
    'product_id' => $productId,
    'user_id' => $userId,
    'review_text' => $reviewText,
    'date' => $date
  ];

  // Validation - Add more robust validation as needed (e.g., review length)
  // For example, you might want to limit the review text length.
  //  if (strlen($reviewText) > 500) {
  //     return ['error' => 'Review text is too long.']
  //  }

  return $reviewData;
}


/**
 * Display Reviews (Example - Adapt to your database and display format)
 *
 * This function displays reviews for a given product.
 *
 * @param int $productId The ID of the product.
 */
function displayReviews(int $productId) {
  // **This is a placeholder - Replace with your database query**
  // In a real application, you would fetch reviews from a database
  // based on the $productId.

  $reviews = [
    // Example reviews (replace with database data)
    [
      'id' => 1,
      'product_id' => $productId,
      'user_id' => 123,
      'review_text' => 'Great product!  I highly recommend it.',
      'date' => '2023-10-26 10:00:00'
    ],
    [
      'id' => 2,
      'product_id' => $productId,
      'user_id' => 456,
      'review_text' => 'Good value for the price.',
      'date' => '2023-10-27 14:30:00'
    ],
  ];


  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li><strong>User:</strong> " . ($review['user_id'] > 0 ? "User ID: " . $review['user_id'] : "Anonymous") . "<br>" .
           "<strong>Date:</strong> " . $review['date'] . "<br>" .
           $review['review_text'];
      echo "</li>";
    }
    echo "</ul>";
  }
}


// **Example Usage**
$product = "Awesome Widget";

// Create a review
$reviewData = createReview($product, "This widget is amazing!");

if (isset($reviewData['error'])) {
  echo "<p style='color:red;'>Error creating review: " . $reviewData['error'] . "</p>";
} else {
  echo "<p>Review created successfully! Review ID: " . $reviewData['id'] . "</p>";
}


// Display reviews for a specific product (e.g., product ID = 1)
displayReviews(1);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It handles input validation, stores reviews (in this example, in an array),
 * and provides basic display functionality.
 */

class UserReview {

    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $name The name of the user who wrote the review.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $comment) {
        // Input validation -  You can customize this as needed
        if (empty($name) || empty($comment)) {
            return false; // Require both name and comment
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for review date
        ];

        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Display all reviews.
     */
    public function displayReviews() {
        echo "<h2>User Reviews:</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->getAllReviews() as $review) {
            echo "<li><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . " - " . htmlspecialchars($review['date']) . "</li>";
        }
        echo "</ul>";
    }
}

// --- Example Usage ---

// Create a new review object
$review = new UserReview();

// Add some reviews
$review->addReview("John Doe", "Great product!  Highly recommended.");
$review->addReview("Jane Smith", "Could be better.  Needs some improvements.");
$review->addReview("Peter Jones", "Excellent value for money.");


// Display the reviews
$review->displayReviews();

//  You can also access and process reviews programmatically
//  $allReviews = $review->getAllReviews();
//  foreach ($allReviews as $review) {
//    // Do something with the review data
//    echo "Review by: " . htmlspecialchars($review['name']) . "<br>";
//  }

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to collect and display user reviews for a product or item.
 * It includes input validation, data sanitization, and basic formatting.
 * 
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of review objects.  Each object should have:
 *                     - name: The reviewer's name.
 *                     - rating: An integer from 1 to 5 representing the rating.
 *                     - comment: The review text.
 * @return string The HTML output of the reviews.  Returns an empty string if no reviews are found.
 */
function displayUserReviews(string $productName, array $reviews) {
  // Input Validation - Basic check for empty reviews array
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $html = "<div class=\"product-reviews\">";
  $html .= "<h3>Reviews for {$productName}</h3>";
  $html .= "<ul>";

  foreach ($reviews as $review) {
    // Data Sanitization - Very basic, consider more robust sanitization for production
    $name = htmlspecialchars($review['name'], ENT_QUOTES, 'UTF-8');
    $rating = htmlspecialchars($review['rating'], ENT_QUOTES, 'UTF-8');
    $comment = htmlspecialchars($review['comment'], ENT_QUOTES, 'UTF-8');

    $html .= "<li class=\"review\">";
    $html .= "<p><strong>{$name}:</strong> {$rating} stars</p>";
    $html .= "<p>{$comment}</p>";
    $html .= "</li>";
  }

  $html .= "</ul>";
  $html .= "</div>";

  return $html;
}


/**
 * Example Usage:
 */

// Sample Reviews (replace with actual data from a database or form)
$reviews = [
  [
    'name' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Works exactly as advertised.',
  ],
  [
    'name' => 'Jane Smith',
    'rating' => 5,
    'comment' => 'Excellent value for the price. Highly recommended.',
  ],
  [
    'name' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It\'s okay, but could be better.',
  ]
];

// Call the function to display the reviews
$reviewHTML = displayUserReviews('Awesome Widget', $reviews);

// Output the HTML to the browser
echo $reviewHTML;


?>


<?php

/**
 * Class UserReview
 *
 * Handles user review creation, retrieval, and basic validation.
 */
class UserReview {

  private $db_connection;

  public function __construct($db_connection) {
    $this->db_connection = $db_connection;
  }

  /**
   * Creates a new user review.
   *
   * @param int $userId The ID of the user submitting the review.
   * @param int $productId The ID of the product being reviewed.
   * @param string $title The title of the review.
   * @param string $comment The review comment.
   * @return int|false The ID of the newly created review, or false on failure.
   */
  public function createReview(int $userId, int $productId, string $title, string $comment) {
    // Validation (Simple - can be expanded)
    if (!$this->isValidReview($userId, $productId, $title, $comment)) {
      return false;
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (user_id, product_id, title, comment)
            VALUES (:user_id, :product_id, :title, :comment)";

    // Prepare the statement
    $stmt = $this->db_connection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    return $stmt->execute();
  }

  /**
   * Retrieves a single review by its ID.
   *
   * @param int $reviewId The ID of the review to retrieve.
   * @return array|false An array containing the review data, or false if not found.
   */
  public function getReviewById(int $reviewId) {
    // Prepare the SQL statement
    $sql = "SELECT * FROM reviews WHERE id = :review_id";

    // Prepare the statement
    $stmt = $this->db_connection->prepare($sql);

    // Bind the parameter
    $stmt->bindParam(':review_id', $reviewId);

    // Execute the statement
    $stmt->execute();

    // Get the result
    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    // Return the review data
    return $review;
  }

  /**
   * Retrieves all reviews for a given product.
   *
   * @param int $productId The ID of the product.
   * @return array An array of review objects.
   */
  public function getReviewsByProduct(int $productId) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db_connection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Validates the review data.  Add more complex validation as needed.
   *
   * @param int $userId
   * @param int $productId
   * @param string $title
   * @param string $comment
   * @return bool True if the data is valid, false otherwise.
   */
  private function isValidReview(int $userId, int $productId, string $title, string $comment) {
    // Basic validation - enhance as needed
    if ($userId <= 0) {
      return false;
    }
    if ($productId <= 0) {
      return false;
    }
    if (empty($title)) {
      return false;
    }
    if (empty($comment)) {
      return false;
    }
    return true;
  }
}


// Example Usage (Assuming you have a database connection established)
// Replace with your actual database connection details
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

$reviewManager = new UserReview($db_connection);

// Create a review
$userId = 1;
$productId = 10;
$reviewTitle = "Great Product!";
$reviewComment = "I really enjoyed this product. Highly recommended!";

$reviewId = $reviewManager->createReview($userId, $productId, $reviewTitle, $reviewComment);

if ($reviewId) {
  echo "Review created successfully with ID: " . $reviewId . "<br>";
} else {
  echo "Failed to create review.<br>";
}

// Get review by ID
$review = $reviewManager->getReviewById($reviewId);

if ($review) {
  echo "Review details: ";
  foreach ($review as $key => $value) {
    echo $key . ": " . $value . ", ";
  }
  echo "<br>";
} else {
  echo "Review not found.<br>";
}

// Get reviews for a product
$productReviews = $reviewManager->getReviewsByProduct($productId);

echo "Reviews for Product " . $productId . ":<br>";
foreach ($productReviews as $review) {
  echo "- " . $review['title'] . " - " . $review['comment'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product/service.
 * @param int $maxReviews The maximum number of reviews to allow.
 * @param string $reviewForm  The HTML form for collecting reviews.  Consider using a template engine for this.
 * @param string $reviewDisplayTemplate The template to use for displaying reviews.  Consider using a template engine for this.
 * @param array $reviews  An optional array of existing reviews to display.
 *
 * @return array An array of review data, including the form and displayed reviews.
 */
function collectAndDisplayUserReviews(
    string $productId,
    int $maxReviews = 5,
    string $reviewForm = '
        <form action="process_review.php" method="post">
            <label for="review_text">Your Review:</label><br>
            <textarea id="review_text" name="review_text" rows="4" cols="50"></textarea><br>
            <button type="submit">Submit Review</button>
        </form>
    ',
    string $reviewDisplayTemplate = '
        <h2>Reviews for Product ID: {$productId}</h2>
        <ul>
            {$reviews}
        </ul>
    ',
    array $reviews = []
) {
    // Validate inputs (optional, but recommended)
    if (!is_numeric($productId)) {
        trigger_error('Invalid product ID. Must be a number.', E_USER_WARNING);
        return ['form' => $reviewForm, 'reviews' => $reviews];
    }
    if ($maxReviews <= 0) {
        trigger_error('Maximum reviews must be greater than 0.', E_USER_WARNING);
        $maxReviews = 5; // Default to 5
    }


    // Add the current review to the reviews array (simulating a form submission)
    $reviews = array_merge($reviews, [
        [
            'user' => 'John Doe',
            'rating' => 4,
            'comment' => 'Great product!  Easy to use.'
        ],
        [
            'user' => 'Jane Smith',
            'rating' => 5,
            'comment' => 'Excellent value for money.'
        ]
    ]);

    // Pass data to the display template
    $data = [
        'productId' => $productId,
        'reviews' => $reviews,
    ];

    // Pass the data to the display template
    $output = str_replace(['{$productId}', '{$reviews}'], $data, $reviewDisplayTemplate);

    return ['form' => $reviewForm, 'output' => $output];
}


// Example Usage:
$reviewData = collectAndDisplayUserReviews('12345');

// Display the results
echo $reviewData['output'];
?>


   $loader = new \Twig\Loader\FilesystemLoader('templates/'); // Adjust path
   $twig = new \Twig\Environment($loader);
   

3. **Use Twig to render the template:**

   
   $template = $twig->render('review_template.twig', $reviewData);
   echo $template;
   

   Where `review_template.twig` is your Twig template file.

**Example `review_template.twig` (using Twig):**



<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $reviews = [];
    private $db = null; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review object and establishes database connection (optional).
     *
     * @param PDO|null $db (Optional) PDO database connection object.  If null, uses in-memory storage.
     */
    public function __construct(PDO $db = null) {
        $this->db = $db;
        if (!$this->db) {
            // In-memory storage - this is a simple example and not suitable for production
            $this->reviews = [];
        }
    }

    /**
     * Add a new review.
     *
     * @param string $user   The user who wrote the review.
     * @param string $comment The review comment.
     * @return bool True on success, false on failure (e.g., empty comment).
     */
    public function addReview(string $user, string $comment): bool {
        if (empty($comment)) {
            return false;
        }

        $id = count($this->reviews) + 1; // Simple ID generation
        $this->reviews[$id] = [
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];
        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get a review by its ID.
     *
     * @param int $id The ID of the review to retrieve.
     * @return array|null Review object if found, null otherwise.
     */
    public function getReviewById(int $id): ?array {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        }
        return null;
    }

    /**
     * Delete a review by its ID.
     *
     * @param int $id The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $id): bool {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
            return true;
        }
        return false;
    }


    // --- Database integration (Optional - for persistence) ---
    /**
     *  Save Reviews to Database (Example)
     *  This is a simplified example.  A production system would likely
     *  use a more robust ORM or query builder.
     */
    public function saveToDatabase() {
        if ($this->db) {
            try {
                $sql = "INSERT INTO reviews (user, comment, date) VALUES (:user, :comment, :date)";
                $stmt = $this->db->prepare($sql);
                $stmt->bindParam(':user', $this->reviews);
                $stmt->bindParam(':comment', $this->reviews);
                $stmt->bindParam(':date', date('Y-m-d H:i:s'));

                $stmt->execute();

            } catch (PDOException $e) {
                // Handle database errors - log them, display a generic message to the user, etc.
                error_log("Database error: " . $e->getMessage());
                echo "Error saving review to database.";
            }
        }
    }
}


// --- Example Usage ---

// Create a Review object - using in-memory storage
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("Alice", "Great product!");
$reviewSystem->addReview("Bob", "Could be better.");
$reviewSystem->addReview("Charlie", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Date:</strong> " . $review['date'] . "<br>";
    echo "<hr>";
}

// Get a specific review
$specificReview = $reviewSystem->getReviewById(2);
if ($specificReview) {
    echo "<h2>Review ID 2:</h2>";
    echo "<strong>User:</strong> " . $specificReview['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $specificReview['comment'] . "<br>";
}

// Delete a review
$reviewSystem->deleteReview(1);

echo "<h2>Reviews after deleting review ID 1:</h2>";
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<hr>";
}
?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a given item.
 * It includes basic input validation and error handling.
 * 
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array $db_connection A database connection object (e.g., mysqli).
 * 
 * @return bool True if the review was successfully added, false otherwise.
 */
function add_user_review(string $item_id, string $username, string $rating, string $comment, array $db_connection) {
  // Input Validation - Basic example, expand as needed
  if (empty($item_id) || empty($username) || empty($rating) || empty($comment)) {
    error_log("Missing required fields in user review."); // Log for debugging
    return false;
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    error_log("Invalid rating format. Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize Input - Important for security
  $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
  $username = filter_var($username, FILTER_SANITIZE_STRING);
  $rating = (int) filter_var($rating, FILTER_SANITIZE_NUMBER_INT);  // Convert to integer
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);

  // Prepare the SQL query - Use prepared statements to prevent SQL injection
  $sql = "INSERT INTO reviews (item_id, username, rating, comment) 
          VALUES (?, ?, ?, ?)";

  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Error preparing SQL statement: " . $db_connection->error); // Log the error
    return false;
  }

  // Bind parameters
  $stmt->bind_param("ssii", $item_id, $username, $rating, $comment);

  // Execute the query
  if (!$stmt->execute()) {
    error_log("Error executing SQL query: " . $stmt->error); // Log the error
    $stmt->close();
    return false;
  }

  // Close the statement
  $stmt->close();

  return true;
}

/**
 *  Example function to display reviews for a given item ID
 *  This is just a conceptual example, you'll need to adapt it to your specific database schema and presentation layer.
 *
 * @param string $item_id The ID of the item to retrieve reviews for
 * @param array $db_connection  Your database connection object
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews_for_item(string $item_id, array $db_connection) {
    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing SQL statement: " . $db_connection->error);
        return [];
    }

    $stmt->bind_param("s", $item_id);

    $stmt->execute();

    if ($stmt === false) {
        error_log("Error executing SQL query: " . $stmt->error);
        return [];
    }

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


// Example Usage (Illustrative - requires a database connection setup)
//  Remember to replace with your actual database connection details!

// Sample database connection (Replace with your actual connection)
//$db_connection = new mysqli("localhost", "your_username", "your_password", "your_database");

//if ($db_connection->connect_error) {
//  die("Connection failed: " . $db_connection->connect_error);
//}


// Add a review
//$item_id = "product123";
//$username = "john.doe";
//$rating = 3;
//$comment = "Great product, would recommend!";

//if (add_user_review($item_id, $username, $rating, $comment, $db_connection)) {
//    echo "Review added successfully!
";
//} else {
//    echo "Failed to add review.
";
//}

// Get and display reviews for the item
//  Assuming a table named 'reviews' with columns: item_id, username, rating, comment
//  and that the item_id is 'product123'
//  This is just conceptual - you'll need to adapt the output to display in your interface.
//  $reviews = get_reviews_for_item("product123", $db_connection);

//if (!empty($reviews)) {
//    echo "<h2>Reviews for product123:</h2>
";
//    foreach ($reviews as $review) {
//        echo "<div>
";
//        echo "  <b>Username:</b> " . $review['username'] . "<br>
";
//        echo "  <b>Rating:</b> " . $review['rating'] . "<br>
";
//        echo "  <b>Comment:</b> " . $review['comment'] . "
";
//        echo "  </div>
";
//    }
//} else {
//    echo "No reviews found for this item.
";
//}

// Close the database connection
//$db_connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function creates and stores a user review in a database.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param int $product_id The ID of the product being reviewed.
 * @return bool True if the review was created successfully, false otherwise.
 */
function createReview(string $username, string $rating, string $comment, int $product_id)
{
    // Validate Input - Important for security and data integrity
    if (empty($username) || empty($rating) || empty($comment) || $product_id <= 0) {
        error_log("Invalid review data received: Username, rating, and comment cannot be empty, product ID must be positive.");  // Log for debugging
        return false;
    }

    if (!preg_match('/^[a-zA-Z\s]+$/', $comment)) {
        error_log("Invalid comment format.  Only letters and spaces are allowed.");
        return false;
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
      error_log("Rating must be a number between 1 and 5.");
      return false;
    }

    // Database connection (Replace with your actual database credentials)
    $db_host = 'localhost';
    $db_user = 'your_db_user';
    $db_password = 'your_db_password';
    $db_name = 'your_db_name';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection failed: " . $e->getMessage());
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (username, rating, comment, product_id) VALUES (:username, :rating, :comment, :product_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the query
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Error executing SQL query: " . $e->getMessage());
        return false;
    } finally {
        $pdo = null; // Close the database connection
    }
}


// Example Usage (for demonstration purposes - don't use directly in your application)
// $success = createReview("John Doe", 5, "Great product! Highly recommend.", 123);
// if ($success) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_id The ID of the item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $review_text The text of the review.
 * @param array $reviews An array of existing reviews (optional - for storing reviews in a database or array).
 * 
 * @return array  An updated array of reviews if reviews are being stored, 
 *                or the original reviews if not.
 */
function submit_review(string $item_id, string $username, string $review_text, array &$reviews = []) {

  // Basic input validation (you can add more robust validation here)
  if (empty($username) || empty($review_text)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create a new review object (you could use a class here for better organization)
  $review = [
    'item_id' => $item_id,
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s') // Add a timestamp for ordering
  ];

  // Add the new review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Display Reviews Function
 * 
 * This function displays a list of reviews for a given item.
 *
 * @param array $reviews An array of reviews.
 * @param string $item_id The ID of the item being reviewed (for display purposes).
 */
function display_reviews(array $reviews, string $item_id) {
  echo "<h2>Reviews for Item ID: " . $item_id . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "</p>";
    echo "<p><strong>Date:</strong> " . $review['timestamp'] . "</p>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example Usage:
$item_id = '123'; // Example item ID

// Simulate submitting a review
$reviews = []; // Start with an empty array
$reviews = submit_review($item_id, 'John Doe', 'Great product!  Highly recommended.');
$reviews = submit_review($item_id, 'Jane Smith', 'It was okay, but a little expensive.');
$reviews = submit_review($item_id, 'Peter Jones', 'Excellent service and fast delivery.');


// Display the reviews
display_reviews($reviews, $item_id);



//----------------------------------------------------------------------
// Example demonstrating how to save to a database instead of an array.
//----------------------------------------------------------------------
/*
// This requires a database connection.  This is just a placeholder.
// Replace with your database connection details.
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Attempt to connect to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to save reviews to the database
function save_review_to_db(string $item_id, string $username, string $review_text, mysqli $conn) {
    $sql = "INSERT INTO reviews (item_id, username, review_text, timestamp)
            VALUES ('$item_id', '$username', '$review_text', NOW())";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


//Example Usage (Assuming a 'reviews' table with columns item_id, username, review_text, timestamp)
//  You'd call this after submitting the review form.
//  $review_result = save_review_to_db($item_id, $username, $review_text, $conn);
//  if ($review_result) {
//     // Review saved successfully
//  } else {
//     // Handle error saving to database
//  }

// Close the database connection
$conn->close();
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews and displays them.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array  $reviews  (Optional) An array of existing reviews to display.
 * 
 * @return array  An array containing the updated reviews and a success message.
 */
function handleReview(string $productId, string $username, string $reviewText, array &$reviews = []): array {
  // Validate input (add more validation as needed)
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  // Create a review object (could be more sophisticated if needed)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time(), // Add timestamp for ordering and tracking
  ];

  // Add the new review to the array
  $reviews[] = $review;

  // Sort reviews by timestamp (most recent first)
  usort($reviews, function($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return ['status' => 'success', 'message' => 'Review submitted successfully!', 'reviews' => $reviews];
}

/**
 * Display Reviews Function
 *
 *  Displays the reviews in a formatted manner.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>"; // Display Product ID

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<div class='review'>";
    echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
    echo "<p><strong>Rating:</strong>" . $review['timestamp'] . "</p>"; // Display timestamp as a proxy for rating
    echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
    echo "</div>";
  }
}


// --- Example Usage ---

// Initialize reviews array (optional)
$reviews = [];

// Simulate a user submitting a review
$result = handleReview('P123', 'JohnDoe', 'This is a fantastic product! I highly recommend it.');

if ($result['status'] === 'success') {
  echo "<p>" . $result['message'] . "</p>";
  // Display the updated reviews
  displayReviews($result['reviews']);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

//Example 2 - submitting another review
$result = handleReview('P123', 'JaneSmith', 'It could be better, but overall pretty good.');

if ($result['status'] === 'success') {
  echo "<p>" . $result['message'] . "</p>";
  // Display the updated reviews
  displayReviews($result['reviews']);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to manage and store user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId; // Assuming you have a product ID
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId The ID of the user leaving the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters
     *
     * Return the values of the review properties.
     *
     * @return mixed  Return the value of the property.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setters (optional - for updating reviews in the future)
     *  Example:
     *  public function setComment($newComment) {
     *      $this->comment = $newComment;
     *  }
     */
}


/**
 * User Review Review Function (Demonstration)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
    // Create a new UserReview object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // **In a real application, you would now store this review in a database or file.**
    // For this example, we'll just print the review information.

    echo "Review Details:
";
    echo "  User ID: " . $review->getUserId() . "
";
    echo "  Product ID: " . $review->getProductId() . "
";
    echo "  Rating: " . $review->getRating() . "
";
    echo "  Comment: " . $review->getComment() . "
";
    echo "  Date: " . $review->getDate() . "
";
}


// Example Usage:
reviewProduct(123, 456, 5, "Great product! I highly recommend it.");
reviewProduct(456, 789, 3, "It's okay, but could be better.");


// Example of using a database (Conceptual - requires database connection)
/*
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');

// Example insert statement:
// $stmt = $db->prepare("INSERT INTO reviews (userId, productId, rating, comment) VALUES (?, ?, ?, ?)");
// $stmt->execute([$review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment()]);
*/

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, product ID, and a review text,
 * and saves the review to a database.
 *
 * @param int $userId  The ID of the user submitting the review.
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Sanitize input - Important for security!
    $userId = filter_var($userId, FILTER_VALIDATE_INT);
    $productId = filter_var($productId, FILTER_VALIDATE_INT);
    $reviewText = trim($reviewText);  // Remove leading/trailing whitespace

    // Validation - Check if inputs are valid
    if ($userId <= 0 || $productId <= 0 || empty($reviewText)) {
        error_log("Invalid review data:  userId, productId, and reviewText must be positive and non-empty.");
        return false;
    }


    // --- Database Interaction (Example using MySQLi) ---
    $servername = "localhost";
    $username = "your_db_username";
    $password = "your_db_password";
    $dbname = "your_db_name";

    // Create connection
    $conn = new mysqli($servername, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Prepare statement
    $stmt = $conn->prepare("INSERT INTO reviews (userId, productId, reviewText, reviewDate) VALUES (?, ?, ?, NOW())");

    // Bind parameters
    $stmt->bind_param("iii", $userId, $productId, $reviewText);

    // Execute statement
    if ($stmt->execute()) {
        $stmt->close();
        $conn->close();
        return true;
    } else {
        $stmt->close();
        $conn->close();
        error_log("Error saving review: " . $stmt->error);
        return false;
    }
}

// --- Example Usage ---

// Simulate a review
$user_id = 123;
$product_id = 456;
$review = "This product is fantastic!  I highly recommend it.";

// Save the review
if (saveUserReview($user_id, $product_id, $review)) {
    echo "Review saved successfully!
";
} else {
    echo "Failed to save review.
";
}

// --- Example with invalid data ---
if (saveUserReview(0, 10, "Bad review")) {
    echo "Review saved successfully (unexpectedly).
";
} else {
    echo "Failed to save review (as expected).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a formatted user review string
 * based on the provided review data.
 *
 * @param array $reviewData An associative array containing review data:
 *   - `user`: The username of the reviewer (string).
 *   - `rating`: The rating given by the reviewer (integer, 1-5).
 *   - `comment`: The reviewer's comment (string).
 *   - `date`: (Optional) The date of the review (string, formatted as YYYY-MM-DD).
 *
 * @return string A formatted user review string, or an error message if the
 *                input data is invalid.
 */
function generateUserReview(array $reviewData) {
    // Input validation - crucial for security and data integrity
    if (!isset($reviewData['user']) || !is_string($reviewData['user'])) {
        return "Error: Invalid user name.";
    }
    if (!isset($reviewData['rating']) || !is_int($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        return "Error: Invalid rating. Rating must be an integer between 1 and 5.";
    }
    if (!isset($reviewData['comment']) || !is_string($reviewData['comment'])) {
        return "Error: Invalid comment.";
    }
    if (isset($reviewData['date']) && !is_string($reviewData['date'])) {
        return "Error: Invalid date format.  Date must be a string.";
    }
    // Default date format if not provided
    $date = $reviewData['date'] ?? date("Y-m-d");

    // Generate the review string
    $review = sprintf(
        "**%s** - %s stars
",
        $reviewData['user'],
        $reviewData['rating']
    );

    $review .= $reviewData['comment'] . "
";
    $review .= "Date: " . $date;

    return $review;
}


// Example Usage:

$review1 = generateUserReview(['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product, highly recommended!', 'date' => '2023-10-26']);
echo $review1 . "

";

$review2 = generateUserReview(['user' => 'Bob', 'rating' => 3, 'comment' => 'It was okay.', 'date' => '2023-10-27']);
echo $review2 . "

";

$review3 = generateUserReview(['user' => 'Charlie', 'rating' => 5, 'comment' => 'Fantastic!']);
echo $review3 . "

";

// Example with invalid data:
$review4 = generateUserReview(['rating' => 6, 'comment' => 'Bad']);
echo $review4 . "

"; // This will produce an error message.

$review5 = generateUserReview(['user' => 'David', 'rating' => 2, 'comment' => 'Terrible']);
echo $review5 . "

"; // Another example of error handling.

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating; // 1-5
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product/item being reviewed.
     * @param int $rating The rating given by the user (1-5).
     * @param string $comment The user's comment about the product/item.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->reviewId = null; // Will be assigned automatically by the database
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (if needed - can be added for modifying review data)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    // Add more setters as needed (e.g., for comment)
}


/**
 * User Review Function
 *
 * This function takes a UserReview object and returns a formatted string
 * representing the review.
 *
 * @param UserReview $review The UserReview object to format.
 *
 * @return string A formatted string of the review data.
 */
function formatUserReview(UserReview $review) {
    $userId = $review->getUserId();
    $rating = $review->getRating();
    $comment = $review->getComment();
    $date = $review->getDate();

    return "Review ID: " . $review->getReviewId() . "
" .
           "User ID: " . $userId . "
" .
           "Rating: " . $rating . "/5
" .
           "Comment: " . $comment . "
" .
           "Date: " . $date;
}



// --- Example Usage ---

// Create a new review
$review = new UserReview(123, 456, 5, "Excellent product!  Highly recommended.");

// Format the review
$formattedReview = formatUserReview($review);

// Print the formatted review
echo $formattedReview . "
";

// Example with a different review
$review2 = new UserReview(789, 101, 3, "Good, but could be better.");
echo formatUserReview($review2) . "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (Optional)  The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review data, or an error message if the submission fails.
 */
function submitReview(string $product_id, string $user_name, string $review_text, int $rating = 0) {

  // Validation - Basic input validation.  Expand as needed for your application.
  if (empty($product_id)) {
    return ['error' => 'Product ID cannot be empty.'];
  }
  if (empty($user_name)) {
    return ['error' => 'User name cannot be empty.'];
  }
  if (empty($review_text)) {
    return ['error' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['error' => 'Rating must be between 1 and 5.'];
  }

  // In a real application, you would save this data to a database.
  // This example just simulates the storage.
  $review = [
    'product_id' => $product_id,
    'user_name' => $user_name,
    'review_text' => $review_text,
    'rating' => $rating,
    'submission_timestamp' => date('Y-m-d H:i:s')
  ];

  // Simulate saving the review to a file (replace with database insertion)
  file_put_contents('reviews.txt', json_encode($review) . PHP_EOL, FILE_APPEND);

  return $review;
}


/**
 *  Get all Reviews
 *
 *  Retrieves all reviews for a given product.  In a production system,
 *  this would query a database.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviews(string $product_id) {
  // Simulate reading reviews from a file
  $reviews = [];
  $file = fopen('reviews.txt', 'r');
  if ($file) {
    while (($line = fgets($file)) !== false) {
      $review = json_decode($line, true);
      if ($review && $review['product_id'] == $product_id) {
        $reviews[] = $review;
      }
    }
    fclose($file);
  }
  return $reviews;
}



// Example Usage
// Submit a review
$review_data = submitReview('product123', 'John Doe', 'Great product! Highly recommended.', 5);

if (isset($review_data['error'])) {
  echo "Error submitting review: " . $review_data['error'] . "
";
} else {
  echo "Review submitted successfully: " . json_encode($review_data) . "
";
}

// Get all reviews for product123
$all_reviews = getReviews('product123');

if (empty($all_reviews)) {
  echo "No reviews found for product123.
";
} else {
  echo "Reviews for product123:
";
  foreach ($all_reviews as $review) {
    echo "  - User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
  }
}


?>


<?php

/**
 * User Review Class
 * 
 * Represents a user review for a product or item.
 */
class UserReview {
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $userId The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's written review.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the date and time of the review
    }

    /**
     * Getters
     */
    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review (for debugging/presentation)
     *
     * @return string  A formatted string representing the review.
     */
    public function displayReview() {
        return "User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}

/**
 * User Review Function (Example Usage)
 */
function createAndDisplayReview($userId, $productId, $rating, $comment) {
    // Create a new review object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // Display the review
    echo $review->displayReview() . "

";

    // You could also save this review to a database here.
}


// Example Usage:
createAndDisplayReview(123, 456, 5, "Great product!  Highly recommend.");
createAndDisplayReview(789, 101, 3, "It was okay, but could be better.");

?>


<?php

/**
 * Class UserReview
 *
 * Handles creating, retrieving, and displaying user reviews.
 */
class UserReview
{
    private $db; // Database connection

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview($productId, $username, $rating, $comment)
    {
        // Validate inputs (important for security and data integrity)
        if (!$this->validateInput($productId, $username, $rating, $comment)) {
            return false;
        }

        // Escape data to prevent SQL injection
        $productId = $this->db->real_escape_string($productId);
        $username = $this->db->real_escape_string($username);
        $rating = $this->db->real_escape_string($rating);
        $comment = $this->db->real_escape_string($comment);


        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                VALUES ('$productId', '$username', '$rating', '$comment')";

        if ($this->db->query($sql) === TRUE) {
            return true;
        } else {
            // Handle database error
            error_log("Error creating review: " . $this->db->error);
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews.
     */
    public function getReviewsByProduct($productId)
    {
        $productId = $this->db->real_escape_string($productId);

        $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            $reviews = [];
            while ($row = $result->fetch_assoc()) {
                $reviews[] = new Review($row); // Assuming you have a Review class
                // Alternatively,  $reviews[] = $row;
            }
            return $reviews;
        } else {
            return [];
        }
    }

     /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     *
     * @return Review|null A Review object if found, null otherwise.
     */
    public function getReviewById($reviewId) {
        $reviewId = $this->db->real_escape_string($reviewId);

        $sql = "SELECT * FROM reviews WHERE id = '$reviewId'";
        $result = $this->db->query($sql);

        if ($result->num_rows == 1) {
            $row = $result->fetch_assoc();
            return new Review($row);
        } else {
            return null;
        }
    }



    /**
     * Validates input data.  This is crucial for security and data integrity.
     *
     * @param int $productId
     * @param string $username
     * @param string $rating
     * @param string $comment
     *
     * @return bool True if inputs are valid, false otherwise.
     */
    private function validateInput($productId, $username, $rating, $comment)
    {
        if (!is_numeric($productId)) {
            return false;
        }

        if (empty($username)) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        if (empty($comment)) {
            return false;
        }

        return true;
    }
}


/**
 * Review Class (simplified example)
 */
class Review
{
    public $id;
    public $productId;
    public $userName;
    public $rating;
    public $comment;
    public $createdAt;

    public function __construct($data)
    {
        $this->id = $data['id'];
        $this->productId = $data['product_id'];
        $this->userName = $data['user_name'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->createdAt = $data['created_at'];
    }
}



// Example Usage (using a mock database connection for demonstration)
//  Replace this with your actual database connection

class MockDB
{
    public function real_escape_string($str) {
        return $str; // Mock implementation -  In real code, this should handle proper escaping.
    }

    public function query($sql) {
      // Simulate database query results.  Replace with your actual database queries.
      if ($sql == "SELECT * FROM reviews WHERE product_id = 1") {
        return new ReviewResult(['id' => 1, 'product_id' => 1, 'user_name' => 'JohnDoe', 'rating' => 5, 'comment' => 'Great product!', 'created_at' => '2023-10-27 10:00:00']);
      } else if ($sql == "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES ('1', 'JaneSmith', '4', 'Good but could be better')") {
        return true; // Simulate successful insert
      }
      else {
        return new ReviewResult();
      }

    }

    public function error() {
      return "Database error";
    }
}

$db = new MockDB();
$reviewSystem = new UserReview($db);

// Create a review
if ($reviewSystem->createReview(1, 'JohnDoe', 5, 'Excellent product!')) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}

// Get reviews for product 1
$reviews = $reviewSystem->getReviewsByProduct(1);

echo "Reviews for product 1:
";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "  ID: " . $review->id . ", User: " . $review->userName . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }
} else {
    echo "  No reviews found.
";
}

// Get review by ID
$review = $reviewSystem->getReviewById(1);

if ($review) {
    echo "Review ID 1:
";
    echo "  ID: " . $review->id . ", User: " . $review->userName . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
} else {
    echo "Review not found.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and demonstrates how to interact with a 
 * hypothetical database.  You'll need to adapt the database interaction part
 * to your specific database system (MySQL, PostgreSQL, etc.).
 */

class Review
{
    private $db; // Database connection

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The name of the user submitting the review.
     * @param string $comment The review text.
     * @return int|false  The ID of the new review if successful, false otherwise.
     */
    public function createReview(int $productId, string $user, string $comment)
    {
        // Input Validation - Basic
        if (!$productId || !$user || !$comment) {
            return false;
        }

        // Sanitize inputs (important for security - prevents SQL injection)
        $productId = $this->db->real_escape_string($productId);
        $user = $this->db->real_escape_string($user);
        $comment = $this->db->real_escape_string($comment);

        // SQL Query (Adapt to your database system)
        $query = "INSERT INTO reviews (product_id, user, comment) VALUES ('$productId', '$user', '$comment')";

        if ($this->db->query($query) === TRUE) {
            return $this->db->insert_id; // Returns the ID of the newly inserted row
        } else {
            echo "Error: " . $this->db->error . "<br>"; // Handle database errors
            return false;
        }
    }

    /**
     * Get a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|false  An array containing review data if found, false otherwise.
     */
    public function getReview(int $reviewId)
    {
        $reviewId = $this->db->real_escape_string($reviewId);

        $query = "SELECT * FROM reviews WHERE id = '$reviewId'";
        $result = $this->db->query($query);

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            return $row;
        } else {
            return false;
        }
    }

    /**
     * Update a review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newComment The new review text.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $newComment)
    {
        $reviewId = $this->db->real_escape_string($reviewId);
        $newComment = $this->db->real_escape_string($newComment);

        $query = "UPDATE reviews SET comment = '$newComment' WHERE id = '$reviewId'";

        if ($this->db->query($query) === TRUE) {
            return true;
        } else {
            echo "Error: " . $this->db->error . "<br>";
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $reviewId = $this->db->real_escape_string($reviewId);

        $query = "DELETE FROM reviews WHERE id = '$reviewId'";

        if ($this->db->query($query) === TRUE) {
            return true;
        } else {
            echo "Error: " . $this->db->error . "<br>";
            return false;
        }
    }
}

// Example Usage (This needs a database connection)
// Replace with your database connection details
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$reviewManager = new Review($db);

// Create a new review
$newReviewId = $reviewManager->createReview(1, "John Doe", "This is a great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "<br>";
}

// Get the review
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review: " . $review['comment'] . "<br>";
}

// Update the review
$reviewManager->updateReview($newReviewId, "Updated Review Comment");

// Delete the review
$reviewManager->deleteReview($newReviewId);

$db->close(); // Always close the database connection

?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $review_id (optional, auto-generated)
   * @param int $user_id
   * @param int $product_id
   * @param int $rating (1-5)
   * @param string $comment
   */
  public function __construct($review_id = null, $user_id, $product_id, $rating, $comment) {
    $this->review_id = $review_id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Use current timestamp
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->review_id;
  }

  public function getUserId() {
    return $this->user_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Setters (optional - add if you need to modify these properties)
   */
  public function setRating($rating) {
    if ($rating >= 1 && $rating <= 5) {
      $this->rating = $rating;
    } else {
      echo "Invalid rating. Rating must be between 1 and 5.";
    }
  }
}


/**
 * User Review Review Function
 */
function reviewUser(UserReview $review) {
  // You can perform validation here (e.g., check if user exists, product exists, rating is valid)
  echo "Review Submitted by User " . $review->getUserId() . " for Product " . $review->getProductId() . ": " . $review->getComment() . " (Rating: " . $review->getRating() . ")" . PHP_EOL;

  // Example: Save the review to a database (replace with your actual database code)
  // $db = new DatabaseConnection();
  // $db->insertReview($review->getReviewId(), $review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment());
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "This product is amazing!");
reviewUser($review1);

$review2 = new UserReview(null, 456, 789, 4, "Good value for the money.");
reviewUser($review2);

$review3 = new UserReview(null, 789, 456, 3, "It could be better.");
reviewUser($review3);

// Example of setting a rating after creation
$review4 = new UserReview(null, 101, 112, 2, "Not impressed.");
$review4->setRating(1); // Set rating to 1
reviewUser($review4);


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $productName The name of the product or service.
 * @param string $reviewText The review text submitted by the user.
 * @param int   $rating     The rating given to the product or service (1-5).
 * @param string $username  The username of the reviewer.
 * @param array $reviews    (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *              - 'reviews': An array of review objects.
 *              - 'newReview': The newly submitted review (if any).
 */
function create_review(string $productId, string $productName, string $reviewText, int $rating, string $username, array &$reviews = []) {
    // Validate input (basic - can be expanded for more robust validation)
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'newReview' => ['error' => 'Review text cannot be empty.']];
    }
    if ($rating < 1 || $rating > 5) {
        return ['reviews' => $reviews, 'newReview' => ['error' => 'Rating must be between 1 and 5.']];
    }

    // Create a new review object
    $newReview = [
        'id' => count($reviews) + 1, // Simple ID generation - could use a database sequence
        'product_id' => $productId,
        'product_name' => $productName,
        'username' => $username,
        'review_text' => $reviewText,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s') // Add a timestamp
    ];

    // Add the new review to the array
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'newReview' => $newReview];
}

// Example Usage:
// $reviews = []; // Initialize an empty array to store reviews

// // Submit a review
// $result = create_review('123', 'Awesome Gadget', 'This gadget is fantastic!', 5, 'JohnDoe');
// print_r($result);

// // Display existing reviews
// if (isset($result['reviews'])) {
//     echo "<h2>Reviews for " . $result['newReview']['product_name'] . "</h2>";
//     foreach ($result['reviews'] as $review) {
//         echo "<h3>" . $review['username'] . "</h3>";
//         echo "<p>" . $review['review_text'] . "</p>";
//         echo "<p>Rating: " . $review['rating'] . "</p>";
//     }
// }

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes basic validation, saving to a database (optional), and
 * displaying the reviews.
 */

class UserReview {

    private $dbConnection; // Database connection object (optional)

    public function __construct($dbConnection = null) {
        $this->dbConnection = $dbConnection;
    }

    /**
     * Saves a new user review.
     *
     * @param string $username  The username of the reviewer.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment  The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function saveReview($username, $rating, $comment) {
        // Basic validation
        if (empty($username) || empty($rating) || empty($comment)) {
            error_log("Invalid review data: username, rating, and comment are required."); // Log error (better than just returning false)
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            error_log("Invalid rating. Rating must be a number between 1 and 5.");
            return false;
        }

        // Database saving (optional - adjust as needed)
        if ($this->dbConnection) {
            $sql = "INSERT INTO reviews (username, rating, comment) VALUES (?, ?, ?)";
            $stmt = $this->dbConnection->prepare($sql);
            $stmt->bind_param("sii", $username, $rating, $comment); // 's' for string, 'i' for integer
            $result = $stmt->execute();

            if ($result) {
                $stmt->close();
                return true;
            } else {
                error_log("Error saving review to database: " . $this->dbConnection->error); // Log database error
                $stmt->close();
                return false;
            }
        } else {
            // No database connection, simply return true (or handle differently)
            // This can be useful for testing or simple scenarios.
            return true; //  Or you could store in a file, etc.
        }
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.
     */
    public function getReviews() {
        // In a real application, this would query the database.
        // This is a placeholder for demonstration.
        $reviews = [
            ['username' => 'JohnDoe', 'rating' => 4, 'comment' => 'Great product!'],
            ['username' => 'JaneSmith', 'rating' => 5, 'comment' => 'Excellent value for money.'],
            ['username' => 'PeterJones', 'rating' => 3, 'comment' => 'It was okay, nothing special.'],
        ];
        return $reviews;
    }

    /**
     * Displays a list of user reviews.
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        foreach ($this->getReviews() as $review) {
            echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
            echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
            echo "<p><strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "</p>";
            echo "<hr>";
        }
    }
}


// Example Usage:
// Assuming you have a database connection object named $dbConnection

// Create a new review object
$review = new UserReview($dbConnection); // Pass your DB connection

// Save a new review
if ($review->saveReview('TestUser', 5, 'This is a test review!')) {
    echo "<p>Review saved successfully!</p>";
} else {
    echo "<p>Error saving review.</p>";
}

// Display all reviews
$review->displayReviews();

?>


<?php

/**
 * This class provides a simple user review system.
 */
class UserReview {

    /**
     * Stores the reviews.
     * @var array
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param int    $userId     The ID of the user submitting the review.
     * @param string $reviewText The content of the review.
     * @return bool  Returns true on success, false on failure (e.g., empty review).
     */
    public function addReview(int $userId, string $reviewText): bool
    {
        if (empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'user_id' => $userId,
            'review_text' => $reviewText,
            'timestamp' => time() // Add timestamp for ordering/filtering
        ];

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }

        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if the review does not exist.
     */
    public function deleteReview(int $reviewId): bool
    {
        $originalCount = count($this->reviews);
        $this->reviews = array_filter($this->reviews, function ($review) use ($reviewId) {
            return $review['id'] !== $reviewId;
        });
        return count($this->reviews) !== $originalCount;
    }

    /**
     * Generates unique IDs for new reviews.
     *
     * @return int Unique ID
     */
    private function generateUniqueId(): int
    {
        return rand(100000, 999999); // Example - generate 6-digit random number
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "This product is amazing!");
$reviewSystem->addReview(456, "I would definitely recommend this.");
$reviewSystem->addReview(123, "Great value for money.");

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get a specific review
$review = $reviewSystem->getReviewById(2);
if ($review) {
    echo "Review: " . $review['review_text'] . "
";
} else {
    echo "Review not found.
";
}

// Delete a review
$reviewSystem->deleteReview(1);

// Get all reviews after deletion
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

//Add a new review after deletion
$reviewSystem->addReview(789, "This is the best product ever!");
print_r($reviewSystem->getAllReviews());


?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to create, read, update, and delete user reviews.
 * It uses a simple database (you'll need to adapt this to your actual database).
 * 
 *  Important:  This is a simplified example.  For a production environment,
 *  you should use a proper database library and implement robust error handling,
 *  input validation, and security measures.
 */

class UserReview {

    private $db_host = "localhost";
    private $db_name = "your_database_name";
    private $db_user = "your_db_user";
    private $db_pass = "your_db_password";

    private $db;

    public function __construct() {
        try {
            $this->db = new PDO("mysql:host=$this->db_host;dbname=$this->db_name", $this->db_user, $this->db_pass);
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * Creates a new review.
     *
     * @param string $product_id The ID of the product the review is for.
     * @param string $user_id   The ID of the user writing the review.
     * @param string $rating    The rating (e.g., 1-5).
     * @param string $comment   The review comment.
     *
     * @return int|false The ID of the new review if successful, or false on failure.
     */
    public function createReview(string $product_id, string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_id, $rating, $comment]);
            return $this->db->lastInsertId();

        } catch (PDOException $e) {
            // Log the error or handle it appropriately.
            error_log("Error creating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Reads a review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     *
     * @return array|false An array containing review data, or false if not found.
     */
    public function readReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review ? $review : false;

        } catch (PDOException $e) {
            error_log("Error reading review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $product_id The new product_id (if changed).
     * @param string $user_id   The new user_id (if changed).
     * @param string $rating    The new rating.
     * @param string $comment   The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $review_id, string $product_id, string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET product_id = ?, user_id = ?, rating = ?, comment = ? WHERE id = ?");
            $stmt->execute([$product_id, $user_id, $rating, $comment, $review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected.
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $review_id The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Reads all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews");
        $stmt->execute();
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }
        return $reviews;
    }
}


// Example Usage:
$reviewManager = new UserReview();

// Create a review
$newReviewId = $reviewManager->createReview(1, 123, 4, "Great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Read a review
$review = $reviewManager->readReview($newReviewId);
if ($review) {
    echo "Review: " . json_encode($review) . "
";
} else {
    echo "Review not found.
";
}

// Update a review
$updateSuccessful = $reviewManager->updateReview($newReviewId, 2, 456, 5, "Even better!");
if ($updateSuccessful) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteSuccessful = $reviewManager->deleteReview($newReviewId);
if ($deleteSuccessful) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews: " . json_encode($allReviews) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and retrieve user reviews for a product or item.
 * It includes basic validation and formatting.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  The rating (1-5).
 * @return array|string An array containing review details, or an error message string if validation fails.
 */
function createReview(string $productId, string $username, string $reviewText, int $rating)
{
    // Validate input
    if (empty($productId)) {
        return "Error: Product ID cannot be empty.";
    }

    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }

    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Sanitize input (Basic - Consider more robust sanitization for production)
    $productId = trim($productId);
    $username = trim($username);
    $reviewText = trim($reviewText);

    // Prepare review data
    $review = [
        'productId' => $productId,
        'username'  => $username,
        'reviewText' => $reviewText,
        'rating'    => $rating,
        'timestamp' => time() // Automatically record the timestamp
    ];

    // Store review (Placeholder - Replace with database or file storage)
    // In a real application, you'd save this to a database or file.
    // For this example, we'll just echo the data.
    echo "Review created:
";
    print_r($review);

    return $review; // Return the review data.
}


// Example Usage:

// Create a review
$review_data = createReview("product123", "John Doe", "Great product!  I love it.", 5);

// Another example
$review_data = createReview("product456", "Jane Smith", "It's okay, but could be better.", 3);

// Example demonstrating error handling:
$review_data = createReview("", "Error Test", "Invalid product ID", 4); // Empty product ID
echo "
" . $review_data;
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews.
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   *
   * @param int $reviewId (Optional) The unique identifier for the review. If not provided, it's automatically generated.
   * @param int $userId The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating The rating (e.g., 1-5 stars).
   * @param string $comment The user's comment about the product.
   */
  public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Timestamp for when the review was created
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Setters (optional - for updating reviews)
   */
  public function setComment($comment) {
    $this->comment = $comment;
  }

  // Add more setters as needed (e.g., for updating the rating)
}


/**
 * User Review Review Function (example)
 */
function displayReview($review) {
  echo "<p><strong>User:</strong> " . $review->getUserId() . "</p>";
  echo "<p><strong>Product:</strong> " . $review->getProductId() . "</p>";
  echo "<p><strong>Rating:</strong> " . $review->getRating() . " stars</p>";
  echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
  echo "<p><strong>Date:</strong> " . $review->getDate() . "</p>";
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! I love it.");
$review2 = new UserReview(null, 789, 456, 4, "Good value for the money.");

displayReview($review1);
displayReview($review2);


//  Example of how to add reviews to an array for database storage.
$reviews = [];

$review3 = new UserReview(null, 101, 102, 3, "It was okay.");
$reviews[] = $review3;

// Display all reviews
echo "<br><br><h2>All Reviews:</h2>";
foreach($reviews as $review) {
  displayReview($review);
  echo "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $userDetails (optional) An array containing user details (e.g., 'username', 'rating').
 * 
 * @return array An array containing review data (id, product, review, user, rating) 
 *               or null on error.
 */
function createAndDisplayReview(string $productName, string $reviewText, array $userDetails = []) {

  // Sanitize Input (VERY IMPORTANT - Prevent SQL Injection and Cross-Site Scripting)
  $productName = mysqli_real_escape_string($GLOBALS['db'], $productName); // Use your database connection here
  $reviewText = mysqli_real_escape_string($GLOBALS['db'], $reviewText);
  if (isset($userDetails['username'])) {
    $username = mysqli_real_escape_string($GLOBALS['db'], $userDetails['username']);
  } else {
    $username = 'Anonymous';
  }

  // Example Rating Handling (Assume a rating scale of 1-5)
  $rating = isset($userDetails['rating']) ? (int) $userDetails['rating'] : 0; // Convert to integer

  // Validation (Add more as needed)
  if (empty($reviewText)) {
    return ['error' => 'Review cannot be empty.'];
  }

  // Database Interaction (Replace with your actual database query)
  $sql = "INSERT INTO reviews (product, review, username, rating) VALUES ('$productName', '$reviewText', '$username', $rating)";
  $result = mysqli_query($GLOBALS['db'], $sql);

  if (!$result) {
    return ['error' => 'Database error: ' . mysqli_error($GLOBALS['db'])];
  }

  // Get the newly inserted review ID (important for display)
  $reviewId = mysqli_insert_id($GLOBALS['db']);


  // Return Review Data
  return [
    'id' => $reviewId,
    'product' => $productName,
    'review' => $reviewText,
    'user' => $username,
    'rating' => $rating
  ];
}


// Example Usage (Replace with your database connection)
// Simulate a database connection
$GLOBALS['db'] = new mysqli('localhost', 'username', 'password', 'database');

if ($GLOBALS['db']->connect_error) {
  die('Connection failed: ' . $GLOBALS['db']->connect_error);
}


// Create a review
$reviewData = createAndDisplayReview('Awesome Gadget', 'This gadget is fantastic! I love it.', ['username' => 'JohnDoe', 'rating' => 5]);

if (isset($reviewData['error'])) {
  echo "Error: " . $reviewData['error'] . "<br>";
} else {
  echo "Review ID: " . $reviewData['id'] . "<br>";
  echo "Product: " . $reviewData['product'] . "<br>";
  echo "Review: " . $reviewData['review'] . "<br>";
  echo "User: " . $reviewData['user'] . "<br>";
  echo "Rating: " . $reviewData['rating'] . "<br>";
}



// Display Existing Reviews (Example - Replace with your query)
$select_sql = "SELECT * FROM reviews WHERE product = 'Awesome Gadget'";
$result = $GLOBALS['db']->query($select_sql);

if ($result->num_rows > 0) {
  echo "<br><h2>Existing Reviews:</h2>";
  while($row = $result->fetch_assoc()) {
    echo "<br><b>Review ID:</b> " . $row['id'] . "<br>";
    echo "<b>Product:</b> " . $row['product'] . "<br>";
    echo "<b>Review:</b> " . $row['review'] . "<br>";
    echo "<b>User:</b> " . $row['username'] . "<br>";
    echo "<b>Rating:</b> " . $row['rating'] . "<br>";
    echo "<hr>";
  }
} else {
  echo "<br>No reviews found for 'Awesome Gadget'.";
}


?>


<?php

/**
 * User Review Class
 *
 * This class handles the creation, storage, and retrieval of user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId    The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Current timestamp
    }

    /**
     * Getters
     *
     * Returns the values of the review properties.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     *  Setter for reviewId (optional, typically only set during storage)
     *  @param int $reviewId
     */
    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

}


/**
 * User Review Review Function -  A basic function to simulate a user review functionality.
 * This is more of a demonstration and can be expanded significantly.
 */
function displayUserReview($review) {
    if ($review instanceof UserReview) {
        echo "<h2>Review for Product ID: " . $review->getProductId() . "</h2>";
        echo "<p><strong>User ID:</strong> " . $review->getUserId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $review->getRating() . " / 5</p>";
        echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $review->getDate() . "</p>";
    } else {
        echo "Invalid Review Object.  Expected UserReview object.";
    }
}



// --- Example Usage ---

// Create some reviews
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(456, 789, 4, "Good, but could be better.");
$review3 = new UserReview(789, 101, 3, "Average.  Nothing special.");

// Display the reviews
displayUserReview($review1);
echo "<br>";
displayUserReview($review2);
echo "<br>";
displayUserReview($review3);

?>


<?php

/**
 * Class Review
 * 
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Creates a new review in the database.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview(int $product_id, string $username, string $rating, string $comment): bool {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':username', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $product_id): array {
        $reviews = [];
        try {
            $stmt = $this->db->prepare("SELECT id, username, rating, comment, created_at FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);

            if ($result) {
                foreach ($result as $row) {
                    $reviews[] = new ReviewObject($row); // Use the ReviewObject
                }
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage()); // Log the error
            return [];
        }
    }


    /**
     *  Review Object - A simple object to hold review data.
     */
    private function __construct(array $data) {
        $this->id = $data['id'] ?? null;
        $this->product_id = $data['product_id'] ?? null;
        $this->username = $data['username'] ?? null;
        $this->rating = $data['rating'] ?? null;
        $this->comment = $data['comment'] ?? null;
        $this->created_at = $data['created_at'] ?? null;
    }

}

/**
 * Review Object - A simple object to hold review data.
 */
class ReviewObject {
    public int $id;
    public int $product_id;
    public string $username;
    public string $rating;
    public string $comment;
    public string $created_at;
}


// Example Usage (Illustrative - Replace with your actual database setup)
//  ----------------------------------------------------------------------

// Sample Database Setup (Replace with your connection details)
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

try {
    $db = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $reviews = new Review($db);

    // Create a review
    if ($reviews->createReview(1, "john_doe", 5, "Great product, highly recommended!")) {
        echo "Review created successfully!
";
    } else {
        echo "Error creating review.
";
    }

    // Get reviews for product ID 1
    $reviews = $reviews->getReviewsByProduct(1);

    if ($reviews) {
        echo "Reviews for product 1:
";
        foreach ($reviews as $review) {
            echo "  ID: " . $review->id . "
";
            echo "  Username: " . $review->username . "
";
            echo "  Rating: " . $review->rating . "
";
            echo "  Comment: " . $review->comment . "
";
            echo "  Created At: " . $review->created_at . "
";
            echo "---
";
        }
    } else {
        echo "No reviews found for product 1.
";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes validation and handling of user input.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $reviewer_name The name of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @return array  An array containing a success message or an error message.
 */
function submit_review(string $product_id, string $reviewer_name, string $rating, string $comment)
{
    // **Input Validation - Crucial for Security & Data Integrity**
    $errors = [];

    // Check for required fields
    if (empty($reviewer_name)) {
        $errors['reviewer_name'] = 'Reviewer name is required.';
    }

    if (empty($rating)) {
        $errors['rating'] = 'Rating is required.';
    }

    // Validate rating (e.g., numeric and within range)
    if (!is_numeric($rating)) {
        $errors['rating'] = 'Rating must be a number.';
    }

    if (!is_int($rating)) {
        $errors['rating'] = 'Rating must be an integer.';
    }

    if ($rating < 1 || $rating > 5) {
        $errors['rating'] = 'Rating must be between 1 and 5.';
    }

    if (empty($comment)) {
        $errors['comment'] = 'Review comment is required.';
    }

    // **Basic Sanitization (Important for preventing XSS attacks)**
    $reviewer_name = htmlspecialchars($reviewer_name);
    $comment = htmlspecialchars($comment);


    // **If no errors, process the review**
    if (empty($errors)) {
        // **Here you would typically save the review to a database.**
        // For demonstration, we'll just log it to the console.

        echo "Review submitted successfully!
";
        echo "Product ID: " . $product_id . "
";
        echo "Reviewer: " . $reviewer_name . "
";
        echo "Rating: " . $rating . "
";
        echo "Comment: " . $comment . "
";

        // Example database saving (Requires database connection and setup)
        /*
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
        $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_name, rating, comment) VALUES (?, ?, ?, ?)");
        $stmt->execute([$product_id, $reviewer_name, $rating, $comment]);
        */


        return ['success' => true, 'message' => 'Review submitted successfully!'];
    } else {
        // Return an array of errors.
        return ['success' => false, 'errors' => $errors];
    }
}

// **Example Usage**

// Test 1: Successful submission
$review_result = submit_review('123', 'John Doe', 5, 'Great product! I love it.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}

// Test 2:  Invalid rating
$review_result = submit_review('456', 'Jane Smith', 6, 'Excellent value.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}

// Test 3: Missing required field
$review_result = submit_review('789', '', 4, 'It\'s okay.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's written review.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 * @return array|null  An array containing the review data on success, or null on error.
 */
function saveUserReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Validate input - Important for security!
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required fields in saveUserReview.");
        return null;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return null;
    }

    // Connect to the database
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return null;
    }

    // Prepare and execute the SQL statement
    try {
        $sql = "INSERT INTO reviews (productId, username, rating, comment) 
                VALUES (:productId, :username, :rating, :comment)";

        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();

        return $pdo->lastInsertId(); // Return the ID of the newly inserted row
    } catch (PDOException $e) {
        error_log("Database query error: " . $e->getMessage());
        return null;
    } finally {
        // Close the database connection (important to release resources)
        $pdo = null;
    }
}


/**
 * Display User Reviews Function
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 * @return array|null An array of review data on success, or null on error.
 */
function getReviews(string $productId, string $dbHost, string $dbName, string $dbUser, string $dbPassword) {
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return null;
    }

    $sql = "SELECT * FROM reviews WHERE productId = :productId";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $reviews;
}



// Example Usage (replace with your actual database credentials)
$productId = "product123";
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_username";
$dbPassword = "your_password";

// Save a review
$reviewId = saveUserReview($productId, "john.doe", 4, "Great product, highly recommend!", $dbHost, $dbName, $dbUser, $dbPassword);

if ($reviewId) {
    echo "Review saved successfully! Review ID: " . $reviewId . "<br>";
} else {
    echo "Error saving review.";
}

// Retrieve and display reviews
$reviews = getReviews($productId, $dbHost, $dbName, $dbUser, $dbPassword);

if ($reviews) {
    echo "<h2>Reviews for " . $productId . ":</h2>";
    echo "<table>";
    echo "<tr><th>Username</th><th>Rating</th><th>Comment</th></tr>";
    foreach ($reviews as $review) {
        echo "<tr>";
        echo "<td>" . $review['username'] . "</td>";
        echo "<td>" . $review['rating'] . "</td>";
        echo "<td>" . $review['comment'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "No reviews found or error retrieving reviews.";
}


?>


<?php

/**
 * User Review Class
 *
 * This class handles the creation, storage, and retrieval of user reviews.
 */
class UserReview {

    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Adds a new review.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $userId, int $productId, string $rating, string $comment) {
        $rating = (int)$rating; // Ensure rating is an integer
        $comment = trim($comment); // Trim whitespace from the comment

        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        // Prepare the SQL query to prevent SQL injection
        $sql = "INSERT INTO reviews (userId, productId, rating, comment) VALUES (?, ?, ?, ?)";

        // Use prepared statements to prevent SQL injection vulnerabilities
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("iii", $userId, $productId, $rating, $comment);

        if (!$stmt->execute()) {
            error_log("Error adding review: " . $stmt->error); // Log the error
            return false;
        }

        return true;
    }


    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if none found.
     */
    public function getReviewsByProduct(int $productId) {
        $sql = "SELECT * FROM reviews WHERE productId = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $productId);

        if (!$stmt->execute()) {
            error_log("Error getting reviews: " . $stmt->error);
            return [];
        }

        $reviews = [];
        $stmt->bind_param("i"); // no need to bind parameters here

        while ($row = $stmt->fetch_assoc()) {
            $reviews[] = new UserReview($this->db); // Create a new review object
            $reviews[count($reviews) - 1]->userId = $row['userId'];
            $reviews[count($reviews) - 1]->productId = $row['productId'];
            $reviews[count($reviews) - 1]->rating = $row['rating'];
            $reviews[count($reviews) - 1]->comment = $row['comment'];
        }

        $stmt->close(); // Close the statement
        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return UserReview|null A UserReview object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if (!$stmt->execute()) {
            error_log("Error getting review by ID: " . $stmt->error);
            return null;
        }

        $row = $stmt->fetch_assoc();
        if ($row) {
            return new UserReview($this->db);
        }

        $stmt->close();
        return null;
    }


    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if (!$stmt->execute()) {
            error_log("Error deleting review: " . $stmt->error);
            return false;
        }

        $stmt->close();
        return true;
    }

}



// Example Usage (assuming you have a database connection $db)
// Create a database connection (replace with your actual connection)
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Create a UserReview instance
$reviewManager = new UserReview($db);

// Add a review
$reviewManager->addReview(123, 456, 5, "Great product!");

// Get reviews for product 456
$reviews = $reviewManager->getReviewsByProduct(456);
foreach ($reviews as $review) {
    echo "User ID: " . $review->userId . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br><br>";
}

//Get a specific review by id
$review = $reviewManager->getReviewById(1);
if ($review) {
    echo "Review by id 1: " . $review->comment . "<br>";
}

//delete a review
$reviewManager->deleteReview(1);

// Close the database connection
$db->close();

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic sanitization and validation.
 * 
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's comment.
 * @param string $username The user's name.
 * 
 * @return array An array containing the review data if successful, or an error message if not.
 */
function createReview(string $product_id, string $rating, string $comment, string $username): array
{
    // Input Validation - Basic Sanity Checks
    if (empty($product_id) || empty($rating) || empty($comment) || empty($username)) {
        return ['error' => 'All fields are required.'];
    }

    if (!preg_match('/^[0-5][0-9]*$/', $rating)) { // Ensure rating is a number between 1 and 5
        return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
    }

    if (strlen($comment) > 1000) { // Limit comment length for security and storage
        return ['error' => 'Comment exceeds the maximum length (1000 characters).'];
    }

    // Data Sanitization - Prevent XSS and SQL Injection
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING); //  Sanitize string
    $comment = filter_var($comment, FILTER_SANITIZE_STRING); // Sanitize string
    $username = filter_var($username, FILTER_SANITIZE_STRING); // Sanitize string

    // Data Preparation -  (In a real application, this would likely involve
    // connecting to a database and inserting the data).

    $review_data = [
        'product_id' => $product_id,
        'rating' => $rating,
        'comment' => $comment,
        'username' => $username,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    // In a real application, you'd store this data in a database
    // e.g.,  $db->insert('reviews', $review_data);

    return $review_data; // Return the review data.  This would be saved to the database.
}


/**
 * Displays a list of reviews for a product.
 *
 * @param array $reviews An array of review data (as returned by createReview).
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Display product ID
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['comment'] . " (" . $review['rating'] . "/5)";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:

// Create a review
$review = createReview("123", 5, "Great product!  I highly recommend it.", "John Doe");

if (isset($review['error'])) {
    echo "<p style='color:red;'>Error: " . $review['error'] . "</p>";
} else {
    echo "<p style='color:green;'>Review created successfully!</p>";
    echo "<p>Product ID: " . $review['product_id'] . "</p>";
    echo "<p>Rating: " . $review['rating'] . "</p>";
    echo "<p>Comment: " . $review['comment'] . "</p>";
    echo "<p>Username: " . $review['username'] . "</p>";
}

// Simulate multiple reviews for display
$reviews = [
    ['product_id' => '123', 'rating' => 4, 'comment' => 'Good value for money.', 'username' => 'Jane Smith'],
    ['product_id' => '123', 'rating' => 5, 'comment' => 'Excellent!', 'username' => 'Peter Jones'],
    ['product_id' => '456', 'rating' => 3, 'comment' => 'Average', 'username' => 'Sarah Brown']
];

displayReviews($reviews);
?>


<?php

/**
 * User Review Class
 *
 * Represents a user review and provides methods for adding, retrieving, and displaying reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $username, string $rating, string $comment) {
        // Validate rating
        if (!preg_match('/^[1-5]+$/', $rating)) {
            return false;
        }

        // Create review object
        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for when the review was created
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific item (placeholder - you'll need to adapt this)
     *
     * @param string $itemId The ID of the item the reviews are for.
     * @return array An array of review objects for the given item.  Returns an empty array if no reviews exist for the item.
     */
    public function getReviewsForItem(string $itemId) {
        // In a real application, you would likely query a database here.
        // This is just a placeholder.
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            //Add a logic to filter reviews based on item.
            if ($review['item'] === $itemId) {
               $reviews[] = $review;
            }
        }
        return $reviews;
    }


    /**
     * Displays all reviews in a formatted string.
     *
     * @return string A formatted string of reviews.
     */
    public function displayReviews() {
        $output = "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($this->getAllReviews() as $review) {
                $output .= "<li>";
                $output .= "<strong>Username:</strong> " . $review['username'] . "<br>";
                $output .= "<strong>Rating:</strong> " . $review['rating'] . "<br>";
                $output .= "<strong>Comment:</strong> " . $review['comment'] . "<br>";
                $output .= "<strong>Date:</strong> " . $review['date'] . "<br>";
                $output .= "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("JohnDoe", 5, "Great product!  Highly recommended.");
$reviewSystem->addReview("JaneSmith", 4, "Good value for the price.");
$reviewSystem->addReview("PeterJones", 3, "It's okay, could be better.");

// Display all reviews
echo $reviewSystem->displayReviews();

// Get reviews for a specific item (example)
$itemReviews = $reviewSystem->getReviewsForItem("Product123");
echo "<hr><h2>Reviews for Product123</h2>";
echo $reviewSystem->displayReviewsForItem("Product123");
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $review_text The review text submitted by the user.
 * @param int $user_id (Optional) The ID of the user submitting the review.  Defaults to 0 (anonymous).
 * @return array An array containing:
 *   - 'success': True if the review was submitted successfully, False otherwise.
 *   - 'message': A message describing the result of the submission.
 *   - 'review': The submitted review text.
 *   - 'user_id': The ID of the user who submitted the review.
 */
function submit_review(string $item_name, string $review_text, int $user_id = 0) {
  // Input Validation (Basic - you should expand this for production)
  if (empty($item_name) || empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Item name and review text cannot be empty.',
      'review' => $review_text,
      'user_id' => $user_id
    ];
  }

  //  You could add validation here to check review length, etc.
  //  Consider sanitizing the $review_text to prevent XSS attacks.

  // Store the review (Replace this with your database interaction)
  // This is a placeholder for storing the review in a database.
  // In a real application, you would connect to your database here.

  $review_id = generate_unique_id(); // Simple ID generation - replace with your actual ID logic.

  $review_data = [
    'item_name' => $item_name,
    'review_text' => $review_text,
    'user_id' => $user_id,
    'submission_date' => date('Y-m-d H:i:s'),
    'review_id' => $review_id
  ];

  // Simulate database insertion
  // In a real application, use a database query.
  // Example:  $result = mysqli_query($connection, "INSERT ...");

  //  For demonstration purposes, we'll just print the review data.
  echo "Review submitted!
";
  echo "Review ID: " . $review_id . "
";
  echo "Item Name: " . $item_name . "
";
  echo "Review Text: " . $review_text . "
";
  echo "User ID: " . $user_id . "
";

  return [
    'success' => true,
    'message' => 'Review submitted successfully.',
    'review' => $review_text,
    'user_id' => $user_id
  ];
}


/**
 *  Placeholder for generating a unique ID.  Replace with your actual logic.
 */
function generate_unique_id() {
  return rand(100000, 999999); // Simple random ID
}


// --- Example Usage ---

// Submit a review from a user (user_id 123)
$review_result = submit_review('Awesome Product', 'This product is amazing!', 123);
if ($review_result['success']) {
  echo "Review submitted successfully (User 123).
";
} else {
  echo "Error submitting review (User 123): " . $review_result['message'] . "
";
}

// Submit an anonymous review
$review_result = submit_review('Mediocre Item', 'It was okay, I guess.');
if ($review_result['success']) {
  echo "Review submitted successfully (Anonymous).
";
} else {
  echo "Error submitting review (Anonymous): " . $review_result['message'] . "
";
}

// Try submitting an empty review
$review_result = submit_review('', 'This is a test.');
if ($review_result['success']) {
  echo "Review submitted successfully.
";
} else {
  echo "Error submitting review: " . $review_result['message'] . "
";
}


?>


<?php

/**
 * Class Review
 *
 * Manages user reviews for a product or service.
 */
class Review {

    private $reviews = []; // Array to store reviews
    private $productId; // ID of the product/service being reviewed

    /**
     * Constructor
     *
     * Initializes the Review object.
     *
     * @param int $productId The ID of the product or service being reviewed.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating  The rating (1-5).
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment, int $rating): bool {
        if (empty($username) || empty($comment) || $rating < 1 || $rating > 5) {
            return false; // Invalid input
        }

        $review = [
            'username' => $username,
            'comment' => $comment,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for ordering
        ];

        $this->reviews[] = $review;
        return true;
    }


    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get reviews by product ID.
     *
     * @param int $productId The product ID to filter by.
     * @return array An array of review objects for the specified product ID.
     */
    public function getReviewsByProductId(int $productId): array {
        return array_filter($this->reviews, function($review) use ($productId) {
            return $review['productId'] === $productId;
        });
    }

    /**
     * Get average rating for a product.
     *
     * @param int $productId The product ID to get the average rating for.
     * @return float|null The average rating, or null if there are no reviews.
     */
    public function getAverageRating(int $productId): ?float {
        $reviews = $this->getReviewsByProductId($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return round($totalRating / count($reviews), 2); // Round to 2 decimal places
    }

}


// Example Usage:
$reviewManager = new Review(123); // Assuming product ID 123

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!', 5);
$reviewManager->addReview('JaneSmith', 'Good value for money', 4);
$reviewManager->addReview('PeterJones', 'Could be better', 3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews for product 123
$product123Reviews = $reviewManager->getReviewsByProductId(123);
print_r($product123Reviews);

// Get average rating for product 123
$averageRating = $reviewManager->getAverageRating(123);
echo "Average rating for product 123: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Add a review with invalid input
$reviewManager->addReview("", "Invalid review", 2);
echo "Invalid review attempt was handled correctly.
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array of existing reviews (optional).
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects (or null if no reviews exist).
 *   - 'newReview': The new review object that was submitted (if any).
 */
function createAndDisplayReviews(string $productId, string $username, string $reviewText, array $reviews = []): array
{
    // Validate inputs (basic validation - expand as needed)
    if (empty($username)) {
        return ['reviews' => $reviews, 'newReview' => null, 'error' => 'Username cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'newReview' => null, 'error' => 'Review text cannot be empty.'];
    }

    // Create a new review object
    $newReview = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => time(), // Add a timestamp for tracking
    ];

    // Add the new review to the array
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'newReview' => $newReview];
}


// Example Usage:
$productId = '123';
$username = 'JohnDoe';
$reviewText = 'This product is fantastic! I highly recommend it.';

// Create a review
$result = createAndDisplayReviews($productId, $username, $reviewText);

if (isset($result['error'])) {
    echo "<p style='color: red;'>Error: " . $result['error'] . "</p>";
} else {
    // Display existing reviews
    echo "<h2>Existing Reviews for Product ID: " . $productId . "</h2>";
    if (empty($result['reviews'])) {
        echo "<p>No reviews yet.</p>";
    } else {
        foreach ($result['reviews'] as $review) {
            echo "<div class='review'>";
            echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
            echo "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
            echo "<p><strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
            echo "</div>";
        }
    }

    // Display the new review
    if ($result['newReview']) {
        echo "<div class='new-review'>";
        echo "<p><strong>New Review:</strong> " . htmlspecialchars($result['newReview']['reviewText']) . "</p>";
        echo "</div>";
    }
}

?>

<!--  CSS for styling the reviews (optional) -->
<style>
.review {
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
}

.new-review {
    border: 1px solid green;
    padding: 10px;
    margin-bottom: 10px;
}
</style>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|string  Returns an array of reviews if successful, or an error message string if not.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
  // Input validation - essential for security and data integrity
  if (empty($productId)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($userName)) {
    return "Error: User Name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review Text cannot be empty.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Sanitize input - important to prevent XSS and SQL injection vulnerabilities
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);
  $userName = filter_var($userName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  //  You'd typically use a database here.  This is a placeholder.
  //  Replace this with your actual database interaction logic.
  $reviews = []; // Initialize an array to store reviews.  Could be expanded to include timestamps, etc.

  $reviews[] = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for tracking.
  ];

  // Log the review (optional - for debugging and auditing)
  // logMessage("New review stored: " . $reviewText);

  return $reviews; // Return the array of reviews (or the single review if you just want one).
}



/**
 * Example Usage
 */

// Store a review
$reviews = storeUserReview('product123', 'John Doe', 'Great product! Highly recommended.');
if (is_array($reviews)) {
  echo "Review stored successfully:
";
  print_r($reviews);
} else {
  echo $reviews; // Output the error message
}



// Example with validation errors
$reviews = storeUserReview('', 'Jane Smith', 'This is bad.');
if (is_array($reviews)) {
  echo $reviews;
} else {
  echo $reviews;
}

// Example with validation errors (rating outside range)
$reviews = storeUserReview('product456', 'Peter Jones', 'Excellent service', 7);
if (is_array($reviews)) {
  echo $reviews;
} else {
  echo $reviews;
}
?>


<?php

/**
 * Class Review
 *
 * This class provides a simple function to create and manage user reviews.
 */
class Review {

    /**
     * Adds a new review to the database (simulated here).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating The rating given (e.g., 1-5).
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public static function addReview(int $productId, string $reviewerName, string $comment, int $rating) {
        // Simulate database insertion (replace with your database interaction logic)
        $review = [
            'product_id' => $productId,
            'reviewer_name' => $reviewerName,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for record keeping
        ];

        // Check for required data
        if (empty($review['product_id']) || empty($review['reviewer_name']) || empty($review['comment']) || $rating < 1 || $rating > 5) {
            return false;
        }

        //  Simulated database save (replace with your actual database call)
        //  This is just to demonstrate the functionality.  You'll want to use
        //  PDO, MySQLi, or another database library in a real application.
        $review_id = self::saveReviewToDatabase($review);

        if ($review_id) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Saves the review to the database.  This is a placeholder.  Replace this
     * with your actual database interaction code.
     *
     * @param array $review The review data to save.
     * @return int|false The ID of the review if saved successfully, or false if not.
     */
    private static function saveReviewToDatabase(array $review) {
        // Placeholder - replace with your database insertion logic
        // This simulates saving to a database.  You should use
        // a database library (PDO, MySQLi) for actual implementation.

        //  Example using an array as a simple database (not recommended for production)
        $reviews = self::getReviews(); //Get reviews from the database, or an array.
        $review_id = count($reviews) + 1;

        $review['id'] = $review_id; // add ID to review

        $reviews[] = $review; //Append to reviews array

        return $review_id;
    }

    /**
     * Retrieves reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects or an empty array if no reviews are found.
     */
    public static function getReviewsForProduct(int $productId) {
        // Simulate fetching reviews from the database (replace with your logic)
        // This is just for demonstration purposes.  You should use a database query.
        $reviews = self::getReviews();
        $product_reviews = [];

        foreach ($reviews as $review) {
            if ($review['product_id'] == $productId) {
                $product_reviews[] = $review;
            }
        }

        return $product_reviews;
    }

    /**
     * Simulates getting reviews from the database.  Replace with your
     * database query logic.
     *
     * @return array  An array of review objects.
     */
    private static function getReviews() {
        //Simulated reviews.  Replace with actual database queries.
        return [
            [
                'id' => 1,
                'product_id' => 123,
                'reviewer_name' => 'John Doe',
                'comment' => 'Great product! I highly recommend it.',
                'rating' => 5,
                'date' => date('Y-m-d H:i:s')
            ],
            [
                'id' => 2,
                'product_id' => 123,
                'reviewer_name' => 'Jane Smith',
                'comment' => 'Good value for the money.',
                'rating' => 4,
                'date' => date('Y-m-d H:i:s')
            ],
            [
                'id' => 3,
                'product_id' => 456,
                'reviewer_name' => 'Peter Jones',
                'comment' => 'Not as expected.',
                'rating' => 2,
                'date' => date('Y-m-d H:i:s')
            ]
        ];
    }
}


// Example Usage:
$review = new Review();

// Add a review
$productId = 123;
$reviewer = 'Alice Brown';
$comment = 'Excellent product, fast shipping!';
$rating = 5;

if ($review->addReview($productId, $reviewer, $comment, $rating)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Get reviews for product 123
$reviews = $review->getReviewsForProduct($productId);

echo "Reviews for product " . $productId . ":
";
if (empty($reviews)) {
    echo "No reviews found.
";
} else {
    foreach ($reviews as $review) {
        echo "- " . $review['reviewer_name'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username (Optional) The username of the user submitting the review.  Defaults to 'Anonymous'.
 * @param int $rating (Optional) The rating provided by the user (1-5). Defaults to 0.
 *
 * @return array An array containing the review data, or an error message if something goes wrong.
 */
function submit_review(string $productName, string $reviewText, string $username = 'Anonymous', int $rating = 0) {

    // Input Validation - Add more robust validation as needed
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }


    // Store the review data (This would typically be saved to a database)
    // For this example, we'll just store it in an array.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'username' => $username,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // You would typically save this array to a database here.
    // Example: $db->insert('reviews', $review);


    return $review;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productName The name of the product to retrieve reviews for.
 * @param array $reviews (Optional) An array of review data to display. If not provided,
 *                       it will retrieve reviews from a (simulated) database.
 *
 * @return void Displays the reviews on the screen.
 */
function display_reviews(string $productName, array $reviews = []) {
    echo "<h2>Reviews for " . $productName . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        if (array_key_exists('error', $review)) { //Handle errors (from submit_review)
            echo "<li>Error: " . $review['error'] . "</li>";
        } else {
            echo "<li>";
            echo "<p><strong>" . $review['username'] . ":</strong> " . $review['review_text'] . "</p>";
            echo "<p>Rating: " . $review['rating'] . "</p>";
            echo "<small>Submitted on: " . date('Y-m-d H:i:s', $review['timestamp']) . "</small>";
            echo "</li>";
        }
    }
    echo "</ul>";
}



// Example Usage:

// Submit a review
$review_data = submit_review('Awesome T-Shirt', 'This is a great shirt!', 'JohnDoe', 5);

if (array_key_exists('error', $review_data)) {
    echo "<p>Error submitting review: " . $review_data['error'] . "</p>";
} else {
    echo "<h3>Review Submitted!</h3>";
    print_r($review_data); // Display the review data (for testing)
}


// Simulate some existing reviews (for demonstration)
$existing_reviews = [
    ['product_name' => 'Awesome T-Shirt', 'review_text' => 'Love this shirt!', 'username' => 'JaneSmith', 'rating' => 4, 'timestamp' => time() - 3600],
    ['product_name' => 'Awesome T-Shirt', 'review_text' => 'Good quality', 'username' => 'MikeJones', 'rating' => 3, 'timestamp' => time() - 7200],
    ['product_name' => 'Basic Mug', 'review_text' => 'Nice mug!', 'username' => 'AliceBrown', 'rating' => 5, 'timestamp' => time() - 1800]
];

// Display the reviews
display_reviews('Awesome T-Shirt', $existing_reviews);


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $itemId The unique identifier of the item being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating The rating (e.g., 1-5).
 * @param array $dbConnection  A database connection object.
 * @return array  An array containing:
 *               - 'success' => true if the review was saved successfully, false otherwise.
 *               - 'message' => A message describing the result (e.g., "Review saved!", "Error saving review").
 */
function saveUserReview(string $itemId, string $userName, string $reviewText, int $rating, PDO $dbConnection) {
    // Input validation - Important!  Don't allow arbitrary input!
    if (empty($itemId) || empty($userName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid input.  Please ensure all fields are filled and the rating is between 1 and 5.'];
    }

    try {
        // Prepare the SQL statement - use prepared statements to prevent SQL injection
        $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
                VALUES (:item_id, :user_name, :review_text, :rating)";

        $stmt = $dbConnection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':item_id', $itemId);
        $stmt->bindParam(':user_name', $userName);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        return ['success' => true, 'message' => 'Review saved!'];

    } catch (PDOException $e) {
        // Handle database errors - Log the error!  Don't expose the raw error.
        error_log("Database error saving review: " . $e->getMessage()); // Log for debugging
        return ['success' => false, 'message' => 'Error saving review. Please try again later.'];
    }
}

/**
 * Retrieve Reviews for an Item
 *
 * This function retrieves all reviews for a given item from the database.
 *
 * @param string $itemId The unique identifier of the item.
 * @param PDO $dbConnection  A database connection object.
 * @return array An array containing:
 *               - 'reviews' => An array of review objects, or an empty array if no reviews exist.
 *               - 'success' => true if reviews were retrieved successfully, false otherwise.
 */
function getReviewsForItem(string $itemId, PDO $dbConnection) {
    try {
        $sql = "SELECT * FROM reviews WHERE item_id = :item_id";
        $stmt = $dbConnection->prepare($sql);
        $stmt->bindParam(':item_id', $itemId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }

        return ['reviews' => $reviews, 'success' => true];

    } catch (PDOException $e) {
        error_log("Database error retrieving reviews: " . $e->getMessage());
        return ['reviews' => [], 'success' => false, 'message' => 'Error retrieving reviews. Please try again later.'];
    }
}



// Example Usage (Illustrative - Replace with your actual database setup)

// Create a dummy database connection (for demonstration)
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');


// Save a review
$reviewResult = saveUserReview('product123', 'John Doe', 'Great product!', 5, $db);
print_r($reviewResult);
// Example: Retrieve Reviews for 'product123'
$reviews = getReviewsForItem('product123', $db);
print_r($reviews);


// Close the database connection (important!)
$db = null; // Disconnect the PDO object

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $allowedExtensions (Optional) An array of allowed file extensions for image uploads. Defaults to an empty array.
 * @return array An array containing success/failure status and any relevant messages.
 */
function submit_review(string $productName, string $reviewText, array $allowedExtensions = [])
{
    // Input Validation & Sanitization
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }

    // Sanitize Review Text (Basic - can be expanded)
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING); // Basic sanitization, removes HTML tags
    if (strlen($reviewText) > 10000) { // Limit review text length
        return ['success' => false, 'message' => 'Review text exceeds the maximum allowed length (10000 characters).'];
    }


    // ---  (Optional) Image Handling  ---
    $imageFile = $_FILES['image'] ?? null;  // Using null coalesce operator for null safety
    if ($imageFile && !empty($imageFile['name'])) {
        $allowedTypes = ['jpg', 'jpeg', 'png', 'gif'];
        $fileExtension = strtolower(pathinfo($imageFile['name'], PATHINFO_EXTENSION));

        if (!in_array($fileExtension, $allowedTypes)) {
            return ['success' => false, 'message' => 'Invalid image file type.  Allowed types: ' . implode(',', $allowedTypes)];
        }

        // --- Image Processing (Simple Example - You'd likely use a library like GD or ImageMagick) ---
        $uploadDirectory = 'uploads/';
        if (!is_dir($uploadDirectory)) {
            mkdir($uploadDirectory, 0777, true); // Create directory if it doesn't exist
        }

        $uniqueName = uniqid() . '.' . $fileExtension;
        $destination = $uploadDirectory . $uniqueName;
        if (move_uploaded_file($imageFile['tmp_name'], $destination)) {
            $imageURL = $destination; // Update imageURL
        } else {
            return ['success' => false, 'message' => 'Failed to upload image.'];
        }

    } else {
        $imageURL = null;  // No image uploaded
    }



    // ---  Store Review Data (Example - Replace with your database logic) ---
    // This is a simplified example, and you'd likely use a database query.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'image_url' => $imageURL,
        'submission_timestamp' => time(),
    ];

    // Save to database (Example)
    // $result = save_to_database($review);  // Replace with your database function
    // if ($result === true) {
    //    return ['success' => true, 'message' => 'Review submitted successfully!'];
    // } else {
    //   return ['success' => false, 'message' => 'Failed to submit review to database. Error: ' . $result];
    // }


    // If everything goes well:
    return ['success' => true, 'message' => 'Review submitted successfully!'];
}

/**
 * Example Database Save Function (Placeholder - Replace with your actual DB code)
 *
 * @param array $review Data for the review.
 * @return bool|string True on success, error message on failure.
 */
function save_to_database(array $review) {
    // Replace with your database logic here.
    // This is just a placeholder for demonstration.
    //  For example:
    //  $db = new DatabaseConnection();
    //  $sql = "INSERT INTO reviews (product_name, review_text, image_url, submission_timestamp) VALUES (:product_name, :review_text, :image_url, :timestamp)";
    //  $stmt = $db->prepare($sql);
    //  $stmt->execute([
    //      ':product_name' => $review['product_name'],
    //      ':review_text' => $review['review_text'],
    //      ':image_url' => $review['image_url'],
    //      ':timestamp' => $review['submission_timestamp'],
    //  ]);
    //  return $stmt->rowCount() > 0 ? true : "Error inserting into database.  Error: " . $db->lastError();

    // Simulate success
    return true;
}


// --- Example Usage ---
$product = "Awesome Gadget X";
$review_text = "This gadget is fantastic!  I love it!";
$allowed_image_types = ['jpg', 'png'];

$result = submit_review($product, $review_text, $allowed_image_types);

if ($result['success']) {
    echo "<p>Review submitted successfully: " . $result['message'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}


?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, allowing for adding, retrieving, and displaying them.
 */
class Review {

    private $db; // Database connection

    /**
     * Constructor
     *
     * @param PDO $db  PDO database connection object
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $reviewerName  The name of the reviewer.
     * @param string $reviewText  The text of the review.
     * @param int $rating  The rating (e.g., 1-5).
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $reviewerName, string $reviewText, int $rating) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, reviewer_name, review_text, rating) VALUES (:product_id, :reviewer_name, :review_text, :rating)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->bindParam(':rating', $rating);

            return $stmt->execute();
        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }


    /**
     * Get all reviews for a product
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects.  Returns an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId): array {
        $reviews = [];
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $review = (object) $row; // Convert the row to an object
                $reviews[] = $review;
            }
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage()); // Log the error
        }
        return $reviews;
    }

    /**
     * Get a single review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return object|null Review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                return (object) $row;
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return null;
        }
    }

     /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}

// Example usage (assuming you have a database connection named $db):

// Create a database connection (replace with your actual credentials)
try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  // Enable error mode
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Instantiate the Review class
$review = new Review($db);

// Add a review
$review->addReview(123, "John Doe", "Great product!", 5);

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);
foreach ($reviews as $review) {
    echo "Reviewer: " . $review->reviewer_name . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Text: " . $review->review_text . "<br>";
    echo "<hr>";
}

// Get a single review
$singleReview = $review->getReviewById(1);

if ($singleReview) {
    echo "Reviewer: " . $singleReview->reviewer_name . "<br>";
    echo "Rating: " . $singleReview->rating . "<br>";
    echo "Text: " . $singleReview->review_text . "<br>";
}

// Delete a review
$review->deleteReview(1);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic input validation and output formatting.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (1-5).
 *
 * @return array An array containing the review data if successful, or an error message
 *               if validation fails.
 */
function createReview(string $product_id, string $user_name, string $review_text, int $rating): array
{
    // Input Validation
    if (empty($product_id)) {
        return ["error" => "Product ID cannot be empty."];
    }

    if (empty($user_name)) {
        return ["error" => "User name cannot be empty."];
    }

    if (empty($review_text)) {
        return ["error" => "Review text cannot be empty."];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ["error" => "Rating must be a number between 1 and 5."];
    }

    //  Store the review (replace with your database logic)
    $review = [
        "product_id" => $product_id,
        "user_name" => $user_name,
        "review_text" => $review_text,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s") // Add timestamp for tracking
    ];

    //  Example:  Save to a simple array (replace with database insertion)
    //  $reviews[$product_id][] = $review;


    // Return success with the review data
    return ["success" => true, "review" => $review];
}

/**
 * Display Reviews Function (Example - for demonstration)
 *
 * This function demonstrates how to display reviews based on a product ID.
 * It assumes you have a mechanism to retrieve reviews from a data source.
 *
 * @param string $product_id The product ID to retrieve reviews for.
 * @return array An array containing the reviews or an error message.
 */
function displayReviews(string $product_id): array
{
    // Example: Retrieve reviews from an array (replace with your data retrieval logic)
    $reviews = [
        "product123" => [
            ["user_name" => "John Doe", "review_text" => "Great product!", "rating" => 5],
            ["user_name" => "Jane Smith", "review_text" => "Good value for money.", "rating" => 4]
        ],
        "product456" => [
            ["user_name" => "Peter Jones", "review_text" => "Excellent quality.", "rating" => 5]
        ]
    ];

    if (isset($reviews[$product_id])) {
        return ["success" => true, "reviews" => $reviews[$product_id]];
    } else {
        return ["success" => false, "message" => "No reviews found for this product."];
    }
}



// Example Usage:
// Create a review
$review_data = createReview("product123", "Alice Brown", "This is a fantastic product!", 5);

if (isset($review_data["success"])) {
    echo "Review created successfully!<br>";
    echo "Review ID: " . $review_data["review"]["id"] . "<br>";
    print_r($review_data["review"]);
} else {
    echo "Error creating review: " . $review_data["error"] . "<br>";
}


// Display reviews for product123
$reviews = displayReviews("product123");

if (isset($reviews["success"])) {
    echo "<h3>Reviews for product123:</h3>";
    if (empty($reviews["reviews"])) {
        echo "<p>No reviews yet!</p>";
    } else {
        foreach ($reviews["reviews"] as $review) {
            echo "<strong>" . $review["user_name"] . ":</strong> " . $review["review_text"] . " (" . $review["rating"] . "/5)<br>";
        }
    }
} else {
    echo "Error displaying reviews: " . $reviews["message"] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and store user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True if the review was created successfully, false otherwise.
 */
function createReview(string $productId, string $username, string $rating, string $comment)
{
  // Validate inputs - important for security and data integrity
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); // Log for debugging
    return false;
  }
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return false;
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }
  if (empty($comment)) {
    error_log("Error: Comment cannot be empty.");
    return false;
  }

  // Database connection (replace with your actual database details)
  $servername = "localhost";
  $username = "your_db_username";
  $password = "your_db_password";
  $dbname = "your_db_name";

  // Create connection
  $conn = new mysqli($servername, $username, $password, $dbname);

  // Check connection
  if ($conn->connect_error) {
    error_log("Connection failed: " . $conn->connect_error);
    return false;
  }

  // Prepare SQL statement
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
          VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute the SQL statement
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    error_log("Error inserting review: " . $conn->error); // Log the specific error
    return false;
  }

  // Close the connection
  $conn->close();
}


// Example Usage:
// Assuming you have a product_id of 123 and a user 'JohnDoe'
// $success = createReview("123", "JohnDoe", 4, "Great product, highly recommended!");

// if ($success) {
//   echo "Review created successfully!";
// } else {
//   echo "Failed to create review.";
// }



//  --- Example Table Structure (SQL) ---
/*
CREATE TABLE reviews (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT NOT NULL,
  username VARCHAR(255) NOT NULL,
  rating INT NOT NULL,
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/

?>


<?php
// ... (database connection code as above) ...

// Prepare the statement
$stmt = $conn->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");

// Bind parameters
$stmt->bind_param("siiii", $productId, $username, $rating, $comment); // s = string, i = integer

// Execute the statement
if ($stmt->execute()) {
  return true;
} else {
  error_log("Error inserting review: " . $conn->error);
  return false;
}

// Close the statement
$stmt->close();

?>


<?php

/**
 * Class Review
 *
 * Handles creating, retrieving, updating, and deleting reviews.
 */
class Review
{
    private $db;

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The user who wrote the review.
     * @param string $comment The review text.
     * @param int $rating The rating (1-5).
     * @return int|false The ID of the new review on success, or false on failure.
     */
    public function createReview($productId, $user, $comment, $rating)
    {
        // Validate inputs -  Crucial for security!
        if (!$productId || !$user || !$comment || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare the SQL statement to prevent SQL injection
        $sql = "INSERT INTO reviews (product_id, user, comment, rating) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("siii", $productId, $user, $comment, $rating);

        if ($stmt->execute()) {
            return $this->db->insert_id;
        } else {
            // Log the error - very important!
            error_log("Error creating review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }


    /**
     * Retrieves a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReviewById($reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                $row = $result->fetch_assoc();
                return $row;
            } else {
                return null;
            }
        } else {
            error_log("Error retrieving review: " . $stmt->error);
            return null;
        }

        $stmt->close();
    }



    /**
     * Updates a review by ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $user  The new user (optional, if unchanged).
     * @param string $comment The new review text (optional, if unchanged).
     * @param int $rating The new rating (1-5).
     * @return bool True on success, false on failure.
     */
    public function updateReviewById($reviewId, $user = null, $comment = null, $rating = null)
    {
        $set_clause = "";
        $params = [];

        if ($user !== null) {
            $set_clause .= "user = ? , ";
            $params[] = $user;
        }
        if ($comment !== null) {
            $set_clause .= "comment = ? , ";
            $params[] = $comment;
        }
        if ($rating !== null) {
            $set_clause .= "rating = ? ";
            $params[] = $rating;
        }

        if (empty($set_clause)) {
            return false; // Nothing to update
        }

        $set_clause = substr($set_clause, 0, -2); // Remove trailing comma and space

        $sql = "UPDATE reviews SET $set_clause WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            error_log("Error updating review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }



    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReviewById($reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            error_log("Error deleting review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }
}



// Example Usage (Assuming you have a database connection $db)
//  Replace this with your actual database connection details

// Mock database connection (for testing without a real database)
class MockDB
{
    public function prepare($sql) {
        // In a real implementation, this would return a prepared statement object
        return new MockStatement($sql);
    }

    public function execute($stmt) {
        // Simulate execution and return true/false based on the simulated outcome
        return true; // Or false if the 'execute' method failed
    }

    public function insert_id() {
        return 123; // Dummy ID for demonstration
    }
}


class MockStatement{
    private $sql;
    public function __construct($sql) {
        $this->sql = $sql;
    }

    public function bind_param($param_types, $values){
        //Simulate binding parameters - do nothing in this mock
    }

    public function execute() {
        // Simulate execution.  In reality, this would execute the query.
        return true;
    }

    public function get_result() {
        //Simulate a result set
        return new MockResultSet();
    }

    public function close(){
    }
}

class MockResultSet{
    public function num_rows() {
        return 0;
    }

    public function fetch_assoc(){
        return null;
    }
}


$db = new MockDB();

$review = new Review($db);

//Create a review
$newReviewId = $review->createReview(1, "John Doe", "Great product!", 5);
if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get the review
$reviewData = $review->getReviewById($newReviewId);
if ($reviewData) {
    echo "Review details: " . print_r($reviewData, true) . "
";
} else {
    echo "Review not found.
";
}

//Update the review
$updateResult = $review->updateReviewById($newReviewId, "Jane Smith", "Excellent!", 4);
if ($updateResult) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

//Delete the review
$deleteResult = $review->deleteReviewById($newReviewId);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     * 
     * @param int $reviewId (Optional) - Unique ID for the review. If not provided, one will be generated.
     * @param int $userId The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (1-5).
     * @param string $comment The user's comment.
     */
    public function __construct(int $userId, int $productId, int $rating, string $comment = "") {
        $this->generateId();
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Timestamp for date
    }

    /**
     * Generate a unique ID for the review.
     */
    private function generateId(): void {
        $this->reviewId = uniqid();
    }

    /**
     * Get the Review ID.
     *
     * @return int
     */
    public function getReviewId(): int {
        return $this->reviewId;
    }

    /**
     * Get the User ID.
     *
     * @return int
     */
    public function getUserId(): int {
        return $this->userId;
    }

    /**
     * Get the Product ID.
     *
     * @return int
     */
    public function getProductId(): int {
        return $this->productId;
    }

    /**
     * Get the Rating.
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get the Comment.
     *
     * @return string
     */
    public function getComment(): string {
        return $this->comment;
    }

    /**
     * Get the Date of the review.
     *
     * @return string
     */
    public function getDate(): string {
        return $this->date;
    }

    /**
     *  Return the review as an array for easy output.
     *
     * @return array
     */
    public function toArray(): array {
        return [
            'reviewId' => $this->reviewId,
            'userId' => $this->userId,
            'productId' => $this->productId,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'date' => $this->date
        ];
    }
}



/**
 * User Review Review Function (Example Usage and Validation)
 */
function createReview(array $data): ?UserReview {
    // Input validation
    if (!isset($data['userId']) || !is_int($data['userId']) || $data['userId'] <= 0) {
        error_log("Invalid userId: " . $data['userId']); // Log the error (good practice)
        return null;
    }

    if (!isset($data['productId']) || !is_int($data['productId']) || $data['productId'] <= 0) {
        error_log("Invalid productId: " . $data['productId']);
        return null;
    }

    if (!isset($data['rating']) || !is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
        error_log("Invalid rating: " . $data['rating']);
        return null;
    }

    if (empty($data['comment'])) {
        $comment = "";
    } else {
        $comment = trim($data['comment']); // Trim whitespace
    }

    // Create the review object
    return new UserReview($data['userId'], $data['productId'], $data['rating'], $comment);
}

// Example Usage:
$reviewData = [
    'userId' => 123,
    'productId' => 456,
    'rating' => 4,
    'comment' => 'Great product! Highly recommend.'
];

$review = createReview($reviewData);

if ($review) {
    echo "Review created successfully!
";
    print_r($review->toArray());  // Display the review in array format
} else {
    echo "Error creating review.
";
}

//Example with invalid data to demonstrate error handling
$invalidReviewData = [
    'userId' => "abc",  //Invalid userId (string instead of int)
    'productId' => 789,
    'rating' => 6, //Invalid rating (greater than 5)
    'comment' => ""
];
$review = createReview($invalidReviewData);

if ($review) {
    echo "Review created successfully!
";
    print_r($review->toArray());  // Display the review in array format
} else {
    echo "Error creating review (as expected).
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;
    private $isApproved;

    /**
     * Constructor
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
        $this->isApproved = false; // Default to unapproved
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    public function isApproved() {
        return $this->isApproved;
    }

    /**
     * Approve the review
     */
    public function approve() {
        $this->isApproved = true;
    }

    /**
     *  Returns the review as an array for easy output.
     *
     *  @return array  An associative array containing the review data.
     */
    public function toArray() {
        return [
            'product_id' => $this->getProductId(),
            'user_id' => $this->getUserId(),
            'rating' => $this->getRating(),
            'comment' => $this->getComment(),
            'date' => $this->getDate(),
            'is_approved' => $this->isApproved()
        ];
    }
}


/**
 * User Review Function (Example Usage)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews:</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User ID:</strong> " . $review->getUserId() . "<br>";
        echo "<strong>Rating:</strong> " . $review->getRating() . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
        echo "<strong>Date:</strong> " . $review->getDate() . "<br>";
        if ($review->isApproved()) {
            echo "<strong>Status:</strong> Approved<br>";
        } else {
            echo "<strong>Status:</strong> Pending Approval<br>";
        }
        echo "</li>";
    }
    echo "</ul>";
}



// --- Example Usage ---

// Create some reviews
$review1 = new UserReview(123, 45, 4, "Great product, highly recommended!");
$review2 = new UserReview(456, 78, 5, "Excellent value for money.");
$review3 = new UserReview(123, 90, 3, "It was okay.");

// Store the reviews (e.g., in an array or database)
$reviews = [$review1, $review2, $review3];


// Display the reviews
displayUserReviews($reviews);


// You can also approve a review:
$review2->approve();
echo "<br>After approval: ";
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

  private $reviewId;
  private $productId;
  private $userId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating  The rating given (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($productId, $userId, $rating, $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Set current date and time
  }

  /**
   * Getters for each review attribute
   *
   *  Provides access to the review's data.
   *
   * @return int|string|int|string|string
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }


  /**
   *  String representation of the review
   *  Useful for debugging or displaying review data
   *
   * @return string
   */
  public function __toString() {
    return "Review ID: " . $this->getReviewId() . "
" .
           "Product ID: " . $this->getProductId() . "
" .
           "User ID: " . $this->getUserId() . "
" .
           "Rating: " . $this->getRating() . "
" .
           "Comment: " . $this->getComment() . "
" .
           "Date: " . $this->getDate();
  }
}

// Example Usage
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(789, 101, 4, "Good value for the price.");

echo $review1 . "

";
echo $review2 . "
";

//  ------------------------
//  Database Interaction Example (Conceptual)
//  ------------------------

// In a real application, you would:
// 1. Connect to your database.
// 2. Prepare an SQL query to insert the review data.
// 3. Execute the query.
// 4. Handle any database errors.

// Example:
/*
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

try {
  $stmt = $db->prepare("INSERT INTO reviews (productId, userId, rating, comment) 
                        VALUES (?, ?, ?, ?)");
  $stmt->execute([$review1->getProductId(), $review1->getUserId(), $review1->getRating(), $review1->getComment()]);

  echo "Review saved to database!
";
} catch (PDOException $e) {
  echo "Error saving review: " . $e->getMessage() . "
";
}
*/
?>


<?php

/**
 *  User Review Function - A simple example.
 *
 *  Allows users to submit and view reviews for a product or service.
 *
 *  This is a basic example and should be expanded upon for a real-world application.
 */

class Review {

  private $reviewId;
  private $productId; // Associate with a product or service
  private $userId;
  private $rating; // Numeric rating (e.g., 1-5)
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given (1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the current timestamp
  }

  /**
   * Getters
   */
  public function getReviewId(): int {
    return $this->reviewId;
  }

  public function getProductId(): int {
    return $this->productId;
  }

  public function getUserId(): int {
    return $this->userId;
  }

  public function getRating(): int {
    return $this->rating;
  }

  public function getComment(): string {
    return $this->comment;
  }

  public function getDate(): string {
    return $this->date;
  }


  /**
   *  Save the Review (Placeholder - replace with database integration)
   *  This is a placeholder and should be replaced with your database logic.
   *
   * @return bool True if the review was saved, false otherwise.
   */
  public function save(): bool {
    // Placeholder - Replace with database logic (e.g., INSERT query)
    // Example:
    // $db = new DatabaseConnection();  // Assuming you have a DatabaseConnection class
    // $result = $db->insertReview($this->productId, $this->userId, $this->rating, $this->comment);
    // return $result;

    // For this example, just return true:
    return true;
  }

  /**
   *  Display the Review
   *
   * @return string HTML representation of the review.
   */
  public function display(): string {
    return "<div class='review'>" .
           "<b>Product ID:</b> " . $this->productId . "<br>" .
           "<b>User ID:</b> " . $this->userId . "<br>" .
           "<b>Rating:</b> " . $this->rating . "<br>" .
           "<b>Comment:</b> " . $this->comment . "<br>" .
           "<b>Date:</b> " . $this->date . "</div>";
  }
}


// Example Usage:
$review1 = new Review(123, 45, 5, "Great product!  Highly recommended.");
$review1->save(); // Save the review

echo $review1->display(); // Display the review


// Example of creating another review
$review2 = new Review(456, 78, 3, "It was okay, but could be better.");
$review2->save();
echo "<br>";
echo $review2->display();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic input validation and database interaction (replace with your actual database setup).
 */

class UserReview
{
    private $dbConnection;

    public function __construct($dbConfig) {
        // Replace with your database connection details
        $this->dbConnection = new PDO(
            $dbConfig['driver'] . ":" . $dbConfig['host'] . ":" . $dbConfig['dbname'],
            $dbConfig['user'],
            $dbConfig['password']
        );
        $this->dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Submit a new review.
     *
     * @param string $username     The username of the reviewer.
     * @param string $reviewText   The review text.
     * @return bool True if successful, false otherwise.
     */
    public function submitReview($username, $reviewText)
    {
        // Input validation (add more as needed)
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        try {
            $stmt = $this->dbConnection->prepare("INSERT INTO reviews (username, review_text, rating) VALUES (:username, :review_text, :rating)");
            $stmt->bindParam(':username', $username);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->bindParam(':rating', 5); // Default rating of 5.  Modify as needed.

            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error submitting review: " . $e->getMessage()); // Log errors for debugging
            return false;
        }
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getAllReviews()
    {
        try {
            $stmt = $this->dbConnection->prepare("SELECT id, username, review_text, rating, created_at FROM reviews");
            $stmt->execute();
            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
                $reviews[] = (object) [
                    'id' => $row->id,
                    'username' => $row->username,
                    'review_text' => $row->review_text,
                    'rating' => $row->rating,
                    'created_at' => $row->created_at
                ];
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return object|null A review object if found, null otherwise.
     */
    public function getReviewById($reviewId)
    {
        try {
            $stmt = $this->dbConnection->prepare("SELECT id, username, review_text, rating, created_at FROM reviews WHERE id = :reviewId");
            $stmt->bindParam(':reviewId', $reviewId);
            $stmt->execute();
            $row = $stmt->fetch(PDO::FETCH_OBJ);

            if ($row) {
                return (object) [
                    'id' => $row->id,
                    'username' => $row->username,
                    'review_text' => $row->review_text,
                    'rating' => $row->rating,
                    'created_at' => $row->created_at
                ];
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error retrieving review by ID: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if successful, false otherwise.
     */
    public function deleteReview($reviewId)
    {
        try {
            $stmt = $this->dbConnection->prepare("DELETE FROM reviews WHERE id = :reviewId");
            $stmt->bindParam(':reviewId', $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

}

// Example Usage (Replace with your actual database configuration)
$dbConfig = [
    'driver' => 'mysql',
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_username',
    'password' => 'your_password'
];


// Create an instance of the Review class
$review = new UserReview($dbConfig);

// Submit a review
$reviewResult = $review->submitReview("JohnDoe", "This is a fantastic product!");

if ($reviewResult) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$allReviews = $review->getAllReviews();
echo "<br>All Reviews:<br>";
foreach ($allReviews as $review) {
    echo "ID: " . $review->id . "<br>";
    echo "Username: " . $review->username . "<br>";
    echo "Review: " . $review->review_text . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "<br>";
}

// Get a specific review
$specificReview = $review->getReviewById(1);

if ($specificReview) {
    echo "<br>Specific Review:<br>";
    echo "ID: " . $specificReview->id . "<br>";
    echo "Username: " . $specificReview->username . "<br>";
    echo "Review: " . $specificReview->review_text . "<br>";
    echo "Rating: " . $specificReview->rating . "<br>";
}
else{
    echo "<br>Review not found.";
}

// Delete a review (uncomment to use)
// $deleteResult = $review->deleteReview(1);
// if ($deleteResult) {
//     echo "<br>Review deleted successfully!";
// } else {
//     echo "<br>Error deleting review.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and output formatting.
 *
 * @param string $productId The unique identifier of the product/item.
 * @param string $username The username of the reviewing user.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Must be numeric.
 * @param string $comment  The user's review comment.
 *
 * @return bool True on successful saving, False on failure (e.g., invalid input).
 */
function saveUserReview(string $productId, string $username, string $rating, string $comment) {
    // --- Input Validation ---
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");  // Log for debugging
        return false;
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // --- Data Sanitization (Important for security) ---
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);  // Escape HTML and other characters
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $rating = (int)$rating; // Cast to integer for safe storage
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // --- Data Storage (Example - Using a simple array.  In a real app, use a database.) ---
    $reviews = loadReviews($productId);  // Assuming a function to load reviews
    if ($reviews) {
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time() // Add a timestamp for ordering/management
        ];
        $reviews[] = $review;
    } else {
        $reviews = [$review];
    }


    // --- Save the review ---
    saveReviews($reviews); // Assuming a function to save reviews to storage.

    return true;
}


/**
 * Placeholder Functions (Replace with your actual implementation)
 */
function loadReviews(string $productId) {
    // Replace this with your logic to retrieve reviews for the product.
    // This is just a dummy implementation.
    // Ideally, you'd fetch this from a database.
    return []; // Return an empty array
}

function saveReviews(array $reviews) {
    // Replace this with your logic to save the reviews to your storage.
    // This is just a dummy implementation.
    // In a real application, you would likely save this data to a database.
    echo "Saving reviews: 
";
    print_r($reviews);
}


// --- Example Usage ---
$productID = "prod123";
$userName = "JohnDoe";
$rating = 4;
$reviewText = "Great product, would recommend!";

if (saveUserReview($productID, $userName, $rating, $reviewText)) {
    echo "Review submitted successfully!
";
} else {
    echo "Error submitting review.
";
}

// Example with invalid rating:
$invalidRating = 6;
$result = saveUserReview($productID, $userName, $invalidRating, $reviewText);
if(!$result){
    echo "Invalid rating test passed
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic structure for managing user reviews.
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   * 
   * @param int $review_id (optional) Unique ID for the review. If not provided, one will be generated.
   * @param int $user_id  The ID of the user leaving the review.
   * @param int $product_id The ID of the product being reviewed.
   * @param int $rating   The rating given by the user (e.g., 1-5).
   * @param string $comment The user's comment about the product.
   */
  public function __construct(
    int $user_id,
    int $product_id,
    int $rating,
    string $comment
  ) {
    $this->generateUniqueId();
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Get current timestamp
  }


  /**
   * Generates a unique ID for the review.
   */
  private function generateUniqueId() {
    $this->review_id = uniqid(); // Use uniqid() for a unique string.
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->review_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }


  /**
   *  String representation of the review object. Useful for debugging or output.
   */
  public function __toString() {
    return "Review ID: " . $this->review_id . "
" .
           "User ID: " . $this->user_id . "
" .
           "Product ID: " . $this->product_id . "
" .
           "Rating: " . $this->rating . "
" .
           "Comment: " . $this->comment . "
" .
           "Date: " . $this->date;
  }
}


/**
 *  User Review Review Function Example
 */
function displayUserReview(UserReview $review) {
  echo $review; // Uses the __toString() method of the UserReview class.
}

// Example Usage:
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
displayUserReview($review1);

$review2 = new UserReview(789, 101, 3, "It was okay, but could be better.");
displayUserReview($review2);


//  Simulated Database Interaction (for demonstration - replace with real DB code)
class ReviewDatabase {
    private $reviews = [];

    public function addReview(UserReview $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}

$db = new ReviewDatabase();
$db->addReview($review1);
$db->addReview($review2);
echo "
All Reviews:
";
print_r($db->getReviews());

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param array $reviews (Optional) Array to store reviews.  If empty, creates a new array.
 * 
 * @return array  The array of reviews, updated with the new review.
 */
function addReview(string $productId, string $username, int $rating, string $comment, array $reviews = []): array
{
    // Input validation - Essential for security and data integrity
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create a review object
    $review = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s') // Add a timestamp for review history
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}



/**
 * Display Reviews Function
 * 
 * This function retrieves and formats reviews for display.
 *
 * @param array $reviews An array of review objects.
 * 
 * @return string A formatted string of reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $output = "<ul>";
    foreach ($reviews as $review) {
        $output .= "<li>";
        $output .= "<strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . " (" . $review['rating'] . "/5) - " . htmlspecialchars($review['date']) . "</li>";
    }
    $output .= "</ul>";
    return $output;
}


// Example Usage:

// Initialize an empty reviews array.  This is good practice.
$productReviews = [];


try {
    // Add some reviews
    $productReviews = addReview("product123", "JohnDoe", 4, "Great product!  I would recommend it.", $productReviews);
    $productReviews = addReview("product123", "JaneSmith", 5, "Excellent quality and fast shipping.", $productReviews);
    $productReviews = addReview("product456", "PeterJones", 3, "It's okay, but could be better.", $productReviews);

    // Display the reviews
    echo displayReviews($productReviews);

} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and retrieve user reviews for a given item.
 *  It includes basic validation and error handling.
 *
 *  @param string $item_id  The unique identifier for the item being reviewed.
 *  @param string $user_name  The name of the user submitting the review.
 *  @param string $review_text The user's review text.
 *  @param int $rating (Optional) The rating provided by the user (1-5). Defaults to 0.
 *
 *  @return array|false  An array containing the review ID, user name, review text,
 *                       and rating if the review was successfully created.
 *                       Returns false if there was an error.
 */
function createReview(string $item_id, string $user_name, string $review_text, int $rating = 0)
{
    // **Validation:**
    if (empty($item_id)) {
        error_log("Error: Item ID cannot be empty.");
        return false;
    }
    if (empty($user_name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    // Validation for rating (optional)
    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // **Database Interaction (Replace with your database connection logic)**
    try {
        // Assuming you have a database connection established: $db
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); //Example - replace with your connection details

        $stmt = $db->prepare("INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$item_id, $user_name, $review_text, $rating]);
        $review_id = $db->lastInsertId(); // Get the ID of the newly inserted row
        return [
            'review_id' => $review_id,
            'item_id' => $item_id,
            'user_name' => $user_name,
            'review_text' => $review_text,
            'rating' => $rating
        ];
    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage());
        return false;
    }
}

// Example Usage (Demonstration):
$review = createReview("item123", "John Doe", "This is a great product!");
if ($review) {
    echo "Review created successfully! Review ID: " . $review['review_id'] . "
";
} else {
    echo "Failed to create review.
";
}


$review2 = createReview("item456", "Jane Smith", "Excellent value for money.", 5);
if ($review2) {
    echo "Review created successfully! Review ID: " . $review2['review_id'] . "
";
} else {
    echo "Failed to create review.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect, process, and display user reviews.
 *
 * @param string $review_form_id The ID of the HTML form used to collect reviews.
 * @param string $review_db_table The name of the database table where reviews will be stored.
 * @param string $review_title The title/name for the reviews (e.g., "Restaurant Reviews")
 * @param string $success_message A success message to display after a review is submitted.
 * @param string $error_message  An error message to display if the review submission fails.
 *
 * @return array An array containing the collected reviews, or an empty array if no reviews were submitted.
 */
function collect_user_reviews(
    string $review_form_id,
    string $review_db_table,
    string $review_title,
    string $success_message = "Review submitted successfully!",
    string $error_message = "An error occurred while submitting your review."
) {
    // 1. Get the form data
    $reviews = [];

    if (isset($_POST[$review_form_id])) {
        $review_text = filter_input(INPUT_POST, $review_form_id, FILTER_SANITIZE_STRING);
        $rating = filter_input(INPUT_POST, $review_form_id . '_rating', FILTER_VALIDATE_INT); // Validate rating as an integer
        $user_name = filter_input(INPUT_POST, $review_form_id . '_user_name', FILTER_SANITIZE_STRING);


        // 2. Validate the input
        if (empty($review_text)) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return []; // Return an empty array if no review text
        }

        if ($rating === null || $rating < 1 || $rating > 5) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return [];
        }

        if (empty($user_name)) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return [];
        }


        // 3. Process the review data
        $review = [
            'review_text' => $review_text,
            'rating'      => $rating,
            'user_name'   => $user_name,
            'submission_date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];

        // 4. Store the review in the database (Example - using a simple database)
        //  You'll need to adapt this to your database setup.
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your database credentials

        $stmt = $db_connection->prepare("INSERT INTO " . $review_db_table . " (review_text, rating, user_name, submission_date) VALUES (:review_text, :rating, :user_name, :submission_date)");
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':submission_date', $review_text); //Use the review_text here for the date
        $stmt->execute();

        $reviews[] = $review;


    }

    return $reviews;
}


// Example Usage (This would typically be called from within a web page)
//  You'd need to have an HTML form with the ID 'my_review_form'
//  and a database table named 'restaurant_reviews'
//  Example HTML form structure:
// <form id="my_review_form" action="process_review.php" method="post">
//   <label for="review_text">Review Text:</label><br>
//   <textarea id="review_text" name="my_review_form" rows="4" cols="50"></textarea><br><br>
//   <label for="rating">Rating (1-5):</label><br>
//   <input type="number" id="rating" name="my_review_form_rating" min="1" max="5"><br><br>
//   <label for="user_name">Your Name:</label><br>
//   <input type="text" id="user_name" name="my_review_form_user_name" required><br><br>
//   <button type="submit">Submit Review</button>
// </form>

// $collected_reviews = collect_user_reviews('my_review_form', 'restaurant_reviews');

// if (!empty($collected_reviews)) {
//   echo "<h2>Collected Reviews:</h2>";
//   foreach ($collected_reviews as $review) {
//     echo "<p><strong>User:</strong> " . $review['user_name'] . "</p>";
//     echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//     echo "<p><strong>Review:</strong> " . $review['review_text'] . "</p>";
//     echo "<p><strong>Date:</strong> " . $review['submission_date'] . "</p>";
//     echo "<hr>";
//   }
// } else {
//   echo "<p>No reviews submitted yet.</p>";
// }

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    /**
     * @var array Array of reviews.
     */
    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $rating, string $comment) {
        if (empty($username) || empty($rating) || empty($comment)) {
            return false; // Invalid input
        }

        // Sanitize and validate rating (optional - adjust validation as needed)
        $rating = (int) $rating;
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];

        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array Array of reviews.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews by username.
     *
     * @param string $username The username to filter by.
     * @return array Array of reviews by the specified username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Get average rating.
     *
     * @return float|null The average rating if reviews exist, null otherwise.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return round($totalRating / $reviewCount, 2); // Round to 2 decimal places
    }
}

// Example Usage:
// Create a new review object
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('JohnDoe', 5, 'Great product!  Highly recommended.');
$reviewManager->addReview('JaneSmith', 4, 'Good value for the money.');
$reviewManager->addReview('JohnDoe', 3, 'It\'s okay, but could be better.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews by JohnDoe
$johnReviews = $reviewManager->getReviewsByUsername('JohnDoe');
print_r($johnReviews);

// Get average rating
$averageRating = $reviewManager->getAverageRating();
echo "Average Rating: " . ($averageRating === null ? "N/A" : $averageRating) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a given item or product.  It includes basic validation and sanitization.
 *
 * @param string $item_id The ID of the item or product to review.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $data     (Optional) An associative array containing all review data:
 *                         ['item_id' => '...', 'user_id' => '...', 'rating' => '...', 'comment' => '...']
 *
 * @return array An array containing the result of the operation.
 *               - 'success': true if the operation was successful.
 *               - 'message':  A success or error message.
 *               - 'review_id': The ID of the newly created review (if applicable).
 *               - 'review': The review data as an associative array.
 */
function create_review(string $item_id, string $user_id, string $rating, string $comment, array $data = []) {

  // Basic input validation and sanitization
  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'Item ID, User ID, Rating, and Comment are required.',
      'review_id' => null,
      'review' => null
    ];
  }

  // Ensure rating is an integer.  Handle non-integer input gracefully.
  $rating = intval($rating);
  if ($rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be between 1 and 5.',
      'review_id' => null,
      'review' => null
    ];
  }

  // Combine provided data with defaults (optional).  This allows for partial updates.
  $review_data = [];
  $review_data = array_merge($review_data, $review_data); //Merge

  $review_data['item_id'] = $item_id;
  $review_data['user_id'] = $user_id;



  // --- Database interaction (Replace this with your database logic) ---
  // This is a placeholder.  You'll need to adapt this to your database
  // setup (MySQL, PostgreSQL, etc.) and your data model.

  // Example using a hypothetical database connection
  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class

  try {
    $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (:item_id, :user_id, :rating, :comment)";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':item_id', $review_data['item_id']);
    $stmt->bindParam(':user_id', $review_data['user_id']);
    $stmt->bindParam(':rating', $review_data['rating']);
    $stmt->bindParam(':comment', $review_data['comment']);
    $stmt->execute();

    $review_id = $db->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id,
      'review' => $review_data
    ];

  } catch (Exception $e) {
    // Handle database errors gracefully
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage(),
      'review_id' => null,
      'review' => null
    ];
  }
}

/**
 *  Helper class to represent a database connection (placeholder).
 */
class DatabaseConnection {
    private $connection;

    public function __construct() {
        // In a real application, you'd establish a database connection here.
        // This is just a placeholder.
        $this->connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    public function prepare($sql) {
        return $this->connection->prepare($sql);
    }

    public function execute() {
        return $this->connection->execute();
    }

    public function lastInsertId() {
        return $this->connection->lastInsertId();
    }
}


// --- Example Usage ---
//  (This will need to be run within a PHP environment, e.g., a web server)
$result = create_review('product_123', 'user_456', 4, 'Great product!  Highly recommended.', []);
print_r($result);

$result = create_review('product_456', 'user_789', 3, 'It\'s okay, but could be better', ['rating' => 3, 'comment' => 'Just average.']);
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText   The text of the review.
 * @param array $reviews       (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *   - 'reviews': The updated array of reviews (including the new one).
 *   - 'newReview': The submitted review (for confirmation).
 *   - 'error':     (Optional) An error message if the review submission failed.
 */
function submit_review(string $productName, string $reviewerName, string $reviewText, array &$reviews = []) {
  // Basic validation (you can expand this with more robust validation)
  if (empty($reviewerName) || empty($reviewText)) {
    return ['reviews' => $reviews, 'newReview' => "Error: Reviewer name and review text are required."];
  }

  // Format the review
  $review = [
    'reviewer' => $reviewerName,
    'date'     => date("Y-m-d H:i:s"), // Add timestamp
    'text'     => $reviewText,
  ];

  // Add the new review to the array
  $reviews[] = $review;

  // Return the updated array and confirmation
  return ['reviews' => $reviews, 'newReview' => "Review submitted successfully for $productName."];
}


// Example Usage:
$product = "Awesome Gadget X";

// Submit a review
$result = submit_review($product, "John Doe", "This gadget is amazing!  I love it!");

if (isset($result['error'])) {
  echo "<p style='color:red;'>Error: " . $result['error'] . "</p>";
} else {
  echo "<h2>Reviews for " . $product . "</h2>";
  echo "<ul>";
  foreach ($result['reviews'] as $review) {
    echo "<li><strong>" . $review['reviewer'] . ":</strong> " . $review['text'] . "</li>";
  }
  echo "</ul>";
}

// Example with an invalid submission:
$result2 = submit_review("Another Product", "", "This is a test review.");

if (isset($result2['error'])) {
    echo "<p style='color:red;'>Error: " . $result2['error'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and potentially manage user reviews.
 * For simplicity, this example focuses on creating and displaying reviews.
 * 
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The text of the review.
 * @param string $reviewerName The name of the reviewer.
 * @param int $rating (Optional) -  Rating from 1 to 5. Defaults to 0 if not provided.
 * 
 * @return array An array containing the review ID, or an error message if creation fails.
 */
function createReview(string $productName, string $reviewText, string $reviewerName, int $rating = 0) {
  // Basic input validation
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if (empty($reviewerName)) {
    return ["error" => "Reviewer name cannot be empty."];
  }
  if ($rating < 1 || $rating > 5) {
    return ["error" => "Rating must be between 1 and 5."];
  }


  // In a real application, you would store this in a database.
  // For this example, we'll store it in an array.
  $reviewId = generateUniqueId(); //  Simulate generating a unique ID
  $review = [
    "review_id" => $reviewId,
    "product_name" => $productName,
    "review_text" => $reviewText,
    "reviewer_name" => $reviewerName,
    "rating" => $rating,
    "timestamp" => time() // Add timestamp for ordering
  ];

  // Store the review (simulated)
  storeReview($review);  // Function to save to a database in a real application

  return $review;
}


/**
 * Simulate generating a unique ID.
 * In a real application, use a database sequence or UUID.
 *
 * @return string A unique ID.
 */
function generateUniqueId() {
  return uniqid();
}


/**
 * Simulate storing the review in a database.
 * In a real application, this would be your database insertion logic.
 *
 * @param array $review The review data to store.
 */
function storeReview(array $review) {
  // This is a placeholder. Replace with your database logic.
  echo "Storing review: " . json_encode($review) . "
";
  // Example using mysqli (needs a database connection)
  // $db = new mysqli("localhost", "username", "password", "database");
  // if ($db->connect_error) {
  //   die("Connection failed: " . $db->connect_error);
  // }
  // $sql = "INSERT INTO reviews (product_name, review_text, reviewer_name, rating, timestamp)
  //         VALUES ('" . $review['product_name'] . "', '" . $review['review_text'] . "', '" . $review['reviewer_name'] . "', " . $review['rating'] . ", '" . $review['timestamp'] . "')";
  // if ($db->query($sql) === TRUE) {
  //   echo "New record created successfully";
  // } else {
  //   echo "Error: " . $db->error;
  // }
  // $db->close();
}

// --- Example Usage ---

// Create a review
$newReview = createReview("Awesome Product", "This is an amazing product!", "John Doe", 5);

if (isset($newReview["error"])) {
  echo "Error creating review: " . $newReview["error"] . "
";
} else {
  echo "Review created successfully with ID: " . $newReview["review_id"] . "
";
}

// Create another review
$anotherReview = createReview("Great Service", "The service was excellent!", "Jane Smith"); // Uses default rating of 0

if (isset($anotherReview["error"])) {
  echo "Error creating review: " . $anotherReview["error"] . "
";
} else {
  echo "Review created successfully with ID: " . $anotherReview["review_id"] . "
";
}

// Attempt to create a review with invalid input
$invalidReview = createReview("", "This is bad", "Bad Reviewer");
if (isset($invalidReview["error"])) {
  echo "Error creating review: " . $invalidReview["error"] . "
";
}
?>


<?php

/**
 * Class UserReview
 *
 * Handles creating, retrieving, updating, and deleting user reviews.
 */
class UserReview
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the database connection.
     *
     * @param PDO $db  Database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $userRating The user's rating (e.g., "5-star", "1-star").
     * @param string $comment  The user's review comment.
     * @return int|false  The ID of the new review if successful, or false on failure.
     */
    public function createReview(int $productId, string $userRating, string $comment)
    {
        // Validate inputs (important for security)
        if (!isset($productId, $userRating, $comment)) {
            return false;
        }

        if (empty($userRating) || empty($comment)) {
            return false;
        }

        try {
            $sql = "INSERT INTO reviews (product_id, user_rating, comment)
                    VALUES (:product_id, :user_rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_rating', $userRating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage());  // Log the error
            return false;
        }
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null  An associative array representing the review, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $review = $stmt->fetch(PDO::FETCH_ASSOC);

            return $review;
        } catch (PDOException $e) {
            error_log("Error retrieving review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Updates a review by its ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $userRating The new user rating.
     * @param string $comment The new review comment.
     * @return bool  True if successful, false otherwise.
     */
    public function updateReview(int $reviewId, string $userRating, string $comment)
    {
        try {
            $sql = "UPDATE reviews SET user_rating = :user_rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':user_rating', $userRating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool  True if successful, false otherwise.
     */
    public function deleteReview(int $reviewId)
    {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Retrieves all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array  An array of associative arrays, each representing a review.
     */
    public function getReviewsForProduct(int $productId)
    {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews for product: " . $e->getMessage());
            return [];
        }
    }
}



// Example Usage (Assuming you have a database connection object $db)

// Create a database connection (replace with your actual credentials)
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $db = new PDO($dsn, $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $review = new UserReview($db);

    // Create a review
    $newReviewId = $review->createReview(1, "5-star", "Great product!");
    if ($newReviewId) {
        echo "New review created with ID: " . $newReviewId . "<br>";
    } else {
        echo "Failed to create review.<br>";
    }

    // Get a review by ID
    $review = $review->getReview(1);
    if ($review) {
        echo "Review: " . $review['user_rating'] . " - " . $review['comment'] . "<br>";
    } else {
        echo "Review not found.<br>";
    }

    // Get reviews for product ID 1
    $reviews = $review->getReviewsForProduct(1);
    echo "Reviews for product 1:<br>";
    foreach ($reviews as $review) {
        echo "  " . $review['user_rating'] . " - " . $review['comment'] . "<br>";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes input validation and sanitization to prevent common vulnerabilities.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The user's review text.
 * @param int $rating  The rating given by the reviewer (1-5).
 * @return array|false  An array containing the review details on success, or false on failure.
 */
function createReview(string $productName, string $reviewerName, string $reviewText, int $rating) {
  // Input Validation
  if (empty($productName)) {
    return false; // Product name cannot be empty
  }

  if (empty($reviewerName)) {
    return false; // Reviewer name cannot be empty
  }

  if (empty($reviewText)) {
    return false; // Review text cannot be empty
  }

  if ($rating < 1 || $rating > 5) {
    return false; // Rating must be between 1 and 5
  }

  // Sanitize Input - IMPORTANT for security
  $productName = trim($productName);  // Remove leading/trailing whitespace
  $productName = htmlspecialchars($productName); // Prevents XSS attacks
  $reviewerName = trim($reviewerName);
  $reviewerName = htmlspecialchars($reviewerName);
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText);


  // Store Review (Replace this with your database logic)
  // This is a placeholder - adapt to your database setup
  $review = [
    'product_name' => $productName,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'date' => date('Y-m-d H:i:s') // Add timestamp for tracking
  ];

  // Example:  Write to a simple file (for demonstration only)
  $file = 'reviews.txt';
  $reviewString = $file . "
" . json_encode($review) . "
";
  file_put_contents($file, $reviewString, FILE_APPEND);


  return $review; // Return the review data
}


// --- Example Usage ---
$product = "Awesome Gadget";
$user = "John Doe";
$comment = "This is a fantastic gadget!  I highly recommend it.";
$rating = 4;

$reviewResult = createReview($product, $user, $comment, $rating);

if ($reviewResult !== false) {
  echo "Review created successfully!  Review Data: " . json_encode($reviewResult) . "
";
} else {
  echo "Error creating review. Please check your input.
";
}



// Example with invalid input:
$reviewResult = createReview("", "Jane Doe", "Invalid review", 3); // Empty product name
if ($reviewResult === false) {
    echo "Invalid input detected!
";
}
?>


<?php

/**
 * User Review Function - Allows users to submit and display reviews.
 *
 * This function provides a basic interface for submitting and viewing user reviews.
 * It includes input validation and simple display formatting.
 *
 * @param array $reviews An array to store user reviews.  Defaults to an empty array.
 * @param string $username The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @return array The updated array of reviews.
 */
function submitUserReview(array &$reviews, string $username, string $reviewText) {

  // Input validation - very basic for demonstration.  Enhance this for production.
  if (empty($reviewText)) {
    echo "Error: Review text cannot be empty.
";
    return $reviews;
  }

  // Format the review
  $formattedReview = "User: $username - Review: $reviewText";

  // Add the review to the array
  $reviews[] = $formattedReview;

  return $reviews;
}


/**
 * Displays all user reviews.
 *
 * This function iterates through the review array and prints each review.
 *
 * @param array $reviews An array of user reviews.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews:</h2>
";
  if (empty($reviews)) {
    echo "<p>No reviews submitted yet.</p>
";
    return;
  }
  echo "<ul>
";
  foreach ($reviews as $review) {
    echo "  <li>$review</li>
";
  }
  echo "</ul>
";
}


// Example Usage:
$review_data = []; // Initialize an empty array to store reviews

// Submit some reviews
submitUserReview($review_data, "Alice", "This product is amazing!");
submitUserReview($review_data, "Bob", "I'm very happy with my purchase.");
submitUserReview($review_data, "Charlie", "It's okay, could be better.");
submitUserReview($review_data, "David", "Excellent value for money!");


// Display the reviews
displayReviews($review_data);


//Demonstration of input validation
submitUserReview($review_data, "Eve", ""); // Attempt to submit an empty review
displayReviews($review_data); // Display the reviews after the invalid attempt
?>


<?php

/**
 *  A User Review Function
 *
 *  This function allows you to store and display user reviews for a product or service.
 *
 *  @param string $productId The unique identifier for the product or service.
 *  @param string $reviewerName The name of the reviewer.
 *  @param string $reviewText The text of the review.
 *  @param int $rating (optional) A rating from 1 to 5, or null if no rating is provided.
 *  @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $productId, string $reviewerName, string $reviewText, ?int $rating = null): bool
{
    // Validation - Add more robust validation as needed.
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }
    if (empty($reviewerName)) {
        error_log("Error: Reviewer Name cannot be empty.");
        return false;
    }
    if (empty($reviewText)) {
        error_log("Error: Review Text cannot be empty.");
        return false;
    }

    // Data sanitization -  Important for security
    $reviewerName = htmlspecialchars($reviewerName);
    $reviewText = htmlspecialchars($reviewText);

    //  Database interaction -  Replace with your database connection and query logic.
    //  This is a simplified example.

    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your DB details

    try {
        $stmt = $db->prepare("INSERT INTO reviews (productId, reviewerName, reviewText, rating) VALUES (:productId, :reviewerName, :reviewText, :rating)");
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewerName', $reviewerName);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', $rating, PDO::PARAM_INT); // Ensure rating is an integer
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $productId): array
{
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");  // Replace with your DB details
    $reviews = [];

    try {
        $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = :productId");
        $stmt->bindParam(':productId', $productId);
        $stmt->execute();

        while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
            $reviews[] = (object) [
                'id' => $row->id,
                'productId' => $row->productId,
                'reviewerName' => $row->reviewerName,
                'reviewText' => $row->reviewText,
                'rating' => $row->rating,
                'createdAt' => $row->createdAt // Assuming you have a createdAt column
            ];
        }

        return $reviews;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}



// Example Usage (Remember to replace placeholders with your actual data and database details)
//  This is just for demonstration.
$productId = "product123"; // Example product ID

// Save a review
if (saveUserReview($productId, "John Doe", "This is a great product!", 5)) {
    echo "Review saved successfully!
";
} else {
    echo "Error saving review.
";
}

// Get reviews for the product
$reviews = getReviewsForProduct($productId);

if (empty($reviews)) {
    echo "No reviews found for product $productId.
";
} else {
    echo "Reviews for product $productId:
";
    foreach ($reviews as $review) {
        echo "- " . $review->reviewerName . ": " . $review->reviewText . " (" . $review->rating . ")
";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides a basic framework and can be customized further.
 */

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date_created;

    /**
     * Constructor
     *
     * Initializes a new Review object.
     *
     * @param int $user_id The ID of the user who wrote the review.
     * @param int $product_id The ID of the product the review is for.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($user_id, $product_id, $rating, $comment)
    {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_created = date("Y-m-d H:i:s"); // Get current timestamp
    }


    /**
     * Getters
     */
    public function getId() {
        return $this->id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function getProduct_id() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate_created() {
        return $this->date_created;
    }

    /**
     * Setters
     */
    public function setId($id) {
        $this->id = $id;
    }

    public function setDate_created($date_created) {
        $this->date_created = $date_created;
    }

}


/**
 * User Review Function - Example Usage &  Some Basic Functions
 */
class ReviewManager {

    private $reviews = [];  // Store reviews (for simplicity)

    /**
     * Add a review
     *
     * @param Review $review
     */
    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    /**
     * Get all reviews for a product
     *
     * @param int $product_id
     * @return array An array of Review objects.
     */
    public function getReviewsByProduct($product_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getProduct_id() == $product_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    /**
     *  (Simplified) Update a review - in a real system, you'd likely want more robust validation.
     * @param Review $review
     */
    public function updateReview(Review $review) {
        // In a real application, you'd likely check for existing reviews
        // and perform validation before updating.
        foreach($this->reviews as $r) {
            if($r->getId() == $review->getId()) {
                $r->setDate_created(date("Y-m-d H:i:s")); // Update timestamp
                return true;
            }
        }
        return false; // Not found
    }

    /**
     * Delete a review
     *
     * @param int $id
     * @return bool True if successful, false otherwise.
     */
    public function deleteReview($id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}

// Example Usage:
$reviewManager = new ReviewManager();

// Create a review
$review1 = new Review(123, 456, 5, "Great product! I highly recommend it.");
$reviewManager->addReview($review1);

$review2 = new Review(456, 456, 4, "Good value for the price.");
$reviewManager->addReview($review2);


// Get reviews for product 456
$reviewsForProduct = $reviewManager->getReviewsByProduct(456);
echo "Reviews for product 456:
";
foreach ($reviewsForProduct as $review) {
    echo "  User ID: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}

// Update a review
$reviewManager->updateReview($review1);

// Delete a review
$reviewManager->deleteReview($review1->getId());

// Try to get the deleted review
$reviewsForProduct = $reviewManager->getReviewsByProduct(456);
echo "Reviews for product 456 after deletion:
";
foreach ($reviewsForProduct as $review) {
    echo "  User ID: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function creates a review object with details like user, rating, and review text.
 * It also provides basic validation to ensure data is provided and in a reasonable format.
 *
 * @param string $username The username of the reviewer.
 * @param int    $rating   The rating given (1-5).
 * @param string $reviewText The user's review text.
 *
 * @return array|false Returns an associative array representing the review 
 *                      on success, or false on failure.
 */
function createReview(string $username, int $rating, string $reviewText): array|false
{
    // Validate inputs
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating'   => $rating,
        'review'   => $reviewText,
        'date'     => date("Y-m-d H:i:s"), // Add a timestamp for tracking
    ];

    return $review;
}


// Example Usage:
$review1 = createReview("JohnDoe", 5, "Excellent product! Highly recommended.");
if ($review1) {
    echo "Review 1:
";
    print_r($review1);
    // You would typically save this review to a database here.
} else {
    echo "Review 1 creation failed.
";
}

$review2 = createReview("JaneSmith", 3, "It was okay.  Nothing special.");
if ($review2) {
    echo "
Review 2:
";
    print_r($review2);
} else {
    echo "
Review 2 creation failed.
";
}

$review3 = createReview("", 4, "Good!");  // Example with invalid input
if ($review3) {
    echo "
Review 3:
";
    print_r($review3);
} else {
    echo "
Review 3 creation failed (as expected).
";
}


?>


//Example of saving to a database (simplified - error handling and full sanitation would be needed in a real application)
$review = createReview("AliceWonderland", 4, "Fantastic product, I love it!");
if ($review) {
    // Connect to your database
    $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (username, rating, review) VALUES (:username, :rating, :review)");

    // Bind the parameters
    $stmt->bindParam(':username', $review['username']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':review', $review['review']);

    // Execute the statement
    if ($stmt->execute()) {
        echo "Review saved to database!
";
    } else {
        echo "Error saving review to database.
";
    }
    $db = null; // Close the connection
}


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $reviewer_name The name of the reviewer.
 * @param string $review_text The text of the review.
 * @param array  $validation_rules An array of validation rules (e.g., ['name' => 'required', 'text' => 'required']).
 *                                 Defaults to required validation for both name and text.
 * @return array|string An array containing success/error messages, or a string message if there was an error.
 */
function submit_review(string $product_id, string $reviewer_name, string $review_text, array $validation_rules = []) {
  // Default validation rules if none are provided.
  $validation_rules = $validation_rules + [
    'name' => 'required',
    'text' => 'required'
  ];


  // Validation
  $errors = [];

  if (!empty($validation_rules['name']) && empty($reviewer_name)) {
    $errors['name'] = 'Reviewer name is required.';
  }
  if (!empty($validation_rules['text']) && empty($review_text)) {
    $errors['text'] = 'Review text is required.';
  }

  // Sanitization - Basic.  Consider more robust sanitization for production.
  $reviewer_name = trim($reviewer_name);
  $review_text = trim($review_text);


  // Check for empty strings after trimming.  This is important.
  if (empty($reviewer_name)) {
      $errors['name'] = 'Reviewer name cannot be empty.';
  }
  if (empty($review_text)) {
    $errors['text'] = 'Review text cannot be empty.';
  }



  // If there are no errors, save the review (simulated here).
  if (empty($errors)) {
    // In a real application, you would save this to a database.
    // For demonstration, we'll just return a success message.

    // Simulate database saving
    $saved = true;
    return ['success' => 'Review submitted successfully!'];
  } else {
    // Return the error messages
    return ['errors' => $errors];
  }
}


// **Example Usage**
// 1. Successful Submission
$result = submit_review('product_123', 'John Doe', 'This is a great product!');
print_r($result);
// Output: Array ( [success] => Review submitted successfully! )

// 2. Submission with Errors
$result = submit_review('product_456', '', 'Write a review...');
print_r($result);
// Output: Array ( [errors] => Array ( [text] => Review text cannot be empty. ) )

// 3. Submission with custom validation rules
$result = submit_review('product_789', 'Jane Smith', 'Excellent service!', ['name' => 'required', 'text' => 'max:200']);
print_r($result);
//Output: Array ( [success] => Review submitted successfully! )


// 4.  Empty string name submission
$result = submit_review('product_999', '', 'This is a great product!');
print_r($result);
// Output: Array ( [errors] => Array ( [name] => Reviewer name is required. ) )
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $user_data An associative array containing user data like username and email (optional).
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the status of the review (success or error).
 *   - 'review': The submitted review text.
 */
function submit_review(string $productName, string $reviewText, array $user_data = []) {
  // Input validation - Basic checks to prevent vulnerabilities
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => $reviewText];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => $reviewText];
  }

  //  More robust validation could be added here, such as:
  //  - Checking review length
  //  - Sanitizing the review text to prevent XSS attacks

  // Store the review - Replace this with your actual database logic
  // This is a placeholder - You'll need to connect to your database
  // and use your database credentials.
  $review_id = generate_unique_id(); // Generates a unique ID for the review
  $timestamp = date("Y-m-d H:i:s");
  $stored_review = [
    'review_id' => $review_id,
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_name' => isset($user_data['username']) ? $user_data['username'] : 'Anonymous',
    'timestamp' => $timestamp,
  ];


  //  Example:  Store to a simple array for demonstration purposes.
  //  In a real application, you'd use a database.
  //  $reviews[] = $stored_review;



  //  Success
  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $reviewText];
}


/**
 * Generates a unique ID for a review.  This is a simplified example.
 *  In a production environment, use a more robust ID generation method (UUID, etc.)
 *
 * @return string  A unique ID.
 */
function generate_unique_id() {
    return uniqid();
}



// --- Example Usage ---

// Example 1: Successful submission
$result = submit_review('Awesome T-Shirt', 'This shirt is fantastic! Great quality and fit.');
print_r($result);

// Example 2:  Empty product name
$result = submit_review('', 'A good review');
print_r($result);

// Example 3:  Empty review text
$result = submit_review('Cool Gadget', '');
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The content of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $db_connection A valid database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully saved, false otherwise.
 *   - 'message': A message indicating the result of the operation (e.g., 'Review saved', 'Error saving review').
 *   - 'review_id': The ID of the newly created review (if successful).
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating, object $db_connection) {
  // Validate inputs (basic example - enhance for production)
  if (empty($product_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Invalid input. Please check your review details.',
    ];
  }

  // Prepare SQL statement (use prepared statements for security!)
  $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating) 
          VALUES (?, ?, ?, ?)";

  // Use prepared statement to prevent SQL injection
  $stmt = $db_connection->prepare($sql);
  $stmt->bind_param("ssis", $product_id, $user_name, $review_text, $rating);  //Correctly using string type
  $result = $stmt->execute();

  // Check if the query executed successfully
  if ($result) {
    // Get the last inserted ID
    $review_id = $db_connection->insert_id;

    return [
      'success' => true,
      'message' => 'Review saved successfully!',
      'review_id' => $review_id,
    ];
  } else {
    // Handle database errors
    $error_info = $stmt->error;
    return [
      'success' => false,
      'message' => 'Error saving review: ' . $error_info,
    ];
  }

  // Close the statement (important!)
  $stmt->close();
}



/**
 * Display User Reviews
 *
 * Retrieves and displays all user reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param object $db_connection A valid database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews found.
 */
function get_product_reviews(string $product_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db_connection->prepare($sql);
    $stmt->bind_param("s", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


// Example Usage (assuming you have a database connection $conn)

//Create a dummy DB connection (replace with your real connection)
class DummyDBConnection {}
$conn = new DummyDBConnection();  //This is a placeholder
$conn->query("CREATE TABLE IF NOT EXISTS reviews (id INT AUTO_INCREMENT PRIMARY KEY, product_id VARCHAR(255) NOT NULL, user_name VARCHAR(255) NOT NULL, review_text TEXT, rating INT)");

// Save a review
$review_result = save_user_review('product123', 'John Doe', 'Great product!', 5, $conn);

if ($review_result['success']) {
  echo "Review saved! Review ID: " . $review_result['review_id'] . "<br>";
} else {
  echo "Error saving review: " . $review_result['message'] . "<br>";
}

//Get all reviews for product123
$reviews = get_product_reviews('product123', $conn);

echo "<h3>Reviews for product123:</h3>";
if (empty($reviews)) {
    echo "<p>No reviews found.</p>";
} else {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>User:</strong> " . $review['user_name'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
}

// Clean up (important for development - remove in production)
$conn->query("DROP TABLE IF EXISTS reviews");

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to create, store, and display user reviews.
 */
class Review
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review text.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $reviewerName, string $comment)
    {
        try {
            $sql = "INSERT INTO reviews (product_id, reviewer_name, comment) 
                     VALUES (:product_id, :reviewer_name, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $this->db->lastInsertId(); // Returns the ID of the newly inserted review
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId)
    {
        try {
            $sql = "SELECT id, reviewer_name, comment, rating FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = new ReviewObject($row); // Create ReviewObject from the fetched row
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     * @return ReviewObject|null A ReviewObject if found, or null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        try {
            $sql = "SELECT id, reviewer_name, comment, rating FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($row) {
                return new ReviewObject($row);
            }

            return null;
        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return null;
        }
    }


     /**
     * Update an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $reviewerName The new name of the reviewer.
     * @param string $comment The new review text.
     * @param int $rating The new rating for the review.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $reviewerName, string $comment, int $rating)
    {
        try {
            $sql = "UPDATE reviews SET reviewer_name = :reviewer_name, comment = :comment, rating = :rating WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);

            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


/**
 * ReviewObject Class
 * Represents a single review.
 */
class ReviewObject
{
    public int $id;
    public string $reviewer_name;
    public string $comment;
    public int $rating;

    /**
     * ReviewObject Constructor
     *
     * Initializes a ReviewObject from a PDO row.
     *
     * @param array $row  The fetched row from the database.
     */
    public function __construct(array $row)
    {
        $this->id = $row['id'];
        $this->reviewer_name = $row['reviewer_name'];
        $this->comment = $row['comment'];
        $this->rating = $row['rating'];
    }
}
?>


<?php
// ... (Code from above - Review class and ReviewObject) ...

// Example Usage:
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$review = new Review($db);

// Create a review
$productId = 1;
$reviewer = 'John Doe';
$comment = 'Great product!';
$newReviewId = $review->createReview($productId, $reviewer, $comment);

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get reviews for product 1
$reviews = $review->getReviewsByProduct(1);

foreach ($reviews as $review) {
    echo "Reviewer: " . $review->reviewer_name . ", Comment: " . $review->comment . ", Rating: " . $review->rating . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment about the product.
 * @param array $reviews (Optional) -  An array of existing reviews for this product.
 *
 * @return array  An updated array of reviews including the new review.
 */
function createAndManageReviews(string $productName, string $userId, string $rating, string $comment, array &$reviews = []): array
{
  // Input validation -  Important for security and data integrity
  if (empty($productName)) {
    return $reviews; // Return empty array if product name is empty
  }

  if (empty($userId)) {
    return $reviews; // Return empty array if user ID is empty
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return $reviews; // Return empty array if rating is invalid
  }

  if (empty($comment)) {
      return $reviews; // Return empty array if comment is empty
  }

  // Add the new review
  $newReview = [
    'userId' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add timestamp for tracking
  ];
  $reviews[] = $newReview;

  // Sort reviews by timestamp (newest first) - optional but useful
  usort($reviews, function ($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return $reviews;
}

// Example Usage:

// Initialize an empty array of reviews
$productReviews = [];

// Create a new review
$updatedReviews = createAndManageReviews('Awesome Gadget', 'user123', 4, 'This gadget is fantastic! I love it.', $productReviews);

// Display the updated reviews
echo "<h2>Reviews for Awesome Gadget:</h2>";
echo "<ul>";
foreach ($updatedReviews as $review) {
  echo "<li><strong>User:</strong> " . htmlspecialchars($review['userId']) . "<br>";
  echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
  echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
  echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
}
echo "</ul>";


// Another example:
$productReviews2 = [];
$updatedReviews2 = createAndManageReviews('Another Product', 'user456', 5, 'Great product, highly recommended!', $productReviews2);

echo "<h2>Reviews for Another Product:</h2>";
echo "<ul>";
foreach ($updatedReviews2 as $review) {
  echo "<li><strong>User:</strong> " . htmlspecialchars($review['userId']) . "<br>";
  echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
  echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
  echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
}
echo "</ul>";



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic validation and saving of the review to a file (for simplicity).
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $reviewerName The name of the reviewer (optional).
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName = '') {
  // Basic validation
  if (empty($reviewText)) {
    error_log("Empty review text submitted for product ID: $productId");
    return false;
  }

  // Sanitize and escape the review text to prevent XSS vulnerabilities
  $sanitizedReview = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

  // Create the review data
  $reviewData = [
    'productId' => $productId,
    'reviewText' => $sanitizedReview,
    'reviewerName' => $reviewerName,
    'timestamp' => date('Y-m-d H:i:s') // Add a timestamp for reference
  ];

  // Save the review to a file (for demonstration purposes only - use a database for production)
  $filename = 'reviews_' . $productId . '.txt';
  $reviewString = json_encode($reviewData) . PHP_EOL; // Add a newline for clarity

  if (file_put_contents($filename, $reviewString, FILE_APPEND) !== false) {
    // Log success
    error_log("Review submitted for product ID: $productId by $reviewerName: $sanitizedReview");
    return true;
  } else {
    // Log error
    error_log("Failed to save review for product ID: $productId");
    return false;
  }
}


/**
 * Display Reviews for a Product
 *
 * This function reads reviews from a file and displays them.
 *
 * @param string $productId The ID of the product or service.
 *
 * @return void Displays the reviews on the screen.
 */
function displayReviews(string $productId) {
    $filename = 'reviews_' . $productId . '.txt';

    if (file_exists($filename)) {
        echo "<h2>Reviews for Product ID: $productId</h2>";
        echo "<ol>";

        // Read and display the reviews
        $lines = file($filename, FILE_IGNORE_NEW_LINES);
        foreach ($lines as $line) {
            echo "<li>$line</li>";
        }

        echo "</ol>";
    } else {
        echo "<p>No reviews found for product ID: $productId</p>";
    }
}


// Example Usage (Demonstration)
//  This section demonstrates how to use the functions.  You would typically
//  integrate these into a web application's routing and form handling.

// Form submission (Simulated)
if (isset($_POST['submitReview'])) {
    $productId = $_POST['productId'];
    $reviewText = $_POST['reviewText'];
    $reviewerName = isset($_POST['reviewerName']) ? $_POST['reviewerName'] : '';

    if (submitReview($productId, $reviewText, $reviewerName)) {
        echo "<p>Review submitted successfully!</p>";
    } else {
        echo "<p>Error submitting review.</p>";
    }
}

// Displaying Reviews (Example)
// You'd typically call this function after a review has been submitted.
//displayReviews('product123'); // Replace 'product123' with an actual product ID
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a specific product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return array  An array containing the result of the operation.  Returns an empty array on failure.
 */
function createReview(string $productId, string $username, string $rating, string $comment)
{
    // Input Validation (Important for security and data integrity)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return []; // Return empty array for invalid input
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return []; // Invalid rating
    }

    //  Database Connection (Replace with your actual connection details)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement to prevent SQL injection
        $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) 
                             VALUES (:product_id, :username, :rating, :comment)");

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        return ['success' => true, 'message' => 'Review created successfully!'];

    } catch (PDOException $e) {
        // Handle database errors
        return ['success' => false, 'message' => 'Error creating review: ' . $e->getMessage()];
    }
}


/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 *
 * @return array An array containing the reviews.  Returns an empty array if no reviews are found.
 */
function getReviews(string $productId)
{
    // Database Connection (Replace with your actual connection details)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement
        $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        // Fetch all results
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $reviews;

    } catch (PDOException $e) {
        // Handle database errors
        return [];
    }
}


/**
 * Update a Review
 *
 * Updates an existing review.
 *
 * @param int $reviewId The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 *
 * @return array An array containing the result of the operation.
 */
function updateReview(int $reviewId, string $rating, string $comment)
{
    // Database Connection
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();

        return ['success' => true, 'message' => 'Review updated successfully!'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error updating review: ' . $e->getMessage()];
    }
}

/**
 * Delete a Review
 *
 * Deletes a review.
 *
 * @param int $reviewId The ID of the review to delete.
 *
 * @return array An array containing the result of the operation.
 */
function deleteReview(int $reviewId)
{
    // Database Connection
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        return ['success' => true, 'message' => 'Review deleted successfully!'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error deleting review: ' . $e->getMessage()];
    }
}
?>


// Example Usage:

// Create a review
$result = createReview("123", "john_doe", "5", "Great product!");

if ($result['success']) {
    echo "Review created: " . $result['message'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}

// Get reviews for product ID 123
$reviews = getReviews("123");

if (count($reviews) > 0) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "- " . $review['username'] . ": " . $review['rating'] . " - " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123
";
}

// Update a review (example)
$updateResult = updateReview(1, 4, "Improved rating");

if ($updateResult['success']) {
  echo "Review updated: " . $updateResult['message'] . "
";
}
else
{
    echo "Error updating review: " . $updateResult['message'] . "
";
}

// Delete a review (example)
$deleteResult = deleteReview(1);

if ($deleteResult['success']) {
  echo "Review deleted: " . $deleteResult['message'] . "
";
}
else
{
    echo "Error deleting review: " . $deleteResult['message'] . "
";
}


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional, auto-incrementing ID)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     * Setters (Use with caution - validate data)
     */
    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            throw new Exception("Rating must be between 1 and 5.");
        }
    }

    // Add setters for other properties as needed.  Validate data!
}


/**
 * User Review Review Function
 */
function reviewUserReview($review) {
  // This function is designed to provide a simple review of a UserReview object.
  // You can extend this to include more sophisticated validation and output formatting.

  // Validate the review object
  if (!is_object($review) || !($review instanceof UserReview)) {
    throw new Exception("Invalid review object. Must be an instance of UserReview.");
  }

  $userId = $review->getUserId();
  $rating = $review->getRating();
  $comment = $review->getComment();
  $productId = $review->getProductId();

  // Basic validation - improve this!
  if (empty($comment)) {
    throw new Exception("Comment cannot be empty.");
  }

  // Construct a review string
  $reviewString = "Review ID: " . ($review->getReviewId() ? $review->getReviewId() : "N/A") . "
" .
                  "User ID: " . $userId . "
" .
                  "Product ID: " . $productId . "
" .
                  "Rating: " . $rating . "
" .
                  "Comment: " . $comment . "
" .
                  "Date: " . $review->getDate();


  return $reviewString;
}



// --- Example Usage ---

// Create a review object
$review = new UserReview(null, 123, 456, 5, "This product is amazing!");

try {
    // Review the review
    $reviewString = reviewUserReview($review);
    echo $reviewString . PHP_EOL; // Output the review
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . PHP_EOL;
}


// Example of invalid review (empty comment)
$review2 = new UserReview(null, 456, 789, 3, "");

try {
    $reviewString = reviewUserReview($review2);
    echo $reviewString . PHP_EOL;
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . PHP_EOL; // Output: Error: Comment cannot be empty.
}


?>


<?php

/**
 *  User Review Function
 *
 *  This function takes a user ID, a product ID, and a review text,
 *  and saves the review to a database.
 *
 *  @param int $userId The ID of the user submitting the review.
 *  @param int $productId The ID of the product being reviewed.
 *  @param string $reviewText The text of the review.
 *  @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Database connection details - Replace with your actual credentials
    $dbHost = 'localhost';
    $dbName = 'your_database_name';
    $dbUser = 'your_database_user';
    $dbPassword = 'your_database_password';

    try {
        // Create a PDO database connection
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);

        // Set the PDO error mode to exception (to catch errors)
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, review_text, created_at) VALUES (?, ?, ?, NOW())");

        // Bind the parameters
        $stmt->bindParam(1, $userId);
        $stmt->bindParam(2, $productId);
        $stmt->bindParam(3, $reviewText);

        // Execute the statement
        $stmt->execute();

        return true;  // Review saved successfully

    } catch (PDOException $e) {
        // Handle database errors - Log the error for debugging
        error_log("Database error: " . $e->getMessage());
        return false;  // Review not saved (due to error)
    }
}

// --- Example Usage ---

// Get user input (simulated)
$userId = 123;
$productId = 456;
$reviewText = "This is a fantastic product!  I highly recommend it.";

// Save the review
$success = saveUserReview($userId, $productId, $reviewText);

if ($success) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save the review.  Please try again.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item. It provides a basic framework and can be
 * customized further based on your specific needs.
 *
 * @param string $productId The ID of the product or item being reviewed.
 * @param string $username  The username of the user submitting the review.
 * @param string $comment  The text of the review comment.
 * @param int    $rating   The rating (e.g., 1-5).
 * @param array $dbConnection  (Optional)  A database connection object.
 *                           If not provided, it will attempt to connect using a default configuration.
 * @return array  An array containing the result of the operation (success/failure, and optionally data).
 */
function createReview(
    string $productId,
    string $username,
    string $comment,
    int    $rating,
    $dbConnection = null
) {
    // Default database connection configuration
    $dbConfig = [
        'host' => 'localhost',
        'user' => 'your_db_user',
        'password' => 'your_db_password',
        'dbname' => 'your_db_name'
    ];

    // Use provided connection or create a new one
    if ($dbConnection === null) {
        try {
            $dbConnection = new PDO(
                "mysql:host={$dbConfig['host']};dbname={$dbConfig['dbname']}",
                $dbConfig['user'],
                $dbConfig['password']
            );
            $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Throw exceptions on errors
        } catch (PDOException $e) {
            return ['success' => false, 'message' => 'Database connection error: ' . $e->getMessage()];
        }
    }

    // Sanitize input - Important for security
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT);  // Validate rating as an integer

    if ($rating === false || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be an integer between 1 and 5.'];
    }


    // Prepare the SQL statement (using prepared statements for security)
    $sql = "INSERT INTO reviews (product_id, username, comment, rating) VALUES (:product_id, :username, :comment, :rating)";
    $stmt = $dbConnection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    try {
        $stmt->execute();
        return ['success' => true, 'message' => 'Review created successfully.'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Example Usage (Illustrative - Replace with your actual database setup and table structure)
 */

// Example usage:
$result = createReview(
    '123', // Product ID
    'john.doe', // User Name
    'This is a great product!', // Comment
    4, // Rating
    null // Let it use the default DB connection
);

if ($result['success']) {
    echo "Review created: " . $result['message'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}

//To retrieve reviews (example - needs a SELECT query and proper display logic)
// You would typically use a SELECT query to retrieve reviews.
// Example SELECT query (placeholder):
/*
$sql = "SELECT * FROM reviews WHERE product_id = :product_id";
$stmt = $dbConnection->prepare($sql);
$stmt->bindParam(':product_id', '123');
$stmt->execute();

$reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "Product ID: " . $review['product_id'] . "
";
        echo "Username: " . $review['username'] . "
";
        echo "Comment: " . $review['comment'] . "
";
        echo "Rating: " . $review['rating'] . "
";
        echo "---
";
    }
} else {
    echo "No reviews found for this product.
";
}
*/

?>


<?php

/**
 * User Review Class
 * 
 * This class allows users to submit and view reviews for a product or service.
 * 
 * @author Your Name
 * @version 1.0
 */
class UserReview {

    /**
     * @var array Reviews array
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review text.
     * @return bool True if the review was successfully added, false otherwise.
     */
    public function addReview(string $username, string $comment) {
        if (empty($username) || empty($comment)) {
            return false; // Invalid input
        }
        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product/service (implementation placeholder).
     * 
     *  This function can be expanded with database integration or filtering logic.
     *
     * @param string $productName The name of the product/service.
     * @return array  An array of review objects for the specified product.  Returns empty array if not found.
     */
    public function getReviewsByProduct(string $productName) {
        // Placeholder for database integration or other filtering
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if (strpos($review['comment'], $productName) !== false) { //Simple string match
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Calculates the average rating.
     *  
     * @return float|null Average rating (if reviews exist) or null if no reviews.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $numReviews = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $rating = $review['rating'];
            if (is_numeric($rating)) { //Validate that rating is a number
                $totalRating += $rating;
            } else {
                //Handle invalid rating values, maybe log an error or skip
                continue; 
            }
        }
        return $totalRating / $numReviews;
    }
}


// Example Usage:

// Create a review object
$reviewObject = new UserReview();

// Add some reviews
$reviewObject->addReview('JohnDoe', 'Great product, highly recommended!');
$reviewObject->addReview('JaneSmith', 'Good value for money.');
$reviewObject->addReview('PeterJones', 'Needs some improvements.');
$reviewObject->addReview('AliceBrown', 'Excellent customer service.');


// Get all reviews
$allReviews = $reviewObject->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<hr>";
}

// Get reviews for a specific product (e.g., "Laptop")
$laptopReviews = $reviewObject->getReviewsByProduct("Laptop");

echo "<h2>Reviews for Laptop:</h2>";
if (empty($laptopReviews)) {
    echo "<p>No reviews found for Laptop.</p>";
} else {
    foreach ($laptopReviews as $review) {
        echo "<strong>Username:</strong> " . $review['username'] . "<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
        echo "<hr>";
    }
}

// Calculate the average rating
$averageRating = $reviewObject->getAverageRating();
echo "<h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "<p>Average Rating: " . $averageRating . "</p>";
} else {
    echo "<p>No reviews yet to calculate an average rating.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process user reviews, sanitize input,
 * and store them in a database (or other storage mechanism).
 *
 * @param string $username The user submitting the review.
 * @param string $reviewText The text of the review.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $itemId The ID of the item the review is for.
 * @param string $databaseConnection A database connection object (e.g., mysqli).
 *
 * @return bool True on success, false on failure.
 */
function processUserReview(string $username, string $reviewText, string $rating, string $itemId, $databaseConnection)
{
    // **Input Validation & Sanitization - VERY IMPORTANT**
    // Prevent SQL injection and other vulnerabilities.

    // 1. Validate the rating
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return false;
    }

    // 2. Sanitize the review text (Escape special characters)
    $reviewText = htmlspecialchars($reviewText);

    // **Database Interaction**
    try {
        // Prepare the SQL statement to prevent SQL injection.
        $sql = "INSERT INTO reviews (user_name, review_text, rating, item_id)
                VALUES (?, ?, ?, ?)";

        // Use prepared statements for security.
        $stmt = $databaseConnection->prepare($sql);

        if ($stmt === false) {
            throw new Exception("Error preparing statement.");
        }

        $stmt->bind_param("sss", $username, $reviewText, $rating);

        if (!$stmt->execute()) {
            throw new Exception("Error executing statement: " . $stmt->error);
        }

        $stmt->close();  // Important to close the statement
        return true;

    } catch (Exception $e) {
        error_log("Error processing review: " . $e->getMessage());
        return false;
    }
}


// **Example Usage (Illustrative - Replace with your actual database connection)**
//  --- DO NOT USE THIS DIRECTLY - MODIFY TO FIT YOUR SETUP ---

/*
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

$connection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}


$username = "JohnDoe";
$reviewText = "This product is amazing!  I love it.";
$rating = 4;
$itemId = 123;

if (processUserReview($username, $reviewText, $rating, $itemId, $connection)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

$connection->close(); // Close the database connection
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $productName The name of the product.
 * @param array $reviews An array of review objects.  Each object should have 'user', 'rating' (1-5), and 'comment' properties.
 * @return string HTML formatted review display.
 */
function displayUserReviews(string $productId, string $productName, array $reviews)
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class='reviews'>";
    $html .= "<h2>Reviews for {$productName} (ID: {$productId})</h2>";
    $html .= "<ul class='review-list'>";

    foreach ($reviews as $review) {
        $html .= "<li class='review-item'>";
        $html .= "<div class='review-header'>";
        $html .= "<span class='user'>User: {$review['user']}</span>";
        $html .= "<span class='rating'>Rating: {$review['rating']}</span>";
        $html .= "</div>";
        $html .= "<p class='review-text'>{$review['comment']}</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


// Example Usage (Simulated Reviews)
$productID = '123';
$productName = 'Awesome Widget';
$reviews = [
    [
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'This widget is fantastic!  It exceeded my expectations.'
    ],
    [
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Good quality, but a bit pricey.'
    ],
    [
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It does the job, nothing special.'
    ]
];

// Display the reviews
$reviewHTML = displayUserReviews($productID, $productName, $reviews);

// Output the HTML (you would typically output this to your web page)
echo $reviewHTML;

?>


   <?php include 'review_function.php'; ?>
   
3. **Pass Data:**  In your view, create a variable containing the necessary data (product ID, product name, and the reviews array) that you'll pass to the `displayUserReviews` function.
4. **Call the Function:** Call the function, and then output the returned HTML.

**Example (with a simple HTML template):**



<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a given item or product.
 * It includes basic input validation and handles display of reviews.
 */
class UserReviewFunction
{
    private $reviews = [];

    /**
     * Adds a new review to the collection.
     *
     * @param string $name The reviewer's name.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., if input is invalid).
     */
    public function addReview(string $name, string $comment): bool
    {
        // Input Validation (Important for security and data integrity)
        if (empty($name)) {
            error_log("Invalid review: Missing reviewer name.");
            return false;
        }
        if (empty($comment)) {
            error_log("Invalid review: Missing comment.");
            return false;
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date("Y-m-d H:i:s") // Add a timestamp for record keeping
        ];

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void  Displays the reviews to the browser.
     */
    public function displayReviews(): void
    {
        echo "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
        } else {
            echo "<ul>";
            foreach ($this->getAllReviews() as $review) {
                echo "<li><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . "</li>";
            }
            echo "</ul>";
        }
    }
}

// Example Usage:
// Create an instance of the UserReviewFunction class
$reviewFunction = new UserReviewFunction();

// Add some reviews
$reviewFunction->addReview("Alice", "Great product!  I highly recommend it.");
$reviewFunction->addReview("Bob", "Could be better, but overall decent.");
$reviewFunction->addReview("Charlie", "Excellent value for money!");


// Display the reviews
$reviewFunction->displayReviews();

// Example of handling an invalid review (missing comment)
$reviewFunction->addReview("David", ""); // This will log an error
$reviewFunction->displayReviews();

?>


<?php

/**
 * Reviews Class
 *
 * This class provides functionality for managing user reviews for a product or item.
 */
class Reviews {

    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the Reviews class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review
     *
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $username, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_name', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $result = $stmt->execute();

            return ($result === 1); // Returns true if at least one row was affected.

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Get all reviews for a product
     *
     * Retrieves all reviews for a specific product from the database.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get average rating for a product
     *
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(int $productId) {
        try {
            $sql = "SELECT AVG(rating) AS average_rating
                    FROM reviews
                    WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_ASSOC);
            if ($row && isset($row['average_rating'])) {
                return (float) $row['average_rating'];
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error getting average rating: " . $e->getMessage());
            return null;
        }
    }
}


// Example Usage (Assuming you have a database connection $db):
// Create a database connection (replace with your actual credentials)
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $db = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception throwing
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Create the Reviews class instance
$reviews = new Reviews($db);

// Add a review
$reviewResult = $reviews->addReview(1, 'JohnDoe', 5, 'Great product! Highly recommended.');

if ($reviewResult) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

// Get reviews for product ID 1
$reviewsForProduct = $reviews->getReviewsByProduct(1);
echo "<br>Reviews for Product 1:<br>";
foreach ($reviewsForProduct as $review) {
    echo "User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
}

// Get average rating for product ID 1
$averageRating = $reviews->getAverageRating(1);
echo "<br>Average Rating for Product 1: " . ($averageRating !== null ? $averageRating : "No reviews found.");
?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, allowing users to submit and display reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param string $user_name The name of the user who submitted the review.
     * @param string $review_text The text of the review.
     */
    public function addReview(string $user_name, string $review_text) {
        $this->reviews[] = ['user' => $user_name, 'text' => $review_text];
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews based on a given criteria (e.g., maximum rating).
     *
     * @param int $rating The minimum rating to filter by (e.g., 4 or higher).
     * @return array An array of review objects that meet the criteria.
     */
    public function getReviewsByRating(int $rating) {
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            // You would typically have a rating field in your review objects.
            // This is just an example.  Replace with your actual rating field.
            if ($review['rating'] >= $rating) { //Example. Modify to use your actual rating field
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string The formatted review string.
     */
    public function displayReviews() {
        $output = "<h2>All Reviews:</h2>";
        $output .= "<ul>";
        foreach ($this->getAllReviews() as $review) {
            $output .= "<li><strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
            $output .= "<strong>Review:</strong> " . htmlspecialchars($review['text']) . "</li>";
        }
        $output .= "</ul>";
        return $output;
    }
}


// Example Usage (Demonstration)
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview('John Doe', 'Great product! I highly recommend it.');
$reviewSystem->addReview('Jane Smith', 'The delivery was fast and the product was as described.');
$reviewSystem->addReview('Peter Jones', 'It was okay, but could be better.  The instructions were a bit confusing.');


// Display all reviews
echo $reviewSystem->displayReviews();

// Example: Display reviews with a rating of 4 or higher (assuming a rating field is added to review objects)
// To make this work, you'd need to modify your Review object to include a rating field.
// Example modification:
/*
class Review {
   // ... other properties ...
   private $rating;
}
*/

// Example adding rating to review objects
/*
$reviewSystem->addReview('John Doe', 'Great product! I highly recommend it.', 5);
$reviewsWithHighRating = $reviewSystem->getReviewsByRating(4);
echo "<br><h2>Reviews with rating 4 or higher:</h2>";
echo $reviewSystem->displayReviews($reviewsWithHighRating);
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 * It includes functionality to add new reviews, display existing reviews,
 * and potentially handle pagination for large numbers of reviews.
 *
 * @param string $productId The ID of the product the reviews are for.
 * @param array $reviews An array of review objects.  Each review object should have at least 'user', 'rating', and 'comment' properties.
 * @param string $view  The view to display the reviews in.  Options: 'list', 'grid'
 * @param int $pageSize The number of reviews to display per page. Defaults to 10.
 * @return string The HTML output of the reviews.
 */
function displayReviews($productId, $reviews, $view = 'list', $pageSize = 10)
{

    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    if ($view === 'list') {
        return displayReviewsAsList($reviews, $pageSize);
    } elseif ($view === 'grid') {
        return displayReviewsAsGrid($reviews, $pageSize);
    } else {
        return "<p>Invalid view.  Supported views are 'list' and 'grid'.</p>";
    }
}


/**
 * Displays reviews in a list format.
 *
 * @param array $reviews The reviews to display.
 * @param int $pageSize The number of reviews to display per page.
 * @return string The HTML output of the reviews.
 */
function displayReviewsAsList($reviews, $pageSize)
{
    $totalReviews = count($reviews);
    $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;  //Get the page number from the URL

    if ($page < 1) { $page = 1; } //Ensure page is at least 1

    $start = ($page - 1) * $pageSize;
    $end = $start + $pageSize;

    $paginatedReviews = array_slice($reviews, $end - $start, true); //Slice for pagination

    $html = "<div class='reviews-container'>";
    foreach ($paginatedReviews as $review) {
        $html .= "<div class='review'>";
        $html .= "<p class='review-user'><strong>" . htmlspecialchars($review['user']) . "</strong></p>";
        $html .= "<p class='review-rating'>Rating: " . $review['rating'] . "</p>";
        $html .= "<p class='review-comment'>" . htmlspecialchars($review['comment']) . "</p>";
        $html .= "</div>";
    }

    //Pagination links
    $totalPages = (int)ceil($totalReviews / $pageSize);
    $html .= "<div class='pagination'>";
    for ($i = 1; $i <= $totalPages; $i++) {
        $html .= "<a href='?page=" . $i . "'>" . $i . "</a>";
    }
    $html .= "</div>";

    $html .= "</div>";
    return $html;
}



/**
 * Displays reviews in a grid format.
 *
 * @param array $reviews The reviews to display.
 * @param int $pageSize The number of reviews to display per page.
 * @return string The HTML output of the reviews.
 */
function displayReviewsAsGrid($reviews, $pageSize)
{
    $html = "<div class='reviews-grid'>";
    for ($i = 0; $i < count($reviews); $i++) {
        $review = $reviews[$i];
        $html .= "<div class='review-item'>";
        $html .= "<p class='review-user'><strong>" . htmlspecialchars($review['user']) . "</strong></p>";
        $html .= "<p class='review-rating'>Rating: " . $review['rating'] . "</p>";
        $html .= "<p class='review-comment'>" . htmlspecialchars($review['comment']) . "</p>";
        $html .= "</div>";
    }
    $html .= "</div>";
    return $html;
}



// Example usage:
// Assuming you have an array of reviews called $myReviews
// And you've created a product object with $productId

// $myReviews = [
//     ['user' => 'John Doe', 'rating' => 5, 'comment' => 'Great product!'],
//     ['user' => 'Jane Smith', 'rating' => 4, 'comment' => 'Good value for money.'],
//     ['user' => 'Peter Jones', 'rating' => 3, 'comment' => 'It was okay.'],
// ];

// $productId = '123'; // Replace with the actual product ID

// $reviewsOutput = displayReviews($productId, $myReviews, 'list'); // or 'grid'
// echo $reviewsOutput;
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 *
 * This function handles:
 *  - Receiving review input (text, rating, etc.)
 *  - Validating the input
 *  - Saving the review to a database (example implementation)
 *  - Displaying the reviews
 *
 * @param string $reviewText The user's review text.
 * @param int   $rating     The user's rating (1-5).
 * @param string $productName The name of the product the review is for.
 * @return array An array containing:
 *   - 'success':  True if the review was submitted successfully, false otherwise.
 *   - 'message': A message indicating the success or failure of the operation.
 *   - 'reviews': An array of review objects.
 */
function handleUserReview(string $reviewText, int $rating, string $productName) {
  // Input validation - Very important for security and data integrity.
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviews' => []];
  }

  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviews' => []];
  }

  // **In a real application, you would connect to your database here.**
  // This is a simplified example using a dummy array.
  $reviews = getReviewsFromDatabase(); // Replace with your actual database retrieval

  // Create a review object (can be customized to include more data)
  $review = [
    'id' => count($reviews) + 1, // Simple unique ID (in a real app, use auto-increment)
    'text' => $reviewText,
    'rating' => $rating,
    'timestamp' => date('Y-m-d H:i:s'),
    'product' => $productName
  ];

  // Add the new review to the reviews array
  $reviews[] = $review;

  // Save the review to the database (example - adapt to your DB)
  saveReviewToDatabase($review);  // Replace with your actual database saving function

  return ['success' => true, 'message' => 'Review submitted successfully.', 'reviews' => $reviews];
}


/**
 * Dummy function to simulate retrieving reviews from a database.
 * Replace with your actual database query.
 *
 * @return array An array of review objects.
 */
function getReviewsFromDatabase() {
  // Dummy data for demonstration
  return [
    [
      'id' => 1,
      'text' => 'Great product!  Highly recommended.',
      'rating' => 5,
      'timestamp' => date('Y-m-d H:i:s'),
      'product' => 'Laptop X100'
    ],
    [
      'id' => 2,
      'text' => 'Could be better, but decent for the price.',
      'rating' => 3,
      'timestamp' => date('Y-m-d H:i:s'),
      'product' => 'Laptop X100'
    ]
  ];
}

/**
 * Dummy function to simulate saving a review to the database.
 * Replace with your actual database saving logic.
 *
 * @param array $review The review data to save.
 */
function saveReviewToDatabase(array $review) {
  // In a real implementation, you would use a database connection
  // and execute a query to insert the review data into the database.

  // This is just a placeholder.  In a real app, do the database insertion.
  echo "Saving review to database: " . print_r($review, true) . "
";
}



// Example Usage:
$product = 'Laptop X100';
$reviewText = "This is a fantastic laptop! Very fast and reliable.";
$rating = 5;

$result = handleUserReview($reviewText, $rating, $product);

if ($result['success']) {
  echo "Review submitted successfully!
";
  echo "Reviews:
";
  print_r($result['reviews']);
} else {
  echo "Error submitting review: " . $result['message'] . "
";
}

// Example of an invalid review:
$invalidResult = handleUserReview("", 6, "Tablet Z200");
if (!$invalidResult['success']) {
    echo "Invalid review detected!
" . $invalidResult['message'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation, retrieval, updating, and deletion of user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $id Optional: The ID of the review to update. If not provided, a new review is created.
 *
 * @return array Returns an array with status and details.
 *               - 'status' => 'success' or 'error'
 *               - 'message' =>  A descriptive message.
 *               - 'review' => (if success) an associative array containing the review data (id, productId, userId, rating, comment, creationDate)
 *
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, ?int $id = null): array {
  // Validate inputs - Basic examples, extend as needed for your application
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['status' => 'error', 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['status' => 'error', 'message' => 'Review comment cannot be empty.'];
  }
  // Ideally, you would also validate $userId - check against user database
  // For this example, we assume it's valid.

  // Create a new review
  if (is_null($id)) {
    $review = [
      'productId' => $productId,
      'userId' => $userId,
      'rating' => $rating,
      'comment' => $comment,
      'creationDate' => date('Y-m-d H:i:s')  // Use appropriate timestamp format
    ];
  } else {
    // Update an existing review
    // In a real application, you'd query a database here to update the review
    // This is a placeholder for demonstration.
    $review = [
      'id' => $id,
      'productId' => $productId,
      'userId' => $userId,
      'rating' => $rating,
      'comment' => $comment,
      'creationDate' => date('Y-m-d H:i:s')
    ];
  }


  // In a real application, you'd save the $review data to a database here.
  // For this example, we're just returning the review data.

  return ['status' => 'success', 'message' => 'Review created/updated successfully.', 'review' => $review];
}


// Example Usage
$productId = '123';
$userId = 'user123';
$rating = 4;
$comment = 'Great product!  I highly recommend it.';

$result = createOrUpdateReview($productId, $userId, $rating, $comment);

if ($result['status'] === 'success') {
  echo "Review created/updated successfully: " . PHP_EOL;
  print_r($result['review']);
} else {
  echo "Error creating/updating review: " . PHP_EOL;
  echo $result['message'] . PHP_EOL;
}

// Example of an error
$result = createOrUpdateReview($productId, $userId, 6, 'Bad Rating'); // Invalid Rating
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct(
        int $reviewId = null,
        int $userId,
        int $productId,
        int $rating,
        string $comment
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }

    /**
     * Setters (If needed - use with caution)
     */
    public function setRating(int $rating) {
        $this->rating = $rating;
    }


    /**
     *  Basic display function - useful for testing or simple output
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Review Date: " . $this->getReviewDate() . "<br>";
    }

}



/**
 * User Review Review Function (Simplified Example)
 */
function reviewProduct(UserReview $review) {
    // Basic validation (add more robust validation in a real application)
    if ($review->getRating() < 1 || $review->getRating() > 5) {
        echo "Invalid rating. Rating must be between 1 and 5.";
        return;
    }

    //  Add the review to a database (replace with your database logic)
    echo "Review submitted successfully for Product ID: " . $review->getProductId() . "<br>";
    echo "User: " . $review->getUserId() . "<br>";
    echo "Rating: " . $review->getRating() . "<br>";
    echo "Comment: " . $review->getComment() . "<br>";
}



// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! I love it.");
reviewProduct($review1);

$review2 = new UserReview(null, 456, 789, 3, "It was okay.");
reviewProduct($review2);

$review3 = new UserReview(1, 789, 101, 1, "Terrible!");  //Testing with an ID
reviewProduct($review3);

?>


<?php

/**
 * Class Review
 *
 * Handles the creation, storage, and retrieval of user reviews.
 */
class Review {

    private $db; // Database connection object

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param int $userId The ID of the user submitting the review.
     * @param string $title The title of the review.
     * @param string $comment The content of the review.
     * @param int $rating The rating (e.g., 1-5).
     * @return int|false The ID of the newly created review on success, or false on failure.
     */
    public function createReview(int $productId, int $userId, string $title, string $comment, int $rating) {
        if ($this->db->isConnected()) { // Check if database connection is active
            $sql = "INSERT INTO reviews (product_id, user_id, title, comment, rating)
                    VALUES (:product_id, :user_id, :title, :comment, :rating)";

            $stmt = $this->db->prepare($sql);

            // Bind parameters
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);

            // Execute the query
            if ($stmt->execute()) {
                return $this->db->lastInsertId();
            } else {
                // Handle error
                error_log("Error creating review: " . $this->db->errorInfo());
                return false;
            }
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId) {
        if ($this->db->isConnected()) {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = (object) $row; // Create an object from the row
            }

            return $reviews;
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return [];
        }
    }

    /**
     * Retrieves a single review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return \stdClass|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        if ($this->db->isConnected()) {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                return (object) $row;
            } else {
                return null;
            }
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return null;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $title The new title.
     * @param string $comment The new comment.
     * @param int $rating The new rating.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $title, string $comment, int $rating) {
        if ($this->db->isConnected()) {
            $sql = "UPDATE reviews SET title = :title, comment = :comment, rating = :rating WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);
            $stmt->execute();

            return $stmt->rowCount() > 0; // Returns true if at least one row was affected
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        if ($this->db->isConnected()) {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }
}

// Example usage (Assuming you have a database connection object called $db)

// $review = new Review($db);

// $newReviewId = $review->createReview(1, 123, "Great product!", "Highly recommended.", 5);

// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId . "<br>";
// } else {
//     echo "Error creating review.<br>";
// }

// $reviews = $review->getReviewsByProduct(1);

// echo "Reviews for product 1:<br>";
// foreach ($reviews as $review) {
//     echo "Product ID: " . $review->product_id . "<br>";
//     echo "Title: " . $review->title . "<br>";
//     echo "Comment: " . $review->comment . "<br>";
//     echo "Rating: " . $review->rating . "<br>";
//     echo "<br>";
// }

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and view reviews for a given item.
 *
 *  @param string $item_name - The name of the item being reviewed.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the review.
 *  @param array $reviews - An array to store the reviews.  Defaults to an empty array.
 *
 *  @return array - The updated array of reviews, with the new review added.
 */
function addReview(string $item_name, string $user_name, string $review_text, array &$reviews = []) {
  // Validate input (basic checks - enhance for production)
  if (empty($item_name) || empty($user_name) || empty($review_text)) {
    return $reviews; // Return original array if any input is empty
  }

  // Create a review object (could be a simple associative array, or a dedicated class)
  $review = [
    'user' => $user_name,
    'text' => $review_text,
    'date' => date('Y-m-d H:i:s') // Add timestamp for review date
  ];

  // Add the review to the array.  Passing &$reviews means we're modifying the original array.
  $reviews[] = $review;

  return $reviews;
}

/**
 * Displays Reviews
 *
 *  This function displays the reviews in a formatted way.
 *
 *  @param array $reviews - The array of reviews to display.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  echo "<h2>Reviews for " . htmlspecialchars($review_item) . "</h2>";
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['text']) . "<br>";
    echo "Date: " . htmlspecialchars($review['date']);
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:

$myReviews = []; // Initialize an empty array to store reviews

// Add some reviews
$myReviews = addReview("Awesome Product", "John Doe", "This product is fantastic! I highly recommend it.");
$myReviews = addReview("Another Great Item", "Jane Smith", "It's really good value for the money.");
$myReviews = addReview("Something Cool", "Peter Jones", "I love this!");

// Display the reviews
displayReviews($myReviews);

// Example to show how input validation works
$newReviews = addReview("", "Test User", "Empty Review");
print_r($newReviews); // Prints the original $newReviews array (unchanged)

?>


<?php

/**
 * Reviews Class - Allows users to submit and view reviews.
 */
class Reviews {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $name The name of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $comment) {
        if (empty($name) || empty($comment)) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp of review
        ];
        return true;
    }

    /**
     * Gets all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Gets reviews based on a search term.
     *
     * @param string $searchTerm The term to search for in the review comment.
     * @return array An array of review objects matching the search term.
     */
    public function searchReviews(string $searchTerm) {
        $results = [];
        foreach ($this->getAllReviews() as $review) {
            if (strpos($review['comment'], $searchTerm) !== false) {
                $results[] = $review;
            }
        }
        return $results;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string HTML markup to display the reviews.
     */
    public function displayReviews() {
        $reviews = $this->getAllReviews();
        $html = '<table border="1">';
        $html .= '<thead><tr><th>Name</th><th>Comment</th><th>Date</th></tr></thead>';
        $html .= '<tbody>';
        foreach ($reviews as $review) {
            $html .= '<tr>';
            $html .= '<td>' . htmlspecialchars($review['name']) . '</td>';
            $html .= '<td>' . htmlspecialchars($review['comment']) . '</td>';
            $html .= '<td>' . $review['date'] . '</td>';
            $html .= '</tr>';
        }
        $html .= '</tbody></table>';
        return $html;
    }
}

// Example Usage:
// Instantiate the Reviews class
$reviews = new Reviews();

// Add some reviews
$reviews->addReview('John Doe', 'Great product!  I highly recommend it.');
$reviews->addReview('Jane Smith', 'The service was excellent.  Fast and friendly.');
$reviews->addReview('Peter Jones', 'Could be better, but overall okay.');

// Search for reviews containing "excellent"
$searchResults = $reviews->searchReviews('excellent');

// Display all reviews
echo $reviews->displayReviews();

// Display search results
echo "<h2>Search Results for 'excellent':</h2>";
echo $reviews->displayReviews($searchResults);  // Function overload to display search results


/**
 * Overloaded displayReviews function to handle search results.  This allows you
 * to customize the display of search results if needed.
 *
 * @param array $reviews  The array of reviews to display.
 * @return string HTML markup to display the reviews.
 */
function displayReviews(array $reviews) {
    $html = '<table border="1">';
    $html .= '<thead><tr><th>Name</th><th>Comment</th><th>Date</th></tr></thead>';
    $html .= '<tbody>';
    foreach ($reviews as $review) {
        $html .= '<tr>';
        $html .= '<td>' . htmlspecialchars($review['name']) . '</td>';
        $html .= '<td>' . htmlspecialchars($review['comment']) . '</td>';
        $html .= '<td>' . $review['date'] . '</td>';
        $html .= '</tr>';
    }
    $html .= '</tbody></table>';
    return $html;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The text of the review submitted by the user.
 * @param string $userEmail    The email address of the user submitting the review.
 * @param array  $reviews      (Optional) An array of existing reviews (for demonstration/expansion).
 *
 * @return array  An array containing the new review and the updated list of reviews.
 */
function submitReview(string $productName, string $reviewText, string $userEmail, array &$reviews = []) {
  // Input validation -  This is crucial!
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if (empty($userEmail)) {
    return ["error" => "User email cannot be empty."];
  }

  // Create the new review object
  $newReview = [
    "product_name" => $productName,
    "review_text" => $reviewText,
    "user_email" => $userEmail,
    "timestamp" => date("Y-m-d H:i:s") // Add a timestamp
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  return ["success" => "Review submitted successfully!", "review" => $newReview, "reviews" => $reviews];
}


/**
 * Function to display reviews
 *
 * Displays a list of reviews, sorted by most recent.
 *
 * @param array $reviews  The array of reviews.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " . $reviews[0]['product_name'] . "</h2>"; //Dynamically uses product name from first review.
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    usort($reviews, function($a, $b) {
        return $b["timestamp"] <=> $a["timestamp"]; // Sort by timestamp (most recent first)
    });

    foreach ($reviews as $review) {
        echo "<li>";
        echo "<p><strong>" . $review['user_email'] . ":</strong> " . htmlspecialchars($review['review_text']) . "</p>";
        echo "<p><i>Timestamp: " . $review['timestamp'] . "</i></p>";
        echo "</li>";
    }
    echo "</ul>";
}



// Example Usage:

// Simulate a database (replace with your actual database interaction)
$currentReviews = [];

// Submit a review
$result = submitReview("Awesome Widget", "This widget is fantastic!  Highly recommended.", "user@example.com");

if (isset($result["error"])) {
    echo "<p style='color: red;'>Error: " . $result["error"] . "</p>";
} else {
    echo "<p style='color: green;'>Review submitted successfully!</p>";
}


// Submit another review
$result = submitReview("Super Gadget", "Great product, easy to use.", "anotheruser@example.com");

if (isset($result["error"])) {
    echo "<p style='color: red;'>Error: " . $result["error"] . "</p>";
} else {
    echo "<p style='color: green;'>Review submitted successfully!</p>";
}


// Display the reviews
displayReviews($currentReviews);


?>


<?php

/**
 * User Review Function - Processes and stores user reviews.
 */
class UserReview
{
    private $db; // Database connection object

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Adds a new user review to the database.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $productName The name of the product being reviewed.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @return bool True on success, false on failure.
     */
    public function addReview($userId, $productName, $rating, $comment)
    {
        // Input validation (very important!)
        if (!$this->isValidInput($userId, $productName, $rating, $comment)) {
            return false;
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (user_id, product_name, rating, comment) 
                VALUES (:user_id, :product_name, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        if ($stmt->execute()) {
            return true;
        } else {
            // Handle errors (very important!)
            error_log("Error adding review: " . $stmt->error); // Log the error for debugging
            return false;
        }
    }

    /**
     * Retrieves reviews for a specific product.
     *
     * @param string $productName The product to retrieve reviews for.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productName)
    {
        $sql = "SELECT * FROM reviews WHERE product_name = :product_name";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }

        return $reviews;
    }


    /**
     * Input validation function.
     *
     * @param string $userId
     * @param string $productName
     * @param string $rating
     * @param string $comment
     * @return bool
     */
    private function isValidInput($userId, $productName, $rating, $comment)
    {
        // Basic validation - expand as needed
        if (empty($userId) || empty($productName) || empty($rating) || empty($comment)) {
            return false;
        }

        if (!is_numeric($rating)) {
            return false;
        }

        if ($rating < 1 || $rating > 5) {
            return false;
        }

        // You could add more robust validation here, such as:
        // - Checking if the user ID exists in a users table.
        // - Limiting the length of the comment.
        return true;
    }
}


// Example Usage (Assuming you have a database connection $db)
// (This is just a demonstration, replace with your actual database setup)

// Simulate a database connection (replace with your actual connection)
class MockDB {
    public function prepare($sql) {
        // Simulate a prepared statement
        return new MockStatement($sql);
    }

    public function execute() {} // Dummy implementation
}

class MockStatement {
    private $sql;
    public function __construct($sql) {
        $this->sql = $sql;
    }

    public function bindParam($name, $value) {
        // Do nothing for demonstration purposes
    }

    public function execute() {
        // Simulate success
    }
}


$db = new MockDB();
$reviews = new UserReview($db);

// Add a review
$userId = 123;
$productName = 'Awesome Gadget';
$rating = 5;
$comment = 'This gadget is fantastic! Highly recommended.';

if ($reviews->addReview($userId, $productName, $rating, $comment)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Get reviews for the product
$reviewsForGadget = $reviews->getReviewsByProduct($productName);

echo "Reviews for " . $productName . ":
";
if (empty($reviewsForGadget)) {
    echo "No reviews found.
";
} else {
    foreach ($reviewsForGadget as $review) {
        echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and saves it to a database.
 * It also handles some basic validation and formatting.
 *
 * @param string $username    The username of the reviewer.
 * @param string $review_text The review text provided by the user.
 * @param int    $product_id  The ID of the product being reviewed.
 * @param PDO   $pdo        The PDO database connection object.
 *
 * @return bool True on success, false on failure.
 */
function saveUserReview(string $username, string $review_text, int $product_id, PDO $pdo): bool
{
    // Basic Validation
    if (empty($username) || empty($review_text) || $product_id <= 0) {
        error_log("Invalid review data received. Username: " . $username . ", Review: " . $review_text . ", Product ID: " . $product_id);
        return false;
    }

    // Sanitize Review Text (Important for Security)
    $review_text = trim($review_text); // Remove leading/trailing whitespace
    $review_text = htmlspecialchars($review_text, ENT_QUOTES, 'UTF-8'); // Escape special characters

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (user_name, review_text, product_id) VALUES (:username, :review_text, :product_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the statement
    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error saving review: " . $stmt->errorInfo()[2]);  // Log the specific error
        return false;
    }
}

// Example Usage (Illustrative - Replace with your actual database setup)

// Assuming you have a PDO connection object named $pdo

// Example product ID
$product_id = 123;

// Example user review
$username = "JohnDoe";
$review_text = "This product is amazing!  I really enjoyed it.";

// Save the review
if (saveUserReview($username, $review_text, $product_id, $pdo)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.  Check the logs for details.";
}



// --------------------  Database Setup (Illustrative) --------------------
// Replace this with your actual database configuration
$host = 'localhost';
$db_name = 'your_database_name';
$username = 'your_db_user';
$password = 'your_db_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
    echo "Connected to database successfully!";

} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    exit();
}


?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $reviewId (optional) - Unique identifier for the review.  If not provided, will be generated.
   * @param int $userId  - ID of the user submitting the review.
   * @param int $productId - ID of the product being reviewed.
   * @param int $rating   - Rating from 1 to 5.
   * @param string $comment - User's comment on the product.
   */
  public function __construct(
    int $reviewId = null,
    int $userId,
    int $productId,
    int $rating,
    string $comment
  ) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Timestamp of the review
  }

  /**
   * Getters
   */
  public function getReviewId(): int
  {
    return $this->reviewId;
  }

  public function getUserId(): int
  {
    return $this->userId;
  }

  public function getProductId(): int
  {
    return $this->productId;
  }

  public function getRating(): int
  {
    return $this->rating;
  }

  public function getComment(): string
  {
    return $this->comment;
  }

  public function getDate(): string
  {
    return $this->date;
  }


  /**
   *  Method to represent the review as an array for easy output.
   *  Useful for JSON encoding or displaying on a webpage.
   *
   * @return array
   */
  public function toArray(): array
  {
    return [
      'review_id' => $this->getReviewId(),
      'user_id' => $this->getUserId(),
      'product_id' => $this->getProductId(),
      'rating' => $this->getRating(),
      'comment' => $this->getComment(),
      'date' => $this->getDate(),
    ];
  }
}


/**
 * User Review Review Function (Example Usage)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
  $review = new UserReview($userId, $productId, $rating, $comment);
  // You can now save this review to a database or perform other actions.
  // For this example, we'll just print the review information.

  echo "Review Details:
";
  echo "Review ID: " . $review->getReviewId() . "
";
  echo "User ID: " . $review->getUserId() . "
";
  echo "Product ID: " . $review->getProductId() . "
";
  echo "Rating: " . $review->getRating() . "
";
  echo "Comment: " . $review->getComment() . "
";
  echo "Date: " . $review->getDate() . "
";
  echo "
";
}



// Example Usage:
reviewProduct(123, 456, 5, "Great product!  I love it!"); // Example 1
reviewProduct(789, 101, 4, "Pretty good, but could be better."); // Example 2
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides basic data validation and error handling.
 *
 * @param string $review_text The text of the review.
 * @param int $product_id The ID of the product the review is for.
 * @param int $user_id The ID of the user writing the review.
 * @param int $rating The rating of the review (1-5).
 * @param int $timestamp  Timestamp of the review creation (optional - defaults to current time)
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review (if successful).
 *
 */
function createOrUpdateReview(string $review_text, int $product_id, int $user_id, int $rating, int $timestamp = time()) {

  // Validate inputs - Simple example, add more robust validation as needed
  if (empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review_id' => null
    ];
  }

  if ($rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be between 1 and 5.',
      'review_id' => null
    ];
  }

  // **Database Interaction (Replace with your database logic)**
  // This is a placeholder, adapt to your database system (MySQL, PostgreSQL, etc.)

  try {
    // Example using a dummy database:
    $db = new PDO("mysql:host=localhost;dbname=reviews", "user", "password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);


    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text, created_at) VALUES (:product_id, :user_id, :rating, :review_text, :created_at)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':created_at', $timestamp);

    $stmt->execute();
    $review_id = $db->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id
    ];
  } catch (PDOException $e) {
    // Handle database errors here (logging, user-friendly message)
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage(),
      'review_id' => null
    ];
  }
}

// Example Usage:
$review_result = createOrUpdateReview("This product is amazing!", 123, 45, 5);

if ($review_result['success']) {
  echo "Review created successfully! ID: " . $review_result['review_id'] . "
";
} else {
  echo "Error creating review: " . $review_result['message'] . "
";
}
?>


<?php

/**
 * Function to handle user reviews.
 *
 * @param array $reviews An array of review objects. Each review object should have the following properties:
 *   - id: (int) - Unique identifier for the review.
 *   - user: (string) - User's name or ID.
 *   - rating: (int) - Rating from 1 to 5.
 *   - comment: (string) - User's review comment.
 *   - date: (string) - Timestamp of the review (e.g., Y-m-d H:i:s).
 *
 * @return array An array of formatted reviews.
 */
function handleUserReviews(array $reviews): array
{
    $formattedReviews = [];

    foreach ($reviews as $review) {
        $formattedReview = [
            'id' => $review['id'],
            'user' => $review['user'],
            'rating' => $review['rating'],
            'comment' => $review['comment'],
            'date' => date('Y-m-d H:i:s', strtotime($review['date'])), // Format the date
        ];
        $formattedReviews[] = $formattedReview;
    }

    return $formattedReviews;
}

// Example Usage:
// Simulate some sample reviews
$reviews = [
    [
        'id' => 1,
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'Excellent product! Highly recommend.',
        'date' => '2023-10-26 10:00:00',
    ],
    [
        'id' => 2,
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Good product, but could be improved.',
        'date' => '2023-10-27 14:30:00',
    ],
    [
        'id' => 3,
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It\'s okay.  Not what I expected.',
        'date' => '2023-10-28 08:15:00',
    ],
];

$formattedReviews = handleUserReviews($reviews);

// Print the formatted reviews (for demonstration)
echo "<pre>";
print_r($formattedReviews);
echo "</pre>";

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to process user-submitted reviews.
 * It includes input validation, sanitization, and storage logic.
 * 
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param string $rating The user's rating (e.g., 1-5).
 * @param string $item_id (Optional) The ID of the item the review is for.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $name, string $comment, string $rating, string $item_id = "") {
    // 1. Input Validation and Sanitization
    $name = sanitizeString($name); // Use a function to sanitize
    $comment = sanitizeString($comment);
    $rating = intval($rating); // Convert rating to an integer

    if (empty($name) || empty($comment) || $rating <= 0 || $rating > 5) {
        error_log("Invalid review data: " . print_r($_POST, true)); // Log the entire POST data for debugging
        return false;
    }

    // 2. Data Preparation
    $review_data = [
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'item_id' => $item_id,
        'timestamp' => date("Y-m-d H:i:s") // Add a timestamp for record keeping
    ];

    // 3. Storage (Example: Using a simple file)
    $filename = "reviews.txt";
    $review_string = json_encode($review_data) . "
";

    if (file_put_contents($filename, $review_string, FILE_APPEND) !== false) {
        return true;
    } else {
        error_log("Failed to save review to file: " . $filename);
        return false;
    }

    // **Alternative:  Storing in a database (Recommended for production)**
    //  You would typically connect to your database (MySQL, PostgreSQL, etc.)
    //  and use prepared statements to prevent SQL injection vulnerabilities.
    //  Example (Conceptual - Requires database connection setup):
    //
    //  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
    //  $stmt = $db->prepare("INSERT INTO reviews (name, comment, rating, item_id, timestamp) VALUES (?, ?, ?, ?, ?)");
    //  $stmt->bind_param("sss", $name, $comment, $rating, $item_id);
    //  $stmt->execute();
    //  $stmt->close();
    //  return true;
}



/**
 * Sanitize String Function
 * 
 * Simple function to sanitize a string.
 *  (More robust sanitization is often needed in real-world scenarios)
 *
 * @param string $string The string to sanitize.
 * @return string The sanitized string.
 */
function sanitizeString(string $string): string {
    //Remove HTML tags
    $string = strip_tags($string);
    // Remove unwanted characters (example - customize this as needed)
    $string = str_replace([';', ':', '-', '_'], '', $string);
    return trim($string); //Trim leading/trailing whitespace
}

// Example Usage:
// Simulate receiving the review data from a form submission.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = $_POST["name"];
    $comment = $_POST["comment"];
    $rating = $_POST["rating"];
    $item_id = $_POST["item_id"]; //Optional
    
    if (saveUserReview($name, $comment, $rating, $item_id)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}
?>

<!-- HTML Form for Submitting Reviews -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="comment">Review:</label><br>
    <textarea id="comment" name="comment" rows="4" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

    <label for="item_id">Item ID (Optional):</label>
    <input type="text" id="item_id" name="item_id"><br><br>

    <input type="submit" value="Submit Review">
</form>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's written review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete. If not provided, a new review is created.
 *
 * @return array An array containing:
 *   - 'success': true if the operation was successful, false otherwise.
 *   - 'message': A message describing the result of the operation.
 *   - 'reviewId': The ID of the newly created or updated review.
 */
function create_review(string $productId, string $userId, string $rating, string $comment, int $reviewId = 0) {
  // **Validation (IMPORTANT)** -  Add more robust validation here!
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => 0];
  }
  if (empty($userId)) {
    return ['success' => false, 'message' => 'User ID cannot be empty.', 'reviewId' => 0];
  }
  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.', 'reviewId' => 0];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.', 'reviewId' => 0];
  }

  // Ensure Rating is an integer between 1 and 5.  This is crucial.
  $rating = intval($rating); // Convert to integer
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviewId' => 0];
  }



  // **Database Interaction - Replace with your database connection logic**
  // This is a placeholder.  You'll need to replace this with
  // your actual database connection and query logic.

  // Example using a hypothetical database connection:
  $db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

  try {
    $stmt = $db->prepare(
      "INSERT INTO reviews (productId, userId, rating, comment) VALUES (?, ?, ?, ?)"
    );
    $stmt->execute([$productId, $userId, $rating, $comment]);

    $reviewId = $db->lastInsertId(); // Get the ID of the newly inserted row

    return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];

  } catch (PDOException $e) {
    // Handle database errors appropriately (logging, etc.)
    return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'reviewId' => 0];
  }
}


/**
 * Example Usage:
 */
// Create a new review
$result = create_review("123", "user123", "5", "Great product! Highly recommended.");
print_r($result);

// Update an existing review (assuming $reviewId = 1)
$result = create_review("456", "user456", "4", "Good, but could be better.", 1);
print_r($result);

// Error handling examples:
$result = create_review("", "user1", "3", "Review", 2); // Empty Product ID
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function creates a review object from user input and allows for
 * basic validation and sanitization.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|false  An array containing the review data, or false on error.
 */
function createReview($username, $rating, $comment)
{
    // Input Validation and Sanitization
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");  // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // Sanitize inputs to prevent XSS attacks
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);


    // Create the review data array
    $review = [
        'username' => $username,
        'rating' => (int)$rating, // Convert rating to integer
        'comment' => $comment
    ];

    return $review;
}

// Example Usage:
$reviewData = createReview("JohnDoe", 4, "Great product, highly recommend!");

if ($reviewData) {
    echo "Review Created Successfully:
";
    print_r($reviewData);
} else {
    echo "Error creating review. Check logs for details.
";
}


// Example showing an error case:
$badReview = createReview("", 3, "This is bad!");
if ($badReview) {
  echo "This shouldn't print.
";
} else {
   echo "Error case handled correctly.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's written review.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $productName, string $userId, string $rating, string $comment) {
  // Basic validation - add more robust validation as needed
  if (empty($productName) || empty($userId) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review."); // Log the error for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating. Rating must be a number between 1 and 5.");
    return false;
  }

  // Simulate saving to a database (replace with your actual database interaction)
  $review = [
    'product_name' => $productName,
    'user_id' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'date_created' => date("Y-m-d H:i:s") // Add a timestamp for organization
  ];

  // Save to database (example - adapt to your database setup)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database details

  try {
    $stmt = $db->prepare("INSERT INTO reviews (product_name, user_id, rating, comment, date_created) VALUES (:product_name, :user_id, :rating, :comment, :date_created)");
    $stmt->bindParam(':product_name', $review['product_name']);
    $stmt->bindParam(':user_id', $review['user_id']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':comment', $review['comment']);
    $stmt->bindParam(':date_created', $review['date_created']);
    $stmt->execute();

    return true; // Successfully saved
  } catch (PDOException $e) {
    error_log("Error saving review: " . $e->getMessage()); // Log the error for debugging
    return false; // Error saving
  }
}

/**
 * Display User Reviews for a Product
 *
 * Fetches and displays reviews for a given product.
 *
 * @param string $productName The name of the product.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function displayUserReviews(string $productName) {
  // Example using a simulated database. Replace with your database query.
  // This is just for demonstration.

  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database details
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_name = :product_name");
  $stmt->bindParam(':product_name', $productName);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_OBJ);
  return $reviews;
}

// Example Usage (Illustrative - adapt to your application)
// You'll need to implement your own form and display logic

// Save a review
if (saveUserReview('Awesome Widget', 'user123', 4, 'Great product!  Highly recommended.') === true) {
  echo "<p>Review saved successfully!</p>";
} else {
  echo "<p>Error saving review.</p>";
}

// Display reviews for 'Awesome Widget'
$reviews = displayUserReviews('Awesome Widget');

if (count($reviews) > 0) {
  echo "<h3>Reviews for Awesome Widget:</h3>";
  foreach ($reviews as $review) {
    echo "<p><strong>Rating:</strong> " . $review->rating . "<br>";
    echo "<strong>Comment:</strong> " . $review->comment . "<br>";
    echo "<strong>User:</strong> " . $review->user_id . "</p>";
  }
} else {
  echo "<p>No reviews found for this product.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, a user ID, a rating (1-5), and a review text, 
 * and adds a new review to a database table.
 *
 * @param int    $product_id   The ID of the product being reviewed.
 * @param int    $user_id      The ID of the user submitting the review.
 * @param int    $rating       The rating given by the user (1-5).
 * @param string $review_text  The text of the review.
 * @return bool   True if the review was successfully added, false otherwise.
 */
function add_user_review(int $product_id, int $user_id, int $rating, string $review_text): bool
{
    // Database connection details (replace with your actual values)
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);

        // Set PDO error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (?, ?, ?, ?)");

        // Bind parameters to the statement
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $review_text);

        // Execute the statement
        $stmt->execute();

        // Return true if successful
        return true;

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}


/**
 *  Example Usage (Demonstration - not part of the core function)
 */

// Example product ID
$product_id = 123;

// Example user ID (replace with an actual user ID)
$user_id = 456;

// Example rating
$rating = 5;

// Example review text
$review_text = "This product is amazing! I highly recommend it.";

// Add the review
if (add_user_review($product_id, $user_id, $rating, $review_text)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}



//  Example of getting reviews for a product (Illustrative - Requires a SELECT query)
// This part is not part of the add_user_review function, but demonstrates how you might retrieve them.

/*
function get_product_reviews(int $product_id)
{
    // ... (SQL SELECT query to retrieve reviews for the product)
    // ...
}
*/
?>


<?php

/**
 *  User Review Function
 *
 *  This function handles the creation, retrieval, and basic display of user reviews.
 *
 *  @param string $productName - The name of the product being reviewed.
 *  @param string $userId - The ID of the user submitting the review.
 *  @param string $reviewText - The user's review text.
 *  @param int $rating - The user's rating (1-5).
 *
 *  @return array|string -  An array containing the review details, or an error message.
 */
function createReview(string $productName, string $userId, string $reviewText, int $rating): array|string
{
    // Input Validation -  Important for security and data integrity
    if (empty($productName)) {
        return "Error: Product name cannot be empty.";
    }
    if (empty($userId)) {
        return "Error: User ID cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }


    //  Simulate Saving the Review to a Database (Replace with your database logic)
    //  In a real application, you'd use a database connection here.
    $review = [
        'product_name' => $productName,
        'user_id' => $userId,
        'review_text' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    //  Example: Store the review in an array (replace with database storage)
    //  In a real application, you'd add this review to your database.

    //  For demonstration purposes, let's store in an array.
    //  Consider using session storage or caching for larger applications.

    // Return the review details
    return $review;
}


/**
 * Retrieves reviews for a specific product.
 *
 * @param string $productName - The name of the product to search for.
 * @return array|string -  An array of review objects, or an error message.
 */
function getReviewsForProduct(string $productName): array|string {
    // Placeholder: This would fetch reviews from a database
    // Based on the product name.

    // Example for demonstration:
    if ($productName === 'Awesome Gadget') {
        return [
            [
                'product_name' => 'Awesome Gadget',
                'user_id' => 'user123',
                'review_text' => 'Great product!  Easy to use.',
                'rating' => 5,
                'timestamp' => time()
            ],
            [
                'product_name' => 'Awesome Gadget',
                'user_id' => 'user456',
                'review_text' => 'Pretty good, but could be better.',
                'rating' => 3,
                'timestamp' => time()
            ]
        ];
    } else {
        return "Error: No reviews found for product: " . $productName;
    }
}


// Example Usage:
$product = 'Awesome Gadget';
$userId = 'user123';
$reviewText = 'This gadget is amazing!  Highly recommended.';
$rating = 5;

$newReview = createReview($product, $userId, $reviewText, $rating);

if (is_array($newReview)) {
    echo "New Review Created: 
";
    print_r($newReview);

    // Retrieve reviews for the product
    $reviews = getReviewsForProduct($product);

    if (is_array($reviews)) {
        echo "
Reviews for " . $product . ":
";
        print_r($reviews);
    } else {
        echo "
Error retrieving reviews.
";
    }
} else {
    echo $newReview . "
"; // Display the error message
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating    (Optional) The rating given by the user (1-5). Defaults to 0.
 * @param string $timestamp (Optional)  Timestamp for the review. Defaults to current time.
 *
 * @return bool True on successful review creation, false on failure.
 */
function create_review(string $item_id, string $user_name, string $review_text, int $rating = 0, string $timestamp = null)
{
  // Validate inputs (important for security and data integrity)
  if (empty($item_id) || empty($user_name) || empty($review_text)) {
    error_log("Missing required fields in review creation.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Invalid rating value.  Rating must be between 1 and 5.");
    return false;
  }

  // --- Data Validation ---
  // Add more robust validation here if needed.  Examples:
  // - Sanitize $review_text to prevent XSS attacks.
  // - Validate the $timestamp format if you're using it.

  // --- Database Interaction (Example - adjust to your database setup) ---
  try {
    // Assume you have a database connection established (e.g., $db)
    // and a 'reviews' table with columns: item_id, user_name, review_text, rating, timestamp

    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your credentials
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For better error handling

    $stmt = $db->prepare("INSERT INTO reviews (item_id, user_name, review_text, rating, timestamp) 
                         VALUES (:item_id, :user_name, :review_text, :rating, :timestamp)");

    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    if($timestamp === null){
        $stmt->bindParam(':timestamp', time()); // Use current timestamp
    } else {
        $stmt->bindParam(':timestamp', $timestamp);
    }


    $result = $stmt->execute();

    if ($result) {
      return true;
    } else {
      error_log("Failed to create review: " . print_r($stmt->errorInfo(), true)); // Log the error
      return false;
    }

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// --- Example Usage ---

// Create a review
if (create_review("product123", "John Doe", "Great product!  Highly recommended.", 5)) {
  echo "Review created successfully!";
} else {
  echo "Failed to create review.";
}

// Create a review with a timestamp
$timestamp = time() - 3600; // One hour ago
if (create_review("product456", "Jane Smith", "Okay, but could be better", 3, $timestamp)) {
    echo "
Review with timestamp created successfully!";
} else {
    echo "
Failed to create review with timestamp.";
}


// Display Reviews (Example - adjust to your display logic)
function display_reviews(string $item_id) {
    // Example - Fetch reviews from the database based on $item_id
    // This is just a placeholder - you'll need to adapt this to your database query
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your credentials
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $stmt = $db->prepare("SELECT item_id, user_name, review_text, rating, timestamp FROM reviews WHERE item_id = :item_id");
    $stmt->bindParam(':item_id', $item_id);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (count($reviews) > 0) {
        echo "<h2>Reviews for " . $item_id . "</h2>";
        foreach ($reviews as $review) {
            echo "<p><strong>User:</strong> " . $review['user_name'] . "</p>";
            echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
            echo "<p>" . $review['review_text'] . "</p>";
            echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
            echo "<br>";
        }
    } else {
        echo "<p>No reviews found for this item.</p>";
    }
}

// Example of displaying reviews:
display_reviews("product123");
?>


<?php

/**
 * User Review Class
 * 
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $reviewId;
    private $productId; // The ID of the product being reviewed
    private $userId;
    private $rating;
    private $comment;
    private $date;


    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     * 
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s');  // Set the review date and time
    }

    /**
     * Getters for the review attributes.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display the review in a formatted string.
     *
     * @return string The review displayed.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
Product ID: " . $this->getProductId() .
               "
User ID: " . $this->getUserId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}

/**
 * User Review Function
 *
 * This function demonstrates how to create and display user reviews.
 */
function displayUserReviews() {

    // Example:  Let's create some reviews
    $review1 = new UserReview(123, 45, 5, "Great product!  Highly recommend.");
    $reviewId1 = $review1->getReviewId();
    $review1->displayReview();
    echo "
";

    $review2 = new UserReview(456, 78, 4, "Good value for the price.");
    $reviewId2 = $review2->getReviewId();
    $review2->displayReview();
    echo "
";

    $review3 = new UserReview(123, 90, 3, "Could be better, but decent.");
    $reviewId3 = $review3->getReviewId();
    $review3->displayReview();
    echo "
";

}

// Call the function to display the reviews
displayUserReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item.
 *
 * @param string $productId The ID of the product/item the review is for.
 * @param string $username The username of the user writing the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array  $db_connection A database connection object. (Required)
 *
 * @return array An array containing success or error messages.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment, array $db_connection)
{
  // Input validation - Basic example, expand this for production
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  // Sanitize input -  Very important for security
  $productId = mysqli_real_escape_string($db_connection, $productId);
  $username = mysqli_real_escape_string($db_connection, $username);
  $rating   = mysqli_real_escape_string($db_connection, $rating);
  $comment  = mysqli_real_escape_string($db_connection, $comment);



  // SQL Query -  Use prepared statements for security!  (Example - adapt for your table structure)
  $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
          VALUES ('$productId', '$username', '$rating', '$comment')";

  $result = mysqli_query($db_connection, $sql);


  if ($result) {
    return ['success' => true, 'message' => 'Review created successfully!'];
  } else {
    return ['success' => false, 'message' => 'Error creating review: ' . mysqli_error($db_connection)];
  }
}

/**
 * Example usage (Illustrative - needs connection setup)
 */

// Simulated database connection (replace with your actual connection)
//$db = new mysqli('localhost', 'username', 'password', 'database_name');
//if ($db->connect_error) {
//    die("Connection failed: " . $db->connect_error);
//}

// Sample Data
//$productId = '123';
//$username = 'john.doe';
//$rating = '4';
//$comment = 'Great product, highly recommended!';

// Create the review
//$review_result = create_user_review($productId, $username, $rating, $comment, $db);

// Display the result
//if ($review_result['success']) {
//  echo "Review created: " . $review_result['message'] . "
";
//} else {
//  echo "Error: " . $review_result['message'] . "
";
//}

// Close the connection - always a good practice.
// $db->close();



/**
 *  Functions for Read, Update, and Delete Reviews (Conceptual -  Adapt to your needs)
 */

/**
 * Read Reviews for a Product
 * @param string $productId
 * @param array $db_connection
 * @return array
 */
function read_reviews(string $productId, array $db_connection) {
  // Implementation to query the database and return the reviews.
  // This is just a placeholder -  You need to build this.
  return ['success' => true, 'reviews' => []]; // Return an empty array of reviews
}


/**
 * Update a Review (Conceptual)
 * @param string $reviewId The ID of the review to update.
 * @param array $db_connection
 * @return array
 */
function update_review(string $reviewId, $data, array $db_connection) {
  // Implementation to update the review.
  return ['success' => true, 'message' => 'Review updated successfully'];
}


/**
 * Delete a Review (Conceptual)
 * @param string $reviewId The ID of the review to delete.
 * @param array $db_connection
 * @return array
 */
function delete_review(string $reviewId, array $db_connection) {
  // Implementation to delete the review from the database.
  return ['success' => true, 'message' => 'Review deleted successfully'];
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic data validation and error handling.
 *
 * @param string $review_text The review text submitted by the user.
 * @param int    $product_id  The ID of the product the review is for.
 * @param int    $user_id     The ID of the user submitting the review (optional, for authentication).
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 *
 * @return array An array containing the result of the operation:
 *              - 'success' => true if the operation was successful, false otherwise.
 *              - 'message' => A message describing the result (e.g., "Review created successfully", "Error saving review").
 *              - 'review_id' => The ID of the newly created review (if successful).
 *              - 'review' => The review object (if successful).
 */
function create_review(string $review_text, int $product_id, int $user_id = null, int $rating = null)
{
  // **Input Validation**
  if (empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review_id' => null,
      'review' => null
    ];
  }

  if (!is_numeric($product_id)) {
    return [
      'success' => false,
      'message' => 'Invalid product ID.',
      'review_id' => null,
      'review' => null
    ];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Invalid rating. Rating must be between 1 and 5.',
      'review_id' => null,
      'review' => null
    ];
  }


  // **Database Interaction (Replace with your actual database connection)**
  // This is a simplified example using a placeholder database connection.
  // In a real application, you'd use PDO, MySQLi, or a similar mechanism.
  $db_host = 'localhost';
  $db_name = 'your_database_name';
  $db_user = 'your_username';
  $db_password = 'your_password';

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Database connection error: ' . $e->getMessage(),
      'review_id' => null,
      'review' => null
    ];
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";

  // Prepare the statement
  $stmt = $pdo->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $product_id);
  if ($user_id) {
    $stmt->bindParam(':user_id', $user_id);
  }
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_text', $review_text);

  // Execute the statement
  $stmt->execute();

  // Get the last inserted ID
  $review_id = $pdo->lastInsertId();

  // Close the statement and connection
  $stmt = null;
  $pdo = null;


  return [
    'success' => true,
    'message' => 'Review created successfully.',
    'review_id' => $review_id,
    'review' => [
      'product_id' => $product_id,
      'user_id' => $user_id,
      'rating' => $rating,
      'review_text' => $review_text,
      'id' => $review_id
    ]
  ];
}


// **Example Usage**
// Simulate a review submission

// Create a review
$review_result = create_review('This product is amazing!', 123, 12, 5);

if ($review_result['success']) {
  echo "Review created successfully. Review ID: " . $review_result['review_id'] . "<br>";
  print_r($review_result['review']);  // Prints the review details
} else {
  echo "Error creating review: " . $review_result['message'] . "<br>";
}


//  Example demonstrating error handling
$review_result = create_review('', 456, 78, 3);
if ($review_result['success']) {
    echo "Review created successfully. Review ID: " . $review_result['review_id'] . "<br>";
} else {
    echo "Error creating review: " . $review_result['message'] . "<br>";
}
?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool
    {
        // Validation: Check rating range
        if (!preg_match('/^[1-5]$/', $rating)) {
            return false;
        }

        // Create review object
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp for date
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     *
     * @return array An array of review objects for the product.  Returns an empty array if no reviews exist.
     */
    public function getReviewsByProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Retrieves a single review by product ID and username.
     *
     * @param int $productId The ID of the product.
     * @param string $username The username of the reviewer.
     *
     * @return array|null An array containing the review object, or null if not found.
     */
    public function getReviewByProductAndUsername(int $productId, string $username): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $productId && $review['username'] === $username) {
                return [$review];
            }
        }
        return null;
    }

    /**
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     *
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float
    {
        $reviews = $this->getReviewsByProduct($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += (float)$review['rating'];
        }

        return round($totalRating / count($reviews), 2); // Round to 2 decimal places
    }


    /**
     * Displays a list of reviews for a product (for demonstration purposes).
     *
     * @param array $reviews  The reviews to display.
     */
    public function displayReviews(array $reviews)
    {
        echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>";
        if (empty($reviews)) {
            echo "<p>No reviews found.</p>";
            return;
        }

        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
            echo "<strong>Date:</strong> " . $review['date'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "JohnDoe", "5", "Great product! Highly recommended.");
$reviewSystem->addReview(123, "JaneSmith", "4", "Good product, but could be better.");
$reviewSystem->addReview(456, "PeterJones", "3", "It's okay.");

// Get reviews for product ID 123
$reviews = $reviewSystem->getReviewsByProduct(123);
$reviewSystem->displayReviews($reviews);

// Get average rating for product ID 123
$averageRating = $reviewSystem->getAverageRatingForProduct(123);
echo "<br>Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews found.") . "<br>";

// Get a single review
$singleReview = $reviewSystem->getReviewByProductAndUsername(123, "JohnDoe");
if ($singleReview) {
    echo "<br>Single Review: ";
    $reviewSystem->displayReviews($singleReview);
} else {
    echo "<p>Review not found.</p>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $reviewId (Optional) - Unique ID for the review.  If not provided, a new ID will be generated.
   * @param int $userId  The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating   The rating (e.g., 1-5 stars).
   * @param string $comment The user's review comment.
   */
  public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Set the review date/time
  }

  /**
   * Getters for each property
   *
   * @return mixed
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Sets a property (for update operations)
   *
   * @param string $property The property to update (e.g., 'comment', 'rating')
   * @param mixed $value The new value for the property.
   */
  public function setProperty($property, $value) {
    switch ($property) {
      case 'comment':
        $this->comment = $value;
        break;
      case 'rating':
        $this->rating = $value;
        break;
      // Add more cases for other properties as needed
      default:
        // Handle invalid property names - throw an exception or log an error
        throw new InvalidArgumentException("Invalid property name: " . $property);
    }
  }

  /**
   *  Display the review in a formatted string.
   *
   * @return string  A formatted string representing the review.
   */
  public function __toString() {
    return "Review ID: " . $this->getReviewId() .
           "
User ID: " . $this->getUserId() .
           "
Product ID: " . $this->getProductId() .
           "
Rating: " . $this->getRating() .
           "
Comment: " . $this->getComment() .
           "
Date: " . $this->getDate();
  }
}

/**
 * User Review Review Function
 */
function displayReview(UserReview $review) {
  echo $review; // Use the __toString() method of the UserReview class
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
displayReview($review1);

echo "
-------------------
";

$review2 = new UserReview(null, 456, 789, 3, "It was okay, but a bit pricey.");
displayReview($review2);

echo "
-------------------
";

$review3 = new UserReview(10, 789, 123, 4, "Excellent value for the money!");
$review3->setProperty("comment", "Updated my comment.");
displayReview($review3); // Show updated comment

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $userId      The ID of the user submitting the review. (Can be user ID, username, etc.)
 * @param string $reviewText  The text of the review.
 * @param array  $reviews     (Optional)  Existing reviews to add to.  Defaults to an empty array.
 *
 * @return array An array containing:
 *   - 'reviews': The updated array of reviews.
 *   - 'success':  True if the review was added successfully, False otherwise.
 *   - 'error':   An error message if the review could not be added.
 */
function create_review(string $productName, string $userId, string $reviewText, array &$reviews = []) {

    // **Validation (Important!)**
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'success' => false, 'error' => 'Review text cannot be empty.'];
    }

    // **Data Sanitization - VERY IMPORTANT**
    // In a real application, you'd want to sanitize the reviewText more robustly,
    // potentially using htmlspecialchars() or escaping functions appropriate for
    // your database and application.
    $sanitizedReviewText = htmlspecialchars($reviewText); // Simple example - improve for production

    // **Review Data**
    $newReview = [
        'userId' => $userId,
        'reviewText' => $sanitizedReviewText,
        'timestamp' => time() // Use the current timestamp
    ];

    // **Add Review**
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'success' => true];
}


/**
 * Display User Reviews
 *
 * This function takes an array of reviews and formats them for display.
 *
 * @param array $reviews  An array of review objects.
 *
 * @return string HTML formatted review output.
 */
function display_reviews(array $reviews) {
    $output = "<h2>Reviews for {$reviews[0]['userId']}</h2>"; // Assume first review's user ID is correct for display.

    if (empty($reviews)) {
        $output .= "<p>No reviews yet.</p>";
    } else {
        foreach ($reviews as $review) {
            $output .= "<div class='review'>";
            $output .= "<p><strong>User:</strong> " . htmlspecialchars($review['userId']) . "</p>";  //Escape for display too
            $output .= "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
            $output .= "<p><strong>Date:</strong> " . date('Y-m-d H:i:s', strtotime($review['timestamp'])) . "</p>";
            $output .= "</div>";
        }
    }
    return $output;
}


// **Example Usage:**

// 1.  Create a Review
$product = "Awesome Widget";
$user = "john_doe";
$comment = "This widget is amazing!  I love it!";

$newReviews = create_review($product, $user, $comment);

if ($newReviews['success']) {
    echo "Review created successfully!<br>";
    print_r($newReviews['reviews']); // Print the updated reviews array
} else {
    echo "Error creating review: " . $newReviews['error'] . "<br>";
}

// 2. Display the Reviews
$existingReviews = [
    ['userId' => 'jane_smith', 'reviewText' => 'Good product, but a bit pricey.', 'timestamp' => time() - 3600],
    ['userId' => 'john_doe', 'reviewText' => 'Fantastic!', 'timestamp' => time() - 7200]
];

echo "<hr>";
echo display_reviews($existingReviews);

?>


<?php

/**
 * User Review Class
 */
class UserReview {
  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor for the UserReview class.
   *
   * @param int $reviewId (optional) - Unique identifier for the review.  Defaults to 0.
   * @param int $userId The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $comment The user's comment about the product.
   * @param string $date The date the review was submitted (YYYY-MM-DD format).
   */
  public function __construct($reviewId = 0, $userId, $productId, $rating, $comment, $date) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = $date;
  }

  /**
   * Getters for each attribute.
   *
   * @return mixed
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   *  Validation function -  Basic validation.  Extend as needed.
   *
   * @return bool True if valid, false otherwise.
   */
  public function isValid() {
    // Basic validation: Rating should be between 1 and 5
    if ($this->rating < 1 || $this->rating > 5) {
      return false;
    }
    // Add more validation as needed (e.g., comment length, date format)
    return true;
  }
}


/**
 * User Review Review Function
 */
function reviewReview(UserReview $review) {
  // This is a simple review function.  You'll likely want to
  // integrate this with a database, display it on a page,
  // or perform other actions.

  if ($review->isValid()) {
    echo "Review ID: " . $review->getReviewId() . "<br>";
    echo "User ID: " . $review->getUserId() . "<br>";
    echo "Product ID: " . $review->getProductId() . "<br>";
    echo "Rating: " . $review->getRating() . "<br>";
    echo "Comment: " . $review->getComment() . "<br>";
    echo "Date: " . $review->getDate() . "<br>";
    echo "<br>";
  } else {
    echo "Invalid Review Data.  Please check the rating and comment.<br>";
  }
}



// Example Usage:
$review1 = new UserReview(1, 123, 456, 5, "Great product!", "2023-10-27");
reviewReview($review1);

$review2 = new UserReview(2, 456, 789, 2, "It's okay, but...", "2023-10-26");
reviewReview($review2);

$review3 = new UserReview(3, 789, 101, 6, "Excellent!", "2023-10-27"); // Invalid rating
reviewReview($review3);
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and associated data (like product ID, rating, etc.)
 * and stores it in a database.
 *
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the user's review.
 * @param int $rating       The user's rating (e.g., 1-5).
 * @param string $userId     (Optional) The ID of the user leaving the review.
 * @param array  $extraData  (Optional)  Any other relevant data to store with the review.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(
    int $productId,
    string $reviewText,
    int $rating,
    string $userId = null,
    array $extraData = []
) {
    // **IMPORTANT:  Replace this with your actual database connection and query logic**
    // This is a placeholder example.

    // Database connection (Replace with your connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // 1. Sanitize input data - VERY IMPORTANT to prevent SQL injection
        $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
        $reviewText = htmlspecialchars($reviewText); // Escape HTML entities
        $rating = intval($rating); // Ensure rating is an integer

        // 2. Build the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, review_text, rating, created_at) VALUES (:product_id, :user_id, :review_text, :rating, NOW())";

        // 3. Prepare the statement
        $stmt = $db->prepare($sql);

        // 4. Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        if ($userId) {
            $stmt->bindParam(':user_id', $userId);
        }
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        // 5. Execute the statement
        $result = $stmt->execute();

        // 6. Check for success
        if ($result) {
            return true;
        } else {
            // Log the error for debugging.  Very important!
            error_log("Error saving review: " . $db->errorInfo()[2]);
            return false;
        }

    } catch (PDOException $e) {
        // Handle database connection errors
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


// **Example Usage:**

// Let's assume a product ID of 123 and a user ID of 456 (if available)
$productId = 123;
$reviewText = "This product is amazing!  It exceeded my expectations.";
$rating = 5;
$userId = 456;  // Optional user ID

if (saveUserReview($productId, $reviewText, $rating, $userId)) {
    echo "Review successfully saved!";
} else {
    echo "Failed to save review.";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param string $userId (optional) The ID of the user leaving the review.  If not provided, generates a unique ID.
 * @return array|string  An array containing the review data (review_id, product_name, review_text, user_id, date) if successful, or an error message string if there's an issue.
 */
function storeUserReview(string $productName, string $reviewText, string $userId = null) {
  // Input Validation - Basic checks
  if (empty($productName)) {
    return "Error: Product name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review text cannot be empty.";
  }

  // Sanitize Input (more robust sanitization is recommended for production)
  $productName = htmlspecialchars($productName);
  $reviewText = htmlspecialchars($reviewText);

  // Generate unique User ID if not provided
  if ($userId === null || empty($userId)) {
    $userId = uniqid(); // Generate a unique ID
  }

  // Get Current Timestamp
  $timestamp = date('Y-m-d H:i:s');

  // Prepare Data for Storage (Replace this with your database interaction)
  $reviewData = [
    'review_id' => $userId, // Using the ID as review_id for simplicity
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_id' => $userId,
    'date' => $timestamp,
  ];

  // Simulate Database Storage - Replace with your actual database code
  // Example using an associative array:
  //  $reviews = loadReviewsFromDatabase(); // Replace with your DB function
  //  $reviews[] = $reviewData;
  //  saveReviewsToDatabase($reviews);

  // Simulate Successful Storage
  return $reviewData;
}


/**
 * Example Usage:
 */

// Store a review
$review = storeUserReview("Awesome Widget", "This widget is fantastic! I highly recommend it.");
if (is_array($review)) {
  echo "Review saved successfully:<br>";
  echo "Review ID: " . $review['review_id'] . "<br>";
  echo "Product Name: " . $review['product_name'] . "<br>";
  echo "Review Text: " . $review['review_text'] . "<br>";
  echo "User ID: " . $review['user_id'] . "<br>";
  echo "Date: " . $review['date'] . "<br>";
} else {
  echo "Error: " . $review; // Display the error message
}

// Store a review with a specific user ID (for testing)
$review2 = storeUserReview("Another Great Product", "Great product!", "user123");
if (is_array($review2)) {
    echo "<br>Review 2 saved successfully: <br>";
    echo "Review ID: " . $review2['review_id'] . "<br>";
} else {
    echo "<br>Error: " . $review2;
}


//Example with invalid input
$invalidReview = storeUserReview("", "This is a review.");
echo "<br>Invalid Review: " . $invalidReview;
?>


<?php

// ... (storeUserReview function from above)

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

try {
  $mysqli = new mysqli($host, $username, $password, $database);

  if ($mysqli->connect_error) {
    throw new Exception("Connection failed: " . $mysqli->connect_error);
  }

  // Store the review
  $reviewData = storeUserReview("Awesome Widget", "This widget is fantastic!", "user123");

  if (is_array($reviewData)) {
    $sql = "INSERT INTO reviews (product_name, review_text, user_id, date)
            VALUES ('" . $mysqli->real_escape_string($reviewData['product_name']) . "',
                    '" . $mysqli->real_escape_string($reviewData['review_text']) . "',
                    '" . $mysqli->real_escape_string($reviewData['user_id']) . "',
                    '" . $mysqli->real_escape_string($reviewData['date']) . "')";

    if ($mysqli->query($sql) === TRUE) {
      echo "Review saved successfully!";
    } else {
      echo "Error: " . $sql . "<br>" . $mysqli->error;
    }
  } else {
    echo "Error saving review: " . $reviewData;
  }

  $mysqli->close();

} catch (Exception $e) {
  echo "An error occurred: " . $e->getMessage();
}
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a specific item.
 *
 *  @param string $item_id      The unique identifier of the item being reviewed.
 *  @param string $user_id      The unique identifier of the user writing the review.
 *  @param string $review_text  The text content of the review.
 *  @param int    $rating       The rating given for the item (e.g., 1-5).
 *  @param string $db_connection (Optional) A connection object to a database. If not provided,
 *                                 a dummy connection is created.
 *
 *  @return array  An array containing success/failure status and any relevant message.
 */
function storeUserReview(
    string $item_id,
    string $user_id,
    string $review_text,
    int $rating,
    $db_connection = null
): array {

    $status = 'failed';
    $message = 'Unknown error.';

    // Create a dummy database connection if not provided
    if (!$db_connection) {
        $db_connection = new stdClass(); // Simple object to mimic a connection
        $db_connection->query = function($sql) {
            echo "Executing query: " . $sql . "
"; // Simulate database query
            return true; // Simulate success
        };
    }

    try {
        // 1. Validate Inputs (Add more validation as needed)
        if (empty($item_id) || empty($review_text) || $rating < 1 || $rating > 5) {
            $message = 'Invalid input data.  Item ID, review text, and rating must be provided and rating must be between 1 and 5.';
            return ['status' => 'failed', 'message' => $message];
        }

        // 2. Construct SQL Query
        $sql = "INSERT INTO reviews (item_id, user_id, review_text, rating)
                VALUES ('$item_id', '$user_id', '$review_text', $rating)";

        // 3. Execute Query
        if ($db_connection->query($sql)) {
            $status = 'success';
            $message = 'Review stored successfully.';
        } else {
            $message = 'Error storing review.  Database query failed.';
        }

    } catch (Exception $e) {
        $message = 'Exception occurred: ' . $e->getMessage();
    }

    return ['status' => $status, 'message' => $message];
}


/**
 *  Display User Reviews Function (Example)
 *
 *  This function retrieves and displays reviews for a given item.
 *
 *  @param string $item_id     The ID of the item to retrieve reviews for.
 *  @param int    $limit        The maximum number of reviews to retrieve (optional, default 3).
 *  @param int    $offset       The starting offset for retrieving reviews (optional, default 0).
 *  @param $db_connection     A connection object to a database.
 *
 *  @return array  An array containing the reviews (as an array of associative arrays) or an error message.
 */
function displayUserReviews(string $item_id, int $limit = 3, int $offset = 0, $db_connection = null): array {
    $reviews = [];

    // Create a dummy database connection if not provided
    if (!$db_connection) {
        $db_connection = new stdClass(); // Simple object to mimic a connection
        $db_connection->query = function($sql) {
            echo "Executing query: " . $sql . "
"; // Simulate database query
            return [
                ['item_id', 'user_id', 'review_text', 'rating'],
                ['1', 'user1', 'Great product!', 5],
                ['2', 'user2', 'Good value.', 4],
                ['3', 'user3', 'Could be better.', 3]
            ]; // Simulate a result set
        };
    }

    try {
        $sql = "SELECT item_id, user_id, review_text, rating
                FROM reviews
                WHERE item_id = '$item_id'
                LIMIT $limit
                OFFSET $offset";

        $result = $db_connection->query($sql);

        if ($result) {
            foreach ($result as $row) {
                $reviews[] = [
                    'item_id' => $row['item_id'],
                    'user_id' => $row['user_id'],
                    'review_text' => $row['review_text'],
                    'rating' => $row['rating']
                ];
            }
        }

    } catch (Exception $e) {
        return ['status' => 'failed', 'message' => 'Exception: ' . $e->getMessage()];
    }

    return ['status' => 'success', 'reviews' => $reviews];
}



// --- Example Usage ---
// Simulate a database connection (Replace with your actual connection)
$db_connection = new stdClass();

// Store a review
$result = storeUserReview('product123', 'user1', 'This is a fantastic product!', 4, $db_connection);
print_r($result); // Output the result of storeUserReview

// Display reviews for product123
$review_results = displayUserReviews('product123', 2, 0, $db_connection);
print_r($review_results); // Output the result of displayUserReviews


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing:
 *   - 'success': True if the review was submitted successfully, false otherwise.
 *   - 'review': The submitted review (if successful).
 *   - 'error': An error message (if applicable).
 */
function submitReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
  // **Input Validation (Crucial!)**
  if (empty($productId)) {
    return ['success' => false, 'review' => null, 'error' => 'Product ID cannot be empty.'];
  }
  if (empty($userName)) {
    return ['success' => false, 'review' => null, 'error' => 'User name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'review' => null, 'error' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'review' => null, 'error' => 'Rating must be between 1 and 5.'];
  }

  // **Simulating Database Insertion (Replace with your actual database logic)**
  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'submissionDate' => date('Y-m-d H:i:s') // Add a timestamp for tracking
  ];

  // **In a real application, you would insert this $review array into your database.**
  // For example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  // $stmt = $db->prepare("INSERT INTO reviews (productId, userName, reviewText, rating, submissionDate) VALUES (:productId, :userName, :reviewText, :rating, :submissionDate)");
  // $stmt->execute($review);

  // **Simulated Success**
  return ['success' => true, 'review' => $review, 'error' => null];
}

/**
 * Function to Retrieve Reviews for a Product
 *
 * This function retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing:
 *   - 'reviews': An array of review objects (each object has 'userName', 'reviewText', 'rating', 'submissionDate').
 *   - 'error': An error message (if applicable).
 */
function getReviews(string $productId) {
    // **Simulate retrieving reviews from a database**
    // In a real application, you would query your database.

    //Simulated Data
    $reviews = [
        ['productId' => '123', 'userName' => 'Alice', 'reviewText' => 'Great product!', 'rating' => 5, 'submissionDate' => date('Y-m-d H:i:s')],
        ['productId' => '123', 'userName' => 'Bob', 'reviewText' => 'It was okay.', 'rating' => 3, 'submissionDate' => date('Y-m-d H:i:s')],
        ['productId' => '456', 'userName' => 'Charlie', 'reviewText' => 'Amazing!', 'rating' => 5, 'submissionDate' => date('Y-m-d H:i:s')]
    ];

    //Filter Reviews by Product ID (Important for security)
    $filteredReviews = [];
    foreach ($reviews as $review) {
        if ($review['productId'] == $productId) {
            $filteredReviews[] = $review;
        }
    }

    return ['reviews' => $filteredReviews, 'error' => null];
}


// **Example Usage**

// Submit a review
$reviewResult = submitReview('123', 'David', 'Excellent value for money!', 4);

if ($reviewResult['success']) {
  echo "Review submitted successfully:<br>";
  echo "Reviewer: " . $reviewResult['review']['userName'] . "<br>";
  echo "Review: " . $reviewResult['review']['reviewText'] . "<br>";
  echo "Rating: " . $reviewResult['review']['rating'] . "<br>";
} else {
  echo "Error submitting review: " . $reviewResult['error'] . "<br>";
}


// Retrieve reviews for product '123'
$reviewsResult = getReviews('123');

if ($reviewsResult['error'] == null) {
    echo "<h3>Reviews for product 123:</h3>";
    foreach ($reviewsResult['reviews'] as $review) {
        echo "<strong>Reviewer:</strong> " . $review['userName'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['reviewText'] . "<br><br>";
    }
} else {
    echo "Error retrieving reviews: " . $reviewsResult['error'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation, retrieval, and updating of user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $reviewId (Optional) The ID of the review to update. If not provided,
 *                          a new review is created.
 *
 * @return array An array containing the review ID (if a new review was created)
 *               or the updated review ID, or an error message if something went wrong.
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, int $reviewId = 0)
{
    // Input Validation - VERY IMPORTANT
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return ['error' => 'All fields are required.'];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    // Database connection (replace with your actual connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment) 
                ON DUPLICATE KEY UPDATE comment = :comment";

        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Return the review ID if a new review was created, otherwise return the updated ID.
        if ($reviewId == 0) {
            $reviewId = $db->lastInsertId();
            return $reviewId;
        } else {
            return $reviewId;
        }


    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database Error: " . $e->getMessage()); // Log for debugging
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}

// Example Usage:

// Create a new review
$newReviewId = createOrUpdateReview('product123', 'user456', '4', 'Great product!');

if (isset($newReviewId) && $newReviewId > 0) {
    echo "New review created with ID: " . $newReviewId . "<br>";
} else {
    echo "Error creating new review.<br>";
    if (isset($_POST['error'])) {
        echo "Error: " . $_POST['error'] . "<br>";
    }
}

// Update an existing review
$updatedReviewId = createOrUpdateReview('product123', 'user456', '5', 'Even better than I thought!');

if (isset($updatedReviewId)) {
    echo "Review updated with ID: " . $updatedReviewId . "<br>";
} else {
    echo "Error updating review.<br>";
    if (isset($_POST['error'])) {
        echo "Error: " . $_POST['error'] . "<br>";
    }
}

// Example form (for submitting reviews)
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Reviews</title>
</head>
<body>

<h1>Add a Review</h1>

<form method="POST" action="">
    <label for="productId">Product ID:</label>
    <input type="text" id="productId" name="productId" value="product123" required><br><br>

    <label for="userId">User ID:</label>
    <input type="text" id="userId" name="userId" value="user456" required><br><br>

    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

    <label for="comment">Review Comment:</label>
    <textarea id="comment" name="comment" rows="4" cols="50" required></textarea><br><br>

    <button type="submit">Submit Review</button>
</form>

<?php
if (isset($_POST['productId']) && isset($_POST['userId']) && isset($_POST['rating']) && isset($_POST['comment'])) {
    $productId = $_POST['productId'];
    $userId = $_POST['userId'];
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];

    $reviewId = createOrUpdateReview($productId, $userId, $rating, $comment);

    if (isset($reviewId) && $reviewId > 0) {
        echo "<p>Review created successfully with ID: " . $reviewId . "</p>";
    } else {
        echo "<p style='color: red;'>Error creating review: " . $reviewId['error'] . "</p>";
    }
}
?>

</body>
</html>


<?php

/**
 * This class provides functionality for managing user reviews.
 */
class ReviewManager {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $user_id The ID of the user submitting the review.
     * @param string $title The title of the review.
     * @param string $comment The content of the review.
     * @param int $rating  The rating given (e.g., 1-5).
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user_id, string $title, string $comment, int $rating) {
        // Validation (basic - you might want more robust validation)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'user_id' => $user_id,
            'title'   => $title,
            'comment' => $comment,
            'rating'  => $rating,
            'date'    => date('Y-m-d H:i:s') // Add timestamp for organization
        ];

        $this->reviews[] = $review;
        return true;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by user ID.
     *
     * @param string $user_id The ID of the user to filter by.
     * @return array An array of reviews for the specified user.
     */
    public function getReviewsByUser(string $user_id) {
        $userReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['user_id'] === $user_id) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }


    /**
     * Retrieves reviews based on a given rating.
     *
     * @param int $rating The rating to filter by.
     * @return array An array of reviews with the specified rating.
     */
    public function getReviewsByRating(int $rating) {
        $filteredReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['rating'] === $rating) {
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }
}



/**
 *  Example User Review Function  (Illustrative - This is not a full review system)
 */
function displayUserReviews($reviewManager, $userId) {
    $reviews = $reviewManager->getReviewsByUser($userId);

    if (empty($reviews)) {
        echo "<p>No reviews found for user: " . htmlspecialchars($userId) . "</p>"; // Use htmlspecialchars for security
        return;
    }

    echo "<h2>Reviews for User " . htmlspecialchars($userId) . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Title:</strong> " . htmlspecialchars($review['title']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
        echo "<strong>Date:</strong> " . htmlspecialchars($review['date']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Create a ReviewManager instance
$reviewManager = new ReviewManager();

// Add some reviews
$reviewManager->addReview('user123', 'Great Product!', 'Highly recommended!', 5);
$reviewManager->addReview('user123', 'Good Value', 'Worth the price.', 4);
$reviewManager->addReview('user456', 'Disappointed', 'Didn\'t meet expectations.', 2);

// Display reviews for user123
displayUserReviews($reviewManager, 'user123');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<br><br><h2>All Reviews:</h2>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";


// Get reviews with a rating of 5
$fiveStarReviews = $reviewManager->getReviewsByRating(5);
echo "<br><br><h2>Reviews with Rating 5:</h2>";
print_r($fiveStarReviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a product or item.
 * It handles input validation, sanitization, and database interaction.
 *
 * @param string $product_id The ID of the product to review.
 * @param string $name       The name of the user submitting the review.
 * @param string $comment   The user's review comment.
 * @param string $db_connection The established database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the outcome of the submission.
 *   - 'review_id': The ID of the newly created review (if successful).
 */
function submit_review(string $product_id, string $name, string $comment, object $db_connection) {
  // Input validation (basic - extend for more robust validation)
  if (empty($product_id) || empty($name) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'All fields are required.',
    ];
  }

  // Sanitize input (important to prevent SQL injection)
  $name = filter_var($name, FILTER_SANITIZE_STRING);
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);


  // Prepare SQL query (using prepared statements for security)
  $sql = "INSERT INTO reviews (product_id, user_name, review_text) VALUES (?, ?, ?)";
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    // Handle database error
    return [
      'success' => false,
      'message' => 'Database error: ' . print_r($db_connection->error, true),
    ];
  }

  // Bind parameters
  $stmt->bind_param("ss", $name, $comment);

  // Execute query
  if (!$stmt->execute()) {
    // Handle database error
    return [
      'success' => false,
      'message' => 'Database error: ' . print_r($stmt->error, true),
    ];
  }

  // Get the ID of the newly inserted review
  $review_id = $db_connection->insert_id;

  // Close the statement
  $stmt->close();

  return [
    'success' => true,
    'message' => 'Review submitted successfully!',
    'review_id' => $review_id,
  ];
}


/**
 * Function to retrieve reviews for a product
 *
 * @param int $product_id The ID of the product.
 * @param object $db_connection The established database connection.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects (or an empty array if no reviews).
 *   - 'success': True if reviews were retrieved successfully, false otherwise.
 *   - 'message': A message indicating the outcome.
 */
function get_reviews(int $product_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Database error: ' . print_r($db_connection->error, true),
        ];
    }

    $stmt->bind_param("i", $product_id); // 'i' indicates an integer parameter

    $stmt->execute();

    $reviews = [];
    $result = $stmt->get_result();

    if ($result === false) {
      return [
          'reviews' => [],
          'success' => false,
          'message' => 'Error retrieving reviews: ' . print_r($stmt->error, true),
      ];
    }
    
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();

    return [
        'reviews' => $reviews,
        'success' => true,
    ];
}



// Example Usage (Simulated Database Connection - Replace with your actual connection)
// This is just for demonstration.  You'll need to set up your database connection.

// Mock Database Connection Object (Replace with your actual database connection)
$db_connection = new stdClass();
$db_connection->connect = function() {
    // Simulate a successful connection.  In a real application, this would handle the connection.
    return true;
};
$db_connection->query = function($sql) {
    // Simulate a query execution.
    return true;
};
$db_connection->insert_id = 123; // Simulate a review ID



// Submit a review
$review_result = submit_review(1, "John Doe", "This is a great product!", $db_connection);
print_r($review_result);


// Retrieve reviews for product 1
$reviews_result = get_reviews(1, $db_connection);
print_r($reviews_result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $itemId The ID of the item being reviewed (e.g., product ID, movie ID).
 * @param array $reviews An array to store reviews (default empty).
 *
 * @return array  An updated array of reviews. Returns the original array if there's an error.
 */
function create_review(string $username, string $reviewText, int $itemId, array &$reviews = []) {

  // Input Validation -  Important for security and data integrity
  if (empty($username) || empty($reviewText) || $itemId <= 0) {
    error_log("Invalid review data submitted."); // Log the error for debugging.  Don't display directly to the user.
    return $reviews; // Return the unchanged array.
  }

  // Sanitize input to prevent XSS and SQL Injection
  $username = htmlspecialchars($username);
  $reviewText = htmlspecialchars($reviewText);

  // Create the review object (you can customize this)
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'), // Add a timestamp for ordering
    'itemId' => $itemId,
  ];

  // Add the review to the array.  Use 'array_push' for efficient appending.
  array_push($reviews, $review);

  return $reviews;
}


/**
 * Display Reviews Function
 *
 *  Displays the reviews associated with a given item ID.
 *
 * @param array $reviews An array of review objects.
 * @param int $itemId The ID of the item being reviewed.
 *
 * @return void  Prints the reviews to the screen.
 */
function display_reviews(array $reviews, int $itemId) {
  echo "<h2>Reviews for Item ID: " . $itemId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['review'] . "<br>";
    echo "<em>Timestamp: " . $review['timestamp'] . "</em>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:

// Initialize an empty array to store reviews
$reviews = [];

// Create some reviews
$reviews = create_review("John Doe", "Great product!  Highly recommended.", 123);
$reviews = create_review("Jane Smith", "It was okay, but could be better.", 123);
$reviews = create_review("Peter Jones", "Excellent value for money.", 456);

// Display the reviews
display_reviews($reviews, 123);

//Display reviews for item 456
display_reviews($reviews, 456);


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId  The unique identifier for the product/service being reviewed.
 * @param string $reviewText  The text of the user's review.
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 * @param string $username    The username of the reviewer.
 *
 * @return array  An array containing the review details, or an error message if the submission fails.
 */
function submitReview(string $productId, string $reviewText, int $rating, string $username): array
{
    // **Input Validation** (Important for security and data integrity)
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }

    // **Data Sanitization** (Crucial for security - prevent XSS and SQL injection)
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); // Escape for HTML
    $username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

    // **Store the Review (Simulated Database Interaction)**
    // In a real application, you'd connect to a database here.
    // This is a simplified example.
    $review = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'username' => $username,
        'timestamp' => time(), // Add a timestamp for tracking review creation
    ];

    // **Store Review in an Array (for demonstration)**
    // In a real application, you'd save this data to a database.
    // Example:  $reviews[] = $review;  or use a session variable or other persistent storage.

    return $review; // Return the new review data
}

/**
 * Display Reviews Function
 *
 * This function takes an array of reviews and displays them in a user-friendly format.
 *
 * @param array $reviews  An array of review objects (as returned by `submitReview`).
 *
 * @return string  HTML markup to display the reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<ul>";
    foreach ($reviews as $review) {
        $html .= '<li>';
        $html .= '<strong>' . $review['username'] . '</strong> - Rating: ' . $review['rating'] . ' - ' . $review['reviewText'];
        $html .= '</li>';
    }
    $html .= "</ul>";
    return $html;
}


// **Example Usage:**

// Simulate submitting a review
$reviewResult = submitReview('product123', 'This is a great product!', 5, 'john.doe');

if (isset($reviewResult['error'])) {
    echo "<p style='color:red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
    // Display the review
    echo displayReviews($reviewResult);
}

//Example with an error
$errorReview = submitReview('', 'bad review', 3, 'jane');
if (isset($errorReview['error'])) {
    echo "<p style='color:red;'>Error: " . $errorReview['error'] . "</p>";
} else {
    echo displayReviews($errorReview);
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $productId;
    private $reviews = [];

    /**
     * Constructor
     *
     * @param int $productId The ID of the product or service being reviewed.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $name The user's name.
     * @param string $comment The review text.
     * @param int $rating  The rating from 1 to 5.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $name, string $comment, int $rating): bool {
        if (!isset($name, $comment) || empty($name) || empty($comment)) {
            return false; // Require name and comment
        }

        if ($rating < 1 || $rating > 5) {
            return false; // Rating must be between 1 and 5
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'rating' => $rating
        ];
        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get the average rating for this product.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        $numReviews = count($this->reviews);

        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / $numReviews;
    }

    /**
     * Get a single review by its index.
     *
     * @param int $index The index of the review to retrieve (0-based).
     * @return array|null The review object at the given index, or null if the index is invalid.
     */
    public function getReview(int $index): ?array {
        if ($index >= count($this->reviews)) {
            return null;
        }
        return $this->reviews[$index];
    }

}


/**
 * Example Usage
 */

// Create a review object for a product
$productReview = new UserReview(123);

// Add some reviews
$productReview->addReview("John Doe", "Great product!  I love it.", 5);
$productReview->addReview("Jane Smith", "Could be better.", 3);
$productReview->addReview("Peter Jones", "Excellent value for the money.", 4);

// Get all reviews
$allReviews = $productReview->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo "  Name: " . $review['name'] . "
";
    echo "  Comment: " . $review['comment'] . "
";
    echo "  Rating: " . $review['rating'] . "
";
    echo "  --- 
";
}

// Get the average rating
$averageRating = $productReview->getAverageRating();
echo "Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews yet") . "
";

// Get a specific review
$specificReview = $productReview->getReview(1);
if ($specificReview) {
    echo "Specific Review:
";
    echo "  Name: " . $specificReview['name'] . "
";
    echo "  Comment: " . $specificReview['comment'] . "
";
    echo "  Rating: " . $specificReview['rating'] . "
";
} else {
    echo "Review not found.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews  An array to store the reviews (used for demonstration).  In a real app, 
 *                         this would likely be a database.
 *
 * @return array  An array of reviews, including the new review if successful.
 */
function add_review(string $productId, string $username, string $rating, string $comment, array &$reviews = [])
{
    // Input validation - crucial for security and data integrity
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (empty($rating)) {
        return ['error' => 'Rating cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['error' => 'Comment cannot be empty.'];
    }

    // Create the review object (could be an object for better structure)
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


/**
 * Display Reviews
 *
 * This function formats and displays the reviews for a given product.
 *
 * @param array $reviews An array of reviews.
 */
function display_reviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>" . "<br>"; // Display Product ID

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Username:</strong> " . $review['username'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Initialize an empty array to store reviews (in a real app, this would be a database)
$reviews = [];

// Add some reviews
$reviews = add_review('P123', 'JohnDoe', 4, 'Great product, highly recommended!', $reviews);
$reviews = add_review('P456', 'JaneSmith', 5, 'Excellent value for money.', $reviews);
$reviews = add_review('P123', 'PeterJones', 3, 'Could be better.', $reviews);
$reviews = add_review('P789', 'AliceBrown', 1, 'Very disappointing.', $reviews);

// Display the reviews
display_reviews($reviews);

// Example of handling an error
$error_result = add_review('P123', '', 3, 'Invalid review', $reviews);
print_r($error_result);  // Output the error result
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews,
 * including the user's name, message, and rating.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewMessage The user's review message.
 * @param int $rating The user's rating (e.g., 1-5).
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $username, string $reviewMessage, int $rating)
{
  // Input Validation - VERY IMPORTANT!  This prevents malicious input.
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");  // Log the error for debugging
    return false;
  }
  if (empty($reviewMessage)) {
    error_log("Error: Review message cannot be empty.");
    return false;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize the input to prevent XSS (Cross-Site Scripting) vulnerabilities
  $username = htmlspecialchars($username);
  $reviewMessage = htmlspecialchars($reviewMessage);


  // **Database Interaction - REPLACE WITH YOUR DATABASE LOGIC**
  // This is just an example; adapt to your database and schema.
  try {
    // Create a database connection (replace with your database credentials)
    // Assuming you have a database connection established called $db
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For robust error handling

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (username, review_message, rating) VALUES (:username, :review_message, :rating)");

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_message', $review_message);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    // Return true if successful
    return true;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());  // Log the error
    return false;
  }
}

// Example Usage:
$username = "John Doe";
$review = "This product is amazing!";
$rating = 5;

if (saveUserReview($username, $review, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $productName;
    private $rating;
    private $comment;
    private $dateSubmitted;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     */
    public function __construct($userId, $productName, $rating, $comment)
    {
        $this->reviewId = uniqid(); // Generate a unique review ID
        $this->userId = $userId;
        $this->productName = $productName;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->dateSubmitted = date('Y-m-d H:i:s');
    }

    /**
     * Getters for each property
     *
     * @return mixed
     */
    public function getReviewId()
    {
        return $this->reviewId;
    }

    public function getUserId()
    {
        return $this->userId;
    }

    public function getProductName()
    {
        return $this->productName;
    }

    public function getRating()
    {
        return $this->rating;
    }

    public function getComment()
    {
        return $this->comment;
    }

    public function getDateSubmitted()
    {
        return $this->dateSubmitted;
    }

    /**
     *  Methods for saving, updating, or deleting reviews would go here.
     *  This is just a basic implementation.  For a real application,
     *  you would likely save this data to a database.
     */
}


/**
 * User Review Function (Simplified Review Submission)
 *
 * This function simulates the submission and display of a user review.
 *
 * @param array $userData  An associative array containing user data:
 *                         'userId' => int,
 *                         'productName' => string,
 *                         'rating' => int (1-5),
 *                         'comment' => string
 * @return array An associative array containing the review data if successful,
 *              or an error message if something went wrong.
 */
function submitUserReview(array $userData)
{
    // Validate input
    if (!isset($userData['userId']) || !is_int($userData['userId']) || $userData['userId'] <= 0) {
        return ['error' => 'Invalid user ID. User ID must be a positive integer.'];
    }
    if (!isset($userData['productName']) || !is_string($userData['productName']) || empty($userData['productName'])) {
        return ['error' => 'Product name is required and must be a non-empty string.'];
    }
    if (!isset($userData['rating']) || !is_int($userData['rating']) || $userData['rating'] < 1 || $userData['rating'] > 5) {
        return ['error' => 'Rating must be an integer between 1 and 5.'];
    }
    if (!isset($userData['comment']) || !is_string($userData['comment']) || empty($userData['comment'])) {
        return ['error' => 'Comment is required and must be a non-empty string.'];
    }


    // Create a new review object
    $review = new UserReview($userData['userId'], $userData['productName'], $userData['rating'], $userData['comment']);

    // Simulate saving the review (in a real application, you'd save to a database)
    //  For demonstration purposes, we just return the review data.
    return $review->getReviewId() . " - " . $review->getProductName() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment();
}


// Example Usage:
$reviewData = [
    'userId' => 123,
    'productName' => 'Awesome Widget',
    'rating' => 5,
    'comment' => 'This widget is amazing!  Highly recommended.'
];

$reviewResult = submitUserReview($reviewData);

if (isset($reviewResult['error'])) {
    echo "Error: " . $reviewResult['error'] . "
";
} else {
    echo "Review submitted successfully: " . $reviewResult . "
";
}


// Example of handling an error:
$invalidReviewData = [
    'userId' => 'abc', // Invalid user ID (string)
    'productName' => 'Bad Product',
    'rating' => 6, // Invalid rating
    'comment' => '' // Empty comment
];

$errorResult = submitUserReview($errorResult);

if (isset($errorResult['error'])) {
    echo "Error: " . $errorResult['error'] . "
";
} else {
    echo "Review submitted successfully: " . $errorResult['error'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The name of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return array An array containing the result of the operation:
 *               - 'success': True if the review was created/updated successfully, False otherwise.
 *               - 'message': A message indicating the result (e.g., 'Review created successfully', 'Error saving review').
 *               - 'review' (optional): The review data if it was successfully created or updated.
 */
function create_review(string $productId, string $username, string $rating, string $comment) {
  // Input Validation - Crucial for security and data integrity
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.', 'review' => null];
  }
  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.', 'review' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.', 'review' => null];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => null];
  }

  // In a real application, you would store this data in a database.
  // This is a simplified example using an associative array.

  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time()
  ];

  // You would typically save the $review array to a database here.
  // Example:
  // $db = new DatabaseConnection(); // Assuming you have a database connection class
  // $db->insert('reviews', $review);

  // For demonstration purposes, we'll just return the review data.
  return ['success' => true, 'message' => 'Review created successfully.', 'review' => $review];
}


/**
 * Example Usage
 */

// Create a review
$result = create_review('product_123', 'John Doe', 4, 'Great product, highly recommended!');

if ($result['success']) {
  echo "Review created successfully!  Review Details: " . print_r($result['review'], true) . "
";
} else {
  echo "Error creating review: " . $result['message'] . "
";
}

// Example with invalid rating
$result = create_review('product_456', 'Jane Smith', 6, 'Excellent!');

if ($result['success']) {
  echo "Review created successfully!  Review Details: " . print_r($result['review'], true) . "
";
} else {
  echo "Error creating review: " . $result['message'] . "
";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, display, and manage user reviews for a product or item.
 *
 *  Parameters:
 *  - $product_id (int): The ID of the product the review is for.
 *  - $user_id (int): The ID of the user submitting the review.
 *  - $rating (int): The rating given by the user (e.g., 1-5).
 *  - $comment (string): The review text.
 *
 *  Returns:
 *  - int: The ID of the newly created review, or -1 if the review could not be created.
 */

/**
 * Creates a new review.
 *
 * @param int $product_id The ID of the product.
 * @param int $user_id The ID of the user.
 * @param int $rating The rating (1-5).
 * @param string $comment The review text.
 * @return int|false The review ID on success, or false on failure.
 */
function createReview(int $product_id, int $user_id, int $rating, string $comment): int|false
{
    // **IMPORTANT: Database connection logic is simplified here.**
    // Replace this with your actual database connection code.
    // This example assumes you have a database connection named `$db`.

    // 1. Validate Input (Important for security and data integrity)
    if (!$db) {
        error_log("Database connection not established in createReview function.");
        return -1;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return -1;
    }

    if (empty($comment)) {
        error_log("Review comment cannot be empty.");
        return -1;
    }


    // 2. Prepare the SQL Query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
            VALUES (:product_id, :user_id, :rating, :comment)";

    // 3. Prepare the Statement
    $stmt = $db->prepare($sql);

    if (!$stmt) {
        error_log("Failed to prepare SQL statement in createReview function.");
        return -1;
    }


    // 4. Bind Parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // 5. Execute the Query
    if (!$stmt->execute()) {
        error_log("Error executing SQL query in createReview function: " . $stmt->error);
        return -1;
    }

    // 6. Get the Last Inserted ID
    $review_id = $db->lastInsertId();

    // 7.  Return the Review ID
    return $review_id;
}

/**
 * Displays all reviews for a product.
 *
 * @param int $product_id The ID of the product.
 * @return array An array of review objects, or an empty array if no reviews exist.
 */
function getReviewsForProduct(int $product_id): array {
  // Database connection logic here (simplified for example)
  if (!$db) {
    error_log("Database connection not established in getReviewsForProduct.");
    return [];
  }

  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();

  $reviews = [];
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $reviews[] = $row;
  }
  return $reviews;
}


// Example Usage (Illustrative - Replace with your database setup)
/*
// Setup Example (for demonstration purposes)
$db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Create a review
$review_id = createReview(123, 45, 4, "Great product! I love it.");

if ($review_id) {
    echo "Review created successfully with ID: " . $review_id . "
";
} else {
    echo "Failed to create review.
";
}

// Get reviews for product ID 123
$reviews = getReviewsForProduct(123);

if (!empty($reviews)) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "  Product ID: " . $review['product_id'] . ", User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}
*/


?>


<?php

/**
 * User Review Function
 *
 * This function creates a user review object and allows for basic validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|false  Returns an associative array containing review data, 
 *                       or false if validation fails.
 */
function createReview(string $username, string $rating, string $comment) {
  // Validate input
  if (empty($username)) {
    error_log("Error: Username cannot be empty."); // Log for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  if (empty($comment)) {
    error_log("Warning: Comment is empty.  Consider a default comment.");
    $comment = "No comment provided."; // Default comment if empty
  }

  // Create review object
  $review = [
    'username' => $username,
    'rating' => (int)$rating, // Convert to integer for consistency
    'comment' => $comment,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp
  ];

  return $review;
}


// Example Usage:

// Valid Review
$review1 = createReview("JohnDoe", 4, "Great product! Highly recommended.");
if ($review1) {
  echo "Review 1:
";
  print_r($review1);
} else {
  echo "Review 1 creation failed.
";
}

echo "
";

// Invalid Review (Empty Username)
$review2 = createReview("", 3, "Okay product.");
if (!$review2) {
  echo "Review 2 creation failed (as expected).
";
}

echo "
";

// Invalid Review (Invalid Rating)
$review3 = createReview("JaneSmith", 6, "Good product.");
if (!$review3) {
  echo "Review 3 creation failed (as expected).
";
}

echo "
";

// Valid Review (with empty comment)
$review4 = createReview("PeterJones", 5, "");
if ($review4) {
  echo "Review 4:
";
  print_r($review4);
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional) - Unique identifier for the review.  Defaults to null.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (e.g., 1-5).
     * @param string $comment The user's comment.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (can be used for modification)
     *
     * Note:  Consider validation in a real-world application.
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }


    /**
     *  A simple method to display the review information.
     *  This is for demonstration purposes.
     */
    public function displayReview() {
        echo "Review ID: " . ($this->reviewId ?: "N/A") . "<br>";
        echo "User ID: " . $this->userId . "<br>";
        echo "Product ID: " . $this->productId . "<br>";
        echo "Rating: " . $this->rating . "<br>";
        echo "Comment: " . $this->comment . "<br>";
        echo "Date: " . $this->date . "<br>";
    }
}


/**
 * Example Usage
 */

// Create some review objects
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
$review2 = new UserReview(1, 789, 456, 4, "Good, but could be better.");

// Display the reviews
echo "Review 1:<br>";
$review1->displayReview();
echo "<br>";

echo "Review 2:<br>";
$review2->displayReview();


/**
 *  Extending this for a review system would involve:
 *
 *  - Storing reviews in a database (using PDO, MySQLi, etc.)
 *  - Validation of input data (e.g., rating must be between 1 and 5)
 *  - Adding error handling
 *  - Implementing methods to retrieve, update, and delete reviews.
 */
?>


<?php

/**
 * User Review Function
 *
 * This function creates and stores user reviews for a product.
 * It includes validation and basic error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @return bool          True on successful creation, false otherwise.
 */
function createReview(string $productId, string $username, string $rating, string $comment) {
  // Input validation - Very important!
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); // Log error for debugging
    return false;
  }

  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  if (empty($comment)) {
    error_log("Error: Comment cannot be empty.");
    return false;
  }

  //  Database connection -  Replace with your actual database connection details
  //  This is just a placeholder for demonstration purposes.
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (product_id, username, rating, comment, created_at)
       VALUES (:product_id, :username, :rating, :comment, NOW())"
    );

    // Bind parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check if the query was successful
    if ($result) {
      return true;
    } else {
      error_log("Error: Failed to insert review into database: " . print_r($stmt->errorInfo(), true));
      return false;
    }
  } catch (PDOException $e) {
    error_log("Error: Database error: " . $e->getMessage());
    return false;
  }
}


// Example usage:
$productId = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

if (createReview($productId, $username, $rating, $comment)) {
  echo "Review created successfully!";
} else {
  echo "Failed to create review.";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For production environments,
 * you should use a database.
 *
 * @param string $productId  The product ID the review is for.
 * @param string $userId     The ID of the user writing the review.
 * @param string $rating     The rating (e.g., 1-5).
 * @param string $comment    The review comment.
 * @param int    $reviewId   (Optional) The ID of the review to update.  If not provided, a new review is created.
 *
 * @return array|bool  Returns an array containing the review data if successful, or false if there was an error.
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, ?int $reviewId = null): array|bool
{
    // Input validation -  Crucial for security and data integrity
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return false; // Invalid input
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    // Create a review
    $review = [
        'product_id' => $productId,
        'user_id' => $userId,
        'rating' => $rating,
        'comment' => $comment,
        'created_at' => time(), // Timestamp of when the review was created
    ];

    // Check if the review already exists
    if ($reviewId !== null) {
        // Update existing review
        $reviews = Reviews::getAllReviews(); // Assumes a Reviews class exists
        foreach ($reviews as $reviewItem) {
            if ($reviewItem['id'] == $reviewId) {
                $review['id'] = $reviewId;
                $review['updated_at'] = time();
                $reviews[] = $review;  // Add the updated review to the array.
                break;
            }
        }
    } else {
        // Add a new review
        $reviews[] = $review;
    }

    // Save the reviews (for this example, we just return the updated array)
    Reviews::saveReviews($reviews); // Saves to a database or in-memory storage

    return $reviews;
}


/**
 *  Example Reviews class for demonstration purposes - can be adapted for a database
 */
class Reviews {
    private static $reviews = [];

    public static function getAllReviews(): array {
        return self::$reviews;
    }

    public static function saveReviews(array $reviews) {
        self::$reviews = $reviews;
    }
}

// --- Example Usage ---

// Create a new review
$reviewData = createOrUpdateReview('P123', 'U456', 4, 'Great product, highly recommended!');
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Error creating review.
";
}


// Update an existing review
$updatedReview = createOrUpdateReview('P123', 'U456', 5, 'Excellent product, even better than expected!', 1); // Update review with ID 1
if ($updatedReview) {
    echo "
Review updated successfully:
";
    print_r($updatedReview);
} else {
    echo "Error updating review.
";
}


// Retrieve all reviews for product 'P123'
$reviewsForProduct = Reviews::getAllReviews();
echo "
Reviews for product P123:
";
print_r($reviewsForProduct);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 * It includes basic functionality for adding, displaying, and potentially
 * sorting reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of user reviews.  Each review should be an associative array
 *                      with keys like 'user', 'rating', and 'comment'.
 * @return void
 */
function displayUserReviews(string $productName, array $reviews) {

  // Security: Sanitize input (essential for preventing XSS)
  $productName = htmlspecialchars($productName);
  foreach ($reviews as $review) {
    $review['user'] = htmlspecialchars($review['user']);
    $review['comment'] = htmlspecialchars($review['comment']);
  }

  echo "<h2>Reviews for " . $productName . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet. Be the first to review!</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['user'] . ":</strong> " . $review['comment'] . " (Rating: " . $review['rating'] . ")";
      echo "</li>";
    }
    echo "</ul>";
  }
}


/**
 *  Add a new review (example function - can be expanded)
 *
 *  This function adds a new review to the reviews array.  
 *  Important: Add proper security checks and validation in a production environment!
 *
 * @param string $user
 * @param int $rating
 * @param string $comment
 */
function addReview(string $user, int $rating, string $comment) {
  // Basic Validation (In a real application, you'd use more robust validation)
  if (empty($user) || $rating < 1 || $rating > 5 || empty($comment)) {
    echo "<p>Invalid review data. Please provide a valid user, rating (1-5), and comment.</p>";
    return;
  }

  $review = [
    'user' => $user,
    'rating' => $rating,
    'comment' => $comment
  ];

  // In a real application, you'd store this in a database or session.
  // This is just a demo.
  global $reviews; // Access the global $reviews array
  $reviews[] = $review;
}



// Example Usage:
// Initialize the reviews array
$reviews = [];

// Add some reviews
addReview("John Doe", 4, "Great product, highly recommended!");
addReview("Jane Smith", 5, "Excellent quality and fast shipping.");
addReview("Peter Jones", 3, "It's okay, but could be better.");

// Display the reviews
displayUserReviews("Awesome Gadget", $reviews);

// Add another review (demonstration)
addReview("Alice Brown", 2, "The battery life is terrible.");

// Display the reviews again
displayUserReviews("Awesome Gadget", $reviews);


?>


<?php

/**
 * User Review Class
 * 
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;
    private $date_submitted;

    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     * 
     * @param int $product_id The ID of the product being reviewed.
     * @param int $user_id The ID of the user submitting the review.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment.
     */
    public function __construct($product_id, $user_id, $rating, $comment) {
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_submitted = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters
     */
    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDateSubmitted() {
        return $this->date_submitted;
    }

    /**
     * Display Review (for debugging or display purposes)
     * 
     * Returns a formatted string representing the review.
     * @return string
     */
    public function displayReview() {
        return "Product ID: " . $this->getProductId() . "
"
               . "User ID: " . $this->getUserId() . "
"
               . "Rating: " . $this->getRating() . "
"
               . "Comment: " . $this->getComment() . "
"
               . "Date Submitted: " . $this->getDateSubmitted();
    }
}


/**
 * User Review Function
 *
 * This function takes a user-submitted review and stores it.
 * 
 * @param array $reviewData An associative array containing the review data:
 *                            - product_id => int (Product ID)
 *                            - user_id => int (User ID)
 *                            - rating => int (Rating)
 *                            - comment => string (Comment)
 * @return UserReview|null A UserReview object if the review was successfully created, or null if there was an error.
 */
function storeUserReview(array $reviewData) {
    // Validation (Add more robust validation as needed)
    if (!isset($reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment'])) {
        error_log("Missing review data: " . print_r($reviewData, true));
        return null;
    }

    if (!is_int($reviewData['product_id']) || !is_int($reviewData['user_id']) || !is_int($reviewData['rating'])) {
        error_log("Invalid review data types: " . print_r($reviewData, true));
        return null;
    }

    if ($reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        error_log("Invalid rating value: " . $reviewData['rating']);
        return null;
    }

    // In a real application, you'd save this to a database
    // For this example, we'll just create a UserReview object.
    $review = new UserReview($reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment']);
    return $review;
}


// Example Usage:
$reviewData = [
    'product_id' => 123,
    'user_id' => 456,
    'rating' => 4,
    'comment' => 'Great product! Highly recommended.'
];

$review = storeUserReview($reviewData);

if ($review) {
    echo "Review created successfully:
";
    echo $review->displayReview() . "
";
} else {
    echo "Error creating review.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5 stars).
 * @param string $comment The user's written review.
 * @return array|string Returns an array with the review details on success, or an error message on failure.
 */
function submit_review(string $product_id, string $username, string $rating, string $comment)
{
  // **Security Considerations (Important!)**

  // 1. Input Validation and Sanitization:  This is crucial to prevent SQL injection and XSS attacks.
  //    This example provides basic validation, but you *MUST* expand upon it for a real application.
  $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5)); // Ensure rating is an integer between 1 and 5
  if ($rating === false) {
    return "Error: Invalid rating.  Please enter a number between 1 and 5.";
  }

  $comment = trim($comment);  // Remove leading/trailing whitespace

  // 2.  Escaping for Output (XSS protection):  Use htmlspecialchars() to escape the comment
  $escaped_comment = htmlspecialchars($comment, ENT_QUOTES, 'UTF-8');

  // **Database Interaction (Replace with your database logic)**
  // This is a simplified example using a mock database.
  // In a real application, use a proper database connection and query.

  // Mock Database (Replace with your database connection and query logic)
  $db = new MockDatabase();

  // Add the review to the database
  try {
    $db->addReview($product_id, $username, $rating, $escaped_comment);
    return ['success' => true, 'message' => "Review submitted successfully!"];

  } catch (Exception $e) {
    return ['success' => false, 'message' => "Error submitting review: " . $e->getMessage()];
  }


}

/**
 * Mock Database Class (For demonstration purposes only)
 */
class MockDatabase
{
    private $reviews = [];

    public function addReview(string $product_id, string $username, string $rating, string $comment)
    {
        // In a real database, you'd build and execute an SQL query here.
        // This is just a placeholder for demonstration.

        $this->reviews[$product_id][] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];
    }
}
?>


// Example Usage
$product_id = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "This is a great product!";

$result = submit_review($product_id, $username, $rating, $comment);

if ($result['success']) {
  echo "<p>Review submitted successfully!</p>";
} else {
  echo "<p>Error: " . $result['message'] . "</p>";
}


<?php

/**
 * User Review Function - Allows users to submit and display reviews.
 */

class UserReview
{
    private $reviews = [];

    /**
     * Submits a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on successful submission, false otherwise (e.g., if username is empty).
     */
    public function submitReview(string $username, string $reviewText): bool
    {
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'review'   => $reviewText,
            'date'     => date('Y-m-d H:i:s') // Timestamp of the review
        ];

        return true;
    }

    /**
     * Retrieves all submitted reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single review by its index in the array.  Useful if you're managing reviews sequentially.
     *
     * @param int $index The index of the review to retrieve.
     * @return array|null The review object at the given index, or null if the index is invalid.
     */
    public function getReviewByIndex(int $index): ?array
    {
        if ($index >= 0 && $index < count($this->reviews)) {
            return $this->reviews[$index];
        } else {
            return null;
        }
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void Prints the reviews to the console (for demonstration).
     */
    public function displayAllReviews(): void
    {
        echo "<pre>"; // Use <pre> tag for better formatting in the console
        foreach ($this->getAllReviews() as $review) {
            echo "Username: " . htmlspecialchars($review['username']) . "
";
            echo "Review: " . htmlspecialchars($review['review']) . "
";
            echo "Date: " . $review['date'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Submit some reviews
$reviewSystem->submitReview('JohnDoe', 'This product is amazing!');
$reviewSystem->submitReview('JaneSmith', 'Could be better, needs some improvements.');
$reviewSystem->submitReview('PeterJones', 'Fantastic value for money!');

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayAllReviews();

// Retrieve a specific review
$review = $reviewSystem->getReviewByIndex(1);
if ($review) {
    echo "<h2>Review at Index 1:</h2>";
    echo "Username: " . htmlspecialchars($review['username']) . "
";
    echo "Review: " . htmlspecialchars($review['review']) . "
";
} else {
    echo "<p>Review not found.</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $product_id The unique ID of the product or item.
 * @param string $user_id The unique ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Must be an integer.
 * @param string $comment The user's review comment.
 * @param string $db_connection  A database connection object.
 *
 * @return array An array containing:
 *   - 'success' => true if the review was successfully saved, false otherwise.
 *   - 'message' => A success or error message.
 *   - 'review_id' => The ID of the newly created review (if successful).
 */
function saveUserReview(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection) {
    // Input Validation - VERY IMPORTANT!  Prevent SQL Injection and data errors.
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be an integer between 1 and 5.', 'review_id' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'review_id' => null];
    }
    
    try {
        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
                VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $db_connection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db_connection->lastInsertId();

        return ['success' => true, 'message' => 'Review saved successfully.', 'review_id' => $review_id];

    } catch (PDOException $e) {
        // Handle database errors - critical for debugging and security
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'review_id' => null];
    }
}

/**
 * Function to retrieve reviews for a product.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @param PDO $db_connection PDO database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $product_id, PDO $db_connection) {
    try {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);  // Fetch as an array of associative arrays

        return $reviews;

    } catch (PDOException $e) {
        // Handle database errors
        return [];
    }
}



// --- Example Usage (Demonstration -  Requires Database Setup) ---

// *** IMPORTANT:  Replace with your actual database credentials! ***
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';


try {
    // Create a PDO database connection
    $db_connection = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $username, $password);
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions for error handling

    // --- Save a Review ---
    $product_id = '123';
    $user_id = 'user123';
    $rating = 4;
    $comment = 'Great product!  Works as advertised.';

    $result = saveUserReview($product_id, $user_id, $rating, $comment, $db_connection);

    if ($result['success']) {
        echo "Review saved successfully!  Review ID: " . $result['review_id'] . "<br>";
    } else {
        echo "Error saving review: " . $result['message'] . "<br>";
    }

    // --- Retrieve Reviews for the Product ---
    $reviews = getReviewsForProduct($product_id, $db_connection);

    if (!empty($reviews)) {
        echo "<h3>Reviews for Product " . $product_id . ":</h3>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li><b>User:</b> " . $review['user_id'] . "<br>";
            echo "<b>Rating:</b> " . $review['rating'] . "<br>";
            echo "<b>Comment:</b> " . $review['comment'] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "No reviews found for product " . $product_id . ".";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
} finally {
    // Close the database connection - VERY IMPORTANT!
    $db_connection = null;
}

?>


<?php

/**
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic data validation and display.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects (see example below).
 *
 * @return void
 */
function displayReviews(string $productName, array $reviews)
{
    // Simple HTML structure for display
    echo "<h1>Reviews for " . htmlspecialchars($productName) . "</h1>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . htmlspecialchars($review['author']) . "</strong> - " . htmlspecialchars($review['comment']) . "<br>";
            echo "Rating: " . htmlspecialchars($review['rating']) . " / 5";
            echo "</li>";
        }
        echo "</ul>";
    }
}


/**
 * Adds a new review.
 *
 * @param string $productName The name of the product or service.
 * @param string $author The name of the reviewer.
 * @param string $comment The review comment.
 * @param int $rating The rating given by the reviewer (1-5).
 *
 * @return array An updated array of reviews.
 */
function addReview(string $productName, string $author, string $comment, int $rating)
{
    // Validate rating
    if ($rating < 1 || $rating > 5) {
        return $reviews; // Or throw an exception
    }

    $review = [
        'author' => $author,
        'comment' => $comment,
        'rating' => $rating
    ];

    $reviews[] = $review;
    return $reviews;
}



// **Example Usage:**

// Initialize an empty array to store reviews
$reviews = [];


// Add some reviews (you would typically collect this data from a form)
$reviews = addReview("Awesome Widget", "John Doe", "Great product!  Works exactly as advertised.", 5);
$reviews = addReview("Amazing Gadget", "Jane Smith", "Good value for money.", 4);
$reviews = addReview("Mediocre Thing", "Peter Jones", "It's okay, but could be better.", 3);


// Display the reviews
displayReviews("My Product", $reviews);


// ---  Simplified Version without explicit array initialization ---
// function displayReviewsSimplified(string $productName, array $reviews) {
//     echo "<h1>Reviews for " . htmlspecialchars($productName) . "</h1>";
//
//     if (empty($reviews)) {
//         echo "<p>No reviews yet.</p>";
//     } else {
//         echo "<ul>";
//         foreach ($reviews as $review) {
//             echo "<li>";
//             echo "<strong>" . htmlspecialchars($review['author']) . "</strong> - " . htmlspecialchars($review['comment']) . "<br>";
//             echo "Rating: " . htmlspecialchars($review['rating']) . " / 5";
//             echo "</li>";
//         }
//         echo "</ul>";
//     }
// }

// $reviews = []; // Initialize array here, or pass an array as a parameter.
// displayReviewsSimplified("My Product", $reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating (e.g., 1-5).
 * @param string $comment  The review text.
 * @param array $reviews  (Optional) An array of existing reviews to persist.
 *
 * @return array An updated array of reviews including the new review.
 */
function add_review(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
    // Input Validation (Basic - can be expanded)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create a new review object
    $review = [
        'product_id' => $productId,
        'username'   => $username,
        'rating'     => $rating,
        'comment'    => $comment,
        'timestamp'  => time() // Add a timestamp for sorting/filtering
    ];

    // Add the new review to the array
    $reviews[] = $review;

    return $reviews;
}


/**
 * Display Reviews Function
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews  The array of reviews to display.
 *
 * @return void  Prints the formatted reviews to the console.  Can be modified to output HTML.
 */
function display_reviews(array $reviews) {
    echo "<pre>"; // Use <pre> tags for formatted output
    foreach ($reviews as $review) {
        echo "Product ID: " . $review['product_id'] . "
";
        echo "Username: " . $review['username'] . "
";
        echo "Rating: " . $review['rating'] . "
";
        echo "Comment: " . $review['comment'] . "
";
        echo "Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "
";
        echo "---
";
    }
    echo "</pre>";
}



// Example Usage:
try {
    // Initialize reviews (can be persisted to a database)
    $reviews = [];

    // Add some reviews
    $reviews = add_review("product123", "John Doe", 4, "Great product!  Works as expected.", $reviews);
    $reviews = add_review("product456", "Jane Smith", 5, "Excellent value for the money.", $reviews);
    $reviews = add_review("product123", "Peter Jones", 3, "Could be better.", $reviews);

    // Display the reviews
    display_reviews($reviews);

} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, display, and potentially moderate user reviews.
 * It provides basic functionalities like adding a review, retrieving reviews,
 * and displaying them.  More sophisticated moderation features (like flagging,
 * deleting, etc.) would require further development.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The text of the review submitted by the user.
 * @param array $user_id The user's ID who submitted the review (optional, for tracking)
 * @return array An array containing the review data (ID, product, review, user_id) 
 *               or an array of errors if adding the review fails.
 */
function add_review(string $productName, string $reviewText, ?int $user_id = null) : array
{
    // Validate inputs (important!)
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // In a real application, you'd sanitize and validate $reviewText
    // (e.g., prevent XSS attacks, limit length, etc.).  This is a placeholder.

    // Generate a unique review ID (simplified for this example)
    $review_id = bin2hex(uniqid()); // Use a more robust method in production!

    // Store the review (replace with database interaction in a real app)
    // This is a placeholder; consider using a database connection here.
    $review = [
        'id' => $review_id,
        'product' => $productName,
        'review' => $reviewText,
        'user_id' => $user_id,
        'date' => date('Y-m-d H:i:s') // Add timestamp for sorting/filtering
    ];

    // Save the review to a file or database
    //  Example:  file_put_contents('reviews.txt', $review . PHP_EOL, FILE_APPEND);
    // In a real application, use a database:  $db->insert('reviews', $review);

    return $review;
}


/**
 * Retrieves reviews for a given product.
 *
 * @param string $productName The product to search for reviews for.
 * @return array An array of reviews for the product, or an empty array if none are found.
 */
function get_reviews(string $productName) : array
{
    // In a real application, you'd fetch this from a database.
    // This is just a placeholder to demonstrate the concept.

    $reviews = [];

    // Simulate retrieving reviews from a file or database
    $reviews_data = get_all_reviews();

    foreach ($reviews_data as $review) {
        if ($review['product'] == $productName) {
            $reviews[] = $review;
        }
    }

    return $reviews;
}

/**
 * Placeholder function to get all reviews.  In a real application, 
 * this would fetch data from a database.
 * 
 * @return array An array of review data.
 */
function get_all_reviews() : array {
  return [
    ['id' => bin2hex(uniqid()), 'product' => 'Laptop X100', 'review' => 'Great laptop, fast and reliable!', 'user_id' => 123, 'date' => date('Y-m-d H:i:s')],
    ['id' => bin2hex(uniqid()), 'product' => 'Tablet Z200', 'review' => 'Good tablet for the price.', 'user_id' => 456, 'date' => date('Y-m-d H:i:s')],
    ['id' => bin2hex(uniqid()), 'product' => 'Laptop X100', 'review' => 'Excellent value.', 'user_id' => 789, 'date' => date('Y-m-d H:i:s')]
  ];
}



// --- Example Usage ---

// Add a review
$new_review = add_review('Laptop X100', 'Fantastic performance!');
if (isset($new_review['error'])) {
    echo "Error adding review: " . $new_review['error'] . PHP_EOL;
} else {
    echo "Review added successfully.  Review ID: " . $new_review['id'] . PHP_EOL;
}

// Get reviews for Laptop X100
$laptop_reviews = get_reviews('Laptop X100');

echo "Reviews for Laptop X100:" . PHP_EOL;
if (empty($laptop_reviews)) {
    echo "No reviews found." . PHP_EOL;
} else {
    foreach ($laptop_reviews as $review) {
        echo "- " . $review['review'] . " (User ID: " . $review['user_id'] . ")" . PHP_EOL;
    }
}

// Example of error handling when adding an invalid review
$invalid_review = add_review("", "This is a test.");
if (isset($invalid_review['error'])) {
    echo "Error adding review: " . $invalid_review['error'] . PHP_EOL;
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 *
 * @param string $productName  The name of the product/item being reviewed.
 * @param string $userId       The unique identifier of the user submitting the review.
 * @param string $rating       The rating given by the user (e.g., 1-5).
 * @param string $comment      The user's review comment.
 * @param array $reviews       (Optional) An existing array of reviews to append to.
 *
 * @return array  An updated array of reviews, including the new review.
 */
function createAndDisplayReview(string $productName, string $userId, string $rating, string $comment, array &$reviews = []) {
  // Validate input (example - you should expand this for robust validation)
  if (empty($productName)) {
    return $reviews; // Return empty if product name is empty
  }
  if (empty($userId)) {
    return $reviews; // Return empty if user ID is empty
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return $reviews; // Return empty if rating is invalid
  }
  if (empty($comment)) {
    return $reviews; // Return empty if comment is empty
  }
  

  // Create a new review object (can be an array, object, or custom class)
  $review = [
    'product' => $productName,
    'user'    => $userId,
    'rating'  => $rating,
    'comment' => $comment,
    'date'    => date('Y-m-d H:i:s')  // Timestamp for the review
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


// Example Usage:
$product = "Awesome Widget";

// First Review
$reviews1 = createAndDisplayReview($product, "user123", 5, "This widget is fantastic! Highly recommended.");
print_r($reviews1);

// Second Review
$reviews2 = createAndDisplayReview($product, "user456", 4, "Good product, does what it says.", $reviews1);
print_r($reviews2);

// Display the reviews (example - you'd likely use a template engine or similar)
echo "<h2>Reviews for " . $product . "</h2>";
if (empty($reviews2)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<ul>";
  foreach ($reviews2 as $review) {
    echo "<li>";
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Date:</strong> " . $review['date'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId
     * @param int $userId
     * @param int $productId
     * @param int $rating
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId = null, $productId = null, $rating = null, $comment = null) {

        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Default to current timestamp
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters
     *
     * @param mixed $value
     * @return void
     */
    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function setDate($date) {
        $this->date = $date;
    }
}


/**
 * User Review Review Function (with validation)
 */
function reviewUser($reviewId = null, $userId = null, $productId = null, $rating = null, $comment = null) {

    // Input Validation - Crucial for security and data integrity
    if ($reviewId !== null) {
        if (!is_numeric($reviewId)) {
            return "Error: Review ID must be a number.";
        }
    }
    if ($userId !== null) {
        if (!is_numeric($userId)) {
            return "Error: User ID must be a number.";
        }
    }
    if ($productId !== null) {
        if (!is_numeric($productId)) {
            return "Error: Product ID must be a number.";
        }
    }
    if ($rating !== null) {
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) { // Validate rating range
            return "Error: Rating must be a number between 1 and 5.";
        }
    }
    if ($comment !== null) {
        if (empty($comment)) {
            return "Error: Comment cannot be empty.";
        }
    }

    // Create a new Review object
    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);

    // Simulate saving to a database (Replace this with your database logic)
    // For demonstration purposes, we'll just return a success message.
    return "Review submitted successfully. Review ID: " . $review->getReviewId();
}

// Example Usage
echo reviewUser(123, 45, 67, 4, "This product is great!");
echo "
";
echo reviewUser(null, 78, 90, 5, "Excellent!");
echo "
";
echo reviewUser(null, null, null, 3, "Okay, but could be better."); // No parameters, no validation
echo "
";
echo reviewUser(null, 10, 20, 6, ""); // Invalid rating (empty comment)
echo "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product/service.
 * @param string $userName The user's name or username.
 * @param string $reviewText The user's review text.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @param string $userId (Optional) The user's ID, for database storage. If not provided, a default one will be generated.
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0, string $userId = null): bool
{
  // Validate inputs (add more validation as needed)
  if (empty($productId) || empty($userName) || empty($reviewText)) {
    error_log("Error: Product ID, User Name, and Review Text cannot be empty."); // Log for debugging
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Database connection (replace with your actual database connection)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example, adapt to your setup

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (productId, userName, reviewText, rating, userId) 
                         VALUES (:productId, :userName, :reviewText, :rating, :userId)");

    // Bind parameters
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userName', $userName);
    $stmt->bindParam(':reviewText', $reviewText);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':userId', $userId ?? null); // Use null coalescing operator to handle optional userId

    // Execute the statement
    $result = $stmt->execute();

    // Check for errors
    if ($result) {
      //  Ideally, you'd retrieve the newly created ID here to return to the user
      //  For this example, we just return true
      return true;
    } else {
      error_log("Error inserting review: " . print_r($stmt->errorInfo(), true));  // Log more details for debugging
      return false;
    }
  } catch (PDOException $e) {
    error_log("PDO Exception: " . $e->getMessage()); // Log the exception
    return false;
  }
}


/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $productId The product ID.
 * @return array An array of review objects, or an empty array if no reviews exist.
 */
function getReviewsForProduct(string $productId): array {
  // Database connection
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example, adapt to your setup

  try {
    $stmt = $db->prepare("SELECT id, productId, userName, reviewText, rating, userId, created_at FROM reviews WHERE productId = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch as objects for easier handling

    return $reviews;

  } catch (PDOException $e) {
    error_log("PDO Exception: " . $e->getMessage());
    return []; // Return an empty array in case of error
  }
}



// Example usage (for demonstration purposes - NOT for production)
//  You'll need to create a 'reviews' table in your database first.
//  Example SQL to create the table:
//  CREATE TABLE reviews (
//    id int AUTO_INCREMENT PRIMARY KEY,
//    productId varchar(255) NOT NULL,
//    userName varchar(255) NOT NULL,
//    reviewText TEXT NOT NULL,
//    rating int,
//    userId varchar(255),
//    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
//  );



// Store a review
$reviewSuccess = storeUserReview('product123', 'John Doe', 'Great product!  I highly recommend it.', 5);
if ($reviewSuccess) {
  echo "Review stored successfully!
";
} else {
  echo "Error storing review.
";
}


// Get reviews for 'product123'
$reviews = getReviewsForProduct('product123');

if (!empty($reviews)) {
  echo "Reviews for product123:
";
  foreach ($reviews as $review) {
    echo "  ID: " . $review->id . "
";
    echo "  Product ID: " . $review->productId . "
";
    echo "  User Name: " . $review->userName . "
";
    echo "  Review Text: " . $review->reviewText . "
";
    echo "  Rating: " . $review->rating . "
";
    echo "  User ID: " . $review->userId . "
";
    echo "  Created at: " . $review->created_at . "
";
    echo "--- 
";
  }
} else {
  echo "No reviews found for product123.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $product_name The name of the product or service being reviewed.
 * @param string $review_text The text of the review.
 * @param string $reviewer_name The name of the reviewer.
 * @param int $rating (optional) A rating from 1 to 5. Defaults to 0.
 *
 * @return array An array containing the review data, or an error message if the review submission fails.
 */
function submit_review(string $product_name, string $review_text, string $reviewer_name, int $rating = 0) {
    // Validate inputs (basic example - you'd likely want more robust validation)
    if (empty($product_name)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (empty($reviewer_name)) {
        return ['error' => 'Reviewer name cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize inputs (essential for security - prevent XSS)
    $product_name = htmlspecialchars($product_name);
    $review_text = htmlspecialchars($review_text);
    $reviewer_name = htmlspecialchars($reviewer_name);


    // Store the review (in a real application, you'd use a database)
    // For this example, we'll just echo the review data.
    echo "<h2>Review for: " . $product_name . "</h2>";
    echo "<p><strong>Reviewer:</strong> " . $reviewer_name . "</p>";
    echo "<p><strong>Rating:</strong> " . $rating . "</p>";
    echo "<p><strong>Review:</strong> " . $review_text . "</p>";


    return ['product_name' => $product_name, 'review_text' => $review_text, 'reviewer_name' => $reviewer_name, 'rating' => $rating];
}


// Example Usage:
// Simulate a user submitting a review
$review_data = submit_review("Awesome Widget", "This widget is amazing!  I love it!", "John Doe", 5);

if (isset($review_data['error'])) {
    echo "<p style='color: red;'>Error: " . $review_data['error'] . "</p>";
}

// Another example with a different rating:
$review_data2 = submit_review("Mediocre Gadget", "It's okay, but nothing special.", "Jane Smith", 3);
if (isset($review_data2['error'])) {
  echo "<p style='color: red;'>Error: " . $review_data2['error'] . "</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes error handling and basic input validation.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating   (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|string Returns an array of reviews if successful, or an error message string if there's an issue.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
    // Input Validation - Basic checks
    if (empty($productId)) {
        return "Error: Product ID cannot be empty.";
    }
    if (empty($userName)) {
        return "Error: User name cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }


    //  Simulate storing the review in a database (replace with your actual database logic)
    //  This is a simplified example - use proper database queries for real applications.
    $review = [
        'productId' => $productId,
        'userName' => $userName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Store the review in an array (for this example)
    // In a real application, you'd insert this data into a database.
    $storedReviews = [
        'reviews' => [
            $review
        ]
    ];


    return $storedReviews;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product ID.
 *
 * @param array $reviews An array of reviews (returned from storeUserReview or loaded from database).
 * @return string HTML to display the reviews.
 */
function displayReviews(array $reviews) {
    if (empty($reviews['reviews'])) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for Product ID: " . $reviews['reviews'][0]['productId'] . "</h2>"; // Display product ID

    foreach ($reviews['reviews'] as $review) {
        $html .= "<div class='review'>";
        $html .= "<p><strong>User:</strong> " . htmlspecialchars($review['userName']) . "</p>"; // Use htmlspecialchars for security
        $html .= "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
        $html .= "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
        $html .= "<div class='timestamp'>" . date('Y-m-d H:i:s', $review['timestamp']) . "</div>";
        $html .= "</div>";
    }

    return $html;
}


// --- Example Usage ---

// Store a review
$reviewData = storeUserReview("123", "John Doe", "This is a great product!", 5);

if (is_array($reviewData)) {
    if (isset($reviewData['error'])) {
        echo "<p>Error: " . $reviewData['error'] . "</p>";
    } else {
        echo "Review stored successfully!";
        // Display the reviews
        $reviews = storeUserReview("123", "Jane Smith", "It's okay.", 3); //Another review

        echo displayReviews($reviews); //Display the reviews

    }
} else {
    echo "Error: " . $reviewData;
}

?>


<?php

/**
 *  A function to create and manage user reviews.
 *
 *  This function provides basic functionality for adding, displaying, and
 *  potentially moderating user reviews.  It's a simplified example and can
 *  be extended with more advanced features like rating systems, image uploads,
 *  and moderation workflows.
 */
class ReviewManager {

  private $reviews = [];
  private $dbConnection = null; // For database integration (optional)

  /**
   * Constructor - Initializes the ReviewManager.
   *
   * @param PDO $dbConnection (Optional)  A PDO database connection object.
   *                            If not provided, reviews are stored in memory.
   */
  public function __construct(PDO $dbConnection = null) {
    $this->dbConnection = $dbConnection;
  }


  /**
   * Adds a new review.
   *
   * @param string $userId    The ID of the user submitting the review.
   * @param string $reviewText The content of the review.
   * @return int|null The ID of the newly created review, or null on failure.
   */
  public function addReview(string $userId, string $reviewText): ?int {
    $reviewId = uniqid(); //Generate unique id
    $this->reviews[$reviewId] = [
      'userId' => $userId,
      'reviewText' => $reviewText,
      'timestamp' => time()
    ];
    return $reviewId;
  }


  /**
   * Retrieves all reviews.
   *
   * @return array  An array of review objects.
   */
  public function getAllReviews(): array {
    return $this->reviews;
  }

  /**
   * Retrieves a review by its ID.
   *
   * @param string $reviewId The ID of the review to retrieve.
   * @return array|null  The review object, or null if not found.
   */
  public function getReviewById(string $reviewId): ?array {
    return $this->reviews[$reviewId] ?? null; //Use null coalescing operator for cleaner code
  }


  /**
   *  Deletes a review by its ID. (Consider security implications before implementing)
   *
   * @param string $reviewId The ID of the review to delete.
   * @return bool True on successful deletion, false otherwise.
   */
  public function deleteReview(string $reviewId): bool {
    if (array_key_exists($reviewId, $this->reviews)) {
      unset($this->reviews[$reviewId]);
      return true;
    }
    return false;
  }

  /**
     * Example database integration using PDO
     *  (This is just a placeholder - you'll need to adapt it to your DB schema)
     *
     *  This demonstrates how you *could* store reviews in a database.
     *  Remove this if you're not using a database.
     *
     * @param string $userId
     * @param string $reviewText
     * @return int|null
     */
    public function addReviewToDB(string $userId, string $reviewText) {
        $reviewId = uniqid();

        if ($this->dbConnection) {
            $stmt = $this->dbConnection->prepare("INSERT INTO reviews (review_id, user_id, review_text, timestamp) VALUES (?, ?, ?, ?)");
            $stmt->execute([$reviewId, $userId, $reviewText, time()]);
            return $reviewId;
        } else {
            //Store in memory if no database connection
            $this->addReview($userId, $reviewText);
            return $reviewId;
        }
    }

}


// Example Usage:

// 1.  Using in-memory storage:
$reviewManager = new ReviewManager();

$reviewId1 = $reviewManager->addReview('user123', 'This is a great product!');
echo "Review ID: " . $reviewId1 . "
";

$review1 = $reviewManager->getReviewById($reviewId1);
echo "Review 1:
" . print_r($review1, true) . "
";


// 2.  With a database (requires database setup - PDO is used here)
//    *  Replace the placeholder connection details with your actual credentials.
try {
    $dbConnection = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");
    $dbConnection = new ReviewManager($dbConnection);
    $reviewId2 = $dbConnection->addReviewToDB('user456', 'Excellent service!');
    echo "Review ID (from DB): " . $reviewId2 . "
";
} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}


<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review
{
    private $db; // Database connection (for demonstration - replace with your actual DB connection)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating   The rating given (e.g., 1-5).
     * @param string $comment  The user's review comment.
     *
     * @return int|false  The ID of the newly created review on success, or false on failure.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment)
    {
        // Validate input (basic - you should add more robust validation)
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment)
                VALUES (:product_id, :username, :rating, :comment)";

        // Prepare statement
        $stmt = $this->db->prepare($sql); // Assuming $this->db has prepare() method

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute query
        $result = $stmt->execute();

        // Check for errors
        if (!$result) {
            return false;
        }

        // Get the ID of the new review
        $reviewId = $this->db->lastInsertId();

        return (int)$reviewId;
    }


    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId  The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new ReviewObject($row); // Assuming you have a ReviewObject class
        }

        return $reviews;
    }


    /**
     *  A simplified ReviewObject class for easy access
     */
    private function __construct($data)
    {
      $this->id = $data['id'];
      $this->product_id = $data['product_id'];
      $this->username = $data['username'];
      $this->rating = $data['rating'];
      $this->comment = $data['comment'];
      $this->created_at = $data['created_at'];
    }


    //Getter methods
    public function getId()
    {
      return $this->id;
    }

    public function getProductId()
    {
      return $this->product_id;
    }

    public function getUsername()
    {
      return $this->username;
    }

    public function getRating()
    {
      return $this->rating;
    }

    public function getComment()
    {
      return $this->comment;
    }

    public function getCreatedAt()
    {
      return $this->created_at;
    }
}


/**
 * ReviewObject Class - a simple object to hold review data.
 */
class ReviewObject
{
    public $id;
    public $product_id;
    public $username;
    public $rating;
    public $comment;
    public $created_at;


    public function __construct($data)
    {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->username = $data['username'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }
}


// Example Usage (with a dummy database connection)
// This will need to be replaced with your actual database setup
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');


$review = new Review($db);

// Create a new review
$reviewId = $review->createReview(123, 'john_doe', 5, 'Great product!  Highly recommended.');

if ($reviewId) {
    echo "New review created with ID: " . $reviewId . "<br>";
} else {
    echo "Failed to create review.<br>";
}

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

echo "<h2>Reviews for Product 123:</h2>";
foreach ($reviews as $review) {
    echo "<strong>Username:</strong> " . $review->getUsername() . "<br>";
    echo "<strong>Rating:</strong> " . $review->getRating() . " stars<br>";
    echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
    echo "<hr>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function creates a new user review and adds it to a database.
 * It also includes basic input validation and error handling.
 *
 * @param string $username  The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $productID   The ID of the product the review is for.
 * @param PDO $pdo       The PDO database connection object.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function addReview(string $username, string $reviewText, int $productID, PDO $pdo)
{
    // Input Validation
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }
    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }
    if (!is_numeric($productID)) {
        error_log("Error: Product ID must be a number.");
        return false;
    }

    // Sanitize Input (Important for Security)
    $username = trim($username); // Remove leading/trailing whitespace
    $reviewText = trim($reviewText);

    // Prepare and Execute the SQL Query
    try {
        $sql = "INSERT INTO reviews (username, review_text, product_id) VALUES (:username, :review_text, :product_id)";
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':product_id', $productID);
        $stmt->execute();

        return true; // Success
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Failure (Database error)
    }
}


// Example Usage (Assuming you have a PDO database connection object named $pdo)
// -----------------------------------------------------------------------

// Dummy PDO connection (Replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_database_user';
$password = 'your_database_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Example Call
$username = 'JohnDoe';
$reviewText = 'This product is amazing!';
$productID = 123;

if (addReview($username, $reviewText, $productID, $pdo)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Timestamp of when the review was created
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setters (optional - for update functionality)
     */
    public function setComment($comment) {
        $this->comment = $comment;
    }
}

/**
 * User Review Function (Demonstration)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User ID:</strong> " . $review->getUserId() . "<br>";
        echo "<strong>Product ID:</strong> " . $review->getProductId() . "<br>";
        echo "<strong>Rating:</strong> " . $review->getRating() . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
        echo "<strong>Date:</strong> " . $review->getDate() . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Create some review objects
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
$review2 = new UserReview(null, 789, 456, 4, "Good product, but a little pricey.");
$review3 = new UserReview(null, 123, 789, 3, "Okay product.");


// Store the reviews in an array
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides basic functionality for managing reviews and includes error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The review comment.
 * @param string $reviewId (Optional) The ID of the review to update.  If not provided, a new review is created.
 * @param string $dbConnection  A database connection object.
 *
 * @return array An array containing:
 *   - 'success': true if the operation was successful, false otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'reviewId': The ID of the newly created or updated review.
 *
 */
function create_update_review(
    $productId,
    $username,
    $rating,
    $comment,
    $reviewId = null,
    $dbConnection
) {
    $success = false;
    $message = '';
    $reviewId = null;


    // Validate inputs (basic validation - you should add more robust validation)
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.', 'reviewId' => null];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'reviewId' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'reviewId' => null];
    }


    // Prepare the SQL query
    $sql = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?) ";

    if ($reviewId !== null) {
        $sql .= " ON DUPLICATE KEY UPDATE comment = ? "; // Update existing review
    }

    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => 'Database preparation error.', 'reviewId' => null];
    }

    $values = array($productId, $username, $rating, $comment);

    if ($stmt->execute($values)) {
        $reviewId = $dbConnection->lastInsertId(); // Get the ID of the newly inserted row
        $success = true;
        $message = 'Review created/updated successfully.';
    } else {
        $success = false;
        $message = 'Error creating/updating review: ' . print_r($stmt->error, true);
    }

    return ['success' => $success, 'message' => $message, 'reviewId' => $reviewId];
}


// Example usage (assuming you have a database connection)
//  You'll need to replace this with your actual database connection
//  and create a table named 'reviews' with columns:
//  - productId (INT)
//  - username (VARCHAR)
//  - rating (INT)
//  - comment (TEXT)
//  - id (INT, PRIMARY KEY, AUTO_INCREMENT)

/*
$dbConnection = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$reviewData = create_update_review(
    123,  // Product ID
    'john_doe', // Username
    4,   // Rating
    'Great product! I highly recommend it.',
    null  // No review ID to update
);

if ($reviewData['success']) {
    echo "Review created with ID: " . $reviewData['reviewId'] . "<br>";
} else {
    echo "Error: " . $reviewData['message'] . "<br>";
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function handles the submission and display of user reviews.
 */

class UserReview {

    private $db_connection; // Database connection object

    public function __construct($db_config) {
        // Connect to the database
        $this->db_connection = new PDO(
            $db_config['driver'] . ":" . $db_config['host'] . ":" . $db_config['dbname'],
            $db_config['user'],
            $db_config['password']
        );

        // Set the error mode to exception
        $this->db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Submits a new user review.
     *
     * @param string $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return int|false The ID of the newly created review on success, or false on failure.
     */
    public function submitReview($product_id, $user_name, $review_text) {
        try {
            $stmt = $this->db_connection->prepare(
                "INSERT INTO reviews (product_id, user_name, review_text, review_date) VALUES (?, ?, ?, NOW())"
            );
            $stmt->bindParam(1, $product_id);
            $stmt->bindParam(2, $user_name);
            $stmt->bindParam(3, $review_text);
            $stmt->execute();

            return $this->db_connection->lastInsertId(); // Get the ID of the newly created review
        } catch (PDOException $e) {
            error_log("Error submitting review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($product_id) {
        $reviews = [];
        try {
            $stmt = $this->db_connection->prepare(
                "SELECT id, product_id, user_name, review_text, review_date FROM reviews WHERE product_id = ?"
            );
            $stmt->bindParam(1, $product_id);
            $stmt->execute();

            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = (object) [
                    'id' => $row['id'],
                    'product_id' => $row['product_id'],
                    'user_name' => $row['user_name'],
                    'review_text' => $row['review_text'],
                    'review_date' => $row['review_date']
                ];
            }
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return []; // Return an empty array if an error occurred
        }
        return $reviews;
    }


    /**
     *  Example of deleting a review
     *  (This is just an example - you'd likely have a review ID to pass in)
     */
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db_connection->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->bindParam(1, $review_id);
            $stmt->execute();

            return true; // Success
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}

// --- Example Usage ---

// Database configuration (replace with your actual credentials)
$db_config = [
    'driver' => 'mysql',
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_database_user',
    'password' => 'your_database_password'
];

// Create a UserReview object
$review = new UserReview($db_config);

// Example: Submit a new review
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'This is a fantastic product!';
$review_id = $review->submitReview($product_id, $user_name, $review_text);

if ($review_id) {
    echo "Review submitted successfully. Review ID: " . $review_id . "
";
} else {
    echo "Failed to submit review.
";
}

// Example: Get reviews for product 1
$reviews = $review->getReviewsByProduct($product_id);

echo "Reviews for product " . $product_id . ":
";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "  ID: " . $review->id . ", User: " . $review->user_name . ", Text: " . $review->review_text . "
";
    }
} else {
    echo "No reviews found for this product.
";
}

// Example: Delete a review (you'd typically get the review ID from somewhere)
// $review->deleteReview(1); //  Be careful - this will delete review with ID 1
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating   The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's comment/review text.
 * @param int $userId (Optional)  The ID of the user submitting the review. If not provided, it will generate a unique ID.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'reviewId': The ID of the newly created review, or the existing review ID if updated.
 *   - 'review': The review data as an associative array.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, $userId = null): array
{
    // Input validation
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'All fields are required.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    // Create a unique review ID (if not provided)
    if ($userId === null) {
        $userId = generateUniqueId();
    }

    // Data to be saved to the database
    $reviewData = [
        'productId' => $productId,
        'userId' => $userId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'created_at' => date('Y-m-d H:i:s'),  // Add timestamp for tracking
    ];

    // Simulate database interaction (Replace with your actual database logic)
    $success = saveReviewToDatabase($reviewData);

    if ($success) {
        return [
            'success' => true,
            'message' => 'Review created/updated successfully.',
            'reviewId' => $userId,
            'review' => $reviewData,
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Failed to save review to database.',
            'reviewId' => null,
            'review' => null,
        ];
    }
}

/**
 * Placeholder function to simulate database interaction.
 * Replace with your actual database logic.
 *
 * @param array $reviewData  The review data to save.
 * @return bool True if the save was successful, false otherwise.
 */
function saveReviewToDatabase(array $reviewData): bool
{
    // *** Replace this with your database logic ***
    // This is just a placeholder for demonstration purposes.

    // Example:  Simulate a successful save.
    // You would typically query your database here.
    //  For example:
    //  $result = $db->insert('reviews', $reviewData);
    //  return $result === false;  // or use $result['insert_id'] to get the ID.

    // In this example, we always return true to simulate success.
    return true;
}


/**
 * Placeholder function to generate a unique ID.
 * Replace with your actual unique ID generation logic.
 */
function generateUniqueId(): string
{
    // *** Replace this with your unique ID generation logic ***
    // Example:
    // return md5(time());  // A simple example.
    return 'unique-review-' . uniqid(); // A more robust example using uniqid()
}


/**
 *  Example Usage:
 */

// Create a new review
$reviewResult = createOrUpdateReview('123', 'JohnDoe', 4, 'Great product! Highly recommended.');

if ($reviewResult['success']) {
    echo "Review created successfully! ID: " . $reviewResult['reviewId'] . "<br>";
    print_r($reviewResult['review']); // Output the review data
} else {
    echo "Error creating review: " . $reviewResult['message'] . "<br>";
}

// Update an existing review (assuming a review ID exists)
$reviewResult = createOrUpdateReview('123', 'JaneSmith', 5, 'Excellent value for money.', 'review-1');

if ($reviewResult['success']) {
    echo "Review updated successfully! ID: " . $reviewResult['reviewId'] . "<br>";
    print_r($reviewResult['review']);
} else {
    echo "Error updating review: " . $reviewResult['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param array $reviews An array of existing reviews for the product (optional).
 *
 * @return array An array containing the updated reviews, or an error message if submission fails.
 */
function submitReview(string $productId, string $reviewText, string $username, array &$reviews = []): array {
  // Input validation (you can expand on this)
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }

  // Create the review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time() // Add a timestamp for sorting/filtering
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Display Reviews Function
 *
 * This function displays a list of reviews for a product.
 *
 * @param array $reviews An array of reviews for the product.
 *
 * @return string An HTML string containing the list of reviews, or an error message if no reviews are found.
 */
function displayReviews(array $reviews): string {
  if (empty($reviews)) {
    return "<p>No reviews yet. Be the first!</p>";
  }

  $html = '<ul>';
  foreach ($reviews as $review) {
    $html .= '<li><strong>' . htmlspecialchars($review['username']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . ' (' . date('Y-m-d H:i:s', $review['timestamp']) . ')</li>';
  }
  $html .= '</ul>';

  return $html;
}



// --- Example Usage ---

// Initial Reviews (optional - you'd typically get this from a database)
$productReviews = [];

// Submit a review
$newReviews = submitReview('product123', 'This is a fantastic product!', 'JohnDoe');
print_r($newReviews); // Output: Array ( [0] => Array ( [productId] => product123 [username] => JohnDoe [reviewText] => This is a fantastic product! [timestamp] => 1678886400 ) )

// Submit another review
$newReviews = submitReview('product123', 'Great value for money.', 'JaneSmith');
print_r($newReviews);

// Display the reviews
$reviewHTML = displayReviews($newReviews);
echo $reviewHTML;


// Demonstrating error handling
$errorResult = submitReview('product456', '', 'TestUser');
print_r($errorResult);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes input validation and basic sanitization.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text submitted by the user.
 * @param array $existingReviews (Optional) An array of existing reviews.
 * @return array An array containing the updated reviews.  Returns an empty array on error.
 */
function createAndDisplayUserReview(string $productId, string $reviewerName, string $reviewText, array $existingReviews = []) {

  // Input Validation and Sanitization - Crucial for Security!
  if (empty($reviewerName)) {
    error_log("Error: Reviewer name cannot be empty.");
    return []; // Handle invalid input - return an empty array for this scenario
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return [];
  }

  $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
  if (strlen($reviewText) > 500) { // Limit review text length
      error_log("Error: Review text exceeds the maximum length of 500 characters.");
      return [];
  }


  // Generate a unique ID for the review (using timestamp for uniqueness)
  $reviewId = uniqid();

  // Create the review data
  $review = [
    'id' => $reviewId,
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => time()  // Store the time of the review
  ];

  // Add the new review to the existing reviews
  $updatedReviews = array_merge($existingReviews, [$review]);  // Merges arrays

  // Log the review submission (for debugging/administration)
  error_log("New review submitted for product ID: " . $productId . " - " . json_encode($review));

  return $updatedReviews;
}

// --- Example Usage ---

// Initial setup - let's assume we have a product with ID '123'
$productReviews = [];

// First review
$newReviews = createAndDisplayUserReview('123', 'John Doe', 'This product is amazing!  I highly recommend it.');
if (!empty($newReviews)) {
    echo "First Review:
";
    print_r($newReviews);
}

// Second review
$newReviews = createAndDisplayUserReview('123', 'Jane Smith', 'It\'s okay, could be better.', $newReviews);
if (!empty($newReviews)) {
    echo "
Second Review:
";
    print_r($newReviews);
}

//Third review - demonstrating adding to existing array
$newReviews = createAndDisplayUserReview('123', 'Peter Jones', 'Fantastic value for money.', $newReviews);
if (!empty($newReviews)) {
    echo "
Third Review:
";
    print_r($newReviews);
}

?>


<?php

/**
 * Reviews class to manage user reviews for a product.
 */
class Review {

  private $productId;
  private $userId;
  private $rating;
  private $comment;

  /**
   * Constructor for the Review class.
   *
   * @param int $productId The ID of the product the review is for.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's written review.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  /**
   * Getters for the review properties.
   *
   * @return mixed
   */
  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  /**
   * Validates the review data.
   *
   * @return bool True if the review data is valid, false otherwise.
   */
  public function isValid(): bool {
    // Add validation logic here.  For example:
    // - Rating must be between 1 and 5
    // - Comment cannot be empty
    return $this->rating >= 1 && $this->rating <= 5 && !empty($this->comment);
  }

  /**
   *  Outputs the review in a formatted string
   * @return string A formatted string representation of the review.
   */
  public function __toString(): string {
    if (!$this->isValid()) {
      return "Invalid Review Data";
    }
    return "Product ID: " . $this->productId .
           "
User ID: " . $this->userId .
           "
Rating: " . $this->rating .
           "
Comment: " . $this->comment;
  }

}

/**
 *  User review function
 */
function generateReviewUserInterface() {
    echo "<!DOCTYPE html>";
    echo "<html>";
    echo "<head>";
    echo "<title>User Review Form</title>";
    echo "</head>";
    echo "<body>";
    echo "<h1>User Review Form</h1>";

    echo "<form method='post' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>";
    echo "<label for='productId'>Product ID:</label><br>";
    echo "<input type='number' id='productId' name='productId' required><br><br>";

    echo "<label for='userId'>User ID:</label><br>";
    echo "<input type='number' id='userId' name='userId' required><br><br>";

    echo "<label for='rating'>Rating (1-5):</label><br>";
    echo "<input type='number' id='rating' name='rating' min='1' max='5' required><br><br>";

    echo "<label for='comment'>Comment:</label><br>";
    echo "<textarea id='comment' name='comment' rows='4' cols='50' required></textarea><br><br>";

    echo "<input type='submit' value='Submit Review'>";
    echo "</form>";
    echo "</body>";
    echo "</html>";
}


// Example usage:
// Create a review object
$review = new Review(123, 456, 4, "Great product!");

// Print the review
echo $review; // Output the formatted review string

// Generate HTML for user review form
generateReviewUserInterface();

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, read, update, and delete user reviews.
 *
 *  @param string $review_text The text of the review.
 *  @param int $product_id The ID of the product the review is for.
 *  @param int $user_id The ID of the user submitting the review. (Optional - defaults to the logged-in user)
 *  @param int $rating The rating given for the review (e.g., 1-5).
 *  @return bool|string True on success, error message on failure.
 */
function create_user_review(string $review_text, int $product_id, int $user_id = null, int $rating = null) {
  // --- Input Validation & Sanitization ---
  $review_text = trim($review_text); // Remove leading/trailing whitespace
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  if ($rating === null || $rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  //  You might want to add more robust input validation and sanitization here,
  //  e.g., using a library like Sanitize or filtering out potentially malicious characters.

  // --- Database Interaction (Example using a hypothetical database connection) ---
  // Replace this with your actual database connection and query logic.
  $db = new DatabaseConnection(); // Assume this class handles database connection

  $query = "INSERT INTO reviews (product_id, user_id, review_text, rating) 
            VALUES (" . $product_id . ", " . ($user_id ?? 0) . ", '" . $review_text . "', " . $rating . ")";

  try {
    $result = $db->execute_query($query);
    if ($result) {
      return true; // Success
    } else {
      return "Error: Failed to insert review into database.";
    }
  } catch (Exception $e) {
    return "Error: Database error: " . $e->getMessage();
  }
}


/**
 *  Example of a simplified DatabaseConnection class (replace with your actual implementation)
 */
class DatabaseConnection {
  private $host = "localhost";
  private $username = "your_username";
  private $password = "your_password";
  private $database = "your_database";

  public function execute_query($query) {
    // Replace this with your database connection and query execution logic.
    // This is just a placeholder to demonstrate the workflow.
    try {
        // In a real implementation, you'd use a PDO or MySQLi connection here.
        // Example (using placeholder):
        // $conn = new PDO("mysql:host=$this->host;dbname=$this->database", $this->username, $this->password);
        // $stmt = $conn->prepare($query);
        // $stmt->execute();
        // return $stmt; 
        echo "Executing query: " . $query;
        return true; // Simulate success
    } catch (Exception $e) {
        throw new Exception("Database query error: " . $e->getMessage());
    }
  }
}



// --- Example Usage ---
$product_id = 123;
$review_text = "This product is amazing!  I highly recommend it.";
$user_id = 1; // Assuming user with ID 1 is logged in

$result = create_user_review($review_text, $product_id, $user_id, 5);

if ($result === true) {
  echo "Review created successfully! " . $result . "<br>";
} else {
  echo "Error creating review: " . $result . "<br>";
}


// Example without logged in user (uses the default user - typically the current user).
$result2 = create_user_review("Another good product.", $product_id, null, 4);
if($result2 === true) {
  echo "Review created (anonymous) successfully! " . $result2 . "<br>";
} else {
  echo "Error creating review: " . $result2 . "<br>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (optional) - Unique identifier for the review. If not provided, generated.
     * @param int $userId   - ID of the user submitting the review.
     * @param int $productId - ID of the product being reviewed.
     * @param int $rating    - Rating (e.g., 1-5).
     * @param string $comment - User's comment/feedback.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the date/time of the review
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     *  Setters (Optional - use for data modification)
     *  @param mixed $value
     */

     public function setRating($rating) {
        $this->rating = $rating;
     }

     public function setComment($comment) {
        $this->comment = $comment;
     }


    /**
     *  Display Review (for demonstration)
     *  @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}



/**
 * Example Usage
 */
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommend.");
$review2 = new UserReview(10, 789, 112, 4, "Good value for money.");

echo $review1->displayReview() . PHP_EOL;
echo $review2->displayReview() . PHP_EOL;


/**
 *  Function to Process Reviews (example)
 */
function processReviews($reviews) {
    echo "--- Review Summary ---" . PHP_EOL;
    $totalRating = 0;
    $reviewCount = count($reviews);

    foreach ($reviews as $review) {
        $totalRating += $review->getRating();
        echo $review->displayReview() . PHP_EOL;
    }

    if ($reviewCount > 0) {
        $averageRating = $totalRating / $reviewCount;
        echo "Average Rating: " . $averageRating . PHP_EOL;
    } else {
        echo "No reviews yet." . PHP_EOL;
    }
}

// Example usage of the processReviews function
$reviews = [$review1, $review2];
processReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName  The name of the user submitting the review.
 * @param string $userRating  The user's rating (e.g., 1-5 stars).
 * @param string $reviewText The user's written review.
 * @param array $dbConnection  Database connection object (optional - handles connection)
 *
 * @return array  An array containing:
 *               - 'success': true if the review was successfully saved, false otherwise.
 *               - 'message': A message indicating the success or failure of the operation.
 *               - 'review': The newly created review data (if successful).
 */
function saveUserReview(
    string $productId,
    string $userName,
    string $userRating,
    string $reviewText,
    $dbConnection = null // Optional: Database connection object
) {
    $success = false;
    $message = '';
    $review = [];

    // Validate inputs (basic example - expand as needed)
    if (empty($productId) || empty($userName) || empty($userRating) || empty($reviewText)) {
        $message = 'Error: All fields are required.';
        return ['success' => false, 'message' => $message, 'review' => $review];
    }

    // Convert rating to integer (e.g., '5' becomes 5)
    $userRating = (int) $userRating;

    // Sanitize inputs to prevent SQL injection
    $productId = mysqli_real_escape_string($dbConnection, $productId);
    $userName = mysqli_real_escape_string($dbConnection, $userName);
    $reviewText = mysqli_real_escape_string($dbConnection, $reviewText);

    // ***  Database Logic  ***
    try {
        // Construct the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, rating, review_text)
                VALUES ('$productId', '$userName', $userRating, '$reviewText')";

        // Execute the query
        $result = mysqli_query($dbConnection, $sql);

        if ($result) {
            $success = true;
            $review = [
                'id' => mysqli_insert_id($dbConnection),  // Get the ID of the newly inserted row
                'product_id' => $productId,
                'user_name' => $userName,
                'rating' => $userRating,
                'review_text' => $reviewText,
                'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
            ];
        } else {
            $message = 'Error: Query failed: ' . mysqli_error($dbConnection);
        }
    } catch (Exception $e) {
        $message = 'Database Error: ' . $e->getMessage();
    }

    return ['success' => $success, 'message' => $message, 'review' => $review];
}


/**
 * Function to retrieve reviews for a product
 * @param string $productId The product ID to retrieve reviews for
 * @param array $dbConnection Database connection object
 * @return array An array containing the reviews.
 */
function getReviewsForProduct(string $productId, $dbConnection = null)
{
    $reviews = [];

    try {
        $sql = "SELECT id, user_name, rating, review_text, created_at FROM reviews WHERE product_id = '$productId'";
        $result = mysqli_query($dbConnection, $sql);

        if ($result) {
            while ($row = mysqli_fetch_assoc($result)) {
                $reviews[] = [
                    'id' => $row['id'],
                    'user_name' => $row['user_name'],
                    'rating' => $row['rating'],
                    'review_text' => $row['review_text'],
                    'created_at' => $row['created_at']
                ];
            }
        }
    } catch (Exception $e) {
        error_log("Database Error: " . $e->getMessage()); // Log error for debugging
        // Handle the error appropriately (e.g., display a message to the user)
    }

    return $reviews;
}


// ** Example Usage (Simulated Database Connection) **
// This is just for demonstration.  In a real application, you'd establish
// a proper database connection.

// Create a dummy database connection (replace with your actual connection)
$dbConnection = mysqli_connect("localhost", "username", "password", "database_name");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}



// Example 1: Save a review
$review_data = saveUserReview(
    "123",
    "John Doe",
    "5",
    "This is a fantastic product!  I highly recommend it.",
    $dbConnection
);

if ($review_data['success']) {
    echo "Review saved successfully!<br>";
    print_r($review_data['review']); // Display the saved review data
} else {
    echo "Error saving review: " . $review_data['message'] . "<br>";
}


// Example 2: Get Reviews for Product
$product_reviews = getReviewsForProduct("123", $dbConnection);
echo "<h2>Reviews for Product 123:</h2>";
if (count($product_reviews) > 0) {
    echo "<ul>";
    foreach ($product_reviews as $review) {
        echo "<li><b>User:</b> " . $review['user_name'] . "<br><b>Rating:</b> " . $review['rating'] . "<br><b>Review:</b> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews found for this product.</p>";
}

// Close the database connection
mysqli_close($dbConnection);

?>


<?php

/**
 * User Review Function
 *
 * This function handles the submission and display of user reviews.
 * It includes validation, saving to a database, and displaying the reviews.
 *
 * @param string $username The username of the user submitting the review.
 * @param string $review_text The review text entered by the user.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 * @return array An array containing:
 *   - 'success' => bool: True if the review was submitted successfully, false otherwise.
 *   - 'message' => string: A message indicating the result of the operation.
 *   - 'reviews' => array: An array of review objects, or an empty array if there are no reviews yet.
 */
function submit_review(string $username, string $review_text, string $db_host, string $db_name, string $db_user, string $db_password) {

    // Validation (Simple example - can be expanded)
    if (empty($username) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Username and review text cannot be empty.',
            'reviews' => []
        ];
    }

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error); // Or handle the error differently
    }

    // Prepare and execute the SQL query
    $stmt = $conn->prepare("INSERT INTO reviews (username, review_text) VALUES (?, ?)");
    $stmt->bind_param("ss", $username, $review_text);
    $stmt->execute();

    // Check for errors
    if ($stmt->errno) {
        $stmt->close();
        return [
            'success' => false,
            'message' => 'Error submitting review: ' . $stmt->error,
            'reviews' => []
        ];
    }

    $stmt->close();

    // Fetch all reviews
    $reviews_query = "SELECT * FROM reviews";
    $result = $conn->query($reviews_query);

    if ($result->num_rows > 0) {
        $reviews = [];
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    } else {
        $reviews = [];
    }

    // Close connection
    $conn->close();

    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'reviews' => $reviews
    ];
}

// Example Usage:
//  Replace these with your actual database credentials
$db_host = 'localhost';
$db_name = 'my_database';
$db_user = 'my_user';
$db_password = 'my_password';

// Example 1: Successful submission
$result = submit_review('John Doe', 'This is a great product!', $db_host, $db_name, $db_user, $db_password);
print_r($result);
// Example 2:  Empty input
$result = submit_review('', 'This is a review', $db_host, $db_name, $db_user, $db_password);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param array $reviews An array of existing reviews for this product (optional, for updating).
 *
 * @return array An array containing the updated reviews array or a new array if no reviews existed.
 */
function createReview(string $productId, string $username, string $rating, string $comment, array $reviews = []): array
{
    // Input Validation (Important!)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create the new review
    $newReview = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Add the new review to the existing array
    $reviews[] = $newReview;

    return $reviews;
}


/**
 * Function to display reviews for a product.
 *
 * @param array $reviews An array of reviews.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $productId = key($reviews) . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Initialize Reviews (Optional - can be done from a database)
$productReviews = [];

// Example 1: Creating a new review
try {
    $productReviews = createReview("123", "JohnDoe", 4, "Great product, highly recommended!");
    displayReviews($productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

// Example 2:  Adding another review
try {
    $productReviews = createReview("123", "JaneSmith", 5, "Excellent value for money!", $productReviews);
    displayReviews($productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

// Example 3:  Demonstrating input validation
try {
    $productReviews = createReview("", "Invalid", 2, "Bad review", $productReviews); // Empty product ID
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It's designed to be used with a database.  For demonstration purposes,
 * we'll assume a simple database connection and table structure.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param string $db_connection A database connection object.
 *
 * @return int|bool  The ID of the newly created review if successful, or false on error.
 */
function createReview(string $productId, string $username, string $rating, string $comment, $db_connection)
{
    // Sanitize and validate inputs (IMPORTANT!)
    $productId = filter_var($productId, FILTER_SANITIZE_NUMBER_INT);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array('min' => 1, 'max' => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    if (!$productId || !$username || !$rating || !$comment) {
        error_log("Error: Missing required review fields."); // Log for debugging
        return false;
    }

    if (!is_numeric($productId)) {
        error_log("Error: Invalid product ID.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Invalid username (only alphanumeric and underscores allowed).");
        return false;
    }


    // Prepare SQL statement (Use prepared statements to prevent SQL injection!)
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES (:product_id, :username, :rating, :comment)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    // Bind parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    // Get the ID of the newly created review
    $reviewId = $stmt->insert_id;

    // Close the statement
    $stmt->close();

    return $reviewId;
}

/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param int $productId The ID of the product.
 * @param $db_connection A database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(int $productId, $db_connection)
{
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return [];
    }

    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


/**
 * Update Review
 *
 * Updates an existing review.
 *
 * @param int $reviewId The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 * @param $db_connection A database connection object.
 *
 * @return bool True on success, false on failure.
 */
function updateReview(int $reviewId, string $rating, string $comment, $db_connection)
{
    $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


/**
 * Delete Review
 *
 * Deletes a review.
 *
 * @param int $reviewId The ID of the review to delete.
 * @param $db_connection A database connection object.
 *
 * @return bool True on success, false on failure.
 */
function deleteReview(int $reviewId, $db_connection)
{
    $sql = "DELETE FROM reviews WHERE id = :id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    $stmt->bindParam(':id', $reviewId);

    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


// Example Usage (Illustrative - requires database setup)
// Create a database connection (replace with your actual connection details)
// $db_connection = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
// $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling for errors

// Create a review
// $reviewId = createReview(123, "JohnDoe", 4, "Great product!", $db_connection);
// if ($reviewId) {
//     echo "Review created with ID: " . $reviewId . "<br>";
// } else {
//     echo "Error creating review.<br>";
// }

// Get reviews for product 123
// $reviews = getReviewsForProduct(123, $db_connection);
// echo "Reviews for product 123:<br>";
// foreach ($reviews as $review) {
//     echo "Product ID: " . $review['product_id'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
// }

// Update a review
// if (updateReview(1, 5, "Excellent!", $db_connection)) {
//     echo "Review updated successfully.<br>";
// } else {
//     echo "Error updating review.<br>";
// }

// Delete a review
// if (deleteReview(1, $db_connection)) {
//     echo "Review deleted successfully.<br>";
// } else {
//     echo "Error deleting review.<br>";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $productName The name of the product.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @param array  $reviews An optional array of existing reviews to populate the display.  If empty, a new array is created.
 *
 * @return array An array containing the reviews.  Returns an empty array if an error occurs.
 */
function createAndDisplayReview(string $productId, string $productName, string $reviewText, string $username, array $reviews = []) {

  // Input validation - crucial for security and data integrity
  if (empty($reviewText)) {
    return []; // Return empty array if review text is empty
  }
  if (strlen($reviewText) > 1000) { // Simple length limit (adjust as needed)
    return []; // Return empty array if review text is too long
  }

  // Create the review object (you might want a more sophisticated Review class)
  $review = [
    'productId' => $productId,
    'productName' => $productName,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp for organization
  ];

  // Add the new review to the existing array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Displays the reviews for a given product.
 *
 * @param array $reviews An array of review objects.
 *
 * @return string HTML output of the reviews.  Returns an empty string if there are no reviews.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    return '<p>No reviews yet.</p>';
  }

  $html = '<ul>';
  foreach ($reviews as $review) {
    $html .= '<li>';
    $html .= '<p><strong>' . htmlspecialchars($review['username']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . '</p>';
    $html .= '<p><em>' . htmlspecialchars($review['timestamp']) . '</p>';
    $html .= '</li>';
  }
  $html .= '</ul>';
  return $html;
}


// Example Usage:

// Initial Review
$productID = '123';
$productName = 'Awesome Widget';
$reviewText = 'This widget is fantastic!  It works perfectly.';
$username = 'JohnDoe';
$reviews = createAndDisplayReview($productID, $productName, $reviewText, $username);

// Display the reviews
echo "<h2>Reviews for " . $productName . "</h2>";
echo displayReviews($reviews);


// Adding another review
$reviews = createAndDisplayReview($productID, $productName, 'Another great product!', 'JaneSmith');
echo "<h2>More Reviews for " . $productName . "</h2>";
echo displayReviews($reviews);

?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * @param int $reviewId (optional, defaults to 0)
   * @param int $userId
   * @param int $productId
   * @param int $rating (1-5)
   * @param string $comment
   */
  public function __construct($reviewId = 0, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the review date/time
  }

  /**
   * Getters and Setters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function setReviewId($reviewId) {
    $this->reviewId = $reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function setUserId($userId) {
    $this->userId = $userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function setProductId($productId) {
    $this->productId = $productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function setRating($rating) {
    if ($rating >= 1 && $rating <= 5) {
      $this->rating = $rating;
    } else {
      // Handle invalid rating (e.g., log an error, throw an exception)
      error_log("Invalid rating provided: " . $rating); // Log the error
      // Or:  throw new Exception("Invalid rating. Rating must be between 1 and 5.");
    }
  }

  public function getComment() {
    return $this->comment;
  }

  public function setComment($comment) {
    $this->comment = $comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   *  Method to display the review data
   *  Useful for printing or returning from a function
   *
   * @return array An associative array containing the review data
   */
  public function toArray() {
    return [
      'review_id' => $this->getReviewId(),
      'user_id' => $this->getUserId(),
      'product_id' => $this->getProductId(),
      'rating' => $this->getRating(),
      'comment' => $this->getComment(),
      'date' => $this->getDate()
    ];
  }
}


/**
 * User Review Review Function
 */
function reviewProduct($userId, $productId, $rating, $comment) {
  // Validation (basic - more robust validation is recommended for production)
  if (!is_numeric($userId) || !is_numeric($productId) || !is_numeric($rating)) {
    return "Error: Invalid input.  User ID, Product ID, and Rating must be numeric.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Create a new review object
  $review = new UserReview($userId, $productId, $rating, $comment);

  // You would typically save this review to a database here.
  // For example:
  // $review->saveToDatabase();

  // Return the review data in a user-friendly format
  return $review->toArray();
}


// --- Example Usage ---
// Review example 1
$reviewData1 = reviewProduct(123, 456, 4, "Great product!  I love it.");
print_r($reviewData1);
echo "
";

// Review example 2 - demonstrating error handling
$reviewData2 = reviewProduct("abc", 789, 3, "Okay, but could be better.");
echo $reviewData2;
echo "
";

// Review example 3 - Demonstrating invalid rating handling
$reviewData3 = reviewProduct(456, 789, 6, "Fantastic!");
print_r($reviewData3);
echo "
";


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param array $reviews (Optional) An array of existing reviews for the product.  Defaults to an empty array.
 *
 * @return array An array of reviews, including the new review added.
 */
function createAndManageReviews(string $productId, string $username, string $rating, string $comment, array &$reviews = []): array {
    // Validate input (Basic example - enhance with more robust validation)
    if (!is_numeric($rating) || !is_int($rating) || $rating < 1 || $rating > 5) {
        return $reviews; // Return existing reviews if invalid rating
    }

    // Add the new review
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for sorting
    ];
    $reviews[] = $review;

    // Sort reviews by timestamp (most recent first)
    usort($reviews, function($a, $b) {
        return $b['timestamp'] - $a['timestamp'];
    });

    return $reviews;
}

// --------------------- Example Usage ---------------------

// Initialize an empty array of reviews
$reviews = [];

// Create some reviews
$reviews = createAndManageReviews('product123', 'john.doe', 4, 'Great product!  Highly recommended.', $reviews);
$reviews = createAndManageReviews('product123', 'jane.smith', 5, 'Excellent service and fast delivery.', $reviews);
$reviews = createAndManageReviews('product456', 'peter.jones', 3, 'It was okay, nothing special.', $reviews); // Another product

// Display the reviews
echo "<h2>Reviews for Product 123:</h2>";
if (count($reviews)) {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . $review['rating'] . " - " . $review['comment'] . " (Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . ")</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}

echo "<h2>Reviews for Product 456:</h2>";
if (count($reviews)) {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . $review['rating'] . " - " . $review['comment'] . " (Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . ")</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_id The unique identifier for the user submitting the review.
 * @param string $rating  The user's rating (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 *
 * @return bool True on success, false on failure.
 */
function create_user_review(string $item_id, string $user_id, string $rating, string $comment) {
  // ** Validation - VERY IMPORTANT!  Adapt this to your specific requirements.  **
  //  This is a basic example. You should add more robust validation here,
  //  such as checking for valid rating values, input lengths, and potentially
  //  sanitization to prevent XSS attacks.

  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review submission.");
    return false;
  }

  if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
    error_log("Error: Invalid rating value. Rating must be an integer between 1 and 5.");
    return false;
  }

  if (strlen($comment) > 500) {  // Limit comment length to prevent abuse
    error_log("Error: Comment exceeds maximum length.");
    return false;
  }

  // ** Database Interaction - Replace with your database connection and logic. **
  // This is a placeholder example.  Adapt it to your database system (MySQL, PostgreSQL, etc.).

  try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $db->prepare("INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (:item_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $stmt->execute();
    return true; // Success!

  } catch (PDOException $e) {
    error_log("Error creating review: " . $e->getMessage());  // Log the error for debugging
    return false; // Failed to create review
  }
}


// ** Example Usage (Demonstration) **
//
// Assuming you have a "reviews" table in your database with columns:
// - item_id (VARCHAR)
// - user_id (VARCHAR)
// - rating (INT)
// - comment (TEXT)
//
// $item_id = "product123";
// $user_id = "user456";
// $rating = 4;
// $comment = "Great product, would recommend!";

// if (create_user_review($item_id, $user_id, $rating, $comment)) {
//   echo "Review submitted successfully!";
// } else {
//   echo "Error submitting review.";
// }


// **  Displaying Reviews (Example - Adapt to your presentation needs) **

/**
 * Displays reviews for a given item.
 *
 * @param string $item_id The item ID to retrieve reviews for.
 */
function display_reviews(string $item_id) {
    try {
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        $stmt = $db->prepare("SELECT * FROM reviews WHERE item_id = :item_id");
        $stmt->bindParam(':item_id', $item_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if (empty($reviews)) {
            echo "<p>No reviews found for this item.</p>";
        } else {
            echo "<h2>Reviews for " . $item_id . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<strong>User:</strong> " . $review['user_id'] . "<br>";
                echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
                echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>"; // Sanitize output!
                echo "</li>";
            }
            echo "</ul>";
        }

    } catch (PDOException $e) {
        error_log("Error retrieving reviews: " . $e->getMessage());
        echo "<p>Error retrieving reviews.</p>";
    }
}


// Example of calling the display function
// display_reviews("product123");



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, False otherwise.
 *   - 'message': A message indicating the status of the review submission.
 *   - 'review': The submitted review data (success only).
 */
function submitReview(string $productId, string $reviewText, string $username): array
{
    // Input Validation
    if (empty($productId)) {
        return [
            'success' => false,
            'message' => 'Product ID cannot be empty.',
            'review' => null,
        ];
    }

    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => null,
        ];
    }

    // Sanitize input (basic example - can be expanded)
    $reviewText = htmlspecialchars($reviewText);  // Prevents XSS attacks

    // TODO:  Add more robust sanitization and validation here
    // For example, limit review length, allow only certain characters, etc.

    // Store the review (Placeholder - Replace with your database logic)
    // This is just a simulation - in a real application, you'd save this data to a database.
    $reviewData = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => time()  // Add timestamp for ordering
    ];

    // Simulate saving to database
    //saveReviewToDatabase($reviewData);  // Replace with your actual database saving function

    // Return successful response
    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $reviewData,
    ];
}


/**
 * Function to display the review based on product ID.  This is just a placeholder.
 *
 * @param string $productId The ID of the product or service.
 * @return string The HTML display of the review.
 */
function displayReview(string $productId): string
{
    // Replace with your database query to retrieve the review for the given product ID
    // This is just a demo - using a hardcoded review for this example.

    $reviews = [
        'product1' => [
            'username' => 'John Doe',
            'reviewText' => 'Great product!  I highly recommend it.',
            'timestamp' => time()
        ],
        'product2' => [
            'username' => 'Jane Smith',
            'reviewText' => 'The service was excellent. Very helpful staff.',
            'timestamp' => time()
        ]
    ];

    if (isset($reviews[$productId])) {
        return sprintf(
            '<b>Username:</b> %s<br>
            <b>Review:</b> %s<br>
            <b>Timestamp:</b> %s',
            $reviews[$productId]['username'],
            $reviews[$productId]['reviewText'],
            $reviews[$productId]['timestamp']
        );
    } else {
        return 'No reviews found for this product.';
    }
}

// Example Usage:
$productId = 'product1';  // Or 'product2'
$reviewText = 'This is a fantastic review!';
$username = 'Test User';

$result = submitReview($productId, $reviewText, $username);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    echo "Review Data: " . print_r($result['review'], true) . "<br>";
    echo displayReview($productId); // Display the review
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews  An existing array of reviews for the product (optional).
 *
 * @return array  The updated array of reviews.
 */
function createAndDisplayReview(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
  // Validation (Simple - extend as needed)
  if (empty($rating) || !is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
    echo "<p style='color: red;'>Invalid rating. Rating must be a number between 1 and 5.</p>";
    return $reviews; // Return existing reviews - don't add invalid ones
  }

  if (empty($comment)) {
    echo "<p style='color: red;'>Please enter a review comment.</p>";
    return $reviews;
  }
  
  // Create the review object (could be an array, object, or custom class)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for the review
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Display the review (optional - you can remove this and handle display elsewhere)
  echo "<div class='review'>";
  echo "<p><strong>Username:</strong> " . htmlspecialchars($username) . "</p>";
  echo "<p><strong>Rating:</strong> " . htmlspecialchars($rating) . "</p>";
  echo "<p><strong>Comment:</strong> " . htmlspecialchars($comment) . "</p>";
  echo "<p><strong>Date:</strong> " . htmlspecialchars($review['date']) . "</p>";
  echo "</div>";
  
  return $reviews;
}


// Example usage:
$productReviews = [];

// Create a review
$productReviews = createAndDisplayReview("product123", "JohnDoe", 4, "Great product!  I highly recommend it.", $productReviews);

// Create another review
$productReviews = createAndDisplayReview("product123", "JaneSmith", 5, "Excellent value for money.", $productReviews);

// Display all reviews
echo "<h2>Product Reviews for Product 123:</h2>";
foreach ($productReviews as $review) {
  echo $review['comment'] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes input validation, sanitization, and basic data storage.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating (1-5).
 *
 * @return bool|string  Returns true on success, or an error message as a string on failure.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating) {

  // Input Validation -  Crucial for security and data integrity
  if (empty($product_id)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($user_name)) {
    return "Error: User name cannot be empty.";
  }
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Sanitize Input - Prevent common vulnerabilities (SQL injection, XSS, etc.)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING); // Basic sanitization - adjust as needed
  $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

  // Data Validation -  Check that sanitized data is valid.
  if (!ctype_alnum($user_name)) {
    return "Error: User name must contain only letters and numbers.";
  }

  //  Database Interaction - Replace with your actual database code
  try {
    // Establish database connection (replace with your connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)");

    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    return true; // Success
  } catch (PDOException $e) {
    // Handle database errors
    return "Error: Database error - " . $e->getMessage();
  }
}

// Example Usage:
$product_id = "123";
$user_name = "John Doe";
$review_text = "This product is amazing!";
$rating = 5;

$result = submit_review($product_id, $user_name, $review_text, $rating);

if ($result === true) {
  echo "Review submitted successfully!";
} else {
  echo $result;  // Display the error message
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text and rating) and
 * stores it in a database.  It includes basic input validation and error handling.
 *
 * @param string $reviewText The user's review text.
 * @param int $rating A rating from 1 to 5.
 * @param string $productId The ID of the product being reviewed. (For example, from a database)
 * @return bool True if the review was successfully stored, false otherwise.
 */
function storeUserReview(string $reviewText, int $rating, string $productId)
{
    // Input Validation
    if (empty($reviewText)) {
        error_log("Invalid review text: Empty review text provided.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    if (empty($productId)) {
        error_log("Invalid product ID: Product ID cannot be empty.");
        return false;
    }


    // **Simulated Database Interaction (Replace with your actual database logic)**
    // This part simulates storing the review in a database.  You'll need to
    // replace this with your actual database connection and query logic.
    $review = [
        'review_text' => $reviewText,
        'rating' => $rating,
        'product_id' => $productId,
        'created_at' => date('Y-m-d H:i:s'),  // Add timestamp for tracking
    ];

    // Example:  Storing to a simple array (replace with your database insert)
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Ensure session exists
    $reviews[] = $review;
    $_SESSION['reviews'] = $reviews;



    // **Error Logging (Recommended)**
    error_log("User review stored: " . $reviewText . " - Rating: " . $rating . " - Product ID: " . $productId);


    return true;
}


// **Example Usage (For testing)**
// Assume you have a form to submit the review.
// This is just an example; you'll integrate this with your form.

// Simulate form submission
// $_POST['review_text'] = "This product is amazing!";
// $_POST['rating'] = 5;
// $_POST['product_id'] = "123";


// if (isset($_POST['review_text']) && isset($_POST['rating']) && isset($_POST['product_id'])) {
//     if (storeUserReview($_POST['review_text'], $_POST['rating'], $_POST['product_id'])) {
//         echo "Review submitted successfully!";
//     } else {
//         echo "Error submitting review.  Please try again.";
//     }
// }


?>


<?php

// Assuming you have a database connection established in $conn

function storeUserReview(string $reviewText, int $rating, string $productId) {
  // Validation (keep the same)

  $stmt = $conn->prepare("INSERT INTO reviews (review_text, rating, product_id, created_at) VALUES (?, ?, ?, NOW())");
  $stmt->bind_param("ssis", $reviewText, $productId, $rating);

  if ($stmt->execute()) {
    return true;
  } else {
    error_log("Error storing review: " . $stmt->error);
    return false;
  }
  $stmt->close();
}

// ... rest of the function code
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process user reviews,
 * including saving them to a database or displaying them.
 *
 * @param string $username     The username of the reviewer.
 * @param string $review_text  The text of the review.
 * @param int    $rating       The rating (e.g., 1-5).
 * @param int    $product_id  The ID of the product being reviewed.
 * @param array $options (Optional) Array of options to customize the function.
 *                       - 'save_to_db' (bool):  Whether to save to the database (default: true)
 *                       - 'db_host'        (string): Database host (e.g., 'localhost')
 *                       - 'db_name'        (string): Database name
 *                       - 'db_user'        (string): Database username
 *                       - 'db_pass'        (string): Database password
 *
 * @return array  An array containing the review details or an error message if saving failed.
 */
function create_user_review(
    string $username,
    string $review_text,
    int $rating,
    int $product_id,
    array $options = []
): array
{
    // Validate inputs (basic example - expand for production)
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Default options
    $options = array_merge([
        'save_to_db' => true,
        'db_host' => 'localhost',
        'db_name' => 'your_database_name',
        'db_user' => 'your_database_user',
        'db_pass' => 'your_database_password',
    ], $options); // Merge with provided options

    // Save to Database (Example - Adapt for your database)
    $review_data = [
        'username' => $username,
        'review_text' => $review_text,
        'rating' => $rating,
        'product_id' => $product_id,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    try {
        // Connect to the database
        $conn = new mysqli($options['db_host'], $options['db_user'], $options['db_pass'], $options['db_name']);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception('Connection failed: ' . $conn->connect_error);
        }

        // Execute the query
        $sql = "INSERT INTO reviews (username, review_text, rating, product_id, created_at) VALUES (?, ?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ssis", $review_data['username'], $review_data['review_text'], $review_data['rating'], $review_data['product_id']);
        $stmt->execute();

        // Check if the query was successful
        if ($stmt->affected_rows === 0) {
           throw new Exception('Failed to insert review into database.');
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();

        return ['success' => 'Review created successfully.'];

    } catch (Exception $e) {
        return ['error' => 'Error creating review: ' . $e->getMessage()];
    }
}


// Example Usage:
$review = create_user_review(
    'john_doe',
    'This product is amazing!',
    5,
    123,
    [
        'save_to_db' => false, // Don't save to the database
        'db_host' => 'localhost',
        'db_name' => 'my_reviews',
    ]
);

print_r($review); // Output the review details or error message
?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview
{
    /**
     * @var array Array of reviews
     */
    private $reviews = [];

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $reviewer  The name of the reviewer.
     * @param string $comment   The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., invalid input).
     */
    public function addReview(string $reviewer, string $comment)
    {
        if (empty($reviewer) || empty($comment)) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'reviewer' => $reviewer,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by a specific reviewer.
     *
     * @param string $reviewer The name of the reviewer to filter by.
     * @return array An array of review objects for the specified reviewer.
     */
    public function getReviewsByReviewer(string $reviewer)
    {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['reviewer'] === $reviewer) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews.
     */
    public function displayReviews()
    {
        echo "<table border='1'>
";
        echo "<tr><th>Reviewer</th><th>Comment</th><th>Date</th></tr>
";

        foreach ($this->getAllReviews() as $review) {
            echo "<tr>
";
            echo "<td>" . htmlspecialchars($review['reviewer']) . "</td>
";
            echo "<td>" . htmlspecialchars($review['comment']) . "</td>
";
            echo "<td>" . htmlspecialchars($review['date']) . "</td>
";
            echo "</tr>
";
        }
        echo "</table>
";
    }
}

// Example Usage:

// Create a new review object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("John Doe", "Great product!  Highly recommended.");
$reviewSystem->addReview("Jane Smith", "The product is okay, but could be better.");
$reviewSystem->addReview("Peter Jones", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific reviewer
echo "<br><h2>Reviews by John Doe:</h2>";
$johnReviews = $reviewSystem->getReviewsByReviewer("John Doe");
if (count($johnReviews) > 0) {
    foreach ($johnReviews as $review) {
        echo htmlspecialchars($review['comment']) . "<br>";
    }
} else {
    echo "No reviews found for John Doe.";
}

?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows users to submit reviews, displays them, and handles
 * basic data validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param string $rating  The rating (e.g., 1-5).  Should be validated.
 *
 * @return array  An array containing success/failure status and any error messages.
 */
function handleUserReview(string $username, string $reviewText, string $rating) {

  // Validate input - VERY IMPORTANT!
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }

  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Invalid rating.  Please enter a number between 0 and 5.'];
  }


  // In a real application, you would save this data to a database.
  // This is just a simplified demonstration.

  // Simulate saving the review (replace with database interaction)
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'rating' => $rating,
    'timestamp' => time()  // Add a timestamp for ordering
  ];

  // Add review to a simple array (replace with database)
  $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; //use session for simplicity

  $reviews[] = $review;
  $_SESSION['reviews'] = $reviews;



  return ['success' => true, 'message' => 'Review submitted successfully!'];
}



// Example usage (for demonstration) -  This won't run when you visit the page
// You'd likely use this in a controller function within a web framework
if (isset($_POST['username']) && isset($_POST['review']) && isset($_POST['rating'])) {
    $username = $_POST['username'];
    $reviewText = $_POST['review'];
    $rating = $_POST['rating'];

    $result = handleUserReview($username, $reviewText, $rating);

    if ($result['success']) {
        echo '<p style="color: green;">' . $result['message'] . '</p>';
    } else {
        echo '<p style="color: red;">' . $result['message'] . '</p>';
    }
}


//  Example HTML form for submitting the review
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review Form</title>
</head>
<body>

    <h1>Submit a Review</h1>

    <form method="post" action="">  <!-- Important:  'action=""'  means the form posts to the same page -->

        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="review">Review Text:</label>
        <textarea id="review" name="review" rows="4" cols="50" required></textarea><br><br>

        <label for="rating">Rating (1-5):</label>
        <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

        <button type="submit">Submit Review</button>
    </form>


    <h2>Existing Reviews</h2>

    <?php
    // Display existing reviews (for demonstration)
    if (isset($_SESSION['reviews'])) {
        echo '<h3>Reviews:</h3>';
        echo '<ul>';
        foreach ($_SESSION['reviews'] as $review) {
            echo '<li><strong>Username:</strong> ' . htmlspecialchars($review['username']) . '<br>';
            echo '<strong>Review:</strong> ' . htmlspecialchars($review['review']) . '<br>';
            echo '<strong>Rating:</strong> ' . $review['rating'] . ' (Submitted: ' . date('Y-m-d H:i:s', $review['timestamp']) . ')</li>';
        }
        echo '</ul>';
    } else {
        echo '<p>No reviews yet.</p>';
    }
    ?>


</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes basic validation and database interaction (using a placeholder database).
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The user-submitted review text.
 * @param string $dbHost     The database host.
 * @param string $dbUser     The database user.
 * @param string $dbPassword The database password.
 * @param string $dbName     The database name.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully submitted, false otherwise.
 *               - 'message':  A message indicating the status of the review submission.
 *               - 'review_id': The ID of the newly created review (if successful).
 */
function submitReview(string $productName, string $reviewText, string $dbHost, string $dbUser, string $dbPassword, string $dbName)
{
    // Validate input (very basic - improve for production)
    if (empty($productName) || empty($reviewText)) {
        return ['success' => false, 'message' => 'Product name and review text cannot be empty.', 'review_id' => null];
    }

    // Sanitize input (important for security - use proper escaping techniques)
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);

    // Database connection (using a placeholder - replace with your actual connection code)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return ['success' => false, 'message' => "Failed to connect to database: " . $conn->connect_error, 'review_id' => null];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_name, review_text, review_date) VALUES (?, ?, NOW())";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => "Failed to prepare statement: " . $conn->error, 'review_id' => null];
    }

    // Bind parameters
    $stmt->bind_param("ss", $productName, $reviewText);

    // Execute the statement
    if (!$stmt->execute()) {
        return ['success' => false, 'message' => "Failed to insert review: " . $stmt->error, 'review_id' => null];
    }

    // Get the ID of the newly created review
    $review_id = $conn->insert_id;

    // Close the statement and connection
    $stmt->close();
    $conn->close();

    return ['success' => true, 'message' => 'Review submitted successfully!', 'review_id' => $review_id];
}


// Example Usage:
//  (Replace these with your actual database credentials)
$dbHost = 'localhost';
$dbUser = 'your_db_user';
$dbPassword = 'your_db_password';
$dbName = 'your_db_name';


// Test submission
$reviewResult = submitReview('Awesome Product', 'This is an amazing product!  I highly recommend it.', $dbHost, $dbUser, $dbPassword, $dbName);

if ($reviewResult['success']) {
    echo "Review submitted successfully! Review ID: " . $reviewResult['review_id'] . "<br>";
} else {
    echo "Error submitting review: " . $reviewResult['message'] . "<br>";
}



// Example of displaying reviews (this part needs to be implemented based on your database setup)
/*
$sql = "SELECT * FROM reviews WHERE product_name = 'Awesome Product'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<h2>Reviews for Awesome Product:</h2>";
    while ($row = $result->fetch_assoc()) {
        echo "<p><strong>Reviewer:</strong> [Reviewer Name] (Not implemented in this example)<br>";
        echo "<strong>Date:</strong> " . $row["review_date"] . "<br>";
        echo "<strong>Review:</strong> " . $row["review_text"] . "</p>";
    }
} else {
    echo "No reviews found for this product.";
}
*/
?>


<?php

/**
 * Class UserReview
 *
 * Provides functionality to add, retrieve, and display user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., if username is empty).
     */
    public function addReview(string $username, string $comment): bool
    {
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for tracking
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product (simulated - assumes a product ID).
     * This is a placeholder, and you'd need to adapt this to your specific data structure.
     *
     * @param int $productID The ID of the product.
     * @return array An array of review objects for the specified product.
     */
    public function getReviewsByProduct(int $productID): array
    {
        // Placeholder logic - replace with your actual data retrieval.
        // This example just returns all reviews.
        return $this->getAllReviews(); // Replace with actual filtering logic.
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void  Prints the reviews to the console/browser.
     */
    public function displayReviews(): void
    {
        echo "<pre>"; // Use <pre> tags for better formatting in HTML output.
        foreach ($this->getAllReviews() as $review) {
            echo "Username: " . htmlspecialchars($review['username']) . "
";
            echo "Comment: " . htmlspecialchars($review['comment']) . "
";
            echo "Date: " . $review['date'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product, highly recommended!');
$reviewSystem->addReview('JaneSmith', 'Could be better, some issues with the UI.');
$reviewSystem->addReview('PeterJones', 'Excellent value for the money.');

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific product (simulated)
echo "<br><h2>Reviews for Product 123:</h2>";
$productReviews = $reviewSystem->getReviewsByProduct(123);
if (!empty($productReviews)) {
    foreach ($productReviews as $review) {
        echo "Username: " . htmlspecialchars($review['username']) . "
";
        echo "Comment: " . htmlspecialchars($review['comment']) . "
";
        echo "---
";
    }
} else {
    echo "No reviews found for this product.";
}
?>


// Assuming a database connection is already established ($db)

// Add a review
$username = 'JohnDoe';
$comment = 'Great product, highly recommended!';

$sql = "INSERT INTO reviews (username, comment, product_id, date)
        VALUES ('$username', '$comment', 123, NOW())";

// Execute the query
if ($db->query($sql) === TRUE) {
  // Review added successfully
  echo "Review added successfully!";
} else {
  echo "Error adding review: " . $db->error;
}


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews
 * for a given item (e.g., product, movie, book).
 *
 * Assumptions:
 *  - You have a database connection established (e.g., using mysqli or PDO).
 *  - You have a table named 'reviews' with columns:
 *      - id (INT, PRIMARY KEY, AUTO_INCREMENT)
 *      - item_id (INT, FOREIGN KEY referencing your item's ID)
 *      - user_id (INT, FOREIGN KEY referencing your users table)
 *      - rating (INT, 1-5)
 *      - comment (TEXT)
 *      - created_at (TIMESTAMP)
 *
 * @param int $itemId The ID of the item the review is for.
 * @param int $userId The ID of the user writing the review. (Optional, if user is known)
 * @param string $rating The rating (1-5).
 * @param string $comment The review comment.
 * @return array An array containing:
 *              - 'success': True if the review was created/updated successfully, False otherwise.
 *              - 'message':  A message indicating the result (e.g., "Review created successfully", "Review updated successfully").
 *              - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(int $itemId, int $userId = 0, string $rating, string $comment) : array
{
    global $db; // Assuming you have a database connection variable named $db

    // Validate input
    if (!is_numeric($itemId) || $itemId <= 0) {
        return ['success' => false, 'message' => 'Invalid item ID.', 'review' => null];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating (1-5).', 'review' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'review' => null];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (?, ?, ?, ?)
            ON DUPLICATE KEY UPDATE rating = VALUES(rating), comment = VALUES(comment)";

    // Prepare the statement
    $stmt = $db->prepare($sql);

    // Bind parameters
    $stmt->bind_param("isss", $itemId, $userId, $rating, $comment);

    // Execute the statement
    if ($stmt->execute()) {
        // Get the last inserted row (for retrieving the review ID)
        $review = $db->query("SELECT * FROM reviews WHERE item_id = $itemId AND user_id = $userId LIMIT 1")->fetch_assoc();
        return ['success' => true, 'message' => 'Review created/updated successfully.', 'review' => $review];
    } else {
        return ['success' => false, 'message' => 'Error creating/updating review: ' . $db->error, 'review' => null];
    }

    // Close the statement
    $stmt->close();
}


/**
 * Retrieve all reviews for a given item.
 *
 * @param int $itemId The ID of the item.
 * @return array An array containing:
 *              - 'success': True if reviews were retrieved successfully, False otherwise.
 *              - 'reviews': An array of review objects, or an empty array if no reviews exist.
 *              - 'message': A message indicating the result.
 */
function getReviewsForItem(int $itemId) : array
{
    global $db;

    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("i", $itemId);

    $results = [];
    $stmt->execute();

    while ($row = $stmt->fetch_assoc()) {
        $results[] = $row;
    }

    $stmt->close();

    return ['success' => true, 'reviews' => $results, 'message' => 'Reviews retrieved successfully.'];
}


// Example Usage (assuming $db is your database connection)
// $itemId = 123;
// $newReview = createOrUpdateReview($itemId, 456, 4, "This is a great product!");
// print_r($newReview);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews.
 *
 * @param string $productName  The name of the product being reviewed.
 * @param string $userName     The name of the user submitting the review.
 * @param string $reviewText   The text of the review.
 * @param int   $rating       The rating given by the user (1-5).
 * @param array $reviews      (Optional) An array of existing reviews to append to.
 *
 * @return array An array containing the new review object and the updated array of reviews.
 */
function createAndDisplayReview(string $productName, string $userName, string $reviewText, int $rating, array &$reviews = []) {
    // Validate the rating
    if ($rating < 1 || $rating > 5) {
        return ['status' => 'error', 'message' => 'Invalid rating.  Rating must be between 1 and 5.'];
    }

    // Create a new review object (you can customize this further)
    $review = [
        'product'   => $productName,
        'user'      => $userName,
        'text'      => $reviewText,
        'rating'    => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Append the new review to the array
    $reviews[] = $review;

    return ['status' => 'success', 'review' => $review, 'reviews' => $reviews];
}


// Example Usage:

// Simulate retrieving existing reviews (from a database, file, etc.)
$existingReviews = [
    ['product' => 'Laptop X', 'user' => 'Alice', 'text' => 'Great laptop! Fast and reliable.', 'rating' => 5, 'timestamp' => 1678886400],
    ['product' => 'Smartphone Y', 'user' => 'Bob', 'text' => 'Good phone, but battery life is short.', 'rating' => 3, 'timestamp' => 1678886460]
];

// Create a new review
$newReviewResult = createAndDisplayReview(
    'Laptop X',
    'Charlie',
    'Excellent value for the price.',
    4
);

// Display the results
if ($newReviewResult['status'] === 'success') {
    echo "<h2>New Review:</h2>";
    echo "<p><b>Product:</b> " . $newReviewResult['review']['product'] . "</p>";
    echo "<p><b>User:</b> " . $newReviewResult['review']['user'] . "</p>";
    echo "<p><b>Rating:</b> " . $newReviewResult['review']['rating'] . "</p>";
    echo "<p><b>Review:</b> " . $newReviewResult['review']['text'] . "</p>";
    echo "<p><b>Timestamp:</b> " . date('Y-m-d H:i:s', $newReviewResult['review']['timestamp']) . "</p>";

    echo "<hr>";

    echo "<h2>All Reviews:</h2>";
    foreach ($newReviewResult['reviews'] as $review) {
        echo "<p><b>Product:</b> " . $review['product'] . "</p>";
        echo "<p><b>User:</b> " . $review['user'] . "</p>";
        echo "<p><b>Rating:</b> " . $review['rating'] . "</p>";
        echo "<p><b>Review:</b> " . $review['text'] . "</p>";
        echo "<p><b>Timestamp:</b> " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
        echo "<hr>";
    }

} else {
    echo "<p style='color: red;'>Error creating review: " . $newReviewResult['message'] . "</p>";
}

// Example of invalid rating
$invalidReviewResult = createAndDisplayReview('Tablet Z', 'David', 'Okay', 6);

if($invalidReviewResult['status'] === 'error'){
    echo "<p style='color: red;'>Invalid Review Attempt: " . $invalidReviewResult['message'] . "</p>";
}
?>


<?php

/**
 * Class Review
 *
 * Handles the creation, storage, and retrieval of user reviews.
 */
class Review {

    private $db;  // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5 stars).
     * @param string $comment The review comment.
     *
     * @return int|false The ID of the newly created review on success, false on failure.
     */
    public function createReview(int $productId, string $user, string $rating, string $comment) {
        // Input validation (important!)
        if (!$productId || !$user || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
            return false; // Rating must be 1-5
        }

        // Sanitize inputs (prevent SQL injection)
        $productId = $this->db->real_escape_string($productId);
        $user = $this->db->real_escape_string($user);
        $rating = (int)$rating;
        $comment = $this->db->real_escape_string($comment);

        // Construct SQL query
        $query = "INSERT INTO reviews (product_id, user, rating, comment) VALUES ('$productId', '$user', '$rating', '$comment')";

        // Execute the query
        return $this->db->query($query);
    }


    /**
     * Retrieves reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProduct(int $productId) {
        $productId = $this->db->real_escape_string($productId);

        $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
        $result = $this->db->query($query);

        $reviews = [];
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $reviews[] = new ReviewObject($row); // Create ReviewObject instances
            }
        }

        return $reviews;
    }

    /**
     *  Review Object (Helper Class) - Makes retrieving review data easier
     */
    private function __construct($data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user = $data['user'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }

}


/**
 * ReviewObject - A class representing a single review.  This keeps things cleaner than returning
 * arrays of associative arrays.
 */
class ReviewObject {
    public $id;
    public $product_id;
    public $user;
    public $rating;
    public $comment;
    public $created_at;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user = $data['user'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }
}



// Example usage (assuming you have a database connection $db):
//  (This is just for demonstration, you'll need to adapt to your specific setup)

// Assuming $db is your database connection object (e.g., mysqli)

// 1. Create a review
$review = new Review($db);
$reviewId = $review->createReview(123, "JohnDoe", 4, "Great product!");

if ($reviewId) {
    echo "Review created successfully with ID: " . $reviewId . "
";
} else {
    echo "Failed to create review.
";
}


// 2. Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

if (count($reviews) > 0) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "- User: " . $review->user . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process and display user reviews.
 * It includes input validation, data sanitization, and formatting.
 */

class UserReview {

    /**
     * Validates review input.
     *
     * @param array $reviewData Associative array containing the review data.
     * @return bool True if the review is valid, false otherwise.
     */
    public static function validateReview(array $reviewData) {
        // Required fields
        $requiredFields = ['user_name', 'review_text'];

        // Check for required fields
        foreach ($requiredFields as $field) {
            if (!isset($reviewData[$field]) || empty($reviewData[$field])) {
                return false;
            }
        }

        // Perform basic validation (e.g., string length, non-HTML characters)
        $userName = trim($reviewData['user_name']);
        $reviewText = trim($reviewData['review_text']);

        if (strlen($userName) > 100) {
            return false; // Limit username length
        }
        if (strlen($reviewText) > 1000) {
            return false; // Limit review text length
        }
        
        // You can add more specific validation here, such as:
        // - Allowing only alphanumeric characters (or specific allowed chars)
        // - Checking for prohibited words
        

        return true;
    }

    /**
     * Sanitizes review text to prevent XSS attacks.
     *
     * @param string $reviewText The review text to sanitize.
     * @return string Sanitized review text.
     */
    public static function sanitizeReviewText(string $reviewText) {
        // Use htmlspecialchars to escape potentially malicious characters
        return htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');
    }

    /**
     * Formats the review for display.
     *
     * @param array $reviewData Associative array containing the review data.
     * @return string Formatted review string.
     */
    public static function formatReview(array $reviewData) {
        $sanitizedReviewText = self::sanitizeReviewText($reviewData['review_text']);
        return "<div class='review'><strong>" . $reviewData['user_name'] . ":</strong> " . $sanitizedReviewText . "</div>";
    }
}

// Example Usage:

// 1. Get Review Data (e.g., from a form submission)
$reviewData = [
    'user_name' => 'John Doe',
    'review_text' => "<p>This product is <strong>amazing</strong>!</p>" // This is potentially unsafe if not sanitized.
];

// 2. Validate the Review
if (UserReview::validateReview($reviewData)) {
    // 3. Sanitize the Review Text
    $sanitizedReviewText = UserReview::sanitizeReviewText($reviewData['review_text']);

    // 4. Format the Review
    $formattedReview = UserReview::formatReview($reviewData);

    // 5. Display the Review
    echo $formattedReview;
} else {
    echo "<p>Invalid review. Please check your input.</p>";
}


?>


<?php

/**
 * User Review Class
 *
 * Represents a user review and provides methods for creating, displaying,
 * and saving reviews.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $rating;
    private $comment;
    private $dateCreated;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the item.
     */
    public function __construct(int $userId, int $rating, string $comment)
    {
        $this->reviewId = null;  // ID assigned when saved
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->dateCreated = date('Y-m-d H:i:s'); // Timestamp of creation
    }

    /**
     * Getters and Setters
     */

    public function getReviewId(): ?int
    {
        return $this->reviewId;
    }

    public function setReviewId(?int $reviewId)
    {
        $this->reviewId = $reviewId;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function getRating(): int
    {
        return $this->rating;
    }

    public function getComment(): string
    {
        return $this->comment;
    }

    public function getDateCreated(): string
    {
        return $this->dateCreated;
    }


    /**
     * Display the review
     *
     * Returns a formatted string representing the review.
     *
     * @return string The review string.
     */
    public function displayReview(): string
    {
        return "Review ID: " . ($this->reviewId ?? 'N/A') . "
"
               . "User ID: " . $this->userId . "
"
               . "Rating: " . $this->rating . "
"
               . "Comment: " . $this->comment . "
"
               . "Date Created: " . $this->dateCreated;
    }

    /**
     *  Simulated Saving to Database (Replace with actual database interaction)
     *
     * This method simulates saving the review to a database.  You'll need to
     * replace this with your database query logic.
     *
     * @return bool True if saving was successful, false otherwise.
     */
    public function saveReview(): bool
    {
        //  Replace this with your database saving logic
        //  Example using a dummy array:
        //  $reviewData = [
        //      'userId' => $this->userId,
        //      'rating' => $this->rating,
        //      'comment' => $this->comment
        //  ];
        //  return saveReviewToDatabase($reviewData);  //  Assume this function exists

        // Placeholder - just return true for demonstration
        return true;
    }

}


/**
 * User Review Function (Example Usage)
 */

// Create a new review
$review = new UserReview(123, 5, "Excellent product!  Highly recommended.");

// Display the review
echo $review->displayReview() . "
";

// Simulate saving the review
if ($review->saveReview()) {
    echo "Review saved successfully.
";
} else {
    echo "Failed to save review.
";
}


// Example of creating multiple reviews:
$review2 = new UserReview(456, 4, "Good value for the money.");
echo $review2->displayReview() . "
";

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (Optional - you can add these for updating reviews)
     *
     *  Example:
     *  $review->setComment("Updated comment");
     */

    //  Add setters if you need to update review information later
}

/**
 * User Review Review Function (Simplified)
 */
function generateUserReviewReview(UserReview $review) {
    $reviewData = array(
        'review_id' => $review->getReviewId(),
        'user_id' => $review->getUserId(),
        'product_id' => $review->getProductId(),
        'rating' => $review->getRating(),
        'comment' => $review->getComment(),
        'date' => $review->getDate()
    );

    return $reviewData;
}



// --- Example Usage ---

// Create a review object
$review1 = new UserReview(null, 123, 456, 5, "Great product!");
$reviewData1 = generateUserReviewReview($review1);
print_r($reviewData1);

$review2 = new UserReview(null, 456, 789, 4, "Good but could be better.");
$reviewData2 = generateUserReviewReview($review2);
print_r($reviewData2);

?>


<?php

// Add validation to the constructor
function generateUserReviewReview($reviewId, $userId, $productId, $rating, $comment) {
    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);
    return generateUserReviewReview($review);
}


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given (e.g., 1-5).  Must be an integer.
 * @param string $comment The review text.
 * @param array $review_data An optional array to store reviews in (e.g., database).
 *
 * @return array|string Returns an array of reviews or a string message on error.
 */
function create_review(string $username, int $rating, string $comment, array &$review_data = []) {
  // Validate inputs - Basic validation, can be expanded
  if (empty($username)) {
    return "Username cannot be empty.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Rating must be between 1 and 5.";
  }

  if (empty($comment)) {
    return "Comment cannot be empty.";
  }

  // Create review data
  $review = [
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date' => date('Y-m-d H:i:s') // Add timestamp
  ];

  // Store review -  Example using an array.  Replace with database integration.
  $review_data[] = $review;

  return "Review submitted successfully!";
}


// Example Usage:

// Simulate a database (replace with actual database connection)
$reviews = [];

// Create some reviews
$result1 = create_review("JohnDoe", 5, "Great product! Highly recommend.", $reviews);
echo $result1 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result2 = create_review("JaneSmith", 4, "Good value for money.", $reviews);
echo $result2 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result3 = create_review("PeterJones", 3, "It's okay, nothing special.", $reviews);
echo $result3 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result4 = create_review("", 2, "Bad experience", $reviews); //Test empty username
echo $result4 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result5 = create_review("AliceBrown", 6, "Excellent!", $reviews); //Test invalid rating
echo $result5 . "
";
echo "Current Reviews:
";
print_r($reviews);
?>


// Example using PDO (requires PDO and database connection)
try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $username = "JohnDoe";
    $rating = 5;
    $comment = "Great product!";

    $stmt = $pdo->prepare("INSERT INTO reviews (username, rating, comment, date) VALUES (:username, :rating, :comment, :date)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':date', date('Y-m-d H:i:s'));

    $stmt->execute();

    echo "Review submitted successfully!";

} catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
}


<?php

/**
 * Class Review
 *
 * This class provides a basic framework for handling user reviews.
 * It includes methods for adding, retrieving, and displaying reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database (simulated).
     *
     * @param string $username  The username of the reviewer.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment The reviewer's comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $rating, string $comment) {
        // Basic validation - add more robust validation as needed
        if (empty($username) || empty($rating) || empty($comment)) {
            return false;
        }

        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by username.
     *
     * @param string $username The username to filter by.
     * @return array An array of review objects for the given username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string  A string containing the formatted review display.
     */
    public function displayReviews() {
        $output = "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($this->getAllReviews() as $review) {
                $output .= "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
                $output .= "<em>Rating:</em> " . htmlspecialchars($review['rating']) . "<br>";
                $output .= "<em>Comment:</em> " . htmlspecialchars($review['comment']) . "<br>";
                $output .= "<em>Timestamp:</em> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }
}

// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("JohnDoe", 5, "Great product!  Highly recommended.");
$reviewSystem->addReview("JaneSmith", 4, "Good value for the price.");
$reviewSystem->addReview("PeterJones", 3, "It's okay, but could be better.");

// Display all reviews
echo $reviewSystem->displayReviews();

// Get reviews by username
$johnReviews = $reviewSystem->getReviewsByUsername("JohnDoe");
echo "<h2>Reviews by JohnDoe</h2>";
echo "<pre>";
print_r($johnReviews);
echo "</pre>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array  $userOptions (Optional) An array of options for the review form.
 *                            e.g., ['rating' => 5, 'comment' => 'Great product!']
 *
 * @return string HTML representation of the review form and the displayed review.
 */
function createReviewFunction(string $productName, string $reviewText, array $userOptions = []) {
  // Validate input (basic example - expand for production)
  if (empty($reviewText)) {
    return "<p>Please enter a review.</p>";
  }

  // Build the review form HTML
  $formHTML = '<form method="post" action="process_review.php">';
  $formHTML .= '<h3>Review for ' . $productName . '</h3>';
  $formHTML .= '<label for="review_text">Review:</label><br>';
  $formHTML .= '<textarea id="review_text" name="review_text" rows="4" cols="50">' . $reviewText . '</textarea><br><br>';

  // Add user options (if provided)
  if (!empty($userOptions)) {
    $formHTML .= '<label for="rating">Rating:</label><br>';
    $formHTML .= '<select id="rating" name="rating">';
    foreach ($userOptions as $key => $value) {
      $formHTML .= '<option value="' . $key . '">' . $value . '</option>';
    }
    $formHTML .= '</select><br><br>';
  }

  $formHTML .= '<input type="submit" value="Submit Review">';
  $formHTML .= '</form>';

  // Display the submitted review (if no review exists yet)
  $reviewExists = false; // Assume no review exists until proven otherwise

  // Check if there's a saved review
  if (isset($_SESSION['reviews'][$productName])) {
    $reviewExists = true;
    $reviewHTML = '<p><strong>Review:</strong> ' . htmlspecialchars($_SESSION['reviews'][$productName]) . '</p>';
    $reviewHTML = $reviewHTML; // Use the saved review
  } else {
    // Add the new review to the session
    $_SESSION['reviews'][$productName] = htmlspecialchars($reviewText);  // Sanitize the input
  }

  return $formHTML . $reviewHTML;
}

// Example usage (simulating a session)
session_start();

//  Demonstrates a single review being created
$review = createReviewFunction("Awesome Widget", "This widget is fantastic!");

//Demonstrates multiple reviews being created
$review2 = createReviewFunction("Amazing Gadget", "Highly recommend this gadget!");
$review3 = createReviewFunction("Fantastic Item", "Great value for money.");


//  Illustrates retrieving and displaying a stored review:
if (isset($_SESSION['reviews']['Awesome Widget'])) {
    echo "<h2>Existing Review for Awesome Widget:</h2>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($_SESSION['reviews']['Awesome Widget']) . "</p>";
}

?>


<?php
session_start();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productName = $_POST["product_name"]; //You need to ensure this is actually used to identify the review
    $reviewText = $_POST["review_text"];
    $rating = isset($_POST["rating"]) ? $_POST["rating"] : null;

    // Sanitize and store the review (replace with your database logic)
    if (isset($_SESSION['reviews'][$productName])) {
        //Update existing review
    } else {
        $_SESSION['reviews'][$productName] = $reviewText;
    }

    // Redirect to a confirmation page
    header("Location: confirmation.php");
    exit();
}
?>


<?php

/**
 * Class Review
 *
 * Provides functionality to store, retrieve, and display user reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The comment provided by the reviewer.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool {
        // Validate rating
        if (!preg_match('/^\d+$/', $rating)) {
            return false; // Invalid rating
        }

        // Create a review object
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];

        // Store the review
        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects for the product, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array {
        return array_filter($this->reviews, function ($review) use ($productId) {
            return $review['productId'] == $productId;
        });
    }

    /**
     * Retrieves the average rating for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float {
        $reviews = $this->getReviewsForProduct($productId);

        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += (int)$review['rating'];
        }

        return $totalRating / count($reviews);
    }


    /**
     * Displays reviews for a product in a user-friendly format.
     *
     * @param int $productId The ID of the product.
     *
     * @return string The HTML representation of the reviews, or a message if no reviews exist.
     */
    public function displayReviews(int $productId): string {
        $reviews = $this->getReviewsForProduct($productId);

        if (empty($reviews)) {
            return "<p>No reviews for this product.</p>";
        }

        $html = "<h2>Reviews for Product ID: " . $productId . "</h2>";
        $html .= "<ul>";
        foreach ($reviews as $review) {
            $html .= "<li>";
            $html .= "<strong>" . $review['username'] . "</strong> - Rating: " . $review['rating'] . " - " . $review['comment'] . "</li>";
            $html .= "</li>";
        }
        $html .= "</ul>";

        return $html;
    }
}



// Example Usage:

// Create a Review object
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview(123, "JohnDoe", 5, "Excellent product!  Highly recommended.");
$reviewSystem->addReview(123, "JaneSmith", 4, "Good product, but could be better.");
$reviewSystem->addReview(456, "PeterJones", 3, "Okay, does the job.");


// Get reviews for product 123
$reviews = $reviewSystem->getReviewsForProduct(123);
echo $reviewSystem->displayReviews(123); // Display the reviews for product 123

// Get the average rating for product 123
$averageRating = $reviewSystem->getAverageRatingForProduct(123);
echo "<br>Average Rating for Product 123: " . ($averageRating !== null ? $averageRating : "No reviews yet.");

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store, display, and manage user reviews.
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * Initializes a new UserReview object.
   *
   * @param int $reviewId (Optional) - The unique identifier for the review. If not provided, one will be generated.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($reviewId = null, $userId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the date and time of the review
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Display the review in a formatted string.
   *
   * @return string  The review formatted as a string.
   */
  public function displayReview() {
    return "Review ID: " . $this->getReviewId() .
           "
User ID: " . $this->getUserId() .
           "
Rating: " . $this->getRating() .
           "
Comment: " . $this->getComment() .
           "
Date: " . $this->getDate();
  }
}

/**
 * User Review Review Function
 *
 * This function takes an array of UserReview objects and outputs a formatted display
 * of all the reviews.
 *
 * @param array $reviews An array of UserReview objects.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews</h2>
";
  foreach ($reviews as $review) {
    echo $review->displayReview() . "

";
  }
}


// Example Usage:
// Create some UserReview objects
$review1 = new UserReview(1, 123, 5, "Excellent product!  Highly recommended.");
$review2 = new UserReview(2, 456, 4, "Good value for the price.");
$review3 = new UserReview(3, 789, 3, "It's okay, but could be better.");


// Store the reviews in an array
$reviews = array($review1, $review2, $review3);

// Call the displayReviews function to output the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It handles input validation, database interaction, and output formatting.
 *
 * @param string $productId The ID of the product/service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The review text submitted by the user.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database user.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing:
 *   - 'success':  True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the outcome (success/failure and error details).
 *   - 'reviewId': The ID of the newly created review, if successful.
 */
function submitReview(
    $productId,
    $username,
    $reviewText,
    $dbHost,
    $dbName,
    $dbUser,
    $dbPassword
) {
    // Input Validation (Basic - expand as needed)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }

    // Database Connection (Use prepared statements for security!)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        $conn->close();
        return ['success' => false, 'message' => "Database connection failed: " . $conn->connect_error, 'reviewId' => null];
    }

    // Sanitize Input (Important for security - use proper escaping or prepared statements)
    $reviewText = $conn->real_escape_string($reviewText);

    // SQL Query (Use prepared statements to prevent SQL injection)
    $sql = "INSERT INTO reviews (productId, username, reviewText) VALUES ('$productId', '$username', '$reviewText')";

    if ($conn->query($sql) === TRUE) {
        $reviewId = $conn->insert_id;
        return ['success' => true, 'message' => 'Review submitted successfully.', 'reviewId' => $reviewId];
    } else {
        $errorInfo = $conn->error;
        return ['success' => false, 'message' => "Review submission failed: " . $errorInfo['message'], 'reviewId' => null];
    }

    $conn->close();
}


// Example Usage:
// $product_id = "123";
// $user_name = "JohnDoe";
// $review = "This product is fantastic!";

// $result = submitReview($product_id, $user_name, $review, "localhost", "my_database", "my_user", "my_password");

// if ($result['success']) {
//     echo "Review submitted successfully! Review ID: " . $result['reviewId'];
// } else {
//     echo "Error submitting review: " . $result['message'];
// }
?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews

    /**
     * Adds a new user review to the database (simulated).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool
    {
        // Basic input validation - enhance this for production
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review creation
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }


    /**
     * Retrieves a specific review by its ID (simulated - in a real system, this would use a database ID).
     *
     * @param int $reviewId The ID of the review.
     *
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['date'] == $reviewId) { // Use 'date' for ID - change to your database key
                return $review;
            }
        }
        return null;
    }

    /**
     * Updates an existing review (simulated - in a real system, update the database).
     *
     * @param int $reviewId  The ID of the review to update.
     * @param string $newRating The new rating for the review.
     * @param string $newComment The new comment for the review.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function updateReview(int $reviewId, string $newRating, string $newComment): bool
    {
        $reviewToUpdate = $this->getReviewById($reviewId);

        if (!$reviewToUpdate) {
            return false; // Review not found
        }

        if (!is_numeric($newRating) || $newRating < 1 || $newRating > 5) {
            return false;
        }

        $reviewToUpdate['rating'] = $newRating;
        $reviewToUpdate['comment'] = $newComment;
        return true;
    }


    /**
     * Deletes a review by its ID (simulated - in a real system, delete from the database).
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false if review not found.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['date'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Returns all reviews.
     *
     * @return array
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }
}


// Example Usage
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, 'JohnDoe', 4, 'Great product, highly recommended!');
$reviewSystem->addReview(123, 'JaneSmith', 5, 'Excellent value for money.');
$reviewSystem->addReview(456, 'PeterJones', 3, 'It was okay, nothing special.');

// Get reviews for product 123
$reviews123 = $reviewSystem->getReviewsByProduct(123);
echo "Reviews for Product 123:
";
foreach ($reviews123 as $review) {
    echo "  - " . $review['username'] . ": " . $review['rating'] . " - " . $review['comment'] . "
";
}

// Get review by ID (simulated - using date as ID)
$reviewById = $reviewSystem->getReviewById('Y-m-d H:i:s'); //Replace with actual review ID
if ($reviewById) {
    echo "
Review by ID:
";
    echo "  - " . $reviewById['username'] . ": " . $reviewById['rating'] . " - " . $reviewById['comment'] . "
";
} else {
    echo "Review not found.
";
}

//Update a review
$updateResult = $reviewSystem->updateReview('Y-m-d H:i:s', 6, 'Updated Review Content');
if ($updateResult) {
    echo "
Review updated successfully!
";
} else {
    echo "
Failed to update review.
";
}

//Delete a review
$deleteResult = $reviewSystem->deleteReview('Y-m-d H:i:s');
if ($deleteResult) {
    echo "
Review deleted successfully!
";
} else {
    echo "
Failed to delete review.
";
}


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It handles input validation, data storage (simplified for demonstration),
 * and basic output formatting.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text submitted by the reviewer.
 * @param array $rating A numeric rating (e.g., 1-5).
 *
 * @return void  Prints the review to the console (for demonstration).  In a real
 *               application, you would typically store this data in a database.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, array $rating) {

  // Input Validation (Important!)
  if (empty($productId)) {
    echo "Error: Product ID cannot be empty.
";
    return;
  }
  if (empty($reviewerName)) {
    echo "Error: Reviewer Name cannot be empty.
";
    return;
  }
  if (empty($reviewText)) {
    echo "Error: Review Text cannot be empty.
";
    return;
  }
  if (!is_array($rating) || count($rating) !== 1) {
    echo "Error: Rating must be a single numeric value (e.g., 1-5).
";
    return;
  }
  if (!is_numeric($rating[0])) {
    echo "Error: Rating must be a numeric value.
";
    return;
  }
  if ($rating[0] < 1 || $rating[0] > 5) {
    echo "Error: Rating must be between 1 and 5.
";
    return;
  }

  // Data Storage (Simplified - Replace with Database Integration)
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating[0]
  ];

  // Output/Display the review (replace with your desired presentation)
  echo "Review for Product ID: " . $productId . "
";
  echo "Reviewer: " . $reviewerName . "
";
  echo "Rating: " . $rating[0] . " / 5
";
  echo "Review Text: " . $reviewText . "
";
  echo "---
";
}


// Example Usage:
createReview("P123", "John Doe", "Great product!  Exactly what I needed.", [5]);
createReview("P456", "Jane Smith", "Could be better, but decent.", [3]);
createReview("P789", "Peter Jones", "Amazing!  Highly recommended.", [5]);
createReview("P101", "Alice Brown", "It's okay.", [2]);

// Example of invalid input:
createReview("", "Invalid Name", "Review Text", [4]); // Empty Product ID
createReview("P999", "", "Review Text", [6]); // Empty Reviewer Name
createReview("P111", "Test User", "Invalid Rating", [1, 2]); // Invalid rating format
createReview("P222", "User", "Review", ["abc"]); // Invalid rating type
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes basic validation, sanitization, and storage.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $product_id The ID of the product being reviewed.  (Optional, but recommended for relational data)
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $username, string $rating, string $comment, string $product_id = "") {
    // --- Validation ---
    $errors = [];

    if (empty($username)) {
        $errors[] = "Username cannot be empty.";
    }
    if (empty($rating)) {
        $errors[] = "Rating cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        $errors[] = "Rating must be a number between 1 and 5.";
    }
    if (empty($comment)) {
        $errors[] = "Comment cannot be empty.";
    }

    if (empty($errors)) {
        // --- Sanitize ---
        $username = trim($username);
        $rating = (int) $rating; // Convert to integer
        $comment = trim($comment);

        // --- Store Review (Simulated Database) ---
        //  Replace this with your actual database storage logic.
        //  This example uses a simple array.

        $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Load from session
        $review_id = count($reviews) + 1;

        $review = [
            'review_id' => $review_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => date('Y-m-d H:i:s'), // Add timestamp
            'product_id' => $product_id // Include product ID
        ];

        $reviews[] = $review;
        $_SESSION['reviews'] = $reviews; // Store in session


        return true;
    } else {
        // --- Handle Errors ---
        return false;
    }
}



/**
 * Display User Reviews (Example)
 */
function displayUserReviews() {
    global $reviews;  // Access the global $reviews array

    if (!empty($reviews)) {
        echo "<h2>User Reviews</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
            echo "<strong>Timestamp:</strong> " . $review['timestamp'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No reviews available.</p>";
    }
}

// --- Example Usage ---

// Initialize the reviews array (use session for persistence)
if (!isset($_SESSION['reviews'])) {
    $_SESSION['reviews'] = [];
}


// Example 1: Store a review
$success = storeUserReview("John Doe", 4, "Great product!", "123");
if ($success) {
    echo "<p>Review stored successfully!</p>";
} else {
    echo "<p>Error storing review.</p>";
}


// Example 2: Display the reviews
displayUserReviews();


?>


<?php

/**
 * User Review Function
 *
 * This function creates a basic user review structure, 
 * storing the user's review, rating, and optionally, a comment.
 *
 * @param string $user_name The name of the user submitting the review.
 * @param int    $rating    The user's rating (e.g., 1-5).  Must be an integer.
 * @param string $comment  (Optional)  A comment from the user.
 * @return array  An array containing the review data.
 */
function create_user_review(string $user_name, int $rating, string $comment = '') {
    // Input Validation - Important!
    if (!is_string($user_name)) {
        throw new InvalidArgumentException("User name must be a string.");
    }
    if (!is_int($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be an integer between 1 and 5.");
    }

    // Create the review data array
    $review = [
        'user_name' => $user_name,
        'rating'    => $rating,
        'comment'   => $comment
    ];

    return $review;
}

// Example Usage:
try {
    $review1 = create_user_review("John Doe", 5, "Great product!  Highly recommended.");
    echo "Review 1:
";
    print_r($review1);
    echo "

";

    $review2 = create_user_review("Jane Smith", 3);
    echo "Review 2:
";
    print_r($review2);
    echo "

";

    // Example of error handling - incorrect rating
    try {
        $review3 = create_user_review("Peter Jones", 6);
        echo "Review 3 (This won't execute):
";
        print_r($review3);
    } catch (InvalidArgumentException $e) {
        echo "Error creating review: " . $e->getMessage() . "
";
    }

} catch (InvalidArgumentException $e) {
    echo "General error creating review: " . $e->getMessage() . "
";
}

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to store and manage user reviews.
 *
 * Features:
 * - Stores reviews in a simple array.
 * - Allows adding new reviews.
 * - Allows retrieving all reviews.
 * - Allows retrieving a review by its ID.
 * - Allows deleting a review by its ID.
 */
class Review {

    private $reviews = [];
    private $reviewIdCounter = 1; // To ensure unique IDs

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $author  The name of the reviewer.
     * @param string $comment The text of the review.
     * @return int|null The ID of the newly created review, or null if there was an error.
     */
    public function addReview(string $author, string $comment) {
        $reviewId = $this->reviewIdCounter;
        $review = [
            'id' => $reviewId,
            'author' => $author,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];
        $this->reviews[] = $review;
        $this->reviewIdCounter++;
        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array containing all reviews.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted, false if not found.
     */
    public function deleteReview(int $reviewId) {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}


/**
 * Example Usage - Demonstrates how to use the Review class.
 */
$reviewManager = new Review();

// Add some reviews
$reviewId1 = $reviewManager->addReview('Alice', 'Great product! Highly recommended.');
$reviewId2 = $reviewManager->addReview('Bob', 'It was okay, but a bit expensive.');
$reviewId3 = $reviewManager->addReview('Charlie', 'Excellent service and fast delivery.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$review = $reviewManager->getReviewById($reviewId2);
echo "
Review ID " . $reviewId2 . ":
";
print_r($review);

// Delete a review
$deleted = $reviewManager->deleteReview($reviewId1);
echo "
Deleted review with ID " . $reviewId1 . ": " . ($deleted ? 'Success' : 'Failed') . "
";

// Get all reviews again to see the changes
$allReviews = $reviewManager->getAllReviews();
echo "
All Reviews After Deletion:
";
print_r($allReviews);


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a product ID, and a review text,
 * and stores the review in a database.  It also includes basic
 * input validation and error handling.
 *
 * @param int    $userId       The ID of the user submitting the review.
 * @param int    $productId    The ID of the product being reviewed.
 * @param string $reviewText   The text of the review submitted by the user.
 * @return bool   True on success, false on failure.
 */
function storeUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Input Validation - Important for security and data integrity
    if (!$userId || !$productId || !$reviewText) {
        error_log("Missing required fields in user review."); // Log for debugging
        return false;
    }

    if (!is_numeric($userId) || !is_numeric($productId)) {
        error_log("Invalid user or product ID provided.");
        return false;
    }

    if (empty($reviewText)) {
        error_log("Review text cannot be empty.");
        return false;
    }

    // Sanitize input - Essential for preventing XSS attacks
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); 

    // Database connection details (replace with your actual credentials)
    $dbHost = 'localhost';
    $dbUser = 'your_db_user';
    $dbPass = 'your_db_password';
    $dbName = 'your_db_name';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For better error handling

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (userId, productId, reviewText, reviewDate) VALUES (?, ?, ?, NOW())"); 

        // Bind the parameters - prevents SQL injection
        $stmt->bindParam(1, $userId);
        $stmt->bindParam(2, $productId);
        $stmt->bindParam(3, $reviewText);

        // Execute the statement
        $stmt->execute();

        // Return true on success
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  // Log the error
        return false;
    }
}


// Example Usage:
// $success = storeUserReview(123, 456, "This product is great!");
// if ($success) {
//     echo "Review submitted successfully!";
// } else {
//     echo "Failed to submit review.";
// }

?>


<?php

/**
 * Class Review
 *
 * This class provides a simple way to manage user reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the collection.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating The rating given by the reviewer (e.g., 1-5).
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment, int $rating): bool {
        if (empty($username) || empty($comment) || $rating < 1 || $rating > 5) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'username' => $username,
            'comment' => $comment,
            'rating' => $rating
        ];

        return true;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }


    /**
     * Retrieves reviews by a specific username.
     *
     * @param string $username The username to filter by.
     *
     * @return array An array of review objects for the given username.
     */
    public function getReviewsByUsername(string $username): array {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Retrieves the average rating.
     *
     * @return float|null The average rating, or null if no reviews have been added.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->reviews);

        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / $reviewCount;
    }

    /**
     * Clears all reviews.
     *
     * @return void
     */
    public function clearReviews(): void {
        $this->reviews = [];
    }
}

// Example Usage:

// Create a Review object
$reviewManager = new Review();

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!', 5);
$reviewManager->addReview('JaneSmith', 'Good value for money.', 4);
$reviewManager->addReview('JohnDoe', 'Could be better.', 3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews by a specific user
$johnReviews = $reviewManager->getReviewsByUsername('JohnDoe');
print_r($johnReviews);

// Get the average rating
$averageRating = $reviewManager->getAverageRating();
echo "Average rating: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Clear all reviews
$reviewManager->clearReviews();
print_r($reviewManager->getAllReviews());  // Should be empty.
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The review text submitted by the user.
 * @param string $username     The username of the reviewer.
 * @param int    $rating       The rating given by the user (1-5).
 *
 * @return array  An array containing the review data and a success/error message.
 */
function submitReview(string $productName, string $reviewText, string $username, int $rating)
{
    // Validate input (basic example - improve as needed)
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize input - Important for security.  Consider more comprehensive sanitization.
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);
    $username = htmlspecialchars($username);


    //  Store the review in a database (replace with your database logic)
    $reviewId = saveReviewToDatabase($productName, $reviewText, $username, $rating); // Replace with your DB call.

    if ($reviewId === false) {
        return ['success' => false, 'message' => 'Failed to save review to database.'];
    }


    return ['success' => true, 'reviewId' => $reviewId, 'message' => 'Review submitted successfully!'];
}


/**
 * Placeholder function to simulate saving the review to a database.
 *  Replace this with your actual database code.
 *
 * @param string $productName
 * @param string $reviewText
 * @param string $username
 * @param int $rating
 *
 * @return int|false  The ID of the newly created review, or false on error.
 */
function saveReviewToDatabase(string $productName, string $reviewText, string $username, int $rating)
{
    // **Replace this with your database interaction code**
    // This is just a placeholder
    echo "Simulating saving review to database...
";

    // Example: Generate a fake review ID
    $reviewId = hash('md5', $productName . $reviewText . $username . $rating);  // Create a hash to simulate an ID

    return $reviewId; // Return the ID (or false if the database operation fails)
}



// Example Usage:
$product = "Awesome Widget";
$review = "This widget is amazing!  I highly recommend it.";
$user = "JohnDoe";
$rating = 4;


$result = submitReview($product, $review, $user, $rating);

if ($result['success']) {
    echo "Review submitted successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}



//  Example of retrieving reviews (for demonstration - replace with your retrieval logic)
function getReviewsForProduct(string $productName)
{
    // Simulate fetching reviews from a database
    $reviews = [
        ['reviewId' => 1, 'productName' => 'Awesome Widget', 'reviewText' => 'Great product!', 'username' => 'JaneSmith', 'rating' => 5],
        ['reviewId' => 2, 'productName' => 'Awesome Widget', 'reviewText' => 'Could be better.', 'username' => 'PeterJones', 'rating' => 3],
    ];

    $filteredReviews = [];

    foreach ($reviews as $review)
    {
        if ($review['productName'] === $productName)
        {
            $filteredReviews[] = $review;
        }
    }

    return $filteredReviews;

}

$awesomeWidgetReviews = getReviewsForProduct("Awesome Widget");

echo "<br><h2>Reviews for {$awesomeWidgetReviews[0]['productName']}</h2>";
if (!empty($awesomeWidgetReviews)) {
    echo "<ul>";
    foreach ($awesomeWidgetReviews as $review) {
        echo "<li><strong>{$review['username']}</strong> - Rating: {$review['rating']} - " . htmlspecialchars($review['reviewText']) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews found for this product.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews for a product.
 *
 * @param string $product_id  The ID of the product for which reviews are being added/retrieved.
 * @param string $username    The username of the user submitting the review.
 * @param string $rating      The rating given by the user (e.g., 1-5).
 * @param string $comment     The review comment.
 * @param string $db_connection  A database connection object.  Crucial for interacting with the database.
 *
 * @return array  An array containing the review data on success, or an error message on failure.
 */
function add_user_review(string $product_id, string $username, string $rating, string $comment, object $db_connection) {
  // Validate input - essential for security and data integrity
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    return ['error' => 'All fields are required.'];
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['error' => 'Invalid username.  Only alphanumeric characters and underscores are allowed.'];
  }

  if (!preg_match('/^[1-5]{1,2}$/', $rating)) {
    return ['error' => 'Rating must be a number between 1 and 5.'];
  }


  // Prepare the SQL query - crucial for preventing SQL injection
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
          VALUES (?, ?, ?, ?)";

  // Use prepared statements - **VERY IMPORTANT** for security
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    return ['error' => 'Failed to prepare statement: ' . $db_connection->error];
  }

  // Bind the parameters
  $stmt->bind_param("s", $product_id, $username, $rating);

  // Execute the query
  if ($stmt->execute() === false) {
    return ['error' => 'Query failed: ' . $stmt->error];
  }

  // Clean up
  $stmt->close();

  return ['success' => 'Review added successfully!'];
}


/**
 * Retrieves all reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param object $db_connection A database connection object.
 * @return array  An array of review data, or an error message if no reviews are found or an error occurs.
 */
function get_reviews_for_product(string $product_id, object $db_connection) {
  $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY rating DESC";
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    return ['error' => 'Failed to prepare statement: ' . $db_connection->error];
  }

  $stmt->bind_param("s", $product_id);

  $result = $stmt->execute();

  if ($result === false) {
    return ['error' => 'Query failed: ' . $stmt->error];
  }

  $reviews = [];
  $stmt->bind_result($id, $username, $rating, $comment); // Bind result variables

  while ($stmt->fetch()) {
    $review = [
      'id' => $id,
      'username' => $username,
      'rating' => $rating,
      'comment' => $comment
    ];
    $reviews[] = $review;
  }

  $stmt->close();
  return $reviews;
}


// Example Usage (Illustrative - replace with your database connection)
//  Important:  This is just a demonstration.  You'll need to set up your database connection properly.

/*
// Assuming you have a database connection object called $conn

$conn = new mysqli("localhost", "username", "password", "database_name");

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Add a review
$review_result = add_user_review("123", "JohnDoe", "5", "Excellent product!", $conn);
print_r($review_result);

// Get reviews for product "123"
$reviews = get_reviews_for_product("123", $conn);
print_r($reviews);
*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and retrieve user reviews for a given product or item.
 * It demonstrates basic database interaction and validation.  For a production environment,
 * consider using a more robust framework and security measures.
 *
 * @param string $productId The ID of the product or item the review is for.
 * @param string $name       The user's name.
 * @param string $rating     The user's rating (e.g., 1-5).
 * @param string $comment    The user's review comment.
 * @param PDO       $db       A PDO database connection object.
 *
 * @return bool True on successful review creation, false otherwise.
 */
function createReview(string $productId, string $name, string $rating, string $comment, PDO $db)
{
    // Validate inputs - Crucial for security and data integrity
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }
    if (empty($name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }
    if (!preg_match('/^[a-zA-Z\s]+$/', $name)) {
        error_log("Error: User name must contain only letters and spaces.");
        return false;
    }
    if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
        error_log("Error: Rating must be a number between 0 and 5.");
        return false;
    }
    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }
    if (!preg_match('/^[\x00-\x7F]+$/', $comment)) {
        error_log("Error: Comment must contain only ASCII characters.");
        return false;
    }

    // Prepare the SQL statement - Important for preventing SQL injection
    $sql = "INSERT INTO reviews (productId, userName, rating, comment)
            VALUES (:productId, :userName, :rating, :comment)";

    try {
        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userName', $name);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        return true; // Review created successfully

    } catch (PDOException $e) {
        // Handle database errors - Log them for debugging
        error_log("Database Error: " . $e->getMessage());
        return false; // Failed to create review
    }
}

/**
 * Retrieve Reviews for a Product
 *
 *  Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @param PDO       $db       A PDO database connection object.
 * @return array  An array of review objects, or an empty array if no reviews are found.
 */
function getReviews(string $productId, PDO $db) {
    $sql = "SELECT * FROM reviews WHERE productId = :productId";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    return $reviews;
}


// Example Usage (Assuming you have a database connection called $db)
// This is just a demonstration - replace with your actual database details
// You need to set up your database connection and table before running this.
//
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

// Create a review
// $reviewCreated = createReview("123", "John Doe", 5, "Great product!", $db);
// if ($reviewCreated) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }

// Get reviews for product ID "123"
// $reviews = getReviews("123", $db);
// if (!empty($reviews)) {
//     echo "<br><h2>Reviews for Product 123:</h2>";
//     foreach ($reviews as $review) {
//         echo "<p><strong>Name:</strong> " . $review['userName'] . "</p>";
//         echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//         echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
//         echo "<br>";
//     }
// } else {
//     echo "<p>No reviews found for product 123.</p>";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating (optional) The rating given for the item (1-5). Defaults to 0.
 * @param int $user_id (optional) The unique identifier of the user. If not provided, it will be automatically generated.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully added, false otherwise.
 *   - 'message': A message indicating the status of the review operation.
 *   - 'review_id': The ID of the newly created review (if successful).
 *
 * @throws Exception if the database connection fails.
 */
function add_user_review(string $item_id, string $user_name, string $review_text, int $rating = 0, int $user_id = 0) {

    // **IMPORTANT: Replace this with your actual database connection code**
    // This is just a placeholder for demonstration.
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database connection failed: ' . $e->getMessage()];
    }

    // Check if user_id is provided; otherwise, generate one.
    if ($user_id == 0) {
        $user_id = $pdo->lastInsertId(); // Get the last inserted ID
    }


    // Sanitize inputs - IMPORTANT for security!
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    // Validation -  Ensure rating is within the valid range.
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be between 1 and 5.'];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating, user_id) VALUES (:item_id, :user_name, :review_text, :rating, :user_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);

    // Execute the statement
    try {
        $stmt->execute();
        $review_id = $pdo->lastInsertId(); // Get the ID of the newly created review
        return ['success' => true, 'message' => 'Review submitted successfully.', 'review_id' => $review_id];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];
    }
}


// Example Usage:
// $review_result = add_user_review('product123', 'John Doe', 'Great product!', 5);
// print_r($review_result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It handles input validation, sanitization, and stores the review data.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText  The text of the review.
 * @param int    $rating     The rating given by the reviewer (1-5).
 *
 * @return bool  True on success, false on failure.
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating)
{
  // Validate inputs
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty.");
    return false;
  }

  if (empty($reviewerName)) {
    error_log("Error: Reviewer Name cannot be empty.");
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review Text cannot be empty.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize inputs (important for security - prevent XSS)
  $productId = filter_var($productId, FILTER_SANITIZE_STRING); // Sanitize to prevent HTML injection
  $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  // Validate sanitized inputs - important to ensure data is still valid after sanitization
  if (empty($productId) || empty($reviewerName) || empty($reviewText)) {
      error_log("Error: Sanitized input is empty after processing.");
      return false;
  }

  // Store the review data (Replace this with your database logic)
  $reviewData = [
    'product_id' => $productId,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for record keeping
  ];

  // Example: Save to a file (for demonstration)
  $filename = "reviews_" . $productId . ".txt";
  $dataString = json_encode($reviewData);
  file_put_contents($filename, $dataString . PHP_EOL, FILE_APPEND);

  // In a real application, you would save this to a database
  // For example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  // $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_name, review_text, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
  // $stmt->execute([$productId, $reviewerName, $reviewText, $rating, time()]);

  return true;
}

// Example Usage:
$productId = "product123";
$reviewerName = "John Doe";
$reviewText = "This product is amazing!  I highly recommend it.";
$rating = 4;

if (submitReview($productId, $reviewerName, $reviewText, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Review submission failed.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a specific item.
 *
 * @param string $itemId The ID of the item being reviewed.
 * @param int $maxReviews The maximum number of reviews to display (optional, defaults to 5).
 * @return array An array containing:
 *              - 'reviews': An array of review objects.
 *              - 'totalReviews': The total number of reviews for the item.
 */
function getReviews(string $itemId, int $maxReviews = 5) {
  // Simulate a database or data source for reviews.  Replace this with your actual data source.
  $reviewsData = [
    'item123' => [
      ['user' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!  Highly recommended.'],
      ['user' => 'Jane Smith', 'rating' => 5, 'comment' => 'Excellent quality and fast delivery.'],
      ['user' => 'Peter Jones', 'rating' => 3, 'comment' => 'Good value for the price.'],
    ],
    'item456' => [
      ['user' => 'Alice Brown', 'rating' => 2, 'comment' => 'Not as good as I expected.'],
      ['user' => 'Bob Williams', 'rating' => 3, 'comment' => 'Decent, but could be better.'],
    ],
  ];

  // Check if the item has any reviews
  if (!isset($reviewsData[$itemId])) {
    return ['reviews' => [], 'totalReviews' => 0];
  }

  $reviews = $reviewsData[$itemId];

  // Limit the number of reviews
  $reviews = array_slice($reviews, 0, $maxReviews, true);

  // Calculate the total number of reviews
  $totalReviews = count($reviews);

  return ['reviews' => $reviews, 'totalReviews' => $totalReviews];
}


/**
 * Display Reviews Function (Example)
 *
 * This function takes the array of reviews and formats it for display.
 *
 * @param array $reviews The array of review objects returned by getReviews().
 */
function displayReviews(array $reviews) {
  echo "<div class='review-container'>";
  if (empty($reviews['reviews'])) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Item " . $reviews['itemId'] . "</h2>"; // Assuming you pass $itemId to this function
    echo "<ul>";
    foreach ($reviews['reviews'] as $review) {
      echo "<li>";
      echo "<p><strong>User:</strong> " . $review['user'] . "</p>";
      echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
      echo "<p>" . $review['comment'] . "</p>";
      echo "</li>";
    }
    echo "</ul>";

    if (count($reviews['reviews']) < $reviews['totalReviews']) {
      echo "<p>Showing " . count($reviews['reviews']) . " of " . $reviews['totalReviews'] . " reviews.</p>";
    }
  }
  echo "</div>";
}



// Example Usage:

// Get reviews for item 'item123'
$reviewsForItem123 = getReviews('item123');
displayReviews($reviewsForItem123);

// Get reviews for item 'item456'
$reviewsForItem456 = getReviews('item456');
displayReviews($reviewsForItem456);

// Get reviews for a non-existent item
$reviewsForNonExistentItem = getReviews('item999');
displayReviews($reviewsForNonExistentItem);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText  The review text submitted by the user.
 * @param array $allowedHTML  An array of allowed HTML tags (optional, defaults to empty array).
 *
 * @return array An array containing:
 *               - 'success': True if the review was successfully submitted.
 *               - 'message': A message indicating the status of the submission.
 *               - 'review': The submitted review text.
 */
function submitReview(string $productName, string $reviewText, array $allowedHTML = []) {

  // Input Validation and Sanitization
  if (empty($productName)) {
    return [
      'success' => false,
      'message' => 'Product name cannot be empty.',
      'review' => ''
    ];
  }

  if (empty($reviewText)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review' => ''
    ];
  }

  // Basic HTML Sanitization (example - customize as needed)
  $reviewText = strip_tags($reviewText, $allowedHTML); // Remove tags from the allowed list

  // You can add more sophisticated sanitization here, like escaping HTML entities
  // or using a more robust HTML sanitization library.

  // Data Storage (Simple example - consider database for real applications)
  $reviews = ['product' => $productName, 'review' => $reviewText];

  // Store the review (replace with database logic in a real application)
  // For example:
  // $result = insertReviewIntoDatabase($reviews);

  // If the insertion was successful (replace with your database query result)
  // $success = true;
  // $message = 'Review submitted successfully.';
  // $review = $reviewText;
  // else {
  //  $success = false;
  //  $message = 'Error submitting review.';
  //  $review = '';
  // }


  // Simulate a successful submission
  $success = true;
  $message = 'Review submitted successfully.';
  $review = $reviewText;


  return [
    'success' => $success,
    'message' => $message,
    'review' => $review
  ];
}

/**
 * Displays a review form and a list of reviews.
 */
function displayReviews() {
  echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
  echo "Product Name: <input type='text' name='productName'><br>";
  echo "<textarea name='reviewText' rows='5' cols='50'></textarea><br>";
  echo "<input type='submit' value='Submit Review'>";
  echo "</form>";

  echo "<br>";

  echo "<h2>Reviews:</h2>";

  // Simulated review data (replace with data retrieval from database)
  $reviews = [
    ['product' => 'Laptop X1', 'review' => 'Excellent laptop! Fast and reliable.'],
    ['product' => 'Mouse M2', 'review' => 'Great mouse, comfortable to use.'],
    ['product' => 'Keyboard K3', 'review' => 'Good keyboard, but the keys feel a little stiff.'],
  ];


  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>Product: " . $review['product'] . ", Review: " . $review['review'] . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
displayReviews();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $productName = $_POST["productName"];
  $reviewText = $_POST["reviewText"];

  $result = submitReview($productName, $reviewText);

  if ($result['success']) {
    echo "<p style='color:green;'> " . $result['message'] . "</p>";
    // You could redirect the user or display a confirmation message.
  } else {
    echo "<p style='color:red;'> " . $result['message'] . "</p>";
  }
}
?>


<?php

/**
 * This function handles user reviews, allowing for adding, displaying,
 * and potentially updating or deleting them.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The user's review comment.
 * @param int $rating  The rating given by the user (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.
 *                    If not provided, a unique ID will be generated.
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, false otherwise.
 *   - 'message': A message indicating the status of the review creation.
 *   - 'reviewId': The ID of the newly created review (if successful).
 */
function createReview($productId, $name, $comment, $rating, $userId = null) {
  // Input Validation - Essential for security and data integrity
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
  }
  if (empty($name)) {
    return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'reviewId' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Review comment cannot be empty.', 'reviewId' => null];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'reviewId' => null];
  }

  // Unique ID Generation (optional - if not provided by user)
  if ($userId === null) {
    $userId = generateUniqueUserId();
  }

  // Data Storage (Example: Using an array.  For a real application,
  // you'd use a database)
  $newReview = [
    'productId' => $productId,
    'name' => $name,
    'comment' => $comment,
    'rating' => $rating,
    'userId' => $userId,
    'timestamp' => time()
  ];

  // Simulate Storing Review (Replace with database insertion)
  // In a real application, you would insert this data into a database.
  // For example:
  // $result = insertReviewIntoDatabase($newReview);

  // Simulate successful insertion
  // $result = true;

  // Example response -  Adjust based on your actual storage implementation
  return ['success' => true, 'message' => 'Review created successfully!', 'reviewId' => $userId];
}


/**
 *  A placeholder function for generating a unique user ID.
 *  In a real application, this would likely use a database sequence or
 *  a UUID generator.
 *
 * @return int A unique user ID.
 */
function generateUniqueUserId() {
  // This is a simple example.  In a production environment,
  // use a more robust method for generating unique IDs.
  return mt_rand(100000, 999999);
}


// Example Usage:
$product_id = '123';
$reviewer_name = 'John Doe';
$review_comment = 'Great product! Highly recommended.';
$rating = 5;

$review_result = createReview($product_id, $reviewer_name, $review_comment, $rating);

if ($review_result['success']) {
  echo "Review created successfully! Review ID: " . $review_result['reviewId'] . "<br>";
} else {
  echo "Error creating review: " . $review_result['message'] . "<br>";
}

// Example with a provided user ID:
$user_id = 42;
$review_result2 = createReview($product_id, $reviewer_name, $review_comment, $rating, $user_id);

if ($review_result2['success']) {
  echo "Review created successfully (using provided ID)! Review ID: " . $review_result2['reviewId'] . "<br>";
} else {
  echo "Error creating review (using provided ID): " . $review_result2['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productName The name of the product.
 * @param string $reviewText The review text entered by the user.
 * @param string $username  The username of the reviewer (optional, for display).
 * @param int    $rating   The rating given by the user (1-5).
 * @param int    $userId  The unique ID of the user (optional, for database storage).
 *
 * @return array An array containing:
 *   - 'success':  True if the review was successfully saved, false otherwise.
 *   - 'message':  A message describing the status of the review.
 *   - 'review':   The review data as an associative array (for display or storage).
 */
function create_user_review(string $productName, string $reviewText, string $username = 'Anonymous', int $rating = 0, int $userId = null) {
  // Validate input - important for security and data integrity
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'review' => []];
  }

  // Create a review object
  $review = [
    'product' => $productName,
    'text' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'timestamp' => time(), // Add a timestamp for record keeping
    'userId' => $userId  // Optional user ID (useful for database integration)
  ];

  //  **Here's where you'd normally store the review in a database.**
  //  This is a placeholder.  Replace with your database logic.
  //  Example using a simple array to represent a database row:
  //  $review_data = save_review_to_database($review);

  // Simulate saving to a database (for demonstration):
  $review_data = [
    'product' => $productName,
    'text' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'timestamp' => time(),
    'userId' => $userId
  ];


  // Check if the save was successful (simulated).
  if ($review_data) {
    return ['success' => true, 'message' => 'Review saved successfully.', 'review' => $review_data];
  } else {
    return ['success' => false, 'message' => 'Failed to save review.', 'review' => []];
  }
}

/**
 *  Simulated database saving function (for demonstration purposes)
 *  Replace this with your actual database interaction code.
 *
 * @param array $reviewData The review data to save.
 * @return array|null  The saved review data or null if saving failed.
 */
function save_review_to_database(array $reviewData) {
    // This is a placeholder.  In a real application, you would connect to your database
    // and perform the necessary operations (e.g., INSERT INTO reviews table).
    // For this example, we just return the data.

    // Simulate potential error:
    if (rand(0, 10) > 7) { // 30% chance of "failure"
       return null;
    }

    return $reviewData;
}


// **Example Usage:**

// Create a review
$review_result = create_user_review('Awesome Widget', 'This widget is amazing!', 'John Doe', 5);

if ($review_result['success']) {
  echo "Review saved successfully!
";
  print_r($review_result['review']);
} else {
  echo "Error saving review: " . $review_result['message'] . "
";
}

// Create another review with a different user and rating
$review_result2 = create_user_review('Basic Gadget', 'Could be better.', 'Jane Smith', 3, 123); //Include UserId

if ($review_result2['success']) {
  echo "Review saved successfully!
";
  print_r($review_result2['review']);
} else {
  echo "Error saving review: " . $review_result2['message'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a specific product.  It uses a simple database interaction for demonstration.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating The rating provided by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_connection PDO connection to your database.
 *
 * @return array An array containing:
 *   - success: True if the operation was successful, False otherwise.
 *   - message: A message indicating the outcome of the operation.
 *   - review_id: The ID of the newly created review (if successful).
 *
 */
function create_review(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection): array
{
  // Input validation (Important for security and data integrity)
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'Error: All fields are required.',
      'review_id' => null
    ];
  }

  if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
    return [
      'success' => false,
      'message' => 'Error: Rating must be a number between 1 and 5.',
      'review_id' => null
    ];
  }
    
  // SQL Injection Prevention (IMPORTANT!) - Use Prepared Statements
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
          VALUES (:product_id, :user_id, :rating, :comment)";

  try {
    $stmt = $db_connection->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $stmt->execute();
    $review_id = $db_connection->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id
    ];
  } catch (PDOException $e) {
    // Handle database errors appropriately (logging, user-friendly message)
    return [
      'success' => false,
      'message' => 'Error: ' . $e->getMessage(),
      'review_id' => null
    ];
  }
}


// Example Usage (assuming you have a PDO database connection $db_connection)
//
// $product_id = '123';
// $user_id = 'user456';
// $rating = '5';
// $comment = 'Great product!';

// $result = create_review($product_id, $user_id, $rating, $comment, $db_connection);

// if ($result['success']) {
//   echo "Review created! Review ID: " . $result['review_id'];
// } else {
//   echo "Error: " . $result['message'];
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating      The rating given by the user (e.g., 1-5).
 * @param string $database_connection  Optional.  A database connection object.  If not provided, 
 *                                      it will attempt to connect to a database based on default settings.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully saved, false otherwise.
 *               - 'message': A message indicating the outcome of the operation (e.g., success, error).
 */
function saveReview(
    string $item_id,
    string $user_name,
    string $review_text,
    int $rating,
    string $database_connection = null
): array {

    // Input Validation (important for security and data integrity)
    if (empty($item_id) || empty($user_name) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Error: Item ID, User Name, and Review Text are required.'
        ];
    }

    if ($rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Error: Rating must be between 1 and 5.'
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        // Handle the error.  This is crucial for debugging and production.
        return [
            'success' => false,
            'message' => 'Error: Database preparation failed. Check database connection and SQL syntax.'
        ];
    }

    // Bind the parameters
    $stmt->bind_param("sss", $item_id, $user_name, $review_text);

    // Execute the statement
    if ($stmt->execute() === false) {
        // Handle the error.  Crucial for debugging.
        return [
            'success' => false,
            'message' => 'Error: Review save failed. Check database connection, SQL syntax, and permissions.'
        ];
    }

    // Clean up
    $stmt->close();

    return [
        'success' => true,
        'message' => 'Review saved successfully!'
    ];
}

/**
 * Get User Reviews
 *
 *  Fetches reviews for a specific item.
 *
 * @param string $item_id  The unique identifier for the item.
 * @param string $database_connection A database connection object.
 *
 * @return array An array containing:
 *              - 'reviews':  An array of review objects, or an empty array if no reviews exist.
 *              - 'success': True if the operation was successful, false otherwise.
 *              - 'message': A message indicating the outcome.
 */
function getReviews(string $item_id, string $database_connection): array {
    $sql = "SELECT * FROM reviews WHERE item_id = ? ORDER BY rating DESC";  // Order by rating for best reviews
    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Database preparation failed.'
        ];
    }

    $stmt->bind_param("s", $item_id);

    $stmt->execute();

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Query execution failed.'
        ];
    }

    $result = $stmt->get_result();

    if ($result === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Getting result set failed.'
        ];
    }

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    $result->close(); // Important to close the result set.

    return [
        'reviews' => $reviews,
        'success' => true,
        'message' => 'Reviews retrieved successfully.'
    ];
}


// Example Usage (assuming you have a database connection set up)
//  This example is illustrative and doesn't include actual database setup.
//  You'll need to adapt it to your specific database setup.

//  Example 1: Saving a review
//  $review_data = saveReview('product123', 'John Doe', 'This is a great product!', 5);
//  print_r($review_data);

//  Example 2: Getting reviews for a product
// $reviews_data = getReviews('product123');
// print_r($reviews_data);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $name The name of the reviewer.
 * @param string $comment The review comment.
 * @param int    $rating   (Optional) The rating (1-5).  Defaults to 0.
 * @return array An array containing the review details and a success/failure flag.
 */
function submitReview($productId, $name, $comment, $rating = 0) {
    // Input Validation - VERY IMPORTANT!
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.'];
    }
    if (empty($name)) {
        return ['success' => false, 'message' => 'Reviewer name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Review comment cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Store the review in a database (or other storage mechanism)
    // This is just a placeholder - replace with your actual database logic

    $review = [
        'product_id' => $productId,
        'name'        => $name,
        'comment'     => $comment,
        'rating'      => $rating,
        'timestamp'   => time()
    ];

    //  Simulate storing the review to a file.  Replace with actual database logic
    $filename = "reviews.txt";
    file_put_contents($filename, $review . PHP_EOL, FILE_APPEND);


    return ['success' => true, 'review' => $review];
}


/**
 * Display User Reviews
 *
 * Retrieves and displays reviews for a given product ID.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing the reviews or an empty array if none are found.
 */
function displayReviews($productId) {
    // Retrieve reviews from a database or file.
    // This is just a placeholder - replace with your actual database logic

    $filename = "reviews.txt";
    $reviews = file($filename, FILE_IGNORE_NEW_LINES); //Reads the file line by line

    // Remove the first line (header) from the array
    array_shift($reviews);

    return $reviews;
}


// Example Usage:
// Simulate a user submitting a review
$reviewResult = submitReview("123", "John Doe", "Great product!  Works perfectly.", 5);

if ($reviewResult['success']) {
    echo "Review submitted successfully:<br>";
    echo "Product ID: " . $reviewResult['review']['product_id'] . "<br>";
    echo "Reviewer: " . $reviewResult['review']['name'] . "<br>";
    echo "Rating: " . $reviewResult['review']['rating'] . "<br>";
    echo "Comment: " . $reviewResult['review']['comment'] . "<br>";
} else {
    echo "Error submitting review: " . $reviewResult['message'] . "<br>";
}



// Display all reviews for product "123"
$allReviews = displayReviews("123");

echo "<br><h2>All Reviews for Product 123:</h2>";

if (empty($allReviews)) {
    echo "<p>No reviews found.</p>";
} else {
    foreach ($allReviews as $review) {
        echo "<p><strong>Reviewer:</strong> " . $review['name'] . "</p>";
        echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
        echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
        echo "<hr>";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param array $reviews (Optional) An array of existing reviews to store.  If null, a new array is created.
 *
 * @return array|null  Returns the updated array of reviews, or null if an error occurs.
 */
function storeUserReview(string $productId, string $username, string $reviewText, int $rating, array $reviews = null) {
  // Basic validation (add more robust validation as needed)
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty.");
    return null;
  }
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return null;
  }
  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return null;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return null;
  }

  // Create a new review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add timestamp for sorting/ordering
  ];

  // If a reviews array was provided, append it.  Otherwise create a new one.
  if ($reviews === null) {
    $reviews = [];
  }

  $reviews[] = $review;
  return $reviews;
}


/**
 * Display User Reviews
 *
 * This function displays a list of user reviews for a given product.
 *
 * @param string $productId The ID of the product to retrieve reviews for.
 * @param array $reviews An array of user reviews.
 *
 * @return void Prints the reviews to the console (can be modified to output to HTML etc.).
 */
function displayReviews(string $productId, array $reviews) {
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . date("Y-m-d H:i:s", strtotime($review['timestamp'])); // Format timestamp for readability
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:
// --------------------------------------------------

// Create a new reviews array (or use an existing one)
$productReviews = storeUserReview("P123", "John Doe", "Great product!", 5);
if ($productReviews !== null) {
  // Append another review
  $productReviews = storeUserReview("P123", "Jane Smith", "Works well.", 4);
  if ($productReviews !== null) {
    // Display the reviews
    displayReviews("P123", $productReviews);
  }
} else {
  echo "<p>Error storing review.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5 (inclusive).
 * @param string $comment The user's review comment.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function save_review(string $product_id, string $username, string $rating, string $comment): bool
{
    // Input Validation - Basic
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Invalid review data: Product ID, username, rating, and comment cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9\s]+$/', $username)) {
        error_log("Invalid username:  Username must contain only alphanumeric characters and spaces.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    // Sanitize Input -  Very basic.  More robust sanitization is recommended for production.
    $product_id = trim($product_id);
    $username = trim($username);
    $rating = (int)$rating; // Cast to integer for numerical comparison
    $comment = strip_tags($comment); // Remove HTML tags
    $comment = trim($comment);


    // Database Interaction (Example - Replace with your actual database logic)
    // This is a placeholder and should be adapted to your database setup.
    try {
        // Connect to your database (replace with your connection details)
        // $pdo = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
                VALUES (:product_id, :username, :rating, :comment)";

        // Prepare the statement
        $stmt = $pdo->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query
        $stmt->execute();

        // Get the last inserted ID (useful for display)
        $review_id = $pdo->lastInsertId();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


// Example Usage (For testing - remove or adjust for your application)
// Create a dummy database connection for demonstration
$pdo = null;

try {
    $pdo = new PDO("mysql:host=localhost;dbname=test_reviews", "root", ""); // Replace with your details
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    echo "Database connection failed: " . $e->getMessage() . "
";
    exit;
}

// Test case 1 - Successful save
$result = save_review("123", "JohnDoe", 4, "Great product, highly recommended!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save.
";
}

// Test case 2 - Invalid rating
$result = save_review("456", "JaneSmith", 6, "Excellent!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save (invalid rating).
";
}

// Test case 3 - Empty input
$result = save_review("", "PeterPan", 3, "Superb!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save (empty data).
";
}
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db_connection = null; // Database connection object (optional - for persistence)


    /**
     * Constructor:  Optionally connects to the database.
     *
     * @param PDO $db  (Optional) A PDO database connection object.  If null, reviews will be stored in memory.
     */
    public function __construct(PDO $db = null)
    {
        $this->db_connection = $db;
    }

    /**
     * Adds a new review.
     *
     * @param string $username  The username of the reviewer.
     * @param string $reviewText The review text.
     * @return bool True on success, false on failure (e.g., validation issues).
     */
    public function addReview(string $username, string $reviewText)
    {
        // Basic validation - can be expanded
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        // Optional:  More robust validation (e.g., sanitize inputs, check length, etc.)
        // Example:
        // $username = trim($username);
        // $reviewText = trim($reviewText);

        $review = [
            'username' => $username,
            'review_text' => $reviewText,
            'timestamp' => time() // Add a timestamp for ordering and tracking
        ];

        $this->reviews[] = $review; // Add to the array

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID (not applicable for in-memory storage, but good practice).
     *
     * @param int $reviewId  The ID of the review.  (For database implementations, this would be the primary key.)
     * @return array|null  The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        //  This is a placeholder for database implementation.
        //  In a real database, you'd query the database here.
        return null; // Simulate finding a review
    }


    /**
     *  Stores the reviews in a database (if a database connection is established).
     *  This method is kept for completeness and demonstration.
     */
    public function saveToDatabase()
    {
        if ($this->db_connection === null) {
            echo "No database connection established.  Cannot save reviews.
";
            return;
        }

        try {
            //  Example:  This is a basic example. Adapt to your database schema.
            $sql = "INSERT INTO reviews (username, review_text, timestamp) VALUES (:username, :review_text, :timestamp)";
            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':username', $this->reviews[0]['username']); // Assuming we're saving the first review
            $stmt->bindParam(':review_text', $this->reviews[0]['review_text']);
            $stmt->bindParam(':timestamp', $this->reviews[0]['timestamp']);

            $stmt->execute();
            echo "Review saved to database.
";

        } catch (PDOException $e) {
            echo "Error saving review to database: " . $e->getMessage() . "
";
        }
    }
}



// Example Usage:
// ------------------------------------------------------------------

// 1. In-Memory Storage (no database)
$reviewSystem = new UserReview();

$reviewSystem->addReview('JohnDoe', 'Great product!  Highly recommended.');
$reviewSystem->addReview('JaneSmith', 'Could be better. Needs more features.');

$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// 2.  Using a Database (Requires a database connection)
// Example using a dummy PDO connection (replace with your actual database details)
// This will only work if you have a database set up with a 'reviews' table.
try {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_user', 'your_password');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For proper error handling

    $reviewSystemDB = new UserReview($db);

    $reviewSystemDB->addReview('User1', 'Excellent!');
    $reviewSystemDB->addReview('User2', 'Okay.');

    $reviewSystemDB->saveToDatabase(); // Save to the database
} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param array $reviews An array of review objects.  Each review object should have at least:
 *                     - `user`:  The user's name or ID.
 *                     - `rating`:  An integer representing the rating (e.g., 1-5).
 *                     - `comment`: The user's comment.
 * @return string HTML markup containing the reviews.
 */
function displayUserReviews(string $productName, array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class=\"product-reviews\">";
    $html .= "<h3>Reviews for {$productName}</h3>";
    $html .= "<ul class=\"review-list\">";

    foreach ($reviews as $review) {
        $html .= "<li class=\"review\">";
        $html .= "<p><strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
        $html .= "<p>Rating: " . $review['rating'] . "</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


/**
 * Example Usage:
 */

// Sample Reviews Data (in a real application, this would come from a database)
$productName = "Awesome Gadget X";
$reviews = [
    [
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'This gadget is amazing!  I highly recommend it.'
    ],
    [
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Great product, works as expected.  Could be a little cheaper.'
    ],
    [
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It's okay.  Not quite what I was hoping for.'
    ]
];

// Display the reviews
$reviewHtml = displayUserReviews($productName, $reviews);

// Output the HTML
echo $reviewHtml;

?>


<?php
// Assuming you have a database connection established

// Get reviews from the database (simplified example)
$reviews = getReviewsFromDatabase($productName); // Replace with your actual database query

// Display the reviews (as shown above)
$reviewHtml = displayUserReviews($productName, $reviews);
echo $reviewHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with various options.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's comment on the product.
 * @param string $databaseConnection  A valid database connection object.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    $databaseConnection // Use $databaseConnection instead of passing it as a string
) {
    try {
        // Validate input (basic - expand for more robust validation)
        if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
            throw new Exception("All fields are required.");
        }

        if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
            throw new Exception("Rating must be a number between 1 and 5.");
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment) 
                VALUES (?, ?, ?, ?)";

        // Prepare the statement
        $stmt = $databaseConnection->prepare($sql);

        // Bind the parameters
        $stmt->bind_param("ssis", $productId, $username, $rating, $comment);

        // Execute the statement
        $stmt->execute();

        // Close the statement
        $stmt->close();

        return true;

    } catch (Exception $e) {
        // Handle errors (logging is recommended)
        error_log("Error storing review: " . $e->getMessage());  // Log the error
        return false;
    }
}

// Example Usage (assuming you have a database connection named $conn)

// $productId = "123";
// $username = "JohnDoe";
// $rating = "4";
// $comment = "Great product! Highly recommended.";

// if (storeUserReview($productId, $username, $rating, $comment, $conn)) {
//     echo "Review successfully stored!";
// } else {
//     echo "Failed to store review.";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productName - The name of the product or service being reviewed.
 * @param string $userId - The ID of the user writing the review.  Can be null for anonymous reviews.
 * @param string $reviewText - The text of the review.
 * @param int $rating - The rating given by the user (e.g., 1-5 stars).
 * @param PDO $db - A PDO database connection object.
 *
 * @return array - An array containing the review data or an error message.
 */
function create_review(string $productName, string $userId, string $reviewText, int $rating, PDO $db) {
    // Input Validation (Basic - Expand as needed)
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    // SQL query -  Protect against SQL injection!  Use prepared statements.
    $sql = "INSERT INTO reviews (product_name, user_id, review_text, rating)
            VALUES (:product_name, :user_id, :review_text, :rating)";

    try {
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $result = $stmt->execute();

        if ($result) {
            return ['success' => 'Review created successfully.'];
        } else {
            return ['error' => 'Failed to create review. Database error.'];
        }
    } catch (PDOException $e) {
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Function to display all reviews for a product.
 *
 * @param string $productName - The name of the product to retrieve reviews for.
 * @param PDO $db - A PDO database connection object.
 *
 * @return array - An array containing the review data.
 */
function get_reviews(string $productName, PDO $db) {
    $sql = "SELECT * FROM reviews WHERE product_name = :product_name";

    try {
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $reviews;
    } catch (PDOException $e) {
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}



// --- Example Usage (For demonstration -  replace with your actual database setup) ---

// **IMPORTANT: Replace these with your database connection details!**
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

try {
    $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}



// Example of creating a review:
$review_data = create_review('Awesome Product', 'user123', 'This is a fantastic product!', 5, $db);
print_r($review_data); // Output the result of the create_review function.
// Example: Displaying reviews for a product
$product_name = 'Awesome Product';
$reviews = get_reviews($product_name, $db);
print_r($reviews); // Display the reviews.

// ---  End of Example Usage ---



// ---  Database Table Structure (Example)  ---
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    user_id VARCHAR(255) NULL,  // Can be NULL for anonymous reviews
    review_text TEXT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5)
);
*/


<?php

/**
 * Class UserReview
 *
 * Allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The name of the user who wrote the review.
     * @param string $rating The rating given by the user (e.g., 1-5 stars).
     * @param string $comment The user's review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($user, $rating, $comment) {
        if (!is_string($user) || !is_string($comment)) {
            return false; // Invalid input
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'user' => $user,
            'rating' => $rating,
            'comment' => $comment
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product or service (placeholder - extend as needed)
     *
     * @param string $productName (Optional)  Filter by product name
     * @return array An array of review objects filtered by product name.  Returns all reviews if no filter is specified.
     */
    public function getReviewsByProduct($productName = '') {
        if (empty($productName)) {
            return $this->getAllReviews();
        }

        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            // Add your filtering logic here based on $productName.
            // For example, if you have a field like 'product_id' in your reviews:
            // if ($review['product_id'] === $productName) {
            //    $filteredReviews[] = $review;
            // }
        }
        return $filteredReviews;
    }

    /**
     *  Gets the average rating.
     *  
     *  @return float|null The average rating, or null if there are no reviews.
     */
    public function getAverageRating() {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($this->reviews);
    }

}

// Example Usage:

// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('John Doe', 4, 'Great product, highly recommend!');
$reviewSystem->addReview('Jane Smith', 5, 'Excellent service and fast delivery.');
$reviewSystem->addReview('Peter Jones', 3, 'It was okay, could be better.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br><br>";
}

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "Average Rating: " . $averageRating . "<br>";
} else {
    echo "No reviews yet.";
}

// Get reviews for a specific product (example - replace 'Product A' with the actual product name)
$productReviews = $reviewSystem->getReviewsByProduct('Product A'); // This will return an empty array in this example.
echo "<h2>Reviews for Product A:</h2>";
if (!empty($productReviews)) {
    foreach ($productReviews as $review) {
        echo "<strong>User:</strong> " . $review['user'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br><br>";
    }
} else {
    echo "No reviews found for Product A.";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $review_date;

    /**
     * Constructor for the UserReview class
     *
     * @param int $review_id (Optional) - Unique ID for the review.  If not provided, one will be generated.
     * @param int $user_id The ID of the user who submitted the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment on the product.
     * @param string $review_date The date the review was submitted (e.g., "Y-m-d H:i:s").
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment, $review_date) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->review_date = $review_date;
    }

    /**
     * Getters and Setters (for encapsulation)
     */

    public function getReviewId() {
        return $this->review_id;
    }

    public function setReviewId($review_id) {
        $this->review_id = $review_id;
    }


    public function getUserId() {
        return $this->user_id;
    }

    public function setUserId($user_id) {
        $this->user_id = $user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function setProductId($product_id) {
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getReviewDate() {
        return $this->review_date;
    }

    public function setReviewDate($review_date) {
        $this->review_date = $review_date;
    }

    /**
     * Display the review information in a readable format.
     *
     * @return string  A formatted string representing the review.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getReviewDate();
    }

}


/**
 * User Review Function (Illustrative Example -  A Basic Review "Function")
 *
 * This is a simplified example demonstrating how you might *use* a UserReview object.
 *  In a real-world scenario, you'd likely integrate this with a database.
 */
function processUserReview($review_id, $user_id, $product_id, $rating, $comment, $review_date) {
    // Create a UserReview object
    $review = new UserReview($review_id, $user_id, $product_id, $rating, $comment, $review_date);

    // Basic validation (you'd want more robust validation in a real application)
    if ($review->getRating() < 1 || $review->getRating() > 5) {
        echo "Invalid rating. Rating must be between 1 and 5.
";
        return false;
    }

    // Display the review
    echo "Review Submitted:
" . $review->displayReview() . "

";

    // In a real application, you'd save this review to a database.

    return true; // Indicate success
}


// Example Usage
processUserReview(123, 45, 67, 4, "Great product!", "2023-10-27 10:00:00");
processUserReview(456, 78, 90, 5, "Excellent value!", "2023-10-27 11:30:00");
processUserReview(789, 10, 12, 3, "Okay", "2023-10-27 13:00:00"); //  Demonstrating a 3-star review


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic validation and error handling.  This is a simplified
 * example and can be expanded upon significantly for a production environment.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating given (e.g., 1-5).
 * @param string $comment  The review text.
 *
 * @return array An array containing the response data:
 *               - 'success': True if the operation was successful, false otherwise.
 *               - 'message': A message describing the result.
 *               - 'data':  The review data if successful, or an empty array.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment) {
  // Input Validation (Basic)
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => "All fields are required.",
      'data' => []
    ];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => "Rating must be a number between 1 and 5.",
      'data' => []
    ];
  }

  // *** In a real application, you would: ***
  // 1. Connect to a database to store the review.
  // 2. Sanitize and validate the input thoroughly.
  // 3.  Handle database errors properly.
  // 4.  Potentially check for existing reviews for the same user and product.
  // 5.  Implement a more robust security mechanism (e.g., escaping user input).

  // For demonstration purposes, we'll just simulate a successful review creation.
  $review_id = time(); // Generate a simple unique ID
  $review = [
    'review_id' => $review_id,
    'product_id' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date_created' => date('Y-m-d H:i:s')
  ];

  return [
    'success' => true,
    'message' => "Review created successfully.",
    'data' => $review
  ];
}


/**
 *  Example Usage
 */

// Create a review
$response = create_user_review('product123', 'JohnDoe', 4, 'Great product! Highly recommended.');

echo "<pre>";
print_r($response);
echo "</pre>";

// Example of an invalid response
$response = create_user_review('', 'JaneSmith', 3, 'Terrible.');
echo "<pre>";
print_r($response);
echo "</pre>";
?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $item_title The title of the item being reviewed.
 * @param string $review_text The user-submitted review text.
 * @param array $user_data An array containing user data (username, etc.).  Optional.
 * 
 * @return array An array containing the review data and potentially an error message.
 */
function submit_review(string $item_id, string $item_title, string $review_text, array $user_data = []) {
    // Validate inputs - basic example
    if (empty($item_id) || empty($review_text)) {
        return ['success' => false, 'message' => 'Item ID and review text are required fields.'];
    }

    // Sanitize inputs (important for security)
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    //  You might add more sophisticated validation here:
    //  - Check review text length
    //  -  Basic spam detection (e.g., blacklists)

    //  Store the review data (In a real application, this would be a database)
    $review = [
        'item_id' => $item_id,
        'item_title' => $item_title,
        'review_text' => $review_text,
        'user_id' => isset($user_data['user_id']) ? $user_data['user_id'] : null, // Use user ID if available
        'created_at' => date('Y-m-d H:i:s'),
    ];

    //  In a real application, you would save this $review array to a database.
    //  For example:
    //  $db->insert('reviews', $review);

    return ['success' => true, 'review_data' => $review, 'message' => 'Review submitted successfully!'];
}


/**
 * Displays user reviews for a given item.
 *
 * @param string $item_id The ID of the item to display reviews for.
 * @param array $reviews An array of review data (returned from submit_review).
 *
 * @return string HTML representation of the reviews.
 */
function display_reviews(string $item_id, array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for {$reviews[$item_id]['item_title']}</h2>";
    $html .= "<ul>";

    foreach ($reviews[$item_id] as $review) {
        $html .= "<li>";
        $html .= "<p><strong>" . $review['user_id'] . ":</strong> " . $review['review_text'] . "</p>";
        $html .= "<span class='created_at'>" . $review['created_at'] . "</span>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    return $html;
}



// Example Usage (Demonstration)
// -------------------------------------------------------------------

// 1. Submit a review:
$review_result = submit_review('product_123', 'Awesome Widget', 'This widget is amazing!  It does everything I need.');

if ($review_result['success']) {
    echo "<h2>Review Submitted</h2>";
    echo "<p>Review ID: " . $review_result['review_data']['item_id'] . "</p>";
    echo "<p>Review Text: " . $review_result['review_data']['review_text'] . "</p>";
} else {
    echo "<h2>Error</h2>";
    echo "<p>Error submitting review: " . $review_result['message'] . "</p>";
}

// 2. Display the reviews (assuming you have some reviews)
//  For this to work, you would need to populate the $reviews array from a database or other source.
//  For demonstration, we'll create a sample array.
$sample_reviews = [
    'product_123' => [
        ['item_id' => 'product_123', 'review_text' => 'Great product!'],
        ['item_id' => 'product_123', 'review_text' => 'Works as expected.'],
    ],
    'product_456' => [
        ['item_id' => 'product_456', 'review_text' => 'Not bad, but overpriced.'],
    ],
];

$reviews_html = display_reviews('product_123', $sample_reviews);
echo $reviews_html;
?>


<?php

/**
 * Class UserReview
 *
 * This class provides functionality to create, retrieve, update, and delete user reviews.
 * It includes basic validation and error handling.
 */
class UserReview
{
    private $db; // Database connection object (replace with your actual database setup)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return int|false The ID of the newly created review on success, false on failure.
     */
    public function createReview($productId, $username, $rating, $comment)
    {
        // Validation (add more as needed)
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize input (important for security)
        $productId = (int)$productId; // Cast to integer
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);

        // Prepare and execute the SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
                VALUES ($productId, '$username', $rating, '$comment')";

        $result = $this->db->query($sql);

        if ($result) {
            return $this->db->lastInsertId();
        } else {
            return false;
        }
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|false An array containing the review details (product_id, username, rating, comment)
     *                   or false if the review does not exist.
     */
    public function getReview($reviewId)
    {
        if (!is_numeric($reviewId)) {
            return false;
        }

        $reviewId = (int)$reviewId;

        $sql = "SELECT product_id, username, rating, comment 
                FROM reviews 
                WHERE id = $reviewId";

        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            return $result->fetch_assoc();
        } else {
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new ID of the product.
     * @param string $username The new username.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview($reviewId, $productId, $username, $rating, $comment)
    {
        if (!is_numeric($reviewId) || !$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize input
        $productId = (int)$productId;
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);


        // Prepare SQL
        $sql = "UPDATE reviews 
                SET product_id = $productId, 
                    username = '$username', 
                    rating = $rating, 
                    comment = '$comment' 
                WHERE id = $reviewId";

        $result = $this->db->query($sql);

        return $result;
    }

    /**
     * Deletes a review.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview($reviewId)
    {
        if (!is_numeric($reviewId)) {
            return false;
        }

        $reviewId = (int)$reviewId;

        $sql = "DELETE FROM reviews WHERE id = $reviewId";

        $result = $this->db->query($sql);

        return $result;
    }
}

// Example Usage (assuming you have a database connection object $db)
//  -  Replace this with your actual database setup and connection.
//  -  The example assumes you have a table named 'reviews' with columns: id (INT, PRIMARY KEY), product_id (INT), username (VARCHAR), rating (INT), comment (TEXT)
//  -  You'll need to adapt this to your specific database structure.

//  $db = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");

// $review = new UserReview($db);

// // Create a review
// $reviewId = $review->createReview(1, "JohnDoe", 4, "Great product!");

// if ($reviewId) {
//     echo "Review created with ID: " . $reviewId . "<br>";

//     // Get the review
//     $review = $review->getReview($reviewId);
//     if ($review) {
//         echo "Review details: " . json_encode($review);
//     } else {
//         echo "Review not found.";
//     }

//     // Update the review
//     $updateResult = $review->updateReview($reviewId, 2, "JaneSmith", 5, "Excellent!");
//     if ($updateResult) {
//         echo "<br>Review updated successfully.";
//     } else {
//         echo "<br>Failed to update review.";
//     }

//     // Delete the review
//     $deleteResult = $review->deleteReview($reviewId);
//     if ($deleteResult) {
//         echo "<br>Review deleted successfully.";
//     } else {
//         echo "<br>Failed to delete review.";
//     }

// } else {
//     echo "Failed to create review.";
// }
?>


<?php

/**
 *  User Review Function
 *
 *  This function handles creating, retrieving, updating, and deleting user reviews.
 *  It demonstrates basic CRUD (Create, Read, Update, Delete) operations
 *  for a review system.
 *
 *  Example Usage:
 *  $reviewSystem = new ReviewSystem();
 *
 *  // Create a new review
 *  $review = $reviewSystem->createReview(['user_id' => 1, 'product_id' => 101, 'rating' => 5, 'comment' => 'Great product!']);
 *
 *  // Retrieve a review by ID
 *  $review = $reviewSystem->getReview(1);
 *
 *  // Update a review
 *  $review = $reviewSystem->updateReview(1, ['rating' => 4, 'comment' => 'Good, but could be better.']);
 *
 *  // Delete a review
 *  $reviewSystem->deleteReview(1);
 *
 * @param array $data  An associative array containing the review data.
 *                       Required keys: 'user_id', 'product_id', 'rating', 'comment'.
 * @return array|null  The newly created review object if creation was successful,
 *                      or the review object if update was successful,
 *                      or null if update or delete was successful.
 */
class ReviewSystem
{
    private $reviews = []; // In-memory storage for simplicity.  Use a database in a real application.
    private $nextReviewId = 1;

    public function createReview(array $data)
    {
        // Validation (basic)
        if (!isset($data['user_id'], $data['product_id'], $data['rating'], $data['comment'])) {
            return null; // Required fields are missing
        }

        if (!is_numeric($data['user_id']) || !is_numeric($data['product_id'])) {
            return null;  // Invalid IDs
        }
        if (!is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
            return null; // Rating must be an integer between 1 and 5
        }

        $review = [
            'id' => $this->nextReviewId++,
            'user_id' => $data['user_id'],
            'product_id' => $data['product_id'],
            'rating' => $data['rating'],
            'comment' => $data['comment'],
            'created_at' => time(),
            'updated_at' => time()
        ];

        $this->reviews[] = $review;

        return $review;
    }

    public function getReview(int $id)
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $id) {
                return $review;
            }
        }

        return null; // Review not found
    }

    public function updateReview(int $id, array $data)
    {
        $review = $this->getReview($id);

        if (!$review) {
            return null; // Review not found
        }

        // Validate the update data
        if (!isset($data['rating'], $data['comment'])) {
            return null; //Required fields are missing
        }

        if (!is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
            return null; // Invalid rating
        }
        
        $review['rating'] = $data['rating'];
        $review['comment'] = $data['comment'];
        $review['updated_at'] = time();

        return $review;
    }

    public function deleteReview(int $id)
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $id) {
                unset($this->reviews[$key]);
                return true; // Successfully deleted
            }
        }

        return false; // Review not found
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Create a new review
$review = $reviewSystem->createReview(['user_id' => 1, 'product_id' => 101, 'rating' => 5, 'comment' => 'Great product!']);

if ($review) {
    echo "New Review Created:
";
    print_r($review);
    echo "
";
}

// Retrieve a review by ID
$review = $reviewSystem->getReview(1);
if ($review) {
    echo "Review ID 1:
";
    print_r($review);
    echo "
";
}

// Update a review
$review = $reviewSystem->updateReview(1, ['rating' => 4, 'comment' => 'Good, but could be better.']);
if ($review) {
    echo "Review ID 1 Updated:
";
    print_r($review);
    echo "
";
}

// Delete a review
$reviewSystem->deleteReview(1);

// Try to retrieve the deleted review
$review = $reviewSystem->getReview(1);
if (!$review) {
    echo "Review ID 1 deleted successfully.
";
} else {
    echo "Review ID 1 still exists.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews with various metadata.
 *
 * @param string $user_id      The ID of the user submitting the review.
 * @param string $product_id   The ID of the product being reviewed.
 * @param string $rating       The rating given by the user (e.g., 1-5).
 * @param string $comment      The user's written review.
 * @param string $timestamp   (Optional) Timestamp for the review. Defaults to current timestamp.
 *
 * @return bool|string True on success, error message string on failure.
 */
function saveUserReview(
    string $user_id,
    string $product_id,
    string $rating,
    string $comment,
    string $timestamp = null // Optional timestamp
) {
    // Input Validation (Important!)
    if (empty($user_id) || empty($product_id) || empty($rating) || empty($comment)) {
        return "Error: All fields (User ID, Product ID, Rating, Comment) are required.";
    }

    if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // Sanitize inputs (Important for security - prevents XSS, SQL injection)
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $rating = intval($rating);  // Ensure rating is an integer
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // Database Interaction (Example - Replace with your actual database logic)
    try {
        // Assuming you have a database connection established
        // $db = new PDO(/* your database connection details */);
        // Example using a placeholder for demonstration - REPLACE with your connection

        $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment, created_at) VALUES (:user_id, :product_id, :rating, :comment, :created_at)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        $stmt->bindParam(':created_at', date('Y-m-d H:i:s')); //Using timestamp as string

        $result = $stmt->execute();

        if ($result) {
            return true; // Success
        } else {
            // Log the error for debugging
            error_log("Error saving review: " . print_r($stmt->errorInfo(), true));
            return "Error: Could not save review to database. Check error logs.";
        }

    } catch (PDOException $e) {
        // Handle database connection or query errors
        error_log("Database Error: " . $e->getMessage());
        return "Error: Database error.  Check database connection and query syntax.  " . $e->getMessage();
    }
}

// Example usage:
$user_id = "user123";
$product_id = "product456";
$rating = 4;
$comment = "Great product! Highly recommended.";

$result = saveUserReview($user_id, $product_id, $rating, $comment);

if ($result === true) {
    echo "Review saved successfully!";
} else {
    echo "Error: " . $result;
}
?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows users to submit reviews, display existing reviews,
 * and handles simple moderation (e.g., flagging inappropriate content).
 *
 * @param string $review_text The review text submitted by the user.
 * @param int   $product_id  The ID of the product being reviewed.
 * @param array $review_data (Optional) Array of existing reviews for the product.
 *
 * @return array An array containing:
 *   - 'reviews': An array of existing reviews (if any).
 *   - 'new_review': The submitted review text.
 *   - 'error':  Error message if the review submission failed, otherwise null.
 */
function handleUserReview(string $review_text, int $product_id, array $review_data = []): array
{
    // Validation - Basic checks (can be expanded)
    if (empty($review_text)) {
        return ['reviews' => $review_data, 'new_review' => $review_text, 'error' => 'Review text cannot be empty.'];
    }

    //  Consider adding more robust validation here like:
    // - Length limits for review text
    // - Profanity filtering
    // -  Checking for malicious code

    // Add the new review to the existing data.
    $new_review = ['text' => $review_text, 'timestamp' => time()];
    $updated_reviews = array_merge($review_data, [$new_review]);

    return ['reviews' => $updated_reviews, 'new_review' => $review_text, 'error' => null];
}

// --- Example Usage ---

// Initialize some review data (simulating a database)
$productReviews = [
    ['text' => 'Great product!', 'timestamp' => 1678886400],
    ['text' => 'Could be better.', 'timestamp' => 1678886460]
];

// 1. Submit a new review:
$reviewText = 'Excellent value for the price.';
$result = handleUserReview($reviewText, 123); // Assuming product ID 123

if ($result['error'] === null) {
    echo "New Review Submitted:
";
    print_r($result['reviews']);
} else {
    echo "Error submitting review: " . $result['error'] . "
";
}

echo "
";


// 2. Submit another review:
$reviewText2 = 'This is fantastic!  I highly recommend it.';
$result2 = handleUserReview($reviewText2, 123);

if ($result2['error'] === null) {
    echo "New Review Submitted:
";
    print_r($result2['reviews']);
} else {
    echo "Error submitting review: " . $result2['error'] . "
";
}

echo "
";

// 3. Example of error handling:
$emptyReview = handleUserReview("", 456);
if ($emptyReview['error'] !== null) {
    echo "Error submitting empty review: " . $emptyReview['error'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating (optional) A rating from 1 to 5. Defaults to null.
 * @param string $timestamp (optional)  A timestamp for when the review was created. Defaults to current timestamp.
 *
 * @return bool True on successful submission, false on failure.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating = null, string $timestamp = null)
{
    // **Important Security Measures:**  Always validate and sanitize user input!
    // This is a basic example and needs significant improvement for production.

    // Sanitize input - VERY IMPORTANT
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    // Validation - crucial to prevent abuse and errors
    if (empty($product_id) || empty($user_name) || empty($review_text)) {
        error_log("Review submission failed: Missing required fields.");
        return false;
    }

    if ($rating !== null && !is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Review submission failed: Invalid rating.");
        return false;
    }


    // **Data Storage - Replace with a database connection**
    // This is a placeholder - you'll need to connect to your database.
    $review_data = [
        'product_id' => $product_id,
        'user_name' => $user_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp ?? time(), // Use current timestamp if none provided
    ];

    // **Example:  Simulated database insertion (replace with your database code)**
    // In a real application, you would use a database query.
    // For demonstration purposes, we'll just store it in a simple array.
    $reviews = json_encode($review_data); //Encode for storage if needed
    file_put_contents('reviews.json', $reviews . "
", FILE_APPEND); // Append to a file

    //Success
    error_log("Review submitted successfully for product ID: " . $product_id);
    return true;
}



/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The unique identifier for the product.
 * @return array|null An array of review objects, or null if no reviews are found.
 */
function get_reviews(string $product_id) {
    // **Important:  Fetch from your database here!**
    // This is just a placeholder - use your database connection.
    // Example (replace with your database query):
    $reviews = json_decode(file_get_contents('reviews.json'), true); //decode JSON

    //Filter reviews by product_id
    $filteredReviews = [];
    foreach($reviews as $review){
        if($review['product_id'] == $product_id){
            $filteredReviews[] = $review;
        }
    }

    return empty($filteredReviews) ? null : $filteredReviews;
}



/**
 * Display Reviews
 *
 * Displays reviews for a product.
 *
 * @param array $reviews An array of review objects.
 */
function display_reviews(array $reviews) {
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User:</strong> " . htmlspecialchars($review['user_name']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
    }
    echo "</ul>";
}


// Example Usage (For testing purposes):
$product_id = "12345";

// Submit a review
if (submit_review($product_id, "John Doe", "This is a great product!", 5)) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Review submission failed.</p>";
}

// Get and display reviews
$reviews = get_reviews($product_id);
display_reviews($reviews);

?>


<?php

/**
 * User Review Class
 * 
 * This class provides functionality to create, store, and retrieve user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $timestamp;

    /**
     * Constructor
     *
     * @param int $userId      The ID of the user submitting the review.
     * @param int $productId   The ID of the product being reviewed.
     * @param int $rating       The rating given by the user (e.g., 1-5).
     * @param string $comment   The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->timestamp = time(); // Get the current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getTimestamp() {
        return $this->timestamp;
    }


    /**
     * Convert review data into an associative array for easy display/export.
     *
     * @return array An associative array containing the review data.
     */
    public function toArray() {
        return [
            'reviewId' => $this->getReviewId(),
            'userId' => $this->getUserId(),
            'productId' => $this->getProductId(),
            'rating' => $this->getRating(),
            'comment' => $this->getComment(),
            'timestamp' => $this->getTimestamp()
        ];
    }

    /**
     *  This is a basic example.  In a real application, you'd store this data in a database.
     *  This demonstrates how to store the review data.
     *  @param string $dbConnection The database connection string.  Replace with your connection details.
     */
    public function save($dbConnection) {
        // This is a placeholder.  In a real application, you would use a database query to save the review.
        // Example using PDO:
        try {
            $pdo = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            $stmt = $pdo->prepare("INSERT INTO reviews (userId, productId, rating, comment, timestamp) 
                                    VALUES (:userId, :productId, :rating, :comment, :timestamp)");
            $stmt->bindParam(':userId', $this->userId);
            $stmt->bindParam(':productId', $this->productId);
            $stmt->bindParam(':rating', $this->rating);
            $stmt->bindParam(':comment', $this->comment);
            $stmt->bindParam(':timestamp', $this->timestamp);

            $stmt->execute();
            $this->reviewId = $pdo->lastInsertId();
        } catch (PDOException $e) {
            // Handle database errors here.  Log the error, display a user-friendly message, etc.
            echo "Database error: " . $e->getMessage();
        }
    }

}



/**
 * User Review Review Function (Example Usage)
 */
function displayReview($review) {
    if ($review) {
        echo "<h2>Review for Product ID: " . $review->getProductId() . "</h2>";
        echo "<p><strong>User:</strong> " . $review->getUserId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $review->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", $review->getTimestamp()) . "</p>";
    } else {
        echo "<p>No reviews found.</p>";
    }
}



// Example usage:
$review1 = new UserReview(123, 456, 5, "Excellent product, highly recommended!");
$review1->save("localhost", "root", "password"); // Replace with your DB details.
displayReview($review1);

$review2 = new UserReview(456, 456, 3, "Okay, but could be better.");
$review2->save("localhost", "root", "password"); // Replace with your DB details.
displayReview($review2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a simple user review display based on
 * a list of reviews.  It provides basic formatting for display.
 *
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - 'user': The username of the reviewer.
 *                       - 'rating': The rating (e.g., 1-5).
 *                       - 'comment': The review text.
 * @param int $limit The maximum number of reviews to display. Defaults to 5.
 *
 * @return string HTML markup for displaying the reviews.
 */
function displayUserReviews(array $reviews, $limit = 5)
{
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $reviewsToDisplay = array_slice($reviews, min($limit, count($reviews))); // Limit the number of reviews

  $html = '<div class="user-reviews">';
  foreach ($reviewsToDisplay as $review) {
    $html .= '<div class="review">';
    $html .= '<p class="user"><strong>' . htmlspecialchars($review['user']) . '</strong></p>';
    $html .= '<p class="rating">Rating: ' . $review['rating'] . '</p>';
    $html .= '<p class="comment">' . nl2br(htmlspecialchars($review['comment'])) . '</p>'; // nl2br for line breaks
    $html .= '</div>';
  }
  $html .= '</div>';

  return $html;
}


/**
 * Example Usage (Demonstration)
 */

// Sample Reviews
$reviews = [
  ['user' => 'Alice', 'rating' => 5, 'comment' => "This product is amazing! I highly recommend it."],
  ['user' => 'Bob', 'rating' => 4, 'comment' => "Good product, but could be a little better."],
  ['user' => 'Charlie', 'rating' => 3, 'comment' => "It's okay.  Nothing special."],
  ['user' => 'David', 'rating' => 5, 'comment' => "Excellent value for the price."],
  ['user' => 'Eve', 'rating' => 2, 'comment' => "Not what I expected."],
  ['user' => 'Frank', 'rating' => 4, 'comment' => "A solid choice."],
  ['user' => 'Grace', 'rating' => 1, 'comment' => "Very disappointing."],
];


// Display the first 3 reviews
$reviewHTML = displayUserReviews($reviews, 3);
echo $reviewHTML;
?>


   $reviewHTML = displayUserReviews($yourReviewsArray, $maximumNumberOfReviews);
   echo $reviewHTML;
   
   * Replace `$yourReviewsArray` with the array of review objects you have.
   * Adjust the `$maximumNumberOfReviews` if you want to show more or fewer reviews.
3. **Style with CSS:** Add CSS rules to style the `user-reviews`, `review`, `user`, `rating`, and `comment` classes to customize the appearance of the reviews.

Example CSS:



<?php

/**
 * Reviews Class
 *
 * This class allows you to manage user reviews for a specific item (e.g., a product, movie, etc.).
 * It provides functionality to add, display, and potentially moderate reviews.
 */
class Reviews {

    private $reviews = []; // Array to store reviews
    private $db = null; // Database connection (optional)

    /**
     * Constructor
     *
     * Initializes the Reviews class.  Allows for database connection setup.
     *
     * @param PDO $db (Optional) PDO database connection object.
     */
    public function __construct(PDO $db = null) {
        $this->db = $db;
    }

    /**
     * Add a Review
     *
     * Adds a new review to the $reviews array.
     *
     * @param int $itemId The ID of the item the review is for.
     * @param string $user The name or ID of the user submitting the review.
     * @param string $comment The review text.
     * @return bool True on success, false on failure (e.g., invalid data).
     */
    public function addReview(int $itemId, string $user, string $comment) {
        // Basic validation - improve this for production
        if (!is_numeric($itemId)) {
            return false;
        }
        if (empty($user)) {
            return false;
        }
        if (empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'itemId' => $itemId,
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];
        return true;
    }

    /**
     * Get All Reviews for an Item
     *
     * Retrieves all reviews associated with a specific item ID.
     *
     * @param int $itemId The ID of the item.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsForItem(int $itemId) {
        //Filtering based on item ID
        $reviews = [];
        foreach($this->reviews as $review) {
            if ($review['itemId'] == $itemId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Display Reviews
     *
     * Formats and displays the reviews.
     *
     * @return string  A formatted string containing the reviews.
     */
    public function displayReviews() {
        $output = "<h2>Reviews for Item ID: " . implode(",", $this->getReviewsForItem($this->getLatestItemId())) . "</h2>";
        $reviews = $this->getReviewsForItem($this->getLatestItemId());

        if (empty($reviews)) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($reviews as $review) {
                $output .= "<li><strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
                $output .= "<em>Rating:</em> " . htmlspecialchars($review['comment']) . "<br>";
                $output .= "<em>Date:</em> " . htmlspecialchars($review['date']) . "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }

    /**
     *  Helper to get the latest itemId to retrieve reviews from
     */
    private function getLatestItemId(){
        if (empty($this->reviews)) return 0;
        return array_key_last($this->reviews, 'itemId');
    }
}

// --- Example Usage ---
// Create a database connection (replace with your actual credentials)
$db = new PDO('mysql:host=localhost;dbname=my_reviews_db', 'user', 'password');


// Create a Reviews object
$reviews = new Reviews($db);

// Add some reviews
$reviews->addReview(1, "John Doe", "Great product! I love it.");
$reviews->addReview(1, "Jane Smith", "Could be better, but good overall.");
$reviews->addReview(2, "Peter Jones", "Excellent value for money.");

// Get reviews for item 1
$reviewsForItem1 = $reviews->getReviewsForItem(1);

// Display the reviews
echo $reviews->displayReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $productName The name of the product.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param array $reviews An optional array of existing reviews to display.
 *
 * @return array An array containing the existing reviews and the new review.
 */
function createAndDisplayReviews(string $productId, string $productName, string $reviewerName, string $reviewText, array &$reviews = []) {

  // Validate input (basic) - Enhance as needed for production environments
  if (empty($productId) || empty($productName) || empty($reviewerName) || empty($reviewText)) {
    return ['error' => 'All fields are required.'];
  }

  // Create the new review
  $newReview = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s')  // Add a timestamp for each review
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  // Sort reviews by timestamp (most recent first) - optional
  usort($reviews, function($a, $b) {
    return $b['timestamp'] <=> $a['timestamp'];
  });

  return $reviews;
}


// --- Example Usage ---

// Example 1:  Creating a new review
$productID = '12345';
$productName = 'Awesome Gadget';
$reviewer = 'John Doe';
$review = 'This gadget is fantastic!  I love it.';

$updatedReviews = createAndDisplayReviews($productID, $productName, $reviewer, $review);

if (isset($updatedReviews['error'])) {
  echo "Error: " . $updatedReviews['error'] . "<br>";
} else {
  echo "Product: " . $productName . "<br>";
  echo "Reviews:<br>";
  foreach ($updatedReviews as $review) {
    echo "Reviewer: " . $review['reviewerName'] . "<br>";
    echo "Review Text: " . $review['reviewText'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br><br>";
  }
}


echo "<br>--- Example 2: Empty Review ---";
$productID = '67890';
$productName = 'Another Product';
$reviewer = 'Jane Smith';
$review = ''; // Empty review

$updatedReviews = createAndDisplayReviews($productID, $productName, $reviewer, $review);

if (isset($updatedReviews['error'])) {
  echo "Error: " . $updatedReviews['error'] . "<br>";
} else {
  echo "Product: " . $productName . "<br>";
  echo "Reviews:<br>";
  foreach ($updatedReviews as $review) {
    echo "Reviewer: " . $review['reviewerName'] . "<br>";
    echo "Review Text: " . $review['reviewText'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br><br>";
  }
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 * It handles data validation, database interaction (if needed), and basic display.
 *
 * @param string $productId  The ID of the product/item being reviewed.
 * @param string $username   The username of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment    The user's review comment.
 * @param PDO    $pdo      Optional PDO database connection object.  If not provided, assumes a global $db connection.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully created, false otherwise.
 *               - 'message': A message indicating success or the error message.
 */
function createReview($productId, $username, $rating, $comment, $pdo = null) {
  // Data Validation
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }

  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }

  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.'];
  }

  // Database Interaction (using PDO - best practice)
  try {
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();

    return ['success' => true, 'message' => 'Review created successfully!'];

  } catch (PDOException $e) {
    // Handle database errors gracefully -  Don't expose the full error to the user.
    return ['success' => false, 'message' => 'Error creating review: ' . $e->getMessage()];
  }
}


/**
 * Displays a single review.
 *
 * @param array $review  An array representing a single review (e.g., returned by createReview).
 */
function displayReview($review) {
  if ($review['success']) {
    echo "<p><strong>Rating:</strong> " . $review['message'] . "</p>";
  } else {
    echo "<p style='color:red;'>Error: " . $review['message'] . "</p>";
  }
}


/**
 * Example Usage (For demonstration purposes)
 */
// Example 1: Successful Review
$reviewData = createReview('123', 'JohnDoe', 4, 'Great product! I highly recommend it.', $db);
displayReview($reviewData);

// Example 2:  Invalid Rating
$reviewData = createReview('456', 'JaneSmith', 6, 'Awesome!', $db);
displayReview($reviewData);

// Example 3:  Empty Comment
$reviewData = createReview('789', 'PeterPan', 3, '', $db);
displayReview($reviewData);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with basic validation and formatting.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $product_id The ID of the product the review is for.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $username, string $review_text, int $product_id)
{
    // Validation
    if (empty($username)) {
        error_log("Error: Username cannot be empty."); // Log error for admin review
        return false;
    }

    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty."); // Log error for admin review
        return false;
    }

    if (!is_numeric($product_id)) {
        error_log("Error: Product ID must be a number."); // Log error for admin review
        return false;
    }

    // Sanitize the review text (optional, but recommended)
    $review_text = htmlspecialchars($review_text, ENT_QUOTES, 'UTF-8');

    // Store the review (replace with your database interaction code)
    // This is a placeholder - you'll need to connect to your database
    // and insert the review data.

    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db_connection->prepare("INSERT INTO reviews (username, review_text, product_id) VALUES (:username, :review_text, :product_id)");
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  // Log for debugging
        return false;
    }

}


// Example Usage (to demonstrate the function)
// Save a review:
$username = "John Doe";
$review_text = "This product is amazing!  I love it!";
$product_id = 123;

if (saveReview($username, $review_text, $product_id)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}


// ---  Example of displaying a review (assuming a simple HTML display) ---
//  This is just for demonstration purposes.  You'll need to adapt this
//  to match your application's styling and database structure.

function displayReview(int $review_id) {
    // Retrieve review details from the database
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $stmt = $db_connection->prepare("SELECT username, review_text, product_id FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($review) {
        echo "<div class='review'>";
        echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; //Sanitize output too!
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "Product ID: " . $review['product_id'];
        echo "</div>";
    } else {
        echo "<p>No review found for this ID.</p>";
    }
}

// Example of displaying a review with ID 1:
displayReview(1);
?>


<?php

/**
 * User Review Function
 *
 * This function handles adding, retrieving, and displaying user reviews.
 * It includes basic validation and error handling.
 */
class UserReview
{
    private $db; // Database connection object (replace with your actual DB connection)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Adds a new user review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview($productId, $username, $rating, $comment)
    {
        // Validate inputs - Add more robust validation as needed
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize inputs (important to prevent SQL injection)
        $productId = (int)$productId; // Ensure productId is an integer
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);


        // Prepare SQL query (using prepared statements - VERY IMPORTANT)
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($sql); //Prepare the statement

        if (!$stmt) {
            return false; //Handle error
        }

        // Bind parameters (prevent SQL injection)
        $stmt->bind_param("sii", $username, $rating, $comment);

        // Execute the query
        if (!$stmt->execute()) {
            error_log("Error adding review: " . $stmt->error); //Log the error for debugging
            return false;
        }

        // Close statement
        $stmt->close();

        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productId)
    {
        if (!is_numeric($productId)) {
            return [];
        }

        $productId = (int)$productId;

        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->db->prepare($sql);

        if (!$stmt) {
            return [];
        }

        $stmt->bind_param("i", $productId);

        if (!$stmt->execute()) {
            error_log("Error fetching reviews: " . $stmt->error);
            return [];
        }

        $result = $stmt->get_result();
        $reviews = [];

        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }

        $stmt->close();
        return $reviews;
    }

    /**
     * Displays reviews for a product.
     *
     * @param array $reviews An array of review objects.
     *
     * @return string HTML representation of the reviews.
     */
    public function displayReviews(array $reviews)
    {
        if (empty($reviews)) {
            return "<p>No reviews yet.</p>";
        }

        $html = "<ul>";
        foreach ($reviews as $review) {
            $html .= "<li>";
            $html .= "<strong>" . $review['username'] . "</strong> - Rating: " . $review['rating'] . " - " . $review['comment'];
            $html .= "</li>";
        }
        $html .= "</ul>";
        return $html;
    }
}


// Example Usage (replace with your database connection)
// Assuming you have a database connection object called $db

// Create an instance of the UserReview class
$reviewManager = new UserReview($db);

// Add a review
if ($reviewManager->addReview(123, "JohnDoe", 4, "Great product!")) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get reviews for product ID 123
$reviews = $reviewManager->getReviewsByProduct(123);

// Display the reviews
echo $reviewManager->displayReviews($reviews);

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to process user reviews,
 *  sanitize the input, and potentially store it.
 *
 *  @param array $reviewData An associative array containing the review data:
 *                            - 'username' (string): The username of the reviewer.
 *                            - 'rating' (int): The rating given by the reviewer (e.g., 1-5).
 *                            - 'comment' (string): The user's review comment.
 *
 *  @return array|string  Returns an array of processed review data or an error message string.
 */
function processReview(array $reviewData)
{
    // Validate input - This is crucial!
    $errors = [];

    // Username validation
    if (empty($reviewData['username'])) {
        $errors['username'] = 'Username cannot be empty.';
    }

    // Rating validation
    if (!is_numeric($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        $errors['rating'] = 'Rating must be a number between 1 and 5.';
    }

    // Comment validation
    if (empty($reviewData['comment'])) {
        $errors['comment'] = 'Comment cannot be empty.';
    }

    //  Sanitize Input (Prevent XSS and SQL Injection - Important!)
    $username = trim($reviewData['username']);
    $rating = (int)$reviewData['rating'];
    $comment = htmlspecialchars(trim($reviewData['comment']));  //Escape HTML special chars

    //  You could add more sanitization here, depending on where you're storing the review.

    //  If no errors, return the processed data
    if (empty($errors)) {
        return [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment
        ];
    } else {
        // Return an error message
        return $errors;
    }
}


// --- Example Usage ---
// Example 1: Valid Review
$review1 = ['username' => 'JohnDoe', 'rating' => 4, 'comment' => 'Great product!'];
$result1 = processReview($review1);

if (is_array($result1)) {
    if (empty($result1)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result1); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}


// Example 2: Invalid Review (Missing Comment)
$review2 = ['username' => 'JaneSmith', 'rating' => 3];
$result2 = processReview($review2);

if (is_array($result2)) {
    if (empty($result2)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result2); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}

// Example 3: Invalid Review (Invalid Rating)
$review3 = ['username' => 'PeterPan', 'rating' => 6, 'comment' => 'Awesome!'];
$result3 = processReview($review3);

if (is_array($result3)) {
    if (empty($result3)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result3); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}

?>


<?php

/**
 * User Review Function - Basic Implementation
 *
 * This function takes a user ID, a review text, and an optional rating,
 * and saves the review to a database.
 *
 * @param int    $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review.
 * @param int    $rating      (Optional) The rating given for the review (e.g., 1-5).
 *                           Defaults to 0.
 * @return bool  True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, string $reviewText, int $rating = 0) {
    // --- Database Connection (Replace with your actual connection details) ---
    // This is a placeholder.  Use PDO, MySQLi, or another database connector.
    $dbHost = 'localhost';
    $dbName = 'your_database_name';
    $dbUser = 'your_username';
    $dbPassword = 'your_password';

    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage()); // Log the error
        return false;
    }

    // --- Input Validation & Sanitization (IMPORTANT!) ---
    // Validate the input to prevent SQL injection and other issues.
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    if (empty($reviewText)) {
        error_log("Empty review text.");  //Log empty review
        return false;
    }
    $rating = (int)$rating; // Ensure rating is an integer.
    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating ($rating). Must be between 1 and 5.");
        return false;
    }


    // --- SQL Query ---
    $sql = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:userId, :reviewText, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':reviewText', $reviewText);
    $stmt->bindParam(':rating', $rating);

    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Database error saving review: " . $e->getMessage());
        return false;
    }
}

// --- Example Usage ---
// You would typically get this data from a form submission.

// Example 1: Successful save
$userId = 123;
$review = "This product is amazing!  I highly recommend it.";
$rating = 5;

if (saveUserReview($userId, $review, $rating)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Example 2: Save with default rating
$userId = 456;
$review = "Great service!";
if (saveUserReview($userId, $review)) {
    echo "Review saved successfully (default rating)!";
} else {
    echo "Failed to save review (default rating).";
}


//  ---  Dummy Review Table Schema (for testing) ---
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    review_text TEXT NOT NULL,
    rating INT NOT NULL
);
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product.
 * It includes basic validation and data sanitization.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $product_id, string $username, string $rating, string $comment): bool
{
    // Input validation and sanitization
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Error: Product ID, username, rating, and comment cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Username must only contain alphanumeric characters and underscores.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (strlen($comment) > 500) { // Limit comment length
        error_log("Error: Comment exceeds the maximum length (500 characters).");
        return false;
    }


    // Database interaction (example using a simple array for demonstration)
    $review = [
        'product_id' => $product_id,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s'), // Add timestamp for better organization
    ];

    // You would typically replace this with your database insertion logic
    $reviews = loadReviewsFromDatabase($product_id); // Assuming a function to load reviews
    $reviews[] = $review;

    // Save the review to the database (replace with your actual database insertion)
    if (!saveReviewToDatabase($review)) {
        error_log("Error: Failed to save review to database.");
        return false;
    }

    return true;
}


/**
 * Placeholder functions for database interaction
 */
function loadReviewsFromDatabase(string $product_id) {
    //  In a real application, this would query the database
    //  and return the existing reviews for that product.
    return [];
}

function saveReviewToDatabase(array $review) {
    // In a real application, this would insert the review into the database.
    //  This is a placeholder to demonstrate the integration.
    //  You would use your database connection and query to insert the review.
    //  For example:
    //  $db = new DatabaseConnection();
    //  $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment, date) VALUES (?, ?, ?, ?, ?)");
    //  $stmt->bind_param("ssisss", $review['product_id'], $review['username'], $review['rating'], $review['comment'], $review['date']);
    //  $stmt->execute();
    //  $stmt->close();
    return true; // Placeholder, always return true
}


// Example Usage
$productId = "P123";
$reviewerName = "JohnDoe";
$rating = 4;
$commentText = "Great product!  I would definitely recommend it.";

if (storeUserReview($productId, $reviewerName, $rating, $commentText)) {
    echo "Review submitted successfully!";
} else {
    echo "Review submission failed. Check the error log for details.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review.
 * @param string $username  The username of the user submitting the review.
 * @param array  $reviews (Optional) An array of existing reviews.  Defaults to an empty array.
 *
 * @return array An array containing the updated reviews array with the new review added.
 */
function add_review(string $productName, string $reviewText, string $username, array &$reviews = []): array {
  // Basic input validation - Add more robust validation as needed for production.
  if (empty($productName)) {
    return $reviews; // Return existing reviews if product name is empty.
  }
  if (empty($reviewText)) {
    return $reviews; // Return existing reviews if review text is empty.
  }

  // Create a new review object
  $review = [
    'username' => $username,
    'review'   => $reviewText,
    'date'     => date("Y-m-d H:i:s") // Timestamp for date
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

// --- Example Usage and Demonstration ---

// Initialize an empty array to store reviews. Note the use of &$reviews
// to modify the array directly, avoiding unnecessary copying.
$product = "Awesome Gadget X";
$reviews = [];

// Add some initial reviews
$reviews = add_review($product, "This gadget is fantastic!  Highly recommended.", "JohnDoe");
$reviews = add_review($product, "Great value for the money.", "JaneSmith");
$reviews = add_review($product, "Could be better, but it works.", "PeterJones");

// Display the reviews
echo "<h2>Reviews for " . $product . "</h2>";
if (empty($reviews)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li><strong>" . $review['username'] . ":</strong> " . $review['review'] . " - " . $review['date'] . "</li>";
  }
  echo "</ul>";
}

// Example of adding a new review
$reviews = add_review($product, "Amazing features and excellent customer support!", "AliceBrown");


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and data sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * 
 * @return array  An array containing review data if successful, or an error message if not.
 */
function createReview(string $product_id, string $user_name, string $review_text, string $rating) {
  // Validate inputs
  if (empty($product_id) || empty($user_name) || empty($review_text) || empty($rating)) {
    return ['error' => 'All fields are required.'];
  }

  // Sanitize inputs (basic - more robust sanitization needed for production)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
  $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);
  $rating = filter_var($rating, FILTER_SANITIZE_NUMBER_INT, FILTER_VALIDATE_INT); // Ensure rating is an integer

  if ($rating === false) {
    return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
  }

  // Prepare review data (For database storage - adjust to your database structure)
  $review_data = [
    'product_id' => $product_id,
    'user_name' => $user_name,
    'review_text' => $review_text,
    'rating' => $rating,
    'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
  ];

  // In a real application, you would insert $review_data into a database.
  // For this example, we just return the data.

  // Example of how you might save to the database:
  // $db = new DatabaseConnection();
  // $result = $db->insert('reviews', $review_data);

  return $review_data;
}


/**
 * Display User Reviews
 *
 *  Fetches and displays user reviews based on product_id
 *
 * @param string $product_id The product ID to fetch reviews for.
 *
 * @return array  An array of review data, or an error message if no reviews found.
 */
function displayReviews(string $product_id) {
    // In a real application, you would query your database here.
    // This is a placeholder for demonstration.

    // Mock database retrieval
    if ($product_id == "123") {
        $reviews = [
            ['product_id' => '123', 'user_name' => 'John Doe', 'review_text' => 'Great product! Highly recommended.', 'rating' => 5, 'created_at' => '2023-10-27 10:00:00'],
            ['product_id' => '123', 'user_name' => 'Jane Smith', 'review_text' => 'Good value for money.', 'rating' => 4, 'created_at' => '2023-10-26 14:30:00']
        ];
        return $reviews;
    } else {
      return ['error' => 'No reviews found for this product.'];
    }
}


// Example usage:
// Creating a review
$reviewData = createReview('123', 'Alice Brown', 'This is a fantastic product!', '5');

if (isset($reviewData['error'])) {
    echo "Error: " . $reviewData['error'] . "<br>";
} else {
    echo "Review created successfully!<br>";
    print_r($reviewData); // Display the review data
}


// Displaying reviews
$reviews = displayReviews('123');

if (isset($reviews['error'])) {
    echo "Error: " . $reviews['error'] . "<br>";
} else {
    echo "<h2>Reviews for Product 123:</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>User:</strong> " . $review['user_name'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['review_text'] . "<br>";
        echo "<strong>Date:</strong> " . $review['created_at'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product or item.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param array $reviews  (Optional) An array of existing reviews.  If not provided, an empty array is created.
 * @return array An array containing the updated array of reviews, with the new review added.
 */
function addReview(string $productId, string $userName, string $reviewText, array $reviews = []): array
{
  // Input validation - basic checks, can be expanded
  if (empty($productId)) {
    throw new InvalidArgumentException("Product ID cannot be empty.");
  }
  if (empty($userName)) {
    throw new InvalidArgumentException("User name cannot be empty.");
  }
  if (empty($reviewText)) {
    throw new InvalidArgumentException("Review text cannot be empty.");
  }

  // Create a new review object.  You might want to use a more sophisticated object.
  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'timestamp' => time() // Add a timestamp for organization
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display reviews for a given product.
 *
 * @param string $productId The product ID.
 * @param array $reviews An array of review objects.
 */
function displayReviews(string $productId, array $reviews)
{
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['userName'] . ":</strong> " . htmlspecialchars($review['reviewText']) . "<br>";
    echo "Timestamp: " . date('Y-m-d H:i:s', $review['timestamp']);
    echo "</li>";
  }
  echo "</ul>";
}



// --- Example Usage ---

// Initial Reviews (Start with an empty array)
$productReviews = [];

// Add some reviews
try {
    $productReviews = addReview("PROD123", "Alice", "Great product, highly recommended!");
    $productReviews = addReview("PROD123", "Bob", "Works as expected.", $productReviews);
    $productReviews = addReview("PROD456", "Charlie", "Could be better, but decent.", $productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}


// Display the reviews
displayReviews("PROD123", $productReviews);
displayReviews("PROD456", $productReviews);
?>


<?php

/**
 * Reviews class for managing user reviews.
 */
class Reviews {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The user who wrote the review.
     * @param string $comment The content of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user, string $comment) {
        $id = uniqid(); // Generate a unique ID for the review
        $this->reviews[$id] = [
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.  Returns an empty array if none exist.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its unique ID.
     *
     * @param string $id The unique ID of the review.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(string $id) {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        }
        return null;
    }

    /**
     * Deletes a review by its unique ID.
     *
     * @param string $id The unique ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(string $id) {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
            return true;
        }
        return false;
    }

    /**
     * Updates an existing review.
     *
     * @param string $id The unique ID of the review to update.
     * @param string $newComment The new content of the review.
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(string $id, string $newComment) {
        if (isset($this->reviews[$id])) {
            $this->reviews[$id]['comment'] = $newComment;
            return true;
        }
        return false;
    }
}


/**
 * Example Usage:
 */

// Instantiate the Reviews class
$reviews = new Reviews();

// Add some reviews
$reviews->addReview('John Doe', 'Great product! I highly recommend it.');
$reviews->addReview('Jane Smith', 'Could be better, but overall good.');
$reviews->addReview('Peter Jones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviews->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviews->getReviewById('unique_id_1');
echo "
Specific Review (Unique ID: unique_id_1):
";
print_r($specificReview);

// Update a review
$reviews->updateReview('unique_id_1', 'Fantastic product, even better than expected!');

// Get the updated review
$updatedReview = $reviews->getReviewById('unique_id_1');
echo "
Updated Review:
";
print_r($updatedReview);

// Delete a review
$reviews->deleteReview('unique_id_2');

// Get all reviews again to see the deleted review is gone
$allReviews = $reviews->getAllReviews();
echo "
All Reviews after deletion:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or item.
 * It includes validation, sanitization, and basic display formatting.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param array $reviews An array of review objects, each with:
 *                       - $name:  The user's name.
 *                       - $rating:  A number from 1 to 5.
 *                       - $comment: The user's review text.
 * @return string A formatted string containing the reviews.
 */
function displayUserReviews(string $productId, array $reviews): string
{
  // Validate input - basic check for review array
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $output = "<div class='user-reviews'>";
  $output .= "<h3>Reviews for Product ID: " . htmlspecialchars($productId) . "</h3>";

  foreach ($reviews as $review) {
    // Validate review data - more robust validation is recommended in production
    if (
      !is_string($review['name']) ||
      !is_int($review['rating']) ||
      !is_string($review['comment']) ||
      $review['rating'] < 1 || $review['rating'] > 5
    ) {
      continue; // Skip invalid reviews.  Log errors for debugging.
    }

    $output .= "<div class='review'>";
    $output .= "<p><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
    $output .= "<p>Rating: " . htmlspecialchars($review['rating']) . "</p>";
    $output .= "</div>";
  }

  $output .= "</div>";
  return $output;
}


// Example Usage:
// Simulate some reviews
$reviews = [
  [
    'name' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Easy to use and works perfectly.',
  ],
  [
    'name' => 'Jane Smith',
    'rating' => 5,
    'comment' => 'Excellent value for the price.  Highly recommended!',
  ],
  [
    'name' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It was okay, but could be better. The instructions were unclear.',
  ],
];

// Display the reviews
$reviewOutput = displayUserReviews('PROD-123', $reviews);
echo $reviewOutput;

?>


<?php

/**
 * Class UserReview
 *
 * This class provides functionality for creating, retrieving, updating, and deleting user reviews.
 */
class UserReview
{
    private $db; // Database connection (implementation depends on your database)

    /**
     * Constructor
     *
     * Initializes the UserReview class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The name or identifier of the user.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function createReview(int $productId, string $user, string $rating, string $comment)
    {
        // Validate inputs (add more robust validation here)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return null;
        }

        $sql = "INSERT INTO reviews (product_id, user, rating, comment)
                VALUES (:product_id, :user, :rating, :comment)";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        try {
            $stmt->execute();
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            // Handle database errors appropriately (logging, error messages)
            error_log("Error creating review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Get a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);
        return $review;
    }

    /**
     * Update an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $user  The new user name or identifier.
     * @param string $rating The new rating.
     * @param string $comment The new review comment.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $user, string $rating, string $comment)
    {
        // Validate inputs (add more robust validation here)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $sql = "UPDATE reviews
                SET user = :user,
                    rating = :rating,
                    comment = :comment
                WHERE id = :id";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of associative arrays, each representing a review.
     */
    public function getReviewsByProduct(int $productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}


// Example Usage (Illustrative - replace with your database connection)
// Assuming you have a PDO database connection object named $db

// Create a database connection (replace with your actual connection details)
$db = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");


// Create a UserReview object
$reviewManager = new UserReview($db);

// Create a new review
$newReviewId = $reviewManager->createReview(1, "John Doe", 5, "Great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get the review by ID
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Get all reviews for product ID 1
$reviews = $reviewManager->getReviewsByProduct(1);
echo "
Reviews for product 1:
";
print_r($reviews);

//Update review - example
$updateResult = $reviewManager->updateReview($newReviewId, "Jane Smith", 4, "Improved!");
if ($updateResult) {
    echo "
Review updated successfully.
";
} else {
    echo "
Failed to update review.
";
}

//Delete review - example
$deleteResult = $reviewManager->deleteReview($newReviewId);
if ($deleteResult) {
    echo "
Review deleted successfully.
";
} else {
    echo "
Failed to delete review.
";
}
?>


<?php

/**
 * Function to create, retrieve, update, and delete user reviews.
 *
 * This function demonstrates a basic user review system. 
 * You'll likely want to adapt this for a real-world application 
 * with database integration, security measures, and more robust validation.
 */

class ReviewSystem {

    private $reviews = [];  // Store reviews (for simplicity, in memory)

    /**
     * Adds a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function addReview(int $productId, string $username, string $rating, string $comment) {
        // Input Validation (VERY IMPORTANT!)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return null; // Invalid rating
        }

        if (empty($username) || empty($comment)) {
            return null; // Missing username or comment
        }

        $reviewId = count($this->reviews) + 1; // Simple ID generation
        $review = [
            'id' => $reviewId,
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for record keeping
        ];

        $this->reviews[] = $review;
        return $reviewId;
    }

    /**
     * Retrieves a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review data, or null if not found.
     */
    public function getReview(int $reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new product ID (if updating).
     * @param string $username The new username.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     * @return bool True if updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $productId = null, string $username = null, string $rating = null, string $comment = null) {
        $review = $this->getReview($reviewId);

        if (!$review) {
            return false; // Review not found
        }

        // Perform validation here (similar to addReview)

        if ($productId !== null) {
            $review['productId'] = $productId;
        }
        if ($username !== null) {
            $review['username'] = $username;
        }
        if ($rating !== null) {
            if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }
            $review['rating'] = $rating;
        }
        if ($comment !== null) {
            $review['comment'] = $comment;
        }

        return true;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects.
     */
    public function getReviewsForProduct(int $productId) {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add a review
$reviewId = $reviewSystem->addReview(123, 'JohnDoe', 4, 'Great product, highly recommended!');

if ($reviewId) {
    echo "Review added with ID: " . $reviewId . "
";
} else {
    echo "Failed to add review.
";
}

// Get the review by ID
$review = $reviewSystem->getReview($reviewId);
if ($review) {
    echo "Review details: " . print_r($review, true) . "
";
} else {
    echo "Review not found.
";
}

// Update the review
$updateResult = $reviewSystem->updateReview($reviewId, 5, 'JaneSmith', 5, 'Excellent!');
if ($updateResult) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete the review
$deleteResult = $reviewSystem->deleteReview($reviewId);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a given item.
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $review_text The text of the user's review.
 * @param int $user_id (Optional) The ID of the user submitting the review.  Defaults to 0.
 * @param int $rating (Optional) The rating given to the item (1-5). Defaults to 0.
 *
 * @return array  An array containing review data:
 *               - 'review_id' (int): Unique ID of the review.
 *               - 'user_id' (int):  ID of the user.
 *               - 'item_name' (string): Name of the item.
 *               - 'review_text' (string): Review text.
 *               - 'rating' (int): Rating.
 *               - 'timestamp' (string):  Timestamp of the review.
 */
function create_user_review(string $item_name, string $review_text, int $user_id = 0, int $rating = 0)
{
    //  Basic validation - you'd likely want more robust validation in a real application.
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Generate a unique ID (replace with a database-generated ID in a real app)
    $review_id = time(); 

    // Get the current timestamp
    $timestamp = date("Y-m-d H:i:s");

    // Return the review data
    return [
        'review_id' => $review_id,
        'user_id' => $user_id,
        'item_name' => $item_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp
    ];
}


// --- Example Usage ---

// Create a review
$review = create_user_review("Awesome Product", "This product is amazing!  I highly recommend it.");

if (isset($review['error'])) {
    echo "Error creating review: " . $review['error'] . "<br>";
} else {
    echo "Review ID: " . $review['review_id'] . "<br>";
    echo "User ID: " . $review['user_id'] . "<br>";
    echo "Item Name: " . $review['item_name'] . "<br>";
    echo "Review Text: " . $review['review_text'] . "<br>";
    echo "Rating: " . $review['rating'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br>";
}


// Example with user ID and rating
$review2 = create_user_review("Another Product", "Not bad.", 123, 4);

if (isset($review2['error'])) {
    echo "Error creating review: " . $review2['error'] . "<br>";
} else {
    echo "Review ID: " . $review2['review_id'] . "<br>";
    echo "User ID: " . $review2['user_id'] . "<br>";
    echo "Item Name: " . $review2['item_name'] . "<br>";
    echo "Review Text: " . $review2['review_text'] . "<br>";
    echo "Rating: " . $review2['rating'] . "<br>";
    echo "Timestamp: " . $review2['timestamp'] . "<br>";
}


//Example with invalid input
$review_error = create_user_review("", "Review", 1, 6);
if(isset($review_error['error'])){
    echo "Error creating review: " . $review_error['error'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $name The name of the reviewer.
 * @param string $comment The review comment.
 * @param int    $rating   The rating given by the user (1-5).
 *
 * @return array An array containing the review data, or an error message if invalid input is provided.
 */
function create_review(string $product_id, string $name, string $comment, int $rating) {
    // Input validation
    if (empty($product_id)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($name)) {
        return ['error' => 'Reviewer name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['error' => 'Review comment cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize input (important for security) - this is a basic example, adapt for your needs
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $name       = filter_var($name, FILTER_SANITIZE_STRING);
    $comment    = filter_var($comment, FILTER_SANITIZE_STRING);


    // Store the review data (replace with database storage in a real application)
    $review = [
        'product_id' => $product_id,
        'name'       => $name,
        'comment'    => $comment,
        'rating'     => $rating,
        'date'       => date('Y-m-d H:i:s'), // Add a timestamp
    ];


    return $review;
}


/**
 * Display Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product ID.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 *
 * @return void  Displays the reviews to the browser.
 */
function display_reviews(string $product_id) {
  // Placeholder for retrieving reviews from a database.
  // In a real application, you would query your database here.

  // Example:  Simulate fetching reviews from a database
  $reviews = [
      ['product_id' => '123', 'name' => 'John Doe', 'comment' => 'Great product!', 'rating' => 5, 'date' => '2023-10-26'],
      ['product_id' => '123', 'name' => 'Jane Smith', 'comment' => 'Could be better', 'rating' => 3, 'date' => '2023-10-25'],
      ['product_id' => '456', 'name' => 'Peter Jones', 'comment' => 'Excellent value', 'rating' => 4, 'date' => '2023-10-24']
  ];

  echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";

  if (empty($reviews)) {
      echo "<p>No reviews yet.</p>";
      return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['name'] . "</strong> - " . $review['comment'] . " (" . $review['rating'] . "/5) - " . $review['date'];
      echo "</li>";
  }
  echo "</ul>";
}

// Example Usage (Demonstration)

// Create a review
$new_review = create_review('123', 'Alice Brown', 'This is a fantastic product!', 5);

if (isset($new_review['error'])) {
    echo "<p style='color: red;'>Error creating review: " . $new_review['error'] . "</p>";
} else {
    echo "<p>Review created successfully: " . print_r($new_review, true) . "</p>";
}


// Display reviews for product ID '123'
display_reviews('123');
?>


<?php

/**
 * Function to create a user review.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The reviewer's comments.
 * @param string $product_id The ID of the product being reviewed.
 *
 * @return bool True on success, false on failure.
 */
function createReview(string $username, string $rating, string $comment, string $product_id) {

    // Input validation (Important for security and data integrity)
    if (empty($username) || empty($rating) || empty($comment) || empty($product_id)) {
        error_log("Error: Missing required fields for review creation."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Invalid rating. Rating must be a number between 1 and 5.");
        return false;
    }

    // Database connection (Replace with your actual database connection)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace placeholders

    try {
        // Prepare the SQL query (Important for security - prevents SQL injection)
        $stmt = $db->prepare("INSERT INTO reviews (user_name, product_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind the parameters (Safely insert the data into the query)
        $stmt->bindParam(1, $username);
        $stmt->bindParam(2, $product_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the query
        $stmt->execute();

        return true; // Success!

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}

// Example Usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  Works as expected.";
$product_id = "123";

if (createReview($username, $rating, $comment, $product_id)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}


// Example to demonstrate error handling:
$username = ""; // Empty username
$rating = 3;
$comment = "Test review";
$product_id = "456";

if (createReview($username, $rating, $comment, $product_id)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review (due to error).";
}

?>


<?php

/**
 * User Review Function
 *
 * This function creates a simple user review system.  It allows users to
 * submit reviews, displays them, and provides basic functionality for
 * displaying average rating.
 */

class ReviewSystem
{
    private $reviews = []; // Store reviews - key is ID, value is review data

    /**
     * Adds a new review.
     *
     * @param int    $userId   The ID of the user submitting the review.
     * @param string $comment  The review comment.
     * @param int    $rating   The rating (1-5).
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview(int $userId, string $comment, int $rating)
    {
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $reviewId = count($this->reviews) + 1;
        $this->reviews[$reviewId] = [
            'user_id' => $userId,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Store timestamp for sorting/filtering
        ];

        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review data.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $reviewId The ID of the review.
     * @return array|null Review data if found, null otherwise.
     */
    public function getReviewById(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Calculates the average rating.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating()
    {
        $totalRating = 0;
        $reviewCount = count($this->reviews);

        if ($reviewCount > 0) {
            foreach ($this->reviews as $review) {
                $totalRating += $review['rating'];
            }
            return round($totalRating / $reviewCount, 2); // Round to 2 decimal places
        }
        return null;
    }

    /**
     * Displays all reviews.
     */
    public function displayReviews()
    {
        echo "<h2>All Reviews</h2>";
        if (count($this->reviews) == 0) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->reviews as $review) {
            echo "<li>";
            echo "<strong>User ID:</strong> " . $review['user_id'] . "<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";  // Use htmlspecialchars for security
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Date:</strong> " . $review['date'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewId1 = $reviewSystem->addReview(123, "Great product!", 5);
$reviewId2 = $reviewSystem->addReview(456, "Could be better", 3);
$reviewId3 = $reviewSystem->addReview(789, "Amazing!", 5);


// Display all reviews
echo "<h2>Reviews Displayed:</h2>";
$reviewSystem->displayReviews();

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<br><h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "<p>Average Rating: " . $averageRating . "</p>";
} else {
    echo "<p>No reviews to calculate average rating.</p>";
}


// Get a specific review
$review = $reviewSystem->getReviewById(2);
if ($review) {
    echo "<br><h2>Specific Review (ID 2):</h2>";
    echo "<p>User ID: " . $review['user_id'] . "</p>";
    echo "<p>Comment: " . htmlspecialchars($review['comment']) . "</p>";
    echo "<p>Rating: " . $review['rating'] . "</p>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic data sanitization and validation to prevent common issues.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $rating      The rating given by the user (1-5).
 * @param string $comment     The review comment.
 * @param int    $userId      The ID of the user submitting the review.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message':  A message describing the result of the operation.
 *   - 'review': The newly created or updated review object (if successful).
 */
function create_review(string $productId, string $rating, string $comment, int $userId): array
{
    // Sanitize and Validate Inputs
    $productId = filter_var($productId, FILTER_SANITIZE_STRING, FILTER_STRIP); // Prevent XSS
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING, FILTER_STRIP);

    if(empty($productId) || empty($rating) || empty($comment) || $rating === null || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid input.  Please check your input values.',
            'review' => null
        ];
    }

    // --- Database Logic - REPLACE WITH YOUR OWN DATABASE CONNECTION ---
    // Example using a mock database
    $reviews = []; // Simulate a database

    // Generate a unique review ID (for demonstration only - use a real unique ID)
    $reviewId = uniqid();

    // Create a review object (you can customize this)
    $review = [
        'reviewId' => $reviewId,
        'productId' => $productId,
        'userId' => $userId,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time()
    ];

    // Add the review to the reviews array
    $reviews[$reviewId] = $review;

    // --- End Database Logic ---


    return [
        'success' => true,
        'message' => 'Review created successfully!',
        'review' => $review
    ];
}


// --- Example Usage ---
// Create a review
$result = create_review('product123', 4, 'Great product!', 123);

if ($result['success']) {
    echo "Review created successfully:<br>";
    echo "Review ID: " . $result['review']['reviewId'] . "<br>";
    echo "Product ID: " . $result['review']['productId'] . "<br>";
    echo "Rating: " . $result['review']['rating'] . "<br>";
    echo "Comment: " . $result['review']['comment'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

// Example with invalid input
$result = create_review('', 3, 'Bad product!', 123);
if ($result['success']) {
    echo "Review created successfully:<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $reviewerName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5 stars).
 * @param int    $userId    The user's ID (optional, for database integration).
 *
 * @return array An array containing review data if successful, or an error message string if not.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, int $rating, int $userId = null)
{
    // Input Validation - Important for security and data integrity
    if (empty($productId)) {
        return ["error" => "Product ID cannot be empty."];
    }
    if (empty($reviewerName)) {
        return ["error" => "Reviewer Name cannot be empty."];
    }
    if (empty($reviewText)) {
        return ["error" => "Review Text cannot be empty."];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ["error" => "Rating must be a number between 1 and 5."];
    }

    // In a real application, you would save this data to a database
    // For this example, we'll simulate storage using an array.

    $review = [
        "productId" => $productId,
        "reviewerName" => $reviewerName,
        "reviewText" => $reviewText,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s"), // Add timestamp for tracking
        "userId" => $userId
    ];

    // Simulate saving to a database (replace with your database logic)
    //  Example:  $db->insert("reviews", $review);

    return $review;
}

/**
 * Displays a user review
 *
 * @param array $review  The review data (as returned by createReview).
 * @return string HTML markup to display the review.
 */
function displayReview(array $review)
{
    if (empty($review)) {
        return "<p>No reviews available for this product.</p>";
    }

    $html = "<div class='review'>";
    $html .= "<p><strong>Product ID:</strong> " . htmlspecialchars($review['productId']) . "</p>";
    $html .= "<p><strong>Reviewer:</strong> " . htmlspecialchars($review['reviewerName']) . "</p>";
    $html .= "<p><strong>Rating:</strong> " . htmlspecialchars($review['rating']) . " stars</p>";
    $html .= "<p><strong>Review:</strong> " . nl2br(htmlspecialchars($review['reviewText'])) . "</p>"; // nl2br for line breaks
    $html .= "<p><strong>Timestamp:</strong> " . $review['timestamp'] . "</p>";
    $html .= "</div>";
    return $html;
}

// Example Usage:
$newReview = createReview("product_123", "John Doe", "This product is amazing! I highly recommend it.", 5, 123);

if (isset($newReview['error'])) {
    echo "<p style='color:red;'>Error: " . $newReview['error'] . "</p>";
} else {
    echo "New Review Created Successfully!<br>";
    echo "<pre>";
    print_r($newReview);
    echo "</pre>";
    echo "<br>";

    // Display the review
    echo displayReview($newReview);
}

?>


<?php

/**
 * Class UserReview
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $userId    The ID of the user submitting the review.
     * @param string $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment  The user's comment about the product/service.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $userId, string $rating, string $comment)
    {
        // Validation -  Add more validation as needed (e.g., numeric rating check, comment length limits)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'userId' => $userId,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp of when the review was added
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by user ID.
     *
     * @param string $userId The user ID to filter by.
     *
     * @return array An array of reviews for the specified user.
     */
    public function getReviewsByUserId(string $userId)
    {
        $userReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['userId'] === $userId) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }

    /**
     * Calculates the average rating for a product/service.
     *
     * @return float|null The average rating, or null if no reviews are available.
     */
    public function calculateAverageRating()
    {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += floatval($review['rating']);
        }
        return round($totalRating / count($this->reviews), 2); // Round to 2 decimal places
    }

    /**
     * Clears all reviews.
     */
    public function clearReviews()
    {
        $this->reviews = [];
    }
}

// --- Example Usage ---
// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('user123', 4, 'Great product!  Easy to use.');
$reviewSystem->addReview('user456', 5, 'Excellent service and fast delivery.');
$reviewSystem->addReview('user123', 3, 'It was okay, nothing special.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get reviews for user123
$userReviews = $reviewSystem->getReviewsByUserId('user123');
echo "
Reviews for user123:
";
print_r($userReviews);

// Calculate the average rating
$averageRating = $reviewSystem->calculateAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews available') . "
";

// Clear the reviews
$reviewSystem->clearReviews();
echo "
Reviews cleared.
";

// Check if reviews are empty
$allReviews = $reviewSystem->getAllReviews();
echo "Reviews after clearing: " . count($allReviews) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It provides basic functionality for adding, retrieving, and displaying reviews.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating   The rating given by the user (1-5).
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully added.
 *   - 'message': A message indicating the status of the review addition.
 *   - 'reviews': An array of all reviews for the product.
 */
function store_user_review(string $productId, string $username, string $reviewText, int $rating): array
{
    // Sanitize input (important for security!)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $rating = intval($rating); // Ensure rating is an integer

    // Validation (essential for data integrity)
    if (empty($productId) || empty($username) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid review data.  Please ensure all fields are filled and ratings are between 1 and 5.', 'reviews' => []];
    }

    // Example: Store reviews in an array (replace with a database storage)
    $reviews = [];
    if (isset($_SESSION['reviews'][$productId])) {
        $reviews = $_SESSION['reviews'][$productId];
    }

    $newReview = [
        'username' => $username,
        'review' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add timestamp for ordering/filtering
    ];

    $reviews[] = $newReview;
    $_SESSION['reviews'][$productId] = $reviews; // Store in session (for simplicity)

    return ['success' => true, 'message' => 'Review submitted successfully!', 'reviews' => $reviews];
}


// --- Example Usage (for demonstration) ---

// Initialize session (important for storing reviews)
session_start();

// Simulate a product ID
$productId = 'product-123';

// Example 1: Successful submission
$reviewData = store_user_review($productId, 'John Doe', 'This product is amazing!', 5);
print_r($reviewData);

// Example 2: Invalid input (rating outside range)
$invalidReviewData = store_user_review($productId, 'Jane Smith', 'Good product', 7);
print_r($invalidReviewData);

// ---  Displaying Reviews (Example) ---
if (isset($_SESSION['reviews'][$productId])) {
    echo "<h2>Reviews for Product " . $productId . "</h2>";
    echo "<ul>";
    foreach ($_SESSION['reviews'][$productId] as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . htmlspecialchars($review['review']) . " (" . $review['rating'] . "/5) - " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, user data, and a review text,
 * and saves the review to a database.  It also includes basic validation
 * and error handling.
 *
 * @param int $productId The ID of the product the review is for.
 * @param array $userData  An associative array containing user data:
 *                      - 'username' => string - The user's username.
 *                      - 'rating' => int - The rating given (e.g., 1-5).
 *                      - 'review' => string - The text of the review.
 * @param PDO $pdo        A PDO database connection object.
 *
 * @return bool True on success, false on failure.
 */
function saveUserReview(int $productId, array $userData, PDO $pdo)
{
    // Validate input data
    $username = isset($userData['username']) ? trim($userData['username']) : '';
    $rating = isset($userData['rating']) ? (int)$userData['rating'] : 0; // Ensure rating is an integer
    $review = isset($userData['review']) ? trim($userData['review']) : '';

    if (empty($username) || empty($review)) {
        error_log("Invalid review data: Username and review text are required."); // Log the error
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, username, rating, review)
            VALUES (:product_id, :username, :rating, :review)";

    try {
        // Prepare the statement
        $stmt = $pdo->prepare($sql);

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        // Execute the query
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}


// Example Usage (Assuming you have a database connection established)

// **Important: Replace with your actual database connection details**
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Sample User Data
$userData = [
    'username' => 'john.doe',
    'rating' => 4,
    'review' => 'Great product!  I really liked it.',
];

// Save the review
if (saveUserReview(123, $userData, $pdo)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.  Check the error logs.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a product ID, and a review text,
 * and saves the review to a database.  It also handles basic input validation.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Input Validation -  Crucial to prevent SQL injection and bad data
    if (!$userId || !$productId || !$reviewText) {
        error_log("Error: Missing required parameters for review."); // Log error
        return false;
    }

    // Sanitize the review text -  Important!
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

    //  You'll need a database connection here.  This is just a placeholder.
    //  Replace this with your actual database connection code.
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement to prevent SQL injection
        $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:userId, :productId, :reviewText, :rating)");

        // Bind the parameters - ensures data is properly escaped
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', 0); // default rating - you might want to allow users to set this

        // Execute the statement
        $result = $stmt->execute();

        // Check if the query was successful
        if ($result) {
            return true;
        } else {
            // Log the error
            error_log("Error saving review: " . print_r($stmt->errorInfo(), true));
            return false;
        }
    } catch (PDOException $e) {
        // Log the exception -  Very important for debugging
        error_log("PDO Exception: " . $e->getMessage());
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual data)
// $userId = 123;
// $productId = 456;
// $reviewText = "This product is amazing!  I really love it!";
//
// if (saveUserReview($userId, $productId, $reviewText)) {
//     echo "Review saved successfully!";
// } else {
//     echo "Error saving review.";
// }



//  Important Considerations and Best Practices:

// 1. Database Connection: This example uses a placeholder database connection.  You *must* replace the example connection with your actual database connection code using PDO or MySQLi.

// 2. Error Handling:  The `try...catch` block handles potential database errors, preventing your script from crashing and providing valuable debugging information. Always log errors.

// 3. Input Validation:  The  `if (!$userId || ...)` block is crucial. Validate that all required parameters are provided and of the correct type.  This prevents unexpected behavior and potential security vulnerabilities.  You can extend this validation to check for things like review length limits, disallowed characters, etc.

// 4. SQL Injection Prevention: The code *must* use prepared statements with parameterized queries (using `$db->prepare()` and `$stmt->bindParam()`).  This is the *only* secure way to handle user input in SQL queries. Never directly concatenate user input into your SQL strings.

// 5. Sanitization: `htmlspecialchars()`  sanitizes the review text to prevent cross-site scripting (XSS) attacks.  It converts special characters (like <, >, &, etc.) into their HTML entities, preventing them from being interpreted as HTML tags.

// 6.  Database Schema: The code assumes a database schema with tables like `reviews` with columns `user_id`, `product_id`, `review_text`, and `rating`.  Adjust this to match your actual database structure.

// 7.  Rating:  The code includes a `rating` column. You can extend this function to allow users to set a rating (e.g., a star rating).

// 8.  Logging:  Using `error_log()` is vital for debugging. It's better than `echo`ing errors because it doesn't expose them to users.

// 9.  Security: Keep your database credentials secure. Don't hardcode them into your scripts; use environment variables or a configuration file.

// 10.  Database Transactions (For Complex Operations):  If you're performing multiple database operations (e.g., updating several tables), consider using database transactions to ensure that either all operations succeed or none of them do, maintaining data integrity.


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple database (for demonstration) and includes basic input validation.
 * 
 * **Important:** This is a basic example and should be adapted to your specific database,
 * schema, and security requirements.  Consider using an ORM (Object-Relational Mapper) 
 * for more complex applications.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The comment left by the reviewer.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return array  An array containing:
 *                - 'success': True if the operation was successful, False otherwise.
 *                - 'message':  A message describing the result.
 *                - 'reviewId': The ID of the newly created review (if successful).
 *                              Returns NULL if the review was not created.
 */
function createReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Input Validation - Basic Example
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
            'reviewId' => null,
        ];
    }

    // Database connection (Use a real database connection class for production)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return [
            'success' => false,
            'message' => "Failed to connect to database: " . $conn->connect_error,
            'reviewId' => null,
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return [
            'success' => false,
            'message' => "Failed to prepare SQL statement: " . $conn->error,
            'reviewId' => null,
        ];
    }

    // Bind parameters
    $stmt->bind_param("ssis", $productId, $username, $rating, $comment);

    // Execute the statement
    if ($stmt->execute() === false) {
        return [
            'success' => false,
            'message' => "Failed to execute SQL: " . $stmt->error,
            'reviewId' => null,
        ];
    }

    // Get the last inserted ID
    $reviewId = $conn->insert_id;

    // Close the statement and connection
    $stmt->close();
    $conn->close();

    return [
        'success' => true,
        'message' => 'Review created successfully.',
        'reviewId' => $reviewId,
    ];
}

// Example Usage (Replace with your database details)
// $product_id = '123';
// $username = 'john.doe';
// $rating = 4;
// $comment = 'Great product!';

// $result = createReview($product_id, $username, $rating, $comment, 'localhost', 'your_db_name', 'your_db_user', 'your_db_password');

// print_r($result); // Display the result
?>


<?php

/**
 * Function to create and store user reviews.
 *
 * This function handles:
 * - Validating input data.
 * - Generating a unique review ID.
 * - Storing the review in a database (using a basic example, you'd adapt this to your database setup).
 * - Returning the review ID.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user leaving the review.
 * @string $rating The rating (e.g., 1-5).
 * @string $comment The user's review comment.
 * @return int|false The ID of the newly created review on success, or false on failure.
 */
function createReview(string $product_id, string $user_id, string $rating, string $comment)
{
    // **Input Validation - Important!**
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Error: Missing review data.  product_id, user_id, rating, and comment are required."); // Log the error for debugging.
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Invalid rating.  Rating must be a number between 1 and 5.");
        return false;
    }

    // **Database Interaction (Example - Adapt to your DB setup)**
    try {
        // Assuming you have a database connection established as $db
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your database credentials
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling for errors

        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind the parameters
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the statement
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db->lastInsertId();

        return (int)$review_id; // Cast to integer for consistency

    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage()); // Log the full error message
        return false;
    }
}


/**
 * Example Usage:
 */

// Sample Review Data
$product_id = 'product123';
$user_id = 'user456';
$rating = 4;
$comment = 'Great product!  Highly recommend.';

// Create the review
$review_id = createReview($product_id, $user_id, $rating, $comment);

if ($review_id) {
    echo "Review created successfully! Review ID: " . $review_id . "
";
} else {
    echo "Error creating review.
";
}

// Example of invalid input
$invalid_review_id = createReview("", "user1", 3, "Test comment");
if($invalid_review_id){
    echo "Invalid review created successfully! Review ID: " . $invalid_review_id . "
";
}else{
    echo "Error creating review.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It handles input validation, sanitization, and basic storage.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The user's review text.
 * @param string $dbConnection PDO connection object to the database.
 *
 * @return array An array containing the result of the review submission:
 *              - 'success':  True if the review was successfully saved, false otherwise.
 *              - 'message':  A message indicating the status of the review.
 *              - 'reviewId': The ID of the newly created review if successful, or null otherwise.
 */
function submitReview(string $productId, string $userName, string $reviewText, PDO $dbConnection) {

  // Input Validation and Sanitization - IMPORTANT!  Prevent SQL Injection!
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);  // Sanitize product ID
  $userName = filter_var($userName, FILTER_SANITIZE_STRING); // Sanitize user name
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING); // Sanitize review text

  //  Check if the product exists (basic check - improve for real-world use)
  $stmt = $dbConnection->prepare("SELECT id FROM products WHERE id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  $product = $stmt->fetch(PDO::FETCH_OBJ);

  if (!$product) {
    return [
      'success' => false,
      'message' => "Product with ID '$productId' not found.",
      'reviewId' => null
    ];
  }

  // Sanitize review text to prevent XSS.  Consider using HTML escaping.
  $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');


  // Prepare and execute the insert statement
  $stmt = $dbConnection->prepare("INSERT INTO reviews (product_id, user_name, review_text) VALUES (:product_id, :user_name, :review_text)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_name', $userName);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->execute();

  $reviewId = $dbConnection->lastInsertId();

  return [
    'success' => true,
    'message' => "Review submitted successfully!",
    'reviewId' => $reviewId
  ];
}

// Example Usage (assuming you have a database connection object $dbConnection)
//
// $result = submitReview('123', 'John Doe', 'This is a great product!', $dbConnection);
//
// if ($result['success']) {
//   echo "Review submitted successfully! Review ID: " . $result['reviewId'];
// } else {
//   echo "Error submitting review: " . $result['message'];
// }


/**
 * Function to display reviews for a product.
 *
 * @param string $productId The unique identifier for the product.
 * @param PDO $dbConnection PDO connection object to the database.
 */
function displayReviews(string $productId, PDO $dbConnection) {
  $query = "SELECT id, user_name, review_text, created_at FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $dbConnection->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<p><strong>User:</strong> " . htmlspecialchars($review['user_name']) . "</p>";
      echo "<p>" . htmlspecialchars($review['review_text']) . "</p>";
      echo "<p>Date: " . date("Y-m-d H:i:s", strtotime($review['created_at'])) . "</p>";
      echo "</li>";
    }
    echo "</ul>";
  }
}



?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db; // Database connection (using PDO for example)

    /**
     * Constructor: Initializes the UserReview class.
     *
     * @param PDO $db PDO database connection.  Defaults to a dummy connection.
     */
    public function __construct(PDO $db = null)
    {
        $this->db = $db ?? new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials.  Use a dummy PDO for testing.
        $this->reviews = [];
    }


    /**
     * Add a new review.
     *
     * @param string $user_id The ID of the user writing the review.
     * @param string $product_id The ID of the product being reviewed.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user_id, string $product_id, string $rating, string $comment): bool
    {
        $rating = (int)$rating; // Ensure rating is an integer
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            // Handle database errors (log them, etc.)
            error_log("Error adding review: " . $e->getMessage());
            return false;
        }
    }



    /**
     * Retrieve all reviews for a specific product.
     *
     * @param string $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(string $product_id): array
    {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch results as objects for easier access.

            return $reviews;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }



    /**
     * Retrieve a single review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return object|null A review object if found, null otherwise.
     */
    public function getReviewById(int $review_id): ?object
    {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $review_id);
            $stmt->execute();
            $review = $stmt->fetch(PDO::FETCH_OBJ);
            return $review;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error retrieving review: " . $e->getMessage());
            return null;
        }
    }


    /**
     * Update an existing review.  Requires the review_id.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $new_rating The new rating.
     * @param string $new_comment The new review comment.
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $review_id, string $new_rating, string $new_comment): bool
    {
        try {
            $rating = (int)$new_rating;
            if ($rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }

            $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $review_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $new_comment);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Delete a review by its ID.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $review_id): bool
    {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $review_id);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }



    //  Methods to display the reviews (for demonstration purposes)
    public function displayReviewsByProduct(string $product_id)
    {
        $reviews = $this->getReviewsByProduct($product_id);
        if ($reviews) {
            echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
            foreach ($reviews as $review) {
                echo "<p><strong>User:</strong> " . $review->user_id . "<br>";
                echo "<strong>Rating:</strong> " . $review->rating . "<br>";
                echo "<strong>Comment:</strong> " . $review->comment . "</p>";
            }
        } else {
            echo "<p>No reviews found for this product.</p>";
        }
    }
}



// Example Usage:

// Create a dummy database connection (replace with your actual database credentials)
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$reviewSystem = new UserReview($db);


// Add a review
if ($reviewSystem->addReview(123, 456, 4, "Great product!")) {
    echo "<p>Review added successfully.</p>";
} else {
    echo "<p>Failed to add review.</p>";
}


// Retrieve reviews for a product
$reviewSystem->displayReviewsByProduct(456); // Displays reviews for product ID 456


//Update a review
if ($reviewSystem->updateReview(1, 5, "Excellent! I highly recommend this.") ) {
    echo "<p>Review updated successfully.</p>";
} else {
    echo "<p>Failed to update review.</p>";
}


//Delete a review
if($reviewSystem->deleteReview(1)){
    echo "<p>Review deleted successfully</p>";
} else {
    echo "<p>Failed to delete review</p>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * @param int $review_id (optional) - Unique ID for the review.  If not provided, generates one.
   * @param int $user_id  - The ID of the user who wrote the review.
   * @param int $product_id - The ID of the product being reviewed.
   * @param int $rating  -  The rating (e.g., 1-5).
   * @param string $comment - The user's comment about the product.
   */
  public function __construct(
    int $user_id,
    int $product_id,
    int $rating,
    string $comment = ""  // Default comment to empty string
  ) {
    $this->generateReviewId();
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Get current timestamp
  }

  /**
   * Generates a unique review ID.
   */
  private function generateReviewId(): void {
    // You could use database sequence or a unique string generation method.
    // For simplicity, using a timestamp and a counter.
    static $counter = 0;
    $this->review_id = $counter++;
  }

  /**
   * Getters
   */
  public function getReviewId(): int {
    return $this->review_id;
  }

  public function getUser(): int {
    return $this->user_id;
  }

  public function getProduct(): int {
    return $this->product_id;
  }

  public function getRating(): int {
    return $this->rating;
  }

  public function getComment(): string {
    return $this->comment;
  }

  public function getDate(): string {
    return $this->date;
  }
  
  /**
   * Returns the review as an array. Useful for database insertion.
   * @return array
   */
  public function toArray(): array {
    return [
      'review_id' => $this->review_id,
      'user_id' => $this->user_id,
      'product_id' => $this->product_id,
      'rating' => $this->rating,
      'comment' => $this->comment,
      'date' => $this->date
    ];
  }
}


/**
 * User Review Function (Example)
 */
function displayReviewDetails(UserReview $review): void {
  echo "Review ID: " . $review->getReviewId() . "<br>";
  echo "User ID: " . $review->getUser() . "<br>";
  echo "Product ID: " . $review->getProduct() . "<br>";
  echo "Rating: " . $review->getRating() . "<br>";
  echo "Comment: " . $review->getComment() . "<br>";
  echo "Date: " . $review->getDate() . "<br>";
}


// Example Usage:

// Create a new review object
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(789, 101, 3, "Okay, but could be better.");
$review3 = new UserReview(101, 102); //uses default empty comment.


// Display the review details
displayReviewDetails($review1);
displayReviewDetails($review2);
displayReviewDetails($review3);

// Demonstrate the toArray method:
$review_data = $review1->toArray();
print_r($review_data);  // Output will be an array.



//  Considerations for a Real Application:

// 1. Database Integration:  The code above is a basic example. In a real application,
//    you would store the reviews in a database (e.g., MySQL, PostgreSQL).

// 2. Validation: Add input validation to ensure that the rating is within a valid range (e.g., 1-5) and that required fields are not empty.

// 3. Error Handling: Implement error handling to gracefully handle potential errors, such as database connection errors.

// 4. Security:  Sanitize user input to prevent security vulnerabilities (e.g., SQL injection).

// 5.  More Complex Interactions: Consider features like pagination for displaying reviews, sorting reviews, and searching for reviews.
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input and generates a basic user review.
 * It can be customized to add more features like rating, sentiment analysis,
 * or integration with a database.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @return string A formatted user review string.
 */
function generateUserReview(string $username, string $reviewText): string
{
    // Validate inputs (Optional, but recommended)
    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    // Format the review
    $review = "Review by: " . $username . "
";
    $review .= "Review Text: " . $reviewText . "
";
    $review .= "--- End of Review ---";

    return $review;
}


// Example Usage:
$username = "JohnDoe";
$reviewText = "This product is amazing! I highly recommend it.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL;

$username = "JaneSmith";
$reviewText = "The service was slow, but the staff were friendly.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL;


//Example with invalid input
$username = "";
$reviewText = "This is a review.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL; // This will output the error message.

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to capture user reviews, sanitize input,
 * and optionally store them in a database.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId      The ID of the user submitting the review.  Can be NULL for guest reviews.
 * @param string $reviewText  The text of the user's review.
 * @param string $rating      (Optional) The rating given by the user (e.g., 1-5).  Defaults to null.
 * @param string $dbHost       (Optional) Database host.  Required if storing reviews in a database.
 * @param string $dbUser       (Optional) Database user.  Required if storing reviews in a database.
 * @param string $dbPassword  (Optional) Database password.  Required if storing reviews in a database.
 * @param string $dbName       (Optional) Database name.  Required if storing reviews in a database.
 * @param string $table        (Optional) Name of the table to store the reviews in (if using database).
 *
 * @return array An array containing the review data or an error message if invalid input is detected.
 */
function createReview(
    string $productName,
    string $userId,
    string $reviewText,
    string $rating = null,
    string $dbHost = null,
    string $dbUser = null,
    string $dbPassword = null,
    string $dbName = null,
    string $table = null
) {
    // Input Validation - Basic Check
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // Sanitize input (Important for security)
    $reviewText = trim($reviewText);
    $reviewText = htmlspecialchars($reviewText); // Prevent XSS attacks

    // Validation for rating (if provided)
    if ($rating !== null) {
        if (!is_numeric($rating)) {
            return ['error' => 'Rating must be a number.'];
        }
        if ($rating < 1 || $rating > 5) {
            return ['error' => 'Rating must be between 1 and 5.'];
        }
    }

    // Construct the review data
    $reviewData = [
        'product_name' => $productName,
        'user_id'      => $userId,
        'review_text'  => $reviewText,
        'rating'       => $rating,
    ];

    // Store in Database (Optional)
    if ($dbHost !== null && $dbUser !== null && $dbPassword !== null && $dbName !== null && $table !== null) {
        // Implement database connection and insertion logic here.
        // This is just a placeholder.  You'll need to adapt it to your database system.

        try {
            // Example (MySQL) - Replace with your connection details and query
            $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

            if ($conn->connect_error) {
                throw new Exception("Connection failed: " . $conn->connect_error);
            }

            $query = "INSERT INTO `$table` (product_name, user_id, review_text, rating) VALUES ('" . $conn->real_escape_string($productName) . "', '" . $conn->real_escape_string($userId) . "', '" . $conn->real_escape_string($reviewText) . "', '" . $conn->real_escape_string($rating) . "')";
            $conn->query($query);

            $conn->close();

        } catch (Exception $e) {
            return ['error' => 'Database error: ' . $e->getMessage()];
        }
    }

    return $reviewData;
}


// Example Usage:
// Simulate a review submission
$review = createReview(
    'Awesome Widget',
    'user123',
    'This widget is fantastic!  I love it.',
    5,
    'localhost',
    'myuser',
    'secretpassword',
    'my_database',
    'product_reviews'
);

if (isset($review['error'])) {
    echo "<p style='color: red;'>Error: " . $review['error'] . "</p>";
} else {
    echo "<p>Review submitted successfully! Data: " . print_r($review, true) . "</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a default/anonymous user is used.
 * @param string $reviewerName (Optional) The name to display for the reviewer. If not provided, a default name is used.
 *
 * @return array An array containing review details (success/failure, review text, reviewer details).
 */
function submitReview(string $productName, string $reviewText, $userId = null, $reviewerName = null) {
  // Input Validation - crucial for security and data integrity
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  // Handle User ID (if provided) -  This is a simplified example.  In a real application,
  // you would typically authenticate and validate the user.
  if ($userId === null) {
    $userId = 1; // Default user ID.  Change this for a real system.
  }

  // Handle Reviewer Name - Default if not provided
  if ($reviewerName === null) {
    $reviewerName = 'Anonymous User';
  }

  //  Simulate saving the review to a database or file.  In a real application,
  //  replace this with your database interaction logic.
  $reviewId = time(); // Generate a unique ID for the review.
  $reviewData = [
    'reviewId' => $reviewId,
    'productId' => $productName,
    'reviewText' => $reviewText,
    'userId' => $userId,
    'reviewerName' => $reviewerName,
    'dateSubmitted' => date('Y-m-d H:i:s')
  ];

  // Simulate saving the review to a file (for demonstration)
  file_put_contents('reviews.txt', $reviewData . PHP_EOL, FILE_APPEND);


  return ['success' => true, 'review' => $reviewData];
}


/**
 * Display a Review
 *
 * This function retrieves and displays a review based on its ID.
 *
 * @param string $reviewId The ID of the review to display.
 *
 * @return array An array containing review details (success/failure, review details).
 */
function displayReview(string $reviewId) {
  // Simulate retrieving the review from a database or file.
  // Replace this with your database query logic.
  $reviews = [];
  if (file_exists('reviews.txt')) {
      $lines = file('reviews.txt', FILE_IGNORE_NEW_LINES);
      foreach ($lines as $line) {
          $reviews[] = explode(',', $line);
      }
  }

  foreach ($reviews as $review) {
    if ($review[0] == $reviewId) {
      return ['success' => true, 'review' => $review];
    }
  }

  return ['success' => false, 'message' => 'Review not found.'];
}



// Example Usage:
$product = 'Awesome Gadget X';

// Submit a review
$reviewResult = submitReview($product, 'This gadget is amazing!  I highly recommend it.', 123, 'John Doe');

if ($reviewResult['success']) {
  echo "Review submitted successfully!
";
  echo "Review ID: " . $reviewResult['review']['reviewId'] . "
";
  echo "Reviewer: " . $reviewResult['review']['reviewerName'] . "
";
  echo "Review Text: " . $reviewResult['review']['reviewText'] . "
";
} else {
  echo "Error submitting review: " . $reviewResult['message'] . "
";
}

// Display the review
$reviewDisplayResult = displayReview($reviewResult['review']['reviewId']);

if ($reviewDisplayResult['success']) {
  echo "
--- Displaying Review ---
";
  echo "Review ID: " . $reviewDisplayResult['review']['reviewId'] . "
";
  echo "Reviewer: " . $reviewDisplayResult['review']['reviewerName'] . "
";
  echo "Review Text: " . $reviewDisplayResult['review']['reviewText'] . "
";
  echo "Date Submitted: " . $reviewDisplayResult['review']['dateSubmitted'] . "
";
} else {
  echo "Error displaying review: " . $reviewDisplayResult['message'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or item.
 * It validates the input, sanitizes it, and saves it to a database.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $dbHost    The database hostname (e.g., localhost).
 * @param string $dbUser    The database username.
 * @param string $dbPassword The database password.
 * @param string $dbName    The database name.
 *
 * @return bool True if the review was successfully submitted, false otherwise.
 */
function submitReview(
    string $productId,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbUser,
    string $dbPassword,
    string $dbName
) {
    // Input validation and sanitization
    if (empty($productId) || empty($rating) || empty($comment)) {
        error_log("Missing required fields in review submission.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Invalid rating format.  Please enter a number between 1 and 5.");
        return false;
    }

    if (strlen($comment) > 500) {  // Example: Limit comment length
        error_log("Comment exceeds maximum length (500 characters).");
        return false;
    }

    // Database connection (using a simple example - consider using PDO for better security)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error);
        return false;
    }

    // Prepare the SQL statement (using prepared statements for security!)
    $sql = "INSERT INTO reviews (product_id, rating, comment) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing SQL statement: " . $conn->error);
        $stmt->close();
        $conn->close();
        return false;
    }

    // Bind parameters to prevent SQL injection
    $stmt->bind_param("siii", $productId, $rating, $comment);

    // Execute the statement
    if ($stmt->execute()) {
        $stmt->close();
        $conn->close();
        return true;
    } else {
        error_log("Error executing SQL statement: " . $stmt->error);
        $stmt->close();
        $conn->close();
        return false;
    }
}

// Example Usage:
// Assuming you have a database set up with a table named 'reviews'
// with columns: product_id (INT), rating (INT), comment (TEXT)

// $success = submitReview("123", "4", "This product is amazing!", "localhost", "user", "password", "mydatabase");

// if ($success) {
//     echo "Review submitted successfully!";
// } else {
//     echo "Error submitting review.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and sanitization.  For production environments,
 * consider adding more robust validation and sanitization.
 *
 * @param string $product_id The unique identifier for the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $db_connection  (Optional) A database connection object.
 *                             If not provided, it will attempt to connect to a 'reviews' database.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $product_id, string $user_name, string $review_text, int $rating, $db_connection = null): bool
{
    // Basic validation - Adjust as needed for your application
    if (empty($product_id)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }

    if (empty($user_name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }

    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // Sanitize input (Important for security - this is a basic example)
    $review_text = htmlspecialchars($review_text); // Prevents XSS attacks
    $user_name = htmlspecialchars($user_name);

    // Database connection - If not provided, attempt to connect
    if (!$db_connection) {
        try {
            $db_connection = new PDO("mysql:host=localhost;dbname=reviews", "root", "");  // Replace credentials
            $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            error_log("Database connection error: " . $e->getMessage());
            return false;
        }
    }


    // Prepare and execute the SQL query
    try {
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)"
        );

        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


/**
 * Display User Reviews for a product
 *
 * Retrieves and displays reviews associated with a given product ID.
 *
 * @param string $product_id The product ID.
 * @param PDO $db_connection  A PDO database connection object.
 * @return array An array of review objects (or an empty array if no reviews are found).
 */
function displayUserReviews(string $product_id, PDO $db_connection): array
{
    try {
        $stmt = $db_connection->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch as objects for easier access

        return $reviews;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return []; // Return an empty array on error
    }
}


// Example Usage (Illustrative - replace with your actual data)
/*
$product_id = "123";
$user_name = "John Doe";
$review_text = "Great product, highly recommended!";
$rating = 4;

if (saveUserReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

$reviews = displayUserReviews($product_id, $db_connection);

if ($reviews) {
    echo "<br><h2>Reviews:</h2>";
    foreach ($reviews as $review) {
        echo "<strong>" . $review->user_name . "</strong>: " . $review->review_text . " (Rating: " . $review->rating . ")
";
    }
} else {
    echo "<br>No reviews found for this product.";
}
*/

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display user reviews for a given item.
 * 
 * @param string $itemName The name of the item being reviewed.
 * @param string $itemDescription  A brief description of the item (optional).
 * @param array $reviews An array of existing reviews (optional).
 * @return array An array containing the updated reviews, including the new review if submitted.
 */
function handleUserReviews(string $itemName, string $itemDescription = '', array $reviews = []) {
    // Simulate database interaction for demonstration purposes.  Replace this with 
    // actual database queries in a real application.
    $newReview = "";
    if (isset($_POST['review_text'])) {
        $newReview = $_POST['review_text'];
    }


    $reviews = [...reviews, ['text' => $newReview, 'date' => date('Y-m-d H:i:s')]]; // Add new review to the array.  Includes date.

    // Sort reviews by date (most recent first) - optional but recommended
    usort($reviews, function($a, $b) {
        return $b['date'] <=> $a['date'];
    });


    return $reviews;
}



// Example Usage (Demonstration)

// Initialize an empty reviews array
$reviews = [];

// Simulate a form submission
if (isset($_POST['submit_review'])) {
    $reviews = handleUserReviews('My Awesome Product', 'A great product!', $reviews);
}

// Display the reviews
echo "<!DOCTYPE html>";
echo "<html>";
echo "<head>";
echo "<title>User Reviews</title>";
echo "</head>";
echo "<body>";

echo "<h1>User Reviews for " . $itemName = 'My Awesome Product' . "</h1>";

if (count($reviews) > 0) {
    echo "<p><strong>Reviews:</strong></p>";
    echo "<table border='1'>";
    echo "<tr><th>Date</th><th>Review</th></tr>";
    foreach ($reviews as $review) {
        echo "<tr>";
        echo "<td>" . $review['date'] . "</td>";
        echo "<td>" . $review['text'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "<p>No reviews yet!</p>";
}


echo "<form method='post'>";
echo "<h2>Submit a Review</h2>";
echo "<label for='review_text'>Your Review:</label><br>";
echo "<textarea id='review_text' name='review_text' rows='4' cols='50'></textarea><br><br>";
echo "<input type='submit' value='Submit Review'>";
echo "</form>";

echo "</body>";
echo "</html>";

?>


<?php

/**
 * Reviews class for managing user reviews.
 */
class Review {

    private $reviews = [];
    private $db_connection = null; // For database interaction (optional)

    /**
     * Constructor: Initializes the review system.
     *
     * @param mysqli $db_connection  (Optional) Database connection object.
     */
    public function __construct($db_connection = null) {
        $this->db_connection = $db_connection; // Assign the db connection
    }

    /**
     * Adds a new review.
     *
     * @param string $username       The username of the reviewer.
     * @param string $review_text    The text of the review.
     * @param int   $rating         The rating (e.g., 1-5).
     * @return int|false  The ID of the newly created review, or false on failure.
     */
    public function addReview(string $username, string $review_text, int $rating) {
        if (!$this->db_connection) {
            // If no database connection, store review in-memory
            $review_id = count($this->reviews) + 1;
            $this->reviews[$review_id] = [
                'username' => $username,
                'review_text' => $review_text,
                'rating' => $rating,
                'date' => date('Y-m-d H:i:s') // Timestamp for review creation
            ];
            return $review_id;
        } else {
            // Database interaction
            $sql = "INSERT INTO reviews (username, review_text, rating, created_at) VALUES (?, ?, ?, ?)";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("sss", $username, $review_text, $rating);
                if ($stmt->execute()) {
                    $review_id = $this->db_connection->insert_id; // Get the auto-incremented ID
                    $stmt->close();
                    return $review_id;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error adding review: " . $error_message);  // Log the error
                    return false;
                }
            } else {
                error_log("Error preparing database statement for adding review");
                return false;
            }
        }
    }



    /**
     * Retrieves all reviews.
     *
     * @return array  An array of review objects.
     */
    public function getAllReviews() {
        if($this->db_connection) {
            $results = $this->db_connection->query("SELECT * FROM reviews");
        } else {
            $results = $this->reviews;
        }
        $review_objects = [];
        if($results) {
            while ($row = $results->fetch_assoc()) {
                $review_objects[] = $this->convertRowToReviewObject($row);
            }
        }
        return $review_objects;
    }


    /**
     * Converts a database row to a Review object.
     *
     * @param array $row  A database row.
     * @return Review  A Review object.
     */
    private function convertRowToReviewObject(array $row) {
        return new Review([
            'id' => $row['id'],
            'username' => $row['username'],
            'review_text' => $row['review_text'],
            'rating' => $row['rating'],
            'date' => $row['created_at']
        ]);
    }



    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $id The ID of the review.
     * @return Review|false A Review object, or false if not found.
     */
    public function getReviewById(int $id) {
        if($this->db_connection) {
            $result = $this->db_connection->query("SELECT * FROM reviews WHERE id = ?");
            if ($result && $result->fetch_assoc()) {
                return $this->convertRowToReviewObject($result->fetch_assoc());
            } else {
                return false;
            }
        } else {
            // In-memory retrieval
            if (isset($this->reviews[$id])) {
                return $this->reviews[$id];
            } else {
                return false;
            }
        }
    }


    /**
     * Updates an existing review.
     * @param int $id The ID of the review to update.
     * @param string $new_review_text The new text of the review.
     * @param int   $new_rating     The new rating.
     * @return bool True if the update was successful, false otherwise.
     */
    public function updateReview(int $id, string $new_review_text, int $new_rating) {
        if($this->db_connection) {
            $sql = "UPDATE reviews SET review_text = ?, rating = ?, created_at = NOW() WHERE id = ?";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("sss", $new_review_text, $new_rating, $id);
                if ($stmt->execute()) {
                    $stmt->close();
                    return true;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error updating review: " . $error_message);
                    return false;
                }
            } else {
                error_log("Error preparing database statement for updating review");
                return false;
            }
        } else {
            // In-memory update (if no database connection)
            if (isset($this->reviews[$id])) {
                $this->reviews[$id] = [
                    'username' => $this->reviews[$id]['username'], // Keep username
                    'review_text' => $new_review_text,
                    'rating' => $new_rating,
                    'date' => date('Y-m-d H:i:s')
                ];
                return true;
            } else {
                return false;
            }
        }
    }


    /**
     * Deletes a review.
     *
     * @param int $id The ID of the review to delete.
     * @return bool True if the deletion was successful, false otherwise.
     */
    public function deleteReview(int $id) {
        if($this->db_connection) {
            $sql = "DELETE FROM reviews WHERE id = ?";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("i", $id);
                if ($stmt->execute()) {
                    $stmt->close();
                    return true;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error deleting review: " . $error_message);
                    return false;
                }
            } else {
                error_log("Error preparing database statement for deleting review");
                return false;
            }
        } else {
            // In-memory deletion
            if (isset($this->reviews[$id])) {
                unset($this->reviews[$id]);
                return true;
            } else {
                return false;
            }
        }
    }
}


// Example Usage (Illustrative - Requires database setup)
// $db = new mysqli("localhost", "username", "password", "database_name");

// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }

// $review = new Review($db);

// // Add a review
// $review_id = $review->addReview("John Doe", "This is a great product!", 5);
// if ($review_id) {
//     echo "Review added with ID: " . $review_id . "
";
// }

// // Get all reviews
// $all_reviews = $review->getAllReviews();
// echo "All Reviews:
";
// foreach ($all_reviews as $review) {
//     echo "- Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review_text'] . "
";
// }

// // Get a specific review
// $specific_review = $review->getReviewById($review_id);
// if ($specific_review) {
//     echo "
Specific Review (ID " . $review_id . "): " . json_encode($specific_review) . "
";
// }

// //Update a review
// $update_success = $review->updateReview($review_id, "Updated Review Text", 4);
// if ($update_success) {
//     echo "
Review updated successfully
";
// }

// //Delete a review
// $delete_success = $review->deleteReview($review_id);
// if ($delete_success) {
//     echo "
Review deleted successfully
";
// }

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to manage user reviews.
 */
class Review {

    /**
     * @var array Array of reviews.
     */
    private $reviews = [];

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $user  The name of the user who submitted the review.
     * @param string $comment The content of the review.
     * @param int $rating The rating (1-5).
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user, string $comment, int $rating): bool {
        // Validate rating
        if ($rating < 1 || $rating > 5) {
            return false;
        }

        $this->reviews[] = [
            'user' => $user,
            'comment' => $comment,
            'rating' => $rating
        ];

        return true;
    }

    /**
     * Gets all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Gets reviews for a specific item (e.g., product, service).
     *
     * @param mixed $item  The item to get reviews for.  This allows you to extend
     *                    this class to handle different types of items.
     * @return array An array of reviews for the item.
     */
    public function getReviewsForItem(mixed $item): array {
        //This is a basic implementation.  You would likely need to extend
        //this based on how you store the item data.

        return $this->getAllReviews(); //For now, return all reviews - you'll need a more sophisticated system.
    }

    /**
     * Calculates the average rating for a specific item.
     *
     * @param mixed $item The item to calculate the average rating for.
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRatingForItem(mixed $item) {
        $reviews = $this->getReviewsForItem($item);

        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($reviews);
    }


    /**
     * Formats a review for display.
     *
     * @param array $review
     * @return string The formatted review string.
     */
    public function formatReview(array $review): string {
        return "User: " . $review['user'] . "
" .
               "Comment: " . $review['comment'] . "
" .
               "Rating: " . $review['rating'];
    }
}

// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("Alice", "Great product!", 5);
$reviewSystem->addReview("Bob", "It was okay.", 3);
$reviewSystem->addReview("Charlie", "Could be better.", 2);

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo $review['user'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
}

// Get reviews for a specific item (e.g., a product)
$productReviews = $reviewSystem->getReviewsForItem('Product X');
echo "
Reviews for Product X:
";
foreach ($productReviews as $review) {
    echo $review['user'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
}

// Get average rating for Product X
$averageRating = $reviewSystem->getAverageRatingForItem('Product X');
echo "
Average Rating for Product X: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Format a specific review
$formattedReview = $reviewSystem->formatReview($allReviews[0]);
echo "
Formatted Review:
" . $formattedReview;
?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function allows you to create and display user reviews for a given product.
 * It handles basic data sanitization and validation.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The review text.
 *
 * @return array|string An array containing the review data if successful,
 *                     or an error message string if there's an issue.
 */
function createReview(string $product_id, string $name, string $comment) {
  // Validate input - Basic sanity checks
  if (empty($product_id)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($name)) {
    return "Error: Reviewer name cannot be empty.";
  }
  if (empty($comment)) {
    return "Error: Review comment cannot be empty.";
  }

  // Sanitize input -  Escape HTML to prevent XSS
  $name = htmlspecialchars($name, ENT_QUOTES, 'UTF-8');
  $comment = htmlspecialchars($comment, ENT_QUOTES, 'UTF-8');


  //  You would normally store this in a database here.  For demonstration, 
  //  we'll just store it in an array.
  $review = [
    'product_id' => $product_id,
    'name' => $name,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp
  ];

  return $review;
}



/**
 * Function to display a single review
 * @param array $review The review data
 */
function displayReview(array $review) {
    echo "<p><strong>Product ID:</strong> " . $review['product_id'] . "</p>";
    echo "<p><strong>Reviewer:</strong> " . $review['name'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
    echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
}



// --- Example Usage ---

// Create a review
$newReview = createReview("123", "John Doe", "This is a fantastic product!");

if (is_array($newReview)) {
  // Review was created successfully
  echo "<h2>New Review Created:</h2>";
  displayReview($newReview);

  // Example: Display all reviews for product 123 (Assuming you have a function to fetch them from a database)
  // You would replace this with your actual database query.
  //$reviews = fetchReviewsFromDatabase($product_id);
  //displayReviews($reviews);
} else {
  // There was an error creating the review
  echo "<p>Error: " . $newReview . "</p>";
}



/**
 * Placeholder function to simulate fetching reviews from a database.
 * Replace this with your actual database query.
 *
 * @param string $product_id
 * @return array
 */
function fetchReviewsFromDatabase(string $product_id) {
  //  In a real application, this would query your database.
  //  For demonstration, we'll just return some dummy reviews.
  if ($product_id == "123") {
    return [
      [
        'product_id' => '123',
        'name' => 'John Doe',
        'comment' => 'This is a fantastic product!',
        'timestamp' => time()
      ],
      [
        'product_id' => '123',
        'name' => 'Jane Smith',
        'comment' => 'Great value for the price.',
        'timestamp' => time() - 3600 // One hour ago
      ]
    ];
  } else {
    return []; // Return an empty array if the product ID is not found.
  }
}


/**
 * Placeholder function to display a list of reviews
 * @param array $reviews
 */
function displayReviews(array $reviews) {
    echo "<h3>All Reviews for Product ID " . $reviews[0]['product_id'] . ":</h3>";
    echo "<ul>";
    foreach ($reviews as $review) {
        displayReview($review);
    }
    echo "</ul>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The content of the review.
 * @param int $rating (Optional) Rating from 1-5. Defaults to 0 if not provided.
 *
 * @return array An array containing the review data (success/failure, review ID, review text, rating, and timestamp).
 *               Returns an error message if the review creation fails.
 */
function createReview(string $productId, string $username, string $reviewText, int $rating = 0) {
  // Validation (basic - expand as needed)
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  //  You would typically store reviews in a database here.
  //  This is a simplified example.

  $reviewId = uniqid(); // Generate a unique ID for the review
  $timestamp = time();

  // Simulate saving to a database (replace with your actual database interaction)
  $review = [
    'reviewId' => $reviewId,
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => $timestamp
  ];

  // Store the review in a data structure (for demonstration)
  //  In a real application, you would save this to a database.
  //  Example:
  //  saveReviewToDatabase($review);
  
  return ['success' => true, 'reviewId' => $reviewId, 'reviewText' => $reviewText, 'rating' => $rating, 'timestamp' => $timestamp];
}

/**
 *  Example usage:
 */

// Create a review
$review = createReview('product123', 'John Doe', 'This is a great product!');
if ($review['success']) {
  echo "Review created successfully! Review ID: " . $review['reviewId'] . "<br>";
  echo "Review Text: " . $review['reviewText'] . "<br>";
  echo "Rating: " . $review['rating'] . "<br>";
  echo "Timestamp: " . $review['timestamp'] . "<br>";
} else {
  echo "Error creating review: " . $review['message'] . "<br>";
}

// Create a review with a rating
$review2 = createReview('product456', 'Jane Smith', 'Excellent value for money!', 5);
if ($review2['success']) {
  echo "Review created successfully! Review ID: " . $review2['reviewId'] . "<br>";
} else {
  echo "Error creating review: " . $review2['message'] . "<br>";
}


// Example with error handling
$invalidReview = createReview('', 'Test User', 'Invalid review');
if(!$invalidReview['success']) {
    echo "Error creating review: " . $invalidReview['message'] . "<br>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (optional) - Unique ID for the review.  Auto-generated if not provided.
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct(int $userId, int $productId, int $rating, string $comment = "")
    {
        $this->reviewId = null; // Will be auto-generated
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Timestamp of when the review was created
    }

    /**
     * Getters and Setters
     */

    public function getReviewId(): int
    {
        return $this->reviewId;
    }

    public function setReviewId(int $reviewId)
    {
        $this->reviewId = $reviewId;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function setUserId(int $userId)
    {
        $this->userId = $userId;
    }

    public function getProductId(): int
    {
        return $this->productId;
    }

    public function setProductId(int $productId)
    {
        $this->productId = $productId;
    }

    public function getRating(): int
    {
        return $this->rating;
    }

    public function setRating(int $rating)
    {
        $this->rating = $rating;
    }

    public function getComment(): string
    {
        return $this->comment;
    }

    public function setComment(string $comment)
    {
        $this->comment = $comment;
    }

    public function getDate(): string
    {
        return $this->date;
    }
}


/**
 * User Review Function -  Simple Example
 */
function displayUserReview(UserReview $review)
{
    echo "Review ID: " . $review->getReviewId() . "<br>";
    echo "User ID: " . $review->getUserId() . "<br>";
    echo "Product ID: " . $review->getProductId() . "<br>";
    echo "Rating: " . $review->getRating() . " stars<br>";
    echo "Comment: " . $review->getComment() . "<br>";
    echo "Date: " . $review->getDate() . "<br>";
}


// Example Usage:
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
displayUserReview($review1);

$review2 = new UserReview(789, 456, 3, "It was okay, but could be better.");
displayUserReview($review2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId  The unique identifier for the product.
 * @param string $username   The user's name (for display).
 * @param string $rating     The user's rating (e.g., 1-5 stars).
 * @param string $comment    The user's review text.
 * @param array  $reviews   (Optional) An array to store existing reviews (for persistence).
 *
 * @return array  An updated array of reviews.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
  // Validate inputs (basic example - you might want more robust validation)
  if (empty($productId)) {
    return $reviews; // Or throw an exception - depends on your error handling
  }
  if (empty($username)) {
    $username = 'Anonymous';
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    $rating = 3; // Default rating if invalid
  }
  if (empty($comment)) {
    $comment = 'No comment provided.';
  }

  // Create a review object (you can adapt this to your data structure)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp for sorting and tracking
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Sort reviews by timestamp (most recent first) - optional
  usort($reviews, function($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return $reviews;
}



/**
 * Display User Reviews
 *
 * This function displays a list of user reviews for a given product.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " .  implode(",", array_map('getKey', $reviews)) . "</h2>";
  echo "<ul>";

  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['comment'] . " (" . $review['rating'] . "/5)";
    echo "</li>";
  }

  echo "</ul>";
}


// ------------------- Example Usage -------------------

// Initialize an empty array to store reviews
$productReviews = [];

// Store some reviews
$productReviews = storeUserReview('P123', 'John Doe', 4, 'Great product, works as expected!', $productReviews);
$productReviews = storeUserReview('P123', 'Jane Smith', 5, 'Excellent quality and fast shipping!', $productReviews);
$productReviews = storeUserReview('P456', 'Peter Jones', 2, 'It was okay, but not great.', $productReviews);
$productReviews = storeUserReview('P123', 'Alice Brown', 1, 'Not what I expected.', $productReviews);


// Display the reviews
displayReviews($productReviews);

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Store reviews in an array
    private $db; // Database connection object (optional - for persistent storage)

    /**
     * Constructor
     *
     * Initializes the UserReview object.  You can optionally initialize a database connection here.
     *
     * @param PDO|null $db  An optional PDO database connection object.
     */
    public function __construct(PDO|null $db = null)
    {
        $this->db = $db;
    }

    /**
     * Create a new user review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $userName The name of the user submitting the review.
     * @param string $reviewText The text of the review.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $userName, string $reviewText)
    {
        $reviewId = $this->db ? $this->db->query("INSERT INTO reviews (product_id, user_name, review_text) VALUES (:product_id, :user_name, :review_text) 
                                      SELECT LAST_INSERT_ID()")->fetchColumn() : (int)count($this->reviews) + 1;

        $review = [
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'reviewId' => $review, // Added reviewId for easy retrieval
            'dateCreated' => date('Y-m-d H:i:s')
        ];

        $this->reviews[] = $review;
        return $review['reviewId'];
    }

    /**
     * Get a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects.
     */
    public function getReviewsByProduct(int $productId)
    {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }


    /**
     * Update a review.  (Implement logic for updating reviews - e.g., allow moderation)
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newReviewText The new text of the review.
     * @return bool True on successful update, false on failure.
     */
    public function updateReview(int $reviewId, string $newReviewText)
    {
        $review = $this->getReview($reviewId);
        if ($review) {
            $review['reviewText'] = $newReviewText;
            return true;
        }
        return false;
    }


    /**
     * Delete a review. (Implement moderation logic)
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on successful deletion, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $review = $this->getReview($reviewId);
        if ($review) {
            foreach ($this->reviews as $key => $r) {
                if ($r['reviewId'] == $reviewId) {
                    unset($this->reviews[$key]);
                    return true;
                }
            }
            return false;
        }
        return false;
    }


    /**
     * Display all reviews. (For demonstration purposes - typically you'd render this in a template)
     *
     * @return void
     */
    public function displayReviews()
    {
        echo "<h2>Reviews:</h2>";
        foreach ($this->reviews as $review) {
            echo "<h3>Review ID: " . $review['reviewId'] . "</h3>";
            echo "<p>Product ID: " . $review['productId'] . "</p>";
            echo "<p>User: " . $review['userName'] . "</p>";
            echo "<p>Review: " . $review['reviewText'] . "</p>";
            echo "<p>Date Created: " . $review['dateCreated'] . "</p>";
            echo "<hr>";
        }
    }
}

// Example Usage (Illustrative - you'd likely integrate this into a web application):
// Assume you have a PDO connection established.
// $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// $reviewSystem = new UserReview($db); // Pass the database connection

// // Create a review
// $reviewId = $reviewSystem->createReview(1, "John Doe", "Great product!");

// // Get a review
// $review = $reviewSystem->getReview($reviewId);
// if ($review) {
//     echo "<h2>Review Details:</h2>";
//     echo "<p>Review Text: " . $review['reviewText'] . "</p>";
// }

// // Display all reviews for product 1
// echo "<h2>Reviews for Product 1:</h2>";
// $reviewSystem->displayReviews();

// // Update a review
// $reviewSystem->updateReview($reviewId, "Excellent product - highly recommended!");

// // Delete a review
// $reviewSystem->deleteReview($reviewId);
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, read, update, and delete user reviews.
 *
 *  @param string $productId The ID of the product the review is for.
 *  @param string $username The username of the reviewer.
 *  @param string $rating  The rating given (e.g., 1-5).  Validate this in your application.
 *  @param string $comment The review text.
 *  @param string $dbHost The database host.
 *  @param string $dbName The database name.
 *  @param string $dbUser The database username.
 *  @param string $dbPassword The database password.
 *
 *  @return bool True on success, false on failure.
 */
function create_user_review(
    $productId,
    $username,
    $rating,
    $comment,
    $dbHost,
    $dbName,
    $dbUser,
    $dbPassword
) {
    // Validate inputs -  CRUCIAL for security!  Expand this as needed.
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required review fields."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating provided. Rating must be a number between 1 and 5.");
        return false;
    }

    // Database connection (using PDO - recommended)
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Throw exceptions on errors
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return false;
    }

    // Prepare and execute the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error executing review insert query: " . print_r($stmt->errorInfo(), true)); // Detailed error logging
        return false;
    }
}

// Example Usage (Illustrative - replace with your data)
// $product_id = '123';
// $username = 'john.doe';
// $rating = 4;
// $comment = 'Great product!  Easy to use.';
//
// if (create_user_review($product_id, $username, $rating, $comment, 'localhost', 'my_database', 'my_user', 'my_password')) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }


/*  Example Database Table Structure (MySQL)
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, retrieve, and display user reviews for a given item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating  The rating provided by the user (e.g., 1-5).
 * @param string $db_connection  The established database connection object.  Crucial for database interaction.
 *
 * @return array  An array containing success/failure status and an optional list of reviews.
 *                 Returns an empty array on error.
 */
function store_user_review(string $item_id, string $user_name, string $review_text, int $rating, $db_connection) {
  // Validate input (important for security and data integrity)
  if (empty($item_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Invalid input data.  Item ID, user name, and review text must be filled. Rating must be between 1 and 5.'];
  }

  // Sanitize input (essential for security - prevent SQL injection)
  $item_id = mysqli_real_escape_string($db_connection, $item_id);
  $user_name = mysqli_real_escape_string($db_connection, $user_name);
  $review_text = mysqli_real_escape_string($db_connection, $review_text);
  $rating = (int)$rating; // Cast rating to integer

  // SQL query (using prepared statements - the best practice)
  $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = mysqli_prepare($db_connection, $sql);

  if ($stmt === false) {
    // Handle the error
    return ['success' => false, 'message' => 'Error preparing statement: ' . mysqli_error($db_connection)];
  }

  mysqli_stmt_bind_param($stmt, "ssis", $item_id, $user_name, $rating); // 'ssis' - string, string, integer, string

  if (mysqli_stmt_execute($stmt) === false) {
    // Handle the error
    mysqli_stmt_close($stmt);
    return ['success' => false, 'message' => 'Error executing statement: ' . mysqli_error($db_connection)];
  }

  mysqli_stmt_close($stmt);

  // Optionally, fetch the newly created review (for confirmation)
  $result = mysqli_query($db_connection, "SELECT * FROM reviews WHERE item_id = '$item_id' ORDER BY review_id DESC LIMIT 1");
  if ($result) {
    $review = mysqli_fetch_assoc($result);
    mysqli_free_result($result);
  } else {
     // Handle error in fetching.  This is unlikely but good to check.
     return ['success' => false, 'message' => 'Error fetching review after insertion: ' . mysqli_error($db_connection)];
  }

  return ['success' => true, 'review' => $review];
}


// --- Example Usage (requires a database connection, assume 'db_connection' is already established) ---
// (Important:  Replace this with your actual database connection details.)

// Assuming you have a database connection named $db_connection

// $review_data = store_user_review("product_123", "John Doe", "Great product!", 5, $db_connection);

// if ($review_data['success']) {
//   echo "Review submitted successfully! Review ID: " . $review_data['review']['review_id'];
// } else {
//   echo "Error submitting review: " . $review_data['message'];
// }


// --- Example Database Table Creation (MySQL) ---
/*
CREATE TABLE reviews (
  review_id INT AUTO_INCREMENT PRIMARY KEY,
  item_id VARCHAR(255) NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  review_text TEXT NOT NULL,
  rating INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/


?>


<?php

/**
 * This class provides functionality to store and manage user reviews.
 */
class ReviewManager
{
    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user who wrote the review.
     * @param string $reviewText The text of the review.
     * @param int $rating The rating given for the product (e.g., 1-5).
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating): bool
    {
        if (!is_int($productId) || $productId <= 0) {
            return false; // Invalid product ID
        }
        if (!is_string($userName) || empty($userName)) {
            return false; // Invalid user name
        }
        if (!is_string($reviewText) || empty($reviewText)) {
            return false; // Invalid review text
        }
        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[$productId][] = [
            'user' => $userName,
            'text' => $reviewText,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for when the review was added
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects for the product, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array
    {
        if (!is_int($productId) || $productId <= 0) {
            return []; // Invalid product ID
        }

        return $this->reviews[$productId] ?? [];  // Use null coalesce operator for concise handling.
    }

    /**
     * Retrieves all reviews.
     *
     * @return array All reviews stored in the system.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Deletes a specific review by product ID and user.
     *  This is a more complex operation, as we need to identify the *exact* review to delete.
     *  Since we only store the review as an array in the reviews array, a more robust solution
     *  might involve storing a unique ID for each review.  However, this implementation provides
     *  a basic approach.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user who wrote the review.
     * @return bool True if the review was deleted, false otherwise.
     */
    public function deleteReview(int $productId, string $userName): bool
    {
        if (!is_int($productId) || $productId <= 0) {
            return false; // Invalid product ID
        }
        if (!is_string($userName) || empty($userName)) {
            return false; // Invalid user name
        }

        $productReviews = $this->getReviewsForProduct($productId);
        if (empty($productReviews)) {
            return false;
        }

        foreach ($productReviews as $key => $review) {
            if ($review['user'] === $userName) {
                unset($productReviews[$key]); // Remove the review
                return true; // Review found and deleted
            }
        }

        return false; // Review not found
    }

    /**
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float
    {
        $reviews = $this->getReviewsForProduct($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($reviews);
    }
}



// Example Usage:
$reviewManager = new ReviewManager();

// Add reviews
$reviewManager->addReview(123, 'John Doe', 'Great product!', 5);
$reviewManager->addReview(123, 'Jane Smith', 'Could be better', 3);
$reviewManager->addReview(456, 'Peter Jones', 'Excellent value', 4);

// Get reviews for product 123
$reviews123 = $reviewManager->getReviewsForProduct(123);
print_r($reviews123);

// Get average rating for product 123
$averageRating = $reviewManager->getAverageRatingForProduct(123);
echo "Average rating for product 123: " . ($averageRating !== null ? $averageRating : "No reviews") . "
";

// Delete a review
$reviewManager->deleteReview(123, 'John Doe');

// Get reviews for product 123 again after deletion
$reviews123 = $reviewManager->getReviewsForProduct(123);
print_r($reviews123);


<?php

/**
 * Reviews function to handle user reviews.
 *
 * Allows adding, retrieving, and deleting reviews.
 */
class ReviewSystem
{
    private $reviews = [];
    private $reviewIdCounter = 1; // Used to generate unique IDs

    /**
     * Adds a new review.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $comment The review text.
     * @return int|bool The ID of the newly created review on success, or false on failure (e.g., empty comment).
     */
    public function addReview(string $userId, string $comment)
    {
        if (empty($comment)) {
            return false; //  Don't allow empty comments
        }

        $reviewId = $this->generateReviewId();
        $this->reviews[$reviewId] = [
            'userId' => $userId,
            'comment' => $comment,
            'createdAt' => time() //Timestamp of when review was created
        ];

        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }

        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if the review doesn't exist.
     */
    public function deleteReview(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }

        return false;
    }

    /**
     * Generates a unique review ID.
     *
     * @return int A unique integer.
     */
    private function generateReviewId(): int
    {
        return $this->reviewIdCounter++;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewId1 = $reviewSystem->addReview('user123', 'Great product!  Highly recommended.');
$reviewId2 = $reviewSystem->addReview('user456', 'Could be better, needs some improvements.');

if ($reviewId1) {
    echo "Review ID 1: " . $reviewId1 . "<br>";
}

if ($reviewId2) {
    echo "Review ID 2: " . $reviewId2 . "<br>";
}


// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:<br>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";


// Get a specific review
$review = $reviewSystem->getReviewById($reviewId1);
if ($review) {
    echo "Review ID " . $reviewId1 . ":<br>";
    echo "User: " . $review['userId'] . "<br>";
    echo "Comment: " . $review['comment'] . "<br>";
    echo "Created At: " . date("Y-m-d H:i:s", $review['createdAt']) . "<br>";
} else {
    echo "Review not found.";
}

// Delete a review
$deleted = $reviewSystem->deleteReview($reviewId2);
if ($deleted) {
    echo "<br>Review ID 2 deleted successfully.";
} else {
    echo "<br>Failed to delete review.";
}

// Check for the deleted review
$remainingReviews = $reviewSystem->getAllReviews();
echo "<br>Remaining Reviews:<br>";
echo "<pre>";
print_r($remainingReviews);
echo "</pre>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 * It takes user input and stores it in a database (or another storage mechanism).
 *
 * @param string $productId The unique identifier of the product/item being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating A numeric rating from 1 to 5 (or a similar range).
 * @param string $comment The user's written review.
 * @param string $storageMethod  Method to store the review: 'db', 'file', 'memory' (default)
 * @return bool True if the review was successfully stored, false otherwise.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, string $storageMethod = 'memory') {
    // Input validation (basic) - Enhance this for production
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Invalid review data. Missing required fields.");
        return false;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating. Rating must be a number between 1 and 5.");
        return false;
    }

    // Data sanitization (Very important to prevent XSS and SQL Injection)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);


    // ----- Storage Logic -----
    switch ($storageMethod) {
        case 'db':
            // Replace with your database connection and query logic
            // Example (Conceptual - Adapt to your DB setup)
            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
            $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
            $stmt->execute([$productId, $username, $rating, $comment]);
            return true;

        case 'file':
            // Write the review to a file.  Requires careful security considerations.
            $filename = "reviews_" . $productId . ".txt";
            $reviewData = "Product ID: " . $productId . "
Username: " . $username . "
Rating: " . $rating . "
Comment: " . $comment . "
---
";
            file_put_contents($filename, $reviewData, FILE_APPEND); // Append to file
            return true;

        case 'memory':
            // Store the review in a simple array (for demonstration only).
            // In a real application, you'd likely store this in a session or cache.
            $reviews = [];
            $reviews[$productId][] = [
                'productId' => $productId,
                'username' => $username,
                'rating' => $rating,
                'comment' => $comment,
            ];
            return true;

        default:
            error_log("Unsupported storage method: " . $storageMethod);
            return false;
    }
}


// ----- Example Usage -----

// Store a review in memory
if (storeUserReview('product123', 'john_doe', 4, 'Great product, highly recommend!', 'memory')) {
    echo "Review stored in memory successfully!
";
} else {
    echo "Failed to store review in memory.
";
}

// Store a review in a file
if (storeUserReview('product456', 'jane_smith', 5, 'Excellent service!', 'file')) {
    echo "Review stored in file successfully!
";
} else {
    echo "Failed to store review in file.
";
}


//  Example using the database -  (Remember to adapt to your database)
// storeUserReview('product789', 'peter_jones', 3, 'It was okay.', 'db');
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The user's review text.
 * @param int   $rating       The rating given by the user (1-5).
 * @return array  An array containing a success/error message.
 */
function submit_review(string $productName, string $reviewText, int $rating): array
{
  // Input Validation
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
  }

  // Sanitize input (basic -  consider more robust sanitization for production)
  $productName = trim($productName);
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText); // Prevents XSS attacks

  // Here you would typically save the review to a database.
  //  For this example, we'll just simulate a save.

  // Example database save (replace with your actual database logic)
  $review_data = [
    'product_name' => $productName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'submission_timestamp' => time()
  ];

  // In a real application, you'd insert this data into your database.
  // For example:
  // $db->insert('reviews', $review_data);

  // Simulate a successful save
  return ['success' => true, 'message' => 'Review submitted successfully!'];
}


// --- Example Usage ---
// Simulate getting data from a form submission.
$product = $_POST['product_name'];
$comment = $_POST['review_text'];
$stars = $_POST['rating'];

// Validate and process the form data
$result = submit_review($product, $comment, $stars);

// Display the result
if ($result['success']) {
  echo "<p style='color: green;'>$result[message]</p>";
} else {
  echo "<p style='color: red;'>Error: $result[message]</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 * It includes input validation and handles potential errors.
 */
class UserReview {

  private $productId;
  private $userId;
  private $rating;
  private $comment;

  /**
   * Constructor
   *
   * @param int $productId The ID of the product or item being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's comment about the product.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    if ($productId <= 0) {
      throw new InvalidArgumentException("Product ID must be a positive integer.");
    }
    if ($userId <= 0) {
      throw new InvalidArgumentException("User ID must be a positive integer.");
    }
    if ($rating < 1 || $rating > 5) {
      throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }
    if (empty($comment)) {
      throw new InvalidArgumentException("Comment cannot be empty.");
    }

    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  /**
   * Save the review to the database (example implementation - replace with your DB logic)
   *
   * @return bool True if the review was saved successfully, false otherwise.
   */
  public function saveReview() {
    // Placeholder - Replace with your database saving logic.
    // This is just an example to show how to use the data.
    $db = new DatabaseConnection(); // Assuming you have a database connection class
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
            VALUES ('" . $this->productId . "', '" . $this->userId . "', '" . $this->rating . "', '" . $this->comment . "')";
    
    return $db->execute($sql);
  }

  /**
   * Get Review Details
   *
   * @return array An array containing the review details.
   */
  public function getReviewDetails() {
    return [
      'product_id' => $this->productId,
      'user_id' => $this->userId,
      'rating' => $this->rating,
      'comment' => $this->comment
    ];
  }
}

// Example Usage:
try {
  $review = new UserReview(123, 45, 4, "Great product! I love it.");
  if ($review->saveReview()) {
    echo "Review saved successfully!
";
    $details = $review->getReviewDetails();
    print_r($details);
  } else {
    echo "Failed to save review.
";
  }
} catch (InvalidArgumentException $e) {
  echo "Error: " . $e->getMessage() . "
";
}

//  Example of Validation Error
try {
    $review = new UserReview(123, -45, 3, "Bad review"); // Invalid user ID
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
"; // Output: Error: User ID must be a positive integer.
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  An existing database connection object.
 * @return array|false  An array of reviews or false on error.
 */
function add_user_review(string $productId, string $username, string $rating, string $comment, array $dbConnection) {
  // Input Validation (Very Important!)
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return false; // Invalid input
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return false; // Invalid username (only alphanumeric and underscore allowed)
  }

  if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
    return false; // Rating must be between 1 and 5
  }

  // Sanitize inputs (Prevent SQL Injection - KEY STEP!)
  $productId = $dbConnection->real_escape_string($productId);
  $username = $dbConnection->real_escape_string($username);
  $rating = $dbConnection->real_escape_string($rating);
  $comment = $dbConnection->real_escape_string($comment);

  // Construct the SQL query
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute the query
  if ($dbConnection->query($sql) === TRUE) {
    return true; // Success
  } else {
    // Handle error
    error_log("Error adding review: " . $dbConnection->error);
    return false;
  }
}


/**
 * Get all user reviews for a product.
 *
 * @param string $productId The unique identifier of the product.
 * @param array $dbConnection  An existing database connection object.
 * @return array|false An array of reviews or false on error.
 */
function get_user_reviews(string $productId, array $dbConnection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
    $result = $dbConnection->query($sql);

    if ($result === FALSE) {
        error_log("Error querying reviews: " . $dbConnection->error);
        return false;
    }

    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    return $reviews;
}

/**
 * Display User Reviews (for demonstration purposes)
 *
 * This is a helper function to display reviews.  In a real application,
 * this would be handled by your template engine.
 *
 * @param array $reviews An array of review objects.
 */
function display_user_reviews(array $reviews) {
  echo "<h2>User Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<div>";
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . " stars<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "</div>";
  }
}

// Example Usage (Demonstration)
// *** IMPORTANT: Replace these with your actual database connection ***
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

$dbConnection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($dbConnection->connect_error) {
    die("Connection failed: " . $dbConnection->connect_error);
}

// Add a review (replace with actual product ID and user)
$review_result = add_user_review('product_123', 'john_doe', '4', 'Great product, highly recommended!', $dbConnection);

if ($review_result) {
  echo "<p>Review added successfully!</p>";
} else {
  echo "<p>Error adding review.</p>";
}

// Get all reviews for product_123
$all_reviews = get_user_reviews('product_123', $dbConnection);

if ($all_reviews) {
    display_user_reviews($all_reviews, $dbConnection);
} else {
    echo "<p>Error retrieving reviews.</p>";
}


// Close the database connection
$dbConnection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product or service.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating given by the reviewer (1-5). Defaults to 0.
 * @return array|string  Returns an array with the review data if successful, or an error message string.
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {

  // Input Validation - Important for security and data integrity
  if (empty($productId)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($reviewerName)) {
    return "Error: Reviewer Name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review Text cannot be empty.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Data Sanitization -  Prevent XSS and SQL Injection (Basic)
  $reviewerName = htmlspecialchars($reviewerName); // Escape HTML entities
  $reviewText = htmlspecialchars($reviewText);

  // In a real application, you'd store this data in a database.
  // This example simulates storing it in an array for simplicity.
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for tracking
  ];

  // Store the review.  In a real app, this would insert into a database.
  // For demonstration, we'll just print the review data.
  echo "<pre>";
  print_r($review);
  echo "</pre>";

  return $review; // Returns the review data for processing (e.g., display)
}


// --- Example Usage ---

// Submit a review
$reviewResult = submitReview("product123", "John Doe", "Great product!  I love it!", 5);

if (is_array($reviewResult)) {
  echo "<p>Review submitted successfully: " . $reviewResult['reviewerName'] . " gave a rating of " . $reviewResult['rating'] . ".</p>";
} else {
  echo "<p>" . $reviewResult . "</p>"; // Display the error message
}


// Submit another review with a different rating
$reviewResult2 = submitReview("product456", "Jane Smith", "It's okay.", 3);

if (is_array($reviewResult2)) {
  echo "<p>Review submitted successfully: " . $reviewResult2['reviewerName'] . " gave a rating of " . $reviewResult2['rating'] . ".</p>";
} else {
  echo "<p>" . $reviewResult2 . "</p>";
}


// Example showing error handling
$errorResult = submitReview("", "Error Test", "Bad Input");
echo "<p>" . $errorResult . "</p>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review submitted by the user.
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 * @param array $dbConnection  (Optional) Database connection object. If not provided, uses a default one.
 *
 * @return array  An array containing the review ID, product name, user ID, review text, and rating.
 *                Returns an empty array if the review fails to save.
 */
function saveReview(string $productName, string $userId, string $reviewText, int $rating, $dbConnection = null) {

  // Validate input (very basic - you'd want to add more robust validation)
  if (empty($productName) || empty($reviewText) || $rating < 1 || $rating > 5) {
    error_log("Invalid review data submitted."); // Log the error (important for debugging)
    return [];
  }

  // If no database connection is provided, create a default one.  
  // Replace with your actual database credentials.  This is just for demonstration.
  if ($dbConnection === null) {
    $dbConnection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  try {
    // Prepare the SQL statement
    $stmt = $dbConnection->prepare(
      "INSERT INTO reviews (product_name, user_id, review_text, rating) VALUES (?, ?, ?, ?)"
    );

    // Bind parameters to prevent SQL injection
    $stmt->execute([$productName, $userId, $reviewText, $rating]);

    // Get the ID of the newly inserted review
    $reviewId = $dbConnection->lastInsertId();

    return [
      'review_id' => $reviewId,
      'product_name' => $productName,
      'user_id' => $userId,
      'review_text' => $reviewText,
      'rating' => $rating
    ];

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage()); // Log the error
    // Handle the error appropriately (e.g., display a user-friendly error message)
    return [];
  }
}

/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productName The name of the product to retrieve reviews for.
 * @param array $dbConnection  Database connection object.
 *
 * @return array An array containing an empty array if no reviews are found,
 *               or an array of review objects.
 */
function displayReviews(string $productName, $dbConnection) {

  try {
    $stmt = $dbConnection->prepare("SELECT * FROM reviews WHERE product_name = ?");
    $stmt->execute([$productName]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return [];
  }
}

// Example Usage (Illustrative - Replace with your actual database and data)
// Note: This requires a database set up with a 'reviews' table.

// Example 1: Saving a review
$review = saveReview('Awesome Gadget', 'user123', 'Great product! I love it.', 5);

if (!empty($review)) {
  echo "Review saved successfully! Review ID: " . $review['review_id'] . "<br>";
} else {
  echo "Failed to save review.";
}

// Example 2: Displaying reviews for 'Awesome Gadget'
$reviews = displayReviews('Awesome Gadget', $dbConnection); // Use your actual database connection

if (empty($reviews)) {
  echo "No reviews found for 'Awesome Gadget'.";
} else {
  echo "<h2>Reviews for 'Awesome Gadget':</h2>";
  foreach ($reviews as $review) {
    echo "<p><strong>User:</strong> " . $review['user_id'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Review:</strong> " . $review['review_text'] . "</p>";
  }
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and retrieve user reviews.
 * It includes basic validation and database interaction (assuming a database is set up).
 */

class ReviewManager {

    private $db; // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Submits a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True if the review was submitted successfully, false otherwise.
     */
    public function submitReview($username, $rating, $comment) {
        // Input validation - Important for security and data integrity
        if (empty($username) || empty($rating) || empty($comment)) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare the SQL statement (using prepared statements to prevent SQL injection)
        $sql = "INSERT INTO reviews (username, rating, comment) VALUES (?, ?, ?)";

        // Execute the query with the parameters
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("sii", $username, $rating, $comment);
        $stmt->execute();

        return ($stmt->affected_rows > 0); // Check if the insert was successful
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $sql = "SELECT id, username, rating, comment, created_at FROM reviews";
        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $reviews[] = $row;
            }
        }

        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $id The ID of the review to retrieve.
     *
     * @return array|null An array representing the review, or null if not found.
     */
    public function getReviewById($id) {
        $sql = "SELECT id, username, rating, comment, created_at FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();

        if ($stmt->num_rows > 0) {
            return $result = $stmt->fetch_assoc();
        }

        return null;
    }
}


// --- Example Usage (assuming you have a database connection called $db) ---
//  (You'll need to replace this with your actual database connection details)

// Sample Database Connection - Replace with your actual connection
// $db = new mysqli("localhost", "username", "password", "database_name");
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }



// Create a ReviewManager instance
$reviewManager = new ReviewManager($db);

// Submit a review
if ($reviewManager->submitReview("JohnDoe", 4, "Great product!")) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<br><h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
    echo "<br>";
}

// Get a single review
$review = $reviewManager->getReviewById(1);

if ($review) {
    echo "<h2>Review ID 1:</h2>";
    echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
} else {
    echo "<p>Review not found.</p>";
}


// Close the database connection (Important!)
$db->close();
?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, a user's review, and a rating,
 * and saves them to a database.
 *
 * @param int $product_id The ID of the product being reviewed.
 * @param string $review The user's review text.
 * @param int $rating The user's rating (e.g., 1-5).
 * @param string $db_connection A database connection object.
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function save_user_review(int $product_id, string $review, int $rating, PDO $db_connection) {

  // Input validation - crucial for security and data integrity
  if (!is_int($product_id) || $product_id <= 0) {
    error_log("Invalid product_id: " . $product_id); // Log for debugging
    return false;
  }

  if (empty($review)) {
    error_log("Review cannot be empty.");
    return false;
  }

  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating: " . $rating);
    return false;
  }

  // Sanitize data to prevent SQL injection
  $review = $db_connection->quote($review);  // Use PDO's quote() function for secure escaping

  // Construct the SQL query
  $sql = "INSERT INTO reviews (product_id, review, rating) VALUES (:product_id, :review, :rating)";

  // Prepare the statement
  $stmt = $db_connection->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':rating', $rating);

  // Execute the query
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    error_log("Error saving review: " . $e->getMessage());
    return false;
  }
}


/**
 * Example Usage (Illustrative - Adapt to your database setup)
 */

// Example Database Connection (Replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_database_user';
$password = 'your_database_password';

try {
    $db_connection = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Example review
$product_id = 123;
$review_text = "This product is fantastic!";
$rating = 5;

if (save_user_review($product_id, $review_text, $rating, $db_connection)) {
  echo "Review saved successfully!";
} else {
  echo "Failed to save review.";
}
?>


<?php

/**
 * This function creates a user review object and handles basic validation.
 *
 * @param string $name The reviewer's name.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $comment The reviewer's comment.
 *
 * @return array|false An associative array representing the review if valid,
 *                     false otherwise.
 */
function createReview(string $name, string $rating, string $comment): array|false
{
    // Validate input
    if (empty($name)) {
        error_log("Review: Empty name provided.");  // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Review: Invalid rating provided.  Must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Review: Empty comment provided.");
        return false;
    }


    // Create the review object
    $review = [
        'name' => $name,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s') // Add the date/time of the review.
    ];

    return $review;
}


/**
 * Example Usage
 */

// Valid review
$review1 = createReview("Alice Smith", 4, "Great product!  Highly recommend.");
if ($review1) {
    echo "Review 1:
";
    print_r($review1);
    echo "
";
} else {
    echo "Review 1 creation failed.
";
}

// Invalid review - empty name
$review2 = createReview("", 5, "Good!");
if ($review2) {
    echo "Review 2:
";
    print_r($review2);
    echo "
";
} else {
    echo "Review 2 creation failed.
";
}

// Invalid review - invalid rating
$review3 = createReview("Bob Johnson", 6, "Okay.");
if ($review3) {
    echo "Review 3:
";
    print_r($review3);
    echo "
";
} else {
    echo "Review 3 creation failed.
";
}

// Valid review with no comment
$review4 = createReview("Charlie Brown", 3, "");
if ($review4) {
    echo "Review 4:
";
    print_r($review4);
    echo "
";
} else {
    echo "Review 4 creation failed.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, update, and delete user reviews.
 * It utilizes a simple database interaction for demonstration purposes.
 *  Replace the database connection details with your actual credentials.
 */

class ReviewManager {

    private $db;

    public function __construct($dbConfig) {
        // Assuming $dbConfig is an array containing:
        // ['host'] => 'localhost'
        // ['user'] => 'your_db_user'
        // ['password'] => 'your_db_password'
        // ['dbname'] => 'your_database_name'
        try {
            $this->db = new PDO($dbConfig['driver'] . ':host=' . $dbConfig['host'] . ';dbname=' . $dbConfig['dbname'], $dbConfig['user'], $dbConfig['password']);
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * Adds a new review.
     *
     * @param string $user_id The ID of the user who wrote the review.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview(string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, rating, comment) VALUES (?, ?, ?)");
            $stmt->execute([$user_id, $rating, $comment]);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Retrieves a review by ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|false An array containing the review data, or false if not found.
     */
    public function getReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review ? $review : false;
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $rating The new rating.
     * @param string $comment The new review text.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $review_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
            $stmt->execute([$rating, $comment, $review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected
        } catch (PDOException $e) {
            return false;
        }
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $stmt = $this->db->query("SELECT * FROM reviews");
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $reviews;
    }
}

// Example usage (replace with your actual database configuration)
$dbConfig = [
    'driver' => 'mysql', // or pdo_mysql, etc.
    'host' => 'localhost',
    'user' => 'your_db_user',
    'password' => 'your_db_password',
    'dbname' => 'your_database_name'
];

$reviewManager = new ReviewManager($dbConfig);

// Add a review
$newReviewId = $reviewManager->addReview(1, 5, "This is a fantastic product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to add review.
";
}

// Get a review
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Update a review
$updateSuccess = $reviewManager->updateReview($newReviewId, 4, "Updated review text");
if ($updateSuccess) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteSuccess = $reviewManager->deleteReview($newReviewId);
if ($deleteSuccess) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes validation, sanitization, and basic data handling.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $author     The name or username of the reviewer.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The reviewer's comment/feedback.
 * @param array $dbConnection Database connection object.  This is crucial!
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $productId, string $author, string $rating, string $comment, array $dbConnection) {

  // Validation
  $errors = [];

  // Check if product ID is provided
  if (empty($productId)) {
    $errors[] = "Product ID is required.";
  }

  // Check if author is provided
  if (empty($author)) {
    $errors[] = "Author is required.";
  }

  // Check if rating is a valid number between 1 and 5
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    $errors[] = "Rating must be a number between 1 and 5.";
  }

  // Check if comment is provided
  if (empty($comment)) {
    $errors[] = "Comment is required.";
  }

  // Sanitize input (basic - you might want more robust sanitization)
  $productId = trim($productId);
  $author = trim($author);
  $rating = (int)$rating; // Ensure rating is an integer
  $comment = trim($comment);

  // If there are errors, return false
  if (!empty($errors)) {
    return false;
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (product_id, author, rating, comment) 
          VALUES (:product_id, :author, :rating, :comment)";

  // Prepare the statement
  $stmt = $dbConnection->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':author', $author);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  // Execute the statement
  if ($stmt->execute()) {
    return true;
  } else {
    // Handle errors (logging, database errors, etc.)
    error_log("Error saving review: " . $stmt->error);
    return false;
  }
}


// Example usage (assuming you have a database connection object $conn)
/*
$product_id = "123";
$author = "John Doe";
$rating = 4;
$comment = "Great product, would recommend!";

if (saveReview($product_id, $author, $rating, $comment, $conn)) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.  Check the error logs.";
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (1-5).
 * @param int    $userId    The unique identifier of the user.  (Optional - for more robust tracking)
 *
 * @return array An array containing the review data or an error message if the review couldn't be saved.
 */
function saveReview(string $productId, string $userName, string $reviewText, int $rating, int $userId = null) {
  // Input Validation - Add more robust validation as needed
  if (empty($productId)) {
    return ["error" => "Product ID cannot be empty."];
  }
  if (empty($userName)) {
    return ["error" => "User name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if ($rating < 1 || $rating > 5) {
    return ["error" => "Rating must be between 1 and 5."];
  }
  if ($userId === null || empty($userId)) {
    // Optionally, generate a unique ID or use a database-generated ID
    $userId = generateUniqueUserId(); // Implement this function as needed.
  }


  // **Data Storage -  Replace this with your database logic**
  // In a real application, you would save this data to a database.
  // This is a placeholder for demonstration purposes.

  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'userId' => $userId,
    'timestamp' => time() // Add timestamp for ordering/filtering
  ];

  // Save the review (replace with your database saving logic)
  // Example:
  // $result = saveToDatabase($review);

  // Mock save to a simple array (for demonstration)
  $reviews =  getReviewsForProduct($productId); // Assume this function exists
  $reviews[] = $review;

  //Return the review
  return $review;
}



/**
 * Placeholder function to retrieve reviews for a product.
 * Replace with your actual database query.
 *
 * @param string $productId
 * @return array
 */
function getReviewsForProduct(string $productId)
{
  // This is just a placeholder - replace with your actual database query
  $reviews = [
    ['productId' => '123', 'userName' => 'John Doe', 'reviewText' => 'Great product!', 'rating' => 5],
    ['productId' => '123', 'userName' => 'Jane Smith', 'reviewText' => 'Could be better.', 'rating' => 3]
  ];
  return $reviews;
}

/**
 * Placeholder function to generate a unique user ID.
 * Replace with your actual user ID generation logic.
 *
 * @return int
 */
function generateUniqueUserId() {
  // This is a placeholder - replace with your actual user ID generation logic
  return uniqid();
}



/**
 * Displays a review.
 *
 * @param array $review  The review data.
 */
function displayReview(array $review) {
  if (empty($review)) {
    echo "No review available.";
    return;
  }

  echo "<h3>Review for Product ID: " . $review['productId'] . "</h3>";
  echo "<p><strong>User:</strong> " . htmlspecialchars($review['userName']) . "</p>";
  echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
  echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
  echo "<p><em>Timestamp:</em> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
}


// Example Usage:
$productId = "123";
$userName = "Alice";
$reviewText = "This product is amazing!  I highly recommend it.";
$rating = 5;

$reviewResult = saveReview($productId, $userName, $reviewText, $rating);

if (isset($reviewResult['error'])) {
  echo "<p style='color:red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
  displayReview($reviewResult);
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique ID of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating    The rating (e.g., 1-5 stars).
 * @param string $db_connection (Optional) - A database connection object. If not provided, 
 *                             a default connection is used.
 *
 * @return bool True on success, false on failure.
 */
function add_user_review(
    string $product_id,
    string $user_name,
    string $review_text,
    int    $rating,
    $db_connection = null
) {

    // Default database connection
    if (!$db_connection) {
        // Replace with your actual database connection setup here.
        // This is just a placeholder.  You'll need to connect to your database.
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); 
    }

    try {
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_id, user_name, review_text, rating) 
             VALUES (:product_id, :user_name, :review_text, :rating)"
        );

        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();
        return true; // Success
    } catch (PDOException $e) {
        // Handle database errors appropriately (logging, display error message to user)
        error_log("Error adding review: " . $e->getMessage());  
        return false; // Failure
    }
}


/**
 * Get User Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param $db_connection (Optional) - A database connection object.  If not provided, a default connection is used.
 *
 * @return array An array of review objects.  Each object will have properties like:
 *               - product_id
 *               - user_name
 *               - review_text
 *               - rating
 *               - timestamp (automatically generated)
 */
function get_user_reviews(string $product_id, $db_connection = null) {

    // Default database connection
    if (!$db_connection) {
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    try {
        $stmt = $db_connection->prepare(
            "SELECT product_id, user_name, review_text, rating, id FROM reviews WHERE product_id = :product_id"
        );
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results as an associative array
        return $reviews;
    } catch (PDOException $e) {
        error_log("Error getting reviews: " . $e->getMessage());
        return []; // Return an empty array on error.
    }
}



// Example Usage (replace with your actual values and database setup)
$product_id = "123";
$user_name = "John Doe";
$review_text = "This product is amazing!";
$rating = 5;

if (add_user_review($product_id, $user_name, $review_text, $rating)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

$reviews = get_user_reviews($product_id);

if ($reviews) {
    echo "Reviews for product " . $product_id . ":
";
    foreach ($reviews as $review) {
        echo "- " . $review['user_name'] . ": " . $review['review_text'] . " (" . $review['rating'] . " stars)
";
    }
} else {
    echo "No reviews found for product " . $product_id . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text, rating, and optionally, user information)
 * and stores the review in a database or returns it as a structured object.
 *
 * @param string $reviewText - The text of the review.
 * @param int $rating - The rating given by the user (e.g., 1-5 stars).
 * @param array $userData - (Optional) An array containing user information (e.g., user_id, username).
 * @param string $dbConnection - (Optional)  A database connection object.
 * @return array|object - Returns an array with review data, or a custom object if configured.
 *                        Returns null on error.
 */
function create_review(string $reviewText, int $rating, array $userData = [], string $dbConnection = null)
{
  // **Input Validation - IMPORTANT!**
  if (empty($reviewText)) {
    error_log("Review text cannot be empty."); // Log the error for debugging.  Don't display to the user directly.
    return null;
  }

  if ($rating < 1 || $rating > 5) { // Adjust rating range as needed
    error_log("Rating must be between 1 and 5.");
    return null;
  }

  if (empty($userData['user_id'])) {
    error_log("User ID cannot be empty.");
    return null;
  }


  // **Database Interaction (Example - SQLite)**
  // Replace with your database connection and query logic.
  try {
    $db = $dbConnection ?: new SQLite3('reviews.db'); // Use provided connection or create a new one
    $stmt = $db->prepare('INSERT INTO reviews (user_id, review_text, rating, created_at) VALUES (:user_id, :review_text, :rating, :created_at)');
    $stmt->bindValue(':user_id', $userData['user_id']);
    $stmt->bindValue(':review_text', $reviewText);
    $stmt->bindValue(':rating', $rating);
    $stmt->bindValue(':created_at', date('Y-m-d H:i:s')); // Set the timestamp

    $result = $stmt->execute();

    $review_id = $db->lastInsertId(); // Get the ID of the newly created review.

    $db->close();

    return [
      'review_id' => $review_id,
      'user_id' => $userData['user_id'],
      'review_text' => $reviewText,
      'rating' => $rating,
      'created_at' => date('Y-m-d H:i:s'), // Return timestamp as a string
    ];

  } catch (Exception $e) {
    error_log("Database error: " . $e->getMessage()); // Log the full error message for debugging.
    return null; // Handle database errors gracefully.
  }
}

// **Example Usage:**
// Assume you have a database connection object named $conn

// Sample Data
$user_id = 123;
$review = "This product is amazing!  I highly recommend it.";
$rating = 5;

// Create the review
$new_review = create_review($review, $rating, ['user_id' => $user_id]);

if ($new_review) {
  echo "Review created successfully! Review ID: " . $new_review['review_id'] . "<br>";
} else {
  echo "Failed to create review.<br>";
}

// Example of a failed usage (empty review text)
$empty_review = create_review("", 3);
if ($empty_review === null) {
  echo "Review creation failed (empty review).<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $productName The name of the product.
 * @param array $reviews  An array of review data.  Each item in this array should be an associative array
 *                      with the keys 'user', 'rating' (1-5), and 'comment'.
 * @return array|string  A string containing the review display or an error message.
 */
function displayReviews(string $productId, string $productName, array $reviews)
{
  // Input Validation - Essential for security and data integrity
  if (empty($productId) || empty($productName) || empty($reviews)) {
    return "Error: Product ID, Product Name, and Reviews are required.";
  }

  // Validate review data -  Example of data validation. You can expand this.
  foreach ($reviews as $review) {
    if (!isset($review['user'], $review['rating'], $review['comment'])) {
      return "Error: Review data must contain 'user', 'rating', and 'comment' keys.";
    }

    if (!is_numeric($review['rating']) || $review['rating'] < 1 || $review['rating'] > 5) {
      return "Error: Rating must be a number between 1 and 5.";
    }
  }


  // Build the review display string
  $reviewDisplay = "<h2>Reviews for {$productName} (ID: {$productId})</h2>";
  $reviewDisplay .= "<ul class='reviews'>";
  foreach ($reviews as $review) {
    $reviewDisplay .= "<li>";
    $reviewDisplay .= "<div class='review-user'>" . htmlspecialchars($review['user']) . "</div>"; // Escape for security
    $reviewDisplay .= "<div class='review-rating'>Rating: " . $review['rating'] . "</div>";
    $reviewDisplay .= "<div class='review-comment'>" . htmlspecialchars($review['comment']) . "</div>";
    $reviewDisplay .= "</li>";
  }
  $reviewDisplay .= "</ul>";

  return $reviewDisplay;
}



// Example Usage:
$productId = "123";
$productName = "Awesome Gadget";

// Sample Reviews
$reviews = [
  [
    'user' => "John Doe",
    'rating' => 5,
    'comment' => "This product is amazing!  Highly recommended."
  ],
  [
    'user' => "Jane Smith",
    'rating' => 4,
    'comment' => "Great product, but could be a little cheaper."
  ],
  [
    'user' => "Peter Jones",
    'rating' => 3,
    'comment' => "It's okay, does the job."
  ]
];


// Display the reviews
$reviewOutput = displayReviews($productId, $productName, $reviews);
echo $reviewOutput;

// Example of an error case
$errorOutput = displayReviews("", "Bad Product", []);
echo "<br><br>Error Output:<br>" . $errorOutput;
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * @param int $reviewId (optional)
     * @param int $userId
     * @param int $productId
     * @param int $rating
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date("Y-m-d H:i:s"); // Use current timestamp for date
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }


    /**
     * Setters (optional - for update functionality)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     * Display Review Information (for testing or display)
     */
    public function displayReview() {
        echo "<p>Review ID: " . $this->getReviewId() . "</p>";
        echo "<p>User ID: " . $this->getUserId() . "</p>";
        echo "<p>Product ID: " . $this->getProductId() . "</p>";
        echo "<p>Rating: " . $this->getRating() . "</p>";
        echo "<p>Comment: " . $this->getComment() . "</p>";
        echo "<p>Review Date: " . $this->getReviewDate() . "</p>";
    }
}


/**
 * User Review Function (Class to handle reviews)
 */
class UserReviewManager {

    private $reviews = [];

    /**
     * Add a review
     *
     * @param UserReview $review
     */
    public function addReview(UserReview $review) {
        $this->reviews[] = $review;
    }

    /**
     * Get all reviews
     *
     * @return array
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews for a specific product ID
     *
     * @param int $productId
     * @return array
     */
    public function getReviewsByProduct($productId) {
        $productReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review->getProductId() == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }


    /**
     * Calculate Average Rating
     *
     * @return float|null
     */
    public function calculateAverageRating() {
        if (empty($this->getAllReviews())) {
            return null; // No reviews to calculate from
        }

        $totalRating = 0;
        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review->getRating();
        }

        return $totalRating / count($this->getAllReviews());
    }
}


// --- Example Usage ---
// Create a Review Manager
$reviewManager = new UserReviewManager();

// Create some reviews
$review1 = new UserReview(null, 123, 456, 5, "Great product!");
$reviewManager->addReview($review1);

$review2 = new UserReview(null, 456, 456, 4, "Good, but could be better.");
$reviewManager->addReview($review2);

$review3 = new UserReview(null, 789, 456, 3, "Not what I expected.");
$reviewManager->addReview($review3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    $review->displayReview();
    echo "<br>";
}

// Get reviews for product 456
$product456Reviews = $reviewManager->getReviewsByProduct(456);
echo "<h2>Reviews for Product 456:</h2>";
foreach ($product456Reviews as $review) {
    $review->displayReview();
    echo "<br>";
}

// Calculate average rating
$averageRating = $reviewManager->calculateAverageRating();
echo "<h2>Average Rating: " . ($averageRating === null ? "No reviews to calculate from" : $averageRating) . "</h2>";
?>


<?php

/**
 * Class Review
 *
 * Handles creating, retrieving, updating, and deleting reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db Database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param string $product_id  The ID of the product the review is for.
     * @param string $user_id     The ID of the user who wrote the review.
     * @param string $rating      The rating given (e.g., 1-5).
     * @param string $comment     The review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function createReview(string $product_id, string $user_id, string $rating, string $comment) {
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        if ($stmt->execute()) {
            return $this->db->lastInsertId();
        } else {
            return null;
        }
    }


    /**
     * Retrieve a review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReview(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);

        if ($stmt->execute()) {
            return $stmt->fetch(PDO::FETCH_ASSOC); // Return as associative array
        } else {
            return null;
        }
    }

    /**
     * Retrieve all reviews for a product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of associative arrays, each representing a review.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        $reviews = [];
        if ($stmt->execute()) {
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }
        }
        return $reviews;
    }


    /**
     * Update an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $product_id  The ID of the product the review is for.
     * @param string $user_id     The ID of the user who wrote the review.
     * @param string $rating      The new rating.
     * @param string $comment     The new comment.
     * @return bool True on successful update, false on failure.
     */
    public function updateReview(int $review_id, string $product_id, string $user_id, string $rating, string $comment) {
        $sql = "UPDATE reviews
                SET product_id = :product_id,
                    user_id = :user_id,
                    rating = :rating,
                    comment = :comment
                WHERE id = :id";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        return $stmt->execute();
    }


    /**
     * Delete a review by its ID.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True on successful deletion, false on failure.
     */
    public function deleteReview(int $review_id) {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $review_id);

        return $stmt->execute();
    }
}

// Example usage (requires a database connection):
// Assuming you have a database connection object $db
// ...
// $reviews = new Review($db);
// $newReviewId = $reviews->createReview(123, 456, 5, "This product is amazing!");
// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId;
// } else {
//     echo "Error creating review.";
// }

// To get reviews for product ID 123:
// $reviews = $reviews->getReviewsByProduct(123);
// print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes basic functionality for creating, reading, updating, and deleting reviews.
 * 
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The content of the review.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param int $userId (Optional) The ID of the user submitting the review.  Used for updates.
 *
 * @return array An array containing the result of the operation.  
 *               Returns an error message on failure.
 */
function create_review(string $productName, string $reviewText, string $userEmail, string $rating, int $userId = null) {
    // Input Validation - Basic example, expand as needed
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if ($userId <= 0) {
        return ['error' => 'User ID must be a positive integer.'];
    }

    // In a real application, you'd store this in a database.  This is a simplified example.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'user_email' => $userEmail,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s'),
        'user_id' => $userId // Store the user ID for updating later
    ];

    // Simulate saving to a database (replace with your database connection code)
    // In this example, we store in an array called $reviews
    global $reviews; // Accessing the global $reviews array
    if (isset($reviews[$userId])) {
        //Update existing review
        $reviews[$userId] = $review;
    } else {
        $reviews[$userId] = $review;
    }



    return ['success' => true, 'review' => $review];
}


// Example Usage:

// Initialize an array to hold reviews
$reviews = [];  // Important: Create the global $reviews array

// Create a new review
$result = create_review('Awesome Product', 'Great product!', 'user@example.com', 5);

if ($result['success']) {
    echo "Review created successfully!
";
    print_r($result['review']); // Display the created review
} else {
    echo "Error creating review: " . $result['error'] . "
";
}


//Create another review
$result = create_review('Another Product', 'Pretty good!', 'another@example.com', 4, 1);

if ($result['success']) {
    echo "Review created successfully!
";
    print_r($result['review']); // Display the created review
} else {
    echo "Error creating review: " . $result['error'] . "
";
}

//Example update review
$result = create_review('Awesome Product', 'Updated review text!', 'user@example.com', 3, 1);
if ($result['success']) {
    echo "Review updated successfully!
";
    print_r($result['review']);
} else {
    echo "Error updating review: " . $result['error'] . "
";
}

// Display all reviews (simulated database retrieval)
echo "
All Reviews:
";
foreach ($reviews as $userId => $review) {
    echo "User ID: " . $userId . "
";
    print_r($review);
    echo "
---";
}

?>


// Example (using PDO - conceptual):
try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");
    $stmt = $pdo->prepare("INSERT INTO reviews (product_name, review_text, user_email, rating, user_id) VALUES (?, ?, ?, ?, ?)");
    $stmt->execute([$review['product_name'], $review['review_text'], $review['user_email'], $review['rating'], $review['user_id']]);
    // ... handle success or error
} catch (PDOException $e) {
    // Handle database errors
}


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple database (simulated for demonstration) and provides basic
 * functionality.  For production environments, consider a more robust database
 * and security measures.
 */

class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;
  private $created_at;
  private $updated_at;

  public function __construct($productId, $userId, $rating, $comment = '') {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->created_at = date('Y-m-d H:i:s');
    $this->updated_at = $this->created_at;
  }

  public function toArray() {
    return [
      'id' => $this->id,
      'productId' => $this->productId,
      'userId' => $this->userId,
      'rating' => $this->rating,
      'comment' => $this->comment,
      'createdAt' => $this->created_at,
      'updatedAt' => $this->updated_at,
    ];
  }

  public function getId() {
    return $this->id;
  }

  public function setId($id) {
    $this->id = $id;
  }
}



class ReviewManager {
  private $reviews = [];

  public function createReview($productId, $userId, $rating, $comment = '') {
    $review = new Review($productId, $userId, $rating, $comment);
    $this->reviews[] = $review;
    return $review;
  }

  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review = $this->reviews[$id]) {
        return $review;
      }
    }
    return null;
  }

  public function getAllReviewsForProduct($productId) {
    $reviews = [];
    foreach ($this->reviews as $review) {
      if ($review->getProductId() == $productId) {
        $reviews[] = $review;
      }
    }
    return $reviews;
  }

  // Implement update, delete methods if needed
}


// --- Example Usage ---

// Initialize the review manager
$reviewManager = new ReviewManager();

// Create some reviews
$review1 = $reviewManager->createReview(1, 1, 5, 'Excellent product!');
$review2 = $reviewManager->createReview(2, 2, 4, 'Good value for money.');
$review3 = $reviewManager->createReview(1, 3, 3, 'It\'s okay.');

// Get a review by ID
$review = $reviewManager->getReviewById(1);
if ($review) {
  echo "Review ID 1: ";
  print_r($review->toArray());
} else {
  echo "Review not found.";
}

// Get all reviews for product ID 1
$reviewsForProduct1 = $reviewManager->getAllReviewsForProduct(1);
echo "
Reviews for Product 1:
";
print_r($reviewsForProduct1);


//  --- Further Development Ideas ---
//  * **Database Integration:**  Use a database (MySQL, PostgreSQL, etc.) to store reviews.
//  * **Input Validation:**  Validate user input (e.g., rating must be between 1 and 5).
//  * **Error Handling:**  Implement proper error handling (e.g., handling database errors).
//  * **Authentication/Authorization:**  Add security measures to control who can create, update, or delete reviews.
//  * **Pagination:**  If you have a large number of reviews, implement pagination to improve performance.
//  * **Object-Relational Mapper (ORM):**  Consider using an ORM like Doctrine or Eloquent to simplify database interactions.
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 * It's a basic implementation and can be expanded with more features
 * (e.g., moderation, rating scales, image uploads).
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userID The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given for the product (1-5).
 *
 * @return array An array containing the review ID, or an error message if the review could not be saved.
 */
function createReview(string $productName, string $userID, string $reviewText, int $rating = 1) {
    // --- Input Validation ---
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($userID)) {
        return ['error' => 'User ID cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // --- Data Sanitization & Escaping (IMPORTANT!) ---
    $productName = htmlspecialchars($productName);  // Escape HTML tags
    $reviewText = htmlspecialchars($reviewText);   // Escape HTML tags
    $userID = htmlspecialchars($userID);

    // --- Data Storage (Simplified - Replace with Database Logic) ---
    // In a real application, you would save this data to a database.
    // This example uses an in-memory array for demonstration purposes.
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Load from session or initialize

    $reviewID = count($reviews) + 1; // Simple ID generation
    $review = [
        'reviewID' => $reviewID,
        'productName' => $productName,
        'userID' => $userID,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => time()
    ];

    $reviews[$reviewID] = $review;
    $_SESSION['reviews'] = $reviews; // Save back to session

    return [
        'success' => true,
        'reviewID' => $reviewID
    ];
}

/**
 * Display a Single Review
 *
 * Displays a single review's details.
 *
 * @param array $review The review data.
 */
function displayReview(array $review) {
    echo "<h3>Review for: " . $review['productName'] . "</h3>";
    echo "<p><strong>User:</strong> " . $review['userID'] . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
    echo "<p>" . $review['reviewText'] . "</p>";
}

/**
 * Display All Reviews for a Product
 *
 * Displays all reviews for a specific product.
 *
 * @param string $productName The product name.
 */
function displayProductReviews(string $productName) {
    // --- Retrieve Reviews (Replace with Database Query) ---
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : [];

    $productReviews = [];
    foreach ($reviews as $review) {
        if ($review['productName'] == $productName) {
            $productReviews[] = $review;
        }
    }

    // --- Display Reviews ---
    if (empty($productReviews)) {
        echo "<p>No reviews found for this product.</p>";
    } else {
        echo "<h3>Reviews for " . $productName . "</h3>";
        foreach ($productReviews as $review) {
            displayReview($review);
        }
    }
}

// --- Example Usage (Demonstration) ---
// 1. Create a Review
session_start(); // Start the session

$reviewResult = createReview('Awesome Gadget', 'user123', 'This is a fantastic gadget!');
if (isset($reviewResult['error'])) {
    echo "<p style='color:red;'>Error creating review: " . $reviewResult['error'] . "</p>";
} else {
    echo "<p style='color:green;'>Review created successfully. Review ID: " . $reviewResult['reviewID'] . "</p>";
}

// 2. Display Reviews for the Product
displayProductReviews('Awesome Gadget');
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current date and time
    }

    /**
     * Getters and Setters (Encapsulation)
     */

    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCommentLength() {
        return strlen($this->comment);
    }


    public function getDate() {
        return $this->date;
    }


    /**
     *  A simple method for representing the review as a string. Useful for debugging or display.
     *
     * @return string
     */
    public function __toString() {
        return "Review ID: " . $this->reviewId . ", Product ID: " . $this->productId . ", User ID: " . $this->userId . ", Rating: " . $this->rating . ", Comment: " . $this->comment . ", Date: " . $this->date;
    }
}

/**
 * User Review Function (Example Usage)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>" . $review . "</li>"; // Uses the __toString() method
    }
    echo "</ul>";
}

// Example Usage
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(456, 789, 4, "It's okay, but could be better.");
$review3 = new UserReview(789, 123, 3, "Not bad, but pricey.");

$allReviews = [$review1, $review2, $review3];

displayUserReviews($allReviews);

// Example of using the length method
echo "<p>Review 1 Length: " . $review1->getCommentLength() . "</p>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $product_id The unique ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5).
 * @param string $db_connection (Optional) - A database connection object. If not provided,
 *                                     the function will create a temporary connection.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully saved, False otherwise.
 *              - 'message': A message describing the outcome of the operation.
 *              - 'review_id': The ID of the newly created review, or the ID of the updated review.
 */
function saveReview(
    string $product_id,
    string $user_name,
    string $review_text,
    int    $rating,
    string $db_connection = null
): array {

    // Validate inputs (simple example, add more robust validation as needed)
    if (empty($product_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid review data. Please check your input values.',
        ];
    }

    // Database connection (if not provided, create a temporary one)
    if ($db_connection === null) {
        // Replace with your actual database connection setup here
        $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    }


    try {
        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
                VALUES (:product_id, :user_name, :review_text, :rating)";

        $stmt = $db_connection->prepare($sql);

        // Bind parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        // Get the ID of the newly inserted review
        $review_id = $db_connection->lastInsertId();

        return [
            'success' => true,
            'message' => 'Review saved successfully.',
            'review_id' => $review_id,
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Error saving review: ' . $e->getMessage(),
        ];
    }
}


// Example Usage:
// Assuming you have a database table named 'reviews' with columns:
// - id (INT, PRIMARY KEY, AUTO_INCREMENT)
// - product_id (VARCHAR)
// - user_name (VARCHAR)
// - review_text (TEXT)
// - rating (INT)

// $result = saveReview('123', 'John Doe', 'Great product!', 5);
// print_r($result);

// Example output:
// Array
// (
//     [success] => true
//     [message] => Review saved successfully.
//     [review_id] => 1
// )


//  To display the review (fetch from the database):
/*
$sql = "SELECT * FROM reviews WHERE product_id = '123' ORDER BY rating DESC LIMIT 1";
$stmt = $db_connection->prepare($sql);
$stmt->execute();
$review = $stmt->fetch(PDO::FETCH_ASSOC);

if ($review) {
    echo "Product ID: " . $review['product_id'] . "<br>";
    echo "User: " . $review['user_name'] . "<br>";
    echo "Review: " . $review['review_text'] . "<br>";
    echo "Rating: " . $review['rating'] . "<br>";
} else {
    echo "No reviews found for this product.";
}
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $userId (Optional) The ID of the user submitting the review.  Used for tracking and potentially moderation.
 * @param array  $reviews  (Optional) An array of existing reviews to display. Defaults to an empty array.
 *
 * @return array An array containing:
 *   - 'reviews': An array of all reviews (existing and new).
 *   - 'newReview': The new review submitted by the user (if any).
 *
 * Example Usage:
 * $reviews = getReview($productName, $reviewText, $userId);
 * print_r($reviews);
 */
function getReview(string $productName, string $reviewText, string $userId = '', array $reviews = []): array
{
  // Sanitize input (Basic - enhance with more robust validation as needed)
  $productName = trim($productName);
  $reviewText = trim($reviewText);

  //  Check for empty review text.  It's good practice to require at least some content.
  if (empty($reviewText)) {
    return ['reviews' => $reviews, 'newReview' => null];
  }

  // Create a new review object.  This allows you to store additional data later if needed.
  $newReview = [
    'userId' => $userId,
    'text' => $reviewText,
    'date' => date('Y-m-d H:i:s') // Add a timestamp
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  return ['reviews' => $reviews, 'newReview' => $newReview];
}


//  Example Usage (Demonstration)
$product = "Awesome Gadget X";
$review1 = "This gadget is fantastic!  I love it!";
$review2 = "It's okay, but a bit overpriced.";

// Get the first review
$reviews1 = getReview($product, $review1, "user123");
print_r($reviews1);
echo "<br>";

// Get the second review
$reviews2 = getReview($product, $review2, "user456");
print_r($reviews2);
echo "<br>";

//  Example with empty review (to show handling)
$reviews3 = getReview($product, "", "user789");
print_r($reviews3);
echo "<br>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $rating  The user's rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $db_connection  A connection object to your database (e.g., MySQLi).
 *
 * @return array An array containing the success status and any error messages.
 */
function saveUserReview(string $product_id, string $user_name, string $rating, string $comment, array $db_connection) {
  // Validate input (basic example - expand for more robust validation)
  if (empty($product_id) || empty($user_name) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }


  // Sanitize input to prevent SQL injection (VERY IMPORTANT!)
  $product_id = $db_connection->real_escape_string($product_id);
  $user_name = $db_connection->real_escape_string($user_name);
  $rating = (int)$rating; //Convert to integer
  $comment = $db_connection->real_escape_string($comment);

  // SQL Query
  $sql = "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES ('$product_id', '$user_name', '$rating', '$comment')";

  if ($db_connection->query($sql) === TRUE) {
    return ['success' => true, 'message' => 'Review submitted successfully!'];
  } else {
    return ['success' => false, 'message' => 'Error submitting review: ' . $db_connection->error];
  }
}


/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param array $db_connection A connection object to your database.
 *
 * @return array An array of reviews.  Returns an empty array if no reviews.
 */
function getProductReviews(string $product_id, array $db_connection) {
  $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = $db_connection->query($sql);

  if ($result->num_rows > 0) {
    $reviews = [];
    while($row = $result->fetch_assoc()) {
      $reviews[] = $row;
    }
    return $reviews;
  } else {
    return [];
  }
}


// Example Usage (Illustrative - Adapt to your database setup)

//  Dummy Database Connection (Replace with your actual connection)
$db_connection = new mysqli("localhost", "username", "password", "database_name");
if ($db_connection->connect_error) {
  die("Connection failed: " . $db_connection->connect_error);
}

// Example 1: Save a review
$review_result = saveUserReview("123", "John Doe", 4, "Great product!  Highly recommend.", $db_connection);
if ($review_result['success']) {
  echo "Review saved successfully: " . $review_result['message'] . "
";
} else {
  echo "Error saving review: " . $review_result['message'] . "
";
}


// Example 2: Get reviews for product ID "123"
$reviews = getProductReviews("123", $db_connection);

if (!empty($reviews)) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}


// Close the database connection (important!)
$db_connection->close();
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a given product or item.
 * It provides basic input validation and stores the review in a simple file.
 *
 * @param string $product_id  The unique identifier for the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param string $review_file Path to the file to store reviews in.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, string $review_file): bool
{
    // Input Validation
    if (empty($product_id)) {
        error_log("Invalid product ID: Product ID cannot be empty.");
        return false;
    }
    if (empty($user_name)) {
        error_log("Invalid user name: User name cannot be empty.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Invalid review text: Review text cannot be empty.");
        return false;
    }

    // Sanitize input to prevent XSS attacks
    $review_text = htmlspecialchars($review_text);

    // Create a review entry
    $review_entry = "Product ID: $product_id
";
    $review_entry .= "User: $user_name
";
    $review_entry .= "Review: $review_entry
";

    // Append the review to the file
    if (file_put_contents($review_file, $review_entry, FILE_APPEND)) {
        return true;
    } else {
        error_log("Failed to write review to file: $review_file");
        return false;
    }
}

// Example Usage:
$product_id = "P123";
$user_name = "John Doe";
$review_text = "This product is amazing!  I really enjoyed it.";
$review_file = "reviews.txt";

if (save_user_review($product_id, $user_name, $review_text, $review_file)) {
    echo "Review saved successfully!
";
} else {
    echo "Failed to save review.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, display, and potentially manage user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product or item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Should be validated.
 * @param string $comment The user's review comment.
 * @param array $dbConnection  (Optional) Database connection object.  If not provided, assumes a connection exists.
 *
 * @return array|false  Returns an array with the review ID and success status.  Returns false on error.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, $dbConnection = null) {
    // Input Validation - Very important!
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty."); // Log for debugging
        return false;
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Invalid Username.  Only alphanumeric characters and underscores are allowed.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Invalid Rating.  Must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    if (strlen($comment) > 1000) {
        error_log("Error: Comment exceeds maximum length of 1000 characters.");
        return false;
    }



    // --- Database Interaction ---
    $reviewId = null;
    try {
        if ($dbConnection === null) {
            // Assume a connection is already established (e.g., in a global scope)
            $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
        } else {
            $db = $dbConnection;
        }


        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        $reviewId = $db->lastInsertId();

        return ['review_id' => $reviewId, 'success' => true];

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Handle database errors appropriately (e.g., display an error message)
    }
}



// Example Usage (Illustrative)
// Assuming you have a database connection object named $db
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");


// $reviewResult = storeUserReview("123", "john_doe", 4, "Great product!  Highly recommended.", $db);

// if ($reviewResult) {
//     echo "Review submitted successfully! Review ID: " . $reviewResult['review_id'];
// } else {
//     echo "Error submitting review.";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic validation and data storage (using a file for simplicity).
 * 
 * @param string $productName The name of the product or service being reviewed.
 * @param string $userRating A rating from 1 to 5.
 * @param string $userComment The user's written review.
 * @param string $username The username of the reviewer.
 * 
 * @return array  An array containing the result of the review submission.
 *                 Returns an empty array on error.
 */
function submit_review(string $productName, string $userRating, string $userComment, string $username): array
{
    // Validate inputs - Basic, can be expanded for more robust validation
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (!preg_match('/^[1-5][0-9]*$/', $userRating)) {
        return ['error' => 'Invalid rating.  Please enter a number between 1 and 5.'];
    }
    if (empty($userComment)) {
        return ['error' => 'Review comment cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    
    // Sanitize inputs (Important for security - add more sanitization as needed)
    $productName = trim($productName);
    $userRating = (int) $userRating; // Convert to integer for easier manipulation
    $userComment = trim($userComment);
    $username = trim($username);
    
    // Create the review data
    $reviewData = [
        'product_name' => $productName,
        'user_rating' => $userRating,
        'user_comment' => $userComment,
        'username' => $username,
        'timestamp' => time() // Add a timestamp
    ];

    // Store the review in a file (for demonstration purposes - use a database for production)
    $filepath = "reviews.txt";
    $reviewString = json_encode($reviewData) . "
"; 
    
    if (file_put_contents($filepath, $reviewString, FILE_APPEND)) {
        return ['success' => 'Review submitted successfully!'];
    } else {
        return ['error' => 'Failed to save review to file.'];
    }
}



// Example Usage:
$product = "Amazing Coffee Maker";
$rating = 5;
$comment = "This coffee maker is fantastic! It brews the perfect cup every time.";
$user = "JohnDoe";

$result = submit_review($product, $rating, $comment, $user);

if (isset($result['success'])) {
    echo "<p>Review submitted successfully: " . $result['success'] . "</p>";
} elseif (isset($result['error'])) {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
} else {
    echo "<p>Unknown error occurred.</p>";
}


//  Example to retrieve and display the reviews (Demonstration)
function display_reviews(string $filepath) {
    $reviews = file($filepath, FILE_IGNORE_NEW_LINES);
    if (count($reviews) == 0) {
        echo "<p>No reviews found.</p>";
        return;
    }
    echo "<h2>Reviews:</h2>";
    foreach ($reviews as $review) {
        echo "<div class='review'>";
        echo "<strong>Product:</strong> " . json_decode($review, true)['product_name'] . "<br>";
        echo "<strong>Rating:</strong> " . json_decode($review, true)['user_rating'] . "<br>";
        echo "<strong>User:</strong> " . json_decode($review, true)['username'] . "<br>";
        echo "<strong>Comment:</strong> " . json_decode($review, true)['user_comment'] . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", json_decode($review, true)['timestamp']) . "<br>";
        echo "</div>";
    }
}

//  Call display_reviews() after submitting reviews.
// display_reviews("reviews.txt"); //Uncomment to see displayed reviews.  Ensure reviews.txt exists.
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view user reviews for a specific product or item.
 *
 * @param string $productId The unique identifier of the product or item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews An optional array of existing reviews to display.
 *
 * @return array An associative array containing the new review (if submitted) 
 *              and all existing reviews.
 */
function createAndDisplayReviews(string $productId, string $username, string $reviewText, array $reviews = []) {
  // Validation - Basic Input Validation (Expand as needed)
  if (empty($username)) {
    return ['error' => 'Username cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }

  // Add the new review
  $newReview = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'),
  ];
  $reviews[] = $newReview;

  // Sort reviews by timestamp (newest first) -  Useful for displaying recent reviews
  usort($reviews, function($a, $b) {
    return $b['timestamp'] <=> $a['timestamp'];
  });

  return $reviews;
}


// Example Usage:
$product_id = 'product123';

// Submit a new review
$reviews = createAndDisplayReviews($product_id, 'JohnDoe', 'This product is amazing!  I highly recommend it.');

if (isset($reviews['error'])) {
  echo "Error: " . $reviews['error'] . "<br>";
} else {
  echo "<h2>Reviews for Product: " . $product_id . "</h2>";
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li><strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . " (" . $review['timestamp'] . ")</li>";
  }
  echo "</ul>";
}


// Example with an empty review
$reviews = createAndDisplayReviews($product_id, 'JaneSmith', "");
if (isset($reviews['error'])) {
    echo "Error: " . $reviews['error'] . "<br>";
}

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db_connection = null; // Database connection (optional)

    /**
     * Constructor
     *
     * Initializes the UserReview object.  Optionally connects to a database.
     *
     * @param PDO $dbConnection  (Optional)  A PDO object for database connections.
     *                           If not provided, the class will not interact with a database.
     */
    public function __construct(PDO $dbConnection = null)
    {
        $this->reviews = [];
        $this->db_connection = $dbConnection;
    }

    /**
     * Add a new review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $userName The name of the user writing the review.
     * @param string $reviewText The text of the review.
     * @param int $rating The rating (e.g., 1-5).
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating)
    {
        // Validation (basic - expand as needed)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $reviewId = $this->generateReviewId();

        $review = [
            'reviewId' => $reviewId,
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'rating' => $rating,
            'timestamp' => time()
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Generate a unique review ID.  A simple counter for demonstration.  
     * In a real application, you'd use a database-generated ID.
     *
     * @return int A unique review ID.
     */
    private function generateReviewId(): int
    {
        static $reviewIdCounter = 1;
        return $reviewIdCounter++;
    }


    /**
     * Get all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }


    /**
     * Update a review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newReviewText The new text of the review.
     * @return bool True on success, false on failure (e.g., review not found).
     */
    public function updateReview(int $reviewId, string $newReviewText): bool
    {
        $review = $this->getReviewById($reviewId);
        if ($review === null) {
            return false;
        }

        $review['reviewText'] = $newReviewText;
        return true;
    }


    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if review not found.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['reviewId'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Clear all reviews.  Use with caution!
     */
    public function clearAllReviews(): void
    {
        $this->reviews = [];
    }

    // Example method to output reviews (for demonstration purposes)
    public function displayReviews()
    {
        echo "<pre>";
        foreach ($this->reviews as $review) {
            echo "Review ID: " . $review['reviewId'] . "
";
            echo "Product ID: " . $review['productId'] . "
";
            echo "User: " . $review['userName'] . "
";
            echo "Review: " . $review['reviewText'] . "
";
            echo "Rating: " . $review['rating'] . "
";
            echo "Timestamp: " . $review['timestamp'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}

// Example Usage
// Create an instance of the UserReview class
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(1, "John Doe", "Great product!", 5);
$reviewSystem->addReview(1, "Jane Smith", "Could be better.", 3);
$reviewSystem->addReview(2, "Peter Jones", "Amazing!", 5);

// Display all reviews
$reviewSystem->displayReviews();

// Get reviews for product 1
$product1Reviews = $reviewSystem->getReviewsForProduct(1);
echo "<br>Reviews for product 1:<br>";
echo "<pre>";
print_r($product1Reviews);
echo "</pre>";

// Update a review
if ($reviewSystem->updateReview(1, "Fantastic product - highly recommended!") ) {
    echo "<br>Review for product 1 updated.<br>";
} else {
    echo "<br>Failed to update review.<br>";
}

// Delete a review
if ($reviewSystem->deleteReview(2)) {
    echo "<br>Review deleted.<br>";
} else {
    echo "<br>Failed to delete review.<br>";
}

// Display all reviews again
$reviewSystem->displayReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It provides basic data sanitization and validation.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array  $db_connection  Database connection object (optional, for external connection)
 *
 * @return array An array containing:
 *   - 'success': True if the operation was successful, False otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review (if creation was successful).
 *   - 'review': The review object (if creation or update was successful).
 */
function create_user_review(
    string $productId,
    string $user_id,
    string $rating,
    string $comment,
    array $db_connection = null // Optional database connection
) {
    // Validation and Sanitization (Important for security!)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    if (empty($productId) || empty($user_id) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
            'review_id' => null,
            'review' => null,
        ];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        return [
            'success' => false,
            'message' => 'Error preparing statement.',
            'review_id' => null,
            'review' => null,
        ];
    }

    // Bind parameters
    $stmt->bind_param("sii", $productId, $user_id, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        return [
            'success' => false,
            'message' => 'Error executing query: ' . $stmt->error,
            'review_id' => null,
            'review' => null,
        ];
    }

    // Get the last inserted ID
    $review_id = $db_connection->insert_id;

    // Get the newly created review (optional - can be returned separately if needed)
    $review = [
        'review_id' => $review_id,
        'product_id' => $productId,
        'user_id' => $user_id,
        'rating' => $rating,
        'comment' => $comment,
    ];

    // Close the statement
    $stmt->close();

    return [
        'success' => true,
        'message' => 'Review created successfully.',
        'review_id' => $review_id,
        'review' => $review,
    ];
}


/**
 * Example Usage (Illustrative - assumes a database connection is already established)
 */
// Example Database Connection (Replace with your actual connection details)
$db_connection = new mysqli("localhost", "username", "password", "database_name");

if ($db_connection->connect_error) {
    die("Connection failed: " . $db_connection->connect_error);
}

// Create a review
$review_result = create_user_review(
    "123", // Product ID
    "user123", // User ID
    3,       // Rating
    "Great product!", // Comment
);

if ($review_result['success']) {
    echo "Review created successfully! ID: " . $review_result['review_id'] . "<br>";
} else {
    echo "Error creating review: " . $review_result['message'] . "<br>";
}
// Close the connection (Important!)
$db_connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the user submitting the review.
 * @param int $rating (Optional)  A rating from 1-5. Defaults to 0.
 *
 * @return array  An array containing the review data, or an error message if the review fails.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName, int $rating = 0) {

  // Input validation - basic checks
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }
  if (empty($reviewerName)) {
    return ['status' => 'error', 'message' => 'Reviewer name cannot be empty.'];
  }

  // Validation for rating if provided
  if ($rating < 1 || $rating > 5) {
    return ['status' => 'error', 'message' => 'Rating must be between 1 and 5.'];
  }


  // Store the review (Simulating a database insert - replace with your database logic)
  $review = [
    'product_id' => $productId,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp
  ];

  //Simulate database insertion. In a real application, use a database query.
  //This example just returns the review.
  return $review;

}

/**
 * Display Reviews Function
 *
 * This function takes an array of reviews and displays them in a user-friendly format.
 *
 * @param array $reviews An array of review data (as returned by submitReview).
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Assuming product ID is in the first element of the array.

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer_name']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
    }
    echo "</ul>";
}

// Example Usage:
$product_id = "123";

// Submit a review
$review_data = submitReview($product_id, "This is a fantastic product!", "John Doe", 5);

if ($review_data['status'] === 'success') {
    echo "<h2>Review Submitted Successfully!</h2>";
    echo "<p>Review ID: " . $review_data['id'] . "</p>";  // Assuming you've added a unique ID
} else {
    echo "<p style='color: red;'>Error submitting review: " . $review_data['message'] . "</p>";
}

// Display the review
displayReviews($review_data);

// Example of submitting an invalid review
$invalid_review = submitReview($product_id, "", "Jane Smith");
if ($invalid_review['status'] === 'error') {
    echo "<p style='color: red;'>Error submitting review: " . $invalid_review['message'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, sanitizes the input,
 * stores it in a database (or an array for testing),
 * and potentially performs some basic validation.
 *
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param string $rating A numeric rating (e.g., 1-5).
 * @param string $email The user's email address (optional, for confirmation).
 * @param string $db_connection (optional) - Connection to your database.
 * @return array|string  Returns an array of review data or an error message string.
 */
function process_user_review(string $name, string $comment, string $rating, string $email = null, $db_connection = null)
{
    // Sanitize Input - IMPORTANT for security!
    $name = htmlspecialchars(trim($name));
    $comment = htmlspecialchars(trim($comment));
    $rating = (int) $rating; // Cast to integer for validation.  Handles invalid input gracefully.

    // Validation - Basic examples
    if (empty($name) || empty($comment)) {
        return "Error: Name and comment cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Create Review Data (for database storage or temporary storage)
    $review_data = [
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s'), // Add a timestamp for each review
        'email' => $email,
    ];

    // --- Database Interaction (Example - Adjust to your database setup) ---
    if ($db_connection) {
        try {
            // Assuming you have a database connection object called $db_connection
            //  This is a very basic example - adapt to your database schema.
            //  Error handling is crucial in a production environment.

            // Example using prepared statements (highly recommended)
            $sql = "INSERT INTO reviews (name, comment, rating, date, email) VALUES (?, ?, ?, ?, ?)";
            $stmt = $db_connection->prepare($sql);
            $stmt->execute([$name, $comment, $rating, date('Y-m-d H:i:s'), $email]);

            return ['success' => true, 'review_id' => $db_connection->lastInsertId()];  // Return review ID

        } catch (Exception $e) {
            return "Error: Database error - " . $e->getMessage();
        }

    } else {
        // Store in an array (for testing without a database)
        // You could also use a file, cache, etc.
        //  Example:
        //  $reviews[] = $review_data;
        return $review_data; // Return review data directly
    }
}



// --- Example Usage ---

// 1. Testing without a database:
$review = process_user_review("John Doe", "Great product!", 5);
print_r($review);

// 2.  With a database connection (replace with your actual connection details)
//  This assumes a database connection named `$db_connection`
//  You'll need to establish the connection first.
// $db_connection = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// $review = process_user_review("Jane Smith", "Could be better.", 3, "jane.smith@example.com");

// if ($review === ['success' => true]) {
//     echo "Review submitted successfully! Review ID: " . $review['review_id'] . "
";
// } else {
//     echo "Error: " . $review;
// }


?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for creating, storing, and displaying user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId; // Assuming a product ID is associated with the review
    private $rating;
    private $comment;
    private $createdAt;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating   The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->createdAt = date('Y-m-d H:i:s'); // Timestamp of review creation
    }

    /**
     * Getters and Setters (for data access)
     *
     * Public methods to access and modify the review's properties.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getCreatedAt() {
        return $this->createdAt;
    }

    /**
     * Display the review in a user-friendly format.
     *
     * @return string The review as a formatted string.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Created At: " . $this->getCreatedAt();
    }
}


/**
 * User Review Function Example
 */

// Create a new review object
$review = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");

// Display the review
echo $review->displayReview() . "
";

// Demonstrating setting properties after creation
$review->setRating(4);
echo "
Updated Review:
";
echo $review->displayReview() . "
";

// ---  Simulated Database Interaction (Replace with your actual database code) ---
// In a real application, you would save this to a database.
// For example:
// $db = new DatabaseConnection();
// $db->insertReview($review);

// --- End of Simulated Database Interaction ---
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It includes basic validation and error handling.
 *
 * @param string $product_id  The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $review_text The text of the review.
 * @return array  An array containing:
 *                - 'success':  True if the review was submitted successfully, False otherwise.
 *                - 'message':   A message indicating the result of the operation.
 *                - 'review':    The submitted review (if successful).
 */
function submit_review(string $product_id, string $username, string $review_text) {
    // Basic validation -  Important for security and data integrity
    if (empty($product_id) || empty($username) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Error: All fields are required.',
            'review' => null
        ];
    }

    if (strlen($review_text) > 1000) {
        return [
            'success' => false,
            'message' => 'Error: Review text exceeds maximum length (1000 characters).',
            'review' => null
        ];
    }

    // Simulate saving the review to a database (replace with your database logic)
    // In a real application, you would connect to your database and insert the data.
    // This is just a placeholder.
    $review = [
        'product_id' => $product_id,
        'username' => $username,
        'review_text' => $review_text,
        'timestamp' => time()
    ];

    //  Simulate successful save
    $success = true;
    $message = 'Review submitted successfully!';

    return [
        'success' => $success,
        'message' => $message,
        'review' => $review
    ];
}



/**
 * Displays reviews for a given product.
 *
 * @param array $reviews An array of review objects, as returned by submit_review.
 */
function display_reviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Assuming the product ID is always the first element.

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>"; // Sanitize output
            echo "<p><strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "</p>";
            echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:

// Submit a review
$review_result = submit_review("123", "John Doe", "This is a fantastic product! I highly recommend it.");

if ($review_result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review Data: " . print_r($review_result['review'], true) . "</p>";  // Display review data
} else {
    echo "<p>Error submitting review: " . $review_result['message'] . "</p>";
}

// Display the reviews
$reviews = [];
$review_result = submit_review("123", "Jane Smith", "Excellent value for money.");
if ($review_result['success']) {
    $reviews[] = $review_result['review'];
}

$review_result = submit_review("123", "Peter Jones", "Could be better...");
if ($review_result['success']) {
    $reviews[] = $review_result['review'];
}
display_reviews($reviews);



?>


<?php

/**
 * User Review Class - Handles user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (optional, auto-generated)
     * @param int $productId
     * @param int $userId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $productId, $userId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters and Setters for the properties.
     */

    public function getReviewId() {
        return $this->reviewId;
    }

    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            // Handle invalid rating (e.g., throw an exception or set to default)
            throw new InvalidArgumentException("Rating must be between 1 and 5.");
        }
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Method to display the review information (for review display)
     *
     * @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() . "
" .
               "Product ID: " . $this->getProductId() . "
" .
               "User ID: " . $this->getUserId() . "
" .
               "Rating: " . $this->getRating() . "
" .
               "Comment: " . $this->getComment() . "
" .
               "Date: " . $this->getDate();
    }
}


/**
 * User Review Review Function (Simplified Review System)
 */
function displayReviewFunction($reviews) {
    echo "<br><h2>User Reviews</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    foreach ($reviews as $review) {
        echo "<br><h3>Review by User ID: " . $review->getUserId() . "</h3>";
        echo $review->displayReview();
        echo "<br>";
    }
}

// Example Usage:

// Create some review objects
$review1 = new UserReview(null, 123, 1, 5, "Great product! Highly recommended.");
$review2 = new UserReview(null, 456, 2, 4, "Good value for money.");
$review3 = new UserReview(null, 123, 3, 3, "It's okay.");


// Store the reviews in an array
$reviews = [$review1, $review2, $review3];


// Call the displayReviewFunction
displayReviewFunction($reviews);

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a given item.
 *
 *  @param string $item_id - The unique identifier for the item being reviewed.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the review.
 *  @param int $rating - The rating given by the user (e.g., 1-5).
 *  @param string $db_connection -  A database connection object (e.g., mysqli or PDO).
 *
 *  @return void
 */
function storeUserReview(string $item_id, string $user_name, string $review_text, int $rating, $db_connection)
{
    // Sanitize and validate inputs (VERY IMPORTANT)
    $item_id = mysqli_real_escape_string($db_connection, $item_id); // or your appropriate escape function
    $user_name = mysqli_real_escape_string($db_connection, $user_name);
    $review_text = mysqli_real_escape_string($db_connection, $review_text);
    $rating = (int)$rating;  // Cast to integer for database storage

    // Ensure rating is within valid range (1-5 in this example)
    if ($rating < 1 || $rating > 5) {
        // Handle invalid rating (e.g., display error, log error, default to 1)
        error_log("Invalid rating provided: " . $rating);
        $rating = 1; // Default to 1 if invalid
    }


    // SQL Query - Use parameterized queries to prevent SQL injection
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES ('$item_id', '$user_name', '$review_text', $rating)";

    if (mysqli_query($db_connection, $sql)) {
        // Review successfully added
        echo "Review submitted successfully!
";
    } else {
        // Handle error (e.g., log the error, display an error message)
        error_log("Error adding review: " . mysqli_error($db_connection));
        echo "Error adding review. Please try again later.
";
    }
}



// Example Usage (assuming you have a database connection)
// In a real application, you'd get these values from a form
// $item_id = 'product123';
// $user_name = 'John Doe';
// $review_text = 'This product is amazing!';
// $rating = 5;

// //  Establish database connection (replace with your database credentials)
// $db_connection = mysqli_connect("localhost", "your_username", "your_password", "your_database");

// // Check connection
// if (mysqli_connect_errno($db_connection)) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error($db_connection);
// } else {
//     storeUserReview('product123', 'John Doe', 'This product is amazing!', 5, $db_connection);
// }
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews for a given product.
 *
 * @param string $productId The ID of the product for which to display reviews.
 * @param string $username The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array of existing reviews for the product (optional).  If not provided, a new array is created.
 *
 * @return array An array containing all reviews for the product.  Returns an empty array if the product
 *              doesn't exist or if an error occurs during saving.
 */
function createAndDisplayUserReview(string $productId, string $username, string $reviewText, array $reviews = []): array
{
    // Validate input (add more validation as needed)
    if (empty($productId) || empty($username) || empty($reviewText)) {
        return []; // Return empty array for invalid input
    }

    // Add the new review to the array
    $reviews[] = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => date('Y-m-d H:i:s') // Add timestamp for better ordering and tracking
    ];

    // Sort the reviews by timestamp (newest first)
    usort($reviews, function ($a, $b) {
        return $b['timestamp'] <=> $a['timestamp'];
    });

    // Display the reviews (optional - can be moved to a separate function)
    echo "<p><b>New Review:</b> " . htmlspecialchars($reviewText) . "</p>";
    echo "<p><b>Posted by:</b> " . htmlspecialchars($username) . "</p>";
    echo "<p><b>Timestamp:</b> " . htmlspecialchars($reviews[count($reviews) - 1]['timestamp']) . "</p>";
    echo "<hr>";

    return $reviews;
}



// Example Usage (Demonstration)
$productID = '123';  // Replace with a real product ID

// Create some initial reviews for demonstration
$reviews = [
    ['productId' => '123', 'username' => 'John Doe', 'reviewText' => 'Great product!', 'timestamp' => date('Y-m-d H:i:s')],
    ['productId' => '123', 'username' => 'Jane Smith', 'reviewText' => 'Excellent value for money.', 'timestamp' => date('Y-m-d H:i:s')],
];

// Create a new review
$newReview = createAndDisplayUserReview($productID, 'Peter Jones', 'This is fantastic!  I highly recommend it.');

// Add another review
$newReview2 = createAndDisplayUserReview($productID, 'Alice Brown', 'It works perfectly!');

// Display all reviews
echo "<h2>All Reviews for Product " . $productID . ":</h2>";
echo "<ul>";
foreach ($reviews as $review) {
    echo "<li>" . htmlspecialchars($review['username']) . ": " . htmlspecialchars($review['reviewText']) . " - " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";



?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $review_id (Optional) - Unique ID for the review. If not provided, auto-generated.
     * @param int $user_id   The ID of the user who wrote the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating     The rating (e.g., 1-5).
     * @param string $comment The review comment.
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->review_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review (for demonstration)
     */
    public function displayReview() {
        echo "<p><strong>Review ID:</strong> " . $this->getReviewId() . "</p>";
        echo "<p><strong>User ID:</strong> " . $this->getUserID() . "</p>";
        echo "<p><strong>Product ID:</strong> " . $this->getProductID() . "</p>";
        echo "<p><strong>Rating:</strong> " . $this->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $this->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $this->getDate() . "</p>";
    }
}

/**
 * User Review Function (Demonstration)
 */
function createReview($review_id = null, $user_id, $product_id, $rating, $comment) {
    // Validate inputs (Example - improve as needed)
    if (!$user_id || !$product_id || $rating < 1 || $rating > 5 || !$comment) {
        return false; // Indicate failure
    }

    $review = new UserReview($review_id, $user_id, $product_id, $rating, $comment);
    return $review;
}

// Example Usage
$review1 = createReview(null, 123, 456, 4, "Great product!  I loved it.");
$review1->displayReview();

$review2 = createReview(101, 456, 789, 5, "Excellent value for money.");
$review2->displayReview();

$review3 = createReview(null, 789, 101, 3, "It was okay, nothing special.");
$review3->displayReview();

// Example with invalid input
$review_invalid = createReview(null, 101, 112, 6, "Invalid Review");
if (!$review_invalid) {
    echo "<p>Review creation failed.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewerName The name of the user who wrote the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  (Optional)  The rating given by the user (e.g., 1-5). Defaults to 0.
 * @param int $userId (Optional) The unique ID of the user.  Used for database integration.
 *
 * @return bool|string Returns true on success, or an error message string on failure.
 */
function createReview(string $productName, string $reviewerName, string $reviewText, int $rating = 0, int $userId = 0)
{
    // Input validation -  Important for security and data integrity
    if (empty($productName) || empty($reviewerName) || empty($reviewText)) {
        return "Error: Product Name, Reviewer Name, and Review Text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }
    if ($userId <= 0) {
        return "Error: User ID must be a positive integer.";
    }
    // ---------------------------------------------------------------------
    //  Here, you would typically interact with a database
    //  to store the review data.  This is a simplified example
    //  for demonstration purposes.
    // ---------------------------------------------------------------------

    // Example:  Store the review in a simple array (Replace with database interaction)
    $reviews = [];
    if (isset($_SESSION['reviews'])) {
        $reviews = $_SESSION['reviews']; // Use session storage if available.  Better than global variables.
    }


    $newReview = [
        'product' => $productName,
        'reviewer' => $reviewerName,
        'text' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking.
        'userId' => $userId
    ];
    $reviews[] = $newReview;
    $_SESSION['reviews'] = $reviews; // Store in session
    return true;

    // ---------------------------------------------------------------------
    //  Example Database Interaction (Conceptual - requires database setup)
    //  This is commented out because it needs database credentials and setup.
    //  Uncomment and modify to use a database.
    /*
    try {
        // Connect to the database (replace with your database credentials)
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

        // Prepare and execute the SQL query
        $stmt = $db->prepare("INSERT INTO reviews (product_name, reviewer_name, review_text, rating, timestamp, userId) 
                               VALUES (:product_name, :reviewer_name, :review_text, :rating, :timestamp, :userId)");
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':reviewer_name', $reviewerName);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':timestamp', $timestamp);
        $stmt->bindParam(':userId', $userId);

        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database Error: " . $e->getMessage());  //Log the error for debugging
        return "Error: Could not save review to database.  " . $e->getMessage();
    }
    */
}


// Example Usage:
// Create a review
$result = createReview("Awesome Widget", "John Doe", "This widget is fantastic!", 5);

if ($result === true) {
    echo "Review created successfully!";
} else {
    echo $result; // Display the error message
}

// Another example
$result2 = createReview("Another Product", "Jane Smith", "Good but could be better", 3, 123);
if ($result2 === true) {
    echo "<br> Review created successfully!";
} else {
    echo "<br>" . $result2;
}

?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic system for storing and displaying user reviews.
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $rating;
    private $comment;
    private $date_created;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $user_id The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($user_id, $rating, $comment) {
        $this->review_id = null; // Will be assigned by the database
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_created = date("Y-m-d H:i:s"); // Current timestamp
    }

    /**
     * Getters and Setters (for encapsulation)
     */

    public function getReviewId() {
        return $this->review_id;
    }

    public function setReviewId($review_id) {
        $this->review_id = $review_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCommentLength() {
        return strlen($this->comment);
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     * Display the review as a formatted string.
     *
     * @return string The formatted review string.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserID() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date Created: " . $this->date_created;
    }
}



/**
 * User Review Review Function - Example Usage
 */

function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>" . $review->displayReview() . "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Create some review objects
$review1 = new UserReview(123, 5, "Great product!  Highly recommended.");
$review1->setReviewId(1);

$review2 = new UserReview(456, 3, "It was okay, but could be better.");
$review2->setReviewId(2);


$review3 = new UserReview(789, 4, "Excellent value for the money!");
$review3->setReviewId(3);



// Store the reviews (this would typically involve database interaction)
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic data validation and sanitization.
 *
 * @param string $review_text The user's review text.
 * @param int $product_id The ID of the product the review is for.
 * @param int $user_id  (Optional) The ID of the user making the review.  If not provided, a new user is created.
 * @param int $rating The rating given for the product (e.g., 1-5).
 * @return array|string Returns an array on success, or an error message string on failure.
 */
function create_user_review(string $review_text, int $product_id, int $rating, int $user_id = null)
{
    // --- Validation and Sanitization ---
    $review_text = trim($review_text); // Remove leading/trailing whitespace
    if (empty($review_text)) {
        return "Error: Review text cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // --- Database Interaction (Simulated for this example) ---
    // In a real application, you would replace this with actual database queries.

    // Simulate a user object if the user_id is not provided
    $user = $user_id ? get_user_by_id($user_id) : create_new_user();

    // Example data for the review (in a real implementation, you'd use a proper database connection)
    $review_data = [
        'user_id' => $user ? $user['id'] : null, // User ID from the user object
        'product_id' => $product_id,
        'review_text' => $review_text,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Timestamp
    ];


    // --- Save the Review ---
    $review_id = save_review($review_data);

    if ($review_id === null) {
        return "Error: Could not save review.";
    }

    return [
        'success' => true,
        'review_id' => $review_id
    ];
}


/**
 *  Simulated Database Functions (Replace with your actual database logic)
 */

/**
 *  Simulates getting a user by ID
 */
function get_user_by_id(int $user_id)
{
    // In a real application, query the database.
    // This is just a placeholder.
    // Returns a dummy user object.
    return [
        'id' => $user_id,
        'username' => 'user' . $user_id,
        'email' => 'user' . $user_id . '@example.com'
    ];
}


/**
 * Simulates creating a new user.
 */
function create_new_user()
{
    // In a real application, you'd insert the new user into the database.
    // This returns a dummy user object.
    return [
        'id' => 123,
        'username' => 'newuser',
        'email' => 'newuser@example.com'
    ];
}


/**
 *  Simulates saving a review to a database.  Returns the review id.
 */
function save_review(array $review_data)
{
  // In a real implementation, this would execute a SQL query to insert the review.
  // This is a placeholder.
    // Simulate a successful save.
    return 42; // Return a valid review ID (could be the primary key from the database).
}


/**
 *  Example usage:
 */
// Example 1: Successful review creation
$result = create_user_review("This product is amazing!", 1, 5);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}


// Example 2: Invalid rating
$result = create_user_review("Good product.", 2, 6);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}

// Example 3: Empty review text
$result = create_user_review("", 3, 4);
if ($result) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo $result . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a given product or item.
 * It includes input validation, sanitization, and basic display functionality.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param array $reviews An array of user review objects.
 *                     Each review object should have 'user' and 'comment' properties.
 * @return string HTML formatted display of user reviews.  Returns an error message if input is invalid.
 */
function displayUserReviews(string $productName, array $reviews)
{
    // Input Validation and Sanitization (Crucial for Security!)
    if (empty($productName)) {
        return "<p style='color:red;'>Error: Product name cannot be empty.</p>";
    }

    if (!is_array($reviews)) {
        return "<p style='color:red;'>Error: Reviews must be an array.</p>";
    }

    foreach ($reviews as $review) {
        if (!is_object($review) || !isset($review->user) || !isset($review->comment)) {
            return "<p style='color:red;'>Error: Each review must be an object with 'user' and 'comment' properties.</p>";
        }
    }

    // HTML Formatting
    $html = "<div class='user-reviews'>";
    $html .= "<h2>Reviews for {$productName}</h2>";

    if (empty($reviews)) {
        $html .= "<p>No reviews yet. Be the first to review!</p>";
    } else {
        foreach ($reviews as $review) {
            $html .= "<div class='review'>";
            $html .= "<p class='review-user'><strong>User:</strong> {$review->user}</p>";
            $html .= "<p class='review-comment'><em>{$review->comment}</em></p>";
            $html .= "</div>";
        }
    }

    $html .= "</div>";

    return $html;
}


// Example Usage:

// Sample Reviews (Replace with actual data)
$reviews = [
    (object) [
        'user' => 'John Doe',
        'comment' => 'Great product!  Easy to use and works perfectly.'
    ],
    (object) [
        'user' => 'Jane Smith',
        'comment' => 'I love this!  Highly recommend.'
    ],
    (object) [
        'user' => 'Peter Jones',
        'comment' => 'Could be better, but overall a good value.'
    ]
];

// Call the function
$reviewHtml = displayUserReviews("Awesome Widget", $reviews);

// Output the HTML (for demonstration - you'd typically display this in a web page)
echo $reviewHtml;


// Example of an error case:
$errorHtml = displayUserReviews("", $reviews);
echo "<br><br>Error Example:<br>" . $errorHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  An established database connection object.
 *
 * @return array  An array containing success status and potentially the ID of the new review.
 */
function createReview(string $productId, string $username, string $rating, string $comment, array $dbConnection) {
  // Input validation (basic) - enhance this for production
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.'];
  }


  // Prepare the SQL query - IMPORTANT: Use prepared statements to prevent SQL injection!
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
           VALUES (?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $dbConnection->prepare($sql);

  if ($stmt === false) {
    return ['success' => false, 'message' => 'Database error preparing statement.'];
  }

  // Bind the parameters
  $stmt->bind_param("ssis", $productId, $username, $rating, $comment);  // s = string, i = integer, s = string

  // Execute the query
  if ($stmt->execute() === false) {
    return ['success' => false, 'message' => 'Database error executing query: ' . $stmt->error];
  }

  // Get the last inserted ID (if supported by your database)
  $reviewId = $dbConnection->insert_id; //  This might not work on all databases
  
  // Close the statement
  $stmt->close();

  return ['success' => true, 'review_id' => $reviewId];
}



/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $productId The product ID.
 * @param array $dbConnection An established database connection.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $productId, array $dbConnection) {
    $sql = "SELECT id, product_id, username, rating, comment, created_at
            FROM reviews
            WHERE product_id = ?
            ORDER BY created_at DESC"; //  Order by date for the most recent reviews

    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['reviews' => []]; // Return empty array in case of error.
    }

    $stmt->bind_param("s", $productId);

    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();

    return $reviews;
}

// Example Usage (Illustrative - Adapt to your setup)
// Assuming you have a database connection object named $conn

// Create a review
//$review_data = createReview("product_123", "JohnDoe", 4, "Great product!", $conn);
//print_r($review_data);

// Retrieve reviews for a product
//$reviews = getReviewsForProduct("product_123", $conn);
//print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function takes user review data and stores it in a database.
 * It also handles basic validation and error reporting.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The content of the review.
 * @param int $product_id The ID of the product the review is for.
 * @param int $rating  The rating provided by the user (1-5).
 * @return bool True on successful submission, false on failure.
 */
function submit_review(string $username, string $reviewText, int $product_id, int $rating) {
  // **Validation** -  Crucial for security and data integrity
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");  // Log the error for admin review
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  // **Database Interaction -  Replace with your actual database connection**
  try {
    // Connect to your database (replace with your database connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (user_name, review_text, product_id, rating) VALUES (:username, :review, :prod_id, :rate)");

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review', $reviewText);
    $stmt->bindParam(':prod_id', $product_id);
    $stmt->bindParam(':rate', $rating);

    // Execute the statement
    $stmt->execute();

    // Return success
    return true;

  } catch (PDOException $e) {
    // Handle database errors - Log for debugging
    error_log("Database Error: " . $e->getMessage());
    return false;
  }
}

// **Example Usage**
$username = "John Doe";
$reviewText = "This product is amazing! I highly recommend it.";
$product_id = 123;
$rating = 5;

if (submit_review($username, $reviewText, $product_id, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}


?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to process and store user reviews.
 * It handles input validation, sanitization, and basic formatting.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating A numeric rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $product_id The ID of the product being reviewed.
 * 
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function processReview(string $username, string $rating, string $comment, int $product_id) {
    // Input Validation and Sanitization
    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }
    if (empty($comment)) {
        return "Error: Comment cannot be empty.";
    }
    if (!is_int($product_id) || $product_id <= 0) {
        return "Error: Product ID must be a positive integer.";
    }

    // Sanitize input (more robust sanitization would be needed in a real application)
    $username = trim($username);
    $comment = trim($comment);

    // Format the review (example - you can customize this)
    $formatted_review = "Review by: " . $username . "<br>" .
                         "Rating: " . $rating . "<br>" .
                         "Comment: " . $comment . "<br>";

    // Save the review to a database (example)
    // Replace this with your actual database code
    try {
        // Assuming you have a database connection established
        // (e.g., using PDO or mysqli)
        // $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        // $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
        // $stmt->execute([$product_id, $username, $rating, $comment]);

        // Example placeholder -  Replace this with your database interaction
        $reviews = json_encode([
          "username" => $username,
          "rating" => $rating,
          "comment" => $comment,
          "product_id" => $product_id
        ]);
        
        return true; // Indicate success
    } catch (Exception $e) {
        return "Error saving review: " . $e->getMessage();
    }
}


// Example usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  I really enjoyed it.";
$product_id = 123;

$result = processReview($username, $rating, $comment, $product_id);

if ($result === true) {
    echo "Review submitted successfully!";
} else {
    echo "Error: " . $result;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $userName  The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating   The rating given by the user (e.g., 1-5).
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing success/failure status and optionally the review ID.
 */
function createReview(
    string $productId,
    string $userName,
    string $reviewText,
    int $rating,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Validation (You can customize this based on your requirements)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID is required.'];
    }
    if (empty($userName)) {
        return ['success' => false, 'message' => 'User name is required.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text is required.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    try {
        // Database connection (using PDO - a recommended practice)
        $dsn = "mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4";
        $options = [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Return results as associative arrays
        ];
        $pdo = new PDO($dsn, $dbUser, $dbPassword, $options);

        // Prepare the SQL statement
        $stmt = $pdo->prepare(
            "INSERT INTO reviews (productId, userName, reviewText, rating) VALUES (?, ?, ?, ?)"
        );

        // Bind the parameters
        $stmt->execute([$productId, $userName, $reviewText, $rating]);

        // Get the last inserted ID
        $reviewId = $pdo->lastInsertId();

        return ['success' => true, 'reviewId' => $reviewId, 'message' => 'Review created successfully.'];

    } catch (PDOException $e) {
        // Handle database errors (important!)
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


// Example Usage:
// Replace with your actual database credentials
$productId = 'product123';
$userName = 'John Doe';
$reviewText = 'This product is amazing!  I highly recommend it.';
$rating = 5;
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPassword = 'your_database_password';



$result = createReview($productId, $userName, $reviewText, $rating, $dbHost, $dbName, $dbUser, $dbPassword);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It handles input validation, sanitization, and basic data storage.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $author The name of the reviewer.
 * @param string $rating  A rating from 1 to 5.
 * @param string $comment The reviewer's comments.
 * @param string $db_connection  A database connection object.  (You'll need to establish this connection elsewhere)
 *
 * @return bool True on success, false on failure.
 */
function submit_review(string $product_id, string $author, string $rating, string $comment, $db_connection) {

    // Input Validation
    if (empty($product_id) || empty($author) || empty($rating) || empty($comment)) {
        error_log("Empty field(s) submitted for review ID: " . $product_id);
        return false;
    }

    if (!preg_match('/^[0-5][0-9]*$/', $rating)) { // Check if rating is a number between 1 and 5
        error_log("Invalid rating format: " . $rating);
        return false;
    }

    // Sanitize Input (Prevent SQL Injection) - IMPORTANT!
    $product_id = $db_connection->real_escape_string($product_id); // Use your database connection's escape function
    $author = $db_connection->real_escape_string($author);
    $comment = $db_connection->real_escape_string($comment);


    // Prepare and Execute the SQL Query
    $query = "INSERT INTO reviews (product_id, author, rating, comment) VALUES (" .
             "'$product_id', '$author', '$rating', '$comment')";

    $result = $db_connection->query($query);

    if (!$result) {
        error_log("Error submitting review: " . $db_connection->error);
        return false;
    }

    return true;
}



// Example Usage (Illustrative - requires database setup)
//  This is NOT a complete, executable example.  It demonstrates how you'd use the function.
//  You'll need a database connection, a 'reviews' table with the appropriate columns, and error handling.
/*
$db = new mysqli("localhost", "username", "password", "database_name"); // Replace with your DB details

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$product_id = "123";
$author = "John Doe";
$rating = "4";
$comment = "Great product! Would recommend.";

if (submit_review($product_id, $author, $rating, $comment, $db)) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

$db->close(); // Close the database connection
*/



// Example Review Table Structure (MySQL)
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic data validation and sanitization.
 *
 * @param string $product_id The unique identifier of the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param int   $rating      (Optional) The rating given by the user (1-5).  Defaults to 0.
 *
 * @return bool|string Returns true on successful saving, or an error message string if saving fails.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating = 0) {
    // **Data Validation & Sanitization** - Crucial for security and data integrity

    // Check if the product ID is valid
    if (!preg_match('/^[a-zA-Z0-9_-]+$/', $product_id)) {
        return "Invalid product ID.  Must contain only letters, numbers, underscores, and hyphens.";
    }

    // Sanitize the user name and review text to prevent XSS attacks
    $user_name = htmlspecialchars($user_name);
    $review_text = htmlspecialchars($review_text);

    // Sanitize the rating
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    if ($rating === false) {
        return "Invalid rating. Please enter a number between 1 and 5.";
    }


    // **Database Interaction (Example - Adapt to your DB setup)**
    // This is a placeholder.  Replace with your actual database connection and query logic.
    try {
        // Connect to your database (using PDO is recommended)
        // Example:
        // $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)";

        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the query
        $stmt->execute();

        return true;  // Success!

    } catch (PDOException $e) {
        // Handle database errors
        return "Error saving review: " . $e->getMessage();
    }
}


/**
 * Function to display user reviews for a given product.
 *
 * @param string $product_id The unique identifier of the product.
 * @return array|string Returns an array of review data if successful, or an error message.
 */
function display_user_reviews(string $product_id) {
    // **Database Interaction (Example - Adapt to your DB setup)**
    // This is a placeholder.  Replace with your actual database connection and query logic.

    try {
        // Connect to your database
        // Example:
        // $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $reviews;

    } catch (PDOException $e) {
        return "Error retrieving reviews: " . $e->getMessage();
    }
}


// **Example Usage (Illustrative - Replace with your actual code)**
//  For demonstration purposes only.  Don't run this directly without a database setup.

// Create a dummy database connection (replace with your actual connection)
// $db = new PDO("mysql:host=localhost;dbname=test_db", "user", "password");  // Example connection

//  Save a review
$review_result = save_user_review("product123", "John Doe", "This is a fantastic product!");
if ($review_result == true) {
    echo "Review saved successfully!<br>";
} else {
    echo "Error saving review: " . $review_result . "<br>";
}

// Retrieve and display reviews
$reviews = display_user_reviews("product123");

if ($reviews) {
    echo "<h3>Reviews for Product 123:</h3>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><b>User:</b> " . $review['user_name'] . "<br>";
        echo "<b>Rating:</b> " . $review['rating'] . "<br>";
        echo "<b>Review:</b> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "No reviews found for product 123.";
}


?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function takes user input and outputs a formatted user review.
 * It's a simplified example and can be expanded to include
 * more features like database storage, rating systems, etc.
 *
 * @param string $username      The name of the user.
 * @param string $reviewText    The text of the user's review.
 * @param int    $rating        (Optional) The rating given by the user (1-5). Defaults to 0.
 *
 * @return string Formatted review string.
 */
function generateUserReview(string $username, string $reviewText, int $rating = 0) {
  // Input validation - Basic, can be expanded
  if (empty($username)) {
    return "Error: Username cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review text cannot be empty.";
  }

  // Create the review string
  $review = "Review by: " . $username . "
";
  $review .= "Rating: " . $rating . " stars
";
  $review .= "Review: " . $reviewText . "
";

  return $review;
}

// Example Usage:
$username = "John Doe";
$review = "This product is amazing! I highly recommend it.";
$rating = 5;

$formattedReview = generateUserReview($username, $review, $rating);
echo $formattedReview . PHP_EOL;

// Another example with default rating:
$username = "Jane Smith";
$review = "The product was okay, but could be better.";
$formattedReview = generateUserReview($username, $review);
echo $formattedReview . PHP_EOL;

// Example with error handling (empty username):
$username = "";
$review = "This is a review.";
$formattedReview = generateUserReview($username, $review);
echo $formattedReview . PHP_EOL;

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes validation, data sanitization, and basic formatting.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param string $rating The rating (e.g., 1-5).
 *
 * @return array An array containing:
 *               - 'success': true if the review was created successfully, false otherwise.
 *               - 'message': A message indicating the status of the review.
 *               - 'review': The newly created review data if successful.
 */
function createAndDisplayReview(string $productId, string $reviewerName, string $reviewText, string $rating)
{
    // Validate inputs -  Important for security!
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
    }
    if (empty($reviewerName)) {
        return ['success' => false, 'message' => 'Reviewer Name cannot be empty.', 'review' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review Text cannot be empty.', 'review' => null];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => null];
    }

    // Sanitize Inputs (Crucial for security - prevent XSS)
    $reviewerName = htmlspecialchars($reviewerName);
    $reviewText = htmlspecialchars($reviewText);
    $rating = (int)$rating; // Cast to integer for database operations

    //  Simulate storing the review in a database (replace with your actual database logic)
    //  In a real application, you'd use a database query.
    $review = [
        'product_id' => $productId,
        'reviewer_name' => $reviewerName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp
    ];

    // Store the review (simulated)
    // Example:  $db->insert('reviews', $review);


    return ['success' => true, 'message' => 'Review created successfully!', 'review' => $review];
}



/**
 * Display Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing:
 *               - 'reviews': An array of review objects.
 *               - 'totalReviews': The total number of reviews.
 *               - 'noReviews':  true if no reviews exist for the product.
 */
function displayReviews(string $productId)
{
    // Simulate fetching reviews from a database
    // In a real application, you would execute a database query.

    $reviews = [
        ['product_id' => 1, 'reviewer_name' => 'Alice', 'review_text' => 'Great product!', 'rating' => 5, 'created_at' => '2023-10-27 10:00:00'],
        ['product_id' => 1, 'reviewer_name' => 'Bob', 'review_text' => 'Good value for money.', 'rating' => 4, 'created_at' => '2023-10-26 14:30:00'],
        ['product_id' => 2, 'reviewer_name' => 'Charlie', 'review_text' => 'Excellent!', 'rating' => 5, 'created_at' => '2023-10-25 09:15:00']
    ];

    $totalReviews = count($reviews);
    $noReviews = $totalReviews == 0;

    return ['reviews' => $reviews, 'totalReviews' => $totalReviews, 'noReviews' => $noReviews];
}


// Example Usage:

// 1. Create a Review
$reviewResult = createAndDisplayReview(1, 'David Smith', 'This product is amazing!', 5);

if ($reviewResult['success']) {
    echo "Review created successfully!<br>";
    echo "Review Details: " . print_r($reviewResult['review'], true) . "<br>";
} else {
    echo "Error creating review: " . $reviewResult['message'] . "<br>";
}


// 2. Display Reviews for Product 1
$reviewsData = displayReviews(1);

if ($reviewsData['noReviews']) {
    echo "No reviews found for product 1.<br>";
} else {
    echo "Reviews for Product 1:<br>";
    echo "Total Reviews: " . $reviewsData['totalReviews'] . "<br>";
    foreach ($reviewsData['reviews'] as $review) {
        echo "Reviewer: " . $review['reviewer_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "<br>";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For a production environment,
 * you would likely use a database.
 */

class ReviewManager {

    private $reviews = [];
    private $reviewIdCounter = 1; // To ensure unique IDs

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return int The ID of the newly created review.
     * @throws InvalidArgumentException if any required input is missing or invalid.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment): int
    {
        // Input validation
        if (!$productId || !$username || !$rating || !$comment) {
            throw new InvalidArgumentException("Missing required input.");
        }
        if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
            throw new InvalidArgumentException("Invalid rating. Rating must be a number between 1 and 5.");
        }

        $reviewId = $this->reviewIdCounter++;
        $this->reviews[$reviewId] = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];

        return $reviewId;
    }


    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array The review data if found, or null if not found.
     */
    public function getReview(int $reviewId): ?array
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }


    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new ID of the product (optional).
     * @param string $username The new username (optional).
     * @param string $rating The new rating (optional).
     * @param string $comment The new comment (optional).
     *
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $productId = null, string $username = null, string $rating = null, string $comment = null): bool
    {
        if (!isset($this->reviews[$reviewId])) {
            return false; // Review not found
        }

        $originalReview = $this->reviews[$reviewId];
        $updatedReview = [];

        if ($productId !== null) {
            $updatedReview['productId'] = $productId;
        }
        if ($username !== null) {
            $updatedReview['username'] = $username;
        }
        if ($rating !== null) {
            if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
                return false;  // Invalid rating
            }
            $updatedReview['rating'] = $rating;
        }
        if ($comment !== null) {
            $updatedReview['comment'] = $comment;
        }

        $this->reviews[$reviewId] = $updatedReview;
        return true;
    }


    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId): bool
    {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }
        return false;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of all review data.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }
}

// Example Usage:
$reviewManager = new ReviewManager();

// Create a review
$reviewId = $reviewManager->createReview(123, 'JohnDoe', 4, 'Great product, would recommend!');

// Get the review
$review = $reviewManager->getReview($reviewId);
if ($review) {
    echo "Review ID: " . $review['productId'] . "
";
    echo "Username: " . $review['username'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Comment: " . $review['comment'] . "
";
}

// Update the review
$reviewManager->updateReview($reviewId, 124, 'JaneSmith', 5, 'Excellent value!');

// Get the updated review
$updatedReview = $reviewManager->getReview($reviewId);
if ($updatedReview) {
    echo "
Updated Review:
";
    echo "Username: " . $updatedReview['username'] . "
";
    echo "Rating: " . $updatedReview['rating'] . "
";
    echo "Comment: " . $updatedReview['comment'] . "
";
}

// Delete the review
$reviewManager->deleteReview($reviewId);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "
All Reviews:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes basic validation and error handling.
 */

class UserReview
{
    private $db_connection = null;

    /**
     * Constructor
     *
     * Establishes a database connection (you'll need to replace this 
     * with your actual database connection logic).
     */
    public function __construct($db_config) {
        // Example using PDO - Adapt this to your database system
        try {
            $this->db_connection = new PDO("mysql:host=" . $db_config['host'] . ";dbname=" . $db_config['dbname'] . ";charset=utf8", $db_config['user'], $db_config['password']);
            $this->db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            // Handle the connection error appropriately.  Logging is a good idea.
            die("Database connection failed: " . $e->getMessage());
        }
    }


    /**
     * Create a New Review
     *
     * Accepts review data via POST.
     *
     * @param array $reviewData Array containing review data (title, rating, comment).
     * @return int|string The ID of the new review if successful, or an error message string if not.
     */
    public function createReview(array $reviewData) {
        // Validation - Very important to prevent bad data
        if (empty($reviewData['title'])) {
            return "Title cannot be empty.";
        }
        if (empty($reviewData['rating'])) {
            return "Rating cannot be empty.";
        }
        if (!is_numeric($reviewData['rating'])) {
            return "Rating must be a number.";
        }
        if (empty($reviewData['comment'])) {
            return "Comment cannot be empty.";
        }

        // Sanitize data (important for security) - adapt to your needs
        $title = htmlspecialchars($reviewData['title']);
        $rating = (int)$reviewData['rating']; // Convert rating to an integer
        $comment = htmlspecialchars($reviewData['comment']);


        // Prepare SQL statement
        $sql = "INSERT INTO reviews (title, rating, comment) VALUES (:title, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db_connection->prepare($sql);

        // Set the parameters
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        try {
            $stmt->execute();
            return $this->db_connection->lastInsertId(); // Return the ID of the newly created review
        } catch (PDOException $e) {
            return "Error creating review: " . $e->getMessage();
        }
    }

    /**
     * Get Reviews
     *
     * Retrieves all reviews, or reviews based on criteria.
     *
     * @param array $criteria  (Optional) Array of criteria for filtering reviews.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviews(array $criteria = []) {
        $sql = "SELECT * FROM reviews";

        if (!empty($criteria)) {
            $whereClauses = [];
            foreach ($criteria as $column => $value) {
                $whereClauses[] = "$column = :{$column}";
            }
            $whereClause = implode(" AND ", $whereClauses);
            $sql .= " WHERE " . $whereClause;
        }


        $stmt = $this->db_connection->prepare($sql);
        if (!empty($criteria)) {
            $stmt->execute($criteria);
        } else {
            $stmt->execute();
        }

        $reviews = [];
        $stmt->fetch(PDO::FETCH_CLASS, 'Review'); // Fetch as Review objects (you'll need to define Review class)
        while ($review = $stmt->fetch()) {
            $reviews[] = $review;
        }

        return $reviews;
    }



    /**
     * Delete a Review
     *
     * Deletes a review based on its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':id', $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }
}


// Example Usage (replace with your database details)
$db_config = [
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_username',
    'password' => 'your_password'
];

$review_function = new UserReview($db_config);


// Create a review
$new_review_id = $review_function->createReview(['title' => 'Great Product!', 'rating' => 5, 'comment' => 'Highly recommended.']);
if ($new_review_id) {
    echo "New review created with ID: " . $new_review_id . "<br>";
} else {
    echo "Failed to create review.<br>";
    echo $review_function->createReview(['title' => 'Great Product!', 'rating' => 5, 'comment' => 'Highly recommended.']) . "<br>";
}

// Get all reviews
$all_reviews = $review_function->getReviews();

echo "<h3>All Reviews:</h3>";
foreach ($all_reviews as $review) {
    echo "<b>Title:</b> " . $review->title . "<br>";
    echo "<b>Rating:</b> " . $review->rating . "<br>";
    echo "<b>Comment:</b> " . $review->comment . "<br><br>";
}

// Example: Get reviews with rating greater than 4
$high_rated_reviews = $review_function->getReviews(['rating' => '>=' , 'rating' => 4]);

echo "<h3>Reviews with rating >= 4:</h3>";
foreach ($high_rated_reviews as $review) {
    echo "<b>Title:</b> " . $review->title . "<br>";
    echo "<b>Rating:</b> " . $review->rating . "<br>";
    echo "<b>Comment:</b> " . $review->comment . "<br><br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (optional) A rating from 1 to 5 (default: null).
 * @param int $timestamp (optional) Unix timestamp of when the review was created (default: current timestamp).
 * @return array|string  Returns an array on success, or an error message string on failure.
 */
function storeUserReview(string $product_id, string $user_name, string $review_text, ?int $rating = null, ?int $timestamp = null) {
    // Validation - basic checks to prevent malicious input.  Expand as needed.
    if (empty($product_id) || empty($user_name) || empty($review_text)) {
        return "Error: Product ID, User Name, and Review Text cannot be empty.";
    }
    if ($rating === null) {
        $rating = null; // Allow null rating.
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    //  Database interaction -  This is a placeholder.  Replace with your actual database logic.
    //  This example demonstrates how to store the data in an array (simulating a database).

    $review = [
        'product_id' => $product_id,
        'user_name' => $user_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp ?? time() // Use current time if timestamp is not provided.
    ];

    //  In a real application, you'd insert this data into a database.

    // Example database storage (replace with your actual database code)
    //  e.g.,  $db->insert('reviews', $review);

    // Successful Storage
    return $review;
}


/**
 *  Example function to retrieve reviews for a product.  This is just an example; 
 *  adapt it to your database design and retrieval method.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @return array|string Returns an array of reviews or an error message.
 */
function getProductReviews(string $product_id) {
    //  Example:  Retrieve reviews from a database table called 'reviews'
    //  Assuming the table has columns: product_id, user_name, review_text, rating, timestamp

    //  This is just an example; adapt it to your database design and retrieval method.

    $reviews = [];

    //  Replace this with your database query
    // Example using a simulated database (replace with actual query)
    // $result = $db->query("SELECT * FROM reviews WHERE product_id = ?", $product_id);
    // while ($row = $result->fetch_assoc()) {
    //     $reviews[] = $row;
    // }

    // Simulate a database result
    if ($product_id === '123') {
        $reviews = [
            ['product_id' => '123', 'user_name' => 'John Doe', 'review_text' => 'Great product!', 'rating' => 5, 'timestamp' => time()],
            ['product_id' => '123', 'user_name' => 'Jane Smith', 'review_text' => 'Good value for money.', 'rating' => 4, 'timestamp' => time() - 3600], // A review from an hour ago
        ];
    } else {
        $reviews = []; // No reviews found for this product ID
    }

    return $reviews;
}


// --- Example Usage ---

// Store a review
$review_data = storeUserReview('123', 'Alice', 'This is an amazing product!', 5);
if (is_array($review_data)) {
    echo "Review stored successfully: " . json_encode($review_data) . "
";
} else {
    echo "Error storing review: " . $review_data . "
";
}


// Get reviews for product '123'
$product_reviews = getProductReviews('123');
if (is_array($product_reviews)) {
    echo "Product Reviews:
";
    foreach ($product_reviews as $review) {
        echo "  - " . json_encode($review) . "
";
    }
} else {
    echo "No reviews found for product '123'
";
}


// Store another review with a timestamp
$review_data2 = storeUserReview('456', 'Bob', 'Okay product, could be better.', 4, time() - 7200); // Review from 2 hours ago.
if (is_array($review_data2)) {
    echo "Review stored successfully: " . json_encode($review_data2) . "
";
} else {
    echo "Error storing review: " . $review_data2 . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations for a simple review system.
 *
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given for the review (e.g., 1-5).
 * @param int    $item_id    The ID of the item being reviewed (e.g., product ID, restaurant ID).
 * @param int    $user_id    The ID of the user submitting the review.
 *
 * @return array An array containing:
 *              - 'success': True if the operation was successful, False otherwise.
 *              - 'message': A message indicating the outcome (e.g., 'Review created', 'Review updated').
 *              - 'review_id': The ID of the newly created review, if applicable.
 *
 *  Database interaction is simulated for demonstration purposes.
 */
function create_review(string $review_text, int $rating, int $item_id, int $user_id)
{
    // Simulate database interaction (replace with your actual database code)
    $review_id = generate_unique_id();  // Placeholder - implement your unique ID generation.
    $review = [
        'review_text' => $review_text,
        'rating' => $rating,
        'item_id' => $item_id,
        'user_id' => $user_id,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    // Validate input (example - enhance this for production)
    if (empty($review_text) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid review data.',
        ];
    }

    // Store the review (replace with your database insert)
    //  For example:
    //  $result = mysqli_query($conn, "INSERT INTO reviews (review_text, rating, item_id, user_id, created_at) VALUES ('$review_text', $rating, $item_id, $user_id, NOW())");
    //  if (!$result) {
    //      return [
    //          'success' => false,
    //          'message' => 'Database error: ' . mysqli_error($conn),
    //      ];
    //  }

    return [
        'success' => true,
        'message' => 'Review created',
        'review_id' => $review_id,
    ];
}


function get_review(int $review_id)
{
    // Simulate database retrieval
    //  Replace this with your actual database query
    // Example (using a hypothetical 'reviews' table):
    // $result = mysqli_query($conn, "SELECT * FROM reviews WHERE id = $review_id");
    // $review = mysqli_fetch_assoc($result);
    // if (!$result || !$review) {
    //     return null; // Or handle the error appropriately
    // }

    // Example dummy data
    if ($review_id == 1) {
        return [
            'review_id' => $review_id,
            'review_text' => 'This is a great product!',
            'rating' => 5,
            'item_id' => 101,
            'user_id' => 2,
            'created_at' => date('Y-m-d H:i:s')
        ];
    } else {
        return null;
    }
}



function update_review(int $review_id, string $new_review_text, int $new_rating)
{
    // Simulate database update
    // Replace with your actual database query
    // Example:
    // $result = mysqli_query($conn, "UPDATE reviews SET review_text = '$new_review_text', rating = $new_rating WHERE id = $review_id");

    if ($review_id == 1) {
        return [
            'success' => true,
            'message' => 'Review updated',
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Review not found',
        ];
    }
}


function delete_review(int $review_id)
{
    // Simulate database deletion
    // Replace with your actual database query
    // Example:
    // $result = mysqli_query($conn, "DELETE FROM reviews WHERE id = $review_id");

    if ($review_id == 1) {
        return [
            'success' => true,
            'message' => 'Review deleted',
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Review not found',
        ];
    }
}


// Example usage:
// Create a review
$result = create_review('Excellent product!', 5, 101, 2);
print_r($result);

// Get a review
$review = get_review(1);
print_r($review);

// Update a review
$result = update_review(1, 'Even better!', 6);
print_r($result);

// Delete a review
$result = delete_review(1);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with a basic rating system.
 *
 * @param string $user_id The unique ID of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $item_id The ID of the item being reviewed.
 * @param array $database_connection  (Optional)  Database connection object. Defaults to null.
 * 
 * @return bool True on success, false on failure.
 */
function save_user_review(
    string $user_id,
    string $review_text,
    int $rating,
    string $item_id,
    array $database_connection = null
) {
    // Input Validation - IMPORTANT!  Don't skip this.
    if (empty($user_id) || empty($review_text) || $rating < 1 || $rating > 5 || empty($item_id)) {
        error_log("Invalid review data received. user_id: " . $user_id . ", review_text: " . $review_text . ", rating: " . $rating . ", item_id: " . $item_id); // Log the error
        return false;
    }


    //  Use prepared statements to prevent SQL Injection - CRITICAL SECURITY
    $sql = "INSERT INTO reviews (user_id, item_id, review_text, rating) 
            VALUES (?, ?, ?, ?)";

    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing statement.  Error: " . print_r($database_connection->error, true));
        return false;
    }

    // Bind parameters
    $stmt->bind_param("siss", $user_id, $review_text, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        error_log("Error executing query.  Error: " . print_r($stmt->error, true));
        return false;
    }

    // Close the statement
    $stmt->close();

    return true;
}

/**
 * Example Usage (Illustrative - Adapt to your specific setup)
 */

//  Assume you have a database connection object called $db

// Example 1: Successful Save
$user_id = "user123";
$review_text = "This product is fantastic!";
$rating = 5;
$item_id = "product456";

if (save_user_review($user_id, $review_text, $rating, $item_id, $db)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Example 2:  Illustrative example of invalid input
if (save_user_review("", "Review", 6, "item789")) { // Empty user_id
  echo "Should not reach here";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews.
 * It handles data validation, saving reviews to a database,
 * and retrieving reviews.
 */
class UserReview
{
    private $db;

    public function __construct($db)
    {
        $this->db = $db; // Database connection object
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The user's name.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview($productId, $user, $rating, $comment)
    {
        // Input validation (important!)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }
        if (empty($user) || empty($comment)) {
            return false; // Empty fields are not allowed.
        }

        // Prepare the SQL statement (using prepared statements for security)
        $sql = "INSERT INTO reviews (product_id, user, rating, comment)
                VALUES (:product_id, :user, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        return $stmt->execute();
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new Review($row['product_id'], $row['user'], $row['rating'], $row['comment']); //  Create Review Objects
        }

        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     *
     * @return Review|null A Review object, or null if not found.
     */
    public function getReviewById($reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            return new Review($row['product_id'], $row['user'], $row['rating'], $row['comment']);
        }

        return null;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure (e.g., review not found).
     */
    public function deleteReview($reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    }

}


/**
 * Review Object (Data Object)
 */
class Review
{
    public $productId;
    public $user;
    public $rating;
    public $comment;

    public function __construct($productId, $user, $rating, $comment)
    {
        $this->productId = $productId;
        $this->user = $user;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}



// Example Usage (Illustrative - Requires a Database Connection)
// Replace with your actual database setup

// Dummy Database Connection (Replace with your real connection)
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_user', 'your_password');

// Create an instance of the Review class
$reviewManager = new UserReview($db);

// Create a review
$reviewManager->createReview(123, 'John Doe', 4, 'Great product! Highly recommended.');

// Get reviews for product 123
$reviews = $reviewManager->getReviewsByProduct(123);

foreach ($reviews as $review) {
    echo "Product ID: " . $review->productId . "<br>";
    echo "User: " . $review->user . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br>";
    echo "<hr>";
}

// Get a specific review
$review = $reviewManager->getReviewById(1); // Replace 1 with the actual review ID

if ($review) {
    echo "Review details: <br>";
    echo "Product ID: " . $review->productId . "<br>";
    echo "User: " . $review->user . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br>";
} else {
    echo "Review not found.";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating     The rating given by the reviewer (e.g., 1-5).
 * @param string $comment    The reviewer's comment/feedback.
 * @param array $dbConnection  A database connection object (e.g., mysqli).
 *
 * @return array|string  Returns an array on success, or an error message string on failure.
 */
function create_user_review(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    $dbConnection
) {
    // Validate input (important for security and data integrity)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return "Error: All fields are required.";
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // Sanitize input to prevent SQL injection
    $productId = mysqli_real_escape_string($dbConnection, $productId);
    $username = mysqli_real_escape_string($dbConnection, $username);
    $rating = mysqli_real_escape_string($dbConnection, $rating);
    $comment = mysqli_real_escape_string($dbConnection, $comment);

    // SQL query -  IMPORTANT: Use prepared statements for real applications!
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES ('$productId', '$username', '$rating', '$comment')";

    if (mysqli_query($dbConnection, $sql)) {
        return "Review created successfully!";
    } else {
        return "Error creating review: " . mysqli_error($dbConnection);
    }
}

/**
 * Function to display all reviews for a product.
 *
 * @param array $dbConnection  A database connection object.
 * @param string $productId  The ID of the product.
 *
 * @return array|string  Returns an array of reviews, or an error message.
 */
function display_reviews(string $productId, $dbConnection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = mysqli_query($dbConnection, $sql);

    if ($result) {
        $reviews = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return "Error: Unable to retrieve reviews: " . mysqli_error($dbConnection);
    }
}



// Example Usage (This part is just for demonstration - you'll need to adapt to your database setup)

// Assuming you have a database connection object named $conn

// Create a Review
//$review_result = create_user_review("123", "JohnDoe", "5", "Excellent product!", $conn);
//echo $review_result; // Output: Review created successfully!

// Get all reviews for product 123
//$reviews = display_reviews("123", $conn);

//if (is_array($reviews)) {
//   echo "<h2>Reviews for Product 123:</h2>";
//   foreach ($reviews as $review) {
//       echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
//       echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//       echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
//       echo "<hr>";
//   }
//} else {
//   echo $reviews; // Output the error message if retrieval failed
//}


// IMPORTANT NOTES:

// 1. Database Setup: This code assumes you have a database set up with a table named "reviews" 
//    with columns: product_id (INT), username (VARCHAR), rating (INT), comment (TEXT).

// 2. Prepared Statements:  The `create_user_review` function uses simple string concatenation to build the SQL query.  **THIS IS VULNERABLE TO SQL INJECTION ATTACKS.**  For production code, ALWAYS use prepared statements to prevent this. Prepared statements separate the SQL code from the data, preventing malicious data from being interpreted as SQL commands.

// Example of using prepared statements (using mysqli):

//    $stmt = mysqli_prepare($dbConnection, "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");
//    mysqli_stmt_bind_param($stmt, "s", $productId, $username, $rating, $comment);  // 's' indicates a string parameter
//    mysqli_stmt_execute($stmt);
//    mysqli_stmt_close($stmt);

// 3. Error Handling: This code includes basic error handling, but you should implement more robust error logging and handling in a production environment.

// 4. Input Validation: The code validates the rating, but you should add more comprehensive input validation to prevent invalid data from being stored.  Consider using a validation library.

// 5. Security:  Always sanitize and validate user input to prevent security vulnerabilities.  Prepared statements are essential.

// 6.  Data Types: Adjust data types in your SQL table schema to match your requirements.  For example, you might use `INT` for `product_id`, `VARCHAR` for `username`, `FLOAT` or `DECIMAL` for `rating` (if you need decimal precision), and `TEXT` for `comment`.

?>


<?php

/**
 * User Review Function
 *
 * This function creates a new user review, saves it to a database, and returns
 * the review details.
 *
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param int $item_id     The ID of the item being reviewed.
 * @return array|false Returns an array containing the review details on success,
 *                     or false on failure.
 */
function createReview(string $username, string $rating, string $comment, int $item_id)
{
    // Input Validation - Important for security and data integrity
    if (empty($username) || empty($rating) || empty($comment) || $item_id <= 0) {
        return false; // Invalid input
    }

    // Validate rating (e.g., between 1 and 5)
    $rating = (int) $rating; // Convert to integer
    if ($rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    // Connect to the database (replace with your database credentials)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Prepare the SQL query to prevent SQL injection
        $stmt = $db->prepare(
            "INSERT INTO reviews (username, rating, comment, item_id) 
             VALUES (:username, :rating, :comment, :item_id)"
        );

        // Bind parameters to the query
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        $stmt->bindParam(':item_id', $item_id);

        // Execute the query
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db->lastInsertId();

        // Return the review details
        return [
            'id' => $review_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'item_id' => $item_id,
            'timestamp' => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

    } catch (PDOException $e) {
        // Handle database errors (e.g., logging, display an error message)
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false; // Indicate failure
    }
}


// Example Usage (replace with your actual values)
$review = createReview("JohnDoe", 4, "Great product!", 123);

if ($review !== false) {
    echo "Review created successfully with ID: " . $review['id'] . "<br>";
    print_r($review); // Display review details
} else {
    echo "Review creation failed. Please check your input and database connection.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic CRUD operations and provides a simple interface
 * for managing reviews.
 *
 * Note: This is a simplified example for illustrative purposes.  In a real-world
 * application, you'd want to handle database connections, error handling,
 * input validation, and potentially more complex features.
 */

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $created_at;

    /**
     * Constructor
     *
     * Initializes a new Review object.
     *
     * @param int $user_id
     * @param int $product_id
     * @param int $rating
     * @param string $comment
     */
    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->created_at = date('Y-m-d H:i:s');
    }

    /**
     * Getters
     *
     *  Provides access to the properties of the Review object.
     *
     * @return mixed
     */
    public function getId() {
        return $this->id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function getProduct_id() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCreated_at() {
        return $this->created_at;
    }

    /**
     * Setters
     *
     * Allows updating properties of the Review object.
     *
     * @param mixed $id
     * @param mixed $rating
     * @param string $comment
     */
    public function setId($id) {
        $this->id = $id;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }
}


/**
 * Review Management Functions
 */
class ReviewManager {
    private $reviews = [];

    public function addReview($user_id, $product_id, $rating, $comment) {
        $review = new Review($user_id, $product_id, $rating, $comment);
        $this->reviews[] = $review;
        return $review; // Return the newly created review
    }

    public function getReviewsByProductId($product_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getProduct_id() == $product_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    public function getReviewsByUser($user_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getUser_id() == $user_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    // You could add update and delete functions here too
}


// Example Usage
$reviewManager = new ReviewManager();

// Create a review
$review1 = $reviewManager->addReview(1, 101, 5, "Great product!  Highly recommend.");
$review2 = $reviewManager->addReview(2, 101, 4, "Good value for the money.");
$review3 = $reviewManager->addReview(1, 102, 3, "Okay product, nothing special.");

// Get reviews for product 101
$reviewsForProduct101 = $reviewManager->getReviewsByProductId(101);
echo "Reviews for Product 101:
";
foreach ($reviewsForProduct101 as $review) {
    echo "- " . $review->getCreated_at() . " - User ID: " . $review->getUser_id() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment() . "
";
}

// Get reviews for user 1
$reviewsByUser1 = $reviewManager->getReviewsByUser(1);
echo "
Reviews for User 1:
";
foreach ($reviewsByUser1 as $review) {
    echo "- " . $review->getCreated_at() . " - User ID: " . $review->getUser_id() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment() . "
";
}
?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to create, store, and retrieve user reviews.
 */
class Review
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * @param PDO $db  Database connection object.  It's best practice to pass this in.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview(int $product_id, string $user_name, string $rating, string $comment)
    {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_name', $user_name);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $product_id The ID of the product.
     *
     * @return array An array of Review objects, or an empty array if none found.
     */
    public function getReviewsByProduct(int $product_id)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new Review($row); // Create a new Review object for each row
        }

        return $reviews;
    }

    /**
     * Review class constructor.  Used internally by the Review class
     * to create individual review objects.
     *
     * @param array $data An associative array containing the review data
     */
    private function __construct(array $data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user_name = $data['user_name'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
    }


    /**
     *  Get a single review by its ID.
     *
     * @param int $id The ID of the review to retrieve.
     * @return Review|null A Review object if found, null otherwise.
     */
    public static function getReviewById(int $id) {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            return new Review($row);
        }

        return null;
    }
}


// Example Usage (assuming you have a PDO database connection $db)

// Create a database connection (replace with your database credentials)
try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Create a Review object and use it
$review = new Review($db);

// Create a review
$review->createReview(123, "John Doe", 5, "Great product, highly recommend!");

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

foreach ($reviews as $review) {
    echo "Product ID: " . $review->product_id . "<br>";
    echo "User: " . $review->user_name . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br><br>";
}

// Get a specific review
$specific_review = Review::getReviewById(1); // Assuming ID 1 exists
if ($specific_review) {
    echo "Specific Review: <br>";
    echo "Product ID: " . $specific_review->product_id . "<br>";
    echo "User: " . $specific_review->user_name . "<br>";
    echo "Rating: " . $specific_review->rating . "<br>";
    echo "Comment: " . $specific_review->comment . "<br>";
} else {
    echo "Review not found.";
}

?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for managing and displaying user reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The name of the user who submitted the review.
     * @param string $comment The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user, string $comment) {
        if (empty($user) || empty($comment)) {
            return false; // Validation: User and comment must be provided.
        }
        $this->reviews[] = ['user' => $user, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by ID.  (Simulated with index for simplicity)
     *
     * @param int $reviewId The ID of the review to retrieve.  (This is a simulated index,
     *                     should be managed with a proper database or array key)
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        if (isset($this->reviews[$reviewId])) {
            unset($this->reviews[$reviewId]);
            return true;
        }
        return false;
    }

    /**
     * Calculates the average rating for a product (simulated).
     *
     * @param string $productName  The name of the product being reviewed.
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function calculateAverageRating(string $productName) {
        $ratings = [];
        foreach ($this->reviews as $review) {
            if ($review['comment'] === strtolower($productName)) {
                $ratings[] = $review['rating']; // Assuming a 'rating' field exists in the review
            }
        }

        if (empty($ratings)) {
            return null;
        }

        return array_sum($ratings) / count($ratings);
    }
}


// Example Usage:
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('Alice', 'Great product, highly recommended!');
$reviewManager->addReview('Bob', 'It\'s okay, could be better.');
$reviewManager->addReview('Charlie', 'Excellent value for the money.');
$reviewManager->addReview('David', 'Poor quality, would not buy again.');

// Retrieve all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviewManager->getReviewById(1);
if ($specificReview) {
    echo "
Review ID 1:
";
    print_r($specificReview);
} else {
    echo "
Review not found.";
}

// Calculate average rating for a product
$averageRating = $reviewManager->calculateAverageRating('product name');
if ($averageRating !== null) {
    echo "
Average rating for 'product name': " . $averageRating . "
";
} else {
    echo "
No reviews found for 'product name'.
";
}

//Delete a review
$reviewManager->deleteReview(2);
echo "
After deleting review 2:
";
print_r($reviewManager->getAllReviews());
?>


<?php

/**
 * This function creates a user review object and handles basic validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment about the reviewed item.
 * @return array|false  An associative array containing the review data on success, or false on failure.
 */
function createReview(string $username, string $rating, string $comment)
{
    // Validate input
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");  // Log the error
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating'   => (int)$rating, // Convert rating to integer
        'comment'  => $comment,
        'date'     => date("Y-m-d H:i:s"), // Add timestamp for review creation
        'status'   => 'pending' // Default status
    ];

    return $review;
}


// Example Usage:

// Create a valid review
$reviewData = createReview("JohnDoe", 4, "Great product!  Highly recommend.");

if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed.
";
}

// Create an invalid review (empty username)
$reviewData = createReview("", 3, "Okay product.");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}


// Create an invalid review (invalid rating)
$reviewData = createReview("JaneSmith", 6, "Good, but could be better.");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}

// Create an invalid review (empty comment)
$reviewData = createReview("PeterJones", 5, "");
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Review creation failed (invalid input).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic input validation and sanitization.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $dbConnection  A database connection object.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully saved, false otherwise.
 *              - 'message':  A message indicating the status of the review.
 *              - 'review': The review data if successful.
 */
function saveReview(string $productId, string $username, string $reviewText, array $dbConnection)
{
    // Input Validation and Sanitization -  IMPORTANT
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
    }

    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'review' => null];
    }

    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => null];
    }

    // Sanitize input -  Consider more robust sanitization based on your needs
    $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
    //You could add further sanitization here, for example, escaping HTML tags
    //if you were allowing users to input HTML content.  Don't do this for simple text.

    // SQL Injection Prevention -  Using Prepared Statements
    $sql = "INSERT INTO reviews (product_id, username, review_text) VALUES (?, ?, ?)";
    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => 'Error preparing statement.  Check database connection.', 'review' => null];
    }

    $stmt->bind_param("ss", $productId, $username, $reviewText); // "ss" specifies string parameters

    if (!$stmt->execute()) {
        return ['success' => false, 'message' => 'Error executing query: ' . $stmt->error, 'review' => null];
    }

    $stmt->close();

    // Get the last inserted ID (if your database generates an auto-increment ID)
    $lastProductId = $dbConnection->lastInsertId();


    return ['success' => true, 'message' => 'Review saved successfully.', 'review' => ['product_id' => $lastProductId, 'username' => $username, 'review_text' => $reviewText]];
}


/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param int $productId The ID of the product.
 * @param array $dbConnection A database connection object.
 *
 * @return array An array containing:
 *              - 'reviews': An array of review objects, or an empty array if no reviews exist.
 *              - 'success': True if reviews were successfully retrieved, false otherwise.
 */
function getReviewsForProduct(int $productId, array $dbConnection)
{
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['reviews' => [], 'success' => false, 'message' => 'Error preparing statement. Check database connection.'];
    }

    $stmt->bind_param("i", $productId); // "i" specifies an integer parameter

    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    }

    $stmt->close();

    return ['reviews' => $reviews, 'success' => true];
}



// Example Usage (Illustrative - Requires Database Setup)
// Replace with your actual database connection
$dbConnection = new mysqli("localhost", "your_username", "your_password", "your_database");
if ($dbConnection->connect_error) {
    die("Connection failed: " . $dbConnection->connect_error);
}

// Save a review
$reviewResult = saveReview(123, "John Doe", "This is a great product!", $dbConnection);
print_r($reviewResult);


// Get reviews for product 123
$reviewsResult = getReviewsForProduct(123, $dbConnection);
print_r($reviewsResult);

// Close the connection (Important!)
$dbConnection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|false Returns an array containing the review ID, or false if the review could not be saved.
 */
function saveUserReview(string $product_id, string $user_name, string $review_text, int $rating = 0) {
  // Validate inputs (you can expand this validation)
  if (empty($product_id) || empty($user_name) || empty($review_text)) {
    return false; // Return false for invalid input
  }

  if ($rating < 1 || $rating > 5) {
    $rating = 0; //  Or handle this differently, e.g., throw an exception.
  }

  //  Database connection (replace with your database setup)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (product_id, user_name, review_text, rating) 
       VALUES (:product_id, :user_name, :review_text, :rating)"
    );

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    // Get the last inserted ID
    $review_id = $db->lastInsertId();

    return ['id' => $review_id]; // Return the review ID
  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage());  // Log for debugging
    return false; // Return false on error
  }
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @return array|false Returns an array of reviews or false if no reviews are found.
 */
function displayUserReviews(string $product_id) {
  // Database connection
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, user_name, review_text, rating FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $reviews[] = [
        'id' => $row['id'],
        'user_name' => $row['user_name'],
        'review_text' => $row['review_text'],
        'rating' => $row['rating']
      ];
    }

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage:
// 1. Save a Review
$review_data = saveUserReview('product123', 'John Doe', 'This is a great product!', 5);

if ($review_data) {
  echo "Review saved successfully!  Review ID: " . $review_data['id'] . "
";
} else {
  echo "Failed to save review.
";
}

// 2. Display Reviews for a Product
$reviews = displayUserReviews('product123');

if ($reviews) {
  echo "Reviews for product123:
";
  foreach ($reviews as $review) {
    echo "  User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
  }
} else {
  echo "No reviews found for product123.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, review text, and optionally a rating,
 * and saves the review to a database.  It handles input validation and
 * error logging.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating (Optional) The rating given for the review (1-5). Defaults to null.
 * @return bool True on success, false on failure.
 */
function saveUserReview(int $userId, string $reviewText, int $rating = null) {
  // Input Validation -  Crucial for security and data integrity
  if ($userId <= 0) {
    error_log("Invalid user ID: " . $userId);
    return false;
  }

  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }

  if ($rating > 5 || $rating < 1) {
    error_log("Invalid rating. Rating must be between 1 and 5.");
    return false;
  }

  // Database connection (replace with your actual database credentials)
  $dbHost = 'localhost';
  $dbName = 'your_database_name';
  $dbUser = 'your_username';
  $dbPassword = 'your_password';

  try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage());
    return false;
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:userId, :reviewText, :rating)";
  $stmt = $pdo->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':reviewText', $reviewText);
  $stmt->bindParam(':rating', $rating);

  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    error_log("Error executing SQL query: " . print_r($stmt->errorInfo(), true)); // Log the error details
    return false;
  }
}


// Example usage:
$userId = 123;
$review = "This is a great product!";
$rating = 5;

if (saveUserReview($userId, $review, $rating)) {
  echo "Review saved successfully!";
} else {
  echo "Failed to save review.";
}


// Example with only user ID and review text:
$userId = 456;
$review = "The service was excellent.";

if (saveUserReview($userId, $review)) {
  echo "
Review saved successfully!";
} else {
  echo "
Failed to save review.";
}


?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function creates a basic user review object and saves it to a file.
 *  It's a starting point and can be expanded with database integration,
 *  more validation, and more sophisticated data handling.
 */

class Review {
    public $user_id;
    public $product_id;
    public $rating;
    public $comment;
    public $date;

    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Add timestamp
    }

    public function getReviewData() {
        return [
            'user_id' => $this->user_id,
            'product_id' => $this->product_id,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'date' => $this->date
        ];
    }
}

/**
 * Function to create a new user review
 *
 * @param int $userId The ID of the user writing the review.
 * @param int $productId The ID of the product being reviewed.
 * @param int $rating The rating (e.g., 1-5).
 * @param string $comment The user's comment.
 *
 * @return Review|null Returns a Review object on success, or null on error.
 */
function createReview($userId, $productId, $rating, $comment) {

    // **Input Validation - CRITICAL!**  Always validate user input.
    if (!is_numeric($userId) || $userId <= 0) {
        error_log("Invalid userId: " . $userId); // Log for debugging
        return null;
    }
    if (!is_numeric($productId) || $productId <= 0) {
        error_log("Invalid productId: " . $productId);
        return null;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating: " . $rating);
        return null;
    }
    if (empty($comment)) {
        error_log("Comment cannot be empty.");
        return null;
    }

    $review = new Review($userId, $productId, $rating, $comment);

    // **File Saving (Replace with Database Integration)**
    $filename = "reviews.txt";  // Simple file storage - use database in production
    $reviewData = $review->getReviewData();
    $reviewString = json_encode($reviewString);
    $result = file_put_contents($filename, $reviewString . "
", FILE_APPEND); // Append to file

    if ($result === false) {
        error_log("Error writing to file: " . $filename);
        return null;
    }

    return $review;
}


// **Example Usage:**
$newReview = createReview(123, 456, 4, "Great product!");

if ($newReview) {
    echo "Review created successfully!  User ID: " . $newReview->user_id . "
";
    echo "Review: " . json_encode($newReview->getReviewData()) . "
";
} else {
    echo "Review creation failed.
";
}


?>


<?php

/**
 * Function to process user reviews and display them.
 *
 * @param array $reviews An array of review objects (see example below).
 * @return void
 */
function displayUserReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet. Be the first to leave one!</p>";
    return;
  }

  echo "<h2>User Reviews</h2>";

  foreach ($reviews as $review) {
    echo "<div class='review'>";
    echo "<p><strong>Author:</strong> " . htmlspecialchars($review['author']) . "</p>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
    echo "<p>" . nl2br(htmlspecialchars($review['comment'])) . "</p>"; // Use nl2br for line breaks
    echo "<div class='timestamp'>Posted: " . date("F d, Y g:i:s", strtotime($review['timestamp'])) . "</div>";
    echo "</div>";
  }
}


/**
 * Example Review Object
 *
 * @param string $author
 * @param int $rating
 * @param string $comment
 * @param string $timestamp
 *
 * @return array
 */
function createReviewObject(string $author, int $rating, string $comment, string $timestamp = time()) {
  return [
    'author' => $author,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => $timestamp,
  ];
}


// Example Usage (for testing)
$review1 = createReviewObject("Alice Smith", 4, "Great product!  I love it!", time() - 3600); // Review posted 1 hour ago
$review2 = createReviewObject("Bob Johnson", 5, "Excellent value for the money.", time() - 7200); // Review posted 2 hours ago
$review3 = createReviewObject("Charlie Brown", 3, "It's okay, but could be better.", time() - 14400); // Review posted 4 hours ago

$allReviews = [$review1, $review2, $review3];

displayUserReviews($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review details and the HTML for display.
 */
function createReview(string $productName, string $reviewText, int $rating = 0) {
    // Validation - Basic checks.  Expand these as needed for production.
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // Validate rating (if provided)
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }


    // Create the review data.
    $reviewData = [
        'productName' => $productName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => date('Y-m-d H:i:s'),  // Add a timestamp
    ];

    // Format the review for HTML display.
    $reviewHtml = '<div class="review">';
    $reviewHtml .= '<p class="review-title">Review for: ' . htmlspecialchars($productName) . '</p>'; //Escape to prevent XSS
    $reviewHtml .= '<p class="review-text">' . htmlspecialchars($reviewText) . '</p>'; // Escape to prevent XSS
    $reviewHtml .= '<p class="review-rating">Rating: ' . htmlspecialchars($rating) . '</p>'; // Escape to prevent XSS
    $reviewHtml .= '<p class="review-timestamp">Submitted on: ' . htmlspecialchars(date('Y-m-d H:i:s', strtotime($reviewData['timestamp']))) . '</p>'; //Escape to prevent XSS
    $reviewHtml .= '</div>';

    return [
        'data' => $reviewData,
        'html' => $reviewHtml,
    ];
}



// Example Usage:

// 1. Create a review and display it.
$reviewResult = createReview("Awesome Widget", "This widget is fantastic!  It's exactly what I needed.");

if (isset($reviewResult['error'])) {
    echo "Error creating review: " . $reviewResult['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult['html'];
}


// 2. Create another review with a rating.
$reviewResult2 = createReview("Super Gadget", "Great product, would recommend!", 5);

if (isset($reviewResult2['error'])) {
    echo "Error creating review: " . $reviewResult2['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult2['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult2['html'];
}



// 3.  Demonstrate an error case.
$reviewResult3 = createReview("", "Bad review");
if (isset($reviewResult3['error'])) {
    echo "Error creating review: " . $reviewResult3['error'] . "<br>";
} else {
    echo "Review Details: <pre>";
    print_r($reviewResult3['data']);
    echo "</pre>";
    echo "<hr>";
    echo $reviewResult3['html'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a given item (e.g., product, movie, etc.).
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_id The unique identifier of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's comment or review text.
 * @param string $db_connection  (Optional) -  Database connection object. If not provided, attempts to create one.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function add_user_review(string $item_id, string $user_id, string $rating, string $comment, $db_connection = null) {

  // Validate inputs (you can expand this with more rigorous validation)
  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return false;
  }
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) { // Check for valid rating
    return false;
  }


  // Use provided database connection, or create one if none is provided
  if ($db_connection === null) {
    // Attempt to connect to a database (adjust connection details)
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
  }


  try {
    // Prepare the SQL statement
    $stmt = $db_connection->prepare(
      "INSERT INTO reviews (item_id, user_id, rating, comment)
       VALUES (:item_id, :user_id, :rating, :comment)"
    );

    // Bind parameters (safer than string concatenation)
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check for success
    return $result;

  } catch (PDOException $e) {
    // Handle database errors (e.g., log the error, display a generic message)
    error_log("Error adding review: " . $e->getMessage()); // Log the error
    return false;
  }
}


// Example Usage:
$item_id = "product123";
$user_id = "user456";
$rating = 4;
$comment = "Great product!  Works as expected.";

if (add_user_review($item_id, $user_id, $rating, $comment)) {
  echo "Review successfully added!
";
} else {
  echo "Failed to add review.
";
}


// Example with a database connection already established (for testing/demo)
// (In a real application, this would come from your application's setup)
$db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

if (add_user_review($item_id, $user_id, $rating, $comment, $db)) {
  echo "Review successfully added (using existing connection)!
";
} else {
  echo "Failed to add review (using existing connection).
";
}


?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a given product.
 *
 *  @param string $product_id - The unique identifier of the product.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the user's review.
 *  @param int $rating - The rating given by the user (e.g., 1-5).
 *  @return bool - True if the review was successfully saved, false otherwise.
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating)
{
    // **Important:** Replace this with your actual database connection code.
    // This is a placeholder for demonstration purposes.

    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage()); // Log the error
        return false;
    }

    // Sanitize inputs to prevent SQL injection
    $product_id = $pdo->quote($product_id);
    $user_name = $pdo->quote($user_name);
    $review_text = $pdo->quote($review_text);

    // Construct the SQL query
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
            VALUES (:product_id, :user_name, :review_text, :rating)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the query
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Database query error: " . $e->getMessage()); // Log the error
        return false;
    }
}


/**
 *  Get User Reviews for a Product
 *
 *  This function retrieves all reviews for a given product.
 *
 *  @param string $product_id - The unique identifier of the product.
 *  @return array - An array of review objects, or an empty array if no reviews are found.
 */
function get_user_reviews(string $product_id)
{
    // **Important:** Replace this with your actual database query code.
    // This is a placeholder for demonstration purposes.

    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return [];
    }

    // Construct the SQL query
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the query
    $stmt->execute();

    // Fetch all the results as an array of objects
    $reviews = $stmt->fetchAll(PDO::FETCH_OBJ);

    return $reviews;
}

/**
 * Displaying the Reviews (Example)
 */
function display_reviews(array $reviews) {
    echo "<h2>User Reviews for Product ID: " . $product_id . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review->user_name . ":</strong> " . $review->review_text . " (Rating: " . $review->rating . ")";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:

// Dummy data for demonstration.  Replace this with real data.
$product_id = "123";

// Save a review
$review_saved = save_user_review($product_id, "John Doe", "This product is amazing!", 5);
if ($review_saved) {
    echo "<p>Review saved successfully!</p>";
} else {
    echo "<p>Failed to save review.</p>";
}

// Get reviews
$reviews = get_user_reviews($product_id);
display_reviews($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review.
 * @param string $userId (Optional) The ID of the user submitting the review.  Used for tracking and potentially preventing duplicates.
 * @return array An array containing the review details or an error message.
 */
function createReview(string $productName, string $reviewText, string $userId = "") {
  // Input validation - Basic example.  Expand this for more robust validation.
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }

  // In a real application, you'd store this in a database.
  // This is a placeholder for demonstration purposes.
  $review = [
    "product_name" => $productName,
    "review_text" => $reviewText,
    "user_id" => $userId,
    "date_created" => date("Y-m-d H:i:s")
  ];

  return $review;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productName The name of the product.
 * @return string HTML markup for displaying the reviews or a message if no reviews exist.
 */
function displayReviews(string $productName) {
  // Placeholder for retrieving reviews from a database.
  // In a real application, you'd query your database.

  $reviews = [
    ["product_name" => "Awesome Gadget", "review_text" => "This gadget is amazing! Highly recommended.", "user_id" => "user123", "date_created" => "2023-10-26 10:00:00"],
    ["product_name" => "Awesome Gadget", "review_text" => "Great value for the price.", "user_id" => "user456", "date_created" => "2023-10-27 14:30:00"],
    ["product_name" => "Basic Widget", "review_text" => "It does the job, but nothing special.", "user_id" => "user789", "date_created" => "2023-10-28 09:15:00"]
  ];


  if (empty($reviews)) {
    return "<p>No reviews yet for this product.</p>";
  }

  $html = "<h2>Reviews for " . $productName . "</h2>";
  $html .= "<ul>";
  foreach ($reviews as $review) {
    $html .= "<li><strong>" . $review['product_name'] . "</strong> - " . $review['review_text'] . " (by " . $review['user_id'] . ") - " . $review['date_created'] . "</li>";
  }
  $html .= "</ul>";
  return $html;
}



// Example Usage:

// Create a review
$newReview = createReview("Awesome Gadget", "This is the best gadget I've ever bought!");

if (isset($newReview["error"])) {
  echo "<p style='color: red;'>Error creating review: " . $newReview["error"] . "</p>";
} else {
  // Display the review
  echo displayReviews("Awesome Gadget");
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It handles input validation, sanitization, and displays the review.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $review_text The text of the review submitted by the user.
 * @param string $username The username of the reviewer (for display).
 * @param array $reviews An array to store reviews (optional, for persistent storage).
 * @return array|string  Returns an array containing review data, or an error message as a string.
 */
function create_review(string $product_id, string $review_text, string $username, array &$reviews = []) {

  // Input Validation & Sanitization
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  $review_text = trim($review_text); // Remove leading/trailing whitespace
  $review_text = htmlspecialchars($review_text); // Protect against XSS attacks
  $review_id = time(); // Generate a unique ID for the review

  // Review Data
  $review = [
    'id' => $review_id,
    'product_id' => $product_id,
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Store the Review (Example: using an array - can be adapted to a database)
  $reviews[$review_id] = $review;

  return $review; // Return the created review data
}


// Example Usage:

// Simulate a product ID
$product_id = '123';

// User Input (Replace with actual form input)
$review_text = $_POST['review_text']; // Assuming the review text is submitted via a form
$username = $_POST['username'];

// Create the review
$review_data = create_review($product_id, $review_text, $username);

// Handle the result
if (is_array($review_data)) {
  // Review was successfully created
  echo "<h2>Review Submitted!</h2>";
  echo "<p><strong>Username:</strong> " . htmlspecialchars($username) . "</p>";
  echo "<p><strong>Review:</strong> " . htmlspecialchars($review_data['review_text']) . "</p>";
  echo "<p><strong>Timestamp:</strong> " . $review_data['timestamp'] . "</p>";
  // Add the review to a display (e.g., echo $review_data['id'] to get the review ID)
} else {
  // An error occurred
  echo "<p>Error: " . $review_data . "</p>";
}



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $userId (Optional) The ID of the user submitting the review.  Useful for tracking.
 * @param array $reviews (Optional) An existing array of reviews to append to.
 *
 * @return array An updated array of reviews, with the new review added.
 */
function addReview(string $productName, string $reviewText, string $userId = '', array &$reviews = []): array
{
    // Sanitize and Validate Input (Crucial for security!)
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    if (empty($reviewText)) {
        return $reviews; // Don't add empty reviews
    }
    //  You would typically add more robust validation here
    //  e.g., check length, prevent malicious code, etc.

    // Create a new review object (or just an array - depending on your needs)
    $review = [
        'user_id' => $userId,
        'review_text' => $reviewText,
        'date' => date('Y-m-d H:i:s') // Add a timestamp for organization
    ];

    // Add the review to the array.  The "&" makes $reviews passed by reference.
    $reviews[] = $review;

    return $reviews;
}



/**
 * Function to Display Reviews
 *
 * Displays reviews for a product.  This is a helper function
 * to simplify the output.
 *
 * @param string $productName The name of the product.
 * @param array $reviews An array of reviews for the product.
 */
function displayReviews(string $productName, array $reviews) : void
{
    echo "<h2>Reviews for " . $productName . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li><strong>" . htmlspecialchars($review['user_id']) . ":</strong> " . htmlspecialchars($review['review_text']) . " - " . htmlspecialchars($review['date']) . "</li>";
        }
        echo "</ul>";
    }
}



// Example Usage:
$product = "Awesome Widget";

// Initial Reviews (can come from a database, for example)
$reviews = [
    ['user_id' => 'user1', 'review_text' => 'Great product!', 'date' => '2023-10-26'],
    ['user_id' => 'user2', 'review_text' => 'Works as expected.', 'date' => '2023-10-27']
];


// Add a new review
$newReview = addReview($product, "This is fantastic!", "user3");
$reviews = addReview($product, "Amazing!", "user4"); //Using the array reference for updates.

// Display the reviews
displayReviews($product, $reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input and returns a formatted review string.
 * It includes basic sanitization to prevent common vulnerabilities.
 *
 * @param string $user_name The user's name.
 * @param string $review_text The user's review text.
 * @param string $rating  The rating (e.g., 1-5).
 * @return string A formatted review string.  Returns an error message if input is invalid.
 */
function generateUserReview(string $user_name, string $review_text, string $rating) {
  // Input Validation - VERY IMPORTANT!
  if (empty($user_name)) {
    return "Error: User name cannot be empty.";
  }
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  // Basic Sanitization -  More robust sanitization is recommended for production.
  $user_name = trim($user_name);  // Remove leading/trailing whitespace
  $review_text = trim($review_text);
  $rating = filter_var($rating, FILTER_VALIDATE_INT); // Ensure rating is an integer

  if ($rating === false || $rating < 1 || $rating > 5) {
    return "Error: Invalid rating.  Please enter a number between 1 and 5.";
  }
  // Formatting the review
  $formatted_review = "Review by: " . htmlspecialchars($user_name) . "
";
  $formatted_review .= "Rating: " . $rating . " stars
";
  $formatted_review .= "Review: " . $review_text . "
";
  $formatted_review .= "---";

  return $formatted_review;
}

// --- Example Usage ---

// Get user input (e.g., from a form)
$userName = $_POST['user_name'] ?? ''; // Use null coalescing operator for safety
$reviewText = $_POST['review_text'] ?? '';
$rating = $_POST['rating'] ?? '';

// Generate the review
$review = generateUserReview($userName, $reviewText, $rating);

// Display the review
echo $review;


// --- Example Input (for testing) ---
/*
//Simulated form data
$name = "John Doe";
$comment = "This product is amazing!";
$stars = 5;

$review = generateUserReview($name, $comment, $stars);
echo $review;

//Another example with error handling
$review = generateUserReview("", "A review", 3); //Empty name
echo $review;
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations with a simplified database interaction.
 *
 * NOTE: This is a simplified example.  In a real-world application, you'd
 *       use prepared statements and proper error handling for security
 *       and robustness.  Also, consider using an ORM (Object-Relational Mapper)
 *       for easier database interactions.
 */

class Review {

    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $created_at;

    public function __construct($user_id, $product_id, $rating, $comment = "") {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->created_at = date("Y-m-d H:i:s"); // Set timestamp
    }

    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function setProduct_id($product_id) {
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getCreated_at() {
        return $this->created_at;
    }

    public function __toString() {
        return "ID: {$this->id}, User ID: {$this->user_id}, Product ID: {$this->product_id}, Rating: {$this->rating}, Comment: {$this->comment}, Created At: {$this->created_at}";
    }
}


// --- Example Usage (Demonstration) ---

// 1. Create a new review
$review1 = new Review(123, 456, 5, "Great product!");
echo "Created Review: " . $review1 . "
";

// 2. Retrieve a review by ID (Assume we have a database query to get the review)
// (This part would be replaced by your database query logic)
// For demonstration, we'll just return a mock review ID.
$reviewId = 1;
$review2 = new Review($user_id = 123, $product_id = 456, $rating = 4, $comment = "Good but could be better");
$review2->setId($reviewId);

echo "Retrieved Review ID: " . $review2 . "
";


// 3. Update a review (Simplified - in a real app, you'd likely have a more robust update process)
$review2->setComment("Amazing product - highly recommended!");
echo "Updated Review: " . $review2 . "
";

// 4. Delete a review (Simplified)
//  (In a real app, you'd delete from the database)
//  echo "Deleted Review (Simulated): " . $review2 . "
";


// ---  Simulated Database Interaction (Replace with your actual DB query) ---

//  This is a placeholder.  In a real application, you would use a database connector
//  (e.g., MySQLi, PDO) to interact with your database.

// Example of a simple create function:
/*
function createReview($user_id, $product_id, $rating, $comment) {
    // Your database connection code here (e.g., mysqli_connect)
    // ...
    // Example SQL:
    // "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)"
    // $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    // $stmt->bind_param("isss", $user_id, $product_id, $rating, $comment);
    // $stmt->execute();
    // ...
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating     The rating given by the reviewer (e.g., 1-5).
 * @param string $comment    The review comment.
 * @param string $db_connection  Database connection object.
 *
 * @return array An array containing the result of the operation (success/failure and message).
 *               Returns ['success' => true, 'message' => 'Review created successfully'] on success.
 *               Returns ['success' => false, 'message' => 'Error message'] on failure.
 */
function create_review(string $productId, string $username, string $rating, string $comment, $db_connection) {
  // Input Validation
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['success' => false, 'message' => 'Username must contain only letters, numbers, and underscores.'];
  }

  if (!preg_match('/^[1-5]$/', $rating)) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  // Sanitize Inputs - Best practice to prevent SQL injection
  $productId = $db_connection->real_escape_string($productId);
  $username = $db_connection->real_escape_string($username);
  $rating = $db_connection->real_escape_string($rating);
  $comment = $db_connection->real_escape_string($comment);

  // SQL Query
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute Query
  if ($db_connection->query($sql) === TRUE) {
    return ['success' => true, 'message' => 'Review created successfully.'];
  } else {
    return ['success' => false, 'message' => 'Error creating review: ' . $db_connection->error];
  }
}


/**
 * Example Usage (For demonstration purposes - replace with your database connection)
 */

//Simulated Database Connection (replace with your actual database connection)
$db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

// Example 1: Successful creation
$result1 = create_review('123', 'JohnDoe', '5', 'Great product!  Highly recommended.', $db_connection);
print_r($result1);

// Example 2:  Validation error
$result2 = create_review('', 'JaneSmith', '3', 'Good value.', $db_connection);
print_r($result2);

// Example 3:  Error (Simulated database error)
$db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
try {
  $db_connection->query("INSERT INTO products (name) VALUES ('Invalid Product Name')");
} catch(PDOException $e) {
  echo "Error: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $item_id  The ID of the item being reviewed.  Used to identify the review.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review submitted by the user.
 * @param int    $rating   The rating given by the user (e.g., 1-5 stars).
 * @param int    $db_connection  An established database connection object.
 *
 * @return array An array containing the success status and a message.
 */
function storeUserReview(
    string $item_id,
    string $user_name,
    string $review_text,
    int    $rating,
    $db_connection
) {
    // Input validation - important for security and data integrity
    if (empty($item_id)) {
        return ['success' => false, 'message' => 'Item ID cannot be empty.'];
    }
    if (empty($user_name)) {
        return ['success' => false, 'message' => 'User name cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        // Handle database error - crucial for debugging
        return ['success' => false, 'message' => 'Database error preparing statement: ' . $db_connection->errorInfo()[2]];
    }

    // Bind the parameters
    $stmt->bind_param("ssis", $item_id, $user_name, $review_text, $rating);

    // Execute the statement
    if (!$stmt->execute()) {
        // Handle database error
        return ['success' => false, 'message' => 'Error executing statement: ' . $db_connection->errorInfo()[2]];
    }

    // Close the statement
    $stmt->close();

    return ['success' => true, 'message' => 'Review submitted successfully!'];
}

/**
 * Example usage:
 */

// Assuming you have a database connection named $conn

// Example 1: Successful Submission
$review_result = storeUserReview(
    'product_123',
    'John Doe',
    'Great product! I highly recommend it.',
    4,
    $conn
);
echo "<pre>";
print_r($review_result);
echo "</pre>";

// Example 2:  Failed due to empty review text
$review_result = storeUserReview(
    'product_456',
    'Jane Smith',
    '',
    3,
    $conn
);
echo "<pre>";
print_r($review_result);
echo "</pre>";


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $username The name of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review text.
 * @param string $db_connection (Optional) - A database connection object. Defaults to null.
 *
 * @return array|false An array containing the review ID, success status, and a message.
 *                     Returns false on error.
 */
function create_user_review(string $product_id, string $username, string $rating, string $comment, $db_connection = null)
{
  // Input Validation (Basic - Enhance as needed)
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    return false; // Return false for empty inputs
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return false; // Invalid rating
  }

  // Database connection - Use a real connection in a production environment
  if ($db_connection === null) {
    // Placeholder for database connection - Implement your database connection logic here
    // This example uses a fake connection object
    $db_connection = new stdClass();
    $db_connection->connect = function() use ($db_connection) {
      // Simulate a successful connection
      return true;
    };
  }

  try {
    // Connect to the database (using the fake connection here)
    $db_connection->connect();

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)";

    // Prepare the statement (more secure than using echo/print)
    $stmt = $db_connection->prepare($sql); // Assumes $db_connection has a prepare() method

    // Bind the parameters
    $stmt->bind_param("siss", $product_id, $username, $rating, $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check for errors
    if ($result === false) {
      // Handle database errors (e.g., log errors)
      error_log("Database error: " . $stmt->error);
      return false;
    }

    // Get the ID of the newly inserted row
    $review_id = $db_connection->lastInsertId();

    // Close the statement
    $stmt->close();

    return ['review_id' => $review_id, 'success' => true, 'message' => "Review submitted successfully!"];

  } catch (Exception $e) {
    // Handle exceptions (e.g., connection errors)
    error_log("Exception: " . $e->getMessage());
    return false;
  } finally {
    // Close the database connection - Important to release resources
    if (isset($db_connection) && $db_connection->close) {
        $db_connection->close();
    }
  }
}



// Example Usage (Illustrative - Requires database setup)
// Assuming you have a 'reviews' table in your database with columns:
// product_id (string), username (string), rating (int), comment (text)

// Create a sample review
$review = create_user_review("prod123", "John Doe", 4, "Great product, highly recommended!", null);

if ($review) {
  echo "Review created successfully. Review ID: " . $review['review_id'] . "<br>";
  echo "Status: " . ($review['success'] ? "Success" : "Failed") . "<br>";
  echo "Message: " . $review['message'] . "<br>";
} else {
  echo "Error creating review. Check logs for details.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It includes basic validation, sanitization, and storage.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $rating The user's rating (1-5).
 * @param string $userEmail The user's email address.
 * @param string $storageMethod 'database' or 'file' -  determines how reviews are stored.
 *
 * @return array|string Returns an array of reviews or a success/error message.
 */
function createAndStoreUserReview(
    string $productName,
    string $reviewText,
    int $rating,
    string $userEmail,
    string $storageMethod = 'database' // Default to database
) {
    // Input Validation & Sanitization - IMPORTANT!
    if (empty($productName)) {
        return ['status' => 'error', 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['status' => 'error', 'message' => 'Rating must be between 1 and 5.'];
    }
    if (empty($userEmail)) {
        return ['status' => 'error', 'message' => 'User email cannot be empty.'];
    }

    // Prepare review data -  Important to prevent SQL injection if using database
    $reviewData = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'user_email' => $userEmail,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
    ];

    // --- Database Storage (Example) ---
    if ($storageMethod === 'database') {
        // Replace with your database connection details
        $dbHost = 'localhost';
        $dbName = 'your_database_name';
        $dbUser = 'your_database_user';
        $dbPassword = 'your_database_password';

        try {
            // Establish database connection
            $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

            // Check connection
            if ($conn->connect_error) {
                throw new Exception("Connection failed: " . $conn->connect_error);
            }

            // Prepare SQL statement to prevent SQL injection
            $sql = "INSERT INTO reviews (product_name, review_text, rating, user_email, created_at) VALUES (?, ?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("ssiii", $productName, $reviewText, $rating, $userEmail);
                if ($stmt->execute()) {
                    $stmt->close();
                    $conn->close();
                    return ['status' => 'success', 'message' => 'Review submitted successfully!'];
                } else {
                    $stmt->close();
                    $conn->close();
                    return ['status' => 'error', 'message' => 'Error submitting review: ' . $stmt->error];
                }
            } else {
                $conn->close();
                return ['status' => 'error', 'message' => 'Failed to prepare statement.'];
            }

        } catch (Exception $e) {
            return ['status' => 'error', 'message' => 'Database error: ' . $e->getMessage()];
        }

    }
    // --- File Storage (Example - Simpler) ---
    // In a real application, you'd use a more robust file handling system.
    else if ($storageMethod === 'file') {
        $file = 'reviews.txt'; // or a better name and location
        $data = $reviewData['review_text'] . ', Rating: ' . $reviewData['rating'] . ' - ' . $reviewData['user_email'] . ' - ' . $reviewData['created_at'] . "
";
        file_put_contents($file, $data, FILE_APPEND);
        return ['status' => 'success', 'message' => 'Review submitted to file.'];
    }
    else {
      return ['status' => 'error', 'message' => 'Invalid storage method specified.  Choose "database" or "file"'];
    }
}


// Example Usage:
$reviewResult = createAndStoreUserReview(
    'Awesome Product',
    'This product is amazing! I highly recommend it.',
    4,
    'user@example.com',
    'database' // or 'file'
);

print_r($reviewResult);

// Example File Storage Usage:
$reviewResultFile = createAndStoreUserReview(
    'Another Product',
    'Good value for the money.',
    5,
    'anotheruser@example.com',
    'file'
);

print_r($reviewResultFile);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects. Each review object should have:
 *                         - $author: The name of the reviewer.
 *                         - $rating: The rating given by the reviewer (e.g., 1-5).
 *                         - $comment: The user's written review.
 * @return string HTML formatted review section.
 */
function displayUserReviews(string $productName, array $reviews)
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class=\"review-container\">";
    $html .= "<h3>Reviews for {$productName}</h3>";
    $html .= "<ul class=\"review-list\">";

    foreach ($reviews as $review) {
        $html .= "<li class=\"review-item\">";
        $html .= "<p><strong>Author:</strong> {$review['author']}</p>";
        $html .= "<p><strong>Rating:</strong> {$review['rating']}/5</p>";
        $html .= "<p><strong>Comment:</strong> {$review['comment']}</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


// Example Usage:
$productName = "Awesome Widget";

$reviews = [
    [
        'author' => 'John Doe',
        'rating' => 5,
        'comment' => 'This widget is amazing!  It does exactly what I need and it's very well-built.',
    ],
    [
        'author' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Great product.  Easy to use and the support team was very helpful.',
    ],
    [
        'author' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It\'s okay.  Could be better but for the price, it\'s decent.',
    ],
];


// Get the HTML output
$reviewHTML = displayUserReviews($productName, $reviews);

// Output the HTML (you would typically display this in your HTML page)
echo $reviewHTML;

?>


// Example of sanitization (replace with your chosen method):
$safeComment = htmlspecialchars($review['comment'], ENT_QUOTES, 'UTF-8');


<?php

/**
 * Class Review
 *
 * This class provides functionality for creating, saving, and retrieving user reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * @param int $product_id The ID of the product being reviewed.
     * @param string $user_name The name of the user submitting the review.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $product_id, string $user_name, string $rating, string $comment) {
        // Validate inputs (important for security and data integrity)
        if (!$this->validateReviewData($product_id, $user_name, $rating, $comment)) {
            return false;
        }

        // Sanitize inputs (crucial for security - prevents SQL injection)
        $product_id = $this->db->quote($product_id);
        $user_name = $this->db->quote($user_name);
        $rating = $this->db->quote($rating);
        $comment = $this->db->quote($comment);

        // SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                VALUES (:product_id, :user_name, :rating, :comment)";

        // Prepare and execute the query
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        if ($stmt->execute()) {
            return $this->db->lastInsertId();
        } else {
            // Handle errors (logging recommended)
            error_log("Error creating review: " . $stmt->errorInfo()[2]);
            return false;
        }
    }


    /**
     * Get a review by ID
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return array|false An associative array containing review details, or false on failure.
     */
    public function getReview(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE id = :review_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':review_id', $review_id);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);

        return $review ?: false; // Return false if no review found
    }

    /**
     * Get reviews for a product
     *
     * @param int $product_id The ID of the product to retrieve reviews for.
     * @return array An array of associative arrays, each representing a review for the product.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

     /**
      * Validate review data
      *
      * @param int $product_id The ID of the product being reviewed.
      * @param string $user_name The name of the user submitting the review.
      * @param string $rating The rating given by the user (e.g., 1-5).
      * @param string $comment The user's comment about the product.
      * @return bool True if the data is valid, false otherwise.
      */
    private function validateReviewData(int $product_id, string $user_name, string $rating, string $comment) {
        // Add more validation rules here, such as:
        // - Check if rating is a valid number (e.g., 1-5)
        // - Check if user_name is not empty
        // - Check if comment length is within acceptable bounds.

        // Example:
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }
        if (empty($user_name)) {
            return false;
        }
        return true;
    }
}

// Example Usage (assuming you have a PDO database connection)
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
// $review = new Review($db);

// $review_id = $review->createReview(123, "John Doe", 4, "Great product!");
// if ($review_id) {
//     echo "New review created with ID: " . $review_id . "<br>";
// } else {
//     echo "Failed to create review.";
// }

// $review = $review->getReview($review_id);
// if ($review) {
//     echo "Review details: " . print_r($review, true) . "<br>";
// } else {
//     echo "Review not found.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a given product or item.
 *
 * @param string $productId The ID of the product/item being reviewed.
 * @param string $productName The name of the product/item.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param int $rating (optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review data or an error message.
 */
function createReview(string $productId, string $productName, string $reviewText, string $username, int $rating = 0) {
  // Input validation - crucial for security and data integrity
  if (empty($productId) || empty($productName) || empty($reviewText) || empty($username)) {
    return ['error' => 'All fields are required.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['error' => 'Rating must be a number between 1 and 5.'];
  }

  // **Important:  Sanitization and Data Sanitization**
  //  You MUST sanitize user input to prevent XSS and SQL injection vulnerabilities.
  //  This is a simplified example; you'll need to adapt this to your database setup.
  $reviewText = htmlspecialchars($reviewText); // Escape HTML entities
  //  Consider using a database query with prepared statements to protect against SQL injection.

  // **Simulated Database Storage (Replace with your actual database interaction)**
  // In a real application, you'd use a database.
  $review = [
    'productId' => $productId,
    'productName' => $productName,
    'reviewText' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for sorting/display
  ];

  // Add the review to an array (simulating a database insertion)
  $reviews = getReviewsForProduct($productId); //  Retrieve existing reviews
  $reviews[] = $review; 

  return $reviews;
}



/**
 * Retrieves all reviews for a specific product.
 * 
 * @param string $productId The ID of the product.
 * @return array An array of review objects.  Empty array if no reviews found.
 */
function getReviewsForProduct(string $productId) {
  //Simulated retrieval from database
  // In a real scenario, this would query your database.
  $reviews = [
    ['productId' => '123', 'productName' => 'Awesome Widget', 'reviewText' => 'Great product!', 'username' => 'john_doe', 'rating' => 5, 'date' => '2023-10-27 10:00:00'],
    ['productId' => '123', 'productName' => 'Awesome Widget', 'reviewText' => 'Works as expected.', 'username' => 'jane_smith', 'rating' => 4, 'date' => '2023-10-26 14:30:00'],
    ['productId' => '456', 'productName' => 'Basic Gadget', 'reviewText' => 'Okay, but overpriced.', 'username' => 'peter_jones', 'rating' => 2, 'date' => '2023-10-25 09:15:00']
  ];
  
  // Filter reviews for the given product ID
  $filteredReviews = [];
  foreach($reviews as $review){
    if ($review['productId'] == $productId) {
      $filteredReviews[] = $review;
    }
  }
  
  return $filteredReviews;
}


/**
 * Displays a list of reviews for a product.
 * 
 * @param array $reviews An array of review objects.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<h2>Reviews for " . $reviews[0]['productName'] . "</h2>"; // Assume first product is the relevant one
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<p><strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . "</p>";
    echo "<p>Rating: " . $review['rating'] . " stars</p>";
    echo "<p>Date: " . $review['date'] . "</p>";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:
$productId = '123';
$productName = 'Awesome Widget';

// Create a review
$reviewResult = createReview($productId, $productName, "This is an amazing product!", "john_doe", 5);

if (isset($reviewResult['error'])) {
    echo "<p style='color: red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
  // Display the reviews
  displayReviews($reviewResult);
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product being reviewed.
 * @param string $user_id  The unique identifier for the user submitting the review.
 * @param string $review_text The text of the user's review.
 * @param int    $rating    The rating given by the user (e.g., 1-5 stars).
 * @param int    $timestamp Unix timestamp for the review creation.
 *
 * @return bool  True on successful submission, false on error.
 */
function submit_review(string $product_id, string $user_id, string $review_text, int $rating, int $timestamp = time()) {
  // Validate inputs - VERY IMPORTANT!
  if (empty($product_id) || empty($user_id) || empty($review_text) || $rating < 1 || $rating > 5) {
    error_log("Invalid review data submitted: product_id=$product_id, user_id=$user_id, review_text=$review_text, rating=$rating");
    return false;
  }

  // Sanitize inputs (Crucial for security!)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

  // Add data to a database (replace this with your actual database code)
  // This is a simplified example - use prepared statements for security!
  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_database_user";
  $db_password = "your_database_password";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare the SQL statement using prepared statements - HIGHLY RECOMMENDED!
    $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
    $stmt->execute([$product_id, $user_id, $review_text, $rating, $timestamp]);

    return true;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}



/**
 * Retrieve User Reviews
 *
 * Retrieves reviews for a specific product.
 *
 * @param string $product_id The product ID to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews(string $product_id) {
  // Implement your database query here to fetch reviews for the product.
  // Example (replace with your actual query):
  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_database_user";
  $db_password = "your_database_password";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = ? ORDER BY timestamp DESC");  //Order by latest reviews
    $stmt->execute([$product_id]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); //Fetch as an associative array

    return $reviews;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return []; // Return empty array on error
  }
}


// Example Usage (Demonstration)
//  $product_id = "product123";
//  $user_id = "user456";
//  $review_text = "This is a great product!";
//  $rating = 5;
//  $timestamp = time();
//
// if (submit_review($product_id, $user_id, $review_text, $rating, $timestamp)) {
//   echo "Review submitted successfully!
";
// } else {
//   echo "Error submitting review.
";
// }

// Example to get reviews:
//$reviews = get_reviews($product_id);
//if (!empty($reviews)) {
//  echo "Reviews for product " . $product_id . ":
";
//  foreach ($reviews as $review) {
//    echo "  - User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
//  }
//} else {
//  echo "No reviews found for product " . $product_id . "
";
//}

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to handle user reviews.
 * It allows adding, retrieving, and deleting reviews.
 */
class Review {

    private $db; // Database connection object (implementation not defined here)

    /**
     * Constructor
     *
     * Initializes the Review object.  Requires a database connection object.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $productID The ID of the product the review is for.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's written review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $userId, string $productID, string $rating, string $comment) {
        try {
            // Sanitize inputs (basic - improve for production)
            $userId = filter_var($userId, FILTER_SANITIZE_STRING);
            $productID = filter_var($productID, FILTER_SANITIZE_STRING);
            $rating = filter_var($rating, FILTER_VALIDATE_INT);
            $comment = filter_var($comment, FILTER_SANITIZE_STRING);

            if (!$rating || $rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }

            // SQL query - Use prepared statements to prevent SQL injection
            $stmt = $this->db->prepare(
                "INSERT INTO reviews (user_id, product_id, rating, comment)
                 VALUES (:user_id, :product_id, :rating, :comment)"
            );

            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':product_id', $productID);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param string $productID The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProduct(string $productID) {
        try {
            $stmt = $this->db->prepare(
                "SELECT * FROM reviews WHERE product_id = :product_id"
            );
            $stmt->bindParam(':product_id', $productID);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }


    /**
     * Delete a review.
     *
     * @param int $reviewID The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewID) {
        try {
            $stmt = $this->db->prepare(
                "DELETE FROM reviews WHERE id = :review_id"
            );
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


// Example usage (assuming you have a database connection $db)
// Create a database connection (replace with your actual connection details)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$dbname = 'your_db_name';

try {
    $db = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $review = new Review($db);

    // Add a review
    $review->addReview('user123', 'product456', 4, 'Great product!');

    // Get reviews for product456
    $reviews = $review->getReviewsByProduct('product456');
    echo "Reviews for product456:<br>";
    foreach ($reviews as $review) {
        echo "- User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
    }

    // Delete a review (example)
    if($review->deleteReview(1)) {
        echo "<br>Review with ID 1 deleted successfully.";
    } else {
        echo "<br>Failed to delete review.";
    }


} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input for a review and generates a formatted review string.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating A numeric rating from 1 to 5.
 * @param string $comment The user's review comment.
 *
 * @return string A formatted review string.
 */
function generateReview(string $username, int $rating, string $comment): string
{
  // Input validation -  Important for security and data integrity
  if (!is_string($username) || empty($username)) {
    return "Error: Username cannot be empty.";
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }
  if (empty($comment)) {
    return "Error: Comment cannot be empty.";
  }


  // Build the review string
  $review = "Review by: " . htmlspecialchars($username) . "
";
  $review .= "Rating: " . $rating . "/5
";
  $review .= "Comment: " . htmlspecialchars($comment) . "
";
  $review .= "---";

  return $review;
}

// Example Usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

$review = generateReview($username, $rating, $comment);
echo $review . "
";

// Example with invalid input:
$invalidReview = generateReview("", 3, "This is a review.");
echo $invalidReview . "
";

$anotherInvalid = generateReview("Jane", 6, "Awesome!");
echo $anotherInvalid . "
";


?>


<?php
// ... (generateReview function from above) ...

// Get user input (e.g., from a form)
$username = $_POST['username'];
$rating = (int)$_POST['rating']; // Cast to integer
$comment = $_POST['comment'];

// Generate the review
$review = generateReview($username, $rating, $comment);

// Display the review on the page
echo "<h2>Review:</h2>";
echo $review;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes features for saving reviews, retrieving reviews,
 * and displaying them.
 */

class UserReview {

    private $db_host = "localhost"; // Replace with your database connection details
    private $db_name = "your_database_name";
    private $db_user = "your_username";
    private $db_password = "your_password";

    public function __construct() {
        // Establish database connection
        $this->conn = new mysqli($this->db_host, $this->db_user, $this->db_password, $this->db_name);

        // Check connection
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    /**
     * Saves a new user review.
     *
     * @param string $username   The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on success, false on failure.
     */
    public function saveReview($username, $reviewText) {
        $reviewText = $this->conn->real_escape_string($reviewText); // Sanitize input

        $sql = "INSERT INTO reviews (username, review_text) VALUES ('$username', '$reviewText')";

        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews are found.
     */
    public function getReviews() {
        $sql = "SELECT id, username, review_text, created_at FROM reviews ORDER BY created_at DESC";
        $result = $this->conn->query($sql);

        $reviews = [];
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $reviews[] = new ReviewObject($row);  // Pass the row data to the ReviewObject
            }
        }
        return $reviews;
    }


    /**
     *  Review Object -  A simple class to represent a review.
     */
    private function __construct(){} //Prevent instantiation


    // Nested class -  Allows instantiation of the review object.
    private static $instance = null; // Singleton pattern.

    public static function getInstance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

}


/**
 * Review Object -  A simple class to represent a review.
 */
class ReviewObject {
    public $id;
    public $username;
    public $review_text;
    public $created_at;

    public function __construct($row) {
        $this->id = $row["id"];
        $this->username = $row["username"];
        $this->review_text = $row["review_text"];
        $this->created_at = $row["created_at"];
    }
}



// Example usage (after creating the database table 'reviews')

// Create an instance of the Review class
$review = UserReview::getInstance();

// Save a review
if ($review->saveReview("JohnDoe", "This is a great product!")) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Retrieve all reviews
$allReviews = $review->getReviews();

// Display reviews
echo "<br><br><h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>Username:</strong> " . $review->username . "<br>";
    echo "<strong>Review:</strong> " . $review->review_text . "<br>";
    echo "<strong>Date:</strong> " . $review->created_at . "<br><br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews for a given item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_id The unique identifier of the user submitting the review.
 * @param string $rating The user's rating (e.g., 1-5 stars).
 * @param string $comment The user's written comment about the item.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $item_id, string $user_id, string $rating, string $comment)
{
    // Validate inputs (important for security and data integrity)
    if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Missing required fields for review submission.");
        return false;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating provided.");
        return false;
    }

    // In a real application, you would typically interact with a database here.
    // This example simulates database interaction for demonstration purposes.

    // Data for demonstration
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your database credentials
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    try {
        // Prepare the SQL statement
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (item_id, user_id, rating, comment)
             VALUES (:item_id, :user_id, :rating, :comment)"
        );

        // Bind parameters
        $stmt->bindParam(':item_id', $item_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Return true if successful
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        // Handle database errors appropriately (logging, displaying an error message to the user)
        return false;
    }
}


// Example Usage:

// Simulate user data
$item_id = "product123";
$user_id = "user456";
$rating = 4;
$comment = "Great product, highly recommend!";

// Save the review
$success = saveReview($item_id, $user_id, $rating, $comment);

if ($success) {
    echo "Review successfully saved!";
} else {
    echo "Failed to save review.  Check the logs for details.";
}


?>


<?php

/**
 * User Review Function - Handles user reviews for a product or item.
 *
 * This function allows you to:
 *  - Store user reviews in a database (optional).
 *  - Display reviews on a product page.
 *  - Implement a basic rating system.
 *
 * @param string $product_id The ID of the product or item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (1-5).
 *
 * @return array An array containing the review data (stored in the database)
 *               and the display data for the review.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating)
{
    // --- Data Validation and Sanitization ---
    $user_name = trim($user_name); // Remove whitespace
    $review_text = trim($review_text);
    $rating = intval($rating); // Ensure rating is an integer

    if (empty($user_name) || empty($review_text)) {
        return ['success' => false, 'message' => 'User name and review text are required.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // --- Database Interaction (Example - Adapt to your DB) ---
    // You'll need to replace this with your actual database connection and queries.

    //  Assuming you have a database table called 'reviews' with columns:
    //  - id (INT, PRIMARY KEY, AUTO_INCREMENT)
    //  - product_id (INT)
    //  - user_name (VARCHAR)
    //  - review_text (TEXT)
    //  - rating (INT)
    //  - created_at (TIMESTAMP)

    // This is just a placeholder; replace with your actual database code.
    try {
        // Connect to your database here (e.g., using PDO)
        // ...

        $db_connection = // your database connection object

        $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating, created_at)
                VALUES (:product_id, :user_name, :review_text, :rating, NOW())";

        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->execute();

        $review_id = $db_connection->lastInsertId(); // Get the ID of the inserted row

        return ['success' => true, 'review_id' => $review_id, 'message' => 'Review submitted successfully!'];

    } catch (Exception $e) {
        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];
    }
}

/**
 * Function to display reviews for a product.
 *
 * @param string $product_id The ID of the product to display reviews for.
 */
function display_reviews(string $product_id)
{
    // --- Database Interaction (Example - Adapt to your DB) ---
    // This assumes you have a table called 'reviews' with the same columns as above.

    try {
        // Connect to your database here (e.g., using PDO)
        // ...

        $db_connection = // your database connection object

        $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all results

        if (empty($reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<p><strong>User:</strong> " . htmlspecialchars($review['user_name']) . "</p>";
                echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
                echo "<p>" . htmlspecialchars($review['review_text']) . "</p>";
                echo "<p><em>Created at:</em> " . date('Y-m-d H:i:s', strtotime($review['created_at'])) . "</p>";
                echo "</li>";
            }
            echo "</ul>";
        }

    } catch (Exception $e) {
        echo "<p>Error fetching reviews: " . $e->getMessage() . "</p>";
    }
}


// --- Example Usage ---

// Submit a review
$result = submit_review('123', 'John Doe', 'This is a great product!', 5);
if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Error: " . $result['message'] . "</p>";
}


// Display reviews for product ID '123'
display_reviews('123');
?>


<?php

/**
 * This function generates a user review based on input data.
 *
 * @param string $name The name of the user.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $comment An optional comment from the user.
 *
 * @return string A formatted user review string.
 */
function generateUserReview(string $name, int $rating, string $comment = "") {
    // Input Validation (Important for security and robustness)
    if (!is_string($name)) {
        return "Error: User name must be a string.";
    }
    if (!is_int($rating) || $rating < 1 || $rating > 5) {
        return "Error: Rating must be an integer between 1 and 5.";
    }


    $review = "Review by: " . $name . "
";
    $review .= "Rating: " . $rating . "/5
";
    if (!empty($comment)) {
        $review .= "Comment: " . $comment . "
";
    }
    return $review;
}



// Example Usage:
$user1Review = generateUserReview("Alice", 4, "Great product!  I love it.");
echo $user1Review . "

";

$user2Review = generateUserReview("Bob", 3);
echo $user2Review . "

";

$user3Review = generateUserReview("Charlie", 5, "Excellent value for money!");
echo $user3Review . "

";


// Example of handling invalid input:
$invalidReview = generateUserReview(123, 2, "This is bad"); // Invalid user name
echo $invalidReview . "

";

$invalidRatingReview = generateUserReview("David", 7, "Too high!"); // Invalid rating
echo $invalidRatingReview . "

";


?>


<?php

/**
 * User Review Class - Allows users to submit and view reviews.
 */
class UserReview {

  private $reviews = [];

  /**
   * Adds a new review.
   *
   * @param string $username The username of the reviewer.
   * @param string $comment The review comment.
   * @return bool True if the review was successfully added, false otherwise.
   */
  public function addReview(string $username, string $comment) {
    if (empty($username) || empty($comment)) {
      return false; // Or throw an exception for better error handling
    }

    $this->reviews[] = [
      'username' => $username,
      'comment' => $comment,
      'date' => date('Y-m-d H:i:s') // Add timestamp for sorting
    ];
    return true;
  }

  /**
   * Retrieves all reviews.
   *
   * @return array An array of review objects.
   */
  public function getAllReviews() {
    return $this->reviews;
  }

  /**
   * Retrieves reviews based on a specified criteria (e.g., most recent).
   *
   * @param string $sortCriteria (optional) 'recent' or 'oldest'. Defaults to 'recent'.
   * @return array An array of review objects, sorted based on the criteria.
   */
  public function getReviews($sortCriteria = 'recent') {
    if ($sortCriteria !== 'recent' && $sortCriteria !== 'oldest') {
      //  Optionally throw an exception for invalid criteria
      //throw new InvalidArgumentException("Invalid sort criteria.  Must be 'recent' or 'oldest'.");
      $sortCriteria = 'recent';
    }

    // Sort the reviews based on the criteria.  'recent' sorts by date descending
    usort($this->reviews, function ($review1, $review2) {
      return $review2['date'] <=> $review1['date'];
    });

    return $this->reviews;
  }


  /**
   * Removes a review by username.
   *
   * @param string $username The username of the review to remove.
   * @return bool True if the review was successfully removed, false otherwise.
   */
  public function removeReview(string $username) {
    global $reviews; // Access the global reviews array
    foreach ($reviews as $key => $review) {
      if ($review['username'] === $username) {
        unset($reviews[$key]);
        return true;
      }
    }
    return false;
  }
}



// --- Example Usage ---

// Create a Review object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product, highly recommend!');
$reviewSystem->addReview('JaneSmith', 'Could be better, needs more features.');
$reviewSystem->addReview('PeterJones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";

// Get reviews sorted by recent date
$recentReviews = $reviewSystem->getReviews();
echo "<h2>Recent Reviews:</h2>";
echo "<pre>";
print_r($recentReviews);
echo "</pre>";

// Get reviews sorted by oldest date
$oldestReviews = $reviewSystem->getReviews('oldest');
echo "<h2>Oldest Reviews:</h2>";
echo "<pre>";
print_r($oldestReviews);
echo "</pre>";

// Remove a review
$reviewSystem->removeReview('JaneSmith');

// Verify removal
echo "<h2>Reviews After Removing JaneSmith:</h2>";
echo "<pre>";
print_r($reviewSystem->getAllReviews());
echo "</pre>";

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review, rating, and optionally, their ID,
 * and stores it in a database.
 *
 * @param string $review The user's review text.
 * @param int $rating The user's rating (e.g., 1-5 stars).
 * @param int|null $userId The user's ID (optional). If null, a new user is assumed.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $review, int $rating, ?int $userId = null): bool
{
    // **Database Connection & Configuration**
    // Replace these with your actual database credentials.
    $host = 'localhost';
    $username = 'your_db_username';
    $password = 'your_db_password';
    $database = 'your_db_name';

    // **Error Handling and Validation**
    if (empty($review)) {
        error_log("Error: Review cannot be empty.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // **Database Interaction**
    try {
        // Establish connection
        $conn = new PDO("mysql:host=$host;dbname=$database", $username, $password);
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable error reporting

        // Prepare the SQL statement
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, review, rating) VALUES (:userId, :review, :rating)");

        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        // Close the connection
        $conn = null;

        return true;

    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage()); // Log the error for debugging
        return false;
    }
}


// **Example Usage:**

// Save a review from a logged-in user (assuming user ID is 123):
$reviewResult = saveUserReview("This product is amazing!", 5, 123);
if ($reviewResult) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}


// Save a review from a guest user (will create a new user):
$reviewResult = saveUserReview("Great service!", 4);
if ($reviewResult) {
    echo "Review saved successfully (new user)!";
} else {
    echo "Failed to save review (new user).";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and formatting for improved readability.
 */

class UserReview {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product or item being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating   The rating given by the user (e.g., 1-5 stars).
     * @param string $comment The user's comment/feedback.
     */
    public function __construct(int $productId, int $userId, int $rating, string $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Set review date to current timestamp
    }

    /**
     * Getters
     *
     * Provides methods to access the review's attributes.
     *
     * @return array An associative array containing the review's data.
     */
    public function getReviewData(): array {
        return [
            'product_id' => $this->productId,
            'user_id' => $this->userId,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'review_date' => $this->reviewDate,
        ];
    }

    /**
     * Format Review for Display
     *
     * Formats the review data for display in a user-friendly format.
     *
     * @return string  A formatted string representing the review.
     */
    public function formatReview(): string {
        return sprintf(
            "<b>Product ID:</b> %d<br>
             <b>User ID:</b> %d<br>
             <b>Rating:</b> %d stars<br>
             <b>Comment:</b> %s<br>
             <b>Review Date:</b> %s",
            $this->productId,
            $this->userId,
            $this->rating,
            $this->comment,
            $this->reviewDate
        );
    }
}

// --- Example Usage ---

// Create a new review
$review = new UserReview(123, 456, 5, "Excellent product!  Highly recommended.");

// Get the review data
$reviewData = $review->getReviewData();
print_r($reviewData);  // Output:  Associative array

// Format and display the review
echo $review->formatReview() . "<br>"; // Output:  Formatted string

// ---  Example of Saving to a Database (Illustrative - requires database setup) ---
// This section is a placeholder and needs adaptation for your specific database.

/*
// Example using mysqli (adjust for your database library)
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Prepare the SQL statement
$sql = "INSERT INTO reviews (product_id, user_id, rating, comment, review_date)
        VALUES (?, ?, ?, ?, ?)";

// Prepare statement
$stmt = $conn->prepare($sql);

// Bind parameters
$stmt->bind_param("isss", $review->productId, $review->userId, $review->rating, $review->comment);

// Execute statement
if ($stmt->execute()) {
    echo "New record created successfully";
} else {
    echo "Error: " . $stmt->error;
}

$stmt->close();
$conn->close();
*/
?>


<?php

/**
 * User Review Class - Allows users to submit and view reviews for a product.
 */
class UserReview {

    private $db;  // Database connection (implementation details hidden)

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Submits a new user review.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return bool True on success, false on failure.
     */
    public function submitReview(int $product_id, string $user_name, string $review_text) {
        // Basic input validation (improve this in a real application)
        if (!$product_id || !$user_name || !$review_text) {
            return false;
        }

        // Construct the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, review_text, review_date)
                VALUES (:product_id, :user_name, :review_text, NOW())";

        // Prepare the statement
        $stmt = $this->db->prepare($sql); // Assume $this->db has a prepare method

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);

        // Execute the query
        return $stmt->execute();
    }


    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        $results = $stmt->fetchAll(PDO::FETCH_ASSOC); // Adapt this based on your database library

        $reviews = [];
        foreach ($results as $row) {
            $reviews[] = (object) [
                'review_id' => $row['review_id'],
                'product_id' => $row['product_id'],
                'user_name' => $row['user_name'],
                'review_text' => $row['review_text'],
                'review_date' => $row['review_date']
            ];
        }
        return $reviews;
    }


    /**
     * Retrieves a single review by ID.
     *
     * @param int $review_id The ID of the review.
     * @return object|null  A review object if found, null otherwise.
     */
    public function getReviewById(int $review_id) {
        $sql = "SELECT * FROM reviews WHERE review_id = :review_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':review_id', $review_id);

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($result) {
            return (object) [
                'review_id' => $result['review_id'],
                'product_id' => $result['product_id'],
                'user_name' => $result['user_name'],
                'review_text' => $result['review_text'],
                'review_date' => $result['review_date']
            ];
        }
        return null;
    }
}


// Example usage (assuming you have a database connection established)

// Sample database connection - replace with your actual database connection
$db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");



// Create an instance of the UserReview class
$review = new UserReview($db);

// Submit a review
if ($review->submitReview(1, "John Doe", "Great product!  Highly recommended.")) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

// Get reviews for product ID 1
$reviews = $review->getReviewsByProduct(1);

if ($reviews) {
    echo "<br><h2>Reviews for Product 1:</h2>";
    foreach ($reviews as $review) {
        echo "<p><strong>User:</strong> " . $review->user_name . "<br>";
        echo "<strong>Review:</strong> " . $review->review_text . "<br>";
        echo "<strong>Date:</strong> " . $review->review_date . "</p>";
    }
} else {
    echo "<p>No reviews found for product 1.</p>";
}

// Get review by ID
$singleReview = $review->getReviewById(1);

if ($singleReview) {
    echo "<br><h2>Single Review:</h2>";
    echo "<p><strong>User:</strong> " . $singleReview->user_name . "<br>";
    echo "<strong>Review:</strong> " . $singleReview->review_text . "<br>";
    echo "<strong>Date:</strong> " . $singleReview->review_date . "</p>";
} else {
    echo "<p>Review not found.</p>";
}
?>


<?php

/**
 * User Review Class
 * 
 * This class allows you to manage and display user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productID;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (Optional) The unique ID for the review. Defaults to null.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productID The ID of the product the review is for.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @param string $date The date of the review submission (e.g., 'YYYY-MM-DD').
     */
    public function __construct($reviewId = null, $userId, $productID, $rating, $comment, $date) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productID = $productID;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductID() {
        return $this->productID;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     * Display Review (Simple Formatting)
     *
     * Formats and displays the review details.
     *
     * @return string  The formatted review string.
     */
    public function displayReview() {
        return "Review ID: " . ($this->reviewId ? $this->reviewId : "N/A") .
               "
User ID: " . $this->userId .
               "
Product ID: " . $this->productID .
               "
Rating: " . $this->rating .
               "
Comment: " . $this->comment .
               "
Date: " . $this->date;
    }
}



/**
 *  Example Usage
 */

// Create a review object
$review = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.", '2023-10-27');

// Display the review
echo $review->displayReview() . "
";

//Another example
$review2 = new UserReview(1, 456, 789, 4, "It's okay.", '2023-10-26');
echo $review2->displayReview() . "
";

//  Example of managing reviews in an array (Illustrative - you'd likely use a database)
$reviews = [];
$reviews[] = new UserReview(1, 101, 102, 3, "Good value", '2023-10-25');
$reviews[] = new UserReview(2, 102, 101, 5, "Excellent!", '2023-10-27');


// Display all reviews
echo "--- All Reviews ---
";
foreach ($reviews as $review) {
    echo $review->displayReview() . "

";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It utilizes a simple database (you'll need to adapt this to your specific database setup).
 *
 * @param string $productName The name of the product the review is for.
 * @param string $user_name The name of the user writing the review.
 * @param string $review_text The content of the review.
 * @param int $rating (Optional)  A rating from 1-5. Defaults to 0.
 *
 * @return array An array containing the result of the operation:
 *              - 'success': true if the review was created/updated successfully, false otherwise.
 *              - 'message': A success/error message.
 *              - 'review_id': The ID of the newly created review (if successful).
 *              - 'review': The review data (name, text, rating) if successful.
 */
function create_user_review(string $productName, string $user_name, string $review_text, int $rating = 0): array
{
    // **IMPORTANT:**  Replace this with your actual database connection code.
    // This is just a placeholder.
    $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // --- Data Sanitization and Validation ---
        // Add more validation rules as needed.  For example, length limits on text,
        //  rating restrictions, etc.

        // Escape user input to prevent SQL injection
        $user_name = $db_connection->quote($user_name);
        $review_text = $db_connection->quote($review_text);

        // --- Insert into Database ---
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_name, user_name, review_text, rating) VALUES (?, ?, ?, ?)"
        );
        $stmt->execute([$productName, $user_name, $review_text, $rating]);

        $review_id = $db_connection->lastInsertId();

        return [
            'success' => true,
            'message' => "Review created successfully!",
            'review_id' => $review_id,
            'review' => [
                'product_name' => $productName,
                'user_name' => $user_name,
                'review_text' => $review_text,
                'rating' => $rating
            ]
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => "Error creating review: " . $e->getMessage()
        ];
    }
}


/**
 * Example usage:
 */

// Create a review
$result = create_user_review('Awesome Product', 'John Doe', 'This product is fantastic!');
print_r($result);

// Update a review (assuming you have an update function - see below)
// ...

// Delete a review (assuming you have a delete function - see below)
// ...

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a product or item.
 * It provides basic functionality like adding reviews, displaying them, and potentially
 * handling ratings.
 *
 * @param string $productId The unique identifier for the product or item being reviewed.
 * @param string $productName The name of the product/item being reviewed.
 * @param array $reviews An array of review data.  Each element should be an associative array with:
 *                       - 'userId': The unique identifier for the user.
 *                       - 'rating': The rating given by the user (e.g., 1-5).
 *                       - 'comment': The user's comment on the product.
 *
 * @return array An array containing the generated review HTML and any potential errors.
 */
function generateUserReviews(string $productId, string $productName, array $reviews = [])
{
    // Input Validation (Basic - expand for more robust validation)
    if (empty($productId) || empty($productName)) {
        return ['error' => 'Product ID and Product Name are required.'];
    }
    if (empty($reviews)) {
        return ['reviewHTML' => 'No reviews yet.'];
    }

    // Build the review HTML
    $reviewHTML = '<h2>Reviews for ' . $productName . '</h2>';
    $reviewHTML .= $reviewHTML; // Add the introductory heading

    // Loop through reviews and add them to the HTML
    foreach ($reviews as $review) {
        $reviewHTML .= '<div>';
        $reviewHTML .= '<p><strong>User:</strong> ' . $review['userId'] . '</p>';
        $reviewHTML .= '<p><strong>Rating:</strong> ' . $review['rating'] . ' / 5</p>';
        $reviewHTML .= '<p>' . $review['comment'] . '</p>';
        $reviewHTML .= '</div>';
    }

    return ['reviewHTML' => $reviewHTML, 'error' => null];
}

// Example Usage:
$productId = 'product123';
$productName = 'Awesome Widget';

// Sample Review Data (Simulated database results)
$reviews = [
    ['userId' => 'user1', 'rating' => 4, 'comment' => 'Great product!  Very useful.'],
    ['userId' => 'user2', 'rating' => 5, 'comment' => 'Exactly what I needed. Highly recommended.'],
    ['userId' => 'user3', 'rating' => 3, 'comment' => 'It's okay, but could be better.'],
];

$result = generateUserReviews($productId, $productName, $reviews);

if ($result['error'] !== null) {
    echo "Error: " . $result['error'] . "<br>";
} else {
    echo $result['reviewHTML'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, validates them, and stores them
 * (in this example, just prints them to the console).  It can be easily adapted
 * to store the reviews in a database or other persistent storage.
 *
 * @param array $reviews An array of user review objects.
 *                      Each review object should have 'user', 'rating', and 'comment' properties.
 * @return bool True if reviews were processed successfully, false otherwise.
 */
function processUserReviews(array $reviews)
{
    $success = true;

    foreach ($reviews as $review) {
        // Validate the review
        if (!$review) {
            $success = false;
            error_log("Invalid review object encountered.  Review is empty.");
            continue;
        }

        if (!is_object($review)) {
            $success = false;
            error_log("Review is not an object. Review: " . print_r($review, true));
            continue;
        }

        // Check required properties
        $required_properties = ['user', 'rating', 'comment'];
        foreach ($required_properties as $prop) {
            if (!property_exists($review, $prop)) {
                $success = false;
                error_log("Missing property '$prop' in review object.");
                break;
            }
        }

        // Validate rating (numeric)
        if (!is_numeric($review->rating)) {
            $success = false;
            error_log("Rating must be a number.  Received: " . $review->rating);
        }

        // Validate rating range (e.g., 1-5) - You can customize this
        if ($review->rating < 1 || $review->rating > 5) {
            $success = false;
            error_log("Rating must be between 1 and 5. Received: " . $review->rating);
        }

        // Validate comment (optional, you can add more complex validation here)
        if (empty($review->comment)) {
            //  You could allow empty comments or require them.  Here, we allow
            //  and log a message.
            error_log("Comment is empty for review: " . $review->user);
        }

        // Process the review (e.g., store it)
        // In a real application, you would do something here like:
        // $this->storeReview($review);  // Assuming you have a storeReview() method
        echo "Review processed: User: " . $review->user . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }

    return $success;
}

// Example Usage:

// Create some sample review objects (simulate getting reviews from a form or API)
$reviews = [
    (object) ['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product!'],
    (object) ['user' => 'Bob', 'rating' => 2, 'comment' => 'Could be better.'],
    (object) ['user' => 'Charlie', 'rating' => 5, 'comment' => 'Excellent value.'],
    (object) ['user' => 'David', 'rating' => 1, 'comment' => 'Very disappointing.'],
    (object) ['user' => 'Eve', 'rating' => 3, 'comment' => 'Okay.'],
    // Example of an invalid review (missing property)
    // (object) ['user' => 'Frank', 'rating' => 4],
    // Example of an invalid review (non-numeric rating)
    // (object) ['user' => 'George', 'rating' => 'bad', 'comment' => 'Terrible!']
];

$result = processUserReviews($reviews);

if ($result) {
    echo "All reviews processed successfully.
";
} else {
    echo "There were errors processing some reviews.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to handle user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A numerical rating (e.g., 1-5) for the product/service.
 * @param string $comment The user's written review comment.
 * @param array $reviews An existing array of reviews to append to.  If null, creates a new array.
 *
 * @return array An array of reviews, with the new review added.
 */
function addReview(string $productId, string $username, int $rating, string $comment, array $reviews = []): array
{
    // Input Validation (Important for security and data integrity)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    // Create a review object (for easier management)
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date("Y-m-d H:i:s") // Add a timestamp for tracking.
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


// ------------------- Example Usage -------------------
//  To use this, you'd typically store this function in a file (e.g., review_handler.php)
//  and then include it in your application file: require_once 'review_handler.php';

// Example 1:  Adding a new review
try {
    $reviews = addReview('product123', 'JohnDoe', 4, 'Great product, works as expected!', []);
    print_r($reviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}


// Example 2: Adding to an existing reviews list
try {
    $reviews = addReview('product456', 'JaneSmith', 5, 'Excellent service, highly recommended!', $reviews);
    print_r($reviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}


// Example 3: Error Handling - Invalid Rating
try {
    addReview('product789', 'PeterPan', 6, 'Too expensive', []);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
"; // Expected output: "Error: Rating must be between 1 and 5."
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 * It includes methods for adding, retrieving, and displaying reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($username, $rating, $comment) {
        if (!empty($username) && is_numeric($rating) && !empty($comment)) {
            $this->reviews[] = [
                'username' => $username,
                'rating' => (int)$rating, // Cast to integer for consistent data type
                'comment' => $comment
            ];
            return true;
        }
        return false;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews by a specific user.
     *
     * @param string $username The username of the user.
     * @return array An array of reviews by the user, or an empty array if no reviews by that user exist.
     */
    public function getReviewsByUser($username) {
        $userReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }

    /**
     * Get average rating.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return round(($totalRating / $reviewCount), 2); // Round to 2 decimal places.
    }

    /**
     * Display reviews formatted for output (e.g., HTML).
     * This is just an example; you can customize the output format.
     *
     * @return string HTML markup for displaying reviews.
     */
    public function displayReviews() {
        $reviews = $this->getAllReviews();
        if (empty($reviews)) {
            return '<p>No reviews yet.</p>';
        }

        $output = '<ul>';
        foreach ($reviews as $review) {
            $output .= '<li><strong>' . $review['username'] . ':</strong> ' .
                       $review['rating'] . ' - ' . $review['comment'] . '</li>';
        }
        $output .= '</ul>';
        return $output;
    }

}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 5, 'Great product!  I highly recommend it.');
$reviewSystem->addReview('JaneSmith', 4, 'Good value for money.');
$reviewSystem->addReview('JohnDoe', 3, 'It\'s okay, could be better.');
$reviewSystem->addReview('PeterPan', 5, 'Absolutely fantastic!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>
";
echo $reviewSystem->displayReviews();

// Get reviews by JohnDoe
$johnReviews = $reviewSystem->getReviewsByUser('JohnDoe');
echo "<h2>JohnDoe Reviews:</h2>
";
echo $reviewSystem->displayReviews($johnReviews);

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<h2>Average Rating:</h2> " . ($averageRating === null ? "No reviews" : $averageRating);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param int $rating (Optional) A rating from 1 to 5. Defaults to 0.
 *
 * @return array An array containing the review data (success/failure message, review data if successful)
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {
  // Input validation - add more robust validation as needed for production
  if (empty($productId)) {
    return array('success' => false, 'message' => 'Product ID cannot be empty.');
  }
  if (empty($reviewerName)) {
    return array('success' => false, 'message' => 'Reviewer Name cannot be empty.');
  }
  if (empty($reviewText)) {
    return array('success' => false, 'message' => 'Review Text cannot be empty.');
  }

  // Validate the rating
  if ($rating < 1 || $rating > 5) {
    return array('success' => false, 'message' => 'Rating must be between 1 and 5.');
  }


  //  Here you would typically save the review data to a database.
  //  This is a placeholder for demonstration.

  $reviewData = array(
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'submissionTime' => date('Y-m-d H:i:s')  // Add timestamp
  );

  //  For demonstration, we'll just store the review data in an array.
  //  In a real application, you would save this to a database.

  //  Simulate saving to a database (replace this with actual database code)
  //  $db = new DatabaseConnection(); // Assuming you have a database connection class
  //  $db->insertReview($reviewData);

  return array('success' => true, 'reviewData' => $reviewData);
}


/**
 * Display Reviews - Example Function
 *
 *  This is an example function to display reviews.
 *
 * @param array $reviews  An array of reviews (returned by submitReview).
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>";  // Display the product ID

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['reviewerName'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . $review['submissionTime'] . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
$productID = "P123";

// Submit a review
$reviewResult = submitReview($productID, "John Doe", "Great product!  I love it!", 5);

if ($reviewResult['success']) {
  echo "<p>Review submitted successfully!</p>";
  $reviewData = $reviewResult['reviewData'];
  echo "<p>Review ID: " . $reviewData['reviewId'] . " (Generated by system)</p>";
  displayReviews([$reviewData]); // Pass the review data to displayReviews
} else {
  echo "<p>Error submitting review: " . $reviewResult['message'] . "</p>";
}


// Example of submitting an invalid review:
$invalidReviewResult = submitReview("", "Jane Smith", "Terrible!", 1);

if (!$invalidReviewResult['success']) {
    echo "<p>Invalid Review Submission Result: " . $invalidReviewResult['message'] . "</p>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to manage user reviews for a product.
 * It allows adding reviews, retrieving all reviews, and retrieving individual reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new user review.
     *
     * @param string $username The name of the user submitting the review.
     * @param string $comment The user's review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment): bool
    {
        // Basic validation - you can expand this with more robust validation
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single user review by username.
     *
     * @param string $username The username of the review to retrieve.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewByUsername(string $username): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['username'] === $username) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Deletes a review by username.
     *
     * @param string $username The username of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(string $username): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['username'] === $username) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}


/**
 *  Example Usage and User Review Function
 */

// Create a new review object
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!  Highly recommended.');
$reviewManager->addReview('JaneSmith', 'Excellent value for money.');
$reviewManager->addReview('PeterJones', 'Could be better, but decent.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$johnDoeReview = $reviewManager->getReviewByUsername('JohnDoe');
echo "
John Doe's Review:
";
print_r($johnDoeReview);

// Delete a review
$reviewManager->deleteReview('PeterJones');

// Get all reviews again to see the change
$allReviewsAfterDeletion = $reviewManager->getAllReviews();
echo "
All Reviews After Deletion:
";
print_r($allReviewsAfterDeletion);

?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, sanitizes input, and stores them in a database.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $product_id The ID of the product being reviewed.
 * @param PDO $pdo A PDO database connection object.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $username, string $reviewText, int $product_id, PDO $pdo): bool
{
    // Sanitize and validate inputs
    $username = trim($username);
    $reviewText = trim($reviewText);

    // Check if username and review text are empty
    if (empty($username) || empty($reviewText)) {
        error_log("Invalid review: Username and/or review text are empty.");
        return false;
    }

    // Escape strings for SQL query to prevent SQL injection
    $username = $pdo->quote($username);
    $reviewText = $pdo->quote($reviewText);

    // Prepare and execute the SQL query
    $sql = "INSERT INTO reviews (product_id, username, review_text, created_at) VALUES (:product_id, :username, :review_text, NOW())";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->execute();

    return true;
}


/**
 * Retrieves Reviews for a Specific Product
 *
 * Fetches all reviews for a given product ID from the database.
 *
 * @param int $product_id The ID of the product to retrieve reviews for.
 * @param PDO $pdo A PDO database connection object.
 * @return array An array of review objects, each with an 'id', 'product_id', 'username', 'review_text', and 'created_at' properties.
 */
function getReviewsForProduct(int $product_id, PDO $pdo): array
{
    $sql = "SELECT id, product_id, username, review_text, created_at FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    return $reviews;
}


// Example usage (Illustrative - Adapt to your database setup)

//  Assume you have a database connection object $pdo

// Create a sample database connection (replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage() . "
";
    exit; // Or handle the error appropriately
}

// Example review submission
$product_id = 1;
$username = 'JohnDoe';
$reviewText = 'This product is amazing! I highly recommend it.';

if (saveUserReview($username, $reviewText, $product_id, $pdo)) {
    echo "Review successfully saved!
";
} else {
    echo "Error saving review.
";
}

// Retrieve reviews for the product
$reviews = getReviewsForProduct($product_id, $pdo);

echo "Reviews for product $product_id:
";
foreach ($reviews as $review) {
    echo "  ID: " . $review['id'] . ", Username: " . $review['username'] . ", Review: " . $review['review_text'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, review text, rating, and optionally a date,
 * and stores the review in a database.
 *
 * @param int    $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review.
 * @param int    $rating      The rating given by the user (e.g., 1-5 stars).
 * @param string|null $date     Optional: The date of the review. If null, the current date is used.
 * @return bool  True if the review was successfully saved, false otherwise.
 */
function saveReview($userId, $reviewText, $rating, $date = null) {
  // Input validation - crucial for security and data integrity
  if (!is_numeric($userId)) {
    error_log("Invalid user ID: " . $userId);
    return false;
  }
  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }
  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating: " . $rating);
    return false;
  }

  // Prepare the database query
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials
  $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  $date_str = $date ?? date('Y-m-d H:i:s'); // Use current date if $date is null

  $stmt = $db->prepare("INSERT INTO reviews (user_id, review_text, rating, review_date) VALUES (:user_id, :review_text, :rating, :review_date)");

  // Bind the parameters to prevent SQL injection
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_date', $date_str);

  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage (Illustrative - Replace with your form handling)
// This is just to demonstrate how you might call this function.
// You'd typically get the data from a form submission.
/*
$userId = 123;
$review = "This is a fantastic product!";
$starRating = 5;
$reviewDate = date('Y-m-d');

if (saveReview($userId, $review, $starRating, $reviewDate)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}
*/


//  A simple example of a basic form to submit the review.
//  This is a very basic HTML form and needs to be integrated with your backend.
?>
<!DOCTYPE html>
<html>
<head>
  <title>User Review Form</title>
</head>
<body>

  <h1>Submit a Review</h1>

  <form action="process_review.php" method="post">
    <label for="userId">User ID:</label>
    <input type="number" id="userId" name="userId" required><br><br>

    <label for="reviewText">Review Text:</label><br>
    <textarea id="reviewText" name="reviewText" rows="4" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select><br><br>

    <input type="submit" value="Submit Review">
  </form>

</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $reviewId (Optional) The ID of the review to update.  If null, a new review is created.
 *
 * @return array  An array containing:
 *                - 'success': true if the operation was successful, false otherwise.
 *                - 'message': A message describing the outcome.
 *                - 'reviewId': (Optional) The ID of the newly created or updated review.
 *
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, ?string $reviewId = null): array {
  // Validate inputs (basic - can be expanded for more robust validation)
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }

  if (empty($username) || empty($comment)) {
    return ['success' => false, 'message' => 'Username and comment are required fields.'];
  }

  //  Simulate a database interaction (replace with your actual database code)
  //  This is just an example - you'll need to connect to your database.

  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'createdAt' => date('Y-m-d H:i:s'), // Example: timestamp
  ];

  if ($reviewId) {
    // Update existing review
    // Assume you have a way to look up the review by ID in your database
    // This is a simplified example - replace with your database query.
    // Example:
    // $existingReview = getReviewById($reviewId);
    // if ($existingReview) {
    //     // Update the existing review data
    // }
    // else {
    //   return ['success' => false, 'message' => 'Review not found.'];
    // }
    return ['success' => true, 'message' => 'Review updated successfully.', 'reviewId' => $reviewId];

  } else {
    // Create new review
    // Example:
    // $newReviewId = insertReviewIntoDatabase($review);
    // return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $newReviewId];
    return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => uniqid()]; // Generate a unique ID
  }
}

// Example Usage:
// Create a new review
$result = createOrUpdateReview('product123', 'JohnDoe', 4, 'Great product, highly recommended!');
print_r($result);

// Update an existing review (assuming reviewId 'review456')
$result = createOrUpdateReview('product123', 'JaneSmith', 5, 'Excellent value for money', 'review456');
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).  Must be an integer.
 * @param string $comment The review comment.
 * @param string $dbConnection  (Optional) - Database connection object.  If not provided, it will attempt to connect.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully saved, false otherwise.
 *   - 'message': A message indicating the success or failure of the operation.
 */
function saveUserReview(string $productId, string $username, int $rating, string $comment, $dbConnection = null)
{
  $success = false;
  $message = "Error saving review.";

  // Attempt to connect to the database if no connection is provided.
  if ($dbConnection === null) {
    // Replace with your database connection details
    $dbHost = "localhost";
    $dbName = "your_database_name";
    $dbUser = "your_database_user";
    $dbPassword = "your_database_password";

    try {
      $dbConnection = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);
      $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      error_log("Database connection error: " . $e->getMessage()); // Log the error for debugging
      $message = "Failed to connect to the database.  Check your database credentials.";
    }
  }


  if ($dbConnection) {
    try {
      // Construct the SQL query
      $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
              VALUES (:product_id, :user_name, :rating, :comment)";

      // Prepare the statement
      $stmt = $dbConnection->prepare($sql);

      // Bind the parameters
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':user_name', $username);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':comment', $comment);

      // Execute the query
      $stmt->execute();

      $success = true;
      $message = "Review saved successfully!";

    } catch (PDOException $e) {
      error_log("Database error: " . $e->getMessage());
      $message = "Failed to save review.  Check your database schema and data.";
    }
  }

  return ['success' => $success, 'message' => $message];
}

// Example Usage:

// Assuming you have a database connection object called $conn
//$conn = new PDO("mysql:host=localhost;dbname=your_database_name;charset=utf8mb4", "your_database_user", "your_database_password");
//$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// Example 1: Saving a review with a database connection
//$reviewResult = saveUserReview("123", "JohnDoe", 5, "Great product!", $conn);
//print_r($reviewResult);


// Example 2:  Saving a review without explicitly creating a connection
//$reviewResult = saveUserReview("456", "JaneSmith", 3, "It was okay.", null); //Uses default database connection
//print_r($reviewResult);

?>


<?php

/**
 * User Review Function
 *
 * This function creates a simple user review system, allowing users to submit reviews
 * and displaying them.
 */

class UserReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on success, false on failure (e.g., invalid input).
     */
    public function addReview(string $username, string $reviewText): bool {
        if (empty($username) || empty($reviewText)) {
            return false; // Invalid input
        }

        $this->reviews[] = ['username' => $username, 'review' => $reviewText];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Displays all reviews in a formatted manner.
     */
    public function displayReviews(): void {
        echo "<h2>All Reviews:</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->getAllReviews() as $review) {
                echo "<h3>" . htmlspecialchars($review['username']) . ":</h3>";
                echo "<p>" . htmlspecialchars($review['review']) . "</p>";
            }
        }
    }
}


// Example Usage:
$reviewSystem = new UserReviewSystem();

// Add some reviews
$reviewSystem->addReview('Alice', 'This product is amazing!  I highly recommend it.');
$reviewSystem->addReview('Bob', 'It was okay, but could be better.');
$reviewSystem->addReview('Charlie', 'Excellent value for money.');


// Display the reviews
$reviewSystem->displayReviews();


//  Demonstration of input validation
$reviewSystem->addReview("", "This is a test review");  // Will return false
echo "<br>";
echo "Last addition failed due to empty username.";
?>


<?php

/**
 *  User Review Function - A basic implementation.
 *
 *  This function allows users to submit and view reviews for a product or item.
 *  It includes basic input validation and output formatting.
 *
 *  Future improvements could include:
 *      - Secure database storage
 *      - Image uploading
 *      - More robust validation and sanitization
 *      - Rating system
 *      - Moderation features
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @return array An array containing:
 *               - 'success': True if the review was submitted successfully.
 *               - 'message': A message indicating the status of the review.
 *               - 'review': The submitted review text.
 */
function submitReview(string $productName, string $reviewText) {
    // Basic input validation -  ensure review is not empty
    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => $reviewText // Return the input to show what was entered.
        ];
    }

    // Add your database interaction here.  This is just a placeholder.
    // In a real application, you would connect to a database and insert the review.
    // For demonstration purposes, we'll just store it in a session variable.

    if (session_status() === 'closed') {
        session_start();
    }

    $review = $reviewText;
    $_SESSION['reviews'][$productName] = $review;


    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $reviewText
    ];
}



/**
 * Displays existing reviews for a given product.
 *
 * @param string $productName The name of the product to display reviews for.
 */
function displayReviews(string $productName)
{
    if (session_status() === 'closed') {
        session_start();
    }

    // Check if reviews exist for this product
    if (isset($_SESSION['reviews'][$productName])) {
        echo "<h2>Reviews for " . $productName . "</h2>";
        echo "<ul>";
        foreach ($_SESSION['reviews'][$productName] as $review) {
            echo "<li>" . $review . "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No reviews yet for " . $productName . ".</p>";
    }
}

// Example Usage (Demonstration)

// 1. Submit a review
$reviewResult = submitReview('Awesome Widget', 'This widget is amazing!  It does exactly what I need.');

if ($reviewResult['success']) {
    echo '<p>' . $reviewResult['message'] . '</p>';
    echo '<p>Review: ' . $reviewResult['review'] . '</p>';
} else {
    echo '<p>' . $reviewResult['message'] . '</p>';
}

// 2. Display the reviews
displayReviews('Awesome Widget');

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviewData (Optional) An associative array containing review data
 *                         (e.g., ['rating' => 5, 'timestamp' => time()])
 *
 * @return array An array containing the result of the operation.  Returns an error message
 *               on failure.  Returns a success message and review ID on success.
 */
function create_review(string $productName, string $userEmail, string $reviewText, array $reviewData = [])
{
  // Validate inputs (Basic Example - Expand for more robust validation)
  if (empty($productName)) {
    return ['status' => 'error', 'message' => 'Product name cannot be empty.'];
  }
  if (empty($userEmail)) {
    return ['status' => 'error', 'message' => 'User email cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  // Sanitize inputs -  IMPORTANT:  Always sanitize user inputs!
  $productName = filter_var($productName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  // Simulate a database insert.  Replace with your actual database logic.
  // This is just a placeholder example.
  $reviewId = generate_unique_id();  // Replace with your unique ID generation
  $timestamp = time();

  $review = [
    'product_name' => $productName,
    'user_email' => $userEmail,
    'review_text' => $reviewText,
    'rating' => isset($reviewData['rating']) ? $reviewData['rating'] : null,
    'timestamp' => $timestamp,
    'review_id' => $reviewId,
  ];

  // In a real application, you would save this data to a database.
  // For this example, we just log the review.
  log_review($review);

  return ['status' => 'success', 'message' => 'Review created successfully.', 'review_id' => $reviewId];
}


/**
 * Simulates generating a unique ID.
 *  Replace with your actual unique ID generation logic.
 * @return string
 */
function generate_unique_id() {
    return bin2hex(random_bytes(16)); // A simple way to generate a unique ID
}


/**
 * Simulates logging a review to a file.
 *  Replace this with your actual logging mechanism.
 * @param array $review
 */
function log_review(array $review) {
    // This is just a placeholder.  Replace with your logging code.
    file_put_contents('review_log.txt', "New Review: " . json_encode($review) . "
", FILE_APPEND);
}

// --- Example Usage ---
// Example 1: Create a review
$result = create_review('Awesome Gadget', 'test@example.com', 'Great product!');
print_r($result);

// Example 2: Create a review with a rating
$result = create_review('Another Product', 'user@email.net', 'Good but could be better.', ['rating' => 4]);
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_id The unique ID of the item being reviewed.
 * @param string $reviewer_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param array $reviews (optional) An array of existing reviews to store and display.
 *
 * @return array An updated array of reviews, including the new review if successful.
 */
function create_and_display_review(string $item_id, string $reviewer_name, string $review_text, array &$reviews = []): array
{
  // Validation (basic - you might want more robust validation)
  if (empty($reviewer_name)) {
    return $reviews; // Return existing reviews if no name provided
  }
  if (empty($review_text)) {
    return $reviews; // Return existing reviews if no text provided
  }

  // Create a new review
  $new_review = [
    'item_id' => $item_id,
    'reviewer_name' => $reviewer_name,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Add the new review to the array
  $reviews[] = $new_review;

  // Sort reviews by timestamp (optional -  can be useful for display)
  usort($reviews, function($a, $b) {
    return $a['timestamp'] <=> $b['timestamp'];
  });

  return $reviews;
}


/**
 * Display Reviews Function (for demonstration purposes)
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews The array of reviews to display.
 */
function display_reviews(array $reviews) {
  echo "<h2>Reviews for Item ID: " . $reviews[0]['item_id'] . "</h2>"; // Access the first item's ID
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer_name']) . "<br>";
    echo "<strong>Date:</strong> " . $review['timestamp'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['review_text'] . "<br>";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:

// Initialize an empty array of reviews.  Pass by reference (&) so the function can modify it.
$reviews = [];

// Create a review
$reviews = create_and_display_review('product123', 'John Doe', 'Great product!  I highly recommend it.');

// Create another review
$reviews = create_and_display_review('product456', 'Jane Smith', 'It was okay, nothing special.');

// Display the reviews
display_reviews($reviews);

// Show the final reviews array (for demonstration)
echo "<hr>";
echo "<h3>Final Reviews Array:</h3>";
print_r($reviews); // Output the array to see the results.
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (Optional) Unique ID for the review. Defaults to null.
     * @param int $userId The ID of the user leaving the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (e.g., 1-5).
     * @param string $comment The user's comment.
     * @param string $date The date of the review (e.g., 'YYYY-MM-DD').
     */
    public function __construct(
        $reviewId = null,
        $userId,
        $productId,
        $rating,
        $comment = '',
        $date = date('Y-m-d') // Default to current date
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters for the review attributes.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setsters (for demonstration purposes - consider validation)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    /**
     *  Returns a string representation of the review
     *  Useful for debugging or output.
     *
     * @return string
     */
    public function __toString() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}


/**
 * User Review Review Function (Illustrative)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
    // Basic validation - improve this in a real application.
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "Invalid rating. Rating must be a number between 1 and 5.";
    }

    // Create a new review object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // Process the review (e.g., store in a database)
    // For this example, we just return the review as a string.

    return (string)$review; // Convert the review object to a string.

    //  In a real application, you would:
    //  1.  Validate the input data more thoroughly (e.g., using a form).
    //  2.  Connect to your database.
    //  3.  Insert the review data into the database.
    //  4.  Handle any errors that may occur.

}



// Example usage:
$reviewText = reviewProduct(123, 456, 4, "Great product! Highly recommend.");
echo $reviewText . "
";


// Another example
$reviewText = reviewProduct(789, 101, 5, "Excellent value for money.");
echo $reviewText . "
";

//Example with invalid rating
$reviewText = reviewProduct(1011, 1111, 6, "Awesome!");
echo $reviewText . "
"; // This will print the error message.
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes input validation, sanitization, and basic formatting.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|string Returns an array on success or an error message string.
 */
function create_user_review(string $product_id, string $username, string $rating, string $comment)
{
    // Input Validation & Sanitization
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        return "Error: All fields are required.";
    }

    if (!preg_match('/^[a-zA-Z0-9 ]+$/', $username)) {
        return "Error: Username must contain only letters and spaces.";
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    if (strlen($comment) > 1000) {
        return "Error: Comment must be less than 1000 characters.";
    }

    // Sanitize input (optional, but recommended) -  This is a basic example
    $username = trim($username);
    $comment = trim($comment);


    //  Database interaction (Replace with your actual database connection)
    //  This is a simplified example; you'll need to adapt it to your database setup.
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        return "Error: Database connection failed: " . $e->getMessage();
    }


    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if ($stmt->execute()) {
        return "Review successfully created!";
    } else {
        return "Error: Review creation failed. " . print_r($stmt->errorInfo(), true);
    }
}


// Example Usage:
$product_id = '123';
$username = 'JohnDoe';
$rating = '4';
$comment = "This product is amazing!  I highly recommend it.  It's fantastic!";


$result = create_user_review($product_id, $username, $rating, $comment);

if (is_string($result)) {
    echo $result . "<br>";
} else {
    echo "Review created successfully!";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text) and stores it in a database.
 * It includes basic validation and error handling.
 *
 * @param string $reviewText The user-submitted review text.
 * @param string $username  The username of the user submitting the review.
 * @param string $productId The ID of the product being reviewed.
 * @param PDO $pdo  A PDO database connection object.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $reviewText, string $username, string $productId, PDO $pdo)
{
    // Input Validation
    if (empty($reviewText)) {
        error_log("Empty review text submitted.");  // Log for admin/debugging
        return false;
    }

    if (empty($username)) {
        error_log("Empty username submitted.");
        return false;
    }

    if (empty($productId)) {
        error_log("Empty product ID submitted.");
        return false;
    }

    // Sanitize Input (Basic - Extend for Robustness)
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); // Prevent XSS
    $username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

    //  Potentially add more validation here, like length limits on the review text.

    // Prepare SQL Query
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, review_date)
            VALUES (:product_id, :user_name, :review_text, NOW())";

    try {
        // Execute the query
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_name', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  //Log the error for debugging
        return false;
    }
}


// Example Usage (assuming you have a database connection)
//  This is just for demonstration.  Replace with your actual database details.
/*
try {
    // Establish database connection (replace with your credentials)
    $host = 'localhost';
    $dbname = 'your_database_name';
    $user = 'your_db_user';
    $password = 'your_db_password';

    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $user, $password);

    // Example Usage
    $reviewText = "This product is fantastic!  I highly recommend it.";
    $username = "JohnDoe";
    $productId = "123";

    if (saveUserReview($reviewText, $username, $productId, $pdo)) {
        echo "Review saved successfully!";
    } else {
        echo "Error saving review.";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product or item.
 *
 * @param string $productId The ID of the product/item being reviewed.
 * @param string $productName The name of the product/item (for display).
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array to store reviews (passed by reference).
 * @return void
 */
function addReview(string $productId, string $productName, string $reviewerName, string $reviewText, &$reviews) {

  // Sanitize input (very important to prevent XSS and SQL Injection)
  $reviewerName = htmlspecialchars($reviewerName);
  $reviewText = htmlspecialchars($reviewText);

  // Create a review object (or you can just use an array)
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'), // Add timestamp for ordering
  ];

  // Add the review to the array.  Since reviews is passed by reference,
  // the array is modified directly.
  $reviews[] = $review;
}

/**
 * Display Reviews Function
 *
 * This function displays the reviews for a given product/item.
 *
 * @param array $reviews Array of reviews (passed by reference).
 * @param string $productName The name of the product/item (for display).
 */
function displayReviews(array &$reviews, string $productName) {
  echo "<h2>Reviews for " . $productName . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['reviewerName'] . ":</strong> " . $review['reviewText'] . "<br>";
      echo "Date: " . $review['timestamp'];
      echo "</li>";
    }
    echo "</ul>";
  }
}


// Example Usage:
// Initialize an empty array to store reviews
$reviews = [];

// Add some reviews
addReview('product123', 'Awesome Gadget', 'John Doe', 'This gadget is fantastic!  I highly recommend it.', $reviews);
addReview('product123', 'Awesome Gadget', 'Jane Smith', 'Great value for money.', $reviews);
addReview('product456', 'Cool Device', 'Peter Jones', 'A bit buggy, but generally good.', $reviews);

// Display the reviews
displayReviews($reviews, 'Awesome Gadget');


// Example of how to add a review via form submission (simplified)
//  This requires a form that submits the data to this PHP script.
//  You'll need to implement the HTML form and handle the form submission appropriately.
//  This is just an illustration.

/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST["product_id"];
    $reviewerName = $_POST["reviewer_name"];
    $reviewText = $_POST["review_text"];

    addReview($productId, $productName, $reviewerName, $reviewText, $reviews);
    // Redirect to display the reviews
    header("Location: display_reviews.php"); // Redirect to a page displaying the reviews
    exit();
}
*/
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and display reviews for a given item.
 *
 *  @param string $item_name The name of the item being reviewed.
 *  @param string $item_description  A short description of the item (optional).
 *  @param array $reviews An array of review objects. Each review object should have:
 *                       - 'user' => string - The name of the user who wrote the review.
 *                       - 'rating' => int  -  The rating given by the user (e.g., 1-5).
 *                       - 'comment' => string - The user's comment.
 *
 *  @return string  HTML output displaying the reviews.  Returns a message if no reviews exist.
 */
function display_reviews(string $item_name, string $item_description = '', array $reviews = [])
{
    if (empty($reviews)) {
        return "<p>No reviews yet.  Be the first to review!</p>";
    }

    $html = "<h2>Reviews for " . htmlspecialchars($item_name) . "</h2>";
    if (!empty($item_description)) {
        $html .= "<p>" . htmlspecialchars($item_description) . "</p>";
    }

    $html .= "<ul>";
    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . " (Rating: " . htmlspecialchars($review['rating']) . ")";
        $html .= "</li>";
    }
    $html .= "</ul>";

    return $html;
}


// Example Usage (Illustrative)
// Simulate a database retrieval for reviews
$reviews_data = [
    [
        'user' => 'Alice',
        'rating' => 5,
        'comment' => 'Amazing product!  Exactly what I was looking for.',
    ],
    [
        'user' => 'Bob',
        'rating' => 4,
        'comment' => 'Good quality for the price.  Could be a little better.',
    ],
    [
        'user' => 'Charlie',
        'rating' => 3,
        'comment' => 'It was okay.  Not amazing, but not bad either.',
    ],
];

// Display the reviews
echo display_reviews('Awesome Widget', 'A fantastic widget for all your needs!');
echo display_reviews('Basic Gadget'); //Demonstrating no reviews case
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The review text.
 *
 * @return array  An array containing the review data if successful, or an error message if not.
 */
function create_review(string $productId, string $username, string $rating, string $comment)
{
    // Input validation - crucial for security and data integrity
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }

    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        return ['error' => 'Username must contain only alphanumeric characters and underscores.'];
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    if (empty($comment)) {
        return ['error' => 'Comment cannot be empty.'];
    }

    if (!preg_match('/^\S+\s+.*$/', $comment)) {
        return ['error' => 'Comment must contain at least one non-whitespace character.'];
    }

    // In a real application, you would save this data to a database.
    // This is a placeholder for demonstration purposes.
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => (int)$rating, // Convert rating to integer
        'comment' => $comment,
        'timestamp' => time()
    ];

    // For demonstration, we just echo the review
    echo "Review submitted by: " . $username . " for product ID: " . $productId . "
";
    echo "Rating: " . $rating . "
";
    echo "Comment: " . $comment . "
";
    echo "Timestamp: " . date("Y-m-d H:i:s", $timestamp) . "
";


    return $review;
}

// Example Usage:
$review_data = create_review('product123', 'john_doe', 5, 'Great product, highly recommended!');
if (isset($review_data['error'])) {
    echo "Error: " . $review_data['error'] . "
";
} else {
    echo "Review successfully created.
";
}

$review_data = create_review('product456', 'jane_smith', 3, 'It was okay, but could be better.');
if (isset($review_data['error'])) {
    echo "Error: " . $review_data['error'] . "
";
} else {
    echo "Review successfully created.
";
}

// Example with invalid input
$invalid_review = create_review('', 'testuser', 1, 'Test');
if (isset($invalid_review['error'])) {
    echo "Error: " . $invalid_review['error'] . "
";
} else {
    echo "Review successfully created.
";
}


?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to store and manage user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional) - Unique identifier for the review.  If not provided, will be auto-generated.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     *
     * @return int
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    /**
     * Get User ID
     *
     * @return int
     */
    public function getUserId() {
        return $this->userId;
    }

    /**
     * Get Product ID
     *
     * @return int
     */
    public function getProductId() {
        return $this->productId;
    }

    /**
     * Get Rating
     *
     * @return int
     */
    public function getRating() {
        return $this->rating;
    }

    /**
     * Get Comment
     *
     * @return string
     */
    public function getComment() {
        return $this->comment;
    }

    /**
     * Get Date
     *
     * @return string
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review
     *
     * A simple method to display the review information.
     */
    public function displayReview() {
        echo "<p><strong>Review ID:</strong> " . $this->getReviewId() . "</p>";
        echo "<p><strong>User ID:</strong> " . $this->getUserId() . "</p>";
        echo "<p><strong>Product ID:</strong> " . $this->getProductId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $this->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $this->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $this->getDate() . "</p>";
    }
}



/**
 * User Review Review Function (Example Usage)
 */
function createReview($reviewId, $userId, $productId, $rating, $comment) {
    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);
    return $review;
}

function displayAllReviews($reviews) {
    echo "<h2>All Reviews:</h2>";
    foreach ($reviews as $review) {
        $review->displayReview();
        echo "<hr>";
    }
}



// Example Usage:
$review1 = createReview(1, 123, 456, 5, "Great product! Highly recommended.");
$review2 = createReview(2, 456, 456, 4, "Good value for money.");
$review3 = createReview(3, 789, 456, 3, "Could be better.");


$allReviews = [$review1, $review2, $review3];
displayAllReviews($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It utilizes a database (simulated here for demonstration) to store the reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete.  If null, creates a new review.
 *
 * @return array An array containing the review ID if successful, or an error message.
 */
function createOrUpdateReview(string $productId, string $username, int $rating, string $comment, ?int $reviewId = null)
{
    // Simulate a database connection (replace with your actual database connection)
    $db = [
        'reviews' => [
            123 => [
                'username' => 'JohnDoe',
                'rating' => 4,
                'comment' => 'Great product, highly recommended!',
                'created_at' => time()
            ],
            456 => [
                'username' => 'JaneSmith',
                'rating' => 5,
                'comment' => 'Excellent!  Just what I needed.',
                'created_at' => time()
            ]
        ]
    ];

    // Input validation
    if (!$productId || !$username || $rating < 1 || $rating > 5 || !$comment) {
        return ['error' => 'Invalid input.  Please provide a valid product ID, username, rating (1-5), and comment.'];
    }

    // Check if review with the same ID exists
    if ($reviewId !== null) {
        if (!isset($db['reviews'][$reviewId])) {
            return ['error' => 'Review with ID ' . $reviewId . ' not found.'];
        }
    }

    // Create a new review
    if ($reviewId === null) {
        $newReview = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()
        ];
        $reviewId = count($db['reviews']) + 1; // Simple ID generation - use a proper strategy in a real app.
        $db['reviews'][$reviewId] = $newReview;
    } else {
        // Update existing review
        $db['reviews'][$reviewId] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()
        ];
    }

    return ['success' => $reviewId];
}

/**
 * Get all reviews for a product
 *
 * @param int $productId
 * @return array
 */
function getReviewsForProduct(int $productId): array {
    $reviews = [];
    if(isset($db['reviews'][$productId])) {
        $reviews = $db['reviews'][$productId];
    }
    return $reviews;
}

/**
 * Delete a review by its ID.
 *
 * @param int $reviewId
 * @return array  An array with success or error message.
 */
function deleteReview(int $reviewId): array {
    if (!isset($db['reviews'][$reviewId])) {
        return ['error' => 'Review with ID ' . $reviewId . ' not found.'];
    }

    unset($db['reviews'][$reviewId]);
    return ['success' => true];
}



// Example Usage:

// Create a new review
$result = createOrUpdateReview(123, 'NewUser', 5, 'Amazing product!');
print_r($result);

// Get reviews for product 123
$reviews = getReviewsForProduct(123);
print_r($reviews);

// Update a review
$result = createOrUpdateReview(123, 'JohnDoe', 4, 'Updated comment', 1);
print_r($result);

//Delete a review
$result = deleteReview(1);
print_r($result);

// Get reviews for product 123
$reviews = getReviewsForProduct(123);
print_r($reviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic validation and sanitization.
 *
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message': A message indicating the status of the review submission.
 *   - 'review':  The submitted review data if successful, or an empty array if not.
 */
function submit_review(string $user_name, string $review_text) {
  // Input validation - basic checks
  if (empty($user_name)) {
    return ['success' => false, 'message' => 'User name cannot be empty.', 'review' => []];
  }

  if (empty($review_text)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }

  // Sanitize input -  Important for security
  $user_name = htmlspecialchars($user_name);
  $review_text = htmlspecialchars($review_text);

  //  You might want to add more sophisticated sanitization here,
  //  such as stripping HTML tags or limiting review length.

  // Store the review (in this example, we'll just return it directly)
  //  In a real application, you would save this to a database.
  $review = [
    'user_name' => $user_name,
    'review_text' => $review_text,
    'timestamp' => time() // Add a timestamp for tracking
  ];

  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $review];
}



/**
 * Display Reviews (Example)
 * This function demonstrates how to display the reviews.
 *
 * @param array $reviews An array of review data (as returned by submit_review).
 */
function display_reviews(array $reviews) {
  echo "<h2>Reviews:</h2>";

  if (empty($reviews['review'])) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews['review'] as $review) {
    echo "<div class='review'>";
    echo "<strong>" . $review['user_name'] . "</strong> - ";
    echo "<p>" . $review['review_text'] . "</p>";
    echo "<p><em>Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "</em></p>";
    echo "</div>";
  }
}


// Example Usage:
$user_name = "John Doe";
$review_text = "This product is amazing!  I highly recommend it.";

$result = submit_review($user_name, $review_text);

if ($result['success']) {
  echo "<p>Review submitted successfully!</p>";
  display_reviews($result);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For production, 
 * you'd typically use a database.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating  The rating (e.g., 1-5 stars).
 * @param string $comment The user's review text.
 * 
 * @return array An array of reviews for the given product, or an empty array if no reviews exist.
 */
function create_user_review(string $productName, string $user_id, string $rating, string $comment) {
  // Sanitize input - VERY IMPORTANT for security!
  $productName = trim($productName);
  $user_id = trim($user_id);
  $rating = trim($rating);
  $comment = trim($comment);

  // Basic validation - Add more robust validation as needed
  if (empty($productName) || empty($user_id) || empty($rating) || empty($comment)) {
    return []; // Return empty array for invalid input
  }
  
  //  You'd typically validate $rating to ensure it's a valid number or a supported range
  //  For this simple example, we'll allow any string, but consider using a regex or numeric check
  
  // Create the review object
  $review = [
    'product_name' => $productName,
    'user_id' => $user_id,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp for sorting/filtering
  ];

  // Store the review -  In a real application, this would be a database insertion
  // For this example, we're using a simple array.
  $reviews[$productName][$user_id] = $review; 

  return $reviews;
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productName The name of the product.
 *
 * @return array An array of reviews for the product, or an empty array if no reviews exist.
 */
function get_reviews(string $productName) {
  $reviews = []; // Initialize an empty array

  // Get all reviews for the given product
  if (isset($reviews[$productName])) {
    $reviews[$productName] = array_map('unserialize', array_values($reviews[$productName]));
    return $reviews[$productName];
  } else {
    return [];
  }
}

/**
 * Updates an existing review
 *
 * @param string $productName The name of the product.
 * @param string $user_id The ID of the user.
 * @param string $rating  The new rating.
 * @param string $comment The new comment.
 *
 * @return bool True if the review was updated, false otherwise.
 */
function update_user_review(string $productName, string $user_id, string $rating, string $comment) {
    $reviews = get_reviews($productName); // Get the reviews
    if (empty($reviews)) {
        return false;
    }

    $review_to_update = null;
    foreach ($reviews as $key => $review) {
        if ($key == $user_id) {
            $review_to_update = $review;
            break;
        }
    }

    if ($review_to_update) {
        $review_to_update['rating'] = $rating;
        $review_to_update['comment'] = $comment;

        // Update in the in-memory array.  Again, use a database in a real application.
        $reviews[$productName][$user_id] = $review_to_update;

        return true;
    }
    return false;
}


/**
 * Deletes a user review.
 *
 * @param string $productName The name of the product.
 * @param string $user_id The ID of the user.
 *
 * @return bool True if the review was deleted, false otherwise.
 */
function delete_user_review(string $productName, string $user_id) {
    $reviews = get_reviews($productName);
    if (isset($reviews[$productName][$user_id])) {
        unset($reviews[$productName][$user_id]);
        return true;
    }
    return false;
}


// Example Usage:
// Initialize the reviews array
$reviews = [];

// Create a review
$new_review = create_user_review("Laptop X1", "user123", 5, "Great laptop! Fast and reliable.");
print_r($new_review);

// Get all reviews for "Laptop X1"
$all_reviews = get_reviews("Laptop X1");
print_r($all_reviews);

// Update the review
$update_success = update_user_review("Laptop X1", "user123", 4, "Still good, but battery could be better.");
if ($update_success) {
  echo "Review updated successfully.
";
} else {
  echo "Failed to update review.
";
}

// Get the updated reviews
$updated_reviews = get_reviews("Laptop X1");
print_r($updated_reviews);

// Delete the review
$delete_success = delete_user_review("Laptop X1", "user123");
if ($delete_success) {
  echo "Review deleted successfully.
";
} else {
  echo "Failed to delete review.
";
}

// Get the reviews after deletion
$reviews_after_delete = get_reviews("Laptop X1");
print_r($reviews_after_delete);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a formatted HTML list of user reviews.
 *
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - author: The name of the reviewer.
 *                       - rating: An integer representing the rating (e.g., 1-5).
 *                       - comment: The text of the review.
 * @param array $options (optional) An array of options to customize the output.
 *                       - maxRating:  The maximum rating value to display (default: 5).
 *                       - ratingDisplay: How to display the rating (e.g., 'stars', 'text').
 *                       - starIcon:  Path to the star icon image.
 *
 * @return string HTML string of the user reviews.
 */
function generateUserReviews(array $reviews, array $options = []) {
    // Default options
    $maxRating = $options['maxRating'] ?? 5;
    $ratingDisplay = $options['ratingDisplay'] ?? 'stars';
    $starIcon = $options['starIcon'] ?? '';

    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = '<ul>';
    foreach ($reviews as $review) {
        $html .= '<li>';
        $html .= '<div class="review">';

        $html .= '<div class="review-author">' . htmlspecialchars($review['author']) . '</div>';

        if ($ratingDisplay === 'stars') {
            $html .= '<div class="review-rating">';
            for ($i = 1; $i <= $maxRating; $i++) {
                if ($i <= $review['rating']) {
                    $html .= '<img src="' . $starIcon . '" alt="Star" width="20" height="20">';
                } else {
                    $html .= '&nbsp;'; // Add space for empty stars
                }
            }
            $html .= '</div>';
        } else {
            $html .= '<div class="review-rating">' . $review['rating'] . '/' . $maxRating . '</div>';
        }

        $html .= '<div class="review-comment">' . htmlspecialchars($review['comment']) . '</div>';
        $html .= '</div>';
        $html .= '</li>';
    }
    $html .= '</ul>';

    return $html;
}

// Example usage:
$reviews = [
    ['author' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!  Highly recommended.'],
    ['author' => 'Jane Smith', 'rating' => 5, 'comment' => 'Excellent value for money.'],
    ['author' => 'Peter Jones', 'rating' => 3, 'comment' => 'It was okay, but could be better.'],
];

// With default options
$reviewsHTML = generateUserReviews($reviews);
echo $reviewsHTML;

// With custom options
$customOptions = [
    'maxRating' => 10,
    'ratingDisplay' => 'text',
    'starIcon' => 'star.png' // Replace with the path to your star icon image
];
$customReviewsHTML = generateUserReviews($reviews, $customOptions);
echo "<hr>";
echo $customReviewsHTML;

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing review data (ID, product name, user, review, rating, date).
 *               Returns an empty array if an error occurs.
 */
function createReview(string $productName, string $reviewText, string $username, int $rating = 0) {
    // Input validation - Essential for security and data integrity
    if (empty($productName)) {
        error_log("Error: Product name cannot be empty.");
        return [];
    }

    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return [];
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return [];
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return [];
    }

    // Sanitize inputs to prevent XSS vulnerabilities.  Important!
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);
    $username = htmlspecialchars($username);

    // Generate a unique review ID (consider using a more robust method in production)
    $reviewId = uniqid();


    // Store the review (This would typically involve a database operation)
    // This is a placeholder for demonstration purposes.
    $review = [
        'id' => $reviewId,
        'product' => $productName,
        'user' => $username,
        'review' => $reviewText,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s')  // Get the current date and time
    ];

    // In a real application, you would save the $review array to a database.
    // Example:
    //  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
    //  $db->insertReview($review);


    return $review;
}


/**
 * Display Reviews (Example -  Should be adapted to your display method)
 *
 *  This is just an example function to show how to display the reviews.
 *  Adapt this to your specific display needs (e.g., HTML, JSON, API response)
 *
 * @param array $reviews An array of review objects.
 */
function displayReviews(array $reviews) {
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<h2>Reviews for " . end(array_keys($reviews)) . "</h2>"; //Display the product name from the key of the array.
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['user'] . ":</strong> " . $review['review'] . " (Rating: " . $review['rating'] . ") - " . $review['date'];
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Create a review
$newReview = createReview("Awesome Widget", "This widget is fantastic! I love it.", "JohnDoe", 5);

if (!empty($newReview)) {
    echo "<h2>New Review Created:</h2>";
    print_r($newReview); // For debugging - remove in production
}


// Create another review
$anotherReview = createReview("Great Service", "Excellent customer support.", "JaneSmith", 4);

if (!empty($anotherReview)) {
    displayReviews([$anotherReview]); //Pass the review to display.
}


?>


<?php

/**
 * User Review Function - PHP
 * 
 * This function allows you to store and retrieve user reviews for a given product.
 * It uses a simple file-based storage for demonstration purposes.  
 * 
 * **Important:** In a real-world application, you would likely use a 
 * database (MySQL, PostgreSQL, etc.) for storing data, 
 * rather than files.  This is purely for illustrative purposes.
 */

class ReviewManager {

  private $reviewsFile;

  public function __construct($reviewsFile) {
    $this->reviewsFile = $reviewsFile;
  }

  /**
   * Adds a new review to the database.
   *
   * @param int $productId The ID of the product the review is for.
   * @param string $username The username of the reviewer.
   * @param string $comment The review comment.
   * @return bool True if the review was added successfully, false otherwise.
   */
  public function addReview(int $productId, string $username, string $comment) {
    // Sanitize input (important!) -  Validate for security.
    $productId = (int)$productId;  //Cast to integer
    $username = trim($username);
    $comment = trim($comment);

    // Check if username and comment are empty.
    if (empty($username) || empty($comment)) {
      return false;
    }

    // Format the review data
    $reviewData = "{$productId}: {$username}: {$comment}
";

    // Check if the file exists. If not, create it.
    if (!file_exists($this->reviewsFile)) {
      if (!touch($this->reviewsFile)) {
        error_log("Failed to create reviews file: $this->reviewsFile"); //Log an error.
        return false;
      }
    }

    // Append the review to the file
    $result = file_put_contents($this->reviewsFile, $reviewData, FILE_APPEND);

    if ($result === false) {
      error_log("Failed to add review to file: $this->reviewsFile");
      return false;
    }

    return true;
  }


  /**
   * Retrieves all reviews for a product.
   *
   * @param int $productId The ID of the product to retrieve reviews for.
   * @return array An array of review strings, or an empty array if no reviews are found.
   */
  public function getReviews(int $productId) {
    $reviews = [];
    $productId = (int)$productId; //Cast to integer

    if (!file_exists($this->reviewsFile)) {
      return $reviews; // Return empty array if file doesn't exist
    }

    $contents = file($this->reviewsFile, FILE_IGNORE_NEW_LINES);

    if ($contents === false) {
      error_log("Failed to read reviews file: $this->reviewsFile");
      return $reviews;
    }

    foreach ($contents as $review) {
      if (strpos($review, ": {$productId}:") === 0) {
        $reviews[] = $review;
      }
    }

    return $reviews;
  }

  /**
   * Deletes all reviews for a product.
   *
   * @param int $productId The ID of the product to delete reviews for.
   */
  public function deleteReviews(int $productId) {
      $productId = (int)$productId;

      if (!file_exists($this->reviewsFile)) {
          return; // Nothing to delete
      }

      $reviews = $this->getReviews($productId);
      if ($reviews) {
          $deletedCount = 0;
          foreach ($reviews as $review) {
            $deleted = unlink($this->reviewsFile);  //Unlink each review.
            if ($deleted) {
                $deletedCount++;
            }
          }
          if($deletedCount > 0){
            // Re-create file after deleting
            touch($this->reviewsFile);
          }
      }
  }
}


// Example Usage:
$reviewsManager = new ReviewManager('reviews.txt');

// Add some reviews
$reviewsManager->addReview(123, 'John Doe', 'Great product! Highly recommended.');
$reviewsManager->addReview(123, 'Jane Smith', 'Excellent value for money.');
$reviewsManager->addReview(456, 'Peter Jones', 'Could be better.');


// Get reviews for product ID 123
$reviews = $reviewsManager->getReviews(123);

if (!empty($reviews)) {
  echo "Reviews for Product 123:
";
  foreach ($reviews as $review) {
    echo $review . "
";
  }
} else {
  echo "No reviews found for product 123.
";
}


// Delete reviews for product 123
$reviewsManager->deleteReviews(123);

//Try getting reviews for the product again.
$reviews = $reviewsManager->getReviews(123);
if (!empty($reviews)) {
  echo "Reviews for Product 123:
";
  foreach ($reviews as $review) {
    echo $review . "
";
  }
} else {
  echo "No reviews found for product 123.
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId    The ID of the user leaving the review.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Example method to display review info
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Date: " . $this->getDate() . "<br>";
    }
}


/**
 * User Review Review Function (Simple Example)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";

    foreach ($reviews as $review) {
        echo "<div class='review'>";
        $review->displayReview(); // Display the review information
        echo "</div><hr>";
    }
}



// Example Usage:

// Create some sample reviews
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(123, 789, 4, "Good value for the price.");
$review3 = new UserReview(456, 101, 3, "It was okay, but could be better.");

// Create an array of reviews
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and data sanitization.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $author The name of the reviewer.
 * @param string $comment The review text.
 * @param int $rating  (Optional) The rating given by the user (1-5).  Defaults to 0 if missing.
 * @return array|string  Returns an array on success (with review ID) or a string on failure.
 */
function storeUserReview(string $productId, string $author, string $comment, int $rating = 0) {
  // **Validation**
  if (empty($productId)) {
    return "Error: Product ID is required.";
  }
  if (empty($author)) {
    return "Error: Author name is required.";
  }
  if (empty($comment)) {
    return "Error: Review comment is required.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // **Sanitization (Basic - Enhance for Production)**
  $author = htmlspecialchars(trim($author)); // Protect against XSS
  $comment = htmlspecialchars(trim($comment));

  // **Data Handling -  Replace with Database Interaction in Production**
  // For this example, we'll use an array to simulate a database.
  $reviews = [
    "product123" => [
      "author" => "John Doe",
      "comment" => "Great product!",
      "rating" => 5,
      "review_id" => uniqid()  // Generate a unique review ID
    ],
    "product456" => [
      "author" => "Jane Smith",
      "comment" => "Could be better.",
      "rating" => 3,
      "review_id" => uniqid()
    ]
  ];

  // **Check if product exists in reviews array.**
  if (!isset($reviews[$productId])) {
    return "Error: Product not found or review already exists.";
  }


  // **Store the review (simulated database insertion)**
  $reviews[$productId]["author"] = $author;
  $reviews[$productId]["comment"] = $comment;
  $reviews[$productId]["rating"] = $rating;
  $reviews[$productId]["review_id"] = uniqid(); // Regenerate to avoid collisions

  return $reviews[$productId]["review_id"];
}

// **Example Usage**
$reviewId1 = storeUserReview("product123", "Alice Brown", "This is amazing!", 5);
echo "Review ID 1: " . $reviewId1 . "<br>";  // Output: Review ID 1: abcdefg...

$reviewId2 = storeUserReview("product456", "Bob Miller", "It's okay.", 3);
echo "Review ID 2: " . $reviewId2 . "<br>";

$reviewId3 = storeUserReview("product123", "Charlie Green", "Very good.", 4);
echo "Review ID 3: " . $reviewId3 . "<br>";

// Example of an error
$errorResult = storeUserReview("", "David Lee", "Invalid review", 2);
echo $errorResult . "<br>"; // Output: Error: Product ID is required.

$errorResult2 = storeUserReview("product123", "", "Invalid review", 2);
echo $errorResult2 . "<br>"; // Output: Error: Author name is required.
?>


<?php

/**
 * User Review Function
 * 
 * This function takes user input for a review and returns a formatted HTML string 
 * displaying the review with user information.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional)  The rating (1-5).  Defaults to 0.
 * @param string $timestamp (Optional)  The timestamp for the review. Defaults to current time.
 * @return string HTML formatted review
 */
function generateReviewHTML(string $username, string $reviewText, int $rating = 0, string $timestamp = null) {
  // Validate input (basic example, you can expand on this)
  if (empty($username) || empty($reviewText)) {
    return "<p>Error: Username and review text are required.</p>";
  }

  if ($rating < 1 || $rating > 5) {
    $rating = 0; // Default to 0 if invalid
  }

  // Format timestamp if provided
  $formattedTimestamp = $timestamp ? date('Y-m-d H:i:s') : date('Y-m-d H:i:s');

  // Build the HTML
  $html = "<div class='review'>";
  $html .= "<p><strong>User:</strong> " . htmlspecialchars($username) . "</p>";
  $html .= "<p><strong>Rating:</strong> " . $rating . " / 5</p>";
  $html .= "<p><strong>Review:</strong> " . htmlspecialchars($reviewText) . "</p>";
  $html .= "<p><strong>Timestamp:</strong> " . $formattedTimestamp . "</p>";
  $html .= "</div>";

  return $html;
}

// Example Usage:
$username = "JohnDoe";
$review = "This product is amazing!  I highly recommend it!";
$rating = 5;
$timestamp = time();  // Use current timestamp

$reviewHTML = generateReviewHTML($username, $review, $rating, $timestamp);
echo $reviewHTML;

// Another Example (without timestamp):
$username = "JaneSmith";
$review = "The product was okay, but could be better.";
$reviewHTML = generateReviewHTML($username, $review);
echo $reviewHTML;

?>


<?php

/**
 * User Review Function
 *
 * This function creates a user review object, validating the input
 * and providing a simple way to store review data.
 *
 * @param string $username  The name of the user leaving the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 *
 * @return array|false  An array containing the review data (username, rating, comment)
 *                     on success, or false on failure (e.g., invalid rating).
 */
function createReview(string $username, string $rating, string $comment): array|false
{
    // Input validation
    $rating = (int) $rating; // Convert rating to integer

    if ($rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    if (empty($username) || empty($comment)) {
        return false; // Username and comment are required
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment
    ];

    return $review;
}


// Example Usage:

// Successful review
$review1 = createReview("John Doe", 4, "Great product!  I highly recommend it.");
if ($review1) {
    echo "Review 1: " . json_encode($review1) . "
";
} else {
    echo "Review 1 failed to create.
";
}

// Failed review - Invalid rating
$review2 = createReview("Jane Smith", 6, "Good product.");
if ($review2) {
    echo "Review 2: " . json_encode($review2) . "
";
} else {
    echo "Review 2 failed to create (invalid rating).
";
}

// Failed review - Missing comment
$review3 = createReview("Peter Jones", 3, "");
if ($review3) {
    echo "Review 3: " . json_encode($review3) . "
";
} else {
    echo "Review 3 failed to create (missing comment).
";
}

// Successfully created review
$review4 = createReview("Alice Brown", 5, "Excellent service and fast delivery!");
if ($review4) {
    echo "Review 4: " . json_encode($review4) . "
";
} else {
    echo "Review 4 failed to create.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $username The user's name.
 * @return array An array containing all reviews, or an empty array if no reviews exist.
 */
function createAndDisplayReviews(string $productName, string $rating, string $comment, string $username): array
{
  // Input validation - Basic example, expand as needed
  if (empty($productName)) {
    return [];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return []; // Invalid rating
  }
  if (empty($comment)) {
    return [];
  }

  // Store reviews (In a real application, you'd use a database)
  $reviews = [];

  // Add the review to the array
  $reviews[] = [
    'product' => $productName,
    'rating' => (int)$rating, // Ensure rating is an integer
    'comment' => $comment,
    'username' => $username,
    'timestamp' => date('Y-m-d H:i:s')
  ];

  // Return all reviews
  return $reviews;
}


/**
 * Displays existing reviews
 *
 *  This function takes an array of reviews and formats them for display.
 *
 *  @param array $reviews An array of reviews.
 *  @return string  HTML formatted output for displaying reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet!</p>";
    }

    $html = "<ul>";
    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . htmlspecialchars($review['username']) . ":</strong> "; //Use htmlspecialchars for safety
        $html .= "Rating: " . $review['rating'] . " - ";
        $html .= htmlspecialchars($review['comment']) . "<br>";
        $html .= "<em>" . date('Y-m-d H:i:s', strtotime($review['timestamp'])) . "</em>";
        $html .= "</li>";
    }
    $html .= "</ul>";

    return $html;
}


// Example Usage:

// Get the product name and review details
$product = "Awesome Widget";
$rate = 4;
$commentText = "This widget is amazing!  Highly recommended.";
$user = "John Doe";

// Create a review
$allReviews = createAndDisplayReviews($product, $rate, $commentText, $user);

// Display all reviews
echo displayReviews($allReviews);



?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality to store and display user reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment) {
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by a specific username.
     *
     * @param string $username The username to filter reviews by.
     * @return array An array of review objects for the specified username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void Displays reviews to the browser.
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->reviews as $review) {
            echo "<li><strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . "</li>";
        }
        echo "</ul>";
    }

}

// Example Usage:

// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("John Doe", "Great product, highly recommended!");
$reviewSystem->addReview("Jane Smith", "Could be better, some issues with the interface.");
$reviewSystem->addReview("Peter Jones", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific user
echo "<hr>";
echo "<h2>Reviews by John Doe:</h2>";
$johnReviews = $reviewSystem->getReviewsByUsername("John Doe");
if (!empty($johnReviews)) {
    foreach ($johnReviews as $review) {
        echo "<strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . "<br>";
    }
} else {
    echo "<p>No reviews found for John Doe.</p>";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function takes user input for a review and returns a formatted review string.
 *
 *  @param string $reviewerName - The name of the reviewer.
 *  @param string $rating - The rating given by the reviewer (e.g., 1-5).
 *  @param string $comment - The user's written comment for the review.
 *
 *  @return string - A formatted review string.  Returns an error message if input is invalid.
 */
function createReview(string $reviewerName, string $rating, string $comment)
{
  // Input validation - Basic example.  You should expand this.
  if (empty($reviewerName)) {
    return "Error: Reviewer name cannot be empty.";
  }
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }
  if (empty($comment)) {
    return "Error: Review comment cannot be empty.";
  }

  // Create the formatted review string
  $review = "Review by: " . $reviewerName . "
";
  $review .= "Rating: " . $rating . "/5
";
  $review .= "Comment: " . $comment . "
";
  $review .= "--- End of Review ---
";

  return $review;
}


// Example Usage:
$reviewer = "John Doe";
$rate = 4;
$feedback = "This product is amazing!  I highly recommend it.";

$review_text = createReview($reviewer, $rate, $feedback);
echo $review_text . "
";

// Example with invalid input:
$invalidReview = createReview("", 6, "Bad review!");
echo $invalidReview . "
";

$anotherInvalid = createReview("Jane", "2", "");
echo $anotherInvalid . "
";


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $username   The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews     (Optional) An array to store all reviews.
 * @return array           The updated reviews array.
 */
function addOrDisplayReview(string $productId, string $username, string $reviewText, array &$reviews = []) {
  // Validation (Simple - could be expanded for more robust validation)
  if (empty($username) || empty($reviewText)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time() // Optional: add timestamp for ordering
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Display Reviews
 *
 * This function displays a list of reviews for a given product ID.
 *
 * @param array $reviews An array of review objects.
 * @param string $productId The ID of the product to display reviews for.
 *
 */
function displayReviews(array $reviews, string $productId) {
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; // Escape for security
    echo "<strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "<br>";
    echo "<strong>Date:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
// Initialize the reviews array (optional, but good for demonstration)
$productReviews = [];

// Add some reviews
$productReviews = addOrDisplayReview("product123", "John Doe", "Great product!  Highly recommended.", $productReviews);
$productReviews = addOrDisplayReview("product123", "Jane Smith", "Good value for money.", $productReviews);
$productReviews = addOrDisplayReview("product456", "Peter Jones", "Disappointed with the quality.", $productReviews);

// Display the reviews
displayReviews($productReviews, "product123");

// Display the reviews for a different product
displayReviews($productReviews, "product456");

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and error handling.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $reviewerName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating (e.g., 1-5). Defaults to 0.
 * @param string $dbConnection (optional)  A connection object to your database.  If not provided, a default is used.
 * @return array An array containing:
 *   - 'success': True if the review was saved successfully, false otherwise.
 *   - 'message':  A message indicating the result of the operation.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 */
function saveUserReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0, $dbConnection = null)
{
    $success = false;
    $message = '';
    $reviewId = null;

    // Database connection - Use a default if not provided
    if ($dbConnection === null) {
        // Replace this with your actual database connection setup
        $dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    try {
        // Validate inputs (Important!)
        if (empty($reviewerName)) {
            return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'reviewId' => null];
        }
        if (empty($reviewText)) {
            return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
        }

        // Sanitize inputs (important to prevent SQL injection!)
        $reviewerName = trim($reviewerName);
        $reviewText = trim($reviewText);

        // Escape data for safe database insertion
        $stmt = $dbConnection->prepare("INSERT INTO reviews (productId, reviewerName, reviewText, rating) VALUES (:productId, :reviewerName, :reviewText, :rating)");
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewerName', $reviewerName);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();

        $reviewId = $dbConnection->lastInsertId();  // Get the ID of the newly inserted row

        $success = true;
        $message = 'Review saved successfully.';

    } catch (PDOException $e) {
        $message = 'Error saving review: ' . $e->getMessage();
        error_log($e->getMessage()); // Log the error for debugging
    }

    return ['success' => $success, 'message' => $message, 'reviewId' => $reviewId];
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @param PDO $dbConnection  A PDO database connection object.
 */
function displayUserReviews(string $productId, PDO $dbConnection)
{
    // Retrieve reviews for the product
    $stmt = $dbConnection->prepare("SELECT id, reviewerName, reviewText, rating FROM reviews WHERE productId = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<h2>Reviews for Product: " . $productId . "</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['reviewerName'] . ":</strong> " . htmlspecialchars($review['reviewText']) . " (Rating: " . $review['rating'] . ")";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example usage (in a web environment, you would typically call these functions
// in response to a form submission and then render the results)

// Simulate a database connection (replace with your actual connection)
$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");


// Example 1: Save a review
$result = saveUserReview("product123", "John Doe", "This is a great product!", 5);
if ($result['success']) {
    echo "<p>Review saved successfully. Review ID: " . $result['reviewId'] . "</p>";
} else {
    echo "<p>Error saving review: " . $result['message'] . "</p>";
}


// Example 2: Display reviews for a product
displayUserReviews("product123", $dbConnection);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the user writing the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete.  If not provided, a new review is created.
 *
 * @return array An array containing:
 *   - 'success':  True if the operation was successful, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review': (Only on successful creation or update) The newly created or updated review object.
 *   - 'errors': An array of errors encountered during the operation.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, int $reviewId = 0) {
    $success = false;
    $message = '';
    $review = null;
    $errors = [];

    // Validate input (basic example - add more robust validation as needed)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        $errors['error'] = 'All fields are required.';
        return ['success' => false, 'message' => 'Invalid input data.', 'errors' => $errors];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        $errors['error'] = 'Rating must be a number between 1 and 5.';
    }


    // 1. Create a new review
    if ($reviewId === 0) {
        // Simulate a database insertion
        $newReview = [
            'product_id' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => date('Y-m-d H:i:s')
        ];

        //Simulate database insertion
        // $dbResult = insertReviewIntoDatabase($newReview);
        // if ($dbResult === true) {
        //    $reviewId = $dbResult; // Get the ID from the database
        //    $success = true;
        //    $review = $newReview;
        // } else {
        //    $errors['error'] = 'Failed to create review in database.';
        // }

        $reviewId = time(); //Simulate generating a review ID
        $success = true;
        $review = $newReview;
    }
    // 2. Update an existing review
    else {
        //Simulate database update
        // $dbResult = updateReviewInDatabase($reviewId, $newReview);
        // if ($dbResult === true) {
        //     $success = true;
        //     $review = $newReview;
        // } else {
        //    $errors['error'] = 'Failed to update review in database.';
        // }

    }

    return ['success' => $success, 'message' => $message, 'review' => $review, 'errors' => $errors];
}


/**
 * Dummy Functions (Replace with actual database interaction)
 */
function insertReviewIntoDatabase(array $review) {
    // Replace this with your actual database insertion logic.
    // This is just a placeholder for demonstration.
    return true; // Simulate a successful insertion
}

function updateReviewInDatabase(int $reviewId, array $review) {
    // Replace this with your actual database update logic.
    // This is just a placeholder for demonstration.
    return true; // Simulate a successful update
}

// Example Usage:
// Create a new review
$result = createOrUpdateReview('product123', 'JohnDoe', '4', 'Great product!');
print_r($result);

// Update an existing review (assuming $reviewId is valid)
$result = createOrUpdateReview('product123', 'JaneSmith', '5', 'Excellent value!', 1);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews for a product or item.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $user_id The unique identifier of the user.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Ensure validation.
 * @param string $comment The user's comment/review.
 * @param string $db_connection  A connection object to your database.
 *
 * @return bool True on successful save, false on failure.
 */
function saveUserReview(string $product_id, string $user_id, string $rating, string $comment, $db_connection) {
    // Validate input - VERY IMPORTANT!
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Error: Missing required review fields.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Invalid rating format.  Must be a number between 1 and 5.");
        return false;
    }


    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:product_id, :user_id, :rating, :comment)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing statement: " . $db_connection->error);
        return false;
    }


    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


// Example Usage (Illustrative - Replace with your actual database setup)
// -----------------------------------------------------------------

// Assuming you have a database connection established as $db_connection

// Example review data
$product_id = "P123";
$user_id = "U456";
$rating = 4;
$comment = "Great product!  Works as advertised.";

// Save the review
$success = saveUserReview($product_id, $user_id, $rating, $comment, $db_connection);

if ($success) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews for a product or item.
 *
 * @param string $productId The ID of the product or item the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating  The rating given for the product (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, an ID will be generated.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, False otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 */
function createReview(string $productId, string $userEmail, string $reviewText, int $rating, int $userId = null): array
{
    // Validation (Example - you should expand this)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($userEmail)) {
        return ['success' => false, 'message' => 'User email cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviewId' => null];
    }

    // Database interaction (Replace with your actual database connection)
    try {
        // Simulate database connection and insertion
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your credentials
        $stmt = $db->prepare("INSERT INTO reviews (productId, userEmail, reviewText, rating, userId) VALUES (?, ?, ?, ?, ?)");
        $stmt->execute([$productId, $userEmail, $reviewText, $rating, $userId]);
        $reviewId = $db->lastInsertId();

        return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'reviewId' => null];
    }
}


// Example Usage:
$productId = '123';
$userEmail = 'test@example.com';
$reviewText = 'This is a fantastic product!';
$rating = 4;

$result = createReview($productId, $userEmail, $reviewText, $rating);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview {

    /**
     * @var array  An array to store the review data.
     */
    private $review = [];

    /**
     * Sets the review data.
     *
     * @param int   $userId     The ID of the user submitting the review.
     * @param int   $productId The ID of the product being reviewed.
     * @param string $rating    The rating given (e.g., 1-5).
     * @param string $comment   The user's comments.
     * @return bool True on success, false on failure.
     */
    public function setReview(int $userId, int $productId, string $rating, string $comment) {
        // Validate input - crucial for security!
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        if (empty($comment)) {
            return false; // Require a comment
        }

        $this->review = [
            'userId'    => $userId,
            'productId' => $productId,
            'rating'    => $rating,
            'comment'   => $comment,
            'date'      => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

        return true;
    }

    /**
     * Retrieves a review based on the product ID.
     *
     * @param int $productId The ID of the product.
     * @return array|null The review data if found, null otherwise.
     */
    public function getReviewByProductId(int $productId) {
        // Placeholder - In a real application, you'd query a database
        //  or use other persistent storage. This simulates a lookup.
        $reviews = [
            [
                'userId'    => 123,
                'productId' => 456,
                'rating'    => 4,
                'comment'   => 'Great product!',
                'date'      => date('Y-m-d H:i:s')
            ],
            [
                'userId'    => 456,
                'productId' => 456,
                'rating'    => 5,
                'comment'   => 'Excellent value for money.',
                'date'      => date('Y-m-d H:i:s')
            ]
        ];

        foreach ($reviews as $review) {
            if ($review['productId'] === $productId) {
                return $review;
            }
        }

        return null;
    }


    /**
     * Displays the review data.  Useful for debugging or showing reviews to the user.
     *
     * @return void
     */
    public function displayReview() {
        echo "<pre>";
        print_r($this->review);
        echo "</pre>";
    }
}

// Example Usage:

// Create a new review object
$review = new UserReview();

// Set a review
if ($review->setReview(123, 456, 4, 'This is a fantastic product!')) {
    echo "Review submitted successfully!
";
    $review->displayReview();

    // Get the review for product ID 456
    $review_data = $review->getReviewByProductId(456);

    if ($review_data) {
        echo "Review for product 456:
";
        $review->displayReview();
    } else {
        echo "No review found for product 456.
";
    }
} else {
    echo "Failed to submit review.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with basic details.
 *
 * @param string $user_id  The ID of the user submitting the review.
 * @param string $product_id The ID of the product the review is for.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $user_id, string $product_id, string $rating, string $comment)
{
  // Validate inputs - Important for security and data integrity
  if (empty($user_id) || empty($product_id) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required review fields."); // Log for debugging
    return false;
  }

  // Validate rating (ensure it's a number and within a reasonable range)
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating provided.");
    return false;
  }

  //  *** Database Interaction - Replace with your actual database code ***
  try {
    // Example using a (simplified) database connection
    //  (This is illustrative, adapt to your database setup!)
    $db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $result = $stmt->execute();

    if ($result) {
      //  You might want to return the ID of the newly inserted review
      return true;
    } else {
      // Log errors to help debug database issues
      error_log("Error: Failed to insert review into database: " . print_r($stmt->errorInfo(), true));
      return false;
    }

  } catch (PDOException $e) {
    // Handle database connection errors gracefully
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}


// *** Example Usage ***
//  (For demonstration purposes only - don't execute this directly in a web environment)
$userId = "user123";
$productId = "product456";
$rating = 4;
$comment = "Great product, highly recommended!";

if (storeUserReview($userId, $productId, $rating, $comment)) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews
 * for a specific item (e.g., a product, movie, restaurant).
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $item_id The unique ID of the item.
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - 'user': User's name or ID.
 *                       - 'rating':  Integer (1-5).
 *                       - 'comment':  User's review comment.
 * @return array  An array of review objects to display.
 */
function create_review_function(string $item_name, string $item_id, array $reviews = []) {

  // Validation (Simple example - can be expanded)
  if (empty($item_name) || empty($item_id)) {
    return ['error' => 'Item name and ID are required.'];
  }

  // Add the new review (example - you'll need to adapt this to your database)
  $new_review = [
    'user' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Works as expected.',
    'item_id' => $item_id // Important: Link the review to the item
  ];

  $reviews[] = $new_review;

  return $reviews;
}

// --- Example Usage ---

// 1. Create a new review
$item_name = 'Awesome Gadget';
$item_id = 'GADGET001';
$reviews = create_review_function($item_name, $item_id);

if (isset($reviews['error'])) {
    echo "<p style='color:red;'>Error: " . $reviews['error'] . "</p>";
} else {
    // 2. Display the reviews
    echo "<h2>Reviews for " . $item_name . " (ID: " . $item_id . ")</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>User:</strong> " . $review['user'] . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . $review['comment'] . "</li>";
        }
        echo "</ul>";
    }
}


// ---  More Advanced Features to Consider ---

// 1. Database Integration:
//    - Replace the simple review creation with code to insert the review
//      into a database table (e.g., 'reviews').
//    - Use prepared statements to prevent SQL injection.

// 2. Sorting/Filtering:
//    - Add options to sort reviews by rating, date, etc.
//    - Allow filtering reviews based on rating ranges or keywords.

// 3. User Authentication:
//    -  Require users to be logged in before submitting a review.  This is crucial
//       for security and to track who wrote which review.

// 4. Validation:
//   - More robust validation (e.g., checking the rating is within the 1-5 range,
//     validating the comment for offensive content).

// 5.  Pagination: If you have many reviews, implement pagination to
//     display them in manageable chunks.

// 6.  Error Handling: Improve error handling (e.g., logging errors instead of just
//     displaying them to the user).
?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to manage user reviews for a product.
 */
class Review
{
    /**
     * @var array Reviews stored for a product.
     */
    private $reviews = [];

    /**
     * Adds a new review to the review list.
     *
     * @param string $user  The username of the reviewer.
     * @param string $rating The rating provided by the user (e.g., 1-5 stars).
     * @param string $comment The user's comment about the product.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user, string $rating, string $comment)
    {
        // Validation (you can expand this with more validation)
        if (!preg_match('/^[a-zA-Z0-9 ]+$/', $user)) {
            return false; // Invalid username
        }
        if (!preg_match('/^[1-5]$/', $rating)) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'user' => $user,
            'rating' => (int)$rating, // Convert rating to integer
            'comment' => $comment
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single review by user.
     *
     * @param string $user The username of the reviewer.
     * @return array|null An array representing the review, or null if not found.
     */
    public function getReviewByUser(string $user)
    {
        foreach ($this->reviews as $review) {
            if ($review['user'] === $user) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Calculates the average rating of all reviews.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float
    {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return (float)($totalRating / count($this->reviews));
    }
}


// Example Usage:
$reviewManager = new Review();

// Add some reviews
$reviewManager->addReview('John Doe', 5, 'Excellent product, highly recommended!');
$reviewManager->addReview('Jane Smith', 4, 'Good product, works as expected.');
$reviewManager->addReview('Peter Jones', 3, 'Average product, could be better.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a single review
$johnsReview = $reviewManager->getReviewByUser('John Doe');
echo "
John's Review:
";
print_r($johnsReview);

// Get the average rating
$averageRating = $reviewManager->getAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews yet') . "
";
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $review_id (Optional) - Unique identifier for the review.
     * @param int $user_id   The ID of the user submitting the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating     The rating (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @param string $date     The date of the review (YYYY-MM-DD format recommended).
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment, $date) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = $date;
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->review_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (For updating reviews - use with caution!)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }
}

/**
 * User Review Review Function
 */
/**
 *  This function takes a UserReview object and provides a basic review string.
 *  You can customize this to generate more sophisticated output.
 *
 * @param UserReview $review The UserReview object to review.
 * @return string A formatted review string.
 */
function reviewUserReview(UserReview $review) {
    $userId = $review->getUserId();
    $productId = $review->getProductId();
    $rating = $review->getRating();
    $comment = $review->getComment();
    $date = $review->getDate();

    return "Review ID: " . ($review->getReviewId() ? $review->getReviewId() : "N/A") .
           "
User ID: " . $userId .
           "
Product ID: " . $productId .
           "
Rating: " . $rating .
           "
Comment: " . $comment .
           "
Date: " . $date;
}

// Example Usage:
$review1 = new UserReview(123, 101, 202, 5, "Great product!", "2023-10-27");
$review2 = new UserReview(456, 102, 201, 3, "It's okay.", "2023-10-26");

echo reviewUserReview($review1) . "

";
echo reviewUserReview($review2) . "

";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It's a simplified example and doesn't include full database interaction or
 * robust error handling.  You'll need to adapt it to your specific database
 * and security requirements.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param int    $rating  The rating given by the user (e.g., 1-5).
 * @param int    $userId  (Optional) The ID of the user. If not provided, a new user is created.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was created/updated successfully, false otherwise.
 *               - 'message':  A message indicating the status of the operation.
 *               - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(string $productId, string $name, string $comment, int $rating, int $userId = null): array
{
    // Validate input (Basic - enhance this for production)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID is required.', 'review' => null];
    }
    if (empty($name)) {
        return ['success' => false, 'message' => 'User name is required.', 'review' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Review comment is required.', 'review' => null];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'review' => null];
    }
    if (!is_numeric($userId)) {
        $userId = null; // Fallback to create a new user
    }
    // ------------------ Database Interaction (Simulated for this example) ------------------
    // In a real application, you'd replace this with your actual database queries.

    // Simulate a user ID (if not provided)
    if ($userId == null) {
        $userId = uniqid(); // Generate a unique ID
    }


    // Simulate a review object
    $review = [
        'productId' => $productId,
        'userId' => $userId,
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'dateCreated' => date('Y-m-d H:i:s')
    ];

    // Simulate successful operation
    return ['success' => true, 'message' => 'Review created/updated successfully.', 'review' => $review];
}


// ------------------ Example Usage ------------------

// Create a new review
$result = createOrUpdateReview('product123', 'John Doe', 'Great product!', 5);
print_r($result);

// Update an existing review (simulated)
$result = createOrUpdateReview('product123', 'Jane Smith', 'Improved version!', 4, 123);
print_r($result);


// Test cases - Demonstrate error handling
$result = createOrUpdateReview('', 'User', 'Review', 3);
print_r($result);

$result = createOrUpdateReview('product456', 'User', '', 2);
print_r($result);

$result = createOrUpdateReview('product789', 'User', 'Review', 6);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It demonstrates basic CRUD operations with error handling and validation.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The review comment.
 * @param int $reviewId (optional) The ID of the review to update. If not provided, a new review is created.
 * @return array Returns an array containing the response data (success/failure message, updated review data, or error message).
 */
function create_review(string $productId, string $username, string $rating, string $comment, int $reviewId = 0)
{
    // Validate inputs
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.'];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.'];
    }
    if (empty($rating)) {
        return ['success' => false, 'message' => 'Rating cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.'];
    }

    // ---  Simulated Database Interaction (Replace with your actual database logic) ---
    // For demonstration purposes, we'll use an in-memory array.
    $reviews = [];  // Initialize the reviews array

    // Check if the review with the given ID already exists
    if ($reviewId > 0) {
        if (isset($reviews[$reviewId])) {
            // Update existing review
            $reviews[$reviewId] = [
                'product_id' => $productId,
                'username' => $username,
                'rating' => $rating,
                'comment' => $comment,
                'created_at' => time() // Add timestamp for creation
            ];
        } else {
            return ['success' => false, 'message' => 'Review not found with ID: ' . $reviewId];
        }
    } else {
        // Create a new review
        $new_review_id = count($reviews) + 1;
        $review = [
            'product_id' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'created_at' => time()  // Add timestamp for creation
        ];
        $reviews[$new_review_id] = $review;
    }

    // --- End Simulated Database Interaction ---

    return ['success' => true, 'message' => 'Review created successfully.', 'review' => $reviews[$new_review_id] ];
}


// Example Usage:
$response = create_review('123', 'JohnDoe', 4, 'Great product!', 1);
print_r($response);
echo "<br>";

$response = create_review('456', 'JaneSmith', 5, 'Excellent value!', 2);
print_r($response);
echo "<br>";

$response = create_review('789', 'PeterJones', 3, 'Okay', 3);
print_r($response);
echo "<br>";

$response = create_review('101', 'AliceBrown', 2, 'Not impressed', 4); // Simulate updating a review
print_r($response);
echo "<br>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array $dbConnection  A database connection object. (Optional, for database interaction)
 *
 * @return array An array containing the results:
 *   - 'success': True if the operation was successful, False otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'data': The review data (if successful).
 */
function createReview(
    string $productId,
    string $userEmail,
    string $rating,
    string $comment,
    array $dbConnection = null // Allow passing in a database connection
) {
    // Basic Validation
    if (empty($productId) || empty($userEmail) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'All fields are required.',
            'data' => null,
        ];
    }

    if (!filter_var($userEmail, FILTER_VALIDATE_EMAIL)) {
        return [
            'success' => false,
            'message' => 'Invalid email format.',
            'data' => null,
        ];
    }

    if (!preg_match('/^[1-5]+$/', $rating)) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'data' => null,
        ];
    }

    // Example: Storing in a database (adjust to your database schema)
    try {
        $stmt = $dbConnection->prepare(
            "INSERT INTO reviews (product_id, user_email, rating, comment, created_at)
             VALUES (:product_id, :user_email, :rating, :comment, NOW())"
        );

        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_email', $userEmail);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();
        $reviewId = $stmt->lastInsertId();

        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'data' => [
                'review_id' => $reviewId,
                'product_id' => $productId,
                'user_email' => $userEmail,
                'rating' => $rating,
                'comment' => $comment,
                'created_at' => date('Y-m-d H:i:s'), //format for display
            ],
        ];

    } catch (Exception $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage(),
            'data' => null,
        ];
    }
}


// Example Usage (Simulated Database Connection)
// This example assumes you have a database connection object named $dbConnection
// In a real application, you would obtain this connection from your framework or connection library.

//Simulated database connection for testing
//$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

// Example 1: Successful Review Creation
$reviewData = createReview(
    '123',
    'test@example.com',
    '4',
    'Great product!',
    $dbConnection // Pass the database connection
);

print_r($reviewData);

// Example 2: Error - Invalid Email Format
$reviewData = createReview(
    '456',
    'invalid-email',
    '3',
    'Bad review',
    $dbConnection
);

print_r($reviewData);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides a simple interface for storing and managing user feedback.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's comment/feedback.
 *
 * @return array An array containing the result of the operation:
 *               - 'success': true if the review was created/updated successfully, false otherwise.
 *               - 'message': A descriptive message about the result.
 *               - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment) {
    // Validate input -  Important for security and data integrity
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
            'review' => null,
        ];
    }

    // Validate rating to ensure it's numeric and within a valid range
    if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
            'review' => null,
        ];
    }


    // ***  Simulating Database Interaction - Replace with your actual database code ***
    // This section simulates creating a review in a database.
    // In a real application, you'd use a database query (e.g., using PDO, MySQLi).
    $review = [
        'product_id' => $productId,
        'user_id' => $userId,
        'rating' => intval($rating), // Ensure integer rating
        'comment' => $comment,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    // **  Store the review (simulated)  **
    // In a real app, you'd save this to a database.
    // For example:
    // $db->insert('reviews', $review);

    // **  Simulated Success  **
    return [
        'success' => true,
        'message' => 'Review created successfully!',
        'review' => $review,
    ];
}


// --- Example Usage ---
// $result = createOrUpdateReview('product123', 'user456', 4, 'Great product, highly recommended!');
//
// if ($result['success']) {
//     echo "Review created: " . json_encode($result['review']) . "
";
// } else {
//     echo "Error creating review: " . $result['message'] . "
";
// }

// Example with invalid rating:
// $result = createOrUpdateReview('product123', 'user456', 6, 'Excellent!');
// if ($result['success']) {
//     echo "Review created: " . json_encode($result['review']) . "
";
// } else {
//     echo "Error creating review: " . $result['message'] . "
";
// }

?>


<?php

try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $result = createOrUpdateReview('product123', 'user456', 4, 'Great product!');

    if ($result['success']) {
        echo "Review created: " . json_encode($result['review']) . "
";
    } else {
        echo "Error creating review: " . $result['message'] . "
";
    }

} catch (PDOException $e) {
    echo "Database error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    /**
     * @var int  The ID of the reviewed item (e.g., product, movie, etc.)
     */
    private $itemId;

    /**
     * @var string The user's review text
     */
    private $reviewText;

    /**
     * @var int  The rating given (e.g., 1-5 stars)
     */
    private $rating;

    /**
     * @var string The user's name
     */
    private $userName;

    /**
     * @var DateTime  Timestamp of when the review was created.
     */
    private $createdAt;

    /**
     * Constructor
     *
     * @param int $itemId The ID of the reviewed item.
     * @param string $reviewText The user's review text.
     * @param int $rating The rating given (1-5).
     * @param string $userName The user's name.
     */
    public function __construct(int $itemId, string $reviewText, int $rating, string $userName) {
        $this->itemId = $itemId;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
        $this->userName = $userName;
        $this->createdAt = new DateTime(); // Use DateTime class for accurate timestamps
    }

    /**
     * Getters
     *
     * @return int
     */
    public function getItemId(): int {
        return $this->itemId;
    }

    /**
     * Get the review text.
     *
     * @return string
     */
    public function getReviewText(): string {
        return $this->reviewText;
    }

    /**
     * Get the rating.
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get the user's name.
     *
     * @return string
     */
    public function getUserName(): string {
        return $this->userName;
    }

    /**
     * Get the creation timestamp.
     *
     * @return DateTime
     */
    public function getCreatedAt(): DateTime {
        return $this->createdAt;
    }

    /**
     * Display the review as a formatted string.
     *
     * @return string
     */
    public function __toString(): string {
        return sprintf(
            "Review by: %s
" .
            "Item ID: %d
" .
            "Rating: %d
" .
            "Review: %s
" .
            "Created at: %s",
            $this->userName,
            $this->itemId,
            $this->rating,
            $this->reviewText,
            $this->createdAt->format('Y-m-d H:i:s') // Format the timestamp
        );
    }
}


/**
 * User Review Review Function (Example)
 */
function reviewUser(UserReview $review) {
    echo $review . "
";
}


// Example Usage:
$productReview = new UserReview(123, "Great product!  I love it!", 5, "John Doe");
reviewUser($productReview);


$movieReview = new UserReview(456, "A fantastic movie, highly recommended!", 4, "Jane Smith");
reviewUser($movieReview);


// Demonstrating Getters
echo "
Item ID: " . $productReview->getItemId() . "
";
echo "Rating: " . $productReview->getRating() . "
";


?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and display reviews for a product or service.
 *
 *  @param string $productName The name of the product or service being reviewed.
 *  @param string $reviewText The text of the review submitted by the user.
 *  @param string $username The username of the user submitting the review.
 *  @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 *  @return array An array containing the review data or an error message if the input is invalid.
 */
function createReview(string $productName, string $reviewText, string $username, int $rating = 0) {
    // Input validation - essential for security and data integrity
    if (empty($productName)) {
        return ["error" => "Product name cannot be empty."];
    }
    if (empty($reviewText)) {
        return ["error" => "Review text cannot be empty."];
    }
    if (empty($username)) {
        return ["error" => "Username cannot be empty."];
    }
    if ($rating < 1 || $rating > 5) {
        return ["error" => "Rating must be between 1 and 5."];
    }

    //  Construct the review data - you would typically store this in a database
    $reviewData = [
        "product_name" => $productName,
        "review_text" => $reviewText,
        "username" => $username,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s") // Add a timestamp for tracking
    ];

    return $reviewData;
}

/**
 *  Display Reviews Function
 *
 *  This function takes an array of review data and displays them in an HTML format.
 *
 *  @param array $reviews An array of review data (as returned by createReview).
 *
 *  @return string  HTML string to display the reviews, or a message if no reviews exist.
 */
function displayReviews(array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for " . $reviews[0]["product_name"] . "</h2>"; // Display product name
    $html .= "<ul>";

    foreach ($reviews as $review) {
        $html .= "<li>";
        $html .= "<strong>" . $review["username"] . ":</strong> " . $review["review_text"] . " (" . $review["rating"] . "/5)";
        $html .= "<br>";
        $html .= "<small><em>" . $review["timestamp"] . "</em></small>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    return $html;
}


// Example Usage:
// 1. Create a review:
$reviewData = createReview("Awesome Widget", "This widget is fantastic! It does everything I need.", "john_doe", 5);

if (isset($reviewData["error"])) {
    echo "<p>Error: " . $reviewData["error"] . "</p>";
} else {
    // 2. Display the review:
    $reviews = [
        $reviewData,
        ["product_name" => "Another Product", "review_text" => "Good product!", "username" => "jane_doe", "rating" => 4, "timestamp" => date("Y-m-d H:i:s")],
        ["product_name" => "Yet Another Product", "review_text" => "Not bad.", "username" => "peter_pan", "rating" => 3, "timestamp" => date("Y-m-d H:i:s")]
    ];

    echo displayReviews($reviews);
}

?>


<?php

/**
 * User Review Function - Allows storing and retrieving user reviews.
 */
class UserReview {

  private $db_host = 'localhost';
  private $db_name = 'your_database_name'; // Replace with your database name
  private $db_user = 'your_username'; // Replace with your username
  private $db_password = 'your_password'; // Replace with your password

  private $conn = null;

  /**
   * Constructor: Establishes the database connection.
   */
  public function __construct() {
    try {
      $this->conn = new PDO("mysql:host=$this->db_host;dbname=$this->db_name", $this->db_user, $this->db_password);
      $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      echo "Database connection failed: " . $e->getMessage();
      die(); // Stop execution if the connection fails
    }
  }

  /**
   * Adds a new review to the database.
   *
   * @param string $user_id The ID of the user submitting the review.
   * @param string $review_text The text of the review.
   * @return bool True on success, false on failure.
   */
  public function addReview(string $user_id, string $review_text) {
    try {
      $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, review_text) VALUES (:user_id, :review_text)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':review_text', $review_text);
      $result = $stmt->execute();
      return $result;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Retrieves all reviews from the database.
   *
   * @return array An array of review objects, or an empty array if none are found.
   */
  public function getAllReviews() {
    $reviews = [];
    try {
      $stmt = $this->conn->prepare("SELECT id, user_id, review_text, created_at FROM reviews");
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

      if ($result) {
        foreach ($result as $row) {
          $reviews[] = new ReviewObject($row['id'], $row['user_id'], $row['review_text'], $row['created_at']);
        }
      }
      return $reviews;
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return [];
    }
  }

  /**
   * Retrieves a specific review by ID.
   *
   * @param int $id The ID of the review to retrieve.
   * @return ReviewObject|null A ReviewObject if found, null otherwise.
   */
  public function getReviewById(int $id) {
    try {
      $stmt = $this->conn->prepare("SELECT id, user_id, review_text, created_at FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      $result = $stmt->fetch(PDO::FETCH_ASSOC);

      if ($result) {
        return new ReviewObject($result['id'], $result['user_id'], $result['review_text'], $result['created_at']);
      } else {
        return null;
      }
    } catch (PDOException $e) {
      echo "Error retrieving review by ID: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Deletes a review from the database.
   *
   * @param int $id The ID of the review to delete.
   * @return bool True on success, false on failure.
   */
  public function deleteReview(int $id) {
    try {
      $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $result = $stmt->execute();
      return $result;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}

// Custom Review Object (to represent a review)
class ReviewObject {
  public int $id;
  public string $user_id;
  public string $review_text;
  public string $created_at; // Timestamp for when the review was created

  public function __construct(int $id, string $user_id, string $review_text, string $created_at) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->review_text = $review_text;
    $this->created_at = $created_at;
  }
}


// Example Usage:
// Create an instance of the Review class
$reviewSystem = new UserReview();

// Add a review
$reviewSystem->addReview('user123', 'This is a fantastic product!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
  echo "User ID: " . $review->user_id . "<br>";
  echo "Review: " . $review->review_text . "<br>";
  echo "Created At: " . $review->created_at . "<br><br>";
}

// Get a specific review
$specificReview = $reviewSystem->getReviewById(1);  // Assuming ID 1 exists

if ($specificReview) {
    echo "Specific Review: " . $specificReview->review_text . "<br>";
} else {
    echo "Review not found.";
}

// Delete a review (assuming ID 1 exists)
$reviewSystem->deleteReview(1);
?>


<?php

/**
 * Function to add, display, and manage user reviews.
 *
 * This function provides a basic framework for handling user reviews.
 * It includes functions for:
 *   - Adding a new review.
 *   - Displaying all reviews.
 *   - Displaying a single review.
 *   - Potentially adding more sophisticated features like rating, etc.
 *
 * NOTE: This is a simplified example and does not include database integration.
 *       You'll need to adapt it to your specific database and application needs.
 */

class ReviewManager {

    private $reviews = [];
    private $reviewIdCounter = 1; // For generating unique IDs

    /**
     * Adds a new review to the system.
     *
     * @param string $reviewerName The name of the reviewer.
     * @param string $reviewText The content of the review.
     *
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview($reviewerName, $reviewText) {
        $reviewId = $this->reviewIdCounter++;
        $review = [
            'id' => $reviewId,
            'reviewerName' => $reviewerName,
            'reviewText' => $reviewText,
            'dateCreated' => date('Y-m-d H:i:s') // Add timestamp for tracking
        ];

        $this->reviews[] = $review;
        return $reviewId;
    }

    /**
     * Displays all reviews.
     */
    public function displayAllReviews() {
        echo "<h2>All Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->reviews as $review) {
                echo "<h3>Review ID: " . $review['id'] . "</h3>";
                echo "<p><strong>Reviewer:</strong> " . $review['reviewerName'] . "</p>";
                echo "<p>" . $review['reviewText'] . "</p>";
                echo "<p><strong>Date Created:</strong> " . $review['dateCreated'] . "</p>";
                echo "<hr>";
            }
        }
    }

    /**
     * Displays a single review by ID.
     *
     * @param int $reviewId The ID of the review to display.
     *
     * @return bool True if the review was found and displayed, false otherwise.
     */
    public function displayReviewById($reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                echo "<h2>Review ID: " . $review['id'] . "</h2>";
                echo "<p><strong>Reviewer:</strong> " . $review['reviewerName'] . "</p>";
                echo "<p>" . $review['reviewText'] . "</p>";
                echo "<p><strong>Date Created:</strong> " . $review['dateCreated'] . "</p>";
                return true;
            }
        }
        return false;
    }
}

// Example Usage:

// Create a ReviewManager instance
$reviewManager = new ReviewManager();

// Add some reviews
$reviewId1 = $reviewManager->addReview("John Doe", "This product is amazing!");
$reviewId2 = $reviewManager->addReview("Jane Smith", "I'm a bit disappointed with the shipping time.");

// Display all reviews
echo "<h2>Reviews</h2>";
$reviewManager->displayAllReviews();

// Display a specific review
echo "<hr>";
$reviewManager->displayReviewById($reviewId1);
$reviewManager->displayReviewById($reviewId2);
?>


<?php
// ... (ReviewManager class definition remains the same) ...

//Example usage with PDO:

try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); //Throw exceptions on errors

    $reviewManager = new ReviewManager();
    $reviewManager->setPDO($pdo); //Set the PDO object

    //Add reviews to the database
    $reviewId1 = $reviewManager->addReview("John Doe", "This product is amazing!");
    $reviewId2 = $reviewManager->addReview("Jane Smith", "I'm a bit disappointed with the shipping time.");

    //Display reviews from the database
    echo "<h2>Reviews from Database</h2>";
    $reviewManager->displayAllReviews();
} catch(PDOException $e) {
    echo "Database error: " . $e->getMessage();
}
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 */

class ReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $reviewText) {
        if (empty($username) || empty($reviewText)) {
            return false; // Invalid input
        }
        $this->reviews[] = ['username' => $username, 'review' => $reviewText, 'date' => date('Y-m-d H:i:s')];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID. (Assumes IDs are sequential)
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        if ($reviewId < 0 || !is_numeric($reviewId)) {
            return null; // Invalid ID
        }

        // Sequential ID assumption.  This is a *very* basic implementation.
        // Consider using a database and proper ID generation for a real application.
        $index = $reviewId - 1; 

        if ($index >= 0 && $index < count($this->reviews)) {
            return $this->reviews[$index];
        }

        return null;
    }


    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        if ($reviewId < 0 || !is_numeric($reviewId)) {
            return false; // Invalid ID
        }

        $index = $reviewId - 1;

        if ($index >= 0 && $index < count($this->reviews)) {
            unset($this->reviews[$index]);
            return true;
        }

        return false;
    }

    /**
     * Gets all reviews sorted by date (most recent first).
     *
     * @return array An array of review objects, sorted by date.
     */
    public function getReviewsSortedByDate() {
        return $this->sortByDate($this->getAllReviews());
    }


    /**
     * Helper function to sort reviews by date.
     *
     * @param array $reviews  The array of review objects.
     * @return array The sorted array of review objects.
     */
    private function sortByDate(array $reviews) {
        usort($reviews, function($a, $b) {
            return strtotime($b['date']) - strtotime($a['date']);
        });
        return $reviews;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product! Highly recommended.');
$reviewSystem->addReview('JaneSmith', 'Could be better, but decent.');
$reviewSystem->addReview('PeterJones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviewSystem->getReviewById(2);
echo "
Review ID 2:
";
print_r($specificReview);

// Get reviews sorted by date
$sortedReviews = $reviewSystem->getReviewsSortedByDate();
echo "
Sorted Reviews by Date:
";
print_r($sortedReviews);

// Delete a review
$reviewSystem->deleteReview(1);

// Verify deletion
$allReviewsAfterDeletion = $reviewSystem->getAllReviews();
echo "
Reviews after deleting ID 1:
";
print_r($allReviewsAfterDeletion);
?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to collect and display user reviews for a given item (e.g., product, movie, etc.).
 * It uses a simple form to collect the review and then displays it.
 *
 * @param string $itemName The name of the item being reviewed.
 * @return array An array containing the review text, rating, and timestamp.
 *               Returns an empty array if there's an error.
 */
function collectUserReview(string $itemName) {
  // Sanitize input - crucial for security!  This prevents XSS attacks.
  $reviewText = htmlspecialchars(trim($_POST['reviewText']));
  $rating = (int) $_POST['rating']; // Cast to integer to ensure numeric rating

  // Validate input - Add more validation as needed (e.g., min/max rating, review length)
  if (empty($reviewText)) {
    return []; // Return empty array for empty review
  }
  if ($rating < 1 || $rating > 5) {
    return []; // Return empty array for invalid rating
  }

  // Store the review (in a real application, you'd likely use a database)
  // For demonstration, we'll just store it in an array.
  $review = [
    'itemName' => $itemName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time()
  ];

  return $review;
}

// Example Usage (Demonstration -  Replace with your database interaction)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $review = collectUserReview($_POST['itemName']);

  if (!empty($review)) {
    echo "<h2>Review submitted for " . htmlspecialchars($review['itemName']) . "</h2>";
    echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
    echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>";
  } else {
    echo "<p style='color:red;'>Please fill out the form correctly and ensure valid input.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>User Review Form</title>
</head>
<body>

  <h1>Submit a Review</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="itemName">Item Name:</label>
    <input type="text" id="itemName" name="itemName" required><br><br>

    <label for="reviewText">Your Review:</label><br>
    <textarea id="reviewText" name="reviewText" rows="5" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating" required>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select><br><br>

    <button type="submit">Submit Review</button>
  </form>

</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 * It includes input validation, data sanitization, and basic display formatting.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - `user`:  The username of the reviewer.
 *                       - `rating`:  The rating given (e.g., 1-5).
 *                       - `comment`: The user's comment/review text.
 * @return string HTML representation of the reviews.
 */
function displayUserReviews(string $productName, array $reviews)
{
  // Input Validation (Basic - expand for more robust validation)
  if (empty($productName)) {
    return "<p>Error: Product name cannot be empty.</p>";
  }

  if (!is_array($reviews)) {
    return "<p>Error: Reviews must be an array.</p>";
  }

  // Sanitize input (Important for security - escape HTML)
  $productName = htmlspecialchars($productName);

  $reviewOutput = "<div class='reviews-container'><h2>Reviews for {$productName}</h2>";

  if (empty($reviews)) {
    $reviewOutput .= "<p>No reviews yet.</p>";
  } else {
    foreach ($reviews as $review) {
      //Sanitize data before display
      $user = htmlspecialchars($review['user']);
      $rating = htmlspecialchars($review['rating']);
      $comment = htmlspecialchars($review['comment']);

      $reviewOutput .= "<div class='review'>";
      $reviewOutput .= "<p><strong>User:</strong> {$user}</p>";
      $reviewOutput .= "<p><strong>Rating:</strong> {$rating}</p>";
      $reviewOutput .= "<p>{$comment}</p>";
      $reviewOutput .= "</div>";
    }
  }

  $reviewOutput .= "</div>"; // Close reviews-container

  return $reviewOutput;
}


// Example Usage:
// Sample Reviews Data (replace with your database or other data source)
$product = "Awesome Gadget";
$reviewsData = [
  [
    'user' => 'Alice',
    'rating' => 5,
    'comment' => 'This gadget is amazing!  I love it.'
  ],
  [
    'user' => 'Bob',
    'rating' => 4,
    'comment' => 'Pretty good, but the battery life could be better.'
  ],
  [
    'user' => 'Charlie',
    'rating' => 3,
    'comment' => 'It's okay.  Not as impressive as I hoped.'
  ]
];

// Call the function to generate the HTML output
$reviewHtml = displayUserReviews($product, $reviewsData);

// Output the HTML to the browser or display it in a PHP file
echo $reviewHtml;

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the reviewer.
 * @return array An array containing the review data and a success/failure status.
 */
function createAndDisplayReview(string $productName, string $reviewText, string $reviewerName) {
    // Input Validation - This is crucial for security and data integrity
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => null];
    }
    if (empty($reviewerName)) {
        return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'review' => null];
    }

    //  You'll typically store reviews in a database here, but for this example, we'll
    //  simulate storing them in an array.
    $reviews = []; //  This is a placeholder -  in a real application, you'd use a database.

    // Create the review data
    $review = [
        'product_name' => $productName,
        'reviewer_name' => $reviewerName,
        'review_text' => $reviewText,
        'created_at' => date('Y-m-d H:i:s') // Add a timestamp for organization
    ];

    // Add the review to the array (simulating database insertion)
    $reviews[] = $review;


    // Return the review data and a success status
    return ['success' => true, 'review' => $review, 'message' => 'Review submitted successfully!'];
}


/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product or service.
 *
 * @param string $productName The name of the product or service for which to display reviews.
 * @return array An array containing the reviews and a success/failure status.
 */
function displayReviews(string $productName) {
    // Simulate retrieving reviews from a database.  Replace this with your database query.
    // For demonstration, we'll return some pre-defined reviews.

    if ($productName === 'Awesome Product') {
        $reviews = [
            ['product_name' => 'Awesome Product', 'reviewer_name' => 'John Doe', 'review_text' => 'This product is amazing!  I highly recommend it.', 'created_at' => '2023-10-27 10:00:00'],
            ['product_name' => 'Awesome Product', 'reviewer_name' => 'Jane Smith', 'review_text' => 'Great value for the price.', 'created_at' => '2023-10-26 14:30:00'],
        ];
    } else {
        $reviews = [];  // No reviews for this product.
    }

    return ['success' => true, 'reviews' => $reviews, 'message' => 'Reviews loaded successfully!'];
}



// --- Example Usage ---

// 1. Create a Review
$reviewResult = createAndDisplayReview('Awesome Product', 'This is a fantastic product!', 'Alice Brown');

if ($reviewResult['success']) {
    echo "Review created successfully: " . $reviewResult['message'] . PHP_EOL;
    print_r($reviewResult['review']); // Display the newly created review
} else {
    echo "Error creating review: " . $reviewResult['message'] . PHP_EOL;
}


// 2. Display Reviews for the same product
$displayResult = displayReviews('Awesome Product');

if ($displayResult['success']) {
    echo "Reviews for Awesome Product:" . PHP_EOL;
    print_r($displayResult['reviews']);
} else {
    echo "Error loading reviews: " . $displayResult['message'] . PHP_EOL;
}



?>


<?php

/**
 * User Review Function - A simple example.
 *
 * This function takes a user's review, rating, and optionally, their ID.
 * It validates the inputs and returns a formatted review string.
 *
 * @param string $review The user's review text.
 * @param int    $rating The user's rating (e.g., 1-5).
 * @param string|int $userId The user's ID (optional).  Defaults to a generic ID.
 *
 * @return string A formatted review string, or an error message if validation fails.
 */
function create_review(string $review, int $rating, $userId = null) {
    // Input validation - Essential for security and data integrity
    if (empty($review)) {
        return "Error: Review cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Optional user ID handling
    if ($userId === null) {
        $userId = "Anonymous User";
    } elseif (!is_numeric($userId)) {
        return "Error: User ID must be a number or a valid user ID.";
    }

    // Build the review string
    $review_string = "Review by: " . $userId . "
";
    $review_string .= "Rating: " . $rating . "/5
";
    $review_string .= $review . "
";
    $review_string .= "---"; // Separator

    return $review_string;
}

// --- Example Usage ---

// Example 1:  Basic review
$review1 = create_review("This product is amazing!  I highly recommend it.", 5, 123);
echo $review1 . "

";

// Example 2: Review with a different user ID
$review2 = create_review("Great value for the money.", 4, "user456");
echo $review2 . "

";

// Example 3:  Invalid rating
$review3 = create_review("It could be better...", 0);
echo $review3 . "

";

// Example 4: Empty review
$review4 = create_review("", 3);
echo $review4 . "

";

// Example 5:  Using a numeric user ID
$review5 = create_review("The instructions were unclear.", 2, 9876543);
echo $review5 . "

";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic input validation and error handling.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @param string $db_connection A valid database connection object.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $product_id, string $username, string $rating, string $comment, PDO $db_connection) {
  // Input Validation -  Crucial for security and data integrity
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review."); // Log for debugging - prevent info display
    return false;
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    error_log("Error: Invalid username - only alphanumeric characters and underscores allowed.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating - must be between 1 and 5.");
    return false;
  }
  
  // Sanitize inputs -  Important!  Prevent SQL injection
  $product_id = $db_connection->quote($product_id);
  $username = $db_connection->quote($username);
  $rating = (int)$rating;  //Cast to integer to ensure proper storage
  $comment = $db_connection->quote($comment);

  // SQL Query -  Use prepared statements to prevent SQL injection
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
  $stmt = $db_connection->prepare($sql);

  if ($stmt->execute([
    ':product_id' => $product_id,
    ':username' => $username,
    ':rating' => $rating,
    ':comment' => $comment
  ]) === false) {
    error_log("Error: Failed to insert review: " . print_r($stmt->errorInfo(), true)); //Detailed error logging
    return false;
  }

  return true; // Success
}



/**
 * Displays a list of user reviews for a product.
 *
 * @param PDO $db_connection A valid database connection object.
 * @param int $product_id The ID of the product to retrieve reviews for.
 */
function displayUserReviews(PDO $db_connection, int $product_id) {
  // Query to get reviews for a product
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db_connection->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
    echo "<table>";
    echo "<thead><tr><th>Username</th><th>Rating</th><th>Comment</th></tr></thead>";
    echo "<tbody>";
    foreach ($reviews as $review) {
      echo "<tr>";
      echo "<td>" . htmlspecialchars($review['username']) . "</td>";  // Escape output for security
      echo "<td>" . $review['rating'] . "</td>";
      echo "<td>" . htmlspecialchars($review['comment']) . "</td>";
      echo "</tr>";
    }
    echo "</tbody>";
    echo "</table>";
  }
}

// Example Usage (Illustrative - Replace with your database setup)

// Create a dummy PDO connection (replace with your actual connection)
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example Product ID
$product_id = 123;

// Simulate a user review submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $username = $_POST["username"];
  $rating = $_POST["rating"];
  $comment = $_POST["comment"];

  if (storeUserReview($product_id, $username, $rating, $comment, $db_connection)) {
    echo "<p>Review submitted successfully!</p>";
  } else {
    echo "<p>Error submitting review.</p>";
  }
}

//Display reviews for the product
displayUserReviews($db_connection, $product_id);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic CRUD (Create, Read, Update, Delete) operations 
 * for a simple review system.
 *
 * Assumptions:
 * - You'll likely want to store these reviews in a database.  This example uses a simple
 *   array for demonstration purposes.
 * - This is a simplified example and doesn't include full error handling, validation,
 *   or security measures (e.g., preventing SQL injection).  You should implement
 *   robust error handling and security in a production environment.
 *
 * @param string $reviewText - The text of the review.
 * @param int    $rating     - The rating given for the review (e.g., 1-5).
 * @param int    $productId  - The ID of the product this review is for.
 * @param int    $userId     - The ID of the user who wrote the review (optional, for tracking).
 *
 * @return array|false - Returns an array containing the review ID, timestamp, text, rating, 
 *                       and user ID if successful.  Returns false on failure.
 */
function createReview(string $reviewText, int $rating, int $productId, int $userId = null) {
    // Basic validation (add more robust validation in a real application)
    if (empty($reviewText) || $rating < 1 || $rating > 5) {
        return false;
    }

    // Generate a unique ID (consider a better method for real applications)
    $reviewId = time();

    // Store the review (replace with database insertion in a real application)
    $review = [
        'id' => $reviewId,
        'timestamp' => time(),
        'text' => $reviewText,
        'rating' => $rating,
        'userId' => $userId,
    ];

    // Simulate storing in a database.  This is just for example.
    // In a real application, you'd use a database query.
    // $result = db_insert('reviews', $review); 

    //Simulate database insertion success.
    return $review;
}

/**
 * Reads a review by its ID.
 *
 * @param int $reviewId - The ID of the review to retrieve.
 *
 * @return array|null - Returns the review data if found, otherwise null.
 */
function readReview(int $reviewId) {
    // Example data (replace with database query)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    foreach ($reviews as $review) {
        if ($review['id'] == $reviewId) {
            return $review;
        }
    }

    return null; // Review not found
}


/**
 * Updates a review by its ID.
 *
 * @param int $reviewId - The ID of the review to update.
 * @param string $newReviewText - The new text of the review.
 * @param int    $newRating     - The new rating for the review.
 *
 * @return bool - True if the update was successful, false otherwise.
 */
function updateReview(int $reviewId, string $newReviewText, int $newRating) {
    //Basic validation -  add more specific validation based on your needs.
    if (empty($newReviewText) || $newRating < 1 || $newRating > 5) {
        return false;
    }
    
    // In a real application, you would retrieve the existing review from the database
    // and then update it.  This example simulates the update.
    
    // Find the review (simulate database lookup)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    $index = -1;
    for ($i = 0; $i < count($reviews); $i++) {
        if ($reviews[$i]['id'] == $reviewId) {
            $index = $i;
            break;
        }
    }

    if ($index === -1) {
        return false; // Review not found
    }
    
    $reviews[$index]['text'] = $newReviewText;
    $reviews[$index]['rating'] = $newRating;

    return true;
}


/**
 * Deletes a review by its ID.
 *
 * @param int $reviewId - The ID of the review to delete.
 *
 * @return bool - True if the delete was successful, false otherwise.
 */
function deleteReview(int $reviewId) {
    // In a real application, you would query the database to delete the review.
    // This example simulates the delete.

    // Find the review (simulate database lookup)
    $reviews = [
        ['id' => 1, 'timestamp' => 1678886400, 'text' => 'Great product!', 'rating' => 5, 'userId' => 101],
        ['id' => 2, 'timestamp' => 1678972800, 'text' => 'Okay product.', 'rating' => 3, 'userId' => 102],
    ];

    $index = -1;
    for ($i = 0; $i < count($reviews); $i++) {
        if ($reviews[$i]['id'] == $reviewId) {
            $index = $i;
            break;
        }
    }

    if ($index === -1) {
        return false; // Review not found
    }

    unset($reviews[$index]);

    return true;
}



// Example Usage:
// Create a review
$newReview = createReview("This is an amazing product!", 5, 1);
if ($newReview) {
    echo "Review created with ID: " . $newReview['id'] . "
";
} else {
    echo "Failed to create review.
";
}

// Read the review
$review = readReview(1);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Update the review
if (updateReview(1, "This is even better!", 6)) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Read the updated review
$updatedReview = readReview(1);
if ($updatedReview) {
    echo "Updated Review:
";
    print_r($updatedReview);
}

// Delete the review
if (deleteReview(1)) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

//Try to read a deleted review
$deletedReview = readReview(1);
if ($deletedReview) {
    echo "Deleted Review:
";
    print_r($deletedReview);
}
else {
    echo "Review not found (as expected). 
";
}
?>


<?php

/**
 * This function creates a user review object based on input data.
 * 
 * @param string $username The name of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's written comment.
 * 
 * @return Review|null A Review object if the input is valid, null otherwise.
 */
class Review
{
    public string $username;
    public int $rating;
    public string $comment;

    public function __construct(string $username, int $rating, string $comment)
    {
        // Validate input - crucial for security and data integrity
        if (empty($username)) {
            throw new InvalidArgumentException("Username cannot be empty.");
        }
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
        }
        if (empty($comment)) {
            throw new InvalidArgumentException("Comment cannot be empty.");
        }

        $this->username = $username;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}


/**
 *  Creates a user review using the Review class.
 *
 * @param array $reviewData An associative array containing the review data.
 *  - 'username' => 'User Name'
 *  - 'rating'  => 'Rating (1-5)'
 *  - 'comment' => 'Review Comment'
 *
 * @return Review|null  A Review object if the data is valid, null otherwise.
 */
function createReview(array $reviewData)
{
    try {
        // Validate that required keys are present
        if (!isset($reviewData['username'], $reviewData['rating'], $reviewData['comment'])) {
            throw new InvalidArgumentException("Missing required review data.");
        }

        //  Type validation and data casting
        $username = trim($reviewData['username']);
        $rating = (int) $reviewData['rating']; // Cast to integer
        $comment = trim($reviewData['comment']); //Trim whitespace

        return new Review($username, $rating, $comment);

    } catch (InvalidArgumentException $e) {
        // Handle exceptions (e.g., log the error, return null, display an error message)
        error_log("Review creation failed: " . $e->getMessage()); // Log the error.  Important for debugging.
        return null;
    }
}

// Example Usage:

// Valid Review
$reviewData = [
    'username' => 'JohnDoe',
    'rating' => 4,
    'comment' => 'Great product!  Easy to use.'
];

$review = createReview($reviewData);

if ($review) {
    echo "Review created successfully:
";
    echo "Username: " . $review->username . "
";
    echo "Rating: " . $review->rating . "
";
    echo "Comment: " . $review->comment . "
";
} else {
    echo "Review creation failed.
";
}


// Invalid Review Examples:
$invalidData1 = [
    'username' => '',
    'rating' => 6,
    'comment' => 'This is a test.'
];

$review2 = createReview($invalidData1);
if (!$review2) {
    echo "Invalid review data detected (example 1).
";
}

$invalidData2 = [
    'username' => 'JaneSmith',
    'rating' => '5', // String instead of integer
    'comment' => ''
];

$review3 = createReview($invalidData2);
if (!$review3) {
    echo "Invalid review data detected (example 2).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param string $username The user's name.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects.
 *   - 'totalReviews': The total number of reviews.
 *   - 'success': True if the review was added successfully, false otherwise.
 *   - 'message':  A message describing the outcome of the operation.
 */
function addReview(string $productId, string $rating, string $comment, string $username): array
{
    // Validate input (important for security and data integrity)
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'reviews' => [],
            'totalReviews' => 0,
            'success' => false,
            'message' => "Invalid rating. Rating must be a number between 1 and 5."
        ];
    }

    if (empty($comment)) {
        return [
            'reviews' => [],
            'totalReviews' => 0,
            'success' => false,
            'message' => "Comment cannot be empty."
        ];
    }


    // In a real application, you'd save this data to a database.
    // This is a placeholder for demonstration purposes.

    $review = [
        'productId' => $productId,
        'rating' => $rating,
        'comment' => $comment,
        'username' => $username,
        'timestamp' => time() // Add timestamp for tracking
    ];

    // Add the review to a simple array (replace with database insertion)
    $reviews = getReviewsByProduct($productId);  // Placeholder function to get existing reviews
    $reviews[] = $review;

    //  In a real application, you would sanitize and validate $review data before saving it.

    return [
        'reviews' => $reviews,
        'totalReviews' => count($reviews),
        'success' => true,
        'message' => "Review submitted successfully!"
    ];
}

/**
 * Placeholder function to get reviews by product ID
 * Replace this with actual database retrieval
 *
 * @param string $productId The product ID.
 * @return array An array of review objects.
 */
function getReviewsByProduct(string $productId): array
{
    // In a real implementation, this would fetch data from a database.
    // For demonstration, let's return a static array.
    if ($productId === '123') {
        return [
            [
                'productId' => '123',
                'rating' => 4,
                'comment' => 'Great product!',
                'username' => 'JohnDoe',
                'timestamp' => time()
            ],
            [
                'productId' => '123',
                'rating' => 5,
                'comment' => 'Excellent value for money.',
                'username' => 'JaneSmith',
                'timestamp' => time()
            ]
        ];
    }
    return [];
}


// Example Usage:
$product_id = '123';
$rating = 4;
$comment = 'This is a fantastic product!';
$username = 'TestUser';

$result = addReview($product_id, $rating, $comment, $username);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    echo "Total Reviews: " . $result['totalReviews'] . "<br>";
    echo "Reviews: ";
    foreach ($result['reviews'] as $review) {
        echo "- " . $review['username'] . ": " . $review['comment'] . " (Rating: " . $review['rating'] . ")" . "<br>";
    }
} else {
    echo "Error: " . $result['message'] . "<br>";
}

// Example of invalid input:
$result = addReview($product_id, 6, 'Bad rating', 'Invalid User');

if (!$result['success']) {
    echo "Error: " . $result['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier of the product or item.
 * @param string $reviewText The review text submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a default user ID will be used.
 * @return array An array containing:
 *   - 'success': True if the review was successfully added, False otherwise.
 *   - 'reviewId': The ID of the newly created review (if successful), or null.
 *   - 'message': A user-friendly message indicating the outcome.
 */
function createAndDisplayReview(string $productId, string $reviewText, int $userId = null): array
{
    // Validate input (add more validation as needed)
    if (empty($productId)) {
        return [
            'success' => false,
            'reviewId' => null,
            'message' => 'Product ID cannot be empty.'
        ];
    }
    if (empty($reviewText)) {
        return [
            'success' => false,
            'reviewId' => null,
            'message' => 'Review text cannot be empty.'
        ];
    }


    //  Simulate database insertion (replace with your actual database interaction)
    $reviewId = generateUniqueId(); //  Function to generate a unique ID (see below)

    //  Simulate saving the review to a database
    $reviewData = [
        'product_id' => $productId,
        'user_id' => $userId,
        'review_text' => $reviewText,
        'created_at' => date('Y-m-d H:i:s')
    ];

    //  For demonstration, let's store it in an array.  Replace this with your database operation
    $reviews =  isset($_SESSION['reviews']) ? $_SESSION['reviews'] : [];
    $reviews[$reviewId] = $reviewData;
    $_SESSION['reviews'] = $reviews;  // Use session storage for demonstration

    return [
        'success' => true,
        'reviewId' => $reviewId,
        'message' => 'Review submitted successfully!'
    ];
}


/**
 * Function to generate a unique ID.
 * (Replace with a more robust ID generation method in a real application)
 * @return string A unique string ID.
 */
function generateUniqueId(): string
{
    return bin2hex(random_bytes(16)); // Creates a cryptographically secure random string.
}


//  Example Usage (Simulated)
/*
$result = createAndDisplayReview('product_123', 'This is a fantastic product!');

if ($result['success']) {
    echo "Review submitted successfully!  Review ID: " . $result['reviewId'] . "<br>";
    echo "Message: " . $result['message'] . "<br>";
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}
*/



// Example HTML form to submit a review (Illustrative - needs adaptation)
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review Form</title>
</head>
<body>

    <h1>Submit a Review</h1>

    <form method="POST" action="">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id" required><br><br>

        <label for="review_text">Review Text:</label><br>
        <textarea id="review_text" name="review_text" rows="4" cols="50" required></textarea><br><br>

        <button type="submit">Submit Review</button>
    </form>

    <?php
    if(isset($_POST['product_id']) && isset($_POST['review_text'])) {
        $productId = $_POST['product_id'];
        $reviewText = $_POST['review_text'];

        $result = createAndDisplayReview($productId, $reviewText);

        if ($result['success']) {
            echo "<p>Review submitted successfully!  Review ID: " . $result['reviewId'] . "</p>";
        } else {
            echo "<p>Error submitting review: " . $result['message'] . "</p>";
        }
    }

    ?>

</body>
</html>


<?php

/**
 * Function to process and display user reviews.
 *
 * @param array $reviews An array of review objects. Each object should have:
 *                       - id (int): Unique identifier for the review.
 *                       - user (string):  Username of the reviewer.
 *                       - rating (int):  Rating from 1 to 5.
 *                       - comment (string):  The text of the review.
 *                       - date (string):  Date of the review in a format you choose (e.g., 'Y-m-d').
 *
 * @return void Displays the reviews in an HTML table.  Optionally, you can
 *              customize the output (e.g., save to database, send email).
 */
function displayUserReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews found.</p>";
    return;
  }

  echo "<table border='1'>";
  echo "<thead><tr><th>ID</th><th>User</th><th>Rating</th><th>Comment</th><th>Date</th></tr></thead>";
  echo "<tbody>";

  foreach ($reviews as $review) {
    echo "<tr>";
    echo "<td>" . $review['id'] . "</td>";
    echo "<td>" . $review['user'] . "</td>";
    echo "<td>" . $review['rating'] . "</td>";
    echo "<td>" . $review['comment'] . "</td>";
    echo "<td>" . $review['date'] . "</td>";
    echo "</tr>";
  }

  echo "</tbody></table>";
}


/**
 * Example usage (demonstration purposes)
 */

// Sample Review Data (replace with your actual data source)
$reviews = [
  [
    'id' => 1,
    'user' => 'JohnDoe',
    'rating' => 5,
    'comment' => 'Excellent product!  Highly recommend.',
    'date' => '2023-10-27'
  ],
  [
    'id' => 2,
    'user' => 'JaneSmith',
    'rating' => 4,
    'comment' => 'Good quality, a bit pricey.',
    'date' => '2023-10-26'
  ],
  [
    'id' => 3,
    'user' => 'PeterJones',
    'rating' => 3,
    'comment' => 'It was okay.  Could be better.',
    'date' => '2023-10-25'
  ]
];

// Call the function to display the reviews
displayUserReviews($reviews);



/**
 *  Further Development Ideas:
 *
 *  - **Data Source:**  Connect to a database (MySQL, PostgreSQL, etc.) to store reviews persistently.
 *  - **Input Validation:**  Add input validation to ensure that the 'rating' is within the expected range (1-5).
 *  - **Error Handling:** Implement robust error handling to catch potential issues (e.g., database connection errors).
 *  - **Sorting/Filtering:** Add functionality to sort reviews by date, rating, or user.  Allow filtering by rating range.
 *  - **Pagination:** If you have many reviews, implement pagination to display them in chunks.
 *  - **Security:**  Sanitize user input to prevent cross-site scripting (XSS) vulnerabilities.  Use prepared statements to prevent SQL injection.
 *  - **User Interface:**  Create a user-friendly web interface for submitting reviews.
 */
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (e.g., 1-5).
 * @param string $db_connection A database connection object.  This is crucial!
 *
 * @return bool True on success, false on failure (e.g., database connection error).
 */
function store_user_review(string $item_id, string $user_name, string $review_text, int $rating, object $db_connection) {
    // Sanitize and validate inputs -  VERY IMPORTANT!
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING); // Remove potentially harmful characters
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);
    $rating = intval($rating); // Ensure rating is an integer.  Important for database safety.

    if (empty($item_id) || empty($user_name) || empty($review_text)) {
        error_log("Missing review data.  item_id: " . $item_id . ", user_name: " . $user_name . ", review_text: " . $review_text);
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating provided. Rating: " . $rating);
        return false;
    }


    // Prepare the SQL statement - Use prepared statements to prevent SQL injection!
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
            VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sss", $item_id, $user_name, $review_text);

    // Execute the statement
    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error inserting review: " . $stmt->error);
        return false;
    }

    // Close the statement and connection (good practice)
    $stmt->close();
    // $db_connection->close(); // Don't close the connection here.  Keep it open for other requests.
}


/**
 * Function to display all reviews for a given item
 *
 * @param string $item_id The item ID.
 * @param object $db_connection  A database connection object.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews(string $item_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db_connection->prepare($sql);
    $stmt->bind_param("s", $item_id);
    $stmt->execute();

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}



// --- Example Usage (replace with your actual database connection) ---
// Create a dummy database connection (for demonstration only)
class MockDBConnection {
    public function __construct() {}

    public function prepare(string $sql) {
        // Simulate prepare function.  In a real application, this would use PDO or MySQLi.
        // In this example, we don't actually prepare the query; just return a dummy object.
        return new MockStatement();
    }

    public function execute() {
        return new MockResult();
    }

    public function __destruct() {}
}

class MockStatement {
  public function __construct() {}
}

class MockResult {
  public function get_result() {
      return new MockRow();
  }
}

class MockRow {
    public $data = [
        'item_id' => 'item123',
        'user_name' => 'John Doe',
        'review_text' => 'Great product!',
        'rating' => 5
    ];

    public function fetch_assoc() {
        return $this;
    }
}

$db_connection = new MockDBConnection();

// Store a review
$item_id = 'item123';
$user_name = 'Jane Smith';
$review_text = 'Excellent value for money.';
$rating = 4;

if (store_user_review($item_id, $user_name, $review_text, $rating, $db_connection)) {
    echo "Review submitted successfully!
";
} else {
    echo "Failed to submit review.
";
}

// Get and display reviews
$reviews = get_reviews($item_id, $db_connection);

if (!empty($reviews)) {
    echo "Reviews for " . $item_id . ":
";
    foreach ($reviews as $review) {
        echo "  User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review_text'] . "
";
    }
} else {
    echo "No reviews found for " . $item_id . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to handle user reviews, including saving them to a database
 * or other storage method.  It includes basic validation and error handling.
 *
 * @param string $username       The name of the user submitting the review.
 * @param string $review_text    The text of the review.
 * @param string $product_id     The ID of the product the review is for.
 * @param string $rating         The rating (e.g., 1-5).
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $username, string $review_text, string $product_id, string $rating): bool
{
    // **Input Validation (Important!)**
    if (empty($username)) {
        error_log("Invalid username provided.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Review text cannot be empty.");
        return false;
    }
    if (empty($product_id)) {
        error_log("Product ID cannot be empty.");
        return false;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating.  Please enter a number between 1 and 5.");
        return false;
    }

    // **Here's where you would connect to your database and save the review.**
    // This is a simplified example using a hypothetical 'reviews' table.
    // Adapt this to your database schema and technology.

    try {
        // Database connection (replace with your actual connection details)
        // $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

        // Assuming you have a 'reviews' table with columns:
        // - id (INT, PRIMARY KEY, AUTO_INCREMENT)
        // - username (VARCHAR)
        // - product_id (INT)
        // - review_text (TEXT)
        // - rating (INT)
        // - created_at (TIMESTAMP)

        $db = new PDO("mysql:host=localhost;dbname=reviews_db", "user", "password");

        // Prepare the SQL statement
        $stmt = $db->prepare(
            "INSERT INTO reviews (username, product_id, review_text, rating, created_at)
             VALUES (:username, :product_id, :review_text, :rating, NOW())"
        );

        // Bind the parameters
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        return true; // Review saved successfully

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Error saving review
    }
}


// **Example Usage:**
$username = "JohnDoe";
$reviewText = "This product is amazing!  I highly recommend it.";
$productId = 123;
$rating = 5;

if (saveUserReview($username, $reviewText, $productId, $rating)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

?>


<?php

/**
 * Function to create and display a user review.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return string The HTML for the review.
 */
function createReview(string $username, string $rating, string $comment)
{
    // Input Validation (Basic - Expand this for production)
    if (empty($username) || empty($rating) || empty($comment)) {
        return "<p class='error'>Please fill in all fields.</p>";
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return "<p class='error'>Rating must be a number between 1 and 5.</p>";
    }

    // Create the review HTML
    $review_html = "<div class='review'>";
    $review_html .= "<div class='review-header'>";
    $review_html .= "<span class='review-username'>" . htmlspecialchars($username) . "</span>";  // Escape for security
    $review_html .= "<span class='review-rating'> - " . $rating . "</span>";
    $review_html .= "</div>";
    $review_html .= "<div class='review-content'>" . htmlspecialchars($comment) . "</div>";
    $review_html .= "</div>";

    return $review_html;
}


/**
 * Example usage and demonstrating how to use the function
 *
 */

// Example data
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

// Create the review
$review = createReview($username, $rating, $comment);

// Output the review (for demonstration)
echo $review;


// Example with invalid input:
$invalid_rating = 0;
$invalid_comment = "";

$invalid_review = createReview("JaneSmith", $invalid_rating, $invalid_comment);
echo $invalid_review;
?>


<?php

/**
 * Class ReviewManager
 *
 * Manages user reviews for a product or item.
 *
 * Attributes:
 *   - $reviews:  An array to store the reviews.
 *   - $productId: The ID of the product being reviewed.
 */
class ReviewManager
{
    private $reviews = [];
    private $productId;

    /**
     * Constructor
     *
     * Initializes the ReviewManager with a product ID.
     *
     * @param int $productId The ID of the product being reviewed.
     */
    public function __construct(int $productId)
    {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $reviewerName, string $comment): bool
    {
        $reviewId = count($this->reviews) + 1; // Simple review ID generation
        $this->reviews[$reviewId] = [
            'reviewer' => $reviewerName,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];
        return true;
    }

    /**
     * Get all reviews for the product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId): ?array
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Calculate the average rating for the product.
     *
     * @return float|null The average rating, or null if there are no reviews.
     */
    public function calculateAverageRating(): ?float
    {
        $totalRating = 0;
        $reviewCount = count($this->reviews);

        if ($reviewCount > 0) {
            foreach ($this->reviews as $review) {
                // Assume a rating scale from 1 to 5.  Adapt as needed.
                $totalRating += 3; // Example rating: 1-5
            }
            return (float) ($totalRating / $reviewCount);
        }
        return null;
    }
}

// --- Example Usage ---

// Create a ReviewManager for a product with ID 123
$reviewManager = new ReviewManager(123);

// Add some reviews
$reviewManager->addReview('Alice', 'Great product!  I loved it.');
$reviewManager->addReview('Bob', 'Could be better, but overall good.');
$reviewManager->addReview('Charlie', 'Excellent value for the price.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$review1 = $reviewManager->getReviewById(2);
echo "
Review 2:
";
print_r($review1);

// Calculate the average rating
$averageRating = $reviewManager->calculateAverageRating();
echo "
Average Rating: " . ($averageRating === null ? 'N/A' : $averageRating) . "
";


// Example with no reviews
$noReviewsManager = new ReviewManager(456);
$averageRatingNoReviews = $noReviewsManager->calculateAverageRating();
echo "
Average Rating (no reviews): " . ($averageRatingNoReviews === null ? 'N/A' : $averageRatingNoReviews) . "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and display user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the user submitting the review.
 * @param array  $reviews An array to store reviews. If not provided, an empty array will be created.
 *
 * @return array An array containing all collected reviews.  Returns an empty array on error.
 */
function create_review(string $productName, string $reviewText, string $reviewerName, array &$reviews = []) {

  // Input validation - basic checks
  if (empty($productName) || empty($reviewText) || empty($reviewerName)) {
    error_log("Error: Product name, review text, and reviewer name cannot be empty."); // Log the error for debugging.
    return []; // Return an empty array to indicate an error
  }

  // Create the review object
  $review = [
    'product' => $productName,
    'reviewer' => $reviewerName,
    'date' => date('Y-m-d H:i:s'), // Add a timestamp for reference
    'text' => $reviewText
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display a single review
 *
 * @param array $review A single review object.
 */
function display_review(array $review) {
  echo "<p><strong>Product:</strong> " . htmlspecialchars($review['product']) . "</p>";
  echo "<p><strong>Reviewer:</strong> " . htmlspecialchars($review['reviewer']) . "</p>";
  echo "<p><strong>Date:</strong> " . htmlspecialchars($review['date']) . "</p>";
  echo "<p><strong>Review Text:</strong> " . htmlspecialchars($review['text']) . "</p>";
  echo "<hr>";
}


/**
 * Function to display all reviews
 *
 * @param array $reviews An array of review objects.
 */
function display_all_reviews(array $reviews) {
  echo "<h2>User Reviews for " . htmlspecialchars($reviews[0]['product']) . "</h2>"; // Display the product name.
  foreach ($reviews as $review) {
    display_review($review);
  }
}

// --- Example Usage ---

// Initialize the reviews array
$reviews = [];

// Create some reviews
$reviews = create_review("Awesome Widget", "This widget is fantastic! It does everything I need and more.", "John Doe");
$reviews = create_review("Super Gadget", "The gadget is amazing and so easy to use.", "Jane Smith");
$reviews = create_review("Mega Device", "Great value for money. Highly recommended!", "Peter Jones");

// Display all reviews
display_all_reviews($reviews);

?>


<?php

/**
 * Reviews Class - Handles user reviews.
 */
class Reviews {

  private $reviews = []; // Stores all reviews
  private $dbConnection = null; // Connection to the database (for persistence)

  /**
   * Constructor
   *
   * Establishes the database connection (if available).
   */
  public function __construct($dbConfig = null) {
    // Attempt to connect to the database (e.g., MySQL, PostgreSQL)
    // You'll need to adapt this part to your specific database setup.
    if ($dbConfig) {
      $this->dbConnection = new PDO(
        "mysql:host=" . $dbConfig['host'] . ";dbname=" . $dbConfig['dbname'] . ";charset=utf8",
        $dbConfig['user'],
        $dbConfig['password']
      );
    }
  }


  /**
   * Add a new review
   *
   * @param int $productId The ID of the product the review is for.
   * @param string $userName The name of the user who wrote the review.
   * @param string $reviewText The text of the review.
   * @param int $rating The rating (e.g., 1-5).
   *
   * @return bool True on success, false on failure.
   */
  public function addReview(int $productId, string $userName, string $reviewText, int $rating) {
    // Basic validation
    if (!$productId || !$userName || !$reviewText || $rating < 1 || $rating > 5) {
      return false;
    }

    $review = [
      'productId' => $productId,
      'userName' => $userName,
      'reviewText' => $reviewText,
      'rating' => $rating,
      'createdAt' => date('Y-m-d H:i:s') // Timestamp for creation
    ];

    $this->reviews[] = $review;

    // Optionally save to database here
    if ($this->dbConnection) {
      $this->saveReviewToDatabase($review);
    }
    return true;
  }

  /**
   * Get all reviews for a product
   *
   * @param int $productId The ID of the product.
   *
   * @return array An array of reviews, or an empty array if none found.
   */
  public function getReviewsByProduct(int $productId) {
    $productReviews = [];
    foreach ($this->reviews as $review) {
      if ($review['productId'] == $productId) {
        $productReviews[] = $review;
      }
    }
    return $productReviews;
  }

  /**
   * Save review to database (using PDO)
   */
  private function saveReviewToDatabase(array $review) {
    $sql = "INSERT INTO reviews (productId, userName, reviewText, rating, createdAt)
            VALUES (:productId, :userName, :reviewText, :rating, :createdAt)";

    $stmt = $this->dbConnection->prepare($sql);
    $stmt->bindParam(':productId', $review['productId']);
    $stmt->bindParam(':userName', $review['userName']);
    $stmt->bindParam(':reviewText', $review['reviewText']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':createdAt', $review['createdAt']);

    try {
      $stmt->execute();
    } catch (PDOException $e) {
      // Handle database errors appropriately (logging, display error message)
      error_log("Database error saving review: " . $e->getMessage()); //Log for debugging
      // Optionally display an error message to the user (if appropriate)
    }
  }
}


// Example Usage:
// Assuming you have a database setup and a table named 'reviews'
// with columns: productId (int), userName (string), reviewText (text), rating (int), createdAt (datetime)

// Initialize Reviews object (replace with your database config)
$reviews = new Reviews([
  'host' => 'localhost',
  'dbname' => 'your_database_name',
  'user' => 'your_database_user',
  'password' => 'your_database_password'
]);

// Add a review
if ($reviews->addReview(123, "John Doe", "Great product!", 5)) {
  echo "Review added successfully!";
} else {
  echo "Failed to add review.";
}

// Get reviews for product 123
$reviewsForProduct123 = $reviews->getReviewsByProduct(123);

// Display the reviews
echo "<pre>";
print_r($reviewsForProduct123);
echo "</pre>";


?>


<?php

/**
 * User Review Function - A simplified example
 *
 * This function allows you to add a new user review to a product.
 * It includes basic validation and saves the review to a file.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param string $filename  The name of the file to save the review in.  Default is 'reviews.txt'
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function addReview(string $productId, string $userName, string $reviewText, string $filename = 'reviews.txt'): bool
{
  // **Input Validation** - VERY IMPORTANT!
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); //Log the error - useful for debugging
    return false;
  }

  if (empty($userName)) {
    error_log("Error: User name cannot be empty.");
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return false;
  }

  // Sanitize input to prevent basic attacks.  This is a basic example,
  // more robust sanitization might be needed for production.
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText); // Protects against XSS attacks

  // **Save the Review**
  $reviewData = "Product ID: " . $productId . "
";
  $reviewData .= "User: " . $userName . "
";
  $reviewData .= "Review: " . $reviewData . "
";

  $file = fopen($filename, 'a'); // 'a' for append mode

  if ($file) {
    fwrite($file, $reviewData);
    fclose($file);
    return true;
  } else {
    error_log("Error: Could not open file for writing.");
    return false;
  }
}


// **Example Usage**

// Add a review
$productID = "123";
$userName = "John Doe";
$reviewText = "This product is amazing! I highly recommend it.";

if (addReview($productID, $userName, $reviewText)) {
  echo "Review added successfully!
";
} else {
  echo "Failed to add review.
";
}


// Another example:
$productID = "456";
$userName = "Jane Smith";
$reviewText = "Good product, but could be improved.";

if (addReview($productID, $userName, $reviewText, 'product_reviews.txt')) {
  echo "Review added successfully to product_reviews.txt!
";
} else {
  echo "Failed to add review.
";
}

?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows you to process user reviews, storing them in a database
 * or an array for later use.  It handles data validation and basic formatting.
 *
 * @param string $username  The username of the user submitting the review.
 * @param string $rating  The rating provided by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param string $review_id (Optional)  Unique identifier for the review.
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function process_review(string $username, string $rating, string $comment, string $review_id = "") {
  // 1. Validation
  if (empty($username)) {
    return "Error: Username cannot be empty.";
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  if (empty($comment)) {
    return "Error: Comment cannot be empty.";
  }

  // 2. Data Formatting (Optional - Adapt to your needs)
  $formatted_rating = (int)$rating;  // Convert rating to integer
  $formatted_comment = trim($comment); // Remove leading/trailing whitespace

  // 3. Data Storage (Example:  Storing in an array - Adapt to your database logic)
  $review = [
    'username' => $username,
    'rating' => $formatted_rating,
    'comment' => $formatted_comment,
    'timestamp' => time(), // Add a timestamp for tracking
    'review_id' => $review_id
  ];

  //  Store the review data (example:  print to the console for demonstration)
  //  In a real application, you would insert this into a database
  //  using a database query.
  echo "Review received from: " . $username . "
";
  echo "Rating: " . $formatted_rating . "
";
  echo "Comment: " . $formatted_comment . "
";
  echo "Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "
";

  return true; // Indicate success
}

// Example Usage:
$result = process_review("JohnDoe", 4, "Great product!  I really liked it.", "review_123");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
"; // Display the error message
}


$result = process_review("JaneSmith", 2, "Okay, but could be better.", "review_456");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
";
}

$result = process_review("TestUser", 6, "Invalid rating", "review_789");
if ($result === true) {
  echo "Review submitted successfully!
";
} else {
  echo $result . "
";
}
?>


<?php

// ... (process_review function - as above) ...

try {
  $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling

  $review = [
    'username' => $username,
    'rating' => $formatted_rating,
    'comment' => $formatted_comment,
    'timestamp' => time(),
    'review_id' => $review_id
  ];

  $sql = "INSERT INTO reviews (username, rating, comment, timestamp, review_id) VALUES (:username, :rating, :comment, :timestamp, :review_id)";
  $stmt = $pdo->prepare($sql);
  $stmt->execute($review);

  return true;

} catch (PDOException $e) {
  // Handle database error (e.g., log the error, display an error message)
  echo "Database error: " . $e->getMessage() . "
";
  return false;
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a product or item.
 *
 *  @param string $product_id  The unique identifier for the product.
 *  @param string $user_name   The name of the user submitting the review.
 *  @param string $review_text The text content of the review.
 *  @param int   $rating      The rating given by the user (e.g., 1-5).
 *  @param string $connection  (Optional) Database connection object. If not provided, 
 *                           the function will attempt to create one.
 *
 *  @return bool True on successful insertion, false on failure.
 */
function create_user_review(string $product_id, string $user_name, string $review_text, int $rating, $connection = null) {
    // Create database connection if none is provided
    if ($connection === null) {
        //  Replace with your database connection details
        $db_host = 'localhost';
        $db_name = 'your_database_name';
        $db_user = 'your_database_user';
        $db_password = 'your_database_password';

        $connection = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($connection->connect_error) {
            die("Connection failed: " . $connection->connect_error);
        }
    }

    // Sanitize inputs to prevent SQL injection
    $product_id = $connection->real_escape_string($product_id);
    $user_name = $connection->real_escape_string($user_name);
    $review_text = $connection->real_escape_string($review_text);
    $rating = $connection->real_escape_string($rating);


    // SQL query
    $query = "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES 
              ('$product_id', '$user_name', '$review_text', '$rating')";

    if ($connection->query($query) === TRUE) {
        return true;
    } else {
        echo "Error: " . $query . "<br>" . $connection->error;  // Log or display the error
        return false;
    }
}


/**
 * Retrieves reviews for a product.
 *
 * @param string $product_id The product ID.
 * @param $connection (Optional) Database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_product_reviews(string $product_id, $connection = null) {
    if ($connection === null) {
        //  Replace with your database connection details
        $db_host = 'localhost';
        $db_name = 'your_database_name';
        $db_user = 'your_database_user';
        $db_password = 'your_database_password';

        $connection = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($connection->connect_error) {
            die("Connection failed: " . $connection->connect_error);
        }
    }

    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $connection->query($query);

    if ($result->num_rows > 0) {
        $reviews = [];
        while($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return []; // Return an empty array if no reviews are found
    }
}


/**
 * Displays a single review
 * @param array $review
 */
function display_review(array $review) {
    echo "<b>User:</b> " . $review['user_name'] . "<br>";
    echo "<b>Rating:</b> " . $review['rating'] . " / 5<br>";
    echo "<b>Review:</b> " . $review['review_text'] . "<br><br>";
}


// --- Example Usage (Simulated Data for demonstration) ---
// In a real application, these reviews would come from a form submission.

// Simulate a database connection (for demonstration only)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';
$connection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}



// Create some sample reviews
$review1 = create_user_review('product_123', 'John Doe', 'Great product! Highly recommended.', 5, $connection);
$review2 = create_user_review('product_123', 'Jane Smith', 'Could be better, but overall good.', 4, $connection);
$review3 = create_user_review('product_456', 'Peter Jones', 'This is amazing!', 5, $connection);



// Get reviews for product_123
$reviews = get_product_reviews('product_123', $connection);

// Display the reviews
echo "<h2>Reviews for Product 123:</h2>";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        display_review($review);
    }
} else {
    echo "<p>No reviews found for this product.</p>";
}


// Close the database connection
$connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  Defaults to 0 for anonymous submissions.
 * @param string $timestamp (Optional)  Timestamp for the review - defaults to current time.
 * @return array An array containing the review details, or an error message if validation fails.
 */
function createReview(string $productName, string $reviewText, int $userId = 0, string $timestamp = null) {

  // Input Validation - Very Important!
  if (empty($productName)) {
    return ['error' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }
  if (!is_numeric($userId)) {
      $userId = 0;  // If invalid ID, default to anonymous.
  }


  //  You would likely store this in a database here
  //  For demonstration purposes, we'll just return an array
  //  representing the review details.


  $review = [
    'productName' => $productName,
    'reviewText' => $reviewText,
    'userId' => $userId,
    'timestamp' => $timestamp ?? time() // Use current time if timestamp is not provided
  ];

  return $review;
}


/**
 * Displays a single review.
 *
 * @param array $review A review array (as returned by createReview).
 * @return string HTML output of the review, or an error message if the review is not valid.
 */
function displayReview(array $review) {
  if (empty($review) || !isset($review['productName']) || !isset($review['reviewText'])) {
    return "<p style='color: red;'>Invalid Review Data</p>";
  }

  return "<div style='border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;'>";
  return "<p><strong>Product:</strong> " . htmlspecialchars($review['productName']) . "</p>";
  return "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
  return "<p><strong>User:</strong> " . ($review['userId'] > 0 ? "User #" . $review['userId'] : "Anonymous") . "</p>";
  return "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</p>"; // Format timestamp
  return "</div>";
}



// --- Example Usage ---

// 1. Create a Review
$reviewData = createReview("Awesome Widget", "This widget is fantastic! It does everything I need and more.", 123);

if (isset($reviewData['error'])) {
  echo "<p style='color: red;'>Error: " . $reviewData['error'] . "</p>";
} else {
  // 2. Display the Review
  $reviewOutput = displayReview($reviewData);
  echo $reviewOutput;
}


// Example of creating an invalid review:
$invalidReview = createReview("", "This is a bad review.");
if (isset($invalidReview['error'])) {
    echo "<p style='color: red;'>Error: " . $invalidReview['error'] . "</p>";
}
?>


<?php

/**
 * This function handles user reviews for a product.
 *
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of review objects. Each review object should have:
 *                       - $rating: An integer representing the rating (1-5).
 *                       - $comment: A string containing the review text.
 * @return array An array of formatted review strings for display.
 */
function formatUserReviews(string $productName, array $reviews): array {
    $formattedReviews = [];

    if (empty($reviews)) {
        $formattedReviews[] = "No reviews yet for $productName.";
        return $formattedReviews;
    }

    foreach ($reviews as $review) {
        $rating = $review['rating'];
        $comment = $review['comment'];

        // Validate rating (optional but recommended)
        if ($rating < 1 || $rating > 5) {
            continue; // Skip invalid reviews
        }

        $formattedReview = "Rating: $rating - Comment: $comment";
        $formattedReviews[] = $formattedReview;
    }

    return $formattedReviews;
}


// Example usage:
$product = "Awesome Widget";
$reviews = [
    ['rating' => 5, 'comment' => "This widget is fantastic! It does everything I need."],
    ['rating' => 4, 'comment' => "Great product, but could be a bit cheaper."],
    ['rating' => 3, 'comment' => "It's okay, nothing special."],
    ['rating' => 1, 'comment' => "Terrible! Don't buy this."],
];

$formatted = formatUserReviews($product, $reviews);

// Print the formatted reviews
echo "Reviews for $product:<br>";
foreach ($formatted as $review) {
    echo $review . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_id The unique identifier for the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5 stars).  Must be a valid integer.
 * @param string $comment The user's written review.
 * @param array $db_connection A database connection object.  (You'll need to establish this separately)
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $item_id, string $user_id, string $rating, string $comment, array $db_connection) {

  // Input validation - VERY IMPORTANT!
  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    error_log("Invalid rating provided: " . $rating);
    return false;
  }

  if (empty($comment)) {
    error_log("Review comment is empty.");
    return false; // Or you could allow empty comments, but you'd need to handle them differently in your display.
  }
    
  // SQL query -  **IMPORTANT: Use prepared statements to prevent SQL injection!**
  $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) 
          VALUES (?, ?, ?, ?)";

  // Prepare the statement
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Failed to prepare statement: " . $db_connection->error);
    return false;
  }

  // Bind the parameters
  $stmt->bind_param("siss", $item_id, $user_id, $rating, $comment);

  // Execute the statement
  if (!$stmt->execute()) {
    error_log("Failed to execute statement: " . $stmt->error);
    return false;
  }

  // Close the statement
  $stmt->close();

  return true;
}


/**
 * Display User Reviews
 *
 * Retrieves and displays user reviews for a given item.
 *
 * @param string $item_id The ID of the item to retrieve reviews for.
 * @param array $db_connection A database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.  Each review object
 *              will have 'id', 'item_id', 'user_id', 'rating', 'comment', 'date_added'
 */
function displayUserReviews(string $item_id, array $db_connection) {
  $sql = "SELECT id, item_id, user_id, rating, comment, date_added
          FROM reviews
          WHERE item_id = ?
          ORDER BY date_added DESC"; // Show most recent reviews first

  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Failed to prepare statement: " . $db_connection->error);
    return [];
  }

  $stmt->bind_param("s", $item_id);

  $stmt->execute();

  $reviews = [];
  $result = $stmt->get_result();

  if ($result === false) {
    error_log("Failed to get result: " . $db_connection->error);
    return [];
  }


  while ($row = $result->fetch_assoc()) {
    $reviews[] = $row;
  }

  $stmt->close();

  return $reviews;
}

// Example Usage (Illustrative - requires a database connection to be established)

// Assume you have a database connection object $conn

// 1. Save a review
$item_id = "product_123";
$user_id = "user_456";
$rating = 4;
$comment = "Great product! Highly recommended.";

if (saveUserReview($item_id, $user_id, $rating, $comment, $conn)) {
  echo "Review saved successfully!";
} else {
  echo "Error saving review.";
}


// 2. Display the reviews for that item
$reviews = displayUserReviews($item_id, $conn);

if (empty($reviews)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<h2>Reviews for " . $item_id . "</h2>";
  foreach ($reviews as $review) {
    echo "<p><strong>User:</strong> " . $review['user_id'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "</p>";
  }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId  The ID of the product the review is for.
 * @param string $username   The username of the reviewer.
 * @param string $rating    The rating (e.g., 1-5).
 * @param string $comment    The review text.
 * @param int $id (Optional) The ID of the review to update. If not provided, a new review is created.
 *
 * @return array An array containing the result of the operation:
 *              - 'success': True if the operation was successful.
 *              - 'message': A message describing the result (e.g., 'Review created', 'Review updated', 'Error: ...').
 *              - 'review': The newly created or updated review object.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, int $id = 0) {
  // Basic validation
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Error: Product ID cannot be empty.', 'review' => null];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Error: Username cannot be empty.', 'review' => null];
  }
  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['success' => false, 'message' => 'Error: Username must contain only alphanumeric characters and underscores.', 'review' => null];
  }
  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Error: Rating must be a number between 1 and 5.', 'review' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Error: Comment cannot be empty.', 'review' => null];
  }
  if (!is_numeric($id)) {
    $id = 0; // Default to 0 for new reviews
  }
  
  // Create the review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => (int)$rating,
    'comment' => $comment,
    'dateCreated' => date('Y-m-d H:i:s')
  ];

  // Save the review (Simulated database interaction - Replace with your actual database logic)
  // This part simulates saving the review to a database.  Adapt this to your database connection and schema.
  // Example using a hypothetical database table named 'reviews':
  // $db = new DatabaseConnection();  // Instantiate your database connection
  // $sql = "INSERT INTO reviews (productId, username, rating, comment, dateCreated) VALUES (?, ?, ?, ?, ?)";
  // $stmt = $db->prepare($sql);
  // $stmt->bind_param("ssisss", $productId, $username, $rating, $comment);
  // $stmt->execute();
  // $reviewId = $db->lastInsertId();

  // Placeholder - assume successful saving
  // In a real application, you'd return the review ID.
  $reviewId = 123; // Replace with actual review ID if you were saving to a database.
  
  return ['success' => true, 'message' => 'Review created successfully', 'review' => $review];
}


// Example Usage:
// 1. Create a new review:
$result = createOrUpdateReview('P123', 'john.doe', 4, 'Great product! I highly recommend it.', 0);
print_r($result);

// 2. Update an existing review (assuming review ID 123 exists):
$result = createOrUpdateReview('P456', 'jane.smith', 5, 'Excellent value for money.', 123);
print_r($result);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and saves reviews to a database.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True on success, false on failure (e.g., invalid input).
 */
function create_review(string $product_id, string $user_id, string $rating, string $comment) {
  // Validation: Basic input validation
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    error_log("Invalid review input: Missing product ID, user ID, rating, or comment.");  // Log for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating provided. Rating must be a number between 1 and 5.");
    return false;
  }

  // Database connection (Replace with your actual database connection details)
  $db_host = "localhost";
  $db_user = "your_db_user";
  $db_pass = "your_db_password";
  $db_name = "your_db_name";

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage());
    return false;
  }

  // Prepare SQL statement
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $pdo->prepare($sql);

  // Bind parameters
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  // Execute the query
  try {
    $stmt->execute();
    return true; // Success!
  } catch (PDOException $e) {
    error_log("Database error during review creation: " . $e->getMessage());
    return false;
  } finally {
    $pdo = null; // Close the database connection
  }
}

// Example Usage:
// $product_id = "123";
// $user_id = "456";
// $rating = 4;
// $comment = "This product is great!";

// if (create_review($product_id, $user_id, $rating, $comment)) {
//   echo "Review created successfully!";
// } else {
//   echo "Failed to create review.";
// }
?>


<?php

/**
 * Reviews class to handle user reviews.
 */
class Review
{
    /**
     * @var array Reviews data (id, author, rating, comment)
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param int $reviewId The unique ID of the review.
     * @param string $author The name of the user who wrote the review.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment about the item.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $reviewId, string $author, int $rating, string $comment): bool
    {
        // Validate input
        if (!is_int($reviewId) || $reviewId <= 0) {
            return false;
        }
        if (!is_string($author) || empty($author)) {
            return false;
        }
        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false;
        }
        if (!is_string($comment) || empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'id' => $reviewId,
            'author' => $author,
            'rating' => $rating,
            'comment' => $comment,
        ];

        return true;
    }


    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null The review data if found, null otherwise.
     */
    public function getReview(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] === $reviewId) {
                return $review;
            }
        }

        return null;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false if the review isn't found.
     */
    public function deleteReview(int $reviewId): bool
    {
        $reviewIndex = -1;
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] === $reviewId) {
                $reviewIndex = $key;
                break;
            }
        }

        if ($reviewIndex !== -1) {
            unset($this->reviews[$reviewIndex]);
            return true;
        }

        return false;
    }

    /**
     * Updates a review by ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newAuthor The new author name.
     * @param int $newRating The new rating.
     * @param string $newComment The new comment.
     *
     * @return bool True on success, false if the review isn't found or if any validation fails.
     */
    public function updateReview(int $reviewId, string $newAuthor, int $newRating, string $newComment): bool
    {
        $review = $this->getReview($reviewId);
        if (!$review) {
            return false;
        }

        // Validate new inputs
        if (!is_string($newAuthor) || empty($newAuthor)) {
            return false;
        }
        if (!is_int($newRating) || $newRating < 1 || $newRating > 5) {
            return false;
        }
        if (!is_string($newComment) || empty($newComment)) {
            return false;
        }

        $review['author'] = $newAuthor;
        $review['rating'] = $newRating;
        $review['comment'] = $newComment;

        return true;
    }
}



// Example usage:
$reviewSystem = new Review();

// Add reviews
$reviewSystem->addReview(1, "John Doe", 4, "Great product!");
$reviewSystem->addReview(2, "Jane Smith", 5, "Excellent value for money.");
$reviewSystem->addReview(3, "Peter Jones", 3, "Could be better.");

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get a specific review
$review = $reviewSystem->getReview(2);
print_r($review);

// Update a review
$updateResult = $reviewSystem->updateReview(2, "Alice Brown", 5, "Fantastic!");
if ($updateResult) {
    print_r($review); // The review will have been updated.
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteResult = $reviewSystem->deleteReview(1);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

//Try to get deleted review
$deletedReview = $reviewSystem->getReview(1);
if (!$deletedReview) {
    echo "Review with ID 1 no longer exists.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_connection  A database connection object.
 *
 * @return array An array containing the response data:
 *              - 'success': true if the operation was successful, false otherwise.
 *              - 'message': A message describing the result.
 *              - 'review_id': The ID of the newly created review (if successful).
 *              - 'review': The full review data (if successful).
 */
function create_user_review(
    string $product_id,
    string $username,
    string $rating,
    string $comment,
    $db_connection
) {
    // Validate input (add more validation as needed)
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'Missing required fields.',
        ];
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES ('$product_id', '$username', '$rating', '$comment')";

    // Execute the query
    $result = $db_connection->query($sql);

    if ($result) {
        // Get the ID of the newly created review
        $review_id = $db_connection->insert_id;

        // Get the full review data
        $review = [
            'review_id' => $review_id,
            'product_id' => $product_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
        ];

        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'review_id' => $review_id,
            'review' => $review,
        ];
    } else {
        // Handle the error
        $error_message = $db_connection->error;
        return [
            'success' => false,
            'message' => 'Error creating review: ' . $error_message,
        ];
    }
}

// Example usage (replace with your actual database connection)
// Assuming you have a database connection named $conn
// $conn = new mysqli("localhost", "username", "password", "database_name");
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }


// $review_data = create_user_review(
//     '123',  // Product ID
//     'john.doe', // Username
//     '4',   // Rating
//     'This is a great product!', // Comment
//     $conn
// );

// print_r($review_data);


// Example: Reading Reviews
/**
 * Read Reviews
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param $db_connection Database connection object.
 *
 * @return array An array containing the review data, or an empty array if no reviews are found.
 */
function read_user_reviews(string $product_id, $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $db_connection->query($sql);

    if ($result->num_rows > 0) {
        $reviews = [];
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    } else {
        return []; // Return an empty array if no reviews are found.
    }
}


// Example of reading reviews:
// $product_id = '123';
// $reviews = read_user_reviews($product_id, $conn);
// print_r($reviews);
?>


<?php

/**
 * User Review Function - Basic Implementation
 *
 * This function takes a user's review text, a rating (1-5), and an optional user ID.
 * It stores the review in a simple array (for demonstration purposes).
 *
 * In a real application, you'd integrate this with a database.
 *
 * @param string $reviewText The text of the user's review.
 * @param int $rating The rating given by the user (1-5).
 * @param string|null $userId The ID of the user submitting the review.
 *
 * @return array An array containing the review details.
 */
function createReview(string $reviewText, int $rating, ?string $userId = null): array
{
    // Basic validation - important for security and data integrity.
    if (empty($reviewText)) {
        throw new InvalidArgumentException("Review text cannot be empty.");
    }

    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    $review = [
        'text' => $reviewText,
        'rating' => $rating,
        'userId' => $userId, // Store user ID for later use
        'date' => date('Y-m-d H:i:s'), // Add a timestamp for review creation
    ];

    return $review;
}

// --- Example Usage ---

try {
    $review1 = createReview("This product is amazing! I highly recommend it.", 5, "user123");
    echo "Review 1:
";
    print_r($review1);
    echo "

";

    $review2 = createReview("It was okay, nothing special.", 3);
    echo "Review 2:
";
    print_r($review2);
    echo "

";

    // Example of error handling - Invalid rating
    try {
        $invalidReview = createReview("Bad review", 6);
    } catch (InvalidArgumentException $e) {
        echo "Error creating review: " . $e->getMessage() . "
";
    }

} catch (InvalidArgumentException $e) {
    // Catch any errors that might be thrown by createReview()
    echo "An error occurred: " . $e->getMessage() . "
";
}
?>


<?php
// Example of sanitization (important for security)
$sanitizedReviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

// ... (Database query using prepared statements to prevent SQL injection)
?>


<?php

/**
 * Reviews class to handle user reviews for a product or service.
 */
class Review {

  private $productId;
  private $userId;
  private $rating;
  private $comment;
  private $timestamp;


  /**
   * Constructor for the Review class.
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($productId, $userId, $rating, $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->timestamp = time(); // Record the current timestamp
  }

  /**
   * Getters for the review properties.
   *
   * @return mixed
   */
  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getTimestamp() {
    return $this->timestamp;
  }

  /**
   *  Returns a string representation of the review object.  Useful for debugging.
   *
   * @return string
   */
  public function __toString() {
    return "Review ID: " . $this->getId() . ", User ID: " . $this->getUserId() . ", Rating: " . $this->getRating() . ", Comment: " . $this->getComment() . ", Timestamp: " . $this->getTimestamp();
  }

  /**
   * Gets the review ID. This is a simple internal ID.
   *
   * @return int
   */
  private function getId() {
    return mt_rand(1000, 9999); //Generate a random ID for each review.  In a real application, you'd use an auto-incrementing database column.
  }


}



/**
 * Example Usage and Basic Review Function
 */

/**
 *  This function takes a review object and returns a user-friendly review string.
 *  It could be expanded to handle validation, sanitization, etc.
 *
 * @param Review $review The Review object to format.
 * @return string  A formatted string representing the review.
 */
function formatReview(Review $review) {
  return "User ID: " . $review->getUserId() . ", Rating: " . $review->getRating() . ", Comment: \"" . htmlspecialchars($review->getComment()) . "\".";
}


// Example Usage:
$review1 = new Review(123, 456, 5, "Excellent product!  Highly recommended.");
$review2 = new Review(456, 789, 4, "Good product, but could be better.");

echo "Review 1: " . formatReview($review1) . "
";
echo "Review 2: " . formatReview($review2) . "
";



//Example of storing reviews (This is just a basic example; a database is preferable in a real application)
$reviews = [];
$reviews[] = $review1;
$reviews[] = $review2;

//Printing out the reviews stored in the array:
echo "Reviews stored in the array:
";
foreach ($reviews as $review) {
    echo formatReview($review) . "
";
}



?>


<?php

/**
 * Class Review
 *
 * This class provides a simple function to store and retrieve user reviews.
 * It uses a file to persist the reviews, allowing for basic persistence.
 *
 * Note: This is a simplified example for demonstration purposes.  For production
 *       applications, consider using a database.
 */
class Review {

    private $filename = 'reviews.txt'; // File to store reviews

    /**
     * Adds a new review to the database.
     *
     * @param string $username The username of the reviewer.
     * @param string $review The review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $review): bool {
        $data = file_get_contents($this->filename);
        if ($data === false) {
            // Handle file not found or other read errors
            return false;
        }

        $review_entry = "User: $username - $review";
        if (strpos($data, $review_entry) === false) { // Check if review already exists
            $data .= "
$review_entry";
            if (file_put_contents($this->filename, $data) === false) {
                // Handle write errors
                return false;
            }
            return true;
        } else {
            // Review already exists - return false to prevent duplicates
            return false;
        }
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review strings.
     */
    public function getAllReviews(): array {
        $data = file_get_contents($this->filename);
        if ($data === false) {
            return []; // Return empty array on error
        }

        $reviews = explode("
", $data);
        return array_slice($reviews, 0); //Return only the actual reviews, removing empty elements.
    }

    /**
     * Clears all reviews.  Use with caution!
     */
    public function clearReviews(): void {
        if (file_put_contents($this->filename, '') === false) {
            // Handle write errors
            // Log error or throw exception instead of just returning false
            error_log("Failed to clear reviews file.");
        }
    }
}



// Example usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("JohnDoe", "This product is amazing!");
$reviewSystem->addReview("JaneSmith", "Great value for money.");
$reviewSystem->addReview("JohnDoe", "I had a problem with the delivery."); // Duplicate - should not be added


// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo $review . "
";
}

// Clear reviews (demonstration)
// $reviewSystem->clearReviews();
// echo "
Reviews after clearing:
";
// foreach ($reviewSystem->getAllReviews() as $review) {
//     echo $review . "
";
// }


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product being reviewed.
 * @param string $productName (Optional) The name of the product for display.
 * @param string $reviewText The text of the review submitted by the user.
 * @param int $userId (Optional)  The ID of the user submitting the review.  Useful for moderation/tracking.
 * @return array  An array containing the review data, including the review text and user ID.
 *                Returns an empty array if the review submission fails.
 */
function submitReview(string $productId, string $productName = '', string $reviewText, int $userId = 0)
{
    // **INPUT VALIDATION - IMPORTANT!**
    if (empty($productId)) {
        error_log("Error: Product ID is required."); // Log the error - crucial for debugging
        return [];
    }
    if (empty($reviewText)) {
        error_log("Error: Review text is required.");
        return [];
    }


    // **Data Sanitization & Security - CRITICAL!**
    $reviewText = htmlspecialchars($reviewText); // Protect against XSS attacks

    // **Store the review in a database (Example - you'd replace this with your actual DB code)**
    // This is just a demonstration; adapt to your database setup.
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database credentials

    $stmt = $db->prepare("INSERT INTO reviews (productId, productName, reviewText, userId) VALUES (?, ?, ?, ?)");
    $stmt->execute([$productId, $productName, $reviewText, $userId]);

    // **Success Response**
    return [
        'reviewId' => $db->lastInsertId(), // Get the ID of the newly created review
        'productId' => $productId,
        'productName' => $productName,
        'reviewText' => $reviewText,
        'userId' => $userId,
        'success' => true,
        'message' => "Review submitted successfully!"
    ];
}


/**
 * Display Reviews Function
 *
 * This function retrieves reviews for a given product ID and displays them.
 *
 * @param string $productId The ID of the product for which to retrieve reviews.
 * @return array  An array containing the review data. Returns an empty array if no reviews are found.
 */
function displayReviews(string $productId)
{
    // **Retrieve reviews from the database (Example - you'd replace this with your actual DB code)**
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database credentials
    $stmt = $db->prepare("SELECT reviewId, reviewText, userId, productName FROM reviews WHERE productId = ?");
    $stmt->execute([$productId]);

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = [
            'reviewId' => $row['reviewId'],
            'reviewText' => $row['reviewText'],
            'userId' => $row['userId'],
            'productName' => $row['productName']
        ];
    }

    return $reviews;
}



// **Example Usage (Demonstration)**

// 1. Submit a review:
$reviewData = submitReview('123', 'Awesome Widget', 'This is the best widget ever!');
if ($reviewData) {
    echo "Review submitted successfully! Review ID: " . $reviewData['reviewId'] . "<br>";
} else {
    echo "Review submission failed. Check the error logs for details.<br>";
}


// 2. Display the reviews for product '123':
$reviews = displayReviews('123');
if (!empty($reviews)) {
    echo "<h3>Reviews for Product 123:</h3>";
    foreach ($reviews as $review) {
        echo "<p><strong>User:</strong> " . ($review['userId'] > 0 ? "User ID: " . $review['userId'] : "Anonymous") . "</p>";
        echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
    }
} else {
    echo "<p>No reviews found for product 123.</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId  The ID of the product being reviewed.
 * @param string $reviewText The user's review text.
 * @param int    $rating     The rating (1-5).
 * @param string $username   The user's username.  Optional.
 *
 * @return array An array containing:
 *              - 'success': True if the review was successfully submitted, false otherwise.
 *              - 'message': A success or error message.
 *              - 'review': The submitted review data (for display or saving).
 */
function submitReview(string $productId, string $reviewText, int $rating, string $username = null)
{
    // Input validation
    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => null
        ];
    }

    if ($rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be between 1 and 5.',
            'review' => null
        ];
    }

    // Simulate saving to a database (replace with your database logic)
    // In a real application, you would insert this data into a database table.
    $review = [
        'product_id' => $productId,
        'review_text' => $reviewText,
        'rating' => $rating,
        'username' => $username,
        'timestamp' => time()
    ];

    // Simulate success
    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $review
    ];
}


/**
 * Displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return string HTML markup for displaying the reviews.
 */
function displayReviews(string $productId)
{
    // Simulate fetching reviews from a database.  Replace this with your data access code.
    $reviews = [
        'product123' => [
            ['username' => 'Alice', 'review_text' => 'Great product!', 'rating' => 5, 'timestamp' => time() - 86400 * 30], // 30 days ago
            ['username' => 'Bob', 'review_text' => 'Good value.', 'rating' => 4, 'timestamp' => time() - 86400 * 15], // 15 days ago
            ['username' => 'Charlie', 'review_text' => 'Could be better.', 'rating' => 3, 'timestamp' => time() - 86400 * 60]  // 60 days ago
        ],
        'product456' => [
            ['username' => 'David', 'review_text' => 'Excellent quality!', 'rating' => 5, 'timestamp' => time() - 86400 * 72]
        ]
    ];

    if (isset($reviews[$productId])) {
        $review_html = '<ul>';
        foreach ($reviews[$productId] as $review) {
            $username = isset($review['username']) ? $review['username'] : 'Anonymous';
            $review_html .= '<li><strong>' . $username . ':</strong> ' . htmlspecialchars($review['review_text']) . ' (' . $review['rating'] . '/5) - ' . date('Y-m-d H:i:s', $review['timestamp']) . '</li>';
        }
        $review_html .= '</ul>';
        return $review_html;
    } else {
        return '<p>No reviews yet.</p>';
    }
}



// Example Usage:

// 1. Submitting a review:
$result = submitReview('product123', 'This is a fantastic product!', 5, 'Eve');
if ($result['success']) {
    echo '<p>' . $result['message'] . '</p>';
    print_r($result['review']); // Display the submitted review data.
} else {
    echo '<p>Error: ' . $result['message'] . '</p>';
}

// 2. Displaying reviews for product 'product123':
$reviews_html = displayReviews('product123');
echo $reviews_html;

// 3.  Displaying reviews for product 'product456':
$reviews_html = displayReviews('product456');
echo $reviews_html;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, display, and manage user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5).
 * @param array $dbConnection Database connection object.  (Important: Use PDO for security!)
 *
 * @return bool True on success, false on failure.
 */
function addReview(string $productId, string $userEmail, string $reviewText, int $rating, PDO $dbConnection) {
  // Input validation - CRITICAL for security and data integrity
  if (empty($productId)) {
    error_log("Invalid product ID provided.");
    return false;
  }
  if (empty($userEmail)) {
    error_log("Invalid user email provided.");
    return false;
  }
  if (empty($reviewText)) {
    error_log("Review text cannot be empty.");
    return false;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Invalid rating provided. Rating must be between 1 and 5.");
    return false;
  }

  // SQL Injection Prevention - IMPORTANT!  Use prepared statements.
  $sql = "INSERT INTO reviews (product_id, user_email, review_text, rating)
          VALUES (:product_id, :user_email, :review_text, :rating)";

  try {
    $stmt = $dbConnection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_email', $userEmail);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);

    $result = $stmt->execute();

    if ($result) {
      return true;
    } else {
      error_log("Error executing review insert: " . print_r($stmt->errorInfo(), true)); //Log the error
      return false;
    }

  } catch (PDOException $e) {
    error_log("PDOException: " . $e->getMessage()); // Log the PDO exception
    return false;
  }
}

/**
 *  Example Retrieval Function (for demonstration - would likely be much more complex in a real application)
 *
 * @param int $productId The product ID to retrieve reviews for.
 * @param PDO $dbConnection Database connection object.
 *
 * @return array An array of review objects (or an empty array if none are found).
 */
function getReviewsForProduct(int $productId, PDO $dbConnection) {
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";

  try {
    $stmt = $dbConnection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC); // Fetch all rows as associative arrays

    return $reviews;

  } catch (PDOException $e) {
    error_log("PDOException: " . $e->getMessage());
    return [];
  }
}

// --- Example Usage (Illustrative - replace with your actual database connection) ---
// **IMPORTANT:  Replace the following with your actual database configuration!**
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

try {
    $dbConnection = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPass);
    $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Important for error handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}



// Add a review
$product_id = 123;
$user_email = 'test@example.com';
$review_text = 'Great product! I highly recommend it.';
$rating = 5;

if (addReview($product_id, $user_email, $review_text, $rating, $dbConnection)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Retrieve reviews for product 123
$reviews = getReviewsForProduct($product_id, $dbConnection);

echo "Reviews for product " . $product_id . ":
";
if (empty($reviews)) {
    echo "No reviews found.
";
} else {
    foreach ($reviews as $review) {
        echo "  Product ID: " . $review['product_id'] . "
";
        echo "  User Email: " . $review['user_email'] . "
";
        echo "  Review Text: " . $review['review_text'] . "
";
        echo "  Rating: " . $review['rating'] . "
";
        echo "  --- Separator ---
";
    }
}

// Close the database connection (Good practice)
$dbConnection = null;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews with basic details.
 * It includes validation to ensure data integrity and handles errors.
 *
 * @param string $username      The user's name or identifier.
 * @param string $rating        The rating (e.g., 1-5 stars).
 * @param string $comment       The user's comment or feedback.
 * @param string $review_id  (Optional) Unique ID for the review.  If not provided, one will be generated.
 *
 * @return array  An array containing:
 *                - 'success' => true if the review was saved successfully.
 *                - 'message' => A message describing the outcome.
 *                - 'review_id' => The ID of the newly created review (if applicable).
 *
 * @return array  Returns an empty array on failure with an error message.
 */
function saveUserReview(string $username, string $rating, string $comment, string $review_id = null) {
  // Input Validation
  if (empty($username)) {
    return array('success' => false, 'message' => 'Username cannot be empty.', 'review_id' => null);
  }

  if (empty($rating)) {
    return array('success' => false, 'message' => 'Rating cannot be empty.', 'review_id' => null);
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return array('success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review_id' => null);
  }

  if (empty($comment)) {
    return array('success' => false, 'message' => 'Comment cannot be empty.', 'review_id' => null);
  }

  //  Database connection (Replace with your actual database credentials)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (username, rating, comment, created_at) VALUES (:username, :rating, :comment, NOW())"
    );

    // Bind parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $stmt->execute();

    // Get the ID of the newly created review
    $review_id = $db->lastInsertId();

    return array('success' => true, 'message' => 'Review saved successfully.', 'review_id' => $review_id);

  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage()); // Log the error for debugging
    return array('success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'review_id' => null);
  }
}


// Example Usage:

// Save a review with a provided ID
$review_data = saveUserReview('John Doe', 4, 'Great product!', '123');
print_r($review_data);

// Save a review without a provided ID (ID will be auto-generated)
$review_data = saveUserReview('Jane Smith', 5, 'Excellent service!', null);
print_r($review_data);

// Example demonstrating error handling:
$review_data = saveUserReview('', 3, 'Invalid review', null);
print_r($review_data);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 * It handles validation, sanitization, and storage (simplified for demonstration).
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username  The username of the user submitting the review (optional).
 * @param string $rating   The rating (1-5) submitted by the user (optional).
 * @param string $storageMethod  'file' or 'database'.  Determines how reviews are stored.
 *
 * @return array An array containing the review data (success or error messages).
 */
function submitReview(string $productId, string $reviewText, string $username = null, int $rating = null, string $storageMethod = 'file')
{
    // Validation and Sanitization
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating === null || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating.  Please enter a number between 1 and 5.'];
    }

    // Sanitize input (Basic - improve for production)
    $reviewText = htmlspecialchars(trim($reviewText));  // Sanitize for HTML output

    // Store the review
    $reviewData = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'username' => $username,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for ordering
    ];

    if ($storageMethod === 'file') {
        // Save to a file (basic example - adapt to your needs)
        $filename = "reviews_" . $productId . ".txt";
        file_put_contents($filename, json_encode($reviewData));
        return ['success' => true, 'message' => 'Review submitted successfully.'];
    } elseif ($storageMethod === 'database') {
        // Save to a database (example using a placeholder)
        // You'll need to connect to your database and perform the insert query here
        // Example:
        // $db = new DatabaseConnection();
        // $stmt = $db->prepare("INSERT INTO reviews (productId, reviewText, username, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
        // $stmt->bind_param("ssisii", $productId, $reviewText, $username, $rating, $timestamp);
        // $stmt->execute();
        // $stmt->close();
        return ['success' => true, 'message' => 'Review submitted successfully (to database - placeholder).'];
    } else {
        return ['success' => false, 'message' => 'Invalid storage method.  Choose "file" or "database".'];
    }
}


/**
 * Display Reviews Function
 *
 * Displays reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @param string $storageMethod 'file' or 'database'.
 */
function displayReviews(string $productId, string $storageMethod = 'file')
{
    // Fetch reviews based on the storage method
    $reviews = [];

    if ($storageMethod === 'file') {
        $filename = "reviews_" . $productId . ".txt";
        if (file_exists($filename)) {
            $fileContent = file_get_contents($filename);
            $reviews = json_decode($fileContent, true); // Decode as an associative array
            if ($reviews === null) {
                echo "<p>Error reading reviews from file.</p>";
            }
        } else {
            echo "<p>No reviews found for this product.</p>";
        }

    } elseif ($storageMethod === 'database') {
        // Replace with your database query logic
        // Example:
        // $db = new DatabaseConnection();
        // $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = ? ORDER BY timestamp DESC");
        // $stmt->bind_param("s", $productId);
        // $stmt->execute();
        // $result = $stmt->get_result();

        // while ($row = $result->fetch_assoc()) {
        //     $reviews[] = $row;
        // }
        // $stmt->close();

        echo "<p>Database review display placeholder - implement your query here.</p>";
    } else {
        echo "<p>Invalid storage method.</p>";
    }

    // Display the reviews
    echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['username'] . "</strong> - " . $review['reviewText'] . " (" . $review['rating'] . "/5) - " . date("Y-m-d H:i:s", strtotime($review['timestamp']));
            echo "</li>";
        }
        echo "</ul>";
    }
}



// --- Example Usage ---
//Submit a review:
$result = submitReview('123', 'This is a great product!');
if ($result['success']) {
    echo "<p>Review submitted successfully: " . $result['message'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

// Display the reviews
displayReviews('123');

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It utilizes a simple database to store reviews.  For a production environment, 
 * you'd want a more robust database and potentially input validation and sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The review text.
 * @return array          An array containing the review ID, success status, and optional error message.
 */
function createReview(string $product_id, string $user_id, string $rating, string $comment)
{
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    // Input Validation (Basic example - enhance for production)
    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        return ['id' => null, 'success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['id' => null, 'success' => false, 'message' => 'Comment cannot be empty.'];
    }

    try {
        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind parameters to prevent SQL injection
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the statement
        $stmt->execute();

        // Get the ID of the inserted row
        $review_id = $db->lastInsertId();

        return ['id' => $review_id, 'success' => true, 'message' => 'Review created successfully.'];

    } catch (PDOException $e) {
        // Handle database errors
        return ['id' => null, 'success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Retrieve a single review
 *
 * @param int $review_id The ID of the review to retrieve.
 * @return array An array containing the review data or an empty array if not found.
 */
function getReview(int $review_id) {
  // Database connection (Replace with your actual database connection)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE id = ?");
    $stmt->bindParam(1, $review_id);
    $stmt->execute();

    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    return $review ?: []; // Return empty array if no review found
  } catch (PDOException $e) {
    return ['id' => null, 'success' => false, 'message' => 'Database error: ' . $e->getMessage()];
  }
}


/**
 * Update a review
 *
 * @param int $review_id The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 * @return array An array containing the updated review data or an error message.
 */
function updateReview(int $review_id, string $rating, string $comment) {
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    // Input Validation (Basic - enhance for production)
    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.'];
    }

    try {
        $stmt = $db->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
        $stmt->bindParam(1, $rating);
        $stmt->bindParam(2, $comment);
        $stmt->bindParam(3, $review_id);

        $stmt->execute();

        return ['success' => true, 'message' => 'Review updated successfully.'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Delete a review
 *
 * @param int $review_id The ID of the review to delete.
 * @return array An array indicating success or failure.
 */
function deleteReview(int $review_id) {
    // Database connection (Replace with your actual database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->bindParam(1, $review_id);
        $stmt->execute();

        return ['success' => true, 'message' => 'Review deleted successfully.'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


// Example Usage (After creating the 'reviews' table)
// $newReview = createReview(1, 123, 4, 'This is a great product!');
// print_r($newReview);

// $review = getReview(1);
// print_r($review);

// $updatedReview = updateReview(1, 5, 'Excellent product, highly recommended.');
// print_r($updatedReview);

// $deletedReview = deleteReview(1);
// print_r($deletedReview);
?>


<?php

/**
 * User Review Class
 *
 * Allows users to submit and view reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $name The name of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($name, $rating, $comment)
    {
        if (!is_string($name) || !is_string($comment)) {
            return false; // Invalid input
        }

        if (!is_int($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'name' => $name,
            'rating' => $rating,
            'comment' => $comment,
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews based on a rating range.
     *
     * @param int $minRating The minimum rating (inclusive).
     * @param int $maxRating The maximum rating (inclusive).
     *
     * @return array An array of review objects within the specified rating range.
     */
    public function getReviewsByRange($minRating, $maxRating)
    {
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['rating'] >= $minRating && $review['rating'] <= $maxRating) {
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Calculates the average rating.
     *
     * @return float|null The average rating, or null if no reviews have been submitted.
     */
    public function getAverageRating()
    {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($this->getAllReviews());
    }

    /**
     * Clears all reviews.
     *
     * @return void
     */
    public function clearReviews()
    {
        $this->reviews = [];
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('Alice', 5, 'Great product!  Highly recommended.');
$reviewSystem->addReview('Bob', 4, 'Good, but could be better.');
$reviewSystem->addReview('Charlie', 3, 'Okay, nothing special.');
$reviewSystem->addReview('David', 5, 'Excellent value for money!');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get reviews with a rating of 4 or 5
$highRatedReviews = $reviewSystem->getReviewsByRange(4, 5);
print_r($highRatedReviews);

// Get the average rating
$averageRating = $reviewSystem->getAverageRating();
echo "Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews yet') . "
";

// Clear the reviews
$reviewSystem->clearReviews();
print_r($reviewSystem->getAllReviews());  // Should be empty
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews
 * for a given product or item.
 *
 * @param string $product_id The ID of the product or item the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment   The user's review comment.
 * @param array  $db_connection  Database connection object (optional, if not provided, creates a dummy one).
 *
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, False otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review, if successful.
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, $db_connection = null)
{
    $success = false;
    $message = '';
    $review_id = null;

    // Database connection (create dummy if not provided)
    if ($db_connection === null) {
        $db_connection = new stdClass(); // Dummy database object
        $db_connection->connection = "localhost";
        $db_connection->username = "your_username";
        $db_connection->password = "your_password";
        $db_connection->database = "your_database";
    }


    try {
        // Validate inputs (basic validation - expand as needed)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            throw new Exception("Invalid rating. Rating must be a number between 1 and 5.");
        }

        if (empty($comment)) {
            throw new Exception("Comment cannot be empty.");
        }

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";

        // Prepare the statement
        $stmt = $db_connection->connection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query
        $stmt->execute();

        // Get the ID of the newly created review
        $review_id = $db_connection->connection->lastInsertId();


        $success = true;
        $message = "Review created successfully!";

    } catch (Exception $e) {
        $message = "Error creating review: " . $e->getMessage();
        error_log($e->getMessage()); // Log the error for debugging
    }

    return ['success' => $success, 'message' => $message, 'review_id' => $review_id];
}


// Example Usage:
//  This is just for demonstration, replace with your actual database connection details.

// Sample database setup (for demonstration)
//  In a real application, you would connect to your actual database.
// $db_connection = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

$review_data = create_user_review(
    'product123',
    'user456',
    3,
    'Great product!  Highly recommended.',
    $db_connection // Pass your database connection object
);

if ($review_data['success']) {
    echo "Review created with ID: " . $review_data['review_id'] . "<br>";
    echo "Message: " . $review_data['message'] . "<br>";
} else {
    echo "Failed to create review. Message: " . $review_data['message'] . "<br>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and display user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId  (Optional)  The unique ID for the review.  If not provided, auto-generated.
     * @param int $userId   The ID of the user who wrote the review.
     * @param int $rating   The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product/item.
     */
    public function __construct($reviewId = null, $userId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp for date
    }

    /**
     * Getters for each property.
     *
     * @return mixed  The value of the property.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display the review in a formatted string.
     *
     * @return string  A string containing the review details.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() . "
" .
               "User ID: " . $this->getUserId() . "
" .
               "Rating: " . $this->getRating() . "
" .
               "Comment: " . $this->getComment() . "
" .
               "Date: " . $this->getDate();
    }
}

/**
 * User Review Function (Example Usage)
 */
function processUserReview($userId, $rating, $comment) {
    // Create a new UserReview object
    $review = new UserReview($userId, $userId, $rating, $comment);

    // Display the review
    echo $review->displayReview() . "
";

    // Optionally, you could save this review to a database here...
    // This is just a demonstration.
}


// Example Usage:
processUserReview(123, 5, "Excellent product! Highly recommended.");
processUserReview(456, 3, "It's okay, but could be better.");
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or service.
 * It includes validation, sanitization, and basic formatting.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given (1-5). Defaults to 0.
 * @return array|string  Returns an array of reviews or a single review string.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, int $rating = 0) {
    // **Input Validation & Sanitization** - CRITICAL for security!
    $reviewerName = trim($reviewerName); // Remove leading/trailing whitespace
    $reviewText = trim($reviewText);
    $rating = intval($rating); // Ensure rating is an integer

    if (empty($reviewerName)) {
        return "Error: Reviewer name cannot be empty.";
    }

    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // **Data Preparation & Formatting**
    $formattedReview = "Reviewer: " . $reviewerName . "<br>";
    $formattedReview .= "Rating: " . $rating . " stars<br>";
    $formattedReview .= "Review: " . $reviewText . "<br>";

    return $formattedReview;
}



/**
 * Example Usage:
 */

// Single Review Creation
$review = createReview("product_123", "Alice Smith", "Great product!  I highly recommend it.", 5);
echo $review;

echo "<br><br>";

// Multiple Reviews (example - you'd likely store these in a database)
$reviews = [
    ["productId" => "product_123", "reviewerName" => "Bob Johnson", "reviewText" => "Good value for the price.", 4],
    ["productId" => "product_456", "reviewerName" => "Charlie Brown", "reviewText" => "Could be better.", 2],
];

// Displaying the reviews (example - you'd likely loop through a database)
foreach ($reviews as $reviewData) {
    echo createReview($reviewData["productId"], $reviewData["reviewerName"], $reviewData["reviewText"], $reviewData["rating"]);
    echo "<br><br>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function processes user reviews, saves them to a database,
 * and optionally displays a summary of the reviews.
 *
 * @param string $name The name of the user submitting the review.
 * @param string $rating A rating (e.g., 1-5).
 * @param string $comment The user's review text.
 * @param string $db_connection A database connection object (e.g., mysqli or PDO).
 * @param string $table_name The name of the table to store reviews in.
 *
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $name, string $rating, string $comment, $db_connection, string $table_name) {
  // Validate input (basic example - you should add more robust validation)
  if (empty($name) || empty($rating) || empty($comment)) {
    error_log("Missing required data in review submission."); // Log the error
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Invalid rating provided: " . $rating);
    return false;
  }

  // Prepare the SQL query
  $sql = "INSERT INTO `$table_name` (name, rating, comment) 
          VALUES ('$name', '$rating', '$comment')";

  // Execute the query
  try {
    $stmt = $db_connection->prepare($sql);
    $stmt->execute();
    return true;
  } catch (Exception $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage (This is just for demonstration)
// Assuming you have a database connection object $conn and a table named 'reviews'
// with columns: id (int, auto-increment), name (varchar), rating (int), comment (text)


// Example Database Connection (Replace with your actual connection)
//$conn = new mysqli("localhost", "username", "password", "database_name");
//$conn->query("SET NAMES utf8mb4"); // Important for proper character encoding

// $review_success = saveUserReview("John Doe", 4, "Great product!", $conn, "reviews");

// if ($review_success) {
//   echo "Review saved successfully!";
// } else {
//   echo "Failed to save review.";
// }


// Example:  Displaying reviews (This part is optional and depends on your needs)
/**
 *  Example function to fetch and display reviews from a database.
 *
 * @param string $db_connection A database connection object.
 * @param string $table_name The name of the table to fetch reviews from.
 * @param int $limit The number of reviews to display (optional).
 */
function displayReviews( $db_connection, string $table_name, $limit = 10) {
    $sql = "SELECT id, name, rating, comment FROM `$table_name` ORDER BY id DESC LIMIT $limit";

    try {
        $stmt = $db_connection->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if ($result) {
            echo "<h2>User Reviews</h2>";
            echo "<ul>";
            foreach ($result as $review) {
                echo "<li><strong>Name:</strong> " . htmlspecialchars($review['name']) . "<br>";
                echo "   <strong>Rating:</strong> " . $review['rating'] . "<br>";
                echo "   <strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "</li>";
            }
            echo "</ul>";
        } else {
            echo "No reviews found.";
        }
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a product or item.
 * It includes validation and basic sanitization.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param array $allowedTags  (Optional) An array of allowed HTML tags.  Defaults to an empty array,
 *                            preventing most HTML tags from being allowed.  
 * @return array An array containing:
 *   - 'success' (bool): True if the review was successfully submitted, false otherwise.
 *   - 'message' (string):  A message indicating the outcome (success or error).
 *   - 'review' (string): The submitted review if successful, or an empty string.
 */
function submitReview($productName, $reviewText, $allowedTags = []) {
    // Input Validation and Sanitization
    if (empty($productName)) {
        return array('success' => false, 'message' => 'Product name cannot be empty.', 'review' => '');
    }
    if (empty($reviewText)) {
        return array('success' => false, 'message' => 'Review text cannot be empty.', 'review' => '');
    }
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace

    // Sanitize HTML tags -  Important for security
    $reviewText = strip_tags($reviewText, $allowedTags);

    // You could add more robust sanitization here, such as:
    // - Escaping HTML entities
    // - Filtering out unsafe characters

    // Store the review (This is a simplified example -  in a real application,
    // you'd use a database or other persistent storage)
    $storedReview = $reviewText;

    return array('success' => true, 'message' => 'Review submitted successfully.', 'review' => $storedReview);
}


/**
 * Display User Reviews
 *
 * This function takes an array of reviews and displays them in an unordered list.
 *
 * @param array $reviews An array of reviews, each review being an associative array
 *                      with keys 'success', 'message', and 'review'.
 */
function displayReviews(array $reviews) {
    echo "<h2>User Reviews for " . htmlspecialchars($reviews[0]['message']) . "</h2>"; // Display the product name.  htmlspecialchars escapes characters for HTML output.

    if (count($reviews) === 0) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        if ($review['success']) {
            echo "<li>";
            echo htmlspecialchars($review['review']); // Escape the review text for HTML output.
            echo " - " . htmlspecialchars(getReviewAuthorName()); // Add the author name.
            echo "</li>";
        } else {
            echo "<li>Error: " . htmlspecialchars($review['message']) . "</li>";
        }
    }
    echo "</ul>";
}


// Example Usage (Illustrative -  You'd integrate this into a form and display)

// Simulate a review submission
$reviewResult = submitReview("Awesome Widget", "This widget is fantastic!  It does everything I need.");

// Display the result
displayReviews($reviewResult);


// Example with allowed tags
$allowedTags = ['b', 'i', 'u']; // Allow bold, italics, and underline
$reviewResult2 = submitReview("Another Product", "This is a <b style='color:red;'>bold</b> and *italic* review.");
displayReviews($reviewResult2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and handles database interactions.
 *
 * @param string $product_id The ID of the product to review.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 *
 * @return bool True if the review was successfully submitted, false otherwise.
 */
function submitUserReview(
    $product_id,
    $username,
    $rating,
    $comment,
    $db_host,
    $db_name,
    $db_user,
    $db_password
) {
    // Validate inputs (Add more sophisticated validation as needed)
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required fields for review submission."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating value.");
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES ('$product_id', '$username', '$rating', '$comment')";

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Connection failed: " . $conn->connect_error); // Log the error
        return false;
    }

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        error_log("Query failed: " . $conn->error); // Log the error
        return false;
    }

    // Close the connection
    $conn->close();
}



/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 */
function displayUserReviews(
    $product_id,
    $db_host,
    $db_name,
    $db_user,
    $db_password
) {
    // Prepare the SQL query
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";

    // Database connection
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Connection failed: " . $conn->connect_error);
        echo "<p>Error: Unable to connect to the database.</p>";
        return;
    }

    // Execute the query
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>User Reviews for Product ID: " . $product_id . "</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<div class='review'>";
            echo "<strong>Username:</strong> " . $row["username"] . "<br>";
            echo "<strong>Rating:</strong> " . $row["rating"] . "<br>";
            echo "<strong>Comment:</strong> " . $row["comment"] . "<br>";
            echo "</div>";
        }
    } else {
        echo "<p>No reviews found for this product.</p>";
    }

    // Close the connection
    $conn->close();
}


// Example Usage (Simulate a database setup and some reviews)

// Create a dummy database and table if it doesn't exist
$sql_create_db = "CREATE DATABASE IF NOT EXISTS my_reviews_db";
$conn = new mysqli("localhost", "root", "", "my_reviews_db");
if ($conn) {
    $conn->query($sql_create_db);
    $conn->close();
}


$sql_create_table = "CREATE TABLE IF NOT EXISTS reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT
)";

$conn = new mysqli("localhost", "root", "", "my_reviews_db");
if ($conn) {
    $conn->query($sql_create_table);
    $conn->close();
}



// Example Review Submission
$product_id = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  Easy to use.";
$success = submitUserReview($product_id, $username, $rating, $comment, "localhost", "my_reviews_db", "root", "");

if ($success) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Error submitting review.</p>";
}


// Example Review Display (After submitting a review)
displayUserReviews($product_id, "localhost", "my_reviews_db", "root", "");


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates a basic CRUD (Create, Read, Update, Delete) operation
 * using a simple array to store reviews.  For a production environment,
 * you'd typically use a database.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews (Optional) An array of existing reviews.  If not provided, starts empty.
 *
 * @return array  The updated array of reviews.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment, array &$reviews = []): array
{
    // Validate input (basic example - expand for production)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return $reviews; // Return existing reviews if input is invalid
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return $reviews; // Return existing reviews for invalid rating
    }

    // Create the review
    $review = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


// --- Example Usage ---

// Initial reviews (empty array)
$product_reviews = [];

// Create a few reviews
$product_reviews = create_user_review('product123', 'john_doe', 4, 'Great product!', $product_reviews);
$product_reviews = create_user_review('product123', 'jane_smith', 5, 'Excellent value!', $product_reviews);
$product_reviews = create_user_review('product123', 'peter_jones', 3, 'Could be better', $product_reviews);

// Display the reviews
echo "<h2>Reviews for Product 123</h2>";
echo "<ul>";
foreach ($product_reviews as $review) {
    echo "<li><strong>Product ID:</strong> " . $review['product_id'] . "<br>";
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
}
echo "</ul>";


// --- Example of Updating a Review (Basic - more robust logic needed in real applications) ---
// Assuming you have a function to get a review by ID.  This is a simplified example.

/**
 *  Gets a review by its ID (simplified - replace with database query in production)
 * @param int $reviewId The ID of the review to retrieve.
 * @return array|null The review object if found, null otherwise.
 */
function get_review_by_id(array $reviews, int $reviewId) {
  foreach ($reviews as $review) {
    if ($review['id'] == $reviewId) {
      return $review;
    }
  }
  return null;
}


$review_to_update = get_review_by_id($product_reviews, 1); // Assuming review 1 exists
if ($review_to_update) {
    $review_to_update['comment'] = "This is an updated comment!";
    $product_reviews = $review_to_update; // Update the array
    echo "<br><h2>Updated Review:</h2>";
    echo "<pre>";
    print_r($review_to_update);
    echo "</pre>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function creates a basic user review system that allows users to submit reviews
 * and displays them in a simple format.
 *
 *  Note:  This is a simplified example and doesn't include robust security measures, 
 *        database integration, or complex features.  For a production environment, 
 *        you would need to add proper database connections, security checks (like 
 *        input validation and sanitization), and potentially more sophisticated 
 *        review management capabilities.
 */

class ReviewSystem {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $user_name  The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user_name, string $review_text) {
        // Basic validation - you'd want more robust validation in a real application.
        if (empty($user_name) || empty($review_text)) {
            return false;
        }

        $this->reviews[] = ['user' => $user_name, 'text' => $review_text];
        return true;
    }

    /**
     * Displays all reviews.
     *
     * @return void
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        if (empty($this->reviews)) {
            echo "<p>No reviews yet.</p>";
        } else {
            foreach ($this->reviews as $review) {
                echo "<h3>" . $review['user'] . "</h3>";
                echo "<p>" . $review['text'] . "</p>";
                echo "<hr>";
            }
        }
    }

    /**
     *  (Optional)  Could add methods for editing or deleting reviews here.
     */
}


// Example Usage:

// Create a review system instance
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewSystem->addReview("John Doe", "This was a great product! I highly recommend it.");
$reviewSystem->addReview("Jane Smith", "The service was excellent and the staff were friendly.");
$reviewSystem->addReview("Peter Jones", "It was okay, but a little overpriced.");

// Display the reviews
$reviewSystem->displayReviews();


// Example of handling invalid input:
$reviewSystem->addReview("", "This is a review."); // Will return false because user_name is empty
echo "<br>Adding review failed (empty username).<br>";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and manage user reviews for a given product/item.
 * It includes basic validation, saving the review to a database, and
 * generates a unique ID for the review.
 *
 * @param string $product_id  The ID of the product/item the review is for.
 * @param string $user_name   The name of the user submitting the review.
 * @string $rating         The rating given by the user (e.g., 1-5 stars).
 * @string $comment        The user's review comment.
 * @return int|false  The ID of the newly created review, or false on failure.
 */
function create_review(string $product_id, string $user_name, string $rating, string $comment) {

  // Validation: Simple checks to ensure data integrity.  Expand as needed.
  if (empty($product_id) || empty($user_name) || empty($rating) || empty($comment)) {
    return false; // Return false for invalid input
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return false; // Ensure rating is within a valid range
  }

  // ***  Database Interaction (Replace with your actual database connection details) ***
  // Assuming you have a database connection established named $dbConnection
  // and a 'reviews' table with columns: id (INT, PRIMARY KEY), product_id (INT), user_name (VARCHAR), rating (INT), comment (TEXT)

  try {
    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
            VALUES (:product_id, :user_name, :rating, :comment)";

    // Prepare the statement
    $stmt = $dbConnection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Get the last inserted ID
    $review_id = $dbConnection->lastInsertId();

    // Close the statement
    $stmt->close();

    return $review_id;

  } catch (PDOException $e) {
    // Handle database errors (e.g., connection issues, SQL syntax errors)
    error_log("Database Error: " . $e->getMessage()); // Log the error for debugging
    return false;
  }
}


// Example Usage (Assuming you have a $dbConnection object)
// In a real application, $dbConnection would be established elsewhere (e.g., through a configuration file).

//  Create a dummy database connection for demonstration purposes
//$dbConnection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example review creation
$product_id = "123";
$user_name = "John Doe";
$rating = 4;
$comment = "Great product, highly recommended!";

$review_id = create_review($product_id, $user_name, $rating, $comment);

if ($review_id) {
  echo "Review created successfully! Review ID: " . $review_id . "
";
} else {
  echo "Failed to create review.
";
}


?>


<?php

/**
 * This function processes user reviews, validates the data, and stores
 * them in a database (or an array for a simpler implementation).
 *
 * @param array $reviewData  An associative array containing review data:
 *                           - 'user': User's name or ID
 *                           - 'rating': Integer from 1 to 5
 *                           - 'comment': User's comment (optional)
 * @param string $dbConnection  (Optional) Database connection object.
 *                               If not provided, the function will store
 *                               the review in an in-memory array.
 *
 * @return bool  True if the review was successfully processed, false otherwise.
 */
function processUserReview(array $reviewData, string $dbConnection = null)
{
    // 1. Input Validation
    $errors = [];

    if (!isset($reviewData['user']) || empty($reviewData['user'])) {
        $errors[] = 'User name/ID is required.';
    }

    if (!isset($reviewData['rating']) || !is_int($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        $errors[] = 'Rating must be an integer between 1 and 5.';
    }

    if (!isset($reviewData['comment']) || empty($reviewData['comment'])) {
        // Comment is optional, so we don't require it.
    }


    // 2. Data Sanitization (IMPORTANT: Sanitize to prevent SQL Injection)
    $user = trim($reviewData['user']);
    $rating = $reviewData['rating'];
    $comment = trim($reviewData['comment'] ?? '');  // Use null coalesce operator

    // 3. Store the Review

    if (empty($errors)) {
        // Store in Database (Example using PDO)
        try {
            $stmt = $dbConnection->prepare(
                "INSERT INTO reviews (user, rating, comment) VALUES (:user, :rating, :comment)"
            );
            $stmt->bindParam(':user', $user);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            // Handle database errors (logging is highly recommended)
            error_log("Error processing review: " . $e->getMessage());
            return false;
        }

    } else {
        // Return false if there were errors
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual database connection)
// Create a dummy database connection for demonstration
$db = new PDO('mysql:host=localhost;dbname=my_database', 'username', 'password');


// Sample review data
$review1 = ['user' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!'];
$review2 = ['user' => 'Jane Smith', 'rating' => 5];
$review3 = ['user' => 'Peter Jones', 'rating' => 2, 'comment' => 'Not so great...'];


// Process the reviews
$result1 = processUserReview($review1, $db);
$result2 = processUserReview($review2, $db);
$result3 = processUserReview($review3, $db);

if ($result1) {
    echo "Review 1 processed successfully!
";
} else {
    echo "Review 1 processing failed.
";
}

if ($result2) {
    echo "Review 2 processed successfully!
";
} else {
    echo "Review 2 processing failed.
";
}

if ($result3) {
    echo "Review 3 processed successfully!
";
} else {
    echo "Review 3 processing failed.
";
}


// Example storing in an array (for a simpler version)
$reviews = [];

$result4 = processUserReview(['user' => 'Alice', 'rating' => 3], null); // No DB connection

if ($result4) {
    $reviews[] = ['user' => 'Alice', 'rating' => 3];
    echo "Review 4 processed and added to array.
";
} else {
    echo "Review 4 processing failed.
";
}

print_r($reviews);  // Output the array of reviews
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product or service being reviewed.
 * @param string $productName The name of the product or service.
 * @param string $reviewText The review text entered by the user.
 * @param int $rating The rating given by the user (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  Useful for tracking.
 * @return array  An array containing the review data and an error message (if any).
 */
function submitReview(
    string $productId,
    string $productName,
    string $reviewText,
    int $rating,
    int $userId = null  // Optional: User ID
) {

    // Input Validation - Crucial for security and data integrity
    if (empty($reviewText)) {
        return ['success' => false, 'message' => "Review text cannot be empty."];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => "Rating must be between 1 and 5."];
    }


    //  **IMPORTANT SECURITY MEASURE: Sanitize and Validate Input**
    //  This is extremely important to prevent XSS and SQL injection attacks.
    //  This example uses basic sanitization - for production, use a robust library.
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');  // Escape HTML special chars
    //  Add more sanitization/validation here depending on your requirements,
    //  e.g., length checks, character restrictions, etc.


    // **Data Storage (Simulated for demonstration)**
    // In a real application, you would save this data to a database.
    $review = [
        'productId' => $productId,
        'productName' => $productName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'userId' => $userId,
        'submissionDate' => date('Y-m-d H:i:s') // Add timestamp
    ];

    // **Logging (Good Practice)** - For debugging and analysis.
    // error_log("New review submitted: " . json_encode($review));

    return ['success' => true, 'review' => $review, 'message' => "Review submitted successfully!"];
}



/**
 * Display Reviews Function
 *
 * This function retrieves and displays reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @return array An array containing the reviews (if any) and a message.
 */
function displayReviews(string $productId) {
    // **Simulated Data Retrieval (Replace with database query)**
    //  In a real application, you would query a database to get reviews.
    $reviews = [
        'review1' => [
            'productId' => 'prod123',
            'productName' => 'Awesome Widget',
            'reviewText' => 'This widget is amazing!  Great value.',
            'rating' => 5,
            'userId' => 1,
            'submissionDate' => '2023-10-27 10:00:00'
        ],
        'review2' => [
            'productId' => 'prod123',
            'productName' => 'Awesome Widget',
            'reviewText' => 'It\'s okay, but could be better.',
            'rating' => 3,
            'userId' => 2,
            'submissionDate' => '2023-10-26 14:30:00'
        ],
    ];

    // Filter reviews for the given product ID
    $productReviews = [];
    foreach ($reviews as $key => $review) {
        if ($review['productId'] == $productId) {
            $productReviews[$key] = $review;
        }
    }


    return ['reviews' => $productReviews, 'message' => "Reviews for " . $productId . " loaded."];
}


// ------------------- Example Usage -------------------

// Submit a review
$result = submitReview('prod123', 'Awesome Widget', 'This is the best widget ever!', 5, 1);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    print_r($result['review']);
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}


// Display reviews for the product
$reviewResults = displayReviews('prod123');

if ($reviewResults['success']) {
    echo "<h3>Reviews for Awesome Widget:</h3><br>";
    if (empty($reviewResults['reviews'])) {
        echo "No reviews yet.";
    } else {
        echo "<ul>";
        foreach ($reviewResults['reviews'] as $review) {
            echo "<li>";
            echo "<strong>Product:</strong> " . $review['productName'] . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . "/5<br>";
            echo "<strong>Review:</strong> " . $review['reviewText'] . "<br>";
            echo "<strong>Submitted by:</strong> User " . $review['userId'] . "<br>";
            echo "<strong>Date:</strong> " . $review['submissionDate'] . "</li>";
        }
        echo "</ul>";
    }
} else {
    echo "Error loading reviews: " . $reviewResults['message'];
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username   The username of the reviewer.
 * @param string $rating    The rating (e.g., 1-5).
 * @param string $comment   The review text.
 *
 * @return array|string  An array containing the review data, or a string if an error occurred.
 */
function createReview(string $productId, string $username, string $rating, string $comment) {
  // Input validation - Basic example, expand as needed
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return "Error: All fields are required.";
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  // Data sanitization - Use proper escaping for database safety
  $productId = filter_var($productId, FILTER_SANITIZE_STRING); // Escape special chars
  $username = filter_var($username, FILTER_SANITIZE_STRING);
  $rating = (int)$rating; // Convert to integer
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);


  // --- Database interaction -  Replace with your database connection and query
  // This is a placeholder, and you need to adapt it to your setup.

  $db_host = "localhost";
  $db_name = "your_database_name";
  $db_user = "your_username";
  $db_password = "your_password";


  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    return "Error connecting to database: " . $e->getMessage();
  }


  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':username', $username);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  if ($stmt->execute()) {
    return "Review submitted successfully!";
  } else {
    return "Error submitting review: " . $stmt->errorInfo()[2];
  }

  // --- End Database Interaction ---
}

// Example Usage (for demonstration - not integrated with a database)
// $reviewResult = createReview("123", "JohnDoe", 4, "Great product!");
// echo $reviewResult; // Output:  "Review submitted successfully!"  (if successful)

// OR

// $reviewResult = createReview("456", "JaneSmith", "Two", "Okay, but could be better.");
// echo $reviewResult; // Output: "Error: Rating must be a number between 1 and 5."
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user writing the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  The rating given by the user (1-5).
 *
 * @return array An array containing success/failure status and optionally the review ID.
 */
function createReview(string $productId, string $userName, string $reviewText, int $rating): array
{
    // Sanitize inputs - Important for security!
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $userName = filter_var($userName, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $rating = intval($rating);  // Ensure rating is an integer

    // Validate rating
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be between 1 and 5.'];
    }

    // **In a real application, you would connect to a database here.**
    // This is a placeholder for demonstration.

    // Simulate storing the review (replace with your database logic)
    $reviewId = generateUniqueId(); // Use a function to generate a unique ID
    $reviewData = [
        'product_id' => $productId,
        'user_name' => $userName,
        'review_text' => $reviewText,
        'rating' => $rating,
        'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
    ];


    // Store the review in a data structure (replace with database insertion)
    // Example: $reviews[$productId][] = $reviewData;


    return ['success' => true, 'review_id' => $reviewId];
}

/**
 * Generate a unique ID for a review
 *  (Replace with a more robust solution like UUID)
 * @return string
 */
function generateUniqueId(): string
{
    return uniqid();
}



// -------------------- Example Usage --------------------

// 1. Create a review
$productId = 'product123';
$userName = 'John Doe';
$reviewText = 'This is a great product! I highly recommend it.';
$rating = 5;

$result = createReview($productId, $userName, $reviewText, $rating);

if ($result['success']) {
    echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}


// 2. Example with invalid rating
$result = createReview($productId, $userName, $reviewText, 0);
if ($result['success']) {
   echo "Review created successfully! Review ID: " . $result['review_id'] . "
";
} else {
   echo "Error creating review: " . $result['message'] . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param array $reviews An array to store existing reviews.
 *
 * @return array An updated array of reviews with the new review added.
 */
function createAndDisplayReview(string $productName, string $userId, string $reviewText, array &$reviews) {
  // Validate inputs (basic example - expand this for more robust validation)
  if (empty($reviewText)) {
    return $reviews; // Don't add empty reviews
  }

  // Create the review object (could be an object or array, this is just an example)
  $review = [
    'id' => count($reviews) + 1,
    'userId' => $userId,
    'productName' => $productName,
    'reviewText' => $reviewText,
    'timestamp' => time()
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Optionally, you could sort the reviews by timestamp
  usort($reviews, function($a, $b) {
    return $a['timestamp'] - $b['timestamp'];
  });

  return $reviews;
}


/**
 * Display Reviews
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for " . $GLOBALS['productName'] . "</h2>"; // Assuming $productName is globally defined

  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<h3>Review by User ID: " . $review['userId'] . "</h3>";
    echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>"; // Sanitize HTML output
    echo "<p>Timestamp: " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
  }
}


// --- Example Usage ---

// Initialize reviews (an array to store the reviews)
$reviews = [];

//  For demonstration, let's set a global product name
$GLOBALS['productName'] = "Awesome Widget";

// Create some reviews
$reviews = createAndDisplayReview("Awesome Widget", "user123", "This widget is amazing! I highly recommend it.", $reviews);
$reviews = createAndDisplayReview("Awesome Widget", "user456", "Great product, works as advertised.", $reviews);
$reviews = createAndDisplayReview("Awesome Widget", "user123", "Could be better, but not bad.", $reviews);

// Display the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic input validation and sanitization.  For a production environment,
 * you'd want to use a more robust validation and sanitization system and a database connection.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $rating The rating provided by the user (1-5).
 * @param string $comment The user's written review.
 * @param string $username The username of the user submitting the review.
 * @return array An array containing the review data or an error message.
 */
function submit_review(string $productId, string $rating, string $comment, string $username): array
{
  // Input Validation
  if (empty($productId)) {
    return ['error' => 'Product ID cannot be empty.'];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['error' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['error' => 'Comment cannot be empty.'];
  }
  if (empty($username)) {
    return ['error' => 'Username cannot be empty.'];
  }

  // Sanitize input -  Important for security!
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);
  $username = filter_var($username, FILTER_SANITIZE_STRING);

  // Create review data
  $reviewData = [
    'productId' => $productId,
    'rating' => $rating,
    'comment' => $comment,
    'username' => $username,
    'timestamp' => time() // Add timestamp for ordering
  ];

  // For demonstration purposes, we'll just return the data.
  // In a real application, you would save this data to a database.
  return $reviewData;
}

/**
 * Display a Single Review
 *
 * Displays a single review from a list of reviews.
 *
 * @param array $review A single review object.
 * @return string HTML representation of the review.
 */
function display_review(array $review): string
{
    $timestamp = date('Y-m-d H:i:s', strtotime($review['timestamp']));

    return "<div class='review'>
                <strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>
                <strong>Rating:</strong> " . $review['rating'] . " / 5<br>
                <strong>Timestamp:</strong> " . $timestamp . "<br>
                <strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "
             </div>";
}

/**
 * Display All Reviews for a Product
 *
 *  Displays all reviews for a given product.
 *  Uses the 'display_review' function to render each review.
 *  Sorts the reviews by timestamp (newest first).
 *
 * @param array $reviews An array of review objects.
 * @return string HTML representation of all the reviews.
 */
function display_all_reviews(array $reviews): string
{
    // Sort reviews by timestamp (newest first)
    usort($reviews, function ($a, $b) {
        return $b['timestamp'] - $a['timestamp'];
    });

    $html = '';
    foreach ($reviews as $review) {
        $html .= display_review($review);
    }

    return $html;
}


// Example Usage:
$productId = '123';
$rating = 4;
$comment = 'This product is great!';
$username = 'john.doe';

$reviewData = submit_review($productId, $rating, $comment, $username);

if (isset($reviewData['error'])) {
    echo "<p>Error: " . $reviewData['error'] . "</p>";
} else {
    echo "Review submitted successfully!";
    echo "<br><br>";

    // Example of displaying reviews for a product (Simulated data for demonstration)
    $reviews = [
        ['productId' => '123', 'rating' => 5, 'comment' => 'Excellent product!', 'username' => 'jane.smith', 'timestamp' => time() - 3600),  // 1 hour ago
        ['productId' => '123', 'rating' => 3, 'comment' => 'Good, but could be better.', 'username' => 'peter.jones', 'timestamp' => time() - 7200), // 2 hours ago
        ['productId' => '123', 'rating' => 4, 'comment' => 'Very happy with this purchase.', 'username' => 'mary.brown', 'timestamp' => time() - 10800),  // 3 hours ago
    ];

    echo "<h2>Reviews for Product " . $productId . "</h2>";
    echo display_all_reviews($reviews);

}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $productName The name of the product. (Optional, used for display)
 * @param string $reviewText The user-submitted review text.
 * @param array $userCredentials (Optional) An array containing user information for authentication. 
 *                                 If not provided, assumes review is anonymous.
 *
 * @return array An array containing the result of the operation:
 *   - 'success': True if the review was created successfully.
 *   - 'message': A message indicating the outcome (e.g., success or error).
 *   - 'reviewId': The ID of the newly created review (if successful).
 */
function createReview(string $productId, string $productName, string $reviewText, array $userCredentials = []): array
{
    // Basic input validation - add more robust validation as needed
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }

    //  Simulate database interaction - replace with your actual database code
    $reviewId = generateUniqueId(); // Use a function to generate unique IDs

    //  Optional:  Store user credentials (if provided) - not shown here,
    //  but you'd typically check user existence and authorization.

    //  Simulate saving the review to the database
    $saved = simulateSaveReview($reviewId, $productId, $reviewText, $userCredentials);

    if ($saved) {
        return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];
    } else {
        return ['success' => false, 'message' => 'Failed to save review.', 'reviewId' => null];
    }
}


/**
 *  Simulates generating a unique ID.  Replace with your unique ID generation method.
 * @return string
 */
function generateUniqueId(): string {
    return uniqid();
}


/**
 * Simulates saving the review to a database. Replace with your database logic.
 * @param string $reviewId
 * @param string $productId
 * @param string $reviewText
 * @param array $userCredentials
 * @return bool
 */
function simulateSaveReview(string $reviewId, string $productId, string $reviewText, array $userCredentials) {
    // Simulate success - replace with your database interaction
    echo "Saving review ID: " . $reviewId . " for product: " . $productId . " with text: " . $reviewText . "
";
    return true;
}


// --------------------- Example Usage ---------------------
// Simulate a product
$productId = '12345';
$productName = 'Awesome Widget';

// Example 1: Anonymous Review
$reviewResult = createReview($productId, $productName, 'This is a fantastic widget!');
print_r($reviewResult);

// Example 2:  With User Credentials (This is just a placeholder)
$userCredentials = ['username' => 'john.doe', 'password' => 'secretpassword'];
$reviewResult2 = createReview($productId, $productName, 'Excellent product!', $userCredentials);
print_r($reviewResult2);

?>


<?php

/**
 * User Review Function - Processes and displays user reviews.
 */
class UserReviewFunction
{
    /**
     * Processes a single user review.
     *
     * @param string $reviewText  The review text provided by the user.
     * @param int    $user_id     The ID of the user submitting the review.
     * @param int    $product_id  The ID of the product being reviewed.
     * @return array  An array containing the processed review data.
     */
    public function processReview(string $reviewText, int $user_id, int $product_id)
    {
        // Sanitize input (important for security)
        $reviewText = htmlspecialchars($reviewText);
        $reviewText = trim($reviewText); // Remove leading/trailing whitespace

        // Basic validation (you'd likely want more robust validation in a real application)
        if (empty($reviewText)) {
            return [
                'success' => false,
                'message' => 'Review cannot be empty.',
                'review' => null,
                'errors' => ['review' => 'Review cannot be empty.']
            ];
        }

        // Create a review object (could be more sophisticated if needed)
        $review = [
            'user_id' => $user_id,
            'product_id' => $product_id,
            'review_text' => $reviewText,
            'date_created' => date('Y-m-d H:i:s') // Add timestamp
        ];

        return [
            'success' => true,
            'message' => 'Review submitted successfully!',
            'review' => $review,
            'errors' => []
        ];
    }

    /**
     * Displays a list of reviews for a product.
     *
     * @param array $reviews  An array of review data.
     * @return string        HTML representation of the reviews.
     */
    public function displayReviews(array $reviews)
    {
        if (empty($reviews)) {
            return "<p>No reviews yet.</p>";
        }

        $html = '<ul>';
        foreach ($reviews as $review) {
            if ($review['success']) {
                $html .= '<li>';
                $html .= '<strong>' . htmlspecialchars($review['review_text']) . '</strong>' .  //Escape for HTML output
                         '<br>'.
                         'By User ID: ' . $review['user_id']; // Include user ID
                $html .= '</li>';
            } else {
                $html .= '<li>Error processing review: ' . htmlspecialchars($review['message']) . '</li>';
            }
        }
        $html .= '</ul>';
        return $html;
    }
}

// Example Usage (for testing)
$reviewFunction = new UserReviewFunction();

// Test 1: Successful Review
$reviewResult1 = $reviewFunction->processReview('This product is amazing!', 123, 456);
echo $reviewFunction->displayReviews($reviewResult1['review']); // Prints the HTML of the review

// Test 2: Empty Review
$reviewResult2 = $reviewFunction->processReview('', 789, 101);
echo $reviewFunction->displayReviews($reviewResult2['review']); // Shows "No reviews yet." or error message

// Test 3:  Error handling
$reviewResult3 = $reviewFunction->processReview('Invalid review', 999, 111);
echo $reviewFunction->displayReviews($reviewResult3['review']);  //Shows an error message.
?>


<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $reviews = []; // Array to store reviews (simplified for this example)

    /**
     * Adds a new review to the database (simulated).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $name The reviewer's name.
     * @param string $comment The review comment.
     * @param int $rating The rating (1-5).
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $name, string $comment, int $rating): bool
    {
        // Basic input validation - improve this in a real application!
        if (!$productId || !$name || !$comment || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'productId' => $productId,
            'name' => $name,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of reviews for the product, or an empty array if none are found.
     */
    public function getReviewsByProduct(int $productId): array
    {
        return array_filter($this->reviews, function($review) => $review['productId'] === $productId);
    }

    /**
     * Retrieves a single review by its ID (simulated).  In a real database, you'd use a unique ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review if found, null otherwise.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $reviewId) {  //  Consider using a real unique ID
                return $review;
            }
        }
        return null;
    }


    /**
     * Displays reviews for a product.
     *
     * @param int $productId The ID of the product.
     */
    public function displayReviews(int $productId)
    {
        $reviews = $this->getReviewsByProduct($productId);

        if (empty($reviews)) {
            echo "<p>No reviews found for this product.</p>";
        } else {
            echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<strong>Name:</strong> " . htmlspecialchars($review['name']) . "<br>";
                echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
                echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
                echo "<strong>Date:</strong> " . $review['date'] . "</li>";
            }
            echo "</ul>";
        }
    }
}


// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview(123, "John Doe", "Great product!", 5);
$reviewSystem->addReview(123, "Jane Smith", "Could be better.", 3);
$reviewSystem->addReview(456, "Peter Jones", "Excellent value!", 4);

// Display reviews for product 123
$reviewSystem->displayReviews(123);

// Display reviews for product 456
$reviewSystem->displayReviews(456);

//Get a review by ID (simulated)
$review = $reviewSystem->getReviewById(1);
if ($review) {
    echo "<p>Found Review: " . htmlspecialchars($review['name']) . " - " . htmlspecialchars($review['comment']) . "</p>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * Reviews Class - Manages user reviews for a product or item.
 */
class Reviews {

    private $reviews = []; // Store the reviews in an array
    private $productId; // The ID of the product/item this reviews are for

    /**
     * Constructor - Initializes the Reviews object with a product ID.
     *
     * @param int $productId The ID of the product/item.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $name The reviewer's name.
     * @param string $rating The rating given (e.g., 1-5 stars).
     * @param string $comment The reviewer's comments.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $rating, string $comment): bool {
        if (empty($name) || empty($rating) || empty($comment)) {
            return false; // Validation: Ensure all fields are filled.
        }

        // Validation:  More robust validation could be added here.
        $rating = (int) $rating; // Convert rating to integer.
        if ($rating < 1 || $rating > 5) {
            return false; // Rating must be between 1 and 5.
        }

        $review = [
            'name' => $name,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date.
        ];
        $this->reviews[] = $review;
        return true;
    }

    /**
     * Get all reviews for the product.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get average rating for the product.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }
        return $totalRating / count($this->reviews);
    }
}

// Example Usage:

// Create a Reviews object for a product with ID 123
$reviews = new Reviews(123);

// Add some reviews
$reviews->addReview("Alice", 5, "Great product! Highly recommended.");
$reviews->addReview("Bob", 4, "Good value for money.");
$reviews->addReview("Charlie", 3, "It's okay, could be better.");

// Get all reviews
$allReviews = $reviews->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get the average rating
$averageRating = $reviews->getAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews yet.") ;

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or service.
 */
class UserReview {

    /**
     * @var int Product ID
     */
    private $productId;

    /**
     * @var string User's Name
     */
    private $userName;

    /**
     * @var string User's Review Text
     */
    private $reviewText;

    /**
     * @var int Rating (1-5)
     */
    private $rating;

    /**
     * @var DateTime Timestamp of review submission
     */
    private $timestamp;

    /**
     * Constructor
     *
     * @param int $productId
     * @param string $userName
     * @param string $reviewText
     * @param int $rating
     */
    public function __construct(int $productId, string $userName, string $reviewText, int $rating) {
        $this->productId = $productId;
        $this->userName = $userName;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
        $this->timestamp = new DateTime(); // Automatically set the timestamp
    }

    /**
     * Get Product ID
     *
     * @return int
     */
    public function getProductId(): int {
        return $this->productId;
    }

    /**
     * Get User Name
     *
     * @return string
     */
    public function getUserName(): string {
        return $this->userName;
    }

    /**
     * Get Review Text
     *
     * @return string
     */
    public function getReviewText(): string {
        return $this->reviewText;
    }

    /**
     * Get Rating
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get Timestamp
     *
     * @return DateTime
     */
    public function getTimestamp(): DateTime {
        return $this->timestamp;
    }

    /**
     * Display Review
     *  This method formats the review data into a user-friendly string.
     *
     * @return string
     */
    public function displayReview(): string {
        return sprintf(
            "Review by: %s
" .
            "Rating: %d
" .
            "Review: %s
" .
            "Submitted on: %s",
            $this->userName,
            $this->rating,
            $this->reviewText,
            $this->timestamp->format('Y-m-d H:i:s') // Formatted timestamp
        );
    }
}


/**
 * User Review Function (Demonstration)
 */
function processUserReview(
    int $productId,
    string $userName,
    string $reviewText,
    int $rating
): UserReview|null {
    // Validation - Add your own validation logic here.
    if (empty($userName)) {
        error_log("Invalid review: User name cannot be empty.");  // Log the error
        return null;
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid review: Rating must be between 1 and 5.");
        return null;
    }

    // Create the review object
    $review = new UserReview($productId, $userName, $reviewText, $rating);

    // Return the review object
    return $review;
}


// Example Usage:
$productId = 123;
$userName = "John Doe";
$reviewText = "Great product!  I highly recommend it.";
$rating = 5;

$review = processUserReview($productId, $userName, $reviewText, $rating);

if ($review) {
    echo "--- Review ---";
    echo $review->displayReview();
    echo "
";
} else {
    echo "Review processing failed.  Check the logs for details.";
}

// Example with invalid input:
$invalidReview = processUserReview(456, "", "Some text", 3);  // Empty name
if (!$invalidReview) {
    echo "Invalid review example failed as expected.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userEmail The email address of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating The rating given for the product (e.g., 1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a new user is created.
 *
 * @return array Returns an array with the following keys:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message describing the result of the operation.
 *   - 'reviewId': The ID of the newly created review (if success).
 *   - 'review': The review data (if success).
 */
function create_user_review(
    string $productId,
    string $userEmail,
    string $reviewText,
    int $rating,
    int $userId = null // Optional: User ID
) {
    // Input validation (Example - adjust as needed)
    if (empty($productId)) {
        return [
            'success' => false,
            'message' => 'Product ID cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (empty($userEmail)) {
        return [
            'success' => false,
            'message' => 'User email cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'reviewId' => null,
            'review' => null,
        ];
    }


    // ---  Database Interaction - Replace with your actual database logic ---
    // This is a simplified example using placeholders.  You should
    // use prepared statements and proper error handling in a real application.

    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Check if the user already exists
        $userExists = $db->prepare("SELECT id FROM users WHERE email = :email");
        $userExists->bindParam(':email', $userEmail);
        $userExists->execute();
        $userRow = $userRow->fetch(PDO::FETCH_ASSOC);

        if ($userRow) {
            $userId = $userRow['id']; // Use existing user ID
        } else {
            // Create a new user
            $stmt = $db->prepare("INSERT INTO users (email) VALUES (:email)");
            $stmt->bindParam(':email', $userEmail);
            $stmt->execute();
            $userId = $db->lastInsertId(); // Get the ID of the newly inserted user
        }


        // Create the review
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating) VALUES (:product_id, :user_id, :review_text, :rating)");
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);
        $stmt->execute();
        $reviewId = $db->lastInsertId();


        return [
            'success' => true,
            'message' => 'Review created successfully.',
            'reviewId' => $reviewId,
            'review' => [
                'id' => $reviewId,
                'product_id' => $productId,
                'user_id' => $userId,
                'review_text' => $reviewText,
                'rating' => $rating,
                'user_email' => $userEmail, // Include email for easy retrieval
            ],
        ];

    } catch (PDOException $e) {
        // Handle database errors
        return [
            'success' => false,
            'message' => 'Database error: ' . $e->getMessage(),
            'reviewId' => null,
            'review' => null,
        ];
    }
}


// Example Usage:
// $result = create_user_review('123', 'test@example.com', 'This is a great product!', 5);
// print_r($result);

?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, including storing them, retrieving them, and displaying them.
 */
class Review {

    private $db; // Database connection (implementation depends on your database)

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review to the database.
     *
     * @param string $userId    The ID of the user submitting the review.
     * @param string $productID The ID of the product being reviewed.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment  The user's review comment.
     * @return bool          True on success, false on failure.
     */
    public function addReview(string $userId, string $productID, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                    VALUES (:user_id, :product_id, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':product_id', $productID);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $result = $stmt->execute();
            return $result;

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }


    /**
     * Get all reviews for a given product.
     *
     * @param string $productID The ID of the product to retrieve reviews for.
     * @return array|false An array of review objects, or false if no reviews are found.
     */
    public function getReviewsByProduct(string $productID) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productID);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
                $reviews[] = $row;
            }
            return $reviews;

        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Get a single review by ID.
     *
     * @param int $reviewID The ID of the review to retrieve.
     * @return object|false A review object, or false if the review is not found.
     */
    public function getReviewById(int $reviewID) {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_OBJ);
            return $row;

        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return false;
        }
    }



    /**
     *  (Optional)  Example function to update a review.  Not essential for basic review functionality.
     *
     * @param int $reviewID The ID of the review to update.
     * @param string $newRating The new rating.
     * @param string $newComment The new comment.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewID, string $newRating, string $newComment) {
        try {
            $sql = "UPDATE reviews SET rating = :new_rating, comment = :new_comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->bindParam(':new_rating', $newRating);
            $stmt->bindParam(':new_comment', $newComment);

            $result = $stmt->execute();
            return $result;

        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * (Optional) Example function to delete a review.
     *
     * @param int $reviewID The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewID) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewID);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }


}


// Example usage (assuming you have a database connection named $db)
// $review = new Review($db);

// // Add a review
// $review->addReview(123, 456, 5, "Great product!");

// // Get reviews for a product
// $reviews = $review->getReviewsByProduct(456);
// if ($reviews) {
//     foreach ($reviews as $review) {
//         echo "User ID: " . $review->user_id . "<br>";
//         echo "Rating: " . $review->rating . "<br>";
//         echo "Comment: " . $review->comment . "<br><br>";
//     }
// } else {
//     echo "No reviews found for this product.";
// }
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create and manage user reviews for a product or item.
 *
 *  @param string $productId  The unique identifier for the product being reviewed.
 *  @param string $productName The name of the product. (Used for display)
 *  @param string $reviewerName The name of the user submitting the review.
 *  @param string $reviewText The text content of the review.
 *  @param int $rating      The rating given by the user (1-5).
 *  @param string $timestamp  (Optional) A timestamp for the review.  If not provided, it will be generated.
 *
 *  @return bool  True if the review was successfully created, false otherwise.
 */
function createReview(string $productId, string $productName, string $reviewerName, string $reviewText, int $rating, string $timestamp = null) {
    // --- Validation ---
    if (empty($productId) || empty($productName) || empty($reviewerName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return false; // Invalid input
    }

    // --- Data Sanitization (Important!) ---
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);


    // --- Store the review (Simulated Database Interaction) ---
    // In a real application, you would connect to a database here.

    // Create a review object (just for demonstration)
    $review = [
        'productId' => $productId,
        'productName' => $productName,
        'reviewerName' => $reviewerName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => $timestamp ?: time() // Use current time if timestamp is not provided
    ];

    // Simulate saving to a database (replace with actual database code)
    // echo "Saving review: " . print_r($review, true) . "
"; // For debugging
    //  For example, you might use a database connection and prepare a statement:
    //  $db = new DatabaseConnection();  // Assuming you have a DatabaseConnection class
    //  $stmt = $db->prepare("INSERT INTO reviews (productId, productName, reviewerName, reviewText, rating, timestamp) VALUES (?, ?, ?, ?, ?, ?)");
    //  $stmt->execute([$productId, $productName, $reviewerName, $reviewText, $rating, $timestamp ?: time()]);
    //  $reviewId = $db->lastInsertId();


    // Mock successful save
    return true;  // Indicate successful creation
}


// --- Example Usage ---

// Create a review
$product_id = "123";
$product_name = "Awesome Gadget";
$reviewer = "John Doe";
$review = "This gadget is amazing!  I love it.";
$rating = 4;

$success = createReview($product_id, $product_name, $reviewer, $review, $rating);

if ($success) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}

// Example with timestamp
$success = createReview($product_id, $product_name, $reviewer, $review, $rating, date("Y-m-d H:i:s"));
if($success){
    echo "Review created with timestamp.
";
}
else{
    echo "Error creating review with timestamp.
";
}
?>


<?php

/**
 * This function creates a user review object with basic information.
 *
 * @param string $username  The name of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment   The user's written comment about the item/service.
 *
 * @return array An array containing the user review data.
 */
function createReview(string $username, string $rating, string $comment): array
{
  // Validate input (add more validation as needed for your application)
  if (empty($username)) {
    throw new InvalidArgumentException("Username cannot be empty.");
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
  }

  if (empty($comment)) {
    throw new InvalidArgumentException("Comment cannot be empty.");
  }


  return [
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => date('Y-m-d H:i:s'), // Add timestamp for tracking
  ];
}


// Example Usage:
try {
  $review1 = createReview("JohnDoe", 4, "Great product!  Works exactly as advertised.");
  echo "Review 1: " . print_r($review1, true) . PHP_EOL;

  $review2 = createReview("JaneSmith", 5, "Excellent service, highly recommend!");
  echo "Review 2: " . print_r($review2, true) . PHP_EOL;

  // Example of an invalid review (to demonstrate validation)
  // $invalidReview = createReview("", 3, "This is a comment.");  // Throws an exception

} catch (InvalidArgumentException $e) {
  echo "Error creating review: " . $e->getMessage() . PHP_EOL;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 * It includes functionality for adding new reviews, displaying existing reviews,
 * updating reviews, and deleting reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $dbConnection A database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the operation was successful, false otherwise.
 *   - 'message': A message describing the outcome of the operation.
 *   - 'reviews':  An array of review objects (or an empty array if no reviews exist).
 */
function create_manage_reviews(string $productId, string $username, string $rating, string $comment, array $dbConnection)
{
    $success = false;
    $message = '';
    $reviews = [];

    // 1. Retrieve Existing Reviews
    $query = "SELECT * FROM reviews WHERE productId = ?";
    $stmt = $dbConnection->prepare($query);
    $stmt->bind_param("s", $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    }

    // 2. Create New Review
    if (empty($reviews)) {
        // If no reviews exist, create a new one
        $query = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
        $stmt = $dbConnection->prepare($query);
        $stmt->bind_param("sss", $productId, $username, $comment);
        $result = $stmt->execute();

        if ($result) {
            $success = true;
            $message = "Review added successfully!";
        } else {
            $success = false;
            $message = "Error adding review: " . $stmt->error;
        }
    } else {
        // If reviews exist, check for duplicate usernames
        $usernameExists = false;
        foreach ($reviews as $review) {
            if ($review['username'] === $username) {
                $usernameExists = true;
                break;
            }
        }

        if (!$usernameExists) {
            // Create new review
            $query = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
            $stmt = $dbConnection->prepare($query);
            $stmt->bind_param("sss", $productId, $username, $comment);
            $result = $stmt->execute();

            if ($result) {
                $success = true;
                $message = "Review added successfully!";
            } else {
                $success = false;
                $message = "Error adding review: " . $stmt->error;
            }
        } else {
            $success = false;
            $message = "Error: User already reviewed this product.";
        }
    }

    // 3. Return Results
    return [
        'success' => $success,
        'message' => $message,
        'reviews' => $reviews
    ];
}

// Example Usage (Illustrative - requires database setup)
// Assuming you have a database connection object $dbConnection
/*
$productId = "123";
$username = "JohnDoe";
$rating = 5;
$comment = "Great product, highly recommended!";

$result = create_manage_reviews($productId, $username, $rating, $comment, $dbConnection);

if ($result['success']) {
    echo "Message: " . $result['message'] . "<br>";
    echo "Reviews: ";
    foreach ($result['reviews'] as $review) {
        echo "Product ID: " . $review['productId'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
    }
} else {
    echo "Error: " . $result['message'];
}
*/

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and basic manipulation of user reviews.
 */
class UserReview {

    private $reviews = [];
    private $reviewIdCounter = 1;

    /**
     * Creates a new user review.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param string $productName The name of the product the review is for.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     *
     * @return int The ID of the newly created review.
     * @throws InvalidArgumentException If the rating is invalid.
     */
    public function createReview(int $userId, string $productName, string $rating, string $comment): int
    {
        // Validate the rating
        $rating = (int)$rating;
        if ($rating < 1 || $rating > 5) {
            throw new InvalidArgumentException("Invalid rating. Rating must be between 1 and 5.");
        }

        $review = [
            'reviewId' => $this->reviewIdCounter++,
            'userId' => $userId,
            'productName' => $productName,
            'rating' => $rating,
            'comment' => $comment,
            'dateCreated' => date('Y-m-d H:i:s') // Add timestamp for date creation
        ];

        $this->reviews[] = $review;
        return $review['reviewId'];
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null The review object if found, null otherwise.
     */
    public function getReview(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] === $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param string $productName The name of the product to filter by.
     *
     * @return array An array of review objects for the specified product.
     */
    public function getReviewsByProduct(string $productName): array
    {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productName'] === $productName) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $userId The new user ID (optional, if changing user).
     * @param string $productName The new product name (optional, if changing product).
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $userId = null, string $productName = null, string $rating = null, string $comment = null): bool
    {
        $review = $this->getReview($reviewId);
        if (!$review) {
            return false;
        }

        $review['userId'] = $userId !== null ? $userId : $review['userId'];
        $review['productName'] = $productName !== null ? $productName : $review['productName'];
        $review['rating'] = $rating !== null ? $rating : $review['rating'];
        $review['comment'] = $comment !== null ? $comment : $review['comment'];
        $review['dateCreated'] = date('Y-m-d H:i:s');  //Re-set the date on update

        return true;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['reviewId'] === $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Returns all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    // Add other methods as needed, like sorting, filtering, etc.
}


// Example Usage:
try {
    $reviews = new UserReview();

    // Create a review
    $reviewId = $reviews->createReview(1, 'Laptop X1', 4, 'Great laptop, fast and reliable!');

    // Retrieve the review
    $review = $reviews->getReview($reviewId);
    print_r($review);

    // Get reviews for a specific product
    $laptopReviews = $reviews->getReviewsByProduct('Laptop X1');
    print_r($laptopReviews);

    //Update a review
    $reviews->updateReview($reviewId, 2, 'Laptop X1', 5, 'Absolutely amazing!');

    // Get the updated review
    $updatedReview = $reviews->getReview($reviewId);
    print_r($updatedReview);

    //Delete a review
    $reviews->deleteReview($reviewId);

    // Get all reviews
    $allReviews = $reviews->getAllReviews();
    print_r($allReviews);


} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality to store and retrieve user reviews.
 * It's a simplified example and can be extended with features like
 * rating systems, moderation, and more.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($username, $reviewText) {
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'review' => $reviewText,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for when the review was created
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific item (e.g., product, service).
     *  This is a placeholder - you'd likely store item IDs linked to reviews.
     *
     * @param int $itemId The ID of the item.
     * @return array An array of review objects for the item.
     */
    public function getReviewsForItem($itemId) {
        // In a real application, you'd likely query a database here
        // to get reviews associated with this item ID.
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            // Example: Assume reviews are associated with item ID 1
            if ($review['itemId'] == 1) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     *  Adds a simple "helpful" count (can be extended for more sophisticated rating systems).
     *
     * @param int $itemId The ID of the item.
     * @return void
     */
    public function markAsHelpful($itemId) {
        //In a real implementation, you'd likely update a database record
        //to increment the 'helpful' count.
        //This is just a placeholder.
    }
}


/**
 * User Review Review Function (Example usage & testing)
 */
function reviewUserFunction($review_text, $user_name) {

    // 1. Create a Review object
    $review = new UserReview();

    // 2. Add the review
    $success = $review->addReview($user_name, $review_text);

    // 3. Handle the result
    if ($success) {
        echo "Review added successfully for user: " . $user_name . "
";
    } else {
        echo "Error adding review. Please ensure both username and review text are provided.
";
    }

    // 4. Example - Retrieving all reviews
    $all_reviews = $review->getAllReviews();
    echo "All reviews:
";
    foreach ($all_reviews as $review) {
        echo "- " . $review['username'] . ": " . $review['review'] . "
";
    }
}


// Example Usage:
$review_text = "This product is amazing!  I highly recommend it.";
$user_name = "JohnDoe";

reviewUserFunction($review_text, $user_name);

$review_text2 = "Not so great. Needs improvement.";
$user_name2 = "JaneSmith";

reviewUserFunction($review_text2, $user_name2);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes data sanitization, validation, and display logic.
 *
 * @param string $user_name   The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param array  $reviews    (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *   - 'reviews':  An updated array of reviews (including the new one).
 *   - 'success':  True if the review was submitted successfully, false otherwise.
 *   - 'error':    Error message if there was an error, null otherwise.
 */
function submitReview(string $user_name, string $review_text, array &$reviews = [])
{
    // Sanitize input to prevent XSS and SQL injection
    $user_name = htmlspecialchars($user_name);
    $review_text = htmlspecialchars($review_text);

    // Validate input
    if (empty($user_name) || empty($review_text)) {
        return ['success' => false, 'error' => 'User name and review text cannot be empty.', 'reviews' => $reviews];
    }

    // Add the new review to the array
    $reviews[] = ['user' => $user_name, 'text' => $review_text, 'date' => date('Y-m-d H:i:s')];

    return ['success' => true, 'error' => null, 'reviews' => $reviews];
}


// Example Usage:

// Simulate a simple database (for demonstration)
$stored_reviews = [];

// Simulate a user submitting a review
$user_name = 'John Doe';
$review_text = 'This product is amazing! I highly recommend it.';
$result = submitReview($user_name, $review_text, $stored_reviews);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review:</p>";
    echo "<p>" . $result['reviews'][count($result['reviews']) - 1]['text'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
}

// Submit another review
$user_name = 'Jane Smith';
$review_text = 'It could be better.  A few things need improvement.';
$result = submitReview($user_name, $review_text, $stored_reviews);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    echo "<p>Review:</p>";
    echo "<p>" . $result['reviews'][count($result['reviews']) - 1]['text'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['error'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It demonstrates basic database interactions and data sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user writing the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment.
 * @param string $db_connection A database connection object.
 *
 * @return array An array containing the result of the operation (e.g., success/failure message).
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection)
{
    // Validate and sanitize inputs (important for security!)
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT); // Ensure rating is an integer
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // Check if validation passed
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        return ['success' => false, 'message' => 'All fields are required.'];
    }

    // Validate rating range (example: 1-5)
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Data preparation for SQL query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $db_connection->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the query
    if ($stmt->execute()) {
        return ['success' => true, 'message' => 'Review created successfully!'];
    } else {
        return ['success' => false, 'message' => 'Error creating review: ' . print_r($stmt->errorInfo(), true)];
    }
}


// Example usage (assuming you have a database connection established)
// This is just an example; you'll need to replace with your actual database connection.
//  and the table setup.

/*
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Example: Creating a review
$review_result = create_user_review('123', '456', 4, 'Great product!', $db_connection);
print_r($review_result);

// Example: Error handling
$review_result = create_user_review('', '456', 4, 'Great product!', $db_connection);
print_r($review_result);
*/

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and view reviews for a product.
 *
 * It includes functionalities for:
 * - Creating a new review
 * - Displaying existing reviews
 * - Basic validation (to prevent spam/invalid input)
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The review comment.
 * @param array $reviews (Optional) An array of existing reviews to be passed for display.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects.
 *   - 'new_review_success': True if the new review was successfully added, false otherwise.
 *   - 'error': An error message if something went wrong, or null if no error.
 */
function create_and_display_reviews(string $product_id, string $name, string $comment, array &$reviews = []) {

    // Input validation (basic - you should enhance this for a real application)
    if (empty($name)) {
        return ['reviews' => $reviews, 'new_review_success' => false, 'error' => 'Name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['reviews' => $reviews, 'new_review_success' => false, 'error' => 'Comment cannot be empty.'];
    }

    // Create the review object (you can expand this with more details like date, rating, etc.)
    $review = [
        'product_id' => $product_id,
        'name' => $name,
        'comment' => $comment,
        'timestamp' => time()
    ];

    // Add the new review to the array
    $reviews[] = $review;

    return ['reviews' => $reviews, 'new_review_success' => true, 'error' => null];
}


// Example Usage:

// Initialize an empty array of reviews
$reviews = [];

// Create a new review
$result = create_and_display_reviews('product_123', 'John Doe', 'Great product!  I highly recommend it.');

if ($result['new_review_success']) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review: " . $result['error'] . "
";
}

// Display all reviews
echo "<h2>All Reviews for Product 123:</h2>
";
foreach ($result['reviews'] as $review) {
    echo "<b>Name:</b> " . $review['name'] . "<br>";
    echo "<b>Comment:</b> " . $review['comment'] . "<br>";
    echo "<b>Date:</b> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
    echo "<hr>
";
}


// Another example creating a review with error handling
$result2 = create_and_display_reviews('product_456', '', 'Another review.');

if ($result2['new_review_success']) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review: " . $result2['error'] . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and stores it in a database (or other storage)
 * and also returns a user-friendly response.
 *
 * @param string $review The user's review text.
 * @param int $productId The ID of the product being reviewed.
 * @param int $userId The ID of the user submitting the review.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return string A user-friendly response indicating success or failure.
 */
function storeUserReview(string $review, int $productId, int $userId, string $dbHost, string $dbName, string $dbUser, string $dbPassword)
{
    // Sanitize input (basic example - improve for production)
    $review = trim($review);
    if (empty($review)) {
        return "Error: Review cannot be empty.";
    }

    //  Database connection (Replace with your actual database connection logic)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return "Error: Could not connect to database: " . $conn->connect_error;
    }

    // Prepare the SQL query (Use prepared statements to prevent SQL injection)
    $sql = "INSERT INTO reviews (productId, userId, reviewText) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return "Error: Could not prepare SQL statement.";
    }

    $stmt->bind_param("sii", $productId, $userId, $review); // 's' for string, 'i' for integer

    if (!$stmt->execute()) {
        return "Error: Could not execute SQL query: " . $stmt->error;
    }

    $stmt->close();
    $conn->close();

    return "Review submitted successfully!";
}


// Example Usage:
//  You would replace these with your actual database credentials
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_db_user";
$dbPassword = "your_db_password";

$reviewText = "This product is amazing! I highly recommend it.";
$productId = 123;
$userId = 456;

$response = storeUserReview($reviewText, $productId, $userId, $dbHost, $dbName, $dbUser, $dbPassword);
echo $response . "
"; // Output the response
?>


<?php

/**
 * User Review Function
 *
 * This function takes a set of user reviews and generates a formatted summary.
 * It calculates average rating and provides a list of reviews.
 *
 * @param array $reviews An array of review objects. Each object should have:
 *                       - `user`: The user's name.
 *                       - `rating`: The rating (e.g., 1-5).
 *                       - `comment`:  The review comment (optional).
 * @return string A formatted summary of the reviews.
 */
function generateReviewSummary(array $reviews)
{
    if (empty($reviews)) {
        return "No reviews available.";
    }

    $totalRating = 0;
    $reviewCount = count($reviews);
    $validReviews = 0; // Keep track of valid reviews (rating between 1 and 5)

    foreach ($reviews as $review) {
        if (isset($review['rating']) && is_numeric($review['rating']) &&
            $review['rating'] >= 1 && $review['rating'] <= 5) {
            $totalRating += $review['rating'];
            $validReviews++;
        } else {
            // Handle invalid reviews (optional: log, discard, etc.)
            // You could also skip invalid reviews and continue calculation
            // or display a warning message.
            // Example:
            // error_log("Invalid review from " . $review['user'] . ": " . $review['rating']);
        }
    }

    $averageRating = ($validReviews > 0) ? round($totalRating / $validReviews, 2) : 0;

    $summary = "<h2>Review Summary</h2>";
    $summary .= "<h3>Average Rating: " . $averageRating . "</h3>";
    $summary .= "<ul>";

    foreach ($reviews as $review) {
        $summary .= "<li>";
        $summary .= "<strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
        $summary .= "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        $summary .= "<strong>Comment:</strong> " . htmlspecialchars($review['comment'] ?? "No comment provided.") . "<br>"; // Handle missing comments
        $summary .= "</li>";
    }

    $summary .= "</ul>";

    return $summary;
}

// Example Usage:

// Sample Reviews
$reviews = [
    ['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product!'],
    ['user' => 'Bob', 'rating' => 5, 'comment' => 'Excellent value for money.'],
    ['user' => 'Charlie', 'rating' => 3, 'comment' => 'It\'s okay, could be better.'],
    ['user' => 'David', 'rating' => 1, 'comment' => 'Not happy with this.'], // Invalid review
    ['user' => 'Eve', 'rating' => 2.5, 'comment' => 'Could use some improvement.'],
];

// Generate the summary
$summary = generateReviewSummary($reviews);

// Output the summary
echo $summary;


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It provides a basic framework and can be expanded upon to include features
 * like rating systems, authentication, and database integration.
 *
 * @param string $review_text  The review text entered by the user.
 * @param int    $user_id       The ID of the user submitting the review (optional, use session/cookie for authentication).
 * @param int    $product_id    The ID of the product the review is for.
 * @param int    $rating        The rating given for the product (e.g., 1-5).  Optional.
 *
 * @return array|string An array of review data or an error message if something went wrong.
 */
function create_review(string $review_text, int $user_id, int $product_id, int $rating = 0) {
  // Input validation - VERY IMPORTANT
  if (empty($review_text)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  if ($user_id <= 0) {
    return ['status' => 'error', 'message' => 'Invalid user ID. User ID must be greater than zero.'];
  }

  if ($product_id <= 0) {
    return ['status' => 'error', 'message' => 'Invalid product ID. Product ID must be greater than zero.'];
  }

  // Add more validation here, such as checking rating range if applicable.


  // In a real application, you'd connect to a database here.
  // For demonstration purposes, we'll just store the review in an array.

  // Create a review object (simulating a database record)
  $review = [
    'review_text' => $review_text,
    'user_id'     => $user_id,
    'product_id'  => $product_id,
    'rating'      => $rating,
    'created_at'  => time() // Timestamp of when the review was created
  ];

  //Return the review data
  return $review;
}



/**
 * Example Usage (for demonstration)
 */

// Example 1: Create a review
$review_data = create_review("This product is amazing!", 123, 456, 5);

if ($review_data['status'] === 'error') {
  echo "Error creating review: " . $review_data['message'] . "
";
} else {
  echo "Review created successfully:
";
  print_r($review_data); // Display the created review
}


// Example 2: Create a review with default rating
$review_data2 = create_review("Good product!", 456, 789);
if ($review_data2['status'] === 'error') {
  echo "Error creating review: " . $review_data2['message'] . "
";
} else {
  echo "Review created successfully:
";
  print_r($review_data2);
}


// Example 3: Demonstrating error handling (empty review text)
$review_data3 = create_review("", 789, 123);
if ($review_data3['status'] === 'error') {
  echo "Error creating review: " . $review_data3['message'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item.
 *
 * @param string $product_id The ID of the product or item the review is for.
 * @param string $user_id    The ID of the user submitting the review.
 * @param string $rating    The rating (e.g., 1-5 stars).
 * @param string $comment   The review comment.
 * @param int    $review_id (Optional) The ID of the review to update or delete.
 * 
 * @return array An array containing the result of the operation (success/failure, message, and data).
 */
function create_user_review(string $product_id, string $user_id, string $rating, string $comment, int $review_id = 0) {
  // Input validation - crucial for security and data integrity
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.', 'data' => []];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'data' => []];
  }

  // **Replace this with your database interaction logic**
  // This is a placeholder - you'll need to adapt this to your database setup.
  // This example demonstrates how to create a new review.

  // Example using a hypothetical database connection ($db)
  // $db->query("INSERT INTO reviews (product_id, user_id, rating, comment)
  //            VALUES ('$product_id', '$user_id', '$rating', '$comment')");
  // $last_review_id = $db->lastInsertId();


  // Simulate a review insertion and return a review ID
  $last_review_id = 99; // Dummy ID for this example


  if($last_review_id == 0){
      return ['success' => false, 'message' => 'Error creating review.', 'data' => []];
  }

  return ['success' => true, 'message' => 'Review created successfully.', 'data' => ['review_id' => $last_review_id]];
}


// Example Usage:

// Create a new review
$result = create_user_review('product123', 'user456', '4', 'Great product, highly recommended!');
print_r($result); // Output: (checks if it's an array, shows the result)

// Update an existing review (assuming you have an update function)
//  function update_user_review(int $review_id, string $rating, string $comment) {
//    // ... database update logic ...
//  }

// Delete a review (assuming you have a delete function)
// function delete_user_review(int $review_id) {
//   // ... database delete logic ...
// }

?>


<?php

/**
 * Reviews class to handle user reviews for a product or service.
 */
class Review {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;
    private $reviewId;  // Unique identifier for the review.

    /**
     * Constructor
     * 
     * @param int $productId The ID of the product or service being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment/feedback.
     */
    public function __construct(int $productId, int $userId, int $rating, string $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Timestamp of the review.
        $this->reviewId = uniqid(); // Generate a unique ID for the review.
    }

    /**
     * Getters for each review attribute.
     * 
     * @return mixed
     */
    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    public function getReviewId() {
        return $this->reviewId;
    }

    /**
     *  Display the review in a user-friendly format.
     *
     * @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->reviewId . "
" .
               "Product ID: " . $this->productId . "
" .
               "User ID: " . $this->userId . "
" .
               "Rating: " . $this->rating . "
" .
               "Comment: " . $this->comment . "
" .
               "Date: " . $this->date;
    }
}

/**
 * Function to process user reviews (example usage)
 */
function processReview(Review $review) {
    echo "New Review Received:
";
    echo $review->displayReview() . "
";

    // In a real application, you'd likely save this review to a database.
    //  This is a placeholder for that functionality.
    echo "Review processed (placeholder - saving to database would happen here).
";
}


// --- Example Usage ---

// Create some reviews
$review1 = new Review(123, 45, 5, "Excellent product!  Highly recommended.");
$review2 = new Review(456, 78, 4, "Good value for the money.");
$review3 = new Review(123, 90, 3, "It's okay, but could be better.");

// Process the reviews
processReview($review1);
processReview($review2);
processReview($review3);

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a review text, and an optional rating,
 * and saves the review to a database.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given for the review (e.g., 1-5).
 *                    Defaults to 0 if not provided.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveReview(int $userId, string $reviewText, int $rating = 0) {
  // **Important:  Replace this with your actual database connection code.**
  // This is a placeholder for demonstration.
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  // Sanitize and validate inputs to prevent SQL injection and data issues.
  $reviewText = trim($reviewText); // Remove leading/trailing whitespace.
  if (empty($reviewText)) {
    return false; // Don't save empty reviews.
  }
  $rating = intval($rating); // Ensure rating is an integer.  Handles cases where $rating is a string.
  if ($rating < 1 || $rating > 5) {
    $rating = 0; // Default to 0 if rating is outside the valid range.
  }


  try {
    $stmt = $db->prepare("INSERT INTO reviews (user_id, review_text, rating) VALUES (?, ?, ?)");
    $stmt->execute([$userId, $reviewText, $rating]);
    return true;
  } catch (PDOException $e) {
    // Handle database errors gracefully.  Log the error for debugging.
    error_log("Error saving review: " . $e->getMessage());
    return false;
  }
}


// Example Usage:
//  This is just example data - replace with your actual application logic.

$userId = 123;
$review = "This product is fantastic!  Highly recommended.";
$rating = 5;

if (saveReview($userId, $review, $rating)) {
  echo "Review saved successfully!
";
} else {
  echo "Error saving review.
";
}

// Example with no rating
$userId = 456;
$review = "Okay product.";
if (saveReview($userId, $review)) {
  echo "Review saved without rating.
";
} else {
    echo "Error saving review without rating.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $product_id  The ID of the product or service being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $review_text  The text of the review.
 * @param array $reviews   (Optional) An array of existing reviews to be displayed.
 *
 * @return array An array containing:
 *   - 'reviews':  An array of reviews (including the new one).
 *   - 'new_review_added':  Boolean - True if a new review was added, false otherwise.
 */
function add_user_review(string $product_id, string $username, string $review_text, array &$reviews = []): array
{
  // Sanitize and validate input (important for security)
  $username = trim($username); // Remove whitespace
  $review_text = trim($review_text);

  if (empty($username) || empty($review_text)) {
    return ['reviews' => $reviews, 'new_review_added' => false]; // Return if no review text
  }

  //  Add the new review
  $new_review = [
    'id' => count($reviews) + 1, // Simple ID - consider using database IDs for production
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp for context
  ];
  $reviews[] = $new_review;

  return ['reviews' => $reviews, 'new_review_added' => true];
}


/**
 *  Example Usage and Demonstration
 */

// Initialize some existing reviews (for demonstration)
$existing_reviews = [
  ['id' => 1, 'username' => 'JohnDoe', 'review_text' => 'Great product!', 'timestamp' => '2023-10-26 10:00:00'],
  ['id' => 2, 'username' => 'JaneSmith', 'review_text' => 'Could be better.', 'timestamp' => '2023-10-26 11:30:00']
];


// Add a new review
$new_review_data = add_user_review('product123', 'PeterJones', 'Excellent value for money!');

// Display the updated reviews
echo "<h2>Reviews for Product: product123</h2>";
echo "<ul>";
foreach ($new_review_data['reviews'] as $review) {
    echo "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; // Use htmlspecialchars for security
    echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
    echo "<strong>Timestamp:</strong> " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";


// Another example - adding multiple reviews
$new_reviews = [];
for ($i = 0; $i < 3; $i++) {
    $new_reviews = add_user_review('product123', 'User' . $i, 'Review ' . $i);
}

echo "<h2>Reviews for Product: product123 (Multiple Reviews)</h2>";
echo "<ul>";
foreach ($new_reviews['reviews'] as $review) {
    echo "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
    echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
    echo "<strong>Timestamp:</strong> " . htmlspecialchars($review['timestamp']) . "</li>";
}
echo "</ul>";
?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic structure for managing user reviews.
 */
class UserReview {

  /**
   * @var int User ID
   */
  private $userId;

  /**
   * @var string Review Text
   */
  private $reviewText;

  /**
   * @var int Rating (e.g., 1-5 stars)
   */
  private $rating;

  /**
   * @var DateTime Timestamp of review creation
   */
  private $timestamp;

  /**
   * Constructor
   *
   * @param int $userId
   * @param string $reviewText
   * @param int $rating
   */
  public function __construct(int $userId, string $reviewText, int $rating) {
    $this->userId = $userId;
    $this->reviewText = $reviewText;
    $this->rating = $rating;
    $this->timestamp = new DateTime(); // Automatically timestamp creation
  }

  /**
   * Get User ID
   *
   * @return int
   */
  public function getUserId(): int {
    return $this->userId;
  }

  /**
   * Get Review Text
   *
   * @return string
   */
  public function getReviewText(): string {
    return $this->reviewText;
  }

  /**
   * Get Rating
   *
   * @return int
   */
  public function getRating(): int {
    return $this->rating;
  }

  /**
   * Get Timestamp
   *
   * @return DateTime
   */
  public function getTimestamp(): DateTime {
    return $this->timestamp;
  }

  /**
   * Display Review (Simple Formatting)
   *
   * @return string
   */
  public function displayReview(): string {
    return "User ID: " . $this->userId . "
" .
           "Review: " . $this->reviewText . "
" .
           "Rating: " . $this->rating . "
" .
           "Timestamp: " . $this->timestamp->format('Y-m-d H:i:s');
  }
}


/**
 * User Review Review Function
 *
 * This function allows you to create and display user reviews.
 *
 * @param array $reviews An array of UserReview objects.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews</h2>
";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>
";
    return;
  }

  foreach ($reviews as $review) {
    echo "<h3>Review:</h3>
";
    echo $review->displayReview() . "

";
  }
}


// Example Usage:
// Create some reviews
$review1 = new UserReview(123, "Great product! Highly recommended.", 5);
$review2 = new UserReview(456, "Could be better, but decent.", 3);
$review3 = new UserReview(789, "Amazing!  I love it!", 5);

// Store the reviews in an array
$reviews = [$review1, $review2, $review3];

// Display the reviews
displayReviews($reviews);


//---  Another Example:  Creating Reviews from Input (Illustrative)---
// This part demonstrates how you'd integrate this with a form.
//  For simplicity, we'll use a simplified form with hardcoded values.
//  In a real application, you'd use $_POST or $_GET to collect the data.

//  Create a form (for example, in an HTML file)
/*
<form method="post">
  <label for="userId">User ID:</label>
  <input type="number" id="userId" name="userId" value="123"><br><br>

  <label for="reviewText">Review Text:</label><br>
  <textarea id="reviewText" name="reviewText" rows="4" cols="50"></textarea><br><br>

  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select><br><br>

  <input type="submit" value="Submit Review">
</form>
*/

// Simulate form submission (replace with actual $_POST data in a real app)
/*
if (isset($_POST['userId']) && isset($_POST['reviewText']) && isset($_POST['rating'])) {
  $userId = (int)$_POST['userId'];
  $reviewText = $_POST['reviewText'];
  $rating = (int)$_POST['rating'];

  $newReview = new UserReview($userId, $reviewText, $rating);
  // Add the new review to the $reviews array (or store it in a database).
  $reviews[] = $newReview;
}
*/

// Then call displayReviews($reviews); to display the new review(s).
?>


<?php

/**
 * User Review Class
 *
 * This class provides functionality for creating, storing, and displaying user reviews.
 */
class UserReview {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * Initializes the UserReview object with a database connection.
     *
     * @param PDO $db  The PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * Creates a new review in the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The comment made by the reviewer.
     *
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_name', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Get a review by ID
     *
     * Retrieves a review from the database based on its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|null An array containing the review data, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review;
        } catch (PDOException $e) {
            error_log("Error getting review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Get all reviews for a product
     *
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects.
     */
    public function getReviewsByProduct(int $productId) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews for product: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Update a review
     *
     * Updates an existing review in the database.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $rating, string $comment) {
        try {
            $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete a review
     *
     * Deletes a review from the database.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


// Example Usage (assuming you have a database connection $db)
//
// $review = new UserReview($db);
//
// // Create a new review
// $newReviewId = $review->createReview(123, 'john_doe', 5, 'Great product!');
//
// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId . "
";
// } else {
//     echo "Error creating review.
";
// }
//
// // Get a review by ID
// $review = $review->getReviewById($newReviewId);
// if ($review) {
//     echo "Review details:
";
//     print_r($review);
// } else {
//     echo "Review not found.
";
// }
//
// // Get reviews for product 123
// $reviews = $review->getReviewsByProduct(123);
// if ($reviews) {
//     echo "Reviews for product 123:
";
//     print_r($reviews);
// } else {
//     echo "No reviews found for product 123.
";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param int $userId (Optional) The ID of the user submitting the review.  Useful for tracking and moderation.
 * @param string $reviewerName (Optional)  The name of the reviewer, if not provided, uses $userId.
 *
 * @return array An array containing the review details and a success/failure message.
 */
function submitReview(string $productName, string $reviewText, int $userId = 0, string $reviewerName = '') {

  // Input Validation - VERY IMPORTANT
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  // Sanitize input - Protect against XSS and other vulnerabilities
  $productName = htmlspecialchars($productName);
  $reviewText = htmlspecialchars($reviewText);

  // Determine Reviewer Name
  if (empty($reviewerName)) {
    $reviewerName = $userId > 0 ?  "User ID: " . $userId : 'Anonymous';
  }

  // Store the Review - In a real application, this would likely involve database interaction
  //  This is just a placeholder for demonstration
  $review = [
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_id' => $userId,
    'reviewer_name' => $reviewerName,
    'submission_timestamp' => time() // Add a timestamp for tracking
  ];

  // Simulate saving to a file or database
  file_put_contents('reviews.txt', $review . PHP_EOL, FILE_APPEND);  // Append to a file

  return ['success' => true, 'review' => $review, 'message' => 'Review submitted successfully!'];
}

/**
 * Displays a list of reviews.
 *
 * @param array $reviews An array of review data.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " .  $reviews[0]['product_name'] . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['reviewer_name'] . ":</strong> " . $review['review_text'] . "<br>";
        echo "<strong>Date:</strong> " . date('Y-m-d H:i:s', $review['submission_timestamp']);
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Simulate a form submission (replace this with your actual form handling)
$product = "Awesome Gadget X";
$reviewText = "This gadget is amazing!  It does everything I need, and it's super easy to use.";
$userId = 123; // Example user ID

$result = submitReview($product, $reviewText, $userId);

if ($result['success']) {
    echo "<p>Review submitted successfully!</p>";
    displayReviews($result); //  Display the submitted review
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}


// Example for anonymous user:
$resultAnon = submitReview("Another Product", "Great product!", 0, "");
if ($resultAnon['success']) {
  displayReviews($resultAnon);
}
?>


<?php

/**
 * User Review Function
 *
 * This function handles the process of adding, retrieving, and displaying user reviews.
 *
 * @param string $productId - The ID of the product the review is for.
 * @param string $userEmail - The email address of the user submitting the review.
 * @param string $reviewText - The text of the review.
 * @param string $dbFilePath - Path to the database file (e.g., 'reviews.txt', 'reviews.json', etc.).
 * @param bool $allowAnonymous - Whether to allow anonymous reviews.
 *
 * @return array|string - Returns an array of reviews if successful, or an error message if not.
 */
function add_review(string $productId, string $userEmail, string $reviewText, string $dbFilePath, bool $allowAnonymous = false) {
    // Input Validation (basic example - enhance for production)
    if (empty($productId) || empty($reviewText)) {
        return "Error: Product ID and Review Text cannot be empty.";
    }

    // Sanitize Input (Basic - improve for production)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

    // Check if anonymous review is allowed
    if (!$allowAnonymous && !isset($userEmail)) {
        return "Error: Anonymous reviews are not allowed.";
    }

    // Construct the review data
    $reviewData = [
        'product_id' => $productId,
        'user_email' => $userEmail,
        'review' => $reviewText,
        'timestamp' => date("Y-m-d H:i:s")
    ];

    // Save the review to the database file
    $filename = $dbFilePath;
    $reviewString = json_encode($reviewData); // Use JSON for structured data

    if (file_put_contents($filename, $reviewString) === false) {
        return "Error: Failed to save review to database.";
    }

    return "Review added successfully!";
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productId - The ID of the product.
 * @param string $dbFilePath - Path to the database file.
 * @return array|string - Returns an array of reviews or an error message.
 */
function get_reviews(string $productId, string $dbFilePath) {
    $filename = $dbFilePath;
    if (!file_exists($filename)) {
        return "Error: No reviews found for product ID: " . $productId . ".  Database file not found.";
    }

    $reviews = [];
    if (($handle = fopen($filename, "r")) !== false) {
        while (($data = fgetcsv($handle, 1000, ",")) !== false) { // Adjust delimiter if needed
            if (count($data) == 4 && isset($data[0]) && isset($data[1]) && isset($data[2]) && isset($data[3])) {
                $review = [
                    'product_id' => $data[0],
                    'user_email' => $data[1],
                    'review' => $data[2],
                    'timestamp' => $data[3]
                ];
                $reviews[] = $review;
            }
        }
        fclose($handle);
    } else {
        return "Error: Could not open database file.";
    }

    if (empty($reviews)) {
        return "No reviews found for product ID: " . $productId;
    }

    return $reviews;
}


/**
 * Example Usage
 */

// Configuration
$dbFilePath = 'reviews.json'; // Replace with your actual file path
$productId = 'P123';

// Add a review
$reviewResult = add_review($productId, 'user@example.com', 'Great product!  Highly recommended.', $dbFilePath);
echo "Add Review Result: " . $reviewResult . "
";

// Get reviews for the product
$reviews = get_reviews($productId, $dbFilePath);
echo "Reviews:
";
print_r($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to submit and display user reviews for a product or item.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The text of the user's review.
 * @param string $username The name of the user submitting the review.
 * @param array $reviews (Optional) An existing array of reviews to add to. Defaults to an empty array.
 *
 * @return array An array of reviews, updated with the new review.
 */
function addReview(string $productName, string $reviewText, string $username, array $reviews = []) {
  // Sanitize input (basic, expand as needed for production)
  $productName = trim($productName);
  $reviewText = trim($reviewText);
  $username = trim($username);

  // Validate input (you can enhance this with more robust validation)
  if (empty($productName) || empty($reviewText) || empty($username)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create a new review object.  Could be an object or an associative array.
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for better organization
  ];

  // Add the new review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display the reviews
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " .  implode(",",array_column($reviews, 'username')) . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet!</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>" . $review['username'] . ":</strong> " . $review['review'] . " - " . $review['date'];
        echo "</li>";
    }
    echo "</ul>";
}



// Example Usage:
$product = "Awesome Gadget X";

// Add some initial reviews
$reviews = addReview($product, "This gadget is fantastic!  It's easy to use and does everything I need.", "John Doe");
$reviews = addReview($product, "Great product, but a little pricey.", "Jane Smith", $reviews);
$reviews = addReview($product, "Works as described.", "Peter Jones", $reviews);


// Display the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function handles adding, retrieving, and displaying user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $dbConnection  Database connection object (optional - defaults to null)
 *
 * @return array An array containing:
 *               - 'success': True if the review was successfully added, false otherwise.
 *               - 'message': A message indicating the status of the review operation.
 *               - 'review': The newly created review object (if successful).
 */
function create_user_review(string $productId, string $userId, string $rating, string $comment, ?array $dbConnection = null) {
  // Input validation -  Essential for security and data integrity
  if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'All fields are required.',
      'review' => null
    ];
  }

  if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be a number between 1 and 5.',
      'review' => null
    ];
  }


  // Data Sanitization - VERY IMPORTANT to prevent SQL injection and XSS attacks
  $productId = $dbConnection ? $dbConnection->real_escape_string($productId) : htmlspecialchars($productId);
  $userId = $dbConnection ? $dbConnection->real_escape_string($userId) : htmlspecialchars($userId);
  $rating = (int)$rating; // Cast to integer for database usage
  $comment = $dbConnection ? $dbConnection->real_escape_string($comment) : htmlspecialchars($comment);


  // Database interaction - Example using a simple database setup
  $review = [
    'product_id' => $productId,
    'user_id' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'created_at' => date('Y-m-d H:i:s') // Timestamp for record creation
  ];

  //  Replace this with your actual database query
  $result = mysqli_query($dbConnection, "INSERT INTO reviews (product_id, user_id, rating, comment, created_at) VALUES ('$productId', '$userId', '$rating', '$comment', '$review[created_at]')");

  if (mysqli_query($dbConnection, "INSERT INTO reviews (product_id, user_id, rating, comment, created_at) VALUES ('$productId', '$userId', '$rating', '$comment', '$review[created_at]')")) {  // Example query, adapt to your schema
    return [
      'success' => true,
      'message' => 'Review added successfully.',
      'review' => $review
    ];
  } else {
    return [
      'success' => false,
      'message' => 'Error adding review: ' . mysqli_error($dbConnection),
      'review' => null
    ];
  }
}


// Example Usage (replace with your actual database connection)
// Create a dummy database connection for this example
$dbConnection = mysqli_connect("localhost", "username", "password", "database_name");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}

// Example 1: Successful Review
$review_data = create_user_review("123", "user123", 4, "Great product!", $dbConnection);
print_r($review_data);

// Example 2:  Invalid Rating
$review_data = create_user_review("456", "user456", 6, "Awesome!", $dbConnection);
print_r($review_data);

// Example 3: Empty Fields
$review_data = create_user_review("", "user789", 3, "Okay.", $dbConnection);
print_r($review_data);


mysqli_close($dbConnection); // Close the database connection
?>


<?php

/**
 * User Review Class
 *
 * This class provides a simple way to store and manage user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (Optional) - The unique ID of the review.  If not provided, auto-generated.
     * @param int $userId   The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct(
        $reviewId = null,
        $userId,
        $productId,
        $rating,
        $comment
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Use current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }

    /**
     *  Setters (optional - you could make these private and only allow modification
     *  in specific cases, for example, through a moderation system)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }


    /**
     *  Method to display review details
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Date: " . $this->getReviewDate() . "<br>";
    }
}


/**
 * User Review Review Function (Demonstration)
 */
function displayReviews($reviews) {
    echo "<h2>User Reviews:</h2>";

    foreach ($reviews as $review) {
        echo "<div class='review'>";
        $review->displayReview();
        echo "</div><hr>";
    }
}



// Example Usage:

// Create some reviews
$review1 = new UserReview(null, 123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(null, 456, 456, 4, "Good product, but could be better.");
$review3 = new UserReview(null, 789, 456, 3, "Average product.");


// Store the reviews (in a real application, this would likely be a database)
$allReviews = array($review1, $review2, $review3);


// Display the reviews
displayReviews($allReviews);


// **Demonstration of Adding Reviews to a Database (Conceptual)**

/*
//  Assume you have a database connection established
//  and a table named "reviews" with columns:
//  - review_id (INT, PRIMARY KEY, AUTO_INCREMENT)
//  - user_id (INT)
//  - product_id (INT)
//  - rating (INT)
//  - comment (TEXT)
//  - review_date (TIMESTAMP)

//  Here's a conceptual example (adapt to your database library):
/*
$db = new DatabaseConnection(); // Replace with your actual database connection

foreach ($allReviews as $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES (" . $db->escapeString($review->getUserId()) . ", " . $db->escapeString($review->getProductId()) . ", " . $db->escapeString($review->getRating()) . ", " . $db->escapeString($review->getComment()) . ")";

    $result = $db->execute($sql);
    if ($result) {
        // Successfully inserted the review
        $reviewId = $db->lastInsertId(); // Get the ID of the newly inserted review
        $review->setReviewId($reviewId); // Set the review ID
        echo "Review added to database with ID: " . $review->getReviewId() . "<br>";
    } else {
        echo "Error adding review to database.<br>";
    }
}
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 *
 * @param string $reviewText The text of the user's review.
 * @param string $username The username of the user who submitted the review.
 * @param int   $rating    The rating given by the user (e.g., 1-5).  Optional, defaults to 0.
 * @param int   $itemId     The ID of the item being reviewed (e.g., product ID). Required.
 * @param PDO  $db         A PDO database connection object. Required.
 *
 * @return array An array containing the review ID, or an empty array on failure.
 */
function create_user_review(string $reviewText, string $username, int $rating = 0, int $itemId, PDO $db)
{
    // Input validation - very important!
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (!is_numeric($itemId)) {
        return ['error' => 'Item ID must be a number.'];
    }

    try {
        // SQL Query
        $sql = "INSERT INTO reviews (item_id, username, review_text, rating)
                VALUES (:item_id, :username, :review_text, :rating)";

        // Prepare and execute the query
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':item_id', $itemId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $result = $stmt->execute();

        // Get the last inserted ID
        $reviewId = $db->lastInsertId();

        return ['success' => true, 'review_id' => $reviewId];

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error for debugging
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Function to display a single user review.
 *
 * @param int $reviewId The ID of the review to display.
 * @param PDO $db      A PDO database connection object.
 *
 * @return array An array containing the review data, or an empty array on failure.
 */
function display_user_review(int $reviewId, PDO $db) {
    try {
        $sql = "SELECT * FROM reviews WHERE id = :review_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':review_id', $reviewId);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);

        return $review;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}

// Example Usage (Illustrative - requires database setup)
/*
// Assume you have a database connection named $db
// Example using SQLite (replace with your database connection)
$db = new PDO('sqlite:/path/to/your/database.db'); //  Replace with your database details

$reviewData = create_user_review("This is a fantastic product!", "JohnDoe", 5, 123);

if ($reviewData['success']) {
    echo "Review created successfully!  Review ID: " . $reviewData['review_id'];
} else {
    echo "Error creating review: " . $reviewData['error'];
}

$displayReview = display_user_review($reviewData['review_id'], $db);
if ($displayReview['success']) {
  echo "<br>Review Details:<br>";
  echo "Username: " . $displayReview['username'] . "<br>";
  echo "Review: " . $displayReview['review_text'] . "<br>";
  echo "Rating: " . $displayReview['rating'] . "<br>";
} else {
  echo "Error displaying review: " . $displayReview['error'];
}

*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or item.
 * It includes input validation, sanitization, and storage of the review.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $rating     The rating given (e.g., 1-5).
 * @param string $comment    The user's comment about the product.
 * @param string $user_id    (Optional) The ID of the user submitting the review.  If not provided, a default ID is generated.
 * @return bool|string  Returns true on success, or an error message string on failure.
 */
function submit_review(string $product_id, string $rating, string $comment, string $user_id = null): bool|string
{
  // --- Input Validation & Sanitization ---

  // Check if rating is a valid number between 1 and 5
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return "Error: Rating must be a number between 1 and 5.";
  }

  // Trim whitespace from the comment
  $comment = trim($comment);

  // Sanitize the comment (prevent SQL injection) - IMPORTANT!
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);  //Remove HTML tags and potentially other unwanted characters
  // Consider using prepared statements for more robust security.


  // Check if user ID is provided
  if ($user_id === null) {
    $user_id = generate_unique_user_id();  //Implement this function - see example below
  }

  // --- Database Interaction (Example using a simple array - replace with your database logic) ---

  // In a real application, you'd connect to your database here.
  $reviews = load_reviews($product_id);  // Implement this function - see example below
  
  //Create a review object, you can define more properties as needed
  $review = [
      'product_id' => $product_id,
      'rating' => $rating,
      'comment' => $comment,
      'user_id' => $user_id,
      'timestamp' => time()  // Add a timestamp
  ];
  
  // Add the review to the reviews array.
  $reviews[] = $review;
    
  if (count($reviews) > 0) {
        return true;
  } else {
        return "Error: Failed to save review.";
  }
  
}


// --- Helper Functions (Implement these based on your needs) ---

/**
 * Generates a unique user ID (Replace with a more robust solution if needed)
 *
 * @return string A unique user ID.
 */
function generate_unique_user_id(): string
{
    return uniqid();  //A simple and effective way to generate unique IDs.
}


/**
 * Loads reviews for a given product ID from a storage (e.g., database, array).
 *
 * @param string $product_id The ID of the product.
 * @return array An array of reviews for the product.
 */
function load_reviews(string $product_id): array
{
    // --- Replace this with your database query ---
    // Example:
    // $conn = new mysqli("localhost", "username", "password", "database");
    // $result = $conn->query("SELECT * FROM reviews WHERE product_id = '$product_id'");
    // $reviews = $result->fetch_all(MYSQLI_ASSOC);
    // $conn->close();

    // Simple example using a static array:
    static $reviews = [];
    return $reviews;
}


// --- Example Usage ---
$product = "electronics_123";

// Successful submission
$result = submit_review($product, 4, "Great product!  Works as expected.");
if ($result) {
  echo "Review submitted successfully: " . $result . "
";
} else {
  echo "Error submitting review.
";
}

// Submission with error (invalid rating)
$result = submit_review($product, 6, "Too expensive!");
if ($result) {
  echo "Review submitted successfully: " . $result . "
";
} else {
  echo "Error submitting review: " . $result . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @param string $rating (optional) A rating from 1 to 5 (default 5).
 *
 * @return array An array containing:
 *   - 'success': true if the review was successfully submitted, false otherwise.
 *   - 'message': A message to display to the user (e.g., success or error message).
 *   - 'review': The submitted review data (product, username, rating, review text).
 */
function submitReview(string $productName, string $reviewText, string $username, string $rating = '5'): array
{
  // Basic input validation - This is CRUCIAL in a real application
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => []];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => []];
  }

  //  In a real application, you would:
  //  1. Save the review to a database.
  //  2. Generate a unique ID for the review.
  //  3.  Store the ID, product name, username, rating, and review text in the database.

  // Simulate database saving for demonstration purposes
  $reviewId = generateUniqueId(); // Replace with your actual ID generation function
  $reviewData = [
    'product_name' => $productName,
    'username' => $username,
    'rating' => $rating,
    'review_text' => $reviewText,
    'id' => $reviewId
  ];

  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $reviewData];
}


/**
 * Generates a unique ID (Placeholder - Replace with a robust ID generation mechanism)
 *
 * This is a very simple example.  In a production environment, use something like UUIDs.
 */
function generateUniqueId(): string
{
    return uniqid(); // Returns a unique ID based on timestamp and random data
}

// ------------------- Example Usage -------------------
// Example 1: Successful submission
$reviewResult = submitReview('Awesome Widget', 'This widget is amazing!', 'JohnDoe', '4');
print_r($reviewResult);

// Example 2: Invalid rating
$reviewResult = submitReview('Another Product', 'Good product.', 'JaneSmith', '6');
print_r($reviewResult);

// Example 3: Empty review text
$reviewResult = submitReview('Something', '', 'PeterPan');
print_r($reviewResult);
?>


<?php

/**
 * Function to display user reviews for a product or service.
 *
 * @param array $reviews An array of review objects.
 *                       Each review object should have properties like:
 *                       - 'user': User's name or ID
 *                       - 'rating': Integer rating (e.g., 1-5)
 *                       - 'comment': User's review text
 * @param string $productName (Optional) The name of the product/service being reviewed.
 * @return string HTML formatted review display.
 */
function displayUserReviews(array $reviews, string $productName = '') {
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $html = "<div class='reviews'><h2>Reviews for {$productName}</h2>";
  $html .= "<ul>";

  foreach ($reviews as $review) {
    $html .= "<li class='review'>";
    $html .= "<p><strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
    $html .= "<p>Rating: " . $review['rating'] . "</p>";
    $html .= "</li>";
  }

  $html .= "</ul></div>";
  return $html;
}

// Example Usage:
// Sample Reviews
$reviews = [
  [
    'user' => 'John Doe',
    'rating' => 5,
    'comment' => 'Great product!  Works exactly as advertised.',
  ],
  [
    'user' => 'Jane Smith',
    'rating' => 4,
    'comment' => 'Good value for money.  Could be a little more durable.',
  ],
  [
    'user' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It\'s okay.  Not amazing, but not bad either.',
  ],
];

// Display the reviews for "Awesome Gadget"
$reviewHtml = displayUserReviews($reviews, 'Awesome Gadget');
echo $reviewHtml;


//Example using an empty array to show the "No reviews yet" message.
$emptyReviews = [];
$emptyHtml = displayUserReviews($emptyReviews, 'Another Product');
echo $emptyHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic input validation and sanitization to prevent common security vulnerabilities.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $reviewerName The name of the reviewer.
 * @return array An array containing the review details (success, message, review) or an error message.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName): array
{
    // Input Validation and Sanitization
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);

    // Validate required fields
    if (empty($productId) || empty($reviewText) || empty($reviewerName)) {
        return ['success' => false, 'message' => 'All fields are required.', 'review' => null];
    }

    // Basic Review Sanitization (more sophisticated sanitization might be needed)
    $reviewText = strip_tags($reviewText); // Remove HTML tags

    // **Important:**  In a real application, you would typically:
    // 1. Store the review in a database.
    // 2. Implement user authentication to track who submitted the review.
    // 3. Add more robust security measures like escaping data before displaying it.

    // Simulate storing the review (replace with database interaction)
    $review = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'reviewerName' => $reviewerName,
        'submissionTime' => date('Y-m-d H:i:s')
    ];

    return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $review];
}

/**
 * Displays Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product ID.
 *
 * @param string $productId The ID of the product for which to display reviews.
 * @return string HTML representation of the reviews.  Returns an error message if no reviews are found.
 */
function displayReviews(string $productId): string
{
    // Simulate retrieving reviews from a database or other data source.
    // Replace this with your actual data retrieval logic.
    $reviews = [
        'product123' => [
            ['reviewerName' => 'John Doe', 'reviewText' => 'Great product! Highly recommended.', 'submissionTime' => '2023-10-27 10:00:00'],
            ['reviewerName' => 'Jane Smith', 'reviewText' => 'Good value for money.', 'submissionTime' => '2023-10-26 14:30:00'],
        ],
        'product456' => [
            ['reviewerName' => 'Peter Jones', 'reviewText' => 'Could be better.', 'submissionTime' => '2023-10-25 09:15:00'],
        ],
    ];

    if (isset($reviews[$productId])) {
        $html = '<ul>';
        foreach ($reviews[$productId] as $review) {
            $html .= '<li><strong>' . htmlspecialchars($review['reviewerName']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . ' (' . $review['submissionTime'] . ')</li>';
        }
        $html .= '</ul>';
        return $html;
    } else {
        return "<p>No reviews found for this product.</p>";
    }
}


// Example Usage:
$productId = 'product123';

// Submit a review
$reviewResult = submitReview($productId, "This is a fantastic product! I highly recommend it.", "Alice Brown");

if ($reviewResult['success']) {
    echo "<h3>Review submitted:</h3>";
    echo "<pre>";
    print_r($reviewResult['review']); // Display the submitted review details.
    echo "</pre>";
} else {
    echo "<p style='color:red;'>Error submitting review: " . $reviewResult['message'] . "</p>";
}

// Display the reviews
echo "<h3>Reviews for " . htmlspecialchars($productId) . ":</h3>";
echo displayReviews($productId);



?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating   The rating given by the user (e.g., 1-5).
 * @param string $dbHost  The database hostname.
 * @param string $dbName  The name of the database.
 * @param string $dbUser  The database username.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing:
 *              - 'success': True if the review was added successfully, false otherwise.
 *              - 'message': A message describing the outcome (e.g., 'Review added', 'Error saving review').
 */
function add_user_review(
    string $productId,
    string $userName,
    string $reviewText,
    int    $rating,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {

    // Validate inputs (Basic example - more robust validation is recommended)
    if (empty($productId) || empty($userName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid input.  Product ID, User Name, Review Text, and Rating must be provided and Rating must be between 1 and 5.'
        ];
    }

    try {
        // Establish database connection
        $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception('Connection failed: ' . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (productId, userName, reviewText, rating) VALUES (?, ?, ?, ?)";

        // Prepare the statement
        $stmt = $conn->prepare($sql);

        // Bind parameters
        $stmt->bind_param("sss", $productId, $userName, $reviewText);

        // Execute the statement
        if ($stmt->execute()) {
            $stmt->close();
            $conn->close();
            return [
                'success' => true,
                'message' => 'Review added successfully.'
            ];
        } else {
            $stmt->close();
            $conn->close();
            return [
                'success' => false,
                'message' => 'Error saving review: ' . $stmt->error
            ];
        }
    } catch (Exception $e) {
        return [
            'success' => false,
            'message' => 'An error occurred: ' . $e->getMessage()
        ];
    }
}


// Example Usage (Remember to adapt this to your specific database setup)
// $result = add_user_review(
//     'product123',
//     'John Doe',
//     'Great product!  Highly recommended.',
//     5,
//     'localhost',
//     'my_database',
//     'my_user',
//     'my_password'
// );

// print_r($result);
?>


<?php

/**
 * Class UserReview
 *
 * This class handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $userName The name of the user writing the review.
     * @param string $reviewText The text of the review.
     * @param int $rating   The rating (1-5).
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $userName, string $reviewText, int $rating): bool
    {
        if (!isset($productId, $userName, $reviewText)) {
            return false; // Required parameters are missing
        }

        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for sorting/display
        ];

        return true;
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProductId(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array  An array of all reviews
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }


    /**
     * Displays reviews for a product ID.
     *
     * @param int $productId The ID of the product.
     */
    public function displayReviews(int $productId)
    {
        $reviews = $this->getReviewsByProductId($productId);

        if (empty($reviews)) {
            echo "<p>No reviews found for this product.</p>";
            return;
        }

        echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . $review['userName'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "John Doe", "Great product!  Highly recommended.", 5);
$reviewSystem->addReview(123, "Jane Smith", "Good value for money.", 4);
$reviewSystem->addReview(456, "Peter Jones", "Disappointed with the quality.", 2);

// Display reviews for product 123
$reviewSystem->displayReviews(123);

// Display all reviews
// echo "<h2>All Reviews</h2>";
// echo $reviewSystem->getAllReviews();


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text entered by the user.
 * @param int $userId The ID of the user writing the review.  Defaults to 0 (anonymous user).
 * @param int $productId The ID of the product being reviewed.  Defaults to 0 (for general reviews).
 * @return array An array containing the review data (ID, product ID, user ID, review text, date),
 *               or an array with an error message if the review creation fails.
 */
function createReview(string $productName, string $reviewText, int $userId = 0, int $productId = 0) {
  // Sanitize input (basic - improve for production environments)
  $productName = trim($productName);
  $reviewText = trim($reviewText);

  if (empty($productName) || empty($reviewText)) {
    return ['error' => 'Product name and review text cannot be empty.'];
  }

  // Generate a unique ID (for demonstration purposes - use a database sequence for production)
  $reviewId = time();

  // Get the current timestamp
  $date = date('Y-m-d H:i:s');

  // Store the review data (in a real application, this would go to a database)
  // This is just a placeholder for demonstration.
  $reviewData = [
    'id' => $reviewId,
    'product_id' => $productId,
    'user_id' => $userId,
    'review_text' => $reviewText,
    'date' => $date
  ];

  // Validation - Add more robust validation as needed (e.g., review length)
  // For example, you might want to limit the review text length.
  //  if (strlen($reviewText) > 500) {
  //     return ['error' => 'Review text is too long.']
  //  }

  return $reviewData;
}


/**
 * Display Reviews (Example - Adapt to your database and display format)
 *
 * This function displays reviews for a given product.
 *
 * @param int $productId The ID of the product.
 */
function displayReviews(int $productId) {
  // **This is a placeholder - Replace with your database query**
  // In a real application, you would fetch reviews from a database
  // based on the $productId.

  $reviews = [
    // Example reviews (replace with database data)
    [
      'id' => 1,
      'product_id' => $productId,
      'user_id' => 123,
      'review_text' => 'Great product!  I highly recommend it.',
      'date' => '2023-10-26 10:00:00'
    ],
    [
      'id' => 2,
      'product_id' => $productId,
      'user_id' => 456,
      'review_text' => 'Good value for the price.',
      'date' => '2023-10-27 14:30:00'
    ],
  ];


  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li><strong>User:</strong> " . ($review['user_id'] > 0 ? "User ID: " . $review['user_id'] : "Anonymous") . "<br>" .
           "<strong>Date:</strong> " . $review['date'] . "<br>" .
           $review['review_text'];
      echo "</li>";
    }
    echo "</ul>";
  }
}


// **Example Usage**
$product = "Awesome Widget";

// Create a review
$reviewData = createReview($product, "This widget is amazing!");

if (isset($reviewData['error'])) {
  echo "<p style='color:red;'>Error creating review: " . $reviewData['error'] . "</p>";
} else {
  echo "<p>Review created successfully! Review ID: " . $reviewData['id'] . "</p>";
}


// Display reviews for a specific product (e.g., product ID = 1)
displayReviews(1);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It handles input validation, stores reviews (in this example, in an array),
 * and provides basic display functionality.
 */

class UserReview {

    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $name The name of the user who wrote the review.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $comment) {
        // Input validation -  You can customize this as needed
        if (empty($name) || empty($comment)) {
            return false; // Require both name and comment
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for review date
        ];

        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Display all reviews.
     */
    public function displayReviews() {
        echo "<h2>User Reviews:</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->getAllReviews() as $review) {
            echo "<li><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . " - " . htmlspecialchars($review['date']) . "</li>";
        }
        echo "</ul>";
    }
}

// --- Example Usage ---

// Create a new review object
$review = new UserReview();

// Add some reviews
$review->addReview("John Doe", "Great product!  Highly recommended.");
$review->addReview("Jane Smith", "Could be better.  Needs some improvements.");
$review->addReview("Peter Jones", "Excellent value for money.");


// Display the reviews
$review->displayReviews();

//  You can also access and process reviews programmatically
//  $allReviews = $review->getAllReviews();
//  foreach ($allReviews as $review) {
//    // Do something with the review data
//    echo "Review by: " . htmlspecialchars($review['name']) . "<br>";
//  }

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to collect and display user reviews for a product or item.
 * It includes input validation, data sanitization, and basic formatting.
 * 
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of review objects.  Each object should have:
 *                     - name: The reviewer's name.
 *                     - rating: An integer from 1 to 5 representing the rating.
 *                     - comment: The review text.
 * @return string The HTML output of the reviews.  Returns an empty string if no reviews are found.
 */
function displayUserReviews(string $productName, array $reviews) {
  // Input Validation - Basic check for empty reviews array
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $html = "<div class=\"product-reviews\">";
  $html .= "<h3>Reviews for {$productName}</h3>";
  $html .= "<ul>";

  foreach ($reviews as $review) {
    // Data Sanitization - Very basic, consider more robust sanitization for production
    $name = htmlspecialchars($review['name'], ENT_QUOTES, 'UTF-8');
    $rating = htmlspecialchars($review['rating'], ENT_QUOTES, 'UTF-8');
    $comment = htmlspecialchars($review['comment'], ENT_QUOTES, 'UTF-8');

    $html .= "<li class=\"review\">";
    $html .= "<p><strong>{$name}:</strong> {$rating} stars</p>";
    $html .= "<p>{$comment}</p>";
    $html .= "</li>";
  }

  $html .= "</ul>";
  $html .= "</div>";

  return $html;
}


/**
 * Example Usage:
 */

// Sample Reviews (replace with actual data from a database or form)
$reviews = [
  [
    'name' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Works exactly as advertised.',
  ],
  [
    'name' => 'Jane Smith',
    'rating' => 5,
    'comment' => 'Excellent value for the price. Highly recommended.',
  ],
  [
    'name' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It\'s okay, but could be better.',
  ]
];

// Call the function to display the reviews
$reviewHTML = displayUserReviews('Awesome Widget', $reviews);

// Output the HTML to the browser
echo $reviewHTML;


?>


<?php

/**
 * Class UserReview
 *
 * Handles user review creation, retrieval, and basic validation.
 */
class UserReview {

  private $db_connection;

  public function __construct($db_connection) {
    $this->db_connection = $db_connection;
  }

  /**
   * Creates a new user review.
   *
   * @param int $userId The ID of the user submitting the review.
   * @param int $productId The ID of the product being reviewed.
   * @param string $title The title of the review.
   * @param string $comment The review comment.
   * @return int|false The ID of the newly created review, or false on failure.
   */
  public function createReview(int $userId, int $productId, string $title, string $comment) {
    // Validation (Simple - can be expanded)
    if (!$this->isValidReview($userId, $productId, $title, $comment)) {
      return false;
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (user_id, product_id, title, comment)
            VALUES (:user_id, :product_id, :title, :comment)";

    // Prepare the statement
    $stmt = $this->db_connection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    return $stmt->execute();
  }

  /**
   * Retrieves a single review by its ID.
   *
   * @param int $reviewId The ID of the review to retrieve.
   * @return array|false An array containing the review data, or false if not found.
   */
  public function getReviewById(int $reviewId) {
    // Prepare the SQL statement
    $sql = "SELECT * FROM reviews WHERE id = :review_id";

    // Prepare the statement
    $stmt = $this->db_connection->prepare($sql);

    // Bind the parameter
    $stmt->bindParam(':review_id', $reviewId);

    // Execute the statement
    $stmt->execute();

    // Get the result
    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    // Return the review data
    return $review;
  }

  /**
   * Retrieves all reviews for a given product.
   *
   * @param int $productId The ID of the product.
   * @return array An array of review objects.
   */
  public function getReviewsByProduct(int $productId) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db_connection->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Validates the review data.  Add more complex validation as needed.
   *
   * @param int $userId
   * @param int $productId
   * @param string $title
   * @param string $comment
   * @return bool True if the data is valid, false otherwise.
   */
  private function isValidReview(int $userId, int $productId, string $title, string $comment) {
    // Basic validation - enhance as needed
    if ($userId <= 0) {
      return false;
    }
    if ($productId <= 0) {
      return false;
    }
    if (empty($title)) {
      return false;
    }
    if (empty($comment)) {
      return false;
    }
    return true;
  }
}


// Example Usage (Assuming you have a database connection established)
// Replace with your actual database connection details
$db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

$reviewManager = new UserReview($db_connection);

// Create a review
$userId = 1;
$productId = 10;
$reviewTitle = "Great Product!";
$reviewComment = "I really enjoyed this product. Highly recommended!";

$reviewId = $reviewManager->createReview($userId, $productId, $reviewTitle, $reviewComment);

if ($reviewId) {
  echo "Review created successfully with ID: " . $reviewId . "<br>";
} else {
  echo "Failed to create review.<br>";
}

// Get review by ID
$review = $reviewManager->getReviewById($reviewId);

if ($review) {
  echo "Review details: ";
  foreach ($review as $key => $value) {
    echo $key . ": " . $value . ", ";
  }
  echo "<br>";
} else {
  echo "Review not found.<br>";
}

// Get reviews for a product
$productReviews = $reviewManager->getReviewsByProduct($productId);

echo "Reviews for Product " . $productId . ":<br>";
foreach ($productReviews as $review) {
  echo "- " . $review['title'] . " - " . $review['comment'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product/service.
 * @param int $maxReviews The maximum number of reviews to allow.
 * @param string $reviewForm  The HTML form for collecting reviews.  Consider using a template engine for this.
 * @param string $reviewDisplayTemplate The template to use for displaying reviews.  Consider using a template engine for this.
 * @param array $reviews  An optional array of existing reviews to display.
 *
 * @return array An array of review data, including the form and displayed reviews.
 */
function collectAndDisplayUserReviews(
    string $productId,
    int $maxReviews = 5,
    string $reviewForm = '
        <form action="process_review.php" method="post">
            <label for="review_text">Your Review:</label><br>
            <textarea id="review_text" name="review_text" rows="4" cols="50"></textarea><br>
            <button type="submit">Submit Review</button>
        </form>
    ',
    string $reviewDisplayTemplate = '
        <h2>Reviews for Product ID: {$productId}</h2>
        <ul>
            {$reviews}
        </ul>
    ',
    array $reviews = []
) {
    // Validate inputs (optional, but recommended)
    if (!is_numeric($productId)) {
        trigger_error('Invalid product ID. Must be a number.', E_USER_WARNING);
        return ['form' => $reviewForm, 'reviews' => $reviews];
    }
    if ($maxReviews <= 0) {
        trigger_error('Maximum reviews must be greater than 0.', E_USER_WARNING);
        $maxReviews = 5; // Default to 5
    }


    // Add the current review to the reviews array (simulating a form submission)
    $reviews = array_merge($reviews, [
        [
            'user' => 'John Doe',
            'rating' => 4,
            'comment' => 'Great product!  Easy to use.'
        ],
        [
            'user' => 'Jane Smith',
            'rating' => 5,
            'comment' => 'Excellent value for money.'
        ]
    ]);

    // Pass data to the display template
    $data = [
        'productId' => $productId,
        'reviews' => $reviews,
    ];

    // Pass the data to the display template
    $output = str_replace(['{$productId}', '{$reviews}'], $data, $reviewDisplayTemplate);

    return ['form' => $reviewForm, 'output' => $output];
}


// Example Usage:
$reviewData = collectAndDisplayUserReviews('12345');

// Display the results
echo $reviewData['output'];
?>


   $loader = new \Twig\Loader\FilesystemLoader('templates/'); // Adjust path
   $twig = new \Twig\Environment($loader);
   

3. **Use Twig to render the template:**

   
   $template = $twig->render('review_template.twig', $reviewData);
   echo $template;
   

   Where `review_template.twig` is your Twig template file.

**Example `review_template.twig` (using Twig):**



<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $reviews = [];
    private $db = null; // Database connection object

    /**
     * Constructor
     *
     * Initializes the Review object and establishes database connection (optional).
     *
     * @param PDO|null $db (Optional) PDO database connection object.  If null, uses in-memory storage.
     */
    public function __construct(PDO $db = null) {
        $this->db = $db;
        if (!$this->db) {
            // In-memory storage - this is a simple example and not suitable for production
            $this->reviews = [];
        }
    }

    /**
     * Add a new review.
     *
     * @param string $user   The user who wrote the review.
     * @param string $comment The review comment.
     * @return bool True on success, false on failure (e.g., empty comment).
     */
    public function addReview(string $user, string $comment): bool {
        if (empty($comment)) {
            return false;
        }

        $id = count($this->reviews) + 1; // Simple ID generation
        $this->reviews[$id] = [
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];
        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get a review by its ID.
     *
     * @param int $id The ID of the review to retrieve.
     * @return array|null Review object if found, null otherwise.
     */
    public function getReviewById(int $id): ?array {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        }
        return null;
    }

    /**
     * Delete a review by its ID.
     *
     * @param int $id The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $id): bool {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
            return true;
        }
        return false;
    }


    // --- Database integration (Optional - for persistence) ---
    /**
     *  Save Reviews to Database (Example)
     *  This is a simplified example.  A production system would likely
     *  use a more robust ORM or query builder.
     */
    public function saveToDatabase() {
        if ($this->db) {
            try {
                $sql = "INSERT INTO reviews (user, comment, date) VALUES (:user, :comment, :date)";
                $stmt = $this->db->prepare($sql);
                $stmt->bindParam(':user', $this->reviews);
                $stmt->bindParam(':comment', $this->reviews);
                $stmt->bindParam(':date', date('Y-m-d H:i:s'));

                $stmt->execute();

            } catch (PDOException $e) {
                // Handle database errors - log them, display a generic message to the user, etc.
                error_log("Database error: " . $e->getMessage());
                echo "Error saving review to database.";
            }
        }
    }
}


// --- Example Usage ---

// Create a Review object - using in-memory storage
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("Alice", "Great product!");
$reviewSystem->addReview("Bob", "Could be better.");
$reviewSystem->addReview("Charlie", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Date:</strong> " . $review['date'] . "<br>";
    echo "<hr>";
}

// Get a specific review
$specificReview = $reviewSystem->getReviewById(2);
if ($specificReview) {
    echo "<h2>Review ID 2:</h2>";
    echo "<strong>User:</strong> " . $specificReview['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $specificReview['comment'] . "<br>";
}

// Delete a review
$reviewSystem->deleteReview(1);

echo "<h2>Reviews after deleting review ID 1:</h2>";
$allReviews = $reviewSystem->getAllReviews();
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<hr>";
}
?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a given item.
 * It includes basic input validation and error handling.
 * 
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array $db_connection A database connection object (e.g., mysqli).
 * 
 * @return bool True if the review was successfully added, false otherwise.
 */
function add_user_review(string $item_id, string $username, string $rating, string $comment, array $db_connection) {
  // Input Validation - Basic example, expand as needed
  if (empty($item_id) || empty($username) || empty($rating) || empty($comment)) {
    error_log("Missing required fields in user review."); // Log for debugging
    return false;
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    error_log("Invalid rating format. Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize Input - Important for security
  $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
  $username = filter_var($username, FILTER_SANITIZE_STRING);
  $rating = (int) filter_var($rating, FILTER_SANITIZE_NUMBER_INT);  // Convert to integer
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);

  // Prepare the SQL query - Use prepared statements to prevent SQL injection
  $sql = "INSERT INTO reviews (item_id, username, rating, comment) 
          VALUES (?, ?, ?, ?)";

  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    error_log("Error preparing SQL statement: " . $db_connection->error); // Log the error
    return false;
  }

  // Bind parameters
  $stmt->bind_param("ssii", $item_id, $username, $rating, $comment);

  // Execute the query
  if (!$stmt->execute()) {
    error_log("Error executing SQL query: " . $stmt->error); // Log the error
    $stmt->close();
    return false;
  }

  // Close the statement
  $stmt->close();

  return true;
}

/**
 *  Example function to display reviews for a given item ID
 *  This is just a conceptual example, you'll need to adapt it to your specific database schema and presentation layer.
 *
 * @param string $item_id The ID of the item to retrieve reviews for
 * @param array $db_connection  Your database connection object
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function get_reviews_for_item(string $item_id, array $db_connection) {
    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing SQL statement: " . $db_connection->error);
        return [];
    }

    $stmt->bind_param("s", $item_id);

    $stmt->execute();

    if ($stmt === false) {
        error_log("Error executing SQL query: " . $stmt->error);
        return [];
    }

    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


// Example Usage (Illustrative - requires a database connection setup)
//  Remember to replace with your actual database connection details!

// Sample database connection (Replace with your actual connection)
//$db_connection = new mysqli("localhost", "your_username", "your_password", "your_database");

//if ($db_connection->connect_error) {
//  die("Connection failed: " . $db_connection->connect_error);
//}


// Add a review
//$item_id = "product123";
//$username = "john.doe";
//$rating = 3;
//$comment = "Great product, would recommend!";

//if (add_user_review($item_id, $username, $rating, $comment, $db_connection)) {
//    echo "Review added successfully!
";
//} else {
//    echo "Failed to add review.
";
//}

// Get and display reviews for the item
//  Assuming a table named 'reviews' with columns: item_id, username, rating, comment
//  and that the item_id is 'product123'
//  This is just conceptual - you'll need to adapt the output to display in your interface.
//  $reviews = get_reviews_for_item("product123", $db_connection);

//if (!empty($reviews)) {
//    echo "<h2>Reviews for product123:</h2>
";
//    foreach ($reviews as $review) {
//        echo "<div>
";
//        echo "  <b>Username:</b> " . $review['username'] . "<br>
";
//        echo "  <b>Rating:</b> " . $review['rating'] . "<br>
";
//        echo "  <b>Comment:</b> " . $review['comment'] . "
";
//        echo "  </div>
";
//    }
//} else {
//    echo "No reviews found for this item.
";
//}

// Close the database connection
//$db_connection->close();

?>


<?php

/**
 * User Review Function
 *
 * This function creates and stores a user review in a database.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param int $product_id The ID of the product being reviewed.
 * @return bool True if the review was created successfully, false otherwise.
 */
function createReview(string $username, string $rating, string $comment, int $product_id)
{
    // Validate Input - Important for security and data integrity
    if (empty($username) || empty($rating) || empty($comment) || $product_id <= 0) {
        error_log("Invalid review data received: Username, rating, and comment cannot be empty, product ID must be positive.");  // Log for debugging
        return false;
    }

    if (!preg_match('/^[a-zA-Z\s]+$/', $comment)) {
        error_log("Invalid comment format.  Only letters and spaces are allowed.");
        return false;
    }

    if (!preg_match('/^[1-5]$/', $rating)) {
      error_log("Rating must be a number between 1 and 5.");
      return false;
    }

    // Database connection (Replace with your actual database credentials)
    $db_host = 'localhost';
    $db_user = 'your_db_user';
    $db_password = 'your_db_password';
    $db_name = 'your_db_name';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection failed: " . $e->getMessage());
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (username, rating, comment, product_id) VALUES (:username, :rating, :comment, :product_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the query
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Error executing SQL query: " . $e->getMessage());
        return false;
    } finally {
        $pdo = null; // Close the database connection
    }
}


// Example Usage (for demonstration purposes - don't use directly in your application)
// $success = createReview("John Doe", 5, "Great product! Highly recommend.", 123);
// if ($success) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_id The ID of the item being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $review_text The text of the review.
 * @param array $reviews An array of existing reviews (optional - for storing reviews in a database or array).
 * 
 * @return array  An updated array of reviews if reviews are being stored, 
 *                or the original reviews if not.
 */
function submit_review(string $item_id, string $username, string $review_text, array &$reviews = []) {

  // Basic input validation (you can add more robust validation here)
  if (empty($username) || empty($review_text)) {
    return $reviews; // Return existing reviews if input is invalid
  }

  // Create a new review object (you could use a class here for better organization)
  $review = [
    'item_id' => $item_id,
    'username' => $username,
    'review_text' => $review_text,
    'timestamp' => date('Y-m-d H:i:s') // Add a timestamp for ordering
  ];

  // Add the new review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Display Reviews Function
 * 
 * This function displays a list of reviews for a given item.
 *
 * @param array $reviews An array of reviews.
 * @param string $item_id The ID of the item being reviewed (for display purposes).
 */
function display_reviews(array $reviews, string $item_id) {
  echo "<h2>Reviews for Item ID: " . $item_id . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "</p>";
    echo "<p><strong>Date:</strong> " . $review['timestamp'] . "</p>";
    echo "</li>";
  }
  echo "</ul>";
}

// Example Usage:
$item_id = '123'; // Example item ID

// Simulate submitting a review
$reviews = []; // Start with an empty array
$reviews = submit_review($item_id, 'John Doe', 'Great product!  Highly recommended.');
$reviews = submit_review($item_id, 'Jane Smith', 'It was okay, but a little expensive.');
$reviews = submit_review($item_id, 'Peter Jones', 'Excellent service and fast delivery.');


// Display the reviews
display_reviews($reviews, $item_id);



//----------------------------------------------------------------------
// Example demonstrating how to save to a database instead of an array.
//----------------------------------------------------------------------
/*
// This requires a database connection.  This is just a placeholder.
// Replace with your database connection details.
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Attempt to connect to the database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to save reviews to the database
function save_review_to_db(string $item_id, string $username, string $review_text, mysqli $conn) {
    $sql = "INSERT INTO reviews (item_id, username, review_text, timestamp)
            VALUES ('$item_id', '$username', '$review_text', NOW())";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}


//Example Usage (Assuming a 'reviews' table with columns item_id, username, review_text, timestamp)
//  You'd call this after submitting the review form.
//  $review_result = save_review_to_db($item_id, $username, $review_text, $conn);
//  if ($review_result) {
//     // Review saved successfully
//  } else {
//     // Handle error saving to database
//  }

// Close the database connection
$conn->close();
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews and displays them.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array  $reviews  (Optional) An array of existing reviews to display.
 * 
 * @return array  An array containing the updated reviews and a success message.
 */
function handleReview(string $productId, string $username, string $reviewText, array &$reviews = []): array {
  // Validate input (add more validation as needed)
  if (empty($reviewText)) {
    return ['status' => 'error', 'message' => 'Review text cannot be empty.'];
  }

  // Create a review object (could be more sophisticated if needed)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time(), // Add timestamp for ordering and tracking
  ];

  // Add the new review to the array
  $reviews[] = $review;

  // Sort reviews by timestamp (most recent first)
  usort($reviews, function($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return ['status' => 'success', 'message' => 'Review submitted successfully!', 'reviews' => $reviews];
}

/**
 * Display Reviews Function
 *
 *  Displays the reviews in a formatted manner.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>"; // Display Product ID

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  foreach ($reviews as $review) {
    echo "<div class='review'>";
    echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
    echo "<p><strong>Rating:</strong>" . $review['timestamp'] . "</p>"; // Display timestamp as a proxy for rating
    echo "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
    echo "</div>";
  }
}


// --- Example Usage ---

// Initialize reviews array (optional)
$reviews = [];

// Simulate a user submitting a review
$result = handleReview('P123', 'JohnDoe', 'This is a fantastic product! I highly recommend it.');

if ($result['status'] === 'success') {
  echo "<p>" . $result['message'] . "</p>";
  // Display the updated reviews
  displayReviews($result['reviews']);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

//Example 2 - submitting another review
$result = handleReview('P123', 'JaneSmith', 'It could be better, but overall pretty good.');

if ($result['status'] === 'success') {
  echo "<p>" . $result['message'] . "</p>";
  // Display the updated reviews
  displayReviews($result['reviews']);
} else {
  echo "<p>Error submitting review: " . $result['message'] . "</p>";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to manage and store user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId; // Assuming you have a product ID
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId The ID of the user leaving the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters
     *
     * Return the values of the review properties.
     *
     * @return mixed  Return the value of the property.
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setters (optional - for updating reviews in the future)
     *  Example:
     *  public function setComment($newComment) {
     *      $this->comment = $newComment;
     *  }
     */
}


/**
 * User Review Review Function (Demonstration)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
    // Create a new UserReview object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // **In a real application, you would now store this review in a database or file.**
    // For this example, we'll just print the review information.

    echo "Review Details:
";
    echo "  User ID: " . $review->getUserId() . "
";
    echo "  Product ID: " . $review->getProductId() . "
";
    echo "  Rating: " . $review->getRating() . "
";
    echo "  Comment: " . $review->getComment() . "
";
    echo "  Date: " . $review->getDate() . "
";
}


// Example Usage:
reviewProduct(123, 456, 5, "Great product! I highly recommend it.");
reviewProduct(456, 789, 3, "It's okay, but could be better.");


// Example of using a database (Conceptual - requires database connection)
/*
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');

// Example insert statement:
// $stmt = $db->prepare("INSERT INTO reviews (userId, productId, rating, comment) VALUES (?, ?, ?, ?)");
// $stmt->execute([$review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment()]);
*/

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, product ID, and a review text,
 * and saves the review to a database.
 *
 * @param int $userId  The ID of the user submitting the review.
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Sanitize input - Important for security!
    $userId = filter_var($userId, FILTER_VALIDATE_INT);
    $productId = filter_var($productId, FILTER_VALIDATE_INT);
    $reviewText = trim($reviewText);  // Remove leading/trailing whitespace

    // Validation - Check if inputs are valid
    if ($userId <= 0 || $productId <= 0 || empty($reviewText)) {
        error_log("Invalid review data:  userId, productId, and reviewText must be positive and non-empty.");
        return false;
    }


    // --- Database Interaction (Example using MySQLi) ---
    $servername = "localhost";
    $username = "your_db_username";
    $password = "your_db_password";
    $dbname = "your_db_name";

    // Create connection
    $conn = new mysqli($servername, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Prepare statement
    $stmt = $conn->prepare("INSERT INTO reviews (userId, productId, reviewText, reviewDate) VALUES (?, ?, ?, NOW())");

    // Bind parameters
    $stmt->bind_param("iii", $userId, $productId, $reviewText);

    // Execute statement
    if ($stmt->execute()) {
        $stmt->close();
        $conn->close();
        return true;
    } else {
        $stmt->close();
        $conn->close();
        error_log("Error saving review: " . $stmt->error);
        return false;
    }
}

// --- Example Usage ---

// Simulate a review
$user_id = 123;
$product_id = 456;
$review = "This product is fantastic!  I highly recommend it.";

// Save the review
if (saveUserReview($user_id, $product_id, $review)) {
    echo "Review saved successfully!
";
} else {
    echo "Failed to save review.
";
}

// --- Example with invalid data ---
if (saveUserReview(0, 10, "Bad review")) {
    echo "Review saved successfully (unexpectedly).
";
} else {
    echo "Failed to save review (as expected).
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a formatted user review string
 * based on the provided review data.
 *
 * @param array $reviewData An associative array containing review data:
 *   - `user`: The username of the reviewer (string).
 *   - `rating`: The rating given by the reviewer (integer, 1-5).
 *   - `comment`: The reviewer's comment (string).
 *   - `date`: (Optional) The date of the review (string, formatted as YYYY-MM-DD).
 *
 * @return string A formatted user review string, or an error message if the
 *                input data is invalid.
 */
function generateUserReview(array $reviewData) {
    // Input validation - crucial for security and data integrity
    if (!isset($reviewData['user']) || !is_string($reviewData['user'])) {
        return "Error: Invalid user name.";
    }
    if (!isset($reviewData['rating']) || !is_int($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        return "Error: Invalid rating. Rating must be an integer between 1 and 5.";
    }
    if (!isset($reviewData['comment']) || !is_string($reviewData['comment'])) {
        return "Error: Invalid comment.";
    }
    if (isset($reviewData['date']) && !is_string($reviewData['date'])) {
        return "Error: Invalid date format.  Date must be a string.";
    }
    // Default date format if not provided
    $date = $reviewData['date'] ?? date("Y-m-d");

    // Generate the review string
    $review = sprintf(
        "**%s** - %s stars
",
        $reviewData['user'],
        $reviewData['rating']
    );

    $review .= $reviewData['comment'] . "
";
    $review .= "Date: " . $date;

    return $review;
}


// Example Usage:

$review1 = generateUserReview(['user' => 'Alice', 'rating' => 4, 'comment' => 'Great product, highly recommended!', 'date' => '2023-10-26']);
echo $review1 . "

";

$review2 = generateUserReview(['user' => 'Bob', 'rating' => 3, 'comment' => 'It was okay.', 'date' => '2023-10-27']);
echo $review2 . "

";

$review3 = generateUserReview(['user' => 'Charlie', 'rating' => 5, 'comment' => 'Fantastic!']);
echo $review3 . "

";

// Example with invalid data:
$review4 = generateUserReview(['rating' => 6, 'comment' => 'Bad']);
echo $review4 . "

"; // This will produce an error message.

$review5 = generateUserReview(['user' => 'David', 'rating' => 2, 'comment' => 'Terrible']);
echo $review5 . "

"; // Another example of error handling.

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating; // 1-5
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product/item being reviewed.
     * @param int $rating The rating given by the user (1-5).
     * @param string $comment The user's comment about the product/item.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->reviewId = null; // Will be assigned automatically by the database
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (if needed - can be added for modifying review data)
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    // Add more setters as needed (e.g., for comment)
}


/**
 * User Review Function
 *
 * This function takes a UserReview object and returns a formatted string
 * representing the review.
 *
 * @param UserReview $review The UserReview object to format.
 *
 * @return string A formatted string of the review data.
 */
function formatUserReview(UserReview $review) {
    $userId = $review->getUserId();
    $rating = $review->getRating();
    $comment = $review->getComment();
    $date = $review->getDate();

    return "Review ID: " . $review->getReviewId() . "
" .
           "User ID: " . $userId . "
" .
           "Rating: " . $rating . "/5
" .
           "Comment: " . $comment . "
" .
           "Date: " . $date;
}



// --- Example Usage ---

// Create a new review
$review = new UserReview(123, 456, 5, "Excellent product!  Highly recommended.");

// Format the review
$formattedReview = formatUserReview($review);

// Print the formatted review
echo $formattedReview . "
";

// Example with a different review
$review2 = new UserReview(789, 101, 3, "Good, but could be better.");
echo formatUserReview($review2) . "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating (Optional)  The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing the review data, or an error message if the submission fails.
 */
function submitReview(string $product_id, string $user_name, string $review_text, int $rating = 0) {

  // Validation - Basic input validation.  Expand as needed for your application.
  if (empty($product_id)) {
    return ['error' => 'Product ID cannot be empty.'];
  }
  if (empty($user_name)) {
    return ['error' => 'User name cannot be empty.'];
  }
  if (empty($review_text)) {
    return ['error' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['error' => 'Rating must be between 1 and 5.'];
  }

  // In a real application, you would save this data to a database.
  // This example just simulates the storage.
  $review = [
    'product_id' => $product_id,
    'user_name' => $user_name,
    'review_text' => $review_text,
    'rating' => $rating,
    'submission_timestamp' => date('Y-m-d H:i:s')
  ];

  // Simulate saving the review to a file (replace with database insertion)
  file_put_contents('reviews.txt', json_encode($review) . PHP_EOL, FILE_APPEND);

  return $review;
}


/**
 *  Get all Reviews
 *
 *  Retrieves all reviews for a given product.  In a production system,
 *  this would query a database.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviews(string $product_id) {
  // Simulate reading reviews from a file
  $reviews = [];
  $file = fopen('reviews.txt', 'r');
  if ($file) {
    while (($line = fgets($file)) !== false) {
      $review = json_decode($line, true);
      if ($review && $review['product_id'] == $product_id) {
        $reviews[] = $review;
      }
    }
    fclose($file);
  }
  return $reviews;
}



// Example Usage
// Submit a review
$review_data = submitReview('product123', 'John Doe', 'Great product! Highly recommended.', 5);

if (isset($review_data['error'])) {
  echo "Error submitting review: " . $review_data['error'] . "
";
} else {
  echo "Review submitted successfully: " . json_encode($review_data) . "
";
}

// Get all reviews for product123
$all_reviews = getReviews('product123');

if (empty($all_reviews)) {
  echo "No reviews found for product123.
";
} else {
  echo "Reviews for product123:
";
  foreach ($all_reviews as $review) {
    echo "  - User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Text: " . $review['review_text'] . "
";
  }
}


?>


<?php

/**
 * User Review Class
 * 
 * Represents a user review for a product or item.
 */
class UserReview {
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $userId The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's written review.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the date and time of the review
    }

    /**
     * Getters
     */
    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display Review (for debugging/presentation)
     *
     * @return string  A formatted string representing the review.
     */
    public function displayReview() {
        return "User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}

/**
 * User Review Function (Example Usage)
 */
function createAndDisplayReview($userId, $productId, $rating, $comment) {
    // Create a new review object
    $review = new UserReview($userId, $productId, $rating, $comment);

    // Display the review
    echo $review->displayReview() . "

";

    // You could also save this review to a database here.
}


// Example Usage:
createAndDisplayReview(123, 456, 5, "Great product!  Highly recommend.");
createAndDisplayReview(789, 101, 3, "It was okay, but could be better.");

?>


<?php

/**
 * Class UserReview
 *
 * Handles creating, retrieving, and displaying user reviews.
 */
class UserReview
{
    private $db; // Database connection

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview($productId, $username, $rating, $comment)
    {
        // Validate inputs (important for security and data integrity)
        if (!$this->validateInput($productId, $username, $rating, $comment)) {
            return false;
        }

        // Escape data to prevent SQL injection
        $productId = $this->db->real_escape_string($productId);
        $username = $this->db->real_escape_string($username);
        $rating = $this->db->real_escape_string($rating);
        $comment = $this->db->real_escape_string($comment);


        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                VALUES ('$productId', '$username', '$rating', '$comment')";

        if ($this->db->query($sql) === TRUE) {
            return true;
        } else {
            // Handle database error
            error_log("Error creating review: " . $this->db->error);
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews.
     */
    public function getReviewsByProduct($productId)
    {
        $productId = $this->db->real_escape_string($productId);

        $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            $reviews = [];
            while ($row = $result->fetch_assoc()) {
                $reviews[] = new Review($row); // Assuming you have a Review class
                // Alternatively,  $reviews[] = $row;
            }
            return $reviews;
        } else {
            return [];
        }
    }

     /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     *
     * @return Review|null A Review object if found, null otherwise.
     */
    public function getReviewById($reviewId) {
        $reviewId = $this->db->real_escape_string($reviewId);

        $sql = "SELECT * FROM reviews WHERE id = '$reviewId'";
        $result = $this->db->query($sql);

        if ($result->num_rows == 1) {
            $row = $result->fetch_assoc();
            return new Review($row);
        } else {
            return null;
        }
    }



    /**
     * Validates input data.  This is crucial for security and data integrity.
     *
     * @param int $productId
     * @param string $username
     * @param string $rating
     * @param string $comment
     *
     * @return bool True if inputs are valid, false otherwise.
     */
    private function validateInput($productId, $username, $rating, $comment)
    {
        if (!is_numeric($productId)) {
            return false;
        }

        if (empty($username)) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        if (empty($comment)) {
            return false;
        }

        return true;
    }
}


/**
 * Review Class (simplified example)
 */
class Review
{
    public $id;
    public $productId;
    public $userName;
    public $rating;
    public $comment;
    public $createdAt;

    public function __construct($data)
    {
        $this->id = $data['id'];
        $this->productId = $data['product_id'];
        $this->userName = $data['user_name'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->createdAt = $data['created_at'];
    }
}



// Example Usage (using a mock database connection for demonstration)
//  Replace this with your actual database connection

class MockDB
{
    public function real_escape_string($str) {
        return $str; // Mock implementation -  In real code, this should handle proper escaping.
    }

    public function query($sql) {
      // Simulate database query results.  Replace with your actual database queries.
      if ($sql == "SELECT * FROM reviews WHERE product_id = 1") {
        return new ReviewResult(['id' => 1, 'product_id' => 1, 'user_name' => 'JohnDoe', 'rating' => 5, 'comment' => 'Great product!', 'created_at' => '2023-10-27 10:00:00']);
      } else if ($sql == "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES ('1', 'JaneSmith', '4', 'Good but could be better')") {
        return true; // Simulate successful insert
      }
      else {
        return new ReviewResult();
      }

    }

    public function error() {
      return "Database error";
    }
}

$db = new MockDB();
$reviewSystem = new UserReview($db);

// Create a review
if ($reviewSystem->createReview(1, 'JohnDoe', 5, 'Excellent product!')) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}

// Get reviews for product 1
$reviews = $reviewSystem->getReviewsByProduct(1);

echo "Reviews for product 1:
";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "  ID: " . $review->id . ", User: " . $review->userName . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }
} else {
    echo "  No reviews found.
";
}

// Get review by ID
$review = $reviewSystem->getReviewById(1);

if ($review) {
    echo "Review ID 1:
";
    echo "  ID: " . $review->id . ", User: " . $review->userName . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
} else {
    echo "Review not found.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and demonstrates how to interact with a 
 * hypothetical database.  You'll need to adapt the database interaction part
 * to your specific database system (MySQL, PostgreSQL, etc.).
 */

class Review
{
    private $db; // Database connection

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The name of the user submitting the review.
     * @param string $comment The review text.
     * @return int|false  The ID of the new review if successful, false otherwise.
     */
    public function createReview(int $productId, string $user, string $comment)
    {
        // Input Validation - Basic
        if (!$productId || !$user || !$comment) {
            return false;
        }

        // Sanitize inputs (important for security - prevents SQL injection)
        $productId = $this->db->real_escape_string($productId);
        $user = $this->db->real_escape_string($user);
        $comment = $this->db->real_escape_string($comment);

        // SQL Query (Adapt to your database system)
        $query = "INSERT INTO reviews (product_id, user, comment) VALUES ('$productId', '$user', '$comment')";

        if ($this->db->query($query) === TRUE) {
            return $this->db->insert_id; // Returns the ID of the newly inserted row
        } else {
            echo "Error: " . $this->db->error . "<br>"; // Handle database errors
            return false;
        }
    }

    /**
     * Get a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|false  An array containing review data if found, false otherwise.
     */
    public function getReview(int $reviewId)
    {
        $reviewId = $this->db->real_escape_string($reviewId);

        $query = "SELECT * FROM reviews WHERE id = '$reviewId'";
        $result = $this->db->query($query);

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            return $row;
        } else {
            return false;
        }
    }

    /**
     * Update a review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newComment The new review text.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $newComment)
    {
        $reviewId = $this->db->real_escape_string($reviewId);
        $newComment = $this->db->real_escape_string($newComment);

        $query = "UPDATE reviews SET comment = '$newComment' WHERE id = '$reviewId'";

        if ($this->db->query($query) === TRUE) {
            return true;
        } else {
            echo "Error: " . $this->db->error . "<br>";
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $reviewId = $this->db->real_escape_string($reviewId);

        $query = "DELETE FROM reviews WHERE id = '$reviewId'";

        if ($this->db->query($query) === TRUE) {
            return true;
        } else {
            echo "Error: " . $this->db->error . "<br>";
            return false;
        }
    }
}

// Example Usage (This needs a database connection)
// Replace with your database connection details
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$reviewManager = new Review($db);

// Create a new review
$newReviewId = $reviewManager->createReview(1, "John Doe", "This is a great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "<br>";
}

// Get the review
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review: " . $review['comment'] . "<br>";
}

// Update the review
$reviewManager->updateReview($newReviewId, "Updated Review Comment");

// Delete the review
$reviewManager->deleteReview($newReviewId);

$db->close(); // Always close the database connection

?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $review_id (optional, auto-generated)
   * @param int $user_id
   * @param int $product_id
   * @param int $rating (1-5)
   * @param string $comment
   */
  public function __construct($review_id = null, $user_id, $product_id, $rating, $comment) {
    $this->review_id = $review_id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Use current timestamp
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->review_id;
  }

  public function getUserId() {
    return $this->user_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Setters (optional - add if you need to modify these properties)
   */
  public function setRating($rating) {
    if ($rating >= 1 && $rating <= 5) {
      $this->rating = $rating;
    } else {
      echo "Invalid rating. Rating must be between 1 and 5.";
    }
  }
}


/**
 * User Review Review Function
 */
function reviewUser(UserReview $review) {
  // You can perform validation here (e.g., check if user exists, product exists, rating is valid)
  echo "Review Submitted by User " . $review->getUserId() . " for Product " . $review->getProductId() . ": " . $review->getComment() . " (Rating: " . $review->getRating() . ")" . PHP_EOL;

  // Example: Save the review to a database (replace with your actual database code)
  // $db = new DatabaseConnection();
  // $db->insertReview($review->getReviewId(), $review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment());
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "This product is amazing!");
reviewUser($review1);

$review2 = new UserReview(null, 456, 789, 4, "Good value for the money.");
reviewUser($review2);

$review3 = new UserReview(null, 789, 456, 3, "It could be better.");
reviewUser($review3);

// Example of setting a rating after creation
$review4 = new UserReview(null, 101, 112, 2, "Not impressed.");
$review4->setRating(1); // Set rating to 1
reviewUser($review4);


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $productName The name of the product or service.
 * @param string $reviewText The review text submitted by the user.
 * @param int   $rating     The rating given to the product or service (1-5).
 * @param string $username  The username of the reviewer.
 * @param array $reviews    (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *              - 'reviews': An array of review objects.
 *              - 'newReview': The newly submitted review (if any).
 */
function create_review(string $productId, string $productName, string $reviewText, int $rating, string $username, array &$reviews = []) {
    // Validate input (basic - can be expanded for more robust validation)
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'newReview' => ['error' => 'Review text cannot be empty.']];
    }
    if ($rating < 1 || $rating > 5) {
        return ['reviews' => $reviews, 'newReview' => ['error' => 'Rating must be between 1 and 5.']];
    }

    // Create a new review object
    $newReview = [
        'id' => count($reviews) + 1, // Simple ID generation - could use a database sequence
        'product_id' => $productId,
        'product_name' => $productName,
        'username' => $username,
        'review_text' => $reviewText,
        'rating' => $rating,
        'date' => date('Y-m-d H:i:s') // Add a timestamp
    ];

    // Add the new review to the array
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'newReview' => $newReview];
}

// Example Usage:
// $reviews = []; // Initialize an empty array to store reviews

// // Submit a review
// $result = create_review('123', 'Awesome Gadget', 'This gadget is fantastic!', 5, 'JohnDoe');
// print_r($result);

// // Display existing reviews
// if (isset($result['reviews'])) {
//     echo "<h2>Reviews for " . $result['newReview']['product_name'] . "</h2>";
//     foreach ($result['reviews'] as $review) {
//         echo "<h3>" . $review['username'] . "</h3>";
//         echo "<p>" . $review['review_text'] . "</p>";
//         echo "<p>Rating: " . $review['rating'] . "</p>";
//     }
// }

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation and display of user reviews.
 * It includes basic validation, saving to a database (optional), and
 * displaying the reviews.
 */

class UserReview {

    private $dbConnection; // Database connection object (optional)

    public function __construct($dbConnection = null) {
        $this->dbConnection = $dbConnection;
    }

    /**
     * Saves a new user review.
     *
     * @param string $username  The username of the reviewer.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment  The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function saveReview($username, $rating, $comment) {
        // Basic validation
        if (empty($username) || empty($rating) || empty($comment)) {
            error_log("Invalid review data: username, rating, and comment are required."); // Log error (better than just returning false)
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            error_log("Invalid rating. Rating must be a number between 1 and 5.");
            return false;
        }

        // Database saving (optional - adjust as needed)
        if ($this->dbConnection) {
            $sql = "INSERT INTO reviews (username, rating, comment) VALUES (?, ?, ?)";
            $stmt = $this->dbConnection->prepare($sql);
            $stmt->bind_param("sii", $username, $rating, $comment); // 's' for string, 'i' for integer
            $result = $stmt->execute();

            if ($result) {
                $stmt->close();
                return true;
            } else {
                error_log("Error saving review to database: " . $this->dbConnection->error); // Log database error
                $stmt->close();
                return false;
            }
        } else {
            // No database connection, simply return true (or handle differently)
            // This can be useful for testing or simple scenarios.
            return true; //  Or you could store in a file, etc.
        }
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.
     */
    public function getReviews() {
        // In a real application, this would query the database.
        // This is a placeholder for demonstration.
        $reviews = [
            ['username' => 'JohnDoe', 'rating' => 4, 'comment' => 'Great product!'],
            ['username' => 'JaneSmith', 'rating' => 5, 'comment' => 'Excellent value for money.'],
            ['username' => 'PeterJones', 'rating' => 3, 'comment' => 'It was okay, nothing special.'],
        ];
        return $reviews;
    }

    /**
     * Displays a list of user reviews.
     */
    public function displayReviews() {
        echo "<h2>User Reviews</h2>";
        foreach ($this->getReviews() as $review) {
            echo "<p><strong>Username:</strong> " . htmlspecialchars($review['username']) . "</p>";
            echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
            echo "<p><strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "</p>";
            echo "<hr>";
        }
    }
}


// Example Usage:
// Assuming you have a database connection object named $dbConnection

// Create a new review object
$review = new UserReview($dbConnection); // Pass your DB connection

// Save a new review
if ($review->saveReview('TestUser', 5, 'This is a test review!')) {
    echo "<p>Review saved successfully!</p>";
} else {
    echo "<p>Error saving review.</p>";
}

// Display all reviews
$review->displayReviews();

?>


<?php

/**
 * This class provides a simple user review system.
 */
class UserReview {

    /**
     * Stores the reviews.
     * @var array
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param int    $userId     The ID of the user submitting the review.
     * @param string $reviewText The content of the review.
     * @return bool  Returns true on success, false on failure (e.g., empty review).
     */
    public function addReview(int $userId, string $reviewText): bool
    {
        if (empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'user_id' => $userId,
            'review_text' => $reviewText,
            'timestamp' => time() // Add timestamp for ordering/filtering
        ];

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }

        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false if the review does not exist.
     */
    public function deleteReview(int $reviewId): bool
    {
        $originalCount = count($this->reviews);
        $this->reviews = array_filter($this->reviews, function ($review) use ($reviewId) {
            return $review['id'] !== $reviewId;
        });
        return count($this->reviews) !== $originalCount;
    }

    /**
     * Generates unique IDs for new reviews.
     *
     * @return int Unique ID
     */
    private function generateUniqueId(): int
    {
        return rand(100000, 999999); // Example - generate 6-digit random number
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "This product is amazing!");
$reviewSystem->addReview(456, "I would definitely recommend this.");
$reviewSystem->addReview(123, "Great value for money.");

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

// Get a specific review
$review = $reviewSystem->getReviewById(2);
if ($review) {
    echo "Review: " . $review['review_text'] . "
";
} else {
    echo "Review not found.
";
}

// Delete a review
$reviewSystem->deleteReview(1);

// Get all reviews after deletion
$allReviews = $reviewSystem->getAllReviews();
print_r($allReviews);

//Add a new review after deletion
$reviewSystem->addReview(789, "This is the best product ever!");
print_r($reviewSystem->getAllReviews());


?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to create, read, update, and delete user reviews.
 * It uses a simple database (you'll need to adapt this to your actual database).
 * 
 *  Important:  This is a simplified example.  For a production environment,
 *  you should use a proper database library and implement robust error handling,
 *  input validation, and security measures.
 */

class UserReview {

    private $db_host = "localhost";
    private $db_name = "your_database_name";
    private $db_user = "your_db_user";
    private $db_pass = "your_db_password";

    private $db;

    public function __construct() {
        try {
            $this->db = new PDO("mysql:host=$this->db_host;dbname=$this->db_name", $this->db_user, $this->db_pass);
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * Creates a new review.
     *
     * @param string $product_id The ID of the product the review is for.
     * @param string $user_id   The ID of the user writing the review.
     * @param string $rating    The rating (e.g., 1-5).
     * @param string $comment   The review comment.
     *
     * @return int|false The ID of the new review if successful, or false on failure.
     */
    public function createReview(string $product_id, string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_id, $rating, $comment]);
            return $this->db->lastInsertId();

        } catch (PDOException $e) {
            // Log the error or handle it appropriately.
            error_log("Error creating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Reads a review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     *
     * @return array|false An array containing review data, or false if not found.
     */
    public function readReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            $review = $stmt->fetch(PDO::FETCH_ASSOC);
            return $review ? $review : false;

        } catch (PDOException $e) {
            error_log("Error reading review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $product_id The new product_id (if changed).
     * @param string $user_id   The new user_id (if changed).
     * @param string $rating    The new rating.
     * @param string $comment   The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $review_id, string $product_id, string $user_id, string $rating, string $comment) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET product_id = ?, user_id = ?, rating = ?, comment = ? WHERE id = ?");
            $stmt->execute([$product_id, $user_id, $rating, $comment, $review_id]);
            return $stmt->rowCount() > 0; // Return true if at least one row was affected.
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $review_id The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Reads all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews");
        $stmt->execute();
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }
        return $reviews;
    }
}


// Example Usage:
$reviewManager = new UserReview();

// Create a review
$newReviewId = $reviewManager->createReview(1, 123, 4, "Great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Read a review
$review = $reviewManager->readReview($newReviewId);
if ($review) {
    echo "Review: " . json_encode($review) . "
";
} else {
    echo "Review not found.
";
}

// Update a review
$updateSuccessful = $reviewManager->updateReview($newReviewId, 2, 456, 5, "Even better!");
if ($updateSuccessful) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review
$deleteSuccessful = $reviewManager->deleteReview($newReviewId);
if ($deleteSuccessful) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews: " . json_encode($allReviews) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and retrieve user reviews for a product or item.
 * It includes basic validation and formatting.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating  The rating (1-5).
 * @return array|string An array containing review details, or an error message string if validation fails.
 */
function createReview(string $productId, string $username, string $reviewText, int $rating)
{
    // Validate input
    if (empty($productId)) {
        return "Error: Product ID cannot be empty.";
    }

    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }

    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }

    // Sanitize input (Basic - Consider more robust sanitization for production)
    $productId = trim($productId);
    $username = trim($username);
    $reviewText = trim($reviewText);

    // Prepare review data
    $review = [
        'productId' => $productId,
        'username'  => $username,
        'reviewText' => $reviewText,
        'rating'    => $rating,
        'timestamp' => time() // Automatically record the timestamp
    ];

    // Store review (Placeholder - Replace with database or file storage)
    // In a real application, you'd save this to a database or file.
    // For this example, we'll just echo the data.
    echo "Review created:
";
    print_r($review);

    return $review; // Return the review data.
}


// Example Usage:

// Create a review
$review_data = createReview("product123", "John Doe", "Great product!  I love it.", 5);

// Another example
$review_data = createReview("product456", "Jane Smith", "It's okay, but could be better.", 3);

// Example demonstrating error handling:
$review_data = createReview("", "Error Test", "Invalid product ID", 4); // Empty product ID
echo "
" . $review_data;
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews.
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   *
   * @param int $reviewId (Optional) The unique identifier for the review. If not provided, it's automatically generated.
   * @param int $userId The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating The rating (e.g., 1-5 stars).
   * @param string $comment The user's comment about the product.
   */
  public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Timestamp for when the review was created
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Setters (optional - for updating reviews)
   */
  public function setComment($comment) {
    $this->comment = $comment;
  }

  // Add more setters as needed (e.g., for updating the rating)
}


/**
 * User Review Review Function (example)
 */
function displayReview($review) {
  echo "<p><strong>User:</strong> " . $review->getUserId() . "</p>";
  echo "<p><strong>Product:</strong> " . $review->getProductId() . "</p>";
  echo "<p><strong>Rating:</strong> " . $review->getRating() . " stars</p>";
  echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
  echo "<p><strong>Date:</strong> " . $review->getDate() . "</p>";
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! I love it.");
$review2 = new UserReview(null, 789, 456, 4, "Good value for the money.");

displayReview($review1);
displayReview($review2);


//  Example of how to add reviews to an array for database storage.
$reviews = [];

$review3 = new UserReview(null, 101, 102, 3, "It was okay.");
$reviews[] = $review3;

// Display all reviews
echo "<br><br><h2>All Reviews:</h2>";
foreach($reviews as $review) {
  displayReview($review);
  echo "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $userDetails (optional) An array containing user details (e.g., 'username', 'rating').
 * 
 * @return array An array containing review data (id, product, review, user, rating) 
 *               or null on error.
 */
function createAndDisplayReview(string $productName, string $reviewText, array $userDetails = []) {

  // Sanitize Input (VERY IMPORTANT - Prevent SQL Injection and Cross-Site Scripting)
  $productName = mysqli_real_escape_string($GLOBALS['db'], $productName); // Use your database connection here
  $reviewText = mysqli_real_escape_string($GLOBALS['db'], $reviewText);
  if (isset($userDetails['username'])) {
    $username = mysqli_real_escape_string($GLOBALS['db'], $userDetails['username']);
  } else {
    $username = 'Anonymous';
  }

  // Example Rating Handling (Assume a rating scale of 1-5)
  $rating = isset($userDetails['rating']) ? (int) $userDetails['rating'] : 0; // Convert to integer

  // Validation (Add more as needed)
  if (empty($reviewText)) {
    return ['error' => 'Review cannot be empty.'];
  }

  // Database Interaction (Replace with your actual database query)
  $sql = "INSERT INTO reviews (product, review, username, rating) VALUES ('$productName', '$reviewText', '$username', $rating)";
  $result = mysqli_query($GLOBALS['db'], $sql);

  if (!$result) {
    return ['error' => 'Database error: ' . mysqli_error($GLOBALS['db'])];
  }

  // Get the newly inserted review ID (important for display)
  $reviewId = mysqli_insert_id($GLOBALS['db']);


  // Return Review Data
  return [
    'id' => $reviewId,
    'product' => $productName,
    'review' => $reviewText,
    'user' => $username,
    'rating' => $rating
  ];
}


// Example Usage (Replace with your database connection)
// Simulate a database connection
$GLOBALS['db'] = new mysqli('localhost', 'username', 'password', 'database');

if ($GLOBALS['db']->connect_error) {
  die('Connection failed: ' . $GLOBALS['db']->connect_error);
}


// Create a review
$reviewData = createAndDisplayReview('Awesome Gadget', 'This gadget is fantastic! I love it.', ['username' => 'JohnDoe', 'rating' => 5]);

if (isset($reviewData['error'])) {
  echo "Error: " . $reviewData['error'] . "<br>";
} else {
  echo "Review ID: " . $reviewData['id'] . "<br>";
  echo "Product: " . $reviewData['product'] . "<br>";
  echo "Review: " . $reviewData['review'] . "<br>";
  echo "User: " . $reviewData['user'] . "<br>";
  echo "Rating: " . $reviewData['rating'] . "<br>";
}



// Display Existing Reviews (Example - Replace with your query)
$select_sql = "SELECT * FROM reviews WHERE product = 'Awesome Gadget'";
$result = $GLOBALS['db']->query($select_sql);

if ($result->num_rows > 0) {
  echo "<br><h2>Existing Reviews:</h2>";
  while($row = $result->fetch_assoc()) {
    echo "<br><b>Review ID:</b> " . $row['id'] . "<br>";
    echo "<b>Product:</b> " . $row['product'] . "<br>";
    echo "<b>Review:</b> " . $row['review'] . "<br>";
    echo "<b>User:</b> " . $row['username'] . "<br>";
    echo "<b>Rating:</b> " . $row['rating'] . "<br>";
    echo "<hr>";
  }
} else {
  echo "<br>No reviews found for 'Awesome Gadget'.";
}


?>


<?php

/**
 * User Review Class
 *
 * This class handles the creation, storage, and retrieval of user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId    The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Current timestamp
    }

    /**
     * Getters
     *
     * Returns the values of the review properties.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     *  Setter for reviewId (optional, typically only set during storage)
     *  @param int $reviewId
     */
    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

}


/**
 * User Review Review Function -  A basic function to simulate a user review functionality.
 * This is more of a demonstration and can be expanded significantly.
 */
function displayUserReview($review) {
    if ($review instanceof UserReview) {
        echo "<h2>Review for Product ID: " . $review->getProductId() . "</h2>";
        echo "<p><strong>User ID:</strong> " . $review->getUserId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $review->getRating() . " / 5</p>";
        echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . $review->getDate() . "</p>";
    } else {
        echo "Invalid Review Object.  Expected UserReview object.";
    }
}



// --- Example Usage ---

// Create some reviews
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
$review2 = new UserReview(456, 789, 4, "Good, but could be better.");
$review3 = new UserReview(789, 101, 3, "Average.  Nothing special.");

// Display the reviews
displayUserReview($review1);
echo "<br>";
displayUserReview($review2);
echo "<br>";
displayUserReview($review3);

?>


<?php

/**
 * Class Review
 * 
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review {

    private $db; // Database connection object

    /**
     * Constructor
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Creates a new review in the database.
     *
     * @param int $product_id The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return bool True on success, false on failure.
     */
    public function createReview(int $product_id, string $username, string $rating, string $comment): bool {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':username', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $product_id): array {
        $reviews = [];
        try {
            $stmt = $this->db->prepare("SELECT id, username, rating, comment, created_at FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);

            if ($result) {
                foreach ($result as $row) {
                    $reviews[] = new ReviewObject($row); // Use the ReviewObject
                }
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage()); // Log the error
            return [];
        }
    }


    /**
     *  Review Object - A simple object to hold review data.
     */
    private function __construct(array $data) {
        $this->id = $data['id'] ?? null;
        $this->product_id = $data['product_id'] ?? null;
        $this->username = $data['username'] ?? null;
        $this->rating = $data['rating'] ?? null;
        $this->comment = $data['comment'] ?? null;
        $this->created_at = $data['created_at'] ?? null;
    }

}

/**
 * Review Object - A simple object to hold review data.
 */
class ReviewObject {
    public int $id;
    public int $product_id;
    public string $username;
    public string $rating;
    public string $comment;
    public string $created_at;
}


// Example Usage (Illustrative - Replace with your actual database setup)
//  ----------------------------------------------------------------------

// Sample Database Setup (Replace with your connection details)
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

try {
    $db = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $reviews = new Review($db);

    // Create a review
    if ($reviews->createReview(1, "john_doe", 5, "Great product, highly recommended!")) {
        echo "Review created successfully!
";
    } else {
        echo "Error creating review.
";
    }

    // Get reviews for product ID 1
    $reviews = $reviews->getReviewsByProduct(1);

    if ($reviews) {
        echo "Reviews for product 1:
";
        foreach ($reviews as $review) {
            echo "  ID: " . $review->id . "
";
            echo "  Username: " . $review->username . "
";
            echo "  Rating: " . $review->rating . "
";
            echo "  Comment: " . $review->comment . "
";
            echo "  Created At: " . $review->created_at . "
";
            echo "---
";
        }
    } else {
        echo "No reviews found for product 1.
";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes validation and handling of user input.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $reviewer_name The name of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 * @return array  An array containing a success message or an error message.
 */
function submit_review(string $product_id, string $reviewer_name, string $rating, string $comment)
{
    // **Input Validation - Crucial for Security & Data Integrity**
    $errors = [];

    // Check for required fields
    if (empty($reviewer_name)) {
        $errors['reviewer_name'] = 'Reviewer name is required.';
    }

    if (empty($rating)) {
        $errors['rating'] = 'Rating is required.';
    }

    // Validate rating (e.g., numeric and within range)
    if (!is_numeric($rating)) {
        $errors['rating'] = 'Rating must be a number.';
    }

    if (!is_int($rating)) {
        $errors['rating'] = 'Rating must be an integer.';
    }

    if ($rating < 1 || $rating > 5) {
        $errors['rating'] = 'Rating must be between 1 and 5.';
    }

    if (empty($comment)) {
        $errors['comment'] = 'Review comment is required.';
    }

    // **Basic Sanitization (Important for preventing XSS attacks)**
    $reviewer_name = htmlspecialchars($reviewer_name);
    $comment = htmlspecialchars($comment);


    // **If no errors, process the review**
    if (empty($errors)) {
        // **Here you would typically save the review to a database.**
        // For demonstration, we'll just log it to the console.

        echo "Review submitted successfully!
";
        echo "Product ID: " . $product_id . "
";
        echo "Reviewer: " . $reviewer_name . "
";
        echo "Rating: " . $rating . "
";
        echo "Comment: " . $comment . "
";

        // Example database saving (Requires database connection and setup)
        /*
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
        $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_name, rating, comment) VALUES (?, ?, ?, ?)");
        $stmt->execute([$product_id, $reviewer_name, $rating, $comment]);
        */


        return ['success' => true, 'message' => 'Review submitted successfully!'];
    } else {
        // Return an array of errors.
        return ['success' => false, 'errors' => $errors];
    }
}

// **Example Usage**

// Test 1: Successful submission
$review_result = submit_review('123', 'John Doe', 5, 'Great product! I love it.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}

// Test 2:  Invalid rating
$review_result = submit_review('456', 'Jane Smith', 6, 'Excellent value.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}

// Test 3: Missing required field
$review_result = submit_review('789', '', 4, 'It\'s okay.');
if ($review_result['success']) {
    echo "Review submitted successfully!
";
} else {
    print_r($review_result['errors']);
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's written review.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 * @return array|null  An array containing the review data on success, or null on error.
 */
function saveUserReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Validate input - Important for security!
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required fields in saveUserReview.");
        return null;
    }

    if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return null;
    }

    // Connect to the database
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return null;
    }

    // Prepare and execute the SQL statement
    try {
        $sql = "INSERT INTO reviews (productId, username, rating, comment) 
                VALUES (:productId, :username, :rating, :comment)";

        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();

        return $pdo->lastInsertId(); // Return the ID of the newly inserted row
    } catch (PDOException $e) {
        error_log("Database query error: " . $e->getMessage());
        return null;
    } finally {
        // Close the database connection (important to release resources)
        $pdo = null;
    }
}


/**
 * Display User Reviews Function
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 * @return array|null An array of review data on success, or null on error.
 */
function getReviews(string $productId, string $dbHost, string $dbName, string $dbUser, string $dbPassword) {
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return null;
    }

    $sql = "SELECT * FROM reviews WHERE productId = :productId";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $reviews;
}



// Example Usage (replace with your actual database credentials)
$productId = "product123";
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_username";
$dbPassword = "your_password";

// Save a review
$reviewId = saveUserReview($productId, "john.doe", 4, "Great product, highly recommend!", $dbHost, $dbName, $dbUser, $dbPassword);

if ($reviewId) {
    echo "Review saved successfully! Review ID: " . $reviewId . "<br>";
} else {
    echo "Error saving review.";
}

// Retrieve and display reviews
$reviews = getReviews($productId, $dbHost, $dbName, $dbUser, $dbPassword);

if ($reviews) {
    echo "<h2>Reviews for " . $productId . ":</h2>";
    echo "<table>";
    echo "<tr><th>Username</th><th>Rating</th><th>Comment</th></tr>";
    foreach ($reviews as $review) {
        echo "<tr>";
        echo "<td>" . $review['username'] . "</td>";
        echo "<td>" . $review['rating'] . "</td>";
        echo "<td>" . $review['comment'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "No reviews found or error retrieving reviews.";
}


?>


<?php

/**
 * User Review Class
 *
 * This class handles the creation, storage, and retrieval of user reviews.
 */
class UserReview {

    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Adds a new review.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $userId, int $productId, string $rating, string $comment) {
        $rating = (int)$rating; // Ensure rating is an integer
        $comment = trim($comment); // Trim whitespace from the comment

        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        // Prepare the SQL query to prevent SQL injection
        $sql = "INSERT INTO reviews (userId, productId, rating, comment) VALUES (?, ?, ?, ?)";

        // Use prepared statements to prevent SQL injection vulnerabilities
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("iii", $userId, $productId, $rating, $comment);

        if (!$stmt->execute()) {
            error_log("Error adding review: " . $stmt->error); // Log the error
            return false;
        }

        return true;
    }


    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if none found.
     */
    public function getReviewsByProduct(int $productId) {
        $sql = "SELECT * FROM reviews WHERE productId = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $productId);

        if (!$stmt->execute()) {
            error_log("Error getting reviews: " . $stmt->error);
            return [];
        }

        $reviews = [];
        $stmt->bind_param("i"); // no need to bind parameters here

        while ($row = $stmt->fetch_assoc()) {
            $reviews[] = new UserReview($this->db); // Create a new review object
            $reviews[count($reviews) - 1]->userId = $row['userId'];
            $reviews[count($reviews) - 1]->productId = $row['productId'];
            $reviews[count($reviews) - 1]->rating = $row['rating'];
            $reviews[count($reviews) - 1]->comment = $row['comment'];
        }

        $stmt->close(); // Close the statement
        return $reviews;
    }

    /**
     * Retrieves a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return UserReview|null A UserReview object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if (!$stmt->execute()) {
            error_log("Error getting review by ID: " . $stmt->error);
            return null;
        }

        $row = $stmt->fetch_assoc();
        if ($row) {
            return new UserReview($this->db);
        }

        $stmt->close();
        return null;
    }


    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if (!$stmt->execute()) {
            error_log("Error deleting review: " . $stmt->error);
            return false;
        }

        $stmt->close();
        return true;
    }

}



// Example Usage (assuming you have a database connection $db)
// Create a database connection (replace with your actual connection)
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Create a UserReview instance
$reviewManager = new UserReview($db);

// Add a review
$reviewManager->addReview(123, 456, 5, "Great product!");

// Get reviews for product 456
$reviews = $reviewManager->getReviewsByProduct(456);
foreach ($reviews as $review) {
    echo "User ID: " . $review->userId . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Comment: " . $review->comment . "<br><br>";
}

//Get a specific review by id
$review = $reviewManager->getReviewById(1);
if ($review) {
    echo "Review by id 1: " . $review->comment . "<br>";
}

//delete a review
$reviewManager->deleteReview(1);

// Close the database connection
$db->close();

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic sanitization and validation.
 * 
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's comment.
 * @param string $username The user's name.
 * 
 * @return array An array containing the review data if successful, or an error message if not.
 */
function createReview(string $product_id, string $rating, string $comment, string $username): array
{
    // Input Validation - Basic Sanity Checks
    if (empty($product_id) || empty($rating) || empty($comment) || empty($username)) {
        return ['error' => 'All fields are required.'];
    }

    if (!preg_match('/^[0-5][0-9]*$/', $rating)) { // Ensure rating is a number between 1 and 5
        return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
    }

    if (strlen($comment) > 1000) { // Limit comment length for security and storage
        return ['error' => 'Comment exceeds the maximum length (1000 characters).'];
    }

    // Data Sanitization - Prevent XSS and SQL Injection
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING); //  Sanitize string
    $comment = filter_var($comment, FILTER_SANITIZE_STRING); // Sanitize string
    $username = filter_var($username, FILTER_SANITIZE_STRING); // Sanitize string

    // Data Preparation -  (In a real application, this would likely involve
    // connecting to a database and inserting the data).

    $review_data = [
        'product_id' => $product_id,
        'rating' => $rating,
        'comment' => $comment,
        'username' => $username,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    // In a real application, you'd store this data in a database
    // e.g.,  $db->insert('reviews', $review_data);

    return $review_data; // Return the review data.  This would be saved to the database.
}


/**
 * Displays a list of reviews for a product.
 *
 * @param array $reviews An array of review data (as returned by createReview).
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<h2>Reviews for Product ID: " . $reviews[0]['product_id'] . "</h2>"; // Display product ID
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['comment'] . " (" . $review['rating'] . "/5)";
    echo "</li>";
  }
  echo "</ul>";
}



// Example Usage:

// Create a review
$review = createReview("123", 5, "Great product!  I highly recommend it.", "John Doe");

if (isset($review['error'])) {
    echo "<p style='color:red;'>Error: " . $review['error'] . "</p>";
} else {
    echo "<p style='color:green;'>Review created successfully!</p>";
    echo "<p>Product ID: " . $review['product_id'] . "</p>";
    echo "<p>Rating: " . $review['rating'] . "</p>";
    echo "<p>Comment: " . $review['comment'] . "</p>";
    echo "<p>Username: " . $review['username'] . "</p>";
}

// Simulate multiple reviews for display
$reviews = [
    ['product_id' => '123', 'rating' => 4, 'comment' => 'Good value for money.', 'username' => 'Jane Smith'],
    ['product_id' => '123', 'rating' => 5, 'comment' => 'Excellent!', 'username' => 'Peter Jones'],
    ['product_id' => '456', 'rating' => 3, 'comment' => 'Average', 'username' => 'Sarah Brown']
];

displayReviews($reviews);
?>


<?php

/**
 * User Review Class
 *
 * Represents a user review and provides methods for adding, retrieving, and displaying reviews.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $username, string $rating, string $comment) {
        // Validate rating
        if (!preg_match('/^[1-5]+$/', $rating)) {
            return false;
        }

        // Create review object
        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for when the review was created
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all user reviews.
     *
     * @return array An array of review objects.  Returns an empty array if no reviews exist.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific item (placeholder - you'll need to adapt this)
     *
     * @param string $itemId The ID of the item the reviews are for.
     * @return array An array of review objects for the given item.  Returns an empty array if no reviews exist for the item.
     */
    public function getReviewsForItem(string $itemId) {
        // In a real application, you would likely query a database here.
        // This is just a placeholder.
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            //Add a logic to filter reviews based on item.
            if ($review['item'] === $itemId) {
               $reviews[] = $review;
            }
        }
        return $reviews;
    }


    /**
     * Displays all reviews in a formatted string.
     *
     * @return string A formatted string of reviews.
     */
    public function displayReviews() {
        $output = "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($this->getAllReviews() as $review) {
                $output .= "<li>";
                $output .= "<strong>Username:</strong> " . $review['username'] . "<br>";
                $output .= "<strong>Rating:</strong> " . $review['rating'] . "<br>";
                $output .= "<strong>Comment:</strong> " . $review['comment'] . "<br>";
                $output .= "<strong>Date:</strong> " . $review['date'] . "<br>";
                $output .= "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("JohnDoe", 5, "Great product!  Highly recommended.");
$reviewSystem->addReview("JaneSmith", 4, "Good value for the price.");
$reviewSystem->addReview("PeterJones", 3, "It's okay, could be better.");

// Display all reviews
echo $reviewSystem->displayReviews();

// Get reviews for a specific item (example)
$itemReviews = $reviewSystem->getReviewsForItem("Product123");
echo "<hr><h2>Reviews for Product123</h2>";
echo $reviewSystem->displayReviewsForItem("Product123");
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given item.
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $review_text The review text submitted by the user.
 * @param int $user_id (Optional) The ID of the user submitting the review.  Defaults to 0 (anonymous).
 * @return array An array containing:
 *   - 'success': True if the review was submitted successfully, False otherwise.
 *   - 'message': A message describing the result of the submission.
 *   - 'review': The submitted review text.
 *   - 'user_id': The ID of the user who submitted the review.
 */
function submit_review(string $item_name, string $review_text, int $user_id = 0) {
  // Input Validation (Basic - you should expand this for production)
  if (empty($item_name) || empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Item name and review text cannot be empty.',
      'review' => $review_text,
      'user_id' => $user_id
    ];
  }

  //  You could add validation here to check review length, etc.
  //  Consider sanitizing the $review_text to prevent XSS attacks.

  // Store the review (Replace this with your database interaction)
  // This is a placeholder for storing the review in a database.
  // In a real application, you would connect to your database here.

  $review_id = generate_unique_id(); // Simple ID generation - replace with your actual ID logic.

  $review_data = [
    'item_name' => $item_name,
    'review_text' => $review_text,
    'user_id' => $user_id,
    'submission_date' => date('Y-m-d H:i:s'),
    'review_id' => $review_id
  ];

  // Simulate database insertion
  // In a real application, use a database query.
  // Example:  $result = mysqli_query($connection, "INSERT ...");

  //  For demonstration purposes, we'll just print the review data.
  echo "Review submitted!
";
  echo "Review ID: " . $review_id . "
";
  echo "Item Name: " . $item_name . "
";
  echo "Review Text: " . $review_text . "
";
  echo "User ID: " . $user_id . "
";

  return [
    'success' => true,
    'message' => 'Review submitted successfully.',
    'review' => $review_text,
    'user_id' => $user_id
  ];
}


/**
 *  Placeholder for generating a unique ID.  Replace with your actual logic.
 */
function generate_unique_id() {
  return rand(100000, 999999); // Simple random ID
}


// --- Example Usage ---

// Submit a review from a user (user_id 123)
$review_result = submit_review('Awesome Product', 'This product is amazing!', 123);
if ($review_result['success']) {
  echo "Review submitted successfully (User 123).
";
} else {
  echo "Error submitting review (User 123): " . $review_result['message'] . "
";
}

// Submit an anonymous review
$review_result = submit_review('Mediocre Item', 'It was okay, I guess.');
if ($review_result['success']) {
  echo "Review submitted successfully (Anonymous).
";
} else {
  echo "Error submitting review (Anonymous): " . $review_result['message'] . "
";
}

// Try submitting an empty review
$review_result = submit_review('', 'This is a test.');
if ($review_result['success']) {
  echo "Review submitted successfully.
";
} else {
  echo "Error submitting review: " . $review_result['message'] . "
";
}


?>


<?php

/**
 * Class Review
 *
 * Manages user reviews for a product or service.
 */
class Review {

    private $reviews = []; // Array to store reviews
    private $productId; // ID of the product/service being reviewed

    /**
     * Constructor
     *
     * Initializes the Review object.
     *
     * @param int $productId The ID of the product or service being reviewed.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating  The rating (1-5).
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment, int $rating): bool {
        if (empty($username) || empty($comment) || $rating < 1 || $rating > 5) {
            return false; // Invalid input
        }

        $review = [
            'username' => $username,
            'comment' => $comment,
            'rating' => $rating,
            'timestamp' => time() // Add a timestamp for ordering
        ];

        $this->reviews[] = $review;
        return true;
    }


    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get reviews by product ID.
     *
     * @param int $productId The product ID to filter by.
     * @return array An array of review objects for the specified product ID.
     */
    public function getReviewsByProductId(int $productId): array {
        return array_filter($this->reviews, function($review) use ($productId) {
            return $review['productId'] === $productId;
        });
    }

    /**
     * Get average rating for a product.
     *
     * @param int $productId The product ID to get the average rating for.
     * @return float|null The average rating, or null if there are no reviews.
     */
    public function getAverageRating(int $productId): ?float {
        $reviews = $this->getReviewsByProductId($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return round($totalRating / count($reviews), 2); // Round to 2 decimal places
    }

}


// Example Usage:
$reviewManager = new Review(123); // Assuming product ID 123

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!', 5);
$reviewManager->addReview('JaneSmith', 'Good value for money', 4);
$reviewManager->addReview('PeterJones', 'Could be better', 3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews for product 123
$product123Reviews = $reviewManager->getReviewsByProductId(123);
print_r($product123Reviews);

// Get average rating for product 123
$averageRating = $reviewManager->getAverageRating(123);
echo "Average rating for product 123: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Add a review with invalid input
$reviewManager->addReview("", "Invalid review", 2);
echo "Invalid review attempt was handled correctly.
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param array $reviews Array of existing reviews (optional).
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects (or null if no reviews exist).
 *   - 'newReview': The new review object that was submitted (if any).
 */
function createAndDisplayReviews(string $productId, string $username, string $reviewText, array $reviews = []): array
{
    // Validate inputs (basic validation - expand as needed)
    if (empty($username)) {
        return ['reviews' => $reviews, 'newReview' => null, 'error' => 'Username cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'newReview' => null, 'error' => 'Review text cannot be empty.'];
    }

    // Create a new review object
    $newReview = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => time(), // Add a timestamp for tracking
    ];

    // Add the new review to the array
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'newReview' => $newReview];
}


// Example Usage:
$productId = '123';
$username = 'JohnDoe';
$reviewText = 'This product is fantastic! I highly recommend it.';

// Create a review
$result = createAndDisplayReviews($productId, $username, $reviewText);

if (isset($result['error'])) {
    echo "<p style='color: red;'>Error: " . $result['error'] . "</p>";
} else {
    // Display existing reviews
    echo "<h2>Existing Reviews for Product ID: " . $productId . "</h2>";
    if (empty($result['reviews'])) {
        echo "<p>No reviews yet.</p>";
    } else {
        foreach ($result['reviews'] as $review) {
            echo "<div class='review'>";
            echo "<p><strong>Username:</strong> " . $review['username'] . "</p>";
            echo "<p><strong>Review:</strong> " . htmlspecialchars($review['reviewText']) . "</p>";
            echo "<p><strong>Timestamp:</strong> " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
            echo "</div>";
        }
    }

    // Display the new review
    if ($result['newReview']) {
        echo "<div class='new-review'>";
        echo "<p><strong>New Review:</strong> " . htmlspecialchars($result['newReview']['reviewText']) . "</p>";
        echo "</div>";
    }
}

?>

<!--  CSS for styling the reviews (optional) -->
<style>
.review {
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
}

.new-review {
    border: 1px solid green;
    padding: 10px;
    margin-bottom: 10px;
}
</style>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|string  Returns an array of reviews if successful, or an error message string if not.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
  // Input validation - essential for security and data integrity
  if (empty($productId)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($userName)) {
    return "Error: User Name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review Text cannot be empty.";
  }
  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Sanitize input - important to prevent XSS and SQL injection vulnerabilities
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);
  $userName = filter_var($userName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  //  You'd typically use a database here.  This is a placeholder.
  //  Replace this with your actual database interaction logic.
  $reviews = []; // Initialize an array to store reviews.  Could be expanded to include timestamps, etc.

  $reviews[] = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for tracking.
  ];

  // Log the review (optional - for debugging and auditing)
  // logMessage("New review stored: " . $reviewText);

  return $reviews; // Return the array of reviews (or the single review if you just want one).
}



/**
 * Example Usage
 */

// Store a review
$reviews = storeUserReview('product123', 'John Doe', 'Great product! Highly recommended.');
if (is_array($reviews)) {
  echo "Review stored successfully:
";
  print_r($reviews);
} else {
  echo $reviews; // Output the error message
}



// Example with validation errors
$reviews = storeUserReview('', 'Jane Smith', 'This is bad.');
if (is_array($reviews)) {
  echo $reviews;
} else {
  echo $reviews;
}

// Example with validation errors (rating outside range)
$reviews = storeUserReview('product456', 'Peter Jones', 'Excellent service', 7);
if (is_array($reviews)) {
  echo $reviews;
} else {
  echo $reviews;
}
?>


<?php

/**
 * Class Review
 *
 * This class provides a simple function to create and manage user reviews.
 */
class Review {

    /**
     * Adds a new review to the database (simulated here).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating The rating given (e.g., 1-5).
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public static function addReview(int $productId, string $reviewerName, string $comment, int $rating) {
        // Simulate database insertion (replace with your database interaction logic)
        $review = [
            'product_id' => $productId,
            'reviewer_name' => $reviewerName,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for record keeping
        ];

        // Check for required data
        if (empty($review['product_id']) || empty($review['reviewer_name']) || empty($review['comment']) || $rating < 1 || $rating > 5) {
            return false;
        }

        //  Simulated database save (replace with your actual database call)
        //  This is just to demonstrate the functionality.  You'll want to use
        //  PDO, MySQLi, or another database library in a real application.
        $review_id = self::saveReviewToDatabase($review);

        if ($review_id) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Saves the review to the database.  This is a placeholder.  Replace this
     * with your actual database interaction code.
     *
     * @param array $review The review data to save.
     * @return int|false The ID of the review if saved successfully, or false if not.
     */
    private static function saveReviewToDatabase(array $review) {
        // Placeholder - replace with your database insertion logic
        // This simulates saving to a database.  You should use
        // a database library (PDO, MySQLi) for actual implementation.

        //  Example using an array as a simple database (not recommended for production)
        $reviews = self::getReviews(); //Get reviews from the database, or an array.
        $review_id = count($reviews) + 1;

        $review['id'] = $review_id; // add ID to review

        $reviews[] = $review; //Append to reviews array

        return $review_id;
    }

    /**
     * Retrieves reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects or an empty array if no reviews are found.
     */
    public static function getReviewsForProduct(int $productId) {
        // Simulate fetching reviews from the database (replace with your logic)
        // This is just for demonstration purposes.  You should use a database query.
        $reviews = self::getReviews();
        $product_reviews = [];

        foreach ($reviews as $review) {
            if ($review['product_id'] == $productId) {
                $product_reviews[] = $review;
            }
        }

        return $product_reviews;
    }

    /**
     * Simulates getting reviews from the database.  Replace with your
     * database query logic.
     *
     * @return array  An array of review objects.
     */
    private static function getReviews() {
        //Simulated reviews.  Replace with actual database queries.
        return [
            [
                'id' => 1,
                'product_id' => 123,
                'reviewer_name' => 'John Doe',
                'comment' => 'Great product! I highly recommend it.',
                'rating' => 5,
                'date' => date('Y-m-d H:i:s')
            ],
            [
                'id' => 2,
                'product_id' => 123,
                'reviewer_name' => 'Jane Smith',
                'comment' => 'Good value for the money.',
                'rating' => 4,
                'date' => date('Y-m-d H:i:s')
            ],
            [
                'id' => 3,
                'product_id' => 456,
                'reviewer_name' => 'Peter Jones',
                'comment' => 'Not as expected.',
                'rating' => 2,
                'date' => date('Y-m-d H:i:s')
            ]
        ];
    }
}


// Example Usage:
$review = new Review();

// Add a review
$productId = 123;
$reviewer = 'Alice Brown';
$comment = 'Excellent product, fast shipping!';
$rating = 5;

if ($review->addReview($productId, $reviewer, $comment, $rating)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Get reviews for product 123
$reviews = $review->getReviewsForProduct($productId);

echo "Reviews for product " . $productId . ":
";
if (empty($reviews)) {
    echo "No reviews found.
";
} else {
    foreach ($reviews as $review) {
        echo "- " . $review['reviewer_name'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username (Optional) The username of the user submitting the review.  Defaults to 'Anonymous'.
 * @param int $rating (Optional) The rating provided by the user (1-5). Defaults to 0.
 *
 * @return array An array containing the review data, or an error message if something goes wrong.
 */
function submit_review(string $productName, string $reviewText, string $username = 'Anonymous', int $rating = 0) {

    // Input Validation - Add more robust validation as needed
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }


    // Store the review data (This would typically be saved to a database)
    // For this example, we'll just store it in an array.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'username' => $username,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // You would typically save this array to a database here.
    // Example: $db->insert('reviews', $review);


    return $review;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product.
 *
 * @param string $productName The name of the product to retrieve reviews for.
 * @param array $reviews (Optional) An array of review data to display. If not provided,
 *                       it will retrieve reviews from a (simulated) database.
 *
 * @return void Displays the reviews on the screen.
 */
function display_reviews(string $productName, array $reviews = []) {
    echo "<h2>Reviews for " . $productName . "</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        if (array_key_exists('error', $review)) { //Handle errors (from submit_review)
            echo "<li>Error: " . $review['error'] . "</li>";
        } else {
            echo "<li>";
            echo "<p><strong>" . $review['username'] . ":</strong> " . $review['review_text'] . "</p>";
            echo "<p>Rating: " . $review['rating'] . "</p>";
            echo "<small>Submitted on: " . date('Y-m-d H:i:s', $review['timestamp']) . "</small>";
            echo "</li>";
        }
    }
    echo "</ul>";
}



// Example Usage:

// Submit a review
$review_data = submit_review('Awesome T-Shirt', 'This is a great shirt!', 'JohnDoe', 5);

if (array_key_exists('error', $review_data)) {
    echo "<p>Error submitting review: " . $review_data['error'] . "</p>";
} else {
    echo "<h3>Review Submitted!</h3>";
    print_r($review_data); // Display the review data (for testing)
}


// Simulate some existing reviews (for demonstration)
$existing_reviews = [
    ['product_name' => 'Awesome T-Shirt', 'review_text' => 'Love this shirt!', 'username' => 'JaneSmith', 'rating' => 4, 'timestamp' => time() - 3600],
    ['product_name' => 'Awesome T-Shirt', 'review_text' => 'Good quality', 'username' => 'MikeJones', 'rating' => 3, 'timestamp' => time() - 7200],
    ['product_name' => 'Basic Mug', 'review_text' => 'Nice mug!', 'username' => 'AliceBrown', 'rating' => 5, 'timestamp' => time() - 1800]
];

// Display the reviews
display_reviews('Awesome T-Shirt', $existing_reviews);


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $itemId The unique identifier of the item being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating The rating (e.g., 1-5).
 * @param array $dbConnection  A database connection object.
 * @return array  An array containing:
 *               - 'success' => true if the review was saved successfully, false otherwise.
 *               - 'message' => A message describing the result (e.g., "Review saved!", "Error saving review").
 */
function saveUserReview(string $itemId, string $userName, string $reviewText, int $rating, PDO $dbConnection) {
    // Input validation - Important!  Don't allow arbitrary input!
    if (empty($itemId) || empty($userName) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid input.  Please ensure all fields are filled and the rating is between 1 and 5.'];
    }

    try {
        // Prepare the SQL statement - use prepared statements to prevent SQL injection
        $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating)
                VALUES (:item_id, :user_name, :review_text, :rating)";

        $stmt = $dbConnection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':item_id', $itemId);
        $stmt->bindParam(':user_name', $userName);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        // Execute the statement
        $stmt->execute();

        return ['success' => true, 'message' => 'Review saved!'];

    } catch (PDOException $e) {
        // Handle database errors - Log the error!  Don't expose the raw error.
        error_log("Database error saving review: " . $e->getMessage()); // Log for debugging
        return ['success' => false, 'message' => 'Error saving review. Please try again later.'];
    }
}

/**
 * Retrieve Reviews for an Item
 *
 * This function retrieves all reviews for a given item from the database.
 *
 * @param string $itemId The unique identifier of the item.
 * @param PDO $dbConnection  A database connection object.
 * @return array An array containing:
 *               - 'reviews' => An array of review objects, or an empty array if no reviews exist.
 *               - 'success' => true if reviews were retrieved successfully, false otherwise.
 */
function getReviewsForItem(string $itemId, PDO $dbConnection) {
    try {
        $sql = "SELECT * FROM reviews WHERE item_id = :item_id";
        $stmt = $dbConnection->prepare($sql);
        $stmt->bindParam(':item_id', $itemId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }

        return ['reviews' => $reviews, 'success' => true];

    } catch (PDOException $e) {
        error_log("Database error retrieving reviews: " . $e->getMessage());
        return ['reviews' => [], 'success' => false, 'message' => 'Error retrieving reviews. Please try again later.'];
    }
}



// Example Usage (Illustrative - Replace with your actual database setup)

// Create a dummy database connection (for demonstration)
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');


// Save a review
$reviewResult = saveUserReview('product123', 'John Doe', 'Great product!', 5, $db);
print_r($reviewResult);
// Example: Retrieve Reviews for 'product123'
$reviews = getReviewsForItem('product123', $db);
print_r($reviews);


// Close the database connection (important!)
$db = null; // Disconnect the PDO object

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $allowedExtensions (Optional) An array of allowed file extensions for image uploads. Defaults to an empty array.
 * @return array An array containing success/failure status and any relevant messages.
 */
function submit_review(string $productName, string $reviewText, array $allowedExtensions = [])
{
    // Input Validation & Sanitization
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }

    // Sanitize Review Text (Basic - can be expanded)
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING); // Basic sanitization, removes HTML tags
    if (strlen($reviewText) > 10000) { // Limit review text length
        return ['success' => false, 'message' => 'Review text exceeds the maximum allowed length (10000 characters).'];
    }


    // ---  (Optional) Image Handling  ---
    $imageFile = $_FILES['image'] ?? null;  // Using null coalesce operator for null safety
    if ($imageFile && !empty($imageFile['name'])) {
        $allowedTypes = ['jpg', 'jpeg', 'png', 'gif'];
        $fileExtension = strtolower(pathinfo($imageFile['name'], PATHINFO_EXTENSION));

        if (!in_array($fileExtension, $allowedTypes)) {
            return ['success' => false, 'message' => 'Invalid image file type.  Allowed types: ' . implode(',', $allowedTypes)];
        }

        // --- Image Processing (Simple Example - You'd likely use a library like GD or ImageMagick) ---
        $uploadDirectory = 'uploads/';
        if (!is_dir($uploadDirectory)) {
            mkdir($uploadDirectory, 0777, true); // Create directory if it doesn't exist
        }

        $uniqueName = uniqid() . '.' . $fileExtension;
        $destination = $uploadDirectory . $uniqueName;
        if (move_uploaded_file($imageFile['tmp_name'], $destination)) {
            $imageURL = $destination; // Update imageURL
        } else {
            return ['success' => false, 'message' => 'Failed to upload image.'];
        }

    } else {
        $imageURL = null;  // No image uploaded
    }



    // ---  Store Review Data (Example - Replace with your database logic) ---
    // This is a simplified example, and you'd likely use a database query.
    $review = [
        'product_name' => $productName,
        'review_text' => $reviewText,
        'image_url' => $imageURL,
        'submission_timestamp' => time(),
    ];

    // Save to database (Example)
    // $result = save_to_database($review);  // Replace with your database function
    // if ($result === true) {
    //    return ['success' => true, 'message' => 'Review submitted successfully!'];
    // } else {
    //   return ['success' => false, 'message' => 'Failed to submit review to database. Error: ' . $result];
    // }


    // If everything goes well:
    return ['success' => true, 'message' => 'Review submitted successfully!'];
}

/**
 * Example Database Save Function (Placeholder - Replace with your actual DB code)
 *
 * @param array $review Data for the review.
 * @return bool|string True on success, error message on failure.
 */
function save_to_database(array $review) {
    // Replace with your database logic here.
    // This is just a placeholder for demonstration.
    //  For example:
    //  $db = new DatabaseConnection();
    //  $sql = "INSERT INTO reviews (product_name, review_text, image_url, submission_timestamp) VALUES (:product_name, :review_text, :image_url, :timestamp)";
    //  $stmt = $db->prepare($sql);
    //  $stmt->execute([
    //      ':product_name' => $review['product_name'],
    //      ':review_text' => $review['review_text'],
    //      ':image_url' => $review['image_url'],
    //      ':timestamp' => $review['submission_timestamp'],
    //  ]);
    //  return $stmt->rowCount() > 0 ? true : "Error inserting into database.  Error: " . $db->lastError();

    // Simulate success
    return true;
}


// --- Example Usage ---
$product = "Awesome Gadget X";
$review_text = "This gadget is fantastic!  I love it!";
$allowed_image_types = ['jpg', 'png'];

$result = submit_review($product, $review_text, $allowed_image_types);

if ($result['success']) {
    echo "<p>Review submitted successfully: " . $result['message'] . "</p>";
} else {
    echo "<p>Error submitting review: " . $result['message'] . "</p>";
}


?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, allowing for adding, retrieving, and displaying them.
 */
class Review {

    private $db; // Database connection

    /**
     * Constructor
     *
     * @param PDO $db  PDO database connection object
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $reviewerName  The name of the reviewer.
     * @param string $reviewText  The text of the review.
     * @param int $rating  The rating (e.g., 1-5).
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $reviewerName, string $reviewText, int $rating) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, reviewer_name, review_text, rating) VALUES (:product_id, :reviewer_name, :review_text, :rating)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->bindParam(':rating', $rating);

            return $stmt->execute();
        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }


    /**
     * Get all reviews for a product
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects.  Returns an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId): array {
        $reviews = [];
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $review = (object) $row; // Convert the row to an object
                $reviews[] = $review;
            }
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage()); // Log the error
        }
        return $reviews;
    }

    /**
     * Get a single review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return object|null Review object if found, null otherwise.
     */
    public function getReviewById(int $reviewId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                return (object) $row;
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return null;
        }
    }

     /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}

// Example usage (assuming you have a database connection named $db):

// Create a database connection (replace with your actual credentials)
try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  // Enable error mode
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Instantiate the Review class
$review = new Review($db);

// Add a review
$review->addReview(123, "John Doe", "Great product!", 5);

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);
foreach ($reviews as $review) {
    echo "Reviewer: " . $review->reviewer_name . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "Text: " . $review->review_text . "<br>";
    echo "<hr>";
}

// Get a single review
$singleReview = $review->getReviewById(1);

if ($singleReview) {
    echo "Reviewer: " . $singleReview->reviewer_name . "<br>";
    echo "Rating: " . $singleReview->rating . "<br>";
    echo "Text: " . $singleReview->review_text . "<br>";
}

// Delete a review
$review->deleteReview(1);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic input validation and output formatting.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating given by the user (1-5).
 *
 * @return array An array containing the review data if successful, or an error message
 *               if validation fails.
 */
function createReview(string $product_id, string $user_name, string $review_text, int $rating): array
{
    // Input Validation
    if (empty($product_id)) {
        return ["error" => "Product ID cannot be empty."];
    }

    if (empty($user_name)) {
        return ["error" => "User name cannot be empty."];
    }

    if (empty($review_text)) {
        return ["error" => "Review text cannot be empty."];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ["error" => "Rating must be a number between 1 and 5."];
    }

    //  Store the review (replace with your database logic)
    $review = [
        "product_id" => $product_id,
        "user_name" => $user_name,
        "review_text" => $review_text,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s") // Add timestamp for tracking
    ];

    //  Example:  Save to a simple array (replace with database insertion)
    //  $reviews[$product_id][] = $review;


    // Return success with the review data
    return ["success" => true, "review" => $review];
}

/**
 * Display Reviews Function (Example - for demonstration)
 *
 * This function demonstrates how to display reviews based on a product ID.
 * It assumes you have a mechanism to retrieve reviews from a data source.
 *
 * @param string $product_id The product ID to retrieve reviews for.
 * @return array An array containing the reviews or an error message.
 */
function displayReviews(string $product_id): array
{
    // Example: Retrieve reviews from an array (replace with your data retrieval logic)
    $reviews = [
        "product123" => [
            ["user_name" => "John Doe", "review_text" => "Great product!", "rating" => 5],
            ["user_name" => "Jane Smith", "review_text" => "Good value for money.", "rating" => 4]
        ],
        "product456" => [
            ["user_name" => "Peter Jones", "review_text" => "Excellent quality.", "rating" => 5]
        ]
    ];

    if (isset($reviews[$product_id])) {
        return ["success" => true, "reviews" => $reviews[$product_id]];
    } else {
        return ["success" => false, "message" => "No reviews found for this product."];
    }
}



// Example Usage:
// Create a review
$review_data = createReview("product123", "Alice Brown", "This is a fantastic product!", 5);

if (isset($review_data["success"])) {
    echo "Review created successfully!<br>";
    echo "Review ID: " . $review_data["review"]["id"] . "<br>";
    print_r($review_data["review"]);
} else {
    echo "Error creating review: " . $review_data["error"] . "<br>";
}


// Display reviews for product123
$reviews = displayReviews("product123");

if (isset($reviews["success"])) {
    echo "<h3>Reviews for product123:</h3>";
    if (empty($reviews["reviews"])) {
        echo "<p>No reviews yet!</p>";
    } else {
        foreach ($reviews["reviews"] as $review) {
            echo "<strong>" . $review["user_name"] . ":</strong> " . $review["review_text"] . " (" . $review["rating"] . "/5)<br>";
        }
    }
} else {
    echo "Error displaying reviews: " . $reviews["message"] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and store user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return bool True if the review was created successfully, false otherwise.
 */
function createReview(string $productId, string $username, string $rating, string $comment)
{
  // Validate inputs - important for security and data integrity
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); // Log for debugging
    return false;
  }
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return false;
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }
  if (empty($comment)) {
    error_log("Error: Comment cannot be empty.");
    return false;
  }

  // Database connection (replace with your actual database details)
  $servername = "localhost";
  $username = "your_db_username";
  $password = "your_db_password";
  $dbname = "your_db_name";

  // Create connection
  $conn = new mysqli($servername, $username, $password, $dbname);

  // Check connection
  if ($conn->connect_error) {
    error_log("Connection failed: " . $conn->connect_error);
    return false;
  }

  // Prepare SQL statement
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
          VALUES ('$productId', '$username', '$rating', '$comment')";

  // Execute the SQL statement
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    error_log("Error inserting review: " . $conn->error); // Log the specific error
    return false;
  }

  // Close the connection
  $conn->close();
}


// Example Usage:
// Assuming you have a product_id of 123 and a user 'JohnDoe'
// $success = createReview("123", "JohnDoe", 4, "Great product, highly recommended!");

// if ($success) {
//   echo "Review created successfully!";
// } else {
//   echo "Failed to create review.";
// }



//  --- Example Table Structure (SQL) ---
/*
CREATE TABLE reviews (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT NOT NULL,
  username VARCHAR(255) NOT NULL,
  rating INT NOT NULL,
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/

?>


<?php
// ... (database connection code as above) ...

// Prepare the statement
$stmt = $conn->prepare("INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)");

// Bind parameters
$stmt->bind_param("siiii", $productId, $username, $rating, $comment); // s = string, i = integer

// Execute the statement
if ($stmt->execute()) {
  return true;
} else {
  error_log("Error inserting review: " . $conn->error);
  return false;
}

// Close the statement
$stmt->close();

?>


<?php

/**
 * Class Review
 *
 * Handles creating, retrieving, updating, and deleting reviews.
 */
class Review
{
    private $db;

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The user who wrote the review.
     * @param string $comment The review text.
     * @param int $rating The rating (1-5).
     * @return int|false The ID of the new review on success, or false on failure.
     */
    public function createReview($productId, $user, $comment, $rating)
    {
        // Validate inputs -  Crucial for security!
        if (!$productId || !$user || !$comment || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare the SQL statement to prevent SQL injection
        $sql = "INSERT INTO reviews (product_id, user, comment, rating) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("siii", $productId, $user, $comment, $rating);

        if ($stmt->execute()) {
            return $this->db->insert_id;
        } else {
            // Log the error - very important!
            error_log("Error creating review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }


    /**
     * Retrieves a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReviewById($reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                $row = $result->fetch_assoc();
                return $row;
            } else {
                return null;
            }
        } else {
            error_log("Error retrieving review: " . $stmt->error);
            return null;
        }

        $stmt->close();
    }



    /**
     * Updates a review by ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $user  The new user (optional, if unchanged).
     * @param string $comment The new review text (optional, if unchanged).
     * @param int $rating The new rating (1-5).
     * @return bool True on success, false on failure.
     */
    public function updateReviewById($reviewId, $user = null, $comment = null, $rating = null)
    {
        $set_clause = "";
        $params = [];

        if ($user !== null) {
            $set_clause .= "user = ? , ";
            $params[] = $user;
        }
        if ($comment !== null) {
            $set_clause .= "comment = ? , ";
            $params[] = $comment;
        }
        if ($rating !== null) {
            $set_clause .= "rating = ? ";
            $params[] = $rating;
        }

        if (empty($set_clause)) {
            return false; // Nothing to update
        }

        $set_clause = substr($set_clause, 0, -2); // Remove trailing comma and space

        $sql = "UPDATE reviews SET $set_clause WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            error_log("Error updating review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }



    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReviewById($reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            error_log("Error deleting review: " . $stmt->error);
            return false;
        }

        $stmt->close();
    }
}



// Example Usage (Assuming you have a database connection $db)
//  Replace this with your actual database connection details

// Mock database connection (for testing without a real database)
class MockDB
{
    public function prepare($sql) {
        // In a real implementation, this would return a prepared statement object
        return new MockStatement($sql);
    }

    public function execute($stmt) {
        // Simulate execution and return true/false based on the simulated outcome
        return true; // Or false if the 'execute' method failed
    }

    public function insert_id() {
        return 123; // Dummy ID for demonstration
    }
}


class MockStatement{
    private $sql;
    public function __construct($sql) {
        $this->sql = $sql;
    }

    public function bind_param($param_types, $values){
        //Simulate binding parameters - do nothing in this mock
    }

    public function execute() {
        // Simulate execution.  In reality, this would execute the query.
        return true;
    }

    public function get_result() {
        //Simulate a result set
        return new MockResultSet();
    }

    public function close(){
    }
}

class MockResultSet{
    public function num_rows() {
        return 0;
    }

    public function fetch_assoc(){
        return null;
    }
}


$db = new MockDB();

$review = new Review($db);

//Create a review
$newReviewId = $review->createReview(1, "John Doe", "Great product!", 5);
if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get the review
$reviewData = $review->getReviewById($newReviewId);
if ($reviewData) {
    echo "Review details: " . print_r($reviewData, true) . "
";
} else {
    echo "Review not found.
";
}

//Update the review
$updateResult = $review->updateReviewById($newReviewId, "Jane Smith", "Excellent!", 4);
if ($updateResult) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

//Delete the review
$deleteResult = $review->deleteReviewById($newReviewId);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     * 
     * @param int $reviewId (Optional) - Unique ID for the review. If not provided, one will be generated.
     * @param int $userId The ID of the user who wrote the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (1-5).
     * @param string $comment The user's comment.
     */
    public function __construct(int $userId, int $productId, int $rating, string $comment = "") {
        $this->generateId();
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Timestamp for date
    }

    /**
     * Generate a unique ID for the review.
     */
    private function generateId(): void {
        $this->reviewId = uniqid();
    }

    /**
     * Get the Review ID.
     *
     * @return int
     */
    public function getReviewId(): int {
        return $this->reviewId;
    }

    /**
     * Get the User ID.
     *
     * @return int
     */
    public function getUserId(): int {
        return $this->userId;
    }

    /**
     * Get the Product ID.
     *
     * @return int
     */
    public function getProductId(): int {
        return $this->productId;
    }

    /**
     * Get the Rating.
     *
     * @return int
     */
    public function getRating(): int {
        return $this->rating;
    }

    /**
     * Get the Comment.
     *
     * @return string
     */
    public function getComment(): string {
        return $this->comment;
    }

    /**
     * Get the Date of the review.
     *
     * @return string
     */
    public function getDate(): string {
        return $this->date;
    }

    /**
     *  Return the review as an array for easy output.
     *
     * @return array
     */
    public function toArray(): array {
        return [
            'reviewId' => $this->reviewId,
            'userId' => $this->userId,
            'productId' => $this->productId,
            'rating' => $this->rating,
            'comment' => $this->comment,
            'date' => $this->date
        ];
    }
}



/**
 * User Review Review Function (Example Usage and Validation)
 */
function createReview(array $data): ?UserReview {
    // Input validation
    if (!isset($data['userId']) || !is_int($data['userId']) || $data['userId'] <= 0) {
        error_log("Invalid userId: " . $data['userId']); // Log the error (good practice)
        return null;
    }

    if (!isset($data['productId']) || !is_int($data['productId']) || $data['productId'] <= 0) {
        error_log("Invalid productId: " . $data['productId']);
        return null;
    }

    if (!isset($data['rating']) || !is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
        error_log("Invalid rating: " . $data['rating']);
        return null;
    }

    if (empty($data['comment'])) {
        $comment = "";
    } else {
        $comment = trim($data['comment']); // Trim whitespace
    }

    // Create the review object
    return new UserReview($data['userId'], $data['productId'], $data['rating'], $comment);
}

// Example Usage:
$reviewData = [
    'userId' => 123,
    'productId' => 456,
    'rating' => 4,
    'comment' => 'Great product! Highly recommend.'
];

$review = createReview($reviewData);

if ($review) {
    echo "Review created successfully!
";
    print_r($review->toArray());  // Display the review in array format
} else {
    echo "Error creating review.
";
}

//Example with invalid data to demonstrate error handling
$invalidReviewData = [
    'userId' => "abc",  //Invalid userId (string instead of int)
    'productId' => 789,
    'rating' => 6, //Invalid rating (greater than 5)
    'comment' => ""
];
$review = createReview($invalidReviewData);

if ($review) {
    echo "Review created successfully!
";
    print_r($review->toArray());  // Display the review in array format
} else {
    echo "Error creating review (as expected).
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {

    private $productId;
    private $userId;
    private $rating;
    private $comment;
    private $date;
    private $isApproved;

    /**
     * Constructor
     *
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
        $this->isApproved = false; // Default to unapproved
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    public function isApproved() {
        return $this->isApproved;
    }

    /**
     * Approve the review
     */
    public function approve() {
        $this->isApproved = true;
    }

    /**
     *  Returns the review as an array for easy output.
     *
     *  @return array  An associative array containing the review data.
     */
    public function toArray() {
        return [
            'product_id' => $this->getProductId(),
            'user_id' => $this->getUserId(),
            'rating' => $this->getRating(),
            'comment' => $this->getComment(),
            'date' => $this->getDate(),
            'is_approved' => $this->isApproved()
        ];
    }
}


/**
 * User Review Function (Example Usage)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews:</h2>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User ID:</strong> " . $review->getUserId() . "<br>";
        echo "<strong>Rating:</strong> " . $review->getRating() . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
        echo "<strong>Date:</strong> " . $review->getDate() . "<br>";
        if ($review->isApproved()) {
            echo "<strong>Status:</strong> Approved<br>";
        } else {
            echo "<strong>Status:</strong> Pending Approval<br>";
        }
        echo "</li>";
    }
    echo "</ul>";
}



// --- Example Usage ---

// Create some reviews
$review1 = new UserReview(123, 45, 4, "Great product, highly recommended!");
$review2 = new UserReview(456, 78, 5, "Excellent value for money.");
$review3 = new UserReview(123, 90, 3, "It was okay.");

// Store the reviews (e.g., in an array or database)
$reviews = [$review1, $review2, $review3];


// Display the reviews
displayUserReviews($reviews);


// You can also approve a review:
$review2->approve();
echo "<br>After approval: ";
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

  private $reviewId;
  private $productId;
  private $userId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating  The rating given (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($productId, $userId, $rating, $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Set current date and time
  }

  /**
   * Getters for each review attribute
   *
   *  Provides access to the review's data.
   *
   * @return int|string|int|string|string
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }


  /**
   *  String representation of the review
   *  Useful for debugging or displaying review data
   *
   * @return string
   */
  public function __toString() {
    return "Review ID: " . $this->getReviewId() . "
" .
           "Product ID: " . $this->getProductId() . "
" .
           "User ID: " . $this->getUserId() . "
" .
           "Rating: " . $this->getRating() . "
" .
           "Comment: " . $this->getComment() . "
" .
           "Date: " . $this->getDate();
  }
}

// Example Usage
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(789, 101, 4, "Good value for the price.");

echo $review1 . "

";
echo $review2 . "
";

//  ------------------------
//  Database Interaction Example (Conceptual)
//  ------------------------

// In a real application, you would:
// 1. Connect to your database.
// 2. Prepare an SQL query to insert the review data.
// 3. Execute the query.
// 4. Handle any database errors.

// Example:
/*
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

try {
  $stmt = $db->prepare("INSERT INTO reviews (productId, userId, rating, comment) 
                        VALUES (?, ?, ?, ?)");
  $stmt->execute([$review1->getProductId(), $review1->getUserId(), $review1->getRating(), $review1->getComment()]);

  echo "Review saved to database!
";
} catch (PDOException $e) {
  echo "Error saving review: " . $e->getMessage() . "
";
}
*/
?>


<?php

/**
 *  User Review Function - A simple example.
 *
 *  Allows users to submit and view reviews for a product or service.
 *
 *  This is a basic example and should be expanded upon for a real-world application.
 */

class Review {

  private $reviewId;
  private $productId; // Associate with a product or service
  private $userId;
  private $rating; // Numeric rating (e.g., 1-5)
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $productId The ID of the product or service being reviewed.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given (1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the current timestamp
  }

  /**
   * Getters
   */
  public function getReviewId(): int {
    return $this->reviewId;
  }

  public function getProductId(): int {
    return $this->productId;
  }

  public function getUserId(): int {
    return $this->userId;
  }

  public function getRating(): int {
    return $this->rating;
  }

  public function getComment(): string {
    return $this->comment;
  }

  public function getDate(): string {
    return $this->date;
  }


  /**
   *  Save the Review (Placeholder - replace with database integration)
   *  This is a placeholder and should be replaced with your database logic.
   *
   * @return bool True if the review was saved, false otherwise.
   */
  public function save(): bool {
    // Placeholder - Replace with database logic (e.g., INSERT query)
    // Example:
    // $db = new DatabaseConnection();  // Assuming you have a DatabaseConnection class
    // $result = $db->insertReview($this->productId, $this->userId, $this->rating, $this->comment);
    // return $result;

    // For this example, just return true:
    return true;
  }

  /**
   *  Display the Review
   *
   * @return string HTML representation of the review.
   */
  public function display(): string {
    return "<div class='review'>" .
           "<b>Product ID:</b> " . $this->productId . "<br>" .
           "<b>User ID:</b> " . $this->userId . "<br>" .
           "<b>Rating:</b> " . $this->rating . "<br>" .
           "<b>Comment:</b> " . $this->comment . "<br>" .
           "<b>Date:</b> " . $this->date . "</div>";
  }
}


// Example Usage:
$review1 = new Review(123, 45, 5, "Great product!  Highly recommended.");
$review1->save(); // Save the review

echo $review1->display(); // Display the review


// Example of creating another review
$review2 = new Review(456, 78, 3, "It was okay, but could be better.");
$review2->save();
echo "<br>";
echo $review2->display();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 * It includes basic input validation and database interaction (replace with your actual database setup).
 */

class UserReview
{
    private $dbConnection;

    public function __construct($dbConfig) {
        // Replace with your database connection details
        $this->dbConnection = new PDO(
            $dbConfig['driver'] . ":" . $dbConfig['host'] . ":" . $dbConfig['dbname'],
            $dbConfig['user'],
            $dbConfig['password']
        );
        $this->dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Submit a new review.
     *
     * @param string $username     The username of the reviewer.
     * @param string $reviewText   The review text.
     * @return bool True if successful, false otherwise.
     */
    public function submitReview($username, $reviewText)
    {
        // Input validation (add more as needed)
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        try {
            $stmt = $this->dbConnection->prepare("INSERT INTO reviews (username, review_text, rating) VALUES (:username, :review_text, :rating)");
            $stmt->bindParam(':username', $username);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->bindParam(':rating', 5); // Default rating of 5.  Modify as needed.

            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error submitting review: " . $e->getMessage()); // Log errors for debugging
            return false;
        }
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getAllReviews()
    {
        try {
            $stmt = $this->dbConnection->prepare("SELECT id, username, review_text, rating, created_at FROM reviews");
            $stmt->execute();
            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
                $reviews[] = (object) [
                    'id' => $row->id,
                    'username' => $row->username,
                    'review_text' => $row->review_text,
                    'rating' => $row->rating,
                    'created_at' => $row->created_at
                ];
            }
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return object|null A review object if found, null otherwise.
     */
    public function getReviewById($reviewId)
    {
        try {
            $stmt = $this->dbConnection->prepare("SELECT id, username, review_text, rating, created_at FROM reviews WHERE id = :reviewId");
            $stmt->bindParam(':reviewId', $reviewId);
            $stmt->execute();
            $row = $stmt->fetch(PDO::FETCH_OBJ);

            if ($row) {
                return (object) [
                    'id' => $row->id,
                    'username' => $row->username,
                    'review_text' => $row->review_text,
                    'rating' => $row->rating,
                    'created_at' => $row->created_at
                ];
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error retrieving review by ID: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if successful, false otherwise.
     */
    public function deleteReview($reviewId)
    {
        try {
            $stmt = $this->dbConnection->prepare("DELETE FROM reviews WHERE id = :reviewId");
            $stmt->bindParam(':reviewId', $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

}

// Example Usage (Replace with your actual database configuration)
$dbConfig = [
    'driver' => 'mysql',
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_username',
    'password' => 'your_password'
];


// Create an instance of the Review class
$review = new UserReview($dbConfig);

// Submit a review
$reviewResult = $review->submitReview("JohnDoe", "This is a fantastic product!");

if ($reviewResult) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$allReviews = $review->getAllReviews();
echo "<br>All Reviews:<br>";
foreach ($allReviews as $review) {
    echo "ID: " . $review->id . "<br>";
    echo "Username: " . $review->username . "<br>";
    echo "Review: " . $review->review_text . "<br>";
    echo "Rating: " . $review->rating . "<br>";
    echo "<br>";
}

// Get a specific review
$specificReview = $review->getReviewById(1);

if ($specificReview) {
    echo "<br>Specific Review:<br>";
    echo "ID: " . $specificReview->id . "<br>";
    echo "Username: " . $specificReview->username . "<br>";
    echo "Review: " . $specificReview->review_text . "<br>";
    echo "Rating: " . $specificReview->rating . "<br>";
}
else{
    echo "<br>Review not found.";
}

// Delete a review (uncomment to use)
// $deleteResult = $review->deleteReview(1);
// if ($deleteResult) {
//     echo "<br>Review deleted successfully!";
// } else {
//     echo "<br>Error deleting review.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and output formatting.
 *
 * @param string $productId The unique identifier of the product/item.
 * @param string $username The username of the reviewing user.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Must be numeric.
 * @param string $comment  The user's review comment.
 *
 * @return bool True on successful saving, False on failure (e.g., invalid input).
 */
function saveUserReview(string $productId, string $username, string $rating, string $comment) {
    // --- Input Validation ---
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");  // Log for debugging
        return false;
    }

    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // --- Data Sanitization (Important for security) ---
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);  // Escape HTML and other characters
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $rating = (int)$rating; // Cast to integer for safe storage
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // --- Data Storage (Example - Using a simple array.  In a real app, use a database.) ---
    $reviews = loadReviews($productId);  // Assuming a function to load reviews
    if ($reviews) {
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time() // Add a timestamp for ordering/management
        ];
        $reviews[] = $review;
    } else {
        $reviews = [$review];
    }


    // --- Save the review ---
    saveReviews($reviews); // Assuming a function to save reviews to storage.

    return true;
}


/**
 * Placeholder Functions (Replace with your actual implementation)
 */
function loadReviews(string $productId) {
    // Replace this with your logic to retrieve reviews for the product.
    // This is just a dummy implementation.
    // Ideally, you'd fetch this from a database.
    return []; // Return an empty array
}

function saveReviews(array $reviews) {
    // Replace this with your logic to save the reviews to your storage.
    // This is just a dummy implementation.
    // In a real application, you would likely save this data to a database.
    echo "Saving reviews: 
";
    print_r($reviews);
}


// --- Example Usage ---
$productID = "prod123";
$userName = "JohnDoe";
$rating = 4;
$reviewText = "Great product, would recommend!";

if (saveUserReview($productID, $userName, $rating, $reviewText)) {
    echo "Review submitted successfully!
";
} else {
    echo "Error submitting review.
";
}

// Example with invalid rating:
$invalidRating = 6;
$result = saveUserReview($productID, $userName, $invalidRating, $reviewText);
if(!$result){
    echo "Invalid rating test passed
";
}
?>


<?php

/**
 * User Review Class
 *
 * This class provides a basic structure for managing user reviews.
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * Initializes a new UserReview object.
   * 
   * @param int $review_id (optional) Unique ID for the review. If not provided, one will be generated.
   * @param int $user_id  The ID of the user leaving the review.
   * @param int $product_id The ID of the product being reviewed.
   * @param int $rating   The rating given by the user (e.g., 1-5).
   * @param string $comment The user's comment about the product.
   */
  public function __construct(
    int $user_id,
    int $product_id,
    int $rating,
    string $comment
  ) {
    $this->generateUniqueId();
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Get current timestamp
  }


  /**
   * Generates a unique ID for the review.
   */
  private function generateUniqueId() {
    $this->review_id = uniqid(); // Use uniqid() for a unique string.
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->review_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }


  /**
   *  String representation of the review object. Useful for debugging or output.
   */
  public function __toString() {
    return "Review ID: " . $this->review_id . "
" .
           "User ID: " . $this->user_id . "
" .
           "Product ID: " . $this->product_id . "
" .
           "Rating: " . $this->rating . "
" .
           "Comment: " . $this->comment . "
" .
           "Date: " . $this->date;
  }
}


/**
 *  User Review Review Function Example
 */
function displayUserReview(UserReview $review) {
  echo $review; // Uses the __toString() method of the UserReview class.
}

// Example Usage:
$review1 = new UserReview(123, 456, 5, "Great product!  Highly recommend.");
displayUserReview($review1);

$review2 = new UserReview(789, 101, 3, "It was okay, but could be better.");
displayUserReview($review2);


//  Simulated Database Interaction (for demonstration - replace with real DB code)
class ReviewDatabase {
    private $reviews = [];

    public function addReview(UserReview $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}

$db = new ReviewDatabase();
$db->addReview($review1);
$db->addReview($review2);
echo "
All Reviews:
";
print_r($db->getReviews());

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's review comment.
 * @param array $reviews (Optional) Array to store reviews.  If empty, creates a new array.
 * 
 * @return array  The array of reviews, updated with the new review.
 */
function addReview(string $productId, string $username, int $rating, string $comment, array $reviews = []): array
{
    // Input validation - Essential for security and data integrity
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create a review object
    $review = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s') // Add a timestamp for review history
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}



/**
 * Display Reviews Function
 * 
 * This function retrieves and formats reviews for display.
 *
 * @param array $reviews An array of review objects.
 * 
 * @return string A formatted string of reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $output = "<ul>";
    foreach ($reviews as $review) {
        $output .= "<li>";
        $output .= "<strong>" . htmlspecialchars($review['username']) . ":</strong> " . htmlspecialchars($review['comment']) . " (" . $review['rating'] . "/5) - " . htmlspecialchars($review['date']) . "</li>";
    }
    $output .= "</ul>";
    return $output;
}


// Example Usage:

// Initialize an empty reviews array.  This is good practice.
$productReviews = [];


try {
    // Add some reviews
    $productReviews = addReview("product123", "JohnDoe", 4, "Great product!  I would recommend it.", $productReviews);
    $productReviews = addReview("product123", "JaneSmith", 5, "Excellent quality and fast shipping.", $productReviews);
    $productReviews = addReview("product456", "PeterJones", 3, "It's okay, but could be better.", $productReviews);

    // Display the reviews
    echo displayReviews($productReviews);

} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and retrieve user reviews for a given item.
 *  It includes basic validation and error handling.
 *
 *  @param string $item_id  The unique identifier for the item being reviewed.
 *  @param string $user_name  The name of the user submitting the review.
 *  @param string $review_text The user's review text.
 *  @param int $rating (Optional) The rating provided by the user (1-5). Defaults to 0.
 *
 *  @return array|false  An array containing the review ID, user name, review text,
 *                       and rating if the review was successfully created.
 *                       Returns false if there was an error.
 */
function createReview(string $item_id, string $user_name, string $review_text, int $rating = 0)
{
    // **Validation:**
    if (empty($item_id)) {
        error_log("Error: Item ID cannot be empty.");
        return false;
    }
    if (empty($user_name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }
    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    // Validation for rating (optional)
    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // **Database Interaction (Replace with your database connection logic)**
    try {
        // Assuming you have a database connection established: $db
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); //Example - replace with your connection details

        $stmt = $db->prepare("INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$item_id, $user_name, $review_text, $rating]);
        $review_id = $db->lastInsertId(); // Get the ID of the newly inserted row
        return [
            'review_id' => $review_id,
            'item_id' => $item_id,
            'user_name' => $user_name,
            'review_text' => $review_text,
            'rating' => $rating
        ];
    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage());
        return false;
    }
}

// Example Usage (Demonstration):
$review = createReview("item123", "John Doe", "This is a great product!");
if ($review) {
    echo "Review created successfully! Review ID: " . $review['review_id'] . "
";
} else {
    echo "Failed to create review.
";
}


$review2 = createReview("item456", "Jane Smith", "Excellent value for money.", 5);
if ($review2) {
    echo "Review created successfully! Review ID: " . $review2['review_id'] . "
";
} else {
    echo "Failed to create review.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect, process, and display user reviews.
 *
 * @param string $review_form_id The ID of the HTML form used to collect reviews.
 * @param string $review_db_table The name of the database table where reviews will be stored.
 * @param string $review_title The title/name for the reviews (e.g., "Restaurant Reviews")
 * @param string $success_message A success message to display after a review is submitted.
 * @param string $error_message  An error message to display if the review submission fails.
 *
 * @return array An array containing the collected reviews, or an empty array if no reviews were submitted.
 */
function collect_user_reviews(
    string $review_form_id,
    string $review_db_table,
    string $review_title,
    string $success_message = "Review submitted successfully!",
    string $error_message = "An error occurred while submitting your review."
) {
    // 1. Get the form data
    $reviews = [];

    if (isset($_POST[$review_form_id])) {
        $review_text = filter_input(INPUT_POST, $review_form_id, FILTER_SANITIZE_STRING);
        $rating = filter_input(INPUT_POST, $review_form_id . '_rating', FILTER_VALIDATE_INT); // Validate rating as an integer
        $user_name = filter_input(INPUT_POST, $review_form_id . '_user_name', FILTER_SANITIZE_STRING);


        // 2. Validate the input
        if (empty($review_text)) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return []; // Return an empty array if no review text
        }

        if ($rating === null || $rating < 1 || $rating > 5) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return [];
        }

        if (empty($user_name)) {
            echo "<p style='color: red;'>" . $error_message . "</p>";
            return [];
        }


        // 3. Process the review data
        $review = [
            'review_text' => $review_text,
            'rating'      => $rating,
            'user_name'   => $user_name,
            'submission_date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];

        // 4. Store the review in the database (Example - using a simple database)
        //  You'll need to adapt this to your database setup.
        $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your database credentials

        $stmt = $db_connection->prepare("INSERT INTO " . $review_db_table . " (review_text, rating, user_name, submission_date) VALUES (:review_text, :rating, :user_name, :submission_date)");
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':submission_date', $review_text); //Use the review_text here for the date
        $stmt->execute();

        $reviews[] = $review;


    }

    return $reviews;
}


// Example Usage (This would typically be called from within a web page)
//  You'd need to have an HTML form with the ID 'my_review_form'
//  and a database table named 'restaurant_reviews'
//  Example HTML form structure:
// <form id="my_review_form" action="process_review.php" method="post">
//   <label for="review_text">Review Text:</label><br>
//   <textarea id="review_text" name="my_review_form" rows="4" cols="50"></textarea><br><br>
//   <label for="rating">Rating (1-5):</label><br>
//   <input type="number" id="rating" name="my_review_form_rating" min="1" max="5"><br><br>
//   <label for="user_name">Your Name:</label><br>
//   <input type="text" id="user_name" name="my_review_form_user_name" required><br><br>
//   <button type="submit">Submit Review</button>
// </form>

// $collected_reviews = collect_user_reviews('my_review_form', 'restaurant_reviews');

// if (!empty($collected_reviews)) {
//   echo "<h2>Collected Reviews:</h2>";
//   foreach ($collected_reviews as $review) {
//     echo "<p><strong>User:</strong> " . $review['user_name'] . "</p>";
//     echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//     echo "<p><strong>Review:</strong> " . $review['review_text'] . "</p>";
//     echo "<p><strong>Date:</strong> " . $review['submission_date'] . "</p>";
//     echo "<hr>";
//   }
// } else {
//   echo "<p>No reviews submitted yet.</p>";
// }

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    /**
     * @var array Array of reviews.
     */
    private $reviews = [];

    /**
     * Add a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The review comment.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $rating, string $comment) {
        if (empty($username) || empty($rating) || empty($comment)) {
            return false; // Invalid input
        }

        // Sanitize and validate rating (optional - adjust validation as needed)
        $rating = (int) $rating;
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];

        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array Array of reviews.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Get reviews by username.
     *
     * @param string $username The username to filter by.
     * @return array Array of reviews by the specified username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Get average rating.
     *
     * @return float|null The average rating if reviews exist, null otherwise.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $totalRating += $review['rating'];
        }

        return round($totalRating / $reviewCount, 2); // Round to 2 decimal places
    }
}

// Example Usage:
// Create a new review object
$reviewManager = new UserReview();

// Add some reviews
$reviewManager->addReview('JohnDoe', 5, 'Great product!  Highly recommended.');
$reviewManager->addReview('JaneSmith', 4, 'Good value for the money.');
$reviewManager->addReview('JohnDoe', 3, 'It\'s okay, but could be better.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews by JohnDoe
$johnReviews = $reviewManager->getReviewsByUsername('JohnDoe');
print_r($johnReviews);

// Get average rating
$averageRating = $reviewManager->getAverageRating();
echo "Average Rating: " . ($averageRating === null ? "N/A" : $averageRating) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a given item or product.  It includes basic validation and sanitization.
 *
 * @param string $item_id The ID of the item or product to review.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $data     (Optional) An associative array containing all review data:
 *                         ['item_id' => '...', 'user_id' => '...', 'rating' => '...', 'comment' => '...']
 *
 * @return array An array containing the result of the operation.
 *               - 'success': true if the operation was successful.
 *               - 'message':  A success or error message.
 *               - 'review_id': The ID of the newly created review (if applicable).
 *               - 'review': The review data as an associative array.
 */
function create_review(string $item_id, string $user_id, string $rating, string $comment, array $data = []) {

  // Basic input validation and sanitization
  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'Item ID, User ID, Rating, and Comment are required.',
      'review_id' => null,
      'review' => null
    ];
  }

  // Ensure rating is an integer.  Handle non-integer input gracefully.
  $rating = intval($rating);
  if ($rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be between 1 and 5.',
      'review_id' => null,
      'review' => null
    ];
  }

  // Combine provided data with defaults (optional).  This allows for partial updates.
  $review_data = [];
  $review_data = array_merge($review_data, $review_data); //Merge

  $review_data['item_id'] = $item_id;
  $review_data['user_id'] = $user_id;



  // --- Database interaction (Replace this with your database logic) ---
  // This is a placeholder.  You'll need to adapt this to your database
  // setup (MySQL, PostgreSQL, etc.) and your data model.

  // Example using a hypothetical database connection
  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class

  try {
    $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (:item_id, :user_id, :rating, :comment)";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':item_id', $review_data['item_id']);
    $stmt->bindParam(':user_id', $review_data['user_id']);
    $stmt->bindParam(':rating', $review_data['rating']);
    $stmt->bindParam(':comment', $review_data['comment']);
    $stmt->execute();

    $review_id = $db->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id,
      'review' => $review_data
    ];

  } catch (Exception $e) {
    // Handle database errors gracefully
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage(),
      'review_id' => null,
      'review' => null
    ];
  }
}

/**
 *  Helper class to represent a database connection (placeholder).
 */
class DatabaseConnection {
    private $connection;

    public function __construct() {
        // In a real application, you'd establish a database connection here.
        // This is just a placeholder.
        $this->connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    }

    public function prepare($sql) {
        return $this->connection->prepare($sql);
    }

    public function execute() {
        return $this->connection->execute();
    }

    public function lastInsertId() {
        return $this->connection->lastInsertId();
    }
}


// --- Example Usage ---
//  (This will need to be run within a PHP environment, e.g., a web server)
$result = create_review('product_123', 'user_456', 4, 'Great product!  Highly recommended.', []);
print_r($result);

$result = create_review('product_456', 'user_789', 3, 'It\'s okay, but could be better', ['rating' => 3, 'comment' => 'Just average.']);
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText   The text of the review.
 * @param array $reviews       (Optional) An array of existing reviews to display.
 *
 * @return array An array containing:
 *   - 'reviews': The updated array of reviews (including the new one).
 *   - 'newReview': The submitted review (for confirmation).
 *   - 'error':     (Optional) An error message if the review submission failed.
 */
function submit_review(string $productName, string $reviewerName, string $reviewText, array &$reviews = []) {
  // Basic validation (you can expand this with more robust validation)
  if (empty($reviewerName) || empty($reviewText)) {
    return ['reviews' => $reviews, 'newReview' => "Error: Reviewer name and review text are required."];
  }

  // Format the review
  $review = [
    'reviewer' => $reviewerName,
    'date'     => date("Y-m-d H:i:s"), // Add timestamp
    'text'     => $reviewText,
  ];

  // Add the new review to the array
  $reviews[] = $review;

  // Return the updated array and confirmation
  return ['reviews' => $reviews, 'newReview' => "Review submitted successfully for $productName."];
}


// Example Usage:
$product = "Awesome Gadget X";

// Submit a review
$result = submit_review($product, "John Doe", "This gadget is amazing!  I love it!");

if (isset($result['error'])) {
  echo "<p style='color:red;'>Error: " . $result['error'] . "</p>";
} else {
  echo "<h2>Reviews for " . $product . "</h2>";
  echo "<ul>";
  foreach ($result['reviews'] as $review) {
    echo "<li><strong>" . $review['reviewer'] . ":</strong> " . $review['text'] . "</li>";
  }
  echo "</ul>";
}

// Example with an invalid submission:
$result2 = submit_review("Another Product", "", "This is a test review.");

if (isset($result2['error'])) {
    echo "<p style='color:red;'>Error: " . $result2['error'] . "</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and potentially manage user reviews.
 * For simplicity, this example focuses on creating and displaying reviews.
 * 
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The text of the review.
 * @param string $reviewerName The name of the reviewer.
 * @param int $rating (Optional) -  Rating from 1 to 5. Defaults to 0 if not provided.
 * 
 * @return array An array containing the review ID, or an error message if creation fails.
 */
function createReview(string $productName, string $reviewText, string $reviewerName, int $rating = 0) {
  // Basic input validation
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if (empty($reviewerName)) {
    return ["error" => "Reviewer name cannot be empty."];
  }
  if ($rating < 1 || $rating > 5) {
    return ["error" => "Rating must be between 1 and 5."];
  }


  // In a real application, you would store this in a database.
  // For this example, we'll store it in an array.
  $reviewId = generateUniqueId(); //  Simulate generating a unique ID
  $review = [
    "review_id" => $reviewId,
    "product_name" => $productName,
    "review_text" => $reviewText,
    "reviewer_name" => $reviewerName,
    "rating" => $rating,
    "timestamp" => time() // Add timestamp for ordering
  ];

  // Store the review (simulated)
  storeReview($review);  // Function to save to a database in a real application

  return $review;
}


/**
 * Simulate generating a unique ID.
 * In a real application, use a database sequence or UUID.
 *
 * @return string A unique ID.
 */
function generateUniqueId() {
  return uniqid();
}


/**
 * Simulate storing the review in a database.
 * In a real application, this would be your database insertion logic.
 *
 * @param array $review The review data to store.
 */
function storeReview(array $review) {
  // This is a placeholder. Replace with your database logic.
  echo "Storing review: " . json_encode($review) . "
";
  // Example using mysqli (needs a database connection)
  // $db = new mysqli("localhost", "username", "password", "database");
  // if ($db->connect_error) {
  //   die("Connection failed: " . $db->connect_error);
  // }
  // $sql = "INSERT INTO reviews (product_name, review_text, reviewer_name, rating, timestamp)
  //         VALUES ('" . $review['product_name'] . "', '" . $review['review_text'] . "', '" . $review['reviewer_name'] . "', " . $review['rating'] . ", '" . $review['timestamp'] . "')";
  // if ($db->query($sql) === TRUE) {
  //   echo "New record created successfully";
  // } else {
  //   echo "Error: " . $db->error;
  // }
  // $db->close();
}

// --- Example Usage ---

// Create a review
$newReview = createReview("Awesome Product", "This is an amazing product!", "John Doe", 5);

if (isset($newReview["error"])) {
  echo "Error creating review: " . $newReview["error"] . "
";
} else {
  echo "Review created successfully with ID: " . $newReview["review_id"] . "
";
}

// Create another review
$anotherReview = createReview("Great Service", "The service was excellent!", "Jane Smith"); // Uses default rating of 0

if (isset($anotherReview["error"])) {
  echo "Error creating review: " . $anotherReview["error"] . "
";
} else {
  echo "Review created successfully with ID: " . $anotherReview["review_id"] . "
";
}

// Attempt to create a review with invalid input
$invalidReview = createReview("", "This is bad", "Bad Reviewer");
if (isset($invalidReview["error"])) {
  echo "Error creating review: " . $invalidReview["error"] . "
";
}
?>


<?php

/**
 * Class UserReview
 *
 * Handles creating, retrieving, updating, and deleting user reviews.
 */
class UserReview
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the database connection.
     *
     * @param PDO $db  Database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $userRating The user's rating (e.g., "5-star", "1-star").
     * @param string $comment  The user's review comment.
     * @return int|false  The ID of the new review if successful, or false on failure.
     */
    public function createReview(int $productId, string $userRating, string $comment)
    {
        // Validate inputs (important for security)
        if (!isset($productId, $userRating, $comment)) {
            return false;
        }

        if (empty($userRating) || empty($comment)) {
            return false;
        }

        try {
            $sql = "INSERT INTO reviews (product_id, user_rating, comment)
                    VALUES (:product_id, :user_rating, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_rating', $userRating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage());  // Log the error
            return false;
        }
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null  An associative array representing the review, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        try {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $review = $stmt->fetch(PDO::FETCH_ASSOC);

            return $review;
        } catch (PDOException $e) {
            error_log("Error retrieving review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Updates a review by its ID.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $userRating The new user rating.
     * @param string $comment The new review comment.
     * @return bool  True if successful, false otherwise.
     */
    public function updateReview(int $reviewId, string $userRating, string $comment)
    {
        try {
            $sql = "UPDATE reviews SET user_rating = :user_rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':user_rating', $userRating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool  True if successful, false otherwise.
     */
    public function deleteReview(int $reviewId)
    {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Retrieves all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array  An array of associative arrays, each representing a review.
     */
    public function getReviewsForProduct(int $productId)
    {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
            return $reviews;
        } catch (PDOException $e) {
            error_log("Error retrieving reviews for product: " . $e->getMessage());
            return [];
        }
    }
}



// Example Usage (Assuming you have a database connection object $db)

// Create a database connection (replace with your actual credentials)
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $db = new PDO($dsn, $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $review = new UserReview($db);

    // Create a review
    $newReviewId = $review->createReview(1, "5-star", "Great product!");
    if ($newReviewId) {
        echo "New review created with ID: " . $newReviewId . "<br>";
    } else {
        echo "Failed to create review.<br>";
    }

    // Get a review by ID
    $review = $review->getReview(1);
    if ($review) {
        echo "Review: " . $review['user_rating'] . " - " . $review['comment'] . "<br>";
    } else {
        echo "Review not found.<br>";
    }

    // Get reviews for product ID 1
    $reviews = $review->getReviewsForProduct(1);
    echo "Reviews for product 1:<br>";
    foreach ($reviews as $review) {
        echo "  " . $review['user_rating'] . " - " . $review['comment'] . "<br>";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes input validation and sanitization to prevent common vulnerabilities.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The user's review text.
 * @param int $rating  The rating given by the reviewer (1-5).
 * @return array|false  An array containing the review details on success, or false on failure.
 */
function createReview(string $productName, string $reviewerName, string $reviewText, int $rating) {
  // Input Validation
  if (empty($productName)) {
    return false; // Product name cannot be empty
  }

  if (empty($reviewerName)) {
    return false; // Reviewer name cannot be empty
  }

  if (empty($reviewText)) {
    return false; // Review text cannot be empty
  }

  if ($rating < 1 || $rating > 5) {
    return false; // Rating must be between 1 and 5
  }

  // Sanitize Input - IMPORTANT for security
  $productName = trim($productName);  // Remove leading/trailing whitespace
  $productName = htmlspecialchars($productName); // Prevents XSS attacks
  $reviewerName = trim($reviewerName);
  $reviewerName = htmlspecialchars($reviewerName);
  $reviewText = trim($reviewText);
  $reviewText = htmlspecialchars($reviewText);


  // Store Review (Replace this with your database logic)
  // This is a placeholder - adapt to your database setup
  $review = [
    'product_name' => $productName,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'date' => date('Y-m-d H:i:s') // Add timestamp for tracking
  ];

  // Example:  Write to a simple file (for demonstration only)
  $file = 'reviews.txt';
  $reviewString = $file . "
" . json_encode($review) . "
";
  file_put_contents($file, $reviewString, FILE_APPEND);


  return $review; // Return the review data
}


// --- Example Usage ---
$product = "Awesome Gadget";
$user = "John Doe";
$comment = "This is a fantastic gadget!  I highly recommend it.";
$rating = 4;

$reviewResult = createReview($product, $user, $comment, $rating);

if ($reviewResult !== false) {
  echo "Review created successfully!  Review Data: " . json_encode($reviewResult) . "
";
} else {
  echo "Error creating review. Please check your input.
";
}



// Example with invalid input:
$reviewResult = createReview("", "Jane Doe", "Invalid review", 3); // Empty product name
if ($reviewResult === false) {
    echo "Invalid input detected!
";
}
?>


<?php

/**
 * User Review Function - Allows users to submit and display reviews.
 *
 * This function provides a basic interface for submitting and viewing user reviews.
 * It includes input validation and simple display formatting.
 *
 * @param array $reviews An array to store user reviews.  Defaults to an empty array.
 * @param string $username The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @return array The updated array of reviews.
 */
function submitUserReview(array &$reviews, string $username, string $reviewText) {

  // Input validation - very basic for demonstration.  Enhance this for production.
  if (empty($reviewText)) {
    echo "Error: Review text cannot be empty.
";
    return $reviews;
  }

  // Format the review
  $formattedReview = "User: $username - Review: $reviewText";

  // Add the review to the array
  $reviews[] = $formattedReview;

  return $reviews;
}


/**
 * Displays all user reviews.
 *
 * This function iterates through the review array and prints each review.
 *
 * @param array $reviews An array of user reviews.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews:</h2>
";
  if (empty($reviews)) {
    echo "<p>No reviews submitted yet.</p>
";
    return;
  }
  echo "<ul>
";
  foreach ($reviews as $review) {
    echo "  <li>$review</li>
";
  }
  echo "</ul>
";
}


// Example Usage:
$review_data = []; // Initialize an empty array to store reviews

// Submit some reviews
submitUserReview($review_data, "Alice", "This product is amazing!");
submitUserReview($review_data, "Bob", "I'm very happy with my purchase.");
submitUserReview($review_data, "Charlie", "It's okay, could be better.");
submitUserReview($review_data, "David", "Excellent value for money!");


// Display the reviews
displayReviews($review_data);


//Demonstration of input validation
submitUserReview($review_data, "Eve", ""); // Attempt to submit an empty review
displayReviews($review_data); // Display the reviews after the invalid attempt
?>


<?php

/**
 *  A User Review Function
 *
 *  This function allows you to store and display user reviews for a product or service.
 *
 *  @param string $productId The unique identifier for the product or service.
 *  @param string $reviewerName The name of the reviewer.
 *  @param string $reviewText The text of the review.
 *  @param int $rating (optional) A rating from 1 to 5, or null if no rating is provided.
 *  @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $productId, string $reviewerName, string $reviewText, ?int $rating = null): bool
{
    // Validation - Add more robust validation as needed.
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }
    if (empty($reviewerName)) {
        error_log("Error: Reviewer Name cannot be empty.");
        return false;
    }
    if (empty($reviewText)) {
        error_log("Error: Review Text cannot be empty.");
        return false;
    }

    // Data sanitization -  Important for security
    $reviewerName = htmlspecialchars($reviewerName);
    $reviewText = htmlspecialchars($reviewText);

    //  Database interaction -  Replace with your database connection and query logic.
    //  This is a simplified example.

    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your DB details

    try {
        $stmt = $db->prepare("INSERT INTO reviews (productId, reviewerName, reviewText, rating) VALUES (:productId, :reviewerName, :reviewText, :rating)");
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewerName', $reviewerName);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', $rating, PDO::PARAM_INT); // Ensure rating is an integer
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


/**
 * Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product to retrieve reviews for.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $productId): array
{
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");  // Replace with your DB details
    $reviews = [];

    try {
        $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = :productId");
        $stmt->bindParam(':productId', $productId);
        $stmt->execute();

        while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {
            $reviews[] = (object) [
                'id' => $row->id,
                'productId' => $row->productId,
                'reviewerName' => $row->reviewerName,
                'reviewText' => $row->reviewText,
                'rating' => $row->rating,
                'createdAt' => $row->createdAt // Assuming you have a createdAt column
            ];
        }

        return $reviews;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return [];
    }
}



// Example Usage (Remember to replace placeholders with your actual data and database details)
//  This is just for demonstration.
$productId = "product123"; // Example product ID

// Save a review
if (saveUserReview($productId, "John Doe", "This is a great product!", 5)) {
    echo "Review saved successfully!
";
} else {
    echo "Error saving review.
";
}

// Get reviews for the product
$reviews = getReviewsForProduct($productId);

if (empty($reviews)) {
    echo "No reviews found for product $productId.
";
} else {
    echo "Reviews for product $productId:
";
    foreach ($reviews as $review) {
        echo "- " . $review->reviewerName . ": " . $review->reviewText . " (" . $review->rating . ")
";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides a basic framework and can be customized further.
 */

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $date_created;

    /**
     * Constructor
     *
     * Initializes a new Review object.
     *
     * @param int $user_id The ID of the user who wrote the review.
     * @param int $product_id The ID of the product the review is for.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct($user_id, $product_id, $rating, $comment)
    {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_created = date("Y-m-d H:i:s"); // Get current timestamp
    }


    /**
     * Getters
     */
    public function getId() {
        return $this->id;
    }

    public function getUser_id() {
        return $this->user_id;
    }

    public function getProduct_id() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate_created() {
        return $this->date_created;
    }

    /**
     * Setters
     */
    public function setId($id) {
        $this->id = $id;
    }

    public function setDate_created($date_created) {
        $this->date_created = $date_created;
    }

}


/**
 * User Review Function - Example Usage &  Some Basic Functions
 */
class ReviewManager {

    private $reviews = [];  // Store reviews (for simplicity)

    /**
     * Add a review
     *
     * @param Review $review
     */
    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    /**
     * Get all reviews for a product
     *
     * @param int $product_id
     * @return array An array of Review objects.
     */
    public function getReviewsByProduct($product_id) {
        $results = [];
        foreach ($this->reviews as $review) {
            if ($review->getProduct_id() == $product_id) {
                $results[] = $review;
            }
        }
        return $results;
    }

    /**
     *  (Simplified) Update a review - in a real system, you'd likely want more robust validation.
     * @param Review $review
     */
    public function updateReview(Review $review) {
        // In a real application, you'd likely check for existing reviews
        // and perform validation before updating.
        foreach($this->reviews as $r) {
            if($r->getId() == $review->getId()) {
                $r->setDate_created(date("Y-m-d H:i:s")); // Update timestamp
                return true;
            }
        }
        return false; // Not found
    }

    /**
     * Delete a review
     *
     * @param int $id
     * @return bool True if successful, false otherwise.
     */
    public function deleteReview($id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}

// Example Usage:
$reviewManager = new ReviewManager();

// Create a review
$review1 = new Review(123, 456, 5, "Great product! I highly recommend it.");
$reviewManager->addReview($review1);

$review2 = new Review(456, 456, 4, "Good value for the price.");
$reviewManager->addReview($review2);


// Get reviews for product 456
$reviewsForProduct = $reviewManager->getReviewsByProduct(456);
echo "Reviews for product 456:
";
foreach ($reviewsForProduct as $review) {
    echo "  User ID: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}

// Update a review
$reviewManager->updateReview($review1);

// Delete a review
$reviewManager->deleteReview($review1->getId());

// Try to get the deleted review
$reviewsForProduct = $reviewManager->getReviewsByProduct(456);
echo "Reviews for product 456 after deletion:
";
foreach ($reviewsForProduct as $review) {
    echo "  User ID: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function creates a review object with details like user, rating, and review text.
 * It also provides basic validation to ensure data is provided and in a reasonable format.
 *
 * @param string $username The username of the reviewer.
 * @param int    $rating   The rating given (1-5).
 * @param string $reviewText The user's review text.
 *
 * @return array|false Returns an associative array representing the review 
 *                      on success, or false on failure.
 */
function createReview(string $username, int $rating, string $reviewText): array|false
{
    // Validate inputs
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    // Create the review object
    $review = [
        'username' => $username,
        'rating'   => $rating,
        'review'   => $reviewText,
        'date'     => date("Y-m-d H:i:s"), // Add a timestamp for tracking
    ];

    return $review;
}


// Example Usage:
$review1 = createReview("JohnDoe", 5, "Excellent product! Highly recommended.");
if ($review1) {
    echo "Review 1:
";
    print_r($review1);
    // You would typically save this review to a database here.
} else {
    echo "Review 1 creation failed.
";
}

$review2 = createReview("JaneSmith", 3, "It was okay.  Nothing special.");
if ($review2) {
    echo "
Review 2:
";
    print_r($review2);
} else {
    echo "
Review 2 creation failed.
";
}

$review3 = createReview("", 4, "Good!");  // Example with invalid input
if ($review3) {
    echo "
Review 3:
";
    print_r($review3);
} else {
    echo "
Review 3 creation failed (as expected).
";
}


?>


//Example of saving to a database (simplified - error handling and full sanitation would be needed in a real application)
$review = createReview("AliceWonderland", 4, "Fantastic product, I love it!");
if ($review) {
    // Connect to your database
    $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (username, rating, review) VALUES (:username, :rating, :review)");

    // Bind the parameters
    $stmt->bindParam(':username', $review['username']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':review', $review['review']);

    // Execute the statement
    if ($stmt->execute()) {
        echo "Review saved to database!
";
    } else {
        echo "Error saving review to database.
";
    }
    $db = null; // Close the connection
}


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $reviewer_name The name of the reviewer.
 * @param string $review_text The text of the review.
 * @param array  $validation_rules An array of validation rules (e.g., ['name' => 'required', 'text' => 'required']).
 *                                 Defaults to required validation for both name and text.
 * @return array|string An array containing success/error messages, or a string message if there was an error.
 */
function submit_review(string $product_id, string $reviewer_name, string $review_text, array $validation_rules = []) {
  // Default validation rules if none are provided.
  $validation_rules = $validation_rules + [
    'name' => 'required',
    'text' => 'required'
  ];


  // Validation
  $errors = [];

  if (!empty($validation_rules['name']) && empty($reviewer_name)) {
    $errors['name'] = 'Reviewer name is required.';
  }
  if (!empty($validation_rules['text']) && empty($review_text)) {
    $errors['text'] = 'Review text is required.';
  }

  // Sanitization - Basic.  Consider more robust sanitization for production.
  $reviewer_name = trim($reviewer_name);
  $review_text = trim($review_text);


  // Check for empty strings after trimming.  This is important.
  if (empty($reviewer_name)) {
      $errors['name'] = 'Reviewer name cannot be empty.';
  }
  if (empty($review_text)) {
    $errors['text'] = 'Review text cannot be empty.';
  }



  // If there are no errors, save the review (simulated here).
  if (empty($errors)) {
    // In a real application, you would save this to a database.
    // For demonstration, we'll just return a success message.

    // Simulate database saving
    $saved = true;
    return ['success' => 'Review submitted successfully!'];
  } else {
    // Return the error messages
    return ['errors' => $errors];
  }
}


// **Example Usage**
// 1. Successful Submission
$result = submit_review('product_123', 'John Doe', 'This is a great product!');
print_r($result);
// Output: Array ( [success] => Review submitted successfully! )

// 2. Submission with Errors
$result = submit_review('product_456', '', 'Write a review...');
print_r($result);
// Output: Array ( [errors] => Array ( [text] => Review text cannot be empty. ) )

// 3. Submission with custom validation rules
$result = submit_review('product_789', 'Jane Smith', 'Excellent service!', ['name' => 'required', 'text' => 'max:200']);
print_r($result);
//Output: Array ( [success] => Review submitted successfully! )


// 4.  Empty string name submission
$result = submit_review('product_999', '', 'This is a great product!');
print_r($result);
// Output: Array ( [errors] => Array ( [name] => Reviewer name is required. ) )
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array $user_data An associative array containing user data like username and email (optional).
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the status of the review (success or error).
 *   - 'review': The submitted review text.
 */
function submit_review(string $productName, string $reviewText, array $user_data = []) {
  // Input validation - Basic checks to prevent vulnerabilities
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.', 'review' => $reviewText];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => $reviewText];
  }

  //  More robust validation could be added here, such as:
  //  - Checking review length
  //  - Sanitizing the review text to prevent XSS attacks

  // Store the review - Replace this with your actual database logic
  // This is a placeholder - You'll need to connect to your database
  // and use your database credentials.
  $review_id = generate_unique_id(); // Generates a unique ID for the review
  $timestamp = date("Y-m-d H:i:s");
  $stored_review = [
    'review_id' => $review_id,
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_name' => isset($user_data['username']) ? $user_data['username'] : 'Anonymous',
    'timestamp' => $timestamp,
  ];


  //  Example:  Store to a simple array for demonstration purposes.
  //  In a real application, you'd use a database.
  //  $reviews[] = $stored_review;



  //  Success
  return ['success' => true, 'message' => 'Review submitted successfully!', 'review' => $reviewText];
}


/**
 * Generates a unique ID for a review.  This is a simplified example.
 *  In a production environment, use a more robust ID generation method (UUID, etc.)
 *
 * @return string  A unique ID.
 */
function generate_unique_id() {
    return uniqid();
}



// --- Example Usage ---

// Example 1: Successful submission
$result = submit_review('Awesome T-Shirt', 'This shirt is fantastic! Great quality and fit.');
print_r($result);

// Example 2:  Empty product name
$result = submit_review('', 'A good review');
print_r($result);

// Example 3:  Empty review text
$result = submit_review('Cool Gadget', '');
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The content of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $db_connection A valid database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully saved, false otherwise.
 *   - 'message': A message indicating the result of the operation (e.g., 'Review saved', 'Error saving review').
 *   - 'review_id': The ID of the newly created review (if successful).
 */
function save_user_review(string $product_id, string $user_name, string $review_text, int $rating, object $db_connection) {
  // Validate inputs (basic example - enhance for production)
  if (empty($product_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Invalid input. Please check your review details.',
    ];
  }

  // Prepare SQL statement (use prepared statements for security!)
  $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating) 
          VALUES (?, ?, ?, ?)";

  // Use prepared statement to prevent SQL injection
  $stmt = $db_connection->prepare($sql);
  $stmt->bind_param("ssis", $product_id, $user_name, $review_text, $rating);  //Correctly using string type
  $result = $stmt->execute();

  // Check if the query executed successfully
  if ($result) {
    // Get the last inserted ID
    $review_id = $db_connection->insert_id;

    return [
      'success' => true,
      'message' => 'Review saved successfully!',
      'review_id' => $review_id,
    ];
  } else {
    // Handle database errors
    $error_info = $stmt->error;
    return [
      'success' => false,
      'message' => 'Error saving review: ' . $error_info,
    ];
  }

  // Close the statement (important!)
  $stmt->close();
}



/**
 * Display User Reviews
 *
 * Retrieves and displays all user reviews for a given product.
 *
 * @param string $product_id The ID of the product.
 * @param object $db_connection A valid database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews found.
 */
function get_product_reviews(string $product_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db_connection->prepare($sql);
    $stmt->bind_param("s", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


// Example Usage (assuming you have a database connection $conn)

//Create a dummy DB connection (replace with your real connection)
class DummyDBConnection {}
$conn = new DummyDBConnection();  //This is a placeholder
$conn->query("CREATE TABLE IF NOT EXISTS reviews (id INT AUTO_INCREMENT PRIMARY KEY, product_id VARCHAR(255) NOT NULL, user_name VARCHAR(255) NOT NULL, review_text TEXT, rating INT)");

// Save a review
$review_result = save_user_review('product123', 'John Doe', 'Great product!', 5, $conn);

if ($review_result['success']) {
  echo "Review saved! Review ID: " . $review_result['review_id'] . "<br>";
} else {
  echo "Error saving review: " . $review_result['message'] . "<br>";
}

//Get all reviews for product123
$reviews = get_product_reviews('product123', $conn);

echo "<h3>Reviews for product123:</h3>";
if (empty($reviews)) {
    echo "<p>No reviews found.</p>";
} else {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>User:</strong> " . $review['user_name'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
}

// Clean up (important for development - remove in production)
$conn->query("DROP TABLE IF EXISTS reviews");

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to create, store, and display user reviews.
 */
class Review
{
    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the Review class with a database connection.
     *
     * @param PDO $db  A PDO database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $reviewerName The name of the reviewer.
     * @param string $comment The review text.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $reviewerName, string $comment)
    {
        try {
            $sql = "INSERT INTO reviews (product_id, reviewer_name, comment) 
                     VALUES (:product_id, :reviewer_name, :comment)";

            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':comment', $comment);

            $stmt->execute();

            return $this->db->lastInsertId(); // Returns the ID of the newly inserted review
        } catch (PDOException $e) {
            error_log("Error creating review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId)
    {
        try {
            $sql = "SELECT id, reviewer_name, comment, rating FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = new ReviewObject($row); // Create ReviewObject from the fetched row
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get a single review by ID.
     *
     * @param int $reviewId The ID of the review.
     * @return ReviewObject|null A ReviewObject if found, or null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        try {
            $sql = "SELECT id, reviewer_name, comment, rating FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($row) {
                return new ReviewObject($row);
            }

            return null;
        } catch (PDOException $e) {
            error_log("Error getting review by ID: " . $e->getMessage());
            return null;
        }
    }


     /**
     * Update an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $reviewerName The new name of the reviewer.
     * @param string $comment The new review text.
     * @param int $rating The new rating for the review.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $reviewerName, string $comment, int $rating)
    {
        try {
            $sql = "UPDATE reviews SET reviewer_name = :reviewer_name, comment = :comment, rating = :rating WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':reviewer_name', $reviewerName);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);

            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        try {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}


/**
 * ReviewObject Class
 * Represents a single review.
 */
class ReviewObject
{
    public int $id;
    public string $reviewer_name;
    public string $comment;
    public int $rating;

    /**
     * ReviewObject Constructor
     *
     * Initializes a ReviewObject from a PDO row.
     *
     * @param array $row  The fetched row from the database.
     */
    public function __construct(array $row)
    {
        $this->id = $row['id'];
        $this->reviewer_name = $row['reviewer_name'];
        $this->comment = $row['comment'];
        $this->rating = $row['rating'];
    }
}
?>


<?php
// ... (Code from above - Review class and ReviewObject) ...

// Example Usage:
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$review = new Review($db);

// Create a review
$productId = 1;
$reviewer = 'John Doe';
$comment = 'Great product!';
$newReviewId = $review->createReview($productId, $reviewer, $comment);

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get reviews for product 1
$reviews = $review->getReviewsByProduct(1);

foreach ($reviews as $review) {
    echo "Reviewer: " . $review->reviewer_name . ", Comment: " . $review->comment . ", Rating: " . $review->rating . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's comment about the product.
 * @param array $reviews (Optional) -  An array of existing reviews for this product.
 *
 * @return array  An updated array of reviews including the new review.
 */
function createAndManageReviews(string $productName, string $userId, string $rating, string $comment, array &$reviews = []): array
{
  // Input validation -  Important for security and data integrity
  if (empty($productName)) {
    return $reviews; // Return empty array if product name is empty
  }

  if (empty($userId)) {
    return $reviews; // Return empty array if user ID is empty
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return $reviews; // Return empty array if rating is invalid
  }

  if (empty($comment)) {
      return $reviews; // Return empty array if comment is empty
  }

  // Add the new review
  $newReview = [
    'userId' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add timestamp for tracking
  ];
  $reviews[] = $newReview;

  // Sort reviews by timestamp (newest first) - optional but useful
  usort($reviews, function ($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return $reviews;
}

// Example Usage:

// Initialize an empty array of reviews
$productReviews = [];

// Create a new review
$updatedReviews = createAndManageReviews('Awesome Gadget', 'user123', 4, 'This gadget is fantastic! I love it.', $productReviews);

// Display the updated reviews
echo "<h2>Reviews for Awesome Gadget:</h2>";
echo "<ul>";
foreach ($updatedReviews as $review) {
  echo "<li><strong>User:</strong> " . htmlspecialchars($review['userId']) . "<br>";
  echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
  echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
  echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
}
echo "</ul>";


// Another example:
$productReviews2 = [];
$updatedReviews2 = createAndManageReviews('Another Product', 'user456', 5, 'Great product, highly recommended!', $productReviews2);

echo "<h2>Reviews for Another Product:</h2>";
echo "<ul>";
foreach ($updatedReviews2 as $review) {
  echo "<li><strong>User:</strong> " . htmlspecialchars($review['userId']) . "<br>";
  echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
  echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
  echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
}
echo "</ul>";



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic validation and saving of the review to a file (for simplicity).
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $reviewerName The name of the reviewer (optional).
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function submitReview(string $productId, string $reviewText, string $reviewerName = '') {
  // Basic validation
  if (empty($reviewText)) {
    error_log("Empty review text submitted for product ID: $productId");
    return false;
  }

  // Sanitize and escape the review text to prevent XSS vulnerabilities
  $sanitizedReview = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

  // Create the review data
  $reviewData = [
    'productId' => $productId,
    'reviewText' => $sanitizedReview,
    'reviewerName' => $reviewerName,
    'timestamp' => date('Y-m-d H:i:s') // Add a timestamp for reference
  ];

  // Save the review to a file (for demonstration purposes only - use a database for production)
  $filename = 'reviews_' . $productId . '.txt';
  $reviewString = json_encode($reviewData) . PHP_EOL; // Add a newline for clarity

  if (file_put_contents($filename, $reviewString, FILE_APPEND) !== false) {
    // Log success
    error_log("Review submitted for product ID: $productId by $reviewerName: $sanitizedReview");
    return true;
  } else {
    // Log error
    error_log("Failed to save review for product ID: $productId");
    return false;
  }
}


/**
 * Display Reviews for a Product
 *
 * This function reads reviews from a file and displays them.
 *
 * @param string $productId The ID of the product or service.
 *
 * @return void Displays the reviews on the screen.
 */
function displayReviews(string $productId) {
    $filename = 'reviews_' . $productId . '.txt';

    if (file_exists($filename)) {
        echo "<h2>Reviews for Product ID: $productId</h2>";
        echo "<ol>";

        // Read and display the reviews
        $lines = file($filename, FILE_IGNORE_NEW_LINES);
        foreach ($lines as $line) {
            echo "<li>$line</li>";
        }

        echo "</ol>";
    } else {
        echo "<p>No reviews found for product ID: $productId</p>";
    }
}


// Example Usage (Demonstration)
//  This section demonstrates how to use the functions.  You would typically
//  integrate these into a web application's routing and form handling.

// Form submission (Simulated)
if (isset($_POST['submitReview'])) {
    $productId = $_POST['productId'];
    $reviewText = $_POST['reviewText'];
    $reviewerName = isset($_POST['reviewerName']) ? $_POST['reviewerName'] : '';

    if (submitReview($productId, $reviewText, $reviewerName)) {
        echo "<p>Review submitted successfully!</p>";
    } else {
        echo "<p>Error submitting review.</p>";
    }
}

// Displaying Reviews (Example)
// You'd typically call this function after a review has been submitted.
//displayReviews('product123'); // Replace 'product123' with an actual product ID
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a specific product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return array  An array containing the result of the operation.  Returns an empty array on failure.
 */
function createReview(string $productId, string $username, string $rating, string $comment)
{
    // Input Validation (Important for security and data integrity)
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return []; // Return empty array for invalid input
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return []; // Invalid rating
    }

    //  Database Connection (Replace with your actual connection details)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement to prevent SQL injection
        $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment) 
                             VALUES (:product_id, :username, :rating, :comment)");

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        return ['success' => true, 'message' => 'Review created successfully!'];

    } catch (PDOException $e) {
        // Handle database errors
        return ['success' => false, 'message' => 'Error creating review: ' . $e->getMessage()];
    }
}


/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 *
 * @return array An array containing the reviews.  Returns an empty array if no reviews are found.
 */
function getReviews(string $productId)
{
    // Database Connection (Replace with your actual connection details)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement
        $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        // Fetch all results
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $reviews;

    } catch (PDOException $e) {
        // Handle database errors
        return [];
    }
}


/**
 * Update a Review
 *
 * Updates an existing review.
 *
 * @param int $reviewId The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 *
 * @return array An array containing the result of the operation.
 */
function updateReview(int $reviewId, string $rating, string $comment)
{
    // Database Connection
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        $stmt->execute();

        return ['success' => true, 'message' => 'Review updated successfully!'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error updating review: ' . $e->getMessage()];
    }
}

/**
 * Delete a Review
 *
 * Deletes a review.
 *
 * @param int $reviewId The ID of the review to delete.
 *
 * @return array An array containing the result of the operation.
 */
function deleteReview(int $reviewId)
{
    // Database Connection
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        return ['success' => true, 'message' => 'Review deleted successfully!'];

    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error deleting review: ' . $e->getMessage()];
    }
}
?>


// Example Usage:

// Create a review
$result = createReview("123", "john_doe", "5", "Great product!");

if ($result['success']) {
    echo "Review created: " . $result['message'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}

// Get reviews for product ID 123
$reviews = getReviews("123");

if (count($reviews) > 0) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "- " . $review['username'] . ": " . $review['rating'] . " - " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123
";
}

// Update a review (example)
$updateResult = updateReview(1, 4, "Improved rating");

if ($updateResult['success']) {
  echo "Review updated: " . $updateResult['message'] . "
";
}
else
{
    echo "Error updating review: " . $updateResult['message'] . "
";
}

// Delete a review (example)
$deleteResult = deleteReview(1);

if ($deleteResult['success']) {
  echo "Review deleted: " . $deleteResult['message'] . "
";
}
else
{
    echo "Error deleting review: " . $deleteResult['message'] . "
";
}


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional, auto-incrementing ID)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     * Setters (Use with caution - validate data)
     */
    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            throw new Exception("Rating must be between 1 and 5.");
        }
    }

    // Add setters for other properties as needed.  Validate data!
}


/**
 * User Review Review Function
 */
function reviewUserReview($review) {
  // This function is designed to provide a simple review of a UserReview object.
  // You can extend this to include more sophisticated validation and output formatting.

  // Validate the review object
  if (!is_object($review) || !($review instanceof UserReview)) {
    throw new Exception("Invalid review object. Must be an instance of UserReview.");
  }

  $userId = $review->getUserId();
  $rating = $review->getRating();
  $comment = $review->getComment();
  $productId = $review->getProductId();

  // Basic validation - improve this!
  if (empty($comment)) {
    throw new Exception("Comment cannot be empty.");
  }

  // Construct a review string
  $reviewString = "Review ID: " . ($review->getReviewId() ? $review->getReviewId() : "N/A") . "
" .
                  "User ID: " . $userId . "
" .
                  "Product ID: " . $productId . "
" .
                  "Rating: " . $rating . "
" .
                  "Comment: " . $comment . "
" .
                  "Date: " . $review->getDate();


  return $reviewString;
}



// --- Example Usage ---

// Create a review object
$review = new UserReview(null, 123, 456, 5, "This product is amazing!");

try {
    // Review the review
    $reviewString = reviewUserReview($review);
    echo $reviewString . PHP_EOL; // Output the review
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . PHP_EOL;
}


// Example of invalid review (empty comment)
$review2 = new UserReview(null, 456, 789, 3, "");

try {
    $reviewString = reviewUserReview($review2);
    echo $reviewString . PHP_EOL;
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . PHP_EOL; // Output: Error: Comment cannot be empty.
}


?>


<?php

/**
 *  User Review Function
 *
 *  This function takes a user ID, a product ID, and a review text,
 *  and saves the review to a database.
 *
 *  @param int $userId The ID of the user submitting the review.
 *  @param int $productId The ID of the product being reviewed.
 *  @param string $reviewText The text of the review.
 *  @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Database connection details - Replace with your actual credentials
    $dbHost = 'localhost';
    $dbName = 'your_database_name';
    $dbUser = 'your_database_user';
    $dbPassword = 'your_database_password';

    try {
        // Create a PDO database connection
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);

        // Set the PDO error mode to exception (to catch errors)
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, review_text, created_at) VALUES (?, ?, ?, NOW())");

        // Bind the parameters
        $stmt->bindParam(1, $userId);
        $stmt->bindParam(2, $productId);
        $stmt->bindParam(3, $reviewText);

        // Execute the statement
        $stmt->execute();

        return true;  // Review saved successfully

    } catch (PDOException $e) {
        // Handle database errors - Log the error for debugging
        error_log("Database error: " . $e->getMessage());
        return false;  // Review not saved (due to error)
    }
}

// --- Example Usage ---

// Get user input (simulated)
$userId = 123;
$productId = 456;
$reviewText = "This is a fantastic product!  I highly recommend it.";

// Save the review
$success = saveUserReview($userId, $productId, $reviewText);

if ($success) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save the review.  Please try again.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item. It provides a basic framework and can be
 * customized further based on your specific needs.
 *
 * @param string $productId The ID of the product or item being reviewed.
 * @param string $username  The username of the user submitting the review.
 * @param string $comment  The text of the review comment.
 * @param int    $rating   The rating (e.g., 1-5).
 * @param array $dbConnection  (Optional)  A database connection object.
 *                           If not provided, it will attempt to connect using a default configuration.
 * @return array  An array containing the result of the operation (success/failure, and optionally data).
 */
function createReview(
    string $productId,
    string $username,
    string $comment,
    int    $rating,
    $dbConnection = null
) {
    // Default database connection configuration
    $dbConfig = [
        'host' => 'localhost',
        'user' => 'your_db_user',
        'password' => 'your_db_password',
        'dbname' => 'your_db_name'
    ];

    // Use provided connection or create a new one
    if ($dbConnection === null) {
        try {
            $dbConnection = new PDO(
                "mysql:host={$dbConfig['host']};dbname={$dbConfig['dbname']}",
                $dbConfig['user'],
                $dbConfig['password']
            );
            $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Throw exceptions on errors
        } catch (PDOException $e) {
            return ['success' => false, 'message' => 'Database connection error: ' . $e->getMessage()];
        }
    }

    // Sanitize input - Important for security
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT);  // Validate rating as an integer

    if ($rating === false || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be an integer between 1 and 5.'];
    }


    // Prepare the SQL statement (using prepared statements for security)
    $sql = "INSERT INTO reviews (product_id, username, comment, rating) VALUES (:product_id, :username, :comment, :rating)";
    $stmt = $dbConnection->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    try {
        $stmt->execute();
        return ['success' => true, 'message' => 'Review created successfully.'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Example Usage (Illustrative - Replace with your actual database setup and table structure)
 */

// Example usage:
$result = createReview(
    '123', // Product ID
    'john.doe', // User Name
    'This is a great product!', // Comment
    4, // Rating
    null // Let it use the default DB connection
);

if ($result['success']) {
    echo "Review created: " . $result['message'] . "
";
} else {
    echo "Error creating review: " . $result['message'] . "
";
}

//To retrieve reviews (example - needs a SELECT query and proper display logic)
// You would typically use a SELECT query to retrieve reviews.
// Example SELECT query (placeholder):
/*
$sql = "SELECT * FROM reviews WHERE product_id = :product_id";
$stmt = $dbConnection->prepare($sql);
$stmt->bindParam(':product_id', '123');
$stmt->execute();

$reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "Product ID: " . $review['product_id'] . "
";
        echo "Username: " . $review['username'] . "
";
        echo "Comment: " . $review['comment'] . "
";
        echo "Rating: " . $review['rating'] . "
";
        echo "---
";
    }
} else {
    echo "No reviews found for this product.
";
}
*/

?>


<?php

/**
 * User Review Class
 * 
 * This class allows users to submit and view reviews for a product or service.
 * 
 * @author Your Name
 * @version 1.0
 */
class UserReview {

    /**
     * @var array Reviews array
     */
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review text.
     * @return bool True if the review was successfully added, false otherwise.
     */
    public function addReview(string $username, string $comment) {
        if (empty($username) || empty($comment)) {
            return false; // Invalid input
        }
        $this->reviews[] = ['username' => $username, 'comment' => $comment];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product/service (implementation placeholder).
     * 
     *  This function can be expanded with database integration or filtering logic.
     *
     * @param string $productName The name of the product/service.
     * @return array  An array of review objects for the specified product.  Returns empty array if not found.
     */
    public function getReviewsByProduct(string $productName) {
        // Placeholder for database integration or other filtering
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            if (strpos($review['comment'], $productName) !== false) { //Simple string match
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Calculates the average rating.
     *  
     * @return float|null Average rating (if reviews exist) or null if no reviews.
     */
    public function getAverageRating() {
        if (empty($this->getAllReviews())) {
            return null;
        }

        $totalRating = 0;
        $numReviews = count($this->getAllReviews());

        foreach ($this->getAllReviews() as $review) {
            $rating = $review['rating'];
            if (is_numeric($rating)) { //Validate that rating is a number
                $totalRating += $rating;
            } else {
                //Handle invalid rating values, maybe log an error or skip
                continue; 
            }
        }
        return $totalRating / $numReviews;
    }
}


// Example Usage:

// Create a review object
$reviewObject = new UserReview();

// Add some reviews
$reviewObject->addReview('JohnDoe', 'Great product, highly recommended!');
$reviewObject->addReview('JaneSmith', 'Good value for money.');
$reviewObject->addReview('PeterJones', 'Needs some improvements.');
$reviewObject->addReview('AliceBrown', 'Excellent customer service.');


// Get all reviews
$allReviews = $reviewObject->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>Username:</strong> " . $review['username'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<hr>";
}

// Get reviews for a specific product (e.g., "Laptop")
$laptopReviews = $reviewObject->getReviewsByProduct("Laptop");

echo "<h2>Reviews for Laptop:</h2>";
if (empty($laptopReviews)) {
    echo "<p>No reviews found for Laptop.</p>";
} else {
    foreach ($laptopReviews as $review) {
        echo "<strong>Username:</strong> " . $review['username'] . "<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
        echo "<hr>";
    }
}

// Calculate the average rating
$averageRating = $reviewObject->getAverageRating();
echo "<h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "<p>Average Rating: " . $averageRating . "</p>";
} else {
    echo "<p>No reviews yet to calculate an average rating.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process user reviews, sanitize input,
 * and store them in a database (or other storage mechanism).
 *
 * @param string $username The user submitting the review.
 * @param string $reviewText The text of the review.
 * @param string $rating A numerical rating (e.g., 1-5).
 * @param string $itemId The ID of the item the review is for.
 * @param string $databaseConnection A database connection object (e.g., mysqli).
 *
 * @return bool True on success, false on failure.
 */
function processUserReview(string $username, string $reviewText, string $rating, string $itemId, $databaseConnection)
{
    // **Input Validation & Sanitization - VERY IMPORTANT**
    // Prevent SQL injection and other vulnerabilities.

    // 1. Validate the rating
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return false;
    }

    // 2. Sanitize the review text (Escape special characters)
    $reviewText = htmlspecialchars($reviewText);

    // **Database Interaction**
    try {
        // Prepare the SQL statement to prevent SQL injection.
        $sql = "INSERT INTO reviews (user_name, review_text, rating, item_id)
                VALUES (?, ?, ?, ?)";

        // Use prepared statements for security.
        $stmt = $databaseConnection->prepare($sql);

        if ($stmt === false) {
            throw new Exception("Error preparing statement.");
        }

        $stmt->bind_param("sss", $username, $reviewText, $rating);

        if (!$stmt->execute()) {
            throw new Exception("Error executing statement: " . $stmt->error);
        }

        $stmt->close();  // Important to close the statement
        return true;

    } catch (Exception $e) {
        error_log("Error processing review: " . $e->getMessage());
        return false;
    }
}


// **Example Usage (Illustrative - Replace with your actual database connection)**
//  --- DO NOT USE THIS DIRECTLY - MODIFY TO FIT YOUR SETUP ---

/*
$db_host = "localhost";
$db_user = "your_user";
$db_password = "your_password";
$db_name = "your_database";

$connection = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}


$username = "JohnDoe";
$reviewText = "This product is amazing!  I love it.";
$rating = 4;
$itemId = 123;

if (processUserReview($username, $reviewText, $rating, $itemId, $connection)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

$connection->close(); // Close the database connection
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The ID of the product to review.
 * @param string $productName The name of the product.
 * @param array $reviews An array of review objects.  Each object should have 'user', 'rating' (1-5), and 'comment' properties.
 * @return string HTML formatted review display.
 */
function displayUserReviews(string $productId, string $productName, array $reviews)
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class='reviews'>";
    $html .= "<h2>Reviews for {$productName} (ID: {$productId})</h2>";
    $html .= "<ul class='review-list'>";

    foreach ($reviews as $review) {
        $html .= "<li class='review-item'>";
        $html .= "<div class='review-header'>";
        $html .= "<span class='user'>User: {$review['user']}</span>";
        $html .= "<span class='rating'>Rating: {$review['rating']}</span>";
        $html .= "</div>";
        $html .= "<p class='review-text'>{$review['comment']}</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


// Example Usage (Simulated Reviews)
$productID = '123';
$productName = 'Awesome Widget';
$reviews = [
    [
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'This widget is fantastic!  It exceeded my expectations.'
    ],
    [
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Good quality, but a bit pricey.'
    ],
    [
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It does the job, nothing special.'
    ]
];

// Display the reviews
$reviewHTML = displayUserReviews($productID, $productName, $reviews);

// Output the HTML (you would typically output this to your web page)
echo $reviewHTML;

?>


   <?php include 'review_function.php'; ?>
   
3. **Pass Data:**  In your view, create a variable containing the necessary data (product ID, product name, and the reviews array) that you'll pass to the `displayUserReviews` function.
4. **Call the Function:** Call the function, and then output the returned HTML.

**Example (with a simple HTML template):**



<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a given item or product.
 * It includes basic input validation and handles display of reviews.
 */
class UserReviewFunction
{
    private $reviews = [];

    /**
     * Adds a new review to the collection.
     *
     * @param string $name The reviewer's name.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., if input is invalid).
     */
    public function addReview(string $name, string $comment): bool
    {
        // Input Validation (Important for security and data integrity)
        if (empty($name)) {
            error_log("Invalid review: Missing reviewer name.");
            return false;
        }
        if (empty($comment)) {
            error_log("Invalid review: Missing comment.");
            return false;
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date("Y-m-d H:i:s") // Add a timestamp for record keeping
        ];

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void  Displays the reviews to the browser.
     */
    public function displayReviews(): void
    {
        echo "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            echo "<p>No reviews yet.</p>";
        } else {
            echo "<ul>";
            foreach ($this->getAllReviews() as $review) {
                echo "<li><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . "</li>";
            }
            echo "</ul>";
        }
    }
}

// Example Usage:
// Create an instance of the UserReviewFunction class
$reviewFunction = new UserReviewFunction();

// Add some reviews
$reviewFunction->addReview("Alice", "Great product!  I highly recommend it.");
$reviewFunction->addReview("Bob", "Could be better, but overall decent.");
$reviewFunction->addReview("Charlie", "Excellent value for money!");


// Display the reviews
$reviewFunction->displayReviews();

// Example of handling an invalid review (missing comment)
$reviewFunction->addReview("David", ""); // This will log an error
$reviewFunction->displayReviews();

?>


<?php

/**
 * Reviews Class
 *
 * This class provides functionality for managing user reviews for a product or item.
 */
class Reviews {

    private $db; // Database connection

    /**
     * Constructor
     *
     * Initializes the Reviews class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * Add a new review
     *
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview(int $productId, string $username, string $rating, string $comment) {
        try {
            $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
                    VALUES (:product_id, :user_name, :rating, :comment)";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_name', $username);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);

            $result = $stmt->execute();

            return ($result === 1); // Returns true if at least one row was affected.

        } catch (PDOException $e) {
            error_log("Error adding review: " . $e->getMessage()); // Log the error
            return false;
        }
    }

    /**
     * Get all reviews for a product
     *
     * Retrieves all reviews for a specific product from the database.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId) {
        try {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = $row;
            }

            return $reviews;
        } catch (PDOException $e) {
            error_log("Error getting reviews: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get average rating for a product
     *
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(int $productId) {
        try {
            $sql = "SELECT AVG(rating) AS average_rating
                    FROM reviews
                    WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $row = $stmt->fetch(PDO::FETCH_ASSOC);
            if ($row && isset($row['average_rating'])) {
                return (float) $row['average_rating'];
            } else {
                return null;
            }
        } catch (PDOException $e) {
            error_log("Error getting average rating: " . $e->getMessage());
            return null;
        }
    }
}


// Example Usage (Assuming you have a database connection $db):
// Create a database connection (replace with your actual credentials)
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $db = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception throwing
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Create the Reviews class instance
$reviews = new Reviews($db);

// Add a review
$reviewResult = $reviews->addReview(1, 'JohnDoe', 5, 'Great product! Highly recommended.');

if ($reviewResult) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

// Get reviews for product ID 1
$reviewsForProduct = $reviews->getReviewsByProduct(1);
echo "<br>Reviews for Product 1:<br>";
foreach ($reviewsForProduct as $review) {
    echo "User: " . $review['user_name'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
}

// Get average rating for product ID 1
$averageRating = $reviews->getAverageRating(1);
echo "<br>Average Rating for Product 1: " . ($averageRating !== null ? $averageRating : "No reviews found.");
?>


<?php

/**
 * Class Review
 *
 * Handles user reviews, allowing users to submit and display reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param string $user_name The name of the user who submitted the review.
     * @param string $review_text The text of the review.
     */
    public function addReview(string $user_name, string $review_text) {
        $this->reviews[] = ['user' => $user_name, 'text' => $review_text];
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews based on a given criteria (e.g., maximum rating).
     *
     * @param int $rating The minimum rating to filter by (e.g., 4 or higher).
     * @return array An array of review objects that meet the criteria.
     */
    public function getReviewsByRating(int $rating) {
        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            // You would typically have a rating field in your review objects.
            // This is just an example.  Replace with your actual rating field.
            if ($review['rating'] >= $rating) { //Example. Modify to use your actual rating field
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string The formatted review string.
     */
    public function displayReviews() {
        $output = "<h2>All Reviews:</h2>";
        $output .= "<ul>";
        foreach ($this->getAllReviews() as $review) {
            $output .= "<li><strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
            $output .= "<strong>Review:</strong> " . htmlspecialchars($review['text']) . "</li>";
        }
        $output .= "</ul>";
        return $output;
    }
}


// Example Usage (Demonstration)
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview('John Doe', 'Great product! I highly recommend it.');
$reviewSystem->addReview('Jane Smith', 'The delivery was fast and the product was as described.');
$reviewSystem->addReview('Peter Jones', 'It was okay, but could be better.  The instructions were a bit confusing.');


// Display all reviews
echo $reviewSystem->displayReviews();

// Example: Display reviews with a rating of 4 or higher (assuming a rating field is added to review objects)
// To make this work, you'd need to modify your Review object to include a rating field.
// Example modification:
/*
class Review {
   // ... other properties ...
   private $rating;
}
*/

// Example adding rating to review objects
/*
$reviewSystem->addReview('John Doe', 'Great product! I highly recommend it.', 5);
$reviewsWithHighRating = $reviewSystem->getReviewsByRating(4);
echo "<br><h2>Reviews with rating 4 or higher:</h2>";
echo $reviewSystem->displayReviews($reviewsWithHighRating);
*/

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 * It includes functionality to add new reviews, display existing reviews,
 * and potentially handle pagination for large numbers of reviews.
 *
 * @param string $productId The ID of the product the reviews are for.
 * @param array $reviews An array of review objects.  Each review object should have at least 'user', 'rating', and 'comment' properties.
 * @param string $view  The view to display the reviews in.  Options: 'list', 'grid'
 * @param int $pageSize The number of reviews to display per page. Defaults to 10.
 * @return string The HTML output of the reviews.
 */
function displayReviews($productId, $reviews, $view = 'list', $pageSize = 10)
{

    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    if ($view === 'list') {
        return displayReviewsAsList($reviews, $pageSize);
    } elseif ($view === 'grid') {
        return displayReviewsAsGrid($reviews, $pageSize);
    } else {
        return "<p>Invalid view.  Supported views are 'list' and 'grid'.</p>";
    }
}


/**
 * Displays reviews in a list format.
 *
 * @param array $reviews The reviews to display.
 * @param int $pageSize The number of reviews to display per page.
 * @return string The HTML output of the reviews.
 */
function displayReviewsAsList($reviews, $pageSize)
{
    $totalReviews = count($reviews);
    $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;  //Get the page number from the URL

    if ($page < 1) { $page = 1; } //Ensure page is at least 1

    $start = ($page - 1) * $pageSize;
    $end = $start + $pageSize;

    $paginatedReviews = array_slice($reviews, $end - $start, true); //Slice for pagination

    $html = "<div class='reviews-container'>";
    foreach ($paginatedReviews as $review) {
        $html .= "<div class='review'>";
        $html .= "<p class='review-user'><strong>" . htmlspecialchars($review['user']) . "</strong></p>";
        $html .= "<p class='review-rating'>Rating: " . $review['rating'] . "</p>";
        $html .= "<p class='review-comment'>" . htmlspecialchars($review['comment']) . "</p>";
        $html .= "</div>";
    }

    //Pagination links
    $totalPages = (int)ceil($totalReviews / $pageSize);
    $html .= "<div class='pagination'>";
    for ($i = 1; $i <= $totalPages; $i++) {
        $html .= "<a href='?page=" . $i . "'>" . $i . "</a>";
    }
    $html .= "</div>";

    $html .= "</div>";
    return $html;
}



/**
 * Displays reviews in a grid format.
 *
 * @param array $reviews The reviews to display.
 * @param int $pageSize The number of reviews to display per page.
 * @return string The HTML output of the reviews.
 */
function displayReviewsAsGrid($reviews, $pageSize)
{
    $html = "<div class='reviews-grid'>";
    for ($i = 0; $i < count($reviews); $i++) {
        $review = $reviews[$i];
        $html .= "<div class='review-item'>";
        $html .= "<p class='review-user'><strong>" . htmlspecialchars($review['user']) . "</strong></p>";
        $html .= "<p class='review-rating'>Rating: " . $review['rating'] . "</p>";
        $html .= "<p class='review-comment'>" . htmlspecialchars($review['comment']) . "</p>";
        $html .= "</div>";
    }
    $html .= "</div>";
    return $html;
}



// Example usage:
// Assuming you have an array of reviews called $myReviews
// And you've created a product object with $productId

// $myReviews = [
//     ['user' => 'John Doe', 'rating' => 5, 'comment' => 'Great product!'],
//     ['user' => 'Jane Smith', 'rating' => 4, 'comment' => 'Good value for money.'],
//     ['user' => 'Peter Jones', 'rating' => 3, 'comment' => 'It was okay.'],
// ];

// $productId = '123'; // Replace with the actual product ID

// $reviewsOutput = displayReviews($productId, $myReviews, 'list'); // or 'grid'
// echo $reviewsOutput;
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 *
 * This function handles:
 *  - Receiving review input (text, rating, etc.)
 *  - Validating the input
 *  - Saving the review to a database (example implementation)
 *  - Displaying the reviews
 *
 * @param string $reviewText The user's review text.
 * @param int   $rating     The user's rating (1-5).
 * @param string $productName The name of the product the review is for.
 * @return array An array containing:
 *   - 'success':  True if the review was submitted successfully, false otherwise.
 *   - 'message': A message indicating the success or failure of the operation.
 *   - 'reviews': An array of review objects.
 */
function handleUserReview(string $reviewText, int $rating, string $productName) {
  // Input validation - Very important for security and data integrity.
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviews' => []];
  }

  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviews' => []];
  }

  // **In a real application, you would connect to your database here.**
  // This is a simplified example using a dummy array.
  $reviews = getReviewsFromDatabase(); // Replace with your actual database retrieval

  // Create a review object (can be customized to include more data)
  $review = [
    'id' => count($reviews) + 1, // Simple unique ID (in a real app, use auto-increment)
    'text' => $reviewText,
    'rating' => $rating,
    'timestamp' => date('Y-m-d H:i:s'),
    'product' => $productName
  ];

  // Add the new review to the reviews array
  $reviews[] = $review;

  // Save the review to the database (example - adapt to your DB)
  saveReviewToDatabase($review);  // Replace with your actual database saving function

  return ['success' => true, 'message' => 'Review submitted successfully.', 'reviews' => $reviews];
}


/**
 * Dummy function to simulate retrieving reviews from a database.
 * Replace with your actual database query.
 *
 * @return array An array of review objects.
 */
function getReviewsFromDatabase() {
  // Dummy data for demonstration
  return [
    [
      'id' => 1,
      'text' => 'Great product!  Highly recommended.',
      'rating' => 5,
      'timestamp' => date('Y-m-d H:i:s'),
      'product' => 'Laptop X100'
    ],
    [
      'id' => 2,
      'text' => 'Could be better, but decent for the price.',
      'rating' => 3,
      'timestamp' => date('Y-m-d H:i:s'),
      'product' => 'Laptop X100'
    ]
  ];
}

/**
 * Dummy function to simulate saving a review to the database.
 * Replace with your actual database saving logic.
 *
 * @param array $review The review data to save.
 */
function saveReviewToDatabase(array $review) {
  // In a real implementation, you would use a database connection
  // and execute a query to insert the review data into the database.

  // This is just a placeholder.  In a real app, do the database insertion.
  echo "Saving review to database: " . print_r($review, true) . "
";
}



// Example Usage:
$product = 'Laptop X100';
$reviewText = "This is a fantastic laptop! Very fast and reliable.";
$rating = 5;

$result = handleUserReview($reviewText, $rating, $product);

if ($result['success']) {
  echo "Review submitted successfully!
";
  echo "Reviews:
";
  print_r($result['reviews']);
} else {
  echo "Error submitting review: " . $result['message'] . "
";
}

// Example of an invalid review:
$invalidResult = handleUserReview("", 6, "Tablet Z200");
if (!$invalidResult['success']) {
    echo "Invalid review detected!
" . $invalidResult['message'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation, retrieval, updating, and deletion of user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $id Optional: The ID of the review to update. If not provided, a new review is created.
 *
 * @return array Returns an array with status and details.
 *               - 'status' => 'success' or 'error'
 *               - 'message' =>  A descriptive message.
 *               - 'review' => (if success) an associative array containing the review data (id, productId, userId, rating, comment, creationDate)
 *
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, ?int $id = null): array {
  // Validate inputs - Basic examples, extend as needed for your application
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['status' => 'error', 'message' => 'Invalid rating. Rating must be a number between 1 and 5.'];
  }
  if (empty($comment)) {
    return ['status' => 'error', 'message' => 'Review comment cannot be empty.'];
  }
  // Ideally, you would also validate $userId - check against user database
  // For this example, we assume it's valid.

  // Create a new review
  if (is_null($id)) {
    $review = [
      'productId' => $productId,
      'userId' => $userId,
      'rating' => $rating,
      'comment' => $comment,
      'creationDate' => date('Y-m-d H:i:s')  // Use appropriate timestamp format
    ];
  } else {
    // Update an existing review
    // In a real application, you'd query a database here to update the review
    // This is a placeholder for demonstration.
    $review = [
      'id' => $id,
      'productId' => $productId,
      'userId' => $userId,
      'rating' => $rating,
      'comment' => $comment,
      'creationDate' => date('Y-m-d H:i:s')
    ];
  }


  // In a real application, you'd save the $review data to a database here.
  // For this example, we're just returning the review data.

  return ['status' => 'success', 'message' => 'Review created/updated successfully.', 'review' => $review];
}


// Example Usage
$productId = '123';
$userId = 'user123';
$rating = 4;
$comment = 'Great product!  I highly recommend it.';

$result = createOrUpdateReview($productId, $userId, $rating, $comment);

if ($result['status'] === 'success') {
  echo "Review created/updated successfully: " . PHP_EOL;
  print_r($result['review']);
} else {
  echo "Error creating/updating review: " . PHP_EOL;
  echo $result['message'] . PHP_EOL;
}

// Example of an error
$result = createOrUpdateReview($productId, $userId, 6, 'Bad Rating'); // Invalid Rating
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $reviewDate;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct(
        int $reviewId = null,
        int $userId,
        int $productId,
        int $rating,
        string $comment
    ) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->reviewDate = date('Y-m-d H:i:s'); // Set current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getReviewDate() {
        return $this->reviewDate;
    }

    /**
     * Setters (If needed - use with caution)
     */
    public function setRating(int $rating) {
        $this->rating = $rating;
    }


    /**
     *  Basic display function - useful for testing or simple output
     */
    public function displayReview() {
        echo "Review ID: " . $this->getReviewId() . "<br>";
        echo "User ID: " . $this->getUserId() . "<br>";
        echo "Product ID: " . $this->getProductId() . "<br>";
        echo "Rating: " . $this->getRating() . "<br>";
        echo "Comment: " . $this->getComment() . "<br>";
        echo "Review Date: " . $this->getReviewDate() . "<br>";
    }

}



/**
 * User Review Review Function (Simplified Example)
 */
function reviewProduct(UserReview $review) {
    // Basic validation (add more robust validation in a real application)
    if ($review->getRating() < 1 || $review->getRating() > 5) {
        echo "Invalid rating. Rating must be between 1 and 5.";
        return;
    }

    //  Add the review to a database (replace with your database logic)
    echo "Review submitted successfully for Product ID: " . $review->getProductId() . "<br>";
    echo "User: " . $review->getUserId() . "<br>";
    echo "Rating: " . $review->getRating() . "<br>";
    echo "Comment: " . $review->getComment() . "<br>";
}



// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! I love it.");
reviewProduct($review1);

$review2 = new UserReview(null, 456, 789, 3, "It was okay.");
reviewProduct($review2);

$review3 = new UserReview(1, 789, 101, 1, "Terrible!");  //Testing with an ID
reviewProduct($review3);

?>


<?php

/**
 * Class Review
 *
 * Handles the creation, storage, and retrieval of user reviews.
 */
class Review {

    private $db; // Database connection object

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param int $userId The ID of the user submitting the review.
     * @param string $title The title of the review.
     * @param string $comment The content of the review.
     * @param int $rating The rating (e.g., 1-5).
     * @return int|false The ID of the newly created review on success, or false on failure.
     */
    public function createReview(int $productId, int $userId, string $title, string $comment, int $rating) {
        if ($this->db->isConnected()) { // Check if database connection is active
            $sql = "INSERT INTO reviews (product_id, user_id, title, comment, rating)
                    VALUES (:product_id, :user_id, :title, :comment, :rating)";

            $stmt = $this->db->prepare($sql);

            // Bind parameters
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);

            // Execute the query
            if ($stmt->execute()) {
                return $this->db->lastInsertId();
            } else {
                // Handle error
                error_log("Error creating review: " . $this->db->errorInfo());
                return false;
            }
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId) {
        if ($this->db->isConnected()) {
            $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();

            $reviews = [];
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = (object) $row; // Create an object from the row
            }

            return $reviews;
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return [];
        }
    }

    /**
     * Retrieves a single review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return \stdClass|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        if ($this->db->isConnected()) {
            $sql = "SELECT * FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                return (object) $row;
            } else {
                return null;
            }
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return null;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $title The new title.
     * @param string $comment The new comment.
     * @param int $rating The new rating.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $title, string $comment, int $rating) {
        if ($this->db->isConnected()) {
            $sql = "UPDATE reviews SET title = :title, comment = :comment, rating = :rating WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':rating', $rating);
            $stmt->execute();

            return $stmt->rowCount() > 0; // Returns true if at least one row was affected
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }

    /**
     * Deletes a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId) {
        if ($this->db->isConnected()) {
            $sql = "DELETE FROM reviews WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $reviewId);
            $stmt->execute();

            return $stmt->rowCount() > 0;
        } else {
            //Handle no database connection
            error_log("Database connection is not active.");
            return false;
        }
    }
}

// Example usage (Assuming you have a database connection object called $db)

// $review = new Review($db);

// $newReviewId = $review->createReview(1, 123, "Great product!", "Highly recommended.", 5);

// if ($newReviewId) {
//     echo "New review created with ID: " . $newReviewId . "<br>";
// } else {
//     echo "Error creating review.<br>";
// }

// $reviews = $review->getReviewsByProduct(1);

// echo "Reviews for product 1:<br>";
// foreach ($reviews as $review) {
//     echo "Product ID: " . $review->product_id . "<br>";
//     echo "Title: " . $review->title . "<br>";
//     echo "Comment: " . $review->comment . "<br>";
//     echo "Rating: " . $review->rating . "<br>";
//     echo "<br>";
// }

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows users to submit and view reviews for a given item.
 *
 *  @param string $item_name - The name of the item being reviewed.
 *  @param string $user_name - The name of the user submitting the review.
 *  @param string $review_text - The text of the review.
 *  @param array $reviews - An array to store the reviews.  Defaults to an empty array.
 *
 *  @return array - The updated array of reviews, with the new review added.
 */
function addReview(string $item_name, string $user_name, string $review_text, array &$reviews = []) {
  // Validate input (basic checks - enhance for production)
  if (empty($item_name) || empty($user_name) || empty($review_text)) {
    return $reviews; // Return original array if any input is empty
  }

  // Create a review object (could be a simple associative array, or a dedicated class)
  $review = [
    'user' => $user_name,
    'text' => $review_text,
    'date' => date('Y-m-d H:i:s') // Add timestamp for review date
  ];

  // Add the review to the array.  Passing &$reviews means we're modifying the original array.
  $reviews[] = $review;

  return $reviews;
}

/**
 * Displays Reviews
 *
 *  This function displays the reviews in a formatted way.
 *
 *  @param array $reviews - The array of reviews to display.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  echo "<h2>Reviews for " . htmlspecialchars($review_item) . "</h2>";
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['text']) . "<br>";
    echo "Date: " . htmlspecialchars($review['date']);
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:

$myReviews = []; // Initialize an empty array to store reviews

// Add some reviews
$myReviews = addReview("Awesome Product", "John Doe", "This product is fantastic! I highly recommend it.");
$myReviews = addReview("Another Great Item", "Jane Smith", "It's really good value for the money.");
$myReviews = addReview("Something Cool", "Peter Jones", "I love this!");

// Display the reviews
displayReviews($myReviews);

// Example to show how input validation works
$newReviews = addReview("", "Test User", "Empty Review");
print_r($newReviews); // Prints the original $newReviews array (unchanged)

?>


<?php

/**
 * Reviews Class - Allows users to submit and view reviews.
 */
class Reviews {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $name The name of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $name, string $comment) {
        if (empty($name) || empty($comment)) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp of review
        ];
        return true;
    }

    /**
     * Gets all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Gets reviews based on a search term.
     *
     * @param string $searchTerm The term to search for in the review comment.
     * @return array An array of review objects matching the search term.
     */
    public function searchReviews(string $searchTerm) {
        $results = [];
        foreach ($this->getAllReviews() as $review) {
            if (strpos($review['comment'], $searchTerm) !== false) {
                $results[] = $review;
            }
        }
        return $results;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string HTML markup to display the reviews.
     */
    public function displayReviews() {
        $reviews = $this->getAllReviews();
        $html = '<table border="1">';
        $html .= '<thead><tr><th>Name</th><th>Comment</th><th>Date</th></tr></thead>';
        $html .= '<tbody>';
        foreach ($reviews as $review) {
            $html .= '<tr>';
            $html .= '<td>' . htmlspecialchars($review['name']) . '</td>';
            $html .= '<td>' . htmlspecialchars($review['comment']) . '</td>';
            $html .= '<td>' . $review['date'] . '</td>';
            $html .= '</tr>';
        }
        $html .= '</tbody></table>';
        return $html;
    }
}

// Example Usage:
// Instantiate the Reviews class
$reviews = new Reviews();

// Add some reviews
$reviews->addReview('John Doe', 'Great product!  I highly recommend it.');
$reviews->addReview('Jane Smith', 'The service was excellent.  Fast and friendly.');
$reviews->addReview('Peter Jones', 'Could be better, but overall okay.');

// Search for reviews containing "excellent"
$searchResults = $reviews->searchReviews('excellent');

// Display all reviews
echo $reviews->displayReviews();

// Display search results
echo "<h2>Search Results for 'excellent':</h2>";
echo $reviews->displayReviews($searchResults);  // Function overload to display search results


/**
 * Overloaded displayReviews function to handle search results.  This allows you
 * to customize the display of search results if needed.
 *
 * @param array $reviews  The array of reviews to display.
 * @return string HTML markup to display the reviews.
 */
function displayReviews(array $reviews) {
    $html = '<table border="1">';
    $html .= '<thead><tr><th>Name</th><th>Comment</th><th>Date</th></tr></thead>';
    $html .= '<tbody>';
    foreach ($reviews as $review) {
        $html .= '<tr>';
        $html .= '<td>' . htmlspecialchars($review['name']) . '</td>';
        $html .= '<td>' . htmlspecialchars($review['comment']) . '</td>';
        $html .= '<td>' . $review['date'] . '</td>';
        $html .= '</tr>';
    }
    $html .= '</tbody></table>';
    return $html;
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The text of the review submitted by the user.
 * @param string $userEmail    The email address of the user submitting the review.
 * @param array  $reviews      (Optional) An array of existing reviews (for demonstration/expansion).
 *
 * @return array  An array containing the new review and the updated list of reviews.
 */
function submitReview(string $productName, string $reviewText, string $userEmail, array &$reviews = []) {
  // Input validation -  This is crucial!
  if (empty($productName)) {
    return ["error" => "Product name cannot be empty."];
  }
  if (empty($reviewText)) {
    return ["error" => "Review text cannot be empty."];
  }
  if (empty($userEmail)) {
    return ["error" => "User email cannot be empty."];
  }

  // Create the new review object
  $newReview = [
    "product_name" => $productName,
    "review_text" => $reviewText,
    "user_email" => $userEmail,
    "timestamp" => date("Y-m-d H:i:s") // Add a timestamp
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  return ["success" => "Review submitted successfully!", "review" => $newReview, "reviews" => $reviews];
}


/**
 * Function to display reviews
 *
 * Displays a list of reviews, sorted by most recent.
 *
 * @param array $reviews  The array of reviews.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for " . $reviews[0]['product_name'] . "</h2>"; //Dynamically uses product name from first review.
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    usort($reviews, function($a, $b) {
        return $b["timestamp"] <=> $a["timestamp"]; // Sort by timestamp (most recent first)
    });

    foreach ($reviews as $review) {
        echo "<li>";
        echo "<p><strong>" . $review['user_email'] . ":</strong> " . htmlspecialchars($review['review_text']) . "</p>";
        echo "<p><i>Timestamp: " . $review['timestamp'] . "</i></p>";
        echo "</li>";
    }
    echo "</ul>";
}



// Example Usage:

// Simulate a database (replace with your actual database interaction)
$currentReviews = [];

// Submit a review
$result = submitReview("Awesome Widget", "This widget is fantastic!  Highly recommended.", "user@example.com");

if (isset($result["error"])) {
    echo "<p style='color: red;'>Error: " . $result["error"] . "</p>";
} else {
    echo "<p style='color: green;'>Review submitted successfully!</p>";
}


// Submit another review
$result = submitReview("Super Gadget", "Great product, easy to use.", "anotheruser@example.com");

if (isset($result["error"])) {
    echo "<p style='color: red;'>Error: " . $result["error"] . "</p>";
} else {
    echo "<p style='color: green;'>Review submitted successfully!</p>";
}


// Display the reviews
displayReviews($currentReviews);


?>


<?php

/**
 * User Review Function - Processes and stores user reviews.
 */
class UserReview
{
    private $db; // Database connection object

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Adds a new user review to the database.
     *
     * @param string $userId The ID of the user submitting the review.
     * @param string $productName The name of the product being reviewed.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     * @return bool True on success, false on failure.
     */
    public function addReview($userId, $productName, $rating, $comment)
    {
        // Input validation (very important!)
        if (!$this->isValidInput($userId, $productName, $rating, $comment)) {
            return false;
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (user_id, product_name, rating, comment) 
                VALUES (:user_id, :product_name, :rating, :comment)";

        // Prepare the statement
        $stmt = $this->db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        if ($stmt->execute()) {
            return true;
        } else {
            // Handle errors (very important!)
            error_log("Error adding review: " . $stmt->error); // Log the error for debugging
            return false;
        }
    }

    /**
     * Retrieves reviews for a specific product.
     *
     * @param string $productName The product to retrieve reviews for.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productName)
    {
        $sql = "SELECT * FROM reviews WHERE product_name = :product_name";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }

        return $reviews;
    }


    /**
     * Input validation function.
     *
     * @param string $userId
     * @param string $productName
     * @param string $rating
     * @param string $comment
     * @return bool
     */
    private function isValidInput($userId, $productName, $rating, $comment)
    {
        // Basic validation - expand as needed
        if (empty($userId) || empty($productName) || empty($rating) || empty($comment)) {
            return false;
        }

        if (!is_numeric($rating)) {
            return false;
        }

        if ($rating < 1 || $rating > 5) {
            return false;
        }

        // You could add more robust validation here, such as:
        // - Checking if the user ID exists in a users table.
        // - Limiting the length of the comment.
        return true;
    }
}


// Example Usage (Assuming you have a database connection $db)
// (This is just a demonstration, replace with your actual database setup)

// Simulate a database connection (replace with your actual connection)
class MockDB {
    public function prepare($sql) {
        // Simulate a prepared statement
        return new MockStatement($sql);
    }

    public function execute() {} // Dummy implementation
}

class MockStatement {
    private $sql;
    public function __construct($sql) {
        $this->sql = $sql;
    }

    public function bindParam($name, $value) {
        // Do nothing for demonstration purposes
    }

    public function execute() {
        // Simulate success
    }
}


$db = new MockDB();
$reviews = new UserReview($db);

// Add a review
$userId = 123;
$productName = 'Awesome Gadget';
$rating = 5;
$comment = 'This gadget is fantastic! Highly recommended.';

if ($reviews->addReview($userId, $productName, $rating, $comment)) {
    echo "Review added successfully!
";
} else {
    echo "Failed to add review.
";
}

// Get reviews for the product
$reviewsForGadget = $reviews->getReviewsByProduct($productName);

echo "Reviews for " . $productName . ":
";
if (empty($reviewsForGadget)) {
    echo "No reviews found.
";
} else {
    foreach ($reviewsForGadget as $review) {
        echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and saves it to a database.
 * It also handles some basic validation and formatting.
 *
 * @param string $username    The username of the reviewer.
 * @param string $review_text The review text provided by the user.
 * @param int    $product_id  The ID of the product being reviewed.
 * @param PDO   $pdo        The PDO database connection object.
 *
 * @return bool True on success, false on failure.
 */
function saveUserReview(string $username, string $review_text, int $product_id, PDO $pdo): bool
{
    // Basic Validation
    if (empty($username) || empty($review_text) || $product_id <= 0) {
        error_log("Invalid review data received. Username: " . $username . ", Review: " . $review_text . ", Product ID: " . $product_id);
        return false;
    }

    // Sanitize Review Text (Important for Security)
    $review_text = trim($review_text); // Remove leading/trailing whitespace
    $review_text = htmlspecialchars($review_text, ENT_QUOTES, 'UTF-8'); // Escape special characters

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (user_name, review_text, product_id) VALUES (:username, :review_text, :product_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':product_id', $product_id);

    // Execute the statement
    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error saving review: " . $stmt->errorInfo()[2]);  // Log the specific error
        return false;
    }
}

// Example Usage (Illustrative - Replace with your actual database setup)

// Assuming you have a PDO connection object named $pdo

// Example product ID
$product_id = 123;

// Example user review
$username = "JohnDoe";
$review_text = "This product is amazing!  I really enjoyed it.";

// Save the review
if (saveUserReview($username, $review_text, $product_id, $pdo)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.  Check the logs for details.";
}



// --------------------  Database Setup (Illustrative) --------------------
// Replace this with your actual database configuration
$host = 'localhost';
$db_name = 'your_database_name';
$username = 'your_db_user';
$password = 'your_db_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
    echo "Connected to database successfully!";

} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
    exit();
}


?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $reviewId (optional) - Unique identifier for the review.  If not provided, will be generated.
   * @param int $userId  - ID of the user submitting the review.
   * @param int $productId - ID of the product being reviewed.
   * @param int $rating   - Rating from 1 to 5.
   * @param string $comment - User's comment on the product.
   */
  public function __construct(
    int $reviewId = null,
    int $userId,
    int $productId,
    int $rating,
    string $comment
  ) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Timestamp of the review
  }

  /**
   * Getters
   */
  public function getReviewId(): int
  {
    return $this->reviewId;
  }

  public function getUserId(): int
  {
    return $this->userId;
  }

  public function getProductId(): int
  {
    return $this->productId;
  }

  public function getRating(): int
  {
    return $this->rating;
  }

  public function getComment(): string
  {
    return $this->comment;
  }

  public function getDate(): string
  {
    return $this->date;
  }


  /**
   *  Method to represent the review as an array for easy output.
   *  Useful for JSON encoding or displaying on a webpage.
   *
   * @return array
   */
  public function toArray(): array
  {
    return [
      'review_id' => $this->getReviewId(),
      'user_id' => $this->getUserId(),
      'product_id' => $this->getProductId(),
      'rating' => $this->getRating(),
      'comment' => $this->getComment(),
      'date' => $this->getDate(),
    ];
  }
}


/**
 * User Review Review Function (Example Usage)
 */
function reviewProduct($userId, $productId, $rating, $comment) {
  $review = new UserReview($userId, $productId, $rating, $comment);
  // You can now save this review to a database or perform other actions.
  // For this example, we'll just print the review information.

  echo "Review Details:
";
  echo "Review ID: " . $review->getReviewId() . "
";
  echo "User ID: " . $review->getUserId() . "
";
  echo "Product ID: " . $review->getProductId() . "
";
  echo "Rating: " . $review->getRating() . "
";
  echo "Comment: " . $review->getComment() . "
";
  echo "Date: " . $review->getDate() . "
";
  echo "
";
}



// Example Usage:
reviewProduct(123, 456, 5, "Great product!  I love it!"); // Example 1
reviewProduct(789, 101, 4, "Pretty good, but could be better."); // Example 2
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides basic data validation and error handling.
 *
 * @param string $review_text The text of the review.
 * @param int $product_id The ID of the product the review is for.
 * @param int $user_id The ID of the user writing the review.
 * @param int $rating The rating of the review (1-5).
 * @param int $timestamp  Timestamp of the review creation (optional - defaults to current time)
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'review_id': The ID of the newly created review (if successful).
 *
 */
function createOrUpdateReview(string $review_text, int $product_id, int $user_id, int $rating, int $timestamp = time()) {

  // Validate inputs - Simple example, add more robust validation as needed
  if (empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review_id' => null
    ];
  }

  if ($rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Rating must be between 1 and 5.',
      'review_id' => null
    ];
  }

  // **Database Interaction (Replace with your database logic)**
  // This is a placeholder, adapt to your database system (MySQL, PostgreSQL, etc.)

  try {
    // Example using a dummy database:
    $db = new PDO("mysql:host=localhost;dbname=reviews", "user", "password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);


    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text, created_at) VALUES (:product_id, :user_id, :rating, :review_text, :created_at)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':created_at', $timestamp);

    $stmt->execute();
    $review_id = $db->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id
    ];
  } catch (PDOException $e) {
    // Handle database errors here (logging, user-friendly message)
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage(),
      'review_id' => null
    ];
  }
}

// Example Usage:
$review_result = createOrUpdateReview("This product is amazing!", 123, 45, 5);

if ($review_result['success']) {
  echo "Review created successfully! ID: " . $review_result['review_id'] . "
";
} else {
  echo "Error creating review: " . $review_result['message'] . "
";
}
?>


<?php

/**
 * Function to handle user reviews.
 *
 * @param array $reviews An array of review objects. Each review object should have the following properties:
 *   - id: (int) - Unique identifier for the review.
 *   - user: (string) - User's name or ID.
 *   - rating: (int) - Rating from 1 to 5.
 *   - comment: (string) - User's review comment.
 *   - date: (string) - Timestamp of the review (e.g., Y-m-d H:i:s).
 *
 * @return array An array of formatted reviews.
 */
function handleUserReviews(array $reviews): array
{
    $formattedReviews = [];

    foreach ($reviews as $review) {
        $formattedReview = [
            'id' => $review['id'],
            'user' => $review['user'],
            'rating' => $review['rating'],
            'comment' => $review['comment'],
            'date' => date('Y-m-d H:i:s', strtotime($review['date'])), // Format the date
        ];
        $formattedReviews[] = $formattedReview;
    }

    return $formattedReviews;
}

// Example Usage:
// Simulate some sample reviews
$reviews = [
    [
        'id' => 1,
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'Excellent product! Highly recommend.',
        'date' => '2023-10-26 10:00:00',
    ],
    [
        'id' => 2,
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Good product, but could be improved.',
        'date' => '2023-10-27 14:30:00',
    ],
    [
        'id' => 3,
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It\'s okay.  Not what I expected.',
        'date' => '2023-10-28 08:15:00',
    ],
];

$formattedReviews = handleUserReviews($reviews);

// Print the formatted reviews (for demonstration)
echo "<pre>";
print_r($formattedReviews);
echo "</pre>";

?>


<?php

/**
 * User Review Function
 * 
 * This function allows you to process user-submitted reviews.
 * It includes input validation, sanitization, and storage logic.
 * 
 * @param string $name The user's name.
 * @param string $comment The user's review comment.
 * @param string $rating The user's rating (e.g., 1-5).
 * @param string $item_id (Optional) The ID of the item the review is for.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $name, string $comment, string $rating, string $item_id = "") {
    // 1. Input Validation and Sanitization
    $name = sanitizeString($name); // Use a function to sanitize
    $comment = sanitizeString($comment);
    $rating = intval($rating); // Convert rating to an integer

    if (empty($name) || empty($comment) || $rating <= 0 || $rating > 5) {
        error_log("Invalid review data: " . print_r($_POST, true)); // Log the entire POST data for debugging
        return false;
    }

    // 2. Data Preparation
    $review_data = [
        'name' => $name,
        'comment' => $comment,
        'rating' => $rating,
        'item_id' => $item_id,
        'timestamp' => date("Y-m-d H:i:s") // Add a timestamp for record keeping
    ];

    // 3. Storage (Example: Using a simple file)
    $filename = "reviews.txt";
    $review_string = json_encode($review_data) . "
";

    if (file_put_contents($filename, $review_string, FILE_APPEND) !== false) {
        return true;
    } else {
        error_log("Failed to save review to file: " . $filename);
        return false;
    }

    // **Alternative:  Storing in a database (Recommended for production)**
    //  You would typically connect to your database (MySQL, PostgreSQL, etc.)
    //  and use prepared statements to prevent SQL injection vulnerabilities.
    //  Example (Conceptual - Requires database connection setup):
    //
    //  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
    //  $stmt = $db->prepare("INSERT INTO reviews (name, comment, rating, item_id, timestamp) VALUES (?, ?, ?, ?, ?)");
    //  $stmt->bind_param("sss", $name, $comment, $rating, $item_id);
    //  $stmt->execute();
    //  $stmt->close();
    //  return true;
}



/**
 * Sanitize String Function
 * 
 * Simple function to sanitize a string.
 *  (More robust sanitization is often needed in real-world scenarios)
 *
 * @param string $string The string to sanitize.
 * @return string The sanitized string.
 */
function sanitizeString(string $string): string {
    //Remove HTML tags
    $string = strip_tags($string);
    // Remove unwanted characters (example - customize this as needed)
    $string = str_replace([';', ':', '-', '_'], '', $string);
    return trim($string); //Trim leading/trailing whitespace
}

// Example Usage:
// Simulate receiving the review data from a form submission.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = $_POST["name"];
    $comment = $_POST["comment"];
    $rating = $_POST["rating"];
    $item_id = $_POST["item_id"]; //Optional
    
    if (saveUserReview($name, $comment, $rating, $item_id)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}
?>

<!-- HTML Form for Submitting Reviews -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required><br><br>

    <label for="comment">Review:</label><br>
    <textarea id="comment" name="comment" rows="4" cols="50" required></textarea><br><br>

    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

    <label for="item_id">Item ID (Optional):</label>
    <input type="text" id="item_id" name="item_id"><br><br>

    <input type="submit" value="Submit Review">
</form>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's written review comment.
 * @param int $reviewId (Optional) The ID of the review to update or delete. If not provided, a new review is created.
 *
 * @return array An array containing:
 *   - 'success': true if the operation was successful, false otherwise.
 *   - 'message': A message describing the result of the operation.
 *   - 'reviewId': The ID of the newly created or updated review.
 */
function create_review(string $productId, string $userId, string $rating, string $comment, int $reviewId = 0) {
  // **Validation (IMPORTANT)** -  Add more robust validation here!
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => 0];
  }
  if (empty($userId)) {
    return ['success' => false, 'message' => 'User ID cannot be empty.', 'reviewId' => 0];
  }
  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.', 'reviewId' => 0];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.', 'reviewId' => 0];
  }

  // Ensure Rating is an integer between 1 and 5.  This is crucial.
  $rating = intval($rating); // Convert to integer
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'reviewId' => 0];
  }



  // **Database Interaction - Replace with your database connection logic**
  // This is a placeholder.  You'll need to replace this with
  // your actual database connection and query logic.

  // Example using a hypothetical database connection:
  $db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

  try {
    $stmt = $db->prepare(
      "INSERT INTO reviews (productId, userId, rating, comment) VALUES (?, ?, ?, ?)"
    );
    $stmt->execute([$productId, $userId, $rating, $comment]);

    $reviewId = $db->lastInsertId(); // Get the ID of the newly inserted row

    return ['success' => true, 'message' => 'Review created successfully.', 'reviewId' => $reviewId];

  } catch (PDOException $e) {
    // Handle database errors appropriately (logging, etc.)
    return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'reviewId' => 0];
  }
}


/**
 * Example Usage:
 */
// Create a new review
$result = create_review("123", "user123", "5", "Great product! Highly recommended.");
print_r($result);

// Update an existing review (assuming $reviewId = 1)
$result = create_review("456", "user456", "4", "Good, but could be better.", 1);
print_r($result);

// Error handling examples:
$result = create_review("", "user1", "3", "Review", 2); // Empty Product ID
print_r($result);
?>


<?php

/**
 * User Review Function
 *
 * This function creates a review object from user input and allows for
 * basic validation and sanitization.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|false  An array containing the review data, or false on error.
 */
function createReview($username, $rating, $comment)
{
    // Input Validation and Sanitization
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");  // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }

    // Sanitize inputs to prevent XSS attacks
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);


    // Create the review data array
    $review = [
        'username' => $username,
        'rating' => (int)$rating, // Convert rating to integer
        'comment' => $comment
    ];

    return $review;
}

// Example Usage:
$reviewData = createReview("JohnDoe", 4, "Great product, highly recommend!");

if ($reviewData) {
    echo "Review Created Successfully:
";
    print_r($reviewData);
} else {
    echo "Error creating review. Check logs for details.
";
}


// Example showing an error case:
$badReview = createReview("", 3, "This is bad!");
if ($badReview) {
  echo "This shouldn't print.
";
} else {
   echo "Error case handled correctly.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating A rating from 1 to 5.
 * @param string $comment The user's written review.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(string $productName, string $userId, string $rating, string $comment) {
  // Basic validation - add more robust validation as needed
  if (empty($productName) || empty($userId) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review."); // Log the error for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Invalid rating. Rating must be a number between 1 and 5.");
    return false;
  }

  // Simulate saving to a database (replace with your actual database interaction)
  $review = [
    'product_name' => $productName,
    'user_id' => $userId,
    'rating' => $rating,
    'comment' => $comment,
    'date_created' => date("Y-m-d H:i:s") // Add a timestamp for organization
  ];

  // Save to database (example - adapt to your database setup)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database details

  try {
    $stmt = $db->prepare("INSERT INTO reviews (product_name, user_id, rating, comment, date_created) VALUES (:product_name, :user_id, :rating, :comment, :date_created)");
    $stmt->bindParam(':product_name', $review['product_name']);
    $stmt->bindParam(':user_id', $review['user_id']);
    $stmt->bindParam(':rating', $review['rating']);
    $stmt->bindParam(':comment', $review['comment']);
    $stmt->bindParam(':date_created', $review['date_created']);
    $stmt->execute();

    return true; // Successfully saved
  } catch (PDOException $e) {
    error_log("Error saving review: " . $e->getMessage()); // Log the error for debugging
    return false; // Error saving
  }
}

/**
 * Display User Reviews for a Product
 *
 * Fetches and displays reviews for a given product.
 *
 * @param string $productName The name of the product.
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function displayUserReviews(string $productName) {
  // Example using a simulated database. Replace with your database query.
  // This is just for demonstration.

  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database details
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_name = :product_name");
  $stmt->bindParam(':product_name', $productName);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_OBJ);
  return $reviews;
}

// Example Usage (Illustrative - adapt to your application)
// You'll need to implement your own form and display logic

// Save a review
if (saveUserReview('Awesome Widget', 'user123', 4, 'Great product!  Highly recommended.') === true) {
  echo "<p>Review saved successfully!</p>";
} else {
  echo "<p>Error saving review.</p>";
}

// Display reviews for 'Awesome Widget'
$reviews = displayUserReviews('Awesome Widget');

if (count($reviews) > 0) {
  echo "<h3>Reviews for Awesome Widget:</h3>";
  foreach ($reviews as $review) {
    echo "<p><strong>Rating:</strong> " . $review->rating . "<br>";
    echo "<strong>Comment:</strong> " . $review->comment . "<br>";
    echo "<strong>User:</strong> " . $review->user_id . "</p>";
  }
} else {
  echo "<p>No reviews found for this product.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, a user ID, a rating (1-5), and a review text, 
 * and adds a new review to a database table.
 *
 * @param int    $product_id   The ID of the product being reviewed.
 * @param int    $user_id      The ID of the user submitting the review.
 * @param int    $rating       The rating given by the user (1-5).
 * @param string $review_text  The text of the review.
 * @return bool   True if the review was successfully added, false otherwise.
 */
function add_user_review(int $product_id, int $user_id, int $rating, string $review_text): bool
{
    // Database connection details (replace with your actual values)
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);

        // Set PDO error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (?, ?, ?, ?)");

        // Bind parameters to the statement
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $review_text);

        // Execute the statement
        $stmt->execute();

        // Return true if successful
        return true;

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}


/**
 *  Example Usage (Demonstration - not part of the core function)
 */

// Example product ID
$product_id = 123;

// Example user ID (replace with an actual user ID)
$user_id = 456;

// Example rating
$rating = 5;

// Example review text
$review_text = "This product is amazing! I highly recommend it.";

// Add the review
if (add_user_review($product_id, $user_id, $rating, $review_text)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}



//  Example of getting reviews for a product (Illustrative - Requires a SELECT query)
// This part is not part of the add_user_review function, but demonstrates how you might retrieve them.

/*
function get_product_reviews(int $product_id)
{
    // ... (SQL SELECT query to retrieve reviews for the product)
    // ...
}
*/
?>


<?php

/**
 *  User Review Function
 *
 *  This function handles the creation, retrieval, and basic display of user reviews.
 *
 *  @param string $productName - The name of the product being reviewed.
 *  @param string $userId - The ID of the user submitting the review.
 *  @param string $reviewText - The user's review text.
 *  @param int $rating - The user's rating (1-5).
 *
 *  @return array|string -  An array containing the review details, or an error message.
 */
function createReview(string $productName, string $userId, string $reviewText, int $rating): array|string
{
    // Input Validation -  Important for security and data integrity
    if (empty($productName)) {
        return "Error: Product name cannot be empty.";
    }
    if (empty($userId)) {
        return "Error: User ID cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }


    //  Simulate Saving the Review to a Database (Replace with your database logic)
    //  In a real application, you'd use a database connection here.
    $review = [
        'product_name' => $productName,
        'user_id' => $userId,
        'review_text' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    //  Example: Store the review in an array (replace with database storage)
    //  In a real application, you'd add this review to your database.

    //  For demonstration purposes, let's store in an array.
    //  Consider using session storage or caching for larger applications.

    // Return the review details
    return $review;
}


/**
 * Retrieves reviews for a specific product.
 *
 * @param string $productName - The name of the product to search for.
 * @return array|string -  An array of review objects, or an error message.
 */
function getReviewsForProduct(string $productName): array|string {
    // Placeholder: This would fetch reviews from a database
    // Based on the product name.

    // Example for demonstration:
    if ($productName === 'Awesome Gadget') {
        return [
            [
                'product_name' => 'Awesome Gadget',
                'user_id' => 'user123',
                'review_text' => 'Great product!  Easy to use.',
                'rating' => 5,
                'timestamp' => time()
            ],
            [
                'product_name' => 'Awesome Gadget',
                'user_id' => 'user456',
                'review_text' => 'Pretty good, but could be better.',
                'rating' => 3,
                'timestamp' => time()
            ]
        ];
    } else {
        return "Error: No reviews found for product: " . $productName;
    }
}


// Example Usage:
$product = 'Awesome Gadget';
$userId = 'user123';
$reviewText = 'This gadget is amazing!  Highly recommended.';
$rating = 5;

$newReview = createReview($product, $userId, $reviewText, $rating);

if (is_array($newReview)) {
    echo "New Review Created: 
";
    print_r($newReview);

    // Retrieve reviews for the product
    $reviews = getReviewsForProduct($product);

    if (is_array($reviews)) {
        echo "
Reviews for " . $product . ":
";
        print_r($reviews);
    } else {
        echo "
Error retrieving reviews.
";
    }
} else {
    echo $newReview . "
"; // Display the error message
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating    (Optional) The rating given by the user (1-5). Defaults to 0.
 * @param string $timestamp (Optional)  Timestamp for the review. Defaults to current time.
 *
 * @return bool True on successful review creation, false on failure.
 */
function create_review(string $item_id, string $user_name, string $review_text, int $rating = 0, string $timestamp = null)
{
  // Validate inputs (important for security and data integrity)
  if (empty($item_id) || empty($user_name) || empty($review_text)) {
    error_log("Missing required fields in review creation.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Invalid rating value.  Rating must be between 1 and 5.");
    return false;
  }

  // --- Data Validation ---
  // Add more robust validation here if needed.  Examples:
  // - Sanitize $review_text to prevent XSS attacks.
  // - Validate the $timestamp format if you're using it.

  // --- Database Interaction (Example - adjust to your database setup) ---
  try {
    // Assume you have a database connection established (e.g., $db)
    // and a 'reviews' table with columns: item_id, user_name, review_text, rating, timestamp

    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your credentials
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For better error handling

    $stmt = $db->prepare("INSERT INTO reviews (item_id, user_name, review_text, rating, timestamp) 
                         VALUES (:item_id, :user_name, :review_text, :rating, :timestamp)");

    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    if($timestamp === null){
        $stmt->bindParam(':timestamp', time()); // Use current timestamp
    } else {
        $stmt->bindParam(':timestamp', $timestamp);
    }


    $result = $stmt->execute();

    if ($result) {
      return true;
    } else {
      error_log("Failed to create review: " . print_r($stmt->errorInfo(), true)); // Log the error
      return false;
    }

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// --- Example Usage ---

// Create a review
if (create_review("product123", "John Doe", "Great product!  Highly recommended.", 5)) {
  echo "Review created successfully!";
} else {
  echo "Failed to create review.";
}

// Create a review with a timestamp
$timestamp = time() - 3600; // One hour ago
if (create_review("product456", "Jane Smith", "Okay, but could be better", 3, $timestamp)) {
    echo "
Review with timestamp created successfully!";
} else {
    echo "
Failed to create review with timestamp.";
}


// Display Reviews (Example - adjust to your display logic)
function display_reviews(string $item_id) {
    // Example - Fetch reviews from the database based on $item_id
    // This is just a placeholder - you'll need to adapt this to your database query
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your credentials
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $stmt = $db->prepare("SELECT item_id, user_name, review_text, rating, timestamp FROM reviews WHERE item_id = :item_id");
    $stmt->bindParam(':item_id', $item_id);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    if (count($reviews) > 0) {
        echo "<h2>Reviews for " . $item_id . "</h2>";
        foreach ($reviews as $review) {
            echo "<p><strong>User:</strong> " . $review['user_name'] . "</p>";
            echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
            echo "<p>" . $review['review_text'] . "</p>";
            echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
            echo "<br>";
        }
    } else {
        echo "<p>No reviews found for this item.</p>";
    }
}

// Example of displaying reviews:
display_reviews("product123");
?>


<?php

/**
 * User Review Class
 * 
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $reviewId;
    private $productId; // The ID of the product being reviewed
    private $userId;
    private $rating;
    private $comment;
    private $date;


    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     * 
     * @param int $productId The ID of the product being reviewed.
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     */
    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s');  // Set the review date and time
    }

    /**
     * Getters for the review attributes.
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Display the review in a formatted string.
     *
     * @return string The review displayed.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
Product ID: " . $this->getProductId() .
               "
User ID: " . $this->getUserId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}

/**
 * User Review Function
 *
 * This function demonstrates how to create and display user reviews.
 */
function displayUserReviews() {

    // Example:  Let's create some reviews
    $review1 = new UserReview(123, 45, 5, "Great product!  Highly recommend.");
    $reviewId1 = $review1->getReviewId();
    $review1->displayReview();
    echo "
";

    $review2 = new UserReview(456, 78, 4, "Good value for the price.");
    $reviewId2 = $review2->getReviewId();
    $review2->displayReview();
    echo "
";

    $review3 = new UserReview(123, 90, 3, "Could be better, but decent.");
    $reviewId3 = $review3->getReviewId();
    $review3->displayReview();
    echo "
";

}

// Call the function to display the reviews
displayUserReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews
 * for a given product or item.
 *
 * @param string $productId The ID of the product/item the review is for.
 * @param string $username The username of the user writing the review.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @param array  $db_connection A database connection object. (Required)
 *
 * @return array An array containing success or error messages.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment, array $db_connection)
{
  // Input validation - Basic example, expand this for production
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return ['success' => false, 'message' => 'All fields are required.'];
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  // Sanitize input -  Very important for security
  $productId = mysqli_real_escape_string($db_connection, $productId);
  $username = mysqli_real_escape_string($db_connection, $username);
  $rating   = mysqli_real_escape_string($db_connection, $rating);
  $comment  = mysqli_real_escape_string($db_connection, $comment);



  // SQL Query -  Use prepared statements for security!  (Example - adapt for your table structure)
  $sql = "INSERT INTO reviews (product_id, user_name, rating, comment)
          VALUES ('$productId', '$username', '$rating', '$comment')";

  $result = mysqli_query($db_connection, $sql);


  if ($result) {
    return ['success' => true, 'message' => 'Review created successfully!'];
  } else {
    return ['success' => false, 'message' => 'Error creating review: ' . mysqli_error($db_connection)];
  }
}

/**
 * Example usage (Illustrative - needs connection setup)
 */

// Simulated database connection (replace with your actual connection)
//$db = new mysqli('localhost', 'username', 'password', 'database_name');
//if ($db->connect_error) {
//    die("Connection failed: " . $db->connect_error);
//}

// Sample Data
//$productId = '123';
//$username = 'john.doe';
//$rating = '4';
//$comment = 'Great product, highly recommended!';

// Create the review
//$review_result = create_user_review($productId, $username, $rating, $comment, $db);

// Display the result
//if ($review_result['success']) {
//  echo "Review created: " . $review_result['message'] . "
";
//} else {
//  echo "Error: " . $review_result['message'] . "
";
//}

// Close the connection - always a good practice.
// $db->close();



/**
 *  Functions for Read, Update, and Delete Reviews (Conceptual -  Adapt to your needs)
 */

/**
 * Read Reviews for a Product
 * @param string $productId
 * @param array $db_connection
 * @return array
 */
function read_reviews(string $productId, array $db_connection) {
  // Implementation to query the database and return the reviews.
  // This is just a placeholder -  You need to build this.
  return ['success' => true, 'reviews' => []]; // Return an empty array of reviews
}


/**
 * Update a Review (Conceptual)
 * @param string $reviewId The ID of the review to update.
 * @param array $db_connection
 * @return array
 */
function update_review(string $reviewId, $data, array $db_connection) {
  // Implementation to update the review.
  return ['success' => true, 'message' => 'Review updated successfully'];
}


/**
 * Delete a Review (Conceptual)
 * @param string $reviewId The ID of the review to delete.
 * @param array $db_connection
 * @return array
 */
function delete_review(string $reviewId, array $db_connection) {
  // Implementation to delete the review from the database.
  return ['success' => true, 'message' => 'Review deleted successfully'];
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic data validation and error handling.
 *
 * @param string $review_text The review text submitted by the user.
 * @param int    $product_id  The ID of the product the review is for.
 * @param int    $user_id     The ID of the user submitting the review (optional, for authentication).
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 *
 * @return array An array containing the result of the operation:
 *              - 'success' => true if the operation was successful, false otherwise.
 *              - 'message' => A message describing the result (e.g., "Review created successfully", "Error saving review").
 *              - 'review_id' => The ID of the newly created review (if successful).
 *              - 'review' => The review object (if successful).
 */
function create_review(string $review_text, int $product_id, int $user_id = null, int $rating = null)
{
  // **Input Validation**
  if (empty($review_text)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review_id' => null,
      'review' => null
    ];
  }

  if (!is_numeric($product_id)) {
    return [
      'success' => false,
      'message' => 'Invalid product ID.',
      'review_id' => null,
      'review' => null
    ];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => 'Invalid rating. Rating must be between 1 and 5.',
      'review_id' => null,
      'review' => null
    ];
  }


  // **Database Interaction (Replace with your actual database connection)**
  // This is a simplified example using a placeholder database connection.
  // In a real application, you'd use PDO, MySQLi, or a similar mechanism.
  $db_host = 'localhost';
  $db_name = 'your_database_name';
  $db_user = 'your_username';
  $db_password = 'your_password';

  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Database connection error: ' . $e->getMessage(),
      'review_id' => null,
      'review' => null
    ];
  }

  // Prepare the SQL statement
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";

  // Prepare the statement
  $stmt = $pdo->prepare($sql);

  // Bind the parameters
  $stmt->bindParam(':product_id', $product_id);
  if ($user_id) {
    $stmt->bindParam(':user_id', $user_id);
  }
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_text', $review_text);

  // Execute the statement
  $stmt->execute();

  // Get the last inserted ID
  $review_id = $pdo->lastInsertId();

  // Close the statement and connection
  $stmt = null;
  $pdo = null;


  return [
    'success' => true,
    'message' => 'Review created successfully.',
    'review_id' => $review_id,
    'review' => [
      'product_id' => $product_id,
      'user_id' => $user_id,
      'rating' => $rating,
      'review_text' => $review_text,
      'id' => $review_id
    ]
  ];
}


// **Example Usage**
// Simulate a review submission

// Create a review
$review_result = create_review('This product is amazing!', 123, 12, 5);

if ($review_result['success']) {
  echo "Review created successfully. Review ID: " . $review_result['review_id'] . "<br>";
  print_r($review_result['review']);  // Prints the review details
} else {
  echo "Error creating review: " . $review_result['message'] . "<br>";
}


//  Example demonstrating error handling
$review_result = create_review('', 456, 78, 3);
if ($review_result['success']) {
    echo "Review created successfully. Review ID: " . $review_result['review_id'] . "<br>";
} else {
    echo "Error creating review: " . $review_result['message'] . "<br>";
}
?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool
    {
        // Validation: Check rating range
        if (!preg_match('/^[1-5]$/', $rating)) {
            return false;
        }

        // Create review object
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp for date
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     *
     * @return array An array of review objects for the product.  Returns an empty array if no reviews exist.
     */
    public function getReviewsByProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }

    /**
     * Retrieves a single review by product ID and username.
     *
     * @param int $productId The ID of the product.
     * @param string $username The username of the reviewer.
     *
     * @return array|null An array containing the review object, or null if not found.
     */
    public function getReviewByProductAndUsername(int $productId, string $username): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['productId'] === $productId && $review['username'] === $username) {
                return [$review];
            }
        }
        return null;
    }

    /**
     * Calculates the average rating for a product.
     *
     * @param int $productId The ID of the product.
     *
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float
    {
        $reviews = $this->getReviewsByProduct($productId);
        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += (float)$review['rating'];
        }

        return round($totalRating / count($reviews), 2); // Round to 2 decimal places
    }


    /**
     * Displays a list of reviews for a product (for demonstration purposes).
     *
     * @param array $reviews  The reviews to display.
     */
    public function displayReviews(array $reviews)
    {
        echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>";
        if (empty($reviews)) {
            echo "<p>No reviews found.</p>";
            return;
        }

        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
            echo "<strong>Date:</strong> " . $review['date'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, "JohnDoe", "5", "Great product! Highly recommended.");
$reviewSystem->addReview(123, "JaneSmith", "4", "Good product, but could be better.");
$reviewSystem->addReview(456, "PeterJones", "3", "It's okay.");

// Get reviews for product ID 123
$reviews = $reviewSystem->getReviewsByProduct(123);
$reviewSystem->displayReviews($reviews);

// Get average rating for product ID 123
$averageRating = $reviewSystem->getAverageRatingForProduct(123);
echo "<br>Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews found.") . "<br>";

// Get a single review
$singleReview = $reviewSystem->getReviewByProductAndUsername(123, "JohnDoe");
if ($singleReview) {
    echo "<br>Single Review: ";
    $reviewSystem->displayReviews($singleReview);
} else {
    echo "<p>Review not found.</p>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * @param int $reviewId (Optional) - Unique ID for the review.  If not provided, a new ID will be generated.
   * @param int $userId  The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating   The rating (e.g., 1-5 stars).
   * @param string $comment The user's review comment.
   */
  public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Set the review date/time
  }

  /**
   * Getters for each property
   *
   * @return mixed
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Sets a property (for update operations)
   *
   * @param string $property The property to update (e.g., 'comment', 'rating')
   * @param mixed $value The new value for the property.
   */
  public function setProperty($property, $value) {
    switch ($property) {
      case 'comment':
        $this->comment = $value;
        break;
      case 'rating':
        $this->rating = $value;
        break;
      // Add more cases for other properties as needed
      default:
        // Handle invalid property names - throw an exception or log an error
        throw new InvalidArgumentException("Invalid property name: " . $property);
    }
  }

  /**
   *  Display the review in a formatted string.
   *
   * @return string  A formatted string representing the review.
   */
  public function __toString() {
    return "Review ID: " . $this->getReviewId() .
           "
User ID: " . $this->getUserId() .
           "
Product ID: " . $this->getProductId() .
           "
Rating: " . $this->getRating() .
           "
Comment: " . $this->getComment() .
           "
Date: " . $this->getDate();
  }
}

/**
 * User Review Review Function
 */
function displayReview(UserReview $review) {
  echo $review; // Use the __toString() method of the UserReview class
}


// Example Usage:
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
displayReview($review1);

echo "
-------------------
";

$review2 = new UserReview(null, 456, 789, 3, "It was okay, but a bit pricey.");
displayReview($review2);

echo "
-------------------
";

$review3 = new UserReview(10, 789, 123, 4, "Excellent value for the money!");
$review3->setProperty("comment", "Updated my comment.");
displayReview($review3); // Show updated comment

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $userId      The ID of the user submitting the review. (Can be user ID, username, etc.)
 * @param string $reviewText  The text of the review.
 * @param array  $reviews     (Optional)  Existing reviews to add to.  Defaults to an empty array.
 *
 * @return array An array containing:
 *   - 'reviews': The updated array of reviews.
 *   - 'success':  True if the review was added successfully, False otherwise.
 *   - 'error':   An error message if the review could not be added.
 */
function create_review(string $productName, string $userId, string $reviewText, array &$reviews = []) {

    // **Validation (Important!)**
    if (empty($reviewText)) {
        return ['reviews' => $reviews, 'success' => false, 'error' => 'Review text cannot be empty.'];
    }

    // **Data Sanitization - VERY IMPORTANT**
    // In a real application, you'd want to sanitize the reviewText more robustly,
    // potentially using htmlspecialchars() or escaping functions appropriate for
    // your database and application.
    $sanitizedReviewText = htmlspecialchars($reviewText); // Simple example - improve for production

    // **Review Data**
    $newReview = [
        'userId' => $userId,
        'reviewText' => $sanitizedReviewText,
        'timestamp' => time() // Use the current timestamp
    ];

    // **Add Review**
    $reviews[] = $newReview;

    return ['reviews' => $reviews, 'success' => true];
}


/**
 * Display User Reviews
 *
 * This function takes an array of reviews and formats them for display.
 *
 * @param array $reviews  An array of review objects.
 *
 * @return string HTML formatted review output.
 */
function display_reviews(array $reviews) {
    $output = "<h2>Reviews for {$reviews[0]['userId']}</h2>"; // Assume first review's user ID is correct for display.

    if (empty($reviews)) {
        $output .= "<p>No reviews yet.</p>";
    } else {
        foreach ($reviews as $review) {
            $output .= "<div class='review'>";
            $output .= "<p><strong>User:</strong> " . htmlspecialchars($review['userId']) . "</p>";  //Escape for display too
            $output .= "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
            $output .= "<p><strong>Date:</strong> " . date('Y-m-d H:i:s', strtotime($review['timestamp'])) . "</p>";
            $output .= "</div>";
        }
    }
    return $output;
}


// **Example Usage:**

// 1.  Create a Review
$product = "Awesome Widget";
$user = "john_doe";
$comment = "This widget is amazing!  I love it!";

$newReviews = create_review($product, $user, $comment);

if ($newReviews['success']) {
    echo "Review created successfully!<br>";
    print_r($newReviews['reviews']); // Print the updated reviews array
} else {
    echo "Error creating review: " . $newReviews['error'] . "<br>";
}

// 2. Display the Reviews
$existingReviews = [
    ['userId' => 'jane_smith', 'reviewText' => 'Good product, but a bit pricey.', 'timestamp' => time() - 3600],
    ['userId' => 'john_doe', 'reviewText' => 'Fantastic!', 'timestamp' => time() - 7200]
];

echo "<hr>";
echo display_reviews($existingReviews);

?>


<?php

/**
 * User Review Class
 */
class UserReview {
  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor for the UserReview class.
   *
   * @param int $reviewId (optional) - Unique identifier for the review.  Defaults to 0.
   * @param int $userId The ID of the user who wrote the review.
   * @param int $productId The ID of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $comment The user's comment about the product.
   * @param string $date The date the review was submitted (YYYY-MM-DD format).
   */
  public function __construct($reviewId = 0, $userId, $productId, $rating, $comment, $date) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = $date;
  }

  /**
   * Getters for each attribute.
   *
   * @return mixed
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   *  Validation function -  Basic validation.  Extend as needed.
   *
   * @return bool True if valid, false otherwise.
   */
  public function isValid() {
    // Basic validation: Rating should be between 1 and 5
    if ($this->rating < 1 || $this->rating > 5) {
      return false;
    }
    // Add more validation as needed (e.g., comment length, date format)
    return true;
  }
}


/**
 * User Review Review Function
 */
function reviewReview(UserReview $review) {
  // This is a simple review function.  You'll likely want to
  // integrate this with a database, display it on a page,
  // or perform other actions.

  if ($review->isValid()) {
    echo "Review ID: " . $review->getReviewId() . "<br>";
    echo "User ID: " . $review->getUserId() . "<br>";
    echo "Product ID: " . $review->getProductId() . "<br>";
    echo "Rating: " . $review->getRating() . "<br>";
    echo "Comment: " . $review->getComment() . "<br>";
    echo "Date: " . $review->getDate() . "<br>";
    echo "<br>";
  } else {
    echo "Invalid Review Data.  Please check the rating and comment.<br>";
  }
}



// Example Usage:
$review1 = new UserReview(1, 123, 456, 5, "Great product!", "2023-10-27");
reviewReview($review1);

$review2 = new UserReview(2, 456, 789, 2, "It's okay, but...", "2023-10-26");
reviewReview($review2);

$review3 = new UserReview(3, 789, 101, 6, "Excellent!", "2023-10-27"); // Invalid rating
reviewReview($review3);
?>


<?php

/**
 * User Review Function
 *
 * This function takes a user's review and associated data (like product ID, rating, etc.)
 * and stores it in a database.
 *
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the user's review.
 * @param int $rating       The user's rating (e.g., 1-5).
 * @param string $userId     (Optional) The ID of the user leaving the review.
 * @param array  $extraData  (Optional)  Any other relevant data to store with the review.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveUserReview(
    int $productId,
    string $reviewText,
    int $rating,
    string $userId = null,
    array $extraData = []
) {
    // **IMPORTANT:  Replace this with your actual database connection and query logic**
    // This is a placeholder example.

    // Database connection (Replace with your connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // 1. Sanitize input data - VERY IMPORTANT to prevent SQL injection
        $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
        $reviewText = htmlspecialchars($reviewText); // Escape HTML entities
        $rating = intval($rating); // Ensure rating is an integer

        // 2. Build the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, review_text, rating, created_at) VALUES (:product_id, :user_id, :review_text, :rating, NOW())";

        // 3. Prepare the statement
        $stmt = $db->prepare($sql);

        // 4. Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        if ($userId) {
            $stmt->bindParam(':user_id', $userId);
        }
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        // 5. Execute the statement
        $result = $stmt->execute();

        // 6. Check for success
        if ($result) {
            return true;
        } else {
            // Log the error for debugging.  Very important!
            error_log("Error saving review: " . $db->errorInfo()[2]);
            return false;
        }

    } catch (PDOException $e) {
        // Handle database connection errors
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


// **Example Usage:**

// Let's assume a product ID of 123 and a user ID of 456 (if available)
$productId = 123;
$reviewText = "This product is amazing!  It exceeded my expectations.";
$rating = 5;
$userId = 456;  // Optional user ID

if (saveUserReview($productId, $reviewText, $rating, $userId)) {
    echo "Review successfully saved!";
} else {
    echo "Failed to save review.";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param string $userId (optional) The ID of the user leaving the review.  If not provided, generates a unique ID.
 * @return array|string  An array containing the review data (review_id, product_name, review_text, user_id, date) if successful, or an error message string if there's an issue.
 */
function storeUserReview(string $productName, string $reviewText, string $userId = null) {
  // Input Validation - Basic checks
  if (empty($productName)) {
    return "Error: Product name cannot be empty.";
  }
  if (empty($reviewText)) {
    return "Error: Review text cannot be empty.";
  }

  // Sanitize Input (more robust sanitization is recommended for production)
  $productName = htmlspecialchars($productName);
  $reviewText = htmlspecialchars($reviewText);

  // Generate unique User ID if not provided
  if ($userId === null || empty($userId)) {
    $userId = uniqid(); // Generate a unique ID
  }

  // Get Current Timestamp
  $timestamp = date('Y-m-d H:i:s');

  // Prepare Data for Storage (Replace this with your database interaction)
  $reviewData = [
    'review_id' => $userId, // Using the ID as review_id for simplicity
    'product_name' => $productName,
    'review_text' => $reviewText,
    'user_id' => $userId,
    'date' => $timestamp,
  ];

  // Simulate Database Storage - Replace with your actual database code
  // Example using an associative array:
  //  $reviews = loadReviewsFromDatabase(); // Replace with your DB function
  //  $reviews[] = $reviewData;
  //  saveReviewsToDatabase($reviews);

  // Simulate Successful Storage
  return $reviewData;
}


/**
 * Example Usage:
 */

// Store a review
$review = storeUserReview("Awesome Widget", "This widget is fantastic! I highly recommend it.");
if (is_array($review)) {
  echo "Review saved successfully:<br>";
  echo "Review ID: " . $review['review_id'] . "<br>";
  echo "Product Name: " . $review['product_name'] . "<br>";
  echo "Review Text: " . $review['review_text'] . "<br>";
  echo "User ID: " . $review['user_id'] . "<br>";
  echo "Date: " . $review['date'] . "<br>";
} else {
  echo "Error: " . $review; // Display the error message
}

// Store a review with a specific user ID (for testing)
$review2 = storeUserReview("Another Great Product", "Great product!", "user123");
if (is_array($review2)) {
    echo "<br>Review 2 saved successfully: <br>";
    echo "Review ID: " . $review2['review_id'] . "<br>";
} else {
    echo "<br>Error: " . $review2;
}


//Example with invalid input
$invalidReview = storeUserReview("", "This is a review.");
echo "<br>Invalid Review: " . $invalidReview;
?>


<?php

// ... (storeUserReview function from above)

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

try {
  $mysqli = new mysqli($host, $username, $password, $database);

  if ($mysqli->connect_error) {
    throw new Exception("Connection failed: " . $mysqli->connect_error);
  }

  // Store the review
  $reviewData = storeUserReview("Awesome Widget", "This widget is fantastic!", "user123");

  if (is_array($reviewData)) {
    $sql = "INSERT INTO reviews (product_name, review_text, user_id, date)
            VALUES ('" . $mysqli->real_escape_string($reviewData['product_name']) . "',
                    '" . $mysqli->real_escape_string($reviewData['review_text']) . "',
                    '" . $mysqli->real_escape_string($reviewData['user_id']) . "',
                    '" . $mysqli->real_escape_string($reviewData['date']) . "')";

    if ($mysqli->query($sql) === TRUE) {
      echo "Review saved successfully!";
    } else {
      echo "Error: " . $sql . "<br>" . $mysqli->error;
    }
  } else {
    echo "Error saving review: " . $reviewData;
  }

  $mysqli->close();

} catch (Exception $e) {
  echo "An error occurred: " . $e->getMessage();
}
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to store and display user reviews for a specific item.
 *
 *  @param string $item_id      The unique identifier of the item being reviewed.
 *  @param string $user_id      The unique identifier of the user writing the review.
 *  @param string $review_text  The text content of the review.
 *  @param int    $rating       The rating given for the item (e.g., 1-5).
 *  @param string $db_connection (Optional) A connection object to a database. If not provided,
 *                                 a dummy connection is created.
 *
 *  @return array  An array containing success/failure status and any relevant message.
 */
function storeUserReview(
    string $item_id,
    string $user_id,
    string $review_text,
    int $rating,
    $db_connection = null
): array {

    $status = 'failed';
    $message = 'Unknown error.';

    // Create a dummy database connection if not provided
    if (!$db_connection) {
        $db_connection = new stdClass(); // Simple object to mimic a connection
        $db_connection->query = function($sql) {
            echo "Executing query: " . $sql . "
"; // Simulate database query
            return true; // Simulate success
        };
    }

    try {
        // 1. Validate Inputs (Add more validation as needed)
        if (empty($item_id) || empty($review_text) || $rating < 1 || $rating > 5) {
            $message = 'Invalid input data.  Item ID, review text, and rating must be provided and rating must be between 1 and 5.';
            return ['status' => 'failed', 'message' => $message];
        }

        // 2. Construct SQL Query
        $sql = "INSERT INTO reviews (item_id, user_id, review_text, rating)
                VALUES ('$item_id', '$user_id', '$review_text', $rating)";

        // 3. Execute Query
        if ($db_connection->query($sql)) {
            $status = 'success';
            $message = 'Review stored successfully.';
        } else {
            $message = 'Error storing review.  Database query failed.';
        }

    } catch (Exception $e) {
        $message = 'Exception occurred: ' . $e->getMessage();
    }

    return ['status' => $status, 'message' => $message];
}


/**
 *  Display User Reviews Function (Example)
 *
 *  This function retrieves and displays reviews for a given item.
 *
 *  @param string $item_id     The ID of the item to retrieve reviews for.
 *  @param int    $limit        The maximum number of reviews to retrieve (optional, default 3).
 *  @param int    $offset       The starting offset for retrieving reviews (optional, default 0).
 *  @param $db_connection     A connection object to a database.
 *
 *  @return array  An array containing the reviews (as an array of associative arrays) or an error message.
 */
function displayUserReviews(string $item_id, int $limit = 3, int $offset = 0, $db_connection = null): array {
    $reviews = [];

    // Create a dummy database connection if not provided
    if (!$db_connection) {
        $db_connection = new stdClass(); // Simple object to mimic a connection
        $db_connection->query = function($sql) {
            echo "Executing query: " . $sql . "
"; // Simulate database query
            return [
                ['item_id', 'user_id', 'review_text', 'rating'],
                ['1', 'user1', 'Great product!', 5],
                ['2', 'user2', 'Good value.', 4],
                ['3', 'user3', 'Could be better.', 3]
            ]; // Simulate a result set
        };
    }

    try {
        $sql = "SELECT item_id, user_id, review_text, rating
                FROM reviews
                WHERE item_id = '$item_id'
                LIMIT $limit
                OFFSET $offset";

        $result = $db_connection->query($sql);

        if ($result) {
            foreach ($result as $row) {
                $reviews[] = [
                    'item_id' => $row['item_id'],
                    'user_id' => $row['user_id'],
                    'review_text' => $row['review_text'],
                    'rating' => $row['rating']
                ];
            }
        }

    } catch (Exception $e) {
        return ['status' => 'failed', 'message' => 'Exception: ' . $e->getMessage()];
    }

    return ['status' => 'success', 'reviews' => $reviews];
}



// --- Example Usage ---
// Simulate a database connection (Replace with your actual connection)
$db_connection = new stdClass();

// Store a review
$result = storeUserReview('product123', 'user1', 'This is a fantastic product!', 4, $db_connection);
print_r($result); // Output the result of storeUserReview

// Display reviews for product123
$review_results = displayUserReviews('product123', 2, 0, $db_connection);
print_r($review_results); // Output the result of displayUserReviews


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array An array containing:
 *   - 'success': True if the review was submitted successfully, false otherwise.
 *   - 'review': The submitted review (if successful).
 *   - 'error': An error message (if applicable).
 */
function submitReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
  // **Input Validation (Crucial!)**
  if (empty($productId)) {
    return ['success' => false, 'review' => null, 'error' => 'Product ID cannot be empty.'];
  }
  if (empty($userName)) {
    return ['success' => false, 'review' => null, 'error' => 'User name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'review' => null, 'error' => 'Review text cannot be empty.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'review' => null, 'error' => 'Rating must be between 1 and 5.'];
  }

  // **Simulating Database Insertion (Replace with your actual database logic)**
  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'submissionDate' => date('Y-m-d H:i:s') // Add a timestamp for tracking
  ];

  // **In a real application, you would insert this $review array into your database.**
  // For example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  // $stmt = $db->prepare("INSERT INTO reviews (productId, userName, reviewText, rating, submissionDate) VALUES (:productId, :userName, :reviewText, :rating, :submissionDate)");
  // $stmt->execute($review);

  // **Simulated Success**
  return ['success' => true, 'review' => $review, 'error' => null];
}

/**
 * Function to Retrieve Reviews for a Product
 *
 * This function retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing:
 *   - 'reviews': An array of review objects (each object has 'userName', 'reviewText', 'rating', 'submissionDate').
 *   - 'error': An error message (if applicable).
 */
function getReviews(string $productId) {
    // **Simulate retrieving reviews from a database**
    // In a real application, you would query your database.

    //Simulated Data
    $reviews = [
        ['productId' => '123', 'userName' => 'Alice', 'reviewText' => 'Great product!', 'rating' => 5, 'submissionDate' => date('Y-m-d H:i:s')],
        ['productId' => '123', 'userName' => 'Bob', 'reviewText' => 'It was okay.', 'rating' => 3, 'submissionDate' => date('Y-m-d H:i:s')],
        ['productId' => '456', 'userName' => 'Charlie', 'reviewText' => 'Amazing!', 'rating' => 5, 'submissionDate' => date('Y-m-d H:i:s')]
    ];

    //Filter Reviews by Product ID (Important for security)
    $filteredReviews = [];
    foreach ($reviews as $review) {
        if ($review['productId'] == $productId) {
            $filteredReviews[] = $review;
        }
    }

    return ['reviews' => $filteredReviews, 'error' => null];
}


// **Example Usage**

// Submit a review
$reviewResult = submitReview('123', 'David', 'Excellent value for money!', 4);

if ($reviewResult['success']) {
  echo "Review submitted successfully:<br>";
  echo "Reviewer: " . $reviewResult['review']['userName'] . "<br>";
  echo "Review: " . $reviewResult['review']['reviewText'] . "<br>";
  echo "Rating: " . $reviewResult['review']['rating'] . "<br>";
} else {
  echo "Error submitting review: " . $reviewResult['error'] . "<br>";
}


// Retrieve reviews for product '123'
$reviewsResult = getReviews('123');

if ($reviewsResult['error'] == null) {
    echo "<h3>Reviews for product 123:</h3>";
    foreach ($reviewsResult['reviews'] as $review) {
        echo "<strong>Reviewer:</strong> " . $review['userName'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['reviewText'] . "<br><br>";
    }
} else {
    echo "Error retrieving reviews: " . $reviewsResult['error'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function handles the creation, retrieval, and updating of user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $userId The ID of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param int $reviewId (Optional) The ID of the review to update. If not provided,
 *                          a new review is created.
 *
 * @return array An array containing the review ID (if a new review was created)
 *               or the updated review ID, or an error message if something went wrong.
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, int $reviewId = 0)
{
    // Input Validation - VERY IMPORTANT
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return ['error' => 'All fields are required.'];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    // Database connection (replace with your actual connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment) 
                ON DUPLICATE KEY UPDATE comment = :comment";

        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Return the review ID if a new review was created, otherwise return the updated ID.
        if ($reviewId == 0) {
            $reviewId = $db->lastInsertId();
            return $reviewId;
        } else {
            return $reviewId;
        }


    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database Error: " . $e->getMessage()); // Log for debugging
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}

// Example Usage:

// Create a new review
$newReviewId = createOrUpdateReview('product123', 'user456', '4', 'Great product!');

if (isset($newReviewId) && $newReviewId > 0) {
    echo "New review created with ID: " . $newReviewId . "<br>";
} else {
    echo "Error creating new review.<br>";
    if (isset($_POST['error'])) {
        echo "Error: " . $_POST['error'] . "<br>";
    }
}

// Update an existing review
$updatedReviewId = createOrUpdateReview('product123', 'user456', '5', 'Even better than I thought!');

if (isset($updatedReviewId)) {
    echo "Review updated with ID: " . $updatedReviewId . "<br>";
} else {
    echo "Error updating review.<br>";
    if (isset($_POST['error'])) {
        echo "Error: " . $_POST['error'] . "<br>";
    }
}

// Example form (for submitting reviews)
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Reviews</title>
</head>
<body>

<h1>Add a Review</h1>

<form method="POST" action="">
    <label for="productId">Product ID:</label>
    <input type="text" id="productId" name="productId" value="product123" required><br><br>

    <label for="userId">User ID:</label>
    <input type="text" id="userId" name="userId" value="user456" required><br><br>

    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

    <label for="comment">Review Comment:</label>
    <textarea id="comment" name="comment" rows="4" cols="50" required></textarea><br><br>

    <button type="submit">Submit Review</button>
</form>

<?php
if (isset($_POST['productId']) && isset($_POST['userId']) && isset($_POST['rating']) && isset($_POST['comment'])) {
    $productId = $_POST['productId'];
    $userId = $_POST['userId'];
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];

    $reviewId = createOrUpdateReview($productId, $userId, $rating, $comment);

    if (isset($reviewId) && $reviewId > 0) {
        echo "<p>Review created successfully with ID: " . $reviewId . "</p>";
    } else {
        echo "<p style='color: red;'>Error creating review: " . $reviewId['error'] . "</p>";
    }
}
?>

</body>
</html>


<?php

/**
 * This class provides functionality for managing user reviews.
 */
class ReviewManager {

    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $user_id The ID of the user submitting the review.
     * @param string $title The title of the review.
     * @param string $comment The content of the review.
     * @param int $rating  The rating given (e.g., 1-5).
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user_id, string $title, string $comment, int $rating) {
        // Validation (basic - you might want more robust validation)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'user_id' => $user_id,
            'title'   => $title,
            'comment' => $comment,
            'rating'  => $rating,
            'date'    => date('Y-m-d H:i:s') // Add timestamp for organization
        ];

        $this->reviews[] = $review;
        return true;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by user ID.
     *
     * @param string $user_id The ID of the user to filter by.
     * @return array An array of reviews for the specified user.
     */
    public function getReviewsByUser(string $user_id) {
        $userReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['user_id'] === $user_id) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }


    /**
     * Retrieves reviews based on a given rating.
     *
     * @param int $rating The rating to filter by.
     * @return array An array of reviews with the specified rating.
     */
    public function getReviewsByRating(int $rating) {
        $filteredReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['rating'] === $rating) {
                $filteredReviews[] = $review;
            }
        }
        return $filteredReviews;
    }
}



/**
 *  Example User Review Function  (Illustrative - This is not a full review system)
 */
function displayUserReviews($reviewManager, $userId) {
    $reviews = $reviewManager->getReviewsByUser($userId);

    if (empty($reviews)) {
        echo "<p>No reviews found for user: " . htmlspecialchars($userId) . "</p>"; // Use htmlspecialchars for security
        return;
    }

    echo "<h2>Reviews for User " . htmlspecialchars($userId) . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Title:</strong> " . htmlspecialchars($review['title']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
        echo "<strong>Date:</strong> " . htmlspecialchars($review['date']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Create a ReviewManager instance
$reviewManager = new ReviewManager();

// Add some reviews
$reviewManager->addReview('user123', 'Great Product!', 'Highly recommended!', 5);
$reviewManager->addReview('user123', 'Good Value', 'Worth the price.', 4);
$reviewManager->addReview('user456', 'Disappointed', 'Didn\'t meet expectations.', 2);

// Display reviews for user123
displayUserReviews($reviewManager, 'user123');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "<br><br><h2>All Reviews:</h2>";
echo "<pre>";
print_r($allReviews);
echo "</pre>";


// Get reviews with a rating of 5
$fiveStarReviews = $reviewManager->getReviewsByRating(5);
echo "<br><br><h2>Reviews with Rating 5:</h2>";
print_r($fiveStarReviews);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a product or item.
 * It handles input validation, sanitization, and database interaction.
 *
 * @param string $product_id The ID of the product to review.
 * @param string $name       The name of the user submitting the review.
 * @param string $comment   The user's review comment.
 * @param string $db_connection The established database connection object.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the outcome of the submission.
 *   - 'review_id': The ID of the newly created review (if successful).
 */
function submit_review(string $product_id, string $name, string $comment, object $db_connection) {
  // Input validation (basic - extend for more robust validation)
  if (empty($product_id) || empty($name) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'All fields are required.',
    ];
  }

  // Sanitize input (important to prevent SQL injection)
  $name = filter_var($name, FILTER_SANITIZE_STRING);
  $comment = filter_var($comment, FILTER_SANITIZE_STRING);


  // Prepare SQL query (using prepared statements for security)
  $sql = "INSERT INTO reviews (product_id, user_name, review_text) VALUES (?, ?, ?)";
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    // Handle database error
    return [
      'success' => false,
      'message' => 'Database error: ' . print_r($db_connection->error, true),
    ];
  }

  // Bind parameters
  $stmt->bind_param("ss", $name, $comment);

  // Execute query
  if (!$stmt->execute()) {
    // Handle database error
    return [
      'success' => false,
      'message' => 'Database error: ' . print_r($stmt->error, true),
    ];
  }

  // Get the ID of the newly inserted review
  $review_id = $db_connection->insert_id;

  // Close the statement
  $stmt->close();

  return [
    'success' => true,
    'message' => 'Review submitted successfully!',
    'review_id' => $review_id,
  ];
}


/**
 * Function to retrieve reviews for a product
 *
 * @param int $product_id The ID of the product.
 * @param object $db_connection The established database connection.
 *
 * @return array An array containing:
 *   - 'reviews': An array of review objects (or an empty array if no reviews).
 *   - 'success': True if reviews were retrieved successfully, false otherwise.
 *   - 'message': A message indicating the outcome.
 */
function get_reviews(int $product_id, object $db_connection) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db_connection->prepare($sql);

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Database error: ' . print_r($db_connection->error, true),
        ];
    }

    $stmt->bind_param("i", $product_id); // 'i' indicates an integer parameter

    $stmt->execute();

    $reviews = [];
    $result = $stmt->get_result();

    if ($result === false) {
      return [
          'reviews' => [],
          'success' => false,
          'message' => 'Error retrieving reviews: ' . print_r($stmt->error, true),
      ];
    }
    
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();

    return [
        'reviews' => $reviews,
        'success' => true,
    ];
}



// Example Usage (Simulated Database Connection - Replace with your actual connection)
// This is just for demonstration.  You'll need to set up your database connection.

// Mock Database Connection Object (Replace with your actual database connection)
$db_connection = new stdClass();
$db_connection->connect = function() {
    // Simulate a successful connection.  In a real application, this would handle the connection.
    return true;
};
$db_connection->query = function($sql) {
    // Simulate a query execution.
    return true;
};
$db_connection->insert_id = 123; // Simulate a review ID



// Submit a review
$review_result = submit_review(1, "John Doe", "This is a great product!", $db_connection);
print_r($review_result);


// Retrieve reviews for product 1
$reviews_result = get_reviews(1, $db_connection);
print_r($reviews_result);
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param int $itemId The ID of the item being reviewed (e.g., product ID, movie ID).
 * @param array $reviews An array to store reviews (default empty).
 *
 * @return array  An updated array of reviews. Returns the original array if there's an error.
 */
function create_review(string $username, string $reviewText, int $itemId, array &$reviews = []) {

  // Input Validation -  Important for security and data integrity
  if (empty($username) || empty($reviewText) || $itemId <= 0) {
    error_log("Invalid review data submitted."); // Log the error for debugging.  Don't display directly to the user.
    return $reviews; // Return the unchanged array.
  }

  // Sanitize input to prevent XSS and SQL Injection
  $username = htmlspecialchars($username);
  $reviewText = htmlspecialchars($reviewText);

  // Create the review object (you can customize this)
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s'), // Add a timestamp for ordering
    'itemId' => $itemId,
  ];

  // Add the review to the array.  Use 'array_push' for efficient appending.
  array_push($reviews, $review);

  return $reviews;
}


/**
 * Display Reviews Function
 *
 *  Displays the reviews associated with a given item ID.
 *
 * @param array $reviews An array of review objects.
 * @param int $itemId The ID of the item being reviewed.
 *
 * @return void  Prints the reviews to the screen.
 */
function display_reviews(array $reviews, int $itemId) {
  echo "<h2>Reviews for Item ID: " . $itemId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['review'] . "<br>";
    echo "<em>Timestamp: " . $review['timestamp'] . "</em>";
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:

// Initialize an empty array to store reviews
$reviews = [];

// Create some reviews
$reviews = create_review("John Doe", "Great product!  Highly recommended.", 123);
$reviews = create_review("Jane Smith", "It was okay, but could be better.", 123);
$reviews = create_review("Peter Jones", "Excellent value for money.", 456);

// Display the reviews
display_reviews($reviews, 123);

//Display reviews for item 456
display_reviews($reviews, 456);


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId  The unique identifier for the product/service being reviewed.
 * @param string $reviewText  The text of the user's review.
 * @param int    $rating      The rating given by the user (e.g., 1-5).
 * @param string $username    The username of the reviewer.
 *
 * @return array  An array containing the review details, or an error message if the submission fails.
 */
function submitReview(string $productId, string $reviewText, int $rating, string $username): array
{
    // **Input Validation** (Important for security and data integrity)
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }

    // **Data Sanitization** (Crucial for security - prevent XSS and SQL injection)
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); // Escape for HTML
    $username = htmlspecialchars($username, ENT_QUOTES, 'UTF-8');

    // **Store the Review (Simulated Database Interaction)**
    // In a real application, you'd connect to a database here.
    // This is a simplified example.
    $review = [
        'productId' => $productId,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'username' => $username,
        'timestamp' => time(), // Add a timestamp for tracking review creation
    ];

    // **Store Review in an Array (for demonstration)**
    // In a real application, you'd save this data to a database.
    // Example:  $reviews[] = $review;  or use a session variable or other persistent storage.

    return $review; // Return the new review data
}

/**
 * Display Reviews Function
 *
 * This function takes an array of reviews and displays them in a user-friendly format.
 *
 * @param array $reviews  An array of review objects (as returned by `submitReview`).
 *
 * @return string  HTML markup to display the reviews.
 */
function displayReviews(array $reviews): string
{
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<ul>";
    foreach ($reviews as $review) {
        $html .= '<li>';
        $html .= '<strong>' . $review['username'] . '</strong> - Rating: ' . $review['rating'] . ' - ' . $review['reviewText'];
        $html .= '</li>';
    }
    $html .= "</ul>";
    return $html;
}


// **Example Usage:**

// Simulate submitting a review
$reviewResult = submitReview('product123', 'This is a great product!', 5, 'john.doe');

if (isset($reviewResult['error'])) {
    echo "<p style='color:red;'>Error: " . $reviewResult['error'] . "</p>";
} else {
    // Display the review
    echo displayReviews($reviewResult);
}

//Example with an error
$errorReview = submitReview('', 'bad review', 3, 'jane');
if (isset($errorReview['error'])) {
    echo "<p style='color:red;'>Error: " . $errorReview['error'] . "</p>";
} else {
    echo displayReviews($errorReview);
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $productId;
    private $reviews = [];

    /**
     * Constructor
     *
     * @param int $productId The ID of the product or service being reviewed.
     */
    public function __construct(int $productId) {
        $this->productId = $productId;
    }

    /**
     * Add a new review.
     *
     * @param string $name The user's name.
     * @param string $comment The review text.
     * @param int $rating  The rating from 1 to 5.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $name, string $comment, int $rating): bool {
        if (!isset($name, $comment) || empty($name) || empty($comment)) {
            return false; // Require name and comment
        }

        if ($rating < 1 || $rating > 5) {
            return false; // Rating must be between 1 and 5
        }

        $this->reviews[] = [
            'name' => $name,
            'comment' => $comment,
            'rating' => $rating
        ];
        return true;
    }

    /**
     * Get all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Get the average rating for this product.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        $numReviews = count($this->reviews);

        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / $numReviews;
    }

    /**
     * Get a single review by its index.
     *
     * @param int $index The index of the review to retrieve (0-based).
     * @return array|null The review object at the given index, or null if the index is invalid.
     */
    public function getReview(int $index): ?array {
        if ($index >= count($this->reviews)) {
            return null;
        }
        return $this->reviews[$index];
    }

}


/**
 * Example Usage
 */

// Create a review object for a product
$productReview = new UserReview(123);

// Add some reviews
$productReview->addReview("John Doe", "Great product!  I love it.", 5);
$productReview->addReview("Jane Smith", "Could be better.", 3);
$productReview->addReview("Peter Jones", "Excellent value for the money.", 4);

// Get all reviews
$allReviews = $productReview->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo "  Name: " . $review['name'] . "
";
    echo "  Comment: " . $review['comment'] . "
";
    echo "  Rating: " . $review['rating'] . "
";
    echo "  --- 
";
}

// Get the average rating
$averageRating = $productReview->getAverageRating();
echo "Average Rating: " . ($averageRating !== null ? $averageRating : "No reviews yet") . "
";

// Get a specific review
$specificReview = $productReview->getReview(1);
if ($specificReview) {
    echo "Specific Review:
";
    echo "  Name: " . $specificReview['name'] . "
";
    echo "  Comment: " . $specificReview['comment'] . "
";
    echo "  Rating: " . $specificReview['rating'] . "
";
} else {
    echo "Review not found.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews  An array to store the reviews (used for demonstration).  In a real app, 
 *                         this would likely be a database.
 *
 * @return array  An array of reviews, including the new review if successful.
 */
function add_review(string $productId, string $username, string $rating, string $comment, array &$reviews = [])
{
    // Input validation - crucial for security and data integrity
    if (empty($productId)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (empty($rating)) {
        return ['error' => 'Rating cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }
    if (empty($comment)) {
        return ['error' => 'Comment cannot be empty.'];
    }

    // Create the review object (could be an object for better structure)
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for ordering and tracking
    ];

    // Add the review to the array
    $reviews[] = $review;

    return $reviews;
}


/**
 * Display Reviews
 *
 * This function formats and displays the reviews for a given product.
 *
 * @param array $reviews An array of reviews.
 */
function display_reviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $reviews[0]['productId'] . "</h2>" . "<br>"; // Display Product ID

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Username:</strong> " . $review['username'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// --- Example Usage ---

// Initialize an empty array to store reviews (in a real app, this would be a database)
$reviews = [];

// Add some reviews
$reviews = add_review('P123', 'JohnDoe', 4, 'Great product, highly recommended!', $reviews);
$reviews = add_review('P456', 'JaneSmith', 5, 'Excellent value for money.', $reviews);
$reviews = add_review('P123', 'PeterJones', 3, 'Could be better.', $reviews);
$reviews = add_review('P789', 'AliceBrown', 1, 'Very disappointing.', $reviews);

// Display the reviews
display_reviews($reviews);

// Example of handling an error
$error_result = add_review('P123', '', 3, 'Invalid review', $reviews);
print_r($error_result);  // Output the error result
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews,
 * including the user's name, message, and rating.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $reviewMessage The user's review message.
 * @param int $rating The user's rating (e.g., 1-5).
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $username, string $reviewMessage, int $rating)
{
  // Input Validation - VERY IMPORTANT!  This prevents malicious input.
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");  // Log the error for debugging
    return false;
  }
  if (empty($reviewMessage)) {
    error_log("Error: Review message cannot be empty.");
    return false;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize the input to prevent XSS (Cross-Site Scripting) vulnerabilities
  $username = htmlspecialchars($username);
  $reviewMessage = htmlspecialchars($reviewMessage);


  // **Database Interaction - REPLACE WITH YOUR DATABASE LOGIC**
  // This is just an example; adapt to your database and schema.
  try {
    // Create a database connection (replace with your database credentials)
    // Assuming you have a database connection established called $db
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For robust error handling

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (username, review_message, rating) VALUES (:username, :review_message, :rating)");

    // Bind the parameters
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':review_message', $review_message);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    // Return true if successful
    return true;

  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());  // Log the error
    return false;
  }
}

// Example Usage:
$username = "John Doe";
$review = "This product is amazing!";
$rating = 5;

if (saveUserReview($username, $review, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}

?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $productName;
    private $rating;
    private $comment;
    private $dateSubmitted;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     */
    public function __construct($userId, $productName, $rating, $comment)
    {
        $this->reviewId = uniqid(); // Generate a unique review ID
        $this->userId = $userId;
        $this->productName = $productName;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->dateSubmitted = date('Y-m-d H:i:s');
    }

    /**
     * Getters for each property
     *
     * @return mixed
     */
    public function getReviewId()
    {
        return $this->reviewId;
    }

    public function getUserId()
    {
        return $this->userId;
    }

    public function getProductName()
    {
        return $this->productName;
    }

    public function getRating()
    {
        return $this->rating;
    }

    public function getComment()
    {
        return $this->comment;
    }

    public function getDateSubmitted()
    {
        return $this->dateSubmitted;
    }

    /**
     *  Methods for saving, updating, or deleting reviews would go here.
     *  This is just a basic implementation.  For a real application,
     *  you would likely save this data to a database.
     */
}


/**
 * User Review Function (Simplified Review Submission)
 *
 * This function simulates the submission and display of a user review.
 *
 * @param array $userData  An associative array containing user data:
 *                         'userId' => int,
 *                         'productName' => string,
 *                         'rating' => int (1-5),
 *                         'comment' => string
 * @return array An associative array containing the review data if successful,
 *              or an error message if something went wrong.
 */
function submitUserReview(array $userData)
{
    // Validate input
    if (!isset($userData['userId']) || !is_int($userData['userId']) || $userData['userId'] <= 0) {
        return ['error' => 'Invalid user ID. User ID must be a positive integer.'];
    }
    if (!isset($userData['productName']) || !is_string($userData['productName']) || empty($userData['productName'])) {
        return ['error' => 'Product name is required and must be a non-empty string.'];
    }
    if (!isset($userData['rating']) || !is_int($userData['rating']) || $userData['rating'] < 1 || $userData['rating'] > 5) {
        return ['error' => 'Rating must be an integer between 1 and 5.'];
    }
    if (!isset($userData['comment']) || !is_string($userData['comment']) || empty($userData['comment'])) {
        return ['error' => 'Comment is required and must be a non-empty string.'];
    }


    // Create a new review object
    $review = new UserReview($userData['userId'], $userData['productName'], $userData['rating'], $userData['comment']);

    // Simulate saving the review (in a real application, you'd save to a database)
    //  For demonstration purposes, we just return the review data.
    return $review->getReviewId() . " - " . $review->getProductName() . " - Rating: " . $review->getRating() . " - Comment: " . $review->getComment();
}


// Example Usage:
$reviewData = [
    'userId' => 123,
    'productName' => 'Awesome Widget',
    'rating' => 5,
    'comment' => 'This widget is amazing!  Highly recommended.'
];

$reviewResult = submitUserReview($reviewData);

if (isset($reviewResult['error'])) {
    echo "Error: " . $reviewResult['error'] . "
";
} else {
    echo "Review submitted successfully: " . $reviewResult . "
";
}


// Example of handling an error:
$invalidReviewData = [
    'userId' => 'abc', // Invalid user ID (string)
    'productName' => 'Bad Product',
    'rating' => 6, // Invalid rating
    'comment' => '' // Empty comment
];

$errorResult = submitUserReview($errorResult);

if (isset($errorResult['error'])) {
    echo "Error: " . $errorResult['error'] . "
";
} else {
    echo "Review submitted successfully: " . $errorResult['error'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic validation and error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The name of the user submitting the review.
 * @param string $rating The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return array An array containing the result of the operation:
 *               - 'success': True if the review was created/updated successfully, False otherwise.
 *               - 'message': A message indicating the result (e.g., 'Review created successfully', 'Error saving review').
 *               - 'review' (optional): The review data if it was successfully created or updated.
 */
function create_review(string $productId, string $username, string $rating, string $comment) {
  // Input Validation - Crucial for security and data integrity
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'review' => null];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.', 'review' => null];
  }
  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.', 'review' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.', 'review' => null];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'review' => null];
  }

  // In a real application, you would store this data in a database.
  // This is a simplified example using an associative array.

  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time()
  ];

  // You would typically save the $review array to a database here.
  // Example:
  // $db = new DatabaseConnection(); // Assuming you have a database connection class
  // $db->insert('reviews', $review);

  // For demonstration purposes, we'll just return the review data.
  return ['success' => true, 'message' => 'Review created successfully.', 'review' => $review];
}


/**
 * Example Usage
 */

// Create a review
$result = create_review('product_123', 'John Doe', 4, 'Great product, highly recommended!');

if ($result['success']) {
  echo "Review created successfully!  Review Details: " . print_r($result['review'], true) . "
";
} else {
  echo "Error creating review: " . $result['message'] . "
";
}

// Example with invalid rating
$result = create_review('product_456', 'Jane Smith', 6, 'Excellent!');

if ($result['success']) {
  echo "Review created successfully!  Review Details: " . print_r($result['review'], true) . "
";
} else {
  echo "Error creating review: " . $result['message'] . "
";
}

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, display, and manage user reviews for a product or item.
 *
 *  Parameters:
 *  - $product_id (int): The ID of the product the review is for.
 *  - $user_id (int): The ID of the user submitting the review.
 *  - $rating (int): The rating given by the user (e.g., 1-5).
 *  - $comment (string): The review text.
 *
 *  Returns:
 *  - int: The ID of the newly created review, or -1 if the review could not be created.
 */

/**
 * Creates a new review.
 *
 * @param int $product_id The ID of the product.
 * @param int $user_id The ID of the user.
 * @param int $rating The rating (1-5).
 * @param string $comment The review text.
 * @return int|false The review ID on success, or false on failure.
 */
function createReview(int $product_id, int $user_id, int $rating, string $comment): int|false
{
    // **IMPORTANT: Database connection logic is simplified here.**
    // Replace this with your actual database connection code.
    // This example assumes you have a database connection named `$db`.

    // 1. Validate Input (Important for security and data integrity)
    if (!$db) {
        error_log("Database connection not established in createReview function.");
        return -1;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating provided: " . $rating);
        return -1;
    }

    if (empty($comment)) {
        error_log("Review comment cannot be empty.");
        return -1;
    }


    // 2. Prepare the SQL Query
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
            VALUES (:product_id, :user_id, :rating, :comment)";

    // 3. Prepare the Statement
    $stmt = $db->prepare($sql);

    if (!$stmt) {
        error_log("Failed to prepare SQL statement in createReview function.");
        return -1;
    }


    // 4. Bind Parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // 5. Execute the Query
    if (!$stmt->execute()) {
        error_log("Error executing SQL query in createReview function: " . $stmt->error);
        return -1;
    }

    // 6. Get the Last Inserted ID
    $review_id = $db->lastInsertId();

    // 7.  Return the Review ID
    return $review_id;
}

/**
 * Displays all reviews for a product.
 *
 * @param int $product_id The ID of the product.
 * @return array An array of review objects, or an empty array if no reviews exist.
 */
function getReviewsForProduct(int $product_id): array {
  // Database connection logic here (simplified for example)
  if (!$db) {
    error_log("Database connection not established in getReviewsForProduct.");
    return [];
  }

  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();

  $reviews = [];
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $reviews[] = $row;
  }
  return $reviews;
}


// Example Usage (Illustrative - Replace with your database setup)
/*
// Setup Example (for demonstration purposes)
$db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

// Create a review
$review_id = createReview(123, 45, 4, "Great product! I love it.");

if ($review_id) {
    echo "Review created successfully with ID: " . $review_id . "
";
} else {
    echo "Failed to create review.
";
}

// Get reviews for product ID 123
$reviews = getReviewsForProduct(123);

if (!empty($reviews)) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "  Product ID: " . $review['product_id'] . ", User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}
*/


?>


<?php

/**
 * User Review Function
 *
 * This function creates a user review object and allows for basic validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @return array|false  Returns an associative array containing review data, 
 *                       or false if validation fails.
 */
function createReview(string $username, string $rating, string $comment) {
  // Validate input
  if (empty($username)) {
    error_log("Error: Username cannot be empty."); // Log for debugging
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  if (empty($comment)) {
    error_log("Warning: Comment is empty.  Consider a default comment.");
    $comment = "No comment provided."; // Default comment if empty
  }

  // Create review object
  $review = [
    'username' => $username,
    'rating' => (int)$rating, // Convert to integer for consistency
    'comment' => $comment,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp
  ];

  return $review;
}


// Example Usage:

// Valid Review
$review1 = createReview("JohnDoe", 4, "Great product! Highly recommended.");
if ($review1) {
  echo "Review 1:
";
  print_r($review1);
} else {
  echo "Review 1 creation failed.
";
}

echo "
";

// Invalid Review (Empty Username)
$review2 = createReview("", 3, "Okay product.");
if (!$review2) {
  echo "Review 2 creation failed (as expected).
";
}

echo "
";

// Invalid Review (Invalid Rating)
$review3 = createReview("JaneSmith", 6, "Good product.");
if (!$review3) {
  echo "Review 3 creation failed (as expected).
";
}

echo "
";

// Valid Review (with empty comment)
$review4 = createReview("PeterJones", 5, "");
if ($review4) {
  echo "Review 4:
";
  print_r($review4);
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (optional) - Unique identifier for the review.  Defaults to null.
     * @param int $userId The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating The rating (e.g., 1-5).
     * @param string $comment The user's comment.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (can be used for modification)
     *
     * Note:  Consider validation in a real-world application.
     */
    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }


    /**
     *  A simple method to display the review information.
     *  This is for demonstration purposes.
     */
    public function displayReview() {
        echo "Review ID: " . ($this->reviewId ?: "N/A") . "<br>";
        echo "User ID: " . $this->userId . "<br>";
        echo "Product ID: " . $this->productId . "<br>";
        echo "Rating: " . $this->rating . "<br>";
        echo "Comment: " . $this->comment . "<br>";
        echo "Date: " . $this->date . "<br>";
    }
}


/**
 * Example Usage
 */

// Create some review objects
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
$review2 = new UserReview(1, 789, 456, 4, "Good, but could be better.");

// Display the reviews
echo "Review 1:<br>";
$review1->displayReview();
echo "<br>";

echo "Review 2:<br>";
$review2->displayReview();


/**
 *  Extending this for a review system would involve:
 *
 *  - Storing reviews in a database (using PDO, MySQLi, etc.)
 *  - Validation of input data (e.g., rating must be between 1 and 5)
 *  - Adding error handling
 *  - Implementing methods to retrieve, update, and delete reviews.
 */
?>


<?php

/**
 * User Review Function
 *
 * This function creates and stores user reviews for a product.
 * It includes validation and basic error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating   The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's review comment.
 * @return bool          True on successful creation, false otherwise.
 */
function createReview(string $productId, string $username, string $rating, string $comment) {
  // Input validation - Very important!
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty."); // Log error for debugging
    return false;
  }

  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return false;
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    error_log("Error: Rating must be a number between 1 and 5.");
    return false;
  }

  if (empty($comment)) {
    error_log("Error: Comment cannot be empty.");
    return false;
  }

  //  Database connection -  Replace with your actual database connection details
  //  This is just a placeholder for demonstration purposes.
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare(
      "INSERT INTO reviews (product_id, username, rating, comment, created_at)
       VALUES (:product_id, :username, :rating, :comment, NOW())"
    );

    // Bind parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    $result = $stmt->execute();

    // Check if the query was successful
    if ($result) {
      return true;
    } else {
      error_log("Error: Failed to insert review into database: " . print_r($stmt->errorInfo(), true));
      return false;
    }
  } catch (PDOException $e) {
    error_log("Error: Database error: " . $e->getMessage());
    return false;
  }
}


// Example usage:
$productId = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "Great product, highly recommended!";

if (createReview($productId, $username, $rating, $comment)) {
  echo "Review created successfully!";
} else {
  echo "Failed to create review.";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple in-memory array to store reviews.  For production environments,
 * you should use a database.
 *
 * @param string $productId  The product ID the review is for.
 * @param string $userId     The ID of the user writing the review.
 * @param string $rating     The rating (e.g., 1-5).
 * @param string $comment    The review comment.
 * @param int    $reviewId   (Optional) The ID of the review to update.  If not provided, a new review is created.
 *
 * @return array|bool  Returns an array containing the review data if successful, or false if there was an error.
 */
function createOrUpdateReview(string $productId, string $userId, string $rating, string $comment, ?int $reviewId = null): array|bool
{
    // Input validation -  Crucial for security and data integrity
    if (empty($productId) || empty($userId) || empty($rating) || empty($comment)) {
        return false; // Invalid input
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return false; // Invalid rating
    }

    // Create a review
    $review = [
        'product_id' => $productId,
        'user_id' => $userId,
        'rating' => $rating,
        'comment' => $comment,
        'created_at' => time(), // Timestamp of when the review was created
    ];

    // Check if the review already exists
    if ($reviewId !== null) {
        // Update existing review
        $reviews = Reviews::getAllReviews(); // Assumes a Reviews class exists
        foreach ($reviews as $reviewItem) {
            if ($reviewItem['id'] == $reviewId) {
                $review['id'] = $reviewId;
                $review['updated_at'] = time();
                $reviews[] = $review;  // Add the updated review to the array.
                break;
            }
        }
    } else {
        // Add a new review
        $reviews[] = $review;
    }

    // Save the reviews (for this example, we just return the updated array)
    Reviews::saveReviews($reviews); // Saves to a database or in-memory storage

    return $reviews;
}


/**
 *  Example Reviews class for demonstration purposes - can be adapted for a database
 */
class Reviews {
    private static $reviews = [];

    public static function getAllReviews(): array {
        return self::$reviews;
    }

    public static function saveReviews(array $reviews) {
        self::$reviews = $reviews;
    }
}

// --- Example Usage ---

// Create a new review
$reviewData = createOrUpdateReview('P123', 'U456', 4, 'Great product, highly recommended!');
if ($reviewData) {
    echo "Review created successfully:
";
    print_r($reviewData);
} else {
    echo "Error creating review.
";
}


// Update an existing review
$updatedReview = createOrUpdateReview('P123', 'U456', 5, 'Excellent product, even better than expected!', 1); // Update review with ID 1
if ($updatedReview) {
    echo "
Review updated successfully:
";
    print_r($updatedReview);
} else {
    echo "Error updating review.
";
}


// Retrieve all reviews for product 'P123'
$reviewsForProduct = Reviews::getAllReviews();
echo "
Reviews for product P123:
";
print_r($reviewsForProduct);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 * It includes basic functionality for adding, displaying, and potentially
 * sorting reviews.
 *
 * @param string $productName The name of the product being reviewed.
 * @param array $reviews An array of user reviews.  Each review should be an associative array
 *                      with keys like 'user', 'rating', and 'comment'.
 * @return void
 */
function displayUserReviews(string $productName, array $reviews) {

  // Security: Sanitize input (essential for preventing XSS)
  $productName = htmlspecialchars($productName);
  foreach ($reviews as $review) {
    $review['user'] = htmlspecialchars($review['user']);
    $review['comment'] = htmlspecialchars($review['comment']);
  }

  echo "<h2>Reviews for " . $productName . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet. Be the first to review!</p>";
  } else {
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['user'] . ":</strong> " . $review['comment'] . " (Rating: " . $review['rating'] . ")";
      echo "</li>";
    }
    echo "</ul>";
  }
}


/**
 *  Add a new review (example function - can be expanded)
 *
 *  This function adds a new review to the reviews array.  
 *  Important: Add proper security checks and validation in a production environment!
 *
 * @param string $user
 * @param int $rating
 * @param string $comment
 */
function addReview(string $user, int $rating, string $comment) {
  // Basic Validation (In a real application, you'd use more robust validation)
  if (empty($user) || $rating < 1 || $rating > 5 || empty($comment)) {
    echo "<p>Invalid review data. Please provide a valid user, rating (1-5), and comment.</p>";
    return;
  }

  $review = [
    'user' => $user,
    'rating' => $rating,
    'comment' => $comment
  ];

  // In a real application, you'd store this in a database or session.
  // This is just a demo.
  global $reviews; // Access the global $reviews array
  $reviews[] = $review;
}



// Example Usage:
// Initialize the reviews array
$reviews = [];

// Add some reviews
addReview("John Doe", 4, "Great product, highly recommended!");
addReview("Jane Smith", 5, "Excellent quality and fast shipping.");
addReview("Peter Jones", 3, "It's okay, but could be better.");

// Display the reviews
displayUserReviews("Awesome Gadget", $reviews);

// Add another review (demonstration)
addReview("Alice Brown", 2, "The battery life is terrible.");

// Display the reviews again
displayUserReviews("Awesome Gadget", $reviews);


?>


<?php

/**
 * User Review Class
 * 
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview {
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;
    private $date_submitted;

    /**
     * Constructor
     * 
     * Initializes a new UserReview object.
     * 
     * @param int $product_id The ID of the product being reviewed.
     * @param int $user_id The ID of the user submitting the review.
     * @param int $rating The rating given (e.g., 1-5).
     * @param string $comment The user's comment.
     */
    public function __construct($product_id, $user_id, $rating, $comment) {
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date_submitted = date('Y-m-d H:i:s'); // Get current timestamp
    }

    /**
     * Getters
     */
    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDateSubmitted() {
        return $this->date_submitted;
    }

    /**
     * Display Review (for debugging or display purposes)
     * 
     * Returns a formatted string representing the review.
     * @return string
     */
    public function displayReview() {
        return "Product ID: " . $this->getProductId() . "
"
               . "User ID: " . $this->getUserId() . "
"
               . "Rating: " . $this->getRating() . "
"
               . "Comment: " . $this->getComment() . "
"
               . "Date Submitted: " . $this->getDateSubmitted();
    }
}


/**
 * User Review Function
 *
 * This function takes a user-submitted review and stores it.
 * 
 * @param array $reviewData An associative array containing the review data:
 *                            - product_id => int (Product ID)
 *                            - user_id => int (User ID)
 *                            - rating => int (Rating)
 *                            - comment => string (Comment)
 * @return UserReview|null A UserReview object if the review was successfully created, or null if there was an error.
 */
function storeUserReview(array $reviewData) {
    // Validation (Add more robust validation as needed)
    if (!isset($reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment'])) {
        error_log("Missing review data: " . print_r($reviewData, true));
        return null;
    }

    if (!is_int($reviewData['product_id']) || !is_int($reviewData['user_id']) || !is_int($reviewData['rating'])) {
        error_log("Invalid review data types: " . print_r($reviewData, true));
        return null;
    }

    if ($reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        error_log("Invalid rating value: " . $reviewData['rating']);
        return null;
    }

    // In a real application, you'd save this to a database
    // For this example, we'll just create a UserReview object.
    $review = new UserReview($reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment']);
    return $review;
}


// Example Usage:
$reviewData = [
    'product_id' => 123,
    'user_id' => 456,
    'rating' => 4,
    'comment' => 'Great product! Highly recommended.'
];

$review = storeUserReview($reviewData);

if ($review) {
    echo "Review created successfully:
";
    echo $review->displayReview() . "
";
} else {
    echo "Error creating review.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5 stars).
 * @param string $comment The user's written review.
 * @return array|string Returns an array with the review details on success, or an error message on failure.
 */
function submit_review(string $product_id, string $username, string $rating, string $comment)
{
  // **Security Considerations (Important!)**

  // 1. Input Validation and Sanitization:  This is crucial to prevent SQL injection and XSS attacks.
  //    This example provides basic validation, but you *MUST* expand upon it for a real application.
  $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5)); // Ensure rating is an integer between 1 and 5
  if ($rating === false) {
    return "Error: Invalid rating.  Please enter a number between 1 and 5.";
  }

  $comment = trim($comment);  // Remove leading/trailing whitespace

  // 2.  Escaping for Output (XSS protection):  Use htmlspecialchars() to escape the comment
  $escaped_comment = htmlspecialchars($comment, ENT_QUOTES, 'UTF-8');

  // **Database Interaction (Replace with your database logic)**
  // This is a simplified example using a mock database.
  // In a real application, use a proper database connection and query.

  // Mock Database (Replace with your database connection and query logic)
  $db = new MockDatabase();

  // Add the review to the database
  try {
    $db->addReview($product_id, $username, $rating, $escaped_comment);
    return ['success' => true, 'message' => "Review submitted successfully!"];

  } catch (Exception $e) {
    return ['success' => false, 'message' => "Error submitting review: " . $e->getMessage()];
  }


}

/**
 * Mock Database Class (For demonstration purposes only)
 */
class MockDatabase
{
    private $reviews = [];

    public function addReview(string $product_id, string $username, string $rating, string $comment)
    {
        // In a real database, you'd build and execute an SQL query here.
        // This is just a placeholder for demonstration.

        $this->reviews[$product_id][] = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];
    }
}
?>


// Example Usage
$product_id = "123";
$username = "JohnDoe";
$rating = 4;
$comment = "This is a great product!";

$result = submit_review($product_id, $username, $rating, $comment);

if ($result['success']) {
  echo "<p>Review submitted successfully!</p>";
} else {
  echo "<p>Error: " . $result['message'] . "</p>";
}


<?php

/**
 * User Review Function - Allows users to submit and display reviews.
 */

class UserReview
{
    private $reviews = [];

    /**
     * Submits a new user review.
     *
     * @param string $username The username of the reviewer.
     * @param string $reviewText The text of the review.
     * @return bool True on successful submission, false otherwise (e.g., if username is empty).
     */
    public function submitReview(string $username, string $reviewText): bool
    {
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'review'   => $reviewText,
            'date'     => date('Y-m-d H:i:s') // Timestamp of the review
        ];

        return true;
    }

    /**
     * Retrieves all submitted reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves a single review by its index in the array.  Useful if you're managing reviews sequentially.
     *
     * @param int $index The index of the review to retrieve.
     * @return array|null The review object at the given index, or null if the index is invalid.
     */
    public function getReviewByIndex(int $index): ?array
    {
        if ($index >= 0 && $index < count($this->reviews)) {
            return $this->reviews[$index];
        } else {
            return null;
        }
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void Prints the reviews to the console (for demonstration).
     */
    public function displayAllReviews(): void
    {
        echo "<pre>"; // Use <pre> tag for better formatting in the console
        foreach ($this->getAllReviews() as $review) {
            echo "Username: " . htmlspecialchars($review['username']) . "
";
            echo "Review: " . htmlspecialchars($review['review']) . "
";
            echo "Date: " . $review['date'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}


// Example Usage:
$reviewSystem = new UserReview();

// Submit some reviews
$reviewSystem->submitReview('JohnDoe', 'This product is amazing!');
$reviewSystem->submitReview('JaneSmith', 'Could be better, needs some improvements.');
$reviewSystem->submitReview('PeterJones', 'Fantastic value for money!');

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayAllReviews();

// Retrieve a specific review
$review = $reviewSystem->getReviewByIndex(1);
if ($review) {
    echo "<h2>Review at Index 1:</h2>";
    echo "Username: " . htmlspecialchars($review['username']) . "
";
    echo "Review: " . htmlspecialchars($review['review']) . "
";
} else {
    echo "<p>Review not found.</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product or item.
 *
 * @param string $product_id The unique ID of the product or item.
 * @param string $user_id The unique ID of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).  Must be an integer.
 * @param string $comment The user's review comment.
 * @param string $db_connection  A database connection object.
 *
 * @return array An array containing:
 *   - 'success' => true if the review was successfully saved, false otherwise.
 *   - 'message' => A success or error message.
 *   - 'review_id' => The ID of the newly created review (if successful).
 */
function saveUserReview(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection) {
    // Input Validation - VERY IMPORTANT!  Prevent SQL Injection and data errors.
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be an integer between 1 and 5.', 'review_id' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'review_id' => null];
    }
    
    try {
        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
                VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $db_connection->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db_connection->lastInsertId();

        return ['success' => true, 'message' => 'Review saved successfully.', 'review_id' => $review_id];

    } catch (PDOException $e) {
        // Handle database errors - critical for debugging and security
        return ['success' => false, 'message' => 'Database error: ' . $e->getMessage(), 'review_id' => null];
    }
}

/**
 * Function to retrieve reviews for a product.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 * @param PDO $db_connection PDO database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(string $product_id, PDO $db_connection) {
    try {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db_connection->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);  // Fetch as an array of associative arrays

        return $reviews;

    } catch (PDOException $e) {
        // Handle database errors
        return [];
    }
}



// --- Example Usage (Demonstration -  Requires Database Setup) ---

// *** IMPORTANT:  Replace with your actual database credentials! ***
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';


try {
    // Create a PDO database connection
    $db_connection = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $username, $password);
    $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions for error handling

    // --- Save a Review ---
    $product_id = '123';
    $user_id = 'user123';
    $rating = 4;
    $comment = 'Great product!  Works as advertised.';

    $result = saveUserReview($product_id, $user_id, $rating, $comment, $db_connection);

    if ($result['success']) {
        echo "Review saved successfully!  Review ID: " . $result['review_id'] . "<br>";
    } else {
        echo "Error saving review: " . $result['message'] . "<br>";
    }

    // --- Retrieve Reviews for the Product ---
    $reviews = getReviewsForProduct($product_id, $db_connection);

    if (!empty($reviews)) {
        echo "<h3>Reviews for Product " . $product_id . ":</h3>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li><b>User:</b> " . $review['user_id'] . "<br>";
            echo "<b>Rating:</b> " . $review['rating'] . "<br>";
            echo "<b>Comment:</b> " . $review['comment'] . "</li>";
        }
        echo "</ul>";
    } else {
        echo "No reviews found for product " . $product_id . ".";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
} finally {
    // Close the database connection - VERY IMPORTANT!
    $db_connection = null;
}

?>


<?php

/**
 * This function allows users to submit and view reviews for a product or service.
 * It includes basic data validation and display.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param array $reviews An array of review objects (see example below).
 *
 * @return void
 */
function displayReviews(string $productName, array $reviews)
{
    // Simple HTML structure for display
    echo "<h1>Reviews for " . htmlspecialchars($productName) . "</h1>";

    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
    } else {
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>" . htmlspecialchars($review['author']) . "</strong> - " . htmlspecialchars($review['comment']) . "<br>";
            echo "Rating: " . htmlspecialchars($review['rating']) . " / 5";
            echo "</li>";
        }
        echo "</ul>";
    }
}


/**
 * Adds a new review.
 *
 * @param string $productName The name of the product or service.
 * @param string $author The name of the reviewer.
 * @param string $comment The review comment.
 * @param int $rating The rating given by the reviewer (1-5).
 *
 * @return array An updated array of reviews.
 */
function addReview(string $productName, string $author, string $comment, int $rating)
{
    // Validate rating
    if ($rating < 1 || $rating > 5) {
        return $reviews; // Or throw an exception
    }

    $review = [
        'author' => $author,
        'comment' => $comment,
        'rating' => $rating
    ];

    $reviews[] = $review;
    return $reviews;
}



// **Example Usage:**

// Initialize an empty array to store reviews
$reviews = [];


// Add some reviews (you would typically collect this data from a form)
$reviews = addReview("Awesome Widget", "John Doe", "Great product!  Works exactly as advertised.", 5);
$reviews = addReview("Amazing Gadget", "Jane Smith", "Good value for money.", 4);
$reviews = addReview("Mediocre Thing", "Peter Jones", "It's okay, but could be better.", 3);


// Display the reviews
displayReviews("My Product", $reviews);


// ---  Simplified Version without explicit array initialization ---
// function displayReviewsSimplified(string $productName, array $reviews) {
//     echo "<h1>Reviews for " . htmlspecialchars($productName) . "</h1>";
//
//     if (empty($reviews)) {
//         echo "<p>No reviews yet.</p>";
//     } else {
//         echo "<ul>";
//         foreach ($reviews as $review) {
//             echo "<li>";
//             echo "<strong>" . htmlspecialchars($review['author']) . "</strong> - " . htmlspecialchars($review['comment']) . "<br>";
//             echo "Rating: " . htmlspecialchars($review['rating']) . " / 5";
//             echo "</li>";
//         }
//         echo "</ul>";
//     }
// }

// $reviews = []; // Initialize array here, or pass an array as a parameter.
// displayReviewsSimplified("My Product", $reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating (e.g., 1-5).
 * @param string $comment  The review text.
 * @param array $reviews  (Optional) An array of existing reviews to persist.
 *
 * @return array An updated array of reviews including the new review.
 */
function add_review(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
    // Input Validation (Basic - can be expanded)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create a new review object
    $review = [
        'product_id' => $productId,
        'username'   => $username,
        'rating'     => $rating,
        'comment'    => $comment,
        'timestamp'  => time() // Add a timestamp for sorting/filtering
    ];

    // Add the new review to the array
    $reviews[] = $review;

    return $reviews;
}


/**
 * Display Reviews Function
 *
 * This function formats and displays the reviews.
 *
 * @param array $reviews  The array of reviews to display.
 *
 * @return void  Prints the formatted reviews to the console.  Can be modified to output HTML.
 */
function display_reviews(array $reviews) {
    echo "<pre>"; // Use <pre> tags for formatted output
    foreach ($reviews as $review) {
        echo "Product ID: " . $review['product_id'] . "
";
        echo "Username: " . $review['username'] . "
";
        echo "Rating: " . $review['rating'] . "
";
        echo "Comment: " . $review['comment'] . "
";
        echo "Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . "
";
        echo "---
";
    }
    echo "</pre>";
}



// Example Usage:
try {
    // Initialize reviews (can be persisted to a database)
    $reviews = [];

    // Add some reviews
    $reviews = add_review("product123", "John Doe", 4, "Great product!  Works as expected.", $reviews);
    $reviews = add_review("product456", "Jane Smith", 5, "Excellent value for the money.", $reviews);
    $reviews = add_review("product123", "Peter Jones", 3, "Could be better.", $reviews);

    // Display the reviews
    display_reviews($reviews);

} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, display, and potentially moderate user reviews.
 * It provides basic functionalities like adding a review, retrieving reviews,
 * and displaying them.  More sophisticated moderation features (like flagging,
 * deleting, etc.) would require further development.
 *
 * @param string $productName The name of the product the review is for.
 * @param string $reviewText The text of the review submitted by the user.
 * @param array $user_id The user's ID who submitted the review (optional, for tracking)
 * @return array An array containing the review data (ID, product, review, user_id) 
 *               or an array of errors if adding the review fails.
 */
function add_review(string $productName, string $reviewText, ?int $user_id = null) : array
{
    // Validate inputs (important!)
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // In a real application, you'd sanitize and validate $reviewText
    // (e.g., prevent XSS attacks, limit length, etc.).  This is a placeholder.

    // Generate a unique review ID (simplified for this example)
    $review_id = bin2hex(uniqid()); // Use a more robust method in production!

    // Store the review (replace with database interaction in a real app)
    // This is a placeholder; consider using a database connection here.
    $review = [
        'id' => $review_id,
        'product' => $productName,
        'review' => $reviewText,
        'user_id' => $user_id,
        'date' => date('Y-m-d H:i:s') // Add timestamp for sorting/filtering
    ];

    // Save the review to a file or database
    //  Example:  file_put_contents('reviews.txt', $review . PHP_EOL, FILE_APPEND);
    // In a real application, use a database:  $db->insert('reviews', $review);

    return $review;
}


/**
 * Retrieves reviews for a given product.
 *
 * @param string $productName The product to search for reviews for.
 * @return array An array of reviews for the product, or an empty array if none are found.
 */
function get_reviews(string $productName) : array
{
    // In a real application, you'd fetch this from a database.
    // This is just a placeholder to demonstrate the concept.

    $reviews = [];

    // Simulate retrieving reviews from a file or database
    $reviews_data = get_all_reviews();

    foreach ($reviews_data as $review) {
        if ($review['product'] == $productName) {
            $reviews[] = $review;
        }
    }

    return $reviews;
}

/**
 * Placeholder function to get all reviews.  In a real application, 
 * this would fetch data from a database.
 * 
 * @return array An array of review data.
 */
function get_all_reviews() : array {
  return [
    ['id' => bin2hex(uniqid()), 'product' => 'Laptop X100', 'review' => 'Great laptop, fast and reliable!', 'user_id' => 123, 'date' => date('Y-m-d H:i:s')],
    ['id' => bin2hex(uniqid()), 'product' => 'Tablet Z200', 'review' => 'Good tablet for the price.', 'user_id' => 456, 'date' => date('Y-m-d H:i:s')],
    ['id' => bin2hex(uniqid()), 'product' => 'Laptop X100', 'review' => 'Excellent value.', 'user_id' => 789, 'date' => date('Y-m-d H:i:s')]
  ];
}



// --- Example Usage ---

// Add a review
$new_review = add_review('Laptop X100', 'Fantastic performance!');
if (isset($new_review['error'])) {
    echo "Error adding review: " . $new_review['error'] . PHP_EOL;
} else {
    echo "Review added successfully.  Review ID: " . $new_review['id'] . PHP_EOL;
}

// Get reviews for Laptop X100
$laptop_reviews = get_reviews('Laptop X100');

echo "Reviews for Laptop X100:" . PHP_EOL;
if (empty($laptop_reviews)) {
    echo "No reviews found." . PHP_EOL;
} else {
    foreach ($laptop_reviews as $review) {
        echo "- " . $review['review'] . " (User ID: " . $review['user_id'] . ")" . PHP_EOL;
    }
}

// Example of error handling when adding an invalid review
$invalid_review = add_review("", "This is a test.");
if (isset($invalid_review['error'])) {
    echo "Error adding review: " . $invalid_review['error'] . PHP_EOL;
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 *
 * @param string $productName  The name of the product/item being reviewed.
 * @param string $userId       The unique identifier of the user submitting the review.
 * @param string $rating       The rating given by the user (e.g., 1-5).
 * @param string $comment      The user's review comment.
 * @param array $reviews       (Optional) An existing array of reviews to append to.
 *
 * @return array  An updated array of reviews, including the new review.
 */
function createAndDisplayReview(string $productName, string $userId, string $rating, string $comment, array &$reviews = []) {
  // Validate input (example - you should expand this for robust validation)
  if (empty($productName)) {
    return $reviews; // Return empty if product name is empty
  }
  if (empty($userId)) {
    return $reviews; // Return empty if user ID is empty
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return $reviews; // Return empty if rating is invalid
  }
  if (empty($comment)) {
    return $reviews; // Return empty if comment is empty
  }
  

  // Create a new review object (can be an array, object, or custom class)
  $review = [
    'product' => $productName,
    'user'    => $userId,
    'rating'  => $rating,
    'comment' => $comment,
    'date'    => date('Y-m-d H:i:s')  // Timestamp for the review
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


// Example Usage:
$product = "Awesome Widget";

// First Review
$reviews1 = createAndDisplayReview($product, "user123", 5, "This widget is fantastic! Highly recommended.");
print_r($reviews1);

// Second Review
$reviews2 = createAndDisplayReview($product, "user456", 4, "Good product, does what it says.", $reviews1);
print_r($reviews2);

// Display the reviews (example - you'd likely use a template engine or similar)
echo "<h2>Reviews for " . $product . "</h2>";
if (empty($reviews2)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<ul>";
  foreach ($reviews2 as $review) {
    echo "<li>";
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br>";
    echo "<strong>Date:</strong> " . $review['date'] . "</li>";
  }
  echo "</ul>";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId
     * @param int $userId
     * @param int $productId
     * @param int $rating
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId = null, $productId = null, $rating = null, $comment = null) {

        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Default to current timestamp
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters
     *
     * @param mixed $value
     * @return void
     */
    public function setReviewId($reviewId) {
        $this->reviewId = $reviewId;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }

    public function setProductId($productId) {
        $this->productId = $productId;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function setDate($date) {
        $this->date = $date;
    }
}


/**
 * User Review Review Function (with validation)
 */
function reviewUser($reviewId = null, $userId = null, $productId = null, $rating = null, $comment = null) {

    // Input Validation - Crucial for security and data integrity
    if ($reviewId !== null) {
        if (!is_numeric($reviewId)) {
            return "Error: Review ID must be a number.";
        }
    }
    if ($userId !== null) {
        if (!is_numeric($userId)) {
            return "Error: User ID must be a number.";
        }
    }
    if ($productId !== null) {
        if (!is_numeric($productId)) {
            return "Error: Product ID must be a number.";
        }
    }
    if ($rating !== null) {
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) { // Validate rating range
            return "Error: Rating must be a number between 1 and 5.";
        }
    }
    if ($comment !== null) {
        if (empty($comment)) {
            return "Error: Comment cannot be empty.";
        }
    }

    // Create a new Review object
    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);

    // Simulate saving to a database (Replace this with your database logic)
    // For demonstration purposes, we'll just return a success message.
    return "Review submitted successfully. Review ID: " . $review->getReviewId();
}

// Example Usage
echo reviewUser(123, 45, 67, 4, "This product is great!");
echo "
";
echo reviewUser(null, 78, 90, 5, "Excellent!");
echo "
";
echo reviewUser(null, null, null, 3, "Okay, but could be better."); // No parameters, no validation
echo "
";
echo reviewUser(null, 10, 20, 6, ""); // Invalid rating (empty comment)
echo "
";

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier for the product/service.
 * @param string $userName The user's name or username.
 * @param string $reviewText The user's review text.
 * @param int $rating (Optional) The rating given by the user (1-5). Defaults to 0.
 * @param string $userId (Optional) The user's ID, for database storage. If not provided, a default one will be generated.
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0, string $userId = null): bool
{
  // Validate inputs (add more validation as needed)
  if (empty($productId) || empty($userName) || empty($reviewText)) {
    error_log("Error: Product ID, User Name, and Review Text cannot be empty."); // Log for debugging
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Database connection (replace with your actual database connection)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example, adapt to your setup

  try {
    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (productId, userName, reviewText, rating, userId) 
                         VALUES (:productId, :userName, :reviewText, :rating, :userId)");

    // Bind parameters
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userName', $userName);
    $stmt->bindParam(':reviewText', $reviewText);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':userId', $userId ?? null); // Use null coalescing operator to handle optional userId

    // Execute the statement
    $result = $stmt->execute();

    // Check for errors
    if ($result) {
      //  Ideally, you'd retrieve the newly created ID here to return to the user
      //  For this example, we just return true
      return true;
    } else {
      error_log("Error inserting review: " . print_r($stmt->errorInfo(), true));  // Log more details for debugging
      return false;
    }
  } catch (PDOException $e) {
    error_log("PDO Exception: " . $e->getMessage()); // Log the exception
    return false;
  }
}


/**
 * Function to retrieve all reviews for a product.
 *
 * @param string $productId The product ID.
 * @return array An array of review objects, or an empty array if no reviews exist.
 */
function getReviewsForProduct(string $productId): array {
  // Database connection
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example, adapt to your setup

  try {
    $stmt = $db->prepare("SELECT id, productId, userName, reviewText, rating, userId, created_at FROM reviews WHERE productId = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch as objects for easier handling

    return $reviews;

  } catch (PDOException $e) {
    error_log("PDO Exception: " . $e->getMessage());
    return []; // Return an empty array in case of error
  }
}



// Example usage (for demonstration purposes - NOT for production)
//  You'll need to create a 'reviews' table in your database first.
//  Example SQL to create the table:
//  CREATE TABLE reviews (
//    id int AUTO_INCREMENT PRIMARY KEY,
//    productId varchar(255) NOT NULL,
//    userName varchar(255) NOT NULL,
//    reviewText TEXT NOT NULL,
//    rating int,
//    userId varchar(255),
//    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
//  );



// Store a review
$reviewSuccess = storeUserReview('product123', 'John Doe', 'Great product!  I highly recommend it.', 5);
if ($reviewSuccess) {
  echo "Review stored successfully!
";
} else {
  echo "Error storing review.
";
}


// Get reviews for 'product123'
$reviews = getReviewsForProduct('product123');

if (!empty($reviews)) {
  echo "Reviews for product123:
";
  foreach ($reviews as $review) {
    echo "  ID: " . $review->id . "
";
    echo "  Product ID: " . $review->productId . "
";
    echo "  User Name: " . $review->userName . "
";
    echo "  Review Text: " . $review->reviewText . "
";
    echo "  Rating: " . $review->rating . "
";
    echo "  User ID: " . $review->userId . "
";
    echo "  Created at: " . $review->created_at . "
";
    echo "--- 
";
  }
} else {
  echo "No reviews found for product123.
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $product_name The name of the product or service being reviewed.
 * @param string $review_text The text of the review.
 * @param string $reviewer_name The name of the reviewer.
 * @param int $rating (optional) A rating from 1 to 5. Defaults to 0.
 *
 * @return array An array containing the review data, or an error message if the review submission fails.
 */
function submit_review(string $product_name, string $review_text, string $reviewer_name, int $rating = 0) {
    // Validate inputs (basic example - you'd likely want more robust validation)
    if (empty($product_name)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (empty($reviewer_name)) {
        return ['error' => 'Reviewer name cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize inputs (essential for security - prevent XSS)
    $product_name = htmlspecialchars($product_name);
    $review_text = htmlspecialchars($review_text);
    $reviewer_name = htmlspecialchars($reviewer_name);


    // Store the review (in a real application, you'd use a database)
    // For this example, we'll just echo the review data.
    echo "<h2>Review for: " . $product_name . "</h2>";
    echo "<p><strong>Reviewer:</strong> " . $reviewer_name . "</p>";
    echo "<p><strong>Rating:</strong> " . $rating . "</p>";
    echo "<p><strong>Review:</strong> " . $review_text . "</p>";


    return ['product_name' => $product_name, 'review_text' => $review_text, 'reviewer_name' => $reviewer_name, 'rating' => $rating];
}


// Example Usage:
// Simulate a user submitting a review
$review_data = submit_review("Awesome Widget", "This widget is amazing!  I love it!", "John Doe", 5);

if (isset($review_data['error'])) {
    echo "<p style='color: red;'>Error: " . $review_data['error'] . "</p>";
}

// Another example with a different rating:
$review_data2 = submit_review("Mediocre Gadget", "It's okay, but nothing special.", "Jane Smith", 3);
if (isset($review_data2['error'])) {
  echo "<p style='color: red;'>Error: " . $review_data2['error'] . "</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes error handling and basic input validation.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating   (Optional) The rating given by the user (1-5). Defaults to 0.
 * @return array|string Returns an array of reviews if successful, or an error message string if there's an issue.
 */
function storeUserReview(string $productId, string $userName, string $reviewText, int $rating = 0) {
    // Input Validation - Basic checks
    if (empty($productId)) {
        return "Error: Product ID cannot be empty.";
    }
    if (empty($userName)) {
        return "Error: User name cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5.";
    }


    //  Simulate storing the review in a database (replace with your actual database logic)
    //  This is a simplified example - use proper database queries for real applications.
    $review = [
        'productId' => $productId,
        'userName' => $userName,
        'reviewText' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Store the review in an array (for this example)
    // In a real application, you'd insert this data into a database.
    $storedReviews = [
        'reviews' => [
            $review
        ]
    ];


    return $storedReviews;
}


/**
 * Display User Reviews
 *
 * This function retrieves and displays user reviews for a given product ID.
 *
 * @param array $reviews An array of reviews (returned from storeUserReview or loaded from database).
 * @return string HTML to display the reviews.
 */
function displayReviews(array $reviews) {
    if (empty($reviews['reviews'])) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for Product ID: " . $reviews['reviews'][0]['productId'] . "</h2>"; // Display product ID

    foreach ($reviews['reviews'] as $review) {
        $html .= "<div class='review'>";
        $html .= "<p><strong>User:</strong> " . htmlspecialchars($review['userName']) . "</p>"; // Use htmlspecialchars for security
        $html .= "<p>" . htmlspecialchars($review['reviewText']) . "</p>";
        $html .= "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
        $html .= "<div class='timestamp'>" . date('Y-m-d H:i:s', $review['timestamp']) . "</div>";
        $html .= "</div>";
    }

    return $html;
}


// --- Example Usage ---

// Store a review
$reviewData = storeUserReview("123", "John Doe", "This is a great product!", 5);

if (is_array($reviewData)) {
    if (isset($reviewData['error'])) {
        echo "<p>Error: " . $reviewData['error'] . "</p>";
    } else {
        echo "Review stored successfully!";
        // Display the reviews
        $reviews = storeUserReview("123", "Jane Smith", "It's okay.", 3); //Another review

        echo displayReviews($reviews); //Display the reviews

    }
} else {
    echo "Error: " . $reviewData;
}

?>


<?php

/**
 *  A function to create and manage user reviews.
 *
 *  This function provides basic functionality for adding, displaying, and
 *  potentially moderating user reviews.  It's a simplified example and can
 *  be extended with more advanced features like rating systems, image uploads,
 *  and moderation workflows.
 */
class ReviewManager {

  private $reviews = [];
  private $dbConnection = null; // For database integration (optional)

  /**
   * Constructor - Initializes the ReviewManager.
   *
   * @param PDO $dbConnection (Optional)  A PDO database connection object.
   *                            If not provided, reviews are stored in memory.
   */
  public function __construct(PDO $dbConnection = null) {
    $this->dbConnection = $dbConnection;
  }


  /**
   * Adds a new review.
   *
   * @param string $userId    The ID of the user submitting the review.
   * @param string $reviewText The content of the review.
   * @return int|null The ID of the newly created review, or null on failure.
   */
  public function addReview(string $userId, string $reviewText): ?int {
    $reviewId = uniqid(); //Generate unique id
    $this->reviews[$reviewId] = [
      'userId' => $userId,
      'reviewText' => $reviewText,
      'timestamp' => time()
    ];
    return $reviewId;
  }


  /**
   * Retrieves all reviews.
   *
   * @return array  An array of review objects.
   */
  public function getAllReviews(): array {
    return $this->reviews;
  }

  /**
   * Retrieves a review by its ID.
   *
   * @param string $reviewId The ID of the review to retrieve.
   * @return array|null  The review object, or null if not found.
   */
  public function getReviewById(string $reviewId): ?array {
    return $this->reviews[$reviewId] ?? null; //Use null coalescing operator for cleaner code
  }


  /**
   *  Deletes a review by its ID. (Consider security implications before implementing)
   *
   * @param string $reviewId The ID of the review to delete.
   * @return bool True on successful deletion, false otherwise.
   */
  public function deleteReview(string $reviewId): bool {
    if (array_key_exists($reviewId, $this->reviews)) {
      unset($this->reviews[$reviewId]);
      return true;
    }
    return false;
  }

  /**
     * Example database integration using PDO
     *  (This is just a placeholder - you'll need to adapt it to your DB schema)
     *
     *  This demonstrates how you *could* store reviews in a database.
     *  Remove this if you're not using a database.
     *
     * @param string $userId
     * @param string $reviewText
     * @return int|null
     */
    public function addReviewToDB(string $userId, string $reviewText) {
        $reviewId = uniqid();

        if ($this->dbConnection) {
            $stmt = $this->dbConnection->prepare("INSERT INTO reviews (review_id, user_id, review_text, timestamp) VALUES (?, ?, ?, ?)");
            $stmt->execute([$reviewId, $userId, $reviewText, time()]);
            return $reviewId;
        } else {
            //Store in memory if no database connection
            $this->addReview($userId, $reviewText);
            return $reviewId;
        }
    }

}


// Example Usage:

// 1.  Using in-memory storage:
$reviewManager = new ReviewManager();

$reviewId1 = $reviewManager->addReview('user123', 'This is a great product!');
echo "Review ID: " . $reviewId1 . "
";

$review1 = $reviewManager->getReviewById($reviewId1);
echo "Review 1:
" . print_r($review1, true) . "
";


// 2.  With a database (requires database setup - PDO is used here)
//    *  Replace the placeholder connection details with your actual credentials.
try {
    $dbConnection = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");
    $dbConnection = new ReviewManager($dbConnection);
    $reviewId2 = $dbConnection->addReviewToDB('user456', 'Excellent service!');
    echo "Review ID (from DB): " . $reviewId2 . "
";
} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}


<?php

/**
 * Class Review
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class Review
{
    private $db; // Database connection (for demonstration - replace with your actual DB connection)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId  The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating   The rating given (e.g., 1-5).
     * @param string $comment  The user's review comment.
     *
     * @return int|false  The ID of the newly created review on success, or false on failure.
     */
    public function createReview(int $productId, string $username, string $rating, string $comment)
    {
        // Validate input (basic - you should add more robust validation)
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Prepare SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment)
                VALUES (:product_id, :username, :rating, :comment)";

        // Prepare statement
        $stmt = $this->db->prepare($sql); // Assuming $this->db has prepare() method

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute query
        $result = $stmt->execute();

        // Check for errors
        if (!$result) {
            return false;
        }

        // Get the ID of the new review
        $reviewId = $this->db->lastInsertId();

        return (int)$reviewId;
    }


    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $productId  The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        $reviews = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = new ReviewObject($row); // Assuming you have a ReviewObject class
        }

        return $reviews;
    }


    /**
     *  A simplified ReviewObject class for easy access
     */
    private function __construct($data)
    {
      $this->id = $data['id'];
      $this->product_id = $data['product_id'];
      $this->username = $data['username'];
      $this->rating = $data['rating'];
      $this->comment = $data['comment'];
      $this->created_at = $data['created_at'];
    }


    //Getter methods
    public function getId()
    {
      return $this->id;
    }

    public function getProductId()
    {
      return $this->product_id;
    }

    public function getUsername()
    {
      return $this->username;
    }

    public function getRating()
    {
      return $this->rating;
    }

    public function getComment()
    {
      return $this->comment;
    }

    public function getCreatedAt()
    {
      return $this->created_at;
    }
}


/**
 * ReviewObject Class - a simple object to hold review data.
 */
class ReviewObject
{
    public $id;
    public $product_id;
    public $username;
    public $rating;
    public $comment;
    public $created_at;


    public function __construct($data)
    {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->username = $data['username'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }
}


// Example Usage (with a dummy database connection)
// This will need to be replaced with your actual database setup
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');


$review = new Review($db);

// Create a new review
$reviewId = $review->createReview(123, 'john_doe', 5, 'Great product!  Highly recommended.');

if ($reviewId) {
    echo "New review created with ID: " . $reviewId . "<br>";
} else {
    echo "Failed to create review.<br>";
}

// Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

echo "<h2>Reviews for Product 123:</h2>";
foreach ($reviews as $review) {
    echo "<strong>Username:</strong> " . $review->getUsername() . "<br>";
    echo "<strong>Rating:</strong> " . $review->getRating() . " stars<br>";
    echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
    echo "<hr>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function creates a new user review and adds it to a database.
 * It also includes basic input validation and error handling.
 *
 * @param string $username  The username of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $productID   The ID of the product the review is for.
 * @param PDO $pdo       The PDO database connection object.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function addReview(string $username, string $reviewText, int $productID, PDO $pdo)
{
    // Input Validation
    if (empty($username)) {
        error_log("Error: Username cannot be empty.");
        return false;
    }
    if (empty($reviewText)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }
    if (!is_numeric($productID)) {
        error_log("Error: Product ID must be a number.");
        return false;
    }

    // Sanitize Input (Important for Security)
    $username = trim($username); // Remove leading/trailing whitespace
    $reviewText = trim($reviewText);

    // Prepare and Execute the SQL Query
    try {
        $sql = "INSERT INTO reviews (username, review_text, product_id) VALUES (:username, :review_text, :product_id)";
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':product_id', $productID);
        $stmt->execute();

        return true; // Success
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false; // Failure (Database error)
    }
}


// Example Usage (Assuming you have a PDO database connection object named $pdo)
// -----------------------------------------------------------------------

// Dummy PDO connection (Replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_database_user';
$password = 'your_database_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Example Call
$username = 'JohnDoe';
$reviewText = 'This product is amazing!';
$productID = 123;

if (addReview($username, $reviewText, $productID, $pdo)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Timestamp of when the review was created
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     *  Setters (optional - for update functionality)
     */
    public function setComment($comment) {
        $this->comment = $comment;
    }
}

/**
 * User Review Function (Demonstration)
 */
function displayUserReviews($reviews) {
    echo "<h2>User Reviews</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User ID:</strong> " . $review->getUserId() . "<br>";
        echo "<strong>Product ID:</strong> " . $review->getProductId() . "<br>";
        echo "<strong>Rating:</strong> " . $review->getRating() . " / 5<br>";
        echo "<strong>Comment:</strong> " . $review->getComment() . "<br>";
        echo "<strong>Date:</strong> " . $review->getDate() . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Create some review objects
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommended.");
$review2 = new UserReview(null, 789, 456, 4, "Good product, but a little pricey.");
$review3 = new UserReview(null, 123, 789, 3, "Okay product.");


// Store the reviews in an array
$reviews = array($review1, $review2, $review3);

// Display the reviews
displayUserReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It provides basic functionality for managing reviews and includes error handling.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The review comment.
 * @param string $reviewId (Optional) The ID of the review to update.  If not provided, a new review is created.
 * @param string $dbConnection  A database connection object.
 *
 * @return array An array containing:
 *   - 'success': true if the operation was successful, false otherwise.
 *   - 'message': A message indicating the outcome of the operation.
 *   - 'reviewId': The ID of the newly created or updated review.
 *
 */
function create_update_review(
    $productId,
    $username,
    $rating,
    $comment,
    $reviewId = null,
    $dbConnection
) {
    $success = false;
    $message = '';
    $reviewId = null;


    // Validate inputs (basic validation - you should add more robust validation)
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be a number between 1 and 5.', 'reviewId' => null];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'reviewId' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'reviewId' => null];
    }


    // Prepare the SQL query
    $sql = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?) ";

    if ($reviewId !== null) {
        $sql .= " ON DUPLICATE KEY UPDATE comment = ? "; // Update existing review
    }

    $stmt = $dbConnection->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => 'Database preparation error.', 'reviewId' => null];
    }

    $values = array($productId, $username, $rating, $comment);

    if ($stmt->execute($values)) {
        $reviewId = $dbConnection->lastInsertId(); // Get the ID of the newly inserted row
        $success = true;
        $message = 'Review created/updated successfully.';
    } else {
        $success = false;
        $message = 'Error creating/updating review: ' . print_r($stmt->error, true);
    }

    return ['success' => $success, 'message' => $message, 'reviewId' => $reviewId];
}


// Example usage (assuming you have a database connection)
//  You'll need to replace this with your actual database connection
//  and create a table named 'reviews' with columns:
//  - productId (INT)
//  - username (VARCHAR)
//  - rating (INT)
//  - comment (TEXT)
//  - id (INT, PRIMARY KEY, AUTO_INCREMENT)

/*
$dbConnection = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$reviewData = create_update_review(
    123,  // Product ID
    'john_doe', // Username
    4,   // Rating
    'Great product! I highly recommend it.',
    null  // No review ID to update
);

if ($reviewData['success']) {
    echo "Review created with ID: " . $reviewData['reviewId'] . "<br>";
} else {
    echo "Error: " . $reviewData['message'] . "<br>";
}
*/

?>


<?php

/**
 * User Review Function
 *
 * This function handles the submission and display of user reviews.
 */

class UserReview {

    private $db_connection; // Database connection object

    public function __construct($db_config) {
        // Connect to the database
        $this->db_connection = new PDO(
            $db_config['driver'] . ":" . $db_config['host'] . ":" . $db_config['dbname'],
            $db_config['user'],
            $db_config['password']
        );

        // Set the error mode to exception
        $this->db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Submits a new user review.
     *
     * @param string $product_id The ID of the product the review is for.
     * @param string $user_name The name of the user submitting the review.
     * @param string $review_text The text of the review.
     * @return int|false The ID of the newly created review on success, or false on failure.
     */
    public function submitReview($product_id, $user_name, $review_text) {
        try {
            $stmt = $this->db_connection->prepare(
                "INSERT INTO reviews (product_id, user_name, review_text, review_date) VALUES (?, ?, ?, NOW())"
            );
            $stmt->bindParam(1, $product_id);
            $stmt->bindParam(2, $user_name);
            $stmt->bindParam(3, $review_text);
            $stmt->execute();

            return $this->db_connection->lastInsertId(); // Get the ID of the newly created review
        } catch (PDOException $e) {
            error_log("Error submitting review: " . $e->getMessage()); // Log the error for debugging
            return false;
        }
    }

    /**
     * Retrieves all reviews for a given product.
     *
     * @param int $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($product_id) {
        $reviews = [];
        try {
            $stmt = $this->db_connection->prepare(
                "SELECT id, product_id, user_name, review_text, review_date FROM reviews WHERE product_id = ?"
            );
            $stmt->bindParam(1, $product_id);
            $stmt->execute();

            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $reviews[] = (object) [
                    'id' => $row['id'],
                    'product_id' => $row['product_id'],
                    'user_name' => $row['user_name'],
                    'review_text' => $row['review_text'],
                    'review_date' => $row['review_date']
                ];
            }
        } catch (PDOException $e) {
            error_log("Error retrieving reviews: " . $e->getMessage());
            return []; // Return an empty array if an error occurred
        }
        return $reviews;
    }


    /**
     *  Example of deleting a review
     *  (This is just an example - you'd likely have a review ID to pass in)
     */
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db_connection->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->bindParam(1, $review_id);
            $stmt->execute();

            return true; // Success
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }
}

// --- Example Usage ---

// Database configuration (replace with your actual credentials)
$db_config = [
    'driver' => 'mysql',
    'host' => 'localhost',
    'dbname' => 'your_database_name',
    'user' => 'your_database_user',
    'password' => 'your_database_password'
];

// Create a UserReview object
$review = new UserReview($db_config);

// Example: Submit a new review
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'This is a fantastic product!';
$review_id = $review->submitReview($product_id, $user_name, $review_text);

if ($review_id) {
    echo "Review submitted successfully. Review ID: " . $review_id . "
";
} else {
    echo "Failed to submit review.
";
}

// Example: Get reviews for product 1
$reviews = $review->getReviewsByProduct($product_id);

echo "Reviews for product " . $product_id . ":
";
if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "  ID: " . $review->id . ", User: " . $review->user_name . ", Text: " . $review->review_text . "
";
    }
} else {
    echo "No reviews found for this product.
";
}

// Example: Delete a review (you'd typically get the review ID from somewhere)
// $review->deleteReview(1); //  Be careful - this will delete review with ID 1
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating   The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The user's comment/review text.
 * @param int $userId (Optional)  The ID of the user submitting the review. If not provided, it will generate a unique ID.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message': A message indicating the result of the operation.
 *   - 'reviewId': The ID of the newly created review, or the existing review ID if updated.
 *   - 'review': The review data as an associative array.
 */
function createOrUpdateReview(string $productId, string $username, string $rating, string $comment, $userId = null): array
{
    // Input validation
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        return [
            'success' => false,
            'message' => 'All fields are required.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Rating must be a number between 1 and 5.',
            'reviewId' => null,
            'review' => null,
        ];
    }

    // Create a unique review ID (if not provided)
    if ($userId === null) {
        $userId = generateUniqueId();
    }

    // Data to be saved to the database
    $reviewData = [
        'productId' => $productId,
        'userId' => $userId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'created_at' => date('Y-m-d H:i:s'),  // Add timestamp for tracking
    ];

    // Simulate database interaction (Replace with your actual database logic)
    $success = saveReviewToDatabase($reviewData);

    if ($success) {
        return [
            'success' => true,
            'message' => 'Review created/updated successfully.',
            'reviewId' => $userId,
            'review' => $reviewData,
        ];
    } else {
        return [
            'success' => false,
            'message' => 'Failed to save review to database.',
            'reviewId' => null,
            'review' => null,
        ];
    }
}

/**
 * Placeholder function to simulate database interaction.
 * Replace with your actual database logic.
 *
 * @param array $reviewData  The review data to save.
 * @return bool True if the save was successful, false otherwise.
 */
function saveReviewToDatabase(array $reviewData): bool
{
    // *** Replace this with your database logic ***
    // This is just a placeholder for demonstration purposes.

    // Example:  Simulate a successful save.
    // You would typically query your database here.
    //  For example:
    //  $result = $db->insert('reviews', $reviewData);
    //  return $result === false;  // or use $result['insert_id'] to get the ID.

    // In this example, we always return true to simulate success.
    return true;
}


/**
 * Placeholder function to generate a unique ID.
 * Replace with your actual unique ID generation logic.
 */
function generateUniqueId(): string
{
    // *** Replace this with your unique ID generation logic ***
    // Example:
    // return md5(time());  // A simple example.
    return 'unique-review-' . uniqid(); // A more robust example using uniqid()
}


/**
 *  Example Usage:
 */

// Create a new review
$reviewResult = createOrUpdateReview('123', 'JohnDoe', 4, 'Great product! Highly recommended.');

if ($reviewResult['success']) {
    echo "Review created successfully! ID: " . $reviewResult['reviewId'] . "<br>";
    print_r($reviewResult['review']); // Output the review data
} else {
    echo "Error creating review: " . $reviewResult['message'] . "<br>";
}

// Update an existing review (assuming a review ID exists)
$reviewResult = createOrUpdateReview('123', 'JaneSmith', 5, 'Excellent value for money.', 'review-1');

if ($reviewResult['success']) {
    echo "Review updated successfully! ID: " . $reviewResult['reviewId'] . "<br>";
    print_r($reviewResult['review']);
} else {
    echo "Error updating review: " . $reviewResult['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the reviewer.
 * @param array $reviews An array of existing reviews for the product (optional).
 *
 * @return array An array containing the updated reviews, or an error message if submission fails.
 */
function submitReview(string $productId, string $reviewText, string $username, array &$reviews = []): array {
  // Input validation (you can expand on this)
  if (empty($reviewText)) {
    return ['error' => 'Review text cannot be empty.'];
  }

  // Create the review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => time() // Add a timestamp for sorting/filtering
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Display Reviews Function
 *
 * This function displays a list of reviews for a product.
 *
 * @param array $reviews An array of reviews for the product.
 *
 * @return string An HTML string containing the list of reviews, or an error message if no reviews are found.
 */
function displayReviews(array $reviews): string {
  if (empty($reviews)) {
    return "<p>No reviews yet. Be the first!</p>";
  }

  $html = '<ul>';
  foreach ($reviews as $review) {
    $html .= '<li><strong>' . htmlspecialchars($review['username']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . ' (' . date('Y-m-d H:i:s', $review['timestamp']) . ')</li>';
  }
  $html .= '</ul>';

  return $html;
}



// --- Example Usage ---

// Initial Reviews (optional - you'd typically get this from a database)
$productReviews = [];

// Submit a review
$newReviews = submitReview('product123', 'This is a fantastic product!', 'JohnDoe');
print_r($newReviews); // Output: Array ( [0] => Array ( [productId] => product123 [username] => JohnDoe [reviewText] => This is a fantastic product! [timestamp] => 1678886400 ) )

// Submit another review
$newReviews = submitReview('product123', 'Great value for money.', 'JaneSmith');
print_r($newReviews);

// Display the reviews
$reviewHTML = displayReviews($newReviews);
echo $reviewHTML;


// Demonstrating error handling
$errorResult = submitReview('product456', '', 'TestUser');
print_r($errorResult);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes input validation and basic sanitization.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text submitted by the user.
 * @param array $existingReviews (Optional) An array of existing reviews.
 * @return array An array containing the updated reviews.  Returns an empty array on error.
 */
function createAndDisplayUserReview(string $productId, string $reviewerName, string $reviewText, array $existingReviews = []) {

  // Input Validation and Sanitization - Crucial for Security!
  if (empty($reviewerName)) {
    error_log("Error: Reviewer name cannot be empty.");
    return []; // Handle invalid input - return an empty array for this scenario
  }

  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return [];
  }

  $reviewText = trim($reviewText);  // Remove leading/trailing whitespace
  if (strlen($reviewText) > 500) { // Limit review text length
      error_log("Error: Review text exceeds the maximum length of 500 characters.");
      return [];
  }


  // Generate a unique ID for the review (using timestamp for uniqueness)
  $reviewId = uniqid();

  // Create the review data
  $review = [
    'id' => $reviewId,
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => time()  // Store the time of the review
  ];

  // Add the new review to the existing reviews
  $updatedReviews = array_merge($existingReviews, [$review]);  // Merges arrays

  // Log the review submission (for debugging/administration)
  error_log("New review submitted for product ID: " . $productId . " - " . json_encode($review));

  return $updatedReviews;
}

// --- Example Usage ---

// Initial setup - let's assume we have a product with ID '123'
$productReviews = [];

// First review
$newReviews = createAndDisplayUserReview('123', 'John Doe', 'This product is amazing!  I highly recommend it.');
if (!empty($newReviews)) {
    echo "First Review:
";
    print_r($newReviews);
}

// Second review
$newReviews = createAndDisplayUserReview('123', 'Jane Smith', 'It\'s okay, could be better.', $newReviews);
if (!empty($newReviews)) {
    echo "
Second Review:
";
    print_r($newReviews);
}

//Third review - demonstrating adding to existing array
$newReviews = createAndDisplayUserReview('123', 'Peter Jones', 'Fantastic value for money.', $newReviews);
if (!empty($newReviews)) {
    echo "
Third Review:
";
    print_r($newReviews);
}

?>


<?php

/**
 * Reviews class to manage user reviews for a product.
 */
class Review {

  private $productId;
  private $userId;
  private $rating;
  private $comment;

  /**
   * Constructor for the Review class.
   *
   * @param int $productId The ID of the product the review is for.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's written review.
   */
  public function __construct(int $productId, int $userId, int $rating, string $comment) {
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  /**
   * Getters for the review properties.
   *
   * @return mixed
   */
  public function getProductId() {
    return $this->productId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  /**
   * Validates the review data.
   *
   * @return bool True if the review data is valid, false otherwise.
   */
  public function isValid(): bool {
    // Add validation logic here.  For example:
    // - Rating must be between 1 and 5
    // - Comment cannot be empty
    return $this->rating >= 1 && $this->rating <= 5 && !empty($this->comment);
  }

  /**
   *  Outputs the review in a formatted string
   * @return string A formatted string representation of the review.
   */
  public function __toString(): string {
    if (!$this->isValid()) {
      return "Invalid Review Data";
    }
    return "Product ID: " . $this->productId .
           "
User ID: " . $this->userId .
           "
Rating: " . $this->rating .
           "
Comment: " . $this->comment;
  }

}

/**
 *  User review function
 */
function generateReviewUserInterface() {
    echo "<!DOCTYPE html>";
    echo "<html>";
    echo "<head>";
    echo "<title>User Review Form</title>";
    echo "</head>";
    echo "<body>";
    echo "<h1>User Review Form</h1>";

    echo "<form method='post' action='" . htmlspecialchars($_SERVER["PHP_SELF"]) . "'>";
    echo "<label for='productId'>Product ID:</label><br>";
    echo "<input type='number' id='productId' name='productId' required><br><br>";

    echo "<label for='userId'>User ID:</label><br>";
    echo "<input type='number' id='userId' name='userId' required><br><br>";

    echo "<label for='rating'>Rating (1-5):</label><br>";
    echo "<input type='number' id='rating' name='rating' min='1' max='5' required><br><br>";

    echo "<label for='comment'>Comment:</label><br>";
    echo "<textarea id='comment' name='comment' rows='4' cols='50' required></textarea><br><br>";

    echo "<input type='submit' value='Submit Review'>";
    echo "</form>";
    echo "</body>";
    echo "</html>";
}


// Example usage:
// Create a review object
$review = new Review(123, 456, 4, "Great product!");

// Print the review
echo $review; // Output the formatted review string

// Generate HTML for user review form
generateReviewUserInterface();

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, read, update, and delete user reviews.
 *
 *  @param string $review_text The text of the review.
 *  @param int $product_id The ID of the product the review is for.
 *  @param int $user_id The ID of the user submitting the review. (Optional - defaults to the logged-in user)
 *  @param int $rating The rating given for the review (e.g., 1-5).
 *  @return bool|string True on success, error message on failure.
 */
function create_user_review(string $review_text, int $product_id, int $user_id = null, int $rating = null) {
  // --- Input Validation & Sanitization ---
  $review_text = trim($review_text); // Remove leading/trailing whitespace
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  if ($rating === null || $rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  //  You might want to add more robust input validation and sanitization here,
  //  e.g., using a library like Sanitize or filtering out potentially malicious characters.

  // --- Database Interaction (Example using a hypothetical database connection) ---
  // Replace this with your actual database connection and query logic.
  $db = new DatabaseConnection(); // Assume this class handles database connection

  $query = "INSERT INTO reviews (product_id, user_id, review_text, rating) 
            VALUES (" . $product_id . ", " . ($user_id ?? 0) . ", '" . $review_text . "', " . $rating . ")";

  try {
    $result = $db->execute_query($query);
    if ($result) {
      return true; // Success
    } else {
      return "Error: Failed to insert review into database.";
    }
  } catch (Exception $e) {
    return "Error: Database error: " . $e->getMessage();
  }
}


/**
 *  Example of a simplified DatabaseConnection class (replace with your actual implementation)
 */
class DatabaseConnection {
  private $host = "localhost";
  private $username = "your_username";
  private $password = "your_password";
  private $database = "your_database";

  public function execute_query($query) {
    // Replace this with your database connection and query execution logic.
    // This is just a placeholder to demonstrate the workflow.
    try {
        // In a real implementation, you'd use a PDO or MySQLi connection here.
        // Example (using placeholder):
        // $conn = new PDO("mysql:host=$this->host;dbname=$this->database", $this->username, $this->password);
        // $stmt = $conn->prepare($query);
        // $stmt->execute();
        // return $stmt; 
        echo "Executing query: " . $query;
        return true; // Simulate success
    } catch (Exception $e) {
        throw new Exception("Database query error: " . $e->getMessage());
    }
  }
}



// --- Example Usage ---
$product_id = 123;
$review_text = "This product is amazing!  I highly recommend it.";
$user_id = 1; // Assuming user with ID 1 is logged in

$result = create_user_review($review_text, $product_id, $user_id, 5);

if ($result === true) {
  echo "Review created successfully! " . $result . "<br>";
} else {
  echo "Error creating review: " . $result . "<br>";
}


// Example without logged in user (uses the default user - typically the current user).
$result2 = create_user_review("Another good product.", $product_id, null, 4);
if($result2 === true) {
  echo "Review created (anonymous) successfully! " . $result2 . "<br>";
} else {
  echo "Error creating review: " . $result2 . "<br>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor for the UserReview class.
     *
     * @param int $reviewId (optional) - Unique identifier for the review. If not provided, generated.
     * @param int $userId   - ID of the user submitting the review.
     * @param int $productId - ID of the product being reviewed.
     * @param int $rating    - Rating (e.g., 1-5).
     * @param string $comment - User's comment/feedback.
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date('Y-m-d H:i:s'); // Set the date/time of the review
    }

    /**
     * Getters
     *
     * @return mixed
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }


    /**
     *  Setters (Optional - use for data modification)
     *  @param mixed $value
     */

     public function setRating($rating) {
        $this->rating = $rating;
     }

     public function setComment($comment) {
        $this->comment = $comment;
     }


    /**
     *  Display Review (for demonstration)
     *  @return string
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getDate();
    }
}



/**
 * Example Usage
 */
$review1 = new UserReview(null, 123, 456, 5, "Great product! Highly recommend.");
$review2 = new UserReview(10, 789, 112, 4, "Good value for money.");

echo $review1->displayReview() . PHP_EOL;
echo $review2->displayReview() . PHP_EOL;


/**
 *  Function to Process Reviews (example)
 */
function processReviews($reviews) {
    echo "--- Review Summary ---" . PHP_EOL;
    $totalRating = 0;
    $reviewCount = count($reviews);

    foreach ($reviews as $review) {
        $totalRating += $review->getRating();
        echo $review->displayReview() . PHP_EOL;
    }

    if ($reviewCount > 0) {
        $averageRating = $totalRating / $reviewCount;
        echo "Average Rating: " . $averageRating . PHP_EOL;
    } else {
        echo "No reviews yet." . PHP_EOL;
    }
}

// Example usage of the processReviews function
$reviews = [$review1, $review2];
processReviews($reviews);


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productId The unique identifier of the product or service.
 * @param string $userName  The name of the user submitting the review.
 * @param string $userRating  The user's rating (e.g., 1-5 stars).
 * @param string $reviewText The user's written review.
 * @param array $dbConnection  Database connection object (optional - handles connection)
 *
 * @return array  An array containing:
 *               - 'success': true if the review was successfully saved, false otherwise.
 *               - 'message': A message indicating the success or failure of the operation.
 *               - 'review': The newly created review data (if successful).
 */
function saveUserReview(
    string $productId,
    string $userName,
    string $userRating,
    string $reviewText,
    $dbConnection = null // Optional: Database connection object
) {
    $success = false;
    $message = '';
    $review = [];

    // Validate inputs (basic example - expand as needed)
    if (empty($productId) || empty($userName) || empty($userRating) || empty($reviewText)) {
        $message = 'Error: All fields are required.';
        return ['success' => false, 'message' => $message, 'review' => $review];
    }

    // Convert rating to integer (e.g., '5' becomes 5)
    $userRating = (int) $userRating;

    // Sanitize inputs to prevent SQL injection
    $productId = mysqli_real_escape_string($dbConnection, $productId);
    $userName = mysqli_real_escape_string($dbConnection, $userName);
    $reviewText = mysqli_real_escape_string($dbConnection, $reviewText);

    // ***  Database Logic  ***
    try {
        // Construct the SQL query
        $sql = "INSERT INTO reviews (product_id, user_name, rating, review_text)
                VALUES ('$productId', '$userName', $userRating, '$reviewText')";

        // Execute the query
        $result = mysqli_query($dbConnection, $sql);

        if ($result) {
            $success = true;
            $review = [
                'id' => mysqli_insert_id($dbConnection),  // Get the ID of the newly inserted row
                'product_id' => $productId,
                'user_name' => $userName,
                'rating' => $userRating,
                'review_text' => $reviewText,
                'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
            ];
        } else {
            $message = 'Error: Query failed: ' . mysqli_error($dbConnection);
        }
    } catch (Exception $e) {
        $message = 'Database Error: ' . $e->getMessage();
    }

    return ['success' => $success, 'message' => $message, 'review' => $review];
}


/**
 * Function to retrieve reviews for a product
 * @param string $productId The product ID to retrieve reviews for
 * @param array $dbConnection Database connection object
 * @return array An array containing the reviews.
 */
function getReviewsForProduct(string $productId, $dbConnection = null)
{
    $reviews = [];

    try {
        $sql = "SELECT id, user_name, rating, review_text, created_at FROM reviews WHERE product_id = '$productId'";
        $result = mysqli_query($dbConnection, $sql);

        if ($result) {
            while ($row = mysqli_fetch_assoc($result)) {
                $reviews[] = [
                    'id' => $row['id'],
                    'user_name' => $row['user_name'],
                    'rating' => $row['rating'],
                    'review_text' => $row['review_text'],
                    'created_at' => $row['created_at']
                ];
            }
        }
    } catch (Exception $e) {
        error_log("Database Error: " . $e->getMessage()); // Log error for debugging
        // Handle the error appropriately (e.g., display a message to the user)
    }

    return $reviews;
}


// ** Example Usage (Simulated Database Connection) **
// This is just for demonstration.  In a real application, you'd establish
// a proper database connection.

// Create a dummy database connection (replace with your actual connection)
$dbConnection = mysqli_connect("localhost", "username", "password", "database_name");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}



// Example 1: Save a review
$review_data = saveUserReview(
    "123",
    "John Doe",
    "5",
    "This is a fantastic product!  I highly recommend it.",
    $dbConnection
);

if ($review_data['success']) {
    echo "Review saved successfully!<br>";
    print_r($review_data['review']); // Display the saved review data
} else {
    echo "Error saving review: " . $review_data['message'] . "<br>";
}


// Example 2: Get Reviews for Product
$product_reviews = getReviewsForProduct("123", $dbConnection);
echo "<h2>Reviews for Product 123:</h2>";
if (count($product_reviews) > 0) {
    echo "<ul>";
    foreach ($product_reviews as $review) {
        echo "<li><b>User:</b> " . $review['user_name'] . "<br><b>Rating:</b> " . $review['rating'] . "<br><b>Review:</b> " . $review['review_text'] . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews found for this product.</p>";
}

// Close the database connection
mysqli_close($dbConnection);

?>


<?php

/**
 * User Review Function
 *
 * This function handles the submission and display of user reviews.
 * It includes validation, saving to a database, and displaying the reviews.
 *
 * @param string $username The username of the user submitting the review.
 * @param string $review_text The review text entered by the user.
 * @param string $db_host The database host.
 * @param string $db_name The database name.
 * @param string $db_user The database username.
 * @param string $db_password The database password.
 * @return array An array containing:
 *   - 'success' => bool: True if the review was submitted successfully, false otherwise.
 *   - 'message' => string: A message indicating the result of the operation.
 *   - 'reviews' => array: An array of review objects, or an empty array if there are no reviews yet.
 */
function submit_review(string $username, string $review_text, string $db_host, string $db_name, string $db_user, string $db_password) {

    // Validation (Simple example - can be expanded)
    if (empty($username) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Username and review text cannot be empty.',
            'reviews' => []
        ];
    }

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error); // Or handle the error differently
    }

    // Prepare and execute the SQL query
    $stmt = $conn->prepare("INSERT INTO reviews (username, review_text) VALUES (?, ?)");
    $stmt->bind_param("ss", $username, $review_text);
    $stmt->execute();

    // Check for errors
    if ($stmt->errno) {
        $stmt->close();
        return [
            'success' => false,
            'message' => 'Error submitting review: ' . $stmt->error,
            'reviews' => []
        ];
    }

    $stmt->close();

    // Fetch all reviews
    $reviews_query = "SELECT * FROM reviews";
    $result = $conn->query($reviews_query);

    if ($result->num_rows > 0) {
        $reviews = [];
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
    } else {
        $reviews = [];
    }

    // Close connection
    $conn->close();

    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'reviews' => $reviews
    ];
}

// Example Usage:
//  Replace these with your actual database credentials
$db_host = 'localhost';
$db_name = 'my_database';
$db_user = 'my_user';
$db_password = 'my_password';

// Example 1: Successful submission
$result = submit_review('John Doe', 'This is a great product!', $db_host, $db_name, $db_user, $db_password);
print_r($result);
// Example 2:  Empty input
$result = submit_review('', 'This is a review', $db_host, $db_name, $db_user, $db_password);
print_r($result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param array $reviews An array of existing reviews for this product (optional, for updating).
 *
 * @return array An array containing the updated reviews array or a new array if no reviews existed.
 */
function createReview(string $productId, string $username, string $rating, string $comment, array $reviews = []): array
{
    // Input Validation (Important!)
    if (empty($productId)) {
        throw new InvalidArgumentException("Product ID cannot be empty.");
    }
    if (empty($username)) {
        throw new InvalidArgumentException("Username cannot be empty.");
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5.");
    }
    if (empty($comment)) {
        throw new InvalidArgumentException("Comment cannot be empty.");
    }

    // Create the new review
    $newReview = [
        'product_id' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Add the new review to the existing array
    $reviews[] = $newReview;

    return $reviews;
}


/**
 * Function to display reviews for a product.
 *
 * @param array $reviews An array of reviews.
 */
function displayReviews(array $reviews) {
    echo "<h2>Reviews for Product ID: " . $productId = key($reviews) . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "<br>";
        echo "</li>";
    }
    echo "</ul>";
}


// Example Usage:

// Initialize Reviews (Optional - can be done from a database)
$productReviews = [];

// Example 1: Creating a new review
try {
    $productReviews = createReview("123", "JohnDoe", 4, "Great product, highly recommended!");
    displayReviews($productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

// Example 2:  Adding another review
try {
    $productReviews = createReview("123", "JaneSmith", 5, "Excellent value for money!", $productReviews);
    displayReviews($productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

// Example 3:  Demonstrating input validation
try {
    $productReviews = createReview("", "Invalid", 2, "Bad review", $productReviews); // Empty product ID
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It's designed to be used with a database.  For demonstration purposes,
 * we'll assume a simple database connection and table structure.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param string $db_connection A database connection object.
 *
 * @return int|bool  The ID of the newly created review if successful, or false on error.
 */
function createReview(string $productId, string $username, string $rating, string $comment, $db_connection)
{
    // Sanitize and validate inputs (IMPORTANT!)
    $productId = filter_var($productId, FILTER_SANITIZE_NUMBER_INT);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array('min' => 1, 'max' => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    if (!$productId || !$username || !$rating || !$comment) {
        error_log("Error: Missing required review fields."); // Log for debugging
        return false;
    }

    if (!is_numeric($productId)) {
        error_log("Error: Invalid product ID.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Invalid username (only alphanumeric and underscores allowed).");
        return false;
    }


    // Prepare SQL statement (Use prepared statements to prevent SQL injection!)
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
            VALUES (:product_id, :username, :rating, :comment)";

    // Prepare the statement
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    // Bind parameters
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    // Execute the statement
    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    // Get the ID of the newly created review
    $reviewId = $stmt->insert_id;

    // Close the statement
    $stmt->close();

    return $reviewId;
}

/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param int $productId The ID of the product.
 * @param $db_connection A database connection object.
 *
 * @return array An array of review objects, or an empty array if no reviews are found.
 */
function getReviewsForProduct(int $productId, $db_connection)
{
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return [];
    }

    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    $stmt->close();
    return $reviews;
}


/**
 * Update Review
 *
 * Updates an existing review.
 *
 * @param int $reviewId The ID of the review to update.
 * @param string $rating The new rating.
 * @param string $comment The new comment.
 * @param $db_connection A database connection object.
 *
 * @return bool True on success, false on failure.
 */
function updateReview(int $reviewId, string $rating, string $comment, $db_connection)
{
    $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


/**
 * Delete Review
 *
 * Deletes a review.
 *
 * @param int $reviewId The ID of the review to delete.
 * @param $db_connection A database connection object.
 *
 * @return bool True on success, false on failure.
 */
function deleteReview(int $reviewId, $db_connection)
{
    $sql = "DELETE FROM reviews WHERE id = :id";
    $stmt = $db_connection->prepare($sql);

    if (!$stmt) {
        error_log("Error preparing statement.");
        return false;
    }

    $stmt->bindParam(':id', $reviewId);

    if (!$stmt->execute()) {
        error_log("Error executing statement: " . $stmt->error);
        return false;
    }

    return true;
}


// Example Usage (Illustrative - requires database setup)
// Create a database connection (replace with your actual connection details)
// $db_connection = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
// $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling for errors

// Create a review
// $reviewId = createReview(123, "JohnDoe", 4, "Great product!", $db_connection);
// if ($reviewId) {
//     echo "Review created with ID: " . $reviewId . "<br>";
// } else {
//     echo "Error creating review.<br>";
// }

// Get reviews for product 123
// $reviews = getReviewsForProduct(123, $db_connection);
// echo "Reviews for product 123:<br>";
// foreach ($reviews as $review) {
//     echo "Product ID: " . $review['product_id'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
// }

// Update a review
// if (updateReview(1, 5, "Excellent!", $db_connection)) {
//     echo "Review updated successfully.<br>";
// } else {
//     echo "Error updating review.<br>";
// }

// Delete a review
// if (deleteReview(1, $db_connection)) {
//     echo "Review deleted successfully.<br>";
// } else {
//     echo "Error deleting review.<br>";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $productName The name of the product.
 * @param string $reviewText The text of the review submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @param array  $reviews An optional array of existing reviews to populate the display.  If empty, a new array is created.
 *
 * @return array An array containing the reviews.  Returns an empty array if an error occurs.
 */
function createAndDisplayReview(string $productId, string $productName, string $reviewText, string $username, array $reviews = []) {

  // Input validation - crucial for security and data integrity
  if (empty($reviewText)) {
    return []; // Return empty array if review text is empty
  }
  if (strlen($reviewText) > 1000) { // Simple length limit (adjust as needed)
    return []; // Return empty array if review text is too long
  }

  // Create the review object (you might want a more sophisticated Review class)
  $review = [
    'productId' => $productId,
    'productName' => $productName,
    'username' => $username,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s') // Add timestamp for organization
  ];

  // Add the new review to the existing array
  $reviews[] = $review;

  return $reviews;
}

/**
 * Displays the reviews for a given product.
 *
 * @param array $reviews An array of review objects.
 *
 * @return string HTML output of the reviews.  Returns an empty string if there are no reviews.
 */
function displayReviews(array $reviews) {
  if (empty($reviews)) {
    return '<p>No reviews yet.</p>';
  }

  $html = '<ul>';
  foreach ($reviews as $review) {
    $html .= '<li>';
    $html .= '<p><strong>' . htmlspecialchars($review['username']) . ':</strong> ' . htmlspecialchars($review['reviewText']) . '</p>';
    $html .= '<p><em>' . htmlspecialchars($review['timestamp']) . '</p>';
    $html .= '</li>';
  }
  $html .= '</ul>';
  return $html;
}


// Example Usage:

// Initial Review
$productID = '123';
$productName = 'Awesome Widget';
$reviewText = 'This widget is fantastic!  It works perfectly.';
$username = 'JohnDoe';
$reviews = createAndDisplayReview($productID, $productName, $reviewText, $username);

// Display the reviews
echo "<h2>Reviews for " . $productName . "</h2>";
echo displayReviews($reviews);


// Adding another review
$reviews = createAndDisplayReview($productID, $productName, 'Another great product!', 'JaneSmith');
echo "<h2>More Reviews for " . $productName . "</h2>";
echo displayReviews($reviews);

?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $productId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * @param int $reviewId (optional, defaults to 0)
   * @param int $userId
   * @param int $productId
   * @param int $rating (1-5)
   * @param string $comment
   */
  public function __construct($reviewId = 0, $userId, $productId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the review date/time
  }

  /**
   * Getters and Setters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function setReviewId($reviewId) {
    $this->reviewId = $reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function setUserId($userId) {
    $this->userId = $userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function setProductId($productId) {
    $this->productId = $productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function setRating($rating) {
    if ($rating >= 1 && $rating <= 5) {
      $this->rating = $rating;
    } else {
      // Handle invalid rating (e.g., log an error, throw an exception)
      error_log("Invalid rating provided: " . $rating); // Log the error
      // Or:  throw new Exception("Invalid rating. Rating must be between 1 and 5.");
    }
  }

  public function getComment() {
    return $this->comment;
  }

  public function setComment($comment) {
    $this->comment = $comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   *  Method to display the review data
   *  Useful for printing or returning from a function
   *
   * @return array An associative array containing the review data
   */
  public function toArray() {
    return [
      'review_id' => $this->getReviewId(),
      'user_id' => $this->getUserId(),
      'product_id' => $this->getProductId(),
      'rating' => $this->getRating(),
      'comment' => $this->getComment(),
      'date' => $this->getDate()
    ];
  }
}


/**
 * User Review Review Function
 */
function reviewProduct($userId, $productId, $rating, $comment) {
  // Validation (basic - more robust validation is recommended for production)
  if (!is_numeric($userId) || !is_numeric($productId) || !is_numeric($rating)) {
    return "Error: Invalid input.  User ID, Product ID, and Rating must be numeric.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Create a new review object
  $review = new UserReview($userId, $productId, $rating, $comment);

  // You would typically save this review to a database here.
  // For example:
  // $review->saveToDatabase();

  // Return the review data in a user-friendly format
  return $review->toArray();
}


// --- Example Usage ---
// Review example 1
$reviewData1 = reviewProduct(123, 456, 4, "Great product!  I love it.");
print_r($reviewData1);
echo "
";

// Review example 2 - demonstrating error handling
$reviewData2 = reviewProduct("abc", 789, 3, "Okay, but could be better.");
echo $reviewData2;
echo "
";

// Review example 3 - Demonstrating invalid rating handling
$reviewData3 = reviewProduct(456, 789, 6, "Fantastic!");
print_r($reviewData3);
echo "
";


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a product or service.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The review comment.
 * @param array $reviews (Optional) An array of existing reviews for the product.  Defaults to an empty array.
 *
 * @return array An array of reviews, including the new review added.
 */
function createAndManageReviews(string $productId, string $username, string $rating, string $comment, array &$reviews = []): array {
    // Validate input (Basic example - enhance with more robust validation)
    if (!is_numeric($rating) || !is_int($rating) || $rating < 1 || $rating > 5) {
        return $reviews; // Return existing reviews if invalid rating
    }

    // Add the new review
    $review = [
        'productId' => $productId,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time() // Add a timestamp for sorting
    ];
    $reviews[] = $review;

    // Sort reviews by timestamp (most recent first)
    usort($reviews, function($a, $b) {
        return $b['timestamp'] - $a['timestamp'];
    });

    return $reviews;
}

// --------------------- Example Usage ---------------------

// Initialize an empty array of reviews
$reviews = [];

// Create some reviews
$reviews = createAndManageReviews('product123', 'john.doe', 4, 'Great product!  Highly recommended.', $reviews);
$reviews = createAndManageReviews('product123', 'jane.smith', 5, 'Excellent service and fast delivery.', $reviews);
$reviews = createAndManageReviews('product456', 'peter.jones', 3, 'It was okay, nothing special.', $reviews); // Another product

// Display the reviews
echo "<h2>Reviews for Product 123:</h2>";
if (count($reviews)) {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . $review['rating'] . " - " . $review['comment'] . " (Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . ")</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}

echo "<h2>Reviews for Product 456:</h2>";
if (count($reviews)) {
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . $review['rating'] . " - " . $review['comment'] . " (Timestamp: " . date("Y-m-d H:i:s", $review['timestamp']) . ")</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, display, and manage user reviews for a specific item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_id The unique identifier for the user submitting the review.
 * @param string $rating  The user's rating (e.g., 1-5 stars).
 * @param string $comment The user's review comment.
 *
 * @return bool True on success, false on failure.
 */
function create_user_review(string $item_id, string $user_id, string $rating, string $comment) {
  // ** Validation - VERY IMPORTANT!  Adapt this to your specific requirements.  **
  //  This is a basic example. You should add more robust validation here,
  //  such as checking for valid rating values, input lengths, and potentially
  //  sanitization to prevent XSS attacks.

  if (empty($item_id) || empty($user_id) || empty($rating) || empty($comment)) {
    error_log("Error: Missing required fields for review submission.");
    return false;
  }

  if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
    error_log("Error: Invalid rating value. Rating must be an integer between 1 and 5.");
    return false;
  }

  if (strlen($comment) > 500) {  // Limit comment length to prevent abuse
    error_log("Error: Comment exceeds maximum length.");
    return false;
  }

  // ** Database Interaction - Replace with your database connection and logic. **
  // This is a placeholder example.  Adapt it to your database system (MySQL, PostgreSQL, etc.).

  try {
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $db->prepare("INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (:item_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $stmt->execute();
    return true; // Success!

  } catch (PDOException $e) {
    error_log("Error creating review: " . $e->getMessage());  // Log the error for debugging
    return false; // Failed to create review
  }
}


// ** Example Usage (Demonstration) **
//
// Assuming you have a "reviews" table in your database with columns:
// - item_id (VARCHAR)
// - user_id (VARCHAR)
// - rating (INT)
// - comment (TEXT)
//
// $item_id = "product123";
// $user_id = "user456";
// $rating = 4;
// $comment = "Great product, would recommend!";

// if (create_user_review($item_id, $user_id, $rating, $comment)) {
//   echo "Review submitted successfully!";
// } else {
//   echo "Error submitting review.";
// }


// **  Displaying Reviews (Example - Adapt to your presentation needs) **

/**
 * Displays reviews for a given item.
 *
 * @param string $item_id The item ID to retrieve reviews for.
 */
function display_reviews(string $item_id) {
    try {
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        $stmt = $db->prepare("SELECT * FROM reviews WHERE item_id = :item_id");
        $stmt->bindParam(':item_id', $item_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

        if (empty($reviews)) {
            echo "<p>No reviews found for this item.</p>";
        } else {
            echo "<h2>Reviews for " . $item_id . "</h2>";
            echo "<ul>";
            foreach ($reviews as $review) {
                echo "<li>";
                echo "<strong>User:</strong> " . $review['user_id'] . "<br>";
                echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
                echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>"; // Sanitize output!
                echo "</li>";
            }
            echo "</ul>";
        }

    } catch (PDOException $e) {
        error_log("Error retrieving reviews: " . $e->getMessage());
        echo "<p>Error retrieving reviews.</p>";
    }
}


// Example of calling the display function
// display_reviews("product123");



?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It includes input validation and basic sanitization.
 *
 * @param string $productId The ID of the product or service being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param string $username The username of the user submitting the review.
 * @return array An array containing:
 *   - 'success': True if the review was successfully submitted, False otherwise.
 *   - 'message': A message indicating the status of the review submission.
 *   - 'review': The submitted review data (success only).
 */
function submitReview(string $productId, string $reviewText, string $username): array
{
    // Input Validation
    if (empty($productId)) {
        return [
            'success' => false,
            'message' => 'Product ID cannot be empty.',
            'review' => null,
        ];
    }

    if (empty($reviewText)) {
        return [
            'success' => false,
            'message' => 'Review text cannot be empty.',
            'review' => null,
        ];
    }

    // Sanitize input (basic example - can be expanded)
    $reviewText = htmlspecialchars($reviewText);  // Prevents XSS attacks

    // TODO:  Add more robust sanitization and validation here
    // For example, limit review length, allow only certain characters, etc.

    // Store the review (Placeholder - Replace with your database logic)
    // This is just a simulation - in a real application, you'd save this data to a database.
    $reviewData = [
        'productId' => $productId,
        'username' => $username,
        'reviewText' => $reviewText,
        'timestamp' => time()  // Add timestamp for ordering
    ];

    // Simulate saving to database
    //saveReviewToDatabase($reviewData);  // Replace with your actual database saving function

    // Return successful response
    return [
        'success' => true,
        'message' => 'Review submitted successfully!',
        'review' => $reviewData,
    ];
}


/**
 * Function to display the review based on product ID.  This is just a placeholder.
 *
 * @param string $productId The ID of the product or service.
 * @return string The HTML display of the review.
 */
function displayReview(string $productId): string
{
    // Replace with your database query to retrieve the review for the given product ID
    // This is just a demo - using a hardcoded review for this example.

    $reviews = [
        'product1' => [
            'username' => 'John Doe',
            'reviewText' => 'Great product!  I highly recommend it.',
            'timestamp' => time()
        ],
        'product2' => [
            'username' => 'Jane Smith',
            'reviewText' => 'The service was excellent. Very helpful staff.',
            'timestamp' => time()
        ]
    ];

    if (isset($reviews[$productId])) {
        return sprintf(
            '<b>Username:</b> %s<br>
            <b>Review:</b> %s<br>
            <b>Timestamp:</b> %s',
            $reviews[$productId]['username'],
            $reviews[$productId]['reviewText'],
            $reviews[$productId]['timestamp']
        );
    } else {
        return 'No reviews found for this product.';
    }
}

// Example Usage:
$productId = 'product1';  // Or 'product2'
$reviewText = 'This is a fantastic review!';
$username = 'Test User';

$result = submitReview($productId, $reviewText, $username);

if ($result['success']) {
    echo "Review submitted successfully!<br>";
    echo "Review Data: " . print_r($result['review'], true) . "<br>";
    echo displayReview($productId); // Display the review
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the user submitting the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param array $reviews  An existing array of reviews for the product (optional).
 *
 * @return array  The updated array of reviews.
 */
function createAndDisplayReview(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
  // Validation (Simple - extend as needed)
  if (empty($rating) || !is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
    echo "<p style='color: red;'>Invalid rating. Rating must be a number between 1 and 5.</p>";
    return $reviews; // Return existing reviews - don't add invalid ones
  }

  if (empty($comment)) {
    echo "<p style='color: red;'>Please enter a review comment.</p>";
    return $reviews;
  }
  
  // Create the review object (could be an array, object, or custom class)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date' => date('Y-m-d H:i:s') // Add a timestamp for the review
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Display the review (optional - you can remove this and handle display elsewhere)
  echo "<div class='review'>";
  echo "<p><strong>Username:</strong> " . htmlspecialchars($username) . "</p>";
  echo "<p><strong>Rating:</strong> " . htmlspecialchars($rating) . "</p>";
  echo "<p><strong>Comment:</strong> " . htmlspecialchars($comment) . "</p>";
  echo "<p><strong>Date:</strong> " . htmlspecialchars($review['date']) . "</p>";
  echo "</div>";
  
  return $reviews;
}


// Example usage:
$productReviews = [];

// Create a review
$productReviews = createAndDisplayReview("product123", "JohnDoe", 4, "Great product!  I highly recommend it.", $productReviews);

// Create another review
$productReviews = createAndDisplayReview("product123", "JaneSmith", 5, "Excellent value for money.", $productReviews);

// Display all reviews
echo "<h2>Product Reviews for Product 123:</h2>";
foreach ($productReviews as $review) {
  echo $review['comment'] . "<br>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It includes input validation, sanitization, and basic data storage.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int    $rating     The rating (1-5).
 *
 * @return bool|string  Returns true on success, or an error message as a string on failure.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating) {

  // Input Validation -  Crucial for security and data integrity
  if (empty($product_id)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($user_name)) {
    return "Error: User name cannot be empty.";
  }
  if (empty($review_text)) {
    return "Error: Review text cannot be empty.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Error: Rating must be between 1 and 5.";
  }

  // Sanitize Input - Prevent common vulnerabilities (SQL injection, XSS, etc.)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING); // Basic sanitization - adjust as needed
  $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

  // Data Validation -  Check that sanitized data is valid.
  if (!ctype_alnum($user_name)) {
    return "Error: User name must contain only letters and numbers.";
  }

  //  Database Interaction - Replace with your actual database code
  try {
    // Establish database connection (replace with your connection details)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Example
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)");

    // Bind parameters
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);

    // Execute the statement
    $stmt->execute();

    return true; // Success
  } catch (PDOException $e) {
    // Handle database errors
    return "Error: Database error - " . $e->getMessage();
  }
}

// Example Usage:
$product_id = "123";
$user_name = "John Doe";
$review_text = "This product is amazing!";
$rating = 5;

$result = submit_review($product_id, $user_name, $review_text, $rating);

if ($result === true) {
  echo "Review submitted successfully!";
} else {
  echo $result;  // Display the error message
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input (review text and rating) and
 * stores it in a database.  It includes basic input validation and error handling.
 *
 * @param string $reviewText The user's review text.
 * @param int $rating A rating from 1 to 5.
 * @param string $productId The ID of the product being reviewed. (For example, from a database)
 * @return bool True if the review was successfully stored, false otherwise.
 */
function storeUserReview(string $reviewText, int $rating, string $productId)
{
    // Input Validation
    if (empty($reviewText)) {
        error_log("Invalid review text: Empty review text provided.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    if (empty($productId)) {
        error_log("Invalid product ID: Product ID cannot be empty.");
        return false;
    }


    // **Simulated Database Interaction (Replace with your actual database logic)**
    // This part simulates storing the review in a database.  You'll need to
    // replace this with your actual database connection and query logic.
    $review = [
        'review_text' => $reviewText,
        'rating' => $rating,
        'product_id' => $productId,
        'created_at' => date('Y-m-d H:i:s'),  // Add timestamp for tracking
    ];

    // Example:  Storing to a simple array (replace with your database insert)
    $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Ensure session exists
    $reviews[] = $review;
    $_SESSION['reviews'] = $reviews;



    // **Error Logging (Recommended)**
    error_log("User review stored: " . $reviewText . " - Rating: " . $rating . " - Product ID: " . $productId);


    return true;
}


// **Example Usage (For testing)**
// Assume you have a form to submit the review.
// This is just an example; you'll integrate this with your form.

// Simulate form submission
// $_POST['review_text'] = "This product is amazing!";
// $_POST['rating'] = 5;
// $_POST['product_id'] = "123";


// if (isset($_POST['review_text']) && isset($_POST['rating']) && isset($_POST['product_id'])) {
//     if (storeUserReview($_POST['review_text'], $_POST['rating'], $_POST['product_id'])) {
//         echo "Review submitted successfully!";
//     } else {
//         echo "Error submitting review.  Please try again.";
//     }
// }


?>


<?php

// Assuming you have a database connection established in $conn

function storeUserReview(string $reviewText, int $rating, string $productId) {
  // Validation (keep the same)

  $stmt = $conn->prepare("INSERT INTO reviews (review_text, rating, product_id, created_at) VALUES (?, ?, ?, NOW())");
  $stmt->bind_param("ssis", $reviewText, $productId, $rating);

  if ($stmt->execute()) {
    return true;
  } else {
    error_log("Error storing review: " . $stmt->error);
    return false;
  }
  $stmt->close();
}

// ... rest of the function code
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process user reviews,
 * including saving them to a database or displaying them.
 *
 * @param string $username     The username of the reviewer.
 * @param string $review_text  The text of the review.
 * @param int    $rating       The rating (e.g., 1-5).
 * @param int    $product_id  The ID of the product being reviewed.
 * @param array $options (Optional) Array of options to customize the function.
 *                       - 'save_to_db' (bool):  Whether to save to the database (default: true)
 *                       - 'db_host'        (string): Database host (e.g., 'localhost')
 *                       - 'db_name'        (string): Database name
 *                       - 'db_user'        (string): Database username
 *                       - 'db_pass'        (string): Database password
 *
 * @return array  An array containing the review details or an error message if saving failed.
 */
function create_user_review(
    string $username,
    string $review_text,
    int $rating,
    int $product_id,
    array $options = []
): array
{
    // Validate inputs (basic example - expand for production)
    if (empty($username)) {
        return ['error' => 'Username cannot be empty.'];
    }
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Default options
    $options = array_merge([
        'save_to_db' => true,
        'db_host' => 'localhost',
        'db_name' => 'your_database_name',
        'db_user' => 'your_database_user',
        'db_pass' => 'your_database_password',
    ], $options); // Merge with provided options

    // Save to Database (Example - Adapt for your database)
    $review_data = [
        'username' => $username,
        'review_text' => $review_text,
        'rating' => $rating,
        'product_id' => $product_id,
        'created_at' => date('Y-m-d H:i:s'),
    ];

    try {
        // Connect to the database
        $conn = new mysqli($options['db_host'], $options['db_user'], $options['db_pass'], $options['db_name']);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception('Connection failed: ' . $conn->connect_error);
        }

        // Execute the query
        $sql = "INSERT INTO reviews (username, review_text, rating, product_id, created_at) VALUES (?, ?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ssis", $review_data['username'], $review_data['review_text'], $review_data['rating'], $review_data['product_id']);
        $stmt->execute();

        // Check if the query was successful
        if ($stmt->affected_rows === 0) {
           throw new Exception('Failed to insert review into database.');
        }

        // Close the statement and connection
        $stmt->close();
        $conn->close();

        return ['success' => 'Review created successfully.'];

    } catch (Exception $e) {
        return ['error' => 'Error creating review: ' . $e->getMessage()];
    }
}


// Example Usage:
$review = create_user_review(
    'john_doe',
    'This product is amazing!',
    5,
    123,
    [
        'save_to_db' => false, // Don't save to the database
        'db_host' => 'localhost',
        'db_name' => 'my_reviews',
    ]
);

print_r($review); // Output the review details or error message
?>


<?php

/**
 * User Review Class
 *
 * This class allows users to submit and manage reviews.
 */
class UserReview
{
    /**
     * @var array Array of reviews
     */
    private $reviews = [];

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $reviewer  The name of the reviewer.
     * @param string $comment   The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., invalid input).
     */
    public function addReview(string $reviewer, string $comment)
    {
        if (empty($reviewer) || empty($comment)) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'reviewer' => $reviewer,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by a specific reviewer.
     *
     * @param string $reviewer The name of the reviewer to filter by.
     * @return array An array of review objects for the specified reviewer.
     */
    public function getReviewsByReviewer(string $reviewer)
    {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['reviewer'] === $reviewer) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews.
     */
    public function displayReviews()
    {
        echo "<table border='1'>
";
        echo "<tr><th>Reviewer</th><th>Comment</th><th>Date</th></tr>
";

        foreach ($this->getAllReviews() as $review) {
            echo "<tr>
";
            echo "<td>" . htmlspecialchars($review['reviewer']) . "</td>
";
            echo "<td>" . htmlspecialchars($review['comment']) . "</td>
";
            echo "<td>" . htmlspecialchars($review['date']) . "</td>
";
            echo "</tr>
";
        }
        echo "</table>
";
    }
}

// Example Usage:

// Create a new review object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview("John Doe", "Great product!  Highly recommended.");
$reviewSystem->addReview("Jane Smith", "The product is okay, but could be better.");
$reviewSystem->addReview("Peter Jones", "Excellent value for money.");

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific reviewer
echo "<br><h2>Reviews by John Doe:</h2>";
$johnReviews = $reviewSystem->getReviewsByReviewer("John Doe");
if (count($johnReviews) > 0) {
    foreach ($johnReviews as $review) {
        echo htmlspecialchars($review['comment']) . "<br>";
    }
} else {
    echo "No reviews found for John Doe.";
}

?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows users to submit reviews, displays them, and handles
 * basic data validation.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @param string $rating  The rating (e.g., 1-5).  Should be validated.
 *
 * @return array  An array containing success/failure status and any error messages.
 */
function handleUserReview(string $username, string $reviewText, string $rating) {

  // Validate input - VERY IMPORTANT!
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }

  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
    return ['success' => false, 'message' => 'Invalid rating.  Please enter a number between 0 and 5.'];
  }


  // In a real application, you would save this data to a database.
  // This is just a simplified demonstration.

  // Simulate saving the review (replace with database interaction)
  $review = [
    'username' => $username,
    'review' => $reviewText,
    'rating' => $rating,
    'timestamp' => time()  // Add a timestamp for ordering
  ];

  // Add review to a simple array (replace with database)
  $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; //use session for simplicity

  $reviews[] = $review;
  $_SESSION['reviews'] = $reviews;



  return ['success' => true, 'message' => 'Review submitted successfully!'];
}



// Example usage (for demonstration) -  This won't run when you visit the page
// You'd likely use this in a controller function within a web framework
if (isset($_POST['username']) && isset($_POST['review']) && isset($_POST['rating'])) {
    $username = $_POST['username'];
    $reviewText = $_POST['review'];
    $rating = $_POST['rating'];

    $result = handleUserReview($username, $reviewText, $rating);

    if ($result['success']) {
        echo '<p style="color: green;">' . $result['message'] . '</p>';
    } else {
        echo '<p style="color: red;">' . $result['message'] . '</p>';
    }
}


//  Example HTML form for submitting the review
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review Form</title>
</head>
<body>

    <h1>Submit a Review</h1>

    <form method="post" action="">  <!-- Important:  'action=""'  means the form posts to the same page -->

        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="review">Review Text:</label>
        <textarea id="review" name="review" rows="4" cols="50" required></textarea><br><br>

        <label for="rating">Rating (1-5):</label>
        <input type="number" id="rating" name="rating" min="1" max="5" required><br><br>

        <button type="submit">Submit Review</button>
    </form>


    <h2>Existing Reviews</h2>

    <?php
    // Display existing reviews (for demonstration)
    if (isset($_SESSION['reviews'])) {
        echo '<h3>Reviews:</h3>';
        echo '<ul>';
        foreach ($_SESSION['reviews'] as $review) {
            echo '<li><strong>Username:</strong> ' . htmlspecialchars($review['username']) . '<br>';
            echo '<strong>Review:</strong> ' . htmlspecialchars($review['review']) . '<br>';
            echo '<strong>Rating:</strong> ' . $review['rating'] . ' (Submitted: ' . date('Y-m-d H:i:s', $review['timestamp']) . ')</li>';
        }
        echo '</ul>';
    } else {
        echo '<p>No reviews yet.</p>';
    }
    ?>


</body>
</html>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes basic validation and database interaction (using a placeholder database).
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText The user-submitted review text.
 * @param string $dbHost     The database host.
 * @param string $dbUser     The database user.
 * @param string $dbPassword The database password.
 * @param string $dbName     The database name.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully submitted, false otherwise.
 *               - 'message':  A message indicating the status of the review submission.
 *               - 'review_id': The ID of the newly created review (if successful).
 */
function submitReview(string $productName, string $reviewText, string $dbHost, string $dbUser, string $dbPassword, string $dbName)
{
    // Validate input (very basic - improve for production)
    if (empty($productName) || empty($reviewText)) {
        return ['success' => false, 'message' => 'Product name and review text cannot be empty.', 'review_id' => null];
    }

    // Sanitize input (important for security - use proper escaping techniques)
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);

    // Database connection (using a placeholder - replace with your actual connection code)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return ['success' => false, 'message' => "Failed to connect to database: " . $conn->connect_error, 'review_id' => null];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (product_name, review_text, review_date) VALUES (?, ?, NOW())";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return ['success' => false, 'message' => "Failed to prepare statement: " . $conn->error, 'review_id' => null];
    }

    // Bind parameters
    $stmt->bind_param("ss", $productName, $reviewText);

    // Execute the statement
    if (!$stmt->execute()) {
        return ['success' => false, 'message' => "Failed to insert review: " . $stmt->error, 'review_id' => null];
    }

    // Get the ID of the newly created review
    $review_id = $conn->insert_id;

    // Close the statement and connection
    $stmt->close();
    $conn->close();

    return ['success' => true, 'message' => 'Review submitted successfully!', 'review_id' => $review_id];
}


// Example Usage:
//  (Replace these with your actual database credentials)
$dbHost = 'localhost';
$dbUser = 'your_db_user';
$dbPassword = 'your_db_password';
$dbName = 'your_db_name';


// Test submission
$reviewResult = submitReview('Awesome Product', 'This is an amazing product!  I highly recommend it.', $dbHost, $dbUser, $dbPassword, $dbName);

if ($reviewResult['success']) {
    echo "Review submitted successfully! Review ID: " . $reviewResult['review_id'] . "<br>";
} else {
    echo "Error submitting review: " . $reviewResult['message'] . "<br>";
}



// Example of displaying reviews (this part needs to be implemented based on your database setup)
/*
$sql = "SELECT * FROM reviews WHERE product_name = 'Awesome Product'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<h2>Reviews for Awesome Product:</h2>";
    while ($row = $result->fetch_assoc()) {
        echo "<p><strong>Reviewer:</strong> [Reviewer Name] (Not implemented in this example)<br>";
        echo "<strong>Date:</strong> " . $row["review_date"] . "<br>";
        echo "<strong>Review:</strong> " . $row["review_text"] . "</p>";
    }
} else {
    echo "No reviews found for this product.";
}
*/
?>


<?php

/**
 * Class UserReview
 *
 * Provides functionality to add, retrieve, and display user reviews.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise (e.g., if username is empty).
     */
    public function addReview(string $username, string $comment): bool
    {
        if (empty($username) || empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'username' => $username,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp for tracking
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product (simulated - assumes a product ID).
     * This is a placeholder, and you'd need to adapt this to your specific data structure.
     *
     * @param int $productID The ID of the product.
     * @return array An array of review objects for the specified product.
     */
    public function getReviewsByProduct(int $productID): array
    {
        // Placeholder logic - replace with your actual data retrieval.
        // This example just returns all reviews.
        return $this->getAllReviews(); // Replace with actual filtering logic.
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return void  Prints the reviews to the console/browser.
     */
    public function displayReviews(): void
    {
        echo "<pre>"; // Use <pre> tags for better formatting in HTML output.
        foreach ($this->getAllReviews() as $review) {
            echo "Username: " . htmlspecialchars($review['username']) . "
";
            echo "Comment: " . htmlspecialchars($review['comment']) . "
";
            echo "Date: " . $review['date'] . "
";
            echo "---
";
        }
        echo "</pre>";
    }
}

// Example Usage:
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('JohnDoe', 'Great product, highly recommended!');
$reviewSystem->addReview('JaneSmith', 'Could be better, some issues with the UI.');
$reviewSystem->addReview('PeterJones', 'Excellent value for the money.');

// Display all reviews
echo "<h2>All Reviews:</h2>";
$reviewSystem->displayReviews();

// Get reviews for a specific product (simulated)
echo "<br><h2>Reviews for Product 123:</h2>";
$productReviews = $reviewSystem->getReviewsByProduct(123);
if (!empty($productReviews)) {
    foreach ($productReviews as $review) {
        echo "Username: " . htmlspecialchars($review['username']) . "
";
        echo "Comment: " . htmlspecialchars($review['comment']) . "
";
        echo "---
";
    }
} else {
    echo "No reviews found for this product.";
}
?>


// Assuming a database connection is already established ($db)

// Add a review
$username = 'JohnDoe';
$comment = 'Great product, highly recommended!';

$sql = "INSERT INTO reviews (username, comment, product_id, date)
        VALUES ('$username', '$comment', 123, NOW())";

// Execute the query
if ($db->query($sql) === TRUE) {
  // Review added successfully
  echo "Review added successfully!";
} else {
  echo "Error adding review: " . $db->error;
}


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews
 * for a given item (e.g., product, movie, book).
 *
 * Assumptions:
 *  - You have a database connection established (e.g., using mysqli or PDO).
 *  - You have a table named 'reviews' with columns:
 *      - id (INT, PRIMARY KEY, AUTO_INCREMENT)
 *      - item_id (INT, FOREIGN KEY referencing your item's ID)
 *      - user_id (INT, FOREIGN KEY referencing your users table)
 *      - rating (INT, 1-5)
 *      - comment (TEXT)
 *      - created_at (TIMESTAMP)
 *
 * @param int $itemId The ID of the item the review is for.
 * @param int $userId The ID of the user writing the review. (Optional, if user is known)
 * @param string $rating The rating (1-5).
 * @param string $comment The review comment.
 * @return array An array containing:
 *              - 'success': True if the review was created/updated successfully, False otherwise.
 *              - 'message':  A message indicating the result (e.g., "Review created successfully", "Review updated successfully").
 *              - 'review': The newly created or updated review object (if successful).
 */
function createOrUpdateReview(int $itemId, int $userId = 0, string $rating, string $comment) : array
{
    global $db; // Assuming you have a database connection variable named $db

    // Validate input
    if (!is_numeric($itemId) || $itemId <= 0) {
        return ['success' => false, 'message' => 'Invalid item ID.', 'review' => null];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating (1-5).', 'review' => null];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Comment cannot be empty.', 'review' => null];
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (item_id, user_id, rating, comment) VALUES (?, ?, ?, ?)
            ON DUPLICATE KEY UPDATE rating = VALUES(rating), comment = VALUES(comment)";

    // Prepare the statement
    $stmt = $db->prepare($sql);

    // Bind parameters
    $stmt->bind_param("isss", $itemId, $userId, $rating, $comment);

    // Execute the statement
    if ($stmt->execute()) {
        // Get the last inserted row (for retrieving the review ID)
        $review = $db->query("SELECT * FROM reviews WHERE item_id = $itemId AND user_id = $userId LIMIT 1")->fetch_assoc();
        return ['success' => true, 'message' => 'Review created/updated successfully.', 'review' => $review];
    } else {
        return ['success' => false, 'message' => 'Error creating/updating review: ' . $db->error, 'review' => null];
    }

    // Close the statement
    $stmt->close();
}


/**
 * Retrieve all reviews for a given item.
 *
 * @param int $itemId The ID of the item.
 * @return array An array containing:
 *              - 'success': True if reviews were retrieved successfully, False otherwise.
 *              - 'reviews': An array of review objects, or an empty array if no reviews exist.
 *              - 'message': A message indicating the result.
 */
function getReviewsForItem(int $itemId) : array
{
    global $db;

    $sql = "SELECT * FROM reviews WHERE item_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("i", $itemId);

    $results = [];
    $stmt->execute();

    while ($row = $stmt->fetch_assoc()) {
        $results[] = $row;
    }

    $stmt->close();

    return ['success' => true, 'reviews' => $results, 'message' => 'Reviews retrieved successfully.'];
}


// Example Usage (assuming $db is your database connection)
// $itemId = 123;
// $newReview = createOrUpdateReview($itemId, 456, 4, "This is a great product!");
// print_r($newReview);
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews.
 *
 * @param string $productName  The name of the product being reviewed.
 * @param string $userName     The name of the user submitting the review.
 * @param string $reviewText   The text of the review.
 * @param int   $rating       The rating given by the user (1-5).
 * @param array $reviews      (Optional) An array of existing reviews to append to.
 *
 * @return array An array containing the new review object and the updated array of reviews.
 */
function createAndDisplayReview(string $productName, string $userName, string $reviewText, int $rating, array &$reviews = []) {
    // Validate the rating
    if ($rating < 1 || $rating > 5) {
        return ['status' => 'error', 'message' => 'Invalid rating.  Rating must be between 1 and 5.'];
    }

    // Create a new review object (you can customize this further)
    $review = [
        'product'   => $productName,
        'user'      => $userName,
        'text'      => $reviewText,
        'rating'    => $rating,
        'timestamp' => time() // Add a timestamp for tracking
    ];

    // Append the new review to the array
    $reviews[] = $review;

    return ['status' => 'success', 'review' => $review, 'reviews' => $reviews];
}


// Example Usage:

// Simulate retrieving existing reviews (from a database, file, etc.)
$existingReviews = [
    ['product' => 'Laptop X', 'user' => 'Alice', 'text' => 'Great laptop! Fast and reliable.', 'rating' => 5, 'timestamp' => 1678886400],
    ['product' => 'Smartphone Y', 'user' => 'Bob', 'text' => 'Good phone, but battery life is short.', 'rating' => 3, 'timestamp' => 1678886460]
];

// Create a new review
$newReviewResult = createAndDisplayReview(
    'Laptop X',
    'Charlie',
    'Excellent value for the price.',
    4
);

// Display the results
if ($newReviewResult['status'] === 'success') {
    echo "<h2>New Review:</h2>";
    echo "<p><b>Product:</b> " . $newReviewResult['review']['product'] . "</p>";
    echo "<p><b>User:</b> " . $newReviewResult['review']['user'] . "</p>";
    echo "<p><b>Rating:</b> " . $newReviewResult['review']['rating'] . "</p>";
    echo "<p><b>Review:</b> " . $newReviewResult['review']['text'] . "</p>";
    echo "<p><b>Timestamp:</b> " . date('Y-m-d H:i:s', $newReviewResult['review']['timestamp']) . "</p>";

    echo "<hr>";

    echo "<h2>All Reviews:</h2>";
    foreach ($newReviewResult['reviews'] as $review) {
        echo "<p><b>Product:</b> " . $review['product'] . "</p>";
        echo "<p><b>User:</b> " . $review['user'] . "</p>";
        echo "<p><b>Rating:</b> " . $review['rating'] . "</p>";
        echo "<p><b>Review:</b> " . $review['text'] . "</p>";
        echo "<p><b>Timestamp:</b> " . date('Y-m-d H:i:s', $review['timestamp']) . "</p>";
        echo "<hr>";
    }

} else {
    echo "<p style='color: red;'>Error creating review: " . $newReviewResult['message'] . "</p>";
}

// Example of invalid rating
$invalidReviewResult = createAndDisplayReview('Tablet Z', 'David', 'Okay', 6);

if($invalidReviewResult['status'] === 'error'){
    echo "<p style='color: red;'>Invalid Review Attempt: " . $invalidReviewResult['message'] . "</p>";
}
?>


<?php

/**
 * Class Review
 *
 * Handles the creation, storage, and retrieval of user reviews.
 */
class Review {

    private $db;  // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Creates a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5 stars).
     * @param string $comment The review comment.
     *
     * @return int|false The ID of the newly created review on success, false on failure.
     */
    public function createReview(int $productId, string $user, string $rating, string $comment) {
        // Input validation (important!)
        if (!$productId || !$user || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || (int)$rating < 1 || (int)$rating > 5) {
            return false; // Rating must be 1-5
        }

        // Sanitize inputs (prevent SQL injection)
        $productId = $this->db->real_escape_string($productId);
        $user = $this->db->real_escape_string($user);
        $rating = (int)$rating;
        $comment = $this->db->real_escape_string($comment);

        // Construct SQL query
        $query = "INSERT INTO reviews (product_id, user, rating, comment) VALUES ('$productId', '$user', '$rating', '$comment')";

        // Execute the query
        return $this->db->query($query);
    }


    /**
     * Retrieves reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsByProduct(int $productId) {
        $productId = $this->db->real_escape_string($productId);

        $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
        $result = $this->db->query($query);

        $reviews = [];
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $reviews[] = new ReviewObject($row); // Create ReviewObject instances
            }
        }

        return $reviews;
    }

    /**
     *  Review Object (Helper Class) - Makes retrieving review data easier
     */
    private function __construct($data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user = $data['user'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }

}


/**
 * ReviewObject - A class representing a single review.  This keeps things cleaner than returning
 * arrays of associative arrays.
 */
class ReviewObject {
    public $id;
    public $product_id;
    public $user;
    public $rating;
    public $comment;
    public $created_at;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->product_id = $data['product_id'];
        $this->user = $data['user'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->created_at = $data['created_at'];
    }
}



// Example usage (assuming you have a database connection $db):
//  (This is just for demonstration, you'll need to adapt to your specific setup)

// Assuming $db is your database connection object (e.g., mysqli)

// 1. Create a review
$review = new Review($db);
$reviewId = $review->createReview(123, "JohnDoe", 4, "Great product!");

if ($reviewId) {
    echo "Review created successfully with ID: " . $reviewId . "
";
} else {
    echo "Failed to create review.
";
}


// 2. Get reviews for product 123
$reviews = $review->getReviewsByProduct(123);

if (count($reviews) > 0) {
    echo "Reviews for product 123:
";
    foreach ($reviews as $review) {
        echo "- User: " . $review->user . ", Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
    }
} else {
    echo "No reviews found for product 123.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to process and display user reviews.
 * It includes input validation, data sanitization, and formatting.
 */

class UserReview {

    /**
     * Validates review input.
     *
     * @param array $reviewData Associative array containing the review data.
     * @return bool True if the review is valid, false otherwise.
     */
    public static function validateReview(array $reviewData) {
        // Required fields
        $requiredFields = ['user_name', 'review_text'];

        // Check for required fields
        foreach ($requiredFields as $field) {
            if (!isset($reviewData[$field]) || empty($reviewData[$field])) {
                return false;
            }
        }

        // Perform basic validation (e.g., string length, non-HTML characters)
        $userName = trim($reviewData['user_name']);
        $reviewText = trim($reviewData['review_text']);

        if (strlen($userName) > 100) {
            return false; // Limit username length
        }
        if (strlen($reviewText) > 1000) {
            return false; // Limit review text length
        }
        
        // You can add more specific validation here, such as:
        // - Allowing only alphanumeric characters (or specific allowed chars)
        // - Checking for prohibited words
        

        return true;
    }

    /**
     * Sanitizes review text to prevent XSS attacks.
     *
     * @param string $reviewText The review text to sanitize.
     * @return string Sanitized review text.
     */
    public static function sanitizeReviewText(string $reviewText) {
        // Use htmlspecialchars to escape potentially malicious characters
        return htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');
    }

    /**
     * Formats the review for display.
     *
     * @param array $reviewData Associative array containing the review data.
     * @return string Formatted review string.
     */
    public static function formatReview(array $reviewData) {
        $sanitizedReviewText = self::sanitizeReviewText($reviewData['review_text']);
        return "<div class='review'><strong>" . $reviewData['user_name'] . ":</strong> " . $sanitizedReviewText . "</div>";
    }
}

// Example Usage:

// 1. Get Review Data (e.g., from a form submission)
$reviewData = [
    'user_name' => 'John Doe',
    'review_text' => "<p>This product is <strong>amazing</strong>!</p>" // This is potentially unsafe if not sanitized.
];

// 2. Validate the Review
if (UserReview::validateReview($reviewData)) {
    // 3. Sanitize the Review Text
    $sanitizedReviewText = UserReview::sanitizeReviewText($reviewData['review_text']);

    // 4. Format the Review
    $formattedReview = UserReview::formatReview($reviewData);

    // 5. Display the Review
    echo $formattedReview;
} else {
    echo "<p>Invalid review. Please check your input.</p>";
}


?>


<?php

/**
 * User Review Class
 *
 * Represents a user review and provides methods for creating, displaying,
 * and saving reviews.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $rating;
    private $comment;
    private $dateCreated;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $userId The ID of the user submitting the review.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the item.
     */
    public function __construct(int $userId, int $rating, string $comment)
    {
        $this->reviewId = null;  // ID assigned when saved
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->dateCreated = date('Y-m-d H:i:s'); // Timestamp of creation
    }

    /**
     * Getters and Setters
     */

    public function getReviewId(): ?int
    {
        return $this->reviewId;
    }

    public function setReviewId(?int $reviewId)
    {
        $this->reviewId = $reviewId;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function getRating(): int
    {
        return $this->rating;
    }

    public function getComment(): string
    {
        return $this->comment;
    }

    public function getDateCreated(): string
    {
        return $this->dateCreated;
    }


    /**
     * Display the review
     *
     * Returns a formatted string representing the review.
     *
     * @return string The review string.
     */
    public function displayReview(): string
    {
        return "Review ID: " . ($this->reviewId ?? 'N/A') . "
"
               . "User ID: " . $this->userId . "
"
               . "Rating: " . $this->rating . "
"
               . "Comment: " . $this->comment . "
"
               . "Date Created: " . $this->dateCreated;
    }

    /**
     *  Simulated Saving to Database (Replace with actual database interaction)
     *
     * This method simulates saving the review to a database.  You'll need to
     * replace this with your database query logic.
     *
     * @return bool True if saving was successful, false otherwise.
     */
    public function saveReview(): bool
    {
        //  Replace this with your database saving logic
        //  Example using a dummy array:
        //  $reviewData = [
        //      'userId' => $this->userId,
        //      'rating' => $this->rating,
        //      'comment' => $this->comment
        //  ];
        //  return saveReviewToDatabase($reviewData);  //  Assume this function exists

        // Placeholder - just return true for demonstration
        return true;
    }

}


/**
 * User Review Function (Example Usage)
 */

// Create a new review
$review = new UserReview(123, 5, "Excellent product!  Highly recommended.");

// Display the review
echo $review->displayReview() . "
";

// Simulate saving the review
if ($review->saveReview()) {
    echo "Review saved successfully.
";
} else {
    echo "Failed to save review.
";
}


// Example of creating multiple reviews:
$review2 = new UserReview(456, 4, "Good value for the money.");
echo $review2->displayReview() . "
";

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * @param int $reviewId (Optional, auto-generated)
     * @param int $userId
     * @param int $productId
     * @param int $rating (1-5)
     * @param string $comment
     */
    public function __construct($reviewId = null, $userId, $productId, $rating, $comment) {
        $this->reviewId = $reviewId;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Set the current date and time
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getDate() {
        return $this->date;
    }

    /**
     * Setters (Optional - you can add these for updating reviews)
     *
     *  Example:
     *  $review->setComment("Updated comment");
     */

    //  Add setters if you need to update review information later
}

/**
 * User Review Review Function (Simplified)
 */
function generateUserReviewReview(UserReview $review) {
    $reviewData = array(
        'review_id' => $review->getReviewId(),
        'user_id' => $review->getUserId(),
        'product_id' => $review->getProductId(),
        'rating' => $review->getRating(),
        'comment' => $review->getComment(),
        'date' => $review->getDate()
    );

    return $reviewData;
}



// --- Example Usage ---

// Create a review object
$review1 = new UserReview(null, 123, 456, 5, "Great product!");
$reviewData1 = generateUserReviewReview($review1);
print_r($reviewData1);

$review2 = new UserReview(null, 456, 789, 4, "Good but could be better.");
$reviewData2 = generateUserReviewReview($review2);
print_r($reviewData2);

?>


<?php

// Add validation to the constructor
function generateUserReviewReview($reviewId, $userId, $productId, $rating, $comment) {
    if ($rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be between 1 and 5.");
    }

    $review = new UserReview($reviewId, $userId, $productId, $rating, $comment);
    return generateUserReviewReview($review);
}


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given (e.g., 1-5).  Must be an integer.
 * @param string $comment The review text.
 * @param array $review_data An optional array to store reviews in (e.g., database).
 *
 * @return array|string Returns an array of reviews or a string message on error.
 */
function create_review(string $username, int $rating, string $comment, array &$review_data = []) {
  // Validate inputs - Basic validation, can be expanded
  if (empty($username)) {
    return "Username cannot be empty.";
  }

  if ($rating < 1 || $rating > 5) {
    return "Rating must be between 1 and 5.";
  }

  if (empty($comment)) {
    return "Comment cannot be empty.";
  }

  // Create review data
  $review = [
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date' => date('Y-m-d H:i:s') // Add timestamp
  ];

  // Store review -  Example using an array.  Replace with database integration.
  $review_data[] = $review;

  return "Review submitted successfully!";
}


// Example Usage:

// Simulate a database (replace with actual database connection)
$reviews = [];

// Create some reviews
$result1 = create_review("JohnDoe", 5, "Great product! Highly recommend.", $reviews);
echo $result1 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result2 = create_review("JaneSmith", 4, "Good value for money.", $reviews);
echo $result2 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result3 = create_review("PeterJones", 3, "It's okay, nothing special.", $reviews);
echo $result3 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result4 = create_review("", 2, "Bad experience", $reviews); //Test empty username
echo $result4 . "
";
echo "Current Reviews:
";
print_r($reviews);

$result5 = create_review("AliceBrown", 6, "Excellent!", $reviews); //Test invalid rating
echo $result5 . "
";
echo "Current Reviews:
";
print_r($reviews);
?>


// Example using PDO (requires PDO and database connection)
try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

    $username = "JohnDoe";
    $rating = 5;
    $comment = "Great product!";

    $stmt = $pdo->prepare("INSERT INTO reviews (username, rating, comment, date) VALUES (:username, :rating, :comment, :date)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':date', date('Y-m-d H:i:s'));

    $stmt->execute();

    echo "Review submitted successfully!";

} catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
}


<?php

/**
 * Class Review
 *
 * This class provides a basic framework for handling user reviews.
 * It includes methods for adding, retrieving, and displaying reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database (simulated).
     *
     * @param string $username  The username of the reviewer.
     * @param string $rating   The rating (e.g., 1-5).
     * @param string $comment The reviewer's comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $rating, string $comment) {
        // Basic validation - add more robust validation as needed
        if (empty($username) || empty($rating) || empty($comment)) {
            return false;
        }

        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by username.
     *
     * @param string $username The username to filter by.
     * @return array An array of review objects for the given username.
     */
    public function getReviewsByUsername(string $username) {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Displays all reviews in a formatted way.
     *
     * @return string  A string containing the formatted review display.
     */
    public function displayReviews() {
        $output = "<h2>User Reviews</h2>";
        if (empty($this->getAllReviews())) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($this->getAllReviews() as $review) {
                $output .= "<li><strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
                $output .= "<em>Rating:</em> " . htmlspecialchars($review['rating']) . "<br>";
                $output .= "<em>Comment:</em> " . htmlspecialchars($review['comment']) . "<br>";
                $output .= "<em>Timestamp:</em> " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }
}

// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("JohnDoe", 5, "Great product!  Highly recommended.");
$reviewSystem->addReview("JaneSmith", 4, "Good value for the price.");
$reviewSystem->addReview("PeterJones", 3, "It's okay, but could be better.");

// Display all reviews
echo $reviewSystem->displayReviews();

// Get reviews by username
$johnReviews = $reviewSystem->getReviewsByUsername("JohnDoe");
echo "<h2>Reviews by JohnDoe</h2>";
echo "<pre>";
print_r($johnReviews);
echo "</pre>";
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param string $reviewText The review text submitted by the user.
 * @param array  $userOptions (Optional) An array of options for the review form.
 *                            e.g., ['rating' => 5, 'comment' => 'Great product!']
 *
 * @return string HTML representation of the review form and the displayed review.
 */
function createReviewFunction(string $productName, string $reviewText, array $userOptions = []) {
  // Validate input (basic example - expand for production)
  if (empty($reviewText)) {
    return "<p>Please enter a review.</p>";
  }

  // Build the review form HTML
  $formHTML = '<form method="post" action="process_review.php">';
  $formHTML .= '<h3>Review for ' . $productName . '</h3>';
  $formHTML .= '<label for="review_text">Review:</label><br>';
  $formHTML .= '<textarea id="review_text" name="review_text" rows="4" cols="50">' . $reviewText . '</textarea><br><br>';

  // Add user options (if provided)
  if (!empty($userOptions)) {
    $formHTML .= '<label for="rating">Rating:</label><br>';
    $formHTML .= '<select id="rating" name="rating">';
    foreach ($userOptions as $key => $value) {
      $formHTML .= '<option value="' . $key . '">' . $value . '</option>';
    }
    $formHTML .= '</select><br><br>';
  }

  $formHTML .= '<input type="submit" value="Submit Review">';
  $formHTML .= '</form>';

  // Display the submitted review (if no review exists yet)
  $reviewExists = false; // Assume no review exists until proven otherwise

  // Check if there's a saved review
  if (isset($_SESSION['reviews'][$productName])) {
    $reviewExists = true;
    $reviewHTML = '<p><strong>Review:</strong> ' . htmlspecialchars($_SESSION['reviews'][$productName]) . '</p>';
    $reviewHTML = $reviewHTML; // Use the saved review
  } else {
    // Add the new review to the session
    $_SESSION['reviews'][$productName] = htmlspecialchars($reviewText);  // Sanitize the input
  }

  return $formHTML . $reviewHTML;
}

// Example usage (simulating a session)
session_start();

//  Demonstrates a single review being created
$review = createReviewFunction("Awesome Widget", "This widget is fantastic!");

//Demonstrates multiple reviews being created
$review2 = createReviewFunction("Amazing Gadget", "Highly recommend this gadget!");
$review3 = createReviewFunction("Fantastic Item", "Great value for money.");


//  Illustrates retrieving and displaying a stored review:
if (isset($_SESSION['reviews']['Awesome Widget'])) {
    echo "<h2>Existing Review for Awesome Widget:</h2>";
    echo "<p><strong>Review:</strong> " . htmlspecialchars($_SESSION['reviews']['Awesome Widget']) . "</p>";
}

?>


<?php
session_start();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productName = $_POST["product_name"]; //You need to ensure this is actually used to identify the review
    $reviewText = $_POST["review_text"];
    $rating = isset($_POST["rating"]) ? $_POST["rating"] : null;

    // Sanitize and store the review (replace with your database logic)
    if (isset($_SESSION['reviews'][$productName])) {
        //Update existing review
    } else {
        $_SESSION['reviews'][$productName] = $reviewText;
    }

    // Redirect to a confirmation page
    header("Location: confirmation.php");
    exit();
}
?>


<?php

/**
 * Class Review
 *
 * Provides functionality to store, retrieve, and display user reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the database.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given by the reviewer (e.g., 1-5).
     * @param string $comment The comment provided by the reviewer.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool {
        // Validate rating
        if (!preg_match('/^\d+$/', $rating)) {
            return false; // Invalid rating
        }

        // Create a review object
        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => time()
        ];

        // Store the review
        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects for the product, or an empty array if no reviews exist.
     */
    public function getReviewsForProduct(int $productId): array {
        return array_filter($this->reviews, function ($review) use ($productId) {
            return $review['productId'] == $productId;
        });
    }

    /**
     * Retrieves the average rating for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return float|null The average rating, or null if no reviews exist for the product.
     */
    public function getAverageRatingForProduct(int $productId): ?float {
        $reviews = $this->getReviewsForProduct($productId);

        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += (int)$review['rating'];
        }

        return $totalRating / count($reviews);
    }


    /**
     * Displays reviews for a product in a user-friendly format.
     *
     * @param int $productId The ID of the product.
     *
     * @return string The HTML representation of the reviews, or a message if no reviews exist.
     */
    public function displayReviews(int $productId): string {
        $reviews = $this->getReviewsForProduct($productId);

        if (empty($reviews)) {
            return "<p>No reviews for this product.</p>";
        }

        $html = "<h2>Reviews for Product ID: " . $productId . "</h2>";
        $html .= "<ul>";
        foreach ($reviews as $review) {
            $html .= "<li>";
            $html .= "<strong>" . $review['username'] . "</strong> - Rating: " . $review['rating'] . " - " . $review['comment'] . "</li>";
            $html .= "</li>";
        }
        $html .= "</ul>";

        return $html;
    }
}



// Example Usage:

// Create a Review object
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview(123, "JohnDoe", 5, "Excellent product!  Highly recommended.");
$reviewSystem->addReview(123, "JaneSmith", 4, "Good product, but could be better.");
$reviewSystem->addReview(456, "PeterJones", 3, "Okay, does the job.");


// Get reviews for product 123
$reviews = $reviewSystem->getReviewsForProduct(123);
echo $reviewSystem->displayReviews(123); // Display the reviews for product 123

// Get the average rating for product 123
$averageRating = $reviewSystem->getAverageRatingForProduct(123);
echo "<br>Average Rating for Product 123: " . ($averageRating !== null ? $averageRating : "No reviews yet.");

?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store, display, and manage user reviews.
 */
class UserReview {

  private $reviewId;
  private $userId;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   *
   * Initializes a new UserReview object.
   *
   * @param int $reviewId (Optional) - The unique identifier for the review. If not provided, one will be generated.
   * @param int $userId The ID of the user submitting the review.
   * @param int $rating The rating given by the user (e.g., 1-5).
   * @param string $comment The user's review comment.
   */
  public function __construct($reviewId = null, $userId, $rating, $comment) {
    $this->reviewId = $reviewId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date('Y-m-d H:i:s'); // Set the date and time of the review
  }

  /**
   * Getters
   */
  public function getReviewId() {
    return $this->reviewId;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getDate() {
    return $this->date;
  }

  /**
   * Display the review in a formatted string.
   *
   * @return string  The review formatted as a string.
   */
  public function displayReview() {
    return "Review ID: " . $this->getReviewId() .
           "
User ID: " . $this->getUserId() .
           "
Rating: " . $this->getRating() .
           "
Comment: " . $this->getComment() .
           "
Date: " . $this->getDate();
  }
}

/**
 * User Review Review Function
 *
 * This function takes an array of UserReview objects and outputs a formatted display
 * of all the reviews.
 *
 * @param array $reviews An array of UserReview objects.
 */
function displayReviews(array $reviews) {
  echo "<h2>User Reviews</h2>
";
  foreach ($reviews as $review) {
    echo $review->displayReview() . "

";
  }
}


// Example Usage:
// Create some UserReview objects
$review1 = new UserReview(1, 123, 5, "Excellent product!  Highly recommended.");
$review2 = new UserReview(2, 456, 4, "Good value for the price.");
$review3 = new UserReview(3, 789, 3, "It's okay, but could be better.");


// Store the reviews in an array
$reviews = array($review1, $review2, $review3);

// Call the displayReviews function to output the reviews
displayReviews($reviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 * It handles input validation, database interaction, and output formatting.
 *
 * @param string $productId The ID of the product/service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $reviewText The review text submitted by the user.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database user.
 * @param string $dbPassword The database password.
 *
 * @return array An array containing:
 *   - 'success':  True if the review was successfully submitted, false otherwise.
 *   - 'message':  A message indicating the outcome (success/failure and error details).
 *   - 'reviewId': The ID of the newly created review, if successful.
 */
function submitReview(
    $productId,
    $username,
    $reviewText,
    $dbHost,
    $dbName,
    $dbUser,
    $dbPassword
) {
    // Input Validation (Basic - expand as needed)
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
    }
    if (empty($username)) {
        return ['success' => false, 'message' => 'Username cannot be empty.', 'reviewId' => null];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.', 'reviewId' => null];
    }

    // Database Connection (Use prepared statements for security!)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        $conn->close();
        return ['success' => false, 'message' => "Database connection failed: " . $conn->connect_error, 'reviewId' => null];
    }

    // Sanitize Input (Important for security - use proper escaping or prepared statements)
    $reviewText = $conn->real_escape_string($reviewText);

    // SQL Query (Use prepared statements to prevent SQL injection)
    $sql = "INSERT INTO reviews (productId, username, reviewText) VALUES ('$productId', '$username', '$reviewText')";

    if ($conn->query($sql) === TRUE) {
        $reviewId = $conn->insert_id;
        return ['success' => true, 'message' => 'Review submitted successfully.', 'reviewId' => $reviewId];
    } else {
        $errorInfo = $conn->error;
        return ['success' => false, 'message' => "Review submission failed: " . $errorInfo['message'], 'reviewId' => null];
    }

    $conn->close();
}


// Example Usage:
// $product_id = "123";
// $user_name = "JohnDoe";
// $review = "This product is fantastic!";

// $result = submitReview($product_id, $user_name, $review, "localhost", "my_database", "my_user", "my_password");

// if ($result['success']) {
//     echo "Review submitted successfully! Review ID: " . $result['reviewId'];
// } else {
//     echo "Error submitting review: " . $result['message'];
// }
?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews

    /**
     * Adds a new user review to the database (simulated).
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $username The username of the reviewer.
     * @param string $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(int $productId, string $username, string $rating, string $comment): bool
    {
        // Basic input validation - enhance this for production
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review creation
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews for a given product ID.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(int $productId): array
    {
        $productReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $productReviews[] = $review;
            }
        }
        return $productReviews;
    }


    /**
     * Retrieves a specific review by its ID (simulated - in a real system, this would use a database ID).
     *
     * @param int $reviewId The ID of the review.
     *
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId): ?array
    {
        foreach ($this->reviews as $review) {
            if ($review['date'] == $reviewId) { // Use 'date' for ID - change to your database key
                return $review;
            }
        }
        return null;
    }

    /**
     * Updates an existing review (simulated - in a real system, update the database).
     *
     * @param int $reviewId  The ID of the review to update.
     * @param string $newRating The new rating for the review.
     * @param string $newComment The new comment for the review.
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function updateReview(int $reviewId, string $newRating, string $newComment): bool
    {
        $reviewToUpdate = $this->getReviewById($reviewId);

        if (!$reviewToUpdate) {
            return false; // Review not found
        }

        if (!is_numeric($newRating) || $newRating < 1 || $newRating > 5) {
            return false;
        }

        $reviewToUpdate['rating'] = $newRating;
        $reviewToUpdate['comment'] = $newComment;
        return true;
    }


    /**
     * Deletes a review by its ID (simulated - in a real system, delete from the database).
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false if review not found.
     */
    public function deleteReview(int $reviewId): bool
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['date'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Returns all reviews.
     *
     * @return array
     */
    public function getAllReviews(): array
    {
        return $this->reviews;
    }
}


// Example Usage
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview(123, 'JohnDoe', 4, 'Great product, highly recommended!');
$reviewSystem->addReview(123, 'JaneSmith', 5, 'Excellent value for money.');
$reviewSystem->addReview(456, 'PeterJones', 3, 'It was okay, nothing special.');

// Get reviews for product 123
$reviews123 = $reviewSystem->getReviewsByProduct(123);
echo "Reviews for Product 123:
";
foreach ($reviews123 as $review) {
    echo "  - " . $review['username'] . ": " . $review['rating'] . " - " . $review['comment'] . "
";
}

// Get review by ID (simulated - using date as ID)
$reviewById = $reviewSystem->getReviewById('Y-m-d H:i:s'); //Replace with actual review ID
if ($reviewById) {
    echo "
Review by ID:
";
    echo "  - " . $reviewById['username'] . ": " . $reviewById['rating'] . " - " . $reviewById['comment'] . "
";
} else {
    echo "Review not found.
";
}

//Update a review
$updateResult = $reviewSystem->updateReview('Y-m-d H:i:s', 6, 'Updated Review Content');
if ($updateResult) {
    echo "
Review updated successfully!
";
} else {
    echo "
Failed to update review.
";
}

//Delete a review
$deleteResult = $reviewSystem->deleteReview('Y-m-d H:i:s');
if ($deleteResult) {
    echo "
Review deleted successfully!
";
} else {
    echo "
Failed to delete review.
";
}


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews.
 * It handles input validation, data storage (simplified for demonstration),
 * and basic output formatting.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text submitted by the reviewer.
 * @param array $rating A numeric rating (e.g., 1-5).
 *
 * @return void  Prints the review to the console (for demonstration).  In a real
 *               application, you would typically store this data in a database.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, array $rating) {

  // Input Validation (Important!)
  if (empty($productId)) {
    echo "Error: Product ID cannot be empty.
";
    return;
  }
  if (empty($reviewerName)) {
    echo "Error: Reviewer Name cannot be empty.
";
    return;
  }
  if (empty($reviewText)) {
    echo "Error: Review Text cannot be empty.
";
    return;
  }
  if (!is_array($rating) || count($rating) !== 1) {
    echo "Error: Rating must be a single numeric value (e.g., 1-5).
";
    return;
  }
  if (!is_numeric($rating[0])) {
    echo "Error: Rating must be a numeric value.
";
    return;
  }
  if ($rating[0] < 1 || $rating[0] > 5) {
    echo "Error: Rating must be between 1 and 5.
";
    return;
  }

  // Data Storage (Simplified - Replace with Database Integration)
  $review = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'rating' => $rating[0]
  ];

  // Output/Display the review (replace with your desired presentation)
  echo "Review for Product ID: " . $productId . "
";
  echo "Reviewer: " . $reviewerName . "
";
  echo "Rating: " . $rating[0] . " / 5
";
  echo "Review Text: " . $reviewText . "
";
  echo "---
";
}


// Example Usage:
createReview("P123", "John Doe", "Great product!  Exactly what I needed.", [5]);
createReview("P456", "Jane Smith", "Could be better, but decent.", [3]);
createReview("P789", "Peter Jones", "Amazing!  Highly recommended.", [5]);
createReview("P101", "Alice Brown", "It's okay.", [2]);

// Example of invalid input:
createReview("", "Invalid Name", "Review Text", [4]); // Empty Product ID
createReview("P999", "", "Review Text", [6]); // Empty Reviewer Name
createReview("P111", "Test User", "Invalid Rating", [1, 2]); // Invalid rating format
createReview("P222", "User", "Review", ["abc"]); // Invalid rating type
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews.
 * It includes basic validation, sanitization, and storage.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $product_id The ID of the product being reviewed.  (Optional, but recommended for relational data)
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $username, string $rating, string $comment, string $product_id = "") {
    // --- Validation ---
    $errors = [];

    if (empty($username)) {
        $errors[] = "Username cannot be empty.";
    }
    if (empty($rating)) {
        $errors[] = "Rating cannot be empty.";
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        $errors[] = "Rating must be a number between 1 and 5.";
    }
    if (empty($comment)) {
        $errors[] = "Comment cannot be empty.";
    }

    if (empty($errors)) {
        // --- Sanitize ---
        $username = trim($username);
        $rating = (int) $rating; // Convert to integer
        $comment = trim($comment);

        // --- Store Review (Simulated Database) ---
        //  Replace this with your actual database storage logic.
        //  This example uses a simple array.

        $reviews = isset($_SESSION['reviews']) ? $_SESSION['reviews'] : []; // Load from session
        $review_id = count($reviews) + 1;

        $review = [
            'review_id' => $review_id,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'timestamp' => date('Y-m-d H:i:s'), // Add timestamp
            'product_id' => $product_id // Include product ID
        ];

        $reviews[] = $review;
        $_SESSION['reviews'] = $reviews; // Store in session


        return true;
    } else {
        // --- Handle Errors ---
        return false;
    }
}



/**
 * Display User Reviews (Example)
 */
function displayUserReviews() {
    global $reviews;  // Access the global $reviews array

    if (!empty($reviews)) {
        echo "<h2>User Reviews</h2>";
        echo "<ul>";
        foreach ($reviews as $review) {
            echo "<li>";
            echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>";
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";
            echo "<strong>Timestamp:</strong> " . $review['timestamp'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>No reviews available.</p>";
    }
}

// --- Example Usage ---

// Initialize the reviews array (use session for persistence)
if (!isset($_SESSION['reviews'])) {
    $_SESSION['reviews'] = [];
}


// Example 1: Store a review
$success = storeUserReview("John Doe", 4, "Great product!", "123");
if ($success) {
    echo "<p>Review stored successfully!</p>";
} else {
    echo "<p>Error storing review.</p>";
}


// Example 2: Display the reviews
displayUserReviews();


?>


<?php

/**
 * User Review Function
 *
 * This function creates a basic user review structure, 
 * storing the user's review, rating, and optionally, a comment.
 *
 * @param string $user_name The name of the user submitting the review.
 * @param int    $rating    The user's rating (e.g., 1-5).  Must be an integer.
 * @param string $comment  (Optional)  A comment from the user.
 * @return array  An array containing the review data.
 */
function create_user_review(string $user_name, int $rating, string $comment = '') {
    // Input Validation - Important!
    if (!is_string($user_name)) {
        throw new InvalidArgumentException("User name must be a string.");
    }
    if (!is_int($rating) || $rating < 1 || $rating > 5) {
        throw new InvalidArgumentException("Rating must be an integer between 1 and 5.");
    }

    // Create the review data array
    $review = [
        'user_name' => $user_name,
        'rating'    => $rating,
        'comment'   => $comment
    ];

    return $review;
}

// Example Usage:
try {
    $review1 = create_user_review("John Doe", 5, "Great product!  Highly recommended.");
    echo "Review 1:
";
    print_r($review1);
    echo "

";

    $review2 = create_user_review("Jane Smith", 3);
    echo "Review 2:
";
    print_r($review2);
    echo "

";

    // Example of error handling - incorrect rating
    try {
        $review3 = create_user_review("Peter Jones", 6);
        echo "Review 3 (This won't execute):
";
        print_r($review3);
    } catch (InvalidArgumentException $e) {
        echo "Error creating review: " . $e->getMessage() . "
";
    }

} catch (InvalidArgumentException $e) {
    echo "General error creating review: " . $e->getMessage() . "
";
}

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to store and manage user reviews.
 *
 * Features:
 * - Stores reviews in a simple array.
 * - Allows adding new reviews.
 * - Allows retrieving all reviews.
 * - Allows retrieving a review by its ID.
 * - Allows deleting a review by its ID.
 */
class Review {

    private $reviews = [];
    private $reviewIdCounter = 1; // To ensure unique IDs

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $author  The name of the reviewer.
     * @param string $comment The text of the review.
     * @return int|null The ID of the newly created review, or null if there was an error.
     */
    public function addReview(string $author, string $comment) {
        $reviewId = $this->reviewIdCounter;
        $review = [
            'id' => $reviewId,
            'author' => $author,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for date
        ];
        $this->reviews[] = $review;
        $this->reviewIdCounter++;
        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array containing all reviews.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object if found, or null if not found.
     */
    public function getReviewById(int $reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Deletes a review by its ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if the review was deleted, false if not found.
     */
    public function deleteReview(int $reviewId) {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}


/**
 * Example Usage - Demonstrates how to use the Review class.
 */
$reviewManager = new Review();

// Add some reviews
$reviewId1 = $reviewManager->addReview('Alice', 'Great product! Highly recommended.');
$reviewId2 = $reviewManager->addReview('Bob', 'It was okay, but a bit expensive.');
$reviewId3 = $reviewManager->addReview('Charlie', 'Excellent service and fast delivery.');

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$review = $reviewManager->getReviewById($reviewId2);
echo "
Review ID " . $reviewId2 . ":
";
print_r($review);

// Delete a review
$deleted = $reviewManager->deleteReview($reviewId1);
echo "
Deleted review with ID " . $reviewId1 . ": " . ($deleted ? 'Success' : 'Failed') . "
";

// Get all reviews again to see the changes
$allReviews = $reviewManager->getAllReviews();
echo "
All Reviews After Deletion:
";
print_r($allReviews);


?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a product ID, and a review text,
 * and stores the review in a database.  It also includes basic
 * input validation and error handling.
 *
 * @param int    $userId       The ID of the user submitting the review.
 * @param int    $productId    The ID of the product being reviewed.
 * @param string $reviewText   The text of the review submitted by the user.
 * @return bool   True on success, false on failure.
 */
function storeUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Input Validation - Important for security and data integrity
    if (!$userId || !$productId || !$reviewText) {
        error_log("Missing required fields in user review."); // Log for debugging
        return false;
    }

    if (!is_numeric($userId) || !is_numeric($productId)) {
        error_log("Invalid user or product ID provided.");
        return false;
    }

    if (empty($reviewText)) {
        error_log("Review text cannot be empty.");
        return false;
    }

    // Sanitize input - Essential for preventing XSS attacks
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8'); 

    // Database connection details (replace with your actual credentials)
    $dbHost = 'localhost';
    $dbUser = 'your_db_user';
    $dbPass = 'your_db_password';
    $dbName = 'your_db_name';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For better error handling

        // Prepare the SQL statement
        $stmt = $pdo->prepare("INSERT INTO reviews (userId, productId, reviewText, reviewDate) VALUES (?, ?, ?, NOW())"); 

        // Bind the parameters - prevents SQL injection
        $stmt->bindParam(1, $userId);
        $stmt->bindParam(2, $productId);
        $stmt->bindParam(3, $reviewText);

        // Execute the statement
        $stmt->execute();

        // Return true on success
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  // Log the error
        return false;
    }
}


// Example Usage:
// $success = storeUserReview(123, 456, "This product is great!");
// if ($success) {
//     echo "Review submitted successfully!";
// } else {
//     echo "Failed to submit review.";
// }

?>


<?php

/**
 * Class Review
 *
 * This class provides a simple way to manage user reviews.
 */
class Review {

    private $reviews = [];

    /**
     * Adds a new review to the collection.
     *
     * @param string $username The username of the reviewer.
     * @param string $comment The review comment.
     * @param int $rating The rating given by the reviewer (e.g., 1-5).
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $username, string $comment, int $rating): bool {
        if (empty($username) || empty($comment) || $rating < 1 || $rating > 5) {
            return false; // Invalid input
        }

        $this->reviews[] = [
            'username' => $username,
            'comment' => $comment,
            'rating' => $rating
        ];

        return true;
    }


    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }


    /**
     * Retrieves reviews by a specific username.
     *
     * @param string $username The username to filter by.
     *
     * @return array An array of review objects for the given username.
     */
    public function getReviewsByUsername(string $username): array {
        $reviews = [];
        foreach ($this->getAllReviews() as $review) {
            if ($review['username'] === $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Retrieves the average rating.
     *
     * @return float|null The average rating, or null if no reviews have been added.
     */
    public function getAverageRating(): ?float {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        $reviewCount = count($this->reviews);

        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / $reviewCount;
    }

    /**
     * Clears all reviews.
     *
     * @return void
     */
    public function clearReviews(): void {
        $this->reviews = [];
    }
}

// Example Usage:

// Create a Review object
$reviewManager = new Review();

// Add some reviews
$reviewManager->addReview('JohnDoe', 'Great product!', 5);
$reviewManager->addReview('JaneSmith', 'Good value for money.', 4);
$reviewManager->addReview('JohnDoe', 'Could be better.', 3);

// Get all reviews
$allReviews = $reviewManager->getAllReviews();
print_r($allReviews);

// Get reviews by a specific user
$johnReviews = $reviewManager->getReviewsByUsername('JohnDoe');
print_r($johnReviews);

// Get the average rating
$averageRating = $reviewManager->getAverageRating();
echo "Average rating: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Clear all reviews
$reviewManager->clearReviews();
print_r($reviewManager->getAllReviews());  // Should be empty.
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName  The name of the product or service being reviewed.
 * @param string $reviewText   The review text submitted by the user.
 * @param string $username     The username of the reviewer.
 * @param int    $rating       The rating given by the user (1-5).
 *
 * @return array  An array containing the review data and a success/error message.
 */
function submitReview(string $productName, string $reviewText, string $username, int $rating)
{
    // Validate input (basic example - improve as needed)
    if (empty($productName)) {
        return ['success' => false, 'message' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['success' => false, 'message' => 'Review text cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize input - Important for security.  Consider more comprehensive sanitization.
    $productName = htmlspecialchars($productName);
    $reviewText = htmlspecialchars($reviewText);
    $username = htmlspecialchars($username);


    //  Store the review in a database (replace with your database logic)
    $reviewId = saveReviewToDatabase($productName, $reviewText, $username, $rating); // Replace with your DB call.

    if ($reviewId === false) {
        return ['success' => false, 'message' => 'Failed to save review to database.'];
    }


    return ['success' => true, 'reviewId' => $reviewId, 'message' => 'Review submitted successfully!'];
}


/**
 * Placeholder function to simulate saving the review to a database.
 *  Replace this with your actual database code.
 *
 * @param string $productName
 * @param string $reviewText
 * @param string $username
 * @param int $rating
 *
 * @return int|false  The ID of the newly created review, or false on error.
 */
function saveReviewToDatabase(string $productName, string $reviewText, string $username, int $rating)
{
    // **Replace this with your database interaction code**
    // This is just a placeholder
    echo "Simulating saving review to database...
";

    // Example: Generate a fake review ID
    $reviewId = hash('md5', $productName . $reviewText . $username . $rating);  // Create a hash to simulate an ID

    return $reviewId; // Return the ID (or false if the database operation fails)
}



// Example Usage:
$product = "Awesome Widget";
$review = "This widget is amazing!  I highly recommend it.";
$user = "JohnDoe";
$rating = 4;


$result = submitReview($product, $review, $user, $rating);

if ($result['success']) {
    echo "Review submitted successfully! Review ID: " . $result['reviewId'] . "<br>";
} else {
    echo "Error submitting review: " . $result['message'] . "<br>";
}



//  Example of retrieving reviews (for demonstration - replace with your retrieval logic)
function getReviewsForProduct(string $productName)
{
    // Simulate fetching reviews from a database
    $reviews = [
        ['reviewId' => 1, 'productName' => 'Awesome Widget', 'reviewText' => 'Great product!', 'username' => 'JaneSmith', 'rating' => 5],
        ['reviewId' => 2, 'productName' => 'Awesome Widget', 'reviewText' => 'Could be better.', 'username' => 'PeterJones', 'rating' => 3],
    ];

    $filteredReviews = [];

    foreach ($reviews as $review)
    {
        if ($review['productName'] === $productName)
        {
            $filteredReviews[] = $review;
        }
    }

    return $filteredReviews;

}

$awesomeWidgetReviews = getReviewsForProduct("Awesome Widget");

echo "<br><h2>Reviews for {$awesomeWidgetReviews[0]['productName']}</h2>";
if (!empty($awesomeWidgetReviews)) {
    echo "<ul>";
    foreach ($awesomeWidgetReviews as $review) {
        echo "<li><strong>{$review['username']}</strong> - Rating: {$review['rating']} - " . htmlspecialchars($review['reviewText']) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews found for this product.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to add, retrieve, and display user reviews for a product.
 *
 * @param string $product_id  The ID of the product for which reviews are being added/retrieved.
 * @param string $username    The username of the user submitting the review.
 * @param string $rating      The rating given by the user (e.g., 1-5).
 * @param string $comment     The review comment.
 * @param string $db_connection  A database connection object.  Crucial for interacting with the database.
 *
 * @return array  An array containing the review data on success, or an error message on failure.
 */
function add_user_review(string $product_id, string $username, string $rating, string $comment, object $db_connection) {
  // Validate input - essential for security and data integrity
  if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
    return ['error' => 'All fields are required.'];
  }

  if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
    return ['error' => 'Invalid username.  Only alphanumeric characters and underscores are allowed.'];
  }

  if (!preg_match('/^[1-5]{1,2}$/', $rating)) {
    return ['error' => 'Rating must be a number between 1 and 5.'];
  }


  // Prepare the SQL query - crucial for preventing SQL injection
  $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
          VALUES (?, ?, ?, ?)";

  // Use prepared statements - **VERY IMPORTANT** for security
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    return ['error' => 'Failed to prepare statement: ' . $db_connection->error];
  }

  // Bind the parameters
  $stmt->bind_param("s", $product_id, $username, $rating);

  // Execute the query
  if ($stmt->execute() === false) {
    return ['error' => 'Query failed: ' . $stmt->error];
  }

  // Clean up
  $stmt->close();

  return ['success' => 'Review added successfully!'];
}


/**
 * Retrieves all reviews for a product.
 *
 * @param string $product_id The ID of the product.
 * @param object $db_connection A database connection object.
 * @return array  An array of review data, or an error message if no reviews are found or an error occurs.
 */
function get_reviews_for_product(string $product_id, object $db_connection) {
  $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY rating DESC";
  $stmt = $db_connection->prepare($sql);

  if ($stmt === false) {
    return ['error' => 'Failed to prepare statement: ' . $db_connection->error];
  }

  $stmt->bind_param("s", $product_id);

  $result = $stmt->execute();

  if ($result === false) {
    return ['error' => 'Query failed: ' . $stmt->error];
  }

  $reviews = [];
  $stmt->bind_result($id, $username, $rating, $comment); // Bind result variables

  while ($stmt->fetch()) {
    $review = [
      'id' => $id,
      'username' => $username,
      'rating' => $rating,
      'comment' => $comment
    ];
    $reviews[] = $review;
  }

  $stmt->close();
  return $reviews;
}


// Example Usage (Illustrative - replace with your database connection)
//  Important:  This is just a demonstration.  You'll need to set up your database connection properly.

/*
// Assuming you have a database connection object called $conn

$conn = new mysqli("localhost", "username", "password", "database_name");

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Add a review
$review_result = add_user_review("123", "JohnDoe", "5", "Excellent product!", $conn);
print_r($review_result);

// Get reviews for product "123"
$reviews = get_reviews_for_product("123", $conn);
print_r($reviews);
*/


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and retrieve user reviews for a given product or item.
 * It demonstrates basic database interaction and validation.  For a production environment,
 * consider using a more robust framework and security measures.
 *
 * @param string $productId The ID of the product or item the review is for.
 * @param string $name       The user's name.
 * @param string $rating     The user's rating (e.g., 1-5).
 * @param string $comment    The user's review comment.
 * @param PDO       $db       A PDO database connection object.
 *
 * @return bool True on successful review creation, false otherwise.
 */
function createReview(string $productId, string $name, string $rating, string $comment, PDO $db)
{
    // Validate inputs - Crucial for security and data integrity
    if (empty($productId)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }
    if (empty($name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }
    if (!preg_match('/^[a-zA-Z\s]+$/', $name)) {
        error_log("Error: User name must contain only letters and spaces.");
        return false;
    }
    if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
        error_log("Error: Rating must be a number between 0 and 5.");
        return false;
    }
    if (empty($comment)) {
        error_log("Error: Comment cannot be empty.");
        return false;
    }
    if (!preg_match('/^[\x00-\x7F]+$/', $comment)) {
        error_log("Error: Comment must contain only ASCII characters.");
        return false;
    }

    // Prepare the SQL statement - Important for preventing SQL injection
    $sql = "INSERT INTO reviews (productId, userName, rating, comment)
            VALUES (:productId, :userName, :rating, :comment)";

    try {
        // Prepare the statement
        $stmt = $db->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userName', $name);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the statement
        $stmt->execute();

        return true; // Review created successfully

    } catch (PDOException $e) {
        // Handle database errors - Log them for debugging
        error_log("Database Error: " . $e->getMessage());
        return false; // Failed to create review
    }
}

/**
 * Retrieve Reviews for a Product
 *
 *  Retrieves all reviews for a given product.
 *
 * @param string $productId The ID of the product.
 * @param PDO       $db       A PDO database connection object.
 * @return array  An array of review objects, or an empty array if no reviews are found.
 */
function getReviews(string $productId, PDO $db) {
    $sql = "SELECT * FROM reviews WHERE productId = :productId";
    $stmt = $db->prepare($sql);
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();

    $reviews = [];
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = $row;
    }

    return $reviews;
}


// Example Usage (Assuming you have a database connection called $db)
// This is just a demonstration - replace with your actual database details
// You need to set up your database connection and table before running this.
//
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

// Create a review
// $reviewCreated = createReview("123", "John Doe", 5, "Great product!", $db);
// if ($reviewCreated) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }

// Get reviews for product ID "123"
// $reviews = getReviews("123", $db);
// if (!empty($reviews)) {
//     echo "<br><h2>Reviews for Product 123:</h2>";
//     foreach ($reviews as $review) {
//         echo "<p><strong>Name:</strong> " . $review['userName'] . "</p>";
//         echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
//         echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
//         echo "<br>";
//     }
// } else {
//     echo "<p>No reviews found for product 123.</p>";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating (optional) The rating given for the item (1-5). Defaults to 0.
 * @param int $user_id (optional) The unique identifier of the user. If not provided, it will be automatically generated.
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully added, false otherwise.
 *   - 'message': A message indicating the status of the review operation.
 *   - 'review_id': The ID of the newly created review (if successful).
 *
 * @throws Exception if the database connection fails.
 */
function add_user_review(string $item_id, string $user_name, string $review_text, int $rating = 0, int $user_id = 0) {

    // **IMPORTANT: Replace this with your actual database connection code**
    // This is just a placeholder for demonstration.
    $db_host = 'localhost';
    $db_name = 'your_database_name';
    $db_user = 'your_database_user';
    $db_password = 'your_database_password';

    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database connection failed: ' . $e->getMessage()];
    }

    // Check if user_id is provided; otherwise, generate one.
    if ($user_id == 0) {
        $user_id = $pdo->lastInsertId(); // Get the last inserted ID
    }


    // Sanitize inputs - IMPORTANT for security!
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    // Validation -  Ensure rating is within the valid range.
    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid rating. Rating must be between 1 and 5.'];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating, user_id) VALUES (:item_id, :user_name, :review_text, :rating, :user_id)";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind the parameters
    $stmt->bindParam(':item_id', $item_id);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);

    // Execute the statement
    try {
        $stmt->execute();
        $review_id = $pdo->lastInsertId(); // Get the ID of the newly created review
        return ['success' => true, 'message' => 'Review submitted successfully.', 'review_id' => $review_id];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Error submitting review: ' . $e->getMessage()];
    }
}


// Example Usage:
// $review_result = add_user_review('product123', 'John Doe', 'Great product!', 5);
// print_r($review_result);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or service.
 * It handles input validation, sanitization, and stores the review data.
 *
 * @param string $productId  The ID of the product or service being reviewed.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText  The text of the review.
 * @param int    $rating     The rating given by the reviewer (1-5).
 *
 * @return bool  True on success, false on failure.
 */
function submitReview(string $productId, string $reviewerName, string $reviewText, int $rating)
{
  // Validate inputs
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty.");
    return false;
  }

  if (empty($reviewerName)) {
    error_log("Error: Reviewer Name cannot be empty.");
    return false;
  }

  if (empty($reviewText)) {
    error_log("Error: Review Text cannot be empty.");
    return false;
  }

  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return false;
  }

  // Sanitize inputs (important for security - prevent XSS)
  $productId = filter_var($productId, FILTER_SANITIZE_STRING); // Sanitize to prevent HTML injection
  $reviewerName = filter_var($reviewerName, FILTER_SANITIZE_STRING);
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);

  // Validate sanitized inputs - important to ensure data is still valid after sanitization
  if (empty($productId) || empty($reviewerName) || empty($reviewText)) {
      error_log("Error: Sanitized input is empty after processing.");
      return false;
  }

  // Store the review data (Replace this with your database logic)
  $reviewData = [
    'product_id' => $productId,
    'reviewer_name' => $reviewerName,
    'review_text' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add a timestamp for record keeping
  ];

  // Example: Save to a file (for demonstration)
  $filename = "reviews_" . $productId . ".txt";
  $dataString = json_encode($reviewData);
  file_put_contents($filename, $dataString . PHP_EOL, FILE_APPEND);

  // In a real application, you would save this to a database
  // For example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  // $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_name, review_text, rating, timestamp) VALUES (?, ?, ?, ?, ?)");
  // $stmt->execute([$productId, $reviewerName, $reviewText, $rating, time()]);

  return true;
}

// Example Usage:
$productId = "product123";
$reviewerName = "John Doe";
$reviewText = "This product is amazing!  I highly recommend it.";
$rating = 4;

if (submitReview($productId, $reviewerName, $reviewText, $rating)) {
  echo "Review submitted successfully!";
} else {
  echo "Review submission failed.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a specific item.
 *
 * @param string $itemId The ID of the item being reviewed.
 * @param int $maxReviews The maximum number of reviews to display (optional, defaults to 5).
 * @return array An array containing:
 *              - 'reviews': An array of review objects.
 *              - 'totalReviews': The total number of reviews for the item.
 */
function getReviews(string $itemId, int $maxReviews = 5) {
  // Simulate a database or data source for reviews.  Replace this with your actual data source.
  $reviewsData = [
    'item123' => [
      ['user' => 'John Doe', 'rating' => 4, 'comment' => 'Great product!  Highly recommended.'],
      ['user' => 'Jane Smith', 'rating' => 5, 'comment' => 'Excellent quality and fast delivery.'],
      ['user' => 'Peter Jones', 'rating' => 3, 'comment' => 'Good value for the price.'],
    ],
    'item456' => [
      ['user' => 'Alice Brown', 'rating' => 2, 'comment' => 'Not as good as I expected.'],
      ['user' => 'Bob Williams', 'rating' => 3, 'comment' => 'Decent, but could be better.'],
    ],
  ];

  // Check if the item has any reviews
  if (!isset($reviewsData[$itemId])) {
    return ['reviews' => [], 'totalReviews' => 0];
  }

  $reviews = $reviewsData[$itemId];

  // Limit the number of reviews
  $reviews = array_slice($reviews, 0, $maxReviews, true);

  // Calculate the total number of reviews
  $totalReviews = count($reviews);

  return ['reviews' => $reviews, 'totalReviews' => $totalReviews];
}


/**
 * Display Reviews Function (Example)
 *
 * This function takes the array of reviews and formats it for display.
 *
 * @param array $reviews The array of review objects returned by getReviews().
 */
function displayReviews(array $reviews) {
  echo "<div class='review-container'>";
  if (empty($reviews['reviews'])) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Item " . $reviews['itemId'] . "</h2>"; // Assuming you pass $itemId to this function
    echo "<ul>";
    foreach ($reviews['reviews'] as $review) {
      echo "<li>";
      echo "<p><strong>User:</strong> " . $review['user'] . "</p>";
      echo "<p><strong>Rating:</strong> " . $review['rating'] . " / 5</p>";
      echo "<p>" . $review['comment'] . "</p>";
      echo "</li>";
    }
    echo "</ul>";

    if (count($reviews['reviews']) < $reviews['totalReviews']) {
      echo "<p>Showing " . count($reviews['reviews']) . " of " . $reviews['totalReviews'] . " reviews.</p>";
    }
  }
  echo "</div>";
}



// Example Usage:

// Get reviews for item 'item123'
$reviewsForItem123 = getReviews('item123');
displayReviews($reviewsForItem123);

// Get reviews for item 'item456'
$reviewsForItem456 = getReviews('item456');
displayReviews($reviewsForItem456);

// Get reviews for a non-existent item
$reviewsForNonExistentItem = getReviews('item999');
displayReviews($reviewsForNonExistentItem);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or item.
 * It includes input validation and basic sanitization.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $reviewText  The review text submitted by the user.
 * @param array $allowedHTML  An array of allowed HTML tags (optional, defaults to empty array).
 *
 * @return array An array containing:
 *               - 'success': True if the review was successfully submitted.
 *               - 'message': A message indicating the status of the submission.
 *               - 'review': The submitted review text.
 */
function submitReview(string $productName, string $reviewText, array $allowedHTML = []) {

  // Input Validation and Sanitization
  if (empty($productName)) {
    return [
      'success' => false,
      'message' => 'Product name cannot be empty.',
      'review' => ''
    ];
  }

  if (empty($reviewText)) {
    return [
      'success' => false,
      'message' => 'Review text cannot be empty.',
      'review' => ''
    ];
  }

  // Basic HTML Sanitization (example - customize as needed)
  $reviewText = strip_tags($reviewText, $allowedHTML); // Remove tags from the allowed list

  // You can add more sophisticated sanitization here, like escaping HTML entities
  // or using a more robust HTML sanitization library.

  // Data Storage (Simple example - consider database for real applications)
  $reviews = ['product' => $productName, 'review' => $reviewText];

  // Store the review (replace with database logic in a real application)
  // For example:
  // $result = insertReviewIntoDatabase($reviews);

  // If the insertion was successful (replace with your database query result)
  // $success = true;
  // $message = 'Review submitted successfully.';
  // $review = $reviewText;
  // else {
  //  $success = false;
  //  $message = 'Error submitting review.';
  //  $review = '';
  // }


  // Simulate a successful submission
  $success = true;
  $message = 'Review submitted successfully.';
  $review = $reviewText;


  return [
    'success' => $success,
    'message' => $message,
    'review' => $review
  ];
}

/**
 * Displays a review form and a list of reviews.
 */
function displayReviews() {
  echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
  echo "Product Name: <input type='text' name='productName'><br>";
  echo "<textarea name='reviewText' rows='5' cols='50'></textarea><br>";
  echo "<input type='submit' value='Submit Review'>";
  echo "</form>";

  echo "<br>";

  echo "<h2>Reviews:</h2>";

  // Simulated review data (replace with data retrieval from database)
  $reviews = [
    ['product' => 'Laptop X1', 'review' => 'Excellent laptop! Fast and reliable.'],
    ['product' => 'Mouse M2', 'review' => 'Great mouse, comfortable to use.'],
    ['product' => 'Keyboard K3', 'review' => 'Good keyboard, but the keys feel a little stiff.'],
  ];


  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>Product: " . $review['product'] . ", Review: " . $review['review'] . "</li>";
  }
  echo "</ul>";
}


// Example Usage:
displayReviews();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $productName = $_POST["productName"];
  $reviewText = $_POST["reviewText"];

  $result = submitReview($productName, $reviewText);

  if ($result['success']) {
    echo "<p style='color:green;'> " . $result['message'] . "</p>";
    // You could redirect the user or display a confirmation message.
  } else {
    echo "<p style='color:red;'> " . $result['message'] . "</p>";
  }
}
?>


<?php

/**
 * This function handles user reviews, allowing for adding, displaying,
 * and potentially updating or deleting them.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The user's review comment.
 * @param int $rating  The rating given by the user (1-5).
 * @param int $userId (Optional) The ID of the user submitting the review.
 *                    If not provided, a unique ID will be generated.
 * @return array An array containing:
 *   - 'success': True if the review was created successfully, false otherwise.
 *   - 'message': A message indicating the status of the review creation.
 *   - 'reviewId': The ID of the newly created review (if successful).
 */
function createReview($productId, $name, $comment, $rating, $userId = null) {
  // Input Validation - Essential for security and data integrity
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.', 'reviewId' => null];
  }
  if (empty($name)) {
    return ['success' => false, 'message' => 'Reviewer name cannot be empty.', 'reviewId' => null];
  }
  if (empty($comment)) {
    return ['success' => false, 'message' => 'Review comment cannot be empty.', 'reviewId' => null];
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.', 'reviewId' => null];
  }

  // Unique ID Generation (optional - if not provided by user)
  if ($userId === null) {
    $userId = generateUniqueUserId();
  }

  // Data Storage (Example: Using an array.  For a real application,
  // you'd use a database)
  $newReview = [
    'productId' => $productId,
    'name' => $name,
    'comment' => $comment,
    'rating' => $rating,
    'userId' => $userId,
    'timestamp' => time()
  ];

  // Simulate Storing Review (Replace with database insertion)
  // In a real application, you would insert this data into a database.
  // For example:
  // $result = insertReviewIntoDatabase($newReview);

  // Simulate successful insertion
  // $result = true;

  // Example response -  Adjust based on your actual storage implementation
  return ['success' => true, 'message' => 'Review created successfully!', 'reviewId' => $userId];
}


/**
 *  A placeholder function for generating a unique user ID.
 *  In a real application, this would likely use a database sequence or
 *  a UUID generator.
 *
 * @return int A unique user ID.
 */
function generateUniqueUserId() {
  // This is a simple example.  In a production environment,
  // use a more robust method for generating unique IDs.
  return mt_rand(100000, 999999);
}


// Example Usage:
$product_id = '123';
$reviewer_name = 'John Doe';
$review_comment = 'Great product! Highly recommended.';
$rating = 5;

$review_result = createReview($product_id, $reviewer_name, $review_comment, $rating);

if ($review_result['success']) {
  echo "Review created successfully! Review ID: " . $review_result['reviewId'] . "<br>";
} else {
  echo "Error creating review: " . $review_result['message'] . "<br>";
}

// Example with a provided user ID:
$user_id = 42;
$review_result2 = createReview($product_id, $reviewer_name, $review_comment, $rating, $user_id);

if ($review_result2['success']) {
  echo "Review created successfully (using provided ID)! Review ID: " . $review_result2['reviewId'] . "<br>";
} else {
  echo "Error creating review (using provided ID): " . $review_result2['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productName The name of the product.
 * @param string $reviewText The review text entered by the user.
 * @param string $username  The username of the reviewer (optional, for display).
 * @param int    $rating   The rating given by the user (1-5).
 * @param int    $userId  The unique ID of the user (optional, for database storage).
 *
 * @return array An array containing:
 *   - 'success':  True if the review was successfully saved, false otherwise.
 *   - 'message':  A message describing the status of the review.
 *   - 'review':   The review data as an associative array (for display or storage).
 */
function create_user_review(string $productName, string $reviewText, string $username = 'Anonymous', int $rating = 0, int $userId = null) {
  // Validate input - important for security and data integrity
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.', 'review' => []];
  }
  if ($rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be between 1 and 5.', 'review' => []];
  }

  // Create a review object
  $review = [
    'product' => $productName,
    'text' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'timestamp' => time(), // Add a timestamp for record keeping
    'userId' => $userId  // Optional user ID (useful for database integration)
  ];

  //  **Here's where you'd normally store the review in a database.**
  //  This is a placeholder.  Replace with your database logic.
  //  Example using a simple array to represent a database row:
  //  $review_data = save_review_to_database($review);

  // Simulate saving to a database (for demonstration):
  $review_data = [
    'product' => $productName,
    'text' => $reviewText,
    'username' => $username,
    'rating' => $rating,
    'timestamp' => time(),
    'userId' => $userId
  ];


  // Check if the save was successful (simulated).
  if ($review_data) {
    return ['success' => true, 'message' => 'Review saved successfully.', 'review' => $review_data];
  } else {
    return ['success' => false, 'message' => 'Failed to save review.', 'review' => []];
  }
}

/**
 *  Simulated database saving function (for demonstration purposes)
 *  Replace this with your actual database interaction code.
 *
 * @param array $reviewData The review data to save.
 * @return array|null  The saved review data or null if saving failed.
 */
function save_review_to_database(array $reviewData) {
    // This is a placeholder.  In a real application, you would connect to your database
    // and perform the necessary operations (e.g., INSERT INTO reviews table).
    // For this example, we just return the data.

    // Simulate potential error:
    if (rand(0, 10) > 7) { // 30% chance of "failure"
       return null;
    }

    return $reviewData;
}


// **Example Usage:**

// Create a review
$review_result = create_user_review('Awesome Widget', 'This widget is amazing!', 'John Doe', 5);

if ($review_result['success']) {
  echo "Review saved successfully!
";
  print_r($review_result['review']);
} else {
  echo "Error saving review: " . $review_result['message'] . "
";
}

// Create another review with a different user and rating
$review_result2 = create_user_review('Basic Gadget', 'Could be better.', 'Jane Smith', 3, 123); //Include UserId

if ($review_result2['success']) {
  echo "Review saved successfully!
";
  print_r($review_result2['review']);
} else {
  echo "Error saving review: " . $review_result2['message'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews
 * for a specific product.  It uses a simple database interaction for demonstration.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user submitting the review.
 * @param string $rating The rating provided by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $db_connection PDO connection to your database.
 *
 * @return array An array containing:
 *   - success: True if the operation was successful, False otherwise.
 *   - message: A message indicating the outcome of the operation.
 *   - review_id: The ID of the newly created review (if successful).
 *
 */
function create_review(string $product_id, string $user_id, string $rating, string $comment, PDO $db_connection): array
{
  // Input validation (Important for security and data integrity)
  if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => 'Error: All fields are required.',
      'review_id' => null
    ];
  }

  if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
    return [
      'success' => false,
      'message' => 'Error: Rating must be a number between 1 and 5.',
      'review_id' => null
    ];
  }
    
  // SQL Injection Prevention (IMPORTANT!) - Use Prepared Statements
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment) 
          VALUES (:product_id, :user_id, :rating, :comment)";

  try {
    $stmt = $db_connection->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    $stmt->execute();
    $review_id = $db_connection->lastInsertId();

    return [
      'success' => true,
      'message' => 'Review created successfully.',
      'review_id' => $review_id
    ];
  } catch (PDOException $e) {
    // Handle database errors appropriately (logging, user-friendly message)
    return [
      'success' => false,
      'message' => 'Error: ' . $e->getMessage(),
      'review_id' => null
    ];
  }
}


// Example Usage (assuming you have a PDO database connection $db_connection)
//
// $product_id = '123';
// $user_id = 'user456';
// $rating = '5';
// $comment = 'Great product!';

// $result = create_review($product_id, $user_id, $rating, $comment, $db_connection);

// if ($result['success']) {
//   echo "Review created! Review ID: " . $result['review_id'];
// } else {
//   echo "Error: " . $result['message'];
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating      The rating given by the user (e.g., 1-5).
 * @param string $database_connection  Optional.  A database connection object.  If not provided, 
 *                                      it will attempt to connect to a database based on default settings.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully saved, false otherwise.
 *               - 'message': A message indicating the outcome of the operation (e.g., success, error).
 */
function saveReview(
    string $item_id,
    string $user_name,
    string $review_text,
    int $rating,
    string $database_connection = null
): array {

    // Input Validation (important for security and data integrity)
    if (empty($item_id) || empty($user_name) || empty($review_text)) {
        return [
            'success' => false,
            'message' => 'Error: Item ID, User Name, and Review Text are required.'
        ];
    }

    if ($rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Error: Rating must be between 1 and 5.'
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)";

    // Prepare the statement
    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        // Handle the error.  This is crucial for debugging and production.
        return [
            'success' => false,
            'message' => 'Error: Database preparation failed. Check database connection and SQL syntax.'
        ];
    }

    // Bind the parameters
    $stmt->bind_param("sss", $item_id, $user_name, $review_text);

    // Execute the statement
    if ($stmt->execute() === false) {
        // Handle the error.  Crucial for debugging.
        return [
            'success' => false,
            'message' => 'Error: Review save failed. Check database connection, SQL syntax, and permissions.'
        ];
    }

    // Clean up
    $stmt->close();

    return [
        'success' => true,
        'message' => 'Review saved successfully!'
    ];
}

/**
 * Get User Reviews
 *
 *  Fetches reviews for a specific item.
 *
 * @param string $item_id  The unique identifier for the item.
 * @param string $database_connection A database connection object.
 *
 * @return array An array containing:
 *              - 'reviews':  An array of review objects, or an empty array if no reviews exist.
 *              - 'success': True if the operation was successful, false otherwise.
 *              - 'message': A message indicating the outcome.
 */
function getReviews(string $item_id, string $database_connection): array {
    $sql = "SELECT * FROM reviews WHERE item_id = ? ORDER BY rating DESC";  // Order by rating for best reviews
    $stmt = $database_connection->prepare($sql);

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Database preparation failed.'
        ];
    }

    $stmt->bind_param("s", $item_id);

    $stmt->execute();

    if ($stmt === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Query execution failed.'
        ];
    }

    $result = $stmt->get_result();

    if ($result === false) {
        return [
            'reviews' => [],
            'success' => false,
            'message' => 'Error: Getting result set failed.'
        ];
    }

    $reviews = [];
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }

    $stmt->close();
    $result->close(); // Important to close the result set.

    return [
        'reviews' => $reviews,
        'success' => true,
        'message' => 'Reviews retrieved successfully.'
    ];
}


// Example Usage (assuming you have a database connection set up)
//  This example is illustrative and doesn't include actual database setup.
//  You'll need to adapt it to your specific database setup.

//  Example 1: Saving a review
//  $review_data = saveReview('product123', 'John Doe', 'This is a great product!', 5);
//  print_r($review_data);

//  Example 2: Getting reviews for a product
// $reviews_data = getReviews('product123');
// print_r($reviews_data);

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $name The name of the reviewer.
 * @param string $comment The review comment.
 * @param int    $rating   (Optional) The rating (1-5).  Defaults to 0.
 * @return array An array containing the review details and a success/failure flag.
 */
function submitReview($productId, $name, $comment, $rating = 0) {
    // Input Validation - VERY IMPORTANT!
    if (empty($productId)) {
        return ['success' => false, 'message' => 'Product ID cannot be empty.'];
    }
    if (empty($name)) {
        return ['success' => false, 'message' => 'Reviewer name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['success' => false, 'message' => 'Review comment cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Rating must be between 1 and 5.'];
    }

    // Store the review in a database (or other storage mechanism)
    // This is just a placeholder - replace with your actual database logic

    $review = [
        'product_id' => $productId,
        'name'        => $name,
        'comment'     => $comment,
        'rating'      => $rating,
        'timestamp'   => time()
    ];

    //  Simulate storing the review to a file.  Replace with actual database logic
    $filename = "reviews.txt";
    file_put_contents($filename, $review . PHP_EOL, FILE_APPEND);


    return ['success' => true, 'review' => $review];
}


/**
 * Display User Reviews
 *
 * Retrieves and displays reviews for a given product ID.
 *
 * @param string $productId The ID of the product.
 * @return array An array containing the reviews or an empty array if none are found.
 */
function displayReviews($productId) {
    // Retrieve reviews from a database or file.
    // This is just a placeholder - replace with your actual database logic

    $filename = "reviews.txt";
    $reviews = file($filename, FILE_IGNORE_NEW_LINES); //Reads the file line by line

    // Remove the first line (header) from the array
    array_shift($reviews);

    return $reviews;
}


// Example Usage:
// Simulate a user submitting a review
$reviewResult = submitReview("123", "John Doe", "Great product!  Works perfectly.", 5);

if ($reviewResult['success']) {
    echo "Review submitted successfully:<br>";
    echo "Product ID: " . $reviewResult['review']['product_id'] . "<br>";
    echo "Reviewer: " . $reviewResult['review']['name'] . "<br>";
    echo "Rating: " . $reviewResult['review']['rating'] . "<br>";
    echo "Comment: " . $reviewResult['review']['comment'] . "<br>";
} else {
    echo "Error submitting review: " . $reviewResult['message'] . "<br>";
}



// Display all reviews for product "123"
$allReviews = displayReviews("123");

echo "<br><h2>All Reviews for Product 123:</h2>";

if (empty($allReviews)) {
    echo "<p>No reviews found.</p>";
} else {
    foreach ($allReviews as $review) {
        echo "<p><strong>Reviewer:</strong> " . $review['name'] . "</p>";
        echo "<p><strong>Rating:</strong> " . $review['rating'] . "</p>";
        echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
        echo "<hr>";
    }
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param array $reviews (Optional) An array of existing reviews to store.  If null, a new array is created.
 *
 * @return array|null  Returns the updated array of reviews, or null if an error occurs.
 */
function storeUserReview(string $productId, string $username, string $reviewText, int $rating, array $reviews = null) {
  // Basic validation (add more robust validation as needed)
  if (empty($productId)) {
    error_log("Error: Product ID cannot be empty.");
    return null;
  }
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return null;
  }
  if (empty($reviewText)) {
    error_log("Error: Review text cannot be empty.");
    return null;
  }
  if ($rating < 1 || $rating > 5) {
    error_log("Error: Rating must be between 1 and 5.");
    return null;
  }

  // Create a new review object
  $review = [
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => time() // Add timestamp for sorting/ordering
  ];

  // If a reviews array was provided, append it.  Otherwise create a new one.
  if ($reviews === null) {
    $reviews = [];
  }

  $reviews[] = $review;
  return $reviews;
}


/**
 * Display User Reviews
 *
 * This function displays a list of user reviews for a given product.
 *
 * @param string $productId The ID of the product to retrieve reviews for.
 * @param array $reviews An array of user reviews.
 *
 * @return void Prints the reviews to the console (can be modified to output to HTML etc.).
 */
function displayReviews(string $productId, array $reviews) {
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
  if (empty($reviews)) {
    echo "<p>No reviews yet!</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['reviewText'] . " (Rating: " . $review['rating'] . ") - " . date("Y-m-d H:i:s", strtotime($review['timestamp'])); // Format timestamp for readability
    echo "</li>";
  }
  echo "</ul>";
}


// Example Usage:
// --------------------------------------------------

// Create a new reviews array (or use an existing one)
$productReviews = storeUserReview("P123", "John Doe", "Great product!", 5);
if ($productReviews !== null) {
  // Append another review
  $productReviews = storeUserReview("P123", "Jane Smith", "Works well.", 4);
  if ($productReviews !== null) {
    // Display the reviews
    displayReviews("P123", $productReviews);
  }
} else {
  echo "<p>Error storing review.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 * It includes basic validation and sanitization.
 *
 * @param string $product_id The ID of the product or service being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating A rating from 1 to 5 (inclusive).
 * @param string $comment The user's review comment.
 * @return bool True if the review was successfully saved, false otherwise.
 */
function save_review(string $product_id, string $username, string $rating, string $comment): bool
{
    // Input Validation - Basic
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Invalid review data: Product ID, username, rating, and comment cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9\s]+$/', $username)) {
        error_log("Invalid username:  Username must contain only alphanumeric characters and spaces.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    // Sanitize Input -  Very basic.  More robust sanitization is recommended for production.
    $product_id = trim($product_id);
    $username = trim($username);
    $rating = (int)$rating; // Cast to integer for numerical comparison
    $comment = strip_tags($comment); // Remove HTML tags
    $comment = trim($comment);


    // Database Interaction (Example - Replace with your actual database logic)
    // This is a placeholder and should be adapted to your database setup.
    try {
        // Connect to your database (replace with your connection details)
        // $pdo = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        // Prepare the SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
                VALUES (:product_id, :username, :rating, :comment)";

        // Prepare the statement
        $stmt = $pdo->prepare($sql);

        // Bind the parameters
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query
        $stmt->execute();

        // Get the last inserted ID (useful for display)
        $review_id = $pdo->lastInsertId();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


// Example Usage (For testing - remove or adjust for your application)
// Create a dummy database connection for demonstration
$pdo = null;

try {
    $pdo = new PDO("mysql:host=localhost;dbname=test_reviews", "root", ""); // Replace with your details
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    echo "Database connection failed: " . $e->getMessage() . "
";
    exit;
}

// Test case 1 - Successful save
$result = save_review("123", "JohnDoe", 4, "Great product, highly recommended!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save.
";
}

// Test case 2 - Invalid rating
$result = save_review("456", "JaneSmith", 6, "Excellent!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save (invalid rating).
";
}

// Test case 3 - Empty input
$result = save_review("", "PeterPan", 3, "Superb!");
if ($result) {
    echo "Review saved successfully!
";
} else {
    echo "Review failed to save (empty data).
";
}
?>


<?php

/**
 * User Review Function - Allows users to submit and view reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db_connection = null; // Database connection object (optional - for persistence)


    /**
     * Constructor:  Optionally connects to the database.
     *
     * @param PDO $db  (Optional) A PDO database connection object.  If null, reviews will be stored in memory.
     */
    public function __construct(PDO $db = null)
    {
        $this->db_connection = $db;
    }

    /**
     * Adds a new review.
     *
     * @param string $username  The username of the reviewer.
     * @param string $reviewText The review text.
     * @return bool True on success, false on failure (e.g., validation issues).
     */
    public function addReview(string $username, string $reviewText)
    {
        // Basic validation - can be expanded
        if (empty($username) || empty($reviewText)) {
            return false;
        }

        // Optional:  More robust validation (e.g., sanitize inputs, check length, etc.)
        // Example:
        // $username = trim($username);
        // $reviewText = trim($reviewText);

        $review = [
            'username' => $username,
            'review_text' => $reviewText,
            'timestamp' => time() // Add a timestamp for ordering and tracking
        ];

        $this->reviews[] = $review; // Add to the array

        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a review by its ID (not applicable for in-memory storage, but good practice).
     *
     * @param int $reviewId  The ID of the review.  (For database implementations, this would be the primary key.)
     * @return array|null  The review object if found, null if not found.
     */
    public function getReviewById(int $reviewId)
    {
        //  This is a placeholder for database implementation.
        //  In a real database, you'd query the database here.
        return null; // Simulate finding a review
    }


    /**
     *  Stores the reviews in a database (if a database connection is established).
     *  This method is kept for completeness and demonstration.
     */
    public function saveToDatabase()
    {
        if ($this->db_connection === null) {
            echo "No database connection established.  Cannot save reviews.
";
            return;
        }

        try {
            //  Example:  This is a basic example. Adapt to your database schema.
            $sql = "INSERT INTO reviews (username, review_text, timestamp) VALUES (:username, :review_text, :timestamp)";
            $stmt = $this->db_connection->prepare($sql);
            $stmt->bindParam(':username', $this->reviews[0]['username']); // Assuming we're saving the first review
            $stmt->bindParam(':review_text', $this->reviews[0]['review_text']);
            $stmt->bindParam(':timestamp', $this->reviews[0]['timestamp']);

            $stmt->execute();
            echo "Review saved to database.
";

        } catch (PDOException $e) {
            echo "Error saving review to database: " . $e->getMessage() . "
";
        }
    }
}



// Example Usage:
// ------------------------------------------------------------------

// 1. In-Memory Storage (no database)
$reviewSystem = new UserReview();

$reviewSystem->addReview('JohnDoe', 'Great product!  Highly recommended.');
$reviewSystem->addReview('JaneSmith', 'Could be better. Needs more features.');

$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// 2.  Using a Database (Requires a database connection)
// Example using a dummy PDO connection (replace with your actual database details)
// This will only work if you have a database set up with a 'reviews' table.
try {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_user', 'your_password');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For proper error handling

    $reviewSystemDB = new UserReview($db);

    $reviewSystemDB->addReview('User1', 'Excellent!');
    $reviewSystemDB->addReview('User2', 'Okay.');

    $reviewSystemDB->saveToDatabase(); // Save to the database
} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage() . "
";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or item.
 *
 * @param string $productName The name of the product or item being reviewed.
 * @param array $reviews An array of review objects.  Each review object should have at least:
 *                     - `user`:  The user's name or ID.
 *                     - `rating`:  An integer representing the rating (e.g., 1-5).
 *                     - `comment`: The user's comment.
 * @return string HTML markup containing the reviews.
 */
function displayUserReviews(string $productName, array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<div class=\"product-reviews\">";
    $html .= "<h3>Reviews for {$productName}</h3>";
    $html .= "<ul class=\"review-list\">";

    foreach ($reviews as $review) {
        $html .= "<li class=\"review\">";
        $html .= "<p><strong>" . htmlspecialchars($review['user']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
        $html .= "<p>Rating: " . $review['rating'] . "</p>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    $html .= "</div>";

    return $html;
}


/**
 * Example Usage:
 */

// Sample Reviews Data (in a real application, this would come from a database)
$productName = "Awesome Gadget X";
$reviews = [
    [
        'user' => 'John Doe',
        'rating' => 5,
        'comment' => 'This gadget is amazing!  I highly recommend it.'
    ],
    [
        'user' => 'Jane Smith',
        'rating' => 4,
        'comment' => 'Great product, works as expected.  Could be a little cheaper.'
    ],
    [
        'user' => 'Peter Jones',
        'rating' => 3,
        'comment' => 'It's okay.  Not quite what I was hoping for.'
    ]
];

// Display the reviews
$reviewHtml = displayUserReviews($productName, $reviews);

// Output the HTML
echo $reviewHtml;

?>


<?php
// Assuming you have a database connection established

// Get reviews from the database (simplified example)
$reviews = getReviewsFromDatabase($productName); // Replace with your actual database query

// Display the reviews (as shown above)
$reviewHtml = displayUserReviews($productName, $reviews);
echo $reviewHtml;
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with various options.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment  The user's comment on the product.
 * @param string $databaseConnection  A valid database connection object.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    $databaseConnection // Use $databaseConnection instead of passing it as a string
) {
    try {
        // Validate input (basic - expand for more robust validation)
        if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
            throw new Exception("All fields are required.");
        }

        if (!preg_match('/^[0-5][0-9]*$/', $rating)) {
            throw new Exception("Rating must be a number between 1 and 5.");
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO reviews (product_id, user_name, rating, comment) 
                VALUES (?, ?, ?, ?)";

        // Prepare the statement
        $stmt = $databaseConnection->prepare($sql);

        // Bind the parameters
        $stmt->bind_param("ssis", $productId, $username, $rating, $comment);

        // Execute the statement
        $stmt->execute();

        // Close the statement
        $stmt->close();

        return true;

    } catch (Exception $e) {
        // Handle errors (logging is recommended)
        error_log("Error storing review: " . $e->getMessage());  // Log the error
        return false;
    }
}

// Example Usage (assuming you have a database connection named $conn)

// $productId = "123";
// $username = "JohnDoe";
// $rating = "4";
// $comment = "Great product! Highly recommended.";

// if (storeUserReview($productId, $username, $rating, $comment, $conn)) {
//     echo "Review successfully stored!";
// } else {
//     echo "Failed to store review.";
// }

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or service.
 *
 * @param string $productName - The name of the product or service being reviewed.
 * @param string $userId - The ID of the user writing the review.  Can be null for anonymous reviews.
 * @param string $reviewText - The text of the review.
 * @param int $rating - The rating given by the user (e.g., 1-5 stars).
 * @param PDO $db - A PDO database connection object.
 *
 * @return array - An array containing the review data or an error message.
 */
function create_review(string $productName, string $userId, string $reviewText, int $rating, PDO $db) {
    // Input Validation (Basic - Expand as needed)
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be a number between 1 and 5.'];
    }

    // SQL query -  Protect against SQL injection!  Use prepared statements.
    $sql = "INSERT INTO reviews (product_name, user_id, review_text, rating)
            VALUES (:product_name, :user_id, :review_text, :rating)";

    try {
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':review_text', $reviewText);
        $stmt->bindParam(':rating', $rating);

        $result = $stmt->execute();

        if ($result) {
            return ['success' => 'Review created successfully.'];
        } else {
            return ['error' => 'Failed to create review. Database error.'];
        }
    } catch (PDOException $e) {
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}


/**
 * Function to display all reviews for a product.
 *
 * @param string $productName - The name of the product to retrieve reviews for.
 * @param PDO $db - A PDO database connection object.
 *
 * @return array - An array containing the review data.
 */
function get_reviews(string $productName, PDO $db) {
    $sql = "SELECT * FROM reviews WHERE product_name = :product_name";

    try {
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_name', $productName);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $reviews;
    } catch (PDOException $e) {
        return ['error' => 'Database error: ' . $e->getMessage()];
    }
}



// --- Example Usage (For demonstration -  replace with your actual database setup) ---

// **IMPORTANT: Replace these with your database connection details!**
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

try {
    $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}



// Example of creating a review:
$review_data = create_review('Awesome Product', 'user123', 'This is a fantastic product!', 5, $db);
print_r($review_data); // Output the result of the create_review function.
// Example: Displaying reviews for a product
$product_name = 'Awesome Product';
$reviews = get_reviews($product_name, $db);
print_r($reviews); // Display the reviews.

// ---  End of Example Usage ---



// ---  Database Table Structure (Example)  ---
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    user_id VARCHAR(255) NULL,  // Can be NULL for anonymous reviews
    review_text TEXT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5)
);
*/


<?php

/**
 * Class UserReview
 *
 * Allows users to submit and view reviews for a product or service.
 */
class UserReview {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The name of the user who wrote the review.
     * @param string $rating The rating given by the user (e.g., 1-5 stars).
     * @param string $comment The user's review text.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview($user, $rating, $comment) {
        if (!is_string($user) || !is_string($comment)) {
            return false; // Invalid input
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $this->reviews[] = [
            'user' => $user,
            'rating' => $rating,
            'comment' => $comment
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review objects.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves reviews for a specific product or service (placeholder - extend as needed)
     *
     * @param string $productName (Optional)  Filter by product name
     * @return array An array of review objects filtered by product name.  Returns all reviews if no filter is specified.
     */
    public function getReviewsByProduct($productName = '') {
        if (empty($productName)) {
            return $this->getAllReviews();
        }

        $filteredReviews = [];
        foreach ($this->getAllReviews() as $review) {
            // Add your filtering logic here based on $productName.
            // For example, if you have a field like 'product_id' in your reviews:
            // if ($review['product_id'] === $productName) {
            //    $filteredReviews[] = $review;
            // }
        }
        return $filteredReviews;
    }

    /**
     *  Gets the average rating.
     *  
     *  @return float|null The average rating, or null if there are no reviews.
     */
    public function getAverageRating() {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($this->reviews);
    }

}

// Example Usage:

// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('John Doe', 4, 'Great product, highly recommend!');
$reviewSystem->addReview('Jane Smith', 5, 'Excellent service and fast delivery.');
$reviewSystem->addReview('Peter Jones', 3, 'It was okay, could be better.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "<h2>All Reviews:</h2>";
foreach ($allReviews as $review) {
    echo "<strong>User:</strong> " . $review['user'] . "<br>";
    echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
    echo "<strong>Comment:</strong> " . $review['comment'] . "<br><br>";
}

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "Average Rating: " . $averageRating . "<br>";
} else {
    echo "No reviews yet.";
}

// Get reviews for a specific product (example - replace 'Product A' with the actual product name)
$productReviews = $reviewSystem->getReviewsByProduct('Product A'); // This will return an empty array in this example.
echo "<h2>Reviews for Product A:</h2>";
if (!empty($productReviews)) {
    foreach ($productReviews as $review) {
        echo "<strong>User:</strong> " . $review['user'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Comment:</strong> " . $review['comment'] . "<br><br>";
    }
} else {
    echo "No reviews found for Product A.";
}

?>


<?php

/**
 * User Review Class
 */
class UserReview {

    private $review_id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;
    private $review_date;

    /**
     * Constructor for the UserReview class
     *
     * @param int $review_id (Optional) - Unique ID for the review.  If not provided, one will be generated.
     * @param int $user_id The ID of the user who submitted the review.
     * @param int $product_id The ID of the product being reviewed.
     * @param int $rating The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment on the product.
     * @param string $review_date The date the review was submitted (e.g., "Y-m-d H:i:s").
     */
    public function __construct($review_id = null, $user_id, $product_id, $rating, $comment, $review_date) {
        $this->review_id = $review_id;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->review_date = $review_date;
    }

    /**
     * Getters and Setters (for encapsulation)
     */

    public function getReviewId() {
        return $this->review_id;
    }

    public function setReviewId($review_id) {
        $this->review_id = $review_id;
    }


    public function getUserId() {
        return $this->user_id;
    }

    public function setUserId($user_id) {
        $this->user_id = $user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function setProductId($product_id) {
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function setComment($comment) {
        $this->comment = $comment;
    }

    public function getReviewDate() {
        return $this->review_date;
    }

    public function setReviewDate($review_date) {
        $this->review_date = $review_date;
    }

    /**
     * Display the review information in a readable format.
     *
     * @return string  A formatted string representing the review.
     */
    public function displayReview() {
        return "Review ID: " . $this->getReviewId() .
               "
User ID: " . $this->getUserId() .
               "
Product ID: " . $this->getProductId() .
               "
Rating: " . $this->getRating() .
               "
Comment: " . $this->getComment() .
               "
Date: " . $this->getReviewDate();
    }

}


/**
 * User Review Function (Illustrative Example -  A Basic Review "Function")
 *
 * This is a simplified example demonstrating how you might *use* a UserReview object.
 *  In a real-world scenario, you'd likely integrate this with a database.
 */
function processUserReview($review_id, $user_id, $product_id, $rating, $comment, $review_date) {
    // Create a UserReview object
    $review = new UserReview($review_id, $user_id, $product_id, $rating, $comment, $review_date);

    // Basic validation (you'd want more robust validation in a real application)
    if ($review->getRating() < 1 || $review->getRating() > 5) {
        echo "Invalid rating. Rating must be between 1 and 5.
";
        return false;
    }

    // Display the review
    echo "Review Submitted:
" . $review->displayReview() . "

";

    // In a real application, you'd save this review to a database.

    return true; // Indicate success
}


// Example Usage
processUserReview(123, 45, 67, 4, "Great product!", "2023-10-27 10:00:00");
processUserReview(456, 78, 90, 5, "Excellent value!", "2023-10-27 11:30:00");
processUserReview(789, 10, 12, 3, "Okay", "2023-10-27 13:00:00"); //  Demonstrating a 3-star review


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It includes basic validation and error handling.  This is a simplified
 * example and can be expanded upon significantly for a production environment.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $username  The username of the reviewer.
 * @param string $rating   The rating given (e.g., 1-5).
 * @param string $comment  The review text.
 *
 * @return array An array containing the response data:
 *               - 'success': True if the operation was successful, false otherwise.
 *               - 'message': A message describing the result.
 *               - 'data':  The review data if successful, or an empty array.
 */
function create_user_review(string $productId, string $username, string $rating, string $comment) {
  // Input Validation (Basic)
  if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
    return [
      'success' => false,
      'message' => "All fields are required.",
      'data' => []
    ];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return [
      'success' => false,
      'message' => "Rating must be a number between 1 and 5.",
      'data' => []
    ];
  }

  // *** In a real application, you would: ***
  // 1. Connect to a database to store the review.
  // 2. Sanitize and validate the input thoroughly.
  // 3.  Handle database errors properly.
  // 4.  Potentially check for existing reviews for the same user and product.
  // 5.  Implement a more robust security mechanism (e.g., escaping user input).

  // For demonstration purposes, we'll just simulate a successful review creation.
  $review_id = time(); // Generate a simple unique ID
  $review = [
    'review_id' => $review_id,
    'product_id' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'date_created' => date('Y-m-d H:i:s')
  ];

  return [
    'success' => true,
    'message' => "Review created successfully.",
    'data' => $review
  ];
}


/**
 *  Example Usage
 */

// Create a review
$response = create_user_review('product123', 'JohnDoe', 4, 'Great product! Highly recommended.');

echo "<pre>";
print_r($response);
echo "</pre>";

// Example of an invalid response
$response = create_user_review('', 'JaneSmith', 3, 'Terrible.');
echo "<pre>";
print_r($response);
echo "</pre>";
?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display user reviews for a specific item.
 *
 * @param string $item_id The unique identifier of the item being reviewed.
 * @param string $item_title The title of the item being reviewed.
 * @param string $review_text The user-submitted review text.
 * @param array $user_data An array containing user data (username, etc.).  Optional.
 * 
 * @return array An array containing the review data and potentially an error message.
 */
function submit_review(string $item_id, string $item_title, string $review_text, array $user_data = []) {
    // Validate inputs - basic example
    if (empty($item_id) || empty($review_text)) {
        return ['success' => false, 'message' => 'Item ID and review text are required fields.'];
    }

    // Sanitize inputs (important for security)
    $item_id = filter_var($item_id, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    //  You might add more sophisticated validation here:
    //  - Check review text length
    //  -  Basic spam detection (e.g., blacklists)

    //  Store the review data (In a real application, this would be a database)
    $review = [
        'item_id' => $item_id,
        'item_title' => $item_title,
        'review_text' => $review_text,
        'user_id' => isset($user_data['user_id']) ? $user_data['user_id'] : null, // Use user ID if available
        'created_at' => date('Y-m-d H:i:s'),
    ];

    //  In a real application, you would save this $review array to a database.
    //  For example:
    //  $db->insert('reviews', $review);

    return ['success' => true, 'review_data' => $review, 'message' => 'Review submitted successfully!'];
}


/**
 * Displays user reviews for a given item.
 *
 * @param string $item_id The ID of the item to display reviews for.
 * @param array $reviews An array of review data (returned from submit_review).
 *
 * @return string HTML representation of the reviews.
 */
function display_reviews(string $item_id, array $reviews) {
    if (empty($reviews)) {
        return "<p>No reviews yet.</p>";
    }

    $html = "<h2>Reviews for {$reviews[$item_id]['item_title']}</h2>";
    $html .= "<ul>";

    foreach ($reviews[$item_id] as $review) {
        $html .= "<li>";
        $html .= "<p><strong>" . $review['user_id'] . ":</strong> " . $review['review_text'] . "</p>";
        $html .= "<span class='created_at'>" . $review['created_at'] . "</span>";
        $html .= "</li>";
    }

    $html .= "</ul>";
    return $html;
}



// Example Usage (Demonstration)
// -------------------------------------------------------------------

// 1. Submit a review:
$review_result = submit_review('product_123', 'Awesome Widget', 'This widget is amazing!  It does everything I need.');

if ($review_result['success']) {
    echo "<h2>Review Submitted</h2>";
    echo "<p>Review ID: " . $review_result['review_data']['item_id'] . "</p>";
    echo "<p>Review Text: " . $review_result['review_data']['review_text'] . "</p>";
} else {
    echo "<h2>Error</h2>";
    echo "<p>Error submitting review: " . $review_result['message'] . "</p>";
}

// 2. Display the reviews (assuming you have some reviews)
//  For this to work, you would need to populate the $reviews array from a database or other source.
//  For demonstration, we'll create a sample array.
$sample_reviews = [
    'product_123' => [
        ['item_id' => 'product_123', 'review_text' => 'Great product!'],
        ['item_id' => 'product_123', 'review_text' => 'Works as expected.'],
    ],
    'product_456' => [
        ['item_id' => 'product_456', 'review_text' => 'Not bad, but overpriced.'],
    ],
];

$reviews_html = display_reviews('product_123', $sample_reviews);
echo $reviews_html;
?>


<?php

/**
 * Class UserReview
 *
 * This class provides functionality to create, retrieve, update, and delete user reviews.
 * It includes basic validation and error handling.
 */
class UserReview
{
    private $db; // Database connection object (replace with your actual database setup)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Creates a new user review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review text.
     *
     * @return int|false The ID of the newly created review on success, false on failure.
     */
    public function createReview($productId, $username, $rating, $comment)
    {
        // Validation (add more as needed)
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize input (important for security)
        $productId = (int)$productId; // Cast to integer
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);

        // Prepare and execute the SQL query
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) 
                VALUES ($productId, '$username', $rating, '$comment')";

        $result = $this->db->query($sql);

        if ($result) {
            return $this->db->lastInsertId();
        } else {
            return false;
        }
    }

    /**
     * Retrieves a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     *
     * @return array|false An array containing the review details (product_id, username, rating, comment)
     *                   or false if the review does not exist.
     */
    public function getReview($reviewId)
    {
        if (!is_numeric($reviewId)) {
            return false;
        }

        $reviewId = (int)$reviewId;

        $sql = "SELECT product_id, username, rating, comment 
                FROM reviews 
                WHERE id = $reviewId";

        $result = $this->db->query($sql);

        if ($result->num_rows > 0) {
            return $result->fetch_assoc();
        } else {
            return false;
        }
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new ID of the product.
     * @param string $username The new username.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     *
     * @return bool True on success, false on failure.
     */
    public function updateReview($reviewId, $productId, $username, $rating, $comment)
    {
        if (!is_numeric($reviewId) || !$productId || !$username || !$rating || !$comment) {
            return false;
        }

        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize input
        $productId = (int)$productId;
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);


        // Prepare SQL
        $sql = "UPDATE reviews 
                SET product_id = $productId, 
                    username = '$username', 
                    rating = $rating, 
                    comment = '$comment' 
                WHERE id = $reviewId";

        $result = $this->db->query($sql);

        return $result;
    }

    /**
     * Deletes a review.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True on success, false on failure.
     */
    public function deleteReview($reviewId)
    {
        if (!is_numeric($reviewId)) {
            return false;
        }

        $reviewId = (int)$reviewId;

        $sql = "DELETE FROM reviews WHERE id = $reviewId";

        $result = $this->db->query($sql);

        return $result;
    }
}

// Example Usage (assuming you have a database connection object $db)
//  -  Replace this with your actual database setup and connection.
//  -  The example assumes you have a table named 'reviews' with columns: id (INT, PRIMARY KEY), product_id (INT), username (VARCHAR), rating (INT), comment (TEXT)
//  -  You'll need to adapt this to your specific database structure.

//  $db = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");

// $review = new UserReview($db);

// // Create a review
// $reviewId = $review->createReview(1, "JohnDoe", 4, "Great product!");

// if ($reviewId) {
//     echo "Review created with ID: " . $reviewId . "<br>";

//     // Get the review
//     $review = $review->getReview($reviewId);
//     if ($review) {
//         echo "Review details: " . json_encode($review);
//     } else {
//         echo "Review not found.";
//     }

//     // Update the review
//     $updateResult = $review->updateReview($reviewId, 2, "JaneSmith", 5, "Excellent!");
//     if ($updateResult) {
//         echo "<br>Review updated successfully.";
//     } else {
//         echo "<br>Failed to update review.";
//     }

//     // Delete the review
//     $deleteResult = $review->deleteReview($reviewId);
//     if ($deleteResult) {
//         echo "<br>Review deleted successfully.";
//     } else {
//         echo "<br>Failed to delete review.";
//     }

// } else {
//     echo "Failed to create review.";
// }
?>


<?php

/**
 *  User Review Function
 *
 *  This function handles creating, retrieving, updating, and deleting user reviews.
 *  It demonstrates basic CRUD (Create, Read, Update, Delete) operations
 *  for a review system.
 *
 *  Example Usage:
 *  $reviewSystem = new ReviewSystem();
 *
 *  // Create a new review
 *  $review = $reviewSystem->createReview(['user_id' => 1, 'product_id' => 101, 'rating' => 5, 'comment' => 'Great product!']);
 *
 *  // Retrieve a review by ID
 *  $review = $reviewSystem->getReview(1);
 *
 *  // Update a review
 *  $review = $reviewSystem->updateReview(1, ['rating' => 4, 'comment' => 'Good, but could be better.']);
 *
 *  // Delete a review
 *  $reviewSystem->deleteReview(1);
 *
 * @param array $data  An associative array containing the review data.
 *                       Required keys: 'user_id', 'product_id', 'rating', 'comment'.
 * @return array|null  The newly created review object if creation was successful,
 *                      or the review object if update was successful,
 *                      or null if update or delete was successful.
 */
class ReviewSystem
{
    private $reviews = []; // In-memory storage for simplicity.  Use a database in a real application.
    private $nextReviewId = 1;

    public function createReview(array $data)
    {
        // Validation (basic)
        if (!isset($data['user_id'], $data['product_id'], $data['rating'], $data['comment'])) {
            return null; // Required fields are missing
        }

        if (!is_numeric($data['user_id']) || !is_numeric($data['product_id'])) {
            return null;  // Invalid IDs
        }
        if (!is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
            return null; // Rating must be an integer between 1 and 5
        }

        $review = [
            'id' => $this->nextReviewId++,
            'user_id' => $data['user_id'],
            'product_id' => $data['product_id'],
            'rating' => $data['rating'],
            'comment' => $data['comment'],
            'created_at' => time(),
            'updated_at' => time()
        ];

        $this->reviews[] = $review;

        return $review;
    }

    public function getReview(int $id)
    {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $id) {
                return $review;
            }
        }

        return null; // Review not found
    }

    public function updateReview(int $id, array $data)
    {
        $review = $this->getReview($id);

        if (!$review) {
            return null; // Review not found
        }

        // Validate the update data
        if (!isset($data['rating'], $data['comment'])) {
            return null; //Required fields are missing
        }

        if (!is_int($data['rating']) || $data['rating'] < 1 || $data['rating'] > 5) {
            return null; // Invalid rating
        }
        
        $review['rating'] = $data['rating'];
        $review['comment'] = $data['comment'];
        $review['updated_at'] = time();

        return $review;
    }

    public function deleteReview(int $id)
    {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $id) {
                unset($this->reviews[$key]);
                return true; // Successfully deleted
            }
        }

        return false; // Review not found
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Create a new review
$review = $reviewSystem->createReview(['user_id' => 1, 'product_id' => 101, 'rating' => 5, 'comment' => 'Great product!']);

if ($review) {
    echo "New Review Created:
";
    print_r($review);
    echo "
";
}

// Retrieve a review by ID
$review = $reviewSystem->getReview(1);
if ($review) {
    echo "Review ID 1:
";
    print_r($review);
    echo "
";
}

// Update a review
$review = $reviewSystem->updateReview(1, ['rating' => 4, 'comment' => 'Good, but could be better.']);
if ($review) {
    echo "Review ID 1 Updated:
";
    print_r($review);
    echo "
";
}

// Delete a review
$reviewSystem->deleteReview(1);

// Try to retrieve the deleted review
$review = $reviewSystem->getReview(1);
if (!$review) {
    echo "Review ID 1 deleted successfully.
";
} else {
    echo "Review ID 1 still exists.
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to save user reviews with various metadata.
 *
 * @param string $user_id      The ID of the user submitting the review.
 * @param string $product_id   The ID of the product being reviewed.
 * @param string $rating       The rating given by the user (e.g., 1-5).
 * @param string $comment      The user's written review.
 * @param string $timestamp   (Optional) Timestamp for the review. Defaults to current timestamp.
 *
 * @return bool|string True on success, error message string on failure.
 */
function saveUserReview(
    string $user_id,
    string $product_id,
    string $rating,
    string $comment,
    string $timestamp = null // Optional timestamp
) {
    // Input Validation (Important!)
    if (empty($user_id) || empty($product_id) || empty($rating) || empty($comment)) {
        return "Error: All fields (User ID, Product ID, Rating, Comment) are required.";
    }

    if (!is_numeric($rating) || intval($rating) < 1 || intval($rating) > 5) {
        return "Error: Rating must be a number between 1 and 5.";
    }

    // Sanitize inputs (Important for security - prevents XSS, SQL injection)
    $user_id = filter_var($user_id, FILTER_SANITIZE_STRING);
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $rating = intval($rating);  // Ensure rating is an integer
    $comment = filter_var($comment, FILTER_SANITIZE_STRING);

    // Database Interaction (Example - Replace with your actual database logic)
    try {
        // Assuming you have a database connection established
        // $db = new PDO(/* your database connection details */);
        // Example using a placeholder for demonstration - REPLACE with your connection

        $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment, created_at) VALUES (:user_id, :product_id, :rating, :comment, :created_at)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        $stmt->bindParam(':created_at', date('Y-m-d H:i:s')); //Using timestamp as string

        $result = $stmt->execute();

        if ($result) {
            return true; // Success
        } else {
            // Log the error for debugging
            error_log("Error saving review: " . print_r($stmt->errorInfo(), true));
            return "Error: Could not save review to database. Check error logs.";
        }

    } catch (PDOException $e) {
        // Handle database connection or query errors
        error_log("Database Error: " . $e->getMessage());
        return "Error: Database error.  Check database connection and query syntax.  " . $e->getMessage();
    }
}

// Example usage:
$user_id = "user123";
$product_id = "product456";
$rating = 4;
$comment = "Great product! Highly recommended.";

$result = saveUserReview($user_id, $product_id, $rating, $comment);

if ($result === true) {
    echo "Review saved successfully!";
} else {
    echo "Error: " . $result;
}
?>


<?php

/**
 * Function to handle user reviews.
 *
 * This function allows users to submit reviews, display existing reviews,
 * and handles simple moderation (e.g., flagging inappropriate content).
 *
 * @param string $review_text The review text submitted by the user.
 * @param int   $product_id  The ID of the product being reviewed.
 * @param array $review_data (Optional) Array of existing reviews for the product.
 *
 * @return array An array containing:
 *   - 'reviews': An array of existing reviews (if any).
 *   - 'new_review': The submitted review text.
 *   - 'error':  Error message if the review submission failed, otherwise null.
 */
function handleUserReview(string $review_text, int $product_id, array $review_data = []): array
{
    // Validation - Basic checks (can be expanded)
    if (empty($review_text)) {
        return ['reviews' => $review_data, 'new_review' => $review_text, 'error' => 'Review text cannot be empty.'];
    }

    //  Consider adding more robust validation here like:
    // - Length limits for review text
    // - Profanity filtering
    // -  Checking for malicious code

    // Add the new review to the existing data.
    $new_review = ['text' => $review_text, 'timestamp' => time()];
    $updated_reviews = array_merge($review_data, [$new_review]);

    return ['reviews' => $updated_reviews, 'new_review' => $review_text, 'error' => null];
}

// --- Example Usage ---

// Initialize some review data (simulating a database)
$productReviews = [
    ['text' => 'Great product!', 'timestamp' => 1678886400],
    ['text' => 'Could be better.', 'timestamp' => 1678886460]
];

// 1. Submit a new review:
$reviewText = 'Excellent value for the price.';
$result = handleUserReview($reviewText, 123); // Assuming product ID 123

if ($result['error'] === null) {
    echo "New Review Submitted:
";
    print_r($result['reviews']);
} else {
    echo "Error submitting review: " . $result['error'] . "
";
}

echo "
";


// 2. Submit another review:
$reviewText2 = 'This is fantastic!  I highly recommend it.';
$result2 = handleUserReview($reviewText2, 123);

if ($result2['error'] === null) {
    echo "New Review Submitted:
";
    print_r($result2['reviews']);
} else {
    echo "Error submitting review: " . $result2['error'] . "
";
}

echo "
";

// 3. Example of error handling:
$emptyReview = handleUserReview("", 456);
if ($emptyReview['error'] !== null) {
    echo "Error submitting empty review: " . $emptyReview['error'] . "
";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $product_id The unique identifier for the product.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text content of the review.
 * @param int $rating (optional) A rating from 1 to 5. Defaults to null.
 * @param string $timestamp (optional)  A timestamp for when the review was created. Defaults to current timestamp.
 *
 * @return bool True on successful submission, false on failure.
 */
function submit_review(string $product_id, string $user_name, string $review_text, int $rating = null, string $timestamp = null)
{
    // **Important Security Measures:**  Always validate and sanitize user input!
    // This is a basic example and needs significant improvement for production.

    // Sanitize input - VERY IMPORTANT
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
    $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);

    // Validation - crucial to prevent abuse and errors
    if (empty($product_id) || empty($user_name) || empty($review_text)) {
        error_log("Review submission failed: Missing required fields.");
        return false;
    }

    if ($rating !== null && !is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Review submission failed: Invalid rating.");
        return false;
    }


    // **Data Storage - Replace with a database connection**
    // This is a placeholder - you'll need to connect to your database.
    $review_data = [
        'product_id' => $product_id,
        'user_name' => $user_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp ?? time(), // Use current timestamp if none provided
    ];

    // **Example:  Simulated database insertion (replace with your database code)**
    // In a real application, you would use a database query.
    // For demonstration purposes, we'll just store it in a simple array.
    $reviews = json_encode($review_data); //Encode for storage if needed
    file_put_contents('reviews.json', $reviews . "
", FILE_APPEND); // Append to a file

    //Success
    error_log("Review submitted successfully for product ID: " . $product_id);
    return true;
}



/**
 * Get Reviews for a Product
 *
 * Retrieves all reviews for a given product.
 *
 * @param string $product_id The unique identifier for the product.
 * @return array|null An array of review objects, or null if no reviews are found.
 */
function get_reviews(string $product_id) {
    // **Important:  Fetch from your database here!**
    // This is just a placeholder - use your database connection.
    // Example (replace with your database query):
    $reviews = json_decode(file_get_contents('reviews.json'), true); //decode JSON

    //Filter reviews by product_id
    $filteredReviews = [];
    foreach($reviews as $review){
        if($review['product_id'] == $product_id){
            $filteredReviews[] = $review;
        }
    }

    return empty($filteredReviews) ? null : $filteredReviews;
}



/**
 * Display Reviews
 *
 * Displays reviews for a product.
 *
 * @param array $reviews An array of review objects.
 */
function display_reviews(array $reviews) {
    if (empty($reviews)) {
        echo "<p>No reviews yet.</p>";
        return;
    }

    echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li>";
        echo "<strong>User:</strong> " . htmlspecialchars($review['user_name']) . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "<strong>Timestamp:</strong> " . date("Y-m-d H:i:s", $review['timestamp']) . "</li>";
    }
    echo "</ul>";
}


// Example Usage (For testing purposes):
$product_id = "12345";

// Submit a review
if (submit_review($product_id, "John Doe", "This is a great product!", 5)) {
    echo "<p>Review submitted successfully!</p>";
} else {
    echo "<p>Review submission failed.</p>";
}

// Get and display reviews
$reviews = get_reviews($product_id);
display_reviews($reviews);

?>


<?php

/**
 * User Review Class
 * 
 * This class provides functionality to create, store, and retrieve user reviews.
 */
class UserReview {

    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $timestamp;

    /**
     * Constructor
     *
     * @param int $userId      The ID of the user submitting the review.
     * @param int $productId   The ID of the product being reviewed.
     * @param int $rating       The rating given by the user (e.g., 1-5).
     * @param string $comment   The user's comment about the product.
     */
    public function __construct($userId, $productId, $rating, $comment) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->timestamp = time(); // Get the current timestamp
    }

    /**
     * Getters
     */
    public function getReviewId() {
        return $this->reviewId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public function getTimestamp() {
        return $this->timestamp;
    }


    /**
     * Convert review data into an associative array for easy display/export.
     *
     * @return array An associative array containing the review data.
     */
    public function toArray() {
        return [
            'reviewId' => $this->getReviewId(),
            'userId' => $this->getUserId(),
            'productId' => $this->getProductId(),
            'rating' => $this->getRating(),
            'comment' => $this->getComment(),
            'timestamp' => $this->getTimestamp()
        ];
    }

    /**
     *  This is a basic example.  In a real application, you'd store this data in a database.
     *  This demonstrates how to store the review data.
     *  @param string $dbConnection The database connection string.  Replace with your connection details.
     */
    public function save($dbConnection) {
        // This is a placeholder.  In a real application, you would use a database query to save the review.
        // Example using PDO:
        try {
            $pdo = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            $stmt = $pdo->prepare("INSERT INTO reviews (userId, productId, rating, comment, timestamp) 
                                    VALUES (:userId, :productId, :rating, :comment, :timestamp)");
            $stmt->bindParam(':userId', $this->userId);
            $stmt->bindParam(':productId', $this->productId);
            $stmt->bindParam(':rating', $this->rating);
            $stmt->bindParam(':comment', $this->comment);
            $stmt->bindParam(':timestamp', $this->timestamp);

            $stmt->execute();
            $this->reviewId = $pdo->lastInsertId();
        } catch (PDOException $e) {
            // Handle database errors here.  Log the error, display a user-friendly message, etc.
            echo "Database error: " . $e->getMessage();
        }
    }

}



/**
 * User Review Review Function (Example Usage)
 */
function displayReview($review) {
    if ($review) {
        echo "<h2>Review for Product ID: " . $review->getProductId() . "</h2>";
        echo "<p><strong>User:</strong> " . $review->getUserId() . "</p>";
        echo "<p><strong>Rating:</strong> " . $review->getRating() . "</p>";
        echo "<p><strong>Comment:</strong> " . $review->getComment() . "</p>";
        echo "<p><strong>Date:</strong> " . date("Y-m-d H:i:s", $review->getTimestamp()) . "</p>";
    } else {
        echo "<p>No reviews found.</p>";
    }
}



// Example usage:
$review1 = new UserReview(123, 456, 5, "Excellent product, highly recommended!");
$review1->save("localhost", "root", "password"); // Replace with your DB details.
displayReview($review1);

$review2 = new UserReview(456, 456, 3, "Okay, but could be better.");
$review2->save("localhost", "root", "password"); // Replace with your DB details.
displayReview($review2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to generate a simple user review display based on
 * a list of reviews.  It provides basic formatting for display.
 *
 * @param array $reviews An array of review objects.  Each object should have:
 *                       - 'user': The username of the reviewer.
 *                       - 'rating': The rating (e.g., 1-5).
 *                       - 'comment': The review text.
 * @param int $limit The maximum number of reviews to display. Defaults to 5.
 *
 * @return string HTML markup for displaying the reviews.
 */
function displayUserReviews(array $reviews, $limit = 5)
{
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $reviewsToDisplay = array_slice($reviews, min($limit, count($reviews))); // Limit the number of reviews

  $html = '<div class="user-reviews">';
  foreach ($reviewsToDisplay as $review) {
    $html .= '<div class="review">';
    $html .= '<p class="user"><strong>' . htmlspecialchars($review['user']) . '</strong></p>';
    $html .= '<p class="rating">Rating: ' . $review['rating'] . '</p>';
    $html .= '<p class="comment">' . nl2br(htmlspecialchars($review['comment'])) . '</p>'; // nl2br for line breaks
    $html .= '</div>';
  }
  $html .= '</div>';

  return $html;
}


/**
 * Example Usage (Demonstration)
 */

// Sample Reviews
$reviews = [
  ['user' => 'Alice', 'rating' => 5, 'comment' => "This product is amazing! I highly recommend it."],
  ['user' => 'Bob', 'rating' => 4, 'comment' => "Good product, but could be a little better."],
  ['user' => 'Charlie', 'rating' => 3, 'comment' => "It's okay.  Nothing special."],
  ['user' => 'David', 'rating' => 5, 'comment' => "Excellent value for the price."],
  ['user' => 'Eve', 'rating' => 2, 'comment' => "Not what I expected."],
  ['user' => 'Frank', 'rating' => 4, 'comment' => "A solid choice."],
  ['user' => 'Grace', 'rating' => 1, 'comment' => "Very disappointing."],
];


// Display the first 3 reviews
$reviewHTML = displayUserReviews($reviews, 3);
echo $reviewHTML;
?>


   $reviewHTML = displayUserReviews($yourReviewsArray, $maximumNumberOfReviews);
   echo $reviewHTML;
   
   * Replace `$yourReviewsArray` with the array of review objects you have.
   * Adjust the `$maximumNumberOfReviews` if you want to show more or fewer reviews.
3. **Style with CSS:** Add CSS rules to style the `user-reviews`, `review`, `user`, `rating`, and `comment` classes to customize the appearance of the reviews.

Example CSS:



<?php

/**
 * Reviews Class
 *
 * This class allows you to manage user reviews for a specific item (e.g., a product, movie, etc.).
 * It provides functionality to add, display, and potentially moderate reviews.
 */
class Reviews {

    private $reviews = []; // Array to store reviews
    private $db = null; // Database connection (optional)

    /**
     * Constructor
     *
     * Initializes the Reviews class.  Allows for database connection setup.
     *
     * @param PDO $db (Optional) PDO database connection object.
     */
    public function __construct(PDO $db = null) {
        $this->db = $db;
    }

    /**
     * Add a Review
     *
     * Adds a new review to the $reviews array.
     *
     * @param int $itemId The ID of the item the review is for.
     * @param string $user The name or ID of the user submitting the review.
     * @param string $comment The review text.
     * @return bool True on success, false on failure (e.g., invalid data).
     */
    public function addReview(int $itemId, string $user, string $comment) {
        // Basic validation - improve this for production
        if (!is_numeric($itemId)) {
            return false;
        }
        if (empty($user)) {
            return false;
        }
        if (empty($comment)) {
            return false;
        }

        $this->reviews[] = [
            'itemId' => $itemId,
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add a timestamp
        ];
        return true;
    }

    /**
     * Get All Reviews for an Item
     *
     * Retrieves all reviews associated with a specific item ID.
     *
     * @param int $itemId The ID of the item.
     * @return array An array of review objects, or an empty array if no reviews exist.
     */
    public function getReviewsForItem(int $itemId) {
        //Filtering based on item ID
        $reviews = [];
        foreach($this->reviews as $review) {
            if ($review['itemId'] == $itemId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }

    /**
     * Display Reviews
     *
     * Formats and displays the reviews.
     *
     * @return string  A formatted string containing the reviews.
     */
    public function displayReviews() {
        $output = "<h2>Reviews for Item ID: " . implode(",", $this->getReviewsForItem($this->getLatestItemId())) . "</h2>";
        $reviews = $this->getReviewsForItem($this->getLatestItemId());

        if (empty($reviews)) {
            $output .= "<p>No reviews yet.</p>";
        } else {
            $output .= "<ul>";
            foreach ($reviews as $review) {
                $output .= "<li><strong>User:</strong> " . htmlspecialchars($review['user']) . "<br>";
                $output .= "<em>Rating:</em> " . htmlspecialchars($review['comment']) . "<br>";
                $output .= "<em>Date:</em> " . htmlspecialchars($review['date']) . "</li>";
            }
            $output .= "</ul>";
        }
        return $output;
    }

    /**
     *  Helper to get the latest itemId to retrieve reviews from
     */
    private function getLatestItemId(){
        if (empty($this->reviews)) return 0;
        return array_key_last($this->reviews, 'itemId');
    }
}

// --- Example Usage ---
// Create a database connection (replace with your actual credentials)
$db = new PDO('mysql:host=localhost;dbname=my_reviews_db', 'user', 'password');


// Create a Reviews object
$reviews = new Reviews($db);

// Add some reviews
$reviews->addReview(1, "John Doe", "Great product! I love it.");
$reviews->addReview(1, "Jane Smith", "Could be better, but good overall.");
$reviews->addReview(2, "Peter Jones", "Excellent value for money.");

// Get reviews for item 1
$reviewsForItem1 = $reviews->getReviewsForItem(1);

// Display the reviews
echo $reviews->displayReviews();

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $productName The name of the product.
 * @param string $reviewerName The name of the reviewer.
 * @param string $reviewText The review text.
 * @param array $reviews An optional array of existing reviews to display.
 *
 * @return array An array containing the existing reviews and the new review.
 */
function createAndDisplayReviews(string $productId, string $productName, string $reviewerName, string $reviewText, array &$reviews = []) {

  // Validate input (basic) - Enhance as needed for production environments
  if (empty($productId) || empty($productName) || empty($reviewerName) || empty($reviewText)) {
    return ['error' => 'All fields are required.'];
  }

  // Create the new review
  $newReview = [
    'productId' => $productId,
    'reviewerName' => $reviewerName,
    'reviewText' => $reviewText,
    'timestamp' => date('Y-m-d H:i:s')  // Add a timestamp for each review
  ];

  // Add the new review to the array
  $reviews[] = $newReview;

  // Sort reviews by timestamp (most recent first) - optional
  usort($reviews, function($a, $b) {
    return $b['timestamp'] <=> $a['timestamp'];
  });

  return $reviews;
}


// --- Example Usage ---

// Example 1:  Creating a new review
$productID = '12345';
$productName = 'Awesome Gadget';
$reviewer = 'John Doe';
$review = 'This gadget is fantastic!  I love it.';

$updatedReviews = createAndDisplayReviews($productID, $productName, $reviewer, $review);

if (isset($updatedReviews['error'])) {
  echo "Error: " . $updatedReviews['error'] . "<br>";
} else {
  echo "Product: " . $productName . "<br>";
  echo "Reviews:<br>";
  foreach ($updatedReviews as $review) {
    echo "Reviewer: " . $review['reviewerName'] . "<br>";
    echo "Review Text: " . $review['reviewText'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br><br>";
  }
}


echo "<br>--- Example 2: Empty Review ---";
$productID = '67890';
$productName = 'Another Product';
$reviewer = 'Jane Smith';
$review = ''; // Empty review

$updatedReviews = createAndDisplayReviews($productID, $productName, $reviewer, $review);

if (isset($updatedReviews['error'])) {
  echo "Error: " . $updatedReviews['error'] . "<br>";
} else {
  echo "Product: " . $productName . "<br>";
  echo "Reviews:<br>";
  foreach ($updatedReviews as $review) {
    echo "Reviewer: " . $review['reviewerName'] . "<br>";
    echo "Review Text: " . $review['reviewText'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br><br>";
  }
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product or item.
 * It handles data validation, database interaction (if needed), and basic display.
 *
 * @param string $productId  The ID of the product/item being reviewed.
 * @param string $username   The username of the user submitting the review.
 * @param string $rating    The rating given by the user (e.g., 1-5).
 * @param string $comment    The user's review comment.
 * @param PDO    $pdo      Optional PDO database connection object.  If not provided, assumes a global $db connection.
 *
 * @return array  An array containing:
 *               - 'success': True if the review was successfully created, false otherwise.
 *               - 'message': A message indicating success or the error message.
 */
function createReview($productId, $username, $rating, $comment, $pdo = null) {
  // Data Validation
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }

  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }

  if (empty($rating)) {
    return ['success' => false, 'message' => 'Rating cannot be empty.'];
  }

  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Rating must be a number between 1 and 5.'];
  }

  if (empty($comment)) {
    return ['success' => false, 'message' => 'Comment cannot be empty.'];
  }

  // Database Interaction (using PDO - best practice)
  try {
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();

    return ['success' => true, 'message' => 'Review created successfully!'];

  } catch (PDOException $e) {
    // Handle database errors gracefully -  Don't expose the full error to the user.
    return ['success' => false, 'message' => 'Error creating review: ' . $e->getMessage()];
  }
}


/**
 * Displays a single review.
 *
 * @param array $review  An array representing a single review (e.g., returned by createReview).
 */
function displayReview($review) {
  if ($review['success']) {
    echo "<p><strong>Rating:</strong> " . $review['message'] . "</p>";
  } else {
    echo "<p style='color:red;'>Error: " . $review['message'] . "</p>";
  }
}


/**
 * Example Usage (For demonstration purposes)
 */
// Example 1: Successful Review
$reviewData = createReview('123', 'JohnDoe', 4, 'Great product! I highly recommend it.', $db);
displayReview($reviewData);

// Example 2:  Invalid Rating
$reviewData = createReview('456', 'JaneSmith', 6, 'Awesome!', $db);
displayReview($reviewData);

// Example 3:  Empty Comment
$reviewData = createReview('789', 'PeterPan', 3, '', $db);
displayReview($reviewData);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store user reviews with basic validation and formatting.
 *
 * @param string $username The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $product_id The ID of the product the review is for.
 *
 * @return bool True if the review was successfully saved, false otherwise.
 */
function saveReview(string $username, string $review_text, int $product_id)
{
    // Validation
    if (empty($username)) {
        error_log("Error: Username cannot be empty."); // Log error for admin review
        return false;
    }

    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty."); // Log error for admin review
        return false;
    }

    if (!is_numeric($product_id)) {
        error_log("Error: Product ID must be a number."); // Log error for admin review
        return false;
    }

    // Sanitize the review text (optional, but recommended)
    $review_text = htmlspecialchars($review_text, ENT_QUOTES, 'UTF-8');

    // Store the review (replace with your database interaction code)
    // This is a placeholder - you'll need to connect to your database
    // and insert the review data.

    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        $stmt = $db_connection->prepare("INSERT INTO reviews (username, review_text, product_id) VALUES (:username, :review_text, :product_id)");
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  // Log for debugging
        return false;
    }

}


// Example Usage (to demonstrate the function)
// Save a review:
$username = "John Doe";
$review_text = "This product is amazing!  I love it!";
$product_id = 123;

if (saveReview($username, $review_text, $product_id)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}


// ---  Example of displaying a review (assuming a simple HTML display) ---
//  This is just for demonstration purposes.  You'll need to adapt this
//  to match your application's styling and database structure.

function displayReview(int $review_id) {
    // Retrieve review details from the database
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $stmt = $db_connection->prepare("SELECT username, review_text, product_id FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    $review = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($review) {
        echo "<div class='review'>";
        echo "<strong>Username:</strong> " . htmlspecialchars($review['username']) . "<br>"; //Sanitize output too!
        echo "<strong>Review:</strong> " . htmlspecialchars($review['review_text']) . "<br>";
        echo "Product ID: " . $review['product_id'];
        echo "</div>";
    } else {
        echo "<p>No review found for this ID.</p>";
    }
}

// Example of displaying a review with ID 1:
displayReview(1);
?>


<?php

/**
 * User Review Function
 *
 * This function handles adding, retrieving, and displaying user reviews.
 * It includes basic validation and error handling.
 */
class UserReview
{
    private $db; // Database connection object (replace with your actual DB connection)

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Adds a new user review to the database.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The user's review comment.
     *
     * @return bool True on success, false on failure.
     */
    public function addReview($productId, $username, $rating, $comment)
    {
        // Validate inputs - Add more robust validation as needed
        if (!$productId || !$username || !$rating || !$comment) {
            return false;
        }
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        // Sanitize inputs (important to prevent SQL injection)
        $productId = (int)$productId; // Ensure productId is an integer
        $username = trim($username);
        $rating = (int)$rating;
        $comment = trim($comment);


        // Prepare SQL query (using prepared statements - VERY IMPORTANT)
        $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($sql); //Prepare the statement

        if (!$stmt) {
            return false; //Handle error
        }

        // Bind parameters (prevent SQL injection)
        $stmt->bind_param("sii", $username, $rating, $comment);

        // Execute the query
        if (!$stmt->execute()) {
            error_log("Error adding review: " . $stmt->error); //Log the error for debugging
            return false;
        }

        // Close statement
        $stmt->close();

        return true;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     *
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct($productId)
    {
        if (!is_numeric($productId)) {
            return [];
        }

        $productId = (int)$productId;

        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->db->prepare($sql);

        if (!$stmt) {
            return [];
        }

        $stmt->bind_param("i", $productId);

        if (!$stmt->execute()) {
            error_log("Error fetching reviews: " . $stmt->error);
            return [];
        }

        $result = $stmt->get_result();
        $reviews = [];

        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }

        $stmt->close();
        return $reviews;
    }

    /**
     * Displays reviews for a product.
     *
     * @param array $reviews An array of review objects.
     *
     * @return string HTML representation of the reviews.
     */
    public function displayReviews(array $reviews)
    {
        if (empty($reviews)) {
            return "<p>No reviews yet.</p>";
        }

        $html = "<ul>";
        foreach ($reviews as $review) {
            $html .= "<li>";
            $html .= "<strong>" . $review['username'] . "</strong> - Rating: " . $review['rating'] . " - " . $review['comment'];
            $html .= "</li>";
        }
        $html .= "</ul>";
        return $html;
    }
}


// Example Usage (replace with your database connection)
// Assuming you have a database connection object called $db

// Create an instance of the UserReview class
$reviewManager = new UserReview($db);

// Add a review
if ($reviewManager->addReview(123, "JohnDoe", 4, "Great product!")) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get reviews for product ID 123
$reviews = $reviewManager->getReviewsByProduct(123);

// Display the reviews
echo $reviewManager->displayReviews($reviews);

?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to process user reviews,
 *  sanitize the input, and potentially store it.
 *
 *  @param array $reviewData An associative array containing the review data:
 *                            - 'username' (string): The username of the reviewer.
 *                            - 'rating' (int): The rating given by the reviewer (e.g., 1-5).
 *                            - 'comment' (string): The user's review comment.
 *
 *  @return array|string  Returns an array of processed review data or an error message string.
 */
function processReview(array $reviewData)
{
    // Validate input - This is crucial!
    $errors = [];

    // Username validation
    if (empty($reviewData['username'])) {
        $errors['username'] = 'Username cannot be empty.';
    }

    // Rating validation
    if (!is_numeric($reviewData['rating']) || $reviewData['rating'] < 1 || $reviewData['rating'] > 5) {
        $errors['rating'] = 'Rating must be a number between 1 and 5.';
    }

    // Comment validation
    if (empty($reviewData['comment'])) {
        $errors['comment'] = 'Comment cannot be empty.';
    }

    //  Sanitize Input (Prevent XSS and SQL Injection - Important!)
    $username = trim($reviewData['username']);
    $rating = (int)$reviewData['rating'];
    $comment = htmlspecialchars(trim($reviewData['comment']));  //Escape HTML special chars

    //  You could add more sanitization here, depending on where you're storing the review.

    //  If no errors, return the processed data
    if (empty($errors)) {
        return [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment
        ];
    } else {
        // Return an error message
        return $errors;
    }
}


// --- Example Usage ---
// Example 1: Valid Review
$review1 = ['username' => 'JohnDoe', 'rating' => 4, 'comment' => 'Great product!'];
$result1 = processReview($review1);

if (is_array($result1)) {
    if (empty($result1)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result1); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}


// Example 2: Invalid Review (Missing Comment)
$review2 = ['username' => 'JaneSmith', 'rating' => 3];
$result2 = processReview($review2);

if (is_array($result2)) {
    if (empty($result2)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result2); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}

// Example 3: Invalid Review (Invalid Rating)
$review3 = ['username' => 'PeterPan', 'rating' => 6, 'comment' => 'Awesome!'];
$result3 = processReview($review3);

if (is_array($result3)) {
    if (empty($result3)) {
        echo "Review processed successfully!
";
    } else {
        print_r($result3); // Display the errors
    }
} else {
    echo "Review processed successfully!
";
}

?>


<?php

/**
 * User Review Function - Basic Implementation
 *
 * This function takes a user ID, a review text, and an optional rating,
 * and saves the review to a database.
 *
 * @param int    $userId      The ID of the user submitting the review.
 * @param string $reviewText  The text of the review.
 * @param int    $rating      (Optional) The rating given for the review (e.g., 1-5).
 *                           Defaults to 0.
 * @return bool  True if the review was successfully saved, false otherwise.
 */
function saveUserReview(int $userId, string $reviewText, int $rating = 0) {
    // --- Database Connection (Replace with your actual connection details) ---
    // This is a placeholder.  Use PDO, MySQLi, or another database connector.
    $dbHost = 'localhost';
    $dbName = 'your_database_name';
    $dbUser = 'your_username';
    $dbPassword = 'your_password';

    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage()); // Log the error
        return false;
    }

    // --- Input Validation & Sanitization (IMPORTANT!) ---
    // Validate the input to prevent SQL injection and other issues.
    $reviewText = trim($reviewText); // Remove leading/trailing whitespace
    if (empty($reviewText)) {
        error_log("Empty review text.");  //Log empty review
        return false;
    }
    $rating = (int)$rating; // Ensure rating is an integer.
    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating ($rating). Must be between 1 and 5.");
        return false;
    }


    // --- SQL Query ---
    $sql = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:userId, :reviewText, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':reviewText', $reviewText);
    $stmt->bindParam(':rating', $rating);

    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        error_log("Database error saving review: " . $e->getMessage());
        return false;
    }
}

// --- Example Usage ---
// You would typically get this data from a form submission.

// Example 1: Successful save
$userId = 123;
$review = "This product is amazing!  I highly recommend it.";
$rating = 5;

if (saveUserReview($userId, $review, $rating)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

// Example 2: Save with default rating
$userId = 456;
$review = "Great service!";
if (saveUserReview($userId, $review)) {
    echo "Review saved successfully (default rating)!";
} else {
    echo "Failed to save review (default rating).";
}


//  ---  Dummy Review Table Schema (for testing) ---
/*
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    review_text TEXT NOT NULL,
    rating INT NOT NULL
);
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a given product.
 * It includes basic validation and data sanitization.
 *
 * @param string $product_id The unique identifier of the product.
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 *
 * @return bool True on success, false on failure.
 */
function storeUserReview(string $product_id, string $username, string $rating, string $comment): bool
{
    // Input validation and sanitization
    if (empty($product_id) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Error: Product ID, username, rating, and comment cannot be empty.");
        return false;
    }

    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {
        error_log("Error: Username must only contain alphanumeric characters and underscores.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Error: Rating must be a number between 1 and 5.");
        return false;
    }

    if (strlen($comment) > 500) { // Limit comment length
        error_log("Error: Comment exceeds the maximum length (500 characters).");
        return false;
    }


    // Database interaction (example using a simple array for demonstration)
    $review = [
        'product_id' => $product_id,
        'username' => $username,
        'rating' => $rating,
        'comment' => $comment,
        'date' => date('Y-m-d H:i:s'), // Add timestamp for better organization
    ];

    // You would typically replace this with your database insertion logic
    $reviews = loadReviewsFromDatabase($product_id); // Assuming a function to load reviews
    $reviews[] = $review;

    // Save the review to the database (replace with your actual database insertion)
    if (!saveReviewToDatabase($review)) {
        error_log("Error: Failed to save review to database.");
        return false;
    }

    return true;
}


/**
 * Placeholder functions for database interaction
 */
function loadReviewsFromDatabase(string $product_id) {
    //  In a real application, this would query the database
    //  and return the existing reviews for that product.
    return [];
}

function saveReviewToDatabase(array $review) {
    // In a real application, this would insert the review into the database.
    //  This is a placeholder to demonstrate the integration.
    //  You would use your database connection and query to insert the review.
    //  For example:
    //  $db = new DatabaseConnection();
    //  $stmt = $db->prepare("INSERT INTO reviews (product_id, username, rating, comment, date) VALUES (?, ?, ?, ?, ?)");
    //  $stmt->bind_param("ssisss", $review['product_id'], $review['username'], $review['rating'], $review['comment'], $review['date']);
    //  $stmt->execute();
    //  $stmt->close();
    return true; // Placeholder, always return true
}


// Example Usage
$productId = "P123";
$reviewerName = "JohnDoe";
$rating = 4;
$commentText = "Great product!  I would definitely recommend it.";

if (storeUserReview($productId, $reviewerName, $rating, $commentText)) {
    echo "Review submitted successfully!";
} else {
    echo "Review submission failed. Check the error log for details.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view user reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The text of the review.
 * @param string $username  The username of the user submitting the review.
 * @param array  $reviews (Optional) An array of existing reviews.  Defaults to an empty array.
 *
 * @return array An array containing the updated reviews array with the new review added.
 */
function add_review(string $productName, string $reviewText, string $username, array &$reviews = []): array {
  // Basic input validation - Add more robust validation as needed for production.
  if (empty($productName)) {
    return $reviews; // Return existing reviews if product name is empty.
  }
  if (empty($reviewText)) {
    return $reviews; // Return existing reviews if review text is empty.
  }

  // Create a new review object
  $review = [
    'username' => $username,
    'review'   => $reviewText,
    'date'     => date("Y-m-d H:i:s") // Timestamp for date
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}

// --- Example Usage and Demonstration ---

// Initialize an empty array to store reviews. Note the use of &$reviews
// to modify the array directly, avoiding unnecessary copying.
$product = "Awesome Gadget X";
$reviews = [];

// Add some initial reviews
$reviews = add_review($product, "This gadget is fantastic!  Highly recommended.", "JohnDoe");
$reviews = add_review($product, "Great value for the money.", "JaneSmith");
$reviews = add_review($product, "Could be better, but it works.", "PeterJones");

// Display the reviews
echo "<h2>Reviews for " . $product . "</h2>";
if (empty($reviews)) {
  echo "<p>No reviews yet.</p>";
} else {
  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li><strong>" . $review['username'] . ":</strong> " . $review['review'] . " - " . $review['date'] . "</li>";
  }
  echo "</ul>";
}

// Example of adding a new review
$reviews = add_review($product, "Amazing features and excellent customer support!", "AliceBrown");


<?php

/**
 * User Review Function
 * 
 * This function allows you to store and display user reviews for a product.
 * It includes basic validation and data sanitization.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * 
 * @return array  An array containing review data if successful, or an error message if not.
 */
function createReview(string $product_id, string $user_name, string $review_text, string $rating) {
  // Validate inputs
  if (empty($product_id) || empty($user_name) || empty($review_text) || empty($rating)) {
    return ['error' => 'All fields are required.'];
  }

  // Sanitize inputs (basic - more robust sanitization needed for production)
  $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
  $user_name = filter_var($user_name, FILTER_SANITIZE_STRING);
  $review_text = filter_var($review_text, FILTER_SANITIZE_STRING);
  $rating = filter_var($rating, FILTER_SANITIZE_NUMBER_INT, FILTER_VALIDATE_INT); // Ensure rating is an integer

  if ($rating === false) {
    return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
  }
  if ($rating < 1 || $rating > 5) {
    return ['error' => 'Invalid rating. Please enter a number between 1 and 5.'];
  }

  // Prepare review data (For database storage - adjust to your database structure)
  $review_data = [
    'product_id' => $product_id,
    'user_name' => $user_name,
    'review_text' => $review_text,
    'rating' => $rating,
    'created_at' => date('Y-m-d H:i:s') // Add timestamp for tracking
  ];

  // In a real application, you would insert $review_data into a database.
  // For this example, we just return the data.

  // Example of how you might save to the database:
  // $db = new DatabaseConnection();
  // $result = $db->insert('reviews', $review_data);

  return $review_data;
}


/**
 * Display User Reviews
 *
 *  Fetches and displays user reviews based on product_id
 *
 * @param string $product_id The product ID to fetch reviews for.
 *
 * @return array  An array of review data, or an error message if no reviews found.
 */
function displayReviews(string $product_id) {
    // In a real application, you would query your database here.
    // This is a placeholder for demonstration.

    // Mock database retrieval
    if ($product_id == "123") {
        $reviews = [
            ['product_id' => '123', 'user_name' => 'John Doe', 'review_text' => 'Great product! Highly recommended.', 'rating' => 5, 'created_at' => '2023-10-27 10:00:00'],
            ['product_id' => '123', 'user_name' => 'Jane Smith', 'review_text' => 'Good value for money.', 'rating' => 4, 'created_at' => '2023-10-26 14:30:00']
        ];
        return $reviews;
    } else {
      return ['error' => 'No reviews found for this product.'];
    }
}


// Example usage:
// Creating a review
$reviewData = createReview('123', 'Alice Brown', 'This is a fantastic product!', '5');

if (isset($reviewData['error'])) {
    echo "Error: " . $reviewData['error'] . "<br>";
} else {
    echo "Review created successfully!<br>";
    print_r($reviewData); // Display the review data
}


// Displaying reviews
$reviews = displayReviews('123');

if (isset($reviews['error'])) {
    echo "Error: " . $reviews['error'] . "<br>";
} else {
    echo "<h2>Reviews for Product 123:</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
        echo "<li><strong>User:</strong> " . $review['user_name'] . "<br>";
        echo "<strong>Rating:</strong> " . $review['rating'] . "<br>";
        echo "<strong>Review:</strong> " . $review['review_text'] . "<br>";
        echo "<strong>Date:</strong> " . $review['created_at'] . "</li>";
    }
    echo "</ul>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a given product or item.
 *
 * @param string $productId The unique identifier for the product or item.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param array $reviews  (Optional) An array of existing reviews.  If not provided, an empty array is created.
 * @return array An array containing the updated array of reviews, with the new review added.
 */
function addReview(string $productId, string $userName, string $reviewText, array $reviews = []): array
{
  // Input validation - basic checks, can be expanded
  if (empty($productId)) {
    throw new InvalidArgumentException("Product ID cannot be empty.");
  }
  if (empty($userName)) {
    throw new InvalidArgumentException("User name cannot be empty.");
  }
  if (empty($reviewText)) {
    throw new InvalidArgumentException("Review text cannot be empty.");
  }

  // Create a new review object.  You might want to use a more sophisticated object.
  $review = [
    'productId' => $productId,
    'userName' => $userName,
    'reviewText' => $reviewText,
    'timestamp' => time() // Add a timestamp for organization
  ];

  // Add the review to the array
  $reviews[] = $review;

  return $reviews;
}


/**
 * Function to display reviews for a given product.
 *
 * @param string $productId The product ID.
 * @param array $reviews An array of review objects.
 */
function displayReviews(string $productId, array $reviews)
{
  echo "<h2>Reviews for Product ID: " . $productId . "</h2>";

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
    return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['userName'] . ":</strong> " . htmlspecialchars($review['reviewText']) . "<br>";
    echo "Timestamp: " . date('Y-m-d H:i:s', $review['timestamp']);
    echo "</li>";
  }
  echo "</ul>";
}



// --- Example Usage ---

// Initial Reviews (Start with an empty array)
$productReviews = [];

// Add some reviews
try {
    $productReviews = addReview("PROD123", "Alice", "Great product, highly recommended!");
    $productReviews = addReview("PROD123", "Bob", "Works as expected.", $productReviews);
    $productReviews = addReview("PROD456", "Charlie", "Could be better, but decent.", $productReviews);
} catch (InvalidArgumentException $e) {
    echo "Error: " . $e->getMessage() . "<br>";
}


// Display the reviews
displayReviews("PROD123", $productReviews);
displayReviews("PROD456", $productReviews);
?>


<?php

/**
 * Reviews class for managing user reviews.
 */
class Reviews {

    private $reviews = [];

    /**
     * Adds a new review.
     *
     * @param string $user  The user who wrote the review.
     * @param string $comment The content of the review.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user, string $comment) {
        $id = uniqid(); // Generate a unique ID for the review
        $this->reviews[$id] = [
            'user' => $user,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for review date
        ];
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.  Returns an empty array if none exist.
     */
    public function getAllReviews() {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its unique ID.
     *
     * @param string $id The unique ID of the review.
     * @return array|null The review object if found, null otherwise.
     */
    public function getReviewById(string $id) {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        }
        return null;
    }

    /**
     * Deletes a review by its unique ID.
     *
     * @param string $id The unique ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(string $id) {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
            return true;
        }
        return false;
    }

    /**
     * Updates an existing review.
     *
     * @param string $id The unique ID of the review to update.
     * @param string $newComment The new content of the review.
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(string $id, string $newComment) {
        if (isset($this->reviews[$id])) {
            $this->reviews[$id]['comment'] = $newComment;
            return true;
        }
        return false;
    }
}


/**
 * Example Usage:
 */

// Instantiate the Reviews class
$reviews = new Reviews();

// Add some reviews
$reviews->addReview('John Doe', 'Great product! I highly recommend it.');
$reviews->addReview('Jane Smith', 'Could be better, but overall good.');
$reviews->addReview('Peter Jones', 'Excellent value for money.');

// Get all reviews
$allReviews = $reviews->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get a specific review
$specificReview = $reviews->getReviewById('unique_id_1');
echo "
Specific Review (Unique ID: unique_id_1):
";
print_r($specificReview);

// Update a review
$reviews->updateReview('unique_id_1', 'Fantastic product, even better than expected!');

// Get the updated review
$updatedReview = $reviews->getReviewById('unique_id_1');
echo "
Updated Review:
";
print_r($updatedReview);

// Delete a review
$reviews->deleteReview('unique_id_2');

// Get all reviews again to see the deleted review is gone
$allReviews = $reviews->getAllReviews();
echo "
All Reviews after deletion:
";
print_r($allReviews);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to collect and display user reviews for a product or item.
 * It includes validation, sanitization, and basic display formatting.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param array $reviews An array of review objects, each with:
 *                       - $name:  The user's name.
 *                       - $rating:  A number from 1 to 5.
 *                       - $comment: The user's review text.
 * @return string A formatted string containing the reviews.
 */
function displayUserReviews(string $productId, array $reviews): string
{
  // Validate input - basic check for review array
  if (empty($reviews)) {
    return "<p>No reviews yet.</p>";
  }

  $output = "<div class='user-reviews'>";
  $output .= "<h3>Reviews for Product ID: " . htmlspecialchars($productId) . "</h3>";

  foreach ($reviews as $review) {
    // Validate review data - more robust validation is recommended in production
    if (
      !is_string($review['name']) ||
      !is_int($review['rating']) ||
      !is_string($review['comment']) ||
      $review['rating'] < 1 || $review['rating'] > 5
    ) {
      continue; // Skip invalid reviews.  Log errors for debugging.
    }

    $output .= "<div class='review'>";
    $output .= "<p><strong>" . htmlspecialchars($review['name']) . ":</strong> " . htmlspecialchars($review['comment']) . "</p>";
    $output .= "<p>Rating: " . htmlspecialchars($review['rating']) . "</p>";
    $output .= "</div>";
  }

  $output .= "</div>";
  return $output;
}


// Example Usage:
// Simulate some reviews
$reviews = [
  [
    'name' => 'John Doe',
    'rating' => 4,
    'comment' => 'Great product!  Easy to use and works perfectly.',
  ],
  [
    'name' => 'Jane Smith',
    'rating' => 5,
    'comment' => 'Excellent value for the price.  Highly recommended!',
  ],
  [
    'name' => 'Peter Jones',
    'rating' => 3,
    'comment' => 'It was okay, but could be better. The instructions were unclear.',
  ],
];

// Display the reviews
$reviewOutput = displayUserReviews('PROD-123', $reviews);
echo $reviewOutput;

?>


<?php

/**
 * Class UserReview
 *
 * This class provides functionality for creating, retrieving, updating, and deleting user reviews.
 */
class UserReview
{
    private $db; // Database connection (implementation depends on your database)

    /**
     * Constructor
     *
     * Initializes the UserReview class with a database connection.
     *
     * @param PDO $db A PDO database connection object.
     */
    public function __construct(PDO $db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $user  The name or identifier of the user.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function createReview(int $productId, string $user, string $rating, string $comment)
    {
        // Validate inputs (add more robust validation here)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return null;
        }

        $sql = "INSERT INTO reviews (product_id, user, rating, comment)
                VALUES (:product_id, :user, :rating, :comment)";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        try {
            $stmt->execute();
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            // Handle database errors appropriately (logging, error messages)
            error_log("Error creating review: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Get a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null An associative array containing the review data, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        $sql = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();

        $review = $stmt->fetch(PDO::FETCH_ASSOC);
        return $review;
    }

    /**
     * Update an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $user  The new user name or identifier.
     * @param string $rating The new rating.
     * @param string $comment The new review comment.
     * @return bool True on success, false on failure.
     */
    public function updateReview(int $reviewId, string $user, string $rating, string $comment)
    {
        // Validate inputs (add more robust validation here)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $sql = "UPDATE reviews
                SET user = :user,
                    rating = :rating,
                    comment = :comment
                WHERE id = :id";

        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':user', $user);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on success, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':id', $reviewId);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of associative arrays, each representing a review.
     */
    public function getReviewsByProduct(int $productId)
    {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}


// Example Usage (Illustrative - replace with your database connection)
// Assuming you have a PDO database connection object named $db

// Create a database connection (replace with your actual connection details)
$db = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");


// Create a UserReview object
$reviewManager = new UserReview($db);

// Create a new review
$newReviewId = $reviewManager->createReview(1, "John Doe", 5, "Great product!");

if ($newReviewId) {
    echo "New review created with ID: " . $newReviewId . "
";
} else {
    echo "Failed to create review.
";
}

// Get the review by ID
$review = $reviewManager->getReview($newReviewId);
if ($review) {
    echo "Review:
";
    print_r($review);
} else {
    echo "Review not found.
";
}

// Get all reviews for product ID 1
$reviews = $reviewManager->getReviewsByProduct(1);
echo "
Reviews for product 1:
";
print_r($reviews);

//Update review - example
$updateResult = $reviewManager->updateReview($newReviewId, "Jane Smith", 4, "Improved!");
if ($updateResult) {
    echo "
Review updated successfully.
";
} else {
    echo "
Failed to update review.
";
}

//Delete review - example
$deleteResult = $reviewManager->deleteReview($newReviewId);
if ($deleteResult) {
    echo "
Review deleted successfully.
";
} else {
    echo "
Failed to delete review.
";
}
?>


<?php

/**
 * Function to create, retrieve, update, and delete user reviews.
 *
 * This function demonstrates a basic user review system. 
 * You'll likely want to adapt this for a real-world application 
 * with database integration, security measures, and more robust validation.
 */

class ReviewSystem {

    private $reviews = [];  // Store reviews (for simplicity, in memory)

    /**
     * Adds a new review.
     *
     * @param int $productId The ID of the product the review is for.
     * @param string $username The username of the reviewer.
     * @param string $rating The rating given (e.g., 1-5).
     * @param string $comment The user's review comment.
     * @return int|null The ID of the newly created review, or null on failure.
     */
    public function addReview(int $productId, string $username, string $rating, string $comment) {
        // Input Validation (VERY IMPORTANT!)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return null; // Invalid rating
        }

        if (empty($username) || empty($comment)) {
            return null; // Missing username or comment
        }

        $reviewId = count($this->reviews) + 1; // Simple ID generation
        $review = [
            'id' => $reviewId,
            'productId' => $productId,
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Add timestamp for record keeping
        ];

        $this->reviews[] = $review;
        return $reviewId;
    }

    /**
     * Retrieves a review by ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review data, or null if not found.
     */
    public function getReview(int $reviewId) {
        foreach ($this->reviews as $review) {
            if ($review['id'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Updates an existing review.
     *
     * @param int $reviewId The ID of the review to update.
     * @param int $productId The new product ID (if updating).
     * @param string $username The new username.
     * @param string $rating The new rating.
     * @param string $comment The new comment.
     * @return bool True if updated successfully, false otherwise.
     */
    public function updateReview(int $reviewId, int $productId = null, string $username = null, string $rating = null, string $comment = null) {
        $review = $this->getReview($reviewId);

        if (!$review) {
            return false; // Review not found
        }

        // Perform validation here (similar to addReview)

        if ($productId !== null) {
            $review['productId'] = $productId;
        }
        if ($username !== null) {
            $review['username'] = $username;
        }
        if ($rating !== null) {
            if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }
            $review['rating'] = $rating;
        }
        if ($comment !== null) {
            $review['comment'] = $comment;
        }

        return true;
    }

    /**
     * Deletes a review by ID.
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True if deleted successfully, false otherwise.
     */
    public function deleteReview(int $reviewId) {
        foreach ($this->reviews as $key => $review) {
            if ($review['id'] == $reviewId) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }

    /**
     * Retrieves all reviews for a specific product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects.
     */
    public function getReviewsForProduct(int $productId) {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add a review
$reviewId = $reviewSystem->addReview(123, 'JohnDoe', 4, 'Great product, highly recommended!');

if ($reviewId) {
    echo "Review added with ID: " . $reviewId . "
";
} else {
    echo "Failed to add review.
";
}

// Get the review by ID
$review = $reviewSystem->getReview($reviewId);
if ($review) {
    echo "Review details: " . print_r($review, true) . "
";
} else {
    echo "Review not found.
";
}

// Update the review
$updateResult = $reviewSystem->updateReview($reviewId, 5, 'JaneSmith', 5, 'Excellent!');
if ($updateResult) {
    echo "Review updated successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete the review
$deleteResult = $reviewSystem->deleteReview($reviewId);
if ($deleteResult) {
    echo "Review deleted successfully.
";
} else {
    echo "Failed to delete review.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display user reviews for a given item.
 *
 * @param string $item_name The name of the item being reviewed.
 * @param string $review_text The text of the user's review.
 * @param int $user_id (Optional) The ID of the user submitting the review.  Defaults to 0.
 * @param int $rating (Optional) The rating given to the item (1-5). Defaults to 0.
 *
 * @return array  An array containing review data:
 *               - 'review_id' (int): Unique ID of the review.
 *               - 'user_id' (int):  ID of the user.
 *               - 'item_name' (string): Name of the item.
 *               - 'review_text' (string): Review text.
 *               - 'rating' (int): Rating.
 *               - 'timestamp' (string):  Timestamp of the review.
 */
function create_user_review(string $item_name, string $review_text, int $user_id = 0, int $rating = 0)
{
    //  Basic validation - you'd likely want more robust validation in a real application.
    if (empty($review_text)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Generate a unique ID (replace with a database-generated ID in a real app)
    $review_id = time(); 

    // Get the current timestamp
    $timestamp = date("Y-m-d H:i:s");

    // Return the review data
    return [
        'review_id' => $review_id,
        'user_id' => $user_id,
        'item_name' => $item_name,
        'review_text' => $review_text,
        'rating' => $rating,
        'timestamp' => $timestamp
    ];
}


// --- Example Usage ---

// Create a review
$review = create_user_review("Awesome Product", "This product is amazing!  I highly recommend it.");

if (isset($review['error'])) {
    echo "Error creating review: " . $review['error'] . "<br>";
} else {
    echo "Review ID: " . $review['review_id'] . "<br>";
    echo "User ID: " . $review['user_id'] . "<br>";
    echo "Item Name: " . $review['item_name'] . "<br>";
    echo "Review Text: " . $review['review_text'] . "<br>";
    echo "Rating: " . $review['rating'] . "<br>";
    echo "Timestamp: " . $review['timestamp'] . "<br>";
}


// Example with user ID and rating
$review2 = create_user_review("Another Product", "Not bad.", 123, 4);

if (isset($review2['error'])) {
    echo "Error creating review: " . $review2['error'] . "<br>";
} else {
    echo "Review ID: " . $review2['review_id'] . "<br>";
    echo "User ID: " . $review2['user_id'] . "<br>";
    echo "Item Name: " . $review2['item_name'] . "<br>";
    echo "Review Text: " . $review2['review_text'] . "<br>";
    echo "Rating: " . $review2['rating'] . "<br>";
    echo "Timestamp: " . $review2['timestamp'] . "<br>";
}


//Example with invalid input
$review_error = create_user_review("", "Review", 1, 6);
if(isset($review_error['error'])){
    echo "Error creating review: " . $review_error['error'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and view reviews for a product.
 *
 * @param string $product_id The ID of the product being reviewed.
 * @param string $name The name of the reviewer.
 * @param string $comment The review comment.
 * @param int    $rating   The rating given by the user (1-5).
 *
 * @return array An array containing the review data, or an error message if invalid input is provided.
 */
function create_review(string $product_id, string $name, string $comment, int $rating) {
    // Input validation
    if (empty($product_id)) {
        return ['error' => 'Product ID cannot be empty.'];
    }
    if (empty($name)) {
        return ['error' => 'Reviewer name cannot be empty.'];
    }
    if (empty($comment)) {
        return ['error' => 'Review comment cannot be empty.'];
    }
    if ($rating < 1 || $rating > 5) {
        return ['error' => 'Rating must be between 1 and 5.'];
    }

    // Sanitize input (important for security) - this is a basic example, adapt for your needs
    $product_id = filter_var($product_id, FILTER_SANITIZE_STRING);
    $name       = filter_var($name, FILTER_SANITIZE_STRING);
    $comment    = filter_var($comment, FILTER_SANITIZE_STRING);


    // Store the review data (replace with database storage in a real application)
    $review = [
        'product_id' => $product_id,
        'name'       => $name,
        'comment'    => $comment,
        'rating'     => $rating,
        'date'       => date('Y-m-d H:i:s'), // Add a timestamp
    ];


    return $review;
}


/**
 * Display Reviews for a Product
 *
 * This function retrieves and displays reviews for a given product ID.
 *
 * @param string $product_id The ID of the product to retrieve reviews for.
 *
 * @return void  Displays the reviews to the browser.
 */
function display_reviews(string $product_id) {
  // Placeholder for retrieving reviews from a database.
  // In a real application, you would query your database here.

  // Example:  Simulate fetching reviews from a database
  $reviews = [
      ['product_id' => '123', 'name' => 'John Doe', 'comment' => 'Great product!', 'rating' => 5, 'date' => '2023-10-26'],
      ['product_id' => '123', 'name' => 'Jane Smith', 'comment' => 'Could be better', 'rating' => 3, 'date' => '2023-10-25'],
      ['product_id' => '456', 'name' => 'Peter Jones', 'comment' => 'Excellent value', 'rating' => 4, 'date' => '2023-10-24']
  ];

  echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";

  if (empty($reviews)) {
      echo "<p>No reviews yet.</p>";
      return;
  }

  echo "<ul>";
  foreach ($reviews as $review) {
      echo "<li>";
      echo "<strong>" . $review['name'] . "</strong> - " . $review['comment'] . " (" . $review['rating'] . "/5) - " . $review['date'];
      echo "</li>";
  }
  echo "</ul>";
}

// Example Usage (Demonstration)

// Create a review
$new_review = create_review('123', 'Alice Brown', 'This is a fantastic product!', 5);

if (isset($new_review['error'])) {
    echo "<p style='color: red;'>Error creating review: " . $new_review['error'] . "</p>";
} else {
    echo "<p>Review created successfully: " . print_r($new_review, true) . "</p>";
}


// Display reviews for product ID '123'
display_reviews('123');
?>


<?php

/**
 * Function to create a user review.
 *
 * @param string $username The username of the reviewer.
 * @param string $rating  The rating (e.g., 1-5).
 * @param string $comment The reviewer's comments.
 * @param string $product_id The ID of the product being reviewed.
 *
 * @return bool True on success, false on failure.
 */
function createReview(string $username, string $rating, string $comment, string $product_id) {

    // Input validation (Important for security and data integrity)
    if (empty($username) || empty($rating) || empty($comment) || empty($product_id)) {
        error_log("Error: Missing required fields for review creation."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Invalid rating. Rating must be a number between 1 and 5.");
        return false;
    }

    // Database connection (Replace with your actual database connection)
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace placeholders

    try {
        // Prepare the SQL query (Important for security - prevents SQL injection)
        $stmt = $db->prepare("INSERT INTO reviews (user_name, product_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind the parameters (Safely insert the data into the query)
        $stmt->bindParam(1, $username);
        $stmt->bindParam(2, $product_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the query
        $stmt->execute();

        return true; // Success!

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}

// Example Usage:
$username = "JohnDoe";
$rating = 4;
$comment = "Great product!  Works as expected.";
$product_id = "123";

if (createReview($username, $rating, $comment, $product_id)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}


// Example to demonstrate error handling:
$username = ""; // Empty username
$rating = 3;
$comment = "Test review";
$product_id = "456";

if (createReview($username, $rating, $comment, $product_id)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review (due to error).";
}

?>


<?php

/**
 * User Review Function
 *
 * This function creates a simple user review system.  It allows users to
 * submit reviews, displays them, and provides basic functionality for
 * displaying average rating.
 */

class ReviewSystem
{
    private $reviews = []; // Store reviews - key is ID, value is review data

    /**
     * Adds a new review.
     *
     * @param int    $userId   The ID of the user submitting the review.
     * @param string $comment  The review comment.
     * @param int    $rating   The rating (1-5).
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function addReview(int $userId, string $comment, int $rating)
    {
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        $reviewId = count($this->reviews) + 1;
        $this->reviews[$reviewId] = [
            'user_id' => $userId,
            'comment' => $comment,
            'rating' => $rating,
            'date' => date('Y-m-d H:i:s') // Store timestamp for sorting/filtering
        ];

        return $reviewId;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of review data.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $reviewId The ID of the review.
     * @return array|null Review data if found, null otherwise.
     */
    public function getReviewById(int $reviewId)
    {
        if (isset($this->reviews[$reviewId])) {
            return $this->reviews[$reviewId];
        }
        return null;
    }

    /**
     * Calculates the average rating.
     *
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRating()
    {
        $totalRating = 0;
        $reviewCount = count($this->reviews);

        if ($reviewCount > 0) {
            foreach ($this->reviews as $review) {
                $totalRating += $review['rating'];
            }
            return round($totalRating / $reviewCount, 2); // Round to 2 decimal places
        }
        return null;
    }

    /**
     * Displays all reviews.
     */
    public function displayReviews()
    {
        echo "<h2>All Reviews</h2>";
        if (count($this->reviews) == 0) {
            echo "<p>No reviews yet.</p>";
            return;
        }

        echo "<ul>";
        foreach ($this->reviews as $review) {
            echo "<li>";
            echo "<strong>User ID:</strong> " . $review['user_id'] . "<br>";
            echo "<strong>Comment:</strong> " . htmlspecialchars($review['comment']) . "<br>";  // Use htmlspecialchars for security
            echo "<strong>Rating:</strong> " . $review['rating'] . " / 5<br>";
            echo "<strong>Date:</strong> " . $review['date'] . "<br>";
            echo "</li>";
        }
        echo "</ul>";
    }
}


// Example Usage:
$reviewSystem = new ReviewSystem();

// Add some reviews
$reviewId1 = $reviewSystem->addReview(123, "Great product!", 5);
$reviewId2 = $reviewSystem->addReview(456, "Could be better", 3);
$reviewId3 = $reviewSystem->addReview(789, "Amazing!", 5);


// Display all reviews
echo "<h2>Reviews Displayed:</h2>";
$reviewSystem->displayReviews();

// Get average rating
$averageRating = $reviewSystem->getAverageRating();
echo "<br><h2>Average Rating:</h2>";
if ($averageRating !== null) {
    echo "<p>Average Rating: " . $averageRating . "</p>";
} else {
    echo "<p>No reviews to calculate average rating.</p>";
}


// Get a specific review
$review = $reviewSystem->getReviewById(2);
if ($review) {
    echo "<br><h2>Specific Review (ID 2):</h2>";
    echo "<p>User ID: " . $review['user_id'] . "</p>";
    echo "<p>Comment: " . htmlspecialchars($review['comment']) . "</p>";
    echo "<p>Rating: " . $review['rating'] . "</p>";
} else {
    echo "<p>Review not found.</p>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create, read, update, and delete user reviews.
 * It includes basic data sanitization and validation to prevent common issues.
 *
 * @param string $productId The ID of the product the review is for.
 * @param string $rating      The rating given by the user (1-5).
 * @param string $comment     The review comment.
 * @param int    $userId      The ID of the user submitting the review.
 *
 * @return array An array containing:
 *   - 'success': True if the review was created/updated successfully, false otherwise.
 *   - 'message':  A message describing the result of the operation.
 *   - 'review': The newly created or updated review object (if successful).
 */
function create_review(string $productId, string $rating, string $comment, int $userId): array
{
    // Sanitize and Validate Inputs
    $productId = filter_var($productId, FILTER_SANITIZE_STRING, FILTER_STRIP); // Prevent XSS
    $rating = filter_var($rating, FILTER_VALIDATE_INT, array("min" => 1, "max" => 5));
    $comment = filter_var($comment, FILTER_SANITIZE_STRING, FILTER_STRIP);

    if(empty($productId) || empty($rating) || empty($comment) || $rating === null || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid input.  Please check your input values.',
            'review' => null
        ];
    }

    // --- Database Logic - REPLACE WITH YOUR OWN DATABASE CONNECTION ---
    // Example using a mock database
    $reviews = []; // Simulate a database

    // Generate a unique review ID (for demonstration only - use a real unique ID)
    $reviewId = uniqid();

    // Create a review object (you can customize this)
    $review = [
        'reviewId' => $reviewId,
        'productId' => $productId,
        'userId' => $userId,
        'rating' => $rating,
        'comment' => $comment,
        'timestamp' => time()
    ];

    // Add the review to the reviews array
    $reviews[$reviewId] = $review;

    // --- End Database Logic ---


    return [
        'success' => true,
        'message' => 'Review created successfully!',
        'review' => $review
    ];
}


// --- Example Usage ---
// Create a review
$result = create_review('product123', 4, 'Great product!', 123);

if ($result['success']) {
    echo "Review created successfully:<br>";
    echo "Review ID: " . $result['review']['reviewId'] . "<br>";
    echo "Product ID: " . $result['review']['productId'] . "<br>";
    echo "Rating: " . $result['review']['rating'] . "<br>";
    echo "Comment: " . $result['review']['comment'] . "<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}

// Example with invalid input
$result = create_review('', 3, 'Bad product!', 123);
if ($result['success']) {
    echo "Review created successfully:<br>";
} else {
    echo "Error creating review: " . $result['message'] . "<br>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $reviewerName The name of the user submitting the review.
 * @param string $reviewText The text of the review.
 * @param int    $rating    The rating given by the user (e.g., 1-5 stars).
 * @param int    $userId    The user's ID (optional, for database integration).
 *
 * @return array An array containing review data if successful, or an error message string if not.
 */
function createReview(string $productId, string $reviewerName, string $reviewText, int $rating, int $userId = null)
{
    // Input Validation - Important for security and data integrity
    if (empty($productId)) {
        return ["error" => "Product ID cannot be empty."];
    }
    if (empty($reviewerName)) {
        return ["error" => "Reviewer Name cannot be empty."];
    }
    if (empty($reviewText)) {
        return ["error" => "Review Text cannot be empty."];
    }
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return ["error" => "Rating must be a number between 1 and 5."];
    }

    // In a real application, you would save this data to a database
    // For this example, we'll simulate storage using an array.

    $review = [
        "productId" => $productId,
        "reviewerName" => $reviewerName,
        "reviewText" => $reviewText,
        "rating" => $rating,
        "timestamp" => date("Y-m-d H:i:s"), // Add timestamp for tracking
        "userId" => $userId
    ];

    // Simulate saving to a database (replace with your database logic)
    //  Example:  $db->insert("reviews", $review);

    return $review;
}

/**
 * Displays a user review
 *
 * @param array $review  The review data (as returned by createReview).
 * @return string HTML markup to display the review.
 */
function displayReview(array $review)
{
    if (empty($review)) {
        return "<p>No reviews available for this product.</p>";
    }

    $html = "<div class='review'>";
    $html .= "<p><strong>Product ID:</strong> " . htmlspecialchars($review['productId']) . "</p>";
    $html .= "<p><strong>Reviewer:</strong> " . htmlspecialchars($review['reviewerName']) . "</p>";
    $html .= "<p><strong>Rating:</strong> " . htmlspecialchars($review['rating']) . " stars</p>";
    $html .= "<p><strong>Review:</strong> " . nl2br(htmlspecialchars($review['reviewText'])) . "</p>"; // nl2br for line breaks
    $html .= "<p><strong>Timestamp:</strong> " . $review['timestamp'] . "</p>";
    $html .= "</div>";
    return $html;
}

// Example Usage:
$newReview = createReview("product_123", "John Doe", "This product is amazing! I highly recommend it.", 5, 123);

if (isset($newReview['error'])) {
    echo "<p style='color:red;'>Error: " . $newReview['error'] . "</p>";
} else {
    echo "New Review Created Successfully!<br>";
    echo "<pre>";
    print_r($newReview);
    echo "</pre>";
    echo "<br>";

    // Display the review
    echo displayReview($newReview);
}

?>


<?php

/**
 * Class UserReview
 *
 * This class allows users to submit and view reviews for a product or service.
 */
class UserReview
{
    private $reviews = [];

    /**
     * Adds a new review to the system.
     *
     * @param string $userId    The ID of the user submitting the review.
     * @param string $rating    The rating given by the user (e.g., 1-5).
     * @param string $comment  The user's comment about the product/service.
     *
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $userId, string $rating, string $comment)
    {
        // Validation -  Add more validation as needed (e.g., numeric rating check, comment length limits)
        if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
            return false;
        }

        $review = [
            'userId' => $userId,
            'rating' => $rating,
            'comment' => $comment,
            'date' => date('Y-m-d H:i:s') // Timestamp of when the review was added
        ];

        $this->reviews[] = $review;
        return true;
    }

    /**
     * Retrieves all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews()
    {
        return $this->reviews;
    }

    /**
     * Retrieves reviews by user ID.
     *
     * @param string $userId The user ID to filter by.
     *
     * @return array An array of reviews for the specified user.
     */
    public function getReviewsByUserId(string $userId)
    {
        $userReviews = [];
        foreach ($this->reviews as $review) {
            if ($review['userId'] === $userId) {
                $userReviews[] = $review;
            }
        }
        return $userReviews;
    }

    /**
     * Calculates the average rating for a product/service.
     *
     * @return float|null The average rating, or null if no reviews are available.
     */
    public function calculateAverageRating()
    {
        if (empty($this->reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($this->reviews as $review) {
            $totalRating += floatval($review['rating']);
        }
        return round($totalRating / count($this->reviews), 2); // Round to 2 decimal places
    }

    /**
     * Clears all reviews.
     */
    public function clearReviews()
    {
        $this->reviews = [];
    }
}

// --- Example Usage ---
// Create a UserReview object
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('user123', 4, 'Great product!  Easy to use.');
$reviewSystem->addReview('user456', 5, 'Excellent service and fast delivery.');
$reviewSystem->addReview('user123', 3, 'It was okay, nothing special.');

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
print_r($allReviews);

// Get reviews for user123
$userReviews = $reviewSystem->getReviewsByUserId('user123');
echo "
Reviews for user123:
";
print_r($userReviews);

// Calculate the average rating
$averageRating = $reviewSystem->calculateAverageRating();
echo "
Average Rating: " . ($averageRating !== null ? $averageRating : 'No reviews available') . "
";

// Clear the reviews
$reviewSystem->clearReviews();
echo "
Reviews cleared.
";

// Check if reviews are empty
$allReviews = $reviewSystem->getAllReviews();
echo "Reviews after clearing: " . count($allReviews) . "
";
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It provides basic functionality for adding, retrieving, and displaying reviews.
 *
 * @param string $productId The unique identifier for the product/item.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The text content of the review.
 * @param int $rating   The rating given by the user (1-5).
 *
 * @return array An array containing:
 *   - 'success': True if the review was successfully added.
 *   - 'message': A message indicating the status of the review addition.
 *   - 'reviews': An array of all reviews for the product.
 */
function store_user_review(string $productId, string $username, string $reviewText, int $rating): array
{
    // Sanitize input (important for security!)
    $productId = filter_var($productId, FILTER_SANITIZE_STRING);
    $username = filter_var($username, FILTER_SANITIZE_STRING);
    $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING);
    $rating = intval($rating); // Ensure rating is an integer

    // Validation (essential for data integrity)
    if (empty($productId) || empty($username) || empty($reviewText) || $rating < 1 || $rating > 5) {
        return ['success' => false, 'message' => 'Invalid review data.  Please ensure all fields are filled and ratings are between 1 and 5.', 'reviews' => []];
    }

    // Example: Store reviews in an array (replace with a database storage)
    $reviews = [];
    if (isset($_SESSION['reviews'][$productId])) {
        $reviews = $_SESSION['reviews'][$productId];
    }

    $newReview = [
        'username' => $username,
        'review' => $reviewText,
        'rating' => $rating,
        'timestamp' => time() // Add timestamp for ordering/filtering
    ];

    $reviews[] = $newReview;
    $_SESSION['reviews'][$productId] = $reviews; // Store in session (for simplicity)

    return ['success' => true, 'message' => 'Review submitted successfully!', 'reviews' => $reviews];
}


// --- Example Usage (for demonstration) ---

// Initialize session (important for storing reviews)
session_start();

// Simulate a product ID
$productId = 'product-123';

// Example 1: Successful submission
$reviewData = store_user_review($productId, 'John Doe', 'This product is amazing!', 5);
print_r($reviewData);

// Example 2: Invalid input (rating outside range)
$invalidReviewData = store_user_review($productId, 'Jane Smith', 'Good product', 7);
print_r($invalidReviewData);

// ---  Displaying Reviews (Example) ---
if (isset($_SESSION['reviews'][$productId])) {
    echo "<h2>Reviews for Product " . $productId . "</h2>";
    echo "<ul>";
    foreach ($_SESSION['reviews'][$productId] as $review) {
        echo "<li><strong>" . $review['username'] . ":</strong> " . htmlspecialchars($review['review']) . " (" . $review['rating'] . "/5) - " . date('Y-m-d H:i:s', $review['timestamp']) . "</li>";
    }
    echo "</ul>";
} else {
    echo "<p>No reviews yet.</p>";
}
?>


<?php

/**
 * User Review Function
 *
 * This function takes a product ID, user data, and a review text,
 * and saves the review to a database.  It also includes basic validation
 * and error handling.
 *
 * @param int $productId The ID of the product the review is for.
 * @param array $userData  An associative array containing user data:
 *                      - 'username' => string - The user's username.
 *                      - 'rating' => int - The rating given (e.g., 1-5).
 *                      - 'review' => string - The text of the review.
 * @param PDO $pdo        A PDO database connection object.
 *
 * @return bool True on success, false on failure.
 */
function saveUserReview(int $productId, array $userData, PDO $pdo)
{
    // Validate input data
    $username = isset($userData['username']) ? trim($userData['username']) : '';
    $rating = isset($userData['rating']) ? (int)$userData['rating'] : 0; // Ensure rating is an integer
    $review = isset($userData['review']) ? trim($userData['review']) : '';

    if (empty($username) || empty($review)) {
        error_log("Invalid review data: Username and review text are required."); // Log the error
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Invalid rating: Rating must be between 1 and 5.");
        return false;
    }

    // Prepare the SQL query
    $sql = "INSERT INTO reviews (product_id, username, rating, review)
            VALUES (:product_id, :username, :rating, :review)";

    try {
        // Prepare the statement
        $stmt = $pdo->prepare($sql);

        // Bind parameters
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        // Execute the query
        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false;
    }
}


// Example Usage (Assuming you have a database connection established)

// **Important: Replace with your actual database connection details**
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


// Sample User Data
$userData = [
    'username' => 'john.doe',
    'rating' => 4,
    'review' => 'Great product!  I really liked it.',
];

// Save the review
if (saveUserReview(123, $userData, $pdo)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.  Check the error logs.";
}

?>


<?php

/**
 * User Review Function
 *
 * This function takes a user ID, a product ID, and a review text,
 * and saves the review to a database.  It also handles basic input validation.
 *
 * @param int $userId The ID of the user submitting the review.
 * @param int $productId The ID of the product being reviewed.
 * @param string $reviewText The text of the review.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(int $userId, int $productId, string $reviewText): bool
{
    // Input Validation -  Crucial to prevent SQL injection and bad data
    if (!$userId || !$productId || !$reviewText) {
        error_log("Error: Missing required parameters for review."); // Log error
        return false;
    }

    // Sanitize the review text -  Important!
    $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');

    //  You'll need a database connection here.  This is just a placeholder.
    //  Replace this with your actual database connection code.
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

    try {
        // Prepare the SQL statement to prevent SQL injection
        $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:userId, :productId, :reviewText, :rating)");

        // Bind the parameters - ensures data is properly escaped
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':reviewText', $reviewText);
        $stmt->bindParam(':rating', 0); // default rating - you might want to allow users to set this

        // Execute the statement
        $result = $stmt->execute();

        // Check if the query was successful
        if ($result) {
            return true;
        } else {
            // Log the error
            error_log("Error saving review: " . print_r($stmt->errorInfo(), true));
            return false;
        }
    } catch (PDOException $e) {
        // Log the exception -  Very important for debugging
        error_log("PDO Exception: " . $e->getMessage());
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual data)
// $userId = 123;
// $productId = 456;
// $reviewText = "This product is amazing!  I really love it!";
//
// if (saveUserReview($userId, $productId, $reviewText)) {
//     echo "Review saved successfully!";
// } else {
//     echo "Error saving review.";
// }



//  Important Considerations and Best Practices:

// 1. Database Connection: This example uses a placeholder database connection.  You *must* replace the example connection with your actual database connection code using PDO or MySQLi.

// 2. Error Handling:  The `try...catch` block handles potential database errors, preventing your script from crashing and providing valuable debugging information. Always log errors.

// 3. Input Validation:  The  `if (!$userId || ...)` block is crucial. Validate that all required parameters are provided and of the correct type.  This prevents unexpected behavior and potential security vulnerabilities.  You can extend this validation to check for things like review length limits, disallowed characters, etc.

// 4. SQL Injection Prevention: The code *must* use prepared statements with parameterized queries (using `$db->prepare()` and `$stmt->bindParam()`).  This is the *only* secure way to handle user input in SQL queries. Never directly concatenate user input into your SQL strings.

// 5. Sanitization: `htmlspecialchars()`  sanitizes the review text to prevent cross-site scripting (XSS) attacks.  It converts special characters (like <, >, &, etc.) into their HTML entities, preventing them from being interpreted as HTML tags.

// 6.  Database Schema: The code assumes a database schema with tables like `reviews` with columns `user_id`, `product_id`, `review_text`, and `rating`.  Adjust this to match your actual database structure.

// 7.  Rating:  The code includes a `rating` column. You can extend this function to allow users to set a rating (e.g., a star rating).

// 8.  Logging:  Using `error_log()` is vital for debugging. It's better than `echo`ing errors because it doesn't expose them to users.

// 9.  Security: Keep your database credentials secure. Don't hardcode them into your scripts; use environment variables or a configuration file.

// 10.  Database Transactions (For Complex Operations):  If you're performing multiple database operations (e.g., updating several tables), consider using database transactions to ensure that either all operations succeed or none of them do, maintaining data integrity.


<?php

/**
 * User Review Function
 *
 * This function allows you to create, retrieve, update, and delete user reviews.
 * It uses a simple database (for demonstration) and includes basic input validation.
 * 
 * **Important:** This is a basic example and should be adapted to your specific database,
 * schema, and security requirements.  Consider using an ORM (Object-Relational Mapper) 
 * for more complex applications.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $username The username of the reviewer.
 * @param string $rating The rating given by the reviewer (e.g., 1-5).
 * @param string $comment The comment left by the reviewer.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUser The database username.
 * @param string $dbPassword The database password.
 *
 * @return array  An array containing:
 *                - 'success': True if the operation was successful, False otherwise.
 *                - 'message':  A message describing the result.
 *                - 'reviewId': The ID of the newly created review (if successful).
 *                              Returns NULL if the review was not created.
 */
function createReview(
    string $productId,
    string $username,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbName,
    string $dbUser,
    string $dbPassword
) {
    // Input Validation - Basic Example
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        return [
            'success' => false,
            'message' => 'Invalid rating. Rating must be a number between 1 and 5.',
            'reviewId' => null,
        ];
    }

    // Database connection (Use a real database connection class for production)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        return [
            'success' => false,
            'message' => "Failed to connect to database: " . $conn->connect_error,
            'reviewId' => null,
        ];
    }

    // Prepare the SQL statement
    $sql = "INSERT INTO reviews (productId, username, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        return [
            'success' => false,
            'message' => "Failed to prepare SQL statement: " . $conn->error,
            'reviewId' => null,
        ];
    }

    // Bind parameters
    $stmt->bind_param("ssis", $productId, $username, $rating, $comment);

    // Execute the statement
    if ($stmt->execute() === false) {
        return [
            'success' => false,
            'message' => "Failed to execute SQL: " . $stmt->error,
            'reviewId' => null,
        ];
    }

    // Get the last inserted ID
    $reviewId = $conn->insert_id;

    // Close the statement and connection
    $stmt->close();
    $conn->close();

    return [
        'success' => true,
        'message' => 'Review created successfully.',
        'reviewId' => $reviewId,
    ];
}

// Example Usage (Replace with your database details)
// $product_id = '123';
// $username = 'john.doe';
// $rating = 4;
// $comment = 'Great product!';

// $result = createReview($product_id, $username, $rating, $comment, 'localhost', 'your_db_name', 'your_db_user', 'your_db_password');

// print_r($result); // Display the result
?>


<?php

/**
 * Function to create and store user reviews.
 *
 * This function handles:
 * - Validating input data.
 * - Generating a unique review ID.
 * - Storing the review in a database (using a basic example, you'd adapt this to your database setup).
 * - Returning the review ID.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $user_id The ID of the user leaving the review.
 * @string $rating The rating (e.g., 1-5).
 * @string $comment The user's review comment.
 * @return int|false The ID of the newly created review on success, or false on failure.
 */
function createReview(string $product_id, string $user_id, string $rating, string $comment)
{
    // **Input Validation - Important!**
    if (empty($product_id) || empty($user_id) || empty($rating) || empty($comment)) {
        error_log("Error: Missing review data.  product_id, user_id, rating, and comment are required."); // Log the error for debugging.
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Error: Invalid rating.  Rating must be a number between 1 and 5.");
        return false;
    }

    // **Database Interaction (Example - Adapt to your DB setup)**
    try {
        // Assuming you have a database connection established as $db
        $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your database credentials
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling for errors

        // Prepare the SQL statement
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");

        // Bind the parameters
        $stmt->bindParam(1, $product_id);
        $stmt->bindParam(2, $user_id);
        $stmt->bindParam(3, $rating);
        $stmt->bindParam(4, $comment);

        // Execute the statement
        $stmt->execute();

        // Get the last inserted ID
        $review_id = $db->lastInsertId();

        return (int)$review_id; // Cast to integer for consistency

    } catch (PDOException $e) {
        error_log("Database Error: " . $e->getMessage()); // Log the full error message
        return false;
    }
}


/**
 * Example Usage:
 */

// Sample Review Data
$product_id = 'product123';
$user_id = 'user456';
$rating = 4;
$comment = 'Great product!  Highly recommend.';

// Create the review
$review_id = createReview($product_id, $user_id, $rating, $comment);

if ($review_id) {
    echo "Review created successfully! Review ID: " . $review_id . "
";
} else {
    echo "Error creating review.
";
}

// Example of invalid input
$invalid_review_id = createReview("", "user1", 3, "Test comment");
if($invalid_review_id){
    echo "Invalid review created successfully! Review ID: " . $invalid_review_id . "
";
}else{
    echo "Error creating review.
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product.
 * It handles input validation, sanitization, and basic storage.
 *
 * @param string $productId The unique identifier for the product.
 * @param string $userName The name of the user submitting the review.
 * @param string $reviewText The user's review text.
 * @param string $dbConnection PDO connection object to the database.
 *
 * @return array An array containing the result of the review submission:
 *              - 'success':  True if the review was successfully saved, false otherwise.
 *              - 'message':  A message indicating the status of the review.
 *              - 'reviewId': The ID of the newly created review if successful, or null otherwise.
 */
function submitReview(string $productId, string $userName, string $reviewText, PDO $dbConnection) {

  // Input Validation and Sanitization - IMPORTANT!  Prevent SQL Injection!
  $productId = filter_var($productId, FILTER_SANITIZE_STRING);  // Sanitize product ID
  $userName = filter_var($userName, FILTER_SANITIZE_STRING); // Sanitize user name
  $reviewText = filter_var($reviewText, FILTER_SANITIZE_STRING); // Sanitize review text

  //  Check if the product exists (basic check - improve for real-world use)
  $stmt = $dbConnection->prepare("SELECT id FROM products WHERE id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  $product = $stmt->fetch(PDO::FETCH_OBJ);

  if (!$product) {
    return [
      'success' => false,
      'message' => "Product with ID '$productId' not found.",
      'reviewId' => null
    ];
  }

  // Sanitize review text to prevent XSS.  Consider using HTML escaping.
  $reviewText = htmlspecialchars($reviewText, ENT_QUOTES, 'UTF-8');


  // Prepare and execute the insert statement
  $stmt = $dbConnection->prepare("INSERT INTO reviews (product_id, user_name, review_text) VALUES (:product_id, :user_name, :review_text)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_name', $userName);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->execute();

  $reviewId = $dbConnection->lastInsertId();

  return [
    'success' => true,
    'message' => "Review submitted successfully!",
    'reviewId' => $reviewId
  ];
}

// Example Usage (assuming you have a database connection object $dbConnection)
//
// $result = submitReview('123', 'John Doe', 'This is a great product!', $dbConnection);
//
// if ($result['success']) {
//   echo "Review submitted successfully! Review ID: " . $result['reviewId'];
// } else {
//   echo "Error submitting review: " . $result['message'];
// }


/**
 * Function to display reviews for a product.
 *
 * @param string $productId The unique identifier for the product.
 * @param PDO $dbConnection PDO connection object to the database.
 */
function displayReviews(string $productId, PDO $dbConnection) {
  $query = "SELECT id, user_name, review_text, created_at FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $dbConnection->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();

  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  if (empty($reviews)) {
    echo "<p>No reviews yet.</p>";
  } else {
    echo "<h2>Reviews for Product ID: " . $productId . "</h2>";
    echo "<ul>";
    foreach ($reviews as $review) {
      echo "<li>";
      echo "<p><strong>User:</strong> " . htmlspecialchars($review['user_name']) . "</p>";
      echo "<p>" . htmlspecialchars($review['review_text']) . "</p>";
      echo "<p>Date: " . date("Y-m-d H:i:s", strtotime($review['created_at'])) . "</p>";
      echo "</li>";
    }
    echo "</ul>";
  }
}



?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Array to store reviews
    private $db; // Database connection (using PDO for example)

    /**
     * Constructor: Initializes the UserReview class.
     *
     * @param PDO $db PDO database connection.  Defaults to a dummy connection.
     */
    public function __construct(PDO $db = null)
    {
        $this->db = $db ?? new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials.  Use a dummy PDO for testing.
        $this->reviews = [];
    }


    /**
     * Add a new review.
     *
     * @param string $user_id The ID of the user writing the review.
     * @param string $product_id The ID of the product being reviewed.
     * @param string $rating The rating (e.g., 1-5).
     * @param string $comment The review comment.
     * @return bool True if the review was added successfully, false otherwise.
     */
    public function addReview(string $user_id, string $product_id, string $rating, string $comment): bool
    {
        $rating = (int)$rating; // Ensure rating is an integer
        if ($rating < 1 || $rating > 5) {
            return false; // Invalid rating
        }

        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            // Handle database errors (log them, etc.)
            error_log("Error adding review: " . $e->getMessage());
            return false;
        }
    }



    /**
     * Retrieve all reviews for a specific product.
     *
     * @param string $product_id The ID of the product.
     * @return array An array of review objects, or an empty array if no reviews are found.
     */
    public function getReviewsByProduct(string $product_id): array
    {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch results as objects for easier access.

            return $reviews;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error retrieving reviews: " . $e->getMessage());
            return [];
        }
    }



    /**
     * Retrieve a single review by its ID.
     *
     * @param int $review_id The ID of the review to retrieve.
     * @return object|null A review object if found, null otherwise.
     */
    public function getReviewById(int $review_id): ?object
    {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $review_id);
            $stmt->execute();
            $review = $stmt->fetch(PDO::FETCH_OBJ);
            return $review;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error retrieving review: " . $e->getMessage());
            return null;
        }
    }


    /**
     * Update an existing review.  Requires the review_id.
     *
     * @param int $review_id The ID of the review to update.
     * @param string $new_rating The new rating.
     * @param string $new_comment The new review comment.
     * @return bool True if the review was updated successfully, false otherwise.
     */
    public function updateReview(int $review_id, string $new_rating, string $new_comment): bool
    {
        try {
            $rating = (int)$new_rating;
            if ($rating < 1 || $rating > 5) {
                return false; // Invalid rating
            }

            $sql = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :review_id";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':review_id', $review_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $new_comment);
            $stmt->execute();
            return true;

        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error updating review: " . $e->getMessage());
            return false;
        }
    }


    /**
     * Delete a review by its ID.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool True if the review was deleted successfully, false otherwise.
     */
    public function deleteReview(int $review_id): bool
    {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
            $stmt->bindParam(':review_id', $review_id);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            // Handle database errors.
            error_log("Error deleting review: " . $e->getMessage());
            return false;
        }
    }



    //  Methods to display the reviews (for demonstration purposes)
    public function displayReviewsByProduct(string $product_id)
    {
        $reviews = $this->getReviewsByProduct($product_id);
        if ($reviews) {
            echo "<h2>Reviews for Product ID: " . $product_id . "</h2>";
            foreach ($reviews as $review) {
                echo "<p><strong>User:</strong> " . $review->user_id . "<br>";
                echo "<strong>Rating:</strong> " . $review->rating . "<br>";
                echo "<strong>Comment:</strong> " . $review->comment . "</p>";
            }
        } else {
            echo "<p>No reviews found for this product.</p>";
        }
    }
}



// Example Usage:

// Create a dummy database connection (replace with your actual database credentials)
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$reviewSystem = new UserReview($db);


// Add a review
if ($reviewSystem->addReview(123, 456, 4, "Great product!")) {
    echo "<p>Review added successfully.</p>";
} else {
    echo "<p>Failed to add review.</p>";
}


// Retrieve reviews for a product
$reviewSystem->displayReviewsByProduct(456); // Displays reviews for product ID 456


//Update a review
if ($reviewSystem->updateReview(1, 5, "Excellent! I highly recommend this.") ) {
    echo "<p>Review updated successfully.</p>";
} else {
    echo "<p>Failed to update review.</p>";
}


//Delete a review
if($reviewSystem->deleteReview(1)){
    echo "<p>Review deleted successfully</p>";
} else {
    echo "<p>Failed to delete review</p>";
}
?>


<?php

/**
 * User Review Class
 */
class UserReview {

  private $review_id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;
  private $date;

  /**
   * Constructor
   * 
   * @param int $review_id (optional) - Unique ID for the review.  If not provided, generates one.
   * @param int $user_id  - The ID of the user who wrote the review.
   * @param int $product_id - The ID of the product being reviewed.
   * @param int $rating  -  The rating (e.g., 1-5).
   * @param string $comment - The user's comment about the product.
   */
  public function __construct(
    int $user_id,
    int $product_id,
    int $rating,
    string $comment = ""  // Default comment to empty string
  ) {
    $this->generateReviewId();
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
    $this->date = date("Y-m-d H:i:s"); // Get current timestamp
  }

  /**
   * Generates a unique review ID.
   */
  private function generateReviewId(): void {
    // You could use database sequence or a unique string generation method.
    // For simplicity, using a timestamp and a counter.
    static $counter = 0;
    $this->review_id = $counter++;
  }

  /**
   * Getters
   */
  public function getReviewId(): int {
    return $this->review_id;
  }

  public function getUser(): int {
    return $this->user_id;
  }

  public function getProduct(): int {
    return $this->product_id;
  }

  public function getRating(): int {
    return $this->rating;
  }

  public function getComment(): string {
    return $this->comment;
  }

  public function getDate(): string {
    return $this->date;
  }
  
  /**
   * Returns the review as an array. Useful for database insertion.
   * @return array
   */
  public function toArray(): array {
    return [
      'review_id' => $this->review_id,
      'user_id' => $this->user_id,
      'product_id' => $this->product_id,
      'rating' => $this->rating,
      'comment' => $this->comment,
      'date' => $this->date
    ];
  }
}


/**
 * User Review Function (Example)
 */
function displayReviewDetails(UserReview $review): void {
  echo "Review ID: " . $review->getReviewId() . "<br>";
  echo "User ID: " . $review->getUser() . "<br>";
  echo "Product ID: " . $review->getProduct() . "<br>";
  echo "Rating: " . $review->getRating() . "<br>";
  echo "Comment: " . $review->getComment() . "<br>";
  echo "Date: " . $review->getDate() . "<br>";
}


// Example Usage:

// Create a new review object
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
$review2 = new UserReview(789, 101, 3, "Okay, but could be better.");
$review3 = new UserReview(101, 102); //uses default empty comment.


// Display the review details
displayReviewDetails($review1);
displayReviewDetails($review2);
displayReviewDetails($review3);

// Demonstrate the toArray method:
$review_data = $review1->toArray();
print_r($review_data);  // Output will be an array.



//  Considerations for a Real Application:

// 1. Database Integration:  The code above is a basic example. In a real application,
//    you would store the reviews in a database (e.g., MySQL, PostgreSQL).

// 2. Validation: Add input validation to ensure that the rating is within a valid range (e.g., 1-5) and that required fields are not empty.

// 3. Error Handling: Implement error handling to gracefully handle potential errors, such as database connection errors.

// 4. Security:  Sanitize user input to prevent security vulnerabilities (e.g., SQL injection).

// 5.  More Complex Interactions: Consider features like pagination for displaying reviews, sorting reviews, and searching for reviews.
?>


<?php

/**
 * User Review Function
 *
 * This function takes user input and generates a basic user review.
 * It can be customized to add more features like rating, sentiment analysis,
 * or integration with a database.
 *
 * @param string $username The username of the reviewer.
 * @param string $reviewText The text of the review.
 * @return string A formatted user review string.
 */
function generateUserReview(string $username, string $reviewText): string
{
    // Validate inputs (Optional, but recommended)
    if (empty($username)) {
        return "Error: Username cannot be empty.";
    }
    if (empty($reviewText)) {
        return "Error: Review text cannot be empty.";
    }

    // Format the review
    $review = "Review by: " . $username . "
";
    $review .= "Review Text: " . $reviewText . "
";
    $review .= "--- End of Review ---";

    return $review;
}


// Example Usage:
$username = "JohnDoe";
$reviewText = "This product is amazing! I highly recommend it.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL;

$username = "JaneSmith";
$reviewText = "The service was slow, but the staff were friendly.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL;


//Example with invalid input
$username = "";
$reviewText = "This is a review.";
$review = generateUserReview($username, $reviewText);
echo $review . PHP_EOL; // This will output the error message.

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to capture user reviews, sanitize input,
 * and optionally store them in a database.
 *
 * @param string $productName The name of the product being reviewed.
 * @param string $userId      The ID of the user submitting the review.  Can be NULL for guest reviews.
 * @param string $reviewText  The text of the user's review.
 * @param string $rating      (Optional) The rating given by the user (e.g., 1-5).  Defaults to null.
 * @param string $dbHost       (Optional) Database host.  Required if storing reviews in a database.
 * @param string $dbUser       (Optional) Database user.  Required if storing reviews in a database.
 * @param string $dbPassword  (Optional) Database password.  Required if storing reviews in a database.
 * @param string $dbName       (Optional) Database name.  Required if storing reviews in a database.
 * @param string $table        (Optional) Name of the table to store the reviews in (if using database).
 *
 * @return array An array containing the review data or an error message if invalid input is detected.
 */
function createReview(
    string $productName,
    string $userId,
    string $reviewText,
    string $rating = null,
    string $dbHost = null,
    string $dbUser = null,
    string $dbPassword = null,
    string $dbName = null,
    string $table = null
) {
    // Input Validation - Basic Check
    if (empty($productName)) {
        return ['error' => 'Product name cannot be empty.'];
    }
    if (empty($reviewText)) {
        return ['error' => 'Review text cannot be empty.'];
    }

    // Sanitize input (Important for security)
    $reviewText = trim($reviewText);
    $reviewText = htmlspecialchars($reviewText); // Prevent XSS attacks

    // Validation for rating (if provided)
    if ($rating !== null) {
        if (!is_numeric($rating)) {
            return ['error' => 'Rating must be a number.'];
        }
        if ($rating < 1 || $rating > 5) {
            return ['error' => 'Rating must be between 1 and 5.'];
        }
    }

    // Construct the review data
    $reviewData = [
        'product_name' => $productName,
        'user_id'      => $userId,
        'review_text'  => $reviewText,
        'rating'       => $rating,
    ];

    // Store in Database (Optional)
    if ($dbHost !== null && $dbUser !== null && $dbPassword !== null && $dbName !== null && $table !== null) {
        // Implement database connection and insertion logic here.
        // This is just a placeholder.  You'll need to adapt it to your database system.

        try {
            // Example (MySQL) - Replace with your connection details and query
            $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

            if ($conn->connect_error) {
                throw new Exception("Connection failed: " . $conn->connect_error);
            }

            $query = "INSERT INTO `$table` (product_name, user_id, review_text, rating) VALUES ('" . $conn->real_escape_string($productName) . "', '" . $conn->real_escape_string($userId) . "', '" . $conn->real_escape_string($reviewText) . "', '" . $conn->real_escape_string($rating) . "')";
            $conn->query($query);

            $conn->close();

        } catch (Exception $e) {
            return ['error' => 'Database error: ' . $e->getMessage()];
        }
    }

    return $reviewData;
}


// Example Usage:
// Simulate a review submission
$review = createReview(
    'Awesome Widget',
    'user123',
    'This widget is fantastic!  I love it.',
    5,
    'localhost',
    'myuser',
    'secretpassword',
    'my_database',
    'product_reviews'
);

if (isset($review['error'])) {
    echo "<p style='color: red;'>Error: " . $review['error'] . "</p>";
} else {
    echo "<p>Review submitted successfully! Data: " . print_r($review, true) . "</p>";
}


?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit and display reviews for a product or service.
 *
 * @param string $productName The name of the product or service being reviewed.
 * @param string $reviewText The user's review text.
 * @param int $userId (Optional) The ID of the user submitting the review.  If not provided, a default/anonymous user is used.
 * @param string $reviewerName (Optional) The name to display for the reviewer. If not provided, a default name is used.
 *
 * @return array An array containing review details (success/failure, review text, reviewer details).
 */
function submitReview(string $productName, string $reviewText, $userId = null, $reviewerName = null) {
  // Input Validation - crucial for security and data integrity
  if (empty($productName)) {
    return ['success' => false, 'message' => 'Product name cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  // Handle User ID (if provided) -  This is a simplified example.  In a real application,
  // you would typically authenticate and validate the user.
  if ($userId === null) {
    $userId = 1; // Default user ID.  Change this for a real system.
  }

  // Handle Reviewer Name - Default if not provided
  if ($reviewerName === null) {
    $reviewerName = 'Anonymous User';
  }

  //  Simulate saving the review to a database or file.  In a real application,
  //  replace this with your database interaction logic.
  $reviewId = time(); // Generate a unique ID for the review.
  $reviewData = [
    'reviewId' => $reviewId,
    'productId' => $productName,
    'reviewText' => $reviewText,
    'userId' => $userId,
    'reviewerName' => $reviewerName,
    'dateSubmitted' => date('Y-m-d H:i:s')
  ];

  // Simulate saving the review to a file (for demonstration)
  file_put_contents('reviews.txt', $reviewData . PHP_EOL, FILE_APPEND);


  return ['success' => true, 'review' => $reviewData];
}


/**
 * Display a Review
 *
 * This function retrieves and displays a review based on its ID.
 *
 * @param string $reviewId The ID of the review to display.
 *
 * @return array An array containing review details (success/failure, review details).
 */
function displayReview(string $reviewId) {
  // Simulate retrieving the review from a database or file.
  // Replace this with your database query logic.
  $reviews = [];
  if (file_exists('reviews.txt')) {
      $lines = file('reviews.txt', FILE_IGNORE_NEW_LINES);
      foreach ($lines as $line) {
          $reviews[] = explode(',', $line);
      }
  }

  foreach ($reviews as $review) {
    if ($review[0] == $reviewId) {
      return ['success' => true, 'review' => $review];
    }
  }

  return ['success' => false, 'message' => 'Review not found.'];
}



// Example Usage:
$product = 'Awesome Gadget X';

// Submit a review
$reviewResult = submitReview($product, 'This gadget is amazing!  I highly recommend it.', 123, 'John Doe');

if ($reviewResult['success']) {
  echo "Review submitted successfully!
";
  echo "Review ID: " . $reviewResult['review']['reviewId'] . "
";
  echo "Reviewer: " . $reviewResult['review']['reviewerName'] . "
";
  echo "Review Text: " . $reviewResult['review']['reviewText'] . "
";
} else {
  echo "Error submitting review: " . $reviewResult['message'] . "
";
}

// Display the review
$reviewDisplayResult = displayReview($reviewResult['review']['reviewId']);

if ($reviewDisplayResult['success']) {
  echo "
--- Displaying Review ---
";
  echo "Review ID: " . $reviewDisplayResult['review']['reviewId'] . "
";
  echo "Reviewer: " . $reviewDisplayResult['review']['reviewerName'] . "
";
  echo "Review Text: " . $reviewDisplayResult['review']['reviewText'] . "
";
  echo "Date Submitted: " . $reviewDisplayResult['review']['dateSubmitted'] . "
";
} else {
  echo "Error displaying review: " . $reviewDisplayResult['message'] . "
";
}
?>


<?php

/**
 * User Review Function
 *
 * This function allows users to submit reviews for a product or item.
 * It validates the input, sanitizes it, and saves it to a database.
 *
 * @param string $productId The ID of the product being reviewed.
 * @param string $rating  The rating given by the user (e.g., 1-5).
 * @param string $comment The user's review comment.
 * @param string $dbHost    The database hostname (e.g., localhost).
 * @param string $dbUser    The database username.
 * @param string $dbPassword The database password.
 * @param string $dbName    The database name.
 *
 * @return bool True if the review was successfully submitted, false otherwise.
 */
function submitReview(
    string $productId,
    string $rating,
    string $comment,
    string $dbHost,
    string $dbUser,
    string $dbPassword,
    string $dbName
) {
    // Input validation and sanitization
    if (empty($productId) || empty($rating) || empty($comment)) {
        error_log("Missing required fields in review submission.");
        return false;
    }

    if (!preg_match('/^[1-5][0-9]*$/', $rating)) {
        error_log("Invalid rating format.  Please enter a number between 1 and 5.");
        return false;
    }

    if (strlen($comment) > 500) {  // Example: Limit comment length
        error_log("Comment exceeds maximum length (500 characters).");
        return false;
    }

    // Database connection (using a simple example - consider using PDO for better security)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error);
        return false;
    }

    // Prepare the SQL statement (using prepared statements for security!)
    $sql = "INSERT INTO reviews (product_id, rating, comment) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);

    if ($stmt === false) {
        error_log("Error preparing SQL statement: " . $conn->error);
        $stmt->close();
        $conn->close();
        return false;
    }

    // Bind parameters to prevent SQL injection
    $stmt->bind_param("siii", $productId, $rating, $comment);

    // Execute the statement
    if ($stmt->execute()) {
        $stmt->close();
        $conn->close();
        return true;
    } else {
        error_log("Error executing SQL statement: " . $stmt->error);
        $stmt->close();
        $conn->close();
        return false;
    }
}

// Example Usage:
// Assuming you have a database set up with a table named 'reviews'
// with columns: product_id (INT), rating (INT), comment (TEXT)

// $success = submitReview("123", "4", "This product is amazing!", "localhost", "user", "password", "mydatabase");

// if ($success) {
//     echo "Review submitted successfully!";
// } else {
//     echo "Error submitting review.";
// }
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 * It includes basic validation and sanitization.  For production environments,
 * consider adding more robust validation and sanitization.
 *
 * @param string $product_id The unique identifier for the product/item.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The review text submitted by the user.
 * @param int $rating The rating given by the user (e.g., 1-5).
 * @param string $db_connection  (Optional) A database connection object.
 *                             If not provided, it will attempt to connect to a 'reviews' database.
 * @return bool True if the review was saved successfully, false otherwise.
 */
function saveUserReview(string $product_id, string $user_name, string $review_text, int $rating, $db_connection = null): bool
{
    // Basic validation - Adjust as needed for your application
    if (empty($product_id)) {
        error_log("Error: Product ID cannot be empty.");
        return false;
    }

    if (empty($user_name)) {
        error_log("Error: User name cannot be empty.");
        return false;
    }

    if (empty($review_text)) {
        error_log("Error: Review text cannot be empty.");
        return false;
    }

    if ($rating < 1 || $rating > 5) {
        error_log("Error: Rating must be between 1 and 5.");
        return false;
    }

    // Sanitize input (Important for security - this is a basic example)
    $review_text = htmlspecialchars($review_text); // Prevents XSS attacks
    $user_name = htmlspecialchars($user_name);

    // Database connection - If not provided, attempt to connect
    if (!$db_connection) {
        try {
            $db_connection = new PDO("mysql:host=localhost;dbname=reviews", "root", "");  // Replace credentials
            $db_connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            error_log("Database connection error: " . $e->getMessage());
            return false;
        }
    }


    // Prepare and execute the SQL query
    try {
        $stmt = $db_connection->prepare(
            "INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)"
        );

        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);

        $stmt->execute();

        return true;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


/**
 * Display User Reviews for a product
 *
 * Retrieves and displays reviews associated with a given product ID.
 *
 * @param string $product_id The product ID.
 * @param PDO $db_connection  A PDO database connection object.
 * @return array An array of review objects (or an empty array if no reviews are found).
 */
function displayUserReviews(string $product_id, PDO $db_connection): array
{
    try {
        $stmt = $db_connection->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = $stmt->fetchAll(PDO::FETCH_OBJ); // Fetch as objects for easier access

        return $reviews;

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return []; // Return an empty array on error
    }
}


// Example Usage (Illustrative - replace with your actual data)
/*
$product_id = "123";
$user_name = "John Doe";
$review_text = "Great product, highly recommended!";
$rating = 4;

if (saveUserReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review saved successfully!";
} else {
    echo "Failed to save review.";
}

$reviews = displayUserReviews($product_id, $db_connection);

if ($reviews) {
    echo "<br><h2>Reviews:</h2>";
    foreach ($reviews as $review) {
        echo "<strong>" . $review->user_name . "</strong>: " . $review->review_text . " (Rating: " . $review->rating . ")
";
    }
} else {
    echo "<br>No reviews found for this product.";
}
*/

?>


<?php

/**
 * User Review Function
 * 
 * This function allows users to submit and display user reviews for a given item.
 * 
 * @param string $itemName The name of the item being reviewed.
 * @param string $itemDescription  A brief description of the item (optional).
 * @param array $reviews An array of existing reviews (optional).
 * @return array An array containing the updated reviews, including the new review if submitted.
 */
function handleUserReviews(string $itemName, string $itemDescription = '', array $reviews = []) {
    // Simulate database interaction for demonstration purposes.  Replace this with 
    // actual database queries in a real application.
    $newReview = "";
    if (isset($_POST['review_text'])) {
        $newReview = $_POST['review_text'];
    }


    $reviews = [...reviews, ['text' => $newReview, 'date' => date('Y-m-d H:i:s')]]; // Add new review to the array.  Includes date.

    // Sort reviews by date (most recent first) - optional but recommended
    usort($reviews, function($a, $b) {
        return $b['date'] <=> $a['date'];
    });


    return $reviews;
}



// Example Usage (Demonstration)

// Initialize an empty reviews array
$reviews = [];

// Simulate a form submission
if (isset($_POST['submit_review'])) {
    $reviews = handleUserReviews('My Awesome Product', 'A great product!', $reviews);
}

// Display the reviews
echo "<!DOCTYPE html>";
echo "<html>";
echo "<head>";
echo "<title>User Reviews</title>";
echo "</head>";
echo "<body>";

echo "<h1>User Reviews for " . $itemName = 'My Awesome Product' . "</h1>";

if (count($reviews) > 0) {
    echo "<p><strong>Reviews:</strong></p>";
    echo "<table border='1'>";
    echo "<tr><th>Date</th><th>Review</th></tr>";
    foreach ($reviews as $review) {
        echo "<tr>";
        echo "<td>" . $review['date'] . "</td>";
        echo "<td>" . $review['text'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "<p>No reviews yet!</p>";
}


echo "<form method='post'>";
echo "<h2>Submit a Review</h2>";
echo "<label for='review_text'>Your Review:</label><br>";
echo "<textarea id='review_text' name='review_text' rows='4' cols='50'></textarea><br><br>";
echo "<input type='submit' value='Submit Review'>";
echo "</form>";

echo "</body>";
echo "</html>";

?>


<?php

/**
 * Reviews class for managing user reviews.
 */
class Review {

    private $reviews = [];
    private $db_connection = null; // For database interaction (optional)

    /**
     * Constructor: Initializes the review system.
     *
     * @param mysqli $db_connection  (Optional) Database connection object.
     */
    public function __construct($db_connection = null) {
        $this->db_connection = $db_connection; // Assign the db connection
    }

    /**
     * Adds a new review.
     *
     * @param string $username       The username of the reviewer.
     * @param string $review_text    The text of the review.
     * @param int   $rating         The rating (e.g., 1-5).
     * @return int|false  The ID of the newly created review, or false on failure.
     */
    public function addReview(string $username, string $review_text, int $rating) {
        if (!$this->db_connection) {
            // If no database connection, store review in-memory
            $review_id = count($this->reviews) + 1;
            $this->reviews[$review_id] = [
                'username' => $username,
                'review_text' => $review_text,
                'rating' => $rating,
                'date' => date('Y-m-d H:i:s') // Timestamp for review creation
            ];
            return $review_id;
        } else {
            // Database interaction
            $sql = "INSERT INTO reviews (username, review_text, rating, created_at) VALUES (?, ?, ?, ?)";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("sss", $username, $review_text, $rating);
                if ($stmt->execute()) {
                    $review_id = $this->db_connection->insert_id; // Get the auto-incremented ID
                    $stmt->close();
                    return $review_id;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error adding review: " . $error_message);  // Log the error
                    return false;
                }
            } else {
                error_log("Error preparing database statement for adding review");
                return false;
            }
        }
    }



    /**
     * Retrieves all reviews.
     *
     * @return array  An array of review objects.
     */
    public function getAllReviews() {
        if($this->db_connection) {
            $results = $this->db_connection->query("SELECT * FROM reviews");
        } else {
            $results = $this->reviews;
        }
        $review_objects = [];
        if($results) {
            while ($row = $results->fetch_assoc()) {
                $review_objects[] = $this->convertRowToReviewObject($row);
            }
        }
        return $review_objects;
    }


    /**
     * Converts a database row to a Review object.
     *
     * @param array $row  A database row.
     * @return Review  A Review object.
     */
    private function convertRowToReviewObject(array $row) {
        return new Review([
            'id' => $row['id'],
            'username' => $row['username'],
            'review_text' => $row['review_text'],
            'rating' => $row['rating'],
            'date' => $row['created_at']
        ]);
    }



    /**
     * Retrieves a specific review by its ID.
     *
     * @param int $id The ID of the review.
     * @return Review|false A Review object, or false if not found.
     */
    public function getReviewById(int $id) {
        if($this->db_connection) {
            $result = $this->db_connection->query("SELECT * FROM reviews WHERE id = ?");
            if ($result && $result->fetch_assoc()) {
                return $this->convertRowToReviewObject($result->fetch_assoc());
            } else {
                return false;
            }
        } else {
            // In-memory retrieval
            if (isset($this->reviews[$id])) {
                return $this->reviews[$id];
            } else {
                return false;
            }
        }
    }


    /**
     * Updates an existing review.
     * @param int $id The ID of the review to update.
     * @param string $new_review_text The new text of the review.
     * @param int   $new_rating     The new rating.
     * @return bool True if the update was successful, false otherwise.
     */
    public function updateReview(int $id, string $new_review_text, int $new_rating) {
        if($this->db_connection) {
            $sql = "UPDATE reviews SET review_text = ?, rating = ?, created_at = NOW() WHERE id = ?";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("sss", $new_review_text, $new_rating, $id);
                if ($stmt->execute()) {
                    $stmt->close();
                    return true;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error updating review: " . $error_message);
                    return false;
                }
            } else {
                error_log("Error preparing database statement for updating review");
                return false;
            }
        } else {
            // In-memory update (if no database connection)
            if (isset($this->reviews[$id])) {
                $this->reviews[$id] = [
                    'username' => $this->reviews[$id]['username'], // Keep username
                    'review_text' => $new_review_text,
                    'rating' => $new_rating,
                    'date' => date('Y-m-d H:i:s')
                ];
                return true;
            } else {
                return false;
            }
        }
    }


    /**
     * Deletes a review.
     *
     * @param int $id The ID of the review to delete.
     * @return bool True if the deletion was successful, false otherwise.
     */
    public function deleteReview(int $id) {
        if($this->db_connection) {
            $sql = "DELETE FROM reviews WHERE id = ?";
            $stmt = $this->db_connection->prepare($sql);

            if ($stmt) {
                $stmt->bind_param("i", $id);
                if ($stmt->execute()) {
                    $stmt->close();
                    return true;
                } else {
                    $error_message = $this->db_connection->error;
                    $stmt->close();
                    error_log("Error deleting review: " . $error_message);
                    return false;
                }
            } else {
                error_log("Error preparing database statement for deleting review");
                return false;
            }
        } else {
            // In-memory deletion
            if (isset($this->reviews[$id])) {
                unset($this->reviews[$id]);
                return true;
            } else {
                return false;
            }
        }
    }
}


// Example Usage (Illustrative - Requires database setup)
// $db = new mysqli("localhost", "username", "password", "database_name");

// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }

// $review = new Review($db);

// // Add a review
// $review_id = $review->addReview("John Doe", "This is a great product!", 5);
// if ($review_id) {
//     echo "Review added with ID: " . $review_id . "
";
// }

// // Get all reviews
// $all_reviews = $review->getAllReviews();
// echo "All Reviews:
";
// foreach ($all_reviews as $review) {
//     echo "- Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review_text'] . "
";
// }

// // Get a specific review
// $specific_review = $review->getReviewById($review_id);
// if ($specific_review) {
//     echo "
Specific Review (ID " . $review_id . "): " . json_encode($specific_review) . "
";
// }

// //Update a review
// $update_success = $review->updateReview($review_id, "Updated Review Text", 4);
// if ($update_success) {
//     echo "
Review updated successfully
";
// }

// //Delete a review
// $delete_success = $review->deleteReview($review_id);
// if ($delete_success) {
//     echo "
Review deleted successfully
";
// }

?>


<?php

/**
 * Class Review
 *
 * This class provides functionality to manage user reviews.
 */
class Review {

    /**
     * @var array Array of reviews.
     */
    private $reviews = [];

    /**
     * Adds a new review to the reviews array.
     *
     * @param string $user  The name of the user who submitted the review.
     * @param string $comment The content of the review.
     * @param int $rating The rating (1-5).
     * @return bool True on success, false on failure (e.g., invalid rating).
     */
    public function addReview(string $user, string $comment, int $rating): bool {
        // Validate rating
        if ($rating < 1 || $rating > 5) {
            return false;
        }

        $this->reviews[] = [
            'user' => $user,
            'comment' => $comment,
            'rating' => $rating
        ];

        return true;
    }

    /**
     * Gets all reviews.
     *
     * @return array An array of all reviews.
     */
    public function getAllReviews(): array {
        return $this->reviews;
    }

    /**
     * Gets reviews for a specific item (e.g., product, service).
     *
     * @param mixed $item  The item to get reviews for.  This allows you to extend
     *                    this class to handle different types of items.
     * @return array An array of reviews for the item.
     */
    public function getReviewsForItem(mixed $item): array {
        //This is a basic implementation.  You would likely need to extend
        //this based on how you store the item data.

        return $this->getAllReviews(); //For now, return all reviews - you'll need a more sophisticated system.
    }

    /**
     * Calculates the average rating for a specific item.
     *
     * @param mixed $item The item to calculate the average rating for.
     * @return float|null The average rating, or null if no reviews exist.
     */
    public function getAverageRatingForItem(mixed $item) {
        $reviews = $this->getReviewsForItem($item);

        if (empty($reviews)) {
            return null;
        }

        $totalRating = 0;
        foreach ($reviews as $review) {
            $totalRating += $review['rating'];
        }

        return $totalRating / count($reviews);
    }


    /**
     * Formats a review for display.
     *
     * @param array $review
     * @return string The formatted review string.
     */
    public function formatReview(array $review): string {
        return "User: " . $review['user'] . "
" .
               "Comment: " . $review['comment'] . "
" .
               "Rating: " . $review['rating'];
    }
}

// Example Usage:
$reviewSystem = new Review();

// Add some reviews
$reviewSystem->addReview("Alice", "Great product!", 5);
$reviewSystem->addReview("Bob", "It was okay.", 3);
$reviewSystem->addReview("Charlie", "Could be better.", 2);

// Get all reviews
$allReviews = $reviewSystem->getAllReviews();
echo "All Reviews:
";
foreach ($allReviews as $review) {
    echo $review['user'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
}

// Get reviews for a specific item (e.g., a product)
$productReviews = $reviewSystem->getReviewsForItem('Product X');
echo "
Reviews for Product X:
";
foreach ($productReviews as $review) {
    echo $review['user'] . ": " . $review['comment'] . " (" . $review['rating'] . ")
";
}

// Get average rating for Product X
$averageRating = $reviewSystem->getAverageRatingForItem('Product X');
echo "
Average Rating for Product X: " . ($averageRating !== null ? $averageRating : "No reviews yet.") . "
";

// Format a specific review
$formattedReview = $reviewSystem->formatReview($allReviews[0]);
echo "
Formatted Review:
" . $formattedReview;
?>


<?php

/**
 * User Review Function - Simple Implementation
 *
 * This function allows you to create and display user reviews for a given product.
 * It handles basic data sanitization and validation.
 *
 * @param string $product_id The ID of the product the review is for.
 * @param string $name The reviewer's name.
 * @param string $comment The review text.
 *
 * @return array|string An array containing the review data if successful,
 *                     or an error message string if there's an issue.
 */
function createReview(string $product_id, string $name, string $comment) {
  // Validate input - Basic sanity checks
  if (empty($product_id)) {
    return "Error: Product ID cannot be empty.";
  }
  if (empty($name)) {
    return "Error: Reviewer name cannot be empty.";
  }
  if (empty($comment)) {
    return "Error: Review comment cannot be empty.";
  }

  // Sanitize input -  Escape HTML to prevent XSS
  $name = htmlspecialchars($name, ENT_QUOTES, 'UTF-8');
  $comment = htmlspecialchars($comment, ENT_QUOTES, 'UTF-8');


  //  You would normally store this in a database here.  For demonstration, 
  //  we'll just store it in an array.
  $review = [
    'product_id' => $product_id,
    'name' => $name,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp
  ];

  return $review;
}



/**
 * Function to display a single review
 * @param array $review The review data
 */
function displayReview(array $review) {
    echo "<p><strong>Product ID:</strong> " . $review['product_id'] . "</p>";
    echo "<p><strong>Reviewer:</strong> " . $review['name'] . "</p>";
    echo "<p><strong>Comment:</strong> " . $review['comment'] . "</p>";
    echo "<p><strong>Timestamp:</strong> " . date("Y-m-d H:i:s", strtotime($review['timestamp'])) . "</p>";
}



// --- Example Usage ---

// Create a review
$newReview = createReview("123", "John Doe", "This is a fantastic product!");

if (is_array($newReview)) {
  // Review was created successfully
  echo "<h2>New Review Created:</h2>";
  displayReview($newReview);

  // Example: Display all reviews for product 123 (Assuming you have a function to fetch them from a database)
  // You would replace this with your actual database query.
  //$reviews = fetchReviewsFromDatabase($product_id);
  //displayReviews($reviews);
} else {
  // There was an error creating the review
  echo "<p>Error: " . $newReview . "</p>";
}



/**
 * Placeholder function to simulate fetching reviews from a database.
 * Replace this with your actual database query.
 *
 * @param string $product_id
 * @return array
 */
function fetchReviewsFromDatabase(string $product_id) {
  //  In a real application, this would query your database.
  //  For demonstration, we'll just return some dummy reviews.
  if ($product_id == "123") {
    return [
      [
        'product_id' => '123',
        'name' => 'John Doe',
        'comment' => 'This is a fantastic product!',
        'timestamp' => time()
      ],
      [
        'product_id' => '123',
        'name' => 'Jane Smith',
        'comment' => 'Great value for the price.',
        'timestamp' => time() - 3600 // One hour ago
      ]
    ];
  } else {
    return []; // Return an empty array if the product ID is not found.
  }
}


/**
 * Placeholder function to display a list of reviews
 * @param array $reviews
 */
function displayReviews(array $reviews) {
    echo "<h3>All Reviews for Product ID " . $reviews[0]['product_id'] . ":</h3>";
    echo "<ul>";
    foreach ($reviews as $review) {
        displayReview($review);
    }
    echo "</ul>";
}

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to create and display user reviews for a product.
 *
 * @param string $productId The unique identifier of the product.
 * @param string $username The name of the user submitting the review.
 * @param string $reviewText The content of the review.
 * @param int $rating (Optional) Rating from 1-5. Defaults to 0 if not provided.
 *
 * @return array An array containing the review data (success/failure, review ID, review text, rating, and timestamp).
 *               Returns an error message if the review creation fails.
 */
function createReview(string $productId, string $username, string $reviewText, int $rating = 0) {
  // Validation (basic - expand as needed)
  if (empty($productId)) {
    return ['success' => false, 'message' => 'Product ID cannot be empty.'];
  }
  if (empty($username)) {
    return ['success' => false, 'message' => 'Username cannot be empty.'];
  }
  if (empty($reviewText)) {
    return ['success' => false, 'message' => 'Review text cannot be empty.'];
  }

  //  You would typically store reviews in a database here.
  //  This is a simplified example.

  $reviewId = uniqid(); // Generate a unique ID for the review
  $timestamp = time();

  // Simulate saving to a database (replace with your actual database interaction)
  $review = [
    'reviewId' => $reviewId,
    'productId' => $productId,
    'username' => $username,
    'reviewText' => $reviewText,
    'rating' => $rating,
    'timestamp' => $timestamp
  ];

  // Store the review in a data structure (for demonstration)
  //  In a real application, you would save this to a database.
  //  Example:
  //  saveReviewToDatabase($review);
  
  return ['success' => true, 'reviewId' => $reviewId, 'reviewText' => $reviewText, 'rating' => $rating, 'timestamp' => $timestamp];
}

/**
 *  Example usage:
 */

// Create a review
$review = createReview('product123', 'John Doe', 'This is a great product!');
if ($review['success']) {
  echo "Review created successfully! Review ID: " . $review['reviewId'] . "<br>";
  echo "Review Text: " . $review['reviewText'] . "<br>";
  echo "Rating: " . $review['rating'] . "<br>";
  echo "Timestamp: " . $review['timestamp'] . "<br>";
} else {
  echo "Error creating review: " . $review['message'] . "<br>";
}

// Create a review with a rating
$review2 = createReview('product456', 'Jane Smith', 'Excellent value for money!', 5);
if ($review2['success']) {
  echo "Review created successfully! Review ID: " . $review2['reviewId'] . "<br>";
} else {
  echo "Error creating review: " . $review2['message'] . "<br>";
}


// Example with error handling
$invalidReview = createReview('', 'Test User', 'Invalid review');
if(!$invalidReview['success']) {
    echo "Error creating review: " . $invalidReview['message'] . "<br>";
}
?>


<?php

/**
 * User Review Class
 *
 * This class allows you to store and manage user reviews for a product or item.
 */
class UserReview
{
    private $reviewId;
    private $userId;
    private $productId;
    private $rating;
    private $comment;
    private $date;

    /**
     * Constructor
     *
     * Initializes a new UserReview object.
     *
     * @param int $reviewId (optional) - Unique ID for the review.  Auto-generated if not provided.
     * @param int $userId  The ID of the user submitting the review.
     * @param int $productId The ID of the product being reviewed.
     * @param int $rating  The rating given by the user (e.g., 1-5).
     * @param string $comment The user's comment about the product.
     */
    public function __construct(int $userId, int $productId, int $rating, string $comment = "")
    {
        $this->reviewId = null; // Will be auto-generated
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->date = date("Y-m-d H:i:s"); // Timestamp of when the review was created
    }

    /**
     * Getters and Setters
     */

    public function getReviewId(): int
    {
        return $this->reviewId;
    }

    public function setReviewId(int $reviewId)
    {
        $this->reviewId = $reviewId;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    public function setUserId(int $userId)
    {
        $this->userId = $userId;
    }

    public function getProductId(): int
    {
        return $this->productId;
    }

    public function setProductId(int $productId)
    {
        $this->productId = $productId;
    }

    public function getRating(): int
    {
        return $this->rating;
    }

    public function setRating(int $rating)
    {
        $this->rating = $rating;
    }

    public function getComment(): string
    {
        return $this->comment;
    }

    public function setComment(string $comment)
    {
        $this->comment = $comment;
    }

    public function getDate(): string
    {
        return $this->date;
    }
}


/**
 * User Review Function -  Simple Example
 */
function displayUserReview(UserReview $review)
{
    echo "Review ID: " . $review->getReviewId() . "<br>";
    echo "User ID: " . $review->getUserId() . "<br>";
    echo "Product ID: " . $review->getProductId() . "<br>";
    echo "Rating: " . $review->getRating() . " stars<br>";
    echo "Comment: " . $review->getComment() . "<br>";
    echo "Date: " . $review->getDate() . "<br>";
}


// Example Usage:
$review1 = new UserReview(123, 456, 5, "Great product!  I highly recommend it.");
displayUserReview($review1);

$review2 = new UserReview(789, 456, 3, "It was okay, but could be better.");
displayUserReview($review2);

?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store and display user reviews for a product or item.
 *
 * @param string $productId  The unique identifier for the product.
 * @param string $username   The user's name (for display).
 * @param string $rating     The user's rating (e.g., 1-5 stars).
 * @param string $comment    The user's review text.
 * @param array  $reviews   (Optional) An array to store existing reviews (for persistence).
 *
 * @return array  An updated array of reviews.
 */
function storeUserReview(string $productId, string $username, string $rating, string $comment, array &$reviews = []) {
  // Validate inputs (basic example - you might want more robust validation)
  if (empty($productId)) {
    return $reviews; // Or throw an exception - depends on your error handling
  }
  if (empty($username)) {
    $username = 'Anonymous';
  }
  if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
    $rating = 3; // Default rating if invalid
  }
  if (empty($comment)) {
    $comment = 'No comment provided.';
  }

  // Create a review object (you can adapt this to your data structure)
  $review = [
    'productId' => $productId,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment,
    'timestamp' => time() // Add a timestamp for sorting and tracking
  ];

  // Add the review to the array
  $reviews[] = $review;

  // Sort reviews by timestamp (most recent first) - optional
  usort($reviews, function($a, $b) {
    return $b['timestamp'] - $a['timestamp'];
  });

  return $reviews;
}



/**
 * Display User Reviews
 *
 * This function displays a list of user reviews for a given product.
 *
 * @param array $reviews An array of reviews to display.
 */
function displayReviews(array $reviews) {
  echo "<h2>Reviews for Product ID: " .  implode(",", array_map('getKey', $reviews)) . "</h2>";
  echo "<ul>";

  foreach ($reviews as $review) {
    echo "<li>";
    echo "<strong>" . $review['username'] . ":</strong> " . $review['comment'] . " (" . $review['rating'] . "/5)";
    echo "</li>";
  }

  echo "</ul>";
}


// ------------------- Example Usage -------------------

// Initialize an empty array to store reviews
$productReviews = [];

// Store some reviews
$productReviews = storeUserReview('P123', 'John Doe', 4, 'Great product, works as expected!', $productReviews);
$productReviews = storeUserReview('P123', 'Jane Smith', 5, 'Excellent quality and fast shipping!', $productReviews);
$productReviews = storeUserReview('P456', 'Peter Jones', 2, 'It was okay, but not great.', $productReviews);
$productReviews = storeUserReview('P123', 'Alice Brown', 1, 'Not what I expected.', $productReviews);


// Display the reviews
displayReviews($productReviews);

?>


<?php

/**
 * Class UserReview
 *
 * Handles the creation, retrieval, and display of user reviews.
 */
class UserReview
{
    private $reviews = []; // Store reviews in an array
    private $db; // Database connection object (optional - for persistent storage)

    /**
     * Constructor
     *
     * Initializes the UserReview object.  You can optionally initialize a database connection here.
     *
     * @param PDO|null $db  An optional PDO database connection object.
     */
    public function __construct(PDO|null $db = null)
    {
        $this->db = $db;
    }

    /**
     * Create a new user review.
     *
     * @param int $productId The ID of the product being reviewed.
     * @param string $userName The name of the user submitting the review.
     * @param string $reviewText The text of the review.
     * @return int|false The ID of the newly created review, or false on failure.
     */
    public function createReview(int $productId, string $userName, string $reviewText)
    {
        $reviewId = $this->db ? $this->db->query("INSERT INTO reviews (product_id, user_name, review_text) VALUES (:product_id, :user_name, :review_text) 
                                      SELECT LAST_INSERT_ID()")->fetchColumn() : (int)count($this->reviews) + 1;

        $review = [
            'productId' => $productId,
            'userName' => $userName,
            'reviewText' => $reviewText,
            'reviewId' => $review, // Added reviewId for easy retrieval
            'dateCreated' => date('Y-m-d H:i:s')
        ];

        $this->reviews[] = $review;
        return $review['reviewId'];
    }

    /**
     * Get a review by its ID.
     *
     * @param int $reviewId The ID of the review to retrieve.
     * @return array|null The review object, or null if not found.
     */
    public function getReview(int $reviewId)
    {
        foreach ($this->reviews as $review) {
            if ($review['reviewId'] == $reviewId) {
                return $review;
            }
        }
        return null;
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId The ID of the product.
     * @return array An array of review objects.
     */
    public function getReviewsByProduct(int $productId)
    {
        $reviews = [];
        foreach ($this->reviews as $review) {
            if ($review['productId'] == $productId) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }


    /**
     * Update a review.  (Implement logic for updating reviews - e.g., allow moderation)
     *
     * @param int $reviewId The ID of the review to update.
     * @param string $newReviewText The new text of the review.
     * @return bool True on successful update, false on failure.
     */
    public function updateReview(int $reviewId, string $newReviewText)
    {
        $review = $this->getReview($reviewId);
        if ($review) {
            $review['reviewText'] = $newReviewText;
            return true;
        }
        return false;
    }


    /**
     * Delete a review. (Implement moderation logic)
     *
     * @param int $reviewId The ID of the review to delete.
     * @return bool True on successful deletion, false on failure.
     */
    public function deleteReview(int $reviewId)
    {
        $review = $this->getReview($reviewId);
        if ($review) {
            foreach ($this->reviews as $key => $r) {
                if ($r['reviewId'] == $reviewId) {
                    unset($this->reviews[$key]);
                    return true;
                }
            }
            return false;
        }
        return false;
    }


    /**
     * Display all reviews. (For demonstration purposes - typically you'd render this in a template)
     *
     * @return void
     */
    public function displayReviews()
    {
        echo "<h2>Reviews:</h2>";
        foreach ($this->reviews as $review) {
            echo "<h3>Review ID: " . $review['reviewId'] . "</h3>";
            echo "<p>Product ID: " . $review['productId'] . "</p>";
            echo "<p>User: " . $review['userName'] . "</p>";
            echo "<p>Review: " . $review['reviewText'] . "</p>";
            echo "<p>Date Created: " . $review['dateCreated'] . "</p>";
            echo "<hr>";
        }
    }
}

// Example Usage (Illustrative - you'd likely integrate this into a web application):
// Assume you have a PDO connection established.
// $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// $reviewSystem = new UserReview($db); // Pass the database connection

// // Create a review
// $reviewId = $reviewSystem->createReview(1, "John Doe", "Great product!");

// // Get a review
// $review = $reviewSystem->getReview($reviewId);
// if ($review) {
//     echo "<h2>Review Details:</h2>";
//     echo "<p>Review Text: " . $review['reviewText'] . "</p>";
// }

// // Display all reviews for product 1
// echo "<h2>Reviews for Product 1:</h2>";
// $reviewSystem->displayReviews();

// // Update a review
// $reviewSystem->updateReview($reviewId, "Excellent product - highly recommended!");

// // Delete a review
// $reviewSystem->deleteReview($reviewId);
?>


<?php

/**
 *  User Review Function
 *
 *  This function allows you to create, read, update, and delete user reviews.
 *
 *  @param string $productId The ID of the product the review is for.
 *  @param string $username The username of the reviewer.
 *  @param string $rating  The rating given (e.g., 1-5).  Validate this in your application.
 *  @param string $comment The review text.
 *  @param string $dbHost The database host.
 *  @param string $dbName The database name.
 *  @param string $dbUser The database username.
 *  @param string $dbPassword The database password.
 *
 *  @return bool True on success, false on failure.
 */
function create_user_review(
    $productId,
    $username,
    $rating,
    $comment,
    $dbHost,
    $dbName,
    $dbUser,
    $dbPassword
) {
    // Validate inputs -  CRUCIAL for security!  Expand this as needed.
    if (empty($productId) || empty($username) || empty($rating) || empty($comment)) {
        error_log("Missing required review fields."); // Log for debugging
        return false;
    }

    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        error_log("Invalid rating provided. Rating must be a number between 1 and 5.");
        return false;
    }

    // Database connection (using PDO - recommended)
    try {
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Throw exceptions on errors
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        return false;
    }

    // Prepare and execute the SQL statement
    $sql = "INSERT INTO reviews (product_id, username, rating, comment) VALUES (:product_id, :username, :rating, :comment)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    if ($stmt->execute()) {
        return true;
    } else {
        error_log("Error executing review insert query: " . print_r($stmt->errorInfo(), true)); // Detailed error logging
        return false;
    }
}

// Example Usage (Illustrative - replace with your data)
// $product_id = '123';
// $username = 'john.doe';
// $rating = 4;
// $comment = 'Great product!  Easy to use.';
//
// if (create_user_review($product_id, $username, $rating, $comment, 'localhost', 'my_database', 'my_user', 'my_password')) {
//     echo "Review created successfully!";
// } else {
//     echo "Failed to create review.";
// }


/*  Example Database Table Structure (MySQL)
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    rating INT NOT NULL,
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/
?>


<?php

/**
 * User Review Function
 *
 * This function allows you to store, retrieve, and display user reviews for a given item.
 *
 * @param string $item_id The unique identifier for the item being reviewed.
 * @param string $user_name The name of the user submitting the review.
 * @param string $review_text The text of the review.
 * @param int $rating  The rating provided by the user (e.g., 1-5).
 * @param string $db_connection  The established database connection object.  Crucial for database interaction.
 *
 * @return array  An array containing success/failure status and an optional list of reviews.
 *                 Returns an empty array on error.
 */
function store_user_review(string $item_id, string $user_name, string $review_text, int $rating, $db_connection) {
  // Validate input (important for security and data integrity)
  if (empty($item_id) || empty($user_name) || empty($review_text) || $rating < 1 || $rating > 5) {
    return ['success' => false, 'message' => 'Invalid input data.  Item ID, user name, and review text must be filled. Rating must be between 1 and 5.'];
  }

  // Sanitize input (essential for security - prevent SQL injection)
  $item_id = mysqli_real_escape_string($db_connection, $item_id);
  $user_name = mysqli_real_escape_string($db_connection, $user_name);
  $review_text = mysqli_real_escape_string($db_connection, $review_text);
  $rating = (int)$rating; // Cast rating to integer

  // SQL query (using prepared statements - the best practice)
  $sql = "INSERT INTO reviews (item_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = mysqli_prepare($db_connection, $sql);

  if ($stmt === false) {
    // Handle the error
    return ['success' => false, 'message' => 'Error preparing statement: ' . mysqli_error($db_connection)];
  }

  mysqli_stmt_bind_param($stmt, "ssis", $item_id, $user_name, $rating); // 'ssis' - string, string, integer, string

  if (mysqli_stmt_execute($stmt) === false) {
    // Handle the error
    mysqli_stmt_close($stmt);
    return ['success' => false, 'message' => 'Error executing statement: ' . mysqli_error($db_connection)];
  }

  mysqli_stmt_close($stmt);

  // Optionally, fetch the newly created review (for confirmation)
  $result = mysqli_query($db_connection, "SELECT * FROM reviews WHERE item_id = '$item_id' ORDER BY review_id DESC LIMIT 1");
  if ($result) {
    $review = mysqli_fetch_assoc($result);
    mysqli_free_result($result);
  } else {
     // Handle error in fetching.  This is unlikely but good to check.
     return ['success' => false, 'message' => 'Error fetching review after insertion: ' . mysqli_error($db_connection)];
  }

  return ['success' => true, 'review' => $review];
}


// --- Example Usage (requires a database connection, assume 'db_connection' is already established) ---
// (Important:  Replace this with your actual database connection details.)

// Assuming you have a database connection named $db_connection

// $review_data = store_user_review("product_123", "John Doe", "Great product!", 5, $db_connection);

// if ($review_data['success']) {
//   echo "Review submitted successfully! Review ID: " . $review_data['review']['review_id'];
// } else {
//   echo "Error submitting review: " . $review_data['message'];
// }


// --- Example Database Table Creation (MySQL) ---
/*
CREATE TABLE reviews (
  review_id INT AUTO_INCREMENT PRIMARY KEY,
  item_id VARCHAR(255) NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  review_text TEXT NOT NULL,
  rating INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
*/


?>

