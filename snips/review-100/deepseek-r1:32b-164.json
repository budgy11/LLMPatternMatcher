{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this step by step.\n\nFirst, the goal is to allow users to submit reviews for products or services and display those reviews on a webpage. So, I'll need both a form for submission and a way to display the reviews.\n\nI should start by setting up the database because that's where all the review data will be stored. I'll create a table called 'reviews' with columns like id, product_id, user_name, email, comment, rating, and submission_date. Using InnoDB engine and UTF-8mb4 collation makes sense for better character support.\n\nNext, I need to handle form submissions. When a user submits a review, the data should be inserted into the database. So, I'll write an insert statement that takes the product_id from a hidden input, and the other fields like name, email, comment, and rating. I should make sure to sanitize the inputs to prevent SQL injection, maybe using mysqli_real_escape_string or prepared statements.\n\nThen, displaying the reviews is important. I'll fetch all reviews for a specific product by querying the database where product_id matches. Ordering them by submission date in descending order will show the latest first. Once fetched, I can loop through each review and display the user's name, email, comment, rating as stars, and the submission date.\n\nI also want to calculate the average rating to show an overall score. Using AVG() function in SQL will help here. I'll format this average into a 5-star system, maybe with one decimal place for precision.\n\nFor the form itself, it should include fields for name, email, comment, and a dropdown or radio buttons for ratings from 1 to 5. Styling is important too, so adding some CSS classes will make it look clean and user-friendly.\n\nSecurity considerations are crucial. I'll ensure that all user inputs are properly escaped before inserting into the database. Also, handling errors gracefully when something goes wrong during submission or fetching data is a good idea.\n\nTesting each part separately would be wise. First, test if submitting a review correctly adds an entry to the database. Then, check if the display function pulls and shows the reviews correctly. Finally, make sure the average rating calculation works as intended.\n\nI might also think about future enhancements like pagination for many reviews or allowing users to edit their comments, but for now, focusing on the basic functionality is better.\n\nPutting it all together, I'll structure the code with a Review class that encapsulates database interactions. The class will have methods for submitting and displaying reviews. In the HTML, I'll include the form within the same page so that after submission, the user stays on the same product's review section.\n\nFinally, styling the output with CSS will make it visually appealing. Using star icons or emojis can make ratings more intuitive. Also, formatting dates in a user-friendly way is important for readability.\n\nOverall, breaking down the problem into database setup, form handling, data fetching, and display makes it manageable. I should write clean, modular code to ensure maintainability.\n</think>\n\nHere's an example of a PHP function that handles user reviews:\n\n```php\n<?php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Function to submit a review\n    public function submitReview($productId, $userName, $email, $comment, $rating) {\n        try {\n            // Sanitize input data\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n            $sanitizedUserName = $this->db->real_escape_string($userName);\n            $sanitizedEmail = $this->db->real_escape_string($email);\n            $sanitizedComment = $this->db->real_escape_string($comment);\n            $sanitizedRating = (int)$rating;\n\n            // Insert review into database\n            $sql = \"INSERT INTO reviews (product_id, user_name, email, comment, rating, submission_date) \n                    VALUES ('$sanitizedProductID', '$sanitizedUserName', '$sanitizedEmail', '$sanitizedComment', '$sanitizedRating', NOW())\";\n            \n            if ($this->db->query($sql)) {\n                return true;\n            } else {\n                throw new Exception(\"Error submitting review: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n\n    // Function to display reviews for a product\n    public function displayReviews($productId) {\n        try {\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n\n            // Get all reviews for the specified product\n            $sql = \"SELECT * FROM reviews WHERE product_id = '$sanitizedProductID' ORDER BY submission_date DESC\";\n            \n            $result = $this->db->query($sql);\n            \n            if ($result) {\n                $reviews = array();\n\n                while ($row = $result->fetch_assoc()) {\n                    $review = array(\n                        'id' => $row['id'],\n                        'user_name' => $row['user_name'],\n                        'email' => $row['email'],\n                        'comment' => $row['comment'],\n                        'rating' => $row['rating'],\n                        'submission_date' => $row['submission_date']\n                    );\n                    \n                    array_push($reviews, $review);\n                }\n\n                return $reviews;\n            } else {\n                throw new Exception(\"Error retrieving reviews: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n\n    // Function to display average rating\n    public function displayAverageRating($productId) {\n        try {\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n\n            // Calculate average rating\n            $sql = \"SELECT AVG(rating) as average_rating \n                    FROM reviews \n                    WHERE product_id = '$sanitizedProductID'\";\n            \n            $result = $this->db->query($sql);\n            \n            if ($result) {\n                $row = $result->fetch_assoc();\n                return round($row['average_rating'], 1); // Rounded to one decimal place\n            } else {\n                throw new Exception(\"Error retrieving average rating: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n}\n\n// Example usage:\n// Assuming $db is your database connection\n$review = new Review($db);\n\n// Submit a review\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if ($review->submitReview($_POST['product_id'], $_POST['name'], $_POST['email'], $_POST['comment'], $_POST['rating'])) {\n        echo \"Thank you for submitting your review!\";\n    }\n}\n\n// Display reviews and average rating\n$productId = 1; // Replace with actual product ID\n$averageRating = $review->displayAverageRating($productId);\necho \"Average Rating: $averageRating/5\";\n\n$reviews = $review->displayReviews($productId);\nforeach ($reviews as $rev) {\n    echo \"<div class='review'>\";\n    echo \"<h4>\" . htmlspecialchars($rev['user_name']) . \"</h4>\";\n    echo \"<p>Rating: \" . str_repeat(\"\u2605\", $rev['rating']) . \"</p>\";\n    echo \"<p>Email: \" . htmlspecialchars($rev['email']) . \"</p>\";\n    echo \"<p>Comment: \" . htmlspecialchars($rev['comment']) . \"</p>\";\n    echo \"<p>Submitted on: \" . date('F j, Y', strtotime($rev['submission_date'])) . \"</p>\";\n    echo \"</div>\";\n}\n?>\n```\n\nThis code provides:\n\n1. A `Review` class that handles review-related operations\n2. Methods to submit reviews, display reviews, and calculate average ratings\n3. Input sanitization to prevent SQL injection\n4. Error handling\n5. Clean separation of concerns\n\nTo use this function:\n\n1. Create a database table named 'reviews' with appropriate columns:\n   ```sql\n   CREATE TABLE reviews (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       product_id INT NOT NULL,\n       user_name VARCHAR(255) NOT NULL,\n       email VARCHAR(255) NOT NULL,\n       comment TEXT NOT NULL,\n       rating TINYINT NOT NULL,\n       submission_date DATETIME NOT NULL\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n   ```\n\n2. Add a review form to your product page:\n\n```html\n<form method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $productId; ?>\">\n    \n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n\n    <label for=\"comment\">Comment:</label>\n    <textarea id=\"comment\" name=\"comment\" required></textarea>\n\n    <label>Rating:</label>\n    <select name=\"rating\">\n        <option value=\"5\">\u2605 \u2605 \u2605 \u2605 \u2605</option>\n        <option value=\"4\">\u2605 \u2605 \u2605 \u2605</option>\n        <option value=\"3\">\u2605 \u2605 \u2605</option>\n        <option value=\"2\">\u2605 \u2605</option>\n        <option value=\"1\">\u2605</option>\n    </select>\n\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\n3. Add CSS styling to make the reviews look good:\n\n```css\n.review {\n    border: 1px solid #ddd;\n    padding: 15px;\n    margin-bottom: 20px;\n}\n\n(review star styling)\n```\n\nNote:\n- This is a basic implementation and should be modified according to your specific needs\n- You might want to add features like:\n  - User authentication\n  - Validation for numeric input fields\n  - Rating stars display using CSS or icons\n  - Pagination for long review lists\n  - Ability to edit or delete reviews\n\nRemember to always sanitize user inputs and use prepared statements or parameterized queries in production environments.", "code_blocks": ["```php\n<?php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Function to submit a review\n    public function submitReview($productId, $userName, $email, $comment, $rating) {\n        try {\n            // Sanitize input data\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n            $sanitizedUserName = $this->db->real_escape_string($userName);\n            $sanitizedEmail = $this->db->real_escape_string($email);\n            $sanitizedComment = $this->db->real_escape_string($comment);\n            $sanitizedRating = (int)$rating;\n\n            // Insert review into database\n            $sql = \"INSERT INTO reviews (product_id, user_name, email, comment, rating, submission_date) \n                    VALUES ('$sanitizedProductID', '$sanitizedUserName', '$sanitizedEmail', '$sanitizedComment', '$sanitizedRating', NOW())\";\n            \n            if ($this->db->query($sql)) {\n                return true;\n            } else {\n                throw new Exception(\"Error submitting review: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n\n    // Function to display reviews for a product\n    public function displayReviews($productId) {\n        try {\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n\n            // Get all reviews for the specified product\n            $sql = \"SELECT * FROM reviews WHERE product_id = '$sanitizedProductID' ORDER BY submission_date DESC\";\n            \n            $result = $this->db->query($sql);\n            \n            if ($result) {\n                $reviews = array();\n\n                while ($row = $result->fetch_assoc()) {\n                    $review = array(\n                        'id' => $row['id'],\n                        'user_name' => $row['user_name'],\n                        'email' => $row['email'],\n                        'comment' => $row['comment'],\n                        'rating' => $row['rating'],\n                        'submission_date' => $row['submission_date']\n                    );\n                    \n                    array_push($reviews, $review);\n                }\n\n                return $reviews;\n            } else {\n                throw new Exception(\"Error retrieving reviews: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n\n    // Function to display average rating\n    public function displayAverageRating($productId) {\n        try {\n            $sanitizedProductID = $this->db->real_escape_string($productId);\n\n            // Calculate average rating\n            $sql = \"SELECT AVG(rating) as average_rating \n                    FROM reviews \n                    WHERE product_id = '$sanitizedProductID'\";\n            \n            $result = $this->db->query($sql);\n            \n            if ($result) {\n                $row = $result->fetch_assoc();\n                return round($row['average_rating'], 1); // Rounded to one decimal place\n            } else {\n                throw new Exception(\"Error retrieving average rating: \" . $this->db->error);\n            }\n        } catch (Exception $e) {\n            die(\"An error occurred: \" . $e->getMessage());\n        }\n    }\n}\n\n// Example usage:\n// Assuming $db is your database connection\n$review = new Review($db);\n\n// Submit a review\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if ($review->submitReview($_POST['product_id'], $_POST['name'], $_POST['email'], $_POST['comment'], $_POST['rating'])) {\n        echo \"Thank you for submitting your review!\";\n    }\n}\n\n// Display reviews and average rating\n$productId = 1; // Replace with actual product ID\n$averageRating = $review->displayAverageRating($productId);\necho \"Average Rating: $averageRating/5\";\n\n$reviews = $review->displayReviews($productId);\nforeach ($reviews as $rev) {\n    echo \"<div class='review'>\";\n    echo \"<h4>\" . htmlspecialchars($rev['user_name']) . \"</h4>\";\n    echo \"<p>Rating: \" . str_repeat(\"\u2605\", $rev['rating']) . \"</p>\";\n    echo \"<p>Email: \" . htmlspecialchars($rev['email']) . \"</p>\";\n    echo \"<p>Comment: \" . htmlspecialchars($rev['comment']) . \"</p>\";\n    echo \"<p>Submitted on: \" . date('F j, Y', strtotime($rev['submission_date'])) . \"</p>\";\n    echo \"</div>\";\n}\n?>\n```", null, null]}
