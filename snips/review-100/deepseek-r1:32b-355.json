{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, it needs to add a new review to the database. So I'll need to connect to the database, probably using mysqli since it's commonly used and secure. The function should take parameters like user ID, product ID, rating, and comment.\n\nWait, but before inserting, I should validate the inputs to prevent SQL injection and ensure data integrity. For example, check that the user exists by verifying if the user_id is valid in the users table. Similarly, check if the product_id exists in the products table. Also, make sure the rating is between 1 and 5.\n\nIf any of these checks fail, I should return an error message instead of proceeding with the insert.\n\nNext, after validation, I'll prepare an SQL statement to insert the new review into the reviews table. Using prepared statements will help prevent SQL injection attacks.\n\nOnce inserted, it might be useful to update the product's average rating and total ratings. So, I'll write another query to calculate the new average based on the existing count plus the new rating. Then update the products table accordingly.\n\nI should handle any potential errors during these database operations and return appropriate messages if something goes wrong.\n\nFinally, I need to include error handling with try-catch blocks to manage exceptions gracefully and provide meaningful feedback.\n\nPutting it all together, the function will validate inputs, insert the review, update product stats, and return success or error messages as needed.\n</think>\n\nHere's an example of a user review function using PHP. This function handles adding reviews, displaying reviews, calculating average ratings, and updating reviews:\n\n```php\n<?php\nclass ReviewSystem {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Add a new review\n    public function addReview($user_id, $product_id, $rating, $comment) {\n        try {\n            // Validate input\n            if (!is_numeric($user_id) || !is_numeric($product_id) || \n                $rating < 1 || $rating > 5 || empty($comment)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if user and product exist\n            $this->checkUserExists($user_id);\n            $this->checkProductExists($product_id);\n\n            // Insert review into database\n            $stmt = $this->conn->prepare(\"\n                INSERT INTO reviews (user_id, product_id, rating, comment)\n                VALUES (?, ?, ?, ?)\n            \");\n            $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n            $stmt->execute();\n\n            // Update average rating for the product\n            $this->updateProductRating($product_id);\n\n            return \"Review added successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get all reviews for a product\n    public function getReviewsByProductId($product_id) {\n        try {\n            $this->checkProductExists($product_id);\n\n            $stmt = $this->conn->prepare(\"\n                SELECT r.*, u.username \n                FROM reviews r \n                JOIN users u ON r.user_id = u.id \n                WHERE product_id = ?\n                ORDER BY review_date DESC\n            \");\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_all(MYSQLI_ASSOC);\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update product average rating\n    private function updateProductRating($product_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                UPDATE products \n                SET total_ratings = (\n                    SELECT COUNT(*) FROM reviews WHERE product_id = ?\n                ),\n                avg_rating = (\n                    SELECT AVG(rating) FROM reviews WHERE product_id = ?\n                )\n                WHERE id = ?\n            \");\n            $stmt->bind_param(\"iii\", $product_id, $product_id, $product_id);\n            $stmt->execute();\n        } catch (Exception $e) {\n            throw new Exception(\"Error updating product rating: \" . $e->getMessage());\n        }\n    }\n\n    // Check if user exists\n    private function checkUserExists($user_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM users WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $user_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"User does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking user: \" . $e->getMessage());\n        }\n    }\n\n    // Check if product exists\n    private function checkProductExists($product_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM products WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"Product does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking product: \" . $e->getMessage());\n        }\n    }\n\n    // Update a review\n    public function updateReview($review_id, $new_rating, $new_comment) {\n        try {\n            if (!is_numeric($review_id) || $new_rating < 1 || $new_rating > 5 || empty($new_comment)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if review exists\n            $this->checkReviewExists($review_id);\n\n            $stmt = $this->conn->prepare(\"\n                UPDATE reviews \n                SET rating = ?, comment = ? \n                WHERE id = ?\n            \");\n            $stmt->bind_param(\"isi\", $new_rating, $new_comment, $review_id);\n            $stmt->execute();\n\n            // Update product average rating\n            $product_id = $this->getProductIdFromReview($review_id);\n            $this->updateProductRating($product_id);\n\n            return \"Review updated successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Check if review exists\n    private function checkReviewExists($review_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"Review does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking review: \" . $e->getMessage());\n        }\n    }\n\n    // Get product ID from review\n    private function getProductIdFromReview($review_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT product_id FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_assoc()['product_id'];\n        } catch (Exception $e) {\n            throw new Exception(\"Error getting product ID: \" . $e->getMessage());\n        }\n    }\n\n    // Delete a review\n    public function deleteReview($review_id) {\n        try {\n            if (!is_numeric($review_id)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if review exists\n            $this->checkReviewExists($review_id);\n\n            $stmt = $this->conn->prepare(\"\n                DELETE FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n\n            // Update product average rating\n            $product_id = $this->getProductIdFromReview($review_id);\n            $this->updateProductRating($product_id);\n\n            return \"Review deleted successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Display reviews with pagination\n    public function displayReviews($product_id, $page = 1, $per_page = 5) {\n        try {\n            $this->checkProductExists($product_id);\n\n            $offset = ($page - 1) * $per_page;\n\n            $stmt = $this->conn->prepare(\"\n                SELECT r.*, u.username \n                FROM reviews r \n                JOIN users u ON r.user_id = u.id \n                WHERE product_id = ?\n                ORDER BY review_date DESC\n                LIMIT ?, ?\n            \");\n            $stmt->bind_param(\"iii\", $product_id, $offset, $per_page);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_all(MYSQLI_ASSOC);\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n}\n?>\n```\n\nThis class provides the following functionalities:\n\n1. `addReview()`: Adds a new review for a product\n2. `getReviewsByProductId()`: Retrieves all reviews for a specific product\n3. `updateProductRating()`: Updates the average rating and total ratings for a product\n4. `checkUserExists()`: Verifies if a user exists in the database\n5. `checkProductExists()`: Verifies if a product exists in the database\n6. `updateReview()`: Updates an existing review\n7. `deleteReview()`: Deletes a review from the database\n8. `displayReviews()`: Displays reviews with pagination\n\nTo use this class:\n\n1. First, create a database connection:\n```php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n```\n\n2. Then create an instance of the ReviewSystem class:\n```php\n$reviewSystem = new ReviewSystem($conn);\n```\n\n3. Add a review:\n```php\n$result = $reviewSystem->addReview(1, 101, 5, \"Great product!\");\necho $result;\n```\n\n4. Get reviews for product ID 101:\n```php\n$reviews = $reviewSystem->getReviewsByProductId(101);\nforeach ($reviews as $review) {\n    echo \"Rating: \" . $review['rating'] . \"<br>\";\n    echo \"Comment: \" . $review['comment'] . \"<br>\";\n}\n```\n\n5. Delete a review:\n```php\n$result = $reviewSystem->deleteReview(201);\necho $result;\n```\n\nMake sure to replace the database connection details with your actual database information.\n\nFeatures of this implementation:\n\n- Input validation\n- Error handling\n- SQL injection prevention using prepared statements\n- Automatic updating of product ratings\n- Pagination support for displaying reviews\n- Secure code practices\n\nRemember to create the necessary tables in your database:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) NOT NULL UNIQUE\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    product_name VARCHAR(100) NOT NULL,\n    total_ratings INT DEFAULT 0,\n    avg_rating DECIMAL(3,2) DEFAULT 0.00\n);\n\nCREATE TABLE reviews (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT NOT NULL,\n    product_id INT NOT NULL,\n    rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5),\n    comment TEXT NOT NULL,\n    review_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```", "code_blocks": ["```php\n<?php\nclass ReviewSystem {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Add a new review\n    public function addReview($user_id, $product_id, $rating, $comment) {\n        try {\n            // Validate input\n            if (!is_numeric($user_id) || !is_numeric($product_id) || \n                $rating < 1 || $rating > 5 || empty($comment)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if user and product exist\n            $this->checkUserExists($user_id);\n            $this->checkProductExists($product_id);\n\n            // Insert review into database\n            $stmt = $this->conn->prepare(\"\n                INSERT INTO reviews (user_id, product_id, rating, comment)\n                VALUES (?, ?, ?, ?)\n            \");\n            $stmt->bind_param(\"iisi\", $user_id, $product_id, $rating, $comment);\n            $stmt->execute();\n\n            // Update average rating for the product\n            $this->updateProductRating($product_id);\n\n            return \"Review added successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get all reviews for a product\n    public function getReviewsByProductId($product_id) {\n        try {\n            $this->checkProductExists($product_id);\n\n            $stmt = $this->conn->prepare(\"\n                SELECT r.*, u.username \n                FROM reviews r \n                JOIN users u ON r.user_id = u.id \n                WHERE product_id = ?\n                ORDER BY review_date DESC\n            \");\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_all(MYSQLI_ASSOC);\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update product average rating\n    private function updateProductRating($product_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                UPDATE products \n                SET total_ratings = (\n                    SELECT COUNT(*) FROM reviews WHERE product_id = ?\n                ),\n                avg_rating = (\n                    SELECT AVG(rating) FROM reviews WHERE product_id = ?\n                )\n                WHERE id = ?\n            \");\n            $stmt->bind_param(\"iii\", $product_id, $product_id, $product_id);\n            $stmt->execute();\n        } catch (Exception $e) {\n            throw new Exception(\"Error updating product rating: \" . $e->getMessage());\n        }\n    }\n\n    // Check if user exists\n    private function checkUserExists($user_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM users WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $user_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"User does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking user: \" . $e->getMessage());\n        }\n    }\n\n    // Check if product exists\n    private function checkProductExists($product_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM products WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"Product does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking product: \" . $e->getMessage());\n        }\n    }\n\n    // Update a review\n    public function updateReview($review_id, $new_rating, $new_comment) {\n        try {\n            if (!is_numeric($review_id) || $new_rating < 1 || $new_rating > 5 || empty($new_comment)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if review exists\n            $this->checkReviewExists($review_id);\n\n            $stmt = $this->conn->prepare(\"\n                UPDATE reviews \n                SET rating = ?, comment = ? \n                WHERE id = ?\n            \");\n            $stmt->bind_param(\"isi\", $new_rating, $new_comment, $review_id);\n            $stmt->execute();\n\n            // Update product average rating\n            $product_id = $this->getProductIdFromReview($review_id);\n            $this->updateProductRating($product_id);\n\n            return \"Review updated successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Check if review exists\n    private function checkReviewExists($review_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT id FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($result->num_rows == 0) {\n                throw new Exception(\"Review does not exist\");\n            }\n        } catch (Exception $e) {\n            throw new Exception(\"Error checking review: \" . $e->getMessage());\n        }\n    }\n\n    // Get product ID from review\n    private function getProductIdFromReview($review_id) {\n        try {\n            $stmt = $this->conn->prepare(\"\n                SELECT product_id FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_assoc()['product_id'];\n        } catch (Exception $e) {\n            throw new Exception(\"Error getting product ID: \" . $e->getMessage());\n        }\n    }\n\n    // Delete a review\n    public function deleteReview($review_id) {\n        try {\n            if (!is_numeric($review_id)) {\n                throw new Exception(\"Invalid input data\");\n            }\n\n            // Check if review exists\n            $this->checkReviewExists($review_id);\n\n            $stmt = $this->conn->prepare(\"\n                DELETE FROM reviews WHERE id = ?\n            \");\n            $stmt->bind_param(\"i\", $review_id);\n            $stmt->execute();\n\n            // Update product average rating\n            $product_id = $this->getProductIdFromReview($review_id);\n            $this->updateProductRating($product_id);\n\n            return \"Review deleted successfully\";\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Display reviews with pagination\n    public function displayReviews($product_id, $page = 1, $per_page = 5) {\n        try {\n            $this->checkProductExists($product_id);\n\n            $offset = ($page - 1) * $per_page;\n\n            $stmt = $this->conn->prepare(\"\n                SELECT r.*, u.username \n                FROM reviews r \n                JOIN users u ON r.user_id = u.id \n                WHERE product_id = ?\n                ORDER BY review_date DESC\n                LIMIT ?, ?\n            \");\n            $stmt->bind_param(\"iii\", $product_id, $offset, $per_page);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            return $result->fetch_all(MYSQLI_ASSOC);\n        } catch (Exception $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n    }\n}\n?>\n```", "```php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n```", "```php\n$reviewSystem = new ReviewSystem($conn);\n```", "```php\n$result = $reviewSystem->addReview(1, 101, 5, \"Great product!\");\necho $result;\n```", "```php\n$reviews = $reviewSystem->getReviewsByProductId(101);\nforeach ($reviews as $review) {\n    echo \"Rating: \" . $review['rating'] . \"<br>\";\n    echo \"Comment: \" . $review['comment'] . \"<br>\";\n}\n```", "```php\n$result = $reviewSystem->deleteReview(201);\necho $result;\n```", null]}
