{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should outline what the function needs to do. It should allow users to submit reviews with their name and a rating from 1 to 5 stars. Then, it should display these reviews on a webpage, including each review, the author's name, the star rating, and maybe some statistics like average rating and total reviews.\n\nI'll start by setting up the database because I need somewhere to store the reviews. I'll create a table called 'reviews' with columns for id, name, review_text, rating, and timestamp. This way, each review is stored with necessary details.\n\nNext, I'll write functions for adding and displaying reviews. For adding, the function needs to take user input from a form\u2014name, review text, and rating. It should validate these inputs: ensure name isn't empty, review has content, and rating is between 1-5. If valid, it inserts into the database.\n\nFor displaying, the function will fetch all reviews from the database, order them by date so the newest are first. Then, I'll loop through each to display the details. Also, calculate average rating by summing all ratings and dividing by count.\n\nI should include a form where users can submit their reviews. The form needs fields for name and review, with a dropdown or radio buttons for rating selection. After submission, it redirects back so the page reloads and shows the new review.\n\nSecurity is important. I'll use prepared statements to prevent SQL injection. Also, sanitize inputs to avoid XSS attacks by using htmlspecialchars when displaying user input.\n\nI'll structure the HTML with sections for the form and reviews display. Use CSS to style stars dynamically based on the rating. For example, if a review has 4 stars, four star icons are shown as full, others empty or maybe half-filled depending on implementation.\n\nTesting is crucial. I should check edge cases like invalid inputs, empty fields, non-numeric ratings. Also, ensure that the average calculation handles division by zero when there are no reviews yet.\n\nFinally, put it all together in an index.php file with proper HTML structure and include necessary styles. Make sure to handle any potential errors gracefully, like database connection issues, but for simplicity, I'll just display a message if something goes wrong.\n</think>\n\nHere's an example of a user review system using PHP:\n\n```php\n<?php\n// Connect to the database\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($name, $reviewText, $rating, $conn) {\n    // Sanitize inputs\n    $name = htmlspecialchars(strip_tags($name));\n    $reviewText = htmlspecialchars(strip_tags($reviewText));\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, review_text, rating) VALUES (:name, :review, :rating)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':review', $reviewText);\n        $stmt->bindParam(':rating', $rating);\n        \n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction displayReviews($conn) {\n    try {\n        $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY timestamp DESC\");\n        $stmt->execute();\n        \n        $averageRating = 0;\n        $reviewCount = 0;\n        $totalRating = 0;\n        \n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            // Display each review\n            echo \"<div class='review'>\";\n            echo \"<h3>\" . $row['name'] . \"</h3>\";\n            echo \"<p>\" . $row['review_text'] . \"</p>\";\n            echo \"<div class='stars'>\";\n            \n            for ($i = 1; $i <= $row['rating']; $i++) {\n                echo \"<span class='star'>\u2605</span>\";\n            }\n            \n            if ($row['rating'] < 5) {\n                for ($i = $row['rating'] + 1; $i <= 5; $i++) {\n                    echo \"<span class='star'>\u2606</span>\";\n                }\n            }\n            \n            echo \"</div>\";\n            echo \"</div>\";\n            \n            // Calculate average rating\n            $totalRating += $row['rating'];\n            $reviewCount++;\n        }\n        \n        if ($reviewCount > 0) {\n            $averageRating = $totalRating / $reviewCount;\n            echo \"<div class='stats'>\";\n            echo \"Average Rating: \" . number_format($averageRating, 1) . \"/5\";\n            echo \" | Total Reviews: \" . $reviewCount;\n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>User Reviews</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .review {\n            border: 1px solid #ddd;\n            padding: 15px;\n            margin-bottom: 15px;\n            background-color: #f9f9f9;\n        }\n        \n        .stars {\n            display: inline-block;\n            color: gold;\n            font-size: 24px;\n            margin-top: 5px;\n        }\n        \n        .star {\n            display: inline-block;\n            width: 30px;\n            text-align: center;\n        }\n        \n        #reviewForm {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        }\n        \n        .stats {\n            margin-top: 20px;\n            font-weight: bold;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $name = $_POST['name'];\n    $reviewText = $_POST['review'];\n    $rating = $_POST['rating'];\n    \n    if (empty($name) || empty($reviewText)) {\n        echo \"<p style='color: red;'>Please fill in all required fields.</p>\";\n    } elseif (!ctype_digit($rating) || $rating < 1 || $rating > 5) {\n        echo \"<p style='color: red;'>Please select a valid rating (1-5 stars).</p>\";\n    } else {\n        if (addReview($name, $reviewText, $rating, $conn)) {\n            header(\"Location: index.php\");\n            exit();\n        } else {\n            echo \"<p style='color: red;'>Error adding review. Please try again.</p>\";\n        }\n    }\n}\n?>\n\n<form id=\"reviewForm\" method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <h2>Submit Your Review</h2>\n    <div>\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n        \n        <label for=\"review\">Review:</label><br>\n        <textarea id=\"review\" name=\"review\" rows=\"5\" cols=\"50\" required></textarea><br><br>\n        \n        <label for=\"rating\">Rating (1-5 stars):</label><br>\n        <select id=\"rating\" name=\"rating\">\n            <?php for ($i = 1; $i <= 5; $i++) { ?>\n                <option value=\"<?php echo $i; ?>\"><?php echo $i; ?> Star<?php echo $i == 1 ? '' : 's'; ?></option>\n            <?php } ?>\n        </select><br><br>\n        \n        <input type=\"submit\" value=\"Submit Review\">\n    </div>\n</form>\n\n<h2>Customer Reviews</h2>\n<?php displayReviews($conn); ?>\n\n</body>\n</html>\n```\n\nThis code creates a simple user review system with the following features:\n\n1. Users can submit their reviews along with their name and rating (1-5 stars)\n2. All submitted reviews are displayed in chronological order\n3. Each review shows:\n   - Author's name\n   - Review text\n   - Star rating visualization\n4. Statistics are shown at the bottom including:\n   - Average rating\n   - Total number of reviews\n\nTo use this code:\n\n1. Create a database named 'reviews_db'\n2. Create a table named 'reviews' with the following columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - name (VARCHAR(255))\n   - review_text (TEXT)\n   - rating (TINYINT)\n   - timestamp (DATETIME)\n\n3. Modify the database connection details in the code to match your environment\n\nThe system includes basic security measures such as:\n\n- Input sanitization\n- SQL injection prevention using prepared statements\n- XSS protection using htmlspecialchars()\n- Form validation\n\nTo improve this further, you could add:\n\n1. User authentication\n2. Review editing and deletion functionality\n3. More detailed error handling\n4. CAPTCHA verification to prevent spam\n5. Sorting options for reviews (e.g., highest rated first)\n6. Search functionality\n7. Pagination for large numbers of reviews\n\nRemember to secure your database credentials and ensure that this code is used in a production environment with proper security measures in place.", "code_blocks": ["```php\n<?php\n// Connect to the database\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($name, $reviewText, $rating, $conn) {\n    // Sanitize inputs\n    $name = htmlspecialchars(strip_tags($name));\n    $reviewText = htmlspecialchars(strip_tags($reviewText));\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, review_text, rating) VALUES (:name, :review, :rating)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':review', $reviewText);\n        $stmt->bindParam(':rating', $rating);\n        \n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction displayReviews($conn) {\n    try {\n        $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY timestamp DESC\");\n        $stmt->execute();\n        \n        $averageRating = 0;\n        $reviewCount = 0;\n        $totalRating = 0;\n        \n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            // Display each review\n            echo \"<div class='review'>\";\n            echo \"<h3>\" . $row['name'] . \"</h3>\";\n            echo \"<p>\" . $row['review_text'] . \"</p>\";\n            echo \"<div class='stars'>\";\n            \n            for ($i = 1; $i <= $row['rating']; $i++) {\n                echo \"<span class='star'>\u2605</span>\";\n            }\n            \n            if ($row['rating'] < 5) {\n                for ($i = $row['rating'] + 1; $i <= 5; $i++) {\n                    echo \"<span class='star'>\u2606</span>\";\n                }\n            }\n            \n            echo \"</div>\";\n            echo \"</div>\";\n            \n            // Calculate average rating\n            $totalRating += $row['rating'];\n            $reviewCount++;\n        }\n        \n        if ($reviewCount > 0) {\n            $averageRating = $totalRating / $reviewCount;\n            echo \"<div class='stats'>\";\n            echo \"Average Rating: \" . number_format($averageRating, 1) . \"/5\";\n            echo \" | Total Reviews: \" . $reviewCount;\n            echo \"</div>\";\n        }\n        \n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>User Reviews</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .review {\n            border: 1px solid #ddd;\n            padding: 15px;\n            margin-bottom: 15px;\n            background-color: #f9f9f9;\n        }\n        \n        .stars {\n            display: inline-block;\n            color: gold;\n            font-size: 24px;\n            margin-top: 5px;\n        }\n        \n        .star {\n            display: inline-block;\n            width: 30px;\n            text-align: center;\n        }\n        \n        #reviewForm {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n        }\n        \n        .stats {\n            margin-top: 20px;\n            font-weight: bold;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $name = $_POST['name'];\n    $reviewText = $_POST['review'];\n    $rating = $_POST['rating'];\n    \n    if (empty($name) || empty($reviewText)) {\n        echo \"<p style='color: red;'>Please fill in all required fields.</p>\";\n    } elseif (!ctype_digit($rating) || $rating < 1 || $rating > 5) {\n        echo \"<p style='color: red;'>Please select a valid rating (1-5 stars).</p>\";\n    } else {\n        if (addReview($name, $reviewText, $rating, $conn)) {\n            header(\"Location: index.php\");\n            exit();\n        } else {\n            echo \"<p style='color: red;'>Error adding review. Please try again.</p>\";\n        }\n    }\n}\n?>\n\n<form id=\"reviewForm\" method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <h2>Submit Your Review</h2>\n    <div>\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n        \n        <label for=\"review\">Review:</label><br>\n        <textarea id=\"review\" name=\"review\" rows=\"5\" cols=\"50\" required></textarea><br><br>\n        \n        <label for=\"rating\">Rating (1-5 stars):</label><br>\n        <select id=\"rating\" name=\"rating\">\n            <?php for ($i = 1; $i <= 5; $i++) { ?>\n                <option value=\"<?php echo $i; ?>\"><?php echo $i; ?> Star<?php echo $i == 1 ? '' : 's'; ?></option>\n            <?php } ?>\n        </select><br><br>\n        \n        <input type=\"submit\" value=\"Submit Review\">\n    </div>\n</form>\n\n<h2>Customer Reviews</h2>\n<?php displayReviews($conn); ?>\n\n</body>\n</html>\n```"]}
