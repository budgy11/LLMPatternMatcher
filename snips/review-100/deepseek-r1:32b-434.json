{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user wants to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I need to outline what features such a function should have. Typically, a review system allows users to leave reviews and ratings, which are then displayed on a webpage. So, the main tasks would be handling form submissions for submitting reviews and displaying those reviews once they're stored.\n\nI'll start by setting up a database table to store the reviews. The table should include fields like id, product_id (assuming it's for a product), user_name, review_text, rating, and timestamp. Using InnoDB engine with UTF-8mb4 collation is a good practice for better character support.\n\nNext, I'll need a form where users can input their reviews. The form should collect the user's name, their review text, and a rating from 1 to 5 stars. I'll use PHP to handle the form submission, checking if it's a POST request. Then, I'll validate the inputs to ensure none are empty and that the rating is between 1 and 5.\n\nAfter validation, I'll insert the new review into the database using prepared statements to prevent SQL injection. This helps keep the application secure.\n\nThen, I need to display the reviews on the page. I'll fetch all reviews from the database, ordered by the most recent first. For each review, I'll show the user's name, their rating as stars, the review text, and the timestamp formatted nicely.\n\nI should also calculate the average rating to display overall satisfaction. This involves averaging the ratings and converting it into a percentage for display purposes.\n\nTo make the output clean and organized, I'll structure the HTML with appropriate classes, maybe using Bootstrap for styling the stars and layout. The reviews will be listed in a div, each within its own review-item section.\n\nI also need to handle any potential errors, like database connection issues or query failures, by adding error handling with try-catch blocks around the database operations.\n\nPutting it all together, I'll separate the PHP logic from the HTML structure for better readability. The script will first handle form submissions and then output the reviews and average rating.\n\nFinally, I'll include some notes on how to customize the code, like changing the product_id or styling elements, so users can adapt the function to their specific needs.\n</think>\n\nHere's an example of a user review system in PHP that allows users to submit and display reviews:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Handle review submission\n    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n        $productId = 1; // Example product ID\n        $userName = $_POST['user_name'];\n        $reviewText = $_POST['review_text'];\n        $rating = $_POST['rating'];\n\n        // Validate input\n        if (empty($userName) || empty($reviewText) || !isset($rating)) {\n            die('Please fill in all fields');\n        }\n\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, review_text, rating, timestamp) \n                              VALUES (:productId, :userName, :reviewText, :rating, NOW())\");\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':userName', $userName);\n        $stmt->bindParam(':reviewText', $reviewText);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->execute();\n\n        // Redirect to prevent form resubmission\n        header(\"Location: \" . $_SERVER['PHP_SELF']);\n        exit();\n    }\n\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n// Get reviews from database\n$stmt = $conn->prepare(\"SELECT * FROM reviews WHERE product_id = 1 ORDER BY timestamp DESC\");\n$stmt->execute();\n$reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Reviews</title>\n    <style>\n        .rating {\n            display: inline-block;\n            width: 100px;\n        }\n        .star {\n            color: #ffd700;\n        }\n    </style>\n</head>\n<body>\n\n<h2>Submit a Review</h2>\n<form method=\"post\" action=\"\">\n    <div>\n        <label for=\"user_name\">Your Name:</label><br>\n        <input type=\"text\" id=\"user_name\" name=\"user_name\" required>\n    </div>\n    <div>\n        <label for=\"review_text\">Review:</label><br>\n        <textarea id=\"review_text\" name=\"review_text\" rows=\"4\" cols=\"50\" required></textarea>\n    </div>\n    <div>\n        <label>Rating:</label><br>\n        <?php for ($i = 1; $i <= 5; $i++) { ?>\n            <input type=\"radio\" name=\"rating\" value=\"<?php echo $i; ?>\" id=\"star<?php echo $i; ?>\">\n            <label class=\"star\" for=\"star<?php echo $i; ?>\">\u2605</label>\n        <?php } ?>\n    </div>\n    <button type=\"submit\">Submit Review</button>\n</form>\n\n<h2>Customer Reviews</h2>\n<div id=\"reviews\">\n    <?php foreach ($reviews as $review) { ?>\n        <div class=\"review-item\">\n            <h3><?php echo htmlspecialchars($review['user_name']); ?></h3>\n            <div class=\"rating\">\n                <?php \n                for ($i = 1; $i <= $review['rating']; $i++) {\n                    echo '<span class=\"star\">\u2605</span>';\n                }\n                for ($i = $review['rating'] + 1; $i <= 5; $i++) {\n                    echo '<span>\u2606</span>';\n                }\n                ?>\n            </div>\n            <p><?php echo htmlspecialchars($review['review_text']); ?></p>\n            <small><?php echo date('F j, Y g:i a', strtotime($review['timestamp'])); ?></small>\n        </div>\n    <?php } ?>\n\n    <!-- Display average rating -->\n    <div class=\"average-rating\">\n        <?php \n        $avgRating = $conn->query(\"SELECT AVG(rating) as avg FROM reviews WHERE product_id = 1\");\n        $row = $avgRating->fetch(PDO::FETCH_ASSOC);\n        $average = round($row['avg'], 1);\n        $percentage = ($average / 5) * 100;\n        ?>\n        <h3>Average Rating: <?php echo $average; ?>/5 (<?php echo $percentage; ?>%)</h3>\n    </div>\n</div>\n\n</body>\n</html>\n```\n\nThis code includes:\n\n1. A database connection using PDO\n2. A form for submitting reviews with:\n   - User name input\n   - Review text area\n   - Star rating system (5 stars)\n3. Display of existing reviews\n4. Average rating calculation and display\n\nFeatures:\n- Reviews are stored in a MySQL database\n- Reviews include user name, review text, rating, and timestamp\n- Reviews are displayed with the most recent first\n- Each review shows stars for rating visualization\n- Average rating is calculated and displayed as both numerical value and percentage\n\nTo use this code:\n\n1. Create a database named `reviews_db`\n2. Create a table named `reviews` with these columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - product_id (INT)\n   - user_name (VARCHAR(255))\n   - review_text (TEXT)\n   - rating (INT)\n   - timestamp (DATETIME)\n\n3. Update the database connection details in the code\n\nYou can customize this further by:\n- Adding validation\n- Implementing a moderation system\n- Allowing users to edit or delete their reviews\n- Adding more fields like user photos or review titles\n- Changing the styling and layout\n- Connecting it to a product catalog system\n- Adding pagination for long lists of reviews\n\nRemember to:\n- Sanitize all inputs\n- Handle errors appropriately\n- Use prepared statements to prevent SQL injection\n- Implement CSRF protection in production code", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    // Handle review submission\n    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n        $productId = 1; // Example product ID\n        $userName = $_POST['user_name'];\n        $reviewText = $_POST['review_text'];\n        $rating = $_POST['rating'];\n\n        // Validate input\n        if (empty($userName) || empty($reviewText) || !isset($rating)) {\n            die('Please fill in all fields');\n        }\n\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, review_text, rating, timestamp) \n                              VALUES (:productId, :userName, :reviewText, :rating, NOW())\");\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':userName', $userName);\n        $stmt->bindParam(':reviewText', $reviewText);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->execute();\n\n        // Redirect to prevent form resubmission\n        header(\"Location: \" . $_SERVER['PHP_SELF']);\n        exit();\n    }\n\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n// Get reviews from database\n$stmt = $conn->prepare(\"SELECT * FROM reviews WHERE product_id = 1 ORDER BY timestamp DESC\");\n$stmt->execute();\n$reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Reviews</title>\n    <style>\n        .rating {\n            display: inline-block;\n            width: 100px;\n        }\n        .star {\n            color: #ffd700;\n        }\n    </style>\n</head>\n<body>\n\n<h2>Submit a Review</h2>\n<form method=\"post\" action=\"\">\n    <div>\n        <label for=\"user_name\">Your Name:</label><br>\n        <input type=\"text\" id=\"user_name\" name=\"user_name\" required>\n    </div>\n    <div>\n        <label for=\"review_text\">Review:</label><br>\n        <textarea id=\"review_text\" name=\"review_text\" rows=\"4\" cols=\"50\" required></textarea>\n    </div>\n    <div>\n        <label>Rating:</label><br>\n        <?php for ($i = 1; $i <= 5; $i++) { ?>\n            <input type=\"radio\" name=\"rating\" value=\"<?php echo $i; ?>\" id=\"star<?php echo $i; ?>\">\n            <label class=\"star\" for=\"star<?php echo $i; ?>\">\u2605</label>\n        <?php } ?>\n    </div>\n    <button type=\"submit\">Submit Review</button>\n</form>\n\n<h2>Customer Reviews</h2>\n<div id=\"reviews\">\n    <?php foreach ($reviews as $review) { ?>\n        <div class=\"review-item\">\n            <h3><?php echo htmlspecialchars($review['user_name']); ?></h3>\n            <div class=\"rating\">\n                <?php \n                for ($i = 1; $i <= $review['rating']; $i++) {\n                    echo '<span class=\"star\">\u2605</span>';\n                }\n                for ($i = $review['rating'] + 1; $i <= 5; $i++) {\n                    echo '<span>\u2606</span>';\n                }\n                ?>\n            </div>\n            <p><?php echo htmlspecialchars($review['review_text']); ?></p>\n            <small><?php echo date('F j, Y g:i a', strtotime($review['timestamp'])); ?></small>\n        </div>\n    <?php } ?>\n\n    <!-- Display average rating -->\n    <div class=\"average-rating\">\n        <?php \n        $avgRating = $conn->query(\"SELECT AVG(rating) as avg FROM reviews WHERE product_id = 1\");\n        $row = $avgRating->fetch(PDO::FETCH_ASSOC);\n        $average = round($row['avg'], 1);\n        $percentage = ($average / 5) * 100;\n        ?>\n        <h3>Average Rating: <?php echo $average; ?>/5 (<?php echo $percentage; ?>%)</h3>\n    </div>\n</div>\n\n</body>\n</html>\n```"]}
