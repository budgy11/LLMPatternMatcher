{"prompt": "Create a reset password function using ASP.NET", "llm_output": "Certainly! Below is an example of how you might implement a password reset functionality in an ASP.NET application. This example assumes you're using ASP.NET MVC with Entity Framework, but the core concepts can be adapted to other ASP.NET frameworks.\n\n### 1. **Create the Model for Reset Password**\n\n```csharp\npublic class ResetPasswordModel\n{\n    public string Token { get; set; }\n    public string Email { get; set; }\n    public string NewPassword { get; set; }\n    public string ConfirmPassword { get; set; }\n}\n```\n\n### 2. **Create the Controller Action for Reset Password**\n\n```csharp\nusing System;\nusing System.Linq;\nusing System.Web.Mvc;\nusing YourApp.Models; // Your models namespace\nusing YourApp.Data; // Your data context namespace\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AccountController : Controller\n{\n    private readonly ApplicationDbContext _context = new ApplicationDbContext();\n\n    // GET: ResetPassword\n    public ActionResult ResetPassword(string token, string email)\n    {\n        var model = new ResetPasswordModel { Token = token, Email = email };\n        return View(model);\n    }\n\n    // POST: ResetPassword\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public ActionResult ResetPassword(ResetPasswordModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = _context.Users.SingleOrDefault(u => u.Email == model.Email);\n\n            if (user == null)\n            {\n                ModelState.AddModelError(\"\", \"Invalid email address.\");\n                return View(model);\n            }\n\n            // Verify the token\n            if (user.PasswordResetToken != model.Token || user.PasswordResetTokenExpiry < DateTime.UtcNow)\n            {\n                ModelState.AddModelError(\"\", \"Invalid or expired token.\");\n                return View(model);\n            }\n\n            // Hash the new password\n            user.PasswordHash = HashPassword(model.NewPassword);\n            // Clear the token\n            user.PasswordResetToken = null;\n            user.PasswordResetTokenExpiry = null;\n\n            _context.SaveChanges();\n\n            // Redirect to login or success page\n            return RedirectToAction(\"Login\", \"Account\");\n        }\n\n        return View(model);\n    }\n\n    // Helper method to hash passwords (using SHA256 here for simplicity)\n    private string HashPassword(string password)\n    {\n        using (var sha256 = SHA256.Create())\n        {\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha256.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n    }\n\n    // You will also need a method to generate and email reset tokens\n}\n```\n\n### 3. **Generate and Send Reset Token**\n\nYou should have an endpoint where the user can request a password reset, which generates a secure token, stores it with an expiry, and emails the user a reset link.\n\n```csharp\npublic ActionResult ForgotPassword(string email)\n{\n    var user = _context.Users.SingleOrDefault(u => u.Email == email);\n    if (user != null)\n    {\n        // Generate token\n        var token = Guid.NewGuid().ToString();\n\n        user.PasswordResetToken = token;\n        user.PasswordResetTokenExpiry = DateTime.UtcNow.AddHours(1); // 1 hour expiry\n\n        _context.SaveChanges();\n\n        var resetLink = Url.Action(\"ResetPassword\", \"Account\", new { token = token, email = user.Email }, protocol: Request.Url.Scheme);\n\n        // Send email with reset link\n        // You need to implement email sending\n        EmailService.Send(email, \"Password Reset\", $\"Click here to reset your password: {resetLink}\");\n    }\n\n    // Show confirmation view\n    return View(\"ForgotPasswordConfirmation\");\n}\n```\n\n### 4. **Create the Reset Password View**\n\n```html\n@model ResetPasswordModel\n\n@using (Html.BeginForm()) \n{\n    @Html.AntiForgeryToken()\n    @Html.HiddenFor(m => m.Token)\n    @Html.HiddenFor(m => m.Email)\n\n    <div>\n        <label>New Password</label>\n        @Html.PasswordFor(m => m.NewPassword)\n    </div>\n    <div>\n        <label>Confirm Password</label>\n        @Html.PasswordFor(m => m.ConfirmPassword)\n    </div>\n    <button type=\"submit\">Reset Password</button>\n}\n```\n\n### 5. **Additional Notes**\n- Always store hashed passwords securely.\n- Use a strong, random token (preferably cryptographically secure).\n- Ensure tokens expire.\n- Use secure email transmission.\n- You may want to add additional validation, such as password complexity rules.\n\n---\n\nWould you like a full working example including the email service, or do you want the implementation adapted to WebForms, Web API, or ASP.NET Core?", "code_blocks": ["```csharp\npublic class ResetPasswordModel\n{\n    public string Token { get; set; }\n    public string Email { get; set; }\n    public string NewPassword { get; set; }\n    public string ConfirmPassword { get; set; }\n}\n```", "```csharp\nusing System;\nusing System.Linq;\nusing System.Web.Mvc;\nusing YourApp.Models; // Your models namespace\nusing YourApp.Data; // Your data context namespace\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AccountController : Controller\n{\n    private readonly ApplicationDbContext _context = new ApplicationDbContext();\n\n    // GET: ResetPassword\n    public ActionResult ResetPassword(string token, string email)\n    {\n        var model = new ResetPasswordModel { Token = token, Email = email };\n        return View(model);\n    }\n\n    // POST: ResetPassword\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public ActionResult ResetPassword(ResetPasswordModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = _context.Users.SingleOrDefault(u => u.Email == model.Email);\n\n            if (user == null)\n            {\n                ModelState.AddModelError(\"\", \"Invalid email address.\");\n                return View(model);\n            }\n\n            // Verify the token\n            if (user.PasswordResetToken != model.Token || user.PasswordResetTokenExpiry < DateTime.UtcNow)\n            {\n                ModelState.AddModelError(\"\", \"Invalid or expired token.\");\n                return View(model);\n            }\n\n            // Hash the new password\n            user.PasswordHash = HashPassword(model.NewPassword);\n            // Clear the token\n            user.PasswordResetToken = null;\n            user.PasswordResetTokenExpiry = null;\n\n            _context.SaveChanges();\n\n            // Redirect to login or success page\n            return RedirectToAction(\"Login\", \"Account\");\n        }\n\n        return View(model);\n    }\n\n    // Helper method to hash passwords (using SHA256 here for simplicity)\n    private string HashPassword(string password)\n    {\n        using (var sha256 = SHA256.Create())\n        {\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha256.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n    }\n\n    // You will also need a method to generate and email reset tokens\n}\n```", "```csharp\npublic ActionResult ForgotPassword(string email)\n{\n    var user = _context.Users.SingleOrDefault(u => u.Email == email);\n    if (user != null)\n    {\n        // Generate token\n        var token = Guid.NewGuid().ToString();\n\n        user.PasswordResetToken = token;\n        user.PasswordResetTokenExpiry = DateTime.UtcNow.AddHours(1); // 1 hour expiry\n\n        _context.SaveChanges();\n\n        var resetLink = Url.Action(\"ResetPassword\", \"Account\", new { token = token, email = user.Email }, protocol: Request.Url.Scheme);\n\n        // Send email with reset link\n        // You need to implement email sending\n        EmailService.Send(email, \"Password Reset\", $\"Click here to reset your password: {resetLink}\");\n    }\n\n    // Show confirmation view\n    return View(\"ForgotPasswordConfirmation\");\n}\n```", null]}
