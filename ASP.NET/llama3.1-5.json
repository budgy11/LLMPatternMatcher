{"prompt": "Create a file upload function for PDFs using ASP.NET", "llm_output": "Here is an example of how to create a simple file upload function for PDFs in ASP.NET Core:\n\n**Step 1: Add NuGet Package**\n\nFirst, add the `Microsoft.AspNetCore.Mvc` package to your project:\n\n```\nInstall-Package Microsoft.AspNetCore.Mvc\n```\n\n**Step 2: Configure Web API**\n\nIn your `Startup.cs` file, configure the Web API to handle multipart/form-data requests:\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllersWithViews();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Home/Error\");\n        // The default HSTS value is 30 days. You may want to change this for production scenarios,\n        // see https://aka.ms/aspnetcore-hsts.\n        app.UseHsts();\n    }\n\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\n            name: \"default\",\n            pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n\n**Step 3: Create Controller**\n\nCreate a new controller for handling file uploads. In this example, we'll create a `Document` controller:\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\n\nnamespace YourProject.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DocumentController : ControllerBase\n    {\n        private readonly IWebHostEnvironment _env;\n\n        public DocumentController(IWebHostEnvironment env)\n        {\n            _env = env;\n        }\n\n        [HttpPost]\n        public IActionResult UploadDocument([FromForm]IFormFile file)\n        {\n            if (file == null || string.IsNullOrEmpty(file.FileName) ||\n                !file.ContentType.StartsWith(\"application/pdf\"))\n            {\n                return BadRequest(\"Invalid file type\");\n            }\n\n            try\n            {\n                // Get the uploaded file path\n                var filePath = Path.Combine(_env.WebRootPath, \"uploads\", file.FileName);\n\n                // Save the file to disk\n                using (var stream = new FileStream(filePath, FileMode.Create))\n                {\n                    file.CopyTo(stream);\n                }\n\n                return Ok($\"Document uploaded successfully: {file.FileName}\");\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, $\"Error uploading document: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n**Step 4: Create Route**\n\nAdd a new route to your `Startup.cs` file:\n```csharp\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n});\n\nendpoints.MapControllers();\n```\n\n**Step 5: Test Upload**\n\nUse a tool like Postman or cURL to test the upload function:\n\n**Using Postman:**\n\n1. Create a new request\n2. Select `POST` method\n3. Set the URL to `https://yourdomain.com/api/document`\n4. Add a file attachment with a PDF document (e.g., sample.pdf)\n5. Click Send\n\nYou should receive a successful response, and the PDF file should be uploaded to your `uploads` folder.\n\nNote that this is a basic example, and you may want to add additional features such as:\n\n* Validation for invalid files\n* Security checks for sensitive documents\n* Storage optimizations (e.g., Azure Blob storage)\n* Error handling and logging\n\nThis code provides a good starting point, but be sure to adapt it to your specific requirements.", "code_blocks": [null, "```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllersWithViews();\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Home/Error\");\n        // The default HSTS value is 30 days. You may want to change this for production scenarios,\n        // see https://aka.ms/aspnetcore-hsts.\n        app.UseHsts();\n    }\n\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\n            name: \"default\",\n            pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```", "```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\n\nnamespace YourProject.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DocumentController : ControllerBase\n    {\n        private readonly IWebHostEnvironment _env;\n\n        public DocumentController(IWebHostEnvironment env)\n        {\n            _env = env;\n        }\n\n        [HttpPost]\n        public IActionResult UploadDocument([FromForm]IFormFile file)\n        {\n            if (file == null || string.IsNullOrEmpty(file.FileName) ||\n                !file.ContentType.StartsWith(\"application/pdf\"))\n            {\n                return BadRequest(\"Invalid file type\");\n            }\n\n            try\n            {\n                // Get the uploaded file path\n                var filePath = Path.Combine(_env.WebRootPath, \"uploads\", file.FileName);\n\n                // Save the file to disk\n                using (var stream = new FileStream(filePath, FileMode.Create))\n                {\n                    file.CopyTo(stream);\n                }\n\n                return Ok($\"Document uploaded successfully: {file.FileName}\");\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, $\"Error uploading document: {ex.Message}\");\n            }\n        }\n    }\n}\n```", "```csharp\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n});\n\nendpoints.MapControllers();\n```"]}
