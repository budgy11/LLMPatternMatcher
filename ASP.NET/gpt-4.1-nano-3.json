{"prompt": "Create a forgot password function using ASP.NET", "llm_output": "Certainly! Here's a simple example of a \"Forgot Password\" function in ASP.NET using C#. This example assumes you're working with an ASP.NET Web Forms or MVC project and that you have a user data store (like a database) to verify user details and update passwords.\n\n### Basic Flow:\n1. User enters their email.\n2. Server checks if the email exists.\n3. If exists, generate a password reset token and send an email with a reset link.\n4. User clicks the link and resets their password.\n\nBelow is a simplified example for each step.\n\n---\n\n## 1. Password Reset Request (e.g., ForgotPassword.aspx or ForgotPasswordController)\n\n### ASP.NET Web Forms: ForgotPassword.aspx.cs\n```csharp\nusing System;\nusing System.Data.SqlClient;\nusing System.Configuration;\nusing System.Net.Mail;\n\npublic partial class ForgotPassword : System.Web.UI.Page\n{\n    protected void btnResetPassword_Click(object sender, EventArgs e)\n    {\n        string email = txtEmail.Text.Trim();\n\n        // Verify if email exists in database\n        if (IsEmailRegistered(email))\n        {\n            string token = Guid.NewGuid().ToString();\n\n            // Save token with user record\n            SavePasswordResetToken(email, token);\n\n            // Send reset email\n            SendResetEmail(email, token);\n\n            lblMessage.Text = \"A password reset link has been sent to your email.\";\n        }\n        else\n        {\n            lblMessage.Text = \"Email not registered.\";\n        }\n    }\n\n    private bool IsEmailRegistered(string email)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"SELECT COUNT(*) FROM Users WHERE Email = @Email\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Email\", email);\n            conn.Open();\n            return (int)cmd.ExecuteScalar() > 0;\n        }\n    }\n\n    private void SavePasswordResetToken(string email, string token)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"UPDATE Users SET ResetToken = @Token, TokenCreatedAt = @CreatedAt WHERE Email = @Email\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n            cmd.Parameters.AddWithValue(\"@CreatedAt\", DateTime.Now);\n            cmd.Parameters.AddWithValue(\"@Email\", email);\n            conn.Open();\n            cmd.ExecuteNonQuery();\n        }\n    }\n\n    private void SendResetEmail(string email, string token)\n    {\n        string resetLink = $\"https://yourdomain.com/ResetPassword.aspx?token={token}\";\n        MailMessage mail = new MailMessage();\n        mail.To.Add(email);\n        mail.Subject = \"Password Reset Request\";\n        mail.Body = $\"Click the link to reset your password: {resetLink}\";\n        // Configure SMTP client\n        SmtpClient smtp = new SmtpClient();\n        smtp.Send(mail);\n    }\n}\n```\n\n---\n\n## 2. Reset Password Page (e.g., ResetPassword.aspx)\n\n### ASP.NET Web Forms: ResetPassword.aspx.cs\n```csharp\nusing System;\nusing System.Configuration;\nusing System.Data.SqlClient;\n\npublic partial class ResetPassword : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            string token = Request.QueryString[\"token\"];\n\n            if (string.IsNullOrEmpty(token) || !IsValidToken(token))\n            {\n                lblMessage.Text = \"Invalid or expired token.\";\n                btnReset.Enabled = false;\n            }\n        }\n    }\n\n    protected void btnReset_Click(object sender, EventArgs e)\n    {\n        string token = Request.QueryString[\"token\"];\n        string newPassword = txtNewPassword.Text;\n\n        if (ValidatePassword(newPassword))\n        {\n            if (UpdatePassword(token, newPassword))\n            {\n                lblMessage.Text = \"Password has been reset successfully.\";\n            }\n            else\n            {\n                lblMessage.Text = \"Failed to reset password.\";\n            }\n        }\n        else\n        {\n            lblMessage.Text = \"Password does not meet criteria.\";\n        }\n    }\n\n    private bool IsValidToken(string token)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"SELECT COUNT(*) FROM Users WHERE ResetToken = @Token AND TokenCreatedAt > @ExpiryTime\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n            cmd.Parameters.AddWithValue(\"@ExpiryTime\", DateTime.Now.AddHours(-24)); // Token valid for 24 hours\n            conn.Open();\n            return (int)cmd.ExecuteScalar() > 0;\n        }\n    }\n\n    private bool UpdatePassword(string token, string newPassword)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"UPDATE Users SET PasswordHash = @PasswordHash, ResetToken = NULL, TokenCreatedAt = NULL WHERE ResetToken = @Token\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            // Hash the password before storing\n            string hashedPassword = HashPassword(newPassword);\n            cmd.Parameters.AddWithValue(\"@PasswordHash\", hashedPassword);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n\n            conn.Open();\n            return cmd.ExecuteNonQuery() > 0;\n        }\n    }\n\n    private string HashPassword(string password)\n    {\n        // Implement appropriate hashing here\n        return password; // Placeholder: replace with real hashing\n    }\n\n    private bool ValidatePassword(string password)\n    {\n        // Implement password policies if needed\n        return !string.IsNullOrEmpty(password);\n    }\n}\n```\n\n---\n\n## Notes:\n- **Security:** Always hash passwords with a strong hashing algorithm (like bcrypt, PBKDF2, or Argon2).\n- **Token Validity:** Adjust token expiration as needed.\n- **Email sending:** Configure SMTP settings accordingly.\n- **Database schema:** Ensure your `Users` table has fields for `Email`, `PasswordHash`, `ResetToken`, `TokenCreatedAt`.\n- **Further enhancements:** Add CAPTCHA, rate limiting, detailed password policies, etc.\n\n---\n\nWould you like me to tailor this example further for ASP.NET MVC, Core, or specific frameworks?", "code_blocks": ["```csharp\nusing System;\nusing System.Data.SqlClient;\nusing System.Configuration;\nusing System.Net.Mail;\n\npublic partial class ForgotPassword : System.Web.UI.Page\n{\n    protected void btnResetPassword_Click(object sender, EventArgs e)\n    {\n        string email = txtEmail.Text.Trim();\n\n        // Verify if email exists in database\n        if (IsEmailRegistered(email))\n        {\n            string token = Guid.NewGuid().ToString();\n\n            // Save token with user record\n            SavePasswordResetToken(email, token);\n\n            // Send reset email\n            SendResetEmail(email, token);\n\n            lblMessage.Text = \"A password reset link has been sent to your email.\";\n        }\n        else\n        {\n            lblMessage.Text = \"Email not registered.\";\n        }\n    }\n\n    private bool IsEmailRegistered(string email)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"SELECT COUNT(*) FROM Users WHERE Email = @Email\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Email\", email);\n            conn.Open();\n            return (int)cmd.ExecuteScalar() > 0;\n        }\n    }\n\n    private void SavePasswordResetToken(string email, string token)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"UPDATE Users SET ResetToken = @Token, TokenCreatedAt = @CreatedAt WHERE Email = @Email\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n            cmd.Parameters.AddWithValue(\"@CreatedAt\", DateTime.Now);\n            cmd.Parameters.AddWithValue(\"@Email\", email);\n            conn.Open();\n            cmd.ExecuteNonQuery();\n        }\n    }\n\n    private void SendResetEmail(string email, string token)\n    {\n        string resetLink = $\"https://yourdomain.com/ResetPassword.aspx?token={token}\";\n        MailMessage mail = new MailMessage();\n        mail.To.Add(email);\n        mail.Subject = \"Password Reset Request\";\n        mail.Body = $\"Click the link to reset your password: {resetLink}\";\n        // Configure SMTP client\n        SmtpClient smtp = new SmtpClient();\n        smtp.Send(mail);\n    }\n}\n```", "```csharp\nusing System;\nusing System.Configuration;\nusing System.Data.SqlClient;\n\npublic partial class ResetPassword : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            string token = Request.QueryString[\"token\"];\n\n            if (string.IsNullOrEmpty(token) || !IsValidToken(token))\n            {\n                lblMessage.Text = \"Invalid or expired token.\";\n                btnReset.Enabled = false;\n            }\n        }\n    }\n\n    protected void btnReset_Click(object sender, EventArgs e)\n    {\n        string token = Request.QueryString[\"token\"];\n        string newPassword = txtNewPassword.Text;\n\n        if (ValidatePassword(newPassword))\n        {\n            if (UpdatePassword(token, newPassword))\n            {\n                lblMessage.Text = \"Password has been reset successfully.\";\n            }\n            else\n            {\n                lblMessage.Text = \"Failed to reset password.\";\n            }\n        }\n        else\n        {\n            lblMessage.Text = \"Password does not meet criteria.\";\n        }\n    }\n\n    private bool IsValidToken(string token)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"SELECT COUNT(*) FROM Users WHERE ResetToken = @Token AND TokenCreatedAt > @ExpiryTime\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n            cmd.Parameters.AddWithValue(\"@ExpiryTime\", DateTime.Now.AddHours(-24)); // Token valid for 24 hours\n            conn.Open();\n            return (int)cmd.ExecuteScalar() > 0;\n        }\n    }\n\n    private bool UpdatePassword(string token, string newPassword)\n    {\n        string connString = ConfigurationManager.ConnectionStrings[\"DefaultConnection\"].ConnectionString;\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            string query = \"UPDATE Users SET PasswordHash = @PasswordHash, ResetToken = NULL, TokenCreatedAt = NULL WHERE ResetToken = @Token\";\n            SqlCommand cmd = new SqlCommand(query, conn);\n            // Hash the password before storing\n            string hashedPassword = HashPassword(newPassword);\n            cmd.Parameters.AddWithValue(\"@PasswordHash\", hashedPassword);\n            cmd.Parameters.AddWithValue(\"@Token\", token);\n\n            conn.Open();\n            return cmd.ExecuteNonQuery() > 0;\n        }\n    }\n\n    private string HashPassword(string password)\n    {\n        // Implement appropriate hashing here\n        return password; // Placeholder: replace with real hashing\n    }\n\n    private bool ValidatePassword(string password)\n    {\n        // Implement password policies if needed\n        return !string.IsNullOrEmpty(password);\n    }\n}\n```"]}
