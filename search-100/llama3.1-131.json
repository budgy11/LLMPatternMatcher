{"prompt": "Create a search bar using php", "llm_output": "Here's an example of how you can create a simple search bar using PHP. This will be a basic implementation that allows users to input their query, and the results are filtered based on a predefined array.\n\n**index.php**\n```php\n<?php\n// Define your data array (e.g., database records)\n$data = [\n    ['id' => 1, 'name' => 'John Doe', 'email' => 'john@example.com'],\n    ['id' => 2, 'name' => 'Jane Doe', 'email' => 'jane@example.com'],\n    // Add more data here...\n];\n\n// Handle search form submission\nif (isset($_POST['search'])) {\n    $query = $_POST['search'];\n    $results = array_filter($data, function ($item) use ($query) {\n        return strpos(strtolower($item['name']), strtolower($query)) !== false ||\n               strpos(strtolower($item['email']), strtolower($query)) !== false;\n    });\n} else {\n    $results = [];\n}\n?>\n\n<!-- Create a simple search form -->\n<form action=\"\" method=\"post\">\n    <input type=\"search\" name=\"search\" placeholder=\"Search...\">\n    <button type=\"submit\">Search</button>\n</form>\n\n<!-- Display results (if any) -->\n<h2>Results:</h2>\n<ul>\n    <?php foreach ($results as $result): ?>\n        <li><?php echo implode(', ', [$result['name'], $result['email']]); ?></li>\n    <?php endforeach; ?>\n</ul>\n```\n**How it works:**\n\n1. The script first defines a sample `$data` array containing user records.\n2. When the search form is submitted (i.e., when `$_POST['search']` is set), the script filters the `$data` array using an anonymous function that checks if the search query (`$query`) exists within any of the name or email fields of a record.\n3. The filtered results are stored in the `$results` variable and displayed on the page.\n\n**Example Use Case:**\n\nSuppose you have a database table called `users` with columns `id`, `name`, and `email`. You can replace the sample `$data` array with actual data fetched from your database using PHP's database extension (e.g., MySQLi or PDO).\n\nNote that this is a basic example, and in a real-world application, you'd want to handle errors, improve security (e.g., prevent SQL injection), and add additional features like pagination or sorting.", "code_blocks": ["```php\n<?php\n// Define your data array (e.g., database records)\n$data = [\n    ['id' => 1, 'name' => 'John Doe', 'email' => 'john@example.com'],\n    ['id' => 2, 'name' => 'Jane Doe', 'email' => 'jane@example.com'],\n    // Add more data here...\n];\n\n// Handle search form submission\nif (isset($_POST['search'])) {\n    $query = $_POST['search'];\n    $results = array_filter($data, function ($item) use ($query) {\n        return strpos(strtolower($item['name']), strtolower($query)) !== false ||\n               strpos(strtolower($item['email']), strtolower($query)) !== false;\n    });\n} else {\n    $results = [];\n}\n?>\n\n<!-- Create a simple search form -->\n<form action=\"\" method=\"post\">\n    <input type=\"search\" name=\"search\" placeholder=\"Search...\">\n    <button type=\"submit\">Search</button>\n</form>\n\n<!-- Display results (if any) -->\n<h2>Results:</h2>\n<ul>\n    <?php foreach ($results as $result): ?>\n        <li><?php echo implode(', ', [$result['name'], $result['email']]); ?></li>\n    <?php endforeach; ?>\n</ul>\n```"]}
