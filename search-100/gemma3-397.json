{"prompt": "Create a search bar using php", "llm_output": "```php\n<?php\n\n// Simple search bar implementation using PHP\n\n// 1. Get the search term from the form\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $searchTerm = isset($_POST[\"search\"]) ? htmlspecialchars($_POST[\"search\"]) : \"\";\n}\n\n// 2.  Data to search through (example - replace with your data source)\n$data = [\n    [\"id\" => 1, \"name\" => \"Apple\", \"description\" => \"A sweet fruit.\"],\n    [\"id\" => 2, \"name\" => \"Banana\", \"description\" => \"A yellow fruit.\"],\n    [\"id\" => 3, \"name\" => \"Orange\", \"description\" => \"A citrus fruit.\"],\n    [\"id\" => 4, \"name\" => \"Grape\", \"description\" => \"Small, juicy fruit.\"]\n];\n\n// 3.  Search the data\nif ($searchTerm) {\n  $searchResults = [];\n  foreach ($data as $item) {\n    // Case-insensitive search\n    $found = false;\n    $searchTermLower = strtolower($searchTerm);\n    $nameLower = strtolower($item[\"name\"]);\n    $descriptionLower = strtolower($item[\"description\"]);\n\n    if (strpos($nameLower, $searchTermLower) !== false ||\n        strpos($descriptionLower, $searchTermLower) !== false) {\n      $found = true;\n    }\n\n    if ($found) {\n      $searchResults[] = $item;\n    }\n  }\n} else {\n  $searchResults = []; // Reset if search term is empty\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple Search Bar</title>\n</head>\n<body>\n\n  <h1>Search Results</h1>\n\n  <form method=\"POST\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <input type=\"text\" name=\"search\" placeholder=\"Enter search term...\">\n    <button type=\"submit\">Search</button>\n  </form>\n\n  <?php if (!empty($searchResults)): ?>\n    <ul>\n      <?php foreach ($searchResults as $result): ?>\n        <li>\n          <strong>ID:</strong> <?php echo $result[\"id\"]; ?><br>\n          <em>Name:</em> <?php echo $result[\"name\"]; ?><br>\n          <small>Description: <?php echo $result[\"description\"]; ?></small>\n        </li>\n      <?php endforeach; ?>\n    </ul>\n  <?php else: ?>\n    <p>No results found.</p>\n  <?php endif; ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **`htmlspecialchars()` for Security:**  Crucially, `htmlspecialchars()` is used to escape the search term *before* inserting it into the HTML. This prevents Cross-Site Scripting (XSS) attacks, where malicious users could inject JavaScript code into your web page.  This is *essential* for any user-submitted data.\n* **`$_SERVER[\"PHP_SELF\"]` for Form Action:** The form's `action` attribute is set to `$_SERVER[\"PHP_SELF\"]`, which means the form data is submitted back to the same PHP script.\n* **Clearer Logic and Structure:**  The code is organized into distinct steps: getting the search term, defining the data, searching the data, and displaying the results.\n* **Case-Insensitive Search:** The `strtolower()` function converts both the search term and the data fields to lowercase before comparison, making the search case-insensitive.\n* **`strpos()` for Efficient Searching:**  The `strpos()` function is used to find the position of the search term within the data fields.  This is a more efficient way to perform string searching than using `preg_match` for a simple search.  `strpos` returns `false` if the string isn't found, which makes the logic cleaner.\n* **Empty Search Term Handling:**  The code explicitly handles the case where the search term is empty (i.e., the user hasn't entered anything).  If the search term is empty, `searchResults` is reset to an empty array.  This prevents displaying results when no search term is provided.\n* **Clearer Output:**  The results are displayed in an HTML unordered list (`<ul>`) for better readability.  Includes the ID, name, and description of each item.\n* **Error Handling (Empty Results):**  The code includes a message \"No results found.\" when the search returns no results, improving the user experience.\n* **Complete HTML Structure:**  The code includes the necessary `<!DOCTYPE html>`, `<html>`, `<head>`, and `<body>` tags, making it a complete and runnable HTML document.\n* **Comments:**  Includes comments to explain key parts of the code.\n\nHow to use:\n\n1. **Save the code:** Save the code as a `.php` file (e.g., `search.php`).\n2. **Place in your web server's directory:**  Upload the file to your web server's document root (e.g., `htdocs` or `www`).\n3. **Access through your browser:** Open the file in your web browser by navigating to `http://localhost/search.php` (or the appropriate URL for your server).\n\nTo customize:\n\n* **Data Source:** Replace the `$data` array with your actual data source. You could connect to a database, read from a CSV file, or use any other method to retrieve your data.\n* **Search Criteria:** Modify the `if` condition inside the `foreach` loop to search other fields in your data (e.g., `email`, `phone`).\n* **Search Functionality:** For more complex search requirements (e.g., fuzzy searching, wildcard characters, regular expressions), you could use a library for searching, but this simple `strpos()` approach is suitable for most basic search needs.\n* **Styling:** Add CSS to style the search bar and the results to improve the visual appearance.\n* **Database integration:** If you are using a database, replace the `$data` array with your database query.  Use prepared statements to prevent SQL injection.\n* **Consider using a search library:**  Libraries like Fuse.js can provide much more sophisticated search capabilities (e.g., fuzzy searching, highlighting matches, and more) if needed.  You would need to include this library in your HTML and use its API.\n", "code_blocks": ["```php\n<?php\n\n// Simple search bar implementation using PHP\n\n// 1. Get the search term from the form\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $searchTerm = isset($_POST[\"search\"]) ? htmlspecialchars($_POST[\"search\"]) : \"\";\n}\n\n// 2.  Data to search through (example - replace with your data source)\n$data = [\n    [\"id\" => 1, \"name\" => \"Apple\", \"description\" => \"A sweet fruit.\"],\n    [\"id\" => 2, \"name\" => \"Banana\", \"description\" => \"A yellow fruit.\"],\n    [\"id\" => 3, \"name\" => \"Orange\", \"description\" => \"A citrus fruit.\"],\n    [\"id\" => 4, \"name\" => \"Grape\", \"description\" => \"Small, juicy fruit.\"]\n];\n\n// 3.  Search the data\nif ($searchTerm) {\n  $searchResults = [];\n  foreach ($data as $item) {\n    // Case-insensitive search\n    $found = false;\n    $searchTermLower = strtolower($searchTerm);\n    $nameLower = strtolower($item[\"name\"]);\n    $descriptionLower = strtolower($item[\"description\"]);\n\n    if (strpos($nameLower, $searchTermLower) !== false ||\n        strpos($descriptionLower, $searchTermLower) !== false) {\n      $found = true;\n    }\n\n    if ($found) {\n      $searchResults[] = $item;\n    }\n  }\n} else {\n  $searchResults = []; // Reset if search term is empty\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple Search Bar</title>\n</head>\n<body>\n\n  <h1>Search Results</h1>\n\n  <form method=\"POST\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <input type=\"text\" name=\"search\" placeholder=\"Enter search term...\">\n    <button type=\"submit\">Search</button>\n  </form>\n\n  <?php if (!empty($searchResults)): ?>\n    <ul>\n      <?php foreach ($searchResults as $result): ?>\n        <li>\n          <strong>ID:</strong> <?php echo $result[\"id\"]; ?><br>\n          <em>Name:</em> <?php echo $result[\"name\"]; ?><br>\n          <small>Description: <?php echo $result[\"description\"]; ?></small>\n        </li>\n      <?php endforeach; ?>\n    </ul>\n  <?php else: ?>\n    <p>No results found.</p>\n  <?php endif; ?>\n\n</body>\n</html>\n```"]}
