{"prompt": "Create a search bar using php", "llm_output": "```php\n<?php\n\n// Assume you have a database connection established here.  For example:\n// $conn = new mysqli(\"localhost\", \"username\", \"password\", \"database_name\");\n// if ($conn->connect_error) {\n//   die(\"Connection failed: \" . $conn->connect_error);\n// }\n\n\n// Function to handle the search query\nfunction searchDatabase($search_term, $table_name, $search_columns)\n{\n    global $conn; // Access the global database connection\n\n    $sql = \"SELECT * FROM \" . $table_name . \" WHERE \";\n\n    $where_clauses = [];\n    foreach ($search_columns as $column) {\n        $where_clauses[] = \"`\" . $column . \"`\" . \" LIKE '%\" . $search_term . \"%'\";\n    }\n\n    $sql .= implode(\" OR \", $where_clauses);\n\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Get the search term from the form\n$search_term = isset($_GET['search']) ? $_GET['search'] : '';\n\n// Define the table and columns to search within\n$table_name = 'products'; // Example: Change this to your table name\n$search_columns = ['name', 'description', 'category']; // Example: Columns to search in\n\n// Perform the search\n$results = searchDatabase($search_term, $table_name, $search_columns);\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Example</title>\n</head>\n<body>\n\n    <h1>Search Products</h1>\n\n    <form method=\"get\">\n        <input type=\"text\" name=\"search\" value=\"<?php echo htmlspecialchars($search_term); ?>\" placeholder=\"Enter search term\">\n        <input type=\"submit\" value=\"Search\">\n    </form>\n\n    <?php\n    if ($results) {\n        echo \"<pre>\"; // Use <pre> for better formatting of the results\n        while ($row = $results->fetch_assoc()) {\n            echo print_r($row, true); // For detailed output - remove 'true' for cleaner output\n            echo \"<br>\";\n        }\n        echo \"</pre>\";\n    } else {\n        echo \"<p>No results found for '\" . htmlspecialchars($search_term) . \"'</p>\";\n    }\n    ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  The code now clearly indicates that you need to establish a database connection *before* running this script. I've added a placeholder for the connection and a basic error check.  Crucially, the database connection is referenced globally within the `searchDatabase` function.\n\n* **`searchDatabase` Function:**  This function encapsulates the search logic, making the code more organized and reusable.\n    * **`WHERE LIKE '%...%'`**:  Uses the `LIKE` operator with wildcards (`%`) to perform a partial string match. This is much more flexible than an exact match. The `%` sign means \"any characters\" before or after the search term.\n    * **Dynamic `WHERE` Clause:**  The code dynamically builds the `WHERE` clause based on the `$search_columns` array. This allows you to easily add or remove columns to be searched.\n    * **`implode`:** Uses `implode` to combine the individual `WHERE` clause parts with \"OR\".\n    * **Returns Result:** Returns the database result or `false` if no results are found.\n\n* **HTML Form:**\n    * **`htmlspecialchars()`:**  This is *essential* for security! `htmlspecialchars()` prevents Cross-Site Scripting (XSS) vulnerabilities by encoding special characters in the search term before displaying them in the form.  It *must* be applied to the `value` of the input field, too, to prevent XSS when the form is submitted.\n    * **`value=\"<?php echo htmlspecialchars($search_term); ?>\"`**: Sets the input field's value to the current search term, also encoded to prevent XSS.  This is a vital security measure.\n    * **Clear Placeholder:** Added a placeholder to the search input for better usability.\n\n* **Outputting Results:**\n   * **`<pre>` tag:**  Uses the `<pre>` tag to display the results in a readable format, preserving the formatting of the data.\n   * **`print_r()` and `true`**:  The `print_r($row, true)` is used to output the array in a structured format.  The `true` argument tells `print_r` to return the result as a string, which is then echoed. This is useful for debugging and viewing the full data structure.  Remove the `true` for cleaner output if you don't need the detailed representation.\n   * **Error Handling**: Includes a message if no results are found.\n\n* **Security:** *The most important addition is the use of `htmlspecialchars()`*.  Without it, your script is vulnerable to XSS attacks.\n\n* **Clarity and Readability:**  The code is well-commented and formatted for better understanding.\n\nHow to Use:\n\n1. **Database Setup:** Make sure you have a database set up with a table (e.g., `products`) and some data.\n2. **Database Connection:**  Replace the placeholder database connection code with your actual connection details (hostname, username, password, database name).\n3. **Table and Columns:**  Modify the `$table_name` and `$search_columns` variables to match your table and the columns you want to search in.\n4. **Run the Script:**  Place the code in a `.php` file (e.g., `search.php`) and run it through your web server.\n5. **Test:** Enter a search term in the form and see the results.\n\nExample:\n\nLet's say your `products` table has columns `name`, `description`, and `category`. You'd set:\n\n```php\n$table_name = 'products';\n$search_columns = ['name', 'description', 'category'];\n```\n\nThen, when you search for \"red shirt\", the query will look something like:\n\n```sql\nSELECT * FROM products WHERE `name` LIKE '%red shirt%' OR `description` LIKE '%red shirt%' OR `category` LIKE '%red shirt%';\n```\n\nThis code is a solid foundation for a search bar. Remember to adjust the database connection details and table/column names to suit your specific application.   And *always* prioritize security by using `htmlspecialchars()` to prevent XSS vulnerabilities.\n", "code_blocks": ["```php\n<?php\n\n// Assume you have a database connection established here.  For example:\n// $conn = new mysqli(\"localhost\", \"username\", \"password\", \"database_name\");\n// if ($conn->connect_error) {\n//   die(\"Connection failed: \" . $conn->connect_error);\n// }\n\n\n// Function to handle the search query\nfunction searchDatabase($search_term, $table_name, $search_columns)\n{\n    global $conn; // Access the global database connection\n\n    $sql = \"SELECT * FROM \" . $table_name . \" WHERE \";\n\n    $where_clauses = [];\n    foreach ($search_columns as $column) {\n        $where_clauses[] = \"`\" . $column . \"`\" . \" LIKE '%\" . $search_term . \"%'\";\n    }\n\n    $sql .= implode(\" OR \", $where_clauses);\n\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        return $result;\n    } else {\n        return false;\n    }\n}\n\n// Get the search term from the form\n$search_term = isset($_GET['search']) ? $_GET['search'] : '';\n\n// Define the table and columns to search within\n$table_name = 'products'; // Example: Change this to your table name\n$search_columns = ['name', 'description', 'category']; // Example: Columns to search in\n\n// Perform the search\n$results = searchDatabase($search_term, $table_name, $search_columns);\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Example</title>\n</head>\n<body>\n\n    <h1>Search Products</h1>\n\n    <form method=\"get\">\n        <input type=\"text\" name=\"search\" value=\"<?php echo htmlspecialchars($search_term); ?>\" placeholder=\"Enter search term\">\n        <input type=\"submit\" value=\"Search\">\n    </form>\n\n    <?php\n    if ($results) {\n        echo \"<pre>\"; // Use <pre> for better formatting of the results\n        while ($row = $results->fetch_assoc()) {\n            echo print_r($row, true); // For detailed output - remove 'true' for cleaner output\n            echo \"<br>\";\n        }\n        echo \"</pre>\";\n    } else {\n        echo \"<p>No results found for '\" . htmlspecialchars($search_term) . \"'</p>\";\n    }\n    ?>\n\n</body>\n</html>\n```", "```php\n$table_name = 'products';\n$search_columns = ['name', 'description', 'category'];\n```", null]}
