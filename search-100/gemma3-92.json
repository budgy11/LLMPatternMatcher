{"prompt": "Create a search bar using php", "llm_output": "```php\n<?php\n\n// Configuration\n$search_term = \"\"; // Default search term\n$results = [];      // Array to store search results (replace with your data source)\n\n// Function to handle the search\nfunction search($search_term, $data) {\n    global $results;\n\n    $results = []; // Clear previous results\n\n    if (empty($search_term)) {\n        return $results; // Return empty results if no search term\n    }\n\n    $search_term = trim($search_term); // Remove leading/trailing whitespace\n\n    foreach ($data as $item) {\n        // Adapt this logic based on your data structure.\n        // This example assumes your data is an array of associative arrays:\n        // e.g., ['title' => 'Product A', 'description' => '...', 'id' => 123]\n\n        if (\n            strpos($item['title'], $search_term) !== false ||  // Check title\n            strpos($item['description'], $search_term) !== false // Check description\n        ) {\n            $results[] = $item;\n        }\n    }\n    return $results;\n}\n\n\n// Example Data (Replace with your actual data source)\n$products = [\n    ['title' => 'Laptop X1', 'description' => 'Powerful laptop for work and gaming.', 'id' => 1],\n    ['title' => 'Wireless Mouse', 'description' => 'Ergonomic wireless mouse.', 'id' => 2],\n    ['title' => 'Keyboard Pro', 'description' => 'Mechanical keyboard with RGB lighting.', 'id' => 3],\n    ['title' => 'Monitor 27\"', 'description' => '27-inch LED monitor for crisp visuals.', 'id' => 4],\n    ['title' => 'Headphones Z900', 'description' => 'Noise-cancelling headphones with excellent sound quality.', 'id' => 5]\n];\n\n\n// Handle the search form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $search_term = isset($_POST['search_term']) ? trim($_POST['search_term']) : \"\";\n    search($search_term, $products); // Call the search function\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Example</title>\n</head>\n<body>\n\n<h1>Search Products</h1>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <input type=\"text\" name=\"search_term\" value=\"<?php echo htmlspecialchars($search_term); ?>\">\n    <button type=\"submit\">Search</button>\n</form>\n\n<?php if (!empty($results)) { ?>\n    <h2>Search Results:</h2>\n    <ul>\n        <?php foreach ($results as $result) { ?>\n            <li>ID: <?php echo htmlspecialchars($result['id']); ?> - <?php echo htmlspecialchars($result['title']); ?></li>\n        <?php } ?>\n    </ul>\n<?php } else { ?>\n    <p>No results found for \"<?php echo htmlspecialchars($search_term); ?>\"</p>\n<?php } ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Clearer Structure:** The code is organized into logical sections (configuration, search function, form handling, output).\n* **`search()` function:** Encapsulates the search logic for better reusability and readability.\n* **`trim()`:**  Removes leading/trailing whitespace from the search term to prevent false negatives. This is *crucial*.  Without it, searching for \"apple\" will likely not find \"Apple laptop\".\n* **`htmlspecialchars()`:**  *Extremely important for security*.  This function escapes potentially dangerous characters in the search term and in the data being displayed.  This prevents Cross-Site Scripting (XSS) attacks.  You *must* use this whenever you're displaying user-provided data.\n* **Form Handling:**  Handles the form submission correctly using `$_SERVER[\"REQUEST_METHOD\"] == \"POST\"` and `isset()` to check for the presence of the `search_term` input.  This ensures the script only runs when the form is submitted.\n* **Default Search Term:**  Initializes `$search_term` to an empty string, so the search doesn't start with a blank term by default.\n* **No Results Message:**  Displays a helpful message if no results are found.\n* **Data Structure Flexibility:** The `search()` function is designed to work with an array of associative arrays.  You can easily adapt it to use your specific data source structure.\n* **Comments:**  The code is well-commented to explain the purpose of each section.\n* **Security:** The use of `htmlspecialchars()` is paramount to prevent XSS vulnerabilities.\n* **Complete Example:** Provides a fully functional example with sample data, so you can copy and paste it to run immediately.\n\nHow to use and adapt this code:\n\n1. **Replace Sample Data:**  Replace the `$products` array with your actual data source. This could be a database query, a file read, or another source.  Make sure your data source is properly connected and prepared.\n\n2. **Adjust the Search Logic:** Modify the `strpos()` calls within the `search()` function to match your data structure and search criteria.  The current example searches both the `title` and `description` fields.  You can add more fields to search or use more complex search algorithms if needed.\n\n3. **Database Integration (If applicable):** If your data is in a database, replace the sample data with a database query. Use a database connection library (like PDO) to connect to your database.\n\n4. **Error Handling:** Add error handling (e.g., checking if the database connection is successful, handling database errors) to make your script more robust.\n\n5. **Case-Insensitive Search:**  To perform a case-insensitive search, you can use `stripos()` instead of `strpos()`. `stripos()` is like `strpos()` but ignores case.  Example: `strpos($item['title'], $search_term, 0, 'e')`\n\nExample of case-insensitive search using `stripos()`:\n\n```php\nif (\n    stripos($item['title'], $search_term) !== false ||\n    stripos($item['description'], $search_term) !== false\n) {\n    $results[] = $item;\n}\n```\n\nThis version will now find \"Apple\" even if the search term is \"apple\".\n", "code_blocks": ["```php\n<?php\n\n// Configuration\n$search_term = \"\"; // Default search term\n$results = [];      // Array to store search results (replace with your data source)\n\n// Function to handle the search\nfunction search($search_term, $data) {\n    global $results;\n\n    $results = []; // Clear previous results\n\n    if (empty($search_term)) {\n        return $results; // Return empty results if no search term\n    }\n\n    $search_term = trim($search_term); // Remove leading/trailing whitespace\n\n    foreach ($data as $item) {\n        // Adapt this logic based on your data structure.\n        // This example assumes your data is an array of associative arrays:\n        // e.g., ['title' => 'Product A', 'description' => '...', 'id' => 123]\n\n        if (\n            strpos($item['title'], $search_term) !== false ||  // Check title\n            strpos($item['description'], $search_term) !== false // Check description\n        ) {\n            $results[] = $item;\n        }\n    }\n    return $results;\n}\n\n\n// Example Data (Replace with your actual data source)\n$products = [\n    ['title' => 'Laptop X1', 'description' => 'Powerful laptop for work and gaming.', 'id' => 1],\n    ['title' => 'Wireless Mouse', 'description' => 'Ergonomic wireless mouse.', 'id' => 2],\n    ['title' => 'Keyboard Pro', 'description' => 'Mechanical keyboard with RGB lighting.', 'id' => 3],\n    ['title' => 'Monitor 27\"', 'description' => '27-inch LED monitor for crisp visuals.', 'id' => 4],\n    ['title' => 'Headphones Z900', 'description' => 'Noise-cancelling headphones with excellent sound quality.', 'id' => 5]\n];\n\n\n// Handle the search form submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $search_term = isset($_POST['search_term']) ? trim($_POST['search_term']) : \"\";\n    search($search_term, $products); // Call the search function\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Example</title>\n</head>\n<body>\n\n<h1>Search Products</h1>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <input type=\"text\" name=\"search_term\" value=\"<?php echo htmlspecialchars($search_term); ?>\">\n    <button type=\"submit\">Search</button>\n</form>\n\n<?php if (!empty($results)) { ?>\n    <h2>Search Results:</h2>\n    <ul>\n        <?php foreach ($results as $result) { ?>\n            <li>ID: <?php echo htmlspecialchars($result['id']); ?> - <?php echo htmlspecialchars($result['title']); ?></li>\n        <?php } ?>\n    </ul>\n<?php } else { ?>\n    <p>No results found for \"<?php echo htmlspecialchars($search_term); ?>\"</p>\n<?php } ?>\n\n</body>\n</html>\n```", "```php\nif (\n    stripos($item['title'], $search_term) !== false ||\n    stripos($item['description'], $search_term) !== false\n) {\n    $results[] = $item;\n}\n```"]}
