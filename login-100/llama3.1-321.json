{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP:\n\n**Note:** This is a simplified example and you should always use prepared statements to prevent SQL injection.\n\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$db_name = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    global $conn;\n\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        // Get the hashed password from the database\n        $user_data = $result->fetch_assoc();\n\n        // Verify the password\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n\n    // Validate input data\n    if (empty($username) || empty($password)) {\n        echo \"Please enter both username and password.\";\n    } else {\n        $result = login_user($username, $password);\n\n        if ($result == true) {\n            // User is logged in successfully\n            session_start();\n            $_SESSION[\"username\"] = $username;\n            header('Location: index.php');\n            exit;\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n}\n\n?>\n```\n\n**Explanation:**\n\n1. We first establish a database connection using `mysqli`.\n2. We define a function `login_user` that takes in the user's `username` and `password`. It checks if the user exists in the database and verifies the password.\n3. If the user is logged in successfully, we start a session and store the user's `username` in it.\n4. In the form submission section, we check if both username and password are entered. If not, we display an error message.\n5. We then call the `login_user` function with the submitted username and password.\n\n**Remember to:**\n\n* Store passwords securely using a library like `password_hash`.\n* Use prepared statements or parameterized queries to prevent SQL injection attacks.\n* Do not use this example as is in production, but rather modify it according to your specific requirements.\n\n```php\n// How you would add password hash using password_hash\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\n```\n\n**Using PDO**\n\nHere's an updated version of the code that uses PDO instead:\n\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$db_name = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction login_user($username, $password) {\n    global $conn;\n\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // Get the hashed password from the database\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Verify the password\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n\n    // Validate input data\n    if (empty($username) || empty($password)) {\n        echo \"Please enter both username and password.\";\n    } else {\n        $result = login_user($username, $password);\n\n        if ($result == true) {\n            // User is logged in successfully\n            session_start();\n            $_SESSION[\"username\"] = $username;\n            header('Location: index.php');\n            exit;\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n}\n\n?>\n```\n\n**Explanation:** This version uses PDO instead of `mysqli`, and it also does the same thing as before.\n\n```php\n// How you would add password hash using password_hash\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\n```", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$db_name = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($username, $password) {\n    global $conn;\n\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        // Get the hashed password from the database\n        $user_data = $result->fetch_assoc();\n\n        // Verify the password\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n\n    // Validate input data\n    if (empty($username) || empty($password)) {\n        echo \"Please enter both username and password.\";\n    } else {\n        $result = login_user($username, $password);\n\n        if ($result == true) {\n            // User is logged in successfully\n            session_start();\n            $_SESSION[\"username\"] = $username;\n            header('Location: index.php');\n            exit;\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n}\n\n?>\n```", "```php\n// How you would add password hash using password_hash\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\n```", "```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$db_name = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction login_user($username, $password) {\n    global $conn;\n\n    // Check if user exists in the database\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    $stmt = $conn->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // Get the hashed password from the database\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Verify the password\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n\n    // Validate input data\n    if (empty($username) || empty($password)) {\n        echo \"Please enter both username and password.\";\n    } else {\n        $result = login_user($username, $password);\n\n        if ($result == true) {\n            // User is logged in successfully\n            session_start();\n            $_SESSION[\"username\"] = $username;\n            header('Location: index.php');\n            exit;\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n}\n\n?>\n```", "```php\n// How you would add password hash using password_hash\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\n```"]}
