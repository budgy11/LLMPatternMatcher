{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n====================================\n\nBelow is an example of a basic user login function written in PHP. This example assumes you have a database with a `users` table that stores usernames and passwords.\n\n### Database Table Schema\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Code\n\n```php\n// db_config.php (database connection settings)\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\nfunction connect_to_db() {\n  $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n  return $conn;\n}\n\n// User login function\nfunction user_login($username, $password) {\n  // Connect to database\n  $conn = connect_to_db();\n\n  // Prepare query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n  $stmt->bindParam(':username', $username);\n\n  try {\n    // Execute query\n    $stmt->execute();\n    $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    // Check if user exists and password is correct\n    if ($user_data && password_verify($password, $user_data['password'])) {\n      return true;\n    } else {\n      throw new Exception('Invalid username or password');\n    }\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n  }\n\n  // Disconnect from database\n  $conn = null;\n\n  return false; // Return False if an exception occurred\n}\n```\n\n### Example Usage\n\n```php\n// Set database connection settings\nrequire_once 'db_config.php';\n\n// Call user_login function with username and password\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (user_login($username, $password)) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password';\n}\n```\n\nNote:\n\n* In a real-world application, you should use prepared statements to prevent SQL injection attacks.\n* This example uses the `password_verify` function to securely verify passwords. Make sure to store hashed passwords in your database using the `password_hash` function.\n* Always disconnect from the database after executing queries to prevent memory leaks.\n\nThis code snippet demonstrates a basic user login function with PHP and MySQLi (PDO). It's essential to follow best practices for password storage, secure input validation, and error handling.", "code_blocks": [null, "```php\n// db_config.php (database connection settings)\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\nfunction connect_to_db() {\n  $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n  return $conn;\n}\n\n// User login function\nfunction user_login($username, $password) {\n  // Connect to database\n  $conn = connect_to_db();\n\n  // Prepare query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n  $stmt->bindParam(':username', $username);\n\n  try {\n    // Execute query\n    $stmt->execute();\n    $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    // Check if user exists and password is correct\n    if ($user_data && password_verify($password, $user_data['password'])) {\n      return true;\n    } else {\n      throw new Exception('Invalid username or password');\n    }\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n  }\n\n  // Disconnect from database\n  $conn = null;\n\n  return false; // Return False if an exception occurred\n}\n```", "```php\n// Set database connection settings\nrequire_once 'db_config.php';\n\n// Call user_login function with username and password\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (user_login($username, $password)) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password';\n}\n```"]}
