{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n====================================\n\nBelow is an example of a simple user login function using PHP. This function includes input validation, secure password hashing and storing, and verification.\n\n### Configuration\n\nBefore we dive into the code, ensure that you have the following configuration set up:\n\n*   `config.php` file with database connection details\n*   A table named `users` in your database with the following structure:\n    ```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n### Code\n\n**login.php**\n```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Define constants for encryption and error messages\ndefine('SALT', 'my_secret_salt');\ndefine('ERROR_MESSAGES', [\n    'username' => 'Username is required',\n    'password' => 'Password is required'\n]);\n\nfunction login($username, $password) {\n    // Validate input\n    if (empty($username)) {\n        throw new Exception(ERROR_MESSAGES['username']);\n    }\n    if (empty($password)) {\n        throw new Exception(ERROR_MESSAGES['password']);\n    }\n\n    // Hash password for comparison\n    $hashedPassword = hash('sha256', $password . SALT);\n\n    try {\n        // Connect to database and select user\n        $conn = new PDO(DATABASE_HOST, DATABASE_USERNAME, DATABASE_PASSWORD);\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        // Check if user exists and password matches\n        if ($user && $hashedPassword === $user['password']) {\n            // Log in successful, return user data\n            return [\n                'id' => $user['id'],\n                'username' => $user['username']\n            ];\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        echo \"Database error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\n$username = 'example_user';\n$password = 'my_secret_password';\n\ntry {\n    $userData = login($username, $password);\n    if ($userData) {\n        print_r($userData); // Output: Array ( [id] => 1 [username] => example_user )\n    } else {\n        echo \"Login failed\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\n### Security Notes\n\n*   Passwords are stored securely using SHA-256 hashing with a salt value.\n*   The `login` function includes input validation to prevent SQL injection attacks and ensure that passwords are always hashed before comparison.\n\nRemember to replace the placeholders in the configuration file (`config.php`) with your actual database credentials and table structure. This example assumes a basic implementation; you may need to adapt it to your specific requirements, such as user authentication and authorization mechanisms.", "code_blocks": [null, "```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Define constants for encryption and error messages\ndefine('SALT', 'my_secret_salt');\ndefine('ERROR_MESSAGES', [\n    'username' => 'Username is required',\n    'password' => 'Password is required'\n]);\n\nfunction login($username, $password) {\n    // Validate input\n    if (empty($username)) {\n        throw new Exception(ERROR_MESSAGES['username']);\n    }\n    if (empty($password)) {\n        throw new Exception(ERROR_MESSAGES['password']);\n    }\n\n    // Hash password for comparison\n    $hashedPassword = hash('sha256', $password . SALT);\n\n    try {\n        // Connect to database and select user\n        $conn = new PDO(DATABASE_HOST, DATABASE_USERNAME, DATABASE_PASSWORD);\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        // Check if user exists and password matches\n        if ($user && $hashedPassword === $user['password']) {\n            // Log in successful, return user data\n            return [\n                'id' => $user['id'],\n                'username' => $user['username']\n            ];\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        echo \"Database error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\n$username = 'example_user';\n$password = 'my_secret_password';\n\ntry {\n    $userData = login($username, $password);\n    if ($userData) {\n        print_r($userData); // Output: Array ( [id] => 1 [username] => example_user )\n    } else {\n        echo \"Login failed\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
