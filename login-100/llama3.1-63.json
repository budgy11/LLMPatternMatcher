{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function using PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n**`login.php`**\n```php\n<?php\n// Configuration\nrequire_once 'config.php';\n\n// Function to validate and log in user\nfunction login($username, $password) {\n    global $db;\n\n    // Prepare statement for query\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $username);\n\n    try {\n        // Execute query\n        $stmt->execute();\n\n        // Fetch result\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($result && password_verify($password, $result['password'])) {\n            // User is authenticated, return user data\n            return $result;\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        // Handle database error\n        echo 'Database error: ' . $e->getMessage();\n    }\n\n    return null;\n}\n?>\n```\n\n**`config.php`**\n```php\n<?php\n// Database connection settings\n$dsn = 'mysql:host=localhost;dbname=your_database';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Establish database connection\n    $db = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```\n\n**Example Usage**\n```php\n<?php\nrequire_once 'login.php';\n\n// User submits login form with username and password\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Log in user using `login` function\n$userData = login($username, $password);\n\nif ($userData) {\n    // User is logged in, display success message or redirect to protected page\n    echo 'You are now logged in!';\n} else {\n    // Display error message for invalid username or password\n    echo 'Invalid username or password';\n}\n?>\n```\n\n**Security Notes**\n\n* Use prepared statements and parameterized queries to prevent SQL injection attacks.\n* Store passwords securely using `password_hash` and verify them using `password_verify`.\n* Avoid storing sensitive data (e.g., passwords, API keys) in plain text files. Instead, use environment variables or secure storage solutions.\n\nRemember to adjust the database connection settings in `config.php` to match your own setup. This example assumes a MySQL database with a `users` table containing columns for `username`, `password` (hashed), and other user data.", "code_blocks": ["```php\n<?php\n// Configuration\nrequire_once 'config.php';\n\n// Function to validate and log in user\nfunction login($username, $password) {\n    global $db;\n\n    // Prepare statement for query\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE username = :username\");\n    $stmt->bindParam(':username', $username);\n\n    try {\n        // Execute query\n        $stmt->execute();\n\n        // Fetch result\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($result && password_verify($password, $result['password'])) {\n            // User is authenticated, return user data\n            return $result;\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        // Handle database error\n        echo 'Database error: ' . $e->getMessage();\n    }\n\n    return null;\n}\n?>\n```", "```php\n<?php\n// Database connection settings\n$dsn = 'mysql:host=localhost;dbname=your_database';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Establish database connection\n    $db = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```", "```php\n<?php\nrequire_once 'login.php';\n\n// User submits login form with username and password\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Log in user using `login` function\n$userData = login($username, $password);\n\nif ($userData) {\n    // User is logged in, display success message or redirect to protected page\n    echo 'You are now logged in!';\n} else {\n    // Display error message for invalid username or password\n    echo 'Invalid username or password';\n}\n?>\n```"]}
