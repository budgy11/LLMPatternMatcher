{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This function uses prepared statements to prevent SQL injection.\n\n**db.php** (database connection file)\n-----------------------------------\n\n```php\n<?php\n  $servername = \"localhost\";\n  $username = \"your_username\";\n  $password = \"your_password\";\n  $dbname = \"your_database\";\n\n  try {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    // set the PDO error mode to exception\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch(PDOException $e) {\n    die(\"ERROR: \" . $e->getMessage());\n  }\n?>\n```\n\n**login.php** (login function file)\n-----------------------------------\n\n```php\n<?php\nrequire_once 'db.php';\n\nfunction login_user($email, $password) {\n  // Sanitize input\n  $email = htmlspecialchars($email);\n  $password = htmlspecialchars($password);\n\n  try {\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email AND password = :password\");\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n    $stmt->execute();\n\n    // Fetch results\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($result) {\n      return true; // Login successful\n    } else {\n      return false; // Incorrect email or password\n    }\n  } catch (PDOException $e) {\n    echo \"ERROR: \" . $e->getMessage();\n  }\n}\n?>\n```\n\n**example usage**\n-----------------\n\n```php\n<?php\nrequire_once 'login.php';\n\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (isset($_POST['submit'])) {\n  if (login_user($email, $password)) {\n    echo \"Login successful!\";\n  } else {\n    echo \"Incorrect email or password.\";\n  }\n}\n?>\n```\n\nIn the above example:\n\n1. We create a database connection file `db.php` that establishes a connection to our MySQL database.\n2. In the login function file `login.php`, we define a `login_user()` function that takes an email and password as input, sanitizes them, and then prepares a SQL query to select a user with matching credentials from our database. If a match is found, it returns `true` indicating successful login; otherwise, it returns `false`.\n3. In the example usage section, we demonstrate how to call the `login_user()` function using POST data from an HTML form.\n\nRemember to replace `your_username`, `your_password`, and `your_database` with your actual database credentials in the `db.php` file. Also, ensure that you have a `users` table in your database with columns for email and password.", "code_blocks": ["```php\n<?php\n  $servername = \"localhost\";\n  $username = \"your_username\";\n  $password = \"your_password\";\n  $dbname = \"your_database\";\n\n  try {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    // set the PDO error mode to exception\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch(PDOException $e) {\n    die(\"ERROR: \" . $e->getMessage());\n  }\n?>\n```", "```php\n<?php\nrequire_once 'db.php';\n\nfunction login_user($email, $password) {\n  // Sanitize input\n  $email = htmlspecialchars($email);\n  $password = htmlspecialchars($password);\n\n  try {\n    // Prepare SQL query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email AND password = :password\");\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n    $stmt->execute();\n\n    // Fetch results\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($result) {\n      return true; // Login successful\n    } else {\n      return false; // Incorrect email or password\n    }\n  } catch (PDOException $e) {\n    echo \"ERROR: \" . $e->getMessage();\n  }\n}\n?>\n```", "```php\n<?php\nrequire_once 'login.php';\n\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (isset($_POST['submit'])) {\n  if (login_user($email, $password)) {\n    echo \"Login successful!\";\n  } else {\n    echo \"Incorrect email or password.\";\n  }\n}\n?>\n```"]}
