{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP:\n\n**User Login Function**\n```php\n// File: auth.php\n\nfunction login_user($username, $password) {\n  // Database connection settings\n  $db_host = 'localhost';\n  $db_username = 'your_username';\n  $db_password = 'your_password';\n  $db_name = 'your_database';\n\n  // Connect to database\n  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ss\", $username, $password);\n\n  // Execute query\n  if ($stmt->execute()) {\n    $result = $stmt->get_result();\n    $user_data = $result->fetch_assoc();\n\n    // Check if user exists and password is correct\n    if (isset($user_data['id']) && $user_data['password'] === md5($password)) {\n      return array('success' => true, 'user_id' => $user_data['id']);\n    } else {\n      return array('success' => false, 'error' => 'Invalid username or password');\n    }\n  } else {\n    return array('success' => false, 'error' => 'Database error');\n  }\n\n  // Close database connection\n  $conn->close();\n}\n```\n**Example Usage**\n```php\n// File: index.php\n\nrequire_once 'auth.php';\n\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n  echo \"Login successful!\";\n  // Redirect to protected page or set session variables\n} else {\n  echo \"Error: \" . $result['error'];\n}\n```\nNote:\n\n* This example uses a simple `md5` hashing for password storage. In a real-world application, you should use a secure hashing algorithm like bcrypt.\n* The database connection settings are hardcoded in this example. In a production environment, consider using an external configuration file or environment variables to store sensitive data.\n* This is just a basic example and does not include any error handling or security measures beyond the basics (e.g., input validation, SQL injection protection).\n\nPlease adjust the code according to your specific needs and database schema.", "code_blocks": ["```php\n// File: auth.php\n\nfunction login_user($username, $password) {\n  // Database connection settings\n  $db_host = 'localhost';\n  $db_username = 'your_username';\n  $db_password = 'your_password';\n  $db_name = 'your_database';\n\n  // Connect to database\n  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"ss\", $username, $password);\n\n  // Execute query\n  if ($stmt->execute()) {\n    $result = $stmt->get_result();\n    $user_data = $result->fetch_assoc();\n\n    // Check if user exists and password is correct\n    if (isset($user_data['id']) && $user_data['password'] === md5($password)) {\n      return array('success' => true, 'user_id' => $user_data['id']);\n    } else {\n      return array('success' => false, 'error' => 'Invalid username or password');\n    }\n  } else {\n    return array('success' => false, 'error' => 'Database error');\n  }\n\n  // Close database connection\n  $conn->close();\n}\n```", "```php\n// File: index.php\n\nrequire_once 'auth.php';\n\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n  echo \"Login successful!\";\n  // Redirect to protected page or set session variables\n} else {\n  echo \"Error: \" . $result['error'];\n}\n```"]}
