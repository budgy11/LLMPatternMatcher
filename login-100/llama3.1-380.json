{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login functionality in PHP. We'll create two files: `login.php` and `config.php`. The `config.php` file will contain the database connection settings, while the `login.php` file will handle the user login logic.\n\n### config.php\n```php\n<?php\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```\n### login.php\n```php\n<?php\nrequire_once 'config.php';\n\n// Form data\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Query to check username and password\n$query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Login successful, retrieve user data\n    while ($row = $result->fetch_assoc()) {\n        $_SESSION['user_id'] = $row['id'];\n        $_SESSION['username'] = $row['username'];\n        header('Location: dashboard.php');\n        exit();\n    }\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Close database connection\n$conn->close();\n?>\n```\n**Note:** In a real-world application, you should never store passwords in plain text. Instead, use a secure method like hashing and salting.\n\n### Example Use Case\n\nCreate an HTML form to collect user input:\n```html\n<form action=\"login.php\" method=\"post\">\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\"><br><br>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Login</button>\n</form>\n```\n**Security Considerations:**\n\n1. **Validate user input**: Always validate user input to prevent SQL injection attacks.\n2. **Use prepared statements**: Instead of concatenating user input into queries, use prepared statements with placeholders for secure data exchange between PHP and MySQL.\n3. **Hash and salt passwords**: Store hashed and salted versions of passwords in the database instead of plain text.\n\nThis is a basic example to demonstrate the user login functionality in PHP. Make sure to adapt it to your specific needs and implement proper security measures to protect your application and users' data.", "code_blocks": ["```php\n<?php\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```", "```php\n<?php\nrequire_once 'config.php';\n\n// Form data\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n// Query to check username and password\n$query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n$result = $conn->query($query);\n\nif ($result->num_rows > 0) {\n    // Login successful, retrieve user data\n    while ($row = $result->fetch_assoc()) {\n        $_SESSION['user_id'] = $row['id'];\n        $_SESSION['username'] = $row['username'];\n        header('Location: dashboard.php');\n        exit();\n    }\n} else {\n    echo \"Invalid username or password.\";\n}\n\n// Close database connection\n$conn->close();\n?>\n```", null]}
