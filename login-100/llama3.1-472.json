{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This example uses prepared statements to prevent SQL injection attacks.\n\n### `config.php` (database connection settings)\n\n```php\n<?php\n  $server = 'your_server';\n  $username = 'your_username';\n  $password = 'your_password';\n  $dbname = 'your_database';\n\n  try {\n    $pdo = new PDO(\"mysql:host=$server;dbname=$dbname\", $username, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n  }\n?>\n```\n\n### `login.php` (user login function)\n\n```php\n<?php\n\n// Include the database connection settings\ninclude('config.php');\n\nif(isset($_POST['submit'])){\n  // Get form data\n  $username = $_POST['username'];\n  $password = md5($_POST['password']);\n\n  // SQL query to check if username and password match in the database\n  try {\n    $query = \"SELECT * FROM users WHERE username = :username AND password = :password\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query and store the result in a variable\n    $result = $stmt->execute();\n\n    if ($result) {\n      // If username and password match, redirect to dashboard page\n      header('Location: dashboard.php');\n      exit;\n    } else {\n      echo 'Invalid username or password';\n    }\n  } catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();\n  }\n}\n?>\n\n<!-- HTML form for user login -->\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" name=\"submit\" value=\"Login\">\n</form>\n```\n\n### `dashboard.php` (secured page that only logged-in users can access)\n\n```php\n<?php\n\n// Include the database connection settings\ninclude('config.php');\n\nif(isset($_SESSION['username'])){\n  // If user is already logged in, display dashboard content\n  echo 'Welcome, ' . $_SESSION['username'] . '! You are now logged in.';\n} else {\n  // If user is not logged in, redirect to login page\n  header('Location: login.php');\n  exit;\n}\n?>\n```\n\n### Security Notes:\n\n*   **Password hashing**: The `md5()` function is used to hash the password. However, this is not recommended for storing passwords as it's a weak algorithm. Consider using stronger algorithms like `password_hash()`.\n*   **SQL injection protection**: Prepared statements are used to prevent SQL injection attacks.\n*   **Session management**: Use sessions to store user data and keep track of logged-in users.\n\nThis example provides a basic login system with some security measures in place. However, it's essential to adapt the code according to your specific requirements and ensure that you're following best practices for secure coding.", "code_blocks": ["```php\n<?php\n  $server = 'your_server';\n  $username = 'your_username';\n  $password = 'your_password';\n  $dbname = 'your_database';\n\n  try {\n    $pdo = new PDO(\"mysql:host=$server;dbname=$dbname\", $username, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n  }\n?>\n```", "```php\n<?php\n\n// Include the database connection settings\ninclude('config.php');\n\nif(isset($_POST['submit'])){\n  // Get form data\n  $username = $_POST['username'];\n  $password = md5($_POST['password']);\n\n  // SQL query to check if username and password match in the database\n  try {\n    $query = \"SELECT * FROM users WHERE username = :username AND password = :password\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query and store the result in a variable\n    $result = $stmt->execute();\n\n    if ($result) {\n      // If username and password match, redirect to dashboard page\n      header('Location: dashboard.php');\n      exit;\n    } else {\n      echo 'Invalid username or password';\n    }\n  } catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();\n  }\n}\n?>\n\n<!-- HTML form for user login -->\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" name=\"submit\" value=\"Login\">\n</form>\n```", "```php\n<?php\n\n// Include the database connection settings\ninclude('config.php');\n\nif(isset($_SESSION['username'])){\n  // If user is already logged in, display dashboard content\n  echo 'Welcome, ' . $_SESSION['username'] . '! You are now logged in.';\n} else {\n  // If user is not logged in, redirect to login page\n  header('Location: login.php');\n  exit;\n}\n?>\n```"]}
