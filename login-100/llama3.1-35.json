{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example creates a basic user login function in PHP that securely stores user credentials and authenticates users.\n\n### Database Setup\n\nFor this example, we'll assume you have a MySQL database with the following table structure:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Code\n\n**`login.php`**\n```php\n<?php\n\nrequire_once 'database.php'; // Connect to database (see below)\n\nfunction login($username, $password) {\n  global $db;\n\n  // Prepare SQL query\n  $stmt = $db->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n\n  // Fetch user data\n  $user = $stmt->fetch();\n\n  if ($user && password_verify($password, $user['password'])) {\n    return true; // Login successful\n  } else {\n    return false; // Login failed\n  }\n}\n\nfunction register($username, $email, $password) {\n  global $db;\n\n  // Prepare SQL query\n  $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n  $stmt->execute();\n\n  return true; // User created successfully\n}\n\n// Example usage:\n$username = 'johnDoe';\n$password = 'mySecretPassword';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```\n\n**`database.php`**\n```php\n<?php\n\n// Connect to database using PDO\n$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');\n\n// Set error mode to exceptions\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n?>\n```\n### Explanation\n\nThis code defines two functions: `login()` and `register()`. The `login()` function takes a username and password as input, checks if the user exists in the database with the provided credentials, and returns `true` if successful. The `register()` function creates a new user account in the database.\n\nThe example usage at the end shows how to use these functions.\n\n### Security Notes\n\n*   This code uses prepared statements to prevent SQL injection attacks.\n*   Passwords are hashed using PHP's built-in `password_hash()` function, which is more secure than storing plaintext passwords.\n*   The `login()` function uses `password_verify()` to check if the provided password matches the stored hash.\n\nRemember to replace the placeholders (`localhost`, `mydatabase`, `myuser`, and `mypassword`) with your actual database credentials.", "code_blocks": [null, "```php\n<?php\n\nrequire_once 'database.php'; // Connect to database (see below)\n\nfunction login($username, $password) {\n  global $db;\n\n  // Prepare SQL query\n  $stmt = $db->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n\n  // Fetch user data\n  $user = $stmt->fetch();\n\n  if ($user && password_verify($password, $user['password'])) {\n    return true; // Login successful\n  } else {\n    return false; // Login failed\n  }\n}\n\nfunction register($username, $email, $password) {\n  global $db;\n\n  // Prepare SQL query\n  $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n  $stmt->execute();\n\n  return true; // User created successfully\n}\n\n// Example usage:\n$username = 'johnDoe';\n$password = 'mySecretPassword';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```", "```php\n<?php\n\n// Connect to database using PDO\n$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');\n\n// Set error mode to exceptions\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n?>\n```"]}
