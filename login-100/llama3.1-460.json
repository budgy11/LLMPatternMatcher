{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This function will check the username and password against a predefined array of users.\n\n**Function Code:**\n```php\nfunction login_user($username, $password) {\n  // Define our users array (in a real application, this would be stored securely in a database)\n  $users = [\n    \"admin\" => [\"password\" => \"123456\", \"access_level\" => \"superuser\"],\n    \"user1\" => [\"password\" => \"qwerty\", \"access_level\" => \"normal\"]\n  ];\n\n  // Check if the username exists\n  if (!array_key_exists($username, $users)) {\n    return [\"error\" => \"Invalid username or password\"];\n  }\n\n  // Check if the provided password matches the stored one\n  if ($password !== $users[$username][\"password\"]) {\n    return [\"error\" => \"Invalid username or password\"];\n  }\n\n  // If both checks pass, return a success message with user details\n  return [\n    \"success\" => true,\n    \"user_data\" => [\n      \"username\" => $username,\n      \"access_level\" => $users[$username][\"access_level\"]\n    ]\n  ];\n}\n```\n\n**Example Usage:**\n```php\n// Try to login as 'admin' with password '123456'\n$result = login_user(\"admin\", \"123456\");\nprint_r($result); // Should return [\"success\" => true, ...]\n\n// Try to login as 'non-existent-user' with any password\n$result = login_user(\"non-existent-user\", \"any_password\");\nprint_r($result); // Should return [\"error\" => \"Invalid username or password\"]\n\n// Try to login as 'admin' with an incorrect password\n$result = login_user(\"admin\", \"wrong_password\");\nprint_r($result); // Should return [\"error\" => \"Invalid username or password\"]\n```\n\n**Security Notes:**\n\n* In a real application, you should store passwords securely using a hashing algorithm (like bcrypt) and compare hashed input against stored hashes.\n* This example uses an array for simplicity; in production, use a secure database to store user credentials.\n* Always validate and sanitize user input to prevent SQL injection attacks or other security vulnerabilities.\n\n**API Documentation:**\n\n* **login_user($username, $password)**:\n\t+ Returns an associative array with the following structure:\n\t\t- `success`: (bool) true if login was successful, false otherwise\n\t\t- `error`: (string) error message if login failed\n\t\t- `user_data`: (array) user details (if successful login)", "code_blocks": ["```php\nfunction login_user($username, $password) {\n  // Define our users array (in a real application, this would be stored securely in a database)\n  $users = [\n    \"admin\" => [\"password\" => \"123456\", \"access_level\" => \"superuser\"],\n    \"user1\" => [\"password\" => \"qwerty\", \"access_level\" => \"normal\"]\n  ];\n\n  // Check if the username exists\n  if (!array_key_exists($username, $users)) {\n    return [\"error\" => \"Invalid username or password\"];\n  }\n\n  // Check if the provided password matches the stored one\n  if ($password !== $users[$username][\"password\"]) {\n    return [\"error\" => \"Invalid username or password\"];\n  }\n\n  // If both checks pass, return a success message with user details\n  return [\n    \"success\" => true,\n    \"user_data\" => [\n      \"username\" => $username,\n      \"access_level\" => $users[$username][\"access_level\"]\n    ]\n  ];\n}\n```", "```php\n// Try to login as 'admin' with password '123456'\n$result = login_user(\"admin\", \"123456\");\nprint_r($result); // Should return [\"success\" => true, ...]\n\n// Try to login as 'non-existent-user' with any password\n$result = login_user(\"non-existent-user\", \"any_password\");\nprint_r($result); // Should return [\"error\" => \"Invalid username or password\"]\n\n// Try to login as 'admin' with an incorrect password\n$result = login_user(\"admin\", \"wrong_password\");\nprint_r($result); // Should return [\"error\" => \"Invalid username or password\"]\n```"]}
