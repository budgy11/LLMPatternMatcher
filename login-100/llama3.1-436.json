{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThe following is an example of a basic user login function in PHP. This function uses a database to store usernames and passwords, but you should consider using a more secure method such as hashing and salting for storing passwords.\n\n### Database Schema\n\nFor this example, we'll assume the following database schema:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n### PHP Login Function\n\n```php\n/**\n * User login function.\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n *\n * @return bool True if the login was successful, false otherwise.\n */\nfunction loginUser($username, $password) {\n  // Connect to database\n  require_once 'database.php';\n  $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n  // Check if username and password are not empty\n  if (empty($username) || empty($password)) {\n    return false;\n  }\n\n  // Prepare SQL query to select user from database\n  $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->bindParam(':username', $username);\n\n  try {\n    // Execute query and get result\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    // Check if user exists\n    if (!$user) {\n      return false;\n    }\n\n    // Hash the provided password to compare with stored hash\n    $hashedPassword = hash('sha256', $password);\n\n    // Compare hashed passwords\n    if ($hashedPassword === $user['password']) {\n      return true; // Login successful\n    } else {\n      return false; // Password incorrect\n    }\n  } catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();\n    return false;\n  }\n\n  // Close database connection\n  $conn = null;\n\n  return false;\n}\n```\n\n### Example Usage\n\n```php\n$loginStatus = loginUser('testuser', 'password123');\nif ($loginStatus) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password.';\n}\n```\n\nRemember to replace `'database.php'` with the path to your database configuration file and adjust the `DB_HOST`, `DB_NAME`, `DB_USER`, and `DB_PASSWORD` constants according to your database settings.\n\n**Security Notes:**\n\n* This example uses a simple SHA-256 hash for password storage. In a real-world application, you should use a more secure method such as bcrypt or Argon2.\n* The database connection is stored in a separate file (`database.php`) for security and organization purposes. You should never store sensitive information like database credentials directly in your code.\n* Always validate user input data to prevent SQL injection attacks. This example uses prepared statements with parameterized queries, which helps mitigate this risk.", "code_blocks": [null, "```php\n/**\n * User login function.\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n *\n * @return bool True if the login was successful, false otherwise.\n */\nfunction loginUser($username, $password) {\n  // Connect to database\n  require_once 'database.php';\n  $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n\n  // Check if username and password are not empty\n  if (empty($username) || empty($password)) {\n    return false;\n  }\n\n  // Prepare SQL query to select user from database\n  $stmt = $conn->prepare('SELECT * FROM users WHERE username = :username');\n  $stmt->bindParam(':username', $username);\n\n  try {\n    // Execute query and get result\n    $stmt->execute();\n    $user = $stmt->fetch();\n\n    // Check if user exists\n    if (!$user) {\n      return false;\n    }\n\n    // Hash the provided password to compare with stored hash\n    $hashedPassword = hash('sha256', $password);\n\n    // Compare hashed passwords\n    if ($hashedPassword === $user['password']) {\n      return true; // Login successful\n    } else {\n      return false; // Password incorrect\n    }\n  } catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();\n    return false;\n  }\n\n  // Close database connection\n  $conn = null;\n\n  return false;\n}\n```", "```php\n$loginStatus = loginUser('testuser', 'password123');\nif ($loginStatus) {\n  echo 'Login successful!';\n} else {\n  echo 'Invalid username or password.';\n}\n```"]}
