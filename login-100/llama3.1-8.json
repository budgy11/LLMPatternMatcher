{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This code includes basic input validation, password hashing, and database interaction.\n\n### Prerequisites\n\n*   PHP 7.x\n*   MySQL (or other database system)\n*   A configured database with `users` table having columns: `id`, `username`, `password`, `email`\n\n### Code\n\n**login.php**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_error) {\n    die(\"Connection failed: \" . $mysqli->connect_error);\n}\n\nfunction login($username, $password) {\n    // Validate input\n    if (empty($username)) {\n        return 'Username cannot be empty';\n    }\n    if (empty($password)) {\n        return 'Password cannot be empty';\n    }\n\n    // Query database for user\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $mysqli->query($query);\n\n    if ($result->num_rows == 1) {\n        $user_data = $result->fetch_assoc();\n\n        // Hashed password comparison (for secure login)\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        } else {\n            return 'Invalid username or password';\n        }\n    } else {\n        return 'Username not found';\n    }\n\n    // Close database connection\n    $mysqli->close();\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login($username, $password);\n\nif ($result === true) {\n    echo \"Logged in successfully!\";\n} else {\n    echo $result;\n}\n\n?>\n```\n\n### Explanation\n\n1.  The script starts by defining the database configuration at the top.\n2.  It then connects to the database using `mysqli`.\n3.  If the connection fails, it dies and displays an error message.\n4.  The `login` function takes two parameters: `$username` and `$password`. It validates the input data (not empty) and checks if a user with the specified username exists in the database.\n5.  If a matching user is found, it uses PHP's built-in password verification function (`password_verify`) to securely compare the provided password with the stored hashed password. This ensures that passwords are stored securely, even if an attacker gains access to the database.\n6.  The example usage at the bottom shows how to call the `login` function with form data (`$_POST`) and displays a success message or error message based on the result.\n\n**Remember**\n\n*   Always sanitize user input data to prevent SQL injection attacks.\n*   Store passwords securely using a one-way hashing algorithm (like bcrypt) for secure login.\n*   Implement additional security measures, such as CAPTCHA, two-factor authentication, and rate limiting, depending on your application's requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_error) {\n    die(\"Connection failed: \" . $mysqli->connect_error);\n}\n\nfunction login($username, $password) {\n    // Validate input\n    if (empty($username)) {\n        return 'Username cannot be empty';\n    }\n    if (empty($password)) {\n        return 'Password cannot be empty';\n    }\n\n    // Query database for user\n    $query = \"SELECT * FROM users WHERE username = '$username'\";\n    $result = $mysqli->query($query);\n\n    if ($result->num_rows == 1) {\n        $user_data = $result->fetch_assoc();\n\n        // Hashed password comparison (for secure login)\n        if (password_verify($password, $user_data['password'])) {\n            return true;\n        } else {\n            return 'Invalid username or password';\n        }\n    } else {\n        return 'Username not found';\n    }\n\n    // Close database connection\n    $mysqli->close();\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login($username, $password);\n\nif ($result === true) {\n    echo \"Logged in successfully!\";\n} else {\n    echo $result;\n}\n\n?>\n```"]}
