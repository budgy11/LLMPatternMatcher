{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This example uses a database to store user credentials.\n\n**Database Schema:**\n--------------------\n\nFor this example, we will assume a MySQL database schema with the following table:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**Login Function:**\n------------------\n\n```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbUsername = 'root';\n$dbPassword = '';\n$dbName = 'mydatabase';\n\n// Connect to the database\n$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login($username, $password) {\n  global $conn;\n\n  // Prepare SQL query to select the user\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username=?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute the query and get results\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Get user data from database\n    $row = $result->fetch_assoc();\n    \n    // Check password\n    if (password_verify($password, $row['password'])) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\n  // Close statement and connection\n  $stmt->close();\n  $conn->close();\n\n}\n\n// Example usage:\n$username = 'testuser';\n$password = 'testpass';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```\n\n**Security Notes:**\n\n1. **Password Hashing:** The function uses `password_verify()` to compare the provided password with the hashed password stored in the database. Make sure to use a secure hashing algorithm like bcrypt when storing passwords.\n2. **SQL Injection Prevention:** The function uses prepared statements and parameterized queries to prevent SQL injection attacks.\n\n**Commit Message Guidelines:**\n-----------------------------\n\n* Use a clear, concise commit message that summarizes the changes made.\n* Follow standard professional guidelines for commit messages.\n\nExample commit message:\n\n```bash\ngit add .\ngit commit -m \"Added user login function with password hashing and SQL prepared statements\"\n```\n\nNote: This example is for illustration purposes only. Make sure to adapt it to your specific use case and follow best practices for secure coding.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbUsername = 'root';\n$dbPassword = '';\n$dbName = 'mydatabase';\n\n// Connect to the database\n$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login($username, $password) {\n  global $conn;\n\n  // Prepare SQL query to select the user\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username=?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute the query and get results\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows > 0) {\n    // Get user data from database\n    $row = $result->fetch_assoc();\n    \n    // Check password\n    if (password_verify($password, $row['password'])) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\n  // Close statement and connection\n  $stmt->close();\n  $conn->close();\n\n}\n\n// Example usage:\n$username = 'testuser';\n$password = 'testpass';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```", null]}
