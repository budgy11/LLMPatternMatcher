{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the login form data\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Connect to the database\n  $conn = new mysqli($servername, $username, $password, $dbname);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // SQL query to check the username and password\n  $sql = \"SELECT id, username, password FROM users WHERE username = '$username'\";\n  $result = $conn->query($sql);\n\n  // Check if the user exists\n  if ($result->num_rows == 1) {\n    // Fetch the user data\n    $row = $result->fetch_assoc();\n\n    // Verify the password\n    if (password_verify($password, $row[\"password\"])) {\n      // Login successful\n      // Set session variables to store the user's information\n      session_start();\n      $_SESSION[\"user_id\"] = $row[\"id\"];\n      $_SESSION[\"username\"] = $row[\"username\"];\n      echo \"Login successful! <a href='welcome.php'>Welcome, \" . $_SESSION[\"username\"] . \"</a>\";\n    } else {\n      echo \"Incorrect password.\";\n    }\n  } else {\n    echo \"User not found.\";\n  }\n\n  $conn->close();\n}\n\n// Form HTML\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" required><br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```\n\n**Explanation:**\n\n1. **Database Connection:**\n   - `$servername`, `$username`, `$password`, `$dbname`:  Replace these placeholders with your actual database credentials.\n   - `new mysqli(...)`: Creates a MySQLi connection object.  `mysqli` is a more secure alternative to the older `mysql` extension.\n\n2. **Form Submission Check:**\n   - `$_SERVER[\"REQUEST_METHOD\"] == \"POST\"`: This checks if the form has been submitted using the POST method.\n\n3. **Data Retrieval:**\n   - `$_POST[\"username\"]`, `$_POST[\"password\"]`: Retrieves the values entered in the form fields.\n   - `htmlspecialchars($_SERVER[\"PHP_SELF\"])`: This is crucial for security.  It ensures that the form action attribute contains the correct path to the current PHP script, preventing potential Cross-Site Scripting (XSS) vulnerabilities.\n\n4. **SQL Query:**\n   - `SELECT id, username, password FROM users WHERE username = '$username'`: This SQL query selects the `id`, `username`, and `password` from the `users` table where the `username` matches the value entered in the form.  **Important:**  The single quotes around `$username` are necessary to treat the value as a string, especially if the username contains special characters.\n\n5. **User Existence Check:**\n   - `$result->num_rows == 1`:  This checks if the query returned one row.  If it returns 0, the user doesn't exist. If it returns more than one row, there's likely a problem in your database schema.\n\n6. **Password Verification:**\n   - `password_verify($password, $row[\"password\"])`:  This is the **most important** part for security.  Instead of directly comparing the entered password with the stored password, `password_verify()` uses password hashing.\n     - It first uses `password_hash()` (which you should use when *storing* the password) to hash the entered password.\n     - `password_verify()` then checks if the hashed entered password matches the hashed password stored in the database. This prevents attackers from using pre-computed hash tables (rainbow tables) to crack passwords.\n\n7. **Session Management:**\n   - `session_start()`:  Starts a PHP session.  Sessions allow you to store information about the user on the server.\n   - `$_SESSION[\"user_id\"] = $row[\"id\"];` and `$_SESSION[\"username\"] = $row[\"username\"];`:  Stores the user's ID and username in the session.  These are used to identify the user across multiple pages.\n\n8. **HTML Form:**\n   - The HTML code creates a simple form with fields for username and password, and a submit button.\n\n**How to use it and important security notes:**\n\n1. **Database Setup:**\n   - Create a database named `your_database_name`.\n   - Create a table named `users` with at least the following columns:\n     - `id` (INT, PRIMARY KEY, AUTO_INCREMENT)\n     - `username` (VARCHAR)\n     - `password` (VARCHAR)\n\n2. **Store Passwords Securely (Hashing):**\n\n   - **Never store passwords in plain text!** You *must* hash them before storing them in the database.\n   - Add this to your `users` table creation SQL:\n     ```sql\n     ALTER TABLE users\n     ADD COLUMN password VARCHAR(255) DEFAULT NULL;\n\n     ALTER TABLE users\n     MODIFY COLUMN password VARCHAR(255) DEFAULT NULL;\n     ```\n   - Add this code to the login function (before the SQL query):\n     ```php\n     // Hash the password before storing it\n     $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n     // SQL query to check the username and password\n     $sql = \"SELECT id, username, password FROM users WHERE username = '$username'\";\n     $result = $conn->query($sql);\n     ```\n\n3. **Error Handling:**\n   - Add more robust error handling.  Check for database errors, invalid input, etc.  Display informative error messages to the user.\n\n4. **Input Validation:**\n   - Validate the username and password before the query. Check for:\n     - Empty fields\n     - Minimum length requirements\n     - Allowed characters (e.g., alphanumeric only)\n\n5. **Security Best Practices:**\n   - **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server.  This protects user credentials in transit.\n   - **Sanitize Input:** Always sanitize user input to prevent SQL injection attacks. The `mysqli` extension provides prepared statements, which can prevent SQL injection.  However, the example uses a simple query for demonstration purposes.  For production code, **always** use prepared statements.\n   - **Limit Session Lifetime:**  Set a reasonable expiration time for the user's session.\n   - **Logout Function:**  Implement a logout function to clear the session variables and log the user out.  This is usually done by setting `session_destroy()` and then redirecting to the login page.\n   - **Use Prepared Statements:**  Using prepared statements is the *best* way to prevent SQL injection.\n\n**Example of using prepared statements (recommended):**\n\n```php\n<?php\n\n// ... (Database connection details)\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $username = $_POST[\"username\"];\n    $password = $_POST[\"password\"];\n\n    $conn = new mysqli($servername, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepared statement\n    $stmt = $conn->prepare(\"SELECT id, username, password FROM users WHERE username = ?\");\n    $stmt->bind_param(\"s\", $username);  // \"s\" indicates a string parameter\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n        $row = $result->fetch_assoc();\n        if (password_verify($password, $row[\"password\"])) {\n            session_start();\n            $_SESSION[\"user_id\"] = $row[\"id\"];\n            $_SESSION[\"username\"] = $row[\"username\"];\n            echo \"Login successful! <a href='welcome.php'>Welcome, \" . $_SESSION[\"username\"] . \"</a>\";\n        } else {\n            echo \"Incorrect password.\";\n        }\n    } else {\n        echo \"User not found.\";\n    }\n\n    $stmt->close();\n    $conn->close();\n}\n?>\n```\n\nBy using prepared statements, you significantly reduce the risk of SQL injection attacks.  `bind_param()` handles the proper quoting and escaping of the input, making your code much more secure.\nRemember to replace the placeholder values with your actual database credentials and table names.  Also, always prioritize security best practices to protect your application and user data.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the login form data\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Connect to the database\n  $conn = new mysqli($servername, $username, $password, $dbname);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // SQL query to check the username and password\n  $sql = \"SELECT id, username, password FROM users WHERE username = '$username'\";\n  $result = $conn->query($sql);\n\n  // Check if the user exists\n  if ($result->num_rows == 1) {\n    // Fetch the user data\n    $row = $result->fetch_assoc();\n\n    // Verify the password\n    if (password_verify($password, $row[\"password\"])) {\n      // Login successful\n      // Set session variables to store the user's information\n      session_start();\n      $_SESSION[\"user_id\"] = $row[\"id\"];\n      $_SESSION[\"username\"] = $row[\"username\"];\n      echo \"Login successful! <a href='welcome.php'>Welcome, \" . $_SESSION[\"username\"] . \"</a>\";\n    } else {\n      echo \"Incorrect password.\";\n    }\n  } else {\n    echo \"User not found.\";\n  }\n\n  $conn->close();\n}\n\n// Form HTML\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" required><br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```", null]}
