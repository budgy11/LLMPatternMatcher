{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis is an example of a basic user login function written in PHP. It uses a database to store usernames and passwords, but for security reasons, we'll use password hashing instead of storing plain text passwords.\n\n### Database Schema\n\nWe'll assume you have a MySQL database with the following schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n### PHP Code\n```php\n// config.php (database connection settings)\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\n// login.php (login function)\nrequire_once('config.php');\n\nfunction login($username, $password) {\n  global $dbHost, $dbUsername, $dbPassword, $dbName;\n\n  // Connect to database\n  $conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare and execute query to retrieve user data\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows == 0) {\n    return false; // Invalid username\n  }\n\n  // Retrieve user data from result set\n  $userData = $result->fetch_assoc();\n\n  // Hash password and compare with input password\n  $passwordHash = hash('sha256', $password);\n\n  if ($passwordHash === $userData['password']) {\n    return true; // Login successful\n  } else {\n    return false; // Incorrect password\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```\n### Security Notes\n\n* Always use a secure method to store and retrieve passwords, such as password hashing.\n* Never store plain text passwords in your database.\n* Use prepared statements to prevent SQL injection attacks.\n* Hash passwords using a secure algorithm like SHA-256.\n\nThis is a basic example of a user login function. You should adapt it to your specific needs and security requirements. Additionally, you may want to consider implementing additional features such as password reset, registration, and account management.", "code_blocks": [null, "```php\n// config.php (database connection settings)\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\n// login.php (login function)\nrequire_once('config.php');\n\nfunction login($username, $password) {\n  global $dbHost, $dbUsername, $dbPassword, $dbName;\n\n  // Connect to database\n  $conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare and execute query to retrieve user data\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows == 0) {\n    return false; // Invalid username\n  }\n\n  // Retrieve user data from result set\n  $userData = $result->fetch_assoc();\n\n  // Hash password and compare with input password\n  $passwordHash = hash('sha256', $password);\n\n  if ($passwordHash === $userData['password']) {\n    return true; // Login successful\n  } else {\n    return false; // Incorrect password\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n// Example usage:\n$username = 'your_username';\n$password = 'your_password';\n\nif (login($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```"]}
