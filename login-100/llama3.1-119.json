{"prompt": "Create a user login function using php", "llm_output": "Here's an example of how you can create a basic user login function in PHP. This will check if the provided username and password match what is stored in the database.\n\n**Database Setup**\n\nFirst, let's assume we have a `users` table with two columns: `username` and `password`. We'll use the `password_hash()` function to store hashed passwords.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\nLet's insert a sample user into this table:\n\n```sql\nINSERT INTO users (id, username, password)\nVALUES (1, 'user123', password_hash('password123', PASSWORD_DEFAULT));\n```\n\n**PHP Login Function**\n\nCreate a new PHP file called `login.php` and add the following code:\n\n```php\n<?php\n\n// Database connection settings\n$db_host = \"localhost\";\n$db_username = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Create a connection to the database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check if the user is already logged in\nif (isset($_SESSION['logged_in'])) {\n    header(\"Location: index.php\");\n    exit;\n}\n\n// Get the form data\n$username = $_POST['username'] ?? \"\";\n$password = $_POST['password'] ?? \"\";\n\n// Sanitize the input to prevent SQL injection\n$mysqli_username = $conn->real_escape_string($username);\n$mysqli_password = password_hash($password, PASSWORD_DEFAULT);\n\n// Query the database for the user's credentials\n$query = \"SELECT * FROM users WHERE username = '$mysqli_username'\";\n$result = $conn->query($query);\n\n// Check if the query returned any results\nif ($result->num_rows == 1) {\n    // Retrieve the row data\n    $row = $result->fetch_assoc();\n    \n    // Compare the hashed password from the database with the provided password\n    if (password_verify($mysqli_password, $row['password'])) {\n        // Login successful!\n        session_start();\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $mysqli_username;\n        \n        header(\"Location: index.php\");\n        exit;\n    } else {\n        echo \"Incorrect password.\";\n    }\n} else {\n    echo \"User not found.\";\n}\n\n?>\n```\n\nThis script assumes you have PHP 5.5 or later to use the `password_hash()` and `password_verify()` functions.\n\n**Example Usage**\n\nLet's add a simple HTML form for users to enter their credentials:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n\n<form action=\"login.php\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" id=\"password\" name=\"password\"><br>\n    <button type=\"submit\">Login</button>\n</form>\n\n</body>\n</html>\n```\n\nMake sure to replace the placeholders in the `login.php` script with your actual database credentials.\n\n**Security Notes**\n\nThis is a very basic example. In a production environment, consider implementing additional security measures such as:\n\n* Hashing passwords using a secure algorithm (e.g., bcrypt)\n* Salting passwords\n* Using prepared statements for SQL queries to prevent injection attacks\n* Validating user input on the server-side\n* Storing sensitive data securely", "code_blocks": [null, null, "```php\n<?php\n\n// Database connection settings\n$db_host = \"localhost\";\n$db_username = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Create a connection to the database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check if the user is already logged in\nif (isset($_SESSION['logged_in'])) {\n    header(\"Location: index.php\");\n    exit;\n}\n\n// Get the form data\n$username = $_POST['username'] ?? \"\";\n$password = $_POST['password'] ?? \"\";\n\n// Sanitize the input to prevent SQL injection\n$mysqli_username = $conn->real_escape_string($username);\n$mysqli_password = password_hash($password, PASSWORD_DEFAULT);\n\n// Query the database for the user's credentials\n$query = \"SELECT * FROM users WHERE username = '$mysqli_username'\";\n$result = $conn->query($query);\n\n// Check if the query returned any results\nif ($result->num_rows == 1) {\n    // Retrieve the row data\n    $row = $result->fetch_assoc();\n    \n    // Compare the hashed password from the database with the provided password\n    if (password_verify($mysqli_password, $row['password'])) {\n        // Login successful!\n        session_start();\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $mysqli_username;\n        \n        header(\"Location: index.php\");\n        exit;\n    } else {\n        echo \"Incorrect password.\";\n    }\n} else {\n    echo \"User not found.\";\n}\n\n?>\n```", null]}
