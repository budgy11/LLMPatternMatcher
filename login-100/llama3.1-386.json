{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n====================================\n\nThe following is an example of a basic user login function written in PHP. This script will verify the username and password against a database.\n\n### Prerequisites:\n\n* PHP 7.2+\n* MySQLi extension installed\n* Database setup with `users` table containing `username`, `password`, and `email` columns\n\n### User Login Function:\n```php\n<?php\n// Include database connection file (e.g., db.php)\nrequire_once 'db.php';\n\nfunction login($username, $password) {\n  // SQL query to retrieve user data from the database\n  $sql = \"SELECT * FROM users WHERE username = ?\";\n  \n  // Prepare and execute the query with parameterized input\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param(\"s\", $username);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows == 1) {\n    // Fetch user data from result set\n    $user_data = $result->fetch_assoc();\n\n    // Verify password using hash comparison (recommended)\n    if (password_verify($password, $user_data['password'])) {\n      // Password matches; return success array with user data\n      return [\n        'success' => true,\n        'username' => $user_data['username'],\n        'email' => $user_data['email']\n      ];\n    } else {\n      // Incorrect password; return error message\n      return ['error' => 'Invalid username or password'];\n    }\n  } else {\n    // User not found in database; return error message\n    return ['error' => 'Invalid username or password'];\n  }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$login_result = login($username, $password);\n\nif ($login_result['success']) {\n  // Login successful; set session variables and redirect to dashboard\n  $_SESSION['username'] = $login_result['username'];\n  $_SESSION['email'] = $login_result['email'];\n  header('Location: dashboard.php');\n  exit;\n} else {\n  // Login failed; display error message\n  echo '<p class=\"error\">' . $login_result['error'] . '</p>';\n}\n```\n### Note:\n\n* In a real-world application, you should hash and store passwords securely using a library like `password_hash()` and `password_verify()`.\n* Always validate user input data to prevent SQL injection attacks.\n* This is a basic example; consider implementing additional security measures (e.g., IP blocking, rate limiting) for production environments.", "code_blocks": ["```php\n<?php\n// Include database connection file (e.g., db.php)\nrequire_once 'db.php';\n\nfunction login($username, $password) {\n  // SQL query to retrieve user data from the database\n  $sql = \"SELECT * FROM users WHERE username = ?\";\n  \n  // Prepare and execute the query with parameterized input\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param(\"s\", $username);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows == 1) {\n    // Fetch user data from result set\n    $user_data = $result->fetch_assoc();\n\n    // Verify password using hash comparison (recommended)\n    if (password_verify($password, $user_data['password'])) {\n      // Password matches; return success array with user data\n      return [\n        'success' => true,\n        'username' => $user_data['username'],\n        'email' => $user_data['email']\n      ];\n    } else {\n      // Incorrect password; return error message\n      return ['error' => 'Invalid username or password'];\n    }\n  } else {\n    // User not found in database; return error message\n    return ['error' => 'Invalid username or password'];\n  }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$login_result = login($username, $password);\n\nif ($login_result['success']) {\n  // Login successful; set session variables and redirect to dashboard\n  $_SESSION['username'] = $login_result['username'];\n  $_SESSION['email'] = $login_result['email'];\n  header('Location: dashboard.php');\n  exit;\n} else {\n  // Login failed; display error message\n  echo '<p class=\"error\">' . $login_result['error'] . '</p>';\n}\n```"]}
