{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database connection details - REPLACE WITH YOUR ACTUAL CREDENTIALS\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n// Function to handle user login\nfunction loginUser($username, $password) {\n  // 1. Database connection\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // 2. SQL Query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\"; \n  // Use prepared statements to prevent SQL injection\n  $stmt = $conn->prepare($sql); \n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" means two strings\n\n  // 3. Execute the query\n  if ($stmt->execute() === TRUE) {\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n      $row = $result->fetch_assoc();\n      // 4.  Authentication successful - Now you can use the user's data\n      $_SESSION['user_id'] = $row['id']; // Store user ID in session\n      $_SESSION['username'] = $username;\n\n      return true; // Login successful\n    } else {\n      return false; // No user found or incorrect password\n    }\n  } else {\n    // Query error\n    return false;\n  }\n\n  // 5. Close connection\n  $stmt->close();\n  $conn->close();\n}\n\n// Example Usage (in your HTML form)\n\n// 1. Form Input Handling (Example - in your HTML form)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // 2. Validate Input (Important - always validate user input!)\n  if (empty($username) || empty($password)) {\n    $error = \"Username and password are required!\";\n  } else {\n    // 3. Call the loginUser function\n    $login_result = loginUser($username, $password);\n\n    if ($login_result) {\n      // 4. Successful Login - Redirect to a protected page\n      header(\"Location: protected_page.php\"); // Replace with your protected page\n      exit();\n    } else {\n      $error = \"Invalid username or password.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Prepared Statements (SQL Injection Prevention):**  The code now uses prepared statements (`$conn->prepare()`, `$stmt->bind_param()`). This is *absolutely crucial* to prevent SQL injection attacks.  Never directly embed user input into SQL queries.  Prepared statements automatically handle escaping and sanitization.\n* **Error Handling:**  Includes basic error handling for the database connection and query execution.  More robust error handling would be needed for a production environment (logging, more detailed error messages).\n* **Validation:**  The example includes basic validation to check if the username and password fields are empty.  *Always* validate user input on the server-side, *before* passing it to the database.  You should also add more comprehensive validation (e.g., password complexity, email format).\n* **Session Management:** Stores the `user_id` and `username` in the `$_SESSION` array. This allows you to track the user across multiple pages.\n* **Clearer Structure and Comments:** The code is well-structured and includes comments to explain each step.\n* **`exit()` after redirect:** Calls `exit()` after the `header(\"Location: ...\")` redirect.  This prevents further processing of the script.\n* **`$_SERVER[\"REQUEST_METHOD\"] == \"POST\"`:**  Ensures the login code only executes when the form has been submitted via POST.\n* **`num_rows` check:**  Checks the number of rows returned by the query.  This confirms that only one user record was found (which is what we expect for a successful login).\n* **Security Considerations (Important!)**\n    * **Password Hashing:**  *Never* store passwords in plain text.  You *must* hash passwords before storing them in the database. Use a strong hashing algorithm like `password_hash()` in PHP. The example does *not* include this for brevity, but it's an essential step for security.\n    * **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server, protecting passwords and other sensitive data in transit.\n    * **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n    * **Regular Security Audits:**  Regularly review your code and security practices.\n\nHow to Use:\n\n1. **Replace Placeholders:**\n   - Update `$db_host`, `$db_name`, `$db_user`, and `$db_password` with your actual database credentials.\n\n2. **Create a `users` Table:**\n   ```sql\n   CREATE TABLE users (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       username VARCHAR(255) NOT NULL UNIQUE,\n       password VARCHAR(255) NOT NULL,  -- Store hashed passwords\n       email VARCHAR(255)\n   );\n   ```\n\n3. **Hashing Passwords:**  This is the *most critical* step.  Before running the login, you *must* hash passwords:\n\n   ```php\n   // Example - generate a salt and hash password\n   $password = $_POST[\"password\"];  // Get the password from the form\n   $salt = \"your_secret_salt\";  // Generate a random salt\n\n   $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n   // Now, when inserting a new user, you'll store $hashed_password in the database\n   // and $salt in a separate field (e.g., a 'salt' column in the 'users' table).\n\n   // In your insert query, include the salt:\n   // INSERT INTO users (username, password, salt) VALUES (?, ?, ?)\n   ```\n\n4. **Run the Code:**  Place the PHP code in a file (e.g., `login.php`) and access it through your web browser.\n\n5. **Implement `protected_page.php`:** Create an HTML file (e.g., `protected_page.php`) to represent your protected page, and modify the `header(\"Location: protected_page.php\")` line to point to the correct URL.\n\nThis improved example provides a much more secure and robust foundation for building a user login system in PHP.  Remember that security is an ongoing process, and you should continually review and update your practices.  Always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details - REPLACE WITH YOUR ACTUAL CREDENTIALS\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n// Function to handle user login\nfunction loginUser($username, $password) {\n  // 1. Database connection\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // 2. SQL Query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\"; \n  // Use prepared statements to prevent SQL injection\n  $stmt = $conn->prepare($sql); \n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" means two strings\n\n  // 3. Execute the query\n  if ($stmt->execute() === TRUE) {\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n      $row = $result->fetch_assoc();\n      // 4.  Authentication successful - Now you can use the user's data\n      $_SESSION['user_id'] = $row['id']; // Store user ID in session\n      $_SESSION['username'] = $username;\n\n      return true; // Login successful\n    } else {\n      return false; // No user found or incorrect password\n    }\n  } else {\n    // Query error\n    return false;\n  }\n\n  // 5. Close connection\n  $stmt->close();\n  $conn->close();\n}\n\n// Example Usage (in your HTML form)\n\n// 1. Form Input Handling (Example - in your HTML form)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // 2. Validate Input (Important - always validate user input!)\n  if (empty($username) || empty($password)) {\n    $error = \"Username and password are required!\";\n  } else {\n    // 3. Call the loginUser function\n    $login_result = loginUser($username, $password);\n\n    if ($login_result) {\n      // 4. Successful Login - Redirect to a protected page\n      header(\"Location: protected_page.php\"); // Replace with your protected page\n      exit();\n    } else {\n      $error = \"Invalid username or password.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```"]}
