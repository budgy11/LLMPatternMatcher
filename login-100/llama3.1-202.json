{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a user login function using PHP, with input validation and password hashing. This code assumes you have a `users` table in your database with the following structure:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n\n**login.php**\n```php\n<?php\n\n// Configuration\n$database = 'your_database_name';\n$username = 'your_database_username';\n$password = 'your_database_password';\n\n// Connect to database\n$conn = new mysqli($database, $username, $password);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Input validation\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Password hashing\n    $password_hash = password_hash($password, PASSWORD_DEFAULT);\n\n    // SQL query to select user from database\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password_hash = '$password_hash'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        // User found, log them in\n        session_start();\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $username;\n\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid username or password.\";\n    }\n} else {\n    echo \"Please enter both username and password.\";\n}\n\n// Close connection to database\n$conn->close();\n\n?>\n```\n\n**Usage**\n---------\n\n1. Save this code in a file called `login.php`.\n2. Replace `'your_database_name'`, `'your_database_username'`, and `'your_database_password'` with your actual MySQL database credentials.\n3. Submit a POST request to the `login.php` script with both `username` and `password` fields filled.\n\n**Example Use Cases**\n--------------------\n\n1. **Login Form**\n\n   ```html\n<form action=\"login.php\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Login\">\n</form>\n```\n\n2. **Security Note**\n\n   * Always use prepared statements to prevent SQL injection attacks.\n   * Use a secure password hashing algorithm like `password_hash()` for storing passwords.\n   * Validate user input to prevent any potential security vulnerabilities.\n\nThis example demonstrates a basic user login functionality in PHP, along with essential features like input validation and password hashing. However, this is not intended as production-ready code; always follow best practices for web development and consult official documentation for additional security measures.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$database = 'your_database_name';\n$username = 'your_database_username';\n$password = 'your_database_password';\n\n// Connect to database\n$conn = new mysqli($database, $username, $password);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Input validation\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Password hashing\n    $password_hash = password_hash($password, PASSWORD_DEFAULT);\n\n    // SQL query to select user from database\n    $sql = \"SELECT * FROM users WHERE username = '$username' AND password_hash = '$password_hash'\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        // User found, log them in\n        session_start();\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $username;\n\n        echo \"Login successful!\";\n    } else {\n        echo \"Invalid username or password.\";\n    }\n} else {\n    echo \"Please enter both username and password.\";\n}\n\n// Close connection to database\n$conn->close();\n\n?>\n```", null]}
