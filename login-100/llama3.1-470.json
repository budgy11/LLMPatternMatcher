{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a simple user login system in PHP:\n\n**Note:** This is a basic example and should not be used for production without proper security measures.\n\n```php\n<?php\n\n// Configuration settings\n$database = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Database connection function\nfunction connectDatabase() {\n    try {\n        $dsn = \"mysql:host=localhost;dbname=$database\";\n        $pdo = new PDO($dsn, $username, $password);\n        return $pdo;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit;\n    }\n}\n\n// User login function\nfunction loginUser($email, $password) {\n    try {\n        // Connect to database\n        $pdo = connectDatabase();\n\n        // Prepare SQL query\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n\n        // Execute query\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        // Check password\n        if ($user && crypt($password, $user['password']) == $user['password']) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo 'Login failed: ' . $e->getMessage();\n        exit;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'your_password';\n\nif (loginUser($email, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid email or password.';\n}\n?>\n```\n\n**Explanation:**\n\n*   We use the PDO extension to connect to a MySQL database.\n*   The `connectDatabase()` function establishes a connection to the database and returns a PDO object.\n*   The `loginUser()` function takes an email and password as input, attempts to fetch the user from the database based on the provided email, and checks if the password is correct using the crypt() function. If both conditions are met, it returns true; otherwise, it returns false.\n\n**Security Considerations:**\n\n*   Always use prepared statements with parameter binding to prevent SQL injection attacks.\n*   Store passwords securely by hashing them with a suitable algorithm (e.g., bcrypt) before storing them in the database. In this example, we're using a basic crypt() function for demonstration purposes only.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$database = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Database connection function\nfunction connectDatabase() {\n    try {\n        $dsn = \"mysql:host=localhost;dbname=$database\";\n        $pdo = new PDO($dsn, $username, $password);\n        return $pdo;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit;\n    }\n}\n\n// User login function\nfunction loginUser($email, $password) {\n    try {\n        // Connect to database\n        $pdo = connectDatabase();\n\n        // Prepare SQL query\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n        $stmt->bindParam(':email', $email);\n\n        // Execute query\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        // Check password\n        if ($user && crypt($password, $user['password']) == $user['password']) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo 'Login failed: ' . $e->getMessage();\n        exit;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'your_password';\n\nif (loginUser($email, $password)) {\n    echo 'Login successful!';\n} else {\n    echo 'Invalid email or password.';\n}\n?>\n```"]}
