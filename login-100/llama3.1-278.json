{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates how to create a basic user login function using PHP.\n\n**Database Setup (Assuming MySQL)**\n------------------------------------\n\nFor this example, we'll assume you have a database named `users` with the following table structure:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n**User Login Function**\n----------------------\n\nCreate a file named `login.php` and add the following code:\n```php\n<?php\n\n// Configuration variables (update as needed)\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'users';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user() {\n  global $conn;\n\n  // Get user input\n  if (!isset($_POST['username']) || !isset($_POST['password'])) {\n    return array('error' => 'Missing required fields');\n  }\n\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  // Query database for user\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Check password (in a real application, use a secure password hashing algorithm)\n    while ($row = $result->fetch_assoc()) {\n      if ($password == $row['password']) {\n        // User exists and password is correct\n        return array('success' => true, 'message' => 'User logged in successfully');\n      }\n    }\n  }\n\n  // Return error message\n  return array('error' => 'Invalid username or password');\n}\n\nif (isset($_POST['login'])) {\n  $response = login_user();\n  echo json_encode($response);\n}\n```\n\n**Example Usage**\n-----------------\n\nCreate an HTML form to submit user credentials:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n  <form id=\"login-form\" method=\"post\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <button type=\"submit\" name=\"login\">Login</button>\n  </form>\n\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n  <script>\n    $('#login-form').submit(function(e) {\n      e.preventDefault();\n      $.post('login.php', $(this).serialize(), function(data) {\n        console.log(data);\n        if (data.success === true) {\n          // User logged in successfully\n          window.location.href = 'dashboard.html';\n        } else {\n          alert(data.error);\n        }\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\nThis example demonstrates a basic user login function using PHP. Note that this is not intended for production use, as it stores passwords in plain text and lacks proper security measures (e.g., password hashing). In a real-world application, you should use a secure password hashing algorithm like bcrypt or Argon2.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables (update as needed)\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'users';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user() {\n  global $conn;\n\n  // Get user input\n  if (!isset($_POST['username']) || !isset($_POST['password'])) {\n    return array('error' => 'Missing required fields');\n  }\n\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  // Query database for user\n  $query = \"SELECT * FROM users WHERE username = '$username'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Check password (in a real application, use a secure password hashing algorithm)\n    while ($row = $result->fetch_assoc()) {\n      if ($password == $row['password']) {\n        // User exists and password is correct\n        return array('success' => true, 'message' => 'User logged in successfully');\n      }\n    }\n  }\n\n  // Return error message\n  return array('error' => 'Invalid username or password');\n}\n\nif (isset($_POST['login'])) {\n  $response = login_user();\n  echo json_encode($response);\n}\n```", null]}
