{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP:\n\n```php\n<?php\n\n// Define database connection credentials\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to the database\n$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n}\n\nfunction login_user($username, $password) {\n    // Prepare SQL query\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n    \n    // Bind parameters\n    $stmt->bind_param(\"s\", $username);\n    \n    // Execute query\n    $stmt->execute();\n    \n    // Get result\n    $result = $stmt->get_result();\n    \n    // If user exists and password is correct\n    if ($result->num_rows > 0) {\n        // Fetch user data\n        $row = $result->fetch_assoc();\n        \n        // Check if the hashed password matches the input password\n        if (password_verify($password, $row['password'])) {\n            // Login successful\n            return true;\n        } else {\n            echo \"Incorrect password\";\n        }\n    } else {\n        echo \"User not found\";\n    }\n    \n    // If login failed, return false\n    return false;\n}\n\n// Example usage:\n$username = 'example_username';\n$password = 'example_password';\n\nif (login_user($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Login failed.\";\n}\n?>\n```\n\nThis code defines a function `login_user` that takes a username and password as input. It checks if the user exists in the database, and if the hashed password matches the input password using `password_verify`. If both conditions are true, it returns `true`; otherwise, it returns `false`.\n\nNote: This is a basic example and you should consider implementing additional security measures such as:\n\n1. Hashing passwords securely (e.g., using PHP's built-in `password_hash` function).\n2. Implementing password salting.\n3. Validating user input data.\n4. Using prepared statements with parameterized queries to prevent SQL injection attacks.\n\n**Security Notes:**\n\n*   Make sure to replace `'your_host'`, `'your_username'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n*   Ensure that the password is hashed securely using a library or function like `password_hash`.\n*   Always use prepared statements with parameterized queries to prevent SQL injection attacks.\n*   Validate user input data before processing it.\n\nRemember, this code provides a basic example and should be adapted according to your specific requirements.", "code_blocks": ["```php\n<?php\n\n// Define database connection credentials\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to the database\n$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($mysqli->connect_errno) {\n    echo \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error;\n}\n\nfunction login_user($username, $password) {\n    // Prepare SQL query\n    $stmt = $mysqli->prepare(\"SELECT * FROM users WHERE username = ?\");\n    \n    // Bind parameters\n    $stmt->bind_param(\"s\", $username);\n    \n    // Execute query\n    $stmt->execute();\n    \n    // Get result\n    $result = $stmt->get_result();\n    \n    // If user exists and password is correct\n    if ($result->num_rows > 0) {\n        // Fetch user data\n        $row = $result->fetch_assoc();\n        \n        // Check if the hashed password matches the input password\n        if (password_verify($password, $row['password'])) {\n            // Login successful\n            return true;\n        } else {\n            echo \"Incorrect password\";\n        }\n    } else {\n        echo \"User not found\";\n    }\n    \n    // If login failed, return false\n    return false;\n}\n\n// Example usage:\n$username = 'example_username';\n$password = 'example_password';\n\nif (login_user($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Login failed.\";\n}\n?>\n```"]}
