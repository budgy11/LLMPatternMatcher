{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login function in PHP. It checks if the provided credentials match those stored in a database.\n\n### Database Setup (Assuming MySQL)\n\nBefore running this code, ensure your database is set up with a `users` table containing the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Code\n\n**login.php**\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// Function to check user login credentials\nfunction checkLogin($username, $password) {\n  global $conn;\n\n  // Prepare SQL query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n\n  // Fetch result\n  $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n  if ($result) {\n    // Hashed password match check\n    if (password_verify($password, $result['password'])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (checkLogin($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```\n\n### Explanation\n\n1. This code establishes a database connection using PDO.\n2. The `checkLogin` function takes `$username` and `$password` as input and checks if they match the stored credentials in the `users` table.\n3. If the credentials are valid, it returns `true`. Otherwise, it returns `false`.\n4. In the example usage section, we demonstrate how to call the `checkLogin` function with user input.\n\n### Security Notes\n\n1. Always use prepared statements to prevent SQL injection attacks.\n2. Store passwords securely using a password hashing algorithm (e.g., `password_hash()`).\n3. Verify passwords using a corresponding hash verification method (e.g., `password_verify()`).\n\nRemember to replace the placeholders (`$host`, `$dbname`, `$username`, and `$password`) with your actual database credentials.\n\nThis example provides a basic user login function in PHP. You can modify it according to your specific requirements, such as adding additional security measures or implementing password reset functionality.", "code_blocks": [null, "```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// Function to check user login credentials\nfunction checkLogin($username, $password) {\n  global $conn;\n\n  // Prepare SQL query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n\n  // Fetch result\n  $result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n  if ($result) {\n    // Hashed password match check\n    if (password_verify($password, $result['password'])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (checkLogin($username, $password)) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n```"]}
