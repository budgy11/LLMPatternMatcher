{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a basic user login function in PHP:\n\n```php\n<?php\n// Configuration settings\n$host = 'localhost';\n$dbname = 'database_name'; // Replace with your database name\n$username = 'username'; // Replace with your username\n$password = 'password'; // Replace with your password\n\ntry {\n    // Connect to the database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// Function to register a new user\nfunction registerUser($username, $email, $password, $confirm_password)\n{\n    global $conn;\n\n    if ($password !== $confirm_password) {\n        throw new Exception('Passwords do not match');\n    }\n\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Insert into users table\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password)\n                                VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            echo \"User registered successfully!\";\n        } else {\n            throw new Exception('Failed to register user');\n        }\n    } catch (PDOException $e) {\n        echo 'Registration failed: ' . $e->getMessage();\n    }\n\n}\n\n// Function to login a user\nfunction loginUser($username, $password)\n{\n    global $conn;\n\n    try {\n        // Select from users table\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n\n        if ($stmt->execute()) {\n            $user = $stmt->fetch();\n\n            if ($user) {\n                // Check if the password is correct\n                if (password_verify($password, $user['password'])) {\n                    echo \"User logged in successfully!\";\n                    return true;\n                } else {\n                    throw new Exception('Incorrect username or password');\n                }\n            } else {\n                throw new Exception('Username does not exist');\n            }\n\n        } else {\n            throw new Exception('Failed to login user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Login failed: ' . $e->getMessage();\n    }\n\n}\n\n// Example usage\n$username = \"example_user\";\n$password = \"password123\";\n\ntry {\n    registerUser($username, \"user@example.com\", $password, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n\ntry {\n    loginUser($username, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\nThis code defines two functions: `registerUser` and `loginUser`. The `registerUser` function hashes the user's password using `password_hash` before inserting it into the database. The `loginUser` function selects the user from the database based on their username, then uses `password_verify` to check if the provided password is correct.\n\nNote: Make sure you replace placeholders like `$host`, `$dbname`, `$username`, and `$password` with your actual database credentials and settings.", "code_blocks": ["```php\n<?php\n// Configuration settings\n$host = 'localhost';\n$dbname = 'database_name'; // Replace with your database name\n$username = 'username'; // Replace with your username\n$password = 'password'; // Replace with your password\n\ntry {\n    // Connect to the database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// Function to register a new user\nfunction registerUser($username, $email, $password, $confirm_password)\n{\n    global $conn;\n\n    if ($password !== $confirm_password) {\n        throw new Exception('Passwords do not match');\n    }\n\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Insert into users table\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password)\n                                VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            echo \"User registered successfully!\";\n        } else {\n            throw new Exception('Failed to register user');\n        }\n    } catch (PDOException $e) {\n        echo 'Registration failed: ' . $e->getMessage();\n    }\n\n}\n\n// Function to login a user\nfunction loginUser($username, $password)\n{\n    global $conn;\n\n    try {\n        // Select from users table\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n\n        if ($stmt->execute()) {\n            $user = $stmt->fetch();\n\n            if ($user) {\n                // Check if the password is correct\n                if (password_verify($password, $user['password'])) {\n                    echo \"User logged in successfully!\";\n                    return true;\n                } else {\n                    throw new Exception('Incorrect username or password');\n                }\n            } else {\n                throw new Exception('Username does not exist');\n            }\n\n        } else {\n            throw new Exception('Failed to login user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Login failed: ' . $e->getMessage();\n    }\n\n}\n\n// Example usage\n$username = \"example_user\";\n$password = \"password123\";\n\ntry {\n    registerUser($username, \"user@example.com\", $password, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n\ntry {\n    loginUser($username, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```"]}
