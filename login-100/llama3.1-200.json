{"prompt": "Create a user login function using php", "llm_output": "Here is an example of a basic user login function using PHP:\n\n**Note:** This code uses prepared statements to prevent SQL injection attacks. It also stores hashed passwords, which is the recommended way to store passwords securely.\n\n**Database setup:**\n\nFirst, you need to set up your database with a table named `users`. The table should have at least two columns: `username` and `password`.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL UNIQUE,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**PHP code:**\n\n```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_NAME', 'your_database_name');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to hash password\nfunction hashPassword($password) {\n  return password_hash($password, PASSWORD_DEFAULT);\n}\n\n// Function to check if username and password are correct\nfunction login_user($username, $password) {\n  global $conn;\n\n  // Prepare statement\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param('s', $username);\n\n  // Execute query\n  $stmt->execute();\n\n  // Bind results\n  $stmt->bind_result($id, $user_name, $hashed_password);\n\n  // Fetch result\n  if ($stmt->fetch()) {\n    if (password_verify($password, $hashed_password)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // If no match is found, return false\n  return false;\n\n}\n\n// Example usage:\n$login = login_user('your_username', 'your_password');\n\nif ($login) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```\n\n**Explanation:**\n\nThis code defines two functions:\n\n*   `hashPassword($password)` takes a plain text password and returns its hashed version.\n*   `login_user($username, $password)` checks if the provided `username` and `password` are correct by querying the database.\n\nThe `login_user()` function first prepares a SQL statement to select the user's data from the `users` table where the username matches. It then executes the query and binds the result to variables. If a match is found, it checks if the provided password is valid using `password_verify()`. Finally, it returns a boolean value indicating whether the login was successful.\n\n**Security note:**\n\nThis code uses prepared statements with parameterized queries, which helps prevent SQL injection attacks. It also stores hashed passwords securely, as recommended by best practices.\n\nRemember to replace `'your_database_name'`, `'your_database_username'`, and `'your_database_password'` with your actual database credentials.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_NAME', 'your_database_name');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to hash password\nfunction hashPassword($password) {\n  return password_hash($password, PASSWORD_DEFAULT);\n}\n\n// Function to check if username and password are correct\nfunction login_user($username, $password) {\n  global $conn;\n\n  // Prepare statement\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n  $stmt->bind_param('s', $username);\n\n  // Execute query\n  $stmt->execute();\n\n  // Bind results\n  $stmt->bind_result($id, $user_name, $hashed_password);\n\n  // Fetch result\n  if ($stmt->fetch()) {\n    if (password_verify($password, $hashed_password)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // If no match is found, return false\n  return false;\n\n}\n\n// Example usage:\n$login = login_user('your_username', 'your_password');\n\nif ($login) {\n  echo \"Login successful!\";\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```"]}
