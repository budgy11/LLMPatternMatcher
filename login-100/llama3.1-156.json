{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n### **login.php**\n\n```php\n<?php\nrequire_once 'dbconfig.php'; // assuming your database connection settings are in dbconfig.php\n\nfunction loginUser($username, $password) {\n    // Prepare the query\n    $query = \"SELECT * FROM users WHERE username = :username AND password = :password\";\n\n    try {\n        // Execute the query\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $password);\n\n        // Execute the query and fetch result\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        if ($user) {\n            // If user is found, return their details\n            return array(\n                'id' => $user['id'],\n                'username' => $user['username'],\n                'name' => $user['name']\n            );\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return false;\n}\n\n// Example usage\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = md5($_POST['password']); // using md5 for simplicity, consider a more secure method\n\n    $user = loginUser($username, $password);\n\n    if ($user) {\n        echo \"Login successful!\";\n        print_r($user);\n    } else {\n        echo \"Invalid username or password\";\n    }\n}\n?>\n```\n\n### **Explanation**\n\n*   We first require the `dbconfig.php` file to establish a connection with the database.\n*   The `loginUser()` function takes two parameters, `$username` and `$password`, which are used to fetch the user's details from the database using prepared statements.\n*   If the user exists in the database, their details (id, username, name) are returned as an array. Otherwise, it throws a custom exception with an error message \"Invalid username or password\".\n*   The example usage demonstrates how to use this function by checking if both `username` and `password` fields exist in the POST data. If they do, it calls the `loginUser()` function with these values, hashing the password using md5 for simplicity (consider a more secure method). Finally, it checks the return value of the function and displays either \"Login successful!\" along with the user's details or an error message.\n\n### **Security Note**\n\n*   In this example, we're using `md5` to hash passwords. However, consider using a more secure password hashing algorithm such as `password_hash()` in PHP 5.5+.\n*   Always validate and sanitize input data to prevent SQL injection attacks. Prepared statements (like those used here) help ensure that the user's input is properly escaped.\n\n### **Database Configuration (`dbconfig.php`)**\n\n```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n?>\n```\n\nReplace `localhost`, `your_database_name`, `your_username`, and `your_password` with your actual database details.", "code_blocks": ["```php\n<?php\nrequire_once 'dbconfig.php'; // assuming your database connection settings are in dbconfig.php\n\nfunction loginUser($username, $password) {\n    // Prepare the query\n    $query = \"SELECT * FROM users WHERE username = :username AND password = :password\";\n\n    try {\n        // Execute the query\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', $password);\n\n        // Execute the query and fetch result\n        $stmt->execute();\n        $user = $stmt->fetch();\n\n        if ($user) {\n            // If user is found, return their details\n            return array(\n                'id' => $user['id'],\n                'username' => $user['username'],\n                'name' => $user['name']\n            );\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n\n    return false;\n}\n\n// Example usage\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = md5($_POST['password']); // using md5 for simplicity, consider a more secure method\n\n    $user = loginUser($username, $password);\n\n    if ($user) {\n        echo \"Login successful!\";\n        print_r($user);\n    } else {\n        echo \"Invalid username or password\";\n    }\n}\n?>\n```", "```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n?>\n```"]}
