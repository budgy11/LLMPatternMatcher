{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database configuration (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_db_user\";\n$db_password = \"your_db_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the username and password from the form\n  $username = trim($_POST[\"username\"]);\n  $password = trim($_POST[\"password\"]);\n\n  // Validate input (important for security)\n  if (empty($username) || empty($password)) {\n    $error_message = \"Username and password cannot be empty.\";\n  } elseif (preg_match(\"/^[a-zA-Z0-9_]+$/\", $username) == 0) {\n    $error_message = \"Username must contain only letters, numbers, and underscores.\";\n  } else {\n    // Query the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare the SQL query (use prepared statements for security!)\n    $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n    $stmt = $conn->prepare($sql);\n\n    if ($stmt) {\n      // Bind the parameters (for security)\n      $stmt->bind_param(\"s\", $username, $password);\n\n      // Execute the query\n      if ($stmt->execute()) {\n        // Get the result\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 1) {\n          // User found, set session variables\n          session_start();\n          $_SESSION[\"username\"] = $username;\n          $result->fetch_assoc(); // Get the user data\n          $stmt->close();\n\n          // Redirect to a secure page or display a success message\n          header(\"Location: secure_page.php\"); // Replace with your secure page\n          exit();\n        } else {\n          $error_message = \"Incorrect username or password.\";\n          $stmt->close();\n        }\n      } else {\n        $error_message = \"Query execution failed.\";\n        $stmt->close();\n      }\n    } else {\n      $error_message = \"Error preparing statement.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>User Login</h2>\n\n  <?php if (!empty($error_message)) { ?>\n    <p style=\"color: red;\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo $_SERVER[\"PHP_SELF\"]; ?>\">\n    Username: <input type=\"text\" name=\"username\" value=\"<?php echo isset($username) ? htmlspecialchars($username) : ''; ?>\">\n    Password: <input type=\"password\" name=\"password\" value=\"<?php echo isset($password) ? htmlspecialchars($password) : ''; ?>\">\n    <button type=\"submit\">Login</button>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security: Prepared Statements:** This is *absolutely critical* for preventing SQL injection attacks.  Instead of directly concatenating the username and password into the SQL query, we use prepared statements. Prepared statements separate the SQL code from the data, which prevents malicious users from injecting SQL commands.  The `prepare()` and `bind_param()` functions are used for this.\n* **Error Handling:** The code includes error handling for:\n    * Connection errors to the database.\n    * Query execution errors.\n    * Empty input fields.\n    * Incorrect username/password.\n* **Input Validation:**  Validates the username using a regular expression (`preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)`) to ensure it contains only letters, numbers, and underscores.  This helps prevent unexpected data from being used in the query and also improves security.\n* **Session Management:**  Uses `session_start()` to start a session and `$_SESSION[\"username\"]` to store the username after successful login.  This is the standard way to maintain user state in PHP.\n* **`htmlspecialchars()`:**  Uses `htmlspecialchars()` when displaying user input or any data retrieved from the database. This prevents cross-site scripting (XSS) attacks by encoding special characters that could be used to inject malicious code.  Crucially, it's used for the value attribute when displaying the input fields.\n* **Clearer Structure & Comments:**  The code is well-structured and includes comments to explain the different sections.\n* **`exit()`:**  Added `exit()` after a successful redirect. This prevents the rest of the page from being executed.\n* **`$_SERVER[\"PHP_SELF\"]`:**  Uses `$_SERVER[\"PHP_SELF\"]` to ensure that the form submits to the same page.\n\n**How to use and adapt:**\n\n1. **Replace placeholders:**\n   - Update the database configuration values (`$db_host`, `$db_name`, `$db_user`, `$db_password`) with your actual database credentials.\n   - Change `secure_page.php` to the name of the page you want to redirect to after a successful login.\n\n2. **Create a `users` table:** Make sure you have a `users` table in your database with a `username` and `password` column.  The `password` column should store the password *hashed* for security.  **Do not store passwords in plain text.**\n\n3. **Hashing Passwords:** **Crucially, hash your passwords before storing them in the database.** Use a strong hashing algorithm like bcrypt or Argon2.  PHP's `password_hash()` function is designed for this.  Here's an example of how to hash the password *before* inserting it into the database:\n\n   ```php\n   // ... (inside the INSERT query)\n   $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n   $sql = \"INSERT INTO users (username, password) VALUES (?, ?)\";\n   $stmt = $conn->prepare($sql);\n   $stmt->bind_param(\"ss\", $username, $hashed_password);\n   ```\n\n4. **Password Verification on Login:**  When a user logs in, you must verify the entered password against the *hashed* password stored in the database.  Use `password_verify()` to compare the entered password with the hashed password:\n\n   ```php\n   // ... (inside the login logic)\n   if (password_verify($password, $hashed_password)) {  // Replace $hashed_password with the actual hashed password from the database\n     session_start();\n     $_SESSION[\"username\"] = $username;\n     // ...\n   }\n   ```\n\n**Important Security Considerations:**\n\n* **HTTPS:** Always use HTTPS to encrypt the communication between the user's browser and your server.\n* **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n* **Regular Updates:** Keep your PHP version and any libraries up to date to patch security vulnerabilities.\n* **Database Security:**  Follow best practices for your database server (e.g., strong passwords, restricted access).\n* **Logging:** Implement logging to track login attempts (both successful and failed) for security auditing.  Be very careful about what you log to avoid privacy issues.\n* **Two-Factor Authentication (2FA):**  Consider adding 2FA for enhanced security.\n\nThis comprehensive example provides a solid foundation for user login with improved security.  Remember to adapt it to your specific needs and always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database configuration (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_db_user\";\n$db_password = \"your_db_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the username and password from the form\n  $username = trim($_POST[\"username\"]);\n  $password = trim($_POST[\"password\"]);\n\n  // Validate input (important for security)\n  if (empty($username) || empty($password)) {\n    $error_message = \"Username and password cannot be empty.\";\n  } elseif (preg_match(\"/^[a-zA-Z0-9_]+$/\", $username) == 0) {\n    $error_message = \"Username must contain only letters, numbers, and underscores.\";\n  } else {\n    // Query the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare the SQL query (use prepared statements for security!)\n    $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n    $stmt = $conn->prepare($sql);\n\n    if ($stmt) {\n      // Bind the parameters (for security)\n      $stmt->bind_param(\"s\", $username, $password);\n\n      // Execute the query\n      if ($stmt->execute()) {\n        // Get the result\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 1) {\n          // User found, set session variables\n          session_start();\n          $_SESSION[\"username\"] = $username;\n          $result->fetch_assoc(); // Get the user data\n          $stmt->close();\n\n          // Redirect to a secure page or display a success message\n          header(\"Location: secure_page.php\"); // Replace with your secure page\n          exit();\n        } else {\n          $error_message = \"Incorrect username or password.\";\n          $stmt->close();\n        }\n      } else {\n        $error_message = \"Query execution failed.\";\n        $stmt->close();\n      }\n    } else {\n      $error_message = \"Error preparing statement.\";\n    }\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>User Login</h2>\n\n  <?php if (!empty($error_message)) { ?>\n    <p style=\"color: red;\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo $_SERVER[\"PHP_SELF\"]; ?>\">\n    Username: <input type=\"text\" name=\"username\" value=\"<?php echo isset($username) ? htmlspecialchars($username) : ''; ?>\">\n    Password: <input type=\"password\" name=\"password\" value=\"<?php echo isset($password) ? htmlspecialchars($password) : ''; ?>\">\n    <button type=\"submit\">Login</button>\n  </form>\n\n</body>\n</html>\n```"]}
