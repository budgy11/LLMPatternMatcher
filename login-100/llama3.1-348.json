{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis is an example of a simple user login function in PHP. It uses a database to store usernames and passwords, but for security reasons, we'll use a hashed password instead of storing the actual password.\n\n**Database Schema**\n-------------------\n\nWe'll assume that our database has two tables: `users` with columns `id`, `username`, and `password`.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**PHP Code**\n-------------\n\nFirst, let's create a file called `login.php` with the following code:\n\n```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\n// Check if database is connected\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to check login credentials\nfunction checkLoginCredentials($username, $password) {\n  global $conn;\n\n  // Prepare query to select user data from database\n  $stmt = $conn->prepare(\"SELECT password FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute query and store result\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  // Check if user exists in database\n  if ($result->num_rows > 0) {\n    // Fetch user data from result\n    $row = $result->fetch_assoc();\n\n    // Compare stored password with provided password (hashed)\n    $storedPassword = hash('sha256', $row['password']);\n    $providedPassword = hash('sha256', $password);\n\n    if ($storedPassword === $providedPassword) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\n  // Close prepared statement and database connection\n  $stmt->close();\n  $conn->close();\n\n  // Return false by default (if no user found)\n  return false;\n}\n\n// Get posted data from login form\n$loggedInUsername = $_POST['username'];\n$loggedInPassword = $_POST['password'];\n\n// Call function to check login credentials\n$isLoginSuccessful = checkLoginCredentials($loggedInUsername, $loggedInPassword);\n\n// If login is successful, redirect to secured area (e.g., dashboard)\nif ($isLoginSuccessful) {\n  header('Location: dashboard.php');\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```\n\n**How it Works**\n------------------\n\n1. We create a connection to the database using `mysqli`.\n2. The `checkLoginCredentials` function takes two parameters, `$username` and `$password`, and checks if they match with data stored in the `users` table.\n3. If the user exists in the database, we hash both passwords (using SHA-256) for comparison.\n4. If the provided password matches the stored one (hashed), the function returns `true`.\n5. In our example code, we get posted data from a login form and call the `checkLoginCredentials` function to verify if login is successful.\n\n**Security Notes**\n------------------\n\n* Always use prepared statements to prevent SQL injection attacks.\n* Use hashing functions like SHA-256 to store passwords securely.\n* Never store actual passwords in your database.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbUsername = 'your_username';\n$dbPassword = 'your_password';\n$dbName = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);\n\n// Check if database is connected\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to check login credentials\nfunction checkLoginCredentials($username, $password) {\n  global $conn;\n\n  // Prepare query to select user data from database\n  $stmt = $conn->prepare(\"SELECT password FROM users WHERE username = ?\");\n  $stmt->bind_param(\"s\", $username);\n\n  // Execute query and store result\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  // Check if user exists in database\n  if ($result->num_rows > 0) {\n    // Fetch user data from result\n    $row = $result->fetch_assoc();\n\n    // Compare stored password with provided password (hashed)\n    $storedPassword = hash('sha256', $row['password']);\n    $providedPassword = hash('sha256', $password);\n\n    if ($storedPassword === $providedPassword) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\n  // Close prepared statement and database connection\n  $stmt->close();\n  $conn->close();\n\n  // Return false by default (if no user found)\n  return false;\n}\n\n// Get posted data from login form\n$loggedInUsername = $_POST['username'];\n$loggedInPassword = $_POST['password'];\n\n// Call function to check login credentials\n$isLoginSuccessful = checkLoginCredentials($loggedInUsername, $loggedInPassword);\n\n// If login is successful, redirect to secured area (e.g., dashboard)\nif ($isLoginSuccessful) {\n  header('Location: dashboard.php');\n} else {\n  echo \"Invalid username or password.\";\n}\n\n?>\n```"]}
