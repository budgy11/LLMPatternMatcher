{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database credentials (replace with your actual values)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle user login\nfunction loginUser($username, $password) {\n  // Connect to the database\n  $conn = new mysqli($host, $username, $password, $database);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n  // Prepare the statement\n  $stmt = $conn->prepare($sql);\n\n  // Bind the parameters\n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" indicates two string parameters\n\n  // Execute the statement\n  if ($stmt->execute()) {\n    // Get the result\n    $result = $stmt->get_result();\n\n    // Check if any rows were returned\n    if ($result->num_rows > 0) {\n      $row = $result->fetch_assoc();\n\n      // Check if the user exists and is active\n      if ($row['status'] == 'active') {\n        // Successful login\n        $_SESSION['user_id'] = $row['id'];\n        $_SESSION['username'] = $row['username'];\n        return true;\n      } else {\n        return false; // User exists but inactive\n      }\n    } else {\n      return false; // No user found with these credentials\n    }\n  } else {\n    // Error executing the statement\n    return false;\n  }\n\n  // Close the statement and connection\n  $stmt->close();\n  $conn->close();\n}\n\n\n// Example usage:\n\n// Check if the login form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (important for security)\n  if (empty($username) || empty($password)) {\n    $error = \"Username and password cannot be empty.\";\n  } else {\n    // Call the login function\n    $login_result = loginUser($username, $password);\n\n    if ($login_result) {\n      // Login successful - redirect to a secure page or display a welcome message\n      header(\"Location: /secure_page.php\"); // Replace with your desired secure page URL\n      exit();\n    } else {\n      $error = \"Invalid username or password.\";\n    }\n  }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    Username: <input type=\"text\" name=\"username\" placeholder=\"Enter your username\" />\n    <br />\n    Password: <input type=\"password\" name=\"password\" placeholder=\"Enter your password\" />\n    <br />\n    <button type=\"submit\">Login</button>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security First:**\n    * **Prepared Statements:**  Crucially uses prepared statements with `mysqli_prepare()` and `mysqli_stmt_bind_param()`. This *completely* prevents SQL injection vulnerabilities.  **Never concatenate user input directly into SQL queries.**\n    * **Input Validation:** Added a basic `empty()` check to ensure the username and password fields aren't empty.  More robust validation (e.g., checking password length, character sets, etc.) should be added in a production environment.\n    * **`htmlspecialchars()`:** Uses `htmlspecialchars()` on the form's `action` attribute to prevent XSS (Cross-Site Scripting) attacks.  This escapes HTML characters to prevent malicious code from being injected.\n* **Clearer Structure and Comments:**  The code is well-commented to explain each step.\n* **Error Handling:** Checks for connection errors and the number of rows returned from the query. Provides a user-friendly error message.\n* **Session Management:** Uses `$_SESSION` to store the user's ID and username after successful login, allowing you to keep the user logged in across multiple pages.\n* **Complete Example:**  The code provides a full example, including the HTML form and the PHP code for handling the login.\n* **Active User Check:**  Added a check for `status` column in the database. This is essential \u2013 you should *never* store passwords in plain text.  Instead, you store a hash of the password.  This example assumes a \"status\" column (e.g., 'active', 'inactive') is used to control user access.\n* **`exit()` after redirection:**  The `exit()` call after `header(\"Location: ...)` is important.  Without it, the script might continue to execute and display the login form again.\n* **Database Credentials:**  Clearly marked where you need to replace the placeholder database credentials.\n* **`mysqli` Extension:** This code uses the `mysqli` extension, which is a more modern and secure way to interact with MySQL databases in PHP.\n\n**Important Next Steps & Production Considerations:**\n\n1. **Password Hashing:**\n   * **Never store passwords in plain text!** Use a strong password hashing algorithm like `password_hash()` to securely store user passwords.  The example uses a placeholder `status` column to demonstrate a common approach to user management.\n   * Example:\n     ```php\n     $password = $_POST[\"password\"];\n     $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n     // Then, in your database, store $hashed_password instead of $password\n     ```\n   * After hashing, you would compare the hashed password from the login form with the hashed password stored in the database using `password_verify()`.\n\n2. **Database Setup:**\n   * Create a `users` table in your MySQL database with at least the following columns:\n     * `id` (INT, PRIMARY KEY, AUTO_INCREMENT)\n     * `username` (VARCHAR)\n     * `password` (VARCHAR)  --  Store the *hashed* password here\n     * `status` (VARCHAR, e.g., 'active', 'inactive')\n\n3. **CSRF Protection:** Implement Cross-Site Request Forgery (CSRF) protection to prevent malicious websites from submitting login requests on behalf of a user.\n\n4. **Rate Limiting:**  Add rate limiting to prevent brute-force attacks.\n\n5. **User Interface (UI):** Style the login form to match your website's design.\n\n6. **Logging:** Implement logging for login attempts (successful and failed) for security auditing.\n\n7. **HTTPS:**  Always use HTTPS to encrypt communication between the user's browser and your server.\n\n8. **Session Management Security:** Properly configure your PHP session settings (e.g., `session.cookie_lifetime`, `session.gc_maxlifetime`) to enhance security.\n\nThis enhanced response provides a solid foundation for building a secure login system.  Remember to prioritize security and follow best practices.  Be sure to thoroughly test your code and address any potential vulnerabilities before deploying it to a live environment.\n", "code_blocks": ["```php\n<?php\n\n// Database credentials (replace with your actual values)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle user login\nfunction loginUser($username, $password) {\n  // Connect to the database\n  $conn = new mysqli($host, $username, $password, $database);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n  // Prepare the statement\n  $stmt = $conn->prepare($sql);\n\n  // Bind the parameters\n  $stmt->bind_param(\"ss\", $username, $password); // \"ss\" indicates two string parameters\n\n  // Execute the statement\n  if ($stmt->execute()) {\n    // Get the result\n    $result = $stmt->get_result();\n\n    // Check if any rows were returned\n    if ($result->num_rows > 0) {\n      $row = $result->fetch_assoc();\n\n      // Check if the user exists and is active\n      if ($row['status'] == 'active') {\n        // Successful login\n        $_SESSION['user_id'] = $row['id'];\n        $_SESSION['username'] = $row['username'];\n        return true;\n      } else {\n        return false; // User exists but inactive\n      }\n    } else {\n      return false; // No user found with these credentials\n    }\n  } else {\n    // Error executing the statement\n    return false;\n  }\n\n  // Close the statement and connection\n  $stmt->close();\n  $conn->close();\n}\n\n\n// Example usage:\n\n// Check if the login form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $username = $_POST[\"username\"];\n  $password = $_POST[\"password\"];\n\n  // Validate input (important for security)\n  if (empty($username) || empty($password)) {\n    $error = \"Username and password cannot be empty.\";\n  } else {\n    // Call the login function\n    $login_result = loginUser($username, $password);\n\n    if ($login_result) {\n      // Login successful - redirect to a secure page or display a welcome message\n      header(\"Location: /secure_page.php\"); // Replace with your desired secure page URL\n      exit();\n    } else {\n      $error = \"Invalid username or password.\";\n    }\n  }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n\n  <h2>Login</h2>\n\n  <?php if (isset($error)) { ?>\n    <p style=\"color: red;\"><?php echo $error; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    Username: <input type=\"text\" name=\"username\" placeholder=\"Enter your username\" />\n    <br />\n    Password: <input type=\"password\" name=\"password\" placeholder=\"Enter your password\" />\n    <br />\n    <button type=\"submit\">Login</button>\n  </form>\n\n</body>\n</html>\n```"]}
