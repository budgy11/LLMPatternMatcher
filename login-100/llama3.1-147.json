{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This function will check the username and password against a predefined array of users.\n\n### PHP Code\n```php\n<?php\n\n// Predefined array of users for demonstration purposes\n$users = [\n    'john' => ['password' => 'hello', 'role' => 'admin'],\n    'jane' => ['password' => 'world', 'role' => 'user']\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    // Check if username exists\n    if (!isset($users[$username])) {\n        return ['success' => false, 'message' => 'Invalid username'];\n    }\n\n    // Compare password with stored hash\n    if ($users[$username]['password'] !== $password) {\n        return ['success' => false, 'message' => 'Incorrect password'];\n    }\n\n    // Check if user is active (this could be a separate check in a real application)\n    // For this example, we'll assume all users are active\n    // return ['success' => true, 'user_id' => $username, 'role' => $users[$username]['role']];\n\n    return ['success' => true, 'user_id' => $username, 'role' => $users[$username]['role']];\n}\n\n// Example usage:\n$username = 'john';\n$password = 'hello';\n\n$result = login($username, $password);\n\nif ($result['success']) {\n    echo \"Login successful! User ID: {$result['user_id']}, Role: {$result['role']}\";\n} else {\n    echo \"Error: {$result['message']}\";\n}\n\n?>\n```\n\n### Explanation\n\n1. The `login` function takes two parameters, `$username` and `$password`, which are used to authenticate the user.\n2. We first check if the provided username exists in our predefined array of users. If not, we return an error message indicating that the username is invalid.\n3. Next, we compare the provided password with the stored hash for the given username. If they don't match, we return another error message indicating that the password was incorrect.\n4. Finally, if both checks pass, we return an array containing the user's ID and role.\n\nNote: This example uses a simple predefined array of users for demonstration purposes only. In a real application, you should use a secure database to store user credentials.", "code_blocks": ["```php\n<?php\n\n// Predefined array of users for demonstration purposes\n$users = [\n    'john' => ['password' => 'hello', 'role' => 'admin'],\n    'jane' => ['password' => 'world', 'role' => 'user']\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    // Check if username exists\n    if (!isset($users[$username])) {\n        return ['success' => false, 'message' => 'Invalid username'];\n    }\n\n    // Compare password with stored hash\n    if ($users[$username]['password'] !== $password) {\n        return ['success' => false, 'message' => 'Incorrect password'];\n    }\n\n    // Check if user is active (this could be a separate check in a real application)\n    // For this example, we'll assume all users are active\n    // return ['success' => true, 'user_id' => $username, 'role' => $users[$username]['role']];\n\n    return ['success' => true, 'user_id' => $username, 'role' => $users[$username]['role']];\n}\n\n// Example usage:\n$username = 'john';\n$password = 'hello';\n\n$result = login($username, $password);\n\nif ($result['success']) {\n    echo \"Login successful! User ID: {$result['user_id']}, Role: {$result['role']}\";\n} else {\n    echo \"Error: {$result['message']}\";\n}\n\n?>\n```"]}
