{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function in PHP. This function will verify the username and password against a database (in this case, an array).\n\n### Database Setup\n\nBefore we begin, let's create our `users` database using an array for simplicity.\n\n```php\n$database = [\n    'users' => [\n        ['id' => 1, 'username' => 'admin', 'password' => hash('sha256', 'password123')],\n        ['id' => 2, 'username' => 'user1', 'password' => hash('sha256', 'pass123')]\n    ]\n];\n```\n\n### Login Function\n\nNow let's create our login function.\n\n```php\nfunction login($username, $password) {\n    // Check if username and password are provided\n    if (empty($username) || empty($password)) {\n        return false;\n    }\n\n    // Fetch user data from database\n    foreach ($GLOBALS['database']['users'] as $user) {\n        if ($user['username'] == $username && hash('sha256', $password) == $user['password']) {\n            // User found, return true\n            $_SESSION['logged_in'] = true;\n            $_SESSION['username'] = $username;\n            return true;\n        }\n    }\n\n    // User not found or password incorrect, return false\n    return false;\n}\n```\n\n### Usage\n\nTo use the login function, you would need to include this PHP file and then call the `login` function.\n\n```php\ninclude 'login_function.php';\n\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (login($username, $password)) {\n    header('Location: dashboard.php');\n} else {\n    echo 'Invalid username or password';\n}\n```\n\n### Security Notes\n\nThis is a very basic example. In a production environment, you would want to use a secure password hashing library like `argon2id` and also store the hashed passwords in your database instead of storing the actual hashes.\n\nAlso, this code does not include any error checking for SQL queries (since we're using an array here). If you were using a real database, you should always use prepared statements to prevent SQL injection attacks.\n\nLastly, never hard-code passwords or hash them directly within your PHP script.", "code_blocks": ["```php\n$database = [\n    'users' => [\n        ['id' => 1, 'username' => 'admin', 'password' => hash('sha256', 'password123')],\n        ['id' => 2, 'username' => 'user1', 'password' => hash('sha256', 'pass123')]\n    ]\n];\n```", "```php\nfunction login($username, $password) {\n    // Check if username and password are provided\n    if (empty($username) || empty($password)) {\n        return false;\n    }\n\n    // Fetch user data from database\n    foreach ($GLOBALS['database']['users'] as $user) {\n        if ($user['username'] == $username && hash('sha256', $password) == $user['password']) {\n            // User found, return true\n            $_SESSION['logged_in'] = true;\n            $_SESSION['username'] = $username;\n            return true;\n        }\n    }\n\n    // User not found or password incorrect, return false\n    return false;\n}\n```", "```php\ninclude 'login_function.php';\n\n$username = $_POST['username'];\n$password = $_POST['password'];\n\nif (login($username, $password)) {\n    header('Location: dashboard.php');\n} else {\n    echo 'Invalid username or password';\n}\n```"]}
