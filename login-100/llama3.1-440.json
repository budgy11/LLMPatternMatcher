{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a basic user login function written in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n### User Table Schema\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n```\n\n### PHP Function: `loginUser()`\n```php\nfunction loginUser($username, $password)\n{\n    // Initialize variables\n    $dbHost = 'your_host';\n    $dbName = 'your_database';\n    $dbUsername = 'your_username';\n    $dbPassword = 'your_password';\n\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n\n    // Prepare SQL statement\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query\n    $stmt->execute();\n\n    // Fetch user data\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($user) {\n        // User found, return user data\n        return array(\n            'id' => $user['id'],\n            'username' => $user['username'],\n            'email' => $user['email']\n        );\n    } else {\n        // Invalid login credentials, return error message\n        return null;\n    }\n}\n```\n\n### Example Usage:\n```php\n$username = 'example_user';\n$password = 'secret_password';\n\n$userData = loginUser($username, $password);\n\nif ($userData) {\n    echo \"User logged in successfully!\";\n    print_r($userData);\n} else {\n    echo \"Invalid login credentials.\";\n}\n```\nNote: This is a basic example and you should consider implementing additional security measures such as:\n\n* Hashing passwords using `password_hash()` function\n* Using HTTPS to encrypt data transmission between client and server\n* Implementing rate limiting for login attempts\n* Validating user input before executing queries\n\nAlways keep in mind the importance of proper error handling, validation, and security practices when developing PHP applications.", "code_blocks": [null, "```php\nfunction loginUser($username, $password)\n{\n    // Initialize variables\n    $dbHost = 'your_host';\n    $dbName = 'your_database';\n    $dbUsername = 'your_username';\n    $dbPassword = 'your_password';\n\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n\n    // Prepare SQL statement\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n\n    // Bind parameters\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query\n    $stmt->execute();\n\n    // Fetch user data\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($user) {\n        // User found, return user data\n        return array(\n            'id' => $user['id'],\n            'username' => $user['username'],\n            'email' => $user['email']\n        );\n    } else {\n        // Invalid login credentials, return error message\n        return null;\n    }\n}\n```", "```php\n$username = 'example_user';\n$password = 'secret_password';\n\n$userData = loginUser($username, $password);\n\nif ($userData) {\n    echo \"User logged in successfully!\";\n    print_r($userData);\n} else {\n    echo \"Invalid login credentials.\";\n}\n```"]}
