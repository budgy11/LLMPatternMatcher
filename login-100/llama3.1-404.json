{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This script will check the username and password against a predefined array of users.\n\n**Note:** In a real-world application, you should use a secure method to store passwords, such as hashing and salting.\n\n```php\n<?php\n\n// Define an array of users\n$users = [\n    'admin' => 'password123',\n    'user1' => 'password456',\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    // Check if the username exists in the array\n    if (!isset($users[$username])) {\n        return false;\n    }\n\n    // Check if the password is correct for the given username\n    if ($users[$username] !== $password) {\n        return false;\n    }\n\n    return true; // Successful login\n}\n\nfunction register($username, $password) {\n    global $users;\n\n    // Check if the username already exists in the array\n    if (isset($users[$username])) {\n        return 'Username already taken';\n    }\n\n    // Add new user to the array\n    $users[$username] = $password;\n    return true; // New user created successfully\n}\n\n// Example usage:\n$username = 'admin';\n$password = 'password123';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n?>\n```\n\n**How it Works:**\n\n1. The `$users` array stores the usernames and passwords.\n2. The `login()` function checks if the provided username exists in the array and if the password matches for that user.\n3. If both conditions are met, it returns `true`.\n4. The `register()` function adds a new user to the array.\n\n**Security Considerations:**\n\n* In a real-world application, you should use a secure method to store passwords, such as hashing and salting (e.g., using PHP's `password_hash()` and `password_verify()` functions).\n* This example is for demonstration purposes only.\n* Always validate input data to prevent SQL injection attacks.\n\n**Commit Message:**\n`Added user login function in PHP`\n\n**API Documentation:**\n\n### Functions\n\n#### `login($username, $password)`\n##### Parameters:\n- `$username`: The username to check\n- `$password`: The password to check against the given username\n##### Returns:\n- `true` on successful login\n- `false` if invalid credentials or username does not exist\n\n#### `register($username, $password)`\n##### Parameters:\n- `$username`: The new username to add\n- `$password`: The new password for the given username\n##### Returns:\n- `true` on successful registration\n- `'Username already taken'` if username already exists", "code_blocks": ["```php\n<?php\n\n// Define an array of users\n$users = [\n    'admin' => 'password123',\n    'user1' => 'password456',\n];\n\nfunction login($username, $password) {\n    global $users;\n\n    // Check if the username exists in the array\n    if (!isset($users[$username])) {\n        return false;\n    }\n\n    // Check if the password is correct for the given username\n    if ($users[$username] !== $password) {\n        return false;\n    }\n\n    return true; // Successful login\n}\n\nfunction register($username, $password) {\n    global $users;\n\n    // Check if the username already exists in the array\n    if (isset($users[$username])) {\n        return 'Username already taken';\n    }\n\n    // Add new user to the array\n    $users[$username] = $password;\n    return true; // New user created successfully\n}\n\n// Example usage:\n$username = 'admin';\n$password = 'password123';\n\nif (login($username, $password)) {\n    echo \"Login successful!\";\n} else {\n    echo \"Invalid username or password.\";\n}\n\n?>\n```"]}
