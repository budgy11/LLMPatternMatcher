{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis example demonstrates a basic user login function using PHP. The code includes validation, hashing, and storing of passwords.\n\n**login.php**\n```php\n<?php\n// Configuration\n$config = array(\n    'database' => array(\n        'host' => 'localhost',\n        'username' => 'your_username',\n        'password' => 'your_password',\n        'name' => 'your_database_name'\n    ),\n    'salt' => 'your_salt_value' // Keep this secret!\n);\n\n// Connect to database\n$conn = new PDO(\"mysql:host={$config['database']['host']};dbname={$config['database']['name']}\", \n                $config['database']['username'], $config['database']['password']);\n\n// Function to hash password\nfunction hash_password($password) {\n    return crypt($password, '$2a$10$' . $config['salt']);\n}\n\n// Function to login user\nfunction login_user($username, $password) {\n    // Prepare query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username=:username\");\n    $stmt->bindParam(':username', $username);\n    \n    // Execute query and fetch result\n    $stmt->execute();\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if ($user && hash_password($password) === $user['password']) {\n        // Login successful, return user data\n        return array('success' => true, 'username' => $username, 'email' => $user['email']);\n    } else {\n        // Login failed, return error message\n        return array('error' => 'Invalid username or password');\n    }\n}\n\n// Example usage\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n    echo \"Welcome, {$result['username']}!\";\n} else {\n    echo $result['error'];\n}\n?>\n```\n\n**Explanation**\n\n1. The code assumes you have a MySQL database with a `users` table containing the columns `id`, `username`, `email`, and `password`.\n2. The `hash_password()` function uses the `crypt()` function to hash the password using the provided salt value.\n3. The `login_user()` function connects to the database, prepares a query to retrieve the user data, and checks if the hashed password matches the stored password.\n4. If the login is successful, it returns an array with the user's data; otherwise, it returns an error message.\n\n**Security Notes**\n\n* Store passwords securely using a salted hash function (e.g., `crypt()` or a library like `php-argon2`).\n* Never store plaintext passwords.\n* Use prepared statements and parameterized queries to prevent SQL injection attacks.\n* Keep the salt value secret!\n\nRemember to replace the placeholders (`your_username`, `your_password`, etc.) with your actual database credentials.", "code_blocks": ["```php\n<?php\n// Configuration\n$config = array(\n    'database' => array(\n        'host' => 'localhost',\n        'username' => 'your_username',\n        'password' => 'your_password',\n        'name' => 'your_database_name'\n    ),\n    'salt' => 'your_salt_value' // Keep this secret!\n);\n\n// Connect to database\n$conn = new PDO(\"mysql:host={$config['database']['host']};dbname={$config['database']['name']}\", \n                $config['database']['username'], $config['database']['password']);\n\n// Function to hash password\nfunction hash_password($password) {\n    return crypt($password, '$2a$10$' . $config['salt']);\n}\n\n// Function to login user\nfunction login_user($username, $password) {\n    // Prepare query\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username=:username\");\n    $stmt->bindParam(':username', $username);\n    \n    // Execute query and fetch result\n    $stmt->execute();\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if ($user && hash_password($password) === $user['password']) {\n        // Login successful, return user data\n        return array('success' => true, 'username' => $username, 'email' => $user['email']);\n    } else {\n        // Login failed, return error message\n        return array('error' => 'Invalid username or password');\n    }\n}\n\n// Example usage\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n    echo \"Welcome, {$result['username']}!\";\n} else {\n    echo $result['error'];\n}\n?>\n```"]}
