{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n====================================\n\nThe following code defines a user login function that takes the username and password as input, verifies them against an array of existing users, and returns the user's details if authentication is successful.\n\n```php\nfunction loginUser($username, $password) {\n    // Define array of existing users with hashed passwords\n    $users = [\n        \"admin\" => \"$2y$10$.l5fGv0J6kP8aB4cL3pT..\",\n        \"user1\" => \"$2y$10$.l5fGv0J6kP8aB4cL3pT..\",\n        // Add more users as needed\n    ];\n\n    // Hash the input password (optional, but recommended for security)\n    $hashedPassword = hash(\"sha256\", $password);\n\n    // Check if username exists in users array\n    if (array_key_exists($username, $users)) {\n        // Compare hashed passwords\n        if ($hashedPassword === $users[$username]) {\n            // Authentication successful, return user's details\n            return [\n                \"name\" => $username,\n                \"email\" => \"$username@example.com\", // Example email address\n                // Add more user data as needed\n            ];\n        } else {\n            // Password mismatch, return error message\n            return [\"error\" => \"Incorrect password\"];\n        }\n    } else {\n        // Username does not exist, return error message\n        return [\"error\" => \"Username not found\"];\n    }\n}\n```\n\n**Example Usage**\n-----------------\n\n```php\n$credentials = [\n    \"username\" => \"admin\",\n    \"password\" => \"mysecretpassword\"\n];\n\n$result = loginUser($credentials[\"username\"], $credentials[\"password\"]);\n\nif (isset($result[\"error\"])) {\n    echo \"Error: \" . $result[\"error\"];\n} else {\n    echo \"Login successful for user: \" . $result[\"name\"];\n}\n```\n\n**Security Notes**\n\n*   This example uses a simple SHA-256 hashing algorithm. For production environments, consider using more secure password storage solutions like bcrypt or Argon2.\n*   Always store passwords securely, such as with a salted hash, to prevent unauthorized access to user accounts.\n\nRemember to replace the `$users` array with your own user database and adapt this example to fit your specific needs.", "code_blocks": ["```php\nfunction loginUser($username, $password) {\n    // Define array of existing users with hashed passwords\n    $users = [\n        \"admin\" => \"$2y$10$.l5fGv0J6kP8aB4cL3pT..\",\n        \"user1\" => \"$2y$10$.l5fGv0J6kP8aB4cL3pT..\",\n        // Add more users as needed\n    ];\n\n    // Hash the input password (optional, but recommended for security)\n    $hashedPassword = hash(\"sha256\", $password);\n\n    // Check if username exists in users array\n    if (array_key_exists($username, $users)) {\n        // Compare hashed passwords\n        if ($hashedPassword === $users[$username]) {\n            // Authentication successful, return user's details\n            return [\n                \"name\" => $username,\n                \"email\" => \"$username@example.com\", // Example email address\n                // Add more user data as needed\n            ];\n        } else {\n            // Password mismatch, return error message\n            return [\"error\" => \"Incorrect password\"];\n        }\n    } else {\n        // Username does not exist, return error message\n        return [\"error\" => \"Username not found\"];\n    }\n}\n```", "```php\n$credentials = [\n    \"username\" => \"admin\",\n    \"password\" => \"mysecretpassword\"\n];\n\n$result = loginUser($credentials[\"username\"], $credentials[\"password\"]);\n\nif (isset($result[\"error\"])) {\n    echo \"Error: \" . $result[\"error\"];\n} else {\n    echo \"Login successful for user: \" . $result[\"name\"];\n}\n```"]}
