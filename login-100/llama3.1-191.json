{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nThis is an example of a basic user login function written in PHP. It includes input validation, password hashing, and database interaction.\n\n**login.php**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Database connection function\nfunction dbConnect() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Login function\nfunction login($username, $password) {\n  // Validate input\n  if (empty($username) || empty($password)) {\n    throw new Exception('Username and password are required');\n  }\n\n  // Hash password for comparison\n  $hashedPassword = hash('sha256', $password);\n\n  // Database connection\n  $conn = dbConnect();\n\n  // Prepare query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\n  $stmt->bind_param(\"ss\", $username, $hashedPassword);\n\n  // Execute query\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  // Check if user exists and credentials are correct\n  if ($result && $result->num_rows > 0) {\n    return true;\n  } else {\n    throw new Exception('Invalid username or password');\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n?>\n```\n**Example usage**\n```php\n<?php\n\n// Include login function\nrequire_once 'login.php';\n\ntry {\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  // Call login function\n  if (login($username, $password)) {\n    echo 'Login successful!';\n  } else {\n    throw new Exception('Error logging in');\n  }\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```\n**Note**\n\n* This is a basic example and should not be used as-is in production.\n* Passwords are stored hashed, but you may want to use a more secure hashing algorithm like bcrypt or PBKDF2.\n* You should also consider implementing additional security measures such as rate limiting, CAPTCHAs, and two-factor authentication.\n* This code assumes a simple `users` table with columns `username` and `password`. You will need to modify the database connection and query to fit your specific schema.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Database connection function\nfunction dbConnect() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Login function\nfunction login($username, $password) {\n  // Validate input\n  if (empty($username) || empty($password)) {\n    throw new Exception('Username and password are required');\n  }\n\n  // Hash password for comparison\n  $hashedPassword = hash('sha256', $password);\n\n  // Database connection\n  $conn = dbConnect();\n\n  // Prepare query\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\n  $stmt->bind_param(\"ss\", $username, $hashedPassword);\n\n  // Execute query\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  // Check if user exists and credentials are correct\n  if ($result && $result->num_rows > 0) {\n    return true;\n  } else {\n    throw new Exception('Invalid username or password');\n  }\n\n  // Close database connection\n  $conn->close();\n}\n\n?>\n```", "```php\n<?php\n\n// Include login function\nrequire_once 'login.php';\n\ntry {\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  // Call login function\n  if (login($username, $password)) {\n    echo 'Login successful!';\n  } else {\n    throw new Exception('Error logging in');\n  }\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```"]}
