{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a simple user login function in PHP, using a MySQL database:\n\n**Note:** This code is for illustrative purposes and should not be used as-is in production environments. You should always hash passwords with a library like `password_hash()` to protect against SQL injection attacks.\n\n```php\n<?php\n\n// Configuration settings\n$hostname = 'your_host';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($hostname, $username, $password, $dbname);\n\n// Check for errors\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($email, $password) {\n    // Hash password (just for demonstration purposes)\n    $hashed_password = md5($password);\n\n    // SQL query to select user from database\n    $query = \"SELECT * FROM users WHERE email = '$email' AND password = '$hashed_password'\";\n    \n    // Execute query and store result\n    $result = $conn->query($query);\n\n    // Check for errors\n    if (!$result) {\n        die(\"Error: \" . $conn->error);\n    }\n\n    // Fetch data from result\n    $data = $result->fetch_assoc();\n\n    // If user exists, return username and email\n    if ($data) {\n        return array(\n            'username' => $data['username'],\n            'email' => $data['email']\n        );\n    } else {\n        return null;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n    echo \"Login successful! Username: {$user_data['username']}, Email: {$user_data['email']}\";\n} else {\n    echo \"Invalid email or password.\";\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```\n\n**Security Notes:**\n\n*   This example uses `md5()` for hashing passwords, which is **not recommended** due to its known security vulnerabilities. Use a library like `password_hash()` instead.\n*   The code directly injects user input into SQL queries, making it vulnerable to SQL injection attacks. Always use prepared statements or parameterized queries.\n*   Passwords should be stored hashed and never in plain text.\n\nTo enhance the security of this example, consider using:\n\n1.  **`password_hash()`**: To securely hash passwords.\n2.  **Prepared Statements**: To prevent SQL injection by separating user input from SQL code.\n3.  **Salted Hashing**: To make it even harder for attackers to obtain user passwords.\n\nHere's a basic update incorporating `password_hash()` and prepared statements:\n\n```php\n// Configuration settings\n$hostname = 'your_host';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($hostname, $username, $password, $dbname);\n\n// Check for errors\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($email, $password) {\n    // SQL query using prepared statement\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ? AND password = ?\");\n    $stmt->bind_param(\"ss\", $email, $hashed_password);\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Execute query\n    $stmt->execute();\n\n    // Fetch data from result\n    $result = $stmt->get_result();\n    $data = $result->fetch_assoc();\n\n    // If user exists, return username and email\n    if ($data) {\n        return array(\n            'username' => $data['username'],\n            'email' => $data['email']\n        );\n    } else {\n        return null;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n    echo \"Login successful! Username: {$user_data['username']}, Email: {$user_data['email']}\";\n} else {\n    echo \"Invalid email or password.\";\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```\n\nThis updated version is more secure but still requires adaptation to your specific application and security needs.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$hostname = 'your_host';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($hostname, $username, $password, $dbname);\n\n// Check for errors\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($email, $password) {\n    // Hash password (just for demonstration purposes)\n    $hashed_password = md5($password);\n\n    // SQL query to select user from database\n    $query = \"SELECT * FROM users WHERE email = '$email' AND password = '$hashed_password'\";\n    \n    // Execute query and store result\n    $result = $conn->query($query);\n\n    // Check for errors\n    if (!$result) {\n        die(\"Error: \" . $conn->error);\n    }\n\n    // Fetch data from result\n    $data = $result->fetch_assoc();\n\n    // If user exists, return username and email\n    if ($data) {\n        return array(\n            'username' => $data['username'],\n            'email' => $data['email']\n        );\n    } else {\n        return null;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n    echo \"Login successful! Username: {$user_data['username']}, Email: {$user_data['email']}\";\n} else {\n    echo \"Invalid email or password.\";\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```", "```php\n// Configuration settings\n$hostname = 'your_host';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Create connection to database\n$conn = new mysqli($hostname, $username, $password, $dbname);\n\n// Check for errors\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction login_user($email, $password) {\n    // SQL query using prepared statement\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ? AND password = ?\");\n    $stmt->bind_param(\"ss\", $email, $hashed_password);\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Execute query\n    $stmt->execute();\n\n    // Fetch data from result\n    $result = $stmt->get_result();\n    $data = $result->fetch_assoc();\n\n    // If user exists, return username and email\n    if ($data) {\n        return array(\n            'username' => $data['username'],\n            'email' => $data['email']\n        );\n    } else {\n        return null;\n    }\n}\n\n// Example usage:\n$email = 'example@example.com';\n$password = 'password';\n\n$user_data = login_user($email, $password);\n\nif ($user_data) {\n    echo \"Login successful! Username: {$user_data['username']}, Email: {$user_data['email']}\";\n} else {\n    echo \"Invalid email or password.\";\n}\n\n// Close database connection\n$conn->close();\n\n?>\n```"]}
