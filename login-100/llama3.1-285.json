{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\nBelow is an example of a simple user login function written in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n### Database Setup (Example)\n\nAssuming you're using MySQL, create the following table structure:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n```\n\n### PHP Code\n\nCreate a new file called `login.php` and add the following code:\n\n```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Establish database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    \n    if (isset($_POST['login'])) {\n        // Prepare and execute login query\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n        $stmt->bindParam(':username', $_POST['username']);\n        $stmt->bindParam(':password', $_POST['password']);\n        $stmt->execute();\n        \n        // Check if user exists and password matches\n        if ($stmt->rowCount() == 1) {\n            // User logged in successfully, retrieve data\n            $userData = $stmt->fetch();\n            \n            // Session variables for logged-in user\n            $_SESSION['username'] = $userData['username'];\n            $_SESSION['id'] = $userData['id'];\n            \n            echo \"Logged in successfully!\";\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n} catch (PDOException $e) {\n    echo \"Database connection failed: \" . $e->getMessage();\n}\n?>\n```\n\n### Example Usage\n\nTo use this function, create an HTML form with the following fields:\n\n```html\n<form action=\"login.php\" method=\"post\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <button type=\"submit\" name=\"login\">Login</button>\n</form>\n```\n\nWhen the form is submitted, it will send a POST request to `login.php`, which will execute the login function and display a success message if the user's credentials are correct.\n\n### Security Notes\n\n*   Always use prepared statements to prevent SQL injection attacks.\n*   Hash passwords using a secure algorithm like bcrypt or Argon2 before storing them in the database.\n*   Consider implementing additional security measures, such as CSRF protection, to prevent unauthorized access.", "code_blocks": [null, "```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Establish database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    \n    if (isset($_POST['login'])) {\n        // Prepare and execute login query\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username AND password = :password\");\n        $stmt->bindParam(':username', $_POST['username']);\n        $stmt->bindParam(':password', $_POST['password']);\n        $stmt->execute();\n        \n        // Check if user exists and password matches\n        if ($stmt->rowCount() == 1) {\n            // User logged in successfully, retrieve data\n            $userData = $stmt->fetch();\n            \n            // Session variables for logged-in user\n            $_SESSION['username'] = $userData['username'];\n            $_SESSION['id'] = $userData['id'];\n            \n            echo \"Logged in successfully!\";\n        } else {\n            echo \"Invalid username or password.\";\n        }\n    }\n} catch (PDOException $e) {\n    echo \"Database connection failed: \" . $e->getMessage();\n}\n?>\n```", null]}
