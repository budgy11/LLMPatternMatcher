{"prompt": "Create a user login function using php", "llm_output": "Here's an example of a simple user login function in PHP. This script uses a database to store usernames and passwords.\n\n```php\n<?php\n\n// Config file for database connection\nrequire_once 'config.php';\n\nfunction login_user($username, $password) {\n    // Check if username or password is empty\n    if (empty($username) || empty($password)) {\n        return array('error' => 'Both username and password are required.');\n    }\n\n    // Prepare SQL query to get user data from database\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    try {\n        // Execute query with prepared statement\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        // Check if user exists\n        if ($stmt->rowCount() == 0) {\n            return array('error' => 'Invalid username or password.');\n        }\n\n        // Get user data from database\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Hashed password provided by user, hash it and compare with stored one in DB\n        if (password_verify($password, $user_data['password'])) {\n            return array('success' => true, 'username' => $user_data['username']);\n        } else {\n            return array('error' => 'Invalid username or password.');\n        }\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        echo \"Error logging in: \" . $e->getMessage();\n        exit;\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n    // Login successful!\n} elseif (!empty($result['error'])) {\n    echo \"Error: \" . $result['error'];\n}\n?>\n```\n\nTo make the script more robust and prevent SQL injection attacks, we use a prepared statement with parameter binding. This is especially important when dealing with user input.\n\nPlease note that password verification uses `password_verify` which requires PHP 5.5 or later.\n\nThis example also assumes you have already set up a database connection in your config file (`config.php`). If not, please make sure to do so before using this script.\n\n**Database setup:**\n\nTo store usernames and passwords securely, it's recommended to use a library like `password_hash` instead of plain hashing. When creating users, hash their password with `password_hash`. Here is an example:\n\n```php\n// Create user in database\n$username = 'example';\n$password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n$query = \"INSERT INTO users (username, password) VALUES (:username, :password)\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':username', $username);\n$stmt->bindParam(':password', $password);\n$stmt->execute();\n```", "code_blocks": ["```php\n<?php\n\n// Config file for database connection\nrequire_once 'config.php';\n\nfunction login_user($username, $password) {\n    // Check if username or password is empty\n    if (empty($username) || empty($password)) {\n        return array('error' => 'Both username and password are required.');\n    }\n\n    // Prepare SQL query to get user data from database\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    try {\n        // Execute query with prepared statement\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n\n        // Check if user exists\n        if ($stmt->rowCount() == 0) {\n            return array('error' => 'Invalid username or password.');\n        }\n\n        // Get user data from database\n        $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Hashed password provided by user, hash it and compare with stored one in DB\n        if (password_verify($password, $user_data['password'])) {\n            return array('success' => true, 'username' => $user_data['username']);\n        } else {\n            return array('error' => 'Invalid username or password.');\n        }\n    } catch (PDOException $e) {\n        // Handle database connection errors\n        echo \"Error logging in: \" . $e->getMessage();\n        exit;\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = login_user($username, $password);\n\nif ($result['success']) {\n    // Login successful!\n} elseif (!empty($result['error'])) {\n    echo \"Error: \" . $result['error'];\n}\n?>\n```", "```php\n// Create user in database\n$username = 'example';\n$password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n$query = \"INSERT INTO users (username, password) VALUES (:username, :password)\";\n$stmt = $pdo->prepare($query);\n$stmt->bindParam(':username', $username);\n$stmt->bindParam(':password', $password);\n$stmt->execute();\n```"]}
