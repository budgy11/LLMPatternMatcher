{"prompt": "Create a user login function using php", "llm_output": "**User Login Function in PHP**\n=====================================\n\n### Overview\n\nThis is a basic example of a user login function in PHP. It uses a simple database table to store usernames and passwords.\n\n### Code\n```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to the database\nfunction dbConnect() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// User login function\nfunction userLogin($username, $password) {\n  // Create a database connection\n  $conn = dbConnect();\n  \n  // Prepare the SQL query\n  $query = \"SELECT * FROM users WHERE username = ?\";\n  \n  // Bind the parameters\n  $stmt = $conn->prepare($query);\n  $stmt->bind_param(\"s\", $username);\n  \n  // Execute the query\n  $stmt->execute();\n  \n  // Get the result\n  $result = $stmt->get_result();\n  \n  if ($result) {\n    // Check if the username and password match\n    while ($row = $result->fetch_assoc()) {\n      if (password_verify($password, $row['password'])) {\n        return array(\n          'success' => true,\n          'username' => $row['username'],\n          'id' => $row['id']\n        );\n      }\n    }\n  }\n  \n  // If the username or password is incorrect\n  return array('success' => false, 'message' => 'Invalid username or password');\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = userLogin($username, $password);\n\nif ($result['success']) {\n  echo \"Logged in successfully!\";\n} else {\n  echo \"Error: \" . $result['message'];\n}\n?>\n```\n### Notes\n\n* This is a basic example and you should consider using a more secure password hashing algorithm like bcrypt or Argon2.\n* Always use prepared statements to prevent SQL injection attacks.\n* This code assumes that the database table has columns named `username`, `password` (hashed), and `id`.\n* You may need to modify the configuration variables to match your database settings.\n\n### Example Use Case\n\nTo use this function, simply include it in a PHP file and call the `userLogin()` function with the username and password as arguments. The function returns an array with a success flag (`true` or `false`) and additional data (username and ID if successful).", "code_blocks": ["```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to the database\nfunction dbConnect() {\n  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// User login function\nfunction userLogin($username, $password) {\n  // Create a database connection\n  $conn = dbConnect();\n  \n  // Prepare the SQL query\n  $query = \"SELECT * FROM users WHERE username = ?\";\n  \n  // Bind the parameters\n  $stmt = $conn->prepare($query);\n  $stmt->bind_param(\"s\", $username);\n  \n  // Execute the query\n  $stmt->execute();\n  \n  // Get the result\n  $result = $stmt->get_result();\n  \n  if ($result) {\n    // Check if the username and password match\n    while ($row = $result->fetch_assoc()) {\n      if (password_verify($password, $row['password'])) {\n        return array(\n          'success' => true,\n          'username' => $row['username'],\n          'id' => $row['id']\n        );\n      }\n    }\n  }\n  \n  // If the username or password is incorrect\n  return array('success' => false, 'message' => 'Invalid username or password');\n}\n\n// Example usage:\n$username = $_POST['username'];\n$password = $_POST['password'];\n\n$result = userLogin($username, $password);\n\nif ($result['success']) {\n  echo \"Logged in successfully!\";\n} else {\n  echo \"Error: \" . $result['message'];\n}\n?>\n```"]}
