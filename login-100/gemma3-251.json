{"prompt": "Create a user login function using php", "llm_output": "```php\n<?php\n\n// Database credentials (Replace with your actual credentials)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n/**\n * User login function\n *\n * @param string $username\n * @param string $password\n * @return int|false  Returns user ID on success, false on failure\n */\nfunction user_login(string $username, string $password) {\n  // Connect to the database\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT id, username FROM users WHERE username = ? AND password = ? LIMIT 1\";\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt === false) {\n    die(\"Error preparing statement: \" . $conn->error);\n    return false;\n  }\n\n  // Bind parameters\n  $stmt->bind_param(\"ss\", $username, $password);\n\n  // Execute the query\n  if (!$stmt->execute()) {\n    die(\"Error executing query: \" . $stmt->error);\n    return false;\n  }\n\n  // Get the result\n  $result = $stmt->get_result();\n\n  // Check if a user was found\n  if ($result->num_rows == 0) {\n    $stmt->close();\n    return false;\n  }\n\n  // Fetch the user data\n  $user = $result->fetch_assoc();\n\n  // Close the statement and result\n  $stmt->close();\n  $result->close();\n\n  // Return the user ID\n  return $user['id'];\n}\n\n\n// Example usage:\n$username = $_POST['username']; // Get username from form\n$password = $_POST['password'];  // Get password from form\n\nif (isset($username) && isset($password)) {\n  $user_id = user_login($username, $password);\n\n  if ($user_id) {\n    // User is logged in successfully\n    echo \"Welcome, User ID: \" . $user_id . \"<br>\";\n    // You can now redirect the user to a protected page or perform other actions.\n  } else {\n    // Login failed\n    echo \"Invalid username or password.<br>\";\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>User Login</h2>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **Prepared Statements:** This is *crucial* for preventing SQL injection vulnerabilities.  The `prepare()` function and `bind_param()` function create a prepared statement, which separates the SQL code from the data. This prevents malicious users from injecting SQL code into the query, which could compromise your database.\n    * **`LIMIT 1`:**  Added `LIMIT 1` to the SQL query. This significantly improves performance because it stops the query from returning multiple potential matches if they exist.  It also reduces the chance of a successful SQL injection if an attacker tries to manipulate the `id` column.\n* **Error Handling:** Includes robust error handling using `die()` to display informative error messages if the connection fails, the statement preparation fails, or the query execution fails. This is very important for debugging and security.\n* **Clear Function Definition:** Encapsulates the login logic within a well-defined `user_login()` function, making the code more organized and reusable.  The function signature includes type hints (`string`) for improved code clarity and maintainability.\n* **User ID Return:** The function returns the user ID (`$user['id']`) on success, allowing you to easily identify the logged-in user.  Returns `false` on failure.\n* **Example Usage:** Provides a complete example of how to use the `user_login()` function with input from a form.\n* **HTML Form:** Includes a basic HTML form for inputting the username and password, demonstrating how to integrate this function into a web page.\n* **Data Type Hints:** Uses PHP's type hinting (`string`) to improve code clarity and allow for better static analysis.\n* **Resource Closing:**  The `stmt->close()` and `$result->close()` lines explicitly close the statement and result set after use. This is good practice to free up database resources.\n* **Clear Comments:** The code is thoroughly commented to explain each step of the process.\n* **Validation (Important - not implemented in this example for simplicity):**  In a real-world application, you *must* add input validation to the `username` and `password` before calling the `user_login()` function. This should include:\n    * Checking for empty strings.\n    * Validating the format of the username (e.g., allowing only alphanumeric characters and underscores).\n    *  Strong password policies.\n* **Password Hashing (CRITICAL - not implemented in this example):**  **Never** store passwords in plain text in your database. This example *does not* include password hashing for simplicity.  You *must* use a strong password hashing algorithm (like `password_hash()` in PHP) to securely store user passwords.\n\nHow to Use and Extend:\n\n1. **Database Setup:**  Create a MySQL database and a `users` table with at least `id`, `username`, and `password` columns.\n2. **Replace Credentials:**  Update the `$db_host`, `$db_name`, `$db_user`, and `$db_password` variables with your actual database credentials.\n3. **Create the Table:** Make sure the table has the correct columns.\n4. **Populate with Users:** Insert sample users into the `users` table (for testing purposes).  **Remember to hash their passwords before inserting them into the database.**\n5. **Run the Code:** Save the PHP code as a `.php` file (e.g., `login.php`) and access it through your web browser.\n6. **Integrate into Your Application:**  Replace the example form with your own HTML form and integrate the `user_login()` function into your application's logic.\n\n**Important Security Reminder:**  This is a basic example for educational purposes.  **Do not use this code directly in a production environment without implementing proper security measures**, especially password hashing and input validation.  Always consult with a security expert to ensure your application is protected against vulnerabilities.\n", "code_blocks": ["```php\n<?php\n\n// Database credentials (Replace with your actual credentials)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n/**\n * User login function\n *\n * @param string $username\n * @param string $password\n * @return int|false  Returns user ID on success, false on failure\n */\nfunction user_login(string $username, string $password) {\n  // Connect to the database\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n  // Check connection\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n\n  // Prepare the SQL query\n  $sql = \"SELECT id, username FROM users WHERE username = ? AND password = ? LIMIT 1\";\n  $stmt = $conn->prepare($sql);\n\n  if ($stmt === false) {\n    die(\"Error preparing statement: \" . $conn->error);\n    return false;\n  }\n\n  // Bind parameters\n  $stmt->bind_param(\"ss\", $username, $password);\n\n  // Execute the query\n  if (!$stmt->execute()) {\n    die(\"Error executing query: \" . $stmt->error);\n    return false;\n  }\n\n  // Get the result\n  $result = $stmt->get_result();\n\n  // Check if a user was found\n  if ($result->num_rows == 0) {\n    $stmt->close();\n    return false;\n  }\n\n  // Fetch the user data\n  $user = $result->fetch_assoc();\n\n  // Close the statement and result\n  $stmt->close();\n  $result->close();\n\n  // Return the user ID\n  return $user['id'];\n}\n\n\n// Example usage:\n$username = $_POST['username']; // Get username from form\n$password = $_POST['password'];  // Get password from form\n\nif (isset($username) && isset($password)) {\n  $user_id = user_login($username, $password);\n\n  if ($user_id) {\n    // User is logged in successfully\n    echo \"Welcome, User ID: \" . $user_id . \"<br>\";\n    // You can now redirect the user to a protected page or perform other actions.\n  } else {\n    // Login failed\n    echo \"Invalid username or password.<br>\";\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Login</title>\n</head>\n<body>\n\n  <h2>User Login</h2>\n\n  <form method=\"post\" action=\"\">\n    Username: <input type=\"text\" name=\"username\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Login\">\n  </form>\n\n</body>\n</html>\n```"]}
